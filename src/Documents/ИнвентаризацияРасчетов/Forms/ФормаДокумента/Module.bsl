#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	ТекущийОбъект.СчетаУчета.Очистить();
	Для каждого ВыбранныйСчет Из СписокВыбранныхСчетов Цикл
		НоваяСтрокаСчета = ТекущийОбъект.СчетаУчета.Добавить();
		НоваяСтрокаСчета.СчетУчета = ВыбранныйСчет.Значение;
	КонецЦикла;
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДополнительныеРеквизитыСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Задолженность.Очистить();
	ОбновитьДеревоСводныхДанных = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаИнвентаризацииПриИзменении(Элемент)
	ПроверитьПериодИнвентаризации(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияИнвентаризацииПриИзменении(Элемент)
	ПроверитьПериодИнвентаризации(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства	
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ОбновитьДеревоСводныхДанных Тогда
		СформироватьДеревоВыбранныхСчетовУчетаСоСводнымиДанными();
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийОтбораЗадолженности

&НаКлиенте
Процедура ОтборЗадолженностиСчетПриИзменении(Элемент)
	УстановитьОтборЗадолженности("СчетРасчетов", ОтборЗадолженностиСчет);
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗадолженностиДебиторКредиторПриИзменении(Элемент)
	УстановитьОтборЗадолженности("ДебиторКредитор", ОтборЗадолженностиДебиторКредитор);
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗадолженностиВидПриИзменении(Элемент)
	УстановитьОтборЗадолженности("ВидЗадолженности", ОтборЗадолженностиВид);
	Элементы.ЗадолженностьДобавитьДебиторскуюЗадолженность.Доступность = 
		Не ОтборЗадолженностиВид = ПредопределенноеЗначение("Перечисление.ТипыЗадолженности.Кредиторская");
	Элементы.ЗадолженностьДобавитьКредиторскуюЗадолженность.Доступность = 
		Не ОтборЗадолженностиВид = ПредопределенноеЗначение("Перечисление.ТипыЗадолженности.Дебиторская");
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗадолженностиПодтверждениеПриИзменении(Элемент)
	УстановитьОтборЗадолженности("ЕстьПодтвержденнаяСумма", ?(ОтборЗадолженностиПодтверждение = "Подтвержденная", Истина, Неопределено));
	УстановитьОтборЗадолженности("ЕстьНеПодтвержденнаяСумма", ?(ОтборЗадолженностиПодтверждение = "НеПодтвержденная", Истина, Неопределено));
	УстановитьОтборЗадолженности("ЕстьИстекСрокДавности", ?(ОтборЗадолженностиПодтверждение = "ИстекСрокДавности", Истина, Неопределено));
	УстановитьОтборЗадолженности("ЕстьЧастичноПодтвержденнаяСумма", ?(ОтборЗадолженностиПодтверждение = "ЧастичноПодтвержденная", Истина, Неопределено));
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗадолженностиСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыборСчетаУчета(ОтборЗадолженностиСчет, Истина);
		
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСводныхДанныхПоСчетам

&НаКлиенте
Процедура ДеревоСчетовУчетаПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоСводныхДанныхПоСчетам.ТекущиеДанные;	
	Элементы.ДеревоСводныхДанныхПоСчетамЗадолженностьПоСчету.Доступность =
		Не ТекущаяСтрока = Неопределено И Не ТекущаяСтрока.ПолучитьЭлементы().Количество();
	Элементы.ДеревоСводныхДанныхПоСчетамОборотноСальдоваяВедомостьПоСчету.Доступность = Не ТекущаяСтрока = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадолженность

&НаКлиенте
Процедура ЗадолженностьПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.Задолженность.ТекущиеДанные;
	Элементы.ЗадолженностьОборотноСальдоваяВедомостьПоСчетуИСубконто.Доступность =
		Не ТекущаяСтрока = Неопределено И ЗначениеЗаполнено(ТекущаяСтрока.СчетРасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПриИзменении(Элемент)
	ОбновитьДеревоСводныхДанных = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьДеревоСводныхДанных = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПослеУдаления(Элемент)
	ОбновитьДеревоСводныхДанных = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПодтвержденоПриИзменении(Элемент)
	ПересчитатьСуммыВСтроке(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьНеПодтвержденоПриИзменении(Элемент)
	ПересчитатьСуммыВСтроке(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьИстекСрокДавностиПриИзменении(Элемент)
	ПересчитатьСуммыВСтроке(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьВсегоДебиторскаяПриИзменении(Элемент)
	ПересчитатьСуммыВСтроке(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьВсегоКредиторскаяПриИзменении(Элемент)
	ПересчитатьСуммыВСтроке(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыборСчетаУчета(Элементы.Задолженность.ТекущиеДанные.СчетРасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьСчетПриИзменении(Элемент)
	Элементы.ЗадолженностьОборотноСальдоваяВедомостьПоСчетуИСубконто.Доступность =
		ЗначениеЗаполнено(Элементы.Задолженность.ТекущиеДанные.СчетРасчетов);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнвентаризационнаяКомиссия

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Должность) Тогда
			ТекущиеДанные.Должность = ДолжностьПоФИОФизЛица(ТекущиеДанные.ФИОПолные, Объект.Организация, Объект.Дата);
		КонецЕсли;
		ПроверитьФлагиПредседателя(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		ПроверитьФлагиПредседателя(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФИОПолные = "";
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.Председатель = Ложь;
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.Должность = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		СтрокиФЛ = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФИОПолные", 
													Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФИОПолные));
		Если СтрокиФЛ.Количество() > 1 Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru = 'Физическое лицо %физлицо% уже включено в состав комиссии!';
										|en = 'Individual %физлицо% is already included in the commission.'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%физлицо%", 
												Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФИОПолные);
			ПоказатьПредупреждение( , ТекстПредупреждения, , Заголовок);
			Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФИОПолные = Неопределено;
			ТекущийЭлемент = Элементы.ИнвентаризационнаяКомиссияФизЛицо;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокДоВыбора = Объект.ИнвентаризационнаяКомиссия.Количество();
	ДолжностиВыбранныхФизЛиц = ДолжностиВыбранныхФизЛиц(ВыбранноеЗначение, Объект.Организация, Объект.Дата);
	Для Каждого ВыбранныйЭлемент Из ВыбранноеЗначение Цикл
		
		СтрокиФизЛица = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФИОПолные", Строка(ВыбранныйЭлемент)));
		Если СтрокиФизЛица.Количество() = 0 Тогда
			СтрокаФизЛица = Объект.ИнвентаризационнаяКомиссия.Добавить();
			СтрокаФизЛица.ФИОПолные = ВыбранныйЭлемент;
			СтрокаФизЛица.Должность = ДолжностиВыбранныхФизЛиц.Получить(ВыбранныйЭлемент);
		Иначе
			СтрокаФизЛица = СтрокиФизЛица[0];
			ИндексСтроки = Объект.ИнвентаризационнаяКомиссия.Индекс(СтрокаФизЛица);
			ИмяПоля = "Объект.ИнвентаризационнаяКомиссия[" + Формат(ИндексСтроки, "ЧДЦ=0; ЧГ=") + "].ФИОПолные"; 
			ТекстСообщения = НСтр("ru = 'Физическое лицо %1 уже добавлено в список комиссии';
									|en = 'The %1 individual is already included in the commission list'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыбранныйЭлемент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяПоля);
		КонецЕсли; 
		Элементы.ИнвентаризационнаяКомиссия.ТекущаяСтрока = СтрокаФизЛица;
	
	КонецЦикла;
	
	Если СтрокДоВыбора = 0 И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;  
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияФизЛицоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ИнвентаризационнаяКомиссияФизЛицоАвтоПодборНаСервере(Текст, ДанныеВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияДолжностьАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ИнвентаризационнаяКомиссияДолжностьАвтоПодборНаСервере(Текст, ДанныеВыбора);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПерезаполнитьЗадолженность(Команда)
	
	МассивПроверок = Новый Массив;
	МассивПроверок.Добавить(Новый ОписаниеОповещения("ПроверитьВозможностьЗаполнения", ЭтотОбъект));
	МассивПроверок.Добавить(Новый ОписаниеОповещения("ПроверитьАктуальностьДанных", ЭтотОбъект));
	МассивПроверок.Добавить(Новый ОписаниеОповещения("ПроверитьЗаполненностьДанных", ЭтотОбъект));
	ЗаполнитьЗадолженность(Новый Структура("МассивОбработчиковПроверок, ОчищатьЗадолженность", МассивПроверок, Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ЗаписатьИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСчетаУчета(Команда)
	
	СчетаУчета = СписокВыбранныхСчетов.ВыгрузитьЗначения();
	ПараметрыФормыНастроекСчетов = Новый Структура("ВыбранныеСчетаУчета", СчетаУчета);
	ОповещениеНастроитьСчетаУчетаЗавершение = Новый ОписаниеОповещения("НастроитьСчетаУчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ИнвентаризацияРасчетов.Форма.ФормаНастроекСчетовУчета", ПараметрыФормыНастроекСчетов, ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,,, ОповещениеНастроитьСчетаУчетаЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКомиссии(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе,МножественныйВыбор,РежимВыбора", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаСписка", ПараметрыФормы, Элементы.ИнвентаризационнаяКомиссия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДебиторскуюЗадолженность(Команда)
	НоваяСтрока = Объект.Задолженность.Добавить();
	НоваяСтрока.СчетРасчетов = ОтборЗадолженностиСчет;
	НоваяСтрока.ДебиторКредитор = ОтборЗадолженностиДебиторКредитор;
	НоваяСтрока.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ТипыЗадолженности.Дебиторская");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКредиторскуюЗадолженность(Команда)
	НоваяСтрока = Объект.Задолженность.Добавить();
	НоваяСтрока.СчетРасчетов = ОтборЗадолженностиСчет;
	НоваяСтрока.ДебиторКредитор = ОтборЗадолженностиДебиторКредитор;
	НоваяСтрока.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ТипыЗадолженности.Кредиторская");
КонецПроцедуры

&НаКлиенте
Процедура ОборотноСальдоваяВедомостьПоСчету(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоСводныхДанныхПоСчетам.ТекущиеДанные;	
	Если ТекущаяСтрока = Неопределено Тогда    
		ТекстСообщения = НСтр("ru = 'Для выполнения команды требуется выбрать строку табличной части.';
								|en = 'To execute the command, select a table row.'");
		ПоказатьПредупреждение(,ТекстСообщения);
	Иначе	
         ОборотноСальдоваяВедомость(ТекущаяСтрока.Счет); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотноСальдоваяВедомостьПоСчетуИСубконто(Команда)
	
	ТекущаяСтрока = Элементы.Задолженность.ТекущиеДанные;          
	Если ТекущаяСтрока = Неопределено Тогда     
		ТекстСообщения = НСтр("ru = 'Для выполнения команды требуется выбрать строку табличной части.';
								|en = 'To execute the command, select a table row.'");
		ПоказатьПредупреждение(,ТекстСообщения);
	Иначе	
	     ОборотноСальдоваяВедомость(ТекущаяСтрока.СчетРасчетов, ТекущаяСтрока.ДебиторКредитор);  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоСчету(Команда)
	
	Если Элементы.ДеревоСводныхДанныхПоСчетам.ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ОтборЗадолженностиСчет = Элементы.ДеревоСводныхДанныхПоСчетам.ТекущиеДанные.Счет;
	УстановитьОтборЗадолженности("СчетРасчетов", ОтборЗадолженностиСчет);
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗадолженность;
	
КонецПроцедуры

#Область СтандартныеПодсистемы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ЗадолженностьВсегоДебиторская"].Имя);	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.Задолженность.ВидЗадолженности",
		ПредопределенноеЗначение("Перечисление.ТипыЗадолженности.Дебиторская"), ВидСравненияКомпоновкиДанных.НеРавно);	
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не редактируется';
																|en = 'Not edited'"));
		
	Элемент = УсловноеОформление.Элементы.Добавить();	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ЗадолженностьВсегоКредиторская"].Имя);	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.Задолженность.ВидЗадолженности",
		ПредопределенноеЗначение("Перечисление.ТипыЗадолженности.Кредиторская"), ВидСравненияКомпоновкиДанных.НеРавно);	
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не редактируется';
																|en = 'Not edited'"));
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	МассивВыбранныхСчетов = Объект.СчетаУчета.Выгрузить(, "СчетУчета").ВыгрузитьКолонку("СчетУчета");
	ВыборНовыхСчетовУчета(ЭтотОбъект, МассивВыбранныхСчетов);
		
	СформироватьДеревоВыбранныхСчетовУчетаСоСводнымиДанными();
	
	ЗаполнитьДополнительныеРеквизитыСтрок();
	
КонецПроцедуры

#Область РаботаСДеревомСчетовУчета

&НаКлиенте
Процедура НастроитьСчетаУчетаЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		ВыборНовыхСчетовУчета(ЭтотОбъект, Результат);
		МассивПроверок = Новый Массив;
		МассивПроверок.Добавить(Новый ОписаниеОповещения("ПроверитьВозможностьЗаполнения", ЭтотОбъект));
		ЗаполнитьЗадолженность(Новый Структура("МассивОбработчиковПроверок, ОчищатьЗадолженность", МассивПроверок, Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыборНовыхСчетовУчета(Форма, Знач МассивВыбранныхСчетовУчета)
	
	Форма.СписокВыбранныхСчетов.ЗагрузитьЗначения(МассивВыбранныхСчетовУчета);
		
	ОтборПоСпискуСчетов = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивВыбранныхСчетовУчета));
	ПараметрыВыбораСчета = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборПоСпискуСчетов));
	Форма.Элементы.ОтборЗадолженностиСчет.ПараметрыВыбора = ПараметрыВыбораСчета;
	Форма.Элементы.ЗадолженностьСчет.ПараметрыВыбора = ПараметрыВыбораСчета;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоВыбранныхСчетовУчетаСоСводнымиДанными()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияРасчетовЗадолженность.ДебиторКредитор,
	|	ИнвентаризацияРасчетовЗадолженность.СчетРасчетов КАК СчетРасчетов,
	|	ИнвентаризацияРасчетовЗадолженность.Подтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.НеПодтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.ИстекСрокДавности,
	|	ИнвентаризацияРасчетовЗадолженность.ВидЗадолженности
	|ПОМЕСТИТЬ ТаблицаЗадолженности
	|ИЗ
	|	&ТаблицаЗадолженности КАК ИнвентаризацияРасчетовЗадолженность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Наименование,
	|	СУММА(ВЫБОР
	|		КОГДА Задолженность.СчетРасчетов ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК КоличествоСтрок,
	|	СУММА(ВЫБОР
	|		КОГДА Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|			ТОГДА ЕСТЬNULL(Задолженность.Подтверждено + Задолженность.НеПодтверждено, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК ДебиторскаяЗадолженность,
	|	СУММА(ВЫБОР
	|		КОГДА Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|			ТОГДА ЕСТЬNULL(Задолженность.Подтверждено + Задолженность.НеПодтверждено, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КредиторскаяЗадолженность,
	|	СУММА(ЕСТЬNULL(Задолженность.Подтверждено, 0)) КАК Подтверждено,
	|	СУММА(ЕСТЬNULL(Задолженность.НеПодтверждено, 0)) КАК НеПодтверждено,
	|	СУММА(ЕСТЬNULL(Задолженность.ИстекСрокДавности, 0)) КАК ИстекСрокДавности
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗадолженности КАК Задолженность
	|		ПО (Задолженность.СчетРасчетов = Хозрасчетный.Ссылка)
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаУчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Ссылка,
	|	Хозрасчетный.Наименование
	|ИТОГИ
	|	СУММА(КоличествоСтрок),
	|	СУММА(ДебиторскаяЗадолженность),
	|	СУММА(КредиторскаяЗадолженность),
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено)
	|ПО
	|	Счет ТОЛЬКО ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("СчетаУчета", СписокВыбранныхСчетов.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ТаблицаЗадолженности", Объект.Задолженность.Выгрузить());
	
	ДеревоСчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	СтрокаПустогоСчета = ДеревоСчетов.Строки.Найти(ПланыСчетов.Хозрасчетный.ПустаяСсылка(), "Счет");
	
	Если НЕ СтрокаПустогоСчета = Неопределено Тогда
		Для каждого ПодчиненнаяСтрокаПустогоСчета Из СтрокаПустогоСчета.Строки Цикл
			НоваяСтрока = ДеревоСчетов.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрокаПустогоСчета);
		КонецЦикла;
		ДеревоСчетов.Строки.Удалить(СтрокаПустогоСчета);
	КонецЕсли;

	ИтогВсегоДебиторская = ДеревоСчетов.Строки.Итог("ДебиторскаяЗадолженность");
	ИтогВсегоКредиторская = ДеревоСчетов.Строки.Итог("КредиторскаяЗадолженность");
	
	ЗначениеВРеквизитФормы(ДеревоСчетов, "ДеревоСводныхДанныхПоСчетам");
	
	ОбновитьДеревоСводныхДанных = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиПередЗаполнениемЗадолженности

&НаКлиенте
Процедура ЗаполнитьЗадолженность(ПараметрыЗаполнения, Отказ = Ложь)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.МассивОбработчиковПроверок.Количество() Тогда
		ТекущийОбработчикПроверки = ПараметрыЗаполнения.МассивОбработчиковПроверок.Получить(0);
		ВыполнитьОбработкуОповещения(ТекущийОбработчикПроверки, ПараметрыЗаполнения);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДолгиНаКлиенте(ПараметрыЗаполнения.ОчищатьЗадолженность);
	
КонецПроцедуры

// Проверяет готовность документа к автоматическому заполнению данными учета
//
&НаКлиенте
Процедура ПроверитьВозможностьЗаполнения(ПараметрыЗаполнения, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыЗаполнения.МассивОбработчиковПроверок.Удалить(0);

	ТекстПредупреждения = "";
	Если СписокВыбранныхСчетов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не задан список счетов, по которым должен формироваться документ!';
									|en = 'List of accounts according to which the document should be generated is not specified. '");
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстПредупреждения = НСтр("ru = 'Организация, по которой необходимо формировать документ, не заполнена!';
									|en = 'Company to generate the document for is not specified.'");			
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не указана дата, на которую необходимо формировать документ!';
									|en = 'Date on which the document should be generated is not specified.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение( , ТекстПредупреждения, , Заголовок);
	КонецЕсли;
	
	Отказ = ЗначениеЗаполнено(ТекстПредупреждения);
	
	ЗаполнитьЗадолженность(ПараметрыЗаполнения, Отказ);

КонецПроцедуры

// Проверяет есть ли невыполненные операции по восстановлению расчетов с контрагентами и отражению документов в регл. учете.
//
&НаКлиенте
Процедура ПроверитьАктуальностьДанных(ПараметрыЗаполнения, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыЗаполнения.МассивОбработчиковПроверок.Удалить(0);
	
	ПериодОтчета = ?(ЗначениеЗаполнено(Объект.ДатаОкончанияИнвентаризации), Объект.ДатаОкончанияИнвентаризации, Объект.Дата);
	ТекстПредупрежденияНеАктуальныхДанных = ПредупреждениеНеАктуальныхДанных(Объект.Организация, ПериодОтчета);
	
	ВопросПроверки(ТекстПредупрежденияНеАктуальныхДанных, ПараметрыЗаполнения);
	
КонецПроцедуры

// Проверяет заполненность табличной части "Задолженность"
//
&НаКлиенте
Процедура ПроверитьЗаполненностьДанных(ПараметрыЗаполнения, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыЗаполнения.МассивОбработчиковПроверок.Удалить(0);

	ТекстПредупрежденияЗаполненныхДанных = "";
	Если Объект.Задолженность.Количество() > 0 И ПараметрыЗаполнения.ОчищатьЗадолженность Тогда
		ТекстПредупрежденияЗаполненныхДанных = НСтр("ru = 'Перед заполнением все строки задолженности контрагентов будут удалены.';
													|en = 'Before population, all lines of counterparty debts will be removed.'")
			+ Символы.ПС + НСтр("ru = 'Продолжить?';
								|en = 'Continue?'");
	КонецЕсли;

	ВопросПроверки(ТекстПредупрежденияЗаполненныхДанных, ПараметрыЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПроверки(ТекстВопроса, ПараметрыЗаполнения)
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		ОповещениеОтветНаВопросПроверкиЗавершение = 
			Новый ОписаниеОповещения("ОтветНаВопросПроверкиЗавершение", ЭтотОбъект, ПараметрыЗаполнения);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Продолжить",  НСтр("ru = 'Продолжить';
											|en = 'Continue'"));
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена';
										|en = 'Cancel'"));
		ПоказатьВопрос(ОповещениеОтветНаВопросПроверкиЗавершение, ТекстВопроса, Кнопки, , "Продолжить");
		
	Иначе
		
		ЗаполнитьЗадолженность(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросПроверкиЗавершение(Результат, ПараметрыЗаполнения) Экспорт
	
	Отказ = Не Результат = "Продолжить";
	ЗаполнитьЗадолженность(ПараметрыЗаполнения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеЗадолженностей

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыСтрок()
	
	ВидДебиторскойЗадолженности = ПредопределенноеЗначение("Перечисление.ТипыЗадолженности.Дебиторская");
	ВидКредиторскойЗадолженности = ПредопределенноеЗначение("Перечисление.ТипыЗадолженности.Кредиторская");
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Задолженность Цикл
		Всего = СтрокаТабличнойЧасти.Подтверждено + СтрокаТабличнойЧасти.НеПодтверждено;
		СтрокаТабличнойЧасти.ВсегоДебиторская = ?(СтрокаТабличнойЧасти.ВидЗадолженности = ВидДебиторскойЗадолженности, Всего, 0);
		СтрокаТабличнойЧасти.ВсегоКредиторская = ?(СтрокаТабличнойЧасти.ВидЗадолженности = ВидКредиторскойЗадолженности, Всего, 0);
		СтрокаТабличнойЧасти.ЕстьПодтвержденнаяСумма = (СтрокаТабличнойЧасти.Подтверждено = Всего);
		СтрокаТабличнойЧасти.ЕстьНеПодтвержденнаяСумма = СтрокаТабличнойЧасти.НеПодтверждено > 0;
		СтрокаТабличнойЧасти.ЕстьИстекСрокДавности = СтрокаТабличнойЧасти.ИстекСрокДавности > 0;
		СтрокаТабличнойЧасти.ЕстьЧастичноПодтвержденнаяСумма =
			СтрокаТабличнойЧасти.Подтверждено > 0 И НЕ СтрокаТабличнойЧасти.ЕстьПодтвержденнаяСумма;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолгиНаКлиенте(ОчищатьЗадолженность)
	
	Если ОчищатьЗадолженность Тогда
		Объект.Задолженность.Очистить();
	КонецЕсли;
	
	// запускаем фоновое задание
	РезультатВыполнения = ЗаполнитьДолгиНаСервере();
	
	Если Не РезультатВыполнения.РезультатОбработан Тогда
		ОповещениеОЗавершенииФоновогоЗадания = Новый ОписаниеОповещения("ЗаполнитьДолгиЗавершение", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершенииФоновогоЗадания, ПараметрыОжидания);
	КонецЕсли;
		
КонецПроцедуры

// Заполняет таблицу значений задолженностью
&НаСервере
Функция ЗаполнитьДолгиНаСервере()
	
	ВыполняемыйМетод = "Документы.ИнвентаризацияРасчетов.ЗаполнитьЗадолженностьПоОстаткам";
	
	ПараметрыЗаполнения = Документы.ИнвентаризацияРасчетов.ПараметрыЗаданияЗаполненияВзаиморасчетов(Объект);
	ПараметрыЗаполнения.СчетаРасчетов = СписокВыбранныхСчетов.ВыгрузитьЗначения();
	КолонкиДляВыгрузки = "СчетРасчетов, ДебиторКредитор, Подтверждено, НеПодтверждено, ИстекСрокДавности, ВидЗадолженности,
	| ВсегоДебиторская, ВсегоКредиторская";
	ПараметрыЗаполнения.ТаблицаЗадолженности = Объект.Задолженность.Выгрузить(, КолонкиДляВыгрузки);
	
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыФоновогоЗадания.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнить данными расчетов с дебиторами / кредиторами';
																|en = 'Fill in by data of settlements with debtors / creditors'");
	ПараметрыФоновогоЗадания.КлючФоновогоЗадания = "ЗаполнениеВзаиморасчетовДляИнвентаризации";
	ПараметрыФоновогоЗадания.ОжидатьЗавершение = 1;
	
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗаполнения, ПараметрыФоновогоЗадания);
			
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		ПрочитатьРезультатЗаполнения(РезультатФоновогоЗадания.АдресРезультата);
		РезультатФоновогоЗадания.Вставить("РезультатОбработан", Истина);
	Иначе
		РезультатФоновогоЗадания.Вставить("РезультатОбработан", Ложь);
	КонецЕсли;
	
	// Передадим данные на клиент.
	Возврат РезультатФоновогоЗадания;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьДолгиЗавершение(РезультатВыполнения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(РезультатВыполнения.АдресРезультата) И Не РезультатВыполнения.Статус = "Ошибка" Тогда
			
			ПрочитатьРезультатЗаполнения(РезультатВыполнения.АдресРезультата);
			
		Иначе
			
			ТекстОповещения = НСтр("ru = 'Заполнение задолженности не выполнено';
									|en = 'Debt is not populated'");
			ТекстПояснения = НСтр("ru = 'Заполнение задолженности завершено с ошибкой, по причине: %1';
									|en = 'Debt is populated with an error due to: %1'");
			ТекстПояснения = СтрШаблон(ТекстПояснения, РезультатВыполнения.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ТекстПояснения, , ТекстОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРезультатЗаполнения(АдресРезультата)
	
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Объект.Задолженность.Загрузить(ДанныеЗаполнения);
	
	СформироватьДеревоВыбранныхСчетовУчетаСоСводнымиДанными();
	
	УдалитьИзВременногоХранилища(АдресРезультата);
	АдресРезультата = "";
	
КонецПроцедуры

#КонецОбласти

#Область АктуальностьДанных

&НаСервереБезКонтекста
Функция ВзаиморасчетыНеАктуальны(Организация, Дата)
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоляОтбора = Новый Структура("Организация, Партнер, Контрагент, Договор", Организация);
	АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
	АналитикиРасчета.АналитикиУчетаПоПартнерам = РаспределениеВзаиморасчетовВызовСервера.МассивКлючейПартнеровПоОтбору(ПоляОтбора);
	
	ТребуетсяПереоценка = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценкаВзаиморасчетов(Организация, Дата, АналитикиРасчета.АналитикиУчетаПоПартнерам);
	
	НачалоРасчета = ?(ТребуетсяПереоценка, Дата(1,1,1), РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(Дата, АналитикиРасчета));
	
	Возврат ЗначениеЗаполнено(НачалоРасчета) И НачалоРасчета <= Дата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтражениеВРеглУчетеНеАктуально(Организация, Дата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(ЗакрытиеМесяцаСервер.ТекстЗапросаСостояниеОтраженияДокументов());
	Запрос.УстановитьПараметр("КонецПериода", Дата);
	Запрос.УстановитьПараметр("МассивОрганизаций",Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Ложь);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ЕстьОжидающиеОтраженияНеПроверенные = НЕ МассивРезультатов[3].Пустой();
	ЕстьОжидающиеОтражения = НЕ МассивРезультатов[1].Пустой();
	ЕстьНеОтраженныеВУчете = НЕ МассивРезультатов[2].Пустой();
	
	Возврат ЕстьНеОтраженныеВУчете ИЛИ ЕстьОжидающиеОтражения ИЛИ ЕстьОжидающиеОтраженияНеПроверенные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредупреждениеНеАктуальныхДанных(Организация, Дата)
	
	ТекстПредупрежденияНеАктуальныхДанных = "";
	
	Если ВзаиморасчетыНеАктуальны(Организация, Дата) Тогда
		Предупреждение = НСтр("ru = 'Распределение взаиморасчетов не выполнено';
								|en = 'Mutual settlements allocation failed'");
		ТекстПредупрежденияНеАктуальныхДанных = ТекстПредупрежденияНеАктуальныхДанных + Предупреждение;
	КонецЕсли;
	Если ОтражениеВРеглУчетеНеАктуально(Организация, Дата) Тогда
		Если ЗначениеЗаполнено(ТекстПредупрежденияНеАктуальныхДанных) Тогда
			Предупреждение = НСтр("ru = 'не все документы отражены в регл. учете';
									|en = 'not all documents are recorded in compl. accounting'");
			ТекстПредупрежденияНеАктуальныхДанных = ТекстПредупрежденияНеАктуальныхДанных + ", " + Предупреждение;
		Иначе
			Предупреждение = НСтр("ru = 'Не все документы отражены в регл. учете';
									|en = 'not all documents are recorded in compl. accounting'");
			ТекстПредупрежденияНеАктуальныхДанных = ТекстПредупрежденияНеАктуальныхДанных + Предупреждение;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупрежденияНеАктуальныхДанных) Тогда
		Вопрос = НСтр("ru = 'Продолжить заполнение?';
						|en = 'Continue filling?'");
		ТекстПредупрежденияНеАктуальныхДанных = ТекстПредупрежденияНеАктуальныхДанных + "." + Символы.ПС + Вопрос;
	КонецЕсли;
	
	Возврат ТекстПредупрежденияНеАктуальныхДанных;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции_ИнвентаризационнаяКомиссия

&НаКлиенте
Процедура ПроверитьФлагиПредседателя(СтрокаТЧ)

	СтрокаПредседателя = ?(СтрокаТЧ <> Неопределено И СтрокаТЧ.Председатель, СтрокаТЧ, Неопределено);

	Для Каждого СтрокаКомиссии Из Объект.ИнвентаризационнаяКомиссия Цикл

		Если СтрокаКомиссии.Председатель И СтрокаПредседателя = Неопределено Тогда
			СтрокаПредседателя = СтрокаКомиссии;
			Продолжить;
		КонецЕсли;

		Если СтрокаКомиссии.Председатель И СтрокаКомиссии <> СтрокаПредседателя Тогда
			СтрокаКомиссии.Председатель = Ложь;
		КонецЕсли;

	КонецЦикла;

	Если СтрокаПредседателя = Неопределено И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИнвентаризационнаяКомиссияФизЛицоАвтоПодборНаСервере(Текст, ДанныеВыбора)
	Параметры = Новый Структура("СтрокаПоиска", Текст);
	ДанныеВыбора = Справочники.ФизическиеЛица.ПолучитьДанныеВыбора(Параметры);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИнвентаризационнаяКомиссияДолжностьАвтоПодборНаСервере(Текст, ДанныеВыбора)
	Параметры = Новый Структура("СтрокаПоиска", Текст);
	ДанныеВыбора = Справочники.Должности.ПолучитьДанныеВыбора(Параметры);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДолжностьПоФИОФизЛица(ФИО, Организация, Дата)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Наименование = &Наименование
	|	И НЕ ФизическиеЛица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ЭтоГруппа";
	Запрос.УстановитьПараметр("Наименование", ФИО);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ДолжностиВыбранныхФизЛиц(Выборка.Ссылка, Организация, Дата).Получить(Выборка.Ссылка);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДолжностиВыбранныхФизЛиц(МассивФизическихЛиц, Организация, Дата)
	
	СоответствиеВозврата = Новый Соответствие;
	ТаблицаСотрудников = Новый ТаблицаЗначений();
	ИнтеграцияБЗК.ЗаполнитьОсновныхСотрудниковФизическихЛиц(ТаблицаСотрудников,МассивФизическихЛиц, Истина, Организация, Дата);
	Если ТаблицаСотрудников.Количество() Тогда
		Сотрудники = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
		СписокКадровыхДанных = "Должность, ФизическоеЛицо";
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, СписокКадровыхДанных, Дата);
		Для каждого КадровыеДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
			СоответствиеВозврата.Вставить(КадровыеДанныеСотрудника.ФизическоеЛицо, КадровыеДанныеСотрудника.Должность);
		КонецЦикла;
	КонецЕсли;		
	
	Возврат СоответствиеВозврата;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПересчитатьСуммыВСтроке(ИмяЭлемента)
	
	СтрокаТаблицы = Элементы.Задолженность.ТекущиеДанные;
	// Задолженность может быть либо дебиторской, либо кредиторской, значит одна из сумм будет = 0:
	СуммаВсего = СтрокаТаблицы.ВсегоДебиторская + СтрокаТаблицы.ВсегоКредиторская;
	
	Если ИмяЭлемента = "ЗадолженностьПодтверждено" Тогда
		СтрокаТаблицы.НеПодтверждено = Макс(СуммаВсего - СтрокаТаблицы.Подтверждено, 0);
	ИначеЕсли НЕ ИмяЭлемента = "ИстекСрокДавности" Тогда
		СтрокаТаблицы.Подтверждено = Макс(СуммаВсего - СтрокаТаблицы.НеПодтверждено, 0);
	КонецЕсли;
	
	Если СуммаВсего < СтрокаТаблицы.Подтверждено + СтрокаТаблицы.НеПодтверждено Тогда
		Если СтрокаТаблицы.ВсегоДебиторская > 0 Тогда
			СтрокаТаблицы.ВсегоДебиторская = СтрокаТаблицы.Подтверждено + СтрокаТаблицы.НеПодтверждено;
		Иначе
			СтрокаТаблицы.ВсегоКредиторская = СтрокаТаблицы.Подтверждено + СтрокаТаблицы.НеПодтверждено;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицы.ИстекСрокДавности > СуммаВсего Тогда

		// Ошибка выведется только однократно, после чего поле "ИстекСрокДавности" заполнится правильными данными.
		// В обработке проверки заполнения это проверять не нужно.
		ИндексСтроки = Объект.Задолженность.Индекс(СтрокаТаблицы);
		ИмяПоля = "Задолженность" + "[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=") + "].ИстекСрокДавности"; 
		ТекстСообщения = НСтр("ru = 'Сумма с истекшим сроком давности не может быть больше общей суммы задолженности';
								|en = 'Expired amount cannot be greater than total debt amount'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяПоля);

		СтрокаТаблицы.ИстекСрокДавности = СуммаВсего;

	КонецЕсли;
	
	ОбновитьДеревоСводныхДанных = Истина;

	СтрокаТаблицы.ЕстьПодтвержденнаяСумма = (СтрокаТаблицы.Подтверждено = СуммаВсего);
	СтрокаТаблицы.ЕстьНеПодтвержденнаяСумма = СтрокаТаблицы.НеПодтверждено > 0;
	СтрокаТаблицы.ЕстьИстекСрокДавности = СтрокаТаблицы.ИстекСрокДавности > 0;
	СтрокаТаблицы.ЕстьЧастичноПодтвержденнаяСумма = СтрокаТаблицы.Подтверждено > 0 И НЕ СтрокаТаблицы.ЕстьПодтвержденнаяСумма;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборЗадолженности(Ключ, Значение)
	СтруктураОтбора = Новый Структура;
	Если Элементы.Задолженность.ОтборСтрок <> Неопределено Тогда
		Для каждого СуществующийОтбор Из Элементы.Задолженность.ОтборСтрок Цикл
			СтруктураОтбора.Вставить(СуществующийОтбор.Ключ, СуществующийОтбор.Значение);
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(Значение) Тогда
		СтруктураОтбора.Вставить(Ключ, Значение);
	Иначе
		Если СтруктураОтбора.Свойство(Ключ) Тогда
			СтруктураОтбора.Удалить(Ключ);
		КонецЕсли;
	КонецЕсли;
	Элементы.Задолженность.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ОборотноСальдоваяВедомость(Счет, Субконто = Неопределено)
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		ТекстПредупреждения = НСтр("ru = 'Для данной строки не указан счет, оборотно-сальдовая ведомость сформирована не будет!';
									|en = 'Account for this line is not specified, trial balance will not be generated.'");
		ПоказатьПредупреждение( , ТекстПредупреждения, , Заголовок);
		Возврат;
	КонецЕсли;
	
	// Инициализируем параметры расшифровки
	НастройкиРасшифровки = Новый Структура();
	
	// Инициализируем пользовательские настройки
	ПериодОтчета = ?(ЗначениеЗаполнено(Объект.ДатаОкончанияИнвентаризации), Объект.ДатаОкончанияИнвентаризации, Объект.Дата);
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ПоказательБУ", 	Истина);
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Организация", 		Объект.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода",	ПериодОтчета);
	ДополнительныеСвойства.Вставить("КонецПериода", 	ПериодОтчета);
	ДополнительныеСвойства.Вставить("ПоСубсчетам", 		Истина);
	
	// Инициализируем отборы
	ПользовательскиеОтборыДляСчета = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборыДляСчета.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	РегистрацияВНалоговомОргане = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РегистрацияВНалоговомОргане");
	НомерСубконто = 1;
	Если ДанныеСчета.ВидСубконто2 = РегистрацияВНалоговомОргане Тогда
		НомерСубконто = 2;
	ИначеЕсли ДанныеСчета.ВидСубконто3 = РегистрацияВНалоговомОргане Тогда
		НомерСубконто = 3;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Субконто) И ТипЗнч(Субконто) <> Тип("Строка") Тогда
		// Субконто задано, в отчет по счету добавляем отбор по субконто
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборыДляСчета, "Субконто" + НомерСубконто, Субконто);
	КонецЕсли;
	
	// Добавляем группировку по субконто
	ГруппировкаСубконто = Новый Структура;
	ГруппировкаСубконто.Вставить("Поле",           "Субконто" + НомерСубконто);
	ГруппировкаСубконто.Вставить("Использование",  Истина);
	ГруппировкаСубконто.Вставить("ТипГруппировки", 0);
	
	// Группировка передается в отчет как массив структур
	// Элемент массива содержит структуру описывающую строку таблицы "Группировка" стандартного отчета.
	ДополнительныеСвойства.Вставить("Группировка", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ГруппировкаСубконто));
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСчетаУчета(НачальноеЗначениеВыбора, УстанавливаетсяОтбор = Ложь)
	
	Если СписокВыбранныхСчетов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не задан список счетов, по которым должен формироваться документ!';
									|en = 'List of accounts according to which the document should be generated is not specified.'");
		ПоказатьПредупреждение( , ТекстПредупреждения, , Заголовок);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыНастроекСчетов = Новый Структура;
	ПараметрыФормыНастроекСчетов.Вставить("ВыбранныеСчетаУчета", СписокВыбранныхСчетов.ВыгрузитьЗначения());
	ПараметрыФормыНастроекСчетов.Вставить("РежимВыбора", Истина);
	ПараметрыФормыНастроекСчетов.Вставить("ТекущееЗначение", НачальноеЗначениеВыбора);

	ОповещениеРедактироватьСчетаУчетаЗавершение = Новый ОписаниеОповещения("ВыборСчетаУчетаЗавершение", ЭтотОбъект, УстанавливаетсяОтбор);
	
	ОткрытьФорму("Документ.ИнвентаризацияРасчетов.Форма.ФормаНастроекСчетовУчета", ПараметрыФормыНастроекСчетов, ЭтотОбъект,
		УникальныйИдентификатор,,, ОповещениеРедактироватьСчетаУчетаЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборСчетаУчетаЗавершение(Результат, УстанавливаетсяОтбор) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		Если УстанавливаетсяОтбор Тогда
			
			ОтборЗадолженностиСчет = Результат;
			УстановитьОтборЗадолженности("СчетРасчетов", ОтборЗадолженностиСчет);
			
		Иначе
			
			Элементы.Задолженность.ТекущиеДанные.СчетРасчетов = Результат;
			Элементы.ЗадолженностьОборотноСальдоваяВедомостьПоСчетуИСубконто.Доступность = ЗначениеЗаполнено(Результат);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПериодИнвентаризации(ИзмененныйРеквизит)
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаИнвентаризации) И ЗначениеЗаполнено(Объект.ДатаОкончанияИнвентаризации)
		И Объект.ДатаНачалаИнвентаризации > Объект.ДатаОкончанияИнвентаризации Тогда
		
		Объект[ИзмененныйРеквизит] = Дата(1,1,1);
		ТекстСообщения = НСтр("ru = 'Дата начала инвентаризации не может быть больше даты окончания инвентаризации!';
								|en = 'Stocktaking start date cannot be later than stocktaking end date.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИзмененныйРеквизит, "Объект."+ИзмененныйРеквизит); 
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемыСвойства

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти
