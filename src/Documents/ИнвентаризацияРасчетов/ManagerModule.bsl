#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает таблицы расчетов по задолженностям указанного вида. Предназначена для запуска фоновым заданием.
//
// Параметры:
//  ПараметрыЗаполнения - см. ПараметрыЗаданияЗаполненияВзаиморасчетов.
//  АдресХранилища - Строка - место, куда фоновое задание поместит результат.
//
Процедура ЗаполнитьЗадолженностьПоОстаткам(ПараметрыЗаполнения, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(ПараметрыЗаполнения.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаполнения.Организация);
	Запрос.УстановитьПараметр("МассивСчетов", ПараметрыЗаполнения.СчетаРасчетов);
	Запрос.УстановитьПараметр("ТаблицаЗадолженности", ПараметрыЗаполнения.ТаблицаЗадолженности);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияРасчетовЗадолженность.СчетРасчетов,
	|	ИнвентаризацияРасчетовЗадолженность.ДебиторКредитор,
	|	ИнвентаризацияРасчетовЗадолженность.Подтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.НеПодтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.ИстекСрокДавности,
	|	ИнвентаризацияРасчетовЗадолженность.ВидЗадолженности,
	|	ИнвентаризацияРасчетовЗадолженность.ВсегоДебиторская,
	|	ИнвентаризацияРасчетовЗадолженность.ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьСтарая
	|ИЗ
	|	&ТаблицаЗадолженности КАК ИнвентаризацияРасчетовЗадолженность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоДебиторская,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНовая
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет В (&МассивСчетов), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадолженностьНовая.ДебиторКредитор КАК ДебиторКредитор,
	|	ЗадолженностьНовая.СчетРасчетов КАК СчетРасчетов,
	|	ЗадолженностьНовая.ВидЗадолженности,
	|	ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) КАК Подтверждено,
	|	ЕСТЬNULL(ЗадолженностьСтарая.НеПодтверждено, 0) КАК НеПодтверждено,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ИстекСрокДавности, 0) КАК ИстекСрокДавности,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВсегоДебиторская, ЗадолженностьНовая.ВсегоДебиторская) КАК ВсегоДебиторская,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВсегоКредиторская, ЗадолженностьНовая.ВсегоКредиторская) КАК ВсегоКредиторская,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВсегоДебиторская, ЗадолженностьНовая.ВсегоДебиторская) + ЕСТЬNULL(ЗадолженностьСтарая.ВсегоКредиторская, ЗадолженностьНовая.ВсегоКредиторская) = ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) КАК ЕстьПодтвержденнаяСумма,
	|	ЕСТЬNULL(ЗадолженностьСтарая.НеПодтверждено, 0) > 0 КАК ЕстьНеПодтвержденнаяСумма,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ИстекСрокДавности, 0) > 0 КАК ЕстьИстекСрокДавности,
	|	ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) > 0
	|		И ЕСТЬNULL(ЗадолженностьСтарая.НеПодтверждено, 0) > 0 КАК ЕстьЧастичноПодтвержденнаяСумма
	|ИЗ
	|	ЗадолженностьНовая КАК ЗадолженностьНовая
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьСтарая КАК ЗадолженностьСтарая
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьСтарая.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьСтарая.ДебиторКредитор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьСтарая.ВидЗадолженности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадолженностьНовая.СчетРасчетов.Порядок,
	|	ДебиторКредитор
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Инициализирует параметры для выполнения задания заполнения задолженности по остаткам.
//
// Параметры:
//	Объект - ДокументОбъект.ИнвентаризацияРасчетов - документ инвентаризации, который подлежит заполнению.
//
// Возвращаемое значение:
//	Структура - содержит следующие элементы:
//		* Организация - СправочникСсылка.Организации - организация по данным которым будут заполняться остатки взаиморасчетов;
//		* Дата - Дата - дата, на конец которой будут заполняться остатки взаиморасчетов;
//		* СчетаРасчетов - Массив с элементами типа ПланСчетовСсылка.Хозрасчетный - при заполнении остатков, будут анализироваться только данные счета;
//		* ТаблицаЗадолженности - ТаблицаЗначений - таблица текущих данных задолженности. Если анализируемый счет присутствует в этой таблице, данные по задолженности будут взяты из таблицы.
//			** СчетРасчетов - ПланСчетовСсылка.Хозрасчетный - счет задолженности;
//			** ДебиторКредитор - СправочникСсылка.Организации, СправочникСсылка.Контрагенты, СправочникСсылка.ФизическиеЛица, СправочникСсылка.РегистрацииВНалоговомОргане, Строка - объект задолженности;
//			** Подтверждено - Число(15,2) - подтвержденная сумма задолженности;
//			** НеПодтверждено - Число(15,2) - неподтвержденная сумма задолженности;
//			** ИстекСрокДавности - Число(15,2) - сумма задолженности, срок давности по которой истек;
//			** ВидЗадолженности - ПеречислениеСсылка.ТипыЗадолженности - дебиторская/кредиторская задолженность;
//			** ВсегоДебиторская - Число(15,2) - сумма дебиторской задолженности (если вид задолженности - кредиторская, тогда = 0);
//			** ВсегоКредиторская - Число(15,2) - сумма кредиторской задолженности (если вид задолженности - дебиторская, тогда = 0).
//
Функция ПараметрыЗаданияЗаполненияВзаиморасчетов(Объект) Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПериодОтчета = ?(ЗначениеЗаполнено(Объект.ДатаОкончанияИнвентаризации), Объект.ДатаОкончанияИнвентаризации, Объект.Дата);
	ПараметрыЗаполнения.Вставить("Дата", ПериодОтчета);
	ПараметрыЗаполнения.Вставить("СчетаРасчетов");
	ПараметрыЗаполнения.Вставить("ТаблицаЗадолженности");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт инвентаризации расчетов (ИНВ-17)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ17";
	КомандаПечати.Представление = НСтр("ru = 'Акт инвентаризации расчетов (ИНВ-17)';
										|en = 'Settlement inventory report (INV-17)'");
	
	// Приказ о проведении инвентаризации (ИНВ-22)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ22";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьИНВ22";
	КомандаПечати.Представление = НСтр("ru = 'Приказ о проведении инвентаризации (ИНВ-22)';
										|en = 'Stocktaking order (INV-22)'");
		
КонецПроцедуры

// Функция формирует данные для печатной формы ИНВ22
//
Функция ДанныеДляПечатнойФормыИНВ22(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Возврат ПолучитьВыборкуШапок(МассивОбъектов);
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ17") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ17", НСтр("ru = 'ИНВ-17 (акт инвентаризации)';
																									|en = 'INV-17 (stocktaking report)'"), 
			ПечатьИНВ17(МассивОбъектов, ОбъектыПечати), , "Документ.ИнвентаризацияРасчетов.ПФ_MXL_Инв17");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВыборкуШапок(МассивОбъектов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектов);
	Запрос.УстановитьПараметр("НаименованиеИмуществаОбязательствШапка", 
		НСтр("ru = 'расчетов с покупателями, поставщиками и прочими дебиторами и кредиторами';
			|en = 'settlements with customers, suppliers and other debtors and creditors'"));
	Запрос.УстановитьПараметр("НаименованиеИмуществаОбязательствПодвал",
		НСтр("ru = 'расчеты с покупателями, поставщиками и прочими дебиторами и кредиторами';
			|en = 'settlements with customers, suppliers and other debtors and creditors'"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инвентаризация.Ссылка КАК Ссылка,
	|	Инвентаризация.Дата КАК Дата,
	|	Инвентаризация.Номер КАК Номер,
	|	&НаименованиеИмуществаОбязательствШапка КАК НаименованиеИмуществаОбязательствШапка,
	|	&НаименованиеИмуществаОбязательствПодвал КАК НаименованиеИмуществаОбязательствПодвал,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеОрганизации,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	Инвентаризация.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	Инвентаризация.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	Инвентаризация.ПричинаПроведенияИнвентаризации КАК ПричинаПроведенияИнвентаризации,
	|	Инвентаризация.ИнвентаризационнаяКомиссия.(
	|		ФИОПолные КАК ФИОПолные,
	|		Председатель КАК Председатель,
	|		Должность КАК Должность
	|	) КАК ИнвентаризационнаяКомиссия
	|ИЗ
	|	Документ.ИнвентаризацияРасчетов КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	Председатель УБЫВ";
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция ПечатьИНВ17(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетовСКонтрагентами_ИНВ17";

	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.УстановитьПараметр("МассивСсылок", МассивОбъектов);
	
	ЗапросКонтрагенты.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДебиторыКредиторы.ДебиторКредитор КАК Ссылка,
	|	Контрагенты.Наименование,
	|	Контрагенты.НаименованиеПолное
	|ПОМЕСТИТЬ ДебиторыКредиторы
	|ИЗ
	|	Документ.ИнвентаризацияРасчетов.Задолженность КАК ДебиторыКредиторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДебиторыКредиторы.ДебиторКредитор = Контрагенты.Ссылка
	|ГДЕ
	|	ДебиторыКредиторы.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДебиторыКредиторы.ДебиторКредитор,
	|	Организации.Наименование,
	|	Организации.НаименованиеПолное
	|ИЗ
	|	Документ.ИнвентаризацияРасчетов.Задолженность КАК ДебиторыКредиторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДебиторыКредиторы.ДебиторКредитор = Организации.Ссылка
	|ГДЕ
	|	ДебиторыКредиторы.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДебиторыКредиторы.ДебиторКредитор,
	|	НалоговыеОрганы.Наименование,
	|	НалоговыеОрганы.НаименованиеИФНС
	|ИЗ
	|	Документ.ИнвентаризацияРасчетов.Задолженность КАК ДебиторыКредиторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК НалоговыеОрганы
	|		ПО ДебиторыКредиторы.ДебиторКредитор = НалоговыеОрганы.Ссылка
	|ГДЕ
	|	ДебиторыКредиторы.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДебиторыКредиторы.ДебиторКредитор,
	|	ФизическиеЛица.Наименование,
	|	ФизическиеЛица.УточнениеНаименования
	|ИЗ
	|	Документ.ИнвентаризацияРасчетов.Задолженность КАК ДебиторыКредиторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ДебиторыКредиторы.ДебиторКредитор = ФизическиеЛица.Ссылка
	|ГДЕ
	|	ДебиторыКредиторы.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Инвентаризация.ВидЗадолженности КАК ВидЗадолженности,
	|	Инвентаризация.ДебиторКредитор КАК Контрагент,
	|	ЕСТЬNULL(ДебиторыКредиторы.НаименованиеПолное, Инвентаризация.ДебиторКредитор) КАК КонтрагентНаименованиеПолное,
	|	ЕСТЬNULL(ДебиторыКредиторы.Наименование, Инвентаризация.ДебиторКредитор) КАК КонтрагентНаименование,
	|	Инвентаризация.СчетРасчетов КАК СчетРасчетов,
	|	ПРЕДСТАВЛЕНИЕ(Инвентаризация.СчетРасчетов) КАК СчетРасчетовПредставление,
	|	МИНИМУМ(Инвентаризация.НомерСтроки) КАК НомерСтроки,
	|	СУММА(Инвентаризация.Подтверждено + Инвентаризация.НеПодтверждено) КАК Всего,
	|	СУММА(Инвентаризация.Подтверждено) КАК Подтверждено,
	|	СУММА(Инвентаризация.НеПодтверждено) КАК НеПодтверждено,
	|	СУММА(Инвентаризация.ИстекСрокДавности) КАК ИстекСрокДавности,
	|	Инвентаризация.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИнвентаризацияРасчетов.Задолженность КАК Инвентаризация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДебиторыКредиторы КАК ДебиторыКредиторы
	|		ПО (ДебиторыКредиторы.Ссылка = Инвентаризация.ДебиторКредитор)
	|ГДЕ
	|	Инвентаризация.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	Инвентаризация.Ссылка,
	|	Инвентаризация.ВидЗадолженности,
	|	Инвентаризация.ДебиторКредитор,
	|	Инвентаризация.СчетРасчетов,
	|	ЕСТЬNULL(ДебиторыКредиторы.НаименованиеПолное, Инвентаризация.ДебиторКредитор),
	|	ЕСТЬNULL(ДебиторыКредиторы.Наименование, Инвентаризация.ДебиторКредитор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Инвентаризация.СчетРасчетов.Порядок,
	|	Инвентаризация.ДебиторКредитор
	|АВТОУПОРЯДОЧИВАНИЕ
	|ИТОГИ
	|	СУММА(Всего),
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено),
	|	СУММА(ИстекСрокДавности)
	|ПО
	|	Ссылка,
	|	ВидЗадолженности";
	
	РезультатКонтрагенты = ЗапросКонтрагенты.Выполнить();
	ВыборкаПоВидуДокумента = РезультатКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияРасчетов.ПФ_MXL_Инв17");
	ПервыйДокумент = Истина;

	ВыборкаШапок = ПолучитьВыборкуШапок(МассивОбъектов).Выбрать();
	
	Пока ВыборкаШапок.Следующий() Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
				
		// Варианты заголовков разделов с подписями печатной формы	
		ЗаголовокРазделаПодписей = Новый Структура();
		ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии';
																		|en = 'Commission chairperson'"));
		ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        НСтр("ru = 'Члены комиссии';
																		|en = 'Commission members'"));
		
		// Формирование шапки
		Шапка = Макет.ПолучитьОбласть("Шапка");
		Шапка.Параметры.Заполнить(ВыборкаШапок);
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаШапок.Организация, ВыборкаШапок.Дата);
		Шапка.Параметры.Организация          = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
		Шапка.Параметры.ОрганизацияКодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
		
		Шапка.Параметры.НомерДокумента = ВыборкаШапок.Номер;
		ДатаДокумента = ?(ЗначениеЗаполнено(ВыборкаШапок.ДатаОкончанияИнвентаризации), ВыборкаШапок.ДатаОкончанияИнвентаризации, ВыборкаШапок.Дата);
		Шапка.Параметры.ДеньДокумента  = День(ДатаДокумента);
		Шапка.Параметры.МесяцДокумента = Сред(Формат(ДатаДокумента, "ДЛФ=ДД"), СтрНайти(Формат(ДатаДокумента, "ДЛФ=ДД"), " "));
														 
		ТабДокумент.Вывести(Шапка);

		// Формирование строк дебиторской задолженности
		ПодвалТаблицыДт = Макет.ПолучитьОбласть("ПодвалТаблицыДт");
		СтрокаТаблицыДт = Макет.ПолучитьОбласть("СтрокаТаблицыДт");
		
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаШапок.Ссылка);
		
		Если ВыборкаПоВидуДокумента.НайтиСледующий(СтруктураПоиска) Тогда
			ВыборкаПоВидуЗадолженности = ВыборкаПоВидуДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Иначе
			Продолжить;
		КонецЕсли;
					
		СтруктураПоиска = Новый Структура("ВидЗадолженности", Перечисления.ТипыЗадолженности.Дебиторская);
				
		Если ВыборкаПоВидуЗадолженности.НайтиСледующий(СтруктураПоиска) Тогда

			ПодвалТаблицыДт.Параметры.Заполнить(ВыборкаПоВидуЗадолженности);
			
			ВыборкаПоКонтрагенту = ВыборкаПоВидуЗадолженности.Выбрать();
			Пока ВыборкаПоКонтрагенту.Следующий() Цикл
				СтрокаТаблицыДт.Параметры.Заполнить(ВыборкаПоКонтрагенту);
				СтрокаТаблицыДт.Параметры.КонтрагентПредставление = ?(ПустаяСтрока(ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное),
																	ВыборкаПоКонтрагенту.КонтрагентНаименование, 
																	ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное);
				ТабДокумент.Вывести(СтрокаТаблицыДт);
			КонецЦикла;
			
		КонецЕсли;
	
		ТабДокумент.Вывести(ПодвалТаблицыДт);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Шапка оборотной стороны Акта
		ШапкаОборот = Макет.ПолучитьОбласть("ШапкаОборот");
		ТабДокумент.Вывести(ШапкаОборот);
		
		// Формирование строк кредиторской задолженности
		ПодвалТаблицыКт = Макет.ПолучитьОбласть("ПодвалТаблицыКт");
		СтрокаТаблицыКт = Макет.ПолучитьОбласть("СтрокаТаблицыКт");
				
		ВыборкаПоВидуЗадолженности.Сбросить();
		
		СтруктураПоиска = Новый Структура("ВидЗадолженности", Перечисления.ТипыЗадолженности.Кредиторская);
		
		Если ВыборкаПоВидуЗадолженности.НайтиСледующий(СтруктураПоиска) Тогда
								
			ПодвалТаблицыКт.Параметры.Заполнить(ВыборкаПоВидуЗадолженности);
			
			ВыборкаПоКонтрагенту = ВыборкаПоВидуЗадолженности.Выбрать();
			Пока ВыборкаПоКонтрагенту.Следующий() Цикл
				СтрокаТаблицыКт.Параметры.Заполнить(ВыборкаПоКонтрагенту);
				СтрокаТаблицыКт.Параметры.КонтрагентПредставление = ?(ПустаяСтрока(ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное),
																		ВыборкаПоКонтрагенту.КонтрагентНаименование, 
																		ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное);
				ТабДокумент.Вывести(СтрокаТаблицыКт);
			КонецЦикла;
				
		КонецЕсли;
				
		ТабДокумент.Вывести(ПодвалТаблицыКт);
		
		// Подвал печатной формы
		Подвал = Макет.ПолучитьОбласть("Подвал");
		ТабДокумент.Вывести(Подвал);
		
		Подпись = Макет.ПолучитьОбласть("Подпись");
		ТаблицаИнвентаризационнаяКомиссия = ВыборкаШапок.ИнвентаризационнаяКомиссия.Выгрузить();
		
		// Выведем подпись председателя инвентаризационной комиссии
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		
		Если ПредседательКомиссии <> Неопределено Тогда
							
			Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
			Подпись.Параметры.Должность                = ПредседательКомиссии.Должность;
			Подпись.Параметры.РасшифровкаПодписи       = ПредседательКомиссии.ФИОПолные;
			
		Иначе
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
			Подпись.Параметры.Должность                = "";
			Подпись.Параметры.РасшифровкаПодписи       = "";
			
		КонецЕсли;
			
		ТабДокумент.Вывести(Подпись);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		// Сначала выведем членов комиссии из выборки
		ЧислоЧленовКомиссии = 0;
		Для Каждого ЧленКомиссии Из ТаблицаИнвентаризационнаяКомиссия Цикл
			
			Если ЧленКомиссии.Председатель Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
														   "");
			Подпись.Параметры.Должность                = ЧленКомиссии.Должность;
			Подпись.Параметры.РасшифровкаПодписи       = ЧленКомиссии.ФИОПолные;
			
			ТабДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			ЧислоЧленовКомиссии = ЧислоЧленовКомиссии + 1;
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		// подписей, как в форме, утвержденной Госкомстатом).
		Если ЧислоЧленовКомиссии < 3 Тогда
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			Для Итератор = (ЧислоЧленовКомиссии + 1) По 3 Цикл
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
				                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
															   "");
				Подпись.Параметры.Должность                = "";
				Подпись.Параметры.РасшифровкаПодписи       = "";
				
				ТабДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
		
		КонецЕсли;

	
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаШапок.Ссылка);

	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли