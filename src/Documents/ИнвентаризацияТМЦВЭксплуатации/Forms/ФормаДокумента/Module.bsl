#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

&НаСервере
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	ВалютаДокумента = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ТипНоменклатура = ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Справочники.Номенклатура.ДлинаНаименования);
	ТипХарактеристика = ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Справочники.ХарактеристикиНоменклатуры.ДлинаНаименования);
	ТипСерия = ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Справочники.СерииНоменклатуры.ДлинаНаименования);
	ТипКодНоменклатуры = ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Справочники.Номенклатура.ДлинаКода);
	ТипАртикулНоменклатуры = Метаданные.Справочники.Номенклатура.Реквизиты.Артикул.Тип;
	ТипИнвентарныйНомер = Метаданные.ОпределяемыеТипы.ИнвентарныйНомерТМЦВЭксплуатации.Тип;
	ТипФизическоеЛицо = ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Справочники.ФизическиеЛица.ДлинаНаименования);
	
	#Область СтандартныеПодсистемы
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ГиперссылкаФайлов = РаботаСФайлами.ГиперссылкаФайлов();
	ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Элементы.ДекорацияСостояниеЭДО.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ИнвентаризацияТМЦВЭксплуатации", ПараметрыЗаписи, Объект.Ссылка);
	ОбщегоНазначенияУТКлиент.ОповеститьОЗаписиДокументаВЖурнал();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);

	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	ЗаполнитьСлужебныеРеквизитыТЧ();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьДокументаНаОснованииИнвентаризацииТМЦ" Тогда
		ПослеЗаписиДокументаСозданногоНаОсновании();
	КонецЕсли;

	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	
	ФизическоеЛицоПриИзмененииНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры  

// СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ТоварыДокументНаОсновании Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументНаОсновании) Тогда
			ПоказатьЗначение(, ТекущиеДанные.ДокументНаОсновании);
		Иначе
			СоздатьДокументНаОсновании(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИнвентарныйНомерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииДанныхВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИнвентарныйНомерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПодбора = ТМЦВЭксплуатацииКлиентСервер.ПараметрыПодбораТМЦВЭксплуатации(Объект.Дата, Объект.Организация, Объект.Подразделение);
	ПараметрыПодбора.ТекущийРегистратор = Объект.Ссылка;
	
	Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		ПараметрыПодбора.ФизическоеЛицо = Объект.ФизическоеЛицо;
	КонецЕсли;
	
	ТМЦВЭксплуатацииКлиент.АвтоПодборПоИнвентарномуНомеру(
		Текст, 
		ПараметрыПодбора,
		ДанныеВыбора,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыИнвентарныйНомерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекущиеДанные.ИнвентарныйНомер = ВыбранноеЗначение.ИнвентарныйНомер;
	ТекущиеДанные.Номенклатура = ВыбранноеЗначение.Номенклатура;
	ТекущиеДанные.Характеристика = ВыбранноеЗначение.Характеристика;
	ТекущиеДанные.Серия = ВыбранноеЗначение.Серия;
	ТекущиеДанные.ФизическоеЛицо = ВыбранноеЗначение.ФизическоеЛицо;
	
	СтруктураДействий = Новый Структура;
	ДобавитьДействияПриИзмененииНоменклатуры(СтруктураДействий, ЭтотОбъект, ТекущиеДанные);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииДанныхВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьДействияПриИзмененииНоменклатуры(СтруктураДействий, ЭтотОбъект, ТекущиеДанные);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);

	ПриИзмененииДанныхВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииДанныхВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение = ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий, ВыбранноеЗначение);

	ПриИзмененииДанныхВСтроке(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыФизическоеЛицоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ПриИзмененииДанныхВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоФактическоеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииДанныхВСтроке(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторСтроки", Элементы.Товары.ТекущаяСтрока);
	Оповещение = Новый ОписаниеОповещения("ТоварыКомментарийНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Элемент.ТекстРедактирования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнвентаризационнаяКомиссия

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
	Если ТекущаяСтрокаТЧ.Председатель Тогда
		ИндексУдаляемойСтроки = Объект.ИнвентаризационнаяКомиссия.Индекс(ТекущаяСтрокаТЧ);
		КоличествоСтрок = Объект.ИнвентаризационнаяКомиссия.Количество() - 1;
		
		Если КоличествоСтрок > 0 Тогда
			Если ИндексУдаляемойСтроки <= КоличествоСтрок - 1 Тогда
				ИндексНовогоПредседателя = ИндексУдаляемойСтроки + 1;
			Иначе
				ИндексНовогоПредседателя = КоличествоСтрок - 1;
			КонецЕсли;
			Объект.ИнвентаризационнаяКомиссия[ИндексНовогоПредседателя].Председатель = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
		ТекущаяСтрокаТЧ.ФизЛицо = Неопределено;
		ТекущаяСтрокаТЧ.Председатель = Ложь;
	Иначе // Создание заново
		Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
			Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строки = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));
	
	Если Строки.Количество() > 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Физическое лицо <%1> уже подобрано';
								|en = 'Person <%1> is already picked'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыбранноеЗначение);
		ПоказатьПредупреждение(Неопределено, ТекстСообщения, 60);
	Иначе
		НоваяСтрока = Объект.ИнвентаризационнаяКомиссия.Добавить();
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение;
		Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
			НоваяСтрока.Председатель = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПредседательПриИзменении(Элемент)
	
	ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрокаТЧ.Председатель Тогда
		// Снимать флажок нельзя
		ТекущаяСтрокаТЧ.Председатель = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Объект.ИнвентаризационнаяКомиссия Цикл
		Если СтрокаТЧ.НомерСтроки <> ТекущаяСтрокаТЧ.НомерСтроки Тогда
			СтрокаТЧ.Председатель = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияФизЛицоПриИзменении(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
	Если ТекущаяСтрокаТЧ.ФизЛицо <> ВыбранноеЗначение Тогда
		СтрокиТабличнойЧасти = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));
		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
			ШаблонСообщения = НСтр("ru = 'Физическое лицо <%1> уже включено в состав комиссии';
									|en = 'Person <%1> is already included in the commission'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыбранноеЗначение);
			ПоказатьПредупреждение(Неопределено, ТекстСообщения, 60);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить организацию';
								|en = 'Fill the company'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект", Отказ); 
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить подразделение';
								|en = 'Fill the business unit'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Подразделение", "Объект", Отказ); 
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Объект.Товары.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект);
		ЗаполнитьТабличнуюЧасть(ОписаниеОповещения);
	Иначе
		ЗаполнитьПоОстаткамЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеУчета(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьДанныеУчетаЗавершение", ЭтотОбъект);
	ЗаполнитьТабличнуюЧасть(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическиеДанные(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьФактическиеДанныеЗавершение", ЭтотОбъект);
	ЗаполнитьТабличнуюЧасть(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	ОткрытьПодборСерий();

КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоИзмененныхСтрок = ПолучитьСтрокиИзБуфераОбмена();
	
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоИзмененныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Товары) Тогда
		СкопироватьСтрокиНаСервере();
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ИнвентаризацияТМЦВЭксплуатации.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка результатов инвентаризации';
										|en = 'Import physical inventory count results'");
	ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаДляЗагрузки();

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Дата", Объект.Дата);
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("Подразделение", Объект.Подразделение);
	ДополнительныеПараметры.Вставить("ФизическоеЛицо", Объект.ФизическоеЛицо);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
    
    Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
    ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДействиеВозврат(Команда)
	
	ИзменитьОтражениеРезультатовИнвентаризации(ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.ВозвратИзЭксплуатации"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДействиеОприходование(Команда)
	
	ИзменитьОтражениеРезультатовИнвентаризации(ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.Оприходование"));

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект);
	
КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ВыполнитьЗагрузкуДанныеИзТСД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)

	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)

	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧасть(ОписаниеОповещения)

	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
														|en = 'Continue'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ТекстВопроса = НСтр("ru = 'При заполнении существующие данные будут перезаполнены.
                         |Продолжить?';
                         |en = 'The existing data will be repopulated upon population.
                         |Continue?'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 

КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
	"ИнвентаризацияТМЦВЭксплуатации.ФормаДокумента.ЗаполнитьПоОстаткам");
	
	ЗаполнитьПоОстаткамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере()

	ТекущиеДанныеУчета = Новый ФиксированноеСоответствие(Новый Соответствие);
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТМЦВЭксплуатации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТМЦВЭксплуатации.Номенклатура КАК Номенклатура,
	|	ТМЦВЭксплуатации.Характеристика КАК Характеристика,
	|	ТМЦВЭксплуатации.Серия КАК Серия,
	|	ТМЦВЭксплуатации.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	СУММА(ТМЦВЭксплуатации.КоличествоОстаток) КАК КоличествоПоДаннымУчета
	|ИЗ
	|	РегистрНакопления.ТМЦВЭксплуатации.Остатки(
	|			&Дата,
	|			Организация = &Организация
	|				И Подразделение = &Подразделение
	|				И (ФизическоеЛицо = &ФизическоеЛицо
	|					ИЛИ &ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))) КАК ТМЦВЭксплуатации
	|
	|СГРУППИРОВАТЬ ПО
	|	ТМЦВЭксплуатации.ФизическоеЛицо,
	|	ТМЦВЭксплуатации.Номенклатура,
	|	ТМЦВЭксплуатации.Характеристика,
	|	ТМЦВЭксплуатации.Серия,
	|	ТМЦВЭксплуатации.ИнвентарныйНомер
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТМЦВЭксплуатации.КоличествоОстаток) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТМЦВЭксплуатации.ФизическоеЛицо.ФИО,
	|	ТМЦВЭксплуатации.Номенклатура.Представление,
	|	ТМЦВЭксплуатации.Характеристика.Представление,
	|	ТМЦВЭксплуатации.Серия.Представление,
	|	ТМЦВЭксплуатации.ИнвентарныйНомер
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("ФизическоеЛицо", Объект.ФизическоеЛицо);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата), НачалоДня(Объект.Дата), НачалоДня(ТекущаяДатаСеанса())));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДобавленныеСтроки = Новый Массив;

	ПоляПоиска = "ИнвентарныйНомер,Номенклатура,Характеристика,Серия";
	Если НЕ ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		ПоляПоиска = ПоляПоиска + ",ФизическоеЛицо";
	КонецЕсли;
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	ТоварыПоиск = Объект.Товары.Выгрузить();
	ТоварыПоиск.Индексы.Добавить(ПоляПоиска);
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		СписокСтрок = ТоварыПоиск.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			
			ДанныеСтроки = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураПоиска);
			
			ДобавленныеСтроки.Добавить(ДанныеСтроки);
			
			ДанныеСтроки = ТоварыПоиск.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураПоиска);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДанныеУчетаНаСервере(ДобавленныеСтроки);

	ЗаполнитьСлужебныеРеквизитыТЧ();
	ЗаполнитьСтатусыУказанияСерийСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеУчетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДанныеУчетаЗавершениеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеУчетаЗавершениеНаСервере()

	ЗаполнитьДанныеУчетаНаСервере(Объект.Товары);
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьДанныеУчетаНаСервере(КоллекцияСтрок, УстановитьДействие = Истина)

	Документы.ИнвентаризацияТМЦВЭксплуатации.ЗаполнитьДанныеУчета(Объект, КоллекцияСтрок, Истина, УстановитьДействие);

	ДокументыНаОсновании = ДокументыНаОсновании(Объект.Ссылка, Объект.Организация, Объект.Подразделение, Объект.ФизическоеЛицо);
		
	Для каждого ДанныеСтроки Из КоллекцияСтрок Цикл
		
		ЗаполнитьРассчитываемыеПоля(ДанныеСтроки);
		
		ДокументыСтроки = ДокументыНаОсновании.НайтиСтроки(КлючТМЦ(Объект.Организация, Объект.Подразделение, Объект.ФизическоеЛицо, ДанныеСтроки));
		ЗаполнитьДокументНаОсновании(ДанныеСтроки, ДокументыСтроки);
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическиеДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьФактическиеДанныеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактическиеДанныеНаСервере()

	Для каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.КоличествоФактическое = ДанныеСтроки.КоличествоПоДаннымУчета;
		
		ТМЦВЭксплуатацииКлиентСервер.ЗаполнитьДействиеНаОснованииИнвентаризации(
			ДанныеСтроки,
			Неопределено,
			Объект.Организация, 
			Объект.Подразделение,
			Объект.ФизическоеЛицо);
		
		ЗаполнитьРассчитываемыеПоля(ДанныеСтроки);
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтражениеРезультатовИнвентаризации(НовоеДействие)

	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Изменить';
														|en = 'Change'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ТекстВопроса = НСтр("ru = 'Изменить отражение результатов инвентаризации в выбранных строках?';
						|en = 'Do you want to change the record of physical inventory count results in the selected lines?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьОтражениеРезультатовИнвентаризацииЗавершение", ЭтотОбъект, НовоеДействие);

	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтражениеРезультатовИнвентаризацииЗавершение(РезультатВопроса, НовоеДействие) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьОтражениеРезультатовИнвентаризацииНаСервере(НовоеДействие);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтражениеРезультатовИнвентаризацииНаСервере(Знач НовоеДействие)

	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДокументыНаОсновании = ДокументыНаОсновании(Объект.Ссылка, Объект.Организация, Объект.Подразделение, Объект.ФизическоеЛицо);

	Для Каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Документы.ИнвентаризацияТМЦВЭксплуатации.МожноУстановитьДействие(ДанныеСтроки, НовоеДействие) Тогда
			
			ДанныеСтроки.Действие = НовоеДействие;
			
			ДокументыСтроки = ДокументыНаОсновании.НайтиСтроки(КлючТМЦ(Объект.Организация, Объект.Подразделение, Объект.ФизическоеЛицо, ДанныеСтроки));
			ЗаполнитьДокументНаОсновании(ДанныеСтроки, ДокументыСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

&НаКлиенте
Процедура СоздатьДокументНаОсновании(ДанныеСтроки)

	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Действие) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Проведен ИЛИ Модифицированность Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
															|en = 'Continue'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'Для создания документа необходимо предварительно провести документ.
                             |Провести и продолжить?';
                             |en = 'To create the document, post it first.
                             |Post and continue?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПровестиДокументИСоздатьНаОснованииЗавершение", ЭтотОбъект, ДанныеСтроки);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		
	Иначе
		
		СоздатьДокументНаОснованииЗавершение(ДанныеСтроки);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументИСоздатьНаОснованииЗавершение(РезультатВопроса, ДанныеСтроки) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект);
		Если Объект.Проведен И НЕ Модифицированность Тогда
			СоздатьДокументНаОснованииЗавершение(ДанныеСтроки);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументНаОснованииЗавершение(ДанныеСтроки)
	
	МассивНомеровСтрок = Новый Массив;
	МассивНомеровСтрок.Добавить(ДанныеСтроки.НомерСтроки);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("МассивНомеровСтрок", МассивНомеровСтрок);
	ЗначенияЗаполнения.Вставить("СообщатьОбОшибках", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Если ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.Оприходование") Тогда
		ИмяОткрываемойФормы = "Документ.ОприходованиеТМЦВЭксплуатации.ФормаОбъекта";
	ИначеЕсли ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.ВозвратИзЭксплуатации") Тогда
		ИмяОткрываемойФормы = "Документ.ПрочееОприходованиеТоваров.ФормаОбъекта";
	ИначеЕсли ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.Списание") Тогда
		ИмяОткрываемойФормы = "Документ.СписаниеИзЭксплуатации.ФормаОбъекта";
	КонецЕсли; 
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтотОбъект, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)

	Если НЕ НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтотОбъект, ПараметрыУказанияСерий, Текст, ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	Иначе
		ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	КонецЕсли;

	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ДопПараметры = Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму(
		ПараметрыФормыУказанияСерий.ИмяФормы,
		ПараметрыФормыУказанияСерий,
		ЭтотОбъект,,,, 
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
		
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий);

КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер(ОбновитьПараметрыУказанияСерий = Ложь)
	
	Если ОбновитьПараметрыУказанияСерий Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ИнвентаризацияТМЦВЭксплуатации));
	КонецЕсли; 
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти

#Область СтандартныеПодсистемы

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект.Товары, Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокиИзБуфераОбмена()
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	
	Колонки = "Номенклатура,Характеристика,Серия,ИнвентарныйНомер,ФизическоеЛицо";
	
	ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, Колонки);
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат 0;
	КонецЕсли;
	
	КэшированныеЗначения = Неопределено;
	ДобавленныеСтроки = Новый Массив;
	
	СтруктураПоиска = Новый Структура("ИнвентарныйНомер,Номенклатура,Характеристика,Серия");
	Если НЕ ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		СтруктураПоиска.Вставить("ФизическоеЛицо");
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаТоваров Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
		СписокСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Продолжить
		КонецЕсли;
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТЧ);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ДобавленныеСтроки.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	ЗаполнитьДанныеУчетаНаСервере(ДобавленныеСтроки);
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	ЗаполнитьСтатусыУказанияСерийСервер();
	
	Возврат ДобавленныеСтроки.Количество();
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность",
		РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаСервере
Процедура ОбработатьШтрихкоды(Знач ДанныеШтрихкодов)
	
	РезультатПоиска = ТМЦВЭксплуатацииСервер.НайтиОбъектыПоШтрихкодам(ДанныеШтрихкодов);
	
	ТаблицаОбъектов = РезультатПоиска.ТаблицаОбъектов;
	ТаблицаОбъектов.Свернуть("ИнвентарныйНомер,Номенклатура,Характеристика,Серия,ФизическоеЛицо");
	
	КэшированныеЗначения = Неопределено;
	ДобавленныеСтроки = Новый Массив;

	СтруктураПоиска = Новый Структура("ИнвентарныйНомер,Номенклатура,Характеристика,Серия");
	Если НЕ ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		СтруктураПоиска.Вставить("ФизическоеЛицо");
	КонецЕсли;

	Для Каждого ДанныеОбъекта Из ТаблицаОбъектов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеОбъекта);
		СписокСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			
			ДанныеСтроки = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураПоиска);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ДанныеСтроки.Характеристика);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);

			ДобавленныеСтроки.Добавить(ДанныеСтроки);
			
		Иначе
			ДанныеСтроки = СписокСтрок[0];
		КонецЕсли;
		
		ДанныеСтроки.КоличествоФактическое = ДанныеСтроки.КоличествоФактическое + 1;
		
	КонецЦикла;
	
	ЗаполнитьДанныеУчетаНаСервере(ДобавленныеСтроки);

	ЗаполнитьСлужебныеРеквизитыТЧ();
	ЗаполнитьСтатусыУказанияСерийСервер();
	
	ТМЦВЭксплуатацииСервер.СообщитьОРезультатахПоискаПоШтрихкоду(РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныеИзТСД()
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    
    Если АдресЗагруженныхДанных <> Неопределено Тогда 
	    ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(Знач АдресЗагруженныхДанных)
    
    ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных); // ТаблицаЗначений
    
	ДобавленныеСтроки = Новый Массив;
    ТоварыДобавлены = Ложь;

	СтруктураПоиска = Новый Структура("ИнвентарныйНомер,Номенклатура,Характеристика,Серия");
	Если НЕ ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		СтруктураПоиска.Вставить("ФизическоеЛицо");
	КонецЕсли;

    Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
        
        Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
            Продолжить;
        КонецЕсли;
        
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		СписокСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			
			ДанныеСтроки = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураПоиска);
			
			ДобавленныеСтроки.Добавить(ДанныеСтроки);
			
		Иначе
			ДанныеСтроки = СписокСтрок[0];
		КонецЕсли;
        
        ДанныеСтроки.КоличествоФактическое = СтрокаТаблицы.КоличествоФактическое;
        ДанныеСтроки.Действие = СтрокаТаблицы.Действие;
        
        ТоварыДобавлены = Истина;
        
    КонецЦикла;
 	
 	ЗаполнитьДанныеУчетаНаСервере(ДобавленныеСтроки, Ложь);
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	ЗаполнитьСтатусыУказанияСерийСервер();
    
    Если ТоварыДобавлены Тогда
        Модифицированность = Истина;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Функция ОписаниеКолонокМакетаДляЗагрузки()
	
 	КолонкиМакета = Новый Массив;
 	
 	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("ИнвентарныйНомер", ТипИнвентарныйНомер, НСтр("ru = 'Инв. №';
																													|en = 'Inv. No.'"), 10);
	Колонка.Родитель = "ИнвентарныйНомер";
	КолонкиМакета.Добавить(Колонка);
	
 	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("КодНоменклатуры", ТипКодНоменклатуры, НСтр("ru = 'Код номенклатуры';
																													|en = 'Items code'"), 15);
	Колонка.Родитель = "Номенклатура";
	КолонкиМакета.Добавить(Колонка);
	
 	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("АртикулНоменклатуры", ТипАртикулНоменклатуры, НСтр("ru = 'Артикул номенклатуры';
																															|en = 'Item ID'"), 15);
	Колонка.Родитель = "Номенклатура";
	КолонкиМакета.Добавить(Колонка);
	
 	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Номенклатура", ТипНоменклатура, НСтр("ru = 'Номенклатура';
																											|en = 'Item'"), 20);
	КолонкиМакета.Добавить(Колонка);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Характеристика", ТипХарактеристика, НСтр("ru = 'Характеристика';
																												|en = 'Variant'"), 20);
	КолонкиМакета.Добавить(Колонка);

	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Серия", ТипСерия, НСтр("ru = 'Серия';
																								|en = 'Batch'"), 15);
	КолонкиМакета.Добавить(Колонка);

	Если Объект.ФизическоеЛицо.Пустая() Тогда
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("ФизическоеЛицо", ТипФизическоеЛицо, НСтр("ru = 'Физическое лицо';
																													|en = 'Person'"), 20);
		КолонкиМакета.Добавить(Колонка);
	КонецЕсли;
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("КоличествоФактическое", ОбщегоНазначенияУТКлиентСервер.ОписаниеТипаЧисло(15,3), НСтр("ru = 'Количество';
																																							|en = 'Quantity'"), 10);
	КолонкиМакета.Добавить(Колонка);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Комментарий", ОбщегоНазначенияУТКлиентСервер.ОписаниеТипаСтрока(150), НСтр("ru = 'Комментарий';
																																					|en = 'Comment'"), 25);
	КолонкиМакета.Добавить(Колонка);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("ИмяДействия", ОбщегоНазначенияУТКлиентСервер.ОписаниеТипаСтрока(25), НСтр("ru = 'Как оформить излишек';
																																				|en = 'How to register surplus'"), 30);
	КолонкиМакета.Добавить(Колонка);
	
	Для Позиция = 1 По КолонкиМакета.Количество() Цикл
		КолонкиМакета[Позиция-1].Позиция = Позиция;
	КонецЦикла;

	Возврат КолонкиМакета;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект, "СерииВсегдаВТЧТовары");
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтотОбъект, Истина);
	
	#Область ТоварыДокументНаОсновании_ЦветТекста
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДокументНаОсновании.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ДокументНаОсновании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	#КонецОбласти
	
	#Область ТоварыДействие_Текст
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДействие.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Действие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ДокументНаОсновании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	#КонецОбласти

	#Область ТоварыДействие_ЦветТекста
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДействие.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Действие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	#КонецОбласти
	
	#Область ТоварыДействие_Отображать
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДействие.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ДокументНаОсновании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ИнвентаризацияТМЦВЭксплуатации));

	УстановитьВидимостьЭлементовСерий();

	ЗаполнитьСлужебныеРеквизитыТЧ();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТЧ()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);
	
	ДанныеУчета = Документы.ИнвентаризацияТМЦВЭксплуатации.ДанныеУчета(
		Объект.Ссылка, Объект.Дата, Объект.Организация, Объект.Подразделение, Объект.Товары);
	
	ДокументыНаОсновании = ДокументыНаОсновании(Объект.Ссылка, Объект.Организация, Объект.Подразделение, Объект.ФизическоеЛицо);
								
	Для каждого ДанныеСтроки Из Объект.Товары Цикл
		
		ДанныеУчетаСтроки = Документы.ИнвентаризацияТМЦВЭксплуатации.ДанныеУчетаСтроки(
			Объект.Организация, Объект.Подразделение, Объект.ФизическоеЛицо, ДанныеСтроки, ДанныеУчета);
		
		ДокументыСтроки = ДокументыНаОсновании.НайтиСтроки(КлючТМЦ(Объект.Организация, Объект.Подразделение, Объект.ФизическоеЛицо, ДанныеСтроки));
		ЗаполнитьДокументНаОсновании(ДанныеСтроки, ДокументыСтроки);
		
		Если ДанныеУчетаСтроки <> Неопределено Тогда
			ДанныеСтроки.ОрганизацияПоДаннымУчета = ДанныеУчетаСтроки.Организация;
			ДанныеСтроки.ПодразделениеПоДаннымУчета = ДанныеУчетаСтроки.Подразделение;
			ДанныеСтроки.ФизическоеЛицоПоДаннымУчета = ДанныеУчетаСтроки.ФизическоеЛицо;
		КонецЕсли; 
		
		ЗаполнитьРассчитываемыеПоля(ДанныеСтроки);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьДействияПриИзмененииНоменклатуры(СтруктураДействий, Форма, ТекущаяСтрока)
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	ПроверитьСериюРассчитатьСтатус = Новый Структура("ПараметрыУказанияСерий, Склад", Форма.ПараметрыУказанияСерий, Неопределено);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументыНаОсновании(Ссылка, Организация, Подразделение, ФизическоеЛицо, ДанныеСтрокиСтруктурой = Неопределено)

	ДокументыНаОсновании = Новый ТаблицаЗначений();
	ДокументыНаОсновании.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДокументыНаОсновании.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ДокументыНаОсновании.Колонки.Добавить("ИнвентарныйНомер", Метаданные.ОпределяемыеТипы.ИнвентарныйНомерТМЦВЭксплуатации.Тип);
	ДокументыНаОсновании.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДокументыНаОсновании.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДокументыНаОсновании.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ДокументыНаОсновании.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДокументыНаОсновании.Колонки.Добавить("Оприходование", Новый ОписаниеТипов("ДокументСсылка.ОприходованиеТМЦВЭксплуатации"));
	ДокументыНаОсновании.Колонки.Добавить("Списание", Новый ОписаниеТипов("ДокументСсылка.СписаниеИзЭксплуатации"));
	ДокументыНаОсновании.Колонки.Добавить("ВозвратИзЭксплуатации", Новый ОписаниеТипов("ДокументСсылка.ПрочееОприходованиеТоваров"));

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.ДействияНаОснованииИнвентаризации.Оприходование) КАК Действие,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаТовары.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.ОприходованиеТМЦВЭксплуатации КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТМЦВЭксплуатации.Товары КАК ТаблицаТовары
	|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.ДокументОснование = &ДокументОснование
	|	И &ДокументОснование <> ЗНАЧЕНИЕ(Документ.ИнвентаризацияТМЦВЭксплуатации.ПустаяСсылка)
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Подразделение = &Подразделение
	|
	|	И (НЕ &ОтборПоСтроке
	|		ИЛИ ТаблицаТовары.Номенклатура = &Номенклатура
	|			И ТаблицаТовары.Характеристика = &Характеристика
	|			И ТаблицаТовары.Серия = &Серия
	|
	|			И (ТаблицаТовары.ИнвентарныйНомер = &ИнвентарныйНомер
	|				ИЛИ &ИнвентарныйНомер = """" И &КоличествоПоДаннымУчета = 0))
	|
	|			И (ТаблицаТовары.ФизическоеЛицо = &ФизическоеЛицо
	|				ИЛИ &ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.ДействияНаОснованииИнвентаризации.ВозвратИзЭксплуатации) КАК Действие,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаТовары.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров.Товары КАК ТаблицаТовары
	|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.ДокументОснование = &ДокументОснование
	|	И &ДокументОснование <> ЗНАЧЕНИЕ(Документ.ИнвентаризацияТМЦВЭксплуатации.ПустаяСсылка)
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Подразделение = &Подразделение
	|
	|	И (НЕ &ОтборПоСтроке
	|		ИЛИ ТаблицаТовары.Номенклатура = &Номенклатура
	|			И ТаблицаТовары.Характеристика = &Характеристика
	|			И ТаблицаТовары.Серия = &Серия
	|
	|			И (ТаблицаТовары.ИнвентарныйНомер = &ИнвентарныйНомер
	|				ИЛИ &ИнвентарныйНомер = """" И &КоличествоПоДаннымУчета = 0))
	|
	|			И (ТаблицаТовары.ФизическоеЛицо = &ФизическоеЛицо
	|				ИЛИ &ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.ДействияНаОснованииИнвентаризации.Списание),
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Ссылка,
	|	ТаблицаТовары.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.СписаниеИзЭксплуатации КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации.Товары КАК ТаблицаТовары
	|		ПО (ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка)
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.ДокументОснование = &ДокументОснование
	|	И &ДокументОснование <> ЗНАЧЕНИЕ(Документ.ИнвентаризацияТМЦВЭксплуатации.ПустаяСсылка)
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Подразделение = &Подразделение
	|
	|	И (НЕ &ОтборПоСтроке
	|		ИЛИ ТаблицаТовары.Номенклатура = &Номенклатура
	|			И ТаблицаТовары.Характеристика = &Характеристика
	|			И ТаблицаТовары.Серия = &Серия
	|			И ТаблицаТовары.ИнвентарныйНомер = &ИнвентарныйНомер
	|			И (ТаблицаТовары.ФизическоеЛицо = &ФизическоеЛицо
	|				ИЛИ &ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|	)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Если ДанныеСтрокиСтруктурой <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтборПоСтроке", Истина);
		Запрос.УстановитьПараметр("ИнвентарныйНомер", ДанныеСтрокиСтруктурой.ИнвентарныйНомер);
		Запрос.УстановитьПараметр("Номенклатура", ДанныеСтрокиСтруктурой.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ДанныеСтрокиСтруктурой.Характеристика);
		Запрос.УстановитьПараметр("Серия", ДанныеСтрокиСтруктурой.Серия);
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		Запрос.УстановитьПараметр("КоличествоПоДаннымУчета", ДанныеСтрокиСтруктурой.КоличествоПоДаннымУчета);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоСтроке", Ложь);
		Запрос.УстановитьПараметр("ИнвентарныйНомер", "");
		Запрос.УстановитьПараметр("Номенклатура", Неопределено);
		Запрос.УстановитьПараметр("Характеристика", Неопределено);
		Запрос.УстановитьПараметр("Серия", Неопределено);
		Запрос.УстановитьПараметр("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("КоличествоПоДаннымУчета", 0);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйДокумент = ДокументыНаОсновании.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка);
		
		Если Выборка.Действие = Перечисления.ДействияНаОснованииИнвентаризации.Оприходование Тогда
			НовыйДокумент.Оприходование = Выборка.Ссылка;
		ИначеЕсли Выборка.Действие = Перечисления.ДействияНаОснованииИнвентаризации.ВозвратИзЭксплуатации Тогда
			НовыйДокумент.ВозвратИзЭксплуатации = Выборка.Ссылка;
		ИначеЕсли Выборка.Действие = Перечисления.ДействияНаОснованииИнвентаризации.Списание Тогда
			НовыйДокумент.Списание = Выборка.Ссылка;
		КонецЕсли; 
		
		// При оприходовании инвентарный номер может быть не указан в инвентаризации, но указан в оприходовании.
		Если Выборка.Действие = Перечисления.ДействияНаОснованииИнвентаризации.Оприходование
			И ЗначениеЗаполнено(НовыйДокумент.ИнвентарныйНомер) Тогда
				
			НовыйДокумент = ДокументыНаОсновании.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка);
			НовыйДокумент.ИнвентарныйНомер = "";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументыНаОсновании.Индексы.Добавить("Организация,Подразделение,ИнвентарныйНомер,Номенклатура,Характеристика,Серия,ФизическоеЛицо");

	Возврат ДокументыНаОсновании;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииДанныхВСтроке(ДанныеСтроки)

	ДанныеСтрокиСтруктурой = Новый Структура("ИнвентарныйНомер,Номенклатура,Характеристика,Серия,ФизическоеЛицо,КоличествоПоДаннымУчета");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиСтруктурой, ДанныеСтроки);
	
	ДанныеУчетаСтроки = ДанныеУчетаСтроки(
		Объект.Ссылка, Объект.Дата, Объект.Организация, Объект.Подразделение, Объект.ФизическоеЛицо, ДанныеСтрокиСтруктурой);
	
	ТМЦВЭксплуатацииКлиентСервер.ЗаполнитьСтрокуИнвентаризацииПоДаннымУчета(Объект, ДанныеСтроки, ДанныеУчетаСтроки, Истина);
	
	ДокументыСтроки = ДокументыСтроки(Объект.Ссылка, Объект.Организация, Объект.Подразделение, Объект.ФизическоеЛицо, ДанныеСтрокиСтруктурой);
	ЗаполнитьДокументНаОсновании(ДанныеСтроки, ДокументыСтроки);
	
	ЗаполнитьРассчитываемыеПоля(ДанныеСтроки);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДокументНаОсновании(ДанныеСтроки, ДокументыСтроки)
	
	ДанныеСтроки.ДокументНаОсновании = Неопределено;
	
	Если ДокументыСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из ДокументыСтроки Цикл
		
		Если ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.Оприходование") Тогда
			ДанныеСтроки.ДокументНаОсновании = Элемент.Оприходование;
		ИначеЕсли ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.ВозвратИзЭксплуатации") Тогда
			ДанныеСтроки.ДокументНаОсновании = Элемент.ВозвратИзЭксплуатации;
		ИначеЕсли ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризации.Списание") Тогда
			ДанныеСтроки.ДокументНаОсновании = Элемент.Списание;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ДокументНаОсновании) Тогда
			Прервать;
		КонецЕсли;
		 
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючТМЦ(Знач Организация, Знач Подразделение, Знач ФизическоеЛицо, Знач ДанныеСтроки)
	Возврат Документы.ИнвентаризацияТМЦВЭксплуатации.КлючТМЦ(Организация, Подразделение, ФизическоеЛицо, ДанныеСтроки);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРассчитываемыеПоля(ДанныеСтроки)
	
	Разница = ДанныеСтроки.КоличествоФактическое - ДанныеСтроки.КоличествоПоДаннымУчета;

	ДанныеСтроки.КоличествоИзлишек = ?(Разница > 0, Разница, 0);
	ДанныеСтроки.КоличествоНедостача = ?(Разница < 0, -Разница, 0);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеУчетаСтроки(Знач Ссылка, Знач Дата, Знач Организация, Знач Подразделение, Знач ФизическоеЛицо, Знач ДанныеСтрокиСтруктурой)

	ДанныеУчета = Документы.ИнвентаризацияТМЦВЭксплуатации.ДанныеУчета(
		Ссылка, Дата, Организация, Подразделение, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСтрокиСтруктурой));
								
	Возврат Документы.ИнвентаризацияТМЦВЭксплуатации.ДанныеУчетаСтроки(
			Организация, Подразделение, ФизическоеЛицо, ДанныеСтрокиСтруктурой, ДанныеУчета);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДокументыСтроки(Знач Ссылка, Знач Организация, Знач Подразделение, Знач ФизическоеЛицо, Знач ДанныеСтрокиСтруктурой)

	ДокументыНаОсновании = ДокументыНаОсновании(Ссылка, Организация, Подразделение, ФизическоеЛицо, ДанныеСтрокиСтруктурой);
	ДокументыСтроки = ДокументыНаОсновании.НайтиСтроки(КлючТМЦ(Организация, Подразделение, ФизическоеЛицо, ДанныеСтрокиСтруктурой));
	
	Результат = Новый Массив;
	Для Каждого Элемент Из ДокументыСтроки Цикл
		
		ДокументыСтрокиСтруктурой = Новый Структура;
		ДокументыСтрокиСтруктурой.Вставить("Оприходование", Элемент.Оприходование);
		ДокументыСтрокиСтруктурой.Вставить("Списание", Элемент.Списание);
		ДокументыСтрокиСтруктурой.Вставить("ВозвратИзЭксплуатации", Элемент.ВозвратИзЭксплуатации);
		
		Результат.Добавить(ДокументыСтрокиСтруктурой);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПослеЗаписиДокументаСозданногоНаОсновании()

	ЗаполнитьСлужебныеРеквизитыТЧ();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ВалютаДокумента = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	ЗаполнитьДанныеУчетаНаСервере(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()

	ЗаполнитьДанныеУчетаНаСервере(Объект.Товары);

КонецПроцедуры

&НаСервере
Процедура ФизическоеЛицоПриИзмененииНаСервере()

	ЗаполнитьДанныеУчетаНаСервере(Объект.Товары);
	
		
	Для Каждого ДанныеСтроки Из Объект.Товары Цикл
			
		Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		
			ДанныеСтроки.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
			
		Иначе

			ДанныеСтроки.ФизическоеЛицо = ДанныеСтроки.ФизическоеЛицоПоДаннымУчета;
			
			ТМЦВЭксплуатацииКлиентСервер.ЗаполнитьДействиеНаОснованииИнвентаризации(
				ДанныеСтроки,
				Неопределено, 
				Объект.Организация, 
				Объект.Подразделение,
				Объект.ФизическоеЛицо);
			
			ЗаполнитьРассчитываемыеПоля(ДанныеСтроки);
			
		КонецЕсли;
			
	КонецЦикла;
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, "ФизическоеЛицо");
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ЗаполнитьДанныеУчетаНаСервере(Объект.Товары);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийНачалоВыбораЗавершение(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	ТекущиеДанные.Комментарий = ВведенныйТекст;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(Форма, ИзмененныеРеквизиты)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ФизическоеЛицо")
		ИЛИ ОбновитьВсе Тогда
		Элементы.ТоварыФизическоеЛицо.Видимость = НЕ ЗначениеЗаполнено(Объект.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
