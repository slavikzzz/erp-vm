#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ТМЦВЭксплуатации");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ИнвентаризацияТМЦВЭксплуатации") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Дата";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ИнвентаризацияТМЦВЭксплуатации";
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры = ТМЦВЭксплуатацииПовтИсп.ВозможенУчетСерийВЭксплуатации();
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ИнвентаризацияТМЦВЭксплуатации);
	
	ПараметрыУказанияСерий.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	ПараметрыУказанияСерий.ИмяПоляСклад = Неопределено;
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	ПараметрыУказанияСерий.ИмяПоляКоличество = "КоличествоФактическое";
	
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// 
// Параметры:
//	ПараметрыУказанияСерий - см. ПараметрыУказанияСерий
//		
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|
	|	ВЫБОР
	|		КОГДА ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий.УчитыватьСерииТМЦВЭксплуатации
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 20
	|					ИНАЧЕ 19
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|
	|ПОМЕСТИТЬ Статусы
	|
	|ИЗ
	|	Товары КАК Товары
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Серия = ТоварыДляЗапроса.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ОприходованиеТМЦВЭксплуатации.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.ПрочееОприходованиеТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.ПеремещениеВЭксплуатации.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.СписаниеИзЭксплуатации.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Инвентаризация ОС".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная команда
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ИнвентаризацияТМЦВЭксплуатации) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ИнвентаризацияТМЦВЭксплуатации.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ИнвентаризацияТМЦВЭксплуатации);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Возвращает данные для заполнения документа на основании инвентаризации.
//
// Параметры:
// 		ДокументОснование - ДокументСсылка.ИнвентаризацияТМЦВЭксплуатации - Ссылка на документ инвентаризации.
// 		Дата - Дата - Дата заполнения.
// 		Действие - ПеречислениеСсылка.ДействияНаОснованииИнвентаризации - В рамках какого действия требуется получить данные (оприходование, списание, возврат).
// 		МассивНомеровСтрок - Массив из Число - Массив с номерами строк, на основании которых требуется заполнить документ.
//
// Возвращаемое значение:
//  Структура - Содержит:
//  	* Реквизиты - РезультатЗапроса - Результат запроса данных реквизитов документа
//  	* ТабличнаяЧасть - РезультатЗапроса - Результат запроса данных табличной части
//
Функция ДанныеЗаполненияНаОснованииИнвентаризации(ДокументОснование, Дата, Действие = Неопределено, Знач МассивНомеровСтрок = Неопределено) Экспорт
	
	МенеджерТаблиц = Новый МенеджерВременныхТаблиц;

	ДобавитьСозданныеДокументыНаОсновании(МенеджерТаблиц, ДокументОснование);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.ИнвентаризацияТМЦВЭксплуатации КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ТаблицаТовары.КоличествоПоДаннымУчета) КАК КоличествоПоДаннымУчета,
	|	СУММА(ТаблицаТовары.КоличествоФактическое) КАК КоличествоФактическое
	|ИЗ
	|	Документ.ИнвентаризацияТМЦВЭксплуатации.Товары КАК ТаблицаТовары
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДокументыНаОсновании КАК ДокументыНаОсновании
	|		ПО (ТаблицаТовары.Ссылка.ФизическоеЛицо = ДокументыНаОсновании.ФизическоеЛицо
	|				ИЛИ ТаблицаТовары.Ссылка.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					И ТаблицаТовары.ФизическоеЛицо = ДокументыНаОсновании.ФизическоеЛицо)
	|
	|			И (ТаблицаТовары.ИнвентарныйНомер = ДокументыНаОсновании.ИнвентарныйНомер
	|				ИЛИ ТаблицаТовары.ИнвентарныйНомер = """"
	|					И ТаблицаТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияНаОснованииИнвентаризации.Оприходование))
	|
	|			И ТаблицаТовары.Номенклатура = ДокументыНаОсновании.Номенклатура
	|			И ТаблицаТовары.Характеристика = ДокументыНаОсновании.Характеристика
	|			И ТаблицаТовары.Серия = ДокументыНаОсновании.Серия
	|			И ТаблицаТовары.Действие = ДокументыНаОсновании.Действие
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|	И (НЕ &МассивНомеровСтрокЗадан
	|			ИЛИ ТаблицаТовары.НомерСтроки В (&МассивНомеровСтрок))
	|
	|	И (НЕ &ДействиеЗадано
	|			ИЛИ ТаблицаТовары.Действие = &Действие)
	|
	|	И ДокументыНаОсновании.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ИнвентарныйНомер,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.ФизическоеЛицо
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ДействиеЗадано", ЗначениеЗаполнено(Действие));
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.УстановитьПараметр("МассивНомеровСтрок", ?(МассивНомеровСтрок = Неопределено, Новый Массив, МассивНомеровСтрок));
	Запрос.УстановитьПараметр("МассивНомеровСтрокЗадан", ?(МассивНомеровСтрок = Неопределено, Ложь, Истина));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Реквизиты", Результат[Результат.ВГраница()-1]);
	ДанныеЗаполнения.Вставить("ТабличнаяЧасть", Результат[Результат.ВГраница()]);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	Возврат ИсточникиДанных;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ИнвентаризацияТМЦВЭксплуатации";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.ПометкаУдаления,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Проведен,
	|	ДанныеДокумента.Комментарий,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.Ответственный
	|ИЗ
	|	Документ.ИнвентаризацияТМЦВЭксплуатации КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ИнвентаризацияТМЦВЭксплуатации"));
	ЗначенияПараметровПроведения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ИнвентаризацияТМЦВЭксплуатации);

	Если Реквизиты <> Неопределено Тогда
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&Подразделение                          КАК Подразделение,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	ЛОЖЬ                                    КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
	|	&Период                                 КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                            КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Заполнение

// Возвращает данные учета НМА.
//
// Параметры:
//  Ссылка - ДокументСсылка.ИнвентаризацияТМЦВЭксплуатации - 
//  Дата - Дата	- Дата, на которую нужно получить данные.
//	Организация - СправочникСсылка.Организации -
//  Подразделение - СправочникСсылка.СтруктураПредприятия -
//  СписокТМЦ - ДанныеФормыКоллекция - Список ТМЦ для которых нужно получить данные.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Содержит данные учета: 
//  	* Организация - СправочникСсылка.Организации -
//  	* Подразделение - СправочникСсылка.СтруктураПредприятия -
//  	* ИнвентарныйНомер - Строка -
//  	* Номенклатура - СправочникСсылка.Номенклатура -
//  	* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
//  	* Серия - СправочникСсылка.СерииНоменклатуры -
//  	* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица -
//  	* КоличествоПоДаннымУчета - Число -
//
Функция ДанныеУчета(Ссылка, Дата, Организация, Подразделение, СписокТМЦ) Экспорт

	ДанныеУчета = Новый ТаблицаЗначений();
	ДанныеУчета.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеУчета.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ДанныеУчета.Колонки.Добавить("ИнвентарныйНомер", Метаданные.ОпределяемыеТипы.ИнвентарныйНомерТМЦВЭксплуатации.Тип);
	ДанныеУчета.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДанныеУчета.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДанныеУчета.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ДанныеУчета.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДанныеУчета.Колонки.Добавить("КоличествоПоДаннымУчета", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));

	Если СписокТМЦ.Количество() = 0 Тогда
		Возврат ДанныеУчета;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СписокТМЦ.Номенклатура КАК Номенклатура,
	|	СписокТМЦ.Характеристика КАК Характеристика,
	|	СписокТМЦ.Серия КАК Серия,
	|	СписокТМЦ.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ПОМЕСТИТЬ СписокТМЦ
	|ИЗ
	|	&СписокТМЦ КАК СписокТМЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	ИнвентарныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТМЦВЭксплуатации.Организация КАК Организация,
	|	ТМЦВЭксплуатации.Подразделение КАК Подразделение,
	|	ТМЦВЭксплуатации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТМЦВЭксплуатации.Номенклатура КАК Номенклатура,
	|	ТМЦВЭксплуатации.Характеристика КАК Характеристика,
	|	ТМЦВЭксплуатации.Серия КАК Серия,
	|	ТМЦВЭксплуатации.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	СУММА(ТМЦВЭксплуатации.КоличествоПоДаннымУчета) КАК КоличествоПоДаннымУчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТМЦВЭксплуатации.Организация КАК Организация,
	|		ТМЦВЭксплуатации.Подразделение КАК Подразделение,
	|		ТМЦВЭксплуатации.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ТМЦВЭксплуатации.Номенклатура КАК Номенклатура,
	|		ТМЦВЭксплуатации.Характеристика КАК Характеристика,
	|		ТМЦВЭксплуатации.Серия КАК Серия,
	|		ТМЦВЭксплуатации.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		ТМЦВЭксплуатации.КоличествоОстаток КАК КоличествоПоДаннымУчета
	|	ИЗ
	|		РегистрНакопления.ТМЦВЭксплуатации.Остатки(
	|				&Дата,
	|				(Номенклатура, Характеристика, Серия, ИнвентарныйНомер) В (
	|					ВЫБРАТЬ
	|						СписокТМЦ.Номенклатура,
	|						СписокТМЦ.Характеристика,
	|						СписокТМЦ.Серия,
	|						СписокТМЦ.ИнвентарныйНомер
	|					ИЗ
	|						СписокТМЦ КАК СписокТМЦ)) КАК ТМЦВЭксплуатации
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Организация КАК Организация,
	|		ДанныеДокумента.Подразделение КАК Подразделение,
	|		ТаблицаТовары.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Серия КАК Серия,
	|		ТаблицаТовары.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		-ТаблицаТовары.Количество КАК КоличествоПоДаннымУчета
	|	ИЗ
	|		Документ.ОприходованиеТМЦВЭксплуатации КАК ДанныеДокумента
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТМЦВЭксплуатации.Товары КАК ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ГДЕ
	|		ДанныеДокумента.Проведен
	|		И ДанныеДокумента.ДокументОснование = &Ссылка
	|		И &Ссылка <> ЗНАЧЕНИЕ(Документ.ИнвентаризацияТМЦВЭксплуатации.ПустаяСсылка)
	|		И ДанныеДокумента.Организация = &Организация
	|		И ДанныеДокумента.Подразделение = &Подразделение
	|		И ДанныеДокумента.Дата < &Дата
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Организация КАК Организация,
	|		ДанныеДокумента.Подразделение КАК Подразделение,
	|		ТаблицаТовары.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Серия КАК Серия,
	|		ТаблицаТовары.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		ТаблицаТовары.Количество КАК КоличествоПоДаннымУчета
	|	ИЗ
	|		Документ.ПрочееОприходованиеТоваров КАК ДанныеДокумента
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров.Товары КАК ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ГДЕ
	|		ДанныеДокумента.Проведен
	|		И ДанныеДокумента.ДокументОснование = &Ссылка
	|		И &Ссылка <> ЗНАЧЕНИЕ(Документ.ИнвентаризацияТМЦВЭксплуатации.ПустаяСсылка)
	|		И ДанныеДокумента.Организация = &Организация
	|		И ДанныеДокумента.Подразделение = &Подразделение
	|		И ДанныеДокумента.Дата < &Дата
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Организация КАК Организация,
	|		ДанныеДокумента.Подразделение КАК Подразделение,
	|		ТаблицаТовары.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Серия КАК Серия,
	|		ТаблицаТовары.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		ТаблицаТовары.Количество КАК КоличествоПоДаннымУчета
	|	ИЗ
	|		Документ.СписаниеИзЭксплуатации КАК ДанныеДокумента
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации.Товары КАК ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ГДЕ
	|		ДанныеДокумента.Проведен
	|		И ДанныеДокумента.ДокументОснование = &Ссылка
	|		И &Ссылка <> ЗНАЧЕНИЕ(Документ.ИнвентаризацияТМЦВЭксплуатации.ПустаяСсылка)
	|		И ДанныеДокумента.Организация = &Организация
	|		И ДанныеДокумента.Подразделение = &Подразделение
	|		И ДанныеДокумента.Дата < &Дата
	|
	|	) КАК ТМЦВЭксплуатации
	|
	|СГРУППИРОВАТЬ ПО
	|	ТМЦВЭксплуатации.Организация,
	|	ТМЦВЭксплуатации.Подразделение,
	|	ТМЦВЭксплуатации.ФизическоеЛицо,
	|	ТМЦВЭксплуатации.Номенклатура,
	|	ТМЦВЭксплуатации.Характеристика,
	|	ТМЦВЭксплуатации.Серия,
	|	ТМЦВЭксплуатации.ИнвентарныйНомер
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТМЦВЭксплуатации.КоличествоПоДаннымУчета) >=0
	|";
	
	ТаблицаТМЦ = Новый ТаблицаЗначений();
	ТаблицаТМЦ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТМЦ.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТМЦ.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаТМЦ.Колонки.Добавить("ИнвентарныйНомер", Метаданные.ОпределяемыеТипы.ИнвентарныйНомерТМЦВЭксплуатации.Тип);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СписокТМЦ, ТаблицаТМЦ);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), КонецДня(Дата), КонецДня(ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("СписокТМЦ", ТаблицаТМЦ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеУчетаТМЦ = ДанныеУчета.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеУчетаТМЦ, Выборка);
	
	КонецЦикла;
	
	ДанныеУчета.Индексы.Добавить("Организация,Подразделение,ИнвентарныйНомер,Номенклатура,Характеристика,Серия,ФизическоеЛицо");
	
	Возврат ДанныеУчета;
	
КонецФункции

// Заполнить данные учета.
// 
// Параметры:
//  Объект - ДокументОбъект.ИнвентаризацияТМЦВЭксплуатации - Объект
//  КоллекцияСтрок - ДанныеФормыКоллекция - Коллекция строк
//  ЗаполнитьСлужебныеРеквизиты - Булево - Заполнить служебные реквизиты
//	УстановитьДействие - Булево - Ложь, если нужно оставить ранее установленное действие
Процедура ЗаполнитьДанныеУчета(Объект, КоллекцияСтрок, ЗаполнитьСлужебныеРеквизиты = Ложь, УстановитьДействие = Истина) Экспорт

	ДанныеУчета = ДанныеУчета(
		Объект.Ссылка, Объект.Дата, Объект.Организация, Объект.Подразделение, КоллекцияСтрок);
	
	Для каждого ДанныеСтроки Из КоллекцияСтрок Цикл
		
		ДанныеУчетаСтроки = ДанныеУчетаСтроки(Объект.Организация, Объект.Подразделение, Объект.ФизическоеЛицо, ДанныеСтроки, ДанныеУчета);
		
		ТМЦВЭксплуатацииКлиентСервер.ЗаполнитьСтрокуИнвентаризацииПоДаннымУчета(
			Объект, ДанныеСтроки, ДанныеУчетаСтроки, ЗаполнитьСлужебныеРеквизиты, УстановитьДействие);
		
	КонецЦикла; 

КонецПроцедуры

// Получает данные учета по строке ТМЦ.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация
//  Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - Физическое лицо
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции - Данные строки
//  ДанныеУчета - см. ДанныеУчета
// 
// Возвращаемое значение:
//  Неопределено, Структура - Данные учета строки:
// 		* Организация - СправочникСсылка.Организации -
// 		* Подразделение - СправочникСсылка.СтруктураПредприятия -
// 		* ИнвентарныйНомер - Строка -
// 		* Номенклатура - СправочникСсылка.Номенклатура -
// 		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
// 		* Серия - СправочникСсылка.СерииНоменклатуры -
// 		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица -
// 		* КоличествоПоДаннымУчета - Число -
Функция ДанныеУчетаСтроки(Организация, Подразделение, ФизическоеЛицо, ДанныеСтроки, ДанныеУчета) Экспорт
	
	НайденныеДанныеУчета = ДанныеУчета.НайтиСтроки(КлючТМЦ(Организация, Подразделение, ФизическоеЛицо, ДанныеСтроки));
	
	Если НайденныеДанныеУчета.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеУчетаСтроки = Новый Структура;
	ДанныеУчетаСтроки.Вставить("Организация", НайденныеДанныеУчета[0].Организация);
	ДанныеУчетаСтроки.Вставить("Подразделение", НайденныеДанныеУчета[0].Подразделение);
	ДанныеУчетаСтроки.Вставить("Номенклатура", НайденныеДанныеУчета[0].Номенклатура);
	ДанныеУчетаСтроки.Вставить("Характеристика", НайденныеДанныеУчета[0].Характеристика);
	ДанныеУчетаСтроки.Вставить("Серия", НайденныеДанныеУчета[0].Серия);
	ДанныеУчетаСтроки.Вставить("ФизическоеЛицо", НайденныеДанныеУчета[0].ФизическоеЛицо);
	ДанныеУчетаСтроки.Вставить("КоличествоПоДаннымУчета", НайденныеДанныеУчета[0].КоличествоПоДаннымУчета);
	
	Если ЗначениеЗаполнено(НайденныеДанныеУчета[0].ИнвентарныйНомер) Тогда
		ДанныеУчетаСтроки.Вставить("ИнвентарныйНомер", НайденныеДанныеУчета[0].ИнвентарныйНомер);
	Иначе
		ДанныеУчетаСтроки.Вставить("ИнвентарныйНомер", "");
	КонецЕсли;
	
	Возврат ДанныеУчетаСтроки;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ИнвентаризацияТМЦВЭксплуатацииЛокализация.ДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

// Переопределяет параметры загрузки данных из файла.
//
// Параметры:
//  Параметры - Структура:
//   * ИмяМакетаСШаблоном - Строка - наименование макета. Например, "ЗагрузкаИзФайла".
//   * ИмяТабличнойЧасти - Строка - Полное имя табличной части. Например, "Документ._ДемоСчетНаОплатуПокупателю.ТабличнаяЧасть.Товары"
//   * ОбязательныеКолонки - Массив из Строка - наименования обязательных для заполнения колонок.
//   * ТипДанныхКолонки - Соответствие из КлючИЗначение:
//      * Ключ - Строка - имя колонки;
//      * Значение - ОписаниеТипов - тип колонки загружаемых данных.
//   * ДополнительныеПараметры - Структура
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
    
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных - Строка - адрес временного хранилища с таблицей значений, в которой находятся загруженные данные из файла. 
//   							Состав колонок: 
//     								Идентификатор - Число - порядковый номер строки;
//     								остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений, являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько подходящих вариантов:
//   							Состав колонок: 
//       							* Колонка - Строка - имя колонки, в которой была обнаружена неоднозначность;
//       							* Идентификатор - Число - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры - Произвольный - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	ЗагружаемыеДанные.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ЗагружаемыеДанные.КодНоменклатуры КАК КодНоменклатуры,
	|	ЗагружаемыеДанные.АртикулНоменклатуры КАК АртикулНоменклатуры,
	|	ЗагружаемыеДанные.Номенклатура КАК Номенклатура,
	|	ЗагружаемыеДанные.Характеристика КАК Характеристика,
	|	ЗагружаемыеДанные.Серия КАК Серия,
	|	ЗагружаемыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗагружаемыеДанные.КоличествоФактическое КАК КоличествоФактическое,
	|	ЗагружаемыеДанные.Комментарий КАК Комментарий,
	|	ЗагружаемыеДанные.ИмяДействия КАК ИмяДействия
	|
	|ПОМЕСТИТЬ втЗагружаемыеДанные
	|
	|ИЗ
	|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	ТМЦВЭксплуатации.Номенклатура КАК Номенклатура,
	|	ТМЦВЭксплуатации.Характеристика КАК Характеристика,
	|	ТМЦВЭксплуатации.Серия КАК Серия,
	|	ТМЦВЭксплуатации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	|
	|ПОМЕСТИТЬ втВсеДанныеПоИнвентарнымНомерам
	|
	|ИЗ
	|	втЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТМЦВЭксплуатации КАК ТМЦВЭксплуатации
	|		ПО ТМЦВЭксплуатации.ИнвентарныйНомер = ЗагружаемыеДанные.ИнвентарныйНомер
	|			И ТМЦВЭксплуатации.Период < &Период
	|
	|ГДЕ
	|	ЗагружаемыеДанные.ИнвентарныйНомер <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоИнвентарнымНомерам.Идентификатор КАК Идентификатор,
	|	втВсеДанныеПоИнвентарнымНомерам.Номенклатура КАК Номенклатура,
	|	втВсеДанныеПоИнвентарнымНомерам.Характеристика КАК Характеристика,
	|	втВсеДанныеПоИнвентарнымНомерам.Серия КАК Серия,
	|	втВсеДанныеПоИнвентарнымНомерам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеПоИнвентарнымНомерам.Количество КАК Количество
	|
	|ПОМЕСТИТЬ втДанныеПоИнвентарнымНомерам
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		втВсеДанныеПоИнвентарнымНомерам.Идентификатор КАК Идентификатор,
	|		МАКСИМУМ(втВсеДанныеПоИнвентарнымНомерам.НомерЗаписи) КАК НомерЗаписи,
	|		КОЛИЧЕСТВО(втВсеДанныеПоИнвентарнымНомерам.НомерЗаписи) КАК Количество
	|	ИЗ
	|		втВсеДанныеПоИнвентарнымНомерам КАК втВсеДанныеПоИнвентарнымНомерам
	|
	|	СГРУППИРОВАТЬ ПО
	|		втВсеДанныеПоИнвентарнымНомерам.Идентификатор
	|
	|	) КАК ДанныеПоИнвентарнымНомерам
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеДанныеПоИнвентарнымНомерам КАК втВсеДанныеПоИнвентарнымНомерам
	|		ПО втВсеДанныеПоИнвентарнымНомерам.НомерЗаписи = ДанныеПоИнвентарнымНомерам.НомерЗаписи
	|
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(СпрНоменклатура.Ссылка) КАК Ссылка,
	|	КОЛИЧЕСТВО(СпрНоменклатура.Ссылка) КАК Количество
	|
	|ПОМЕСТИТЬ втНоменклатураПоАртикулу
	|
	|ИЗ
	|	втЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Артикул = ЗагружаемыеДанные.АртикулНоменклатуры
	|			И НЕ СпрНоменклатура.ПометкаУдаления
	|			И НЕ СпрНоменклатура.ЭтоГруппа
	|
	|ГДЕ
	|	ЗагружаемыеДанные.АртикулНоменклатуры <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗагружаемыеДанные.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(СпрНоменклатура.Ссылка) КАК Ссылка,
	|	КОЛИЧЕСТВО(СпрНоменклатура.Ссылка) КАК Количество
	|
	|ПОМЕСТИТЬ втНоменклатураПоКоду
	|
	|ИЗ
	|	втЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Код = ЗагружаемыеДанные.КодНоменклатуры
	|			И НЕ СпрНоменклатура.ПометкаУдаления
	|			И НЕ СпрНоменклатура.ЭтоГруппа
	|
	|ГДЕ
	|	ЗагружаемыеДанные.КодНоменклатуры <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗагружаемыеДанные.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(СпрНоменклатура.Ссылка) КАК Ссылка,
	|	КОЛИЧЕСТВО(СпрНоменклатура.Ссылка) КАК Количество
	|
	|ПОМЕСТИТЬ втНоменклатураПоНаименованию
	|
	|ИЗ
	|	втЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Наименование = ЗагружаемыеДанные.Номенклатура
	|			И НЕ СпрНоменклатура.ПометкаУдаления
	|			И НЕ СпрНоменклатура.ЭтоГруппа
	|
	|ГДЕ
	|	ЗагружаемыеДанные.Номенклатура <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗагружаемыеДанные.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	СпрХарактеристики.Владелец КАК Владелец,
	|	МАКСИМУМ(СпрХарактеристики.Ссылка) КАК Ссылка,
	|	КОЛИЧЕСТВО(СпрХарактеристики.Ссылка) КАК Количество
	|
	|ПОМЕСТИТЬ втХарактеристикиПоНаименованию
	|
	|ИЗ
	|	втЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|		ПО СпрХарактеристики.Наименование = ЗагружаемыеДанные.Номенклатура
	|			И НЕ СпрХарактеристики.ПометкаУдаления
	|
	|ГДЕ
	|	ЗагружаемыеДанные.Характеристика <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗагружаемыеДанные.Идентификатор,
	|	СпрХарактеристики.Владелец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	СпрСерии.ВидНоменклатуры КАК ВидНоменклатуры,
	|	МАКСИМУМ(СпрСерии.Ссылка) КАК Ссылка,
	|	КОЛИЧЕСТВО(СпрСерии.Ссылка) КАК Количество
	|
	|ПОМЕСТИТЬ втСерииПоНаименованию
	|
	|ИЗ
	|	втЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СпрСерии
	|		ПО СпрСерии.Наименование = ЗагружаемыеДанные.Серия
	|			И НЕ СпрСерии.ПометкаУдаления
	|
	|ГДЕ
	|	ЗагружаемыеДанные.Серия <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗагружаемыеДанные.Идентификатор,
	|	СпрСерии.ВидНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(СпрФизическиеЛица.Ссылка) КАК Ссылка,
	|	КОЛИЧЕСТВО(СпрФизическиеЛица.Ссылка) КАК Количество
	|
	|ПОМЕСТИТЬ втФизическиеЛицаПоНаименованию
	|
	|ИЗ
	|	втЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СпрФизическиеЛица
	|		ПО СпрФизическиеЛица.Наименование = ЗагружаемыеДанные.ФизическоеЛицо
	|			И НЕ СпрФизическиеЛица.ПометкаУдаления
	|			И НЕ СпрФизическиеЛица.ЭтоГруппа
	|
	|ГДЕ
	|	ЗагружаемыеДанные.ФизическоеЛицо <> """"
	|	И &ЗагрузитьФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗагружаемыеДанные.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|
	|	ВЫБОР
	|		КОГДА НЕ втНоменклатураПоНаименованию.Идентификатор ЕСТЬ NULL
	|
	|			ТОГДА втНоменклатураПоНаименованию.Ссылка
	|
	|		КОГДА НЕ втНоменклатураПоАртикулу.Идентификатор ЕСТЬ NULL
	|
	|			ТОГДА втНоменклатураПоАртикулу.Ссылка
	|
	|		КОГДА НЕ втНоменклатураПоКоду.Идентификатор ЕСТЬ NULL
	|
	|			ТОГДА втНоменклатураПоКоду.Ссылка
	|
	|		КОГДА НЕ втДанныеПоИнвентарнымНомерам.Идентификатор ЕСТЬ NULL
	|
	|			ТОГДА втДанныеПоИнвентарнымНомерам.Номенклатура
	|
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|	КОНЕЦ КАК Ссылка
	|
	|ПОМЕСТИТЬ втНайденнаяНоменклатура
	| 
	|ИЗ
	|	втЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураПоАртикулу КАК втНоменклатураПоАртикулу
	|		ПО втНоменклатураПоАртикулу.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураПоКоду КАК втНоменклатураПоКоду
	|		ПО втНоменклатураПоКоду.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураПоНаименованию КАК втНоменклатураПоНаименованию
	|		ПО втНоменклатураПоНаименованию.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеПоИнвентарнымНомерам КАК втДанныеПоИнвентарнымНомерам
	|		ПО втДанныеПоИнвентарнымНомерам.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	втХарактеристикиПоНаименованию.Ссылка КАК Ссылка
	|
	|ПОМЕСТИТЬ втНайденнаяХарактеристика
	| 
	|ИЗ
	|	втЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНайденнаяНоменклатура КАК втНайденнаяНоменклатура
	|		ПО втНайденнаяНоменклатура.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втХарактеристикиПоНаименованию КАК втХарактеристикиПоНаименованию
	|		ПО втХарактеристикиПоНаименованию.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|			И (втХарактеристикиПоНаименованию.Владелец = втНайденнаяНоменклатура.Ссылка
	|				ИЛИ втХарактеристикиПоНаименованию.Владелец = втНайденнаяНоменклатура.Ссылка.ВидНоменклатуры)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	втСерииПоНаименованию.Ссылка КАК Ссылка
	|
	|ПОМЕСТИТЬ втНайденнаяСерия
	|
	|ИЗ
	|	втЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНайденнаяНоменклатура КАК втНайденнаяНоменклатура
	|		ПО втНайденнаяНоменклатура.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСерииПоНаименованию КАК втСерииПоНаименованию
	|		ПО втСерииПоНаименованию.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|			И (втСерииПоНаименованию.ВидНоменклатуры = ВЫБОР
	|				КОГДА втНайденнаяНоменклатура.Ссылка.ВидНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
	|					ТОГДА втНайденнаяНоменклатура.Ссылка.ВидНоменклатуры.ВладелецСерий
	|				ИНАЧЕ втНайденнаяНоменклатура.Ссылка.ВидНоменклатуры
	|				КОНЕЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|  
	|////////////////////////////////////////////////////////////////////////////////
	|;
	|
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|
	|	ЕСТЬNULL(втНайденнаяНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(втНайденнаяХарактеристика.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(втНайденнаяСерия.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
	|
	// ФизическоеЛицо
	|	ВЫБОР
	|		КОГДА НЕ &ЗагрузитьФизическоеЛицо
	|
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|		КОГДА НЕ втФизическиеЛицаПоНаименованию.Идентификатор ЕСТЬ NULL
	|
	|			ТОГДА втФизическиеЛицаПоНаименованию.Ссылка
	|
	|		КОГДА НЕ втДанныеПоИнвентарнымНомерам.Идентификатор ЕСТЬ NULL
	|
	|			ТОГДА втДанныеПоИнвентарнымНомерам.ФизическоеЛицо
	|
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|	КОНЕЦ КАК ФизическоеЛицо,
	|
	|	ЗагружаемыеДанные.КоличествоФактическое КАК КоличествоФактическое,
	|	ЗагружаемыеДанные.Комментарий КАК Комментарий,
	|	ЗагружаемыеДанные.ИмяДействия КАК ИмяДействия
	|
	|ИЗ
	|	втЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНайденнаяНоменклатура КАК втНайденнаяНоменклатура
	|		ПО втНайденнаяНоменклатура.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНайденнаяХарактеристика КАК втНайденнаяХарактеристика
	|		ПО втНайденнаяХарактеристика.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНайденнаяСерия КАК втНайденнаяСерия
	|		ПО втНайденнаяСерия.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФизическиеЛицаПоНаименованию КАК втФизическиеЛицаПоНаименованию
	|		ПО втФизическиеЛицаПоНаименованию.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеПоИнвентарнымНомерам КАК втДанныеПоИнвентарнымНомерам
	|		ПО втДанныеПоИнвентарнымНомерам.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|";
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных); // ТаблицаЗначений
	
	Если ЗагружаемыеДанные.Колонки.Найти("ФизическоеЛицо") = Неопределено Тогда
		ЗагружаемыеДанные.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("ЗагружаемыеДанные", ЗагружаемыеДанные);
	Запрос.УстановитьПараметр("Период", ДополнительныеПараметры.Дата);
	Запрос.УстановитьПараметр("ЗагрузитьФизическоеЛицо", НЕ ЗначениеЗаполнено(ДополнительныеПараметры.ФизическоеЛицо));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
        Если ВРег(Выборка.ИмяДействия) = ВРег(НСтр("ru = 'Оприходовать';
													|en = 'Receive'")) Тогда
        	НоваяСтрока.Действие = Перечисления.ДействияНаОснованииИнвентаризации.Оприходование;
        ИначеЕсли ВРег(Выборка.ИмяДействия) = ВРег(НСтр("ru = 'Вернуть';
														|en = 'Return'")) Тогда
        	НоваяСтрока.Действие = Перечисления.ДействияНаОснованииИнвентаризации.ВозвратИзЭксплуатации;
        КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаТовары, АдресТаблицыСопоставления);

КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
// 	ПолноеИмяТабличнойЧасти- Строка - полное имя табличной части, в которую загружаются данные.
// 	СписокНеоднозначностей - Массив - список неоднозначностей.
// 	ИмяКолонки - Строка - имя колонки, в которой возникает неоднозначность.
// 	ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
// 	ДополнительныеПараметры - Структура - дополнительные параметры, переданные из формы-источнике.
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт 
	
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Формирует ключ ТМЦ.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация
//  Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - Физическое лицо
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции - Данные строки
// 
// Возвращаемое значение:
//  Структура - Ключ ТМЦ:
// 		* Организация - СправочникСсылка.Организации -
// 		* Подразделение - СправочникСсылка.СтруктураПредприятия -
// 		* ИнвентарныйНомер - Строка -
// 		* Номенклатура - СправочникСсылка.Номенклатура -
// 		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
// 		* Серия - СправочникСсылка.СерииНоменклатуры -
// 		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица -
Функция КлючТМЦ(Организация, Подразделение, ФизическоеЛицо, ДанныеСтроки) Экспорт
	
	ДанныеКлюча = Новый Структура;
	ДанныеКлюча.Вставить("Организация", Организация);
	ДанныеКлюча.Вставить("Подразделение", Подразделение);
	ДанныеКлюча.Вставить("ИнвентарныйНомер", ДанныеСтроки.ИнвентарныйНомер);
	ДанныеКлюча.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	ДанныеКлюча.Вставить("Характеристика", ДанныеСтроки.Характеристика);
	ДанныеКлюча.Вставить("Серия", ДанныеСтроки.Серия);
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ДанныеКлюча.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	Иначе
		ДанныеКлюча.Вставить("ФизическоеЛицо", ДанныеСтроки.ФизическоеЛицо);
	КонецЕсли;
	
	Возврат ДанныеКлюча;
	
КонецФункции

Функция МожноУстановитьДействие(ДанныеСтроки, НовоеДействие) Экспорт
	
	Результат =
		(НовоеДействие = Перечисления.ДействияНаОснованииИнвентаризации.Оприходование
			ИЛИ НовоеДействие = Перечисления.ДействияНаОснованииИнвентаризации.ВозвратИзЭксплуатации)
		И ДанныеСтроки.КоличествоФактическое <> 0
		И ДанныеСтроки.КоличествоФактическое > ДанныеСтроки.КоличествоПоДаннымУчета 
		И (ДанныеСтроки.КоличествоПоДаннымУчета <> 0
		 	ИЛИ НовоеДействие = Перечисления.ДействияНаОснованииИнвентаризации.Оприходование);
			 	
	Возврат Результат;
	
КонецФункции

// Добавляет в менеджер временную таблицу созданных на основании инвентаризации документов.
//
// Параметры:
// 	МенеджерТаблиц - МенеджерВременныхТаблиц - Менеджер назначения
// 	ДокументОснование - ДокументСсылка.ИнвентаризацияТМЦВЭксплуатации - Ссылка на документ инвентаризации
//
Процедура ДобавитьСозданныеДокументыНаОсновании(МенеджерТаблиц, ДокументОснование)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДокументыНаОсновании.Ссылка) КАК Ссылка,
	|	ДокументыНаОсновании.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДокументыНаОсновании.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ДокументыНаОсновании.Номенклатура КАК Номенклатура,
	|	ДокументыНаОсновании.Характеристика КАК Характеристика,
	|	ДокументыНаОсновании.Серия КАК Серия,
	|	ДокументыНаОсновании.Действие КАК Действие
	|
	|ПОМЕСТИТЬ втДокументыНаОсновании
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		Операция.Ссылка КАК Ссылка,
	|		ТабличнаяЧасть.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ТабличнаяЧасть.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|		ТабличнаяЧасть.Характеристика КАК Характеристика,
	|		ТабличнаяЧасть.Серия КАК Серия,
	|		ЗНАЧЕНИЕ(Перечисление.ДействияНаОснованииИнвентаризации.Оприходование) КАК Действие
	|	ИЗ
	|		Документ.ОприходованиеТМЦВЭксплуатации КАК Операция
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТМЦВЭксплуатации.Товары КАК ТабличнаяЧасть
	|			ПО Операция.Ссылка = ТабличнаяЧасть.Ссылка
	|	ГДЕ
	|		Операция.Проведен
	|		И Операция.ДокументОснование = &ДокументОснование
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Операция.Ссылка,
	|		ТабличнаяЧасть.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ТабличнаяЧасть.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|		ТабличнаяЧасть.Характеристика КАК Характеристика,
	|		ТабличнаяЧасть.Серия КАК Серия,
	|		ЗНАЧЕНИЕ(Перечисление.ДействияНаОснованииИнвентаризации.Списание)
	|	ИЗ
	|		Документ.СписаниеИзЭксплуатации КАК Операция
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации.Товары КАК ТабличнаяЧасть
	|			ПО Операция.Ссылка = ТабличнаяЧасть.Ссылка
	|	ГДЕ
	|		Операция.Проведен
	|		И Операция.ДокументОснование = &ДокументОснование
	|
	|	) КАК ДокументыНаОсновании
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыНаОсновании.ФизическоеЛицо,
	|	ДокументыНаОсновании.ИнвентарныйНомер,
	|	ДокументыНаОсновании.Номенклатура,
	|	ДокументыНаОсновании.Характеристика,
	|	ДокументыНаОсновании.Серия,
	|	ДокументыНаОсновании.Действие";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли