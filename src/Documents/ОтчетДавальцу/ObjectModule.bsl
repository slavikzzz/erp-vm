#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет условия продаж в заказе клиента
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения.
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияПродаж.Валюта;
	ВалютаВзаиморасчетов = УсловияПродаж.ВалютаВзаиморасчетов;
	НаправлениеДеятельности = УсловияПродаж.НаправлениеДеятельности;
	
	ЦенаВключаетНДС       = УсловияПродаж.ЦенаВключаетНДС;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация <> Организация Тогда
		Организация = УсловияПродаж.Организация;
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Организация;
		СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
		БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) И УсловияПродаж.Контрагент <> Контрагент Тогда
			Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
			ПараметрыОбъектаССоглашением(),
			Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья,
			ВалютаВзаиморасчетов);
		
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности, , Договор);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УсловияПродаж.ИспользуютсяДоговорыКонтрагентов) 
		ИЛИ НЕ УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		ОплатаВВалюте = УсловияПродаж.ОплатаВВалюте;
	Иначе
		ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ОплатаВВалюте");
	КонецЕсли;
	
	ЗаполнитьУсловияРасчетов(УсловияПродаж);
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияПродаж.ГруппаФинансовогоУчета;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по умолчанию в заказе клиента
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
			Партнер,
			Новый Структура (
				"ТолькоТиповые,
				|УчитыватьГруппыСкладов,
				|ИсключитьГруппыСкладовДоступныеВЗаказах,
				|ХозяйственныеОперации,
				|ВыбранноеСоглашение",
				Истина,
				Истина,
				Истина,
				Перечисления.ХозяйственныеОперации.РеализацияКлиенту,
				Справочники.СоглашенияСКлиентами.ПустаяСсылка()));
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение) Тогда
				ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
			КонецЕсли;
			
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ИсправлениеДокументов.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(
		Продукция,
		ЦенаВключаетНДС);
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	ВзаиморасчетыСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);

	ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, "Продукция");
	
	ПараметрыРегистрации = Документы.ОтчетДавальцу.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПередЗаписью(ПараметрыРегистрации, РежимЗаписи, ПометкаУдаления, Проведен);
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи);
	
	ОтчетДавальцуЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);

	Если Не ЗначениеЗаполнено(Автор) И ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("МассивЗаказов") Тогда
			
			МетаданыеЗаказа = ДанныеЗаполнения.МассивЗаказов[0].Метаданные();
			
			Если ОбщегоНазначения.ЭтоДокумент(МетаданыеЗаказа) Тогда
				
				Дата = ?(ДанныеЗаполнения.Свойство("ДатаОтгрузки"), ДанныеЗаполнения.ДатаОтгрузки, ТекущаяДатаСеанса());
				ЗаполнитьДокументНаОснованииЗаказаКлиента(ДанныеЗаполнения.МассивЗаказов, ЗначениеЗаполнено(Дата), ДанныеЗаполнения.РеквизитыШапки);
				
			ИначеЕсли ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданыеЗаказа.ПолноеИмя()) = Справочники.ДоговорыКонтрагентов Тогда
				
				ЗаполнитьДокументНаОснованииДоговора(ДанныеЗаполнения.МассивЗаказов, ДанныеЗаполнения.РеквизитыШапки);
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
			
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		
		ЗаполнитьДокументНаОснованииЗаказаКлиента(ДанныеЗаполнения, Ложь);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	
		ЗаполнитьДокументНаОснованииДоговора(ДанныеЗаполнения);

	Иначе
		
		ИнициализироватьУсловияПродаж();
		
	КонецЕсли;
	
	Автор = Пользователи.ТекущийПользователь();
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(ЭтотОбъект, Ложь);
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ВзаиморасчетыСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения);
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь", Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	Документы.ОтчетДавальцу.УстановитьФлагДоговорНеОбязателен(ЭтотОбъект);
	
	ОтчетДавальцуЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

#Область Договор

	Если ДоговорНеОбязателен Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	
#КонецОбласти
	
#Область ДокХарактеристики
	
	ПроверятьХарактеристику = Ложь;
	
	Если Не Номенклатура.Пустая() Тогда
		
		МассивВариантов = Новый Массив;
		МассивВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
		МассивВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры);
		МассивВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
		
		ПроверятьХарактеристику = Не (МассивВариантов.Найти(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользованиеХарактеристик")) = Неопределено);
		
	КонецЕсли;
	
	Если Не ПроверятьХарактеристику Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	КонецЕсли;

#КонецОбласти

#Область ТчХарактеристикиКоличество
	
	ПараметрыПроверкиКоличества = Документы.ОтчетДавальцу.ПараметрыТЧДляОкругления();
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(
		ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверкиКоличества["Продукция"]);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "Продукция";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);

#КонецОбласти

#Область ИсключимПроверенныеРеквизитыИзДальнейшейПроверки
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);

#КонецОбласти

#Область ПроверкаНазначенияБезЗаказа

	ПроверитьНазначениеБезЗаказа(Отказ);

#КонецОбласти

#Область ПроверкаОстальныхРеквизитов
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;

#КонецОбласти

#Область ПроверкаКорректностиЗаполненияДокумента
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект,Отказ);
	
#КонецОбласти

	ОтчетДавальцуЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ПараметрыРегистрации = Документы.ОтчетДавальцу.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПриПроведении(ПараметрыРегистрации);
	
	ОтчетДавальцуЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ПараметрыРегистрации = Документы.ОтчетДавальцу.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПриУдаленииПроведения(ПараметрыРегистрации);
	
	ОтчетДавальцуЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Согласован = Ложь;
	ЗаказДавальца = Неопределено;
	ДоговорНеОбязателен = Ложь;
	
	Продукция.Очистить();
	РасшифровкаПлатежа.Очистить();
	
	ИнициализироватьДокумент();
	
	ВзаиморасчетыСервер.ПриКопировании(ЭтотОбъект);
	
	ОбщегоНазначенияУТ.ОчиститьИдентификаторыДокумента(ЭтотОбъект, "Продукция");
	
	ОтчетДавальцуЛокализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
	Автор = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	ОтчетДавальцуЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументНаОснованииЗаказаКлиента(Знач ДокументОснование,Знач ЗаполнятьНаДатуОказанияУслуг = Истина, РеквизитыЗаказа = Неопределено)
	
	ТипОснования = ТипЗнч(ДокументОснование);
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказДавальца") Тогда
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		// *** Основные реквизиты
		|	ЗаказДавальца.Ссылка                    КАК ЗаказДавальца,
		|	ЗаказДавальца.Сделка                    КАК Сделка,
		|	ЗаказДавальца.Статус                    КАК СтатусДокумента,
		|	ЗаказДавальца.Организация               КАК Организация,
		|	ЗаказДавальца.БанковскийСчет            КАК БанковскийСчетОрганизации,
		|	ЗаказДавальца.Подразделение             КАК Подразделение,
		// *** Реквизиты оплаты
		|	ЗаказДавальца.ПорядокРасчетов           КАК ПорядокРасчетов,
		|	ЗаказДавальца.ФормаОплаты               КАК ФормаОплаты,
		|	ЗаказДавальца.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
		|	ЗаказДавальца.Касса                     КАК Касса,
		|	ЗаказДавальца.Валюта                    КАК Валюта,
		|	ЗаказДавальца.Валюта                    КАК ВалютаВзаиморасчетов,
		|	ЗаказДавальца.ГрафикОплаты              КАК ГрафикОплаты,
		|	ЗаказДавальца.НаправлениеДеятельности   КАК НаправлениеДеятельности,
		|	ЗаказДавальца.ОплатаВВалюте             КАК ОплатаВВалюте,
		// *** Информация о партнере
		|	ЗаказДавальца.Партнер                   КАК Партнер,
		|	ЗаказДавальца.Контрагент                КАК Контрагент,
		|	ЗаказДавальца.Договор                   КАК Договор,
		|	ЗаказДавальца.КонтактноеЛицо            КАК КонтактноеЛицо,
		|	ЗаказДавальца.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		// *** НДС
		|	ЗаказДавальца.ЦенаВключаетНДС           КАК ЦенаВключаетНДС,
		|	ЗаказДавальца.НалогообложениеНДС        КАК НалогообложениеНДС,
		|	ЗаказДавальца.СтавкаНДС                 КАК СтавкаНДС,
		// *** Реквизиты услуги
		|	ЗаказДавальца.Номенклатура              КАК Номенклатура,
		|	ЗаказДавальца.Характеристика            КАК Характеристика,
		|	ЗаказДавальца.Содержание                КАК Содержание,
		// *** Ошибки запонления
		|	(НЕ ЗаказДавальца.Проведен)             КАК ЕстьОшибкиПроведен,
		|	ВЫБОР КОГДА ЗаказДавальца.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
		|			ИЛИ ЗаказДавальца.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке)
		|			ИЛИ ЗаказДавальца.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт) ТОГДА
		|		ЛОЖЬ
		|	ИНАЧЕ
		|		ИСТИНА
		|	КОНЕЦ                                   КАК ЕстьОшибкиСтатус
		|
		|ИЗ
		|	Документ.ЗаказДавальца КАК ЗаказДавальца
		|
		|ГДЕ
		|	ЗаказДавальца.Ссылка = &ЗаказДавальца");
		
		Запрос.УстановитьПараметр("ЗаказДавальца", ДокументОснование);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		РеквизитыЗаказа = РезультатЗапроса.Выбрать();
		РеквизитыЗаказа.Следующий();
		
		МассивДопустимыхСтатусов = Новый Массив;
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			РеквизитыЗаказа.ЗаказДавальца,
			РеквизитыЗаказа.СтатусДокумента,
			РеквизитыЗаказа.ЕстьОшибкиПроведен,
			РеквизитыЗаказа.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов);
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		
	ИначеЕсли ТипОснования = Тип("Массив") Тогда
		
		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		
		Валюта                    = ВалютаВзаиморасчетов;
		БанковскийСчетОрганизации = РеквизитыЗаказа.БанковскийСчетОрганизации;
		
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		
		Если Не ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
			
			СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
			СтруктураПараметров.Организация    			= Организация;
			СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
			СтруктураПараметров.БанковскийСчет 			= БанковскийСчетОрганизации;
			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
			
		КонецЕсли;
		Если Не ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			
			БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
				Контрагент,
				,
				БанковскийСчетКонтрагента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипОснования = Тип("Массив") Тогда
		МассивЗаказов = ДокументОснование;
	Иначе
		МассивЗаказов = Новый Массив();
		МассивЗаказов.Добавить(ЗаказДавальца);
	КонецЕсли;
	
	// Заполнение т.ч. услуги.
	Документы.ОтчетДавальцу.ЗаполнитьПоОстаткамУслугДавальцаКОформлению(
		ЭтотОбъект,
		Продукция,
		МассивЗаказов,
		ЗаполнятьНаДатуОказанияУслуг);
	
	ЗаказДавальца =
		?(Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетДавальцуПоНесколькимЗаказам") И Продукция.Количество() > 0,
			Продукция[0].ЗаказДавальца,
			Неопределено);
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииДоговора(ДоговорОснование, РеквизитыДоговора = Неопределено)
	
	ТипОснования = ТипЗнч(ДоговорОснование);
	
	Если ТипОснования = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Договоры.Партнер					КАК Партнер,
		|	Договоры.Контрагент					КАК Контрагент,
		|	Договоры.Ссылка						КАК Договор,
		|	Договоры.Организация				КАК Организация,
		|	Договоры.Подразделение				КАК Подразделение,
		|	Договоры.ВалютаВзаиморасчетов		КАК Валюта,
		|	Договоры.ВалютаВзаиморасчетов		КАК ВалютаВзаиморасчетов,
		|	Договоры.НаправлениеДеятельности	КАК НаправлениеДеятельности,
		|	Договоры.НалогообложениеНДС			КАК НалогообложениеНДС,
		|	Договоры.СтавкаНДС					КАК СтавкаНДС,
		|	НЕОПРЕДЕЛЕНО						КАК Номенклатура,
		|	НЕОПРЕДЕЛЕНО						КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО						КАК Содержание,
		|	НЕОПРЕДЕЛЕНО						КАК ЦенаВключаетНДС,
		|	Договоры.БанковскийСчет				КАК БанковскийСчетОрганизации,
		|	Договоры.БанковскийСчетКонтрагента	КАК БанковскийСчетКонтрагента
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК Договоры
		|ГДЕ
		|	Договоры.Ссылка = &ДоговорОснование";
		
		Запрос.УстановитьПараметр("ДоговорОснование", ДоговорОснование);
		
		Результат = Запрос.Выполнить();
		
		РеквизитыШапки = Результат.Выбрать();
		РеквизитыШапки.Следующий();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыШапки);
		
	ИначеЕсли ТипОснования = Тип("Массив") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыДоговора);
		
	КонецЕсли;
	
	Если ТипОснования = Тип("Массив") Тогда
		МассивЗаказов = ДоговорОснование;
	Иначе
		МассивЗаказов = Новый Массив();
		МассивЗаказов.Добавить(ДоговорОснование);
	КонецЕсли;
	
	Документы.ОтчетДавальцу.ЗаполнитьПоОстаткамУслугДавальцаКОформлению(ЭтотОбъект, Продукция, МассивЗаказов);
	
	ЗаказДавальца =
		?(Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетДавальцуПоНесколькимЗаказам") И Продукция.Количество() > 0,
			Продукция[0].ЗаказДавальца,
			Неопределено);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)

	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		
		Партнер = ДанныеЗаполнения.Партнер;
		ЗаполнитьУсловияПродажПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Валюта                    = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	ВалютаВзаиморасчетов      = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(ВалютаВзаиморасчетов);
	Организация               = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    = Организация;
	СтруктураПараметров.БанковскийСчет = БанковскийСчетОрганизации;
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация  = Организация;
	СтруктураПараметров.Касса		 = Касса;
	Касса                     = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ПараметрыЗаполнения = Документы.ОтчетДавальцу.ПараметрыЗаполненияНалогообложенияНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ЭтотОбъект);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("СкорректироватьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЭтотОбъект));
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ЭтотОбъект, СтруктураДействий, Неопределено);
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий.Вставить("СкорректироватьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЭтотОбъект));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Продукция, СтруктураДействий, КэшированныеЗначения);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(КэшированныеЗначения.ОбработанныеСтроки, СтруктураДействий, Неопределено);
	
	БанковскийСчетКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "БанковскийСчетКонтрагента");
	Если Не ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Менеджер) Тогда
		Менеджер = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьУсловияПродаж()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПараметрыОбъектаССоглашением(ИменаРеквизитов = "")
	
	Если ПустаяСтрока(ИменаРеквизитов) Тогда
		ИменаРеквизитов = "Партнер, Договор, Контрагент, Организация, ПорядокРасчетов";
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
	
	ПараметрыОбъекта.Вставить("Соглашение", Справочники.СоглашенияСКлиентами.ПустаяСсылка());
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

Процедура ЗаполнитьУсловияРасчетов(Знач УсловияПродаж)
	
	ФормаОплаты = УсловияПродаж.ФормаОплаты;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация = Организация Тогда
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация  			= Организация;
		СтруктураПараметров.ФормаОплаты		 		= ФормаОплаты;
		СтруктураПараметров.НаправлениеДеятельности	= НаправлениеДеятельности;

		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНазначениеБезЗаказа(Отказ)
	
	ОтборПустойЗаказ = Новый Структура("ЗаказДавальца", Документы.ЗаказДавальца.ПустаяСсылка());
	ОтборСверхЗаказа = Новый Структура("СверхЗаказа", Истина);
	
	КоличествоСтрок = Продукция.НайтиСтроки(ОтборПустойЗаказ).Количество()
					  + Продукция.НайтиСтроки(ОтборСверхЗаказа).Количество();
	
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НазначениеБезЗаказа = Документы.ОтчетДавальцу.ПолучитьНазначениеБезЗаказа(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(НазначениеБезЗаказа) Тогда
		
		Шаблон = НСтр("ru = 'В рамках договора ""%1"" по направлению деятельности ""%2"" отсутствует продукция к оформлению.';
						|en = 'There is no product for registration under the contract ""%1"" in the line of business ""%2"".'");
		ТекстОшибки = СтрШаблон(Шаблон, Договор, НаправлениеДеятельности);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "НаправлениеДеятельности",, Отказ);
		
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#КонецЕсли
