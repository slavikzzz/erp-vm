
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура();
		ЗначенияДляЗаполнения.Вставить("Организация",	"Объект.Организация");
		ЗначенияДляЗаполнения.Вставить("Ответственный",	"Объект.Ответственный");
		ЗначенияДляЗаполнения.Вставить("ДатаСобытия",	"Объект.ДатаОперации");
		ЗначенияДляЗаполнения.Вставить("Год",			"Объект.НалоговыйПериод");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	УчетНДФЛФормы.СведенияОДоходахПриСозданииНаСервере(ЭтаФорма, "Объект.СведенияОДоходах.КодДохода", "СведенияОДоходахКодВычета", "СведенияОДоходахСуммаВычета");
	УстановитьОформлениеКолонкиИсчисленногоНалога(ЭтаФорма);
	УстановитьОформлениеКолонкиКоличество(ЭтаФорма);
	УстановитьОформлениеКолонокДивидендов(ЭтаФорма);
	УстановитьОформлениеКолонкиПревышения(ЭтаФорма);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ПредоставленныеВычеты, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ПредоставленныеВычеты, "МесяцПериодаПредоставленияВычета", "МесяцПериодаПредоставленияВычетаСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ВзносыЗасчитываемыеКакВычеты, "МесяцУдержания", "МесяцУдержанияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛПеречисленный, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой");
	Оповестить("Запись_ОперацияНалоговогоУчетаПоНДФЛ", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОперацииПриИзменении(Элемент)
	УстановитьВидимостьКолонокПрогрессивногоНалога(Объект.ДатаОперации);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСведенияОДоходах

&НаКлиенте
Процедура СведенияОДоходахДатаПолученияДоходаПриИзменении(Элемент)

	ДанныеТекущейСтроки = Элементы.СведенияОДоходах.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ДанныеТекущейСтроки.КодДохода) Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДФЛКлиент.КодДоходаПриИзменении(
		ЭтаФорма, 
		Год(ДанныеТекущейСтроки.ДатаПолученияДохода),
		"СведенияОДоходах", 
		"КодДохода", 
		"СведенияОДоходахКодВычета", 
		"КодВычета", 
		"СуммаВычета");
		
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахКодДоходаПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.СведенияОДоходах.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки.КодДохода <> ПредопределенноеЗначение("Справочник.ВидыДоходовНДФЛ.Код2762") Тогда
		ДанныеТекущейСтроки.Количество = 0;
	КонецЕсли;
	
	УчетНДФЛКлиент.КодДоходаПриИзменении(
		ЭтаФорма, 
		Год(ДанныеТекущейСтроки.ДатаПолученияДохода),
		"СведенияОДоходах", 
		"КодДохода", 
		"СведенияОДоходахКодВычета", 
		"КодВычета", 
		"СуммаВычета");
		
	ДанныеТекущейСтроки.СтрокаРаздела2Расчета6НДФЛ = УчетНДФЛКлиентПовтИсп.СтрокаРаздела2Расчета6НДФЛПоКодуДохода(ДанныеТекущейСтроки.КодДохода);
		
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахПриАктивизацииСтроки(Элемент)
	ДанныеТекущейСтроки = Элементы.СведенияОДоходах.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		УчетНДФЛКлиент.КодДоходаАктивацииСтроки(
			ЭтаФорма, 
			Год(ДанныеТекущейСтроки.ДатаПолученияДохода), 
			"СведенияОДоходах", 
			"КодДохода", 
			"СведенияОДоходахКодВычета"); 
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахКатегорияДоходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СведенияОДоходах.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.СписокВыбора.Очистить();
	
	ДоступныеКатегорииДохода = Новый Массив;
	Если ЗначениеЗаполнено(ТекущиеДанные.КодДохода) Тогда
		ДоступныеКатегорииДохода = КатегорииДоходовНДФЛПоКодамДохода.Получить(ТекущиеДанные.КодДохода);
		Элемент.СписокВыбора.ЗагрузитьЗначения(ДоступныеКатегорииДохода);
		Если Не ЗначениеЗаполнено(ТекущиеДанные.КатегорияДохода) Тогда
			ТекущиеДанные.КатегорияДохода = ДоступныеКатегорииДохода[0];
		КонецЕсли;
	Иначе
		ТекущиеДанные.КатегорияДохода = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНДФЛИсчисленныйПоСтавке13

&НаКлиенте
Процедура НДФЛИсчисленныйПоСтавке13ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.МесяцНалоговогоПериода = КонецМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоставленныеВычеты

&НаКлиенте
Процедура ПредоставленныеВычетыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Элемент.ТекущиеДанные, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой");	
		Элемент.ТекущиеДанные.МесяцПериодаПредоставленияВычета = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Элемент.ТекущиеДанные, "МесяцПериодаПредоставленияВычета", "МесяцПериодаПредоставленияВычетаСтрокой");	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеВычетыМесяцНалоговогоПериодаСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.ПредоставленныеВычеты.ТекущиеДанные, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеВычетыМесяцНалоговогоПериодаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.ПредоставленныеВычеты.ТекущиеДанные, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеВычетыМесяцНалоговогоПериодаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.ПредоставленныеВычеты.ТекущиеДанные, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеВычетыМесяцНалоговогоПериодаСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеВычетыМесяцНалоговогоПериодаСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеВычетыМесяцПериодаПредоставленияВычетаСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.ПредоставленныеВычеты.ТекущиеДанные, "МесяцПериодаПредоставленияВычета", "МесяцПериодаПредоставленияВычетаСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеВычетыМесяцПериодаПредоставленияВычетаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.ПредоставленныеВычеты.ТекущиеДанные, "МесяцПериодаПредоставленияВычета", "МесяцПериодаПредоставленияВычетаСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеВычетыМесяцПериодаПредоставленияВычетаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.ПредоставленныеВычеты.ТекущиеДанные, "МесяцПериодаПредоставленияВычета", "МесяцПериодаПредоставленияВычетаСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеВычетыМесяцПериодаПредоставленияВычетаСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеВычетыМесяцПериодаПредоставленияВычетаСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВзносыЗасчитываемыеКакВычеты

&НаКлиенте
Процедура ВзносыЗасчитываемыеКакВычетыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.МесяцУдержания = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Элемент.ТекущиеДанные, "МесяцУдержания", "МесяцУдержанияСтрокой");	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВзносыЗасчитываемыеКакВычетыМесяцУдержанияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.ВзносыЗасчитываемыеКакВычеты.ТекущиеДанные, "МесяцУдержания", "МесяцУдержанияСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыЗасчитываемыеКакВычетыМесяцУдержанияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.ВзносыЗасчитываемыеКакВычеты.ТекущиеДанные, "МесяцУдержания", "МесяцУдержанияСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыЗасчитываемыеКакВычетыМесяцУдержанияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.ВзносыЗасчитываемыеКакВычеты.ТекущиеДанные, "МесяцУдержания", "МесяцУдержанияСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыЗасчитываемыеКакВычетыМесяцУдержанияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыЗасчитываемыеКакВычетыМесяцУдержанияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНДФЛУдержанный

&НаКлиенте
Процедура НДФЛУдержанныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.МесяцНалоговогоПериода = КонецМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НДФЛУдержанныйКатегорияДоходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НДФЛУдержанный.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.СписокВыбора.Очистить();
	
	КатегорииПоСтавкам = Новый Массив;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ставка) Тогда
		КатегорииПоСтавкам = КатегорииДоходовНДФЛПоСтавкам.Получить(ТекущиеДанные.Ставка);
		Если КатегорииПоСтавкам = Неопределено Тогда
			КатегорииПоСтавкам = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Если КатегорииПоСтавкам.Количество() > 0 Тогда
		Элементы.НДФЛУдержанныйКатегорияДохода.СписокВыбора.ЗагрузитьЗначения(КатегорииПоСтавкам);
	Иначе
		Элементы.НДФЛУдержанныйКатегорияДохода.СписокВыбора.ЗагрузитьЗначения(КатегорииДоходовНДФЛПоСтавкам.Получить("ПоОсновнойСтавке"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНДФЛПеречисленный

&НаКлиенте
Процедура НДФЛПеречисленныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.МесяцНалоговогоПериода = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Элемент.ТекущиеДанные, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой");	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НДФЛПеречисленныйМесяцНалоговогоПериодаСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.НДФЛПеречисленный.ТекущиеДанные, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПеречисленныйМесяцНалоговогоПериодаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.НДФЛПеречисленный.ТекущиеДанные, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПеречисленныйМесяцНалоговогоПериодаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.НДФЛПеречисленный.ТекущиеДанные, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПеречисленныйМесяцНалоговогоПериодаСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПеречисленныйМесяцНалоговогоПериодаСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНДФЛПереданныйВНалоговую

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	НалоговыйПериодПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ПрочитатьГоловнуюОрганизацию();
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ПредоставленныеВычеты, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ПредоставленныеВычеты, "МесяцПериодаПредоставленияВычета", "МесяцПериодаПредоставленияВычетаСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ВзносыЗасчитываемыеКакВычеты, "МесяцУдержания", "МесяцУдержанияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛПеречисленный, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой");
	ЗаполнитьКатегорииДоходовНДФЛ();
	ЗаполнитьСпискиВыборкаСтавокИКатегорийДохода();
	ЗаполнитьДопустимыеРегистрации();
	УстановитьВидимостьКолонокПрогрессивногоНалога(Объект.ДатаОперации);
	
КонецПроцедуры

&НаСервере
Процедура НалоговыйПериодПриИзмененииНаСервере()
	ЗаполнитьДопустимыеРегистрации();
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеКолонкиИсчисленногоНалога(Форма)
	
	СписокДоходов = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДоходовНДФЛ.Ссылка,
	|	ВидыДоходовНДФЛ.Код
	|ИЗ
	|	Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|ГДЕ
	|	ВидыДоходовНДФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокДоходов.Добавить(Выборка.Ссылка, Выборка.Код);
	КонецЦикла;
	СписокКатегорий = Новый СписокЗначений;
	Для каждого Значение Из Перечисления.КатегорииДоходовНДФЛ.ПоОсновнойСтавке() Цикл
	    СписокКатегорий.Добавить(Значение)
	КонецЦикла;
	СписокКатегорий.Добавить(Перечисления.КатегорииДоходовНДФЛ.ПрочиеДоходыПоСтавкеПункта11Статьи224НКРФ);
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СведенияОДоходах.КодДохода");
	ЭлементОтбора.ПравоеЗначение = СписокДоходов;
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СведенияОДоходах.КатегорияДохода");
	ЭлементОтбора.ПравоеЗначение = СписокКатегорий;
	
	ОформляемоеПоле =  ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СведенияОДоходахСуммаНалогаИсчисленная");
	
	ЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение = Истина;
	
	Форма.Элементы.СведенияОДоходахСуммаНалогаИсчисленная.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Налог исч. по дивидендам, ставкам 9%, 35%%1';
						|en = 'Tax calculated by dividends, rates 9%, 35%%1'"), 
					?(ПолучитьФункциональнуюОпцию("ИспользуютсяСтавкиНДФЛМеждународныхДоговоров"), " " + НСтр("ru = 'и др.';
																												|en = 'and other.'"), ""));

КонецПроцедуры	

&НаСервере
Процедура УстановитьОформлениеКолонкиКоличество(Форма)
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СведенияОДоходах.КодДохода");
	ЭлементОтбора.ПравоеЗначение = Справочники.ВидыДоходовНДФЛ.Код2762;

	ОформляемоеПоле =  ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СведенияОДоходахКоличество");
	
	ЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение = Истина;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьОформлениеКолонокДивидендов(Форма)
	
	ПараметрыРасчетаНДФЛПоПрогрессивнойШкале = УчетНДФЛ.ПараметрыРасчетаНДФЛПоПрогрессивнойШкале();
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СведенияОДоходах.КатегорияДохода");
	ЭлементОтбора.ПравоеЗначение = Перечисления.КатегорииДоходовНДФЛ.Дивиденды;

	ОформляемоеПоле =  ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СведенияОДоходахСуммаСПревышения");
	
	ЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение = Истина;
	

	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СведенияОДоходах.КатегорияДохода");
	ЭлементОтбора.ПравоеЗначение = Перечисления.КатегорииДоходовНДФЛ.Дивиденды;

	ОформляемоеПоле =  ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СведенияОДоходахНалогНаПрибыльДляДивидендов");
	
	ЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение = Истина;
	
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СведенияОДоходах.КатегорияДохода");
	ЭлементОтбора.ПравоеЗначение = Перечисления.КатегорииДоходовНДФЛ.Дивиденды;
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СведенияОДоходах.ДатаПолученияДохода");
	ЭлементОтбора.ПравоеЗначение = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.НачалоРасчетаНДФЛПоПрогрессивнойШкале;

	ОформляемоеПоле =  ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СведенияОДоходахСуммаСПревышения");
	
	ЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение = Истина;
	
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СведенияОДоходах.КатегорияДохода");
	ЭлементОтбора.ПравоеЗначение = Перечисления.КатегорииДоходовНДФЛ.Дивиденды;
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СведенияОДоходах.ДатаПолученияДохода");
	ЭлементОтбора.ПравоеЗначение = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.НачалоРасчетаНДФЛПоПрогрессивнойШкале;

	ОформляемоеПоле =  ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СведенияОДоходахНалогНаПрибыльДляДивидендов");
	
	ЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение = Истина;
	
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СведенияОДоходах.КатегорияДохода");
	ЭлементОтбора.ПравоеЗначение = Перечисления.КатегорииДоходовНДФЛ.Дивиденды;
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СведенияОДоходах.ДатаПолученияДохода");
	ЭлементОтбора.ПравоеЗначение = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.НачалоРасчетаНДФЛПоПрогрессивнойШкале;

	ОформляемоеПоле =  ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СведенияОДоходахСуммаВычета");
	
	ЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение = Истина;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьОформлениеКолонкиПревышения(Форма)
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НДФЛПереданныйВНалоговую.КатегорияДохода");
	КатегорииСПревышением = Новый СписокЗначений;
	МассивКатегорий = Перечисления.КатегорииДоходовНДФЛ.БазаПоСтавкеПункта1Статьи224();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКатегорий,Перечисления.КатегорииДоходовНДФЛ.БазаПоСтавкеПункта1_2Статьи224());
	МассивКатегорий.Добавить(Перечисления.КатегорииДоходовНДФЛ.Дивиденды);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКатегорий,Перечисления.КатегорииДоходовНДФЛ.БазаПоСтавкеПункта1_1Статьи224());
	КатегорииСПревышением.ЗагрузитьЗначения(МассивКатегорий);
	ЭлементОтбора.ПравоеЗначение = КатегорииСПревышением;
	
	ОформляемоеПоле =  ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НДФЛПереданныйВНалоговуюСуммаСПревышения");
	ОформляемоеПоле =  ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НДФЛПереданныйВНалоговуюСуммаСПревышенияПоСтавке15");
	
	ЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение = Истина;
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НДФЛПереданныйВНалоговую.КатегорияДохода");
	КатегорииСПревышением = Новый СписокЗначений;
	КатегорииСПревышением.ЗагрузитьЗначения(Перечисления.КатегорииДоходовНДФЛ.БазаПоСтавкеПункта1Статьи224());
	ЭлементОтбора.ПравоеЗначение = КатегорииСПревышением;
	
	ИменаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("НДФЛПереданныйВНалоговую", Истина);
	Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
		Если ИмяРесурса = "НДФЛПереданныйВНалоговуюСуммаСПревышения" Тогда
			Продолжить;
		КонецЕсли;
		ОформляемоеПоле =  ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Использование = Истина;
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяРесурса);
	КонецЦикла;
	
	ЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение = Истина;
	
КонецПроцедуры	

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПрочитатьГоловнуюОрганизацию();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьГоловнуюОрганизацию()
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКатегорииДоходовНДФЛ()
	
	КодыИКатегорииНДФЛ = УчетФактическиПолученныхДоходов.СопоставлениеКодовИКатегорийДоходовНДФЛ();
	
	СоответствиеКодовИКатегорий = Новый Соответствие;
	
	Для Каждого Строка Из КодыИКатегорииНДФЛ Цикл
		Ключ = Строка.КодДохода;
		
		СписокКатегорий = СоответствиеКодовИКатегорий.Получить(Ключ);
		Если СписокКатегорий = Неопределено Тогда
			СписокКатегорий = Новый Массив;
		КонецЕсли;
		Если СписокКатегорий.Найти(Строка.КатегорияДохода) = Неопределено Тогда
			СписокКатегорий.Добавить(Строка.КатегорияДохода);
		КонецЕсли;
		СоответствиеКодовИКатегорий.Вставить(Ключ, СписокКатегорий);
	КонецЦикла;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуютсяСтавкиНДФЛМеждународныхДоговоров") Тогда
		СписокКатегорий = СоответствиеКодовИКатегорий[ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДоходовНДФЛ.Код1010")];
		СписокКатегорий.Добавить(Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке05);
		СписокКатегорий.Добавить(Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке10);
		СоответствиеКодовИКатегорий.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДоходовНДФЛ.Код1010"), СписокКатегорий);
	КонецЕсли;
	
	КатегорииДоходовНДФЛПоКодамДохода = Новый ФиксированноеСоответствие(СоответствиеКодовИКатегорий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыборкаСтавокИКатегорийДохода()
	
	СоответствиеСтавокИКатегорий = Новый Соответствие;
	СоответствиеСтавокИКатегорий.Вставить("ПоОсновнойСтавке", Перечисления.КатегорииДоходовНДФЛ.ПоОсновнойСтавке());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СоответствиеСтавокИКатегорий["ПоОсновнойСтавке"], ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииДоходовНДФЛ.Дивиденды), Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользуютсяСтавкиНДФЛМеждународныхДоговоров") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НДФЛУдержанныйСтавка", "РежимВыбораИзСписка", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НДФЛПеречисленныйСтавка", "РежимВыбораИзСписка", Ложь);
		
		СоответствиеСтавокИКатегорий.Вставить(Перечисления.НДФЛСтавки.Ставка03, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПоСтавке03));
		
		КатегорииСтавки = Новый Массив;
		КатегорииСтавки.Добавить(Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке05);
		КатегорииСтавки.Добавить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке05);
		СоответствиеСтавокИКатегорий.Вставить(Перечисления.НДФЛСтавки.Ставка05, КатегорииСтавки);
		
		СоответствиеСтавокИКатегорий.Вставить(Перечисления.НДФЛСтавки.Ставка06, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПоСтавке06));
		
		СоответствиеСтавокИКатегорий.Вставить(Перечисления.НДФЛСтавки.Ставка07, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке07));
		
		КатегорииСтавки = Новый Массив;
		КатегорииСтавки.Добавить(Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке10);
		КатегорииСтавки.Добавить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке10);
		СоответствиеСтавокИКатегорий.Вставить(Перечисления.НДФЛСтавки.Ставка10, КатегорииСтавки);
		
		СоответствиеСтавокИКатегорий.Вставить(Перечисления.НДФЛСтавки.Ставка12, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке12));
		
		КатегорииСтавки = Перечисления.КатегорииДоходовНДФЛ.ПоОсновнойСтавке();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КатегорииСтавки, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииДоходовНДФЛ.Дивиденды), Истина);
		КатегорииСтавки.Добавить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке15);
		СоответствиеСтавокИКатегорий.Вставить(Перечисления.НДФЛСтавки.Ставка15, КатегорииСтавки);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НДФЛУдержанныйСтавка", "РежимВыбораИзСписка", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НДФЛПеречисленныйСтавка", "РежимВыбораИзСписка", Истина);
		
		ИсключаемыеСтавки = Новый Массив;
		ИсключаемыеСтавки.Добавить(Перечисления.НДФЛСтавки.Ставка03);
		ИсключаемыеСтавки.Добавить(Перечисления.НДФЛСтавки.Ставка06);
		ИсключаемыеСтавки.Добавить(Перечисления.НДФЛСтавки.Ставка07);
		ИсключаемыеСтавки.Добавить(Перечисления.НДФЛСтавки.Ставка12);
		
		ДоступныеСтавки = ОбщегоНазначенияБЗК.ПеречислениеВМассив(Перечисления.НДФЛСтавки, ИсключаемыеСтавки);
		
		Элементы.НДФЛУдержанныйСтавка.СписокВыбора.ЗагрузитьЗначения(ДоступныеСтавки);
		Элементы.НДФЛПеречисленныйСтавка.СписокВыбора.ЗагрузитьЗначения(ДоступныеСтавки);
		
		КатегорииУдержанногоНалога = СоответствиеСтавокИКатегорий.Получить("ПоОсновнойСтавке");
		КатегорииУдержанногоНалога.Добавить(Перечисления.КатегорииДоходовНДФЛ.ПрочиеДоходыПоСтавкеПункта11Статьи224НКРФ);
		КатегорииУдержанногоНалога.Добавить(Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке05);
		КатегорииУдержанногоНалога.Добавить(Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке10);
		Элементы.НДФЛУдержанныйКатегорияДохода.СписокВыбора.ЗагрузитьЗначения(КатегорииУдержанногоНалога);
		
	КонецЕсли;
	
	КатегорииДоходовНДФЛПоСтавкам = Новый ФиксированноеСоответствие(СоответствиеСтавокИКатегорий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДопустимыеРегистрации()
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.НалоговыйПериод) Тогда
		РегистрацииВНалоговомОргане = УчетНДФЛ.РегистрацииВНалоговомОрганеПоОрганизации(Объект.Организация, Объект.НалоговыйПериод);
		Элементы.НДФЛПереданныйВНалоговуюРегистрацияВНалоговомОргане.СписокВыбора.ЗагрузитьЗначения(РегистрацииВНалоговомОргане);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонокПрогрессивногоНалога(ДатаПолученияДохода)
	
	ВидимостьКолонок = ДатаПолученияДохода >= УчетНДФЛ.ДатаЗакона176ФЗ();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКолонокНалогПоПрогрессивнымСтавкам",
																"Видимость", ВидимостьКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НДФЛИсчисленныйПоСтавке13СуммаСПревышения",
																"Видимость", НЕ ВидимостьКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКолонокЗачтеноАвансовВСчетСуммПоПрогрессивнымСтавкам",
																"Видимость", ВидимостьКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НДФЛИсчисленныйПоСтавке13ЗачтеноАвансовыхПлатежейСПревышения",
																"Видимость", НЕ ВидимостьКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НДФЛПереданныйНалогПоПрогрессивнымСтавкам",
																"Видимость", ВидимостьКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НДФЛПереданныйВНалоговуюСуммаСПревышения",
																"Видимость", НЕ ВидимостьКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредоставленныеВычетыНалоговаяБаза",
																"Видимость", ВидимостьКолонок);
	
КонецПроцедуры

#КонецОбласти
