#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПериодПринадлежности = Дата;
	Документы.ОплатаПоСреднемуЗаработкуСписком.ЗаполнитьДатуЗапретаРедактирования(ЭтотОбъект);
	
	ОбновитьСвязанныеОплатыПоСреднему(Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВнутрисменноеОтсутствие Тогда
		Для Каждого Строка Из Сотрудники Цикл
			ИндексСтроки = Сотрудники.Индекс(Строка);
			ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, Строка.ДатаОтсутствия, "Объект.Сотрудники.ДатаОтсутствия", Отказ,
				НСтр("ru = 'Дата отсутствия';
					|en = 'Absence date'"), , , Ложь);
			Если Не ЗначениеЗаполнено(Строка.ОплачиватьЧасов) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не заполнены часы.';
						|en = 'Hours cannot be blank.'"),
					ЭтотОбъект, 
					СтрШаблон("ОплатаПоСреднемуЗаработкуСписком[%1].Сотрудники", Формат(ИндексСтроки, "ЧН=0; ЧГ=0")),, Отказ);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Сотрудники Цикл
			ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, Строка.ДатаНачала, "Объект.Строка.ДатаНачала", Отказ, 
				НСтр("ru = 'Дата начала';
					|en = 'Start date'"), , , Ложь);
		КонецЦикла;
	КонецЕсли;
	
	КадровыйЭДО.ПроверитьВозможностьСохраненияИзмененийДокументаСПечатнымиФормами(
		ЭтотОбъект, Метаданные.Роли.ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьСвязанныеОплатыПоСреднему(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработкуСпискомСотрудники.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработкуСписком.Сотрудники КАК ОплатаПоСреднемуЗаработкуСпискомСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуДокументы
	|		ПО ОплатаПоСреднемуЗаработкуСпискомСотрудники.ОплатаПоСреднемуЗаработку = ОплатаПоСреднемуДокументы.Ссылка
	|			И (ОплатаПоСреднемуЗаработкуСпискомСотрудники.Сотрудник <> ОплатаПоСреднемуДокументы.Сотрудник
	|				ИЛИ ОплатаПоСреднемуЗаработкуСпискомСотрудники.ФизическоеЛицо <> ОплатаПоСреднемуДокументы.ФизическоеЛицо
	|				ИЛИ ОплатаПоСреднемуЗаработкуСпискомСотрудники.ДатаНачала <> ОплатаПоСреднемуДокументы.ДатаНачала
	|				ИЛИ ОплатаПоСреднемуЗаработкуСпискомСотрудники.ДатаОкончания <> ОплатаПоСреднемуДокументы.ДатаОкончания
	|				ИЛИ ОплатаПоСреднемуЗаработкуСпискомСотрудники.ДатаОтсутствия <> ОплатаПоСреднемуДокументы.ДатаОтсутствия
	|				ИЛИ ОплатаПоСреднемуЗаработкуСпискомСотрудники.ОплачиватьЧасов <> ОплатаПоСреднемуДокументы.ОплачиватьЧасов)
	|ГДЕ
	|	ОплатаПоСреднемуЗаработкуСпискомСотрудники.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбновитьСвязаннуюОплатуПоСреднему(Сотрудники[Выборка.НомерСтроки -1], Отказ);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСвязаннуюОплатуПоСреднему(Строка, Отказ)
	
	Если Не ЗначениеЗаполнено(Строка) 
		Или Не ЗначениеЗаполнено(Строка.ОплатаПоСреднемуЗаработку) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ДокументОбъект = Строка.ОплатаПоСреднемуЗаработку.ПолучитьОбъект();
		Если НЕ (ДокументОбъект.Проведен И ДокументОбъект.ДокументРассчитан) Тогда
			ДокументОбъект.Сотрудник = Строка.Сотрудник;
			ДокументОбъект.ФизическоеЛицо = Строка.ФизическоеЛицо;
			ДокументОбъект.ДатаНачала = Строка.ДатаНачала;
			ДокументОбъект.ДатаОкончания = Строка.ДатаОкончания;
			ДокументОбъект.ДатаОтсутствия = Строка.ДатаОтсутствия;
			ДокументОбъект.ОплачиватьЧасов = Строка.ОплачиватьЧасов;
			ДокументОбъект.ДатаОкончания = Строка.ДатаОкончания;
		КонецЕсли;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		НомерТекущейСтроки = Строка.НомерСтроки - 1;
		ТекстСообщения = НСтр("ru = 'Не удалось обновить отсутствие с сохранением оплаты %1.';
								|en = 'Cannot update paid absence %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.Командировка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.Сотрудники[" + НомерТекущейСтроки + "].Командировка" , , Отказ);
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли