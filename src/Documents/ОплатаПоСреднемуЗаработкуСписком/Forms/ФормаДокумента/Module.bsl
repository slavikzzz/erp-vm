
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	КодВидаВремени = УчетРабочегоВремениРасширенный.БуквенныйКодВидаВремени(Объект.ВидВремени, Объект.ПериодРегистрации);
	УстановитьВидимостьЭлементов();
	УстановитьФункциональныеОпцииФормы();

	Если Параметры.Ключ.Пустая() Тогда
	// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, МесяцРасчета",
			"Объект.Организация",
			"Объект.Ответственный",
			"Объект.ПериодРегистрации");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		ЗаполнитьДанныеФормыПоОрганизации();
		ДополнитьФорму();
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	ЗаполнитьПредупреждение(ЭтотОбъект);
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	ОбновитьОплатаПоСреднемуЗаработкуРассчитана();
	
	УстановитьУсловноеОформление();

	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов") Тогда
		МодульУчетОригиналовПервичныхДокументов = ОбщегоНазначения.ОбщийМодуль("УчетОригиналовПервичныхДокументов");
		МодульУчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Элементы.Шапка);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриСозданииНаСервереФормыОбъекта(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПриСозданииНаСервереФормыОбъекта(ЭтотОбъект, Отказ, СтандартнаяОбработка, Объект);
	// Конец КадровыйЭДО
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	УстановитьФункциональныеОпцииФормы();
	ДополнитьФорму();
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриЧтенииНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект,
		ПравоДоступа("Изменение", Метаданные.Документы.ОплатаПоСреднемуЗаработкуСписком));
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПриЧтенииНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, Объект);
	// Конец КадровыйЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если ИмяСобытия = "ИзмененПериодДокумента" И Источник.ВладелецФормы = ЭтотОбъект Тогда
		Если Параметр.Свойство("Период") Тогда
			ОбработатьУказаниеПериода(Параметр.Период);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьДокументаОплатаПоСреднемуЗаработку" И Источник = ЭтаФорма Тогда
		Строки = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник, ДатаНачала", Параметр.Сотрудник, Параметр.ДатаНачала));
		Если Строки.Количество() > 0 Тогда
			Если Не Строки[0].ОплатаПоСреднемуЗаработку = Параметр.Ссылка Тогда
				Строки[0].ОплатаПоСреднемуЗаработку = Параметр.Ссылка;
				Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
			КонецЕсли;
			
			Строки[0].ОплатаПоСреднемуЗаработкуРассчитана = Параметр.ДокументРассчитан;
			
		КонецЕсли;
		ЗаполнитьПредупреждение(ЭтотОбъект);
	КонецЕсли;

	Если ИмяСобытия = "ИзмененыПоказателиДокумента"
		И Источник.ВладелецФормы = ЭтотОбъект
		И Параметр.Показатели.Количество() > 0 Тогда
		ОбновитьДатуОтсутствия(Параметр.Показатели[ПоказательОтработаноЧасов()]);
	КонецЕсли;
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов") Тогда
		МодульУчетОригиналовПервичныхДокументовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УчетОригиналовПервичныхДокументовКлиент");
		МодульУчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	// КадровыйЭДО
	КадровыйЭДОКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец КадровыйЭДО
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьФункциональныеОпцииФормы();
	ДополнитьФорму();
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	ПерерасчетЗарплаты.РегистрацияПерерасчетовПоПредварительнымДаннымВФоне(ТекущийОбъект.Ссылка);
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Объект);
	// Конец КадровыйЭДО
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
			ЭтотОбъект,
			ТекущийОбъект,
			ПараметрыЗаписи);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеПериода(Период)
	
	ДатаНачала = Период.ДатаНачала;
	ДатаОкончания = Период.ДатаОкончания;
	
	ОбновитьПериодыОтсутствия(ДатаНачала, ДатаОкончания);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПериодыОтсутствия(ДатаНачала, ДатаОкончания)
		
	Для Каждого Строка Из Объект.Сотрудники Цикл
		
		Если Строка.ОплатаПоСреднемуЗаработкуРассчитана Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ДатаНачала <> ДатаНачала Тогда
			Строка.ДатаНачала = ДатаНачала;
		КонецЕсли;
		
		Если Строка.ДатаОкончания <> ДатаОкончания Тогда
			Строка.ДатаОкончания = ДатаОкончания;
		КонецЕсли;
		
		Строка.ДатаОтсутствия = Строка.ДатаНачала;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуОтсутствия(КоличествоЧасов)
	Для Каждого Строка Из Объект.Сотрудники Цикл
		Если Не Строка.ОплатаПоСреднемуЗаработкуРассчитана Тогда 
			Строка.ОплачиватьЧасов = КоличествоЧасов
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик подсистемы "ПодписиДокументов".
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент) 
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент) 
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец Обработчик подсистемы "ПодписиДокументов".

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов") Тогда
		МодульУчетОригиналовПервичныхДокументовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УчетОригиналовПервичныхДокументовКлиент");
		МодульУчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект,Элементы["ДекорацияСостояниеОригинала"]);
	КонецЕсли;
	
КонецПроцедуры
//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	ЗаполнитьДанныеФормыПоОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ВидВремениПриИзмененииНаСервере()
	
	КодВидаВремени = УчетРабочегоВремениРасширенный.БуквенныйКодВидаВремени(Объект.ВидВремени, Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ВнутрисменноеОтсутствиеПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СотрудникиГиперссылкаОплатыПоСреднемуЗаработку" Тогда
		
		СтандартнаяОбработка = Ложь;	
		
		Строка = Объект.Сотрудники.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
		ДополнительныеПараметры.Вставить("ПодобратьДанные", Не ЗначениеЗаполнено(Строка.ОплатаПоСреднемуЗаработку));
		ДополнительныеПараметры.Вставить("ЗаписатьДокумент", Модифицированность);
		
		Если Не ЗначениеЗаполнено(Строка.ОплатаПоСреднемуЗаработку) Тогда
			
			Если Модифицированность Тогда
				ТекстВопроса = НСтр("ru = 'Отражать в учете можно только записанное отсутствие с сохранением оплаты. 
									|Записать?';
									|en = 'Only the recorded paid absence can be recorded in the accounting.
									|Save?'");
									
				Оповещение = Новый ОписаниеОповещения("СотрудникиВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
			Иначе 
				СотрудникиВыборЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
			КонецЕсли;
			
		Иначе 
			
			Если Модифицированность Тогда
				ТекстВопроса = НСтр("ru = 'Документ был изменен. Необходимо его записать, чтобы обновить 
									|связанное отсутствие с сохранением оплаты. Записать?';
									|en = 'The document has been changed. Save it to update
									|the related paid absence. Save?'");
									
				Оповещение = Новый ОписаниеОповещения("СотрудникиВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
			Иначе 
				СотрудникиВыборЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыборЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗаписатьДокумент И Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Строка = Объект.Сотрудники.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ДополнительныеПараметры.ПодобратьДанные Тогда
		ПодобратьДанныеВСтроку(ВыбраннаяСтрока);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗаписатьДокумент Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Строка.ОплатаПоСреднемуЗаработку) Тогда
		МассивИдентификаторов = Новый Массив;
		МассивИдентификаторов.Добавить(Строка.ПолучитьИдентификатор());
		СоздатьОплатыПоСреднемуЗаработкуПоМассивуСтрок(МассивИдентификаторов);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ, ОтражениеВУчетеОплатаПоСреднемуЗаработкуСписком", 
		Строка.ОплатаПоСреднемуЗаработку, Истина);
	
	ЗаполнитьПредупреждение(ЭтотОбъект);
	
	ОбновитьОплатаПоСреднемуЗаработкуРассчитана();
	
	Если ЭтотОбъект.Модифицированность Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	ОткрытьФорму("Документ.ОплатаПоСреднемуЗаработку.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьДанныеВСтроку(Идентификатор, ДополнительныеДанные = "ДатаОкончания,ДатаОтсутствия,ОплачиватьЧасов")
	
	Строка = Объект.Сотрудники.НайтиПоИдентификатору(Идентификатор);

	ТаблицаОтсутствий = ТаблицаОтсутствий();
	
	НоваяОплатаПоСреднемуЗаработку = ТаблицаОтсутствий.Добавить();
	НоваяОплатаПоСреднемуЗаработку.Сотрудник = Строка.Сотрудник;
	НоваяОплатаПоСреднемуЗаработку.ДатаНачала = Строка.ДатаНачала;
	НоваяОплатаПоСреднемуЗаработку.Идентификатор = Строка.ПолучитьИдентификатор();
	
	ЗаполнитьСсылкиОплатПоСреднемуЗаработку(ТаблицаОтсутствий, ДополнительныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура СотрудникиПередУдалениемНаСервере(Идентификатор, Отказ)
	Строка = Объект.Сотрудники.НайтиПоИдентификатору(Идентификатор);
	Документ = Строка.ОплатаПоСреднемуЗаработку;
	ДокументОбъект = Документ.ПолучитьОбъект();
	Если НЕ ДокументОбъект = Неопределено Тогда
		
		Если ДокументОбъект.ДокументРассчитан 
			И ПолучитьФункциональнуюОпцию("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") 
			И НЕ Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'По этому отсутствию уже выполнено начисление. Перед удалением этой строки необходимо снять утвержденность расчета связанного документа.';
														|en = 'Accrual has already been performed by this absence. Before deleting this line, cancel confirmation of the linked document calculation.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		ДокументОбъект.ДокументРассчитан = Ложь;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	Иначе
		Строка.ОплатаПоСреднемуЗаработку = Неопределено;
		Строка.ОплатаПоСреднемуЗаработкуРассчитана = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Элементы.Сотрудники.ТекущиеДанные.ОплатаПоСреднемуЗаработку) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сотруднику %1 уже начислена зарплата за время отсутствия и оформлено отсутствие.
			|Для удаления этой строки необходимо также отменить выполненное начисление. Продолжить?';
			|en = 'Salary for the time of absence has already been accrued to employee %1 and the absence has been registered.
			|Cancel the performed accrual to delete this line. Continue?'"),
			Элементы.Сотрудники.ТекущиеДанные.Сотрудник);
	
	Оповещение = Новый ОписаниеОповещения("СотрудникиПередУдалениемЗавершение", ЭтотОбъект);		
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
	
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	СотрудникиПередУдалениемНаСервере(Элементы.Сотрудники.ТекущаяСтрока, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Объект.Сотрудники.Удалить(ТекущиеДанные);
	
	ЗаполнитьПредупреждение(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	
	ЗаполнитьПредупреждение(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Элементы.Сотрудники.ТекущиеДанные.ОплатаПоСреднемуЗаработку = Неопределено; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СотрудникиДатаНачалаПриИзмененииНаСервере(ИдентификаторСтроки)
	Строка = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	Строка.ДатаОтсутствия = Строка.ДатаНачала;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаНачалаПриИзменении(Элемент)
	СотрудникиДатаНачалаПриИзмененииНаСервере(Элементы.Сотрудники.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура СотрудникиДатаОтсутствияПриИзмененииНаСервере(ИдентификаторСтроки)
	Строка = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	Строка.ДатаНачала = Строка.ДатаОтсутствия;
	Строка.ДатаОкончания = Строка.ДатаОтсутствия;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаОтсутствияПриИзменении(Элемент)
	СотрудникиДатаОтсутствияПриИзмененииНаСервере(Элементы.Сотрудники.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПредупреждение(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Подбор возможен только при указанной организации';
								|en = 'Selection is available only when a company is specified'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Неопределено;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		Модуль.УточнитьПараметрыОткрытияФормыВыбораСотрудников(ПараметрыОткрытия);
	КонецЕсли;
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники,
		Объект.Организация,
		,
		Объект.Дата,
		Объект.Дата,
		,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПериод(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания)); 
	ОткрытьФорму("ОбщаяФорма.ГрупповоеЗаполнениеПериода", ПараметрыФормы, ЭтотОбъект);
	ЗаполнитьПредупреждение(ЭтотОбъект);

КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОформитьОтсутствия(Команда)
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ОформитьОтсутствияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Отражать в учете можно только записанное 
			|отсутствие с сохранением оплаты. Записать?';
			|en = 'Only the recorded 
			|paid absence can be recorded in the accounting. Save?'"), РежимДиалогаВопрос.ДаНет);
	Иначе 
		ОформитьОтсутствияЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОформитьОтсутствияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОформитьОтсутствияНаСервере();
	
КонецПроцедуры

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ОбновитьПодключаемыеКоманды(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВидВремениПриИзменении(Элемент)
	ВидВремениПриИзмененииНаСервере();
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
			Команда,
			ЭтотОбъект,
			Объект);
	КонецЕсли;
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

// БлокировкаИзмененияОбъектов
&НаКлиенте
Процедура Подключаемый_РазблокироватьФормуОбъекта(Команда)

БлокировкаИзмененияОбъектовКлиент.РазблокироватьФормуОбъекта(ЭтотОбъект, Объект.Ссылка);

КонецПроцедуры
// Конец БлокировкаИзмененияОбъектов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДополнитьФорму()
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Доступность гиперссылки для оформления отсутствий в зависимости от полноты заполненных данных
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СотрудникиГиперссылкаОплатыПоСреднемуЗаработку");
	
	ГруппаОтбораИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ГруппаОтбораИЛИ = ГруппаОтбораИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;

	ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сотрудники.Сотрудник");
	
	ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сотрудники.ДатаНачала");
	
	ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сотрудники.ДатаОкончания");
	
	ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Организация");
	
	ГруппаОтбораИЛИ = ГруппаОтбораИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;

	ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сотрудники.ДатаОтсутствия");
	
	ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сотрудники.ОплачиватьЧасов");
	
	// Гиперссылка "Оформить отсутствие..."
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Оформить отсутствие...';
																					|en = 'Register absence ...'"));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СотрудникиГиперссылкаОплатыПоСреднемуЗаработку");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сотрудники.ОплатаПоСреднемуЗаработку");
	
	// Гиперссылка "Отсутствие учтено"
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отсутствие учтено';
																					|en = 'The absence is considered'"));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СотрудникиГиперссылкаОплатыПоСреднемуЗаработку");
	
	ГруппаОтбораИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сотрудники.ОплатаПоСреднемуЗаработку");
	
	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сотрудники.ОплатаПоСреднемуЗаработкуРассчитана");
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	// Гиперссылка "Отсутствие учтено, начисление выполнено"
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отсутствие учтено, начисление выполнено';
																					|en = 'Absence is recorded, accrual is performed'"));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СотрудникиГиперссылкаОплатыПоСреднемуЗаработку");
	
	ГруппаОтбораИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сотрудники.ОплатаПоСреднемуЗаработку");
	
	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сотрудники.ОплатаПоСреднемуЗаработкуРассчитана");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	// "Только просмотр" для ключевых полей в случае наличия рассчитанного документа
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СотрудникиСотрудник");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СотрудникиДатаНачала");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СотрудникиДатаОкончания");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СотрудникиДатаОтсутствия");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СотрудникиОплачиватьЧасов");
		
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сотрудники.ОплатаПоСреднемуЗаработкуРассчитана");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОплатаПоСреднемуЗаработкуРассчитана()
	
	МассивСсылок = Новый Массив;
	Для Каждого Строка Из Объект.Сотрудники Цикл
		Если ЗначениеЗаполнено(Строка.ОплатаПоСреднемуЗаработку) Тогда
			МассивСсылок.Добавить(Строка.ОплатаПоСреднемуЗаработку);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.ВГраница() < 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОплатаПоСреднемуЗаработку.Ссылка,
		|	ОплатаПоСреднемуЗаработку.ДокументРассчитан
		|ИЗ
		|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
		|ГДЕ
		|	ОплатаПоСреднемуЗаработку.Ссылка В(&МассивСсылок)
		|	И ОплатаПоСреднемуЗаработку.Проведен";
	Запрос.УстановитьПараметр("МассивСсылок",МассивСсылок);
	
	ТЗРассчитанныеОплатаПоСреднемуЗаработку = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Объект.Сотрудники Цикл
		Если ЗначениеЗаполнено(Строка.ОплатаПоСреднемуЗаработку) Тогда
			РезультатПоОплатаПоСреднемуЗаработку = ТЗРассчитанныеОплатаПоСреднемуЗаработку.Найти(Строка.ОплатаПоСреднемуЗаработку, "Ссылка");
			Если РезультатПоОплатаПоСреднемуЗаработку <> Неопределено Тогда
				Строка.ОплатаПоСреднемуЗаработкуРассчитана = РезультатПоОплатаПоСреднемуЗаработку.ДокументРассчитан;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиНаСуществующиеДокументы()
	
	ТаблицаОтсутствий = ТаблицаОтсутствий();
	
	Для каждого Строка Из Объект.Сотрудники Цикл
		Если ЗначениеЗаполнено(Строка.ОплатаПоСреднемуЗаработку) Тогда
			Продолжить;
		КонецЕсли;
		НоваяОплатаПоСреднемуЗаработку = ТаблицаОтсутствий.Добавить();
		НоваяОплатаПоСреднемуЗаработку.Сотрудник = Строка.Сотрудник;
		НоваяОплатаПоСреднемуЗаработку.ДатаНачала = Строка.ДатаНачала;
		НоваяОплатаПоСреднемуЗаработку.Идентификатор = Строка.ПолучитьИдентификатор();
	КонецЦикла;
	
	ЗаполнитьСсылкиОплатПоСреднемуЗаработку(ТаблицаОтсутствий, "");
	
КонецПроцедуры

&НаСервере
Функция ТаблицаОтсутствий()
	ТаблицаОтсутствий = Новый ТаблицаЗначений;
	ТаблицаОтсутствий.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаОтсутствий.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаОтсутствий.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"));
	Возврат ТаблицаОтсутствий;
КонецФункции

&НаСервере
Функция ЗаполнитьСсылкиОплатПоСреднемуЗаработку(ТаблицаОтсутствий, ДополнительныеДанные)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОплатыПоСреднемуЗаработку.Сотрудник КАК Сотрудник,
	|	ОплатыПоСреднемуЗаработку.ДатаНачала КАК ДатаНачала,
	|	ОплатыПоСреднемуЗаработку.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТОплатыПоСреднемуЗаработку
	|ИЗ
	|	&ОплатыПоСреднемуЗаработку КАК ОплатыПоСреднемуЗаработку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодходящиеОплатыПоСреднемуЗаработку.Ссылка КАК Ссылка,
	|	ВТОплатыПоСреднемуЗаработку.Сотрудник КАК Сотрудник,
	|	ВТОплатыПоСреднемуЗаработку.ДатаНачала КАК ДатаНачала,
	|	ВТОплатыПоСреднемуЗаработку.Идентификатор КАК Идентификатор,
	|	&ДополнительныеДанные
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ПодходящиеОплатыПоСреднемуЗаработку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОплатаПоСреднемуЗаработкуСписком.Сотрудники КАК ОплатаПоСреднемуЗаработкуСпискомСотрудники
	|		ПО ПодходящиеОплатыПоСреднемуЗаработку.Ссылка = ОплатаПоСреднемуЗаработкуСпискомСотрудники.ОплатаПоСреднемуЗаработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОплатыПоСреднемуЗаработку КАК ВТОплатыПоСреднемуЗаработку
	|		ПО (ВТОплатыПоСреднемуЗаработку.Сотрудник = ПодходящиеОплатыПоСреднемуЗаработку.Сотрудник)
	|			И (ВТОплатыПоСреднемуЗаработку.ДатаНачала = ПодходящиеОплатыПоСреднемуЗаработку.ДатаНачала)
	|ГДЕ
	|	(ОплатаПоСреднемуЗаработкуСпискомСотрудники.Ссылка ЕСТЬ NULL
	|			ИЛИ ОплатаПоСреднемуЗаработкуСпискомСотрудники.Ссылка = &Ссылка)";
	Запрос.УстановитьПараметр("ОплатыПоСреднемуЗаработку",	ТаблицаОтсутствий);
	Запрос.УстановитьПараметр("Ссылка", 					Объект.Ссылка);
	
	Если НЕ ДополнительныеДанные = "" Тогда
		СтрокаЗамены = "";
		Разделитель = "";
		МассивДополнительныхПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДополнительныеДанные);
		Для Каждого Поле Из МассивДополнительныхПолей Цикл
			СтрокаЗамены = СтрокаЗамены + Разделитель + "ПодходящиеОплатыПоСреднемуЗаработку." + Поле;
			Разделитель = ", ";
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеДанные", СтрокаЗамены);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеДанные", "ИСТИНА");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Объект.Сотрудники.НайтиПоИдентификатору(Выборка.Идентификатор);
		Если НЕ Строка = Неопределено Тогда
			Строка.ОплатаПоСреднемуЗаработку = Выборка.Ссылка;
			
			Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
				ЗаполнитьЗначенияСвойств(Строка, Выборка, ДополнительныеДанные); 
			КонецЕсли;
			
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;	

КонецФункции

&НаСервере
Процедура ОформитьОтсутствияНаСервере()

	ЗаполнитьСсылкиНаСуществующиеДокументы();
	СоздатьОплатыПоСреднемуЗаработкуПоМассивуСтрок();
	ЗаполнитьПредупреждение(ЭтотОбъект);	
	ОбновитьОплатаПоСреднемуЗаработкуРассчитана();

КонецПроцедуры

&НаСервере
Процедура СоздатьОплатыПоСреднемуЗаработкуПоМассивуСтрок(МассивИдентификаторов = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если МассивИдентификаторов = Неопределено Тогда
		МассивИдентификаторов = Новый Массив;
		Для каждого Строка Из Объект.Сотрудники Цикл
			Если Строка.ОплатаПоСреднемуЗаработку.Пустая() Тогда
				МассивИдентификаторов.Добавить(Строка.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивИдентификаторов.ВГраница() >= 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрыЗаполнения = ПараметрыЗаполнения(); 
		ПараметрыЗаполнения.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
		ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
		ПараметрыЗаполнения.Вставить("Руководитель", Объект.Руководитель);
		ПараметрыЗаполнения.Вставить("ДолжностьРуководителя", Объект.ДолжностьРуководителя);
		ПараметрыЗаполнения.Вставить("ВнутрисменноеОтсутствие", Объект.ВнутрисменноеОтсутствие);
		ПараметрыЗаполнения.Вставить("ВидВремени", Объект.ВидВремени);
		ПараметрыЗаполнения.Вставить("ПланируемаяДатаВыплаты",
			РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Объект.Организация, Объект.ПериодРегистрации));
		
		Для Каждого Идентификатор Из МассивИдентификаторов Цикл
			Строка = Объект.Сотрудники.НайтиПоИдентификатору(Идентификатор);
			Если Строка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, Строка, "Сотрудник,ФизическоеЛицо,ДатаНачала,ДатаОкончания,ДатаОтсутствия,ОплачиватьЧасов");
			ПараметрыЗаполнения.Вставить("ДатаНачалаСобытия", Строка.ДатаНачала);
			Строка.ОплатаПоСреднемуЗаработку = РасчетныйДокументПоПараметрамЗаполнения(ПараметрыЗаполнения);
			ЭтотОбъект.Модифицированность = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтотОбъект.Модифицированность Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполнения()
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("Организация");
	ПараметрыЗаполнения.Вставить("ПериодРегистрации");
	ПараметрыЗаполнения.Вставить("ВнутрисменноеОтсутствие");
	ПараметрыЗаполнения.Вставить("ВидВремени");
	ПараметрыЗаполнения.Вставить("Сотрудник");
	ПараметрыЗаполнения.Вставить("ФизическоеЛицо");
	ПараметрыЗаполнения.Вставить("ДатаНачалаСобытия");
	ПараметрыЗаполнения.Вставить("ДатаНачала");
	ПараметрыЗаполнения.Вставить("ДатаОкончания");
	ПараметрыЗаполнения.Вставить("ДатаОтсутствия");
	ПараметрыЗаполнения.Вставить("ОплачиватьЧасов");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Функция РасчетныйДокументПоПараметрамЗаполнения(ПараметрыЗаполнения)
	
	СсылкаНаОплатуПоСреднемуЗаработку = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗаполнения.Вставить("ЗаполнитьПоПараметрамЗаполнения", Истина);
	НовыйДокумент = Документы.ОплатаПоСреднемуЗаработку.СоздатьДокумент();
	
	НовыйДокумент.Заполнить(ПараметрыЗаполнения);
	
	ЗарплатаКадрыРасширенный.УстановитьВариантРасчетаДокументаПоСреднемуЗаработку(НовыйДокумент);
	ДополнительныеПараметрыВыбора = Документы.ОплатаПоСреднемуЗаработку.ДополнительныеПараметрыВыбораНачислений(НовыйДокумент, "ВидРасчета");
	ДополнительныеПараметрыВыбора.Вставить("Отбор.ВидВремени", 
		?(ПараметрыЗаполнения.ВнутрисменноеОтсутствие, 
			Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное,
			Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное));
	ПланыВидовРасчета.Начисления.УстановитьНачислениеПоУмолчаниюВОбъекте(НовыйДокумент, "ВидРасчета", ДополнительныеПараметрыВыбора);

	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Ответственный", "Ответственный");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(НовыйДокумент, ЗапрашиваемыеЗначения);
	
	НовыйДокумент.Дата = Объект.Дата;
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") Тогда
		НовыйДокумент.ДокументРассчитан = Ложь;
	КонецЕсли;
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	СсылкаНаОплатуПоСреднемуЗаработку = НовыйДокумент.Ссылка;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СсылкаНаОплатуПоСреднемуЗаработку;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредупреждение(Форма)
	КоличествоПустыхСсылок = Форма.Объект.Сотрудники.НайтиСтроки(Новый Структура("ОплатаПоСреднемуЗаработку", ПредопределенноеЗначение("Документ.ОплатаПоСреднемуЗаработку.ПустаяСсылка"))).Количество();
	КоличествоСтрок = Форма.Объект.Сотрудники.Количество();
	
	ПодходящаяСтраница 	= Форма.Элементы.ГруппаПредупреждения.ПодчиненныеЭлементы.ГруппаПредупреждение;
	ПодходящаяКартинка 	= БиблиотекаКартинок.Предупреждение;
	ПодходящийТекст 	= НСтр("ru = 'Отсутствия с сохранением оплаты не отражены в кадровом учете.';
								|en = 'Paid absences are not recorded in the HR recordkeeping.'");
	ПодходящийЗаголовокГиперссылки 	= НСтр("ru = 'Оформить отсутствия';
												|en = 'Register absences'");
	
	Если КоличествоСтрок = 0 Тогда 
		ПодходящаяСтраница 	= Форма.Элементы.ГруппаПредупреждения.ПодчиненныеЭлементы.ГруппаПредупреждениеБезКоманды;
		ПодходящийТекст 	= "";
		ПодходящаяКартинка 	= Неопределено;
		Форма.Элементы.ВидВремени.ТолькоПросмотр = Ложь;
		Форма.Элементы.ВнутрисменноеОтсутствие.ТолькоПросмотр = Ложь;
	ИначеЕсли КоличествоПустыхСсылок = 0 Тогда
		ПодходящаяСтраница 	= Форма.Элементы.ГруппаПредупреждения.ПодчиненныеЭлементы.ГруппаПредупреждениеБезКоманды;
		ПодходящийТекст 	= НСтр("ru = 'Все отсутствия отражены в учете.';
									|en = 'All absences are recorded in accounting.'");	
		ПодходящаяКартинка 	= БиблиотекаКартинок.Информация;
		Форма.Элементы.ВидВремени.ТолькоПросмотр = Истина;
		Форма.Элементы.ВнутрисменноеОтсутствие.ТолькоПросмотр = Истина;
	ИначеЕсли КоличествоСтрок > КоличествоПустыхСсылок Тогда
		ПодходящийТекст 	= НСтр("ru = 'Не все отсутствия отражены в кадровом учете.';
									|en = 'Not all absences are recorded in HR recordkeeping.'");
		ПодходящийЗаголовокГиперссылки 	= НСтр("ru = 'Оформить недостающие отсутствия';
													|en = 'Register missing absences'");
		Форма.Элементы.ВидВремени.ТолькоПросмотр = Истина;
		Форма.Элементы.ВнутрисменноеОтсутствие.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Форма.Элементы.ГруппаПредупреждения.ТекущаяСтраница <> ПодходящаяСтраница Тогда
		Форма.Элементы.ГруппаПредупреждения.ТекущаяСтраница = ПодходящаяСтраница;
	КонецЕсли;
	Если Форма.Элементы.ОформитьОтсутствия.Заголовок <> ПодходящийЗаголовокГиперссылки Тогда
		Форма.Элементы.ОформитьОтсутствия.Заголовок = ПодходящийЗаголовокГиперссылки;
	КонецЕсли;
	Если Форма.ТекстПредупреждения <> ПодходящийТекст Тогда
		Форма.ТекстПредупреждения = ПодходящийТекст;
	КонецЕсли;
	Если Форма.КартинкаПредупреждения <> ПодходящаяКартинка Тогда
		Форма.КартинкаПредупреждения = ПодходящаяКартинка;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрашиваемыеЗначения = Новый Структура("Организация, МесяцРасчета", "Объект.Организация", "Объект.ПериодРегистрации");
	ЗарплатаКадры.ЗаполнитьОтветственныхРаботниковОрганизацииВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтаФорма);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	"СотрудникиДатаНачала",
	"Видимость",
	Не Объект.ВнутрисменноеОтсутствие);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	"СотрудникиДатаОкончания",
	"Видимость",
	Не Объект.ВнутрисменноеОтсутствие);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	"СотрудникиДатаОтсутствия",
	"Видимость",
	Объект.ВнутрисменноеОтсутствие);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	"СотрудникиОплачиватьЧасов",
	"Видимость",
	Объект.ВнутрисменноеОтсутствие);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	"СотрудникиЗаполнитьПоказатели",
	"Видимость",
	Объект.ВнутрисменноеОтсутствие);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНаСервере(Сотрудники)
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		
		СтрокиПоСотруднику = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		
		Если СтрокиПоСотруднику.Количество() = 0 Тогда
			НоваяСтрока = Объект.Сотрудники.Добавить();
			НоваяСтрока.Сотрудник = Сотрудник;
			
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстанавливаемыеПараметры = Новый Структура;
	УстанавливаемыеПараметры.Вставить("Организация", Объект.Организация);
	
	УстановитьПараметрыФункциональныхОпцийФормы(УстанавливаемыеПараметры);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказатели(Команда)
	
	МассивПоказателей = Новый Массив;
	
	МассивПоказателей.Добавить(ПоказательОтработаноЧасов());
	
	ПараметрыФормы = Новый Структура("МассивПоказателей", МассивПоказателей);
	ОткрытьФорму("ОбщаяФорма.ГрупповоеЗаполнениеПоказателейДокументов", ПараметрыФормы, ЭтотОбъект);
	
	ЗаполнитьПредупреждение(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПоказательОтработаноЧасов()

	Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов");
	
КонецФункции
// Конец СтандартныеПодсистемы.Свойства

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.Сотрудники");
	Возврат Массив
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", НСтр("ru = 'организации';
																						|en = 'company'")));
	Возврат Массив
КонецФункции

#КонецОбласти

// КадровыйЭДО
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодключаемыеКоманды(УправляемаяФорма)
	КадровыйЭДОКлиентСервер.ОбновитьКоманды(УправляемаяФорма, УправляемаяФорма.Объект, Истина);
КонецПроцедуры
// Конец КадровыйЭДО

#КонецОбласти
