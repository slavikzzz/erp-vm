#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не РазныеДатыДляСотрудников Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.ДатаНачала");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения, , Истина)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, ДанныеДляПроведения.СотрудникиДаты, Ссылка);
	
	ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетСотрудников(ЭтотОбъект, Движения, ДанныеДляПроведения.НастройкиБухучета);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает данные для формирования движений.
// Возвращает таблицу значений - данные, необходимые для формирования плановых начислений по договорам.
//
Функция ДанныеДляПроведения()
	
	ДанныеДляПроведения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("РазныеДатыДляСотрудников", РазныеДатыДляСотрудников);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &РазныеДатыДляСотрудников
	|			ТОГДА Бухучет.ДатаНачала
	|		ИНАЧЕ &ДатаНачала
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА &РазныеДатыДляСотрудников
	|					ТОГДА Бухучет.ДатаОкончания
	|				ИНАЧЕ &ДатаОкончания
	|			КОНЕЦ = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВЫБОР
	|					КОГДА &РазныеДатыДляСотрудников
	|						ТОГДА Бухучет.ДатаОкончания
	|					ИНАЧЕ &ДатаОкончания
	|				КОНЕЦ, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДействуетДо,
	|	Бухучет.Сотрудник КАК Сотрудник,
	|	&Организация КАК Организация,
	|	Бухучет.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Бухучет.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Бухучет.ОтношениеКЕНВД КАК ОтношениеКЕНВД
	|ИЗ
	|	Документ.БухучетЗарплатыСотрудников.Сотрудники КАК Бухучет
	|ГДЕ
	|	Бухучет.Ссылка = &Регистратор";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НастройкиБухучета = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаНастройкиБухучетаЗаплатыСотрудников();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НастройкиБухучета.Добавить(), Выборка);
	КонецЦикла;
	ДанныеДляПроведения.Вставить("НастройкиБухучета", НастройкиБухучета);
	
	СотрудникиДаты = ДанныеДляПроведения.НастройкиБухучета.Скопировать();
	СотрудникиДаты.Свернуть("Период,Сотрудник",);
	СотрудникиДаты.Колонки.Период.Имя = "ДатаСобытия";
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли