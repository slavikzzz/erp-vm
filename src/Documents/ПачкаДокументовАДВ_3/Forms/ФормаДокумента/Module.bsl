#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначенияПервоначальногоЗаполнения());
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаПечатьПереопределенная;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПанельОтправкиВКонтролирующиеОрганы
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");
	// Конец ПанельОтправкиВКонтролирующиеОрганы
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере();
	ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(Объект.Сотрудники, Объект.Дата);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ПанельОтправкиВКонтролирующиеОрганы
	СохранитьСтатусОтправки(ЭтотОбъект, Объект.Ссылка);
	// Конец ПанельОтправкиВКонтролирующиеОрганы
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ПачкаДокументовАДВ_3", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ОтображатьСписокСотрудников Тогда 
		ПерсонифицированныйУчетКлиент.ДокументыАДВОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	Иначе 
		ОбработатьИзменениеДанныхФизическогоЛица2022(ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ОтображатьСписокСотрудников Тогда 
		ОтобразитьДанныеФизическогоЛица();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПризнакИзмененияПриИзменении(Элемент)
	
	ПерсонифицированныйУчетКлиент.ДокументыАДВПризнакИзмененияПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоРожденияВСвидетельствеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = ПерсонифицированныйУчетКлиент.ДанныеТекущейСтрокиАДВ(ЭтаФорма);
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("МестоРожденияВСвидетельствеНачалоВыбораЗавершение", ЭтотОбъект);
		ЗарплатаКадрыКлиент.МестоРожденияВТаблицеНачалоВыбора(ДанныеТекущейСтроки.МестоРожденияВСвидетельстве, ДанныеТекущейСтроки.МестоРожденияВСвидетельствеПредставление, Оповещение);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоРожденияВСвидетельствеНачалоВыбораЗавершение(ДанныеМестаРождения, ДополнительныеПараметры) Экспорт 
	
	Если ДанныеМестаРождения <> Неопределено Тогда 
		ДанныеТекущейСтроки = ПерсонифицированныйУчетКлиент.ДанныеТекущейСтрокиАДВ(ЭтаФорма);
	    ДанныеТекущейСтроки.МестоРожденияВСвидетельстве = ДанныеМестаРождения.МестоРождения;
	    ДанныеТекущейСтроки.МестоРожденияВСвидетельствеПредставление = ДанныеМестаРождения.МестоРожденияПредставление;
		Если Не ОтображатьСписокСотрудников Тогда 
	    	ДанныеСвидетельстваМестоРождения = ДанныеМестаРождения.МестоРожденияПредставление;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ОтобразитьДанныеФизическогоЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОтображатьСписокЗначение = ОтображатьСписокСотрудников;
	ОтображатьСписокСотрудников = Объект.Дата < ПерсонифицированныйУчетКлиентСервер.ДатаПостановленияАДВ2022();
	Если ОтображатьСписокЗначение <> ОтображатьСписокСотрудников Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	ОтобразитьДанныеФизическогоЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПоляНадписиАдресаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СотрудникиКлиент.ПояснениеНажатие(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагБлокировкиДокументаПриИзменении(Элемент)
	ФлагБлокировкиДокументаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	ОтобразитьДанныеФизическогоЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПолученияСвидетельстваПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = ПерсонифицированныйУчетКлиент.ДанныеТекущейСтрокиАДВ(ЭтаФорма);
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки.ДатаПолученияСвидетельства = ДатаПолученияСвидетельства;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСвидетельстваФамилияПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = ПерсонифицированныйУчетКлиент.ДанныеТекущейСтрокиАДВ(ЭтаФорма);
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки.ФамилияВСвидетельстве = ФамилияВСвидетельстве;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСвидетельстваИмяПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = ПерсонифицированныйУчетКлиент.ДанныеТекущейСтрокиАДВ(ЭтаФорма);
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки.ИмяВСвидетельстве = ИмяВСвидетельстве;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСвидетельстваОтчествоПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = ПерсонифицированныйУчетКлиент.ДанныеТекущейСтрокиАДВ(ЭтаФорма);
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки.ОтчествоВСвидетельстве = ОтчествоВСвидетельстве;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСвидетельстваПолПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = ПерсонифицированныйУчетКлиент.ДанныеТекущейСтрокиАДВ(ЭтаФорма);
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки.ПолВСвидетельстве = ДанныеСвидетельстваПол;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСвидетельстваДатаРожденияПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = ПерсонифицированныйУчетКлиент.ДанныеТекущейСтрокиАДВ(ЭтаФорма);
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки.ДатаРожденияВСвидетельстве = ДанныеСвидетельстваДатаРождения;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерАктовойЗаписиПриРожденииПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = ПерсонифицированныйУчетКлиент.ДанныеТекущейСтрокиАДВ(ЭтаФорма);
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки.НомерАктовойЗаписиПриРождении = НомерАктовойЗаписиПриРождении;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСоставленияАктовойЗаписиПриРожденииПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = ПерсонифицированныйУчетКлиент.ДанныеТекущейСтрокиАДВ(ЭтаФорма);
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки.ДатаСоставленияАктовойЗаписиПриРождении = ДатаСоставленияАктовойЗаписиПриРождении;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОрганаРегистрацииАктовойЗаписиПриРожденииПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = ПерсонифицированныйУчетКлиент.ДанныеТекущейСтрокиАДВ(ЭтаФорма);
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки.НаименованиеОрганаРегистрацииАктовойЗаписиПриРождении = НаименованиеОрганаРегистрацииАктовойЗаписиПриРождении;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
	ОтобразитьДанныеФизическогоЛица();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриАктивизацииСтроки(Элемент)
	
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки = Неопределено Тогда
		ИнфоКартинкаОДокументе = Новый Картинка;
	Иначе
		
		Если ПустаяСтрока(ДанныеТекущейСтроки.ИнфоОДокументеУдостоверяющемЛичностьНадпись) Тогда
			ИнфоКартинкаОДокументе = Новый Картинка;
		Иначе
			ИнфоКартинкаОДокументе = БиблиотекаКартинок.Предупреждение;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнфоОДокументеУдостоверяющемЛичностьКартинка = ИнфоКартинкаОДокументе;
	
	ОтобразитьДанныеФизическогоЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	ЗаполнитьДанныеСотрудникаНаСервере();	
	ОтобразитьДанныеФизическогоЛица();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуЗавершение", ЭтотОбъект, Команда);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуЗавершение(Результат, Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	КадровыйУчетКлиент.ПодобратьФизическихЛицОрганизации(Элементы.Сотрудники, Объект.Организация, АдресСпискаПодобранныхСотрудников());
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеФизическогоЛица(Команда)
	ПерсонифицированныйУчетКлиент.РедактироватьДанныеФизическогоЛица(Элементы.Сотрудники);	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеФизическогоЛица(Команда)
	ПерсонифицированныйУчетКлиент.ДокументыАДВПрочитатьДанныеФизическогоЛица(ЭтаФорма);		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ПФР");	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	ОчиститьСообщения();

	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);
	
	ПроверкаСтороннимиПрограммами(Отказ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСтатусОтправки(Форма, Ссылка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Форма", Форма);
	СтруктураПараметров.Вставить("СсылкаНаОбъект", Ссылка);
	
	ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьДоступностьДанныхФормы()
	Если Объект.ДокументПринятВПФР Тогда  
		ТолькоПросмотр = Истина;	
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы() Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Организация", "ТолькоПросмотр", ОтправленВПФР);
	
	Если ОтображатьСписокСотрудников Тогда 
	
		АктоваяЗаписьТолькоПросмотр = Не УдостоверениеЛичностиПризнакИзменения Или ВидДокумента <> Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерАктовойЗаписиПриРождении", "ТолькоПросмотр", АктоваяЗаписьТолькоПросмотр);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерАктовойЗаписиПриРождении", "АвтоОтметкаНезаполненного", Не АктоваяЗаписьТолькоПросмотр);
		Если АктоваяЗаписьТолькоПросмотр Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерАктовойЗаписиПриРождении", "ОтметкаНезаполненного", Ложь);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаСоставленияАктовойЗаписиПриРождении", "ТолькоПросмотр", АктоваяЗаписьТолькоПросмотр);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаСоставленияАктовойЗаписиПриРождении", "АвтоОтметкаНезаполненного", Не АктоваяЗаписьТолькоПросмотр);
		Если АктоваяЗаписьТолькоПросмотр Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаСоставленияАктовойЗаписиПриРождении", "ОтметкаНезаполненного", Ложь);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НаименованиеОрганаРегистрацииАктовойЗаписиПриРождении", "ТолькоПросмотр", АктоваяЗаписьТолькоПросмотр);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НаименованиеОрганаРегистрацииАктовойЗаписиПриРождении", "АвтоОтметкаНезаполненного", Не АктоваяЗаписьТолькоПросмотр);
		Если АктоваяЗаписьТолькоПросмотр Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НаименованиеОрганаРегистрацииАктовойЗаписиПриРождении", "ОтметкаНезаполненного", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерПачки", "Видимость", ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиГруппа", "Видимость", ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РедактироватьДанныеФизическогоЛица", "Видимость", ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФИОВСвидетельстве", "Видимость", ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолДатаМестоРождения", "Видимость", ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГражданствоПризнакИзменения", "Видимость", ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресРегистрацииПредставлениеПризнакИзменения", "Видимость", ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресФактическийПредставлениеПризнакИзменения", "Видимость", ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТелефоныПризнакИзменения", "Видимость", ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИННПризнакИзменения", "Видимость", ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументУдостоверяющийЛичностьПризнакИзменения", "Видимость", ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИнфоКартинкаНомерАктовойЗаписиПриРождении", "Видимость", ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИнфоКартинкаДатаСоставленияАктовойЗаписиПриРождении", "Видимость", ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИнфоКартинкаНаименованиеОрганаРегистрацииАктовойЗаписиПриРождении", "Видимость", ОтображатьСписокСотрудников);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Сотрудник", "Видимость", Не ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеСвидетельстваСтраховойНомер", "Видимость", Не ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПолученияСвидетельства", "Видимость", Не ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеСвидетельстваФИО", "Видимость", Не ОтображатьСписокСотрудников);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеСвидетельстваПолДатаМестоРождения", "Видимость", Не ОтображатьСписокСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура ФлагБлокировкиДокументаПриИзмененииНаСервере()
	Модифицированность = Истина;
	Объект.ДокументПринятВПФР = ФлагБлокировкиДокумента;
	Если Не ФлагБлокировкиДокумента Тогда
		ТолькоПросмотр = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ПерсонифицированныйУчет.ДокументыАДВЗаполнитьТекущиеДанныеФизическихЛиц(Объект);	
	НастроитьОтображениеГруппыПодписантов();
	
	ФлагБлокировкиДокумента = Объект.ДокументПринятВПФР;
	ОтправленВПФР = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ОбъектОтправлялсяВКонтролирующиеОрганы(Объект.Ссылка);
	
	ОтображатьСписокСотрудников = Объект.Дата < ПерсонифицированныйУчетКлиентСервер.ДатаПостановленияАДВ2022();
	Если Не ОтображатьСписокСотрудников И Объект.Сотрудники.Количество() > 0 Тогда 
		Сотрудник = Объект.Сотрудники[0].Сотрудник;
	КонецЕсли;
	
	УстановитьДоступностьДанныхФормы();
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ЗапрашиваемыеЗначенияПервоначальногоЗаполнения()
	
	ЗапрашиваемыеЗначения = ЗапрашиваемыеЗначенияЗаполненияПоОрганизации();
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	ЗапрашиваемыеЗначения.Вставить("Ответственный", "Объект.Ответственный");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапрашиваемыеЗначенияЗаполненияПоОрганизации()
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьДанныеСотрудникаНаСервере()
	
	Если Не ОтображатьСписокСотрудников Тогда 
		ЗаполнитьДанныеСотрудникаНаСервере2022();
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(ДанныеТекущейСтроки.Сотрудник);
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПоместитьСписокСотрудниковВоВременнуюТаблицу(МассивСотрудников, МенеджерВременныхТаблиц);
	
	ДанныеЗаполнения = Документы.ПачкаДокументовАДВ_3.СформироватьЗапросПоДаннымФизЛицДокумента(Объект.Ссылка, Объект.Дата, МенеджерВременныхТаблиц).Выбрать();
	
	СтрокиПоСотрудникам = Новый Массив;
	Если ДанныеЗаполнения.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, ДанныеЗаполнения);
		ДанныеТекущейСтроки.МестоРожденияВСвидетельствеПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ДанныеТекущейСтроки.МестоРожденияВСвидетельстве);
		ДанныеТекущейСтроки.МестоРожденияПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ДанныеТекущейСтроки.МестоРождения);
		ДанныеТекущейСтроки.ДанныеФизЛицаМестоРожденияПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ДанныеТекущейСтроки.ДанныеФизЛицаМестоРождения);
		Если СокрЛП(ДанныеТекущейСтроки.Фамилия) = "-" Тогда
			ДанныеТекущейСтроки.Фамилия = "";
		КонецЕсли;
		Если СокрЛП(ДанныеТекущейСтроки.ДанныеФизЛицаФамилия) = "-" Тогда
			ДанныеТекущейСтроки.ДанныеФизЛицаФамилия = "";
		КонецЕсли;
		Если СокрЛП(ДанныеТекущейСтроки.ФамилияВСвидетельстве) = "-" Тогда
			ДанныеТекущейСтроки.ФамилияВСвидетельстве = "";
		КонецЕсли;
		СтрокиПоСотрудникам.Добавить(ДанныеТекущейСтроки);
	КонецЕсли;
	
	ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(СтрокиПоСотрудникам, Объект.Дата);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДанныеСотрудникаНаСервере2022()
	
	Если Объект.Сотрудники.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки = Объект.Сотрудники[0];
	
	СписокСотрудников = Новый Массив;
	СписокСотрудников.Добавить(ДанныеТекущейСтроки.Сотрудник);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьСписокСотрудниковВоВременнуюТаблицу(СписокСотрудников, МенеджерВременныхТаблиц);
	
	ДанныеЗаполнения = Документы.ПачкаДокументовАДВ_3.СформироватьЗапросПоДаннымФизЛицДокумента(Объект.Ссылка, Объект.Дата, МенеджерВременныхТаблиц).Выбрать();
	Если ДанныеЗаполнения.Следующий() Тогда
		ДанныеСвидетельства = "ДатаПолученияСвидетельства, СтраховойНомерПФРВСвидетельстве,
			|ФамилияВСвидетельстве, ИмяВСвидетельстве, ОтчествоВСвидетельстве, ПолВСвидетельстве,
			|ДатаРожденияВСвидетельстве, МестоРожденияВСвидетельстве";
		ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, ДанныеЗаполнения);
		ДанныеТекущейСтроки.МестоРожденияВСвидетельствеПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ДанныеТекущейСтроки.МестоРожденияВСвидетельстве);
	КонецЕсли;
	
	ДанныеСотрудника = "Страна, ИНН, ДокументВид, ДокументСерия, ДокументНомер, ДокументКемВыдан,
		|ДокументДатаВыдачи, ДокументКодПодразделения, ТелефонДомашнийПредставление, АдресПоПрописке,
		|АдресПоПропискеПредставление, АдресМестаПроживания, АдресМестаПроживанияПредставление";
		
	КадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокСотрудников, ДанныеСотрудника, Объект.Дата);
	
	Если КадровыеДанныеФизическихЛиц.Количество() > 0 Тогда 
		КадровыеДанные = КадровыеДанныеФизическихЛиц[0];
		ДанныеТекущейСтроки.Гражданство = КадровыеДанные.Страна;
		ДанныеТекущейСтроки.ИНН = КадровыеДанные.ИНН;
		ДанныеТекущейСтроки.АдресРегистрации = КадровыеДанные.АдресПоПрописке;
		ДанныеТекущейСтроки.АдресРегистрацииПредставление = КадровыеДанные.АдресПоПропискеПредставление;
		ДанныеТекущейСтроки.АдресФактический = КадровыеДанные.АдресМестаПроживания;
		ДанныеТекущейСтроки.АдресФактическийПредставление = КадровыеДанные.АдресМестаПроживанияПредставление;
		ДанныеТекущейСтроки.Телефоны = КадровыеДанные.ТелефонДомашнийПредставление;
		ДанныеТекущейСтроки.ВидДокумента = КадровыеДанные.ДокументВид;
		ДанныеТекущейСтроки.СерияДокумента = КадровыеДанные.ДокументСерия;
		ДанныеТекущейСтроки.НомерДокумента = КадровыеДанные.ДокументНомер;
		ДанныеТекущейСтроки.КемВыдан = КадровыеДанные.ДокументКемВыдан;
		ДанныеТекущейСтроки.ДатаВыдачи = КадровыеДанные.ДокументДатаВыдачи;
		ДанныеТекущейСтроки.КодПодразделения = КадровыеДанные.ДокументКодПодразделения;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ПоместитьСписокСотрудниковВоВременнуюТаблицу(МассивСотрудников, МенеджерВременныхТаблиц)
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСотрудников.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));

	СчСотрудников =1;
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		СтрокаТаблицы = ТаблицаСотрудников.Добавить();
		СтрокаТаблицы.Сотрудник = Сотрудник;
		СтрокаТаблицы.НомерСтроки = СчСотрудников;
		СчСотрудников = СчСотрудников + 1;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСотрудники", ТаблицаСотрудников);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудники.НомерСтроки,
	|	ТаблицаСотрудники.Сотрудник КАК ФизическоеЛицо,
	|	&Организация КАК Организация,
	|	&Ссылка КАК ДокументСсылка,
	|	&Дата КАК УточненнаяДатаПолученияСвидетельства,
	|	&Дата КАК Период
	|ПОМЕСТИТЬ ВТСписокФизлицДокумента
	|ИЗ
	|	&ТаблицаСотрудники КАК ТаблицаСотрудники";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

&НаСервере
Процедура ОбработкаПодбораНаСервере(ВыбранныеФизЛица)
	МассивФизЛиц = Новый Массив;		
	СтруктураПоиска = Новый Структура("Сотрудник");
	Для Каждого Сотрудник Из ВыбранныеФизЛица Цикл
		СтруктураПоиска.Сотрудник = Сотрудник;
		Если Объект.Сотрудники.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			МассивФизЛиц.Добавить(Сотрудник);	
		КонецЕсли;
	КонецЦикла;	

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПоместитьСписокСотрудниковВоВременнуюТаблицу(МассивФизЛиц, МенеджерВременныхТаблиц);
	
	ДанныеЗаполнения = Документы.ПачкаДокументовАДВ_3.СформироватьЗапросПоДаннымФизЛицДокумента(Объект.Ссылка, Объект.Дата, МенеджерВременныхТаблиц).Выбрать();
	
	СтрокиПоСотрудникам = Новый Массив;
	ИдентификаторНовойСтроки = Неопределено;
	Пока ДанныеЗаполнения.Следующий() Цикл
		НоваяСтрокаСотрудник = Объект.Сотрудники.Добавить();
		ИдентификаторНовойСтроки = НоваяСтрокаСотрудник.ПолучитьИдентификатор();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСотрудник, ДанныеЗаполнения);
		НоваяСтрокаСотрудник.МестоРожденияВСвидетельствеПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(НоваяСтрокаСотрудник.МестоРожденияВСвидетельстве);
		НоваяСтрокаСотрудник.МестоРожденияПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(НоваяСтрокаСотрудник.МестоРождения);
		НоваяСтрокаСотрудник.ДанныеФизЛицаМестоРожденияПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(НоваяСтрокаСотрудник.ДанныеФизЛицаМестоРождения);
		Если СокрЛП(НоваяСтрокаСотрудник.Фамилия) = "-" Тогда
			НоваяСтрокаСотрудник.Фамилия = "";
		КонецЕсли;
		Если СокрЛП(НоваяСтрокаСотрудник.ДанныеФизЛицаФамилия) = "-" Тогда
			НоваяСтрокаСотрудник.ДанныеФизЛицаФамилия = "";
		КонецЕсли;
		Если СокрЛП(НоваяСтрокаСотрудник.ФамилияВСвидетельстве) = "-" Тогда
			НоваяСтрокаСотрудник.ФамилияВСвидетельстве = "";
		КонецЕсли;
		СтрокиПоСотрудникам.Добавить(НоваяСтрокаСотрудник);
	КонецЦикла;
	
	ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(СтрокиПоСотрудникам, Объект.Дата);
	
	Если ИдентификаторНовойСтроки <> Неопределено Тогда 
		Элементы.Сотрудники.ТекущаяСтрока = ИдентификаторНовойСтроки;
	КонецЕсли;	
	
КонецПроцедуры		

&НаКлиенте
Функция ПолучитьСоответствиеДанныхФормыПолямТабличнойЧасти(ТипДанных) Экспорт
	СтруктураСоответствия = Новый Структура();
	
	Если ТипДанных = "ИзменившиесяДанныеСПризнаком" Тогда 	
		СтруктураСоответствия.Вставить("Фамилия", "Фамилия");
		СтруктураСоответствия.Вставить("Имя", "Имя");
		СтруктураСоответствия.Вставить("Отчество", "Отчество");	
		СтруктураСоответствия.Вставить("ПризнакОтменыОтчества", "ПризнакОтменыОтчества");
		СтруктураСоответствия.Вставить("ПризнакОтменыМестаРождения", "ПризнакОтменыМестаРождения");
		СтруктураСоответствия.Вставить("Пол", "Пол");
		СтруктураСоответствия.Вставить("ДатаРождения", "ДатаРождения");
		СтруктураСоответствия.Вставить("МестоРожденияПредставление", "МестоРожденияПредставление");
		СтруктураСоответствия.Вставить("Гражданство", "Гражданство");
		СтруктураСоответствия.Вставить("АдресФактическийПредставление", "АдресФактическийПредставление");
		СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "АдресРегистрацииПредставление");
		СтруктураСоответствия.Вставить("Телефоны", "Телефоны");
		СтруктураСоответствия.Вставить("ИНН", "ИНН");
	ИначеЕсли ТипДанных = "ПризнакиИзменения" Тогда 	
		СтруктураСоответствия.Вставить("ФамилияПризнакИзменения", "Фамилия");
		СтруктураСоответствия.Вставить("ИмяПризнакИзменения", "Имя");
		СтруктураСоответствия.Вставить("ОтчествоПризнакИзменения", "Отчество");	
		СтруктураСоответствия.Вставить("ПолПризнакИзменения", "Пол");
		СтруктураСоответствия.Вставить("ДатаРожденияПризнакИзменения", "ДатаРождения");
		СтруктураСоответствия.Вставить("МестоРожденияПредставлениеПризнакИзменения", "МестоРожденияПредставление");
		СтруктураСоответствия.Вставить("ГражданствоПризнакИзменения", "Гражданство");
		СтруктураСоответствия.Вставить("АдресФактическийПредставлениеПризнакИзменения", "АдресФактическийПредставление");
		СтруктураСоответствия.Вставить("АдресРегистрацииПредставлениеПризнакИзменения", "АдресРегистрацииПредставление");
		СтруктураСоответствия.Вставить("ТелефоныПризнакИзменения", "Телефоны");
		СтруктураСоответствия.Вставить("ИННПризнакИзменения", "ИНН");
	КонецЕсли;	
	
	Возврат СтруктураСоответствия;
КонецФункции	

&НаКлиенте 
Функция ПолучитьСоответствиеДанныхФормыПризнакамИзменения() Экспорт
    СтруктураСоответствия = Новый Структура;
	СтруктураСоответствия.Вставить("Фамилия", "ФамилияПризнакИзменения");
	СтруктураСоответствия.Вставить("Имя", "ИмяПризнакИзменения");
	СтруктураСоответствия.Вставить("Отчество", "ОтчествоПризнакИзменения");	
	СтруктураСоответствия.Вставить("Пол", "ПолПризнакИзменения");
	СтруктураСоответствия.Вставить("ДатаРождения", "ДатаРожденияПризнакИзменения");
	СтруктураСоответствия.Вставить("МестоРожденияПредставление", "МестоРожденияПредставлениеПризнакИзменения");
	СтруктураСоответствия.Вставить("Гражданство", "ГражданствоПризнакИзменения");
	СтруктураСоответствия.Вставить("АдресФактическийПредставление", "АдресФактическийПредставлениеПризнакИзменения");
	СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "АдресРегистрацииПредставлениеПризнакИзменения");
	СтруктураСоответствия.Вставить("Телефоны", "ТелефоныПризнакИзменения");	
	СтруктураСоответствия.Вставить("ИНН", "ИННПризнакИзменения");
	
	Возврат СтруктураСоответствия;
КонецФункции	

&НаКлиенте 
Функция ПолучитьСоответствиеИзменившихсяДанныхДаннымФизЛица() Экспорт
    СтруктураСоответствия = Новый Структура;
	СтруктураСоответствия.Вставить("Фамилия", "ДанныеФизЛицаФамилия");
	СтруктураСоответствия.Вставить("Имя", "ДанныеФизЛицаИмя");
	СтруктураСоответствия.Вставить("Отчество", "ДанныеФизЛицаОтчество");	
	СтруктураСоответствия.Вставить("Пол", "ДанныеФизЛицаПол");
	СтруктураСоответствия.Вставить("ДатаРождения", "ДанныеФизЛицаДатаРождения");
	СтруктураСоответствия.Вставить("МестоРожденияПредставление", "ДанныеФизЛицаМестоРожденияПредставление");
	СтруктураСоответствия.Вставить("МестоРождения", "ДанныеФизЛицаМестоРождения");
	СтруктураСоответствия.Вставить("Гражданство", "ДанныеФизЛицаГражданство");
	СтруктураСоответствия.Вставить("АдресФактическийПредставление", "ДанныеФизЛицаАдресФактическийПредставление");
	СтруктураСоответствия.Вставить("АдресФактический", "ДанныеФизЛицаАдресФактический");
	СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "ДанныеФизЛицаАдресРегистрацииПредставление");
	СтруктураСоответствия.Вставить("АдресРегистрации", "ДанныеФизЛицаАдресРегистрации");
	СтруктураСоответствия.Вставить("Телефоны", "ДанныеФизЛицаТелефоны");	
	СтруктураСоответствия.Вставить("ПризнакОтменыОтчества", "ПризнакОтменыОтчества");
	СтруктураСоответствия.Вставить("ПризнакОтменыМестаРождения", "ПризнакОтменыМестаРождения");
	СтруктураСоответствия.Вставить("ИНН", "ДанныеФизЛицаИНН");

	Возврат СтруктураСоответствия;
КонецФункции	

&НаКлиенте 
Функция ПолучитьСоответствиеЭлементовУправленияДаннымФормы() Экспорт
    СтруктураСоответствия = Новый Структура;
	СтруктураСоответствия.Вставить("Фамилия", "Фамилия");
	СтруктураСоответствия.Вставить("Имя", "Имя");
	СтруктураСоответствия.Вставить("Отчество", "Отчество");	
	СтруктураСоответствия.Вставить("Пол", "Пол");
	СтруктураСоответствия.Вставить("ДатаРождения", "ДатаРождения");
	СтруктураСоответствия.Вставить("МестоРожденияПредставление", "МестоРожденияПредставление");
	СтруктураСоответствия.Вставить("Гражданство", "Гражданство");
	СтруктураСоответствия.Вставить("АдресФактическийПредставление", "АдресФактическийПредставление");
	СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "АдресРегистрацииПредставление");
	СтруктураСоответствия.Вставить("Телефоны", "Телефоны");	
	СтруктураСоответствия.Вставить("ПризнакОтменыОтчества", "ПризнакОтменыОтчества");
	СтруктураСоответствия.Вставить("ПризнакОтменыМестаРождения", "ПризнакОтменыМестаРождения");
	
	СтруктураСоответствия.Вставить("ФамилияПризнакИзменения", "ФамилияПризнакИзменения");
	СтруктураСоответствия.Вставить("ИмяПризнакИзменения", "ИмяПризнакИзменения");
	СтруктураСоответствия.Вставить("ОтчествоПризнакИзменения", "ОтчествоПризнакИзменения");	
	СтруктураСоответствия.Вставить("ПолПризнакИзменения", "ПолПризнакИзменения");
	СтруктураСоответствия.Вставить("ДатаРожденияПризнакИзменения", "ДатаРожденияПризнакИзменения");
	СтруктураСоответствия.Вставить("МестоРожденияПредставлениеПризнакИзменения", "МестоРожденияПредставлениеПризнакИзменения");
	СтруктураСоответствия.Вставить("ГражданствоПризнакИзменения", "ГражданствоПризнакИзменения");
	СтруктураСоответствия.Вставить("АдресФактическийПредставлениеПризнакИзменения", "АдресФактическийПредставлениеПризнакИзменения");
	СтруктураСоответствия.Вставить("АдресРегистрацииПредставлениеПризнакИзменения", "АдресРегистрацииПредставлениеПризнакИзменения");
	СтруктураСоответствия.Вставить("ТелефоныПризнакИзменения", "ТелефоныПризнакИзменения");
	СтруктураСоответствия.Вставить("ИННПризнакИзменения", "ИННПризнакИзменения");

	Возврат СтруктураСоответствия;
КонецФункции	

&НаКлиенте
Функция СоответствиеРедактируемыхДанныхФормыПолямТабличнойЧасти() Экспорт 
	
	СтруктураСоответствия = Новый Структура();
	СтруктураСоответствия.Вставить("ДатаПолученияСвидетельства", "ДатаПолученияСвидетельства");
	СтруктураСоответствия.Вставить("ФамилияВСвидетельстве", "ФамилияВСвидетельстве");
	СтруктураСоответствия.Вставить("ИмяВСвидетельстве", "ИмяВСвидетельстве");
	СтруктураСоответствия.Вставить("ОтчествоВСвидетельстве", "ОтчествоВСвидетельстве");
	СтруктураСоответствия.Вставить("ВидДокумента", "ВидДокумента");
	СтруктураСоответствия.Вставить("НомерАктовойЗаписиПриРождении", "НомерАктовойЗаписиПриРождении");
	СтруктураСоответствия.Вставить("ДанныеСвидетельстваПол", "ПолВСвидетельстве");
	СтруктураСоответствия.Вставить("ДанныеСвидетельстваДатаРождения", "ДатаРожденияВСвидетельстве");
	СтруктураСоответствия.Вставить("ДанныеСвидетельстваМестоРождения", "МестоРожденияВСвидетельствеПредставление");
	
	Возврат СтруктураСоответствия;
	
КонецФункции	

&НаКлиенте
Процедура ОбработатьИзменениеДанныхФизическогоЛица(СтрокиПоСотруднику) Экспорт 
	Для Каждого СтрокаСотрудника Из СтрокиПоСотруднику Цикл
		
		Если СтрокаСотрудника.ПолВСвидетельстве <> СтрокаСотрудника.ДанныеФизЛицаПол Тогда
			СтрокаСотрудника.Пол = СтрокаСотрудника.ДанныеФизЛицаПол;
		Иначе
			СтрокаСотрудника.Пол = "";
		КонецЕсли;	
		Если СтрокаСотрудника.ДатаРожденияВСвидетельстве <> СтрокаСотрудника.ДанныеФизЛицаДатаРождения Тогда
			СтрокаСотрудника.ДатаРождения = СтрокаСотрудника.ДанныеФизЛицаДатаРождения;
		Иначе
			СтрокаСотрудника.ДатаРождения = "";
		КонецЕсли;	
		Если СтрокаСотрудника.МестоРожденияВСвидетельстве <> СтрокаСотрудника.ДанныеФизЛицаМестоРождения Тогда
			СтрокаСотрудника.МестоРождения = СтрокаСотрудника.ДанныеФизЛицаМестоРождения;
			СтрокаСотрудника.МестоРожденияПредставление = СтрокаСотрудника.ДанныеФизЛицаМестоРожденияПредставление;
		Иначе
			СтрокаСотрудника.МестоРождения = "";
			СтрокаСотрудника.МестоРожденияПредставление = "";
		КонецЕсли;	
 	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.Сотрудники.Очистить();
	Сотрудник = Неопределено;
	
	ПерсонифицированныйУчетФормы.ОрганизацияПриИзменении(ЭтаФорма, ЗапрашиваемыеЗначенияЗаполненияПоОрганизации());
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	Объект.Сотрудники.Очистить();
	Сотрудник = Неопределено;
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	Объект.Сотрудники.Очистить();
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда 
		СтрокаСотрудника = Объект.Сотрудники.Добавить();
		СтрокаСотрудника.Сотрудник = Сотрудник;
	КонецЕсли;
	
	ЗаполнитьДанныеСотрудникаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДанныеФизическогоЛица()
	
	Если ОтображатьСписокСотрудников Тогда 
		ПерсонифицированныйУчетКлиент.ДокументыАДВОтобразитьДанныеФизическогоЛица(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки = ПерсонифицированныйУчетКлиент.ДанныеТекущейСтрокиАДВ(ЭтаФорма);
	
	СоответствиеПолей = Новый Структура();
	СоответствиеПолей.Вставить("ДатаПолученияСвидетельства", "ДатаПолученияСвидетельства");
	СоответствиеПолей.Вставить("ФамилияВСвидетельстве", "ФамилияВСвидетельстве");
	СоответствиеПолей.Вставить("ИмяВСвидетельстве", "ИмяВСвидетельстве");
	СоответствиеПолей.Вставить("ОтчествоВСвидетельстве", "ОтчествоВСвидетельстве");
	СоответствиеПолей.Вставить("ДанныеСвидетельстваПол", "ПолВСвидетельстве");
	СоответствиеПолей.Вставить("ДанныеСвидетельстваДатаРождения", "ДатаРожденияВСвидетельстве");
	СоответствиеПолей.Вставить("ДанныеСвидетельстваМестоРождения", "МестоРожденияВСвидетельствеПредставление");
	СоответствиеПолей.Вставить("Гражданство", "Гражданство");
	СоответствиеПолей.Вставить("АдресФактическийПредставление", "АдресФактическийПредставление");
	СоответствиеПолей.Вставить("АдресРегистрацииПредставление", "АдресРегистрацииПредставление");
	СоответствиеПолей.Вставить("Телефоны", "Телефоны");
	СоответствиеПолей.Вставить("ИНН", "ИНН");
	СоответствиеПолей.Вставить("ВидДокумента", "ВидДокумента");
	СоответствиеПолей.Вставить("НомерАктовойЗаписиПриРождении", "НомерАктовойЗаписиПриРождении");
	СоответствиеПолей.Вставить("ДатаСоставленияАктовойЗаписиПриРождении", "ДатаСоставленияАктовойЗаписиПриРождении");
	СоответствиеПолей.Вставить("НаименованиеОрганаРегистрацииАктовойЗаписиПриРождении", "НаименованиеОрганаРегистрацииАктовойЗаписиПриРождении");
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ДанныеТекущейСтроки.ВидДокумента) Тогда
			ДокументПредставление = НСтр("ru = '<Не заполнено>';
										|en = '<Not filled in>'");
		Иначе
			ДокументПредставление = ПерсонифицированныйУчетКлиентСервер.ПолучитьПредставлениеДокументаУдостоверяющегоЛичность(ДанныеТекущейСтроки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрЗаменить(ДанныеТекущейСтроки.СтраховойНомерПФРВСвидетельстве, "-", "")) Тогда
			ДанныеСвидетельстваСтраховойНомер = НСтр("ru = '<Не заполнено>';
													|en = '<Not filled in>'");
		Иначе
			ДанныеСвидетельстваСтраховойНомер = ДанныеТекущейСтроки.СтраховойНомерПФРВСвидетельстве; 
		КонецЕсли;
		
		Для Каждого КлючЗначение Из СоответствиеПолей Цикл
			ЭтаФорма[КлючЗначение.Ключ] = ДанныеТекущейСтроки[КлючЗначение.Значение];	
		КонецЦикла;
		
	Иначе
		
		Для Каждого КлючЗначение Из СоответствиеПолей Цикл
			ЭтаФорма[КлючЗначение.Ключ] = Неопределено;	
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДанныхФизическогоЛица2022(ИмяСобытия, Параметр, Источник) Экспорт 
	
	Если ИмяСобытия <> "ИзменениеДанныхФизическогоЛица" Или Сотрудник <> Источник Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ДанныеТекущейСтроки = ПерсонифицированныйУчетКлиент.ДанныеТекущейСтрокиАДВ(ЭтаФорма);
	ДанныеТекущейСтроки.Гражданство = Параметр.Гражданство;
	ДанныеТекущейСтроки.АдресРегистрации = Параметр.АдресРегистрации;
	ДанныеТекущейСтроки.АдресРегистрацииПредставление = Параметр.АдресРегистрацииПредставление;
	ДанныеТекущейСтроки.АдресФактический = Параметр.АдресФактический;
	ДанныеТекущейСтроки.АдресФактическийПредставление = Параметр.АдресФактическийПредставление;
	ДанныеТекущейСтроки.Телефоны = Параметр.Телефоны;
	ДанныеТекущейСтроки.ИНН = Параметр.ИНН;
	ДанныеТекущейСтроки.ВидДокумента = Параметр.ВидДокумента;
	ДанныеТекущейСтроки.СерияДокумента = Параметр.Серия;
	ДанныеТекущейСтроки.НомерДокумента = Параметр.Номер;
	ДанныеТекущейСтроки.ДатаВыдачи = Параметр.ДатаВыдачи;
	ДанныеТекущейСтроки.КемВыдан = Параметр.КемВыдан;
	ДанныеТекущейСтроки.КодПодразделения = Параметр.КодПодразделения;
	
	ОтобразитьДанныеФизическогоЛица();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(Ссылка, УникальныйИдентификатор)
	Возврат ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);	
КонецФункции	

&НаСервереБезКонтекста
Процедура ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(СтрокиПоСотрудникам, ДатаСведений)
	
	Если ТипЗнч(СтрокиПоСотрудникам) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокиПоСотрудникам.Сотрудник);
		СтрокиПоСотрудникам = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокиПоСотрудникам);
	ИначеЕсли ТипЗнч(СтрокиПоСотрудникам) = Тип("Массив") Тогда
		МассивСотрудников = Новый Массив;
		Для каждого СтрокаПоСотруднику Из СтрокиПоСотрудникам Цикл
			МассивСотрудников.Добавить(СтрокаПоСотруднику.Сотрудник);
		КонецЦикла;
	Иначе
		МассивСотрудников = СтрокиПоСотрудникам.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	ТекущиеУдостоверенияЛичности = КадровыйУчетФормы.ТекущиеУдостоверенияЛичностиФизическихЛиц(
		МассивСотрудников, ДатаСведений);

	Для каждого СтрокаСотрудника Из СтрокиПоСотрудникам Цикл
		СтрокаСотрудника.ИнфоОДокументеУдостоверяющемЛичностьНадпись = КадровыйУчетФормы.ИнфоНадписьОДокументеУдостоверяющемЛичность(
			ТекущиеУдостоверенияЛичности, СтрокаСотрудника.Сотрудник, СтрокаСотрудника.ВидДокумента, СтрокаСотрудника.СерияДокумента, СтрокаСотрудника.НомерДокумента);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура НастроитьОтображениеГруппыПодписантов()
	ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.Исполнитель");	
КонецПроцедуры	

&НаСервере
Процедура ПроверкаЗаполненияДокумента(Отказ = Ложь)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ПроверитьДанныеДокумента(Отказ);
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммами(Отказ)
	
	Если Не ОтображатьСписокСотрудников Тогда
		Если Не Отказ Тогда 
			ТекстСообщения = НСтр("ru = 'При проверке встроенной проверкой ошибок не обнаружено.';
									|en = 'Errors are not detected upon the integrated check.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстВопроса = НСтр("ru = 'При проверке встроенной проверкой обнаружены ошибки.
		|Выполнить проверку сторонними программами?';
		|en = 'Errors occurred while checking with the integrated check.
		|Check with third-party applications?'")
	Иначе	
		ТекстВопроса = НСтр("ru = 'При проверке встроенной проверкой ошибок не обнаружено.
		|Выполнить проверку сторонними программами?';
		|en = 'Errors are not detected while checking with the integrated check.
		|Check with third-party applications?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаСтороннимиПрограммамиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммамиЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		ПроверитьСтороннимиПрограммами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтороннимиПрограммами()
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура;
	
	ПроверяемыеОбъекты = Новый Массив;
	ПроверяемыеОбъекты.Добавить(Объект.Ссылка);
	
	ПараметрыОткрытия.Вставить("СсылкиНаПроверяемыеОбъекты", ПроверяемыеОбъекты);
	
	ОткрытьФорму("ОбщаяФорма.ПроверкаФайловОтчетностиПерсУчетаПФР", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);	
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Отказ Тогда 
		ТекстВопроса = НСтр("ru = 'В комплекте обнаружены ошибки.
							|Продолжить (не рекомендуется)?';
							|en = 'Errors were detected in the set.
							|Continue (not recommended)?'");
							
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.';
																											|en = 'Warning.'"));
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);				
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ПФР");	
КонецПроцедуры

#КонецОбласти
