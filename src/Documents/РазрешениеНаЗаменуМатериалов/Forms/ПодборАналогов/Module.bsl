
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Параметры.Свойство("ПараметрыТоваров", ПараметрыТоваров);
	Параметры.Свойство("ПараметрыАналогов", ПараметрыАналогов);
	Параметры.Свойство("ПараметрыОбщие", ПараметрыОбщие);
	
	Если ПараметрыОбщие.ПоказатьОстатки = Неопределено Тогда
		ПараметрыОбщие.ПоказатьОстатки = Ложь;
	КонецЕсли;
	
	Если ПараметрыОбщие.РежимРасшифровки = Неопределено Тогда
		ПараметрыОбщие.РежимРасшифровки = Ложь;
	КонецЕсли;
	
	ЗаполнитьДанные(ПараметрыТоваров, ПараметрыАналогов);
	
	Если Элементы.Материалы.ТекущаяСтрока = Неопределено Тогда
		Элементы.Материалы.ТекущаяСтрока = 0;
	КонецЕсли;
	
	УчитыватьЗапасы = ЭтоАдресВременногоХранилища(ПараметрыТоваров.РаспределениеЗапасов);
	
	ИмяСтраницы = ?(Материалы.Количество() = 1, "Аналоги", "Материалы");
	УстановитьНачальноеОформлениеСтраницы(ИмяСтраницы, ПараметрыОбщие.ПоказатьОстатки, УчитыватьЗапасы);
	
	Если ПараметрыОбщие.РежимРасшифровки Тогда
		
		АвтоЗаголовок = Ложь;
		Заголовок     = НСтр("ru = 'Расшифровка аналогов';
							|en = 'Substitute drill-down'");
		
		ИменаЭлементов = Новый Массив;
		ИменаЭлементов.Добавить("АналогиШапкаТребуетсяЗаменено");
		ИменаЭлементов.Добавить("АналогиПодвал");
		ИменаЭлементов.Добавить("АналогиКоличество");
		ИменаЭлементов.Добавить("АналогиЕстьОстатки");
		ИменаЭлементов.Добавить("НадписьОтсутствиеАналогов");
		ИменаЭлементов.Добавить("ИсточникЗаменыНаСтраницеАналоги");
		ИменаЭлементов.Добавить("ДатаДействияРазрешений");
		ИменаЭлементов.Добавить("ФормаВыполнитьЗамену");
		ИменаЭлементов.Добавить("ФормаОткрытьИсториюЗамен");
		ИменаЭлементов.Добавить("КнопкаОтменитьПодбор");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ИменаЭлементов, "Видимость", Ложь);
		
		ИменаЭлементов = Новый Массив;
		ИменаЭлементов.Добавить("ФормаЗакрыть");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ИменаЭлементов, "Видимость", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаОтметкиЭлементов" Тогда
		
		МассивНомеровЗамен = Новый Массив;
		Для каждого ТекущаяЗамена Из ВыбранноеЗначение Цикл
			Если ТекущаяЗамена.Пометка Тогда
				МассивНомеровЗамен.Добавить(ТекущаяЗамена.Значение);	
			КонецЕсли;	
		КонецЦикла;
		
		Если МассивНомеровЗамен.Количество() > 0 Тогда
			ОтменитьПодборы(МассивНомеровЗамен);
			ЗаполнитьПризнакЕстьОстаткиСлужебный(Аналоги, РежимПодбораАналогов);
		КонецЕсли;
		
		УстановитьНадписьОтсутствиеАналогов(ЭтаФорма);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникЗаменыПриИзменении(Элемент)
	
	ЗаполнитьКоличествоКЗамене();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЗаменыНаСтраницеАналогиПриИзменении(Элемент)
	
	ЗаполнитьКоличествоКЗамене();
	ЗаполнитьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПодбораАналоговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РежимПодбораАналоговДоИзменения = РежимПодбораАналогов;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПодбораАналоговПриИзменении(Элемент)
	
	Если РежимПодбораАналогов = РежимПодбораАналоговДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПризнакЕстьОстаткиСлужебный(Аналоги, РежимПодбораАналогов);

	РежимПодбораАналоговДоИзменения = РежимПодбораАналогов;
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	УстановитьОтборПоДоступнымАналогам(
		Элементы.Аналоги.ОтборСтрок, ТекущиеДанные.КлючСвязи, РежимПодбораАналогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ДатаДействияРазрешений = ДатаДействияРазрешенийДоИзменения Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПорцииПодбора.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Необходимо отменить сохраненные подборы для выполнения операции. Отменить подборы?';
							|en = 'You must cancel saved pickings to perform the operation. Cancel pickings?'");
		
		ПоказатьВопрос(
			ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 45, КодВозвратаДиалога.Нет,, КодВозвратаДиалога.Нет);
		
	Иначе
		ДатаПриИзмененииНаСервере(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ДатаДействияРазрешений = ДатаДействияРазрешенийДоИзменения;
		Возврат;	
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ОтменитьПодборы = Истина)
	
	ДатаДействияРазрешенийДоИзменения = ДатаДействияРазрешений;
	
	Если ОтменитьПодборы Тогда
		МаксимальныйНомерПодбора = 0;
		ПорцииПодбора.Очистить();
	КонецЕсли;
	
	МассивНомеровСтрок = Новый Массив;
	ВыделенныеСтроки = Элементы.Материалы.ВыделенныеСтроки;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		МассивНомеровСтрок.Добавить(Материалы.НайтиПоИдентификатору(ИдентификаторСтроки).НомерСтроки);	
	КонецЦикла;	
	
	ЗаполнитьДанные(ПараметрыТоваров, ПараметрыАналогов, Истина);
	
	УстановитьТекущуюСтроку = Истина;
	Элементы.Материалы.ВыделенныеСтроки.Очистить();
	Для каждого НомерСтроки Из МассивНомеровСтрок Цикл
		
		ИдентификаторСтроки = Материалы.НайтиСтроки(Новый Структура("НомерСтроки", НомерСтроки))[0].ПолучитьИдентификатор();
		
		Если УстановитьТекущуюСтроку Тогда
			Элементы.Материалы.ТекущаяСтрока = ИдентификаторСтроки;
			УстановитьТекущуюСтроку = Ложь;
		Иначе	
			Элементы.Материалы.ВыделенныеСтроки.Добавить(ИдентификаторСтроки);
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАналоги Тогда
		УстановитьПредставлениеРазрешений(Материалы[0].Номенклатура, Материалы[0].Характеристика);
		ЗаполнитьИтоговыеПоказатели(ЭтаФорма);
		УстановитьНадписьОтсутствиеАналогов(ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", Новый Структура("Ключ", ТекущиеДанные.Номенклатура), ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАналоги

&НаКлиенте
Процедура АналогиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АналогиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АналогиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	АналогиКоличествоДоИзменения = Элементы.Аналоги.ТекущиеДанные.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура АналогиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.Аналоги.ТекущиеДанные;
	
	Если Не ОтменаРедактирования И ТекущиеДанные.Количество <> АналогиКоличествоДоИзменения Тогда
		
		ПроверитьВозможностьПересчета(Отказ);
		
		Если Не Отказ Тогда
			ЗаполнитьКоличествоПоРазрешению();
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные.Количество = АналогиКоличествоДоИзменения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АналогиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Элементы.Аналоги.ВыделенныеСтроки.Очистить();
	Элементы.Аналоги.ВыделенныеСтроки.Добавить(Элементы.Аналоги.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура АналогиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.АналогиОстатокНаСкладе И Не ПараметрыОбщие.РежимРасшифровки Тогда
		
		КоэффициентПересчета = ПолучитьКоэффициентПересчета();
		
		Если КоэффициентПересчета > 0 Тогда
			
			ТекущиеДанные = Элементы.Аналоги.ТекущиеДанные;
			
			ДанныеУпаковки = ТекущиеДанные.ДанныеУпаковки;
			
			РасчетноеКоличество = ТекущиеДанные.Норматив
								  * КоэффициентПересчета
								  * ДанныеУпаковки.Числитель / ДанныеУпаковки.Знаменатель;
			
			ТекущееКоличество = Цел(РасчетноеКоличество);
			Если РасчетноеКоличество > ТекущееКоличество Тогда
				ТекущееКоличество = ТекущееКоличество + Цел((РасчетноеКоличество - ТекущееКоличество) * 1000) / 1000;
			КонецЕсли;
			
			ТекущиеДанные.Количество = ТекущиеДанные.Количество + ТекущееКоличество;
			
			ЗаполнитьКоличествоПоРазрешению();
			
		КонецЕсли;	

	ИначеЕсли Поле = Элементы.АналогиНоменклатура Тогда
		
		ТекущиеДанные = Элементы.Аналоги.ТекущиеДанные;
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", Новый Структура("Ключ", ТекущиеДанные.Номенклатура), ЭтаФорма);
		
	ИначеЕсли Поле = Элементы.АналогиРазрешениеПредставление Тогда
		
		ТекущиеДанные = Элементы.Аналоги.ТекущиеДанные;
		ПоказатьЗначение(, ТекущиеДанные.Разрешение);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаМатериалы Тогда
	
		Если ЕстьНедопустимыеРазрешенияДоИзменения <> ЕстьНедопустимыеРазрешения(ЭтотОбъект) Тогда
			УстановитьЗаголовокГиперссылкиСмТакже("Материалы");
			ЕстьНедопустимыеРазрешенияДоИзменения = Не ЕстьНедопустимыеРазрешенияДоИзменения;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.МатериалыЕстьАналогиМатериала Тогда
		
		ПерейтиКПодборуАналогов(Неопределено);
		
	ИначеЕсли Поле = Элементы.МатериалыНоменклатура Тогда
		
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", Новый Структура("Ключ", ТекущиеДанные.Номенклатура), ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗамену(Команда)
	
	МассивСтрок = Материалы.НайтиСтроки(Новый Структура("Количество", 0));
	Если Материалы.Количество() > МассивСтрок.Количество() Тогда
		ОповеститьОВыборе(Новый Структура("АдресВХранилище", ПолучитьРезультатПодбора()));
	Иначе
		
		МассивСтрок = Материалы.НайтиСтроки(Новый Структура("ЕстьАналогиМатериала", Истина));
		Если МассивСтрок.Количество() = 0 Тогда
			Закрыть();
		Иначе	
			
			ПараметрыФормыВопроса = Новый Структура;
			ПараметрыФормыВопроса.Вставить("Заголовок", НСтр("ru = 'Подбор аналогов';
															|en = 'Pick alternative products'"));
			ПараметрыФормыВопроса.Вставить("ТекстСообщения", НСтр("ru = 'Ни один аналог не выбран. Закрыть форму подбора?';
																	|en = 'No analogue has been picked. Close the picking form?'"));
			ПараметрыФормыВопроса.Вставить("Кнопки", "РежимДиалогаВопрос.ДаНет");
			ПараметрыФормыВопроса.Вставить("КнопкаПоУмолчанию", "КодВозвратаДиалога.Да");
			ПараметрыФормыВопроса.Вставить("ВыделятьКнопкуПоУмолчанию", Истина);
			ПараметрыФормыВопроса.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗаменуЗакрытие", ЭтотОбъект);
			
			ОткрытьФорму("ОбщаяФорма.Вопрос", ПараметрыФормыВопроса, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения); 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаменуЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Ответ = Неопределено;
	Если РезультатЗакрытия = Неопределено 
	 Или Не РезультатЗакрытия.Свойство("Значение", Ответ) 
	 Или Ответ <> КодВозвратаДиалога.Да Тогда
	 	Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьИсториюЗамен(Команда)
	
	ТекстПредупреждения = "";
	
	МассивВыделенныхСтрок = Элементы.Материалы.ВыделенныеСтроки;
	
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Для отображения истории замен нужно выбрать строку(и).';
									|en = 'Select line (s) to display the replacement history.'");
		
	Иначе	
		
		МассивНомеровСтрок = Новый Массив;
		
		КлючиПоиска = Новый Соответствие;
		
		Для каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			
			ТекущаяСтрока = Материалы.НайтиПоИдентификатору(ИдентификаторСтроки);
					
			КлючПоиска = СтрШаблон("%1 %2 %3 %4", 
									ТекущаяСтрока.Номенклатура.УникальныйИдентификатор(), 
									ТекущаяСтрока.Характеристика.УникальныйИдентификатор(), 
									ТекущаяСтрока.Назначение.УникальныйИдентификатор(),
									ТекущаяСтрока.Обособленно);
									
			КлючиПоиска.Вставить(КлючПоиска);
			Если КлючиПоиска.Количество() > 1 Тогда
				
				ТекстПредупреждения = СтрШаблон(
					НСтр("ru = 'Одновременно можно выбрать строки только с одинаковой номенклатурой%1 и назначением.';
						|en = 'You can only select lines with the same item %1 and assignment at a time.'"),
					?(ИспользоватьХарактеристикиНоменклатуры, СтрШаблон(НСтр("ru = '%1(характеристикой)';
																			|en = '%1(variant)'"), " "), ""));
					
				Прервать;	
				
			КонецЕсли;
			
			Если ТекущаяСтрока.Количество > 0 Тогда
				МассивНомеровСтрок.Добавить(ТекущаяСтрока.НомерСтрокиИсходный);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ТекстПредупреждения) И МассивНомеровСтрок.Количество() = 0 Тогда
			ТекстПредупреждения = НСтр("ru = 'В выделенных строках замены отсутствуют.';
										|en = 'There are no replacements in the selected lines.'");	
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения, 45);
		Возврат;
	КонецЕсли;
	
	СписокПодборов = ДанныеПодборов(
		ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, МассивНомеровСтрок);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокЗначений", СписокПодборов);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'История замен';
													|en = 'Replacement history'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкаОК", НСтр("ru = 'Отменить';
														|en = 'Cancel'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкаОтмена", НСтр("ru = 'Закрыть';
															|en = 'Close'"));
	
	ОткрытьФорму("ОбщаяФорма.ФормаОтметкиЭлементов", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПодборуАналогов(Команда)
	
	ТекстПредупреждения = "";
	
	МассивВыделенныхСтрок = Элементы.Материалы.ВыделенныеСтроки;
	
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строку(и)';
									|en = 'Highlight the line(s)'");
		
	Иначе
		
		ИсходныйМассивВыделенныхСтрок = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивВыделенныхСтрок);
		
		Элементы.Материалы.ТекущаяСтрока = ИсходныйМассивВыделенныхСтрок[0];
		
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		
		Если Не ТекущиеДанные.ЕстьАналогиМатериала Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Для выделенной строки аналоги не найдены';
										|en = 'Substitutes are not found for the selected line'");
			
		Иначе
			
			Если ИсходныйМассивВыделенныхСтрок.Количество() > МассивВыделенныхСтрок.Количество() Тогда
				Для каждого ИдентификаторСтроки Из ИсходныйМассивВыделенныхСтрок Цикл
					Если МассивВыделенныхСтрок.Найти(ИдентификаторСтроки) = Неопределено Тогда  
						МассивВыделенныхСтрок.Добавить(ИдентификаторСтроки);	
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
			
			КлючиПоиска = Новый Соответствие;
			
			Для каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
				
				ТекущаяСтрока = Материалы.НайтиПоИдентификатору(ИдентификаторСтроки);
				
				Если ТекущаяСтрока.Количество >= ТекущаяСтрока.КЗамене Тогда
					
					ТекстПредупреждения = СтрШаблон(
						НСтр("ru = 'В строке №%1 все возможное количество заменено.';
							|en = 'In line No.%1 all the available quantity is replaced.'"), ТекущаяСтрока.НомерСтроки);
					
					Прервать;
					
				Иначе	
					
					КлючПоиска = СтрШаблон("%1 %2 %3 %4", 
											ТекущаяСтрока.Номенклатура.УникальныйИдентификатор(), 
											ТекущаяСтрока.Характеристика.УникальныйИдентификатор(), 
											ТекущаяСтрока.Назначение.УникальныйИдентификатор(),
											ТекущаяСтрока.Обособленно);
											
					КлючиПоиска.Вставить(КлючПоиска);
					Если КлючиПоиска.Количество() > 1 Тогда
						
						ТекстПредупреждения = СтрШаблон(
							НСтр("ru = 'Одновременно можно выбрать строки только с одинаковой номенклатурой%1 и назначением.';
								|en = 'You can only select lines with the same item %1 and assignment at a time.'"),
							?(ИспользоватьХарактеристикиНоменклатуры, СтрШаблон(НСтр("ru = '%1(характеристикой)';
																					|en = '%1(variant)'"), " "), ""));
							
						Прервать;	
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения, 45);
		Возврат;
	КонецЕсли;
	
	УстановитьПредставлениеРазрешений(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
	
	ЗаполнитьПризнакЕстьОстаткиСлужебный(Аналоги, РежимПодбораАналогов);
	УстановитьТекущуюСтраницу(ЭтаФорма, "Аналоги", ТекущиеДанные.КлючСвязи, РежимПодбораАналогов);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьТекущийПодбор(Команда)
	
	ОбработатьПодборАналогов(Ложь);
	
	Если Материалы.Количество() > 1 Тогда
		УстановитьТекущуюСтраницу(ЭтаФорма, "Материалы");
	Иначе
		ЗаполнитьИтоговыеПоказатели(ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПодбор(Команда)
	
	ОбработатьПодборАналогов(Истина);
	
	Если Материалы.Количество() > 1 Тогда
		УстановитьТекущуюСтраницу(ЭтаФорма, "Материалы");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСмТакжеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "НедопустимыеРазрешения" Тогда
	
		СписокНедопустимыхРазрешений = Новый СписокЗначений;
		
		ОтборПоНедопустимымРазрешениям = Новый Структура("НомерСтроки");
		ЗаполнитьЗначенияСвойств(ОтборПоНедопустимымРазрешениям, Элементы.Материалы.ТекущиеДанные);
	
		МассивСтрок = НедопустимыеРазрешения.НайтиСтроки(ОтборПоНедопустимымРазрешениям);
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Разрешение) Тогда
				Продолжить;
			КонецЕсли;
			
			СписокНедопустимыхРазрешений.Добавить(СтрокаТаблицы.Разрешение);
			
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", СписокНедопустимыхРазрешений));
		
		ОткрытьФорму("Документ.РазрешениеНаЗаменуМатериалов.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		
	Иначе
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючВарианта",            "ПоНоменклатуреКонтекст");
		ПараметрыФормы.Вставить("ФиксированныеНастройки",  Новый НастройкиКомпоновкиДанных);
		ПараметрыФормы.Вставить("Отбор",                   Новый Структура("ПоказатьОбособленныеТовары", Истина));
		
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			ЭлементОтбора = ПараметрыФормы.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
			ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Номенклатура;
			
			ЭлементОтбора = ПараметрыФормы.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Характеристика");
			ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Характеристика;
			
			Если ТекущиеДанные.Обособленно
			   И Не ЗначениеЗаполнено(ТекущиеДанные.Назначение) Тогда
				
				ЭлементОтбора = ПараметрыФормы.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Назначение");
				ЭлементОтбора.ПравоеЗначение = Неопределено;
				
				ПараметрыФормы.Отбор.ПоказатьОбособленныеТовары = Ложь;
				
			Иначе
			
				ЭлементОтбора = ПараметрыФормы.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Назначение");
				ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Назначение;
				
				ПараметрыФормы.Отбор.ПоказатьОбособленныеТовары = ЗначениеЗаполнено(ТекущиеДанные.Назначение);
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Склад) Тогда
			
				ЭлементОтбора = ПараметрыФормы.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
				ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Склад;
				ЭлементОтбора.ВидСравнения = ?(НавигационнаяСсылкаФорматированнойСтроки = "ОстаткиИДоступностьТоваров", 
												ВидСравненияКомпоновкиДанных.Равно, 
												ВидСравненияКомпоновкиДанных.НеРавно);
				
			КонецЕсли;
				
		КонецЕсли;
		
		ОткрытьФорму("Отчет.ОстаткиИДоступностьТоваров.Форма", ПараметрыФормы, ЭтаФорма);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

#Область Материалы

&НаСервере
Процедура ЗаполнитьДанные(ПараметрыТоваров, ПараметрыАналогов, ПовторноеЗаполнение = Ложь)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ПараметрыТоваров.Товары);
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчитыватьЗапасы = ЭтоАдресВременногоХранилища(ПараметрыТоваров.РаспределениеЗапасов);
	ТаблицаЗапасов = ?(УчитыватьЗапасы, ПолучитьИзВременногоХранилища(ПараметрыТоваров.РаспределениеЗапасов), Неопределено); //ТаблицаЗначений - 
	
	ТаблицаПараметров = ПолучитьИзВременногоХранилища(ПараметрыАналогов.ТаблицаПараметров); 
	
	Если ПовторноеЗаполнение Тогда
		ТаблицаПараметров.ЗаполнитьЗначения(ДатаДействияРазрешений, "ДатаДействияРазрешений");
	Иначе
		
		Материалы.Очистить();

		ДатаДействияРазрешений = ТаблицаПараметров[0].ДатаДействияРазрешений;
		ДатаДействияРазрешенийДоИзменения = ДатаДействияРазрешений;
		
	КонецЕсли;
	
	Аналоги.Очистить();
	
	ПолучитьСкладИзОбеспечение = Не ПараметрыАналогов.Свойство("Склад") Или ПараметрыАналогов.Склад = Неопределено;
	
	ПараметрыОтборов = Новый Структура("ПрименитьТаблицуЗапасов", УчитыватьЗапасы);
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(АналогиМатериалов.ТекстЗапросаТовары());
	МассивТекстов.Добавить(АналогиМатериалов.ТекстЗапросаТаблицаМатериалов());
	МассивТекстов.Добавить(АналогиМатериалов.ТекстЗапросаТаблицаАналогов(ПолучитьСкладИзОбеспечение));
	МассивТекстов.Добавить(АналогиМатериалов.ТекстЗапросаТаблицаОстатков(ПараметрыОтборов));
	МассивТекстов.Добавить(УправлениеДаннымиОбИзделиях.ТекстЗапросаДанныеУпаковок(СтрРазделить("ТаблицаМатериалов,ТаблицаАналогов",",")));
	МассивТекстов.Добавить(ТекстЗапросаЗаполненияТаблиц());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	Если УчитыватьЗапасы Тогда
		
		Запрос.УстановитьПараметр("Запасы", ТаблицаЗапасов.Скопировать(Новый Структура("Состояние, Назначение, Обособленно", 
																				Перечисления.РаспределениеЗапасовСостояния.ОстатокНаСкладе, 
																				Справочники.Назначения.ПустаяСсылка(),
																				Ложь)));
							
	КонецЕсли;						
	
	Запрос.УстановитьПараметр("ТаблицаПараметров", ТаблицаПараметров);
	
	Запрос.УстановитьПараметр(
		?(ПолучитьСкладИзОбеспечение И ПараметрыАналогов.Свойство("Склад"), "СкладПоУмолчанию", "Склад"),
		?(ПолучитьСкладИзОбеспечение И ПараметрыАналогов.Свойство("Склад"), Справочники.Склады.СкладПоУмолчанию(), ПараметрыАналогов.Склад)); 
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаМатериаловРазрешений = МассивРезультатов[МассивРезультатов.ВГраница() - 2].Выгрузить();
	ТаблицаМатериаловРазрешений.Индексы.Добавить("Разрешение");
	ТаблицаМатериаловРазрешений.Индексы.Добавить("Разрешение, КонтролироватьКратность");
	
	ТаблицаАналоговРазрешений = МассивРезультатов[МассивРезультатов.ВГраница() - 1].Выгрузить();
	ТаблицаАналоговРазрешений.Индексы.Добавить("Разрешение");
	
	ТаблицаДанныеУпаковок = МассивРезультатов[МассивРезультатов.ВГраница() - 3].Выгрузить();
	УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(ТаблицаМатериаловРазрешений, ТаблицаДанныеУпаковок);
	УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(ТаблицаАналоговРазрешений, ТаблицаДанныеУпаковок);
	
	ДанныеРазрешение = Новый Структура("ТаблицаМатериаловРазрешений, ТаблицаАналоговРазрешений, Разрешение",
		 								ТаблицаМатериаловРазрешений, ТаблицаАналоговРазрешений);
			
	Если УчитыватьЗапасы Тогда
		
		ПоляОтбораЗапасов = "Номенклатура, Характеристика, Назначение, Обособленно, Склад";
		
		ТаблицаЗапасов.Индексы.Добавить(ПоляОтбораЗапасов);
		ОтборЗапасов = Новый Структура(ПоляОтбораЗапасов);
		
	КонецЕсли;
	
	ПоказателиРаспределениеЗапасов = ПоказателиРаспределениеЗапасов();
	ПоляПодсказкиПоказатели = ПоляПодсказкиПоказатели();
		
	НомерСтрокиМатериалы = 0;
	НомерСтрокиАналоги = 0;
	ВыборкаТовары = МассивРезультатов[МассивРезультатов.ВГраница()].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТовары.Следующий() Цикл
		
		Если ПовторноеЗаполнение Тогда
			
			СтрокаМатериалы = Материалы.НайтиСтроки(Новый Структура("НомерСтрокиИсходный", ВыборкаТовары.НомерСтрокиИсходный))[0];
			ЗаполнитьЗначенияСвойств(СтрокаМатериалы, ВыборкаТовары, "ЕстьАналогиМатериала");
			
			НомерСтрокиМатериалы = СтрокаМатериалы.НомерСтроки;
			
		Иначе	
			
			НомерСтрокиМатериалы = НомерСтрокиМатериалы + 1;
			
			СтрокаМатериалы = Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМатериалы, ВыборкаТовары);
			СтрокаМатериалы.НомерСтроки = НомерСтрокиМатериалы;
			СтрокаМатериалы.КлючСвязи = КлючСвязи(ВыборкаТовары.НомерСтрокиИсходный);
			
			Если УчитыватьЗапасы Тогда
			
				ЗаполнитьЗначенияСвойств(ОтборЗапасов, ВыборкаТовары);
						
				МассивСтрокЗапасов = ТаблицаЗапасов.НайтиСтроки(ОтборЗапасов); 
				Для каждого СтрокаЗапасов Из МассивСтрокЗапасов Цикл
					
					ИмяКолонки = ?(ЗначениеЗаполнено(СтрокаЗапасов.Состояние), 
										ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаЗапасов.Состояние), 
										"ОстатокНаДругихСкладах");
										
					Если ПоказателиРаспределениеЗапасов.Свойство(ИмяКолонки) Тогда
						СтрокаМатериалы[ИмяКолонки] = СтрокаЗапасов.Количество;
					КонецЕсли;
							
				КонецЦикла;
			
			КонецЕсли;
			
			СтрокаМатериалы.ПодсказкаПоказатели = ПодсказкаПоказатели(СтрокаМатериалы, ПоляПодсказкиПоказатели);
		
		КонецЕсли;
		
		Если СтрокаМатериалы.ЕстьАналогиМатериала Тогда
			
			ДанныеНоменклатуры = Новый Структура("НомерСтрокиИсходный, Номенклатура, Характеристика");
			ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, СтрокаМатериалы);
			
			Выборка = ВыборкаТовары.Выбрать();
			
			ДанныеПодсказки = СтруктураДанныхПодсказки(Выборка.Количество());
			
			Пока Выборка.Следующий() Цикл
				
				ДанныеРазрешение.Разрешение = Выборка.Разрешение;
				
				ОбработатьРазрешение(ДанныеРазрешение, ДанныеНоменклатуры, ДанныеПодсказки, НомерСтрокиАналоги);
				
			КонецЦикла;	
			
			СтрокаМатериалы.ПодсказкаВозможностьЗамены = ДанныеПодсказки.Текст;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(ПовторноеЗаполнение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоКЗамене()
	
	Если ИсточникЗамены = 0 Тогда
		
		Для каждого СтрокаТаблицы Из Материалы Цикл
			СтрокаТаблицы.КЗамене = СтрокаТаблицы.КоличествоПоДокументу;	
		КонецЦикла;
		
	Иначе
		
		ПоляОтбора = "Номенклатура, Характеристика, Назначение, Обособленно";
		ОтборПоСтрокам = Новый Структура(ПоляОтбора);
		
		ТаблицаМатериалов = Материалы.Выгрузить();
		ТаблицаМатериалов.Индексы.Добавить(ПоляОтбора);
		
		Пока ТаблицаМатериалов.Количество() > 0 Цикл
			
			СтрокаТаблицы = ТаблицаМатериалов[0];
			
			ОбщееКоличествоКЗамене = СтрокаТаблицы.НеОбеспечивать 
									 + СтрокаТаблицы.Обеспечить
									 + ?(ИсточникЗамены = 1, СтрокаТаблицы.ОбеспеченКДате, 0);
				
			ЗаполнитьЗначенияСвойств(ОтборПоСтрокам, СтрокаТаблицы);	
				
			НайденныеСтроки = ТаблицаМатериалов.НайтиСтроки(ОтборПоСтрокам);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если ОбщееКоличествоКЗамене > 0 Тогда
					
					КоличествоКЗаменеПоСтроке = Мин(НайденнаяСтрока.КоличествоПоДокументу, ОбщееКоличествоКЗамене);
					Материалы[НайденнаяСтрока.НомерСтроки - 1].КЗамене = КоличествоКЗаменеПоСтроке;
					
					ОбщееКоличествоКЗамене = ОбщееКоличествоКЗамене - КоличествоКЗаменеПоСтроке;
					
				Иначе
					Материалы[НайденнаяСтрока.НомерСтроки - 1].КЗамене = 0;	
				КонецЕсли;
				
				ТаблицаМатериалов.Удалить(НайденнаяСтрока);
				
			КонецЦикла;	
				
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция СтруктураДанныхПодсказки(КоличествоРазрешений)
	
	СтрокаВариант = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
		КоличествоРазрешений, НСтр("ru = 'вариант';
									|en = 'option'"), НСтр("ru = 'варианта';
														|en = 'option'"), НСтр("ru = 'вариантов';
																				|en = 'options'"), НСтр("ru = 'м';
																										|en = 'm'"));
	
	ДанныеПодсказки = Новый Структура;
	ДанныеПодсказки.Вставить("Текст", "");
	ДанныеПодсказки.Вставить("КоличествоРазрешений", КоличествоРазрешений);
	ДанныеПодсказки.Вставить("ЕстьОстатки", Ложь);
	ДанныеПодсказки.Вставить("СтрокаВариант", СтрокаВариант);
	
	Возврат ДанныеПодсказки;
	
КонецФункции

&НаСервере
Функция КлючСвязи(Идентификатор, Полный = Истина)
	
	ЗначениеКлючаСвязи = 
		?(ТипЗнч(Идентификатор) = Тип("Число"),
			?(Полный,
				Формат(Идентификатор, НСтр("ru = 'ЧГ=; ЧФ='';Ч;''';
											|en = 'NG=; NF='';N;'''")),
				Формат(Идентификатор, НСтр("ru = 'ЧГ=; ЧФ=''Ч;''';
											|en = 'NG=; NF=''N;'''"))),
			СтрШаблон(?(Полный, ";%1;", "%1;"), Идентификатор));
	
	Возврат ЗначениеКлючаСвязи;
	
КонецФункции

#КонецОбласти

#Область Аналоги

&НаСервере
Процедура ОбработатьРазрешение(ПараметрыРазрешение, ПараметрыНоменклатуры, ПараметрыПодсказки, НомерСтроки)
	
	КлючСвязиИД = ПараметрыНоменклатуры.НомерСтрокиИсходный;
	
	СтруктураОтбора = Новый Структура("Разрешение", ПараметрыРазрешение.Разрешение);
	
	ДанныеРазрешение = 
		Новый Структура("Аналоги, Материалы, КонтролироватьКратность",
			ПараметрыРазрешение.ТаблицаАналоговРазрешений.НайтиСтроки(СтруктураОтбора),
			ПараметрыРазрешение.ТаблицаМатериаловРазрешений.НайтиСтроки(СтруктураОтбора),
			ПараметрыРазрешение.ТаблицаМатериаловРазрешений.НайтиСтроки(
				Новый Структура("Разрешение, КонтролироватьКратность", ПараметрыРазрешение.Разрешение, Истина)).Количество() > 0);
	
	МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() > 0 Тогда
		
		Для каждого СтрокаАналоги Из МассивСтрок Цикл
			
			СтрокаАналоги.КлючСвязиРазрешение = СтрокаАналоги.КлючСвязиРазрешение + КлючСвязи(КлючСвязиИД, Ложь);
			
			Если Не СтрокаАналоги.ЭтоАналог 
			   И СтрокаАналоги.Номенклатура = ПараметрыНоменклатуры.Номенклатура 
			   И СтрокаАналоги.Характеристика = ПараметрыНоменклатуры.Характеристика Тогда
			   
				СтрокаАналоги.КлючСвязи = 
					СтрокаАналоги.КлючСвязи + КлючСвязи(КлючСвязиИД, Не ЗначениеЗаполнено(СтрокаАналоги.КлючСвязи)); 
					
			КонецЕсли;
				
		КонецЦикла;
		
	Иначе	
		ДобавитьРазрешение(ДанныеРазрешение, ПараметрыНоменклатуры, ПараметрыПодсказки, КлючСвязи(КлючСвязиИД), НомерСтроки);
		МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
	КонецЕсли;
	
	Если Не ПараметрыПодсказки.ЕстьОстатки Тогда
		
		ПараметрыПодсказки.ЕстьОстатки = МассивСтрок[0].ЕстьОстатки;
		
		СтрокаМатериалы = ДанныеРазрешение.Материалы[0];
		СтрокаАналоги = ДанныеРазрешение.Аналоги[0];
		
		МатериалыНормативЕдХранения = СтрокаМатериалы.Норматив
			* СтрокаМатериалы.ДанныеУпаковки.Числитель / СтрокаМатериалы.ДанныеУпаковки.Знаменатель;
		АналогиНормативЕдХранения = СтрокаАналоги.Норматив
			* СтрокаАналоги.ДанныеУпаковки.Числитель / СтрокаАналоги.ДанныеУпаковки.Знаменатель;
		
		Если ПараметрыПодсказки.КоличествоРазрешений = 1
		   И ДанныеРазрешение.Материалы.Количество() = 1 
		   И ДанныеРазрешение.Аналоги.Количество() = 1 
		   И МатериалыНормативЕдХранения = 1
		   И АналогиНормативЕдХранения = 1 Тогда
		   	ПодсказкаВариант = Строка(СтрокаАналоги.Номенклатура);
		Иначе
			ПодсказкаВариант = Формат(ПараметрыПодсказки.КоличествоРазрешений, "ЧГ=") + " " + ПараметрыПодсказки.СтрокаВариант;
		КонецЕсли;
		
		Если ПараметрыОбщие.ПоказатьОстатки Тогда
			
			ПодсказкаОстатки =
				?(ПараметрыПодсказки.ЕстьОстатки, НСтр("ru = 'есть остатки';
														|en = 'there is balance'"), НСтр("ru = 'нет остатков';
																					|en = 'no balance'"));
			
			ПараметрыПодсказки.Текст = СтрШаблон("%1; %2", ПодсказкаВариант, ПодсказкаОстатки);
			
		Иначе
			ПараметрыПодсказки.Текст = СтрШаблон("%1", ПодсказкаВариант);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьРазрешение(ПараметрыРазрешение, ПараметрыНоменклатурры, ПараметрыПодсказки, КлючСвязи, НомерСтроки)
	
	РазрешениеПредставление = "";
	
	Для каждого СтрокаАналоги Из ПараметрыРазрешение.Аналоги Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СтрокаТаблицы = Аналоги.Добавить();
		
		Если Не ЗначениеЗаполнено(РазрешениеПредставление) Тогда
			
			РазрешениеПредставление = СтрШаблон(
				"%1 %2 %3 %4", "№", СтрокаАналоги.Номер, НСтр("ru = 'от';
																|en = 'from'"), Формат(СтрокаАналоги.Дата, "ДЛФ=D"));
			
			СтрокаТаблицы.ОтобразитьРазрешение = Истина;
			
			ЕстьОстатки = СтрокаАналоги.КоэффициентНаличияНаСкладе >= 1;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаАналоги);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыРазрешение, "КонтролироватьКратность");
		
		СтрокаТаблицы.ЕстьОстатки = ЕстьОстатки;
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		СтрокаТаблицы.КлючСвязиРазрешение = КлючСвязи;
		
		СтрокаТаблицы.НормативПредставление = ПредставлениеНорматива(СтрокаТаблицы.Норматив
			* СтрокаТаблицы.ДанныеУпаковки.Числитель / СтрокаТаблицы.ДанныеУпаковки.Знаменатель);
		
	КонецЦикла;
	
	Для каждого СтрокаМатериалы Из ПараметрыРазрешение.Материалы Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СтрокаТаблицы = Аналоги.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаМатериалы);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыРазрешение, "КонтролироватьКратность");
		
		НормативЕдХранения = СтрокаТаблицы.Норматив * СтрокаТаблицы.ДанныеУпаковки.Числитель / СтрокаТаблицы.ДанныеУпаковки.Знаменатель;
		
		СтрокаТаблицы.НормативПредставление   = ПредставлениеНорматива(НормативЕдХранения);
		
		СтрокаТаблицы.РазрешениеПредставление = РазрешениеПредставление 
			+ ?(НормативЕдХранения = 1, 
				"", 
				СтрШаблон(НСтр("ru = '%1(на замену %2 %3)';
								|en = '%1(for replacement%2%3)'"), 
						  " ", СтрокаТаблицы.НормативПредставление, СтрокаТаблицы.ЕдиницаИзмеренияПредставление));
			  
		СтрокаТаблицы.ЕстьОстатки = ЕстьОстатки;
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		СтрокаТаблицы.КлючСвязиРазрешение = КлючСвязи;
		
		Если СтрокаТаблицы.Номенклатура = ПараметрыНоменклатурры.Номенклатура 
		   И СтрокаТаблицы.Характеристика = ПараметрыНоменклатурры.Характеристика Тогда
			СтрокаТаблицы.КлючСвязи = КлючСвязи;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьКоличествоПоРазрешению()
	
	ТекущаяСтрокаАналоги = Аналоги.НайтиПоИдентификатору(Элементы.Аналоги.ТекущаяСтрока);
	ТекущаяСтрокаМатериалы = Материалы.НайтиПоИдентификатору(Элементы.Материалы.ТекущаяСтрока);
	
	КоэффициентРасчета = ПроизводствоКлиентСервер.КоэффициентПоНормативу(
		Ложь, ТекущаяСтрокаАналоги.Количество, ТекущаяСтрокаАналоги.Норматив, ТекущаяСтрокаАналоги.ДанныеУпаковки);
	
	КлючСвязиТекущейСтроки = ТекущаяСтрокаМатериалы.КлючСвязи;
	
	МассивПодсказок = Новый Массив;
	
	СтруктураОтбора = Новый Структура("Разрешение, ЭтоАналог", ТекущаяСтрокаАналоги.Разрешение);
	
	СтруктураОтбора.ЭтоАналог = Ложь;
	МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаАналоги Из МассивСтрок Цикл
		
		БазаРаспределения = Окр(СтрокаАналоги.Норматив * КоэффициентРасчета
			* СтрокаАналоги.ДанныеУпаковки.Числитель / СтрокаАналоги.ДанныеУпаковки.Знаменатель - СтрокаАналоги.Количество, 3);
		
		Если БазаРаспределения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаАналоги.Количество = СтрокаАналоги.Норматив * КоэффициентРасчета
				* СтрокаАналоги.ДанныеУпаковки.Числитель / СтрокаАналоги.ДанныеУпаковки.Знаменатель;
		
		Если СтрокаАналоги.Количество > 0 Тогда
			МассивПодсказок.Добавить(СтрокаПодсказки(СтрокаАналоги));
		КонецЕсли;	
		
		Если СтрНайти(СтрокаАналоги.КлючСвязи, КлючСвязиТекущейСтроки) > 0 Тогда
			
			МассивВыделенныхСтрок = Элементы.Материалы.ВыделенныеСтроки;
			Для каждого ВыделеннаяСтрока Из МассивВыделенныхСтрок Цикл
				
				СтрокаМатериалы = Материалы.НайтиПоИдентификатору(ВыделеннаяСтрока);
				УстановитьКоличествоВСтроке(СтрокаМатериалы, БазаРаспределения);
				
				Если БазаРаспределения = 0 Тогда
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		Если БазаРаспределения <> 0 Тогда
		
			МассивКлючейСвязи = СтрРазделить(СтрокаАналоги.КлючСвязи, ";", Ложь);
			Для каждого КлючСвязиИД Из МассивКлючейСвязи Цикл
				
				КлючСвязи = КлючСвязи(КлючСвязиИД);
				Если КлючСвязи = КлючСвязиТекущейСтроки Тогда
					Продолжить;
				КонецЕсли;	
				
				СтрокаМатериалы = Материалы.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи))[0];
				УстановитьКоличествоВСтроке(СтрокаМатериалы, БазаРаспределения);
				
				Если БазаРаспределения = 0 Тогда
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьИтоговыеПоказатели(ЭтаФорма);
	
	ПодсказкаЗаменено = ?(МассивПодсказок.Количество() > 0, "Заменено: " + СтрСоединить(МассивПодсказок, "; "), "");
	
	СтруктураОтбора.ЭтоАналог = Истина;
	МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаАналоги Из МассивСтрок Цикл
		
		СтрокаАналоги.ПодсказкаЗаменено = ПодсказкаЗаменено;
		
		Если СтрокаАналоги.НомерСтроки <> ТекущаяСтрокаАналоги.НомерСтроки Тогда
			СтрокаАналоги.Количество = СтрокаАналоги.Норматив * КоэффициентРасчета
				* СтрокаАналоги.ДанныеУпаковки.Числитель / СтрокаАналоги.ДанныеУпаковки.Знаменатель;
		КонецЕсли;
		
		ОстатокНаСкладеДоИзменения = СтрокаАналоги.ОстатокНаСкладе;
		
		СтрокаАналоги.ОстатокНаСкладе = 
			СтрокаАналоги.ОстатокНаСкладеПодтверждено 
			- ПолучитьОбщееКоличествоАналоги(СтрокаАналоги.Номенклатура, СтрокаАналоги.Характеристика, СтрокаАналоги.ЭтоАналог);
		
		Если СтрокаАналоги.ОстатокНаСкладе <> ОстатокНаСкладеДоИзменения Тогда
			УстановитьКоличествоДоступныхОстатков(СтрокаАналоги);
		КонецЕсли;
			
	КонецЦикла;
	
	УстановитьНадписьОтсутствиеАналогов(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоДоступныхОстатков(СтрокаДанных)
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, ЭтоАналог");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
	
	МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаАналоги Из МассивСтрок Цикл
	
		ЗаполнитьЗначенияСвойств(СтрокаАналоги, СтрокаДанных, "ОстатокНаСкладе");
			
		УстановитьПризнакЕстьОстатки(СтрокаАналоги);
			
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакЕстьОстатки(СтрокаДанных)
	
	ЕстьОстатки = СтрокаДанных.ОстатокНаСкладе >= СтрокаДанных.Норматив
		* СтрокаДанных.ДанныеУпаковки.Числитель / СтрокаДанных.ДанныеУпаковки.Знаменатель;
	Если СтрокаДанных.ЕстьОстатки = ЕстьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЕстьОстатки = Истина;
	
	СтруктураОтбора = Новый Структура("Разрешение, ЕстьОстатки, ЭтоАналог");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
	
	МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
	Если ЕстьОстатки Тогда
		Для каждого СтрокаАналоги Из МассивСтрок Цикл
			Если СтрокаАналоги.ОстатокНаСкладе < СтрокаДанных.Норматив
				* СтрокаДанных.ДанныеУпаковки.Числитель / СтрокаДанных.ДанныеУпаковки.Знаменатель Тогда
				УстановитьЕстьОстатки = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОтбора.Удалить("ЭтоАналог");
	МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
	Если УстановитьЕстьОстатки Тогда
		Для каждого СтрокаАналоги Из МассивСтрок Цикл
			СтрокаАналоги.ЕстьОстатки = ЕстьОстатки;		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоВСтроке(СтрокаТаблицы, ЗначениеКоличество)
	
	Если ЗначениеКоличество > 0
	   И СтрокаТаблицы.Количество < СтрокаТаблицы.КЗамене
	 Или ЗначениеКоличество < 0	
	   И СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоПодтверждено > 0 Тогда
		
		Знак = ?(ЗначениеКоличество < 0, -1, 1);
		
		КоличествоОстаток = ?(ЗначениеКоличество > 0,
							  СтрокаТаблицы.КЗамене - СтрокаТаблицы.Количество,
							  СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоПодтверждено);
				
		КоличествоРаспределения = Мин(КоличествоОстаток, ЗначениеКоличество * Знак);
		
		СтрокаТаблицы.Количество = СтрокаТаблицы.Количество + КоличествоРаспределения * Знак;
			
		ЗначениеКоличество = ЗначениеКоличество - КоличествоРаспределения * Знак;
		
	КонецЕсли;	
		
КонецПроцедуры	

&НаСервере
Функция ПолучитьРезультатПодбора()
	
	Если  Аналоги.Количество() > Аналоги.НайтиСтроки(Новый Структура("Количество", 0 )).Количество() Тогда
		ОбработатьПодборАналогов(Истина);
	КонецЕсли;	
	
	ТаблицаПодбора = ПорцииПодбора.Выгрузить(
		, "НомерПодбора, НомерСтрокиИсходный, КлючСвязи, "
		  + "Номенклатура, Характеристика, Количество, "
		  + "ОстатокНаСкладе, Склад, Разрешение, ЭтоАналог");
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПодбора, УникальныйИдентификатор);
	
КонецФункции	

&НаКлиенте
Процедура ПроверитьВозможностьПересчета(Отказ)
	
	ТекстСообщения = "";
	
	ТекущиеДанныеАналоги = Элементы.Аналоги.ТекущиеДанные;
	
	КоэффициентНорматива = ПроизводствоКлиентСервер.КоэффициентПоНормативу(
		Ложь, ТекущиеДанныеАналоги.Количество, ТекущиеДанныеАналоги.Норматив, ТекущиеДанныеАналоги.ДанныеУпаковки);
	
	Если ТекущиеДанныеАналоги.КонтролироватьКратность И КоэффициентНорматива <> Цел(КоэффициентНорматива) Тогда
		
		ТекстСообщения = НСтр("ru = 'Введите количество кратное нормативу.';
								|en = 'Enter the amount multiple of the standard'");
		
	Иначе
	
		ТекущиеДанныеМатериалы = Элементы.Материалы.ТекущиеДанные;
		
		СтруктураОтбора = Новый Структура("Разрешение, Номенклатура, Характеристика, ЭтоАналог");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанныеАналоги, "Разрешение");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанныеМатериалы, "Номенклатура, Характеристика");
		
		СтруктураОтбора.ЭтоАналог = Ложь;
		
		СтрокаАналоги = Аналоги.НайтиСтроки(СтруктураОтбора)[0];
		
		АналогиКоличество = ТекущиеДанныеАналоги.Количество;
		АналогиНорматив = ТекущиеДанныеАналоги.Норматив;
		АналогиДанныеУпаковки = ТекущиеДанныеАналоги.ДанныеУпаковки;
		
		МатериалыНорматив = СтрокаАналоги.Норматив;
		МатериалыДанныеУпаковки = СтрокаАналоги.ДанныеУпаковки;
			
		КоличествоРазницаАналог = (АналогиКоличество - АналогиКоличествоДоИзменения)
			* ?(АналогиКоличествоДоИзменения > АналогиКоличество, -1, 1);
			
		КоэффициентРасчета = ПроизводствоКлиентСервер.КоэффициентПоНормативу(
					Ложь, КоличествоРазницаАналог, АналогиНорматив, АналогиДанныеУпаковки);
		
		КоличествоРазница = Окр(МатериалыНорматив * КоэффициентРасчета
					* МатериалыДанныеУпаковки.Числитель / МатериалыДанныеУпаковки.Знаменатель, 3);
		КоличествоГраница = ?(АналогиКоличествоДоИзменения > АналогиКоличество, ИтогоЗаменено, ИтогоОсталосьЗаменить);
		
		Если КоличествоРазница > КоличествоГраница Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для выполнения замены не хватает %1 %2 выбранного материала %3';
					|en = '%1 %2 of the selected material %3 is missing to complete the replacement'"),
				Окр(КоличествоРазница - КоличествоГраница, 3),
				СтрокаАналоги.ЕдиницаИзмеренияПредставление,
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаАналоги.Номенклатура, СтрокаАналоги.Характеристика));
			
		ИначеЕсли АналогиКоличествоДоИзменения < АналогиКоличество Тогда
			
			СтруктураОтбора.Удалить("Номенклатура");
			СтруктураОтбора.Удалить("Характеристика");
			
			МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрок.Количество() > 1 Тогда
				
				Для каждого СтрокаАналоги Из МассивСтрок Цикл
					
					Если СтрокаАналоги.Номенклатура = ТекущиеДанныеМатериалы.Номенклатура
					   И СтрокаАналоги.Характеристика = ТекущиеДанныеМатериалы.Характеристика Тогда
					   	Продолжить;
					КонецЕсли;
					
					ИтогоТребуетсяМатериала = ПолучитьОбщееКоличествоТребуемогоМатериала(
						СтрокаАналоги.Номенклатура, СтрокаАналоги.Характеристика);
					
					ИтогоЗамененоМатериала = ПолучитьОбщееКоличествоАналоги(
						СтрокаАналоги.Номенклатура, СтрокаАналоги.Характеристика, СтрокаАналоги.ЭтоАналог);
					
					МатериалыНорматив = СтрокаАналоги.Норматив;
					МатериалыДанныеУпаковки = СтрокаАналоги.ДанныеУпаковки;
					
					КоличествоРазница = Окр(МатериалыНорматив * КоэффициентРасчета
								* МатериалыДанныеУпаковки.Числитель / МатериалыДанныеУпаковки.Знаменатель, 3);
					КоличествоГраница = ИтогоТребуетсяМатериала - ИтогоЗамененоМатериала;
					
					Если КоличествоРазница > КоличествоГраница Тогда
						
						ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "") 
							+ СтрШаблон(
								НСтр("ru = '%1 %2 материала %3';
									|en = '%1 %2 material %3'"),
								КоличествоРазница - КоличествоГраница,
								СтрокаАналоги.ЕдиницаИзмеренияПредставление,	
								НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаАналоги.Номенклатура, СтрокаАналоги.Характеристика));
						
					КонецЕсли;

				КонецЦикла;	
				
				Если ЗначениеЗаполнено(ТекстСообщения) Тогда
					
					ТекстСообщения = НСтр("ru = 'Для выполнения замены не хватает';
											|en = 'Not enough to complete the replacement'") 
								   + ?(СтрНайти(ТекстСообщения, Символы.ПС) > 0, Символы.ПС, " ")
								   + ТекстСообщения;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьКоэффициентПересчета()
	
	КоэффициентПересчета = 0;
	
	Если ИтогоОсталосьЗаменить = 0 Тогда
		Возврат КоэффициентПересчета;
	КонецЕсли;
	
	ТекущиеДанныеАналоги = Элементы.Аналоги.ТекущиеДанные;
	Если ТекущиеДанныеАналоги.ОстатокНаСкладе = 0 Или Не ТекущиеДанныеАналоги.ЕстьОстатки Тогда
		Возврат КоэффициентПересчета;
	КонецЕсли;
	
	ТекущиеДанныеМатериалы = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("Разрешение, Номенклатура, Характеристика, ЭтоАналог");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанныеАналоги, "Разрешение");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанныеМатериалы, "Номенклатура, Характеристика");
	
	СтруктураОтбора.ЭтоАналог = Ложь;
	
	СтрокаАналоги = Аналоги.НайтиСтроки(СтруктураОтбора)[0];
	
	МатериалыНорматив = СтрокаАналоги.Норматив;
	МатериалДанныеУпаковки = СтрокаАналоги.ДанныеУпаковки;
	
	КоэффициентПересчета = ПроизводствоКлиентСервер.КоэффициентПоНормативу(
		СтрокаАналоги.КонтролироватьКратность, ИтогоОсталосьЗаменить, МатериалыНорматив, МатериалДанныеУпаковки);
	
	Если КоэффициентПересчета > 0 Тогда
		
		СтруктураОтбора.Удалить("Номенклатура");
		СтруктураОтбора.Удалить("Характеристика");
		
		МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 1 Тогда
			
			Для каждого СтрокаАналоги Из МассивСтрок Цикл
				
				Если СтрокаАналоги.Номенклатура = ТекущиеДанныеМатериалы.Номенклатура
				   И СтрокаАналоги.Характеристика = ТекущиеДанныеМатериалы.Характеристика Тогда
				   	Продолжить;
				КонецЕсли;
				
				ИтогоТребуетсяМатериала = ПолучитьОбщееКоличествоТребуемогоМатериала(
					СтрокаАналоги.Номенклатура, СтрокаАналоги.Характеристика);
				
				ИтогоЗамененоМатериала = ПолучитьОбщееКоличествоАналоги(
					СтрокаАналоги.Номенклатура, СтрокаАналоги.Характеристика, СтрокаАналоги.ЭтоАналог);
				
				МатериалыНорматив = СтрокаАналоги.Норматив;
				МатериалДанныеУпаковки = СтрокаАналоги.ДанныеУпаковки;
				
				КоэффициентПересчета = Мин(
					КоэффициентПересчета, 
					ПроизводствоКлиентСервер.КоэффициентПоНормативу(
						СтрокаАналоги.КонтролироватьКратность, ИтогоТребуетсяМатериала - ИтогоЗамененоМатериала,
						МатериалыНорматив, МатериалДанныеУпаковки));
				
				Если КоэффициентПересчета = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если КоэффициентПересчета > 0 Тогда
	
		СтруктураОтбора.ЭтоАналог = Истина;
		
		МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаАналоги Из МассивСтрок Цикл
			
			АналогиНорматив = СтрокаАналоги.Норматив;
			АналогиДанныеУпаковки = СтрокаАналоги.ДанныеУпаковки;
			
			КоэффициентПересчета = Мин(
				КоэффициентПересчета,
				ПроизводствоКлиентСервер.КоэффициентПоНормативу(
					СтрокаАналоги.КонтролироватьКратность, СтрокаАналоги.ОстатокНаСкладе, АналогиНорматив, АналогиДанныеУпаковки));
			
			Если КоэффициентПересчета = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат КоэффициентПересчета;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(ПовторноеЗаполнение = Ложь)
	
	Если Не ПовторноеЗаполнение Тогда
	
		СтруктураДействий = Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются");
		СтруктураДействий.ЗаполнитьПризнакХарактеристикиИспользуются = 
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
			
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Материалы, СтруктураДействий);
	
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются");
	СтруктураДействий.ЗаполнитьПризнакХарактеристикиИспользуются = 
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Аналоги, СтруктураДействий);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакЕстьОстаткиСлужебный(Таблица, Режим)
	
	Если Режим <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.ЕстьОстаткиСлужебный = СтрокаТаблицы.ЕстьОстатки Или СтрокаТаблицы.ОстатокНаСкладеПодтверждено > 0; 	
	КонецЦикла;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция СтрокаПодсказки(СтрокаАналоги)
	
	Если ЗначениеЗаполнено(СтрокаАналоги.Характеристика) Тогда
		
		СтрокаПодсказки = 
			СтрШаблон("%1 %2%3%4 %5 %6%7", 
				СтрокаАналоги.НоменклатураПредставление, 
				"(", 
				СтрокаАналоги.ХарактеристикаПредставление, 
				")", 
				НСтр("ru = 'в кол-ве';
					|en = 'in the amount'"), 
				Формат(СтрокаАналоги.Количество, "ЧГ="),
				СтрокаАналоги.ЕдиницаИзмеренияПредставление);
			
	Иначе
		
		СтрокаПодсказки = 
			СтрШаблон("%1 %2 %3%4", 
				СтрокаАналоги.НоменклатураПредставление, 
				НСтр("ru = 'в кол-ве';
					|en = 'in the amount'"), 
				Формат(СтрокаАналоги.Количество, "ЧГ="),
				СтрокаАналоги.ЕдиницаИзмеренияПредставление);
		
	КонецЕсли;	
	
	Возврат СтрокаПодсказки;
	
КонецФункции	

&НаСервере
Процедура ОтменитьПодборы(НомераПодборов)
	
	ИндексТекущегоПодбора = НомераПодборов.Найти(-1); 
	Если ИндексТекущегоПодбора <> Неопределено Тогда
		
		ОбработатьПодборАналогов(Ложь);
		
		НомераПодборов.Удалить(ИндексТекущегоПодбора);
		
	КонецЕсли;
	
	Если НомераПодборов.Количество() > 0 Тогда
		
		ОтменитьПорцииПодборов(НомераПодборов);
		
	КонецЕсли;
	
	ЗаполнитьИтоговыеПоказатели(ЭтаФорма);
	
	ОбновитьПодсказкиВозможностьЗамены();
	
КонецПроцедуры	

&НаСервере
Процедура ОтменитьПорцииПодборов(НомераПодборов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПорцииПодбора.НомерПодбора КАК НомерПодбора,
	|	ПорцииПодбора.НомерСтрокиИсходный КАК НомерСтрокиИсходный,
	|	ПорцииПодбора.Номенклатура КАК Номенклатура,
	|	ПорцииПодбора.Характеристика КАК Характеристика,
	|	ПорцииПодбора.Количество КАК Количество,
	|	ПорцииПодбора.ОстатокНаСкладе КАК ОстатокНаСкладе,
	|	ПорцииПодбора.ЭтоАналог КАК ЭтоАналог
	|ПОМЕСТИТЬ ПорцииПодбора
	|ИЗ
	|	&ПорцииПодбора КАК ПорцииПодбора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерПодбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналоги.НомерСтроки КАК НомерСтроки,
	|	Аналоги.Номенклатура КАК Номенклатура,
	|	Аналоги.Характеристика КАК Характеристика,
	|	Аналоги.Количество КАК Количество,
	|	Аналоги.ОстатокНаСкладеПодтверждено КАК ОстатокНаСкладеПодтверждено,
	|	Аналоги.ЭтоАналог КАК ЭтоАналог
	|ПОМЕСТИТЬ Аналоги
	|ИЗ
	|	&Аналоги КАК Аналоги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтоАналог,
	|	ОстатокНаСкладеПодтверждено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорцииПодбора.НомерПодбора КАК НомерПодбора,
	|	ПорцииПодбора.НомерСтрокиИсходный КАК НомерСтрокиИсходный,
	|	ПорцииПодбора.Номенклатура КАК Номенклатура,
	|	ПорцииПодбора.Характеристика КАК Характеристика,
	|	ПорцииПодбора.Количество КАК Количество,
	|	ПорцииПодбора.ОстатокНаСкладе КАК ОстатокНаСкладе,
	|	ПорцииПодбора.ЭтоАналог КАК ЭтоАналог
	|ПОМЕСТИТЬ ОтменяемыеПодборы
	|ИЗ
	|	ПорцииПодбора КАК ПорцииПодбора
	|ГДЕ
	|	ПорцииПодбора.НомерПодбора В(&МассивНомеров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтоАналог,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатковВРазрезеПодбора.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатковВРазрезеПодбора.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаОстатковВРазрезеПодбора.ОстатокНаСкладе) КАК ОстатокНаСкладе
	|ПОМЕСТИТЬ ОстаткиПодборов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтменяемыеПодборы.НомерПодбора КАК НомерПодбора,
	|		ОтменяемыеПодборы.Номенклатура КАК Номенклатура,
	|		ОтменяемыеПодборы.Характеристика КАК Характеристика,
	|		МАКСИМУМ(ОтменяемыеПодборы.ОстатокНаСкладе) КАК ОстатокНаСкладе
	|	ИЗ
	|		ОтменяемыеПодборы КАК ОтменяемыеПодборы
	|	ГДЕ
	|		ОтменяемыеПодборы.ЭтоАналог
	|		И ОтменяемыеПодборы.ОстатокНаСкладе > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОтменяемыеПодборы.НомерПодбора,
	|		ОтменяемыеПодборы.Номенклатура,
	|		ОтменяемыеПодборы.Характеристика) КАК ТаблицаОстатковВРазрезеПодбора
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатковВРазрезеПодбора.Номенклатура,
	|	ТаблицаОстатковВРазрезеПодбора.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорцииПодбора.НомерПодбора КАК НомерПодбора,
	|	ПорцииПодбора.Номенклатура КАК Номенклатура,
	|	ПорцииПодбора.Характеристика КАК Характеристика,
	|	СУММА(ПорцииПодбора.Количество) КАК Количество,
	|	МАКСИМУМ(ПорцииПодбора.ОстатокНаСкладе) КАК ОстатокНаСкладе,
	|	МАКСИМУМ(ОстаткиПодборов.ОстатокНаСкладе) КАК ОстатокНаСкладеОтменяемый
	|ПОМЕСТИТЬ КорректируемыеПодборы
	|ИЗ
	|	ПорцииПодбора КАК ПорцииПодбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПодборов КАК ОстаткиПодборов
	|		ПО ПорцииПодбора.Номенклатура = ОстаткиПодборов.Номенклатура
	|			И ПорцииПодбора.Характеристика = ОстаткиПодборов.Характеристика
	|ГДЕ
	|	ПорцииПодбора.ЭтоАналог
	|	И НЕ ПорцииПодбора.НомерПодбора В (&МассивНомеров)
	|	И ОстаткиПодборов.ОстатокНаСкладе ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорцииПодбора.НомерПодбора,
	|	ПорцииПодбора.Номенклатура,
	|	ПорцииПодбора.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПорцииПодбора.Количество) > МАКСИМУМ(ПорцииПодбора.ОстатокНаСкладе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректируемыеПодборы.Номенклатура КАК Номенклатура,
	|	КорректируемыеПодборы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА СУММА(КорректируемыеПодборы.Количество) - СУММА(КорректируемыеПодборы.ОстатокНаСкладе) > МАКСИМУМ(КорректируемыеПодборы.ОстатокНаСкладеОтменяемый)
	|			ТОГДА МАКСИМУМ(КорректируемыеПодборы.ОстатокНаСкладеОтменяемый)
	|		ИНАЧЕ СУММА(КорректируемыеПодборы.Количество) - СУММА(КорректируемыеПодборы.ОстатокНаСкладе)
	|	КОНЕЦ КАК Остаток
	|ПОМЕСТИТЬ КорректируемыеОстатки
	|ИЗ
	|	КорректируемыеПодборы КАК КорректируемыеПодборы
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректируемыеПодборы.Номенклатура,
	|	КорректируемыеПодборы.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналоги.Номенклатура КАК Номенклатура,
	|	Аналоги.Характеристика КАК Характеристика,
	|	МАКСИМУМ(Аналоги.Количество) КАК Количество,
	|	МАКСИМУМ(Аналоги.ОстатокНаСкладеПодтверждено) КАК ОстатокНаСкладеПодтверждено
	|ПОМЕСТИТЬ ОстаткиАналогов
	|ИЗ
	|	Аналоги КАК Аналоги
	|ГДЕ
	|	Аналоги.ЭтоАналог
	|	И Аналоги.ОстатокНаСкладеПодтверждено > 0
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ОстаткиПодборов КАК ОстаткиПодборов
	|			ГДЕ
	|				ОстаткиПодборов.Номенклатура = ОстаткиПодборов.Номенклатура
	|				И ОстаткиПодборов.Характеристика = ОстаткиПодборов.Характеристика)
	|
	|СГРУППИРОВАТЬ ПО
	|	Аналоги.Номенклатура,
	|	Аналоги.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректируемыеПодборы.НомерПодбора КАК НомерПодбора,
	|	КорректируемыеПодборы.Номенклатура КАК Номенклатура,
	|	КорректируемыеПодборы.Характеристика КАК Характеристика,
	|	КорректируемыеПодборы.Количество - КорректируемыеПодборы.ОстатокНаСкладе КАК КоличествоКЗаполнению,
	|	КорректируемыеОстатки.Остаток КАК ОстатокКРаспределению
	|ИЗ
	|	КорректируемыеПодборы КАК КорректируемыеПодборы
	|		ЛЕВОЕ СОЕДИНЕНИЕ КорректируемыеОстатки КАК КорректируемыеОстатки
	|		ПО КорректируемыеПодборы.Номенклатура = КорректируемыеОстатки.Номенклатура
	|			И КорректируемыеПодборы.Характеристика = КорректируемыеОстатки.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПодбора
	|ИТОГИ
	|	МАКСИМУМ(ОстатокКРаспределению)
	|ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналоги.НомерСтроки КАК НомерСтроки,
	|	ОстаткиПодборов.ОстатокНаСкладе + ЕСТЬNULL(ОстаткиАналогов.ОстатокНаСкладеПодтверждено, 0) - ЕСТЬNULL(КорректируемыеОстатки.Остаток, 0) - ЕСТЬNULL(ОстаткиАналогов.Количество, 0) КАК ОстатокНаСкладе,
	|	ОстаткиПодборов.ОстатокНаСкладе + ЕСТЬNULL(ОстаткиАналогов.ОстатокНаСкладеПодтверждено, 0) - ЕСТЬNULL(КорректируемыеОстатки.Остаток, 0) КАК ОстатокНаСкладеПодтверждено
	|ИЗ
	|	ОстаткиПодборов КАК ОстаткиПодборов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиАналогов КАК ОстаткиАналогов
	|		ПО ОстаткиПодборов.Номенклатура = ОстаткиАналогов.Номенклатура
	|			И ОстаткиПодборов.Характеристика = ОстаткиАналогов.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Аналоги КАК Аналоги
	|		ПО ОстаткиПодборов.Номенклатура = Аналоги.Номенклатура
	|			И ОстаткиПодборов.Характеристика = Аналоги.Характеристика
	|			И (Аналоги.ЭтоАналог)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КорректируемыеОстатки КАК КорректируемыеОстатки
	|		ПО ОстаткиПодборов.Номенклатура = КорректируемыеОстатки.Номенклатура
	|			И ОстаткиПодборов.Характеристика = КорректируемыеОстатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтменяемыеПодборы.НомерСтрокиИсходный КАК НомерСтрокиИсходный,
	|	СУММА(ОтменяемыеПодборы.Количество) КАК Количество
	|ИЗ
	|	ОтменяемыеПодборы КАК ОтменяемыеПодборы
	|ГДЕ
	|	НЕ ОтменяемыеПодборы.ЭтоАналог
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтменяемыеПодборы.НомерСтрокиИсходный";
	
	
	Запрос.УстановитьПараметр(
		"ПорцииПодбора", 
		ПорцииПодбора.Выгрузить(
			, "НомерПодбора, НомерСтрокиИсходный, Номенклатура, Характеристика, Количество, ОстатокНаСкладе, ЭтоАналог"));
			
	Запрос.УстановитьПараметр(
		"Аналоги", 
		Аналоги.Выгрузить(
			, "НомерСтроки, Номенклатура, Характеристика, Количество, ОстатокНаСкладеПодтверждено, ЭтоАналог"));	
		
	Запрос.УстановитьПараметр("МассивНомеров", НомераПодборов);	
		
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаМатериалы = МассивРезультатов[МассивРезультатов.ВГраница()].Выбрать();
	Пока ВыборкаМатериалы.Следующий() Цикл
		СтрокаМатериалы = Материалы.НайтиСтроки(Новый Структура("НомерСтрокиИсходный", ВыборкаМатериалы.НомерСтрокиИсходный))[0];
		СтрокаМатериалы.Количество = СтрокаМатериалы.Количество - ВыборкаМатериалы.Количество;
		СтрокаМатериалы.КоличествоПодтверждено = СтрокаМатериалы.КоличествоПодтверждено - ВыборкаМатериалы.Количество;
	КонецЦикла;
	
	ВыборкаАналоги = МассивРезультатов[МассивРезультатов.ВГраница() - 1].Выбрать();
	Пока ВыборкаАналоги.Следующий() Цикл
		СтрокаАналоги = Аналоги[ВыборкаАналоги.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаАналоги, ВыборкаАналоги, "ОстатокНаСкладе, ОстатокНаСкладеПодтверждено");
		УстановитьПризнакЕстьОстатки(СтрокаАналоги);
	КонецЦикла;
	
	Для каждого НомерПодбора Из НомераПодборов Цикл
		МассивСтрок = ПорцииПодбора.НайтиСтроки(Новый Структура("НомерПодбора", НомерПодбора));
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			ПорцииПодбора.Удалить(СтрокаТаблицы);	
		КонецЦикла;	
	КонецЦикла;	
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, НомерПодбора");
	
	ВыборкаНоменклатура = МассивРезультатов[МассивРезультатов.ВГраница() - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			ОстатокКРаспределению = ВыборкаХарактеристика.ОстатокКРаспределению;
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, ВыборкаХарактеристика,, "НомерПодбора");
			
			ВыборкаНомерПодбора = ВыборкаХарактеристика.Выбрать();
			Пока ВыборкаНомерПодбора.Следующий() Цикл
				
				ОстатокВПодбор = Мин(ОстатокКРаспределению, ВыборкаНомерПодбора.КоличествоКЗаполнению);
				
				ОстатокКРаспределению = ОстатокКРаспределению - ОстатокВПодбор;
				
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, ВыборкаНомерПодбора, "НомерПодбора");
				
				МассивСтрок = ПорцииПодбора.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаТаблицы Из МассивСтрок Цикл
					СтрокаТаблицы.ОстатокНаСкладе = СтрокаТаблицы.ОстатокНаСкладе + ОстатокВПодбор;
				КонецЦикла;
				
				Если ОстатокКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	    	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьПодборАналогов(Подтвердить = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Материалы.НомерСтроки КАК НомерСтроки,
	|	Материалы.Номенклатура КАК Номенклатура,
	|	Материалы.Характеристика КАК Характеристика,
	|	Материалы.Количество КАК Количество,
	|	Материалы.КоличествоПодтверждено КАК КоличествоПодтверждено,
	|	Материалы.НомерСтрокиИсходный КАК НомерСтрокиИсходный
	|ПОМЕСТИТЬ Материалы
	|ИЗ
	|	&Материалы КАК Материалы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналоги.НомерСтроки КАК НомерСтроки,
	|	Аналоги.Номенклатура КАК Номенклатура,
	|	Аналоги.Характеристика КАК Характеристика,
	|	Аналоги.Количество КАК Количество,
	|	Аналоги.ОстатокНаСкладе КАК ОстатокНаСкладе,
	|	Аналоги.ОстатокНаСкладеПодтверждено КАК ОстатокНаСкладеПодтверждено,
	|	Аналоги.Склад КАК Склад,
	|	Аналоги.Разрешение КАК Разрешение,
	|	Аналоги.РазрешениеПредставление КАК РазрешениеПредставление,
	|	Аналоги.ЕдиницаИзмеренияПредставление КАК ЕдиницаИзмеренияПредставление,
	|	Аналоги.ЭтоАналог КАК ЭтоАналог
	|ПОМЕСТИТЬ Аналоги
	|ИЗ
	|	&Аналоги КАК Аналоги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Материалы.НомерСтроки КАК НомерСтроки,
	|	Материалы.НомерСтрокиИсходный КАК НомерСтрокиИсходный,
	|	Материалы.Номенклатура КАК Номенклатура,
	|	Материалы.Характеристика КАК Характеристика,
	|	Материалы.Количество КАК Количество,
	|	Материалы.КоличествоПодтверждено КАК КоличествоПодтверждено,
	|	Материалы.Количество - Материалы.КоличествоПодтверждено КАК КоличествоКРаспределению
	|ИЗ
	|	Материалы КАК Материалы
	|ГДЕ
	|	Материалы.Количество > Материалы.КоличествоПодтверждено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналоги.НомерСтроки КАК НомерСтроки,
	|	Аналоги.Номенклатура КАК Номенклатура,
	|	Аналоги.Характеристика КАК Характеристика,
	|	Аналоги.Количество КАК Количество,
	|	Аналоги.ОстатокНаСкладеПодтверждено - Аналоги.ОстатокНаСкладе КАК ОстатокНаСкладе,
	|	Аналоги.Склад КАК Склад,
	|	Аналоги.Разрешение КАК Разрешение,
	|	Аналоги.РазрешениеПредставление КАК РазрешениеПредставление,
	|	Аналоги.ЕдиницаИзмеренияПредставление КАК ЕдиницаИзмеренияПредставление,
	|	Аналоги.ЭтоАналог КАК ЭтоАналог
	|ИЗ
	|	Аналоги КАК Аналоги
	|ГДЕ
	|	Аналоги.Количество > 0";
	
	Запрос.УстановитьПараметр(
		"Материалы", 
		Материалы.Выгрузить(
			, 
			"НомерСтроки, Номенклатура, Характеристика, Количество, КоличествоПодтверждено, НомерСтрокиИсходный"));
	
	Запрос.УстановитьПараметр(
		"Аналоги", 
		Аналоги.Выгрузить(
			, 
			"НомерСтроки, Разрешение, РазрешениеПредставление, ЭтоАналог, Номенклатура, Характеристика,"
			+ " Количество, ОстатокНаСкладе, ОстатокНаСкладеПодтверждено, Склад, ЕдиницаИзмеренияПредставление"));	
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаМатериалы = МассивРезультатов[МассивРезультатов.ВГраница() - 1].Выгрузить(); // см. ПроизводствоСервер.СлужебнаяСтруктураТаблицыЗначений
	
	ТаблицаАналоги = МассивРезультатов[МассивРезультатов.ВГраница()].Выгрузить();  // см. ПроизводствоСервер.СлужебнаяСтруктураТаблицыЗначений
	ТаблицаАналоги.Индексы.Добавить("Номенклатура, Характеристика, ЭтоАналог");
	
	Если Подтвердить Тогда
		ИмяКолонкиКоличествоПриемник      = "КоличествоПодтверждено";
		ИмяКолонкиОстатокНаСкладеПриемник = "ОстатокНаСкладеПодтверждено";
		ИмяКолонкиКоличествоИсточник      = "Количество";
		ИмяКолонкиОстатокНаСкладеИсточник = "ОстатокНаСкладе"; 
	Иначе
		ИмяКолонкиКоличествоПриемник      = "Количество";
		ИмяКолонкиОстатокНаСкладеПриемник = "ОстатокНаСкладе";
		ИмяКолонкиКоличествоИсточник      = "КоличествоПодтверждено";
		ИмяКолонкиОстатокНаСкладеИсточник = "ОстатокНаСкладеПодтверждено"; 
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, ЭтоАналог");
	СтруктураОчисткиАналогов = Новый Структура("Количество, ПодсказкаЗаменено", 0, ""); 
	
	Если Подтвердить Тогда
		
		КлючСвязи = ";" 
				  + СтрЗаменить(СтрСоединить(ТаблицаМатериалы.Выгрузитьколонку("НомерСтрокиИсходный"), ";"), Символы.НПП, "") 
				  + ";";
		
		МаксимальныйНомерПодбора = МаксимальныйНомерПодбора + 1;
		
		СтруктураОтбора.ЭтоАналог = Ложь;
						
	КонецЕсли;	
	
	Для каждого СтрокаТаблицы Из ТаблицаМатериалы Цикл
		
		СтрокаМатериалы = Материалы[СтрокаТаблицы.НомерСтроки - 1];
		
		СтрокаМатериалы[ИмяКолонкиКоличествоПриемник] = СтрокаМатериалы[ИмяКолонкиКоличествоИсточник];
			
		Если Подтвердить Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
			
			КоличествоКРаспределению = СтрокаТаблицы.КоличествоКРаспределению;
			
			МассивСтрок = ТаблицаАналоги.НайтиСтроки(СтруктураОтбора);
			ИндексСтрок = МассивСтрок.ВГраница();
			Пока ИндексСтрок > -1 Цикл
				
				ИндексСтрок = ИндексСтрок - 1;
				
				СтрокаТаблицыАналоги = МассивСтрок[0];
				
				КоличествоПорции = Мин(КоличествоКРаспределению, СтрокаТаблицыАналоги.Количество);
				
				ПорцияПодбора = ПорцииПодбора.Добавить();
				ЗаполнитьЗначенияСвойств(ПорцияПодбора, СтрокаТаблицыАналоги,, "Количество");
				ЗаполнитьЗначенияСвойств(ПорцияПодбора, СтрокаМатериалы, "НомерСтрокиИсходный");
				ПорцияПодбора.Количество = КоличествоПорции;
				ПорцияПодбора.НомерПодбора = МаксимальныйНомерПодбора;
				ПорцияПодбора.КлючСвязи = КлючСвязи;
				
				СтрокаТаблицыАналоги.Количество = СтрокаТаблицыАналоги.Количество - КоличествоПорции;
				Если СтрокаТаблицыАналоги.Количество = 0 Тогда
					
					ЗаполнитьЗначенияСвойств(Аналоги[СтрокаТаблицыАналоги.НомерСтроки - 1], СтруктураОчисткиАналогов);
					
					ТаблицаАналоги.Удалить(СтрокаТаблицыАналоги);
					МассивСтрок.Удалить(0);
					
				КонецЕсли;	
				
				КоличествоКРаспределению = КоличествоКРаспределению - КоличествоПорции;
				Если КоличествоКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
	НоменклатураОстатков = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из ТаблицаАналоги Цикл
		
		СтрокаАналоги = Аналоги[СтрокаТаблицы.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаАналоги, СтруктураОчисткиАналогов);
		
		Если СтрокаАналоги.ЭтоАналог
		   И НоменклатураОстатков.Получить(СтрокаТаблицы.Номенклатура) <> СтрокаТаблицы.Характеристика Тогда
			
			НоменклатураОстатков.Вставить(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика);
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
			
			МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаАналоги Из МассивСтрок Цикл
				
				СтрокаАналоги[ИмяКолонкиОстатокНаСкладеПриемник] = СтрокаАналоги[ИмяКолонкиОстатокНаСкладеИсточник];
				
				Если Не Подтвердить Тогда
					УстановитьПризнакЕстьОстатки(СтрокаАналоги);
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;
		
		Если Подтвердить Тогда
			
			ПорцияПодбора = ПорцииПодбора.Добавить();
			ЗаполнитьЗначенияСвойств(ПорцияПодбора, СтрокаТаблицы);
			ПорцияПодбора.НомерПодбора = МаксимальныйНомерПодбора;
			ПорцияПодбора.КлючСвязи = КлючСвязи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Подтвердить Тогда
		ОбновитьПодсказкиВозможностьЗамены();
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИтоговыеПоказатели(Форма)
	
	ИтогоКЗамене = 0;
	ИтогоЗаменено = 0;
	
	Элементы = Форма.Элементы;
	
	МассивВыделенныхСтрок = Элементы.Материалы.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из МассивВыделенныхСтрок Цикл
		
		ТекущаяСтрока = Форма.Материалы.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		ИтогоКЗамене = ИтогоКЗамене + ТекущаяСтрока.КЗамене - ТекущаяСтрока.КоличествоПодтверждено;
		ИтогоЗаменено = ИтогоЗаменено + ТекущаяСтрока.Количество - ТекущаяСтрока.КоличествоПодтверждено;
		
	КонецЦикла;
	
	Форма.ИтогоКЗамене = ИтогоКЗамене; 
	Форма.ИтогоЗаменено = ИтогоЗаменено;
	Форма.ИтогоОсталосьЗаменить = ИтогоКЗамене - ИтогоЗаменено;
	
КонецПроцедуры	

&НаСервере
Функция ДанныеПодборов(Номенклатура, Характеристика, НомераСтрок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорцииПодбора.НомерПодбора КАК НомерПодбора,
	|	ПорцииПодбора.НомерСтрокиИсходный КАК НомерСтрокиИсходный,
	|	ПорцииПодбора.Номенклатура КАК Номенклатура,
	|	ПорцииПодбора.Характеристика КАК Характеристика,
	|	ПорцииПодбора.Количество КАК Количество
	|ПОМЕСТИТЬ ПорцииПодбора
	|ИЗ
	|	&ПорцииПодбора КАК ПорцииПодбора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	НомерСтрокиИсходный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорцииПодбора.НомерПодбора КАК НомерПодбора,
	|	ВЫРАЗИТЬ(ПорцииПодбора.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	СУММА(ПорцииПодбора.Количество) КАК Количество
	|ИЗ
	|	ПорцииПодбора КАК ПорцииПодбора
	|ГДЕ
	|	ПорцииПодбора.Номенклатура = &Номенклатура
	|	И ПорцииПодбора.Характеристика = &Характеристика
	|	И ПорцииПодбора.НомерСтрокиИсходный В(&МассивНомеровСтрок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорцииПодбора.НомерПодбора,
	|	ПорцииПодбора.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПодбора";
	
	Запрос.УстановитьПараметр(
		"ПорцииПодбора",
		ПорцииПодбора.Выгрузить(, "НомерПодбора, НомерСтрокиИсходный, Номенклатура, Характеристика, Количество"));
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("МассивНомеровСтрок", НомераСтрок);
	
	Результат = Запрос.Выполнить();
	
	СписокПодборов = Новый СписокЗначений;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СписокПодборов.Добавить(
			Выборка.НомерПодбора, 
			СтрШаблон("%1 %2 %3", СтрШаблон(НСтр("ru = 'Заменено%1';
												|en = 'Replaced%1'"), " "), Выборка.Количество, Выборка.ЕдиницаИзмерения));
		
	КонецЦикла;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАналоги
	   И Аналоги.Количество() > Аналоги.НайтиСтроки(Новый Структура("Количество", 0)).Количество() Тогда
		СписокПодборов.Добавить(-1, НСтр("ru = 'Текущая';
										|en = 'Current'"));    	
	КонецЕсли;   
	
	Возврат СписокПодборов;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщееКоличествоАналоги(Номенклатура, Характеристика, ЭтоАналог)
	
	Количество = 0;
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, ЭтоАналог", 
									   Номенклатура, Характеристика, ЭтоАналог);
	
	МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		Количество = Количество + СтрокаТаблицы.Количество;	
	КонецЦикла;	
	
	Возврат Количество;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщееКоличествоТребуемогоМатериала(Номенклатура, Характеристика)
	
	Количество = 0;
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
	
	МассивСтрок = Материалы.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		Количество = Количество + СтрокаТаблицы.КЗамене - СтрокаТаблицы.КоличествоПодтверждено;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции	

&НаСервере
Функция ОбновитьПодсказкиВозможностьЗамены()
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, ЭтоАналог");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, Материалы.НайтиПоИдентификатору(Элементы.Материалы.ВыделенныеСтроки[0]));
	СтруктураОтбора.ЭтоАналог = Ложь;
	
	МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
	
	СтруктураОтбора.Вставить("ЕстьОстатки", Истина);
	УстановитьПодсказкуНаличиеОстатков(
		СтруктураОтбора.Номенклатура, СтруктураОтбора.Характеристика, Аналоги.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	
	ОбработаннаяНоменклатура = Новый Соответствие;
	ОбработаннаяНоменклатура.Вставить(СтруктураОтбора.Номенклатура, СтруктураОтбора.Характеристика);
	
	Для каждого СтрокаАналоги Из МассивСтрок Цикл
		
		СтруктураОтбораРазрешений = Новый Структура("Разрешение, ЭтоАналог");
		ЗаполнитьЗначенияСвойств(СтруктураОтбораРазрешений, СтрокаАналоги);
		
		МассивСтрокРазрешений = Аналоги.НайтиСтроки(СтруктураОтбораРазрешений);
		Для каждого СтрокаТаблицы Из МассивСтрокРазрешений Цикл
			
			Если СтрокаТаблицы.Характеристика = ОбработаннаяНоменклатура.Получить(СтрокаТаблицы.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы, "Номенклатура, Характеристика");
			
			УстановитьПодсказкуНаличиеОстатков(
				СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика, Аналоги.НайтиСтроки(СтруктураОтбора).Количество() > 0);
				
			ОбработаннаяНоменклатура.Вставить(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика);
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецФункции

&НаСервере
Процедура УстановитьПодсказкуНаличиеОстатков(Номенклатура, Характеристика, ЕстьОстатки)
	
	Если Не ПараметрыОбщие.ПоказатьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ПодсказкаЕстьОстатки = НСтр("ru = 'есть остатки';
								|en = 'there is balance'");
	ПодсказкаНетОстатков = НСтр("ru = 'нет остатков';
								|en = 'no balance'");
	
	ЗаменяемаяПодсказка = ?(ЕстьОстатки, ПодсказкаНетОстатков, ПодсказкаЕстьОстатки);
	АктуальнаяПодсказка = ?(ЕстьОстатки, ПодсказкаЕстьОстатки, ПодсказкаНетОстатков);
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
	
	МассивСтрок = Материалы.НайтиСтроки(СтруктураОтбора);
	Если СтрНайти(МассивСтрок[0].ПодсказкаВозможностьЗамены, ЗаменяемаяПодсказка) > 0 Тогда
		
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
			СтрокаТаблицы.ПодсказкаВозможностьЗамены = 
				СтрЗаменить(СтрокаТаблицы.ПодсказкаВозможностьЗамены, ЗаменяемаяПодсказка, АктуальнаяПодсказка);
				
		КонецЦикла;
			
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция ПодсказкаПоказатели(СтрокаТаблицы, ПоляПодсказкиПоказатели)
			
	ШаблонТекста = "%1%2";
	ТекстПодсказки = ШаблонТекста;
	
	ПерваяИтерация = Истина;
	
	Для каждого ПолеПодсказки Из ПоляПодсказкиПоказатели Цикл
		
		ЗначениеПоказателя = СтрокаТаблицы[ПолеПодсказки.Имя];
		
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			
			ПредставлениеПоказателя = ПолеПодсказки.Представление;
			
			Если ПерваяИтерация Тогда
				
				ПредставлениеПоказателя = СтрШаблон("%1 (%2)",
													ПредставлениеПоказателя,
													СтрокаТаблицы.ЕдиницаИзмеренияПредставление);
				
				ПерваяИтерация = Ложь;
				
			КонецЕсли;
			
			ТекстПодсказки = СтрШаблон(ТекстПодсказки,
										СтрШаблон("%1: %2; ", ПредставлениеПоказателя, ЗначениеПоказателя),
										ШаблонТекста);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Лев(ТекстПодсказки, СтрДлина(ТекстПодсказки) - СтрДлина(ШаблонТекста) - 2);
	
КонецФункции

&НаСервере
Функция ПоляПодсказкиПоказатели()
	
	ПоляПоказатели = ПоказателиРаспределениеЗапасов();
	
	ДанныеПоказателей = Новый Массив;
	
	ИмяПоказателя = "ПоДокументуВсего";
	ДанныеПоказателей.Добавить(Новый Структура("Имя, Представление", ИмяПоказателя, ПоляПоказатели[ИмяПоказателя]));
	
	ИмяПоказателя = "Обеспечить";
	ДанныеПоказателей.Добавить(Новый Структура("Имя, Представление", ИмяПоказателя, ПоляПоказатели[ИмяПоказателя]));
	
	ИмяПоказателя = "ОстатокНаДругихСкладах";
	ДанныеПоказателей.Добавить(Новый Структура("Имя, Представление", ИмяПоказателя, ПоляПоказатели[ИмяПоказателя]));
	
	ИмяПоказателя = "ОбеспеченНаСкладе";
	ДанныеПоказателей.Добавить(Новый Структура("Имя, Представление", ИмяПоказателя, ПоляПоказатели[ИмяПоказателя]));
	
	ИмяПоказателя = "ОбеспеченКДате";
	ДанныеПоказателей.Добавить(Новый Структура("Имя, Представление", ИмяПоказателя, ПоляПоказатели[ИмяПоказателя]));
	
	ИмяПоказателя = "ВРезерве";
	ДанныеПоказателей.Добавить(Новый Структура("Имя, Представление", ИмяПоказателя, ПоляПоказатели[ИмяПоказателя]));
	
	ИмяПоказателя = "НеОбеспечивать";
	ДанныеПоказателей.Добавить(Новый Структура("Имя, Представление", ИмяПоказателя, ПоляПоказатели[ИмяПоказателя]));
	
	Возврат ДанныеПоказателей;
	
КонецФункции

&НаСервере
Функция ПоказателиРаспределениеЗапасов()
	
	ПоляПоказатели = Новый Структура;
	ПоляПоказатели.Вставить("ПоДокументуВсего",       НСтр("ru = 'Всего';
															|en = 'Total'"));
	ПоляПоказатели.Вставить("Обеспечить",             НСтр("ru = 'Обеспечить';
															|en = 'Supply'"));
	ПоляПоказатели.Вставить("ОстатокНаДругихСкладах", НСтр("ru = 'На других складах';
															|en = 'At other warehouses'"));
	ПоляПоказатели.Вставить("ОбеспеченНаСкладе",      НСтр("ru = 'Обеспечено';
															|en = 'Supplied'"));
	ПоляПоказатели.Вставить("ОбеспеченКДате",         НСтр("ru = 'В графике';
															|en = 'In schedule'"));
	ПоляПоказатели.Вставить("ВРезерве",               НСтр("ru = 'Резерв';
															|en = 'Reserve'"));
	ПоляПоказатели.Вставить("НеОбеспечивать",         НСтр("ru = 'Не обеспечивать';
															|en = 'Do not supply'"));
	
	Возврат ПоляПоказатели;
	
КонецФункции	

&НаСервере
Функция ТекстЗапросаЗаполненияТаблиц()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаМатериалов.Разрешение КАК Разрешение,
	|	ТаблицаМатериалов.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалов.Характеристика КАК Характеристика,
	|	ТаблицаМатериалов.КоличествоУпаковок КАК Норматив,
	|	ТаблицаМатериалов.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ДанныеУпаковки,
	|	ТаблицаМатериалов.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК КонтролироватьКратность,
	|	ТаблицаМатериалов.Номенклатура.Представление КАК НоменклатураПредставление,
	|	ТаблицаМатериалов.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	ТаблицаМатериалов.Номенклатура.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
	|	ИСТИНА КАК РазрешениеДоступно
	|ИЗ
	|	ТаблицаМатериалов КАК ТаблицаМатериалов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаАналогов.Разрешение КАК Разрешение,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаАналогов.Разрешение) = ТИП(Документ.РазрешениеНаЗаменуМатериалов)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаАналогов.Разрешение КАК Документ.РазрешениеНаЗаменуМатериалов).Номер
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаАналогов.Разрешение) = ТИП(Документ.КорректировкаРегистров)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаАналогов.Разрешение КАК Документ.КорректировкаРегистров).Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаАналогов.Разрешение) = ТИП(Документ.РазрешениеНаЗаменуМатериалов)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаАналогов.Разрешение КАК Документ.РазрешениеНаЗаменуМатериалов).Дата
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаАналогов.Разрешение) = ТИП(Документ.КорректировкаРегистров)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаАналогов.Разрешение КАК Документ.КорректировкаРегистров).Дата
	|	КОНЕЦ КАК Дата,
	|	ТаблицаАналогов.Номенклатура КАК Номенклатура,
	|	ТаблицаАналогов.Характеристика КАК Характеристика,
	|	ТаблицаАналогов.КоличествоУпаковок КАК Норматив,
	|	ТаблицаАналогов.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ДанныеУпаковки,
	|	ТаблицаАналогов.Склад КАК Склад,
	|	ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) КАК ОстатокНаСкладе,
	|	ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) КАК ОстатокНаСкладеПодтверждено,
	|	ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) / (ТаблицаАналогов.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)) КАК КоэффициентНаличияНаСкладе,
	|	ИСТИНА КАК ЭтоАналог,
	|	ИСТИНА КАК РазрешениеДоступно
	|ИЗ
	|	ТаблицаАналогов КАК ТаблицаАналогов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТаблицаОстатков
	|		ПО ТаблицаАналогов.Номенклатура = ТаблицаОстатков.Номенклатура
	|			И ТаблицаАналогов.Характеристика = ТаблицаОстатков.Характеристика
	|			И ТаблицаАналогов.Склад = ТаблицаОстатков.Склад
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоэффициентНаличияНаСкладе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтрокиИсходный,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.Представление КАК НоменклатураПредставление,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Обособленно КАК Обособленно,
	|	Товары.Количество КАК КЗамене,
	|	Товары.Количество КАК КоличествоПоДокументу,
	|	Товары.КоличествоВсего КАК ПоДокументуВсего,
	|	Товары.Склад КАК Склад,
	|	ТаблицаМатериалов.Разрешение ЕСТЬ НЕ NULL КАК ЕстьАналогиМатериала,
	|	ТаблицаМатериалов.Разрешение КАК Разрешение,
	|	ТаблицаМатериалов.Приоритет КАК Приоритет,
	|	ТаблицаМатериалов.Период КАК Период
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаМатериалов КАК ТаблицаМатериалов
	|		ПО Товары.Номенклатура = ТаблицаМатериалов.Номенклатура
	|			И Товары.Характеристика = ТаблицаМатериалов.Характеристика
	|			И Товары.Ссылка = ТаблицаМатериалов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиИсходный,
	|	Приоритет УБЫВ,
	|	Период УБЫВ,
	|	Разрешение УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(Номенклатура),
	|	МАКСИМУМ(НоменклатураПредставление),
	|	МАКСИМУМ(ЕдиницаИзмеренияПредставление),
	|	МАКСИМУМ(Характеристика),
	|	МАКСИМУМ(ХарактеристикаПредставление),
	|	МАКСИМУМ(Назначение),
	|	МАКСИМУМ(Обособленно),
	|	МАКСИМУМ(КЗамене),
	|	МАКСИМУМ(КоличествоПоДокументу),
	|	МАКСИМУМ(ПоДокументуВсего),
	|	МАКСИМУМ(Склад),
	|	МАКСИМУМ(ЕстьАналогиМатериала)
	|ПО
	|	НомерСтрокиИсходный";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаАналогов.Упаковка",
			"ТаблицаАналогов.Номенклатура"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНорматива(Норматив)
	
	ТекущийНорматив = Норматив;
	Для Разрядность = 0 По 15 Цикл
		Если Цел(ТекущийНорматив) = ТекущийНорматив Тогда
			Прервать;
		КонецЕсли;
		ТекущийНорматив = ТекущийНорматив * 10;
	КонецЦикла;
	
	Возврат Формат(Норматив, СтрШаблон("ЧДЦ=%1;", Макс(3, Разрядность)));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьНедопустимыеРазрешения(Форма)
	
	Элементы = Форма.Элементы;
	
	ТекущиеДанные = Форма.Материалы.НайтиПоИдентификатору(Элементы.Материалы.ТекущаяСтрока);
		
	ОтборПоНедопустимымРазрешениям = Новый Структура("НомерСтроки");
	ЗаполнитьЗначенияСвойств(ОтборПоНедопустимымРазрешениям, ТекущиеДанные);
	
	МассивСтрок = Форма.НедопустимыеРазрешения.НайтиСтроки(ОтборПоНедопустимымРазрешениям);
	КоличествоНайденныхСтрок = МассивСтрок.Количество();
	Если КоличествоНайденныхСтрок = 0 Тогда
	
		УстановитьПризнакРазрешениеДоступно(Форма);
	
		МассивСтрок = Форма.НедопустимыеРазрешения.НайтиСтроки(ОтборПоНедопустимымРазрешениям);
		КоличествоНайденныхСтрок = МассивСтрок.Количество();
	
	КонецЕсли;
	
	Возврат КоличествоНайденныхСтрок > 1 Или ЗначениеЗаполнено(МассивСтрок[0].Разрешение);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Оформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьУсловноеОформлениеМатериалы();
	
	УстановитьУсловноеОформлениеАналоги();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеМатериалы()
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, "МатериалыХарактеристика", "Материалы.ХарактеристикиИспользуются");
	
	// Материалы: ЦветТекста
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Материалы.Имя);
	
	ГруппаОтбораИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.ЕстьАналогиМатериала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.КЗамене");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.Количество");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//Количество: Шрифт
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыКоличество.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.Количество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	//Количество: ЦветТекста
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыКоличество.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтогоЗаменено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.КЗамене");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.Количество");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеАналоги()
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, "АналогиХарактеристика", "Аналоги.ХарактеристикиИспользуются");
	
	//Аналоги: Видимость
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Аналоги.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиНоменклатураЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналоги.ЭтоАналог");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//РазрешениеПредставление: ЦветТекста, Шрифт
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиРазрешениеПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналоги.РазрешениеПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,, Истина));
	
	//ПодсказкаЗаменено: ЦветТекста, Шрифт
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиПодсказкаЗаменено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналоги.ПодсказкаЗаменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.МелкийШрифтТекста,,, Истина));
	
	//ИтогоЗаменено: Шрифт
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтогоЗаменено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИтогоЗаменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьНачальноеОформлениеСтраницы(ИмяСтраницы, ПризнакПоказатьОстатки, УчитыватьЗапасы)
	
	Если Не ПризнакПоказатьОстатки Тогда
		Элементы.РежимПодбораАналогов.Видимость = ПризнакПоказатьОстатки;
	КонецЕсли;
	
	Элементы.МатериалыСклад.Видимость = ПризнакПоказатьОстатки;
		
	Элементы.АналогиЕстьОстатки.Видимость = ПризнакПоказатьОстатки;
	Элементы.АналогиОстатокНаСкладе.Видимость = ПризнакПоказатьОстатки;
	Элементы.АналогиСклад.Видимость = ПризнакПоказатьОстатки;
	
	УстановитьЗаголовокГиперссылкиСмТакже(ИмяСтраницы);
	
	Элементы.ИсточникЗамены.Видимость = ?(ИмяСтраницы = "Материалы", ПризнакПоказатьОстатки И УчитыватьЗапасы, Ложь);
	Элементы.ИсточникЗаменыНаСтраницеАналоги.Видимость = ?(ИмяСтраницы = "Аналоги",
															ПризнакПоказатьОстатки И УчитыватьЗапасы,
															Ложь);
	
	Если ИмяСтраницы = "Аналоги" Тогда
		
		Элементы.НадписьШаг2.Заголовок = НСтр("ru = 'Подбор аналогов';
												|en = 'Pick alternative products'");
		Элементы.ДатаДействияРазрешений.Видимость = Истина;
		
		УстановитьПредставлениеРазрешений(Материалы[0].Номенклатура, Материалы[0].Характеристика);
		
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаОстаткиМатериалов;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницу(ЭтаФорма, ИмяСтраницы);
				
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницу(Форма, ИмяСтраницы, КлючСвязи = Неопределено, Режим = 0)
	
	Элементы = Форма.Элементы;
	
	Если ИмяСтраницы = "Материалы" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаМатериалы;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАналоги;
	КонецЕсли;
	
	Если ИмяСтраницы = "Аналоги" Тогда
		ОформитьМатериалыНаСтраницеАналогов(Форма);
		УстановитьПризнакРазрешениеДоступно(Форма);
		УстановитьОтборПоДоступнымАналогам(Элементы[ИмяСтраницы].ОтборСтрок, КлючСвязи, Режим);
		УстановитьНадписьОтсутствиеАналогов(Форма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьМатериалыНаСтраницеАналогов(Форма)
	
	Элементы = Форма.Элементы;
	
	ДанныеТекущейСтроки = Форма.Материалы.НайтиПоИдентификатору(Элементы.Материалы.ТекущаяСтрока);
	
	Форма.НоменклатураПредставление = ДанныеТекущейСтроки.НоменклатураПредставление;
	Если ЗначениеЗаполнено(ДанныеТекущейСтроки.Характеристика) Тогда
		Форма.НоменклатураПредставление = 
			Форма.НоменклатураПредставление + " / " + ДанныеТекущейСтроки.ХарактеристикаПредставление;
	КонецЕсли;	
	
	ЗаполнитьИтоговыеПоказатели(Форма);
			
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПризнакРазрешениеДоступно(Форма)
	
	Элементы = Форма.Элементы;
	
	ТекущиеДанные = Форма.Материалы.НайтиПоИдентификатору(Элементы.Материалы.ТекущаяСтрока);
	
	ОтборПоНедопустимымРазрешениям = Новый Структура("НомерСтроки");
	ЗаполнитьЗначенияСвойств(ОтборПоНедопустимымРазрешениям, ТекущиеДанные);
	
	МассивСтрок  = Форма.НедопустимыеРазрешения.НайтиСтроки(ОтборПоНедопустимымРазрешениям);
	ИндексСтроки = МассивСтрок.ВГраница();
	Пока ИндексСтроки > -1 Цикл
		Форма.НедопустимыеРазрешения.Удалить(Форма.НедопустимыеРазрешения[ИндексСтроки]);
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	МассивСтрок = Форма.Аналоги.НайтиСтроки(Новый Структура("РазрешениеДоступно", Ложь));
	Для каждого СтрокаАналоги Из МассивСтрок Цикл
		СтрокаАналоги.РазрешениеДоступно = Истина;
	КонецЦикла;
	
	КешОсталосьЗаменить = Новый Соответствие;
	
	ИтогоОсталосьЗаменить = Форма.ИтогоОсталосьЗаменить;
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, КонтролироватьКратность, ЭтоАналог");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	СтруктураОтбора.КонтролироватьКратность = Истина;
	СтруктураОтбора.ЭтоАналог = Ложь;
	
	МассивСтрок = Форма.Аналоги.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаАналоги Из МассивСтрок Цикл
		
		РазрешениеДоступно = СтрокаАналоги.Норматив <= ИтогоОсталосьЗаменить;
		
		Если РазрешениеДоступно Тогда
			
			МассивСтрокРазрешение = Форма.Аналоги.НайтиСтроки(Новый Структура("Разрешение, ЭтоАналог", СтрокаАналоги.Разрешение, Ложь));
			Для каждого СтрокаРазрешение Из МассивСтрокРазрешение Цикл
				
				Если СтрокаРазрешение.Номенклатура = СтрокаАналоги.Номенклатура 
				   И СтрокаРазрешение.Характеристика = СтрокаАналоги.Характеристика Тогда
				   	Продолжить;
				КонецЕсли;
				
				КлючМатериала = СтрШаблон("%1 %2", 
											СтрокаРазрешение.Номенклатура.УникальныйИдентификатор(), 
											СтрокаРазрешение.Характеристика.УникальныйИдентификатор());
											
				КоличествоОсталосьЗаменить = КешОсталосьЗаменить.Получить(КлючМатериала);
											
				Если КоличествоОсталосьЗаменить = Неопределено Тогда
					
					КоличествоОсталосьЗаменить = 0;
					
					СтруктураОтбораМатериалы = Новый Структура("Номенклатура, Характеристика");
					ЗаполнитьЗначенияСвойств(СтруктураОтбораМатериалы, СтрокаРазрешение);
					
					МассивСтрокМатериалы = Форма.Материалы.НайтиСтроки(СтруктураОтбораМатериалы);
					Для каждого СтрокаМатериалы Из МассивСтрокМатериалы Цикл
						КоличествоОсталосьЗаменить = КоличествоОсталосьЗаменить + СтрокаМатериалы.КЗамене - СтрокаМатериалы.Количество;
					КонецЦикла;
					
					КешОсталосьЗаменить.Вставить(КлючМатериала, КоличествоОсталосьЗаменить);
					
				КонецЕсли;
				
				РазрешениеДоступно = СтрокаРазрешение.Норматив <= КоличествоОсталосьЗаменить;
				Если Не РазрешениеДоступно Тогда
					Прервать;
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не РазрешениеДоступно Тогда
			
			СтрокаТаблицы = Форма.НедопустимыеРазрешения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОтборПоНедопустимымРазрешениям);
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаАналоги, "Разрешение");
			
			МассивСтрокРазрешение = Форма.Аналоги.НайтиСтроки(Новый Структура("Разрешение", СтрокаАналоги.Разрешение));
			Для каждого СтрокаРазрешение Из МассивСтрокРазрешение Цикл
				СтрокаРазрешение.РазрешениеДоступно = Ложь;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Строка с пустым разрешением является признаком обработки данной строки материалов
	СтрокаТаблицы = Форма.НедопустимыеРазрешения.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОтборПоНедопустимымРазрешениям);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДоступнымАналогам(Отбор, КлючСвязи = Неопределено, Режим = 0)

	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("РазрешениеДоступно", Истина);
	
	Если КлючСвязи <> Неопределено Тогда
		СтруктураОтбора.Вставить("КлючСвязиРазрешение", КлючСвязи);
	КонецЕсли;	
	
	Если Режим = 1 Тогда
		СтруктураОтбора.Вставить("ЕстьОстаткиСлужебный", Истина);	
	КонецЕсли;
		
	Отбор = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеРазрешений(Номенклатура, Характеристика)
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, ЭтоАналог", Номенклатура, Характеристика, Ложь);
	СтруктураОтбораРазрешение = Новый Структура("ОтобразитьРазрешение, ЭтоАналог, Разрешение", Истина, Истина);
	
	МассивСтрок = Аналоги.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбораРазрешение, СтрокаТаблицы, "Разрешение");
		
		ЗаполнитьЗначенияСвойств(
			Аналоги.НайтиСтроки(СтруктураОтбораРазрешение)[0], СтрокаТаблицы, "РазрешениеПредставление");
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьОтсутствиеАналогов(Форма)

	ТекстНадписи = "";
	
	Если Форма.Аналоги.Количество() = 0 Тогда
		ТекстНадписи = НСтр("ru = 'Аналоги на указанную дату не найдены';
							|en = 'Substitutes are not found for the specified date'");
	ИначеЕсли Форма.ПорцииПодбора.Количество() = 0 
	        И Форма.Аналоги.Количество() = Форма.Аналоги.НайтиСтроки(Новый Структура("Количество", 0)).Количество() Тогда
		ТекстНадписи = НСтр("ru = 'Ни один аналог не выбран';
							|en = 'No substitutes are selected'");
	КонецЕсли;
	
	Форма.Элементы.НадписьОтсутствиеАналогов.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокГиперссылкиСмТакже(ИмяСтраницы)
	
	ЕстьНедопустимыеРазрешения = ЕстьНедопустимыеРазрешения(ЭтотОбъект);
	ЕстьНедопустимыеРазрешенияДоИзменения = ЕстьНедопустимыеРазрешения;
	
	ФрагментыГиперссылки = Новый Массив;
	ФрагментыГиперссылки.Добавить(НСтр("ru = 'См. также:';
										|en = 'See also:'"));
	
	ФрагментыГиперссылки.Добавить(" ");
	
	ПредставлениекГиперссылки = НСтр("ru = 'Остатки и доступность товаров;';
									|en = 'Stock availability;'");
	ФрагментыГиперссылки.Добавить(
		Новый ФорматированнаяСтрока(ПредставлениекГиперссылки,,,, "ОстаткиИДоступностьТоваров"));
	
	ФрагментыГиперссылки.Добавить(" ");
	
	ПредставлениекГиперссылки = ?(ЕстьНедопустимыеРазрешения,
								  НСтр("ru = 'Остатки и доступность товаров на других складах;';
										|en = 'Stock availability in other warehouses;'"),
								  НСтр("ru = 'Остатки и доступность товаров на других складах';
										|en = 'Stock availability in other warehouses'"));
	ФрагментыГиперссылки.Добавить(
		Новый ФорматированнаяСтрока(ПредставлениекГиперссылки,,,, "ОстаткиИДоступностьТоваровНаДругихСкладах"));
	
	Если ЕстьНедопустимыеРазрешения Тогда
	
		ФрагментыГиперссылки.Добавить(" ");
		ФрагментыГиперссылки.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Недопустимые разрешения';
					|en = 'Invalid substitutes'"),, ЦветаСтиля.ЦветТекстаПроблема,, "НедопустимыеРазрешения"));
	
	КонецЕсли;
	
	Если ИмяСтраницы = "Материалы" Тогда
		ЭлементГиперссылка = Элементы.СмТакжеМатериалы; 
	Иначе
		ЭлементГиперссылка = Элементы.СмТакжеАналоги;
	КонецЕсли;
 
	ЭлементГиперссылка.Заголовок = Новый ФорматированнаяСтрока(ФрагментыГиперссылки);
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти