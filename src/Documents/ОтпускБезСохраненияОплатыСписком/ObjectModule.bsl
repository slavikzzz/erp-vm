#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Действие") Тогда 
			Если ДанныеЗаполнения.Действие = "Исправить" Тогда
				
				ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, 
						ДанныеЗаполнения.Ссылка, 
						"ПерерасчетВыполнен",
						"Начисления,НачисленияПерерасчет,Показатели,РаспределениеРезультатовНачислений");
				
				ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
			ИначеЕсли ДанныеЗаполнения.Действие = "Заполнить" Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Документы.ОтпускБезСохраненияОплатыСписком.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтпускаСотрудников", Сотрудники.Выгрузить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтпускаСотрудниковСотрудники.Сотрудник,
	|	ОтпускаСотрудниковСотрудники.НомерСтроки,
	|	ОтпускаСотрудниковСотрудники.ДатаНачала,
	|	ОтпускаСотрудниковСотрудники.ДатаОкончания
	|ПОМЕСТИТЬ ВТОтпускаСотрудников
	|ИЗ
	|	&ОтпускаСотрудников КАК ОтпускаСотрудниковСотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускаСотрудников.Сотрудник,
	|	ОтпускаСотрудников.НомерСтроки
	|ПОМЕСТИТЬ ВТСтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска
	|ИЗ
	|	ВТОтпускаСотрудников КАК ОтпускаСотрудников
	|ГДЕ
	|	ОтпускаСотрудников.ДатаНачала > ОтпускаСотрудников.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускаСотрудников.Сотрудник,
	|	МАКСИМУМ(ОтпускаСотрудниковДругие.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТПересекаютсяПериодыОтпусков
	|ИЗ
	|	ВТОтпускаСотрудников КАК ОтпускаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтпускаСотрудников КАК ОтпускаСотрудниковДругие
	|		ПО ОтпускаСотрудников.Сотрудник = ОтпускаСотрудниковДругие.Сотрудник
	|			И ОтпускаСотрудников.НомерСтроки <> ОтпускаСотрудниковДругие.НомерСтроки
	|			И ОтпускаСотрудников.ДатаОкончания >= ОтпускаСотрудниковДругие.ДатаНачала
	|			И ОтпускаСотрудников.ДатаОкончания <= ОтпускаСотрудниковДругие.ДатаОкончания
	|			И (ОтпускаСотрудников.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1))
	|			И (ОтпускаСотрудников.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ
	|	НЕ ОтпускаСотрудниковДругие.НомерСтроки ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтпускаСотрудников.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересекаютсяПериодыОтпусков.Сотрудник,
	|	ПересекаютсяПериодыОтпусков.НомерСтроки КАК НомерСтроки,
	|	ИСТИНА КАК ПересекаютсяПериоды,
	|	ЛОЖЬ КАК НекорректныйПериодПредоставления
	|ПОМЕСТИТЬ ВТСводный
	|ИЗ
	|	ВТПересекаютсяПериодыОтпусков КАК ПересекаютсяПериодыОтпусков
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска.Сотрудник,
	|	СтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска.НомерСтроки,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	ВТСтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска КАК СтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сводный.Сотрудник,
	|	Сводный.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(Сводный.ПересекаютсяПериоды) КАК ПересекаютсяПериоды,
	|	МАКСИМУМ(Сводный.НекорректныйПериодПредоставления) КАК НекорректныйПериодПредоставления
	|ИЗ
	|	ВТСводный КАК Сводный
	|
	|СГРУППИРОВАТЬ ПО
	|	Сводный.Сотрудник,
	|	Сводный.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.НекорректныйПериодПредоставления Тогда
				ТекстСообщения = ?(ПустаяСтрока(ТекстСообщения), "", ТекстСообщения +", ") +
					НСтр("ru = 'некорректно задан период предоставления отпуска';
						|en = 'leave period is invalid'");
			КонецЕсли;
			
			Если Выборка.ПересекаютсяПериоды Тогда
				ТекстСообщения = ?(ПустаяСтрока(ТекстСообщения), "", ТекстСообщения +", ") +
					НСтр("ru = 'пересекается период нахождения в отпуске';
						|en = 'leave periods overlap'");
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По сотруднику %1';
					|en = 'By employee %1'"),
				Выборка.Сотрудник)
				+ " " + ТекстСообщения;
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				,
				"Сотрудники[" + (Выборка.НомерСтроки - 1) + "].Сотрудник",
				"Объект",
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтрокаСотрудника Из Сотрудники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаНачала)
				Или Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаОкончания) Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаНачала)
				И Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаОкончания) Тогда
			
				ТекстСообщения = НСтр("ru = 'не задан период отпуска';
										|en = 'leave period is not set'");
				ИмяРеквизита = "ДатаНачала";
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'неверно задан период отпуска';
										|en = 'leave period is invalid'");
				Если Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаНачала) Тогда
					ИмяРеквизита = "ДатаНачала";
				Иначе
					ИмяРеквизита = "ДатаОкончания";
				КонецЕсли;
					
			КонецЕсли;
				
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По сотруднику %1';
					|en = 'By employee %1'"),СтрокаСотрудника.Сотрудник)
				+ " " + ТекстСообщения;
				
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				,
				"Сотрудники[" + (СтрокаСотрудника.НомерСтроки - 1) + "]." + ИмяРеквизита,
				"Объект",
				Отказ);
				
		КонецЕсли;
			
	КонецЦикла;
		
	Документы.ОтпускБезСохраненияОплатыСписком.ПроверитьРаботающих(ЭтотОбъект, Отказ);
	
	Если Не ДополнительныеСвойства.Свойство("ПроверкаПересеченияПериодовВыполнена") Тогда
		ПроверитьПересечениеПериодовОтсутствия(Отказ);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
		
		Если Не ЗначениеЗаполнено(ВидРасчета) 
			И Не ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияОтпускБезОплаты") Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				Документы.ОтпускБезСохраненияОплаты.ТекстСообщенияНеЗаполненВидРасчета(ВидОтпуска, Ложь),
				Ссылка,
				,
				,
				Отказ);
		КонецЕсли;
		
		Если ПерерасчетВыполнен И Не Отказ Тогда 
			
			// Проверка корректности распределения по источникам финансирования
			ИменаТаблицРаспределяемыхПоСтатьямФинансирования = "Начисления,НачисленияПерерасчет";
			
			ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержанийОбъекта(
				ЭтотОбъект, ИменаТаблицРаспределяемыхПоСтатьямФинансирования, Отказ);
				
			// Проверка корректности распределения по территориям и условиям труда
			ИменаТаблицРаспределенияПоТерриториямУсловиямТруда = "Начисления,НачисленияПерерасчет";
			
			РасчетЗарплатыРасширенный.ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(
				ЭтотОбъект, ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, Отказ);
			
			ПроверитьПериодДействияНачислений(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	КадровыйЭДО.ПроверитьВозможностьСохраненияИзмененийДокументаСПечатнымиФормами(
		ЭтотОбъект, Метаданные.Роли.ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ПериодРегистрации);
	
	РасчетЗарплатыРасширенный.ЗаполнитьИсходныйДокумент(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	РасчетЗарплатыРасширенный.ЗаполнитьИсходныйДокументПриКопировании(ЭтотОбъект, ОбъектКопирования.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьПериодДействияНачислений(Отказ)
	
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("НачисленияПерерасчет", НСтр("ru = 'Перерасчет прошлого периода';
																																	|en = 'Recalculation of the last period'")));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ЭтотОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
	
КонецПроцедуры

Процедура ПроверитьПересечениеПериодовОтсутствия(Отказ)
	
	РезультатПроверки = РезультатПроверкиПересеченийПериодовОтсутствия();
		
	Если РезультатПроверки.ДанныеСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Отказ Или РезультатПроверки.Отказ;
	
	Для Каждого РезультатПроверкиСотрудника Из РезультатПроверки.ДанныеСотрудников Цикл
		
		ДанныеСотрудника = РезультатПроверкиСотрудника.Значение;
		
		ТекстСообщения = НСтр("ru = '%1: на период %2 уже зарегистрировано отсутствие документом %3.';
								|en = '%1: the absence during period %2 has already been registered with document %3.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			РезультатПроверкиСотрудника.Ключ,
			ДанныеСотрудника.ПредставлениеПериода,
			ДанныеСотрудника.Регистратор);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатПроверкиПересеченийПериодовОтсутствия() Экспорт
	
	ИсходныеДанные = СостоянияСотрудников.ПустаяТаблицаДанныхСостоянийСотрудника();
	
	Состояние = СостоянияСотрудников.СостояниеПоВидуОтпуска(ВидОтпуска);
	
	Для каждого СтрокаСотрудника Из Сотрудники Цикл
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Сотрудник = СтрокаСотрудника.Сотрудник;
		НоваяСтрока.Состояние = Состояние;
		НоваяСтрока.Начало = СтрокаСотрудника.ДатаНачала;
		НоваяСтрока.Окончание = СтрокаСотрудника.ДатаОкончания;
		
	КонецЦикла;
	
	Возврат СостоянияСотрудников.ПроверитьПересечениеПериодовОтсутствия(ИсходныеДанные, Ссылка, ИсправленныйДокумент);
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли