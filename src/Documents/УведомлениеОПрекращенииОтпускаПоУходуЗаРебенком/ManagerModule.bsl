#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//   Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Макеты = Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.Макеты;
	ДатаФорм2021 = ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаВступленияВСилуФорм2021Года();
	ДатаФорм2022 = ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаВступленияВСилуФорм2022();
	ДатаФорм2024 = ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаВступленияВСилуФорм2024();
	
	Макет = Макеты.ПФ_MXL_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2021;
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик    = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = Макет.Имя;
	КомандаПечати.Представление = Макет.Представление();
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "Дата", ДатаФорм2021, ВидСравнения.БольшеИлиРавно);
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "Дата", ДатаФорм2022, ВидСравнения.Меньше);
	
	Макет = Макеты.ПФ_MXL_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2022;
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик    = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = Макет.Имя;
	КомандаПечати.Представление = Макет.Представление();
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "Дата", ДатаФорм2022, ВидСравнения.БольшеИлиРавно);
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "Дата", ДатаФорм2024, ВидСравнения.Меньше);
	
	Макет = Макеты.ПФ_MXL_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2024;
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик    = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = Макет.Имя;
	КомандаПечати.Представление = Макет.Представление();
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "Дата", ДатаФорм2024, ВидСравнения.БольшеИлиРавно);
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  Для чтения:
//    МассивОбъектов        - Массив    - Ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати       - Структура - Настройки печати;
//  Для изменения:
//    КоллекцияПечатныхФорм - ТаблицаЗначений - Табличные документы.
//    ОбъектыПечати         - СписокЗначений  - Разбивка областей табличного документа по напечатанным объектам.
//        * Значение      - ДокументСсылка - ссылка объекта
//        * Представление - Строка         - Имя области, в которую был выведен объект;
//    ПараметрыВывода       - Структура       - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	Менеджер = Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком;
	УправлениеПечатьюБЗК.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, Менеджер);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// ЗарплатаКадрыПодсистемы

// Формирует печатную форму. Вызывается из УправлениеПечатьюБЗК.Печать.
//
// Параметры:
//   КонтекстПечати - Структура - См. УправлениеПечатьюБЗК.КонтекстПечати.
//
Процедура ПриФормированииПечатнойФормы(КонтекстПечати) Экспорт
	
	Макеты = Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.Макеты;
	Если КонтекстПечати.МетаданныеМакета = Макеты.ПФ_MXL_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2021 Тогда
		ПриПечатиУведомления_2021(КонтекстПечати);
	ИначеЕсли КонтекстПечати.МетаданныеМакета = Макеты.ПФ_MXL_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2022 Тогда
		ПриПечатиУведомления_2022(КонтекстПечати);
	ИначеЕсли КонтекстПечати.МетаданныеМакета = Макеты.ПФ_MXL_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2024 Тогда
		ПриПечатиУведомления_2024(КонтекстПечати);
	КонецЕсли;
	
КонецПроцедуры

// Конец ЗарплатаКадрыПодсистемы

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Сотрудник.ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, ПараметрыФормы, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	ВсеПараметры = Новый Структура("Ключ, Основание");
	ЗаполнитьЗначенияСвойств(ВсеПараметры, ПараметрыФормы);
	Если Не ЗначениеЗаполнено(ВсеПараметры.Ключ) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Уведомление = НайтиУведомлениеПоОснованию(ВсеПараметры.Основание);
		УстановитьПривилегированныйРежим(Ложь);
		Если Уведомление.Ссылка <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы.Вставить("Ключ", Уведомление.Ссылка);
			ВыбраннаяФорма = "Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.Форма.ФормаДокумента";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// Адаптирует документы "Уведомление о прекращении отпуска по уходу за ребенком" к учету СЭДО.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура АдаптироватьКУчетуСЭДО(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(УведомлениеПрекращаемыеЗаявления.НомерСтроки, 0) КАК НомерСтроки,
	|	ЕСТЬNULL(УведомлениеПрекращаемыеЗаявления.Заявление, НЕОПРЕДЕЛЕНО) КАК Заявление,
	|	ЕСТЬNULL(ЗаявлениеСотрудникаНаВыплатуПособия.ФамилияРебенка, """") КАК ФамилияРебенка,
	|	ЕСТЬNULL(ЗаявлениеСотрудникаНаВыплатуПособия.ИмяРебенка, """") КАК ИмяРебенка,
	|	ЕСТЬNULL(ЗаявлениеСотрудникаНаВыплатуПособия.ОтчествоРебенка, """") КАК ОтчествоРебенка,
	|	ЕСТЬNULL(ЗаявлениеСотрудникаНаВыплатуПособия.ДатаРожденияРебенка, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРожденияРебенка,
	|	ЕСТЬNULL(ЗаявлениеСотрудникаНаВыплатуПособия.СНИЛСРебенка, """") КАК СНИЛСРебенка
	|ИЗ
	|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК Уведомление
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО Уведомление.Сотрудник = Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ПрекращаемыеЗаявления КАК УведомлениеПрекращаемыеЗаявления
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ЗаявлениеСотрудникаНаВыплатуПособия
	|			ПО УведомлениеПрекращаемыеЗаявления.Заявление = ЗаявлениеСотрудникаНаВыплатуПособия.Ссылка
	|		ПО Уведомление.Ссылка = УведомлениеПрекращаемыеЗаявления.Ссылка
	|ГДЕ
	|	НЕ Уведомление.ОтправлятьЧерезСЭДО
	|	И НЕ Уведомление.ОтправлятьЧерезПрямыеВыплаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ФизическоеЛицо,
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		УведомлениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			УведомлениеОбъект.ФизическоеЛицо = Выборка.ФизическоеЛицо;
			УведомлениеОбъект.Страхователь = СЭДОФСС.СтраховательОрганизации(УведомлениеОбъект.Организация);
			УведомлениеОбъект.ОтправлятьЧерезПрямыеВыплаты = Истина;
			Пока Выборка.Следующий() Цикл
				Если Не ЗначениеЗаполнено(Выборка.Заявление) Тогда
					Продолжить;
				КонецЕсли;
				Найденные = УведомлениеОбъект.ПрекращаемыеЗаявления.НайтиСтроки(Новый Структура("Заявление", Выборка.Заявление));
				Для Каждого СтрокаТаблицы Из Найденные Цикл
					СтрокаТаблицы.РебенокФамилия      = Выборка.ФамилияРебенка;
					СтрокаТаблицы.РебенокИмя          = Выборка.ИмяРебенка;
					СтрокаТаблицы.РебенокОтчество     = Выборка.ОтчествоРебенка;
					СтрокаТаблицы.РебенокСНИЛС        = Выборка.СНИЛСРебенка;
					СтрокаТаблицы.РебенокДатаРождения = Выборка.ДатаРожденияРебенка;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		СЭДОФСС.ЗаписатьДокумент(УведомлениеОбъект);
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Возвращает описание состава документа.
//
// Возвращаемое значение:
//   Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("", "Сотрудник");
КонецФункции

// Вызывается из события "ПередЗаписью" документов, указанных в определяемом типе ДокументыОснованияУведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.
// Устанавливает пометка удаления уведомлений вместе с документом-основанием.
//
// Параметры:
//   ДокументОбъект - ДокументОбъект.* - Документов-основание уведомления.
//
Процедура ПередЗаписьюОснованияУведомления(ДокументОбъект) Экспорт
	// Устанавливает пометку удаления уведомлений при установке пометке удаления документа-основания.
	Если ДокументОбъект.ЭтоНовый() Тогда
		Возврат; // Для новых документов проверка не нужна.
	КонецЕсли;
	ДокументОснование = ДокументОбъект.Ссылка;
	ПометкаУдаления   = ДокументОбъект.ПометкаУдаления;
	Если ЗначениеЗаполнено(ДокументОснование)
		И ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ПометкаУдаления") Тогда
		Уведомления = НайтиУведомленияПоОснованию(ДокументОснование, "Ссылка, ПометкаУдаления");
		Для Каждого Уведомление Из Уведомления Цикл
			Если Уведомление.ПометкаУдаления <> ПометкаУдаления Тогда
				УведомлениеОбъект = Уведомление.Ссылка.ПолучитьОбъект();
				Если Не ОбъектЗафиксирован(УведомлениеОбъект) Тогда
					УведомлениеОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#Область СЭДО

Функция ТекстXML(Документ) Экспорт
	ПрограммаНаименование = Лев(РегламентированнаяОтчетность.НазваниеПрограммы(), 255);
	ПрограммаВерсия = Лев(Метаданные.Версия, 15);
	НомерСтрахователяФСС = УчетПособийСоциальногоСтрахованияКлиентСервер.РегистрационныйНомерДляОбменаФСС(Документ);
	ТелефонСтрахователя = КонтактнаяИнформацияБЗК.ПредставлениеТелефона(Документ.ТелефонСтрахователя);
	
	МенеджерXML = Обработки.ПостроительXML.Создать();
	МенеджерXML.ФорматДат = "ДФ=yyyy-MM-dd";
	
	// В корне 1 элемент: Структура для передачи перечня уведомлений о прекращении пособия по уходу.
	КореньXML = МенеджерXML.ДобавитьУзел(МенеджерXML.ДеревоXML, "noticeTerminationRequest");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "",    "http://www.fss.ru/integration/types/pvso/noticetermination/v01");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	МенеджерXML.ДобавитьАтрибут(КореньXML, "software",         ПрограммаНаименование,                      Ложь);
	МенеджерXML.ДобавитьАтрибут(КореньXML, "version_software", ПрограммаВерсия,                            Ложь);
	МенеджерXML.ДобавитьАтрибут(КореньXML, "author",           "",                                         Ложь);
	МенеджерXML.ДобавитьАтрибут(КореньXML, "phone",            ТелефонСтрахователя,                        Ложь);
	МенеджерXML.ДобавитьАтрибут(КореньXML, "email",            Документ.АдресЭлектроннойПочтыСтрахователя, Ложь);
	МенеджерXML.ДобавитьАтрибут(КореньXML, "emplRegNo",        НомерСтрахователяФСС,                       Истина);
	МенеджерXML.ДобавитьАтрибут(КореньXML, "regNumSFR",        Документ.РегистрационныйНомерСФР,           Истина);
	
	СведенияОПособиях = СведенияОПособиях(Документ);
	Для Каждого ОтпускПоУходу Из СведенияОПособиях Цикл
		
		РодительXML = МенеджерXML.ДобавитьУзел(КореньXML, "row");
		
		// Сведения о документе.
		МенеджерXML.ДобавитьУзел(РодительXML, "notificationID", ОтпускПоУходу.ИдентификаторСтрокиУведомления);
		МенеджерXML.ДобавитьУзел(РодительXML, "batchNo",        ОтпускПоУходу.ИдентификаторСтрокиРеестра);
		МенеджерXML.ДобавитьУзел(РодительXML, "docDt1",         ОтпускПоУходу.ДатаПредставленияПакетаДокументов);
		
		// Сотрудник: СНИЛС, ИНН, ФИО.
		МенеджерXML.ДобавитьУзел(РодительXML, "SNILS",      ОтпускПоУходу.СотрудникСНИЛС);
		МенеджерXML.ДобавитьУзел(РодительXML, "surname",    ОтпускПоУходу.СотрудникФамилия);
		МенеджерXML.ДобавитьУзел(РодительXML, "name",       ОтпускПоУходу.СотрудникИмя);
		МенеджерXML.ДобавитьУзел(РодительXML, "patronimic", ОтпускПоУходу.СотрудникОтчество, Истина, Истина);
		
		// Страхователь.
		МенеджерXML.ДобавитьУзел(РодительXML, "employer",     Документ.НаименованиеСтрахователя);
		МенеджерXML.ДобавитьУзел(РодительXML, "emplRegNo",    НомерСтрахователяФСС, Истина);
		МенеджерXML.ДобавитьУзел(РодительXML, "regNumSFR",    Документ.РегистрационныйНомерСФР, Истина);
		МенеджерXML.ДобавитьУзел(РодительXML, "emplParentNo", Документ.КодПодчиненностиФСС);
		МенеджерXML.ДобавитьУзел(РодительXML, "emplKPP",      Документ.КПП, Ложь, Истина);
		МенеджерXML.ДобавитьУзел(РодительXML, "emplINN",      Документ.ИНН);
		
		// Сотрудник: Дата рождения.
		МенеджерXML.ДобавитьУзел(РодительXML, "birthday", ОтпускПоУходу.ДатаРождения);
		
		// Ребенок: СНИЛС, ФИО, Дата рождения.
		МенеджерXML.ДобавитьУзел(РодительXML, "SNILSChild",      ОтпускПоУходу.РебенокСНИЛС, Истина, Истина);
		МенеджерXML.ДобавитьУзел(РодительXML, "patronimicChild", ОтпускПоУходу.РебенокОтчество, Истина, Истина);
		МенеджерXML.ДобавитьУзел(РодительXML, "nameChild",       ОтпускПоУходу.РебенокИмя);
		МенеджерXML.ДобавитьУзел(РодительXML, "surnameChild",    ОтпускПоУходу.РебенокФамилия);
		МенеджерXML.ДобавитьУзел(РодительXML, "birthdayChild",   ОтпускПоУходу.РебенокДатаРождения);
		
		// Прекращение отпуска по уходу.
		ПояснениеКПриказу = ?(ЗначениеЗаполнено(ОтпускПоУходу.ПояснениеКПриказу), ОтпускПоУходу.ПояснениеКПриказу,
			ОтпускПоУходу.НаименованиеПриказа);
		МенеджерXML.ДобавитьУзел(РодительXML, "holidType",     ОтпускПоУходу.ТипПриказаЧислом,      Ложь, Истина);
		Если ОтпускПоУходу.ТипПриказаЧислом = 4 Или ОтпускПоУходу.ТипПриказаЧислом = 5 Тогда
			МенеджерXML.ДобавитьУзел(РодительXML, "holidTypeInfo", ПояснениеКПриказу, Истина, Ложь);
		КонецЕсли;
		МенеджерXML.ДобавитьУзел(РодительXML, "holidNo",       ОтпускПоУходу.НомерПриказа,          Ложь, Истина);
		МенеджерXML.ДобавитьУзел(РодительXML, "holidDt",       ОтпускПоУходу.ДатаПриказа,           Ложь, Истина);
		МенеджерXML.ДобавитьУзел(РодительXML, "holidDtEx",     ОтпускПоУходу.ДатаПрекращенияОплаты, Ложь, Истина);
		// Наименование документа, подтверждающего прекращение обязательств
		МенеджерXML.ДобавитьУзел(РодительXML, "holidDocNum",   ОтпускПоУходу.НаименованиеПриказа);
		
	КонецЦикла;
	
	МенеджерXML.НачатьЗаписьВСтрокуXML(Ложь);
	Возврат МенеджерXML.СтрокаXML();
КонецФункции

Функция ТипСообщения() Экспорт
	Возврат 104;
КонецФункции

Процедура ПриЗаполненииПараметровОтправки(МассивСсылок, ТаблицаОтправки) Экспорт
	
	ИменаРеквизитовСтроки = "Ссылка, Номер, Дата, ФизическоеЛицо, Организация";
	ИменаРеквизитов = "Ссылка, Номер, Дата, ДатаОтправки, ФизическоеЛицо, Организация, ХранилищеXML, ПометкаУдаления, Проведен";
	Соответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Документ = КлючИЗначение.Значение;
		// Добавление строки отправки и заполнение представления.
		СтрокаОтправки = ТаблицаОтправки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтправки, Документ, ИменаРеквизитовСтроки);
		СтрокаОтправки.ТипСообщения = ТипСообщения();
		СтрокаОтправки.ТекстXML     = Документ.ХранилищеXML.Получить();
		СтрокаОтправки.Отправить    = Ложь;
		СтрокаОтправки.ШаблонОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось отправить уведомление о прекращении отпуска по уходу %1:%2';
				|en = 'Cannot send a notification to terminate child care leave %1:%2'"),
			СтрокаОтправки.ФизическоеЛицо,
			"%1");
		// Проверки и обновление вторичных данных документа перед отправкой.
		Если Документ.ПометкаУдаления Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиУдален();
			СтрокаОтправки.Результат = НСтр("ru = 'Документ помечен на удаление';
											|en = 'The document is marked for deletion'");
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.ДатаОтправки) Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОтправлен();
			Если НачалоДня(Документ.ДатаОтправки) <= ТекущаяДатаСеанса() Тогда
				Текст = НСтр("ru = 'Документ уже отправлен %1';
							|en = 'The document is already sent %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДЛФ=D"));
			Иначе
				Текст = НСтр("ru = 'Документ уже отправлен в %1';
							|en = 'The document is already sent to %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДФ=HH:mm"));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПредупреждение();
			ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, "");
			Если Не ДокументОбъект.ОтключитьПроверкиПроведения Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Проведение документа если требуется.
		ЕстьИзменения = ДокументОбъект.ОбновитьВторичныеДанные();
		СтрокаОтправки.Отправить = Истина;
		Если ЕстьИзменения Или Не ДокументОбъект.Проведен Тогда
			Попытка
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПроведен();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ЗаполнитьЗначенияСвойств(СтрокаОтправки, ДокументОбъект, ИменаРеквизитовСтроки);
				СтрокаОтправки.ТекстXML = ДокументОбъект.ХранилищеXML.Получить();
			Исключение
				СтрокаОтправки.Отправить = Ложь;
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОстановлен();
				СтрокаОтправки.ЗначениеРасшифровки = Документ.Ссылка;
				ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриПодготовкеВыбранныхДокументовКОтправке(МассивСсылок, ТаблицаОтправки) Экспорт
	// Действие не требуется.
КонецПроцедуры

// См. СЭДОФСС.ЗарегистрироватьНепосредственныйРезультатОтправкиДокумента.
Процедура ЗарегистрироватьРезультатОтправки(РезультатОтправки) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	// Сначала записывается отправляемый документ, т.к. его данные влияют на данные регистров (кэши).
	ИсходящийДокументОбъект = РезультатОтправки.Ссылка.ПолучитьОбъект();
	ИсходящийДокументОбъект.ДатаОтправки           = РезультатОтправки.ДатаОтправки;
	ИсходящийДокументОбъект.Страхователь           = РезультатОтправки.Страхователь;
	ИсходящийДокументОбъект.ИдентификаторСообщения = РезультатОтправки.ИдентификаторСообщения;
	СЭДОФСС.ЗаписатьДокумент(ИсходящийДокументОбъект, Истина, Ложь, РежимЗаписиДокумента.Запись);
	
	// Затем записывается транспортный документ, и при записи он запускает обновление регистров.
	Если ЗначениеЗаполнено(РезультатОтправки.ИдентификаторСообщения) Тогда
		Регистр = РегистрыСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком;
		Набор = Регистр.НачатьЗаписьНабора(РезультатОтправки.ИдентификаторСообщения, "");
		Если Набор.Количество() = 0 Тогда
			КорневаяЗапись = Набор.Добавить();
		Иначе
			КорневаяЗапись = Набор[0];
		КонецЕсли;
		Регистр.ЗаполнитьПоДокументу(КорневаяЗапись, ИсходящийДокументОбъект);
		КорневаяЗапись.ОтправленОператору          = РезультатОтправки.ОтправленоОператору;
		КорневаяЗапись.ДоставкаУспех               = РезультатОтправки.ДоставленоФонду;
		КорневаяЗапись.ДатаОтправкиОператору       = РезультатОтправки.ДатаОтправкиОператору;
		КорневаяЗапись.ДоставкаДата                = РезультатОтправки.ДатаОтправкиФонду;
		КорневаяЗапись.ДоставкаТекстОшибки         = РезультатОтправки.ТекстОшибки;
		КорневаяЗапись.ИдентификаторСообщения      = РезультатОтправки.ИдентификаторСообщения;
		КорневаяЗапись.ДоставкаИдентификаторПакета = РезультатОтправки.ИдентификаторПакета;
		Регистр.ЗавершитьЗаписьНабора(Набор);
	КонецЕсли;
	
	РезультатОтправки.Измененные.Добавить(ИсходящийДокументОбъект.Ссылка);
КонецПроцедуры

// См. СЭДОФСС.ЗагрузитьРезультатДоставкиСообщенияСЭДО.
Процедура ЗагрузитьРезультатДоставкиСообщения104(Страхователь, Сообщение, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Регистр = РегистрыСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком;
	Набор = Регистр.НачатьЗаписьНабора(Сообщение.Идентификатор, "");
	Если Набор.Количество() = 0 Тогда
		ИсходящийДокумент = НайтиПоРеквизиту("ИдентификаторСообщения", Сообщение.Идентификатор);
		Если ЗначениеЗаполнено(ИсходящийДокумент) Тогда
			КорневаяЗапись = Набор.Добавить();
			Регистр.ЗаполнитьПоДокументу(КорневаяЗапись, ИсходящийДокумент);
			КорневаяЗапись.ИдентификаторСообщения = Сообщение.Идентификатор;
		Иначе
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не найдена %1 с идентификатором сообщения ""%2""';
					|en = '%1 with message ID ""%2"" is not found'"),
				Метаданные.РегистрыСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком.ПредставлениеЗаписи,
				Сообщение.Идентификатор);
			СЭДОФСС.ОшибкаОбработки(Результат, ТекстОшибки);
			Регистр.ОтменитьЗаписьНабора(Набор);
			Возврат;
		КонецЕсли;
	Иначе
		КорневаяЗапись = Набор[0];
		ИсходящийДокумент = КорневаяЗапись.ИсходящийДокумент;
		Если Не ЗначениеЗаполнено(КорневаяЗапись.ИсходящийДокумент) Тогда
			ИсходящийДокумент = НайтиПоРеквизиту("ИдентификаторСообщения", Сообщение.Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
	КорневаяЗапись.ДоставкаУспех       = Сообщение.ДоставленоФонду;
	КорневаяЗапись.ДоставкаДата        = Сообщение.ДатаОтправкиФонду;
	КорневаяЗапись.ДоставкаТекстОшибки = Сообщение.ТекстОшибки;
	Регистр.ЗавершитьЗаписьНабора(Набор);
	
	Если ЗначениеЗаполнено(ИсходящийДокумент) И Не Сообщение.ДоставленоФонду Тогда
		ИсходящийДокументОбъект = ИсходящийДокумент.ПолучитьОбъект();
		ИсходящийДокументОбъект.ДатаОтправки = Сообщение.ДатаОтправкиФонду; // Пустая дата.
		СЭДОФСС.ЗаписатьДокумент(ИсходящийДокументОбъект, Истина, Ложь, РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаголовокФормыОтправкиСведенийВФСС() Экспорт
	Возврат НСтр("ru = 'Отправка уведомлений о прекращении отпусков по уходу за детьми через СЭДО';
				|en = 'Send notifications of the termination of child care leaves via EDI'");
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Переход на перечисление ОснованияПрекращенияПособийПоУходуЗаРебенком в рамках поддержки формата прямых выплат 1.7.7.
Процедура ЗаполнитьТипПриказа(ПараметрыОбновления = Неопределено) Экспорт
	ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Уведомление.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК Уведомление
	|ГДЕ
	|	Уведомление.ТипПриказа = ЗНАЧЕНИЕ(Перечисление.ОснованияПрекращенияПособийПоУходу.ПустаяСсылка)
	|	И Уведомление.УдалитьТипПриказа <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПустаяСсылка)";
	
	ИзмерениеОтбора = "Ссылка";
	ПространствоБлокировки = "Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления,
				ПространствоБлокировки,
				ИзмерениеОтбора,
				Выборка[ИзмерениеОтбора]) Тогда
			ОбработкаЗавершена = Ложь; // Документ заблокирован, требуется повторная обработка.
			Продолжить;
		КонецЕсли;
		
		УведомлениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если УведомлениеОбъект.УдалитьТипПриказа = Перечисления.СостоянияСотрудника.Работа Тогда
			УведомлениеОбъект.ТипПриказа = Перечисления.ОснованияПрекращенияПособийПоУходу.ПриказОДосрочномВыходеНаРаботу;
		ИначеЕсли УведомлениеОбъект.УдалитьТипПриказа = Перечисления.СостоянияСотрудника.Увольнение Тогда
			УведомлениеОбъект.ТипПриказа = Перечисления.ОснованияПрекращенияПособийПоУходу.ПриказОбУвольнении;
		КонецЕсли;
		
		СЭДОФСС.ЗаписатьДокумент(УведомлениеОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных(Объект) Экспорт
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты(Объект), ФиксируемыеТаблицы());
КонецФункции

// Определяет по данным документа признак фиксации.
//
// Параметры:
//   Документ - ДокументОбъект.СведенияОЗастрахованномЛицеФСС, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//   Булево
//
Функция ОбъектЗафиксирован(Документ) Экспорт
	Если Документ.ОтправлятьЧерезСЭДО И Не Документ.ПометкаУдаления И ЗначениеЗаполнено(Документ.ДатаОтправки) Тогда
		Возврат Истина;
	КонецЕсли;
	Если Документ.ОтправлятьЧерезПрямыеВыплаты И Не УведомлениеОтправленоЧерезПрямыеВыплаты(Документ.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстXML

Функция СведенияОПособиях(Документ)
	Результат = Новый ТаблицаЗначений;
	
	// Сведения о документе.
	Результат.Колонки.Добавить("ИдентификаторСтрокиУведомления");
	Результат.Колонки.Добавить("ИдентификаторСтрокиРеестра");
	Результат.Колонки.Добавить("ДатаПредставленияПакетаДокументов");
	
	// Сотрудник: СНИЛС, ИНН, ФИО.
	Результат.Колонки.Добавить("СотрудникСНИЛС");
	Результат.Колонки.Добавить("СотрудникИНН");
	Результат.Колонки.Добавить("СотрудникФамилия");
	Результат.Колонки.Добавить("СотрудникИмя");
	Результат.Колонки.Добавить("СотрудникОтчество");
	
	// Сотрудник: Удостоверение личности.
	Результат.Колонки.Добавить("УдостоверениеЛичностиКодМВД");
	Результат.Колонки.Добавить("УдостоверенияЛичностиСерияНомер");
	Результат.Колонки.Добавить("УдостоверенияЛичностиДатаВыдачи");
	Результат.Колонки.Добавить("УдостоверениеЛичностиКемВыдано");
	Результат.Колонки.Добавить("УдостоверениеЛичностиСрокДействия");
	
	// Сотрудник: Документ на проживание.
	Результат.Колонки.Добавить("РазрешениеНаПроживаниеКодМВД");
	Результат.Колонки.Добавить("РазрешениеНаПроживаниеСерияНомер");
	Результат.Колонки.Добавить("РазрешениеНаПроживаниеДатаВыдачи");
	
	// Сотрудник: Адрес регистрации.
	Результат.Колонки.Добавить("АдресРегистрацииКодФИАС");
	Результат.Колонки.Добавить("АдресРегистрацииКодКЛАДР");
	Результат.Колонки.Добавить("АдресРегистрацииРегион");
	Результат.Колонки.Добавить("АдресРегистрацииРайон");
	Результат.Колонки.Добавить("АдресРегистрацииГород");
	Результат.Колонки.Добавить("АдресРегистрацииНаселенныйПункт");
	Результат.Колонки.Добавить("АдресРегистрацииТерритория");
	Результат.Колонки.Добавить("АдресРегистрацииУлица");
	Результат.Колонки.Добавить("АдресРегистрацииДом");
	Результат.Колонки.Добавить("АдресРегистрацииКорпус");
	Результат.Колонки.Добавить("АдресРегистрацииСтроение");
	Результат.Колонки.Добавить("АдресРегистрацииКвартира");
	Результат.Колонки.Добавить("АдресРегистрацииИндекс");
	
	// Сотрудник: Телефон.
	Результат.Колонки.Добавить("ТелефонПолучателяПредставление");
	
	// Сотрудник: Адрес регистрации за пределами РФ.
	Результат.Колонки.Добавить("АдресРегистрацииЗаПределамиРФ");
	
	// Страхователь.
	Результат.Колонки.Добавить("НаименованиеСтрахователя");
	Результат.Колонки.Добавить("КПП");
	Результат.Колонки.Добавить("ИНН");
	
	// Сотрудник: Дата рождения.
	Результат.Колонки.Добавить("ДатаРождения");
	
	// Ребенок: СНИЛС, ФИО, Дата рождения.
	Результат.Колонки.Добавить("РебенокСНИЛС");
	Результат.Колонки.Добавить("РебенокФамилия");
	Результат.Колонки.Добавить("РебенокИмя");
	Результат.Колонки.Добавить("РебенокОтчество");
	Результат.Колонки.Добавить("РебенокДатаРождения");
	
	// Прекращение отпуска по уходу.
	Результат.Колонки.Добавить("ТипПриказаЧислом");
	Результат.Колонки.Добавить("НаименованиеПриказа");
	Результат.Колонки.Добавить("ПояснениеКПриказу");
	Результат.Колонки.Добавить("НомерПриказа");
	Результат.Колонки.Добавить("ДатаПриказа");
	Результат.Колонки.Добавить("ДатаПрекращенияОплаты");
	
	// Подготовка сведений шапки документа.
	СведенияОВидеДокумента = СЭДОФССПовтИсп.СведенияОВидеДокумента(Документ.УдостоверениеЛичностиВид);
	// ERR_1700: (Ф)Проверка формата серии и номера для документа Паспорт Российской федерации.
	// Шаблон должен соотвествовать: «99 99 999999», где 9 – любой цифровой символ.
	Если СведенияОВидеДокумента.ЭтоПаспортРФ Тогда
		Серия = Документ.УдостоверениеЛичностиСерия;
	Иначе
		Серия = УбратьПробелы(Документ.УдостоверениеЛичностиСерия);
	КонецЕсли;
	Номер = УбратьПробелы(Документ.УдостоверениеЛичностиНомер);
	УдостоверениеЛичностиКодМВД     = СведенияОВидеДокумента.КодМВД;
	УдостоверенияЛичностиСерияНомер = СокрЛП(Серия + " " + Номер);
	
	СведенияОВидеДокумента = СЭДОФССПовтИсп.СведенияОВидеДокумента(Документ.РазрешениеНаПроживаниеВид);
	// ERR_1700: (Ф)Проверка формата серии и номера для документа Паспорт Российской федерации.
	// Шаблон должен соотвествовать: «99 99 999999», где 9 – любой цифровой символ.
	Если СведенияОВидеДокумента.ЭтоПаспортРФ Тогда
		Серия = Документ.РазрешениеНаПроживаниеСерия;
	Иначе
		Серия = УбратьПробелы(Документ.РазрешениеНаПроживаниеСерия);
	КонецЕсли;
	Номер = УбратьПробелы(Документ.РазрешениеНаПроживаниеНомер);
	РазрешениеНаПроживаниеКодМВД     = СведенияОВидеДокумента.КодМВД;
	РазрешениеНаПроживаниеСерияНомер = СокрЛП(Серия + " " + Номер);
	
	АдресРегистрации = СтруктураАдреса(Документ, "АдресРегистрации");
	ТелефонПолучателя = КонтактнаяИнформацияБЗК.ПредставлениеТелефона(Документ.СотрудникТелефон, 30);
	
	ТипПриказаЧислом = Перечисления.ОснованияПрекращенияПособийПоУходу.ЗначениеЧислом(Документ.ТипПриказа);
	
	Для Каждого СтрокаТаблицы Из Документ.ПрекращаемыеЗаявления Цикл
		Запись = Результат.Добавить();
		
		// Сведения о документе.
		Запись.ИдентификаторСтрокиУведомления    = ИдентификаторСтрокиУведомления(Документ, СтрокаТаблицы);
		Запись.ИдентификаторСтрокиРеестра        = СтрокаТаблицы.ИдентификаторСтрокиРеестра;
		Запись.ДатаПредставленияПакетаДокументов = Документ.ДатаПредставленияПакетаДокументов;
		
		// Сотрудник: СНИЛС, ИНН, ФИО.
		Запись.СотрудникСНИЛС    = УбратьПробелы(Документ.СотрудникСНИЛС);
		Запись.СотрудникИНН      = Документ.СотрудникИНН;
		Запись.СотрудникФамилия  = Документ.СотрудникФамилия;
		Запись.СотрудникИмя      = Документ.СотрудникИмя;
		Запись.СотрудникОтчество = Документ.СотрудникОтчество;
		
		// Сотрудник: Удостоверение личности.
		Запись.УдостоверениеЛичностиКодМВД       = УдостоверениеЛичностиКодМВД;
		Запись.УдостоверенияЛичностиСерияНомер   = УдостоверенияЛичностиСерияНомер;
		Запись.УдостоверенияЛичностиДатаВыдачи   = Документ.УдостоверениеЛичностиДатаВыдачи;
		Запись.УдостоверениеЛичностиКемВыдано    = Документ.УдостоверениеЛичностиКемВыдан;
		Запись.УдостоверениеЛичностиСрокДействия = Документ.УдостоверениеЛичностиСрокДействия;
		
		// Сотрудник: Документ на проживание.
		Запись.РазрешениеНаПроживаниеКодМВД     = РазрешениеНаПроживаниеКодМВД;
		Запись.РазрешениеНаПроживаниеСерияНомер = РазрешениеНаПроживаниеСерияНомер;
		Запись.РазрешениеНаПроживаниеДатаВыдачи = Документ.РазрешениеНаПроживаниеДатаВыдачи;
		
		// Сотрудник: Адрес регистрации.
		Если ТипЗнч(АдресРегистрации) = Тип("Структура") Тогда
			Запись.АдресРегистрацииКодФИАС         = АдресРегистрации.КодФИАС;
			Запись.АдресРегистрацииКодКЛАДР        = АдресРегистрации.КодКЛАДР;
			Запись.АдресРегистрацииРегион          = АдресРегистрации.Регион;
			Запись.АдресРегистрацииРайон           = АдресРегистрации.Район;
			Запись.АдресРегистрацииГород           = АдресРегистрации.Город;
			Запись.АдресРегистрацииНаселенныйПункт = АдресРегистрации.НаселенныйПункт;
			Запись.АдресРегистрацииТерритория      = АдресРегистрации.Территория;
			Запись.АдресРегистрацииУлица           = АдресРегистрации.Улица;
			Запись.АдресРегистрацииДом             = АдресРегистрации.Дом;
			Запись.АдресРегистрацииКорпус          = АдресРегистрации.Корпус;
			Запись.АдресРегистрацииСтроение        = АдресРегистрации.Строение;
			Запись.АдресРегистрацииКвартира        = АдресРегистрации.Квартира;
			Запись.АдресРегистрацииИндекс          = АдресРегистрации.Индекс;
		КонецЕсли;
		
		// Сотрудник: Телефон.
		Запись.ТелефонПолучателяПредставление = ТелефонПолучателя;
		
		// Сотрудник: Адрес регистрации за пределами РФ.
		Если ТипЗнч(АдресРегистрации) = Тип("Строка") И ЗначениеЗаполнено(АдресРегистрации) Тогда
			Запись.АдресРегистрацииЗаПределамиРФ = АдресРегистрации;
		КонецЕсли;
		
		// Страхователь.
		Запись.НаименованиеСтрахователя = Документ.НаименованиеСтрахователя;
		Запись.КПП                      = Документ.КПП;
		Запись.ИНН                      = Документ.ИНН;
		
		// Сотрудник: Дата рождения.
		Запись.ДатаРождения = Документ.СотрудникДатаРождения;
		
		// Ребенок: СНИЛС, ФИО, Дата рождения.
		Запись.РебенокСНИЛС        = УбратьПробелы(СтрокаТаблицы.РебенокСНИЛС);
		Запись.РебенокФамилия      = СтрокаТаблицы.РебенокФамилия;
		Запись.РебенокИмя          = СтрокаТаблицы.РебенокИмя;
		Запись.РебенокОтчество     = СтрокаТаблицы.РебенокОтчество;
		Запись.РебенокДатаРождения = СтрокаТаблицы.РебенокДатаРождения;
		
		// Прекращение отпуска по уходу.
		Запись.ТипПриказаЧислом      = ТипПриказаЧислом;
		Запись.НаименованиеПриказа   = Документ.НаименованиеПриказа;
		Запись.ПояснениеКПриказу     = Документ.ПояснениеКПриказу;
		Запись.НомерПриказа          = Документ.НомерПриказа;
		Запись.ДатаПриказа           = Документ.ДатаПриказа;
		Запись.ДатаПрекращенияОплаты = Документ.ДатаПрекращенияОплаты;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ИдентификаторУведомления(Документ) Экспорт
	// Шаблон регулярного выражения: [N]_\d{10}_(19|20)[0-9]{2}_[0|1][0-9]_[0-3][0-9]_\d{4}:\d{1,2}.
	НомерСтрахователяФСС = УчетПособийСоциальногоСтрахованияКлиентСервер.РегистрационныйНомерДляОбменаФСС(Документ);
	ФорматДаты   = Формат(Документ.Дата,              "ДФ=yyyy_MM_dd");
	ФорматНомера = Формат(Документ.НомерВПределахДня, "ЧЦ=4; ЧН=; ЧВН=; ЧГ=");
	Возврат "N_" + НомерСтрахователяФСС + "_" + ФорматДаты + "_" + ФорматНомера;
КонецФункции

Функция ИдентификаторСтрокиУведомления(Документ, СтрокаТаблицы)
	Возврат Документ.ИдентификаторУведомления + ":" + Формат(СтрокаТаблицы.НомерСтроки, "ЧГ=");
КонецФункции

Функция УбратьПробелы(Строка, УбратьТире = Истина)
	Возврат СтроковыеФункцииБЗККлиентСервер.УбратьПробелы(Строка, УбратьТире);
КонецФункции

// Возвращает: Структуру - если удалось определить идентификатор ФИАС, или Строку - представление адреса.
Функция СтруктураАдреса(Документ, ИмяРеквизитаАдрес)
	Адрес = Документ[ИмяРеквизитаАдрес];
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат "";
	КонецЕсли;
	// Коды адреса являются обязательными.
	ТекстОшибки = Неопределено;
	КодыАдреса = ПрямыеВыплатыПособийСоциальногоСтрахования.КодыАдреса(Адрес, ТекстОшибки);
	Если КодыАдреса = Неопределено Тогда
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки, Документ, ИмяРеквизитаАдрес);
		Возврат "";
	КонецЕсли;
	Если СтрДлина(КодыАдреса.КодКЛАДР) = 16 Тогда
		КодыАдреса.КодКЛАДР = "0" + КодыАдреса.КодКЛАДР;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КодыАдреса.КодКЛАДР)
		И Не ЗначениеЗаполнено(КодыАдреса.ИдентификаторОбъектаФИАС) Тогда
		Возврат РаботаСАдресами.СведенияОбАдресе(Адрес).Представление;
	КонецЕсли;
	// Остальные поля не являются обязательными.
	Структура         = КонтактнаяИнформацияБЗК.СведенияОбАдресеСТипами(Адрес);
	СтруктураКорпусов = КонтактнаяИнформацияБЗК.СтруктураКорпусов(Структура, Ложь);
	Корпус            = КонтактнаяИнформацияБЗК.ПредставлениеКорпусов(СтруктураКорпусов, 30);
	ИменаПолей = "Индекс, Регион, Район, Город, НаселенныйПункт, Территория, Улица, Дом, Корпус, Строение, Квартира";
	СтруктураАдреса = КонтактнаяИнформацияБЗК.СвернутьСведенияОбАдресе(Структура, ИменаПолей);
	СтруктураАдреса.Вставить("Корпус",   Корпус);
	СтруктураАдреса.Вставить("КодФИАС",  КодыАдреса.ИдентификаторОбъектаФИАС);
	СтруктураАдреса.Вставить("КодКЛАДР", КодыАдреса.КодКЛАДР);
	Возврат СтруктураАдреса;
КонецФункции

#КонецОбласти

#Область ПриЗаполненииПараметровОтправки

Функция ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключенияПриПроведении)
	СтрокаОтправки.Ошибки = ПолучитьСообщенияПользователю(Истина);
	
	Количество = СтрокаОтправки.Ошибки.Количество();
	Если Количество = 1 Тогда
		СтрокаОтправки.Результат = СтрокаОтправки.Ошибки[0].Текст;
	ИначеЕсли Количество > 1 Тогда
		СтрокаОтправки.Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 ошибка заполнения;;%1 ошибки заполнения;%1 ошибок заполнения;';
				|en = ';%1 filling error;;%1 filling errors;%1 filling errors;'"),
			Количество);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстИсключенияПриПроведении) Тогда
		Если СтрокаОтправки.Результат = "" Тогда
			СтрокаОтправки.Результат = СтрШаблон(НСтр("ru = 'Ошибка проведения: %1';
														|en = 'Posting error: %1'"), ТекстИсключенияПриПроведении);
		Иначе
			СтрокаОтправки.Результат = СтрокаОтправки.Результат + ";" + Символы.ПС + СтрШаблон(НСтр("ru = 'И ошибка проведения: %1';
																									|en = 'And posting error: %1'"), ТекстИсключенияПриПроведении);
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти

// Находит документ "Уведомление о прекращении отпуска по уходу за ребенком" по документу-основанию и возвращает
// значения его реквизитов.
//
// Параметры:
//   ДокументОснование - ОпределяемыйТип.ДокументыОснованияУведомлениеОПрекращенииОтпускаПоУходуЗаРебенком - Основание уведомления.
//   ИменаРеквизитов - Строка - Имена реквизитов заявления, через запятую.
//
// Возвращаемое значение:
//   Неопределено - Если документ не найден.
//   ВыборкаИзРезультатаЗапроса - Если документ найден.
//
Функция НайтиУведомлениеПоОснованию(ДокументОснование, ИменаРеквизитов = "Ссылка") Экспорт
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Новый Структура(ИменаРеквизитов);
	КонецЕсли;
	
	Отбор = Новый Структура("ДокументОснование", ДокументОснование);
	
	Запрос = ЗапросПоДокументу(Отбор, ИменаРеквизитов, Истина, Неопределено);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Новый Структура(ИменаРеквизитов);
КонецФункции

// Находит документ "Уведомление о прекращении отпуска по уходу за ребенком" по документу-основанию и возвращает
// значения его реквизитов.
//
// Параметры:
//   ДокументОснование - ОпределяемыйТип.ДокументыОснованияУведомлениеОПрекращенииОтпускаПоУходуЗаРебенком - Основание уведомления.
//   ИменаРеквизитов - Строка - Имена реквизитов заявления, через запятую.
//
// Возвращаемое значение:
//   Неопределено - Если документ не найден.
//   ВыборкаИзРезультатаЗапроса - Если документ найден.
//
Функция НайтиУведомленияПоОснованию(ДокументОснование, ИменаРеквизитов = "Ссылка") Экспорт
	Отбор = Новый Структура("ДокументОснование", ДокументОснование);
	Запрос = ЗапросПоДокументу(Отбор, ИменаРеквизитов, Истина, Неопределено);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Возвращает признак заполненности определяемого типа ДокументыОснованияУведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.
//
// Возвращаемое значение:
//   Булево - Признак заполненности определяемого типа ДокументыОснованияУведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.
//
Функция ИспользоватьЗаполнениеПоОснованию() Экспорт
	МассивТипов = Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.Реквизиты.ДокументОснование.Тип.Типы();
	ТипНеЗаполнен = (МассивТипов.Количество() = 1 И МассивТипов[0] = Тип("Строка"));
	Возврат Не ТипНеЗаполнен;
КонецФункции

// Возвращает запрос по документу с отборам и указанными полями.
Функция ЗапросПоДокументу(Отбор, Поля, ВыбратьПервый, Порядок)
	Запрос = Новый Запрос;
	
	Если Порядок = Неопределено Тогда
		Если ВыбратьПервый Тогда
			Порядок = "ПометкаУдаления ВОЗР, Дата УБЫВ, " + Поля;
		Иначе
			Порядок = Поля;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыбратьПервый Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	&ИменаПолей КАК ИменаПолей
		|ИЗ
		|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК Таблица
		|ГДЕ
		|	&Условия
		|
		|УПОРЯДОЧИТЬ ПО
		|	&ПорядокЗаписей";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&ИменаПолей КАК ИменаПолей
		|ИЗ
		|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК Таблица
		|ГДЕ
		|	&Условия
		|
		|УПОРЯДОЧИТЬ ПО
		|	&ПорядокЗаписей";
	КонецЕсли;
	
	ФрагментыУсловий = Новый Массив;
	Для Каждого КлючИЗначение Из Отбор Цикл
		ПолеОтбора = КлючИЗначение.Ключ;
		ЗначениеОтбора = КлючИЗначение.Значение;
		Запрос.УстановитьПараметр(ПолеОтбора, ЗначениеОтбора);
		Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
			ФрагментыУсловий.Добавить("Таблица." + ПолеОтбора + " В (&" + ПолеОтбора + ")");
		Иначе
			ФрагментыУсловий.Добавить("Таблица." + ПолеОтбора + " = &" + ПолеОтбора + "");
		КонецЕсли;
	КонецЦикла;
	Если ФрагментыУсловий.Количество() > 0 Тогда
		ТекстУсловий = "ГДЕ
		|	" + СтрСоединить(ФрагментыУсловий, Символы.ПС + Символы.Таб + "И ");
	Иначе
		ТекстУсловий = "";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"ГДЕ
		|	&Условия",
		ТекстУсловий);
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ИменаПолей КАК ИменаПолей",
		Поля);
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ПорядокЗаписей",
		Порядок);
	
	Возврат Запрос;
КонецФункции

// Объект можно изменять если он не использован в реестрах, отправленных в ФСС.
Функция УведомлениеОтправленоЧерезПрямыеВыплаты(Ссылка) Экспорт
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уведомление", Ссылка);
	Запрос.УстановитьПараметр("Статусы", Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.СтатусыНеПозволяющиеРедактироватьДокументы());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиРеестров.Ссылка КАК Реестр,
	|	ШапкаРеестра.СтатусДокумента КАК СтатусРеестра
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК СтрокиРеестров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК ШапкаРеестра
	|		ПО (СтрокиРеестров.ПервичныйДокумент = &Уведомление)
	|			И СтрокиРеестров.Ссылка = ШапкаРеестра.Ссылка
	|			И (ШапкаРеестра.СтатусДокумента В (&Статусы))";
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

Функция ЗапросПоЗаявлениямИОтветам(Уведомление, Сотрудник, ДатаПрекращенияОплаты)
	СтатусыОтправкиРеестра = Новый Массив;
	СтатусыОтправкиРеестра.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ВРаботе);
	СтатусыОтправкиРеестра.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.Подготовлен);
	СтатусыОтправкиРеестра.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПринятФСС);
	СтатусыОтправкиРеестра.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПереданВФСС);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаПрекращенияОплаты", ДатаПрекращенияОплаты);
	Запрос.УстановитьПараметр("ЕжемесячноеПособиеПоУходуЗаРебенком", Перечисления.ПособияНазначаемыеФСС.ЕжемесячноеПособиеПоУходуЗаРебенком);
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	Запрос.УстановитьПараметр("СтатусыОтправкиРеестра", СтатусыОтправкиРеестра);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заявления.Ссылка КАК Заявление,
	|	Заявления.ИдентификаторСтрокиОснования КАК ИдентификаторСтрокиОснования,
	|	Заявления.ДокументОснование КАК ДокументОснование,
	|	Заявления.Дата КАК ДатаСозданияЗаявления,
	|	ЕСТЬNULL(ДокументОснованиеДанныеОДетях.Ребенок, НЕОПРЕДЕЛЕНО) КАК Ребенок,
	|	Заявления.ФамилияРебенка КАК РебенокФамилия,
	|	Заявления.ИмяРебенка КАК РебенокИмя,
	|	Заявления.ОтчествоРебенка КАК РебенокОтчество,
	|	Заявления.СНИЛСРебенка КАК РебенокСНИЛС,
	|	Заявления.ДатаРожденияРебенка КАК РебенокДатаРождения,
	|	ШапкаРеестра.ИдентификаторФСС КАК ИдентификаторРеестра,
	|	СтрокиРеестра.НомерСтроки КАК НомерСтрокиРеестра,
	|	ШапкаРеестра.Дата КАК ДатаОтправкиЗаявления,
	|	НЕ ПрекращаемыеЗаявления.Ссылка ЕСТЬ NULL КАК ЕстьДругоеУведомление
	|ПОМЕСТИТЬ ВсеЗаявления
	|ИЗ
	|	Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК Заявления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК СтрокиРеестра
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК ШапкаРеестра
	|			ПО СтрокиРеестра.Ссылка = ШапкаРеестра.Ссылка
	|		ПО Заявления.Ссылка = СтрокиРеестра.Заявление
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ПрекращаемыеЗаявления КАК ПрекращаемыеЗаявления
	|		ПО Заявления.Ссылка = ПрекращаемыеЗаявления.Заявление
	|			И (ПрекращаемыеЗаявления.Ссылка <> &Уведомление)
	|			И (НЕ ПрекращаемыеЗаявления.Ссылка.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументОтпускПоУходуЗаРебенкомДанныеОДетях КАК ДокументОснованиеДанныеОДетях
	|		ПО Заявления.ДокументОснование = ДокументОснованиеДанныеОДетях.Ссылка
	|			И Заявления.ИдентификаторСтрокиОснования = ДокументОснованиеДанныеОДетях.ИдентификаторСтроки
	|ГДЕ
	|	Заявления.Сотрудник = &Сотрудник
	|	И Заявления.ВидПособия = &ЕжемесячноеПособиеПоУходуЗаРебенком
	|	И Заявления.ДатаОкончанияОтпускаПоУходуЗаРебенком >= &ДатаПрекращенияОплаты
	|	И Заявления.ДатаНачалаОтпускаПоУходуЗаРебенком <= &ДатаПрекращенияОплаты
	|	И ШапкаРеестра.СтатусДокумента В(&СтатусыОтправкиРеестра)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтветНаЗапросФСС.Ссылка КАК ОтветНаЗапрос,
	|	ОтветНаЗапросФСС.Ребенок КАК Ребенок,
	|	ОтветНаЗапросФСС.РебенокФамилия КАК РебенокФамилия,
	|	ОтветНаЗапросФСС.РебенокИмя КАК РебенокИмя,
	|	ОтветНаЗапросФСС.РебенокОтчество КАК РебенокОтчество,
	|	ОтветНаЗапросФСС.РебенокДатаРождения КАК РебенокДатаРождения,
	|	ОтветНаЗапросФСС.РебенокСНИЛС КАК РебенокСНИЛС,
	|	ЕСТЬNULL(РегистрацияШапкиУведомления.Состояние, НЕОПРЕДЕЛЕНО) КАК СостояниеУведомления,
	|	ЕСТЬNULL(РегистрацияШапкиУведомления.ДоставкаДата, ДАТАВРЕМЯ(1, 1, 1)) КАК УведомлениеДатаОтправкиФонду,
	|	ЕСТЬNULL(РегистрацияШапкиУведомления.ДатаОтправкиОператору, ДАТАВРЕМЯ(1, 1, 1)) КАК УведомлениеДатаОтправкиОператору,
	|	РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.РегистрацияНомерРеестра КАК ИдентификаторРеестра,
	|	ОтветНаЗапросФСС.ДатаОтправки КАК ДатаОтправкиОтветаНаЗапрос,
	|	НЕ ПрекращаемыеЗаявления.Ссылка ЕСТЬ NULL КАК ЕстьДругоеУведомление
	|ПОМЕСТИТЬ ВсеОтветы
	|ИЗ
	|	Документ.ОтветНаЗапросФССДляРасчетаПособия КАК ОтветНаЗапросФСС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК РегистрацииОтветовНаЗапросыФССДляРасчетаПособий
	|		ПО ОтветНаЗапросФСС.Ссылка = РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ИсходящийДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ПрекращаемыеЗаявления КАК ПрекращаемыеЗаявления
	|		ПО ОтветНаЗапросФСС.Ссылка = ПрекращаемыеЗаявления.ОтветНаЗапрос
	|			И (ПрекращаемыеЗаявления.Ссылка <> &Уведомление)
	|			И (НЕ ПрекращаемыеЗаявления.Ссылка.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком КАК РегистрацияШапкиУведомления
	|		ПО (ПрекращаемыеЗаявления.Ссылка = РегистрацияШапкиУведомления.ИсходящийДокумент)
	|			И (РегистрацияШапкиУведомления.ИсходящийНомерСтроки = 0)
	|ГДЕ
	|	ОтветНаЗапросФСС.Сотрудник = &Сотрудник
	|	И ОтветНаЗапросФСС.ВидПособия = &ЕжемесячноеПособиеПоУходуЗаРебенком
	|	И ОтветНаЗапросФСС.ОтпускПоУходуДатаНачала <= &ДатаПрекращенияОплаты
	|	И ОтветНаЗапросФСС.ОтпускПоУходуДатаОкончания >= &ДатаПрекращенияОплаты
	|	И ОтветНаЗапросФСС.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
	|	И ВЫБОР
	|			КОГДА РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.РегистрацияИдентификатор = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.Зарегистрирован
	|		КОНЕЦ";
	
	Если СЭДОФСС.ВидимостьПоляРодственник() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ДокументОтпускПоУходуЗаРебенкомДанныеОДетях",
			"Документ.ОтпускПоУходуЗаРебенком.ДанныеОДетях");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ЕСТЬNULL(ДокументОснованиеДанныеОДетях.Ребенок, НЕОПРЕДЕЛЕНО) КАК Ребенок",
			"НЕОПРЕДЕЛЕНО КАК Ребенок");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ЛЕВОЕ СОЕДИНЕНИЕ ДокументОтпускПоУходуЗаРебенкомДанныеОДетях КАК ДокументОснованиеДанныеОДетях",
			"");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ПО Заявления.ДокументОснование = ДокументОснованиеДанныеОДетях.Ссылка",
			"");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И Заявления.ИдентификаторСтрокиОснования = ДокументОснованиеДанныеОДетях.ИдентификаторСтроки",
			"");
	КонецЕсли;
	
	Возврат Запрос;
КонецФункции

Функция ДанныеОДетях(Уведомление, Сотрудник, ФизическоеЛицо, ДатаПрекращенияОплаты) Экспорт
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = ЗапросПоЗаявлениямИОтветам(Уведомление, Сотрудник, ДатаПрекращенияОплаты);
	Результат = Запрос.Выполнить();
	Таблицы      = Запрос.МенеджерВременныхТаблиц.Таблицы;
	ВсеЗаявления = Таблицы["ВсеЗаявления"].ПолучитьДанные().Выгрузить();
	ВсеОтветы    = Таблицы["ВсеОтветы"].ПолучитьДанные().Выгрузить();
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	// Требуется:
	// 1. Сопоставить строки по детям.
	// 2. По каждому ребенку среди всех строк найти самую последнюю.
	// Если есть и заявление и уведомление, то найти среди них последнее.
	ДанныеОДетях        = Новый ТаблицаЗначений;
	МетаданныеДокумента = Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком;
	РеквизитыТЧ         = МетаданныеДокумента.ТабличныеЧасти.ПрекращаемыеЗаявления.Реквизиты;
	Для Каждого РеквизитТЧ Из РеквизитыТЧ Цикл
		ДанныеОДетях.Колонки.Добавить(РеквизитТЧ.Имя, РеквизитТЧ.Тип);
	КонецЦикла;
	ОписаниеТипаДатаВремя = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	ДанныеОДетях.Колонки.Добавить("ЕстьДругоеУведомление",      Новый ОписаниеТипов("Булево"));
	ДанныеОДетях.Колонки.Добавить("ДатаСозданияЗаявления",      ОписаниеТипаДатаВремя);
	ДанныеОДетях.Колонки.Добавить("ДатаОтправкиЗаявления",      ОписаниеТипаДатаВремя);
	ДанныеОДетях.Колонки.Добавить("ДатаОтправкиОтветаНаЗапрос", ОписаниеТипаДатаВремя);
	// Для быстрого поиска используется соответствие и функция получения ключей для поиска родственников.
	ПоискДанныхОДетях = Новый Соответствие;
	Родственник = Новый Структура("ФИО, Фамилия, Имя, Отчество, ДатаРождения, СНИЛС, КодСвязи");
	// Частый случай - когда всего одна запись. Для первой записи можно пропускать поиск в кэше.
	ПерваяЗапись = Истина;
	
	// Регистрация заявлений.
	Для Каждого СтрокаЗаявления Из ВсеЗаявления Цикл
		Идентификатор = СтрокаЗаявления.ИдентификаторРеестра + ":" + Формат(СтрокаЗаявления.НомерСтрокиРеестра, "ЧГ=");
		// Подготовка ключей для быстрого поиска родственника.
		Родственник.Фамилия      = СтрокаЗаявления.РебенокФамилия;
		Родственник.Имя          = СтрокаЗаявления.РебенокИмя;
		Родственник.Отчество     = СтрокаЗаявления.РебенокОтчество;
		Родственник.ДатаРождения = СтрокаЗаявления.РебенокДатаРождения;
		Родственник.СНИЛС        = СтрокаЗаявления.РебенокСНИЛС;
		Родственник.ФИО          = СокрЛП(Родственник.Фамилия + " " + Родственник.Имя + " " + Родственник.Отчество);
		Ключи = ОбменЛисткамиНетрудоспособностиФСС.КлючиПоискаРодственника(Родственник);
		Если ЗначениеЗаполнено(СтрокаЗаявления.Ребенок) Тогда
			Ключи.Вставить(0, СтрокаЗаявления.Ребенок);
		КонецЕсли;
		// Поиск этого родственника среди ранее обработанных документов.
		ДанныеНайдены = Ложь;
		Если Не ПерваяЗапись Тогда
			Для Каждого Ключ Из Ключи Цикл
				ДанныеОРебенке = ПоискДанныхОДетях[Ключ];
				Если ДанныеОРебенке <> Неопределено Тогда
					ДанныеНайдены = Истина;
					// Обновление данных родственника.
					Если ДанныеОРебенке.ДатаОтправкиЗаявления < СтрокаЗаявления.ДатаОтправкиЗаявления
						Или (ДанныеОРебенке.ДатаОтправкиЗаявления = СтрокаЗаявления.ДатаОтправкиЗаявления
							И ДанныеОРебенке.ДатаСозданияЗаявления < СтрокаЗаявления.ДатаСозданияЗаявления) Тогда
							ДанныеОРебенке.Заявление             = СтрокаЗаявления.Заявление;
							ДанныеОРебенке.ДатаОтправкиЗаявления = СтрокаЗаявления.ДатаОтправкиЗаявления;
							ДанныеОРебенке.ДатаСозданияЗаявления = СтрокаЗаявления.ДатаСозданияЗаявления;
							ДанныеОРебенке.РебенокФамилия        = СтрокаЗаявления.РебенокФамилия;
							ДанныеОРебенке.РебенокИмя            = СтрокаЗаявления.РебенокИмя;
							ДанныеОРебенке.РебенокОтчество       = СтрокаЗаявления.РебенокОтчество;
							Если ЗначениеЗаполнено(СтрокаЗаявления.Ребенок) Тогда
								ДанныеОРебенке.Ребенок = СтрокаЗаявления.Ребенок;
							КонецЕсли;
							Если ЗначениеЗаполнено(СтрокаЗаявления.РебенокСНИЛС) Тогда
								ДанныеОРебенке.РебенокСНИЛС = СтрокаЗаявления.РебенокСНИЛС;
							КонецЕсли;
							Если ЗначениеЗаполнено(СтрокаЗаявления.РебенокДатаРождения) Тогда
								ДанныеОРебенке.РебенокДатаРождения = СтрокаЗаявления.РебенокДатаРождения;
							КонецЕсли;
							Если СтрокаЗаявления.ЕстьДругоеУведомление Тогда
								ДанныеОРебенке.ЕстьДругоеУведомление = Истина;
							КонецЕсли;
							ДанныеОРебенке.ИдентификаторСтрокиРеестра = Идентификатор;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Добавление данных родственника.
		Если Не ДанныеНайдены Тогда
			ПерваяЗапись = Ложь;
			ДанныеОРебенке = ДанныеОДетях.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеОРебенке, СтрокаЗаявления);
			ДанныеОРебенке.ИдентификаторСтрокиРеестра = Идентификатор;
		КонецЕсли;
		// Регистрация ключей для дальнейшего быстрого поиска родственника.
		Для Каждого Ключ Из Ключи Цикл
			ПоискДанныхОДетях.Вставить(Ключ, ДанныеОРебенке);
		КонецЦикла;
	КонецЦикла;
	
	// Регистрация заявлений.
	Для Каждого СтрокаОтвета Из ВсеОтветы Цикл
		Идентификатор = СтрокаОтвета.ИдентификаторРеестра + ":1";
		// Подготовка ключей для быстрого поиска родственника.
		Родственник.Фамилия      = СтрокаОтвета.РебенокФамилия;
		Родственник.Имя          = СтрокаОтвета.РебенокИмя;
		Родственник.Отчество     = СтрокаОтвета.РебенокОтчество;
		Родственник.ДатаРождения = СтрокаОтвета.РебенокДатаРождения;
		Родственник.СНИЛС        = СтрокаОтвета.РебенокСНИЛС;
		Родственник.ФИО          = СокрЛП(Родственник.Фамилия + " " + Родственник.Имя + " " + Родственник.Отчество);
		Ключи = ОбменЛисткамиНетрудоспособностиФСС.КлючиПоискаРодственника(Родственник);
		Если ЗначениеЗаполнено(СтрокаОтвета.Ребенок) Тогда
			Ключи.Вставить(0, СтрокаОтвета.Ребенок);
		КонецЕсли;
		// Поиск этого родственника среди ранее обработанных документов.
		ДанныеНайдены = Ложь;
		Если Не ПерваяЗапись Тогда
			Для Каждого Ключ Из Ключи Цикл
				ДанныеОРебенке = ПоискДанныхОДетях[Ключ];
				Если ДанныеОРебенке <> Неопределено Тогда
					ДанныеНайдены = Истина;
					// Обновление данных родственника.
					Если ЭтоПозднийОтветНаЗапрос(ДанныеОРебенке, СтрокаОтвета) Тогда
						ДанныеОРебенке.ОтветНаЗапрос              = СтрокаОтвета.ОтветНаЗапрос;
						ДанныеОРебенке.ДатаОтправкиОтветаНаЗапрос = СтрокаОтвета.ДатаОтправкиОтветаНаЗапрос;
						ДанныеОРебенке.РебенокФамилия             = СтрокаОтвета.РебенокФамилия;
						ДанныеОРебенке.РебенокИмя                 = СтрокаОтвета.РебенокИмя;
						ДанныеОРебенке.РебенокОтчество            = СтрокаОтвета.РебенокОтчество;
						Если ЗначениеЗаполнено(СтрокаОтвета.Ребенок) Тогда
							ДанныеОРебенке.Ребенок = СтрокаОтвета.Ребенок;
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаОтвета.РебенокСНИЛС) Тогда
							ДанныеОРебенке.РебенокСНИЛС = СтрокаОтвета.РебенокСНИЛС;
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаОтвета.РебенокДатаРождения) Тогда
							ДанныеОРебенке.РебенокДатаРождения = СтрокаОтвета.РебенокДатаРождения;
						КонецЕсли;
						Если Не ЗначениеЗаполнено(ДанныеОРебенке.Заявление)
							Или ДанныеОРебенке.ДатаОтправкиЗаявления < СтрокаОтвета.ДатаОтправкиОтветаНаЗапрос Тогда
							ДанныеОРебенке.ИдентификаторСтрокиРеестра = Идентификатор;
						КонецЕсли;
						Если СтрокаОтвета.ЕстьДругоеУведомление
							И (Не ЗначениеЗаполнено(СтрокаОтвета.СостояниеУведомления)
								Или СтрокаОтвета.СостояниеУведомления = Перечисления.СостоянияДокументаСЭДОФСС.ВПроцессеПодготовки
								Или СтрокаОтвета.СостояниеУведомления = Перечисления.СостоянияДокументаСЭДОФСС.ПодготовленКОтправке
								Или СтрокаОтвета.СостояниеУведомления = Перечисления.СостоянияДокументаСЭДОФСС.Принят
								Или (СтрокаОтвета.СостояниеУведомления = Перечисления.СостоянияДокументаСЭДОФСС.ОтправленОператору
									И СтрокаОтвета.УведомлениеДатаОтправкиОператору < НачалоДня(ТекущаяДатаСеанса() - 86400*2))
								Или (СтрокаОтвета.СостояниеУведомления = Перечисления.СостоянияДокументаСЭДОФСС.Отправлен
									И СтрокаОтвета.УведомлениеДатаОтправкиФонду < НачалоДня(ТекущаяДатаСеанса() - 86400*2))) Тогда
							ДанныеОРебенке.ЕстьДругоеУведомление = Истина;
						КонецЕсли;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Добавление данных родственника.
		Если Не ДанныеНайдены Тогда
			ПерваяЗапись = Ложь;
			ДанныеОРебенке = ДанныеОДетях.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеОРебенке, СтрокаОтвета, , "ЕстьДругоеУведомление");
			ДанныеОРебенке.ИдентификаторСтрокиРеестра = Идентификатор;
			Если СтрокаОтвета.ЕстьДругоеУведомление
				И (Не ЗначениеЗаполнено(СтрокаОтвета.СостояниеУведомления)
					Или СтрокаОтвета.СостояниеУведомления = Перечисления.СостоянияДокументаСЭДОФСС.ВПроцессеПодготовки
					Или СтрокаОтвета.СостояниеУведомления = Перечисления.СостоянияДокументаСЭДОФСС.ПодготовленКОтправке
					Или СтрокаОтвета.СостояниеУведомления = Перечисления.СостоянияДокументаСЭДОФСС.Принят
					Или (СтрокаОтвета.СостояниеУведомления = Перечисления.СостоянияДокументаСЭДОФСС.ОтправленОператору
						И СтрокаОтвета.УведомлениеДатаОтправкиОператору < НачалоДня(ТекущаяДатаСеанса() - 86400*2))
					Или (СтрокаОтвета.СостояниеУведомления = Перечисления.СостоянияДокументаСЭДОФСС.Отправлен
						И СтрокаОтвета.УведомлениеДатаОтправкиФонду < НачалоДня(ТекущаяДатаСеанса() - 86400*2))) Тогда
				ДанныеОРебенке.ЕстьДругоеУведомление = Истина;
			КонецЕсли;
		КонецЕсли;
		// Регистрация ключей для дальнейшего быстрого поиска родственника.
		Для Каждого Ключ Из Ключи Цикл
			ПоискДанныхОДетях.Вставить(Ключ, ДанныеОРебенке);
		КонецЦикла;
	КонецЦикла;
	
	// Определение ссылок родственников.
	Если СЭДОФСС.ВидимостьПоляРодственник() Тогда
		Фильтр = Новый Структура("Ребенок", ДанныеОДетях.Колонки.Ребенок.ТипЗначения.ПривестиЗначение());
		Найденные = ДанныеОДетях.НайтиСтроки(Фильтр);
		Если Найденные.Количество() > 0 Тогда
			Родственники = СЭДОФСС.ПустаяТаблицаРодственников();
			Родственники.Колонки.Добавить("ИндексИсходнойСтроки", Новый ОписаниеТипов("Число"));
			Для Каждого ДанныеОРебенке Из Найденные Цикл
				Родственник = Родственники.Добавить();
				Родственник.Фамилия      = ДанныеОРебенке.РебенокФамилия;
				Родственник.Имя          = ДанныеОРебенке.РебенокИмя;
				Родственник.Отчество     = ДанныеОРебенке.РебенокОтчество;
				Родственник.ДатаРождения = ДанныеОРебенке.РебенокДатаРождения;
				Родственник.СНИЛС        = ДанныеОРебенке.РебенокСНИЛС;
				Родственник.ФИО          = СокрЛП(Родственник.Фамилия + " " + Родственник.Имя + " " + Родственник.Отчество);
				Родственник.ИндексИсходнойСтроки = ДанныеОДетях.Индекс(ДанныеОРебенке);
			КонецЦикла;
			СЭДОФСС.ЗаполнитьСсылкиРодственников(ФизическоеЛицо, Родственники, Ложь);
			Для Каждого Родственник Из Родственники Цикл
				Если ЗначениеЗаполнено(Родственник.Ссылка) Тогда
					ДанныеОДетях[Родственник.ИндексИсходнойСтроки].Ребенок = Родственник.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеОДетях;
КонецФункции

Функция ЭтоПозднийОтветНаЗапрос(ДанныеОРебенке, СтрокаОтвета)
	Если ДанныеОРебенке.ДатаОтправкиОтветаНаЗапрос < СтрокаОтвета.ДатаОтправкиОтветаНаЗапрос Тогда
		Возврат Истина;
	ИначеЕсли ДанныеОРебенке.ДатаОтправкиОтветаНаЗапрос = СтрокаОтвета.ДатаОтправкиОтветаНаЗапрос
		И ЗначениеЗаполнено(СтрокаОтвета.ОтветНаЗапрос)
		И ДанныеОРебенке.ОтветНаЗапрос <> СтрокаОтвета.ОтветНаЗапрос Тогда
		Если Не ЗначениеЗаполнено(ДанныеОРебенке.ОтветНаЗапрос) Тогда
			Возврат Истина;
		Иначе
			ДанныеОРебенкеИдентификатор = Строка(ДанныеОРебенке.ОтветНаЗапрос.УникальныйИдентификатор());
			СтрокаОтветаИдентификатор = Строка(СтрокаОтвета.ОтветНаЗапрос.УникальныйИдентификатор());
			Если ДанныеОРебенкеИдентификатор < СтрокаОтветаИдентификатор Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ЕстьДокументыДляПрекращения(Сотрудник, ДатаПрекращенияОплаты) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = ЗапросПоЗаявлениямИОтветам(Неопределено, Сотрудник, ДатаПрекращенияОплаты);
	Запрос.МенеджерВременныхТаблиц = Неопределено;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВсеЗаявления", "");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВсеОтветы", "");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Заявления.Сотрудник = &Сотрудник",
		"Заявления.Сотрудник = &Сотрудник
		|	И ПрекращаемыеЗаявления.Ссылка ЕСТЬ NULL");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтветНаЗапросФСС.Сотрудник = &Сотрудник",
		"ОтветНаЗапросФСС.Сотрудник = &Сотрудник
		|	И ПрекращаемыеЗаявления.Ссылка ЕСТЬ NULL");
	Пакет = Запрос.ВыполнитьПакет();
	ЕстьЗаявления = Не Пакет[0].Пустой();
	ЕстьОтветы    = Не Пакет[1].Пустой();
	Возврат ЕстьЗаявления Или ЕстьОтветы;
КонецФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеТаблицы()
	ФиксируемыеТаблицы = Новый Структура;
	Возврат ФиксируемыеТаблицы;
КонецФункции

Функция ФиксируемыеРеквизиты(Объект)
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	// Реквизиты документа-основания.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "ДокументОснование";
	Шаблон.Используется        = ИспользоватьЗаполнениеПоОснованию() И ЗначениеЗаполнено(Объект.ДокументОснование);
	Шаблон.ИмяГруппы           = "Шапка";
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Организация");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Сотрудник");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ТипПриказа");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаПриказа");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НомерПриказа");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаПрекращенияОплаты");
	
	// Основные сведения об организации.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "Организация";
	Шаблон.ОснованиеЗаполнения = "ОсновныеСведения";
	Шаблон.Используется        = ЗначениеЗаполнено(Объект.Организация);
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НаименованиеСтрахователя");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИНН");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "КПП");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ТелефонСтрахователя");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "АдресЭлектроннойПочтыСтрахователя");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИдентификаторУведомления");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаПредставленияПакетаДокументов", Ложь);
	
	// Регистрационные сведения ФСС.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "Организация";
	Шаблон.ОснованиеЗаполнения = "РеквизитыФСС";
	Шаблон.ФиксацияГруппы      = Истина;
	Шаблон.Используется        = ЗначениеЗаполнено(Объект.Организация);
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НаименованиеТерриториальногоОрганаФСС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "РегистрационныйНомерСФР");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "РегномерСФРГоловнойОрганизации");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "РегистрационныйНомерФСС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "КодПодчиненностиФСС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДополнительныйКодФСС");
	
	// Роль подписанта Руководитель.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "Организация";
	Шаблон.ИмяГруппы           = "ПредставительСФР";
	Шаблон.ФиксацияГруппы      = Истина;
	Шаблон.Используется        = ЗначениеЗаполнено(Объект.Организация);
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПредставительСФР");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДолжностьПредставителяСФР");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОснованиеПодписиПредставителяСФР");
	
	// Отдельные кадровые данные.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "Сотрудник";
	Шаблон.ИмяГруппы           = "СотрудникКадровыеДанные";
	Шаблон.ФиксацияГруппы      = Ложь;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "СотрудникСНИЛС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "СотрудникИНН");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "СотрудникДатаРождения");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "СотрудникТелефон");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "АдресРегистрации");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "КодСтраныГражданства");
	
	// Кадровые данные: ФИО.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "Сотрудник";
	Шаблон.ИмяГруппы           = "СотрудникФИО";
	Шаблон.ФиксацияГруппы      = Истина;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "СотрудникФамилия");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "СотрудникИмя");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "СотрудникОтчество");
	
	// Кадровые данные: Удостоверение личности.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Сотрудник";
	Группа.ИмяГруппы           = "УдостоверениеЛичности";
	Группа.ФиксацияГруппы      = Истина;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиВид");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиСерия");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиНомер");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиДатаВыдачи");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиКемВыдан");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиСрокДействия");
	
	// Кадровые данные: Разрешение на проживание.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Сотрудник";
	Группа.ИмяГруппы           = "РазрешениеНаПроживание";
	Группа.ФиксацияГруппы      = Истина;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеВид");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеСерия");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеНомер");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеДатаВыдачи");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеСрокДействия");
	
	// Свойства типа приказа.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "ТипПриказа";
	Шаблон.ИмяГруппы           = "ТипПриказа";
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НаименованиеПриказа", Ложь);
	
	Шаблон.ОснованиеЗаполнения = "НаименованиеПриказа";
	Шаблон.ИмяГруппы           = "НаименованиеПриказа";
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПояснениеКПриказу", Ложь);
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

#КонецОбласти

#Область ПФ_MXL_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2021

Процедура ПриПечатиУведомления_2021(КонтекстПечати)
	ТабличныйДокумент = КонтекстПечати.ТабличныйДокумент;
	УправлениеПечатьюБЗК.УстановитьОтступ(ТабличныйДокумент, 0, 0, 0, 0);
	
	Запрос = ЗапросДляПечатиУведомления_2021(КонтекстПечати.МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Заявление) Тогда
			Продолжить;
		КонецЕсли;
		УправлениеПечатьюБЗК.ПередПечатьюОчередногоОбъекта(КонтекстПечати);
		
		СекцияШапка = КонтекстПечати.Макет.ПолучитьОбласть("Шапка");
		ВывестиУведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2021(СекцияШапка, Выборка);
		ТабличныйДокумент.Вывести(СекцияШапка);
		
		УправлениеПечатьюБЗК.ПослеПечатиОчередногоОбъекта(КонтекстПечати, Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросДляПечатиУведомления_2021(МассивСсылок)
	// Получаем запросом необходимые данные.
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ДатаНачала", ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаВступленияВСилуФорм2021Года());
	КадровыеДанныеПредставителя(Запрос);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументУведомление.Ссылка КАК Ссылка,
		|	ДокументУведомление.Дата КАК Дата,
		|	ТаблицаЗаявленияДокумента.Заявление КАК Заявление,
		|	ДокументУведомление.НаименованиеСтрахователя КАК НаименованиеСтрахователя,
		|	ДокументУведомление.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР,
		|	ДокументУведомление.РегномерСФРГоловнойОрганизации КАК РегномерСФРГоловнойОрганизации,
		|	ДокументУведомление.РегистрационныйНомерФСС КАК РегистрационныйНомерФСС,
		|	ДокументУведомление.КодПодчиненностиФСС КАК КодПодчиненностиФСС,
		|	ДокументУведомление.ИНН КАК ИНН,
		|	ДокументУведомление.КПП КАК КПП,
		|	ДокументУведомление.ДополнительныйКодФСС КАК ДополнительныйКодФСС,
		|	ДокументУведомление.НаименованиеТерриториальногоОрганаФСС КАК НаименованиеТерриториальногоОрганаФСС,
		|	ДокументУведомление.ТелефонСтрахователя КАК ТелефонСтрахователя,
		|	ДокументЗаявление.СНИЛСПолучателя КАК СНИЛСПолучателя,
		|	ДокументУведомление.АдресЭлектроннойПочтыСтрахователя КАК АдресЭлектроннойПочтыСтрахователя,
		|	ДокументУведомление.ТипПриказа КАК ТипПриказа,
		|	ДокументЗаявление.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДокументЗаявление.ФамилияПолучателя КАК ФамилияПолучателя,
		|	ДокументЗаявление.ИмяПолучателя КАК ИмяПолучателя,
		|	ДокументЗаявление.ОтчествоПолучателя КАК ОтчествоПолучателя,
		|	ДокументЗаявление.ФамилияЗаявителя КАК ФамилияЗаявителя,
		|	ДокументЗаявление.ОтчествоЗаявителя КАК ОтчествоЗаявителя,
		|	ДокументЗаявление.ИмяЗаявителя КАК ИмяЗаявителя,
		|	ДокументЗаявление.ДатаРожденияПолучателя КАК ДатаРожденияПолучателя,
		|	ДокументЗаявление.ИННПолучателя КАК ИННПолучателя,
		|	ДокументЗаявление.СерияДокументаУдостоверяющегоЛичностьПолучателя КАК СерияДокументаУдостоверяющегоЛичностьПолучателя,
		|	ДокументЗаявление.НомерДокументаУдостоверяющегоЛичностьПолучателя КАК НомерДокументаУдостоверяющегоЛичностьПолучателя,
		|	ДокументЗаявление.ДатаВыдачиДокументаУдостоверяющегоЛичностьПолучателя КАК ДатаВыдачиДокументаУдостоверяющегоЛичностьПолучателя,
		|	ДокументЗаявление.КемВыданДокументУдостоверяющийЛичностьПолучателя КАК КемВыданДокументУдостоверяющийЛичностьПолучателя,
		|	ДокументЗаявление.ДатаДействияДокументаУдостоверяющегоЛичностьПолучателя КАК ДатаДействияДокументаУдостоверяющегоЛичностьПолучателя,
		|	ДокументЗаявление.СерияДокументаНаПроживание КАК СерияДокументаНаПроживание,
		|	ДокументЗаявление.НомерДокументаНаПроживание КАК НомерДокументаНаПроживание,
		|	ДокументЗаявление.ДатаВыдачиДокументаНаПроживание КАК ДатаВыдачиДокументаНаПроживание,
		|	ВидДокументаУдостоверениеЛичности.КодМВД КАК КодУдостоверенияЛичности,
		|	ВидДокументаДокументНаПроживание.КодМВД КАК КодДокументаНаПроживание,
		|	ДокументЗаявление.АдресПолучателяРегистрации КАК АдресРегистрации,
		|	ДокументУведомление.ДатаПриказа КАК ДатаПриказа,
		|	ДокументУведомление.НомерПриказа КАК НомерПриказа,
		|	ДокументУведомление.ДатаПрекращенияОплаты КАК ДатаПрекращенияОплаты,
		|	КадровыеДанныеУполномоченных.ФИОПолные КАК ФИОУполномоченного,
		|	ДокументУведомление.ДолжностьПредставителяСФР КАК ДолжностьПредставителяСФР,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА Организации.НаименованиеСокращенное
		|		ИНАЧЕ ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК ОрганизацияНаименование
		|ИЗ
		|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК ДокументУведомление
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ПрекращаемыеЗаявления КАК ТаблицаЗаявленияДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ДокументЗаявление
		|			ПО ТаблицаЗаявленияДокумента.Заявление = ДокументЗаявление.Ссылка
		|		ПО (ТаблицаЗаявленияДокумента.Ссылка = ДокументУведомление.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидДокументаУдостоверениеЛичности
		|		ПО (ТаблицаЗаявленияДокумента.Заявление.ВидДокументаУдостоверяющегоЛичностьПолучателя = ВидДокументаУдостоверениеЛичности.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидДокументаДокументНаПроживание
		|		ПО (ТаблицаЗаявленияДокумента.Заявление.ВидДокументаНаПроживание = ВидДокументаДокументНаПроживание.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеУполномоченных
		|		ПО ДокументУведомление.ПредставительСФР = КадровыеДанныеУполномоченных.ФизическоеЛицо
		|			И ДокументУведомление.Дата = КадровыеДанныеУполномоченных.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ДокументУведомление.Организация = Организации.Ссылка
		|ГДЕ
		|	ДокументУведомление.Ссылка В(&МассивСсылок)
		|	И ДокументУведомление.Дата >= &ДатаНачала
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Возврат Запрос;
КонецФункции

Функция ЗаполнитьВМакетеИныеСведения_2021(Макет, Выборка)
	
	НомерПриказа = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерПриказа, Истина, Истина);

	Если Выборка.ТипПриказа = Перечисления.ОснованияПрекращенияПособийПоУходу.ПриказОДосрочномВыходеНаРаботу Тогда
		
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтрЗаменить(Выборка.ДатаПриказа, ".",""), Макет, "ПриказОВыходеНаРаботуДата_", 8);
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(НомерПриказа, Макет, "ПриказОВыходеНаРаботуНомер_", 10);
		
	ИначеЕсли Выборка.ТипПриказа = Перечисления.ОснованияПрекращенияПособийПоУходу.ПриказОбУвольнении Тогда
				
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтрЗаменить(Выборка.ДатаПриказа, ".",""), Макет, "ПриказОбУвольненииДата_", 8);
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(НомерПриказа, Макет, "ПриказОбУвольненииНомер_", 10);
		
	ИначеЕсли Выборка.ТипПриказа = Перечисления.ОснованияПрекращенияПособийПоУходу.СвидетельствоОСмертиРебенка Тогда
		
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтрЗаменить(Выборка.ДатаПриказа, ".",""), Макет, "СвидетельствоОСмертиРебенкаДата_", 8);
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(НомерПриказа, Макет, "СвидетельствоОСмертиРебенкаНомер_", 10);
		
	Иначе 
		
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтрЗаменить(Выборка.ДатаПриказа, ".",""), Макет, "ИнойДокументПрекращенияДата_", 8);
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(НомерПриказа, Макет, "ИнойДокументПрекращенияНомер_", 10);
		
	КонецЕсли; 

КонецФункции

Процедура ВывестиУведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2021(Макет, Выборка)
	
	ДлиныСтрок = Новый Массив();
	ДлиныСтрок.Добавить(27);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(
		ВРег(Выборка.НаименованиеТерриториальногоОрганаФСС), ДлиныСтрок), Макет, "Наименование_ФСС_", 135);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(
		ВРег(Выборка.ОрганизацияНаименование), ДлиныСтрок), Макет, "ФИО_Заявителя_", 135);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.РегистрационныйНомерФСС, Макет, "РегистрационныйНомер_", 10);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.ДополнительныйКодФСС, Макет, "ДополнительныйКод_", 10);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КодПодчиненностиФСС, Макет, "КодПодчиненности_", 5);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.ИНН, Макет, "ИНН_", 12);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КПП, Макет, "КПП_", 9);
	Макет.Области[ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.ТипПриказа)].Текст = "v";
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(Выборка.ФамилияПолучателя), Макет, "ФИО_Получателя_", 36);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(Выборка.ИмяПолучателя), Макет, "ФИО_Получателя_", 36, 37);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(Выборка.ОтчествоПолучателя), Макет, "ФИО_Получателя_", 36, 73);
	Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗаполнитьВМакетеДатуРожденияПолучателя(Макет, Выборка);
	Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗаполнитьВМакетеУдостоверениеЛичности_2017(Макет, Выборка);
	Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗаполнитьВМакетеРазрешениеНаПроживание(Макет, Выборка, 8);
	Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗаполнитьВМакетеСведенияОМестеЖительства_2017(Макет, Выборка);
	Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗаполнитьВМакетеСНИЛССотрудника(Макет, Выборка);
	Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗаполнитьВМакетеИННСотрудника(Макет, Выборка);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(Выборка.ДатаПрекращенияОплаты, "ДФ=dd.MM.yy"), ".",""),
		Макет,"ДатаОкончанияОтпуска_", 6);
	ТелефонСтрахователя = Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ПредставлениеТелефона(Выборка.ТелефонСтрахователя, 30);
	ПрямыеВыплатыПособийСоциальногоСтрахования.ВывестиТелефонПоБуквам(
		ТелефонСтрахователя,
		Макет,
		"ТелефонСоставителя_",
		30);
	ЗаполнитьВМакетеИныеСведения_2021(Макет, Выборка);
	Макет.Параметры.ДолжностьРуководителя = Выборка.ДолжностьПредставителяСФР;
	Макет.Параметры.ФИОРуководителя       = Выборка.ФИОУполномоченного;
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.АдресЭлектроннойПочтыСтрахователя, Макет, "АдресЭлектроннойПочты_", 28);
	
КонецПроцедуры

Процедура КадровыеДанныеПредставителя(Запрос)
	// Создание ВТ кадровых данных.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Уведомление.ПредставительСФР КАК ФизическоеЛицо,
	|	Уведомление.Дата КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, "ВТФизическиеЛица");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(Описатель, Истина, "ФИОПолные");
КонецПроцедуры

#КонецОбласти

#Область ПФ_MXL_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2022

Процедура ПриПечатиУведомления_2022(КонтекстПечати)
	СЭДОФСС.УстановитьСтандартныйОтступПечати(КонтекстПечати);
	
	Запрос = ЗапросДляПечатиУведомлений_2022(КонтекстПечати.МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УправлениеПечатьюБЗК.ПередПечатьюОчередногоОбъекта(КонтекстПечати);
		
		ВывестиШапкуУведомления_2022(КонтекстПечати, Выборка);
		
		УправлениеПечатьюБЗК.ПослеПечатиОчередногоОбъекта(КонтекстПечати, Выборка.Ссылка);
	КонецЦикла;
КонецПроцедуры

Функция ЗапросДляПечатиУведомлений_2022(МассивСсылок)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	КадровыеДанныеПредставителя(Запрос);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка,
	|	Шапка.Номер КАК Номер,
	|	Шапка.Дата КАК Дата,
	|	Шапка.АдресЭлектроннойПочтыСтрахователя КАК АдресЭлектроннойПочтыСтрахователя,
	|	Шапка.ДатаПрекращенияОплаты КАК ДатаПрекращенияОплаты,
	|	Шапка.ДатаПриказа КАК ДатаПриказа,
	|	Шапка.ДокументОснование КАК ДокументОснование,
	|	Шапка.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР,
	|	Шапка.РегномерСФРГоловнойОрганизации КАК РегномерСФРГоловнойОрганизации,
	|	Шапка.ДополнительныйКодФСС КАК ДополнительныйКодФСС,
	|	Шапка.ИНН КАК ИНН,
	|	Шапка.КодПодчиненностиФСС КАК КодПодчиненностиФСС,
	|	Шапка.Комментарий КАК Комментарий,
	|	Шапка.КПП КАК КПП,
	|	Шапка.НаименованиеСтрахователя КАК НаименованиеСтрахователя,
	|	Шапка.НаименованиеТерриториальногоОрганаФСС КАК НаименованиеТерриториальногоОрганаФСС,
	|	Шапка.НомерПриказа КАК НомерПриказа,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Ответственный КАК Ответственный,
	|	Шапка.РегистрационныйНомерФСС КАК РегистрационныйНомерФСС,
	|	Шапка.Сотрудник КАК Сотрудник,
	|	Шапка.ТелефонСтрахователя КАК ТелефонСтрахователя,
	|	Шапка.ТипПриказа КАК ТипПриказа,
	|	Шапка.УдалитьТипПриказа КАК УдалитьТипПриказа,
	|	Шапка.ПредставительСФР КАК ПредставительСФР,
	|	ЕСТЬNULL(ВТКадровыеДанныеФизическихЛиц.ФИОПолные, ФизическиеЛица.ФИО) КАК УполномоченныйПоПрямымВыплатамФССФИО,
	|	Шапка.ОснованиеПодписиПредставителяСФР КАК ОснованиеПодписиПредставителяСФР,
	|	Шапка.ДолжностьПредставителяСФР КАК ДолжностьПредставителяСФР,
	|	Шапка.НаименованиеПриказа КАК НаименованиеПриказа,
	|	Шапка.ПояснениеКПриказу КАК ПояснениеКПриказу,
	|	Шапка.СотрудникФамилия КАК СотрудникФамилия,
	|	Шапка.СотрудникИмя КАК СотрудникИмя,
	|	Шапка.СотрудникОтчество КАК СотрудникОтчество,
	|	Шапка.СотрудникСНИЛС КАК СотрудникСНИЛС,
	|	Шапка.СотрудникИНН КАК СотрудникИНН,
	|	Шапка.СотрудникДатаРождения КАК СотрудникДатаРождения,
	|	Дети.Заявление КАК Заявление,
	|	Дети.РебенокФамилия КАК РебенокФамилия,
	|	Дети.РебенокИмя КАК РебенокИмя,
	|	Дети.РебенокОтчество КАК РебенокОтчество,
	|	Дети.РебенокСНИЛС КАК РебенокСНИЛС,
	|	Дети.РебенокДатаРождения КАК РебенокДатаРождения
	|ИЗ
	|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ПрекращаемыеЗаявления КАК Дети
	|		ПО (Дети.Ссылка = Шапка.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Шапка.ПредставительСФР = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК ВТКадровыеДанныеФизическихЛиц
	|		ПО Шапка.ПредставительСФР = ВТКадровыеДанныеФизическихЛиц.ФизическоеЛицо
	|			И Шапка.Дата = ВТКадровыеДанныеФизическихЛиц.Период
	|ГДЕ
	|	Шапка.Ссылка В(&МассивСсылок)";
	Возврат Запрос;
КонецФункции

Процедура ВывестиШапкуУведомления_2022(КонтекстПечати, Документ)
	Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей.ВсеДанные);
	Секция    = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "ВсеДанные");
	
	СЭДОФСС.ВывестиРегистрационныйНомерИДополнительныйКодПоБуквам(Документ, Секция);
	
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.НаименованиеТерриториальногоОрганаФСС, "Наименование_ФСС");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.НаименованиеСтрахователя, "НаименованиеСтрахователя");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.КодПодчиненностиФСС, "КодПодчиненности");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.ИНН, "ИНН");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.КПП, "КПП");
	
	ТипыПриказов = Перечисления.ОснованияПрекращенияПособийПоУходу;
	
	Если Документ.ТипПриказа = ТипыПриказов.ПриказОбУвольнении Тогда
		Секция.ТабличныйДокумент.Области["ПриказОбУвольнении"].Текст = "v";
	ИначеЕсли Документ.ТипПриказа = ТипыПриказов.ПриказОДосрочномВыходеНаРаботу Тогда
		Секция.ТабличныйДокумент.Области["ПриказОДосрочномВыходеНаРаботу"].Текст = "v";
	ИначеЕсли Документ.ТипПриказа = ТипыПриказов.СвидетельствоОСмертиРебенка Тогда
		Секция.ТабличныйДокумент.Области["СвидетельствоОСмертиРебенка"].Текст = "v";
	ИначеЕсли Документ.ТипПриказа = ТипыПриказов.ПрекращениеОснованийДляВыплатыПособия Тогда
		Секция.ТабличныйДокумент.Области["ПрекращениеОснованийДляВыплатыПособия"].Текст = "v";
		Параметры.ИнойПриказНаименование = Документ.ПояснениеКПриказу;
	ИначеЕсли Документ.ТипПриказа = ТипыПриказов.ИнойПриказИлиДокумент Тогда
		Секция.ТабличныйДокумент.Области["ИнойПриказИлиДокумент"].Текст = "v";
		Параметры.ИнойПриказНаименование = Документ.НаименованиеПриказа;
	КонецЕсли;
	
	// I. Сведения о получателе пособия.
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникФамилия,  "СотрудникФамилия");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникИмя,      "СотрудникИмя");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникОтчество, "СотрудникОтчество");
	
	СотрудникСНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеФСС(Документ.СотрудникСНИЛС);
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, СотрудникСНИЛС, "СотрудникСНИЛС");
	
	// II. Сведения о ребенке.
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.РебенокФамилия,  "РебенокФамилия");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.РебенокИмя,      "РебенокИмя");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.РебенокОтчество, "РебенокОтчество");
	
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Документ.РебенокДатаРождения, "РебенокДатаРождения");
	
	РебенокСНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеФСС(Документ.РебенокСНИЛС);
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, РебенокСНИЛС, "РебенокСНИЛС");
	
	// III. Иные сведения.
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Документ.ДатаПрекращенияОплаты, "ДатаОкончанияОтпуска");
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Документ.ДатаПриказа,           "ДатаПриказа");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.НомерПриказа, "НомерПриказа");
	
	Параметры.НаименованиеПриказа = Документ.НаименованиеПриказа;
	
	// Уведомление представил.
	Параметры.ДолжностьРуководителя = Документ.ДолжностьПредставителяСФР;
	Параметры.ФИОРуководителя       = Документ.УполномоченныйПоПрямымВыплатамФССФИО;
	
	УправлениеПечатьюБЗК.ВывестиТелефонПоБуквам(Секция, Документ.ТелефонСтрахователя, "СтраховательТелефон");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.АдресЭлектроннойПочтыСтрахователя, "СтраховательЭлектроннаяПочта");
	
	// Отметка территориального органа Фонда социального страхования Российской Федерации.
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.КодПодчиненностиФСС, "КодТОФ");
	
	Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
	КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
КонецПроцедуры

#КонецОбласти

#Область ПФ_MXL_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2024

Процедура ПриПечатиУведомления_2024(КонтекстПечати)
	СЭДОФСС.УстановитьСтандартныйОтступПечати(КонтекстПечати);
	
	Запрос = ЗапросДляПечатиУведомлений_2022(КонтекстПечати.МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УправлениеПечатьюБЗК.ПередПечатьюОчередногоОбъекта(КонтекстПечати);
		
		ВывестиШапкуУведомления_2024(КонтекстПечати, Выборка);
		
		УправлениеПечатьюБЗК.ПослеПечатиОчередногоОбъекта(КонтекстПечати, Выборка.Ссылка);
	КонецЦикла;
КонецПроцедуры

Процедура ВывестиШапкуУведомления_2024(КонтекстПечати, Документ)
	Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей.ВсеДанные);
	Секция    = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "ВсеДанные");
	
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.НаименованиеТерриториальногоОрганаФСС, "Наименование_ФСС");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.НаименованиеСтрахователя, "НаименованиеСтрахователя");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.РегистрационныйНомерФСС, "РегистрационныйНомер");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.ДополнительныйКодФСС, "ДополнительныйКод");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.ИНН, "ИНН");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.КПП, "КПП");
	
	ТипыПриказов = Перечисления.ОснованияПрекращенияПособийПоУходу;
	
	Если Документ.ТипПриказа = ТипыПриказов.ПриказОбУвольнении Тогда
		Секция.ТабличныйДокумент.Области["ПриказОбУвольнении"].Текст = "v";
	ИначеЕсли Документ.ТипПриказа = ТипыПриказов.СвидетельствоОСмертиРебенка Тогда
		Секция.ТабличныйДокумент.Области["СвидетельствоОСмертиРебенка"].Текст = "v";
	ИначеЕсли Документ.ТипПриказа = ТипыПриказов.ПрекращениеОснованийДляВыплатыПособия Тогда
		Секция.ТабличныйДокумент.Области["ПрекращениеОснованийДляВыплатыПособия"].Текст = "v";
	ИначеЕсли Документ.ТипПриказа = ТипыПриказов.ИнойПриказИлиДокумент Тогда
		Секция.ТабличныйДокумент.Области["ИнойПриказИлиДокумент"].Текст = "v";
		Параметры.ИнойПриказНаименование = Документ.НаименованиеПриказа;
	КонецЕсли;
	
	// I. Сведения о получателе пособия.
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникФамилия,  "СотрудникФамилия");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникИмя,      "СотрудникИмя");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникОтчество, "СотрудникОтчество");
	
	СотрудникСНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеФСС(Документ.СотрудникСНИЛС);
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, СотрудникСНИЛС, "СотрудникСНИЛС");
	
	// II. Сведения о ребенке.
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.РебенокФамилия,  "РебенокФамилия");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.РебенокИмя,      "РебенокИмя");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.РебенокОтчество, "РебенокОтчество");
	
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Документ.РебенокДатаРождения, "РебенокДатаРождения");
	
	РебенокСНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеФСС(Документ.РебенокСНИЛС);
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, РебенокСНИЛС, "РебенокСНИЛС");
	
	// III. Иные сведения.
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Документ.ДатаПриказа,  "ДатаПриказа");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция,     Документ.НомерПриказа, "НомерПриказа");
	
	Параметры.НаименованиеПриказа = Документ.НаименованиеПриказа;
	
	// Уведомление представил.
	Параметры.ДолжностьРуководителя = Документ.ДолжностьПредставителяСФР;
	Параметры.ФИОРуководителя       = Документ.УполномоченныйПоПрямымВыплатамФССФИО;
	
	УправлениеПечатьюБЗК.ВывестиТелефонПоБуквам(Секция, Документ.ТелефонСтрахователя, "СтраховательТелефон");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.АдресЭлектроннойПочтыСтрахователя, "СтраховательЭлектроннаяПочта");
	
	// Отметка территориального органа Фонда социального страхования Российской Федерации.
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.КодПодчиненностиФСС, "КодТОФ");
	
	Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
	КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
КонецПроцедуры

#КонецОбласти

Функция ИменаПолейТребуемыхКадровыхДанных() Экспорт
	Возврат
	"ГоловнаяОрганизация,
	|Организация,
	|Фамилия,
	|Имя,
	|Отчество,
	|СтраховойНомерПФР,
	|ИНН,
	|ДатаРождения,
	|Страна,
	|ДокументВид,
	|ДокументСерия,
	|ДокументНомер,
	|ДокументДатаВыдачи,
	|ДокументКемВыдан,
	|ДокументСрокДействия,
	|ФизическоеЛицо";
КонецФункции

#КонецОбласти

#КонецЕсли
