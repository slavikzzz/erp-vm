#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ИспользоватьЗаполнениеПоОснованию() Тогда
		Элементы.ФормаОтменитьВсеИсправления.Видимость = Ложь;
		Элементы.ДокументОснование.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Не Объект.ОтправлятьЧерезПрямыеВыплаты Тогда
			Объект.ОтправлятьЧерезСЭДО = Истина;
		КонецЕсли;
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", "Объект.Организация", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		ЗаполнитьПрекращаемыеОтпуска();
		ПриПолученииДанныхНаСервере("Объект");
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	Если Не СЭДОФСС.ВидимостьПоляРодственник() Тогда
		Элементы.ПрекращаемыеЗаявленияРебенок.Видимость = Ложь;
	КонецЕсли;
	
	ИнициализироватьЭлементыПодписей();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТекстЗапросаXML = ТекущийОбъект.ХранилищеXML.Получить();
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ФормаОткрыта = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ФильтрТЧ = Неопределено;
	
	Если ИмяСобытия = "Запись_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком"
		И (Источник = Объект.Ссылка Или Не ЗначениеЗаполнено(Источник)) Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком"
		И (Источник = Объект.Ссылка Или Не ЗначениеЗаполнено(Источник)) Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеОтправкиПодтвержденияПолучения() Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_ЗаявлениеСотрудникаНаВыплатуПособия"
		И ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаявлениеСотрудникаНаВыплатуПособия")
		И ЗначениеЗаполнено(Источник) Тогда
		ФильтрТЧ = Новый Структура("Заявление", Источник);
		
	ИначеЕсли ИмяСобытия = "Запись_РодственникиФизическихЛиц" Тогда
		ФильтрТЧ = Новый Структура("Ребенок", Источник);
		
	ИначеЕсли ИмяСобытия = "Запись_ОтветНаЗапросФССДляРасчетаПособия" Тогда
		ФильтрТЧ = Новый Структура("ОтветНаЗапрос", Источник);
		
	КонецЕсли;
	
	Если ТипЗнч(ФильтрТЧ) = Тип("Структура") Тогда
		Найденные = Объект.ПрекращаемыеЗаявления.НайтиСтроки(ФильтрТЧ);
		Если Найденные.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ИдентификаторыСтрок = Новый Массив;
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			ИдентификаторыСтрок.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
		КонецЦикла;
		ЗаполнитьСведенияОРебенке(ИдентификаторыСтрок);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	СЭДОФСС.СвертываемыеГруппыОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		Если Не Объект.ОтключитьПроверкиПроведения Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	ОбработатьСообщенияПользователю(ДокументОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	Для Каждого Сообщение Из Сообщения Цикл
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.ПутьКДанным = "Объект";
		Отказ = Истина;
	КонецЦикла;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТекстЗапросаXML = ТекущийОбъект.ХранилищеXML.Получить();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Ложь);
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтотОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, Объект);
	ОбновитьЭлементыФормы();
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком", ПараметрыЗаписи, Объект.Ссылка);
	СЭДОФССКлиент.ОповеститьОНеобходимостиОбновитьТекущиеДела();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОбновитьВторичныеДанныеИЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументПроведенИОтправленОбработкаНавигационнойСсылки(Элемент, Адрес, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Измерения = Новый Структура("ИдентификаторСообщения, ИдентификаторСтроки", Объект.ИдентификаторСообщения, "");
	ПараметрыЗаписи = Новый Массив(1);
	ПараметрыЗаписи[0] = Измерения;
	КлючРегистра = Новый(Тип("РегистрСведенийКлючЗаписи.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком"), ПараметрыЗаписи);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", КлючРегистра);
	ОткрытьФорму(
		"РегистрСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком.ФормаЗаписи",
		ПараметрыФормы,
		,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	ДокументОснованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьЧерезСЭДОПриИзменении(Элемент)
	Если Объект.ОтправлятьЧерезСЭДО
		И Объект.ОтправлятьЧерезПрямыеВыплаты Тогда
		Объект.ОтправлятьЧерезПрямыеВыплаты = Ложь;
	КонецЕсли;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьЧерезПрямыеВыплатыПриИзменении(Элемент)
	Если Объект.ОтправлятьЧерезПрямыеВыплаты
		И Объект.ОтправлятьЧерезСЭДО
		И Не ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		Объект.ОтправлятьЧерезСЭДО = Ложь;
	КонецЕсли;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТипПриказаПриИзменении(Элемент)
	ТипПриказаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НомерПриказаПриИзменении(Элемент)
	ОбновитьСвертываемуюГруппу(Элементы.ПодтверждающийДокументГруппа.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриказаПриИзменении(Элемент)
	ОбновитьСвертываемуюГруппу(Элементы.ПодтверждающийДокументГруппа.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриказаПриИзменении(Элемент)
	Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент);
	ОбновитьВторичныеДанныеИЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеКПриказуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Обработчик = Новый ОписаниеОповещения("ПояснениеКПриказуЗавершениеВыбора", ЭтотОбъект);
	СЭДОФССКлиент.ПоказатьФормуРедактированияКомментария(Элемент, Обработчик, "Объект.ПояснениеКПриказу",
		НСтр("ru = 'Пояснение к приказу';
			|en = 'Note to the order'"));
КонецПроцедуры

&НаКлиенте
Процедура ДатаПрекращенияОплатыПриИзменении(Элемент)
	ДатаПрекращенияОплатыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РазрешениеНаПроживаниеВидАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Или Не ЗначениеЗаполнено(Текст) Тогда
		// Событие было вызвано для формирования списка быстрого выбора.
		// Несмотря на СтандартнаяОбработка = Ложь, СписокВыбора из свойств поля все равно будет показан.
		// Добавлять к нему ничего не требуется.
		СтандартнаяОбработка = Ложь;
	Иначе
		// Событие было вызвано при вводе текста.
		СписокДляПодбора = Новый СписокЗначений;
		Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
			Если СтрНайти(ЭлементСписка.Представление, Текст) > 0 Тогда
				ЗаполнитьЗначенияСвойств(СписокДляПодбора.Добавить(), ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокДляПодбора;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.КомментарийНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка)
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПрекращаемыеЗаявления

&НаКлиенте
Процедура ПрекращаемыеЗаявленияЗаявлениеПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ПрекращаемыеЗаявления.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
	ЗаполнитьСведенияОРебенке(ИдентификаторыСтрок);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПрекращаемыеЗаявления(Команда)
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Текст = НСтр("ru = 'Не выбран сотрудник';
					|en = 'Employee is not selected'");
		СообщенияБЗККлиентСервер.СообщитьВФорме(Текст, "Сотрудник", "Объект", ЭтотОбъект);
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДатаПрекращенияОплаты) Тогда
		Текст = НСтр("ru = 'Не указана дата окончания отпуска';
					|en = 'Leave end date is not specified'");
		СообщенияБЗККлиентСервер.СообщитьВФорме(Текст, "ДатаПрекращенияОплаты", "Объект", ЭтотОбъект);
		Если Не Элементы.ПрекращаемыеОтпускаГруппа.Видимость Тогда
			СвернутьРазвернутьГруппу(Элементы.ПрекращаемыеОтпускаГруппа.Имя);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ЗаполнитьПрекращаемыеЗаявленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ОбновитьВторичныеДанныеИЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеИсправления(Команда) 
	ОтменитьВсеИсправленияНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПроверкиПроведения(Команда)
	Объект.ОтключитьПроверкиПроведения = Не Объект.ОтключитьПроверкиПроведения;
	Модифицированность = Истина;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВопросВПоддержку(Команда)
	
	ВопросВПоддержку = ПодготовитьВопросВПоддержку();
	
	//   *КодОшибки - Строка - идентификатор ошибки при отправки:
	//   *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
	//   *URLСтраницы - Строка - URL страницы отправки сообщения.
	Если Не ЗначениеЗаполнено(ВопросВПоддержку.КодОшибки) Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаголовокОкна", НСтр("ru = 'Отправка сообщения в службу технической поддержки';
														|en = 'Send a message to technical support.'"));
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницуСДополнительнымиПараметрами(
			ВопросВПоддержку.URLСтраницы,
			ПараметрыОткрытия);
	Иначе
		ИнформированиеПользователяКлиент.ПоказатьПодробности(ВопросВПоддержку.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОтменитьВсеИсправленияНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОчиститьФиксациюИзменений(ЭтотОбъект, Объект);
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, Объект);
	ЗаполнитьПрекращаемыеОтпуска();
	ОбновитьВторичныеДанныеИЭлементыФормы();
КонецПроцедуры

#Область МеханизмФиксацииИзменений

&НаСервере
Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ПараметрыФиксации = Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ПараметрыФиксацииВторичныхДанных(Объект);
	ПараметрыФиксации.Вставить("ОписаниеФормы", ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеФормы());
	
	ОписаниеЭлементовФормы = Новый Соответствие;
	ОписаниеПутиКРеквизитамОбъекта = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ОписаниеПутиКРеквизитамОбъекта.ПрефиксПути = "Объект";
	Для Каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеПутиКРеквизитамОбъекта);
	КонецЦикла;
	
	ОписаниеПутиКРеквизитамФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ИнициализироватьПоляВводаКонтактнойИнформации();
	Для Каждого КлючИЗначение Из ПоляВводаКонтактнойИнформации.БыстрыйПоискРеквизитовФормы Цикл
		ОписаниеЭлементовФормы.Вставить(КлючИЗначение.Значение, ОписаниеПутиКРеквизитамФормы);
	КонецЦикла;
	
	ПараметрыФиксации.ОписаниеФормы.ОписаниеЭлементовФормы = ОписаниеЭлементовФормы;
	Возврат ПараметрыФиксации;
КонецФункции

&НаСервере
Функция ФиксацияБыстрыйПоискРеквизитов()
	БыстрыйПоискРеквизитов = Новый Соответствие; // Ключ - имя элемента, значение - имя реквизита.
	Для Каждого КлючИЗначение Из ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов Цикл
		ИмяРеквизита = КлючИЗначение.Значение.ИмяРеквизита;
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
			БыстрыйПоискРеквизитов.Вставить(ИмяРеквизита, ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	ИнициализироватьПоляВводаКонтактнойИнформации();
	Для Каждого КлючИЗначение Из ПоляВводаКонтактнойИнформации.БыстрыйПоискРеквизитовФормы Цикл
		БыстрыйПоискРеквизитов.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	Возврат БыстрыйПоискРеквизитов;
КонецФункции

&НаСервере
Процедура ФиксацияЗаполнитьРеквизитыОбъекта()
	Если ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗаполнитьИдентификаторыСтрок(ЭтотОбъект);
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ДокументОбъект);
	
	Если ДокументОбъект.ОбновитьВторичныеДанные() Тогда
		Если ТолькоПросмотр Или Не ПравоДоступа("Изменение", ДокументОбъект.Метаданные()) Тогда
			ФиксацияВторичныхДанныхВДокументахФормы.ВывестиПредупреждениеОНаличииИзмененийВИсходныхДанныхКоторыеНельзяПрименить(ЭтотОбъект);
		Иначе
			Если Не ДокументОбъект.ЭтоНовый() Тогда
				ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Истина);
			КонецЕсли;
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, Объект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(ЭтотОбъект, Элемент, ОписаниеЭлементов);
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	Возврат Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ОбъектЗафиксирован(Объект);
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ПодписиДокументов

// ЗарплатаКадрыПодсистемы.ПодписиДокументов
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
	Если Элемент.Имя = ПодписиДокументовКлиентСервер.ИмяЭлементаФормыПоРолиПодписанта("ПредставительСФР") Тогда
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ПредставительСФР");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

#КонецОбласти

#КонецОбласти

#Область КонтактнаяИнформация

&НаСервере
Процедура ОбновитьЭлементыКонтактнойИнформации()
	ИнициализироватьПоляВводаКонтактнойИнформации();
	Для Каждого КлючИЗначение Из ПоляВводаКонтактнойИнформации Цикл
		ИмяРеквизитаФормы = КлючИЗначение.Ключ;
		Если ИмяРеквизитаФормы = "БыстрыйПоискРеквизитовФормы" Тогда
			Продолжить;
		КонецЕсли;
		Реквизит          = КлючИЗначение.Значение;
		Если Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			КонтактнаяИнформацияБЗК.ОбновитьПолеВводаАдреса(ЭтотОбъект, ИмяРеквизитаФормы, Объект[Реквизит.Имя]);
		ИначеЕсли Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			КонтактнаяИнформацияБЗК.ОбновитьПолеВводаТелефона(ЭтотОбъект, ИмяРеквизитаФормы, Объект[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПоляВводаКонтактнойИнформации()
	Если ПоляВводаКонтактнойИнформации <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	// ПоляВводаКонтактнойИнформации - Структура
	//   * Ключ     - Строка    - Имя реквизита формы.
	//   * Значение - Структура - Свойства реквизита объекта.
	//       * Имя - Строка - Имя реквизита объекта хранящего значение контактной информации.
	//       * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
	//       * Вид - Строка - Имя предопределенного вида контактной информации.
	ПоляВводаКонтактнойИнформации = Новый Структура;
	БыстрыйПоискРеквизитовФормы = Новый Соответствие;
	
	Реквизит = ОписаниеРеквизитаКонтактнойИнформации();
	Реквизит.Имя = "ТелефонСтрахователя";
	Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Реквизит.Вид = "Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации";
	ПоляВводаКонтактнойИнформации.Вставить(Реквизит.Имя + "Представление", Реквизит);
	БыстрыйПоискРеквизитовФормы.Вставить(Реквизит.Имя, Реквизит.Имя + "Представление");
	
	Реквизит = ОписаниеРеквизитаКонтактнойИнформации();
	Реквизит.Имя = "АдресРегистрации";
	Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Реквизит.Вид = "Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица";
	ПоляВводаКонтактнойИнформации.Вставить(Реквизит.Имя + "Представление", Реквизит);
	БыстрыйПоискРеквизитовФормы.Вставить(Реквизит.Имя, Реквизит.Имя + "Представление");
	
	Реквизит = ОписаниеРеквизитаКонтактнойИнформации();
	Реквизит.Имя = "СотрудникТелефон";
	Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Реквизит.Вид = "Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица";
	ПоляВводаКонтактнойИнформации.Вставить(Реквизит.Имя + "Представление", Реквизит);
	БыстрыйПоискРеквизитовФормы.Вставить(Реквизит.Имя, Реквизит.Имя + "Представление");
	
	ПоляВводаКонтактнойИнформации.Вставить("БыстрыйПоискРеквизитовФормы", БыстрыйПоискРеквизитовФормы);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеРеквизитаКонтактнойИнформации()
	Возврат Новый Структура("Имя, Тип, Вид");
КонецФункции

&НаСервере
Процедура АдаптироватьСообщениеПользователюКПолямВводаКонтактнойИнформации(Сообщение)
	ИмяРеквизита = ПоляВводаКонтактнойИнформации.БыстрыйПоискРеквизитовФормы[Сообщение.Поле];
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Сообщение.Поле = ИмяРеквизита;
		Сообщение.ПутьКДанным = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаКонтактнойИнформацииПриИзменении(Элемент)
	Текст = Элемент.ТекстРедактирования;
	ПолеВводаКонтактнойИнформацииПриИзмененииПриИзмененииНаСервере(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаКонтактнойИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Реквизит = ПоляВводаКонтактнойИнформации[Элемент.Имя];
	Оповещение = Новый ОписаниеОповещения("ПолеВводаКонтактнойИнформацииЗавершениеВыбора", ЭтотОбъект, Реквизит);
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПредопределенноеЗначение(Реквизит.Вид),
		Объект[Реквизит.Имя]);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
КонецПроцедуры

&НаСервере
Процедура ПолеВводаКонтактнойИнформацииПриИзмененииПриИзмененииНаСервере(Текст, ИмяЭлемента)
	Реквизит = ПоляВводаКонтактнойИнформации[ИмяЭлемента];
	Если ПустаяСтрока(Текст) Тогда
		Значение = "";
	Иначе
		Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
			Текст,
			ПредопределенноеЗначение(Реквизит.Вид));
	КонецЕсли;
	Объект[Реквизит.Имя] = Значение;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, Реквизит.Имя);
	ОбновитьВторичныеДанныеИЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКонтактнойИнформацииЗавершениеВыбора(РезультатВыбора, Реквизит) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("Структура")Тогда
		Объект[Реквизит.Имя] = РезультатВыбора.Значение;
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, Реквизит.Имя);
		ОбновитьВторичныеДанныеИЭлементыФормы();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СвертываемыеГруппы

&НаСервере
Процедура ПриОпределенииСвертываемыхГрупп(Группы) Экспорт
	Группы.Добавить(Элементы.ПодтверждающийДокументГруппа);
	Группы.Добавить(Элементы.СотрудникГруппа);
	Группы.Добавить(Элементы.АдресРегистрацииГруппа);
	Группы.Добавить(Элементы.УдостоверениеЛичностиГруппа);
	Группы.Добавить(Элементы.РазрешениеНаПроживаниеГруппа);
	Группы.Добавить(Элементы.ПрекращаемыеОтпускаГруппа);
	Группы.Добавить(Элементы.СтраховательГруппа);
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияЭлементовСвертываемыхГрупп() Экспорт
	// Обработка не требуется.
КонецПроцедуры

&НаСервере
Процедура ПриОпределенииСвойствСвертываемойГруппы(Группа, Представление, Заполнена, Развернута, Видимость) Экспорт
	
	Если Группа = Элементы.ПодтверждающийДокументГруппа Тогда
		Если Не ФормаОткрыта Тогда
			Развернута = Истина;
		КонецЕсли;
		Заполнена = (ЗначениеЗаполнено(Объект.ТипПриказа)
			И ЗначениеЗаполнено(Объект.НомерПриказа)
			И ЗначениеЗаполнено(Объект.ДатаПриказа));
		Если Не Развернута И Заполнена Тогда
			Представление = ПредставлениеПодтверждающегоДокумента();
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.СотрудникГруппа Тогда
		Представление = ПредставлениеСотрудника();
		
	ИначеЕсли Группа = Элементы.АдресРегистрацииГруппа Тогда
		Видимость = Объект.ОтправлятьЧерезСЭДО;
		Если Видимость И ЗначениеЗаполнено(Объект.АдресРегистрации) Тогда
			Представление = СЭДОФСС.КраткоеПредставлениеАдреса(Объект.АдресРегистрации);
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.УдостоверениеЛичностиГруппа Тогда
		Видимость = Объект.ОтправлятьЧерезСЭДО;
		Представление = СЭДОФСС.ПредставлениеУдостоверенияЛичности(
			Объект.УдостоверениеЛичностиВид,
			Объект.УдостоверениеЛичностиСерия,
			Объект.УдостоверениеЛичностиНомер,
			Объект.УдостоверениеЛичностиДатаВыдачи,
			Объект.УдостоверениеЛичностиСрокДействия,
			Объект.УдостоверениеЛичностиКемВыдан);
		
	ИначеЕсли Группа = Элементы.РазрешениеНаПроживаниеГруппа Тогда
		Видимость = Объект.ОтправлятьЧерезСЭДО
			И СЭДОФСС.ПоказыватьРазрешениеНаПроживание(Объект.КодСтраныГражданства);
		Представление = СЭДОФСС.ПредставлениеУдостоверенияЛичности(
			Объект.РазрешениеНаПроживаниеВид,
			Объект.РазрешениеНаПроживаниеСерия,
			Объект.РазрешениеНаПроживаниеНомер,
			Объект.РазрешениеНаПроживаниеДатаВыдачи,
			Объект.РазрешениеНаПроживаниеСрокДействия);
		
	ИначеЕсли Группа = Элементы.ПрекращаемыеОтпускаГруппа Тогда
		Если Не ФормаОткрыта Тогда
			Развернута = Истина;
		КонецЕсли;
		Заполнена = (Объект.ПрекращаемыеЗаявления.Количество() > 0
			И ЗначениеЗаполнено(Объект.ДатаПрекращенияОплаты));
		Если Заполнена И Не Развернута Тогда
			Представление = ПредставлениеПрекращаемыхОтпусков();
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.СтраховательГруппа Тогда
		
		ОбновитьЭлементыГруппыСтрахователь(Представление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвернутьРазвернутьГруппу(Элемент)
	СвернутьРазвернутьГруппу(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура СвернутьРазвернутьГруппу(ИмяЭлемента)
	СЭДОФСС.СвернутьРазвернутьГруппу(ЭтотОбъект, ИмяЭлемента);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвертываемуюГруппу(Имя)
	СЭДОФСС.ОбновитьСвертываемуюГруппу(ЭтотОбъект, Элементы[Имя]);
КонецПроцедуры

#КонецОбласти

#Область Форма

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные()
	ОтключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные");
	ПодключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьОбновитьВторичныеДанные()
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОбновитьВторичныеДанныеНаСервере()
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ОбновитьВторичныеДанныеНаСервере();
	Иначе
		Прочитать();
		Надпись = Элементы.Найти("ПредупреждениеОбновленияВторичныхДанных");
		Если Надпись <> Неопределено И Надпись.Видимость Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеНаСервере()
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
КонецПроцедуры


#КонецОбласти

#Область Организация

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ЭтотОбъект.ПараметрыФиксацииВторичныхДанных = ПараметрыФиксацииВторичныхДанных();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Организация");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, "Организация");
	ЗаполнитьПрекращаемыеОтпуска();
	ОбновитьВторичныеДанныеИЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыСтрахователь(Представление)
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.НаименованиеСтрахователя) Тогда
		Представления.Добавить(Объект.НаименованиеСтрахователя);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТелефонСтрахователяПредставление) Тогда
		Представления.Добавить(ТелефонСтрахователяПредставление);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.АдресЭлектроннойПочтыСтрахователя) Тогда
		Представления.Добавить(Объект.АдресЭлектроннойПочтыСтрахователя);
	КонецЕсли;
	
	ВидимостьРегномераСФР = ЗначениеЗаполнено(Объект.РегистрационныйНомерСФР)
		Или ЗначениеЗаполнено(Объект.РегномерСФРГоловнойОрганизации)
		Или ЗарплатаКадры.ИспользованиеРегистрационногоНомераСФР(Объект.ДатаОтправки);
	Элементы.ГруппаРегистрационныйНомерСФР.Видимость = ВидимостьРегномераСФР;
	
	Если ВидимостьРегномераСФР Тогда
		Если ЗначениеЗаполнено(Объект.РегистрационныйНомерСФР) Тогда
			Представления.Добавить(НСтр("ru = 'регномер СФР';
										|en = 'registration number in the Social Insurance Fund of Russia'") + " " + Объект.РегистрационныйНомерСФР);
			Если ЗначениеЗаполнено(Объект.РегномерСФРГоловнойОрганизации) Тогда
				Представления.Добавить(НСтр("ru = 'головной орг.';
											|en = 'of the parent company'") + " " + Объект.РегномерСФРГоловнойОрганизации);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДополнительныйКодФСС) Тогда
			Шаблон = НСтр("ru = 'регномер ОСС %1 / %2';
							|en = 'CSI registration number %1 / %2'");
			Представления.Добавить(СтрШаблон(Шаблон, Объект.РегистрационныйНомерФСС, Объект.ДополнительныйКодФСС));
		ИначеЕсли ЗначениеЗаполнено(Объект.РегистрационныйНомерФСС) Тогда
			Шаблон = НСтр("ru = 'регномер ОСС %1';
							|en = 'CSI registration number %1'");
			Представления.Добавить(СтрШаблон(Шаблон, Объект.РегистрационныйНомерФСС));
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.ДополнительныйКодФСС) Тогда
			Шаблон = НСтр("ru = 'рег. номер %1 / %2';
							|en = 'reg. number %1 / %2'");
			Представления.Добавить(СтрШаблон(Шаблон, Объект.РегистрационныйНомерФСС, Объект.ДополнительныйКодФСС));
		ИначеЕсли ЗначениеЗаполнено(Объект.РегистрационныйНомерФСС) Тогда
			Шаблон = НСтр("ru = 'рег. номер %1';
							|en = 'reg. number %1'");
			Представления.Добавить(СтрШаблон(Шаблон, Объект.РегистрационныйНомерФСС));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Или ЗначениеЗаполнено(Объект.НаименованиеТерриториальногоОрганаФСС) Тогда
		Шаблон = НСтр("ru = 'терр. орган %1 %2';
						|en = 'local authority %1%2'");
		Представления.Добавить(СтрШаблон(Шаблон, Лев(Объект.КодПодчиненностиФСС, 4), Объект.НаименованиеТерриториальногоОрганаФСС));
	КонецЕсли;
	
	Представление = СтрСоединить(Представления, ", ");
КонецПроцедуры

#КонецОбласти

#Область Сотрудник

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Сотрудник");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, "Сотрудник");
	ЗаполнитьПрекращаемыеОтпуска();
	ОбновитьВторичныеДанныеИЭлементыФормы();
КонецПроцедуры

&НаСервере
Функция ПредставлениеСотрудника()
	Представления = Новый Массив;
	Представление = СокрЛП(Объект.СотрудникФамилия + " " + Объект.СотрудникИмя + " " + Объект.СотрудникОтчество);
	Если ЗначениеЗаполнено(Представление) Тогда
		Представления.Добавить(Представление);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СотрудникДатаРождения) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'Дата рождения: %1';
												|en = 'Date of birth: %1'"), Формат(Объект.СотрудникДатаРождения, "ДЛФ=D")));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СотрудникСНИЛС) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС: %1';
												|en = 'SNILS: %1'"), Объект.СотрудникСНИЛС));
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

#КонецОбласти

#Область ПодтверждающийДокумент

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	ЭтотОбъект.ПараметрыФиксацииВторичныхДанных = ПараметрыФиксацииВторичныхДанных();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, "ДокументОснование");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, "ТипПриказа");
	ЗаполнитьПрекращаемыеОтпуска();
	ОбновитьВторичныеДанныеИЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ТипПриказаПриИзмененииНаСервере()
	Объект.НаименованиеПриказа = "";
	ЭтотОбъект.ПараметрыФиксацииВторичныхДанных = ПараметрыФиксацииВторичныхДанных();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(
		ЭтотОбъект,
		"ТипПриказа");
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(
		ЭтотОбъект,
		Элементы.ТипПриказа,
		ОписаниеЭлементов);
	ОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаСервере
Функция ПредставлениеПодтверждающегоДокумента()
	Массив = Новый Массив;
	
	Массив.Добавить(Объект.ТипПриказа);
	
	Массив.Добавить(Элементы.НомерПриказа.Заголовок);
	Массив.Добавить(Объект.НомерПриказа);
	
	Массив.Добавить(Элементы.ДатаПриказа.Заголовок);
	Массив.Добавить(Формат(Объект.ДатаПриказа, "ДЛФ=D"));
	
	Если ЗначениеЗаполнено(Объект.НаименованиеПриказа) Тогда
		Массив.Добавить(Объект.НаименованиеПриказа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаПредставленияПакетаДокументов) Тогда
		Массив.Добавить(НСтр("ru = 'документы получены от сотрудника';
							|en = 'documents are received from an employee'"));
		Массив.Добавить(Формат(Объект.ДатаПредставленияПакетаДокументов, "ДЛФ=D"));
	КонецЕсли;
	
	Если Объект.ОтправлятьЧерезСЭДО Тогда
		Если Объект.ОтправлятьЧерезПрямыеВыплаты Тогда
			Добавка = НСтр("ru = 'Отправлять через СЭДО и прямые выплаты.';
							|en = 'Send via EDI and direct payments.'");
		Иначе
			Добавка = НСтр("ru = 'Отправлять через СЭДО.';
							|en = 'Send via EDI.'");
		КонецЕсли;
	Иначе
		Если Объект.ОтправлятьЧерезПрямыеВыплаты Тогда
			Добавка = НСтр("ru = 'Отправлять через прямые выплаты.';
							|en = 'Send via direct payments.'");
		Иначе
			Добавка = НСтр("ru = 'Не отправлять.';
							|en = 'Do not send.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(Массив, " ") + "; " + Добавка;
КонецФункции

#КонецОбласти

#Область ПрекращаемыеОтпуска

&НаСервере
Процедура ДатаПрекращенияОплатыПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ДатаПрекращенияОплаты");
	ЗаполнитьПрекращаемыеОтпуска();
	ОбновитьВторичныеДанныеИЭлементыФормы();
КонецПроцедуры

&НаСервере
Функция ПредставлениеПрекращаемыхОтпусков()
	Массив = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ПрекращаемыеЗаявления Цикл
		Представления = Новый Массив;
		ФИО = СокрЛП(СтрокаТаблицы.РебенокФамилия
			+ " " + СтрокаТаблицы.РебенокИмя
			+ " " + СтрокаТаблицы.РебенокОтчество);
		Если Не ЗначениеЗаполнено(ФИО) И ЗначениеЗаполнено(СтрокаТаблицы.Ребенок) Тогда
			ФИО = СокрЛП(СтрокаТаблицы.Ребенок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФИО) И ЗначениеЗаполнено(СтрокаТаблицы.ОтветНаЗапрос) Тогда
			ФИО = СокрЛП(СтрокаТаблицы.ОтветНаЗапрос);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФИО) И ЗначениеЗаполнено(СтрокаТаблицы.Заявление) Тогда
			ФИО = СокрЛП(СтрокаТаблицы.Заявление);
		КонецЕсли;
		Если ЗначениеЗаполнено(ФИО) Тогда
			Представления.Добавить(ФИО);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.РебенокДатаРождения) Тогда
			Представления.Добавить(НСтр("ru = 'Дата рождения';
										|en = 'Date of birth'") + " " + Формат(СтрокаТаблицы.РебенокДатаРождения, "ДЛФ=D"));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.РебенокСНИЛС) Тогда
			Представления.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС: %1';
													|en = 'SNILS: %1'"), СтрокаТаблицы.РебенокСНИЛС));
		КонецЕсли;
		Если Представления.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Массив.Добавить(СтрСоединить(Представления, ", "));
	КонецЦикла;
	
	Количество = Массив.Количество();
	Если Количество = 1 Тогда
		Префикс = НСтр("ru = '%1 - последний день отпуска по уходу за ребенком: ';
						|en = '%1 - last day of child care leave:'");
		Префикс = СтрШаблон(Префикс, Формат(Объект.ДатаПрекращенияОплаты, "ДЛФ=D"));
	Иначе
		Префикс = НСтр("ru = '%1 - последний день отпуска по уходу за детьми (%2): ';
						|en = '%1 - last day of child care leave (%2):'");
		Префикс = СтрШаблон(Префикс, Формат(Объект.ДатаПрекращенияОплаты, "ДЛФ=D"), Количество);
	КонецЕсли;
	
	Возврат Префикс + СтрСоединить(Массив, "    ");
КонецФункции

#КонецОбласти

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	ПрочитатьНабор();
	
	ИнициализироватьЭлементыПодписей();
	
	СЭДОФСС.НастроитьПолеВидУдостоверенияЛичности(
		Элементы.РазрешениеНаПроживаниеВид,
		Объект.РазрешениеНаПроживаниеВид,
		"12,15");
	
	ФиксацияВторичныхДанныхВДокументахФормы.ИнициализироватьМеханизмФиксацииРеквизитов(
		ЭтотОбъект,
		ТекущийОбъект,
		ПараметрыФиксацииВторичныхДанных());
	
	ТолькоПросмотр = ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект);
	
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахФормы.ПодключитьОбработчикиФиксацииИзмененийРеквизитов(ЭтотОбъект, ОписаниеЭлементов);
	
	ОбновитьВторичныеДанныеИЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСообщенияПользователю(ДокументОбъект, Сообщения = Неопределено)
	Если Объект.ОтключитьПроверкиПроведения Тогда
		ПолучитьСообщенияПользователю(Истина);
		Возврат;
	КонецЕсли;
	Если Сообщения = Неопределено Тогда
		Сообщения = ПолучитьСообщенияПользователю(Ложь);
	КонецЕсли;
	Для Каждого Сообщение Из Сообщения Цикл
		// Привязка сообщений к объекту.
		Если Не ЗначениеЗаполнено(Сообщение.КлючДанных)
			И Не ЗначениеЗаполнено(Сообщение.ПутьКДанным)
			И Не СтрНачинаетсяС(Сообщение.Поле, "Объект.") Тогда
			Сообщение.ПутьКДанным = "Объект";
		КонецЕсли;
		Если ЗначениеЗаполнено(Сообщение.Поле) Тогда
			АдаптироватьСообщениеПользователюКПолямВводаКонтактнойИнформации(Сообщение);
			СЭДОФСС.СвертываемыеГруппыАдаптироватьСообщениеПользователю(ЭтотОбъект, Сообщение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеИЭлементыФормы()
	ОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьЭлементыКонтактнойИнформации();
	
	ПодписиДокументовКлиентСервер.УстановитьПредставлениеПодписей(ЭтотОбъект);
	
	ОбновитьПанельСостоянияДокумента();
	
	СЭДОФСС.ОбновитьСвертываемыеГруппы(ЭтотОбъект);
	
	Элементы.СотрудникИНН.Видимость          = Объект.ОтправлятьЧерезСЭДО;
	Элементы.СотрудникТелефон.Видимость      = Объект.ОтправлятьЧерезСЭДО;
	Элементы.СотрудникДатаРождения.Видимость = Объект.ОтправлятьЧерезСЭДО;
	Элементы.КодСтраныГражданства.Видимость  = Объект.ОтправлятьЧерезСЭДО;
	
	Элементы.ФормаОтключитьПроверкиПроведения.Пометка = Объект.ОтключитьПроверкиПроведения;
	Элементы.ПояснениеКПриказу.Видимость = (
		Объект.ТипПриказа = Перечисления.ОснованияПрекращенияПособийПоУходу.ПрекращениеОснованийДляВыплатыПособия
		Или Объект.ТипПриказа = Перечисления.ОснованияПрекращенияПособийПоУходу.ИнойПриказИлиДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрекращаемыеЗаявленияНаСервере()
	ЗаполнитьПрекращаемыеОтпуска();
	ОбновитьВторичныеДанныеИЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрекращаемыеОтпуска()
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Или Не ЗначениеЗаполнено(Объект.ДатаПрекращенияОплаты) Тогда
		Возврат;
	КонецЕсли;
	ДанныеОДетях = Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ДанныеОДетях(
		Объект.Ссылка,
		Объект.Сотрудник,
		Объект.ФизическоеЛицо,
		Объект.ДатаПрекращенияОплаты);
	ДанныеОДетях = ДанныеОДетях.Скопировать(Новый Структура("ЕстьДругоеУведомление", Ложь));
	ДанныеОДетях.Сортировать("ИдентификаторСтрокиРеестра, РебенокИмя, РебенокОтчество");
	Объект.ПрекращаемыеЗаявления.Загрузить(ДанныеОДетях);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОРебенке(Знач ИдентификаторыСтрок)
	Заявления = Новый Массив;
	СтрокиТаблицы = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		СтрокаТаблицы = Объект.ПрекращаемыеЗаявления.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаТаблицы = Неопределено Или Не ЗначениеЗаполнено(СтрокаТаблицы.Заявление) Тогда
			Продолжить;
		КонецЕсли;
		СтрокиТаблицы.Добавить(СтрокаТаблицы);
		Заявления.Добавить(СтрокаТаблицы.Заявление);
	КонецЦикла;
	Если Заявления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СведенияОДетяхИзЗаявлений = СведенияОДетяхИзЗаявлений(Заявления);
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		Заявление = СведенияОДетяхИзЗаявлений[СтрокаТаблицы.Заявление];
		СтрокаТаблицы.РебенокФамилия      = Заявление.ФамилияРебенка;
		СтрокаТаблицы.РебенокИмя          = Заявление.ИмяРебенка;
		СтрокаТаблицы.РебенокОтчество     = Заявление.ОтчествоРебенка;
		СтрокаТаблицы.РебенокДатаРождения = Заявление.ДатаРожденияРебенка;
		СтрокаТаблицы.РебенокСНИЛС        = Заявление.СНИЛСРебенка;
	КонецЦикла;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОДетяхИзЗаявлений(ЗаявлениеИлиМассивЗаявлений)
	Если ТипЗнч(ЗаявлениеИлиМассивЗаявлений) = Тип("Массив") Тогда
		МассивЗаявлений = ЗаявлениеИлиМассивЗаявлений;
	Иначе
		МассивЗаявлений = Новый Массив;
		МассивЗаявлений.Добавить(ЗаявлениеИлиМассивЗаявлений);
	КонецЕсли;
	ИменаРеквизитов = "Ссылка, ИдентификаторСтрокиОснования, ДокументОснование, ФамилияРебенка, ИмяРебенка, ОтчествоРебенка, ДатаРожденияРебенка, СНИЛСРебенка";
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗаявлений, ИменаРеквизитов);
	Для Каждого Заявление Из МассивЗаявлений Цикл
		Если Результат[Заявление] = Неопределено Тогда
			Результат.Вставить(Заявление, Новый Структура(ИменаРеквизитов));
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ИнициализироватьЭлементыПодписей()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		ПодписиДокументовКлиентСервер.ИмяЭлементаФормыПоРолиПодписанта("ПредставительСФР"),
		"ОтображениеПодсказки",
		ОтображениеПодсказки.ОтображатьСправа);
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеКПриказуЗавершениеВыбора(Текст, ПустойПараметр) Экспорт
	Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элементы.ПояснениеКПриказу);
КонецПроцедуры

#Область Регистрация

&НаСервере
Процедура ПрочитатьНабор()
	УстановитьПривилегированныйРежим(Истина);
	Набор = РеквизитФормыВЗначение("НаборЗаписей");
	Набор.Отбор.ИдентификаторСообщения.Установить(Объект.ИдентификаторСообщения);
	Набор.Прочитать();
	ЗначениеВРеквизитФормы(Набор, "НаборЗаписей");
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельСостоянияДокумента()
	ПоложениеКнопкиЗакрыть     = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	ВидимостьКнопкиПроверить   = Ложь;
	КнопкаПоУмолчанию          = Неопределено;
	ЕстьПравоИзменения         = (Элементы.Найти("ФормаПровести") <> Неопределено);
	ЕстьПравоОтправки          = СЭДОФСС.ЕстьПравоОтправки();
	ЕстьПравоЭДОФСС            = СЭДОФСС.ЕстьПравоОбмена();
	Если Объект.ПометкаУдаления Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументПомеченНаУдаление;
		Если ЕстьПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаЗаписать;
		КонецЕсли;
	ИначеЕсли Не Объект.Проведен Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументНеПроведен;
		Если ЕстьПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаПровести;
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументПроведенИНеОтправлен;
		Если Объект.ОтправлятьЧерезСЭДО И ЕстьПравоОтправки И ЕстьПравоЭДОФСС Тогда
			КнопкаПоУмолчанию = Элементы.ОтправитьВФонд;
		КонецЕсли;
	Иначе
		СостояниеОтправки = СостояниеОтправки();
		Если СостояниеОтправки.ЕстьОшибки Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьОшибки;
			Элементы.НадписьДокументПроведенИЕстьОшибки.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ЕстьПравоИзменения Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		ИначеЕсли СостояниеОтправки.ЕстьПредупреждения Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьПредупреждения;
			Элементы.НадписьДокументПроведенИЕстьПредупреждения.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ЕстьПравоИзменения Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		Иначе
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИОтправлен;
			Элементы.НадписьДокументПроведенИОтправлен.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиЗакрыть = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			ВидимостьКнопкиПроверить = Истина;
			КнопкаПоУмолчанию = Элементы.ФормаЗакрыть;
		КонецЕсли;
	КонецЕсли;
	Если КнопкаПоУмолчанию <> Неопределено Тогда
		КнопкаПоУмолчанию.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	Элементы.СтраницыСостоянияДокумента.ТекущаяСтраница = ТекущаяСтраница;
	Если ЕстьПравоИзменения Тогда
		Элементы.КнопкаСкопировать.ПоложениеВКоманднойПанели = ПоложениеКнопкиСкопировать;
	КонецЕсли;
	Элементы.ФормаЗакрыть.ПоложениеВКоманднойПанели = ПоложениеКнопкиЗакрыть;
	Если ЕстьПравоОтправки Тогда
		Элементы.ОтправитьВФонд.Видимость         = ЕстьПравоЭДОФСС И Объект.ОтправлятьЧерезСЭДО;
		Элементы.ПроверитьНаличиеОтвета.Видимость = ЕстьПравоЭДОФСС И ВидимостьКнопкиПроверить;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СостояниеОтправки()
	ВариантыСостояний = Перечисления.СостоянияДокументаСЭДОФСС;
	Таблица = НаборЗаписей.Выгрузить();
	КорневаяЗапись = Таблица.Найти("", "ИдентификаторСтроки");
	Если КорневаяЗапись = Неопределено Тогда
		Состояние = ВариантыСостояний.ПустаяСсылка();
	Иначе
		Состояние = КорневаяЗапись.Состояние;
	КонецЕсли;
	
	ЕстьОшибки         = Ложь;
	ЕстьПредупреждения = Ложь;
	МожноОтправить     = Ложь;
	
	Если Состояние = ВариантыСостояний.ПодготовленКОтправке Или Не ЗначениеЗаполнено(Состояние) Тогда
		МожноОтправить = Истина;
		Представление  = Элементы.НадписьДокументПроведенИНеОтправлен.Заголовок;
		
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаПриОтправке Тогда
		ЕстьПредупреждения = Истина;
		МожноОтправить     = Истина;
		Представление      = НСтр("ru = 'При отправке <a href=""1"">возникла ошибка</a>';
									|en = 'An error occurred when sending <a href=""1"">'");
		
	ИначеЕсли Состояние = ВариантыСостояний.ОтправленОператору Тогда
		Представление = НСтр("ru = '<a href=""1"">Отправлен оператору</a>';
							|en = '<a href=""1"">Sent to provider</a>'");
		
	ИначеЕсли Состояние = ВариантыСостояний.Отправлен Тогда
		Представление = НСтр("ru = '<a href=""1"">Отправлен в Фонд</a>';
							|en = '<a href=""1"">Sent to SSF</a>'");
		
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаЛогическогоКонтроля Тогда
		ЕстьОшибки    = Истина;
		Представление = НСтр("ru = 'Не принят, см. <a href=""1"">ошибки логического контроля</a>';
							|en = 'Not accepted, see <a href=""1"">logical control errors</a>'");
		
	ИначеЕсли Состояние = ВариантыСостояний.Принят Тогда
		Представление = НСтр("ru = '<a href=""1"">Успешно принят ФСС</a>';
							|en = '<a href=""1"">Accepted by SSF</a>'");
		
	ИначеЕсли Состояние = ВариантыСостояний.НеПринят Тогда
		ЕстьОшибки    = Истина;
		Представление = НСтр("ru = 'Не принят, см. <a href=""1"">протокол</a>';
							|en = 'Not accepted, see <a href=""1"">protocol</a>'");
		
	ИначеЕсли Состояние = ВариантыСостояний.ЧастичноПринят Тогда
		ЕстьПредупреждения = Истина;
		Представление      = НСтр("ru = 'Принят частично, см. <a href=""1"">ошибки</a>';
									|en = 'Partially accepted, see <a href=""1"">errors</a>'");
		
	Иначе
		СостояниеСтрокой = Строка(Состояние);
		СостояниеСтрокой = НРег(Лев(СостояниеСтрокой, 1)) + Сред(СостояниеСтрокой, 2);
		Представление    = СтрШаблон(НСтр("ru = 'Проведен и <a href=""1"">%1</a>';
											|en = 'Posted and <a href=""1"">%1</a>'"), СостояниеСтрокой);
		
	КонецЕсли;
	
	Результат = Новый Структура("Состояние, ЗаголовокНадписи, ЕстьОшибки, ЕстьПредупреждения, МожноОтправить");
	Результат.Состояние          = Состояние;
	Результат.ЗаголовокНадписи   = СтроковыеФункции.ФорматированнаяСтрока(Представление);
	Результат.ЕстьОшибки         = ЕстьОшибки;
	Результат.ЕстьПредупреждения = ЕстьПредупреждения;
	Результат.МожноОтправить     = МожноОтправить;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область Поддержка

&НаСервере
Функция ПодготовитьВопросВПоддержку()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Вложения = Новый Массив;
	Возврат СЭДОФСС.ПодготовитьВопросВПоддержку(ДокументОбъект, Вложения);
КонецФункции

#КонецОбласти

#КонецОбласти
