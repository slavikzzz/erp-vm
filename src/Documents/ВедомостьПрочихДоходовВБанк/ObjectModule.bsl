#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если Документы.ВедомостьПрочихДоходовВБанк.ЭтоДанныеЗаполненияНезачисленнымиСтроками(ДанныеЗаполнения) Тогда
		ЗаполнитьНезачисленнымиСтроками(ДанныеЗаполнения)
	Иначе	
		ВедомостьПрочихДоходов.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(ЗарплатныйПроект) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СоставВыплаты.НомерЛицевогоСчета");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Состав.НомерЛицевогоСчета");
	КонецЕсли;
	
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	ВедомостьПрочихДоходов.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты)	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ВедомостьПрочихДоходов.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	ОбменСБанкамиПоЗарплатнымПроектамРасширенный.ВедомостьПрочихДоходовВБанкПередЗаписью(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОбменСБанкамиПоЗарплатнымПроектамРасширенный.ВедомостьПрочихДоходовВБанкПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ВедомостьПрочихДоходов.ОбработкаПроведения(ЭтотОбъект, Отказ);
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	НомерРеестра = 0;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает признак изменения данных, влияющих на формирование электронного документа.
// 
Функция ИзменилисьКлючевыеРеквизитыЭлектронногоДокумента() Экспорт
	
	ИзменилисьКлючевыеРеквизиты = 
		ЭлектронноеВзаимодействиеБЗК.ИзменилисьРеквизитыОбъекта(ЭтотОбъект, "Дата, Номер, Организация, ЗарплатныйПроект, НомерРеестра, ПометкаУдаления")	
		Или ЭлектронноеВзаимодействиеБЗК.ИзмениласьТабличнаяЧастьОбъекта(ЭтотОбъект, "Выплаты", "ФизическоеЛицо, КВыплате, НомерЛицевогоСчета");
		
	Возврат ИзменилисьКлючевыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МожноЗаполнитьВыплаты() Экспорт
	Возврат ВедомостьПрочихДоходов.МожноЗаполнитьВыплаты(ЭтотОбъект)
КонецФункции

Процедура ЗаполнитьВыплаты() Экспорт
	ВедомостьПрочихДоходов.ЗаполнитьВыплаты(ЭтотОбъект);
КонецПроцедуры

Процедура ДополнитьВыплаты(ФизическиеЛица) Экспорт
	ВедомостьПрочихДоходов.ДополнитьВыплаты(ЭтотОбъект, ФизическиеЛица);
КонецПроцедуры

Процедура ЗаполнитьПоТаблицеВыплат(ТаблицаВыплат) Экспорт
	
	ДополнитьТаблицуЗарплатСпособамиВыплаты(ТаблицаВыплат);
	КолонкиДляЗачисления = Новый Массив;
	Для Каждого Реквизит Из РеквизитыПоСпособуЗачисления() Цикл
		КолонкиДляЗачисления.Добавить(Реквизит.Имя);
	КонецЦикла;
	КлючевыеПоляСостава = СтрСоединить(КолонкиДляЗачисления, ",");
	ВедомостьПрочихДоходов.ЗаполнитьПоТаблицеВыплат(ЭтотОбъект, ТаблицаВыплат, "ФизическоеЛицо," + КлючевыеПоляСостава);
	ВедомостьПрочихДоходов.УстановитьВзыскания(ЭтотОбъект, ТаблицаВыплат);
	
КонецПроцедуры

Процедура ДополнитьПоТаблицеВыплат(ТаблицаВыплат) Экспорт
	
	ДополнитьТаблицуЗарплатСпособамиВыплаты(ТаблицаВыплат);
	КолонкиДляЗачисления = Новый Массив;
	Для Каждого Реквизит Из РеквизитыПоСпособуЗачисления() Цикл
		КолонкиДляЗачисления.Добавить(Реквизит.Имя);
	КонецЦикла;
	КлючевыеПоляСостава = СтрСоединить(КолонкиДляЗачисления, ",");
	ВедомостьПрочихДоходов.ДополнитьПоТаблицеВыплат(ЭтотОбъект, ТаблицаВыплат, "ФизическоеЛицо,"+КлючевыеПоляСостава);
	ВедомостьПрочихДоходов.УстановитьВзыскания(ЭтотОбъект, ТаблицаВыплат);
	
КонецПроцедуры

Процедура ДополнитьТаблицуЗарплатСпособамиВыплаты(ТаблицаВыплат)
	
	МетаданныеРеквизитов = РеквизитыПоСпособуЗачисления();
	
	ЗначенияПоУмолчанию 			= ЗначенияРеквизитовСоставаВедомостиПоУмолчанию();
	СоответствиеСпособаЗачисления	= СоответствиеСпособаЗачисленияКолонкеВедомостиВБанк();
	
	Для Каждого МетаданныеРеквизита Из МетаданныеРеквизитов Цикл
		ТаблицаВыплат.Колонки.Добавить(МетаданныеРеквизита.Имя, МетаданныеРеквизита.Тип);
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаВыплат Цикл
		Для Каждого МетаданныеРеквизита Из МетаданныеРеквизитов Цикл
			Строка[МетаданныеРеквизита.Имя] = ЗначенияПоУмолчанию[МетаданныеРеквизита.Имя];
		КонецЦикла
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ЗарплатныйПроект) Тогда
		Возврат
	КонецЕсли;
	
	СпособыЗачисленияПоЗарплатномуПроекту = ОбменСБанкамиПоЗарплатнымПроектам.НовоеСоответствиеСпособовЗачисления();
	
	ОбменСБанкамиПоЗарплатнымПроектам.УстановитьДоступностьСпособовЗачисленияПоЗарплатномуПроекту(
		СпособыЗачисленияПоЗарплатномуПроекту, ЗарплатныйПроект);

	СпособВыплатыФизическогоЛица = ОбменСБанкамиПоЗарплатнымПроектам.СпособыВыплатыФизическихЛиц(ТаблицаВыплат.ВыгрузитьКолонку("ФизическоеЛицо"), 
		Истина, Организация, Дата, ЗарплатныйПроект);

	СпособВыплатыФизическогоЛица.Индексы.Добавить("ФизическоеЛицо"); 
	
	МассивСтрок = Новый Массив();
	
	Для Каждого СтрокаВыплаты Из ТаблицаВыплат Цикл
		СтрокаЛС = СпособВыплатыФизическогоЛица.Найти(СтрокаВыплаты.ФизическоеЛицо, "ФизическоеЛицо");
		
		Если СтрокаЛС = Неопределено Тогда
			СтрокаЛС = СпособВыплатыФизическогоЛица.Добавить();
		КонецЕсли;
		
		Если СпособыЗачисленияПоЗарплатномуПроекту[СтрокаЛС.СпособЗачисления] = Неопределено Тогда
			СтрокаЛС.СпособЗачисления = Перечисления.СпособыЗачисленияВыплат.ПоЛицевомуСчету;
		КонецЕсли;
		
		Для Каждого РеквизитЗачисления Из СоответствиеСпособаЗачисления[СтрокаЛС.СпособЗачисления] Цикл
			Если СпособВыплатыФизическогоЛица.Колонки.Найти(РеквизитЗачисления.Имя) = Неопределено Тогда
				ЗаполнитьРеквизитИзДанных(СтрокаВыплаты, РеквизитЗачисления.Имя, СтрокаЛС);
			Иначе
				СтрокаВыплаты[РеквизитЗачисления.Имя] = СтрокаЛС[РеквизитЗачисления.Имя];
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаЛС[РеквизитЗачисления.Имя] <> Неопределено Тогда
			СтрокаВыплаты.СпособЗачисления = СтрокаЛС.СпособЗачисления;
			МассивСтрок.Добавить(СтрокаВыплаты);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаВыплат = ТаблицаВыплат.Скопировать(МассивСтрок);
	
КонецПроцедуры

Функция РеквизитыПоСпособуЗачисления()
	
	МетаданныеРеквизитов = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МетаданныеРеквизитов, РеквизитыВедомостиВБанкДляЗачисленияПоЛицевомуСчету());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МетаданныеРеквизитов, РеквизитыВедомостиВБанкДляЗачисленияПоСНИЛС());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МетаданныеРеквизитов, РеквизитыВедомостиВБанкДляЗачисленияПоНомеруТелефона());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МетаданныеРеквизитов, РеквизитыВедомостиВБанкДляЗачисленияПоНомеруКарты());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МетаданныеРеквизитов, РеквизитыВедомостиВБанкДляЗачисленияПоНомеруСчетаВБанк());
	МетаданныеРеквизитов.Добавить(Метаданные().ТабличныеЧасти.Состав.Реквизиты.СпособЗачисления);
	
	Возврат МетаданныеРеквизитов;
	
КонецФункции

Процедура ЗаполнитьРеквизитИзДанных(СтрокаДляЗаполнения, НаименованиеКолонки, СтрокаДанных)
	
	Если НаименованиеКолонки = Метаданные().ТабличныеЧасти.Состав.Реквизиты.НомерТелефона.Имя
		Или НаименованиеКолонки = Метаданные().ТабличныеЧасти.Состав.Реквизиты.НомерТелефонаПредставление.Имя Тогда
		КонтактнаяИнформация = Новый ТаблицаЗначений;
		Если ЗначениеЗаполнено(СтрокаДанных.Телефон) Тогда
			КонтактнаяИнформация = КонтактнаяИнформацияБЗК.КонтактнаяИнформацияОбъектов(
				СтрокаДанных.ФизическоеЛицо, 
				,
				СтрокаДанных.Телефон);
		КонецЕсли;
		Если КонтактнаяИнформация.Количество()> 0 Тогда
			СтрокаДляЗаполнения.НомерТелефонаПредставление = КонтактнаяИнформация[0].Представление;
			СтрокаДляЗаполнения.НомерТелефона = КонтактнаяИнформация[0].Значение
		КонецЕсли;
	ИначеЕсли НаименованиеКолонки = Метаданные().ТабличныеЧасти.Состав.Реквизиты.НомерБанковскойКарты.Имя Тогда
		СтрокаДляЗаполнения[НаименованиеКолонки] = БанковскиеКарты.МаскированныйНомерКарты(СтрокаДанных.БанковскаяКарта);
	ИначеЕсли НаименованиеКолонки = Метаданные().ТабличныеЧасти.Состав.Реквизиты.СНИЛС.Имя Тогда
		ФизическоеЛицо = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаДанных.ФизическоеЛицо);
		КадровыеДанные = "СтраховойНомерПФР";
		ТЗКадровыеДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическоеЛицо, КадровыеДанные);
		СтрокаДляЗаполнения.СНИЛС = ТЗКадровыеДанныеФизическогоЛица[0].СтраховойНомерПФР;
	ИначеЕсли НаименованиеКолонки = Метаданные().ТабличныеЧасти.Состав.Реквизиты.БИКБанкаСчета.Имя Тогда
		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДанных.БанковскийСчет,
			"Банк,НомерСчета");
		РеквизитыСчета.Вставить("БИК", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыСчета.Банк, "Код"));
		СтрокаДляЗаполнения.НомерЛицевогоСчета = РеквизитыСчета.НомерСчета;
		СтрокаДляЗаполнения.БИКБанкаСчета = РеквизитыСчета.БИК;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияРеквизитовСоставаВедомостиПоУмолчанию()
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("НомерЛицевогоСчета", "");
	ЗначенияПоУмолчанию.Вставить("БанковскаяКарта", Справочники.БанковскиеКартыКонтрагентов.ПустаяСсылка());
	ЗначенияПоУмолчанию.Вставить("НомерБанковскойКарты", "");
	ЗначенияПоУмолчанию.Вставить("БИКБанкаСчета", "");
	ЗначенияПоУмолчанию.Вставить("БанковскийСчет", Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка());
	ЗначенияПоУмолчанию.Вставить("СНИЛС","");
	ЗначенияПоУмолчанию.Вставить("Телефон", Справочники.ВидыКонтактнойИнформации.ПустаяСсылка());
	ЗначенияПоУмолчанию.Вставить("НомерТелефонаПредставление", "");
	ЗначенияПоУмолчанию.Вставить("НомерТелефона", "");
	ЗначенияПоУмолчанию.Вставить("СпособЗачисления", Перечисления.СпособыЗачисленияВыплат.ПоЛицевомуСчету);
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

Функция СоответствиеСпособаЗачисленияКолонкеВедомостиВБанк()
	
	СоответствиеСпособаЗачисления = Новый Соответствие;

	СоответствиеСпособаЗачисления.Вставить(
		Перечисления.СпособыЗачисленияВыплат.ПоЛицевомуСчету, 
		РеквизитыВедомостиВБанкДляЗачисленияПоЛицевомуСчету());
		
	СоответствиеСпособаЗачисления.Вставить(
		Перечисления.СпособыЗачисленияВыплат.ПустаяСсылка(),
		РеквизитыВедомостиВБанкДляЗачисленияПоЛицевомуСчету());
		
	СоответствиеСпособаЗачисления.Вставить(
		Неопределено,
		РеквизитыВедомостиВБанкДляЗачисленияПоЛицевомуСчету());
	
	СоответствиеСпособаЗачисления.Вставить(
		Перечисления.СпособыЗачисленияВыплат.ПоСНИЛС, 
		РеквизитыВедомостиВБанкДляЗачисленияПоСНИЛС());
		
	СоответствиеСпособаЗачисления.Вставить(
		Перечисления.СпособыЗачисленияВыплат.ПоНомеруТелефона, 
		РеквизитыВедомостиВБанкДляЗачисленияПоНомеруТелефона());
		
	СоответствиеСпособаЗачисления.Вставить(
		Перечисления.СпособыЗачисленияВыплат.ПоНомеруКарты, 
		РеквизитыВедомостиВБанкДляЗачисленияПоНомеруКарты());
		
	СоответствиеСпособаЗачисления.Вставить(
		Перечисления.СпособыЗачисленияВыплат.ПоНомеруСчетаВБанк, 
		РеквизитыВедомостиВБанкДляЗачисленияПоНомеруСчетаВБанк());
		
	Возврат СоответствиеСпособаЗачисления;
	
КонецФункции

Функция РеквизитыВедомостиВБанкДляЗачисленияПоЛицевомуСчету()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Метаданные().ТабличныеЧасти.Состав.Реквизиты.НомерЛицевогоСчета);
	
КонецФункции

Функция РеквизитыВедомостиВБанкДляЗачисленияПоСНИЛС()

	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Метаданные().ТабличныеЧасти.Состав.Реквизиты.СНИЛС);
	
КонецФункции

Функция РеквизитыВедомостиВБанкДляЗачисленияПоНомеруКарты()

	Возврат ОбщегоНазначенияКлиентСервер.МассивЗначений(Метаданные().ТабличныеЧасти.Состав.Реквизиты.НомерБанковскойКарты,
														Метаданные().ТабличныеЧасти.Состав.Реквизиты.БанковскаяКарта);
	
КонецФункции

Функция РеквизитыВедомостиВБанкДляЗачисленияПоНомеруСчетаВБанк()

	Возврат ОбщегоНазначенияКлиентСервер.МассивЗначений(Метаданные().ТабличныеЧасти.Состав.Реквизиты.БанковскийСчет,
														Метаданные().ТабличныеЧасти.Состав.Реквизиты.БИКБанкаСчета);
	
КонецФункции

Функция РеквизитыВедомостиВБанкДляЗачисленияПоНомеруТелефона()

	Возврат ОбщегоНазначенияКлиентСервер.МассивЗначений(Метаданные().ТабличныеЧасти.Состав.Реквизиты.Телефон,
														Метаданные().ТабличныеЧасти.Состав.Реквизиты.НомерТелефона,
														Метаданные().ТабличныеЧасти.Состав.Реквизиты.НомерТелефонаПредставление);
	
КонецФункции

// Заполняет документ на основании существующего,
// перенося в новый документ только указанных физических лиц.
// 
// Параметры:
//	Документ - исходный документ (объект или ссылка).
//  Физлица - массив физических лиц.
//
Процедура ЗаполнитьНезачисленнымиСтроками(ДанныеЗаполнения)
	
	Реквизиты = Новый Массив;
	Для Каждого Реквизит Из ДанныеЗаполнения.Ведомость.Метаданные().Реквизиты Цикл
		Реквизиты.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Шапка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.Ведомость, Реквизиты);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка, , "НомерРеестра");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Ведомость.Ссылка);
	Запрос.УстановитьПараметр("Физлица", ДанныеЗаполнения.Физлица);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьВыплаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьВыплаты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВедомостьВыплаты.СтатьяРасходов КАК СтатьяРасходов,
	|	ВедомостьВыплаты.ДокументОснование КАК ДокументОснование,
	|	ВедомостьВыплаты.КВыплате КАК КВыплате,
	|	ВедомостьВыплаты.НомерЛицевогоСчета КАК НомерЛицевогоСчета
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк.Выплаты КАК ВедомостьВыплаты
	|ГДЕ
	|	ВедомостьВыплаты.Ссылка = &Ссылка
	|	И ВедомостьВыплаты.ФизическоеЛицо В(&Физлица)";
	
	ТаблицаВыплат = Запрос.Выполнить().Выгрузить();
	
	ВедомостьПрочихДоходов.ЗаполнитьПоТаблицеВыплат(ЭтотОбъект, ТаблицаВыплат);
	
КонецПроцедуры

Процедура ОчиститьСостав() Экспорт
	
	Состав.Очистить();
	Выплаты.Очистить();
	НДФЛ.Очистить();
	Основания.Очистить();
	
КонецПроцедуры	

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли