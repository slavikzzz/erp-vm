#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОтражениеЗарплатыВБухучетеРасширенный.ОбновитьДанныеБухучетаДокументаПередЗаписью(ЭтотОбъект);
	
КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ОбъектОснование = ДанныеЗаполнения;
	
	Если ТипЗнч(ОбъектОснование) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ОбъектОснование, , Истина);
		
		ДоговорГПХ = СотрудникиФормыРасширенный.ДоговорГПХНеЗакрытыйАктом(ОбъектОснование);
		Если ЗначениеЗаполнено(ДоговорГПХ) Тогда
			ОбъектОснование = ДоговорГПХ;
		КонецЕсли; 
		
	КонецЕсли;
	
	ЭтоДоговорРаботыУслуги = ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ДоговорРаботыУслуги"); 
	Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ДоговорАвторскогоЗаказа") Или ЭтоДоговорРаботыУслуги Тогда
		
		СвойстваЗаполнения = "Организация, Сотрудник, СтатьяФинансирования, СтатьяРасходов, ОтношениеКЕНВД,
			|Подразделение, Территория, СпособОтраженияЗарплатыВБухучете,СпособРасчетовСФизическимиЛицами, СуммаВычета, СуммаЕНВД";
		
		Если ЭтоДоговорРаботыУслуги Тогда
			СвойстваЗаполнения = СвойстваЗаполнения + ",
			|СпособОтраженияЗарплатыВФинансовомУчете, МестоВСтруктуреПредприятия";
		КонецЕсли;
		
		ИменаРеквизитов = "Ссылка, Сумма, Проведен, СпособОплаты, " + СвойстваЗаполнения;
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектОснование, ИменаРеквизитов);
		
		Если Не РеквизитыОснования.СпособОплаты = Перечисления.СпособыОплатыПоДоговоруГПХ.ПоАктамВыполненныхРабот Тогда
			ВызватьИсключение НСтр("ru = 'По этому договору не предусмотрена оплата на основании акта выполненных работ.';
									|en = 'Payment based on the acceptance note is not available under this contract.'");
		КонецЕсли;
		
		Если Не РеквизитыОснования.Проведен Тогда
			ВызватьИсключение НСтр("ru = 'Ввод на основании непроведенного документа невозможен.';
									|en = 'You cannot use the ""input on basis"" method for unposted document.'");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОснования, СвойстваЗаполнения); 
		Договор = ОбъектОснование;
		Результат = РеквизитыОснования.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ДанныеДляПроведения = ДанныеДляПроведения();
	
	ЕстьФинансовыйУчет = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет");
	Если ЕстьФинансовыйУчет Тогда
		МодульФинансовыйУчет = ОбщегоНазначения.ОбщийМодуль("ФинансовыйУчет");
	КонецЕсли;
	
	Для Каждого Строка Из ДанныеДляПроведения.ДанныеДоговора Цикл
		
		Если Не Строка.ОплатаПоАктам Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе %1 должен быть указан вариант оплаты ""по актам выполненных работ"".';
																						|en = 'Payment option ""by receiving notes"" should be specified in document %1.'"), Строка.Договор);
			ВызватьИсключение ТекстОшибки;
			
		ИначеЕсли Не Строка.ДоговорПроведен Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ %1 еще не проведен, акт выполненных работ можно вводить только на основании проведенного документа.';
																						|en = 'Document %1 is not posted yet, you can enter the acceptance note only based on the posted document.  '"), Строка.Договор);
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		НоваяСтрока = Движения.ПлановыеНачисленияПоДоговорам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если ЕстьФинансовыйУчет Тогда
			МодульФинансовыйУчет.СформироватьДвиженияДокументовГПХ(Движения, Строка, НоваяСтрока.Период);
		КонецЕсли;
		
	КонецЦикла;
	
	ОтражениеЗарплатыВБухучете.СформироватьДвиженияБухучетДоговоровГПХ(Движения, ДанныеДляПроведения.НастройкиБухучета);
	
	Движения.ПлановыеНачисленияПоДоговорам.Записывать = Истина;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьДатуВыплаты(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает данные для формирования движений.
// Возвращает таблицу значений - данные, необходимые для формирования плановых начислений по договорам.
//
Функция ДанныеДляПроведения()
	
	НДФЛДоговорыРаботыУслуги = УчетНДФЛ.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
	КодДохода = НДФЛДоговорыРаботыУслуги[0];
	
	ВычетыКДоходам = УчетНДФЛ.ВычетыКДоходам(Год(МесяцНачисления));
	КодВычета = ВычетыКДоходам[КодДохода][0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КодГПХдляСтраховыхВзносов", УчетСтраховыхВзносов.ВидДоходаДляДоговораНаВыполнениеРабот(Ложь));
	Запрос.УстановитьПараметр("КодГПХдляСтраховыхВзносовОблагаетсяФСС_НС", УчетСтраховыхВзносов.ВидДоходаДляДоговораНаВыполнениеРабот(Истина));
	Запрос.УстановитьПараметр("КодДохода", КодДохода);
	Запрос.УстановитьПараметр("КодВычета", КодВычета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктВыполненныхРабот.Организация КАК Организация,
	|	АктВыполненныхРабот.МесяцНачисления КАК МесяцНачисления,
	|	АктВыполненныхРабот.Сотрудник КАК Сотрудник,
	|	АктВыполненныхРабот.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ДоговорРаботыУслуги.Номер ЕСТЬ НЕ NULL 
	|			ТОГДА &КодДохода
	|		КОГДА ДоговорАвторскогоЗаказа.Номер ЕСТЬ НЕ NULL 
	|			ТОГДА ДоговорАвторскогоЗаказа.ВидАвторскогоДоговора.КодДоходаНДФЛ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	КОНЕЦ КАК КодДохода,
	|	ВЫБОР
	|		КОГДА ДоговорРаботыУслуги.Номер ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ДоговорРаботыУслуги.ОблагаетсяФСС_НС
	|						ТОГДА &КодГПХдляСтраховыхВзносовОблагаетсяФСС_НС
	|					ИНАЧЕ &КодГПХдляСтраховыхВзносов
	|				КОНЕЦ
	|		КОГДА ДоговорАвторскогоЗаказа.Номер ЕСТЬ НЕ NULL 
	|			ТОГДА ДоговорАвторскогоЗаказа.ВидАвторскогоДоговора.КодДоходаСтраховыеВзносы
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.ПустаяСсылка)
	|	КОНЕЦ КАК КодДоходаСтраховыеВзносы,
	|	ВЫБОР
	|		КОГДА ДоговорРаботыУслуги.Номер ЕСТЬ НЕ NULL 
	|			ТОГДА &КодВычета
	|		КОГДА ДоговорАвторскогоЗаказа.Номер ЕСТЬ НЕ NULL 
	|			ТОГДА ДоговорАвторскогоЗаказа.КодВычета
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	КОНЕЦ КАК КодВычета,
	|	АктВыполненныхРабот.Подразделение КАК Подразделение,
	|	АктВыполненныхРабот.Территория КАК Территория,
	|	АктВыполненныхРабот.СпособОтраженияЗарплатыВФинансовомУчете КАК СпособОтраженияЗарплатыВФинансовомУчете,
	|	АктВыполненныхРабот.МестоВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия,
	|	АктВыполненныхРабот.Договор.ДатаНачала КАК ДатаНачала,
	|	АктВыполненныхРабот.Договор.ДатаОкончания КАК ДатаОкончания,
	|	ЕСТЬNULL(АктВыполненныхРабот.Договор.ЗаключенСоСтудентомРаботающимВСтудотряде, ЛОЖЬ) КАК ЗаключенСоСтудентомРаботающимВСтудотряде,
	|	АктВыполненныхРабот.Результат КАК Сумма,
	|	АктВыполненныхРабот.СуммаВычета КАК СуммаВычета,
	|	ВЫБОР
	|		КОГДА ДоговорАвторскогоЗаказа.СтавкаНДФЛ ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)
	|		КОГДА ДоговорАвторскогоЗаказа.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка03)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.АвторскиеРоялтиПоСтавке03)
	|		КОГДА ДоговорАвторскогоЗаказа.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка05)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке05)
	|		КОГДА ДоговорАвторскогоЗаказа.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка06)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.АвторскиеРоялтиПоСтавке06)
	|		КОГДА ДоговорАвторскогоЗаказа.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка07)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке07)
	|		КОГДА ДоговорАвторскогоЗаказа.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка10)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке10)
	|		КОГДА ДоговорАвторскогоЗаказа.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке15)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)
	|	КОНЕЦ КАК КатегорияДохода,
	|	АктВыполненныхРабот.Ссылка КАК ДоговорАкт,
	|	АктВыполненныхРабот.Договор.Проведен КАК ДоговорПроведен,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРабот.Договор.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыПоДоговоруГПХ.ПоАктамВыполненныхРабот)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОплатаПоАктам,
	|	АктВыполненныхРабот.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	АктВыполненныхРабот.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.АктПриемкиВыполненныхРаботОказанныхУслуг КАК АктВыполненныхРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
	|		ПО АктВыполненныхРабот.Договор = ДоговорРаботыУслуги.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорАвторскогоЗаказа КАК ДоговорАвторскогоЗаказа
	|		ПО АктВыполненныхРабот.Договор = ДоговорАвторскогоЗаказа.Ссылка
	|ГДЕ
	|	АктВыполненныхРабот.Ссылка = &Ссылка";
	
	ДанныеДоговора = Запрос.Выполнить().Выгрузить();
	
	РаботаВХозрасчетнойОрганизации = ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации");
	СтатьяРасходовДоговора = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
	Если РаботаВХозрасчетнойОрганизации Тогда
		ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
		СтатьяРасходовДоговора = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
		РасчетыСКонтрагентами = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДоговорРаботыУслуги.Номер ЕСТЬ НЕ NULL 
		|			ТОГДА ДоговорРаботыУслуги.СпособРасчетовСФизическимиЛицами
		|		КОГДА ДоговорАвторскогоЗаказа.Номер ЕСТЬ НЕ NULL 
		|			ТОГДА ДоговорАвторскогоЗаказа.СпособРасчетовСФизическимиЛицами
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.ПустаяСсылка)
		|	КОНЕЦ КАК СпособРасчетов
		|ИЗ
		|	Документ.АктПриемкиВыполненныхРаботОказанныхУслуг КАК Акт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
		|		ПО Акт.Договор = ДоговорРаботыУслуги.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорАвторскогоЗаказа КАК ДоговорАвторскогоЗаказа
		|		ПО Акт.Договор = ДоговорАвторскогоЗаказа.Ссылка
		|ГДЕ
		|	Акт.Ссылка = &Ссылка";
		СпособыРасчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СпособРасчетов");
		Если ЗначениеЗаполнено(СпособыРасчетов) И ЗначениеЗаполнено(СпособыРасчетов[0]) Тогда
			Если СпособыРасчетов[0] = Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами Тогда
				СтатьяРасходовДоговора = РасчетыСКонтрагентами;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НовыеНастройкиБухучета = ОтражениеЗарплатыВБухучете.НоваяТаблицаНастройкиБухучетаДоговоровГПХ();
	Если БухучетУказываетсяРаспределением Тогда
		Для каждого СтрокаТЧ Из НастройкиБухучета Цикл
			НоваяСтрока = НовыеНастройкиБухучета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.ДоговорАкт = Ссылка;
			НоваяСтрока.ИдентификаторСтроки = СтрокаТЧ.НомерСтроки;
			Если РаботаВХозрасчетнойОрганизации Тогда
				НоваяСтрока.СтатьяРасходов = СтатьяРасходовДоговора;
			Иначе
				НоваяСтрока.СтатьяРасходов = СтрокаТЧ.СтатьяРасходов;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИдентификаторСтроки = 0;
		Если СуммаЕНВД > 0 Тогда
			НоваяСтрока = НовыеНастройкиБухучета.Добавить();
			НоваяСтрока.ДоговорАкт 					= Ссылка;
			НоваяСтрока.ИдентификаторСтроки 		= ИдентификаторСтроки;
			НоваяСтрока.ПодразделениеУчетаЗатрат 	= Подразделение;
			НоваяСтрока.СтатьяФинансирования 		= СтатьяФинансирования;
			НоваяСтрока.ОблагаетсяЕНВД 				= Истина;
			НоваяСтрока.ДоляРаспределения 			= СуммаЕНВД;
			НоваяСтрока.СпособОтраженияЗарплатыВБухучете = СпособОтраженияЗарплатыВБухучете;
			Если РаботаВХозрасчетнойОрганизации Тогда
				НоваяСтрока.СтатьяРасходов = СтатьяРасходовДоговора;
			Иначе
				НоваяСтрока.СтатьяРасходов = СтатьяРасходов;
			КонецЕсли;
			ИдентификаторСтроки = ИдентификаторСтроки + 1;
		КонецЕсли;
		Если Результат > СуммаЕНВД Тогда
			НоваяСтрока = НовыеНастройкиБухучета.Добавить();
			НоваяСтрока.ДоговорАкт 					= Ссылка;
			НоваяСтрока.ИдентификаторСтроки 		= ИдентификаторСтроки;
			НоваяСтрока.ПодразделениеУчетаЗатрат 	= Подразделение;
			НоваяСтрока.СтатьяФинансирования 		= СтатьяФинансирования;
			НоваяСтрока.ОблагаетсяЕНВД 				= Ложь;
			НоваяСтрока.СпособОтраженияЗарплатыВБухучете = СпособОтраженияЗарплатыВБухучете;
			Если РаботаВХозрасчетнойОрганизации Тогда
				НоваяСтрока.СтатьяРасходов = СтатьяРасходовДоговора;
			Иначе
				НоваяСтрока.СтатьяРасходов = СтатьяРасходов;
			КонецЕсли;
			Если СуммаЕНВД > 0 Тогда
				НоваяСтрока.ДоляРаспределения = Результат - СуммаЕНВД;
			Иначе
				НоваяСтрока.ДоляРаспределения = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляПроведения = Новый Структура;
	ДанныеДляПроведения.Вставить("ДанныеДоговора", ДанныеДоговора);
	ДанныеДляПроведения.Вставить("НастройкиБухучета", НовыеНастройкиБухучета);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли