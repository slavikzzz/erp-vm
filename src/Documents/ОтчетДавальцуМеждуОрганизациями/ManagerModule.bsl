#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив из Строка - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("Взаиморасчеты");
	МеханизмыДокумента.Добавить("Закупки");
	МеханизмыДокумента.Добавить("ИсправлениеДокументов");
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("Производство");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("СуммыДокументовВВалютахУчета");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетНДС");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("УчетРабот");
	
	ОтчетДавальцуМеждуОрганизациямиЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ОтчетДавальцуМеждуОрганизациями") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаВыпускПродукции(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаВыручкаИСебестоимостьПродаж(Запрос, ТекстыЗапроса, Регистры);
		
		РасчетСебестоимостиПроведениеДокументов.ОтразитьВМеханизмеУчетаЗатратИСебестоимости(
			ДокументСсылка, Запрос, ТекстыЗапроса, Регистры);
		
		ОтразитьВУчетеНДС(Запрос, ТекстыЗапроса, Регистры);
		ДобавитьТекстыОтраженияВзаиморасчетов(Запрос, ТекстыЗапроса, Регистры);
		
		ОтчетДавальцуМеждуОрганизациямиЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ДолиСтоимости

// Возвращает параметры распределения затрат на выходные изделия.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров распределения затрат.
//
// Возвращаемое значение:
//  см. ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия
//
Функция ПараметрыРаспределенияЗатрат(Объект) Экспорт
	
	ПараметрыРаспределенияЗатрат = ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия("Товары", Объект.СпособРаспределенияЗатрат);
	
	ПараметрыРаспределенияЗатрат.РассчитыватьПолеДоляСтоимостиПроцент = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакЕстьОшибкиЗаполнения = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакДоляСтоимостиОбязательна = Истина;
	
	ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Дата =
		?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Дата"),
			Объект.Дата,
			Дата("00010101"));
	
	ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Валюта =
		?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Валюта"),
			Объект.Валюта,
			Справочники.Валюты.ПустаяСсылка());
	
	ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат = "ПартияПроизводства";
	ПараметрыРаспределенияЗатрат.ПолеПредставленияГруппировкиЗатрат = "ПартияПроизводства";
	
	Возврат ПараметрыРаспределенияЗатрат;
	
КонецФункции

#КонецОбласти

#Область ВыборСтатейИАналитик

// Возвращает параметры выбора статей и аналитик.
//
// Возвращаемое значение:
//	см. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики.
//
Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект.Товары";
	ПараметрыВыбора.Статья      = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи   = "ТипСтатьи";
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов   = "АналитикаРасходов";
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов   = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ТоварыСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ТоварыАналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("ТоварыАналитикаАктивовПассивов");
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	
	Возврат ПараметрыВыбора;
	
КонецФункции

#КонецОбласти

#Область УчетНДС

// Возвращает параметры для заполнения налогообложения НДС.
//
// Параметры:
//	Документ - ДанныеФормыСтруктура, ДокументСсылка.ОтчетДавальцуМеждуОрганизациями, ДокументОбъект.ОтчетДавальцуМеждуОрганизациями - документ отчет давальцу между организациями.
//
// Возвращаемое значение:
//	см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи
//
Функция ПараметрыЗаполненияНалогообложенияНДС(Документ) Экспорт
	
	РеквизитыДокумента = "Дата, Организация, Договор, НаправлениеДеятельности";
	РеквизитыДокумента = Новый Структура(РеквизитыДокумента);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетДавальцуМеждуОрганизациями") Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, РеквизитыДокумента);
	Иначе
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Документ);
	КонецЕсли;
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи();
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, РеквизитыДокумента, "Дата, Договор, НаправлениеДеятельности");
	
	ПараметрыЗаполнения.Организация                   = РеквизитыДокумента.Организация;
	ПараметрыЗаполнения.ОтчетДавальцу                 = Истина;
	ПараметрыЗаполнения.ЭтоОперацияМеждуОрганизациями = Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Возвращает параметры для регистрации выданных счетов-фактур.
//
// Параметры:
//	Документ - ДанныеФормыСтруктура, ДокументСсылка.ОтчетДавальцуМеждуОрганизациями, ДокументОбъект.ОтчетДавальцуМеждуОрганизациями - документ отчет давальцу между организациями.
//
// Возвращаемое значение:
//	см. УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных
//
Функция ПараметрыРегистрацииСчетовФактурВыданных(Документ) Экспорт
	
	РеквизитыДокумента = "Ссылка, Дата, Организация, Давалец, НалогообложениеНДС";
	РеквизитыДокумента = Новый Структура(РеквизитыДокумента);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетДавальцуМеждуОрганизациями") Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, РеквизитыДокумента);
	Иначе
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Документ);
	КонецЕсли;
	
	ПараметрыРегистрации = УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных();
	ЗаполнитьЗначенияСвойств(ПараметрыРегистрации, РеквизитыДокумента, "Ссылка, Дата, НалогообложениеНДС");
	
	ПараметрыРегистрации.Организация = РеквизитыДокумента.Организация;
	ПараметрыРегистрации.Контрагент  = РеквизитыДокумента.Давалец;
	
	ПараметрыРегистрации.РеализацияРаботУслуг = Истина;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецОбласти

#Область Взаиморасчеты

// Функция определяет реквизиты документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетДавальцуМеждуОрганизациями - Ссылка на документ.
//
// Возвращаемое значение:
//	Структура - Реквизиты выбранного документа.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                    КАК Дата,
	|	ДанныеДокумента.Давалец                 КАК Организация,
	|	ДанныеДокумента.Организация             КАК ОрганизацияОтправитель,
	|	ДанныеДокумента.Давалец                 КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаДокумента          КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Проведен
	|			ТОГДА ДанныеДокумента.СуммаВзаиморасчетов
	|		ИНАЧЕ 0
	|	КОНЕЦ                                   КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Проведен                КАК Проведен,
	|	ДанныеДокумента.Договор                 КАК Договор,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.КурсЧислитель           КАК Курс,
	|	ДанныеДокумента.КурсЗнаменатель         КАК Кратность,
	|	ДанныеДокумента.ПорядокРасчетов         КАК ПорядокРасчетов
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	СтруктураРеквизитов = Новый Структура;
	
	Результат = Запрос.Выполнить();
	Для Каждого Колонка Из Результат.Колонки Цикл
		СтруктураРеквизитов.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	Реквизиты = Результат.Выбрать();
	Если Реквизиты.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Реквизиты);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Возвращает параметры механизма взаиморасчетов.
//
// Параметры:
// 	ДанныеЗаполнения - ДокументОбъект.ОтчетДавальцуМеждуОрганизациями, ДокументСсылка.ОтчетДавальцуМеждуОрганизациями, Структура, ДанныеФормыСтруктура -
// 		Объект или коллекция для расчета параметров взаиморасчетов.
//
// Возвращаемое значение:
// 	Массив из см. ВзаиморасчетыСервер.ПараметрыМеханизма - Массив параметров функций механизма взаиморасчетов.
//
Функция ПараметрыВзаиморасчеты(ДанныеЗаполнения = Неопределено) Экспорт
	
	ПараметрыВзаиморасчетов = Новый Массив();
	
	// Массив параметров - отдельно для отгрузки и приемки
	// Отгрузка (Организация - переработчик):
	
	#Область Отгрузка
	
	СтруктураПараметров = ВзаиморасчетыСервер.ПараметрыМеханизма();
	
	#Область ОбязательныеПараметры
	
	СтруктураПараметров.ЭтоПродажаЗакупка = Истина;
	
	// Определяет какой регистр двигают параметры, какие общие формы, перечисления и справочники использовать.
	СтруктураПараметров.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	
	// Используются для генерации объектов расчетов и аналитики.
	СтруктураПараметров.Организация = "Объект.Организация";
	СтруктураПараметров.Партнер     = Справочники.Партнеры.НашеПредприятие;
	СтруктураПараметров.Контрагент  = "Объект.Давалец";
	
	#КонецОбласти
	
	#Область НеобязательныеПараметры
	
	СтруктураПараметров.Договор         = "Объект.Договор";
	СтруктураПараметров.ПорядокРасчетов = "Объект.ПорядокРасчетов";
	
	// Отличные от валюты и суммы документа реквизиты. Если не заполнен, то для чтения будет взята валюта документа.
	СтруктураПараметров.ВалютаВзаиморасчетов            = "Объект.ВалютаВзаиморасчетов";
	СтруктураПараметров.СуммаВзаиморасчетов             = "Объект.СуммаВзаиморасчетов";
	СтруктураПараметров.ПутьКДаннымТЧ                   = "Объект.Товары";
	СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа = "Объект.РасшифровкаПлатежаСКлиентом";
	
	// Используется для заполнения значений по умолчанию, заполнения графика плановых оплат и даты платежа.
	СтруктураПараметров.Соглашение                = "";
	СтруктураПараметров.Касса                     = "";
	СтруктураПараметров.БанковскийСчетОрганизации = "Объект.БанковскийСчетПереработчика";
	СтруктураПараметров.БанковскийСчетКонтрагента = "Объект.БанковскийСчетДавальца";
	
	// Используются для определения значения ОплатаВВалюте и в форме редактирования правил оплаты.
	// Реквизиты для объекта расчетов, используются в проведении.
	СтруктураПараметров.Менеджер                        = "Объект.Ответственный";
	СтруктураПараметров.ОбъектРасчетов                  = "Объект.ОбъектРасчетов";
	СтруктураПараметров.ГруппаФинансовогоУчета          = "Объект.ГруппаФинансовогоУчетаПереработчика";
		
	СтруктураПараметров.ЭлементыФормы.ГруппаФинансовогоУчета  = "ГруппаФинансовогоУчетаПереработчика";
	СтруктураПараметров.ЭлементыФормы.НаправлениеДеятельности = "НаправлениеДеятельности";
	
	// Имя кнопки, открывающей помощник зачета оплат для текущего набора параметров.
	СтруктураПараметров.ЭлементыФормы.ЗачетОплаты           = "ЗачетОплатыФормаПереработчика";
	СтруктураПараметров.ЭлементыФормы.СуммаВзаиморасчетовТЧ = "ТоварыСуммаВзаиморасчетов";
	
	#КонецОбласти
	
	#Область РедактированиеВалютИВалютныхСуммДокумента
	
	СтруктураПараметров.КурсЧислитель   = "Объект.КурсЧислитель";
	СтруктураПараметров.КурсЗнаменатель = "Объект.КурсЗнаменатель";
	
	// Имя гиперссылки, отображающей текущий курс взаиморасчетов документа и открывающей соответствующую форму.
	СтруктураПараметров.ЭлементыФормы.НадписьВалюты  = "ДекорацияВалюты";
	СтруктураПараметров.ЭлементыФормы.НадписьЭтапы   = "ДекорацияЭтапыОплатыПереработчика";
	СтруктураПараметров.НадписьЭтапыОплаты           = "Форма.НадписьЭтапыОплатыПереработчика";
	СтруктураПараметров.ЭлементыФормы.НадписьРасчеты = "ДекорацияСостояниеРасчетовПереработчика";
	#КонецОбласти
	
	#Область ГрафикПлановойОплатыИДатаПлатежа
	// Функция Этапы оплаты и дата платежа
	СтруктураПараметров.ДатаПлатежа = "Объект.ДатаПлатежа";
	#КонецОбласти
	
	ПараметрыВзаиморасчетов.Добавить(СтруктураПараметров);
	
	#КонецОбласти
	
	#Область Приемка
	
	СтруктураПараметров = ВзаиморасчетыСервер.ПараметрыМеханизма();
	
	#Область ОбязательныеПараметры
	
	СтруктураПараметров.ЭтоПродажаЗакупка = Истина;
	
	// Определяет какой регистр двигают параметры, какие общие формы, перечисления и справочники использовать.
	СтруктураПараметров.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
	
	// Используются для генерации объектов расчетов и аналитики.
	СтруктураПараметров.Организация = "Объект.Давалец";
	СтруктураПараметров.Партнер     = Справочники.Партнеры.НашеПредприятие;
	СтруктураПараметров.Контрагент  = "Объект.Организация";
	
	#КонецОбласти
	
	#Область НеобязательныеПараметры
	
	СтруктураПараметров.Договор         = "Объект.Договор";
	СтруктураПараметров.ПорядокРасчетов = "Объект.ПорядокРасчетов";
	
	// Отличные от валюты и суммы документа реквизиты. Если не заполнен, то для чтения будет взята валюта документа.
	СтруктураПараметров.ВалютаВзаиморасчетов            = "Объект.ВалютаВзаиморасчетов";
	СтруктураПараметров.СуммаВзаиморасчетов             = "Объект.СуммаВзаиморасчетов";
	СтруктураПараметров.ПутьКДаннымТЧ                   = "Объект.Товары";
	СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа = "Объект.РасшифровкаПлатежаСПоставщиком";
	
	// Используется для заполнения значений по умолчанию, заполнения графика плановых оплат и даты платежа.
	СтруктураПараметров.Соглашение                = "";
	СтруктураПараметров.Касса                     = "";
	СтруктураПараметров.БанковскийСчетОрганизации = "Объект.БанковскийСчетДавальца";
	СтруктураПараметров.БанковскийСчетКонтрагента = "Объект.БанковскийСчетПереработчика";
	
	// Реквизиты для объекта расчетов, используются в проведении.
	СтруктураПараметров.Менеджер                        = "Объект.Ответственный";
	СтруктураПараметров.ОбъектРасчетов                  = "Объект.ОбъектРасчетовПолучателя";
	СтруктураПараметров.ГруппаФинансовогоУчета          = "Объект.ГруппаФинансовогоУчетаДавальца";
	
	СтруктураПараметров.ЭлементыФормы.ГруппаФинансовогоУчета  = "ГруппаФинансовогоУчетаДавальца";
	СтруктураПараметров.ЭлементыФормы.НаправлениеДеятельности = "НаправлениеДеятельности";
	
	// Имя кнопки, открывающей помощник зачета оплат для текущего набора параметров.
	СтруктураПараметров.ЭлементыФормы.ЗачетОплаты           = "ЗачетОплатыФормаДавальца";
	СтруктураПараметров.ЭлементыФормы.СуммаВзаиморасчетовТЧ = "ТоварыСуммаВзаиморасчетов";
	
	#КонецОбласти
	
	#Область РедактированиеВалютИВалютныхСуммДокумента

	СтруктураПараметров.КурсЧислитель   = "Объект.КурсЧислитель";
	СтруктураПараметров.КурсЗнаменатель = "Объект.КурсЗнаменатель";
	
	// Имя гиперссылки, отображающей текущий курс взаиморасчетов документа и открывающей соответствующую форму.
	СтруктураПараметров.ЭлементыФормы.НадписьВалюты  = "ДекорацияВалюты";
	СтруктураПараметров.ЭлементыФормы.НадписьЭтапы   = "ДекорацияЭтапыОплатыДавальца";
	СтруктураПараметров.НадписьЭтапыОплаты           = "Форма.НадписьЭтапыОплатыДавальца";
	СтруктураПараметров.ЭлементыФормы.НадписьРасчеты = "ДекорацияСостояниеРасчетовДавальца";
	
	#КонецОбласти
	
	#Область ГрафикПлановойОплатыИДатаПлатежа
	// Функция Этапы оплаты и дата платежа
	СтруктураПараметров.ДатаПлатежа = "Объект.ДатаПлатежа";
	#КонецОбласти
	
	ПараметрыВзаиморасчетов.Добавить(СтруктураПараметров);
	
	#КонецОбласти
	
	Возврат ПараметрыВзаиморасчетов;
	
КонецФункции

#Область Состояние

// Осуществляет вычисление текущего состояния отчета давальцу на стороне получателя.
//
// Параметры:
//	ОтчетДавальцу     - ДокументСсылка.ОтчетДавальцуМеждуОрганизациями - Документ, состояние которого необходимо вычислить
//	Договор           - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов - ФормаКлиентскогоПриложения - Форма, в реквизиты которой будет помещено рассчитанное состояние.
//
Процедура РассчитатьСостояниеПолучатель(Знач ОтчетДавальцу, Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетовПолучатель());
	
	Если ЗначениеЗаполнено(ОтчетДавальцу) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И ДокументОтчетДавальцу.Проведен
		|				И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) КАК ЧИСЛО(31,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаОплатыПолучатель,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И ДокументОтчетДавальцу.Проведен
		|				И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) * 100 / РасчетыСПоставщикамиОстатки.КОплатеРасход КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентОплатыПолучатель,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И ДокументОтчетДавальцу.Проведен
		|				И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
		|				И ЕСТЬNULL(РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) < 0
		|			ТОГДА ВЫРАЗИТЬ(-ЕСТЬNULL(РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) КАК ЧИСЛО(31,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаПросроченнойОплатыПолучатель,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И ДокументОтчетДавальцу.Проведен
		|				И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
		|			ТОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаПоступления,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И ДокументОтчетДавальцу.Проведен
		|				И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) * 100 / ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентПоступления,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.Проведен
		|				И (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
		|					ИЛИ ДокументОтчетДавальцу.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(31,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаДолгаПолучатель,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И ДокументОтчетДавальцу.Проведен
		|				И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) > 0
		|						ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) * 100 / ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) КАК ЧИСЛО(15, 0))
		|					ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(-РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) * 100 / ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) КАК ЧИСЛО(15, 0))
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентДолгаПолучатель,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.Проведен
		|				И ДокументОтчетДавальцу.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|			ТОГДА -РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаКОплатеПолучатель
		|ИЗ
		|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ДокументОтчетДавальцу
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(, , , , ОбъектРасчетов = &ОбъектРасчетов) КАК РасчетыСПоставщикамиОстатки
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ОбъектРасчетов = &ОбъектРасчетов) КАК РасчетыСПоставщикамиОстаткиНаДатуАктуальности
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ДокументОтчетДавальцу.Ссылка = &ОтчетДавальцу
		|");
		
		ОбъектРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетДавальцу, "ОбъектРасчетовПолучателя");
		
		Запрос.УстановитьПараметр("ОтчетДавальцу", ОтчетДавальцу);
		Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДатаСеанса()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет вычисление текущего состояния отчета давальцу на стороне отправителя.
//
// Параметры:
//	ОтчетДавальцу     - ДокументСсылка.ОтчетДавальцуМеждуОрганизациями - Документ, состояние которого необходимо вычислить
//	Договор           - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов - ФормаКлиентскогоПриложения - Форма, в реквизиты которой будет помещено рассчитанное состояние.
//
Процедура РассчитатьСостояниеОтправитель(Знач ОтчетДавальцу, Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетовОтправитель());
	
	Если ЗначениеЗаполнено(ОтчетДавальцу) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И ДокументОтчетДавальцу.Проведен
		|				И ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
		|			ТОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаОплатыОтправитель,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И ДокументОтчетДавальцу.Проведен
		|				И ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) * 100 / ДокументОтчетДавальцу.СуммаВзаиморасчетов КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентОплатыОтправитель,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И ДокументОтчетДавальцу.Проведен
		|				И ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) КАК ЧИСЛО(31,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаПросроченнойОплатыОтправитель,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И ДокументОтчетДавальцу.Проведен
		|				И ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
		|			ТОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаПриход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаОтгрузки,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И ДокументОтчетДавальцу.Проведен
		|				И ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаПриход, 0) * 100 / ДокументОтчетДавальцу.СуммаВзаиморасчетов КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентОтгрузки,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.Проведен
		|				И (ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
		|					ИЛИ ДокументОтчетДавальцу.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(31,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаДолгаОтправитель,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И ДокументОтчетДавальцу.Проведен
		|				И ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) > 0
		|						ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) * 100 / ДокументОтчетДавальцу.СуммаВзаиморасчетов КАК ЧИСЛО(15, 0))
		|					ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(-РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) * 100 / ДокументОтчетДавальцу.СуммаВзаиморасчетов КАК ЧИСЛО(15, 0))
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентДолгаОтправитель,
		|	ВЫБОР
		|		КОГДА ДокументОтчетДавальцу.Проведен
		|				И ДокументОтчетДавальцу.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|			ТОГДА РасчетыСКлиентамиОстатки.КОплатеКонечныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаКОплатеОтправитель
		|ИЗ
		|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ДокументОтчетДавальцу
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, , , , ОбъектРасчетов = &ОбъектРасчетов) КАК РасчетыСКлиентамиОстатки
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ОбъектРасчетов = &ОбъектРасчетов) КАК РасчетыСКлиентамиОстаткиНаДатуАктуальности
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ДокументОтчетДавальцу.Ссылка = &ОтчетДавальцу");
		
		ОбъектРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетДавальцу, "ОбъектРасчетов");
		
		Запрос.УстановитьПараметр("ОтчетДавальцу", ОтчетДавальцу);
		Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов); 
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДатаСеанса()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НастройкаСчетовУчета

// Возвращает параметры настройки счетов учета в документе.
//  
// Возвращаемое значение:
//  см. НастройкаСчетовУчетаСервер.ПараметрыНастройки
//
Функция ПараметрыНастройкиСчетовУчета() Экспорт
	
	ПараметрыНастроек = НастройкаСчетовУчетаСервер.ПараметрыНастройки();
	ПараметрыНастроек.ДоступностьПоОперации = Истина;
	ПараметрыНастроек.Организация           = "Объект.Организация";
	ПараметрыНастроек.ТипСтатьи             = "ТипСтатьи";
	ПараметрыНастроек.ПутьКДанным           = "Объект.Товары";
	ПараметрыНастроек.СтатьяАктивовПассивов = "СтатьяРасходов";
	
	ПараметрыНастроек.ЭлементыФормы.Добавить("ТоварыПредставлениеОтраженияОперации");
	
	ПараметрыНастроек.СкрыватьНедоступныйСчетУчетаВСтроках = Истина;
	ПараметрыНастроек.УсловияДоступностиСчетаУчетаВСтроках.Вставить(
		"СписатьНаРасходы",
		Истина);
	
	Возврат ПараметрыНастроек;
	
КонецФункции

#КонецОбласти

#Область РабочееМесто

// Формирует таблицу отчетов давальцу к оформлению
// 
// Параметры:
// 	Параметры - Структура - где:
// * Организация - СправочникСсылка.Организации
// * Давалец - СправочникСсылка.Организации
// * Подразделение - СправочникСсылка.СтруктураПредприятия
// * Номенклатура - Булево
//  АдресВременногоХранилища - УникальныйИдентификатор, Строка - Адрес временного хранилища
//
Процедура ЗаполнитьОтчетыКОформлению(Параметры, АдресВременногоХранилища) Экспорт
	
	Запрос = ЗапросОстаткиОтчетовКОформлению(Параметры);
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтатуса УБЫВ,
	|	Месяц,
	|	Организация,
	|	Давалец,
	|	ПартияПроизводства
	|";
	
	ОтчетыКОформлению = Запрос.Выполнить().Выгрузить();
	
	ПоместитьВоВременноеХранилище(ОтчетыКОформлению, АдресВременногоХранилища);
	
КонецПроцедуры

// Запрос остатков отчетов к оформлению.
// 
// Параметры:
//  Параметры - Структура
// 
// Возвращаемое значение:
//  Запрос -  Запрос остатки отчетов к оформлению
//
Функция ЗапросОстаткиОтчетовКОформлению(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Если ОбщегоНазначения.РежимОтладки() Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(
	"
	// Партии производства внутренней переработки.
	|ВЫБРАТЬ
	|	ОрганизацииПартии.Организация  КАК Организация,
	|	СпрПартииПроизводства.Ссылка   КАК ПартияПроизводства,
	|	СпрПартииПроизводства.Документ КАК Документ,
	|	СпрПартииПроизводства.Код      КАК НомерГруппыЗатрат,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ЕСТЬNULL(ТоварыОтчетовДавальцу.Ссылка.Дата, ДАТАВРЕМЯ(1,1,1)), МЕСЯЦ)) КАК МесяцКрайнегоОтчета
	|ПОМЕСТИТЬ ВнутренниеПартииПроизводства
	|ИЗ
	|	Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства.Организации КАК ОрганизацииПартии
	|	ПО ОрганизацииПартии.Ссылка = СпрПартииПроизводства.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК СторноПартии
	|	ПО СторноПартии.СторнируемыйДокумент = СпрПартииПроизводства.Документ
	|	И СторноПартии.Проведен
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ИсправленияПартии
	|	ПО ИсправленияПартии.ИсправляемыйДокумент = СпрПартииПроизводства.Документ
	|	И ИсправленияПартии.Проведен
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцуМеждуОрганизациями КАК ОтчетыДавальцу
	|	ПО ОтчетыДавальцу.Организация = ОрганизацииПартии.Организация
	|	И ОтчетыДавальцу.Проведен
	|	И НЕ ОтчетыДавальцу.Ссылка = &Регистратор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК СторноОтчета
	|	ПО СторноПартии.СторнируемыйДокумент = ОтчетыДавальцу.Ссылка
	|	И СторноОтчета.Проведен
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ИсправленияОтчета
	|	ПО ИсправленияОтчета.ИсправляемыйДокумент = ОтчетыДавальцу.Ссылка
	|	И ИсправленияОтчета.Проведен
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцуМеждуОрганизациями.Товары КАК ТоварыОтчетовДавальцу
	|	ПО ТоварыОтчетовДавальцу.Ссылка = ОтчетыДавальцу.Ссылка
	|	И ТоварыОтчетовДавальцу.ПартияПроизводства = ОрганизацииПартии.Ссылка
	|	И СторноОтчета.Ссылка ЕСТЬ NULL
	|	И ИсправленияОтчета.Ссылка ЕСТЬ NULL
	|
	|ГДЕ
	|	СпрПартииПроизводства.ВнутренняяПереработка
	|	И СторноПартии.Ссылка ЕСТЬ NULL
	|	И ИсправленияПартии.Ссылка ЕСТЬ NULL
	|	И НЕ СпрПартииПроизводства.ПометкаУдаления
	|	И НЕ ОрганизацииПартии.Организация = СпрПартииПроизводства.Организация
	|	И (&ПоВсемДавальцам ИЛИ СпрПартииПроизводства.Организация В(&Давалец))
	|	И (&ПоВсемПартиямПроизводства ИЛИ СпрПартииПроизводства.Ссылка В(&ПартииПроизводства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОрганизацииПартии.Организация,
	|	СпрПартииПроизводства.Ссылка,
	|	СпрПартииПроизводства.Документ,
	|	СпрПартииПроизводства.Код
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПартияПроизводства,
	|	Организация
	|");
	
	ТекстыЗапроса.Добавить(Справочники.ПартииПроизводства.ТекстЗапросаПартииПроизводстваВРаботе("ВнутренниеПартииПроизводства"));
	
	ТекстыЗапроса.Добавить(
	"
	// Крайние приходы в НЗП по партиям производства внутренней переработки в разрезе организаций.
	|ВЫБРАТЬ
	|	ПриходыНЗП.Организация        КАК Организация,
	|	ПриходыНЗП.ПартияПроизводства КАК ПартияПроизводства,
	|	МАКСИМУМ(ПриходыНЗП.Месяц)    КАК Месяц
	|ПОМЕСТИТЬ ПриходыНЗП
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПриходыНЗП.Организация                          КАК Организация,
	|		ВнутренниеПартииПроизводства.ПартияПроизводства КАК ПартияПроизводства,
	|		НАЧАЛОПЕРИОДА(ПриходыНЗП.Период, МЕСЯЦ)         КАК Месяц
	|	ИЗ
	|		ВнутренниеПартииПроизводства КАК ВнутренниеПартииПроизводства
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК ПриходыНЗП
	|		ПО ВнутренниеПартииПроизводства.ПартияПроизводства = ПриходыНЗП.Партия
	|		И ВнутренниеПартииПроизводства.Организация = ПриходыНЗП.Организация
	|	
	|	ГДЕ
	|		НАЧАЛОПЕРИОДА(ПриходыНЗП.Период, МЕСЯЦ) > ВнутренниеПартииПроизводства.МесяцКрайнегоОтчета
	|		И НЕ ПриходыНЗП.Сторно
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходыНЗП.Организация                          КАК Организация,
	|		ВнутренниеПартииПроизводства.ПартияПроизводства КАК ПартияПроизводства,
	|		НАЧАЛОПЕРИОДА(ПриходыНЗП.Период, МЕСЯЦ)         КАК Месяц
	|	ИЗ
	|		ВнутренниеПартииПроизводства КАК ВнутренниеПартииПроизводства
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства КАК ПриходыНЗП
	|		ПО ВнутренниеПартииПроизводства.ПартияПроизводства = ПриходыНЗП.ПартияПроизводства
	|		И ВнутренниеПартииПроизводства.Организация = ПриходыНЗП.Организация
	|	
	|	ГДЕ
	|		НАЧАЛОПЕРИОДА(ПриходыНЗП.Период, МЕСЯЦ) > ВнутренниеПартииПроизводства.МесяцКрайнегоОтчета
	|		И НЕ ПриходыНЗП.Сторно
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходыНЗП.Организация                          КАК Организация,
	|		ВнутренниеПартииПроизводства.ПартияПроизводства КАК ПартияПроизводства,
	|		НАЧАЛОПЕРИОДА(ПриходыНЗП.Период, МЕСЯЦ)         КАК Месяц
	|	ИЗ
	|		ВнутренниеПартииПроизводства КАК ВнутренниеПартииПроизводства
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТрудозатратыНезавершенногоПроизводства КАК ПриходыНЗП
	|		ПО ВнутренниеПартииПроизводства.ПартияПроизводства = ПриходыНЗП.ПартияПроизводства
	|		И ВнутренниеПартииПроизводства.Организация = ПриходыНЗП.Организация
	|	
	|	ГДЕ
	|		НАЧАЛОПЕРИОДА(ПриходыНЗП.Период, МЕСЯЦ) > ВнутренниеПартииПроизводства.МесяцКрайнегоОтчета
	|		И НЕ ПриходыНЗП.Сторно
	|	) КАК ПриходыНЗП
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходыНЗП.Организация,
	|	ПриходыНЗП.ПартияПроизводства
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПартияПроизводства,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Месяцы крайнего прихода в НЗП по партиям производства внутренней переработки.
	|ВЫБРАТЬ
	|	ПриходыНЗП.ПартияПроизводства КАК ПартияПроизводства,
	|	МАКСИМУМ(ПриходыНЗП.Месяц)    КАК Месяц
	|ПОМЕСТИТЬ МесяцыКрайнихПриходовПоПартиям
	|ИЗ
	|	ПриходыНЗП КАК ПриходыНЗП
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходыНЗП.ПартияПроизводства
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПартияПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходыНЗП.Организация                                      КАК Организация,
	|	ПриходыНЗП.ПартияПроизводства.Организация                   КАК Давалец,
	|	ПриходыНЗП.ПартияПроизводства                               КАК ПартияПроизводства,
	|	ВЫБОР
	// Идентификатор "В работе"
	|		КОГДА ПартииВРаботе.ПартияПроизводства ЕСТЬ НЕ NULL
	|			ТОГДА 1
	// Идентификатор "Завершена"
	|		ИНАЧЕ 2
	|	КОНЕЦ                                                       КАК ИдентификаторСтатуса,
	|	МАКСИМУМ(МесяцыКрайнихПриходовПоПартиям.Месяц)              КАК Месяц,
	|	ПриходыНЗП.ПартияПроизводства.ОсновноеИзделиеНоменклатура   КАК Номенклатура,
	|	ПриходыНЗП.ПартияПроизводства.ОсновноеИзделиеХарактеристика КАК Характеристика,
	|	ПриходыНЗП.ПартияПроизводства.Спецификация                  КАК Спецификация,
	|	ПриходыНЗП.ПартияПроизводства.Назначение                    КАК Назначение,
	|	ПриходыНЗП.ПартияПроизводства.НаправлениеДеятельности       КАК НаправлениеДеятельности
	|ИЗ
	|	ПриходыНЗП КАК ПриходыНЗП
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ МесяцыКрайнихПриходовПоПартиям КАК МесяцыКрайнихПриходовПоПартиям
	|	ПО МесяцыКрайнихПриходовПоПартиям.ПартияПроизводства = ПриходыНЗП.ПартияПроизводства
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПартииВРаботе КАК ПартииВРаботе
	|	ПО ПартииВРаботе.ПартияПроизводства = ПриходыНЗП.ПартияПроизводства
	|	
	|ГДЕ
	|	(&ПоВсемПереработчикам ИЛИ ПриходыНЗП.Организация В(&Организация))
	|	И НЕ ПриходыНЗП.Организация = ПриходыНЗП.ПартияПроизводства.Организация
	|	И (&ПоВсемМесяцам ИЛИ МесяцыКрайнихПриходовПоПартиям.Месяц = &Месяц)
	|	И НЕ(&ТолькоЗавершенные
	|		И ИСТИНА В(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2 КАК ЭтапыПроизводства
	|			ГДЕ
	|				ЭтапыПроизводства.ПартияПроизводства = ПриходыНЗП.ПартияПроизводства
	|				И ЭтапыПроизводства.Проведен
	|				И НЕ ЭтапыПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходыНЗП.ПартияПроизводства,
	|	ПриходыНЗП.Организация,
	|	ПартииВРаботе.ПартияПроизводства
	|");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("Организация",               Параметры.Организация);
	Запрос.УстановитьПараметр("ПоВсемПереработчикам",      Не ЗначениеЗаполнено(Параметры.Организация));
	Запрос.УстановитьПараметр("Давалец",                   Параметры.Давалец);
	Запрос.УстановитьПараметр("ПоВсемДавальцам",           Не ЗначениеЗаполнено(Параметры.Давалец));
	Запрос.УстановитьПараметр("ПартииПроизводства",        Параметры.ПартииПроизводства);
	Запрос.УстановитьПараметр("ПоВсемПартиямПроизводства", Не ЗначениеЗаполнено(Параметры.ПартииПроизводства));
	Запрос.УстановитьПараметр("Месяц",                     Параметры.Месяц);
	Запрос.УстановитьПараметр("ПоВсемМесяцам",             Не ЗначениеЗаполнено(Параметры.Месяц));
	Запрос.УстановитьПараметр("Регистратор",               Параметры.Регистратор);
	Запрос.УстановитьПараметр("ТолькоЗавершенные",         Параметры.ТолькоЗавершенные);
	
	Возврат Запрос;
	
КонецФункции

// Параметры запроса остатков отчетов к оформлению.
// 
// Возвращаемое значение:
//  Структура -  Параметры запроса остатков отчетов к оформлению:
// * Организация - СправочникСсылка.Организации
// * Давалец - СправочникСсылка.Организации
// * ПартииПроизводства - СправочникСсылка.ПартииПроизводства
// * Регистратор - ДокументСсылка.ОтчетДавальцуМеждуОрганизациями
// * Месяц - Дата
// * ТолькоЗавершенные - Булево
//
Функция ПараметрыЗапросаОстатковОтчетовКОформлению() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Давалец");
	Результат.Вставить("ПартииПроизводства");
	Результат.Вставить("Регистратор");
	Результат.Вставить("Месяц", Дата(1, 1, 1));
	Результат.Вставить("ТолькоЗавершенные", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтандартныеМеханизмы

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - Структура - описание реквизитов, для которых необходимо получить значения по статистике
//
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Организация", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Организация,Автор";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Организация";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Давалец", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Организация,Давалец";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Организация,Давалец";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Договор", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Организация";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Договор, Валюта";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Организация";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "БанковскийСчетПереработчика", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Давалец";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Договор, Валюта";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Давалец";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "БанковскийСчетДавальца", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Ответственный";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Подразделение", Параметры);
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если Не ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
		
		// Акт об оказании услуг
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьАктОбОказанииУслуг";
		КомандаПечати.Идентификатор = "Акт";
		КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг';
											|en = 'Certificate of rendered services'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		Если Константы.ИспользоватьМеждународныеПечатныеФормы.Получить() Тогда
			
			// Invoice
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Идентификатор = "InvoiceInt";
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Представление = НСтр("ru = 'Commercial invoice';
												|en = 'Commercial invoice'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтчетДавальцуМеждуОрганизациямиЛокализация.ДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ИсправлениеДокументов.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
	ОтчетДавальцуМеждуОрганизациямиЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

// Добавляет команду создания документа "Передача товаров".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  Неопределено, СтрокаТаблицыЗначений - Добавить команду создать на основании
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ОтчетДавальцуМеждуОрганизациями) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ОтчетДавальцуМеждуОрганизациями.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ОтчетДавальцуМеждуОрганизациями);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнутреннююПереработку";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.ДеревоСебестоимостиПродукции.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	ОтчетДавальцуМеждуОрганизациямиЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// При заполнении ограничения доступа.
// 
// Параметры:
//  Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	(ЗначениеРазрешено(Организация)
	|	ИЛИ ЗначениеРазрешено(Давалец))
	|	И ЗначениеРазрешено(Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ПроводкиПоРеглУчету

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат ОтчетДавальцуМеждуОрганизациямиЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса временной таблицы.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат ОтчетДавальцуМеждуОрганизациямиЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Взаиморасчеты

// Осуществляет инициализацию структуры состояния расчетов.
//
Функция СтруктураСостоянияРасчетовПолучатель()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("СуммаОплатыПолучатель", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаПоступления", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплатыПолучатель", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентПоступления", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаПросроченнойОплатыПолучатель", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолгаПолучатель", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолгаПолучатель", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплатеПолучатель", 0);
	
	Возврат СтруктураСостоянияРасчетов
	
КонецФункции

// Осуществляет инициализацию структуры состояния расчетов.
//
Функция СтруктураСостоянияРасчетовОтправитель()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("СуммаОплатыОтправитель", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплатыОтправитель", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаПросроченнойОплатыОтправитель", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолгаОтправитель", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолгаОтправитель", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплатеОтправитель", 0);
	
	Возврат СтруктураСостоянияРасчетов
	
КонецФункции

#КонецОбласти

#Область Проведение

#Область ИнициализацияПроведения

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                      КАК Ссылка,
	|	ДанныеДокумента.ПометкаУдаления             КАК ПометкаУдаления,
	|	ДанныеДокумента.Номер                       КАК Номер,
	|	ДанныеДокумента.Дата                        КАК Период,
	|	ДанныеДокумента.Проведен                    КАК Проведен,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	ДанныеДокумента.Давалец                     КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ДанныеДокумента.Давалец                     КАК Давалец,
	|	ДанныеДокумента.ХозяйственнаяОперация       КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Договор                     КАК Договор,
	|	ДанныеДокумента.Подразделение               КАК Подразделение,
	|	ДанныеДокумента.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|	ДанныеДокумента.ЦенаВключаетНДС             КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.НалогообложениеНДС          КАК НалогообложениеНДС,
	|	ДанныеДокумента.Валюта                      КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов        КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаДокумента              КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаВзаиморасчетов         КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.КурсЧислитель               КАК КурсЧислитель,
	|	ДанныеДокумента.КурсЗнаменатель             КАК КурсЗнаменатель,
	|	ДанныеДокумента.ДатаПлатежа                 КАК ДатаПлатежа,
	|	ДанныеДокумента.ПорядокРасчетов             КАК ПорядокРасчетов,
	|	ДанныеДокумента.ФормаОплаты                 КАК ФормаОплаты,
	|	ДанныеДокумента.ИдентификаторПлатежа        КАК ИдентификаторПлатежа,
	|	ДанныеДокумента.БанковскийСчетПереработчика КАК БанковскийСчетПереработчика,
	|	ДанныеДокумента.БанковскийСчетДавальца      КАК БанковскийСчетДавальца,
	|	ДанныеДокумента.ДоверенностьНомер           КАК ДоверенностьНомер,
	|	ДанныеДокумента.ДоверенностьДата            КАК ДоверенностьДата,
	|	ДанныеДокумента.ДоверенностьВыдана          КАК ДоверенностьВыдана,
	|	ДанныеДокумента.ДоверенностьЛицо            КАК ДоверенностьЛицо,
	|	ДанныеДокумента.Руководитель                КАК Руководитель,
	|	ДанныеДокумента.ГлавныйБухгалтер            КАК ГлавныйБухгалтер,
	|	ДанныеДокумента.Основание                   КАК Основание,
	|	ДанныеДокумента.ОснованиеДата               КАК ОснованиеДата,
	|	ДанныеДокумента.ОснованиеНомер              КАК ОснованиеНомер,
	|	ДанныеДокумента.ОбъектРасчетов              КАК ОбъектРасчетов,
	|	ДанныеДокумента.ОбъектРасчетовПолучателя    КАК ОбъектРасчетовПолучателя,
	|	ДанныеДокумента.Ответственный               КАК Ответственный,
	|	ДанныеДокумента.Автор                       КАК Автор,
	|	ДанныеДокумента.Комментарий                 КАК Комментарий,
	|	НастройкиХозяйственныхОпераций.Ссылка       КАК НастройкаХозяйственнойОперации,
	|	ЕСТЬNULL(ДанныеДокумента.НаправлениеДеятельности.УчетЗатрат, ЛОЖЬ)                КАК УчетЗатратПоНД,
	|	ЕСТЬNULL(ДанныеДокумента.НаправлениеДеятельности.УчетРасчетовСПоставщиками, ЛОЖЬ) КАК УчетРасчетовСПоставщикамиПоНД
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|	ПО ДанныеДокумента.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	
	Если Реквизиты.Следующий() Тогда
		Для Каждого Колонка Из Результат.Колонки Цикл
			Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",                     ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	ПараметрыУчетаПоОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(Реквизиты.Организация, Реквизиты.Период);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", ПараметрыУчетаПоОрганизации.ОсновноеНалогообложениеНДСПродажи);
	
	Запрос.УстановитьПараметр(
		"ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ОтчетДавальцуМеждуОрганизациями"));
	
	Запрос.УстановитьПараметр(
		"НомерНаПечать",
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	
	УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("АналитикаУчетаПоПартнерам") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоставщик = Новый Структура;
	СтруктураПоставщик.Вставить("Организация", Запрос.Параметры.Организация);
	СтруктураПоставщик.Вставить("Партнер",     Справочники.Партнеры.НашеПредприятие);
	СтруктураПоставщик.Вставить("Контрагент",  Запрос.Параметры.Давалец);
	СтруктураПоставщик.Вставить("Договор",     Запрос.Параметры.Договор);
	СтруктураПоставщик.Вставить("НаправлениеДеятельности", Запрос.Параметры.НаправлениеДеятельности);
	
	АналитикаУчетаПоПартнерам = РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(СтруктураПоставщик);
	
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", АналитикаУчетаПоПартнерам);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаАналитик.Номенклатура      КАК Номенклатура,
	|	ТаблицаАналитик.Характеристика    КАК Характеристика,
	|	ТаблицаАналитик.Назначение        КАК Назначение,
	|	ТаблицаАналитик.Серия             КАК Серия,
	|	ТаблицаАналитик.МестоХранения     КАК МестоХранения,
	|	ТаблицаАналитик.СтатьяКалькуляции КАК СтатьяКалькуляции
	|ИЗ
	|	(
	// Аналитика со статьей калькуляции с назначением
	|	ВЫБРАТЬ
	|		Товары.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|		Товары.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		Товары.АналитикаУчетаНоменклатуры.Назначение     КАК Назначение,
	|		Товары.АналитикаУчетаНоменклатуры.Серия          КАК Серия,
	|		Товары.АналитикаУчетаНоменклатуры.МестоХранения  КАК МестоХранения,
	|		Товары.СтатьяКалькуляции                         КАК СтатьяКалькуляции
	|	ИЗ
	|		Документ.ОтчетДавальцуМеждуОрганизациями.Товары КАК Товары
	|	ГДЕ
	|		&УчитыватьСебестоимостьТоваровПоНазначениям
	|		И Товары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Аналитика со статьей калькуляции без назначения
	|	ВЫБРАТЬ
	|		Товары.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|		Товары.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)     КАК Назначение,
	|		Товары.АналитикаУчетаНоменклатуры.Серия          КАК Серия,
	|		Товары.АналитикаУчетаНоменклатуры.МестоХранения  КАК МестоХранения,
	|		Товары.СтатьяКалькуляции                         КАК СтатьяКалькуляции
	|	ИЗ
	|		Документ.ОтчетДавальцуМеждуОрганизациями.Товары КАК Товары
	|	ГДЕ
	|		НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|		И Товары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Аналитика без статьи калькуляции без назначения
	|	ВЫБРАТЬ
	|		Товары.АналитикаУчетаНоменклатуры.Номенклатура      КАК Номенклатура,
	|		Товары.АналитикаУчетаНоменклатуры.Характеристика    КАК Характеристика,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)        КАК Назначение,
	|		Товары.АналитикаУчетаНоменклатуры.Серия             КАК Серия,
	|		Товары.АналитикаУчетаНоменклатуры.МестоХранения     КАК МестоХранения,
	|		Товары.АналитикаУчетаНоменклатуры.СтатьяКалькуляции КАК СтатьяКалькуляции
	|	ИЗ
	|		Документ.ОтчетДавальцуМеждуОрганизациями.Товары КАК Товары
	|	ГДЕ
	|		НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|		И Товары.Ссылка = &Ссылка
	|	) КАК ТаблицаАналитик
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Аналитика.Номенклатура     = ТаблицаАналитик.Номенклатура
	|	И Аналитика.Характеристика    = ТаблицаАналитик.Характеристика
	|	И Аналитика.Серия             = ТаблицаАналитик.Серия
	|	И Аналитика.МестоХранения     = ТаблицаАналитик.МестоХранения
	|	И Аналитика.Назначение        = ТаблицаАналитик.Назначение
	|	И Аналитика.СтатьяКалькуляции = ТаблицаАналитик.СтатьяКалькуляции
	|
	|ГДЕ
	|	Аналитика.КлючАналитики ЕСТЬ NULL
	|";
	
	ЗапросАналитик.УстановитьПараметр("Ссылка",                                     Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", Запрос.Параметры.УчитыватьСебестоимостьТоваровПоНазначениям);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.ОтчетДавальцуМеждуОрганизациями";
	СинонимТаблицыДокумента = "ТаблицаДокументов";
	ВЗапросеЕстьИсточник    = Истина;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",        """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору", """""");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
	Иначе
		
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'В документе %1 не реализована адаптация текста запроса формирования движений по регистру %2.';
				|en = 'In the %1 document, adaptation of request for generating records of the %2 register is not implemented.'"),
			ПолноеИмяДокумента,
			ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса       = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовВременныеТаблицы

Функция ТекстЗапросаТаблицаВтТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТовары";
	
	СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса);
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка                     КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	СпрНоменклатура.Ссылка                   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика             КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЕСТЬNULL(АналитикаНоменклатурыБезНазначений.КлючАналитики, ТаблицаТовары.АналитикаУчетаНоменклатуры) КАК АналитикаУчетаНоменклатурыПереработчика,
	|	ЕСТЬNULL(АналитикаНоменклатурыДавальцаБезНазначения.КлючАналитики, АналитикаНоменклатурыДавальца.КлючАналитики) КАК АналитикаУчетаНоменклатурыДавальца,
	|
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС КАК ВидДеятельностиНДСДавальца,
	|	ВЫБОР КОГДА ТаблицаТовары.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
	|				И &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|		ИНАЧЕ &НалогообложениеНДС
	|	КОНЕЦ                                            КАК ВидДеятельностиНДСПереработчика,
	|	ТаблицаТовары.ПартияПроизводства                 КАК ПартияПроизводства,
	|	ТаблицаТовары.СтавкаНДС                          КАК СтавкаНДС,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий  КАК АналитикаУчетаПартий,
	|	ТаблицаТовары.ПартияПроизводства.ГруппаПродукции КАК АналитикаФинансовогоУчета,
	|	ТаблицаТовары.СтатьяРасходов             КАК СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов          КАК АналитикаРасходов,
	|	ТаблицаТовары.АналитикаАктивовПассивов   КАК АналитикаАктивовПассивов,
	|	ТаблицаТовары.Количество                 КАК Количество,
	|	ЕСТЬNULL(Суммы.СуммаСНДСУпр, 0)          КАК Стоимость,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр, 0)        КАК СтоимостьБезНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			И НЕ &ФормироватьНДСПредъявленныйПриВключенииВСтоимость
	|			ТОГДА ЕСТЬNULL(Суммы.СуммаСНДСРегл, 0)
	|		ИНАЧЕ ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0)
	|	КОНЕЦ                                    КАК СтоимостьРегл,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА ВЫБОР
	|				КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|					И НЕ &ФормироватьНДСПредъявленныйПриВключенииВСтоимость
	|					ТОГДА ЕСТЬNULL(Суммы.СуммаСНДСУпр, 0)
	|				ИНАЧЕ ЕСТЬNULL(Суммы.СуммаБезНДСУпр, 0)
	|			КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ                                    КАК СтоимостьУпр,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0)       КАК СуммаБезНДСРегл,
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, 0)          КАК СуммаНДСРегл,
	|	ЕСТЬNULL(Суммы.СуммаНДСУпр, 0)           КАК СуммаНДСУпр,
	|	ТаблицаТовары.СуммаСНДС                  КАК СуммаСНДС,
	|	ТаблицаТовары.СуммаНДС                   КАК СуммаНДС,
	|	ТаблицаТовары.СуммаВзаиморасчетов        КАК СуммаВзаиморасчетов,
	|	ТаблицаТовары.СуммаНДСВзаиморасчетов     КАК СуммаНДСВзаиморасчетов,
	|	ТаблицаТовары.НастройкаСчетовУчета       КАК НастройкаСчетовУчета,
	|	ТаблицаТовары.ИдентификаторСтроки        КАК ИдентификаторСтроки,
	|	ТаблицаТовары.ИдентификаторСтроки        КАК ИдентификаторФинЗаписи,
	|	ТаблицаТовары.СписатьНаРасходы           КАК СписатьНаРасходы,
	|	&ХозяйственнаяОперация                   КАК ХозяйственнаяОперация,
	|	&НастройкаХозяйственнойОперации          КАК НастройкаХозяйственнойОперации
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями.Товары КАК ТаблицаТовары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО ТаблицаТовары.Номенклатура = СпрНоменклатура.Ссылка
	|	
	// Аналитика учета номенклатуры переработчика
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|	ПО АналитикаНоменклатуры.Ссылка = ТаблицаТовары.АналитикаУчетаНоменклатуры
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатурыБезНазначений
	|	ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|	И АналитикаНоменклатурыБезНазначений.Номенклатура      = АналитикаНоменклатуры.Номенклатура
	|	И АналитикаНоменклатурыБезНазначений.Характеристика    = АналитикаНоменклатуры.Характеристика
	|	И АналитикаНоменклатурыБезНазначений.Серия             = АналитикаНоменклатуры.Серия
	|	И АналитикаНоменклатурыБезНазначений.МестоХранения     = АналитикаНоменклатуры.МестоХранения
	|	И АналитикаНоменклатурыБезНазначений.Назначение        = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И АналитикаНоменклатурыБезНазначений.СтатьяКалькуляции = АналитикаНоменклатуры.СтатьяКалькуляции
	|	
	// Аналитика учета номенклатуры давальца
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатурыДавальца
	|	ПО АналитикаНоменклатурыДавальца.Номенклатура     = АналитикаНоменклатуры.Номенклатура
	|	И АналитикаНоменклатурыДавальца.Характеристика    = АналитикаНоменклатуры.Характеристика
	|	И АналитикаНоменклатурыДавальца.Серия             = АналитикаНоменклатуры.Серия
	|	И АналитикаНоменклатурыДавальца.МестоХранения     = АналитикаНоменклатуры.МестоХранения
	|	И АналитикаНоменклатурыДавальца.Назначение        = АналитикаНоменклатуры.Назначение
	|	И АналитикаНоменклатурыДавальца.СтатьяКалькуляции = ТаблицаТовары.СтатьяКалькуляции
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатурыДавальцаБезНазначения
	|	ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|	И АналитикаНоменклатурыДавальцаБезНазначения.Номенклатура     = АналитикаНоменклатуры.Номенклатура
	|	И АналитикаНоменклатурыДавальцаБезНазначения.Характеристика    = АналитикаНоменклатуры.Характеристика
	|	И АналитикаНоменклатурыДавальцаБезНазначения.Серия             = АналитикаНоменклатуры.Серия
	|	И АналитикаНоменклатурыДавальцаБезНазначения.МестоХранения     = АналитикаНоменклатуры.МестоХранения
	|	И АналитикаНоменклатурыДавальцаБезНазначения.Назначение        = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И АналитикаНоменклатурыДавальцаБезНазначения.СтатьяКалькуляции = ТаблицаТовары.СтатьяКалькуляции
	|	
	// Суммы документа
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтСуммыДокументовВВалютахУчета КАК Суммы
	|	ПО Суммы.Ссылка             = ТаблицаТовары.Ссылка
	|	И Суммы.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|
	// Аналитика учета партий
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки = ТаблицаТовары.НомерСтроки
	|	И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""ВыходныеИзделия""
	|	
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов          КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов       КАК АналитикаРасходов,
	|	&НаправлениеДеятельности               КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                           КАК ВидДеятельностиНДС,
	|	0                                      КАК СуммаСНДС,
	|	0                                      КАК СуммаБезНДС,
	|	0                                      КАК СуммаБезНДСУпр,
	|	0                                      КАК СуммаСНДСРегл,
	|	0                                      КАК СуммаБезНДСРегл,
	|	0                                      КАК ПостояннаяРазница,
	|	0                                      КАК ВременнаяРазница,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                           КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаРасходы.ИдентификаторСтроки     КАК ИдентификаторСтроки,
	|	ТаблицаРасходы.ИдентификаторФинЗаписи  КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации        КАК НастройкаХозяйственнойОперации
	|
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	ВтТовары КАК ТаблицаРасходы
	|ГДЕ
	|	ТаблицаРасходы.СписатьНаРасходы
	|	И ТИПЗНАЧЕНИЯ(ТаблицаРасходы.СтатьяРасходов) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы("ИдентификаторСтроки");
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	ТекстВыборкаПоляАналитик =
	"ВЫБРАТЬ
	|	""ВыходныеИзделия""										КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки							КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)			КАК Поставщик,
	|	ТаблицаДокумента.Ссылка.Организация						КАК Контрагент,
	|	ТаблицаДокумента.СтавкаНДС								КАК СтавкаНДС,
	//	ВидДеятельностиНДСДавальца берем из партии производства, потому что у давальца вид деятельности определяется партией производства
	|	ТаблицаДокумента.ПартияПроизводства.ВидДеятельностиНДС	КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)				КАК ВидЦенности,
	|	ТаблицаДокумента.КодСтроки								КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(
		ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовПроведения

Функция ТекстЗапросаТаблицаВыпускПродукции(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ВыпускПродукции";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Организация                            КАК Организация,
	|	&Подразделение                          КАК Подразделение,
	|	&Период                                 КАК Период,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатурыПереработчика КАК АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.Количество               КАК Количество,
	|	ТабличнаяЧасть.СтатьяРасходов           КАК СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов        КАК АналитикаРасходов,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов
	|ИЗ
	|	ВтТовары КАК ТабличнаяЧасть
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "Закупки";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                           КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУДругойОрганизации) КАК ХозяйственнаяОперация,
	|	&Давалец                                          КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)     КАК Партнер,
	|	&Организация                                      КАК Контрагент,
	|	&Договор                                          КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                      КАК Заказ,
	|	ВЫБОР
	|		КОГДА &УчетРасчетовСПоставщикамиПоНД
	|			ТОГДА &НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                             КАК НаправлениеДеятельностиКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Соглашение,
	|	&Подразделение                                    КАК Подразделение,
	|	&Ответственный                                    КАК Менеджер,
	|
	|	ТаблицаТовары.АналитикаУчетаНоменклатурыДавальца  КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА &УчетЗатратПоНД
	|			ТОГДА &НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                             КАК НаправлениеДеятельностиНоменклатуры,
	|	&Подразделение                                    КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)         КАК ТипЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)     КАК ВидЗапасов,
	|
	|	СУММА(ТаблицаТовары.Количество)                   КАК Количество,
	|
	|	СУММА(ЕСТЬNULL(ТаблицаТовары.Стоимость, 0))       КАК Сумма,
	|	СУММА(ЕСТЬNULL(ТаблицаТовары.СтоимостьБезНДС, 0)) КАК СуммаБезНДС,
	|	СУММА(ЕСТЬNULL(ТаблицаТовары.СуммаБезНДСРегл, 0) + ЕСТЬNULL(ТаблицаТовары.СуммаНДСРегл, 0)) КАК СуммаРегл,
	|	СУММА(ЕСТЬNULL(ТаблицаТовары.СуммаБезНДСРегл, 0)) КАК СуммаРеглБезНДС,
	|	СУММА(ЕСТЬNULL(ТаблицаТовары.Стоимость, 0))       КАК Стоимость,
	|	СУММА(ЕСТЬNULL(ТаблицаТовары.СтоимостьБезНДС, 0)) КАК СтоимостьБезНДС,
	|	СУММА(ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.ПартияПроизводства.ВидДеятельностиНДС,
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) В(
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|			ТОГДА ЕСТЬNULL(ТаблицаТовары.СуммаБезНДСРегл, 0) + ЕСТЬNULL(ТаблицаТовары.СуммаНДСРегл, 0)
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаТовары.СуммаБезНДСРегл, 0)
	|	КОНЕЦ)                                            КАК СтоимостьРегл,
	|
	|	&Валюта                                           КАК ВалютаДокумента,
	|	СУММА(ТаблицаТовары.СуммаСНДС)                    КАК СуммаВВалютеДокумента,
	|	СУММА(ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС) КАК СуммаБезНДСВВалютеДокумента,
	|
	|	&ВалютаВзаиморасчетов                             КАК ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов)          КАК СуммаВВалютеВзаиморасчетов,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов - ТаблицаТовары.СуммаНДСВзаиморасчетов) КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ТаблицаТовары.Номенклатура                        КАК ИсточникГФУНоменклатуры,
	|	&ОбъектРасчетовПолучателя                         КАК ИсточникГФУРасчетов
	|ИЗ
	|	ВтТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ ТаблицаТовары.СписатьНаРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.АналитикаУчетаНоменклатурыДавальца,
	|	ТаблицаТовары.Номенклатура
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МатериалыИРаботыВПроизводстве";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК Количество
	|ИЗ
	|	ВтТовары КАК ТаблицаТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК Количество
	|ИЗ
	|	ВтТовары КАК ТаблицаТовары
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеАктивыПассивы.ТекстЗапросаТаблицаПрочиеАктивыПассивы(Ложь);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка                  КАК Ссылка,
	|	ТаблицаДокументов.Дата                    КАК ДатаДокументаИБ,
	|	ТаблицаДокументов.Номер                   КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                  КАК ТипСсылки,
	|	ТаблицаДокументов.Организация             КАК Организация,
	|	ТаблицаДокументов.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	ТаблицаДокументов.Договор                 КАК Договор,
	|	ТаблицаДокументов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаДокументов.Подразделение           КАК Подразделение,
	|	ТаблицаДокументов.Ответственный           КАК Ответственный,
	|	ТаблицаДокументов.Автор                   КАК Автор,
	|	ВЫРАЗИТЬ(ТаблицаДокументов.Комментарий    КАК СТРОКА(100)) КАК Комментарий,
	|	ТаблицаДокументов.Валюта                  КАК Валюта,
	|	ТаблицаДокументов.СуммаДокумента          КАК Сумма,
	|	ТаблицаДокументов.Проведен                КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления         КАК ПометкаУдаления,
	|	ЛОЖЬ                                      КАК ДополнительнаяЗапись,
	|	ТаблицаДокументов.Дата                    КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                            КАК НомерПервичногоДокумента
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка                  КАК Ссылка,
	|	ТаблицаДокументов.Дата                    КАК ДатаДокументаИБ,
	|	ТаблицаДокументов.Номер                   КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                  КАК ТипСсылки,
	|	ТаблицаДокументов.Давалец                 КАК Организация,
	|	ТаблицаДокументов.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	ТаблицаДокументов.Договор                 КАК Договор,
	|	ТаблицаДокументов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаДокументов.Подразделение           КАК Подразделение,
	|	ТаблицаДокументов.Ответственный           КАК Ответственный,
	|	ТаблицаДокументов.Автор                   КАК Автор,
	|	ВЫРАЗИТЬ(ТаблицаДокументов.Комментарий    КАК СТРОКА(100)) КАК Комментарий,
	|	ТаблицаДокументов.Валюта                  КАК Валюта,
	|	ТаблицаДокументов.СуммаДокумента          КАК Сумма,
	|	ТаблицаДокументов.Проведен                КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления         КАК ПометкаУдаления,
	|	ИСТИНА                                    КАК ДополнительнаяЗапись,
	|	ТаблицаДокументов.Дата                    КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                            КАК НомерПервичногоДокумента
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВыручкаИСебестоимостьПродаж(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ВыручкаИСебестоимостьПродаж";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПродукции.НомерСтроки	КАК НомерСтроки,
	|	&Период							КАК Период,
	|	&Подразделение					КАК Подразделение,
	|	ТаблицаПродукции.АналитикаУчетаНоменклатурыПереработчика						КАК АналитикаУчетаНоменклатуры,
	|	&АналитикаУчетаПоПартнерам														КАК АналитикаУчетаПоПартнерам,
	|	Значение(Перечисление.ХозяйственныеОперации.ОтчетДавальцуМеждуОрганизациями)	КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг)
	|		ИНАЧЕ &НалогообложениеНДС
	|	КОНЕЦ																			КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)										КАК ТипЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)									КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)	КАК РазделУчета,
	|	ТаблицаПродукции.АналитикаФинансовогоУчета										КАК АналитикаФинансовогоУчета,
	|	ТаблицаПродукции.ВидДеятельностиНДСПереработчика								КАК ВидДеятельностиНДС,
	|
	|	&Ответственный					КАК Менеджер,
	|	0								КАК Стоимость,
	|	ТаблицаПродукции.Количество		КАК Количество,
	|	&Ссылка							КАК ЗаказКлиента,
	// Поля аналитики учета партий
	|	&Ссылка									КАК Партия,
	|	ТаблицаПродукции.АналитикаУчетаПартий	КАК АналитикаУчетаПартий,
	|
	|	ТаблицаПродукции.Стоимость			КАК СуммаВыручки,
	|	ТаблицаПродукции.СтоимостьБезНДС	КАК СуммаВыручкиБезНДС,
	|	ТаблицаПродукции.СуммаБезНДСРегл	КАК СуммаВыручкиРегл,
	|	ТаблицаПродукции.СуммаБезНДСРегл + ТаблицаПродукции.СуммаНДСРегл КАК СуммаВыручкиСНДСРегл,
	|	0 КАК СуммаРучнойСкидки,
	|	0 КАК СуммаАвтоматическойСкидки,
	|
	|	&Подразделение	КАК Склад,
	|	&Договор		КАК Договор,
	|	НЕОПРЕДЕЛЕНО	КАК Соглашение,
	|
	|	&НаправлениеДеятельности							КАК НаправлениеДеятельностиКонтрагента,
	|	ТаблицаПродукции.Назначение.НаправлениеДеятельности	КАК НаправлениеДеятельностиНоменклатуры,
	|
	|	&ВалютаВзаиморасчетов											КАК ВалютаВзаиморасчетов,
	|	ТаблицаПродукции.СуммаВзаиморасчетов							КАК СуммаВВалютеВзаиморасчетов,
	|	ТаблицаПродукции.СуммаВзаиморасчетов - ТаблицаПродукции.СуммаНДСВзаиморасчетов КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	&Валюта													КАК ВалютаДокумента,
	|	ТаблицаПродукции.СуммаСНДС								КАК СуммаВВалютеДокумента,
	|	ТаблицаПродукции.СуммаСНДС - ТаблицаПродукции.СуммаНДС	КАК СуммаБезНДСВВалютеДокумента,
	|
	|	ТаблицаПродукции.Номенклатура	КАК ИсточникГФУНоменклатуры,
	|	&ОбъектРасчетов					КАК ИсточникГФУРасчетов,
	|	
	|	ТаблицаПродукции.ИдентификаторФинЗаписи			КАК ИдентификаторФинЗаписи,
	|	ТаблицаПродукции.НастройкаХозяйственнойОперации	КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ВтТовары КАК ТаблицаПродукции
	|
	|ГДЕ
	|	НЕ ТаблицаПродукции.СписатьНаРасходы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы("ИдентификаторСтроки");
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры = Неопределено) Экспорт
	
	ТекстЗапросаДанных = 
	"ВЫБРАТЬ
	|	""ТоварыРаботыУслуги""                           КАК ИсточникДанных,
	|	ИСТИНА                                           КАК РаспределятьОбщуюСумму,
	|	ТаблицаТовары.Ссылка                             КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Дата                        КАК Дата,
	|	ТаблицаТовары.Ссылка.Организация                 КАК Организация,
	|	ТаблицаТовары.Ссылка.Валюта                      КАК ВалютаДокумента,
	|	ТаблицаТовары.Ссылка.ВалютаВзаиморасчетов        КАК ВалютаВзаиморасчетов,
	|	ТаблицаТовары.Ссылка.Дата                        КАК ПериодБазыНДС,
	|	ТаблицаТовары.Ссылка.Дата                        КАК ДатаКурса,
	|	ТаблицаТовары.НомерСтроки                        КАК НомерСтроки,
	|	ТаблицаТовары.ИдентификаторСтроки                КАК ИдентификаторСтроки,
	|	ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС КАК СуммаБезНДС,
	|	ТаблицаТовары.СтавкаНДС                          КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС                           КАК СуммаНДС,
	|	ТаблицаТовары.СуммаВзаиморасчетов                КАК СуммаВзаиморасчетов,
	|	0                                                КАК СуммаНДСВзаиморасчетов,
	|	0                                                КАК СуммаБезНДСРегл,
	|	0                                                КАК СуммаБезНДСУпр,
	|
	|	ИСТИНА                                           КАК ОтражаетсяВРасчетах,
	|	ТаблицаТовары.Ссылка.ОбъектРасчетов              КАК ОбъектРасчетов,
	|	ИСТИНА                                           КАК ПересчитыватьПоДаннымРасчетов
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (&Ссылка)
	|";
	
	РегистрыСведений.СуммыДокументовВВалютахУчета.СформироватьПоДаннымДокумента(
		Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанных);

КонецПроцедуры

#Область Взаиморасчеты

Процедура ДобавитьТекстыОтраженияВзаиморасчетов(Запрос, ТекстыЗапроса, Регистры)
	
	#Область КурсыВалютДокумента
	
	ИмяРегистра = "ВременнаяТаблицаКурсыВалютДокумента";

	ТекстЗапросаКурсыВалютДокумента = 
		"ВЫБРАТЬ
		|	ДанныеДокументаШапка.Ссылка КАК Ссылка,
		|	ДанныеДокументаШапка.Давалец КАК Организация,
		|	ДанныеДокументаШапка.Дата КАК ДатаКурса,
		|	ДанныеДокументаШапка.ОбъектРасчетовПолучателя КАК ОбъектРасчетов,
		|	ДанныеДокументаШапка.Валюта КАК ВалютаДокумента,
		|	ДанныеДокументаШапка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ДанныеДокументаШапка
		|ГДЕ
		|	ДанныеДокументаШапка.Ссылка В (&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокументаШапка.Ссылка КАК Ссылка,
		|	ДанныеДокументаШапка.Давалец КАК Организация,
		|	ДанныеДокументаШапка.Дата КАК ДатаКурса,
		|	Таблица.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ДанныеДокументаШапка.Валюта КАК ВалютаДокумента,
		|	ДанныеДокументаШапка.Валюта КАК ВалютаВзаиморасчетов
		|ИЗ
		|	Документ.ОтчетДавальцуМеждуОрганизациями.РасшифровкаПлатежаСПоставщиком КАК Таблица
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцуМеждуОрганизациями КАК ДанныеДокументаШапка
		|	ПО Таблица.Ссылка = ДанныеДокументаШапка.Ссылка
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокументаШапка.Ссылка КАК Ссылка,
		|	ДанныеДокументаШапка.Организация КАК Организация,
		|	ДанныеДокументаШапка.Дата КАК ДатаКурса,
		|	ДанныеДокументаШапка.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ДанныеДокументаШапка.Валюта КАК ВалютаДокумента,
		|	ДанныеДокументаШапка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ДанныеДокументаШапка
		|ГДЕ
		|	ДанныеДокументаШапка.Ссылка В (&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокументаШапка.Ссылка КАК Ссылка,
		|	ДанныеДокументаШапка.Организация КАК Организация,
		|	ДанныеДокументаШапка.Дата КАК ДатаКурса,
		|	Таблица.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ДанныеДокументаШапка.Валюта КАК ВалютаДокумента,
		|	ДанныеДокументаШапка.Валюта КАК ВалютаВзаиморасчетов
		|ИЗ
		|	Документ.ОтчетДавальцуМеждуОрганизациями.РасшифровкаПлатежаСКлиентом КАК Таблица
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцуМеждуОрганизациями КАК ДанныеДокументаШапка
		|	ПО Таблица.Ссылка = ДанныеДокументаШапка.Ссылка
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|";
		
	ТекстЗапросаКурсыВалютДокумента = ВзаиморасчетыСервер.ПолучитьТаблицуКурсовВалютНаправленийДеятельности(ТекстЗапросаКурсыВалютДокумента);

	ТекстыЗапроса.Добавить(ТекстЗапросаКурсыВалютДокумента, ИмяРегистра);
	
	#КонецОбласти
	
	#Область ДобавитьТекстыОтраженияВзаиморасчетовЗакупки
	
	#Область Закупка
	
	ТекстЗакупка = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка                                КАК Ссылка,
		|	Таблица.Давалец                               КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
		|	Таблица.Дата                                  КАК ДатаРегистратора,
		|	Таблица.Номер                                 КАК НомерРегистратора,
		|	Таблица.ОбъектРасчетовПолучателя              КАК ОбъектРасчетов,
		|	Таблица.ДатаПлатежа                           КАК ДатаПлатежа,
		|	НЕОПРЕДЕЛЕНО                                  КАК ВариантОплаты,
		|	НЕОПРЕДЕЛЕНО                                  КАК ЗаказЗакупки,
		|	Таблица.СуммаДокумента                        КАК Сумма,
		|	Таблица.СуммаВзаиморасчетов                   КАК СуммаВзаиморасчетов,
		|	0                                             КАК СуммаВзаиморасчетовПоТаре,
		|
		|	Таблица.ПорядокРасчетов                       КАК ПорядокРасчетов,
		|	ЛОЖЬ                                          КАК НакладнаяПоЗаказам,
		|	Таблица.ВалютаВзаиморасчетов                  КАК ВалютаВзаиморасчетов,
		|	Таблица.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
		|	Таблица.ФормаОплаты                           КАК ФормаОплаты,
		|	Таблица.Валюта                                КАК ВалютаДокумента,
		|	Таблица.Дата                                  КАК ДатаКурса,
		|	НЕОПРЕДЕЛЕНО                                  КАК СвязанныйДокумент
		|ИЗ
		|	Документ.ОтчетДавальцуМеждуОрганизациями КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|";
	
	#КонецОбласти
	
	#Область УвеличениеПланаОплаты
	
	ТекстПланОплаты = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка                                КАК Ссылка,
		|	Таблица.Давалец                               КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
		|	Таблица.Дата                                  КАК ДатаРегистратора,
		|	Таблица.Номер                                 КАК НомерРегистратора,
		|	Таблица.ДатаПлатежа                           КАК ДатаПлатежа,
		|	
		|	Таблица.ОбъектРасчетовПолучателя              КАК ОбъектРасчетов,
		|	Таблица.ПорядокРасчетов                       КАК ПорядокРасчетов,
		|	ЛОЖЬ                                          КАК НакладнаяПоЗаказам,
		|	ЛОЖЬ                                          КАК СверхЗаказа,
		|	НЕОПРЕДЕЛЕНО                                  КАК ЗаказЗакупки,
		|	Таблица.СуммаВзаиморасчетов                   КАК КОплате,
		|	Таблица.ВалютаВзаиморасчетов                  КАК ВалютаВзаиморасчетов,
		|	Таблица.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
		|	Таблица.ФормаОплаты                           КАК ФормаОплаты,
		|	Таблица.Валюта                                КАК ВалютаДокумента,
		|	НЕОПРЕДЕЛЕНО                                  КАК ВариантОплаты,
		|	НЕОПРЕДЕЛЕНО                                  КАК СвязанныйДокумент
		|ИЗ
		|	Документ.ОтчетДавальцуМеждуОрганизациями КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|";

	#КонецОбласти
	
	#Область ЗачетАвансов
	
	ТекстЗачетАванса = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка                                КАК Ссылка,
		|	Таблица.Ссылка.Давалец                        КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
		|	
		|	Таблица.ОбъектРасчетов                        КАК ОбъектРасчетовИсточник,
		|	Таблица.Ссылка.ОбъектРасчетовПолучателя       КАК ОбъектРасчетовПриемник,
		|
		|	Таблица.Ссылка.ВалютаВзаиморасчетов           КАК ВалютаВзаиморасчетов,
		|	Таблица.СуммаВзаиморасчетов                   КАК СуммаВзаиморасчетов,
		|	Таблица.Ссылка.Валюта                         КАК ВалютаДокумента,
		|	Таблица.Сумма                                 КАК Сумма,
		|
		|	Таблица.Ссылка.Дата                           КАК ДатаКурса,
		|	Таблица.Ссылка.Дата                           КАК ДатаРегистратора,
		|	Таблица.Ссылка.Номер                          КАК НомерРегистратора,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса) КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.ОтчетДавальцуМеждуОрганизациями.РасшифровкаПлатежаСПоставщиком КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|";
	
	#КонецОбласти
	
	ВзаиморасчетыСервер.ПроведениеЗакупки(Запрос, ТекстыЗапроса, Регистры, ТекстЗакупка, ТекстПланОплаты, ТекстЗачетАванса);
	
	#КонецОбласти
	
	#Область ДобавитьТекстыОтраженияВзаиморасчетовПродажи
	
	#Область Продажа
	
	ТекстПродажа =
		"ВЫБРАТЬ
		|	Таблица.Ссылка                                КАК Ссылка,
		|	Таблица.Организация                           КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
		|	
		|	Таблица.ОбъектРасчетов                        КАК ОбъектРасчетов,
		|	Таблица.ДатаПлатежа                           КАК ДатаПлатежа,
		|	НЕОПРЕДЕЛЕНО                                  КАК ЗаказПродажи,
		|	ЛОЖЬ                                          КАК НакладнаяПоЗаказам,
		|	Таблица.СуммаВзаиморасчетов                   КАК СуммаВзаиморасчетов,
		|	0                                             КАК СуммаВзаиморасчетовПоТаре,
		|	Таблица.СуммаДокумента                        КАК Сумма,
		|	
		|	Таблица.ПорядокРасчетов                       КАК ПорядокРасчетов,
		|	Таблица.Дата                                  КАК ДатаРегистратора,
		|	Таблица.Номер                                 КАК НомерРегистратора,
		|	Таблица.ВалютаВзаиморасчетов                  КАК ВалютаВзаиморасчетов,
		|	Таблица.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
		|	Таблица.Дата                                  КАК ДатаКурса,
		|	Таблица.Валюта                                КАК ВалютаДокумента,
		|	НЕОПРЕДЕЛЕНО                                  КАК ВариантОплаты,
		|	ЛОЖЬ                                          КАК СверхЗаказа,
		|	НЕОПРЕДЕЛЕНО                                  КАК СвязанныйДокумент
		|ИЗ
		|	Документ.ОтчетДавальцуМеждуОрганизациями КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|";
	
	#КонецОбласти
	
	#Область УвеличениеПланаОплат
	
	ТекстПланированиеОплат = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка                                КАК Ссылка,
		|	Таблица.Организация                           КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
		|	
		|	Таблица.ОбъектРасчетов                        КАК ОбъектРасчетов,
		|	Таблица.Дата                                  КАК ДатаРегистратора,
		|	Таблица.Номер                                 КАК НомерРегистратора,
		|	Таблица.ПорядокРасчетов                       КАК ПорядокРасчетов,
		|	Таблица.ВалютаВзаиморасчетов                  КАК ВалютаВзаиморасчетов,
		|	Таблица.Валюта                                КАК ВалютаДокумента,
		|	Таблица.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
		|	Таблица.ФормаОплаты                           КАК ФормаОплаты,
		|	
		|	Таблица.ДатаПлатежа                           КАК ДатаПлатежа,
		|	НЕОПРЕДЕЛЕНО                                  КАК ВариантОплаты,
		|	Таблица.СуммаВзаиморасчетов                   КАК КОплате,
		|	
		|	ИСТИНА                                        КАК ИсключатьПриКонтроле,
		|	ЛОЖЬ                                          КАК НакладнаяПоЗаказам,
		|	НЕОПРЕДЕЛЕНО                                  КАК ЗаказПродажи,
		|	ЛОЖЬ                                          КАК СверхЗаказа,
		|	НЕОПРЕДЕЛЕНО                                  КАК СвязанныйДокумент
		|ИЗ
		|	Документ.ОтчетДавальцуМеждуОрганизациями КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|";
	
	#КонецОбласти
	
	#Область ЗачетАвансов
	
	ТекстЗачетАванса = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка                                КАК Ссылка,
		|	Таблица.Ссылка.Организация                    КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
		|
		|	Таблица.ОбъектРасчетов                        КАК ОбъектРасчетовИсточник,
		|	Таблица.Ссылка.ОбъектРасчетов                 КАК ОбъектРасчетовПриемник,
		|
		|	Таблица.Ссылка.ВалютаВзаиморасчетов           КАК ВалютаВзаиморасчетов,
		|	Таблица.СуммаВзаиморасчетов                   КАК СуммаВзаиморасчетов,
		|	Таблица.Ссылка.Валюта                         КАК ВалютаДокумента,
		|	Таблица.Сумма                                 КАК Сумма,
		|
		|	Таблица.Ссылка.Дата                           КАК ДатаКурса,
		|	Таблица.Ссылка.Дата                           КАК ДатаРегистратора,
		|	Таблица.Ссылка.Номер                          КАК НомерРегистратора,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса) КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.ОтчетДавальцуМеждуОрганизациями.РасшифровкаПлатежаСКлиентом КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|";
	
	#КонецОбласти
	
	ВзаиморасчетыСервер.ПроведениеПродажи(Запрос, ТекстыЗапроса, Регистры, ТекстПродажа, ТекстПланированиеОплат, ТекстЗачетАванса);
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область ПартионныйУчет

Функция ОписаниеРегистровУчетаЗатратИСебестоимости(Документ) Экспорт
	
	ОписаниеРегистров = Новый Массив;
	ОписаниеРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	Возврат ОписаниеРегистров;
	
КонецФункции

Функция УстановитьДополнительныеПараметрыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	
	Если Запрос <> Неопределено Тогда
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьДополнительныеТаблицыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено, ТекстыЗапроса = Неопределено) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ВтТовары");
	
	Если Запрос <> Неопределено Тогда
	
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаТаблицаВтТовары(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеТаблицы;
	
КонецФункции

Функция ОписаниеОперацийУчетаСебестоимости(Документ) Экспорт
	
	ОписаниеОпераций = Новый Массив;
	
	#Область ВнутреннееПоступление_ВыпускРаботы_УПереработчика_1
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата	КАК Период,
	|	ТаблицаДокумента.Ссылка	КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО			КАК КорректируемыйДокумент,
	|	0						КАК КодСтроки,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация						КАК Организация,
	|	ВтТовары.АналитикаУчетаНоменклатурыПереработчика	КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО										КАК ВидЗапасов,
	|	ВтТовары.ВидДеятельностиНДСПереработчика			КАК ВидДеятельностиНДС,
	|	ВтТовары.ВидДеятельностиНДСПереработчика			КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ТаблицаДокумента.Ссылка							КАК Партия,
	|	ВтТовары.АналитикаУчетаПартий					КАК АналитикаУчетаПартий,
	|
	// Корреспондирующие поля
	|	ВтТовары.АналитикаУчетаПартий	КАК КорАналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО					КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО					КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО					КАК КорГруппаПродукции,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО 						КАК Сделка,
	|	ТаблицаДокумента.Подразделение		КАК Подразделение,
	|	ТаблицаДокумента.Ответственный		КАК Менеджер,
	|	ВтТовары.АналитикаФинансовогоУчета	КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ВтТовары.Количество КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьУпр,
	|	0 КАК НДСРегл,
	|	0 КАК НДСУпр,
	|	0 КАК СтоимостьЗабалансовая,
	|	0 КАК СтоимостьЗабалансоваяРегл,
	|	0 КАК ДопРасходы,
	|	0 КАК ДопРасходыБезНДС,
	|	0 КАК ДопРасходыРегл,
	|	0 КАК ДопРасходыУпр,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	0 КАК КорСтоимость,
	|
	// Прочие поля
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Дополнение)					КАК ТипЗаписи,
	|	ВтТовары.ИдентификаторСтроки										КАК ИдентификаторСтроки,
	|	ВтТовары.ИдентификаторФинЗаписи										КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)		КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВыпускПродукции)	КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК ВтТовары
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|";

	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВнутреннееПоступление,
		ТекстЗапроса);

	#КонецОбласти
	
	#Область Реализация_РеализацияРаботыТолькоРеглУчет_УПереработчика_2
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата	КАК Период,
	|	ТаблицаДокумента.Ссылка	КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация						КАК Организация,
	|	ВтТовары.АналитикаУчетаНоменклатурыПереработчика	КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО										КАК ВидЗапасов,
	|	ВтТовары.ВидДеятельностиНДСПереработчика			КАК ВидДеятельностиНДС,
	|	ВтТовары.ВидДеятельностиНДСДавальца					КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ТаблицаДокумента.Ссылка			КАК Партия,
	|	ВтТовары.АналитикаУчетаПартий	КАК АналитикаУчетаПартий,
	|
	// Корреспондирующие поля
	|	ТаблицаДокумента.Давалец							КАК КорОрганизация,
	|	ВтТовары.АналитикаУчетаНоменклатурыПереработчика	КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО								КАК КорВидЗапасов,
	|	ТаблицаДокумента.Ссылка						КАК КорПартия,
	|	ВтТовары.АналитикаУчетаПартий				КАК КорАналитикаУчетаПартий,
	|	ВтТовары.ВидДеятельностиНДСДавальца			КАК КорВидДеятельностиНДС,
	|	&АналитикаУчетаПоПартнерам					КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаДокумента.Ссылка						КАК ЗаказКлиента,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО 						КАК Сделка,
	|	ТаблицаДокумента.Подразделение		КАК Подразделение,
	|	ТаблицаДокумента.Ответственный		КАК Менеджер,
	|	ВтТовары.АналитикаФинансовогоУчета	КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ВтТовары.Количество КАК Количество,
	|
	// Прочие поля
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Дополнение)	КАК ТипЗаписи,
	|	ВтТовары.ИдентификаторСтроки						КАК ИдентификаторСтроки,
	|	ВтТовары.ИдентификаторФинЗаписи						КАК ИдентификаторФинЗаписи,
	|	ВтТовары.ХозяйственнаяОперация						КАК ХозяйственнаяОперация,
	|	ВтТовары.НастройкаХозяйственнойОперации				КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК ВтТовары
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И НЕ ВтТовары.СписатьНаРасходы
	|";

	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.Реализация,
		ТекстЗапроса);

	#КонецОбласти
	
	#Область СписаниеНаРасходыАктивы_СписаниеРаботыНаРасходыАктивы_УПереработчика_3
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата	КАК Период,
	|	ТаблицаДокумента.Ссылка	КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация						КАК Организация,
	|	ВтТовары.АналитикаУчетаНоменклатурыПереработчика	КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО										КАК ВидЗапасов,
	|	ВтТовары.ВидДеятельностиНДСПереработчика			КАК ВидДеятельностиНДС,
	|	ВтТовары.ВидДеятельностиНДСПереработчика			КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ТаблицаДокумента.Ссылка			КАК Партия,
	|	ВтТовары.АналитикаУчетаПартий	КАК АналитикаУчетаПартий,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО										КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО										КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО										КАК КорВидЗапасов,
	|	ВтТовары.СтатьяРасходов								КАК СтатьяРасходовАктивов,
	|	ВЫБОР КОГДА ВтТовары.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|		ТОГДА ВтТовары.АналитикаРасходов
	|		ИНАЧЕ ВтТовары.АналитикаАктивовПассивов
	|	КОНЕЦ												КАК АналитикаРасходовАктивов,
	|	ТаблицаДокумента.НаправлениеДеятельности			КАК КорНаправлениеДеятельности,
	|	ТаблицаДокумента.Ссылка								КАК ЗаказКлиента,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО 						КАК Сделка,
	|	ТаблицаДокумента.Подразделение		КАК Подразделение,
	|	ТаблицаДокумента.Ответственный		КАК Менеджер,
	|	ВтТовары.АналитикаФинансовогоУчета	КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ВтТовары.Количество		КАК Количество,
	|	0						КАК Стоимость,
	|	0						КАК СтоимостьБезНДС,
	|	0						КАК СтоимостьРегл,
	|	0						КАК СтоимостьУпр,
	|
	// Прочие поля
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Дополнение)	КАК ТипЗаписи,
	|	ВтТовары.НастройкаСчетовУчета						КАК НастройкаСчетовУчета,
	|	ВтТовары.ИдентификаторСтроки						КАК ИдентификаторСтроки,
	|	ВтТовары.ИдентификаторФинЗаписи						КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию)		КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеТоваровПоТребованию)	КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК ВтТовары
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ВтТовары.СписатьНаРасходы
	|";

	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.СписаниеНаРасходыАктивы,
		ТекстЗапроса);

	#КонецОбласти
	
	#Область ВнешнееПоступление_ПоступлениеРаботыПереработчика_УДавальца_4
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата	КАК Период,
	|	ТаблицаДокумента.Ссылка	КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Давалец							КАК Организация,
	|	ВтТовары.АналитикаУчетаНоменклатурыПереработчика	КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО									КАК ВидЗапасов,
	|	ВтТовары.ВидДеятельностиНДСДавальца				КАК ВидДеятельностиНДС,
	|	ВтТовары.ВидДеятельностиНДСДавальца				КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ТаблицаДокумента.Ссылка							КАК Партия,
	|	ВтТовары.АналитикаУчетаПартий					КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)	КАК Поставщик,
	|	ТаблицаДокумента.Организация					КАК Контрагент,
	|	ВтТовары.СтавкаНДС								КАК СтавкаНДС,
	|
	// Корреспондирующие поля
	|	ВтТовары.АналитикаУчетаПартий	КАК КорАналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО					КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО					КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО 						КАК Сделка,
	|	ТаблицаДокумента.Подразделение		КАК Подразделение,
	|	ТаблицаДокумента.Ответственный		КАК Менеджер,
	|	ВтТовары.АналитикаФинансовогоУчета	КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ВтТовары.Количество		КАК Количество,
	|	0						КАК Стоимость,
	|	0						КАК СтоимостьБезНДС,
	|	ВтТовары.СтоимостьРегл	КАК СтоимостьРегл,
	|	ВтТовары.СтоимостьУпр	КАК СтоимостьУпр,
	|	ВтТовары.СуммаНДСРегл	КАК НДСРегл,
	|	ВтТовары.СуммаНДСУпр	КАК НДСУпр,
	|	0						КАК СтоимостьЗабалансовая,
	|	0						КАК СтоимостьЗабалансоваяРегл,
	|	0						КАК ДопРасходы,
	|	0						КАК ДопРасходыБезНДС,
	|	0						КАК ДопРасходыРегл,
	|	0						КАК ДопРасходыУпр,
	|	0						КАК ПостояннаяРазница,
	|	0						КАК ВременнаяРазница,
	|	0						КАК КорСтоимость,
	|
	// Прочие поля
	|	ВтТовары.ИдентификаторСтроки										КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.ОбъектРасчетовПолучателя.УникальныйИдентификатор	КАК ИдентификаторФинЗаписи,
	|	ВтТовары.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ВтТовары.НастройкаХозяйственнойОперации	КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК ВтТовары
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И НЕ ВтТовары.СписатьНаРасходы
	|";

	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВнешнееПоступление,
		ТекстЗапроса);

	#КонецОбласти
	
	#Область ВнешнееПоступление_ПоступлениеРаботыПереработчика_ВключениеНДСВСтоимость_УДавальца_5
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата	КАК Период,
	|	ТаблицаДокумента.Ссылка	КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Давалец							КАК Организация,
	|	ВтТовары.АналитикаУчетаНоменклатурыПереработчика	КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО									КАК ВидЗапасов,
	|	ВтТовары.ВидДеятельностиНДСДавальца				КАК ВидДеятельностиНДС,
	|	ВтТовары.ВидДеятельностиНДСДавальца				КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ТаблицаДокумента.Ссылка							КАК Партия,
	|	ВтТовары.АналитикаУчетаПартий					КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)	КАК Поставщик,
	|	ТаблицаДокумента.Организация					КАК Контрагент,
	|	ВтТовары.СтавкаНДС								КАК СтавкаНДС,
	|
	// Корреспондирующие поля
	|	ВтТовары.АналитикаУчетаПартий	КАК КорАналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО					КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО					КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО						КАК Сделка,
	|	ТаблицаДокумента.Подразделение		КАК Подразделение,
	|	ТаблицаДокумента.Ответственный		КАК Менеджер,
	|	ВтТовары.АналитикаФинансовогоУчета	КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	0						КАК Количество,
	|	0						КАК Стоимость,
	|	0						КАК СтоимостьБезНДС,
	|	ВтТовары.СтоимостьРегл	КАК СтоимостьРегл,
	|	ВтТовары.СуммаНДСУпр	КАК СтоимостьУпр,
	|	0						КАК НДСРегл,
	|	0						КАК НДСУпр,
	|	0						КАК СтоимостьЗабалансовая,
	|	0						КАК СтоимостьЗабалансоваяРегл,
	|	0						КАК ДопРасходы,
	|	0						КАК ДопРасходыБезНДС,
	|	0						КАК ДопРасходыРегл,
	|	0						КАК ДопРасходыУпр,
	|	0						КАК ПостояннаяРазница,
	|	0						КАК ВременнаяРазница,
	|	0						КАК КорСтоимость,
	|
	// Прочие поля
	|	ВтТовары.ИдентификаторСтроки	КАК ИдентификаторСтроки,
	|	ВтТовары.ИдентификаторФинЗаписи	КАК ИдентификаторФинЗаписи,
	|	ВтТовары.ХозяйственнаяОперация	КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВключениеНДСВСтоимость) КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК ВтТовары
	|		ПО ИСТИНА
	|ГДЕ 
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И &ФормироватьНДСПредъявленныйПриВключенииВСтоимость
	|";

	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВнешнееПоступление,
		ТекстЗапроса);

	#КонецОбласти
	
	#Область СписаниеНаДругиеПартии_РасходРаботыИзПодразделенияИПриходНаПартиюПроизводства_УДавальца_6
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата	КАК Период,
	|	ТаблицаДокумента.Ссылка	КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Давалец							КАК Организация,
	|	ВтТовары.АналитикаУчетаНоменклатурыПереработчика	КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО									КАК ВидЗапасов,
	|	ВтТовары.ВидДеятельностиНДСДавальца				КАК ВидДеятельностиНДС,
	|	ВтТовары.ВидДеятельностиНДСДавальца				КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ТаблицаДокумента.Ссылка			КАК Партия,
	|	ВтТовары.АналитикаУчетаПартий	КАК АналитикаУчетаПартий,
	|
	// Корреспондирующие поля
	|	ВтТовары.АналитикаУчетаНоменклатурыДавальца	КАК КорАналитикаУчетаНоменклатуры,
	|	ВтТовары.ПартияПроизводства			КАК КорПартия,
	|	НЕОПРЕДЕЛЕНО						КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО						КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО						КАК КорАналитикаУчетаПартий,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО						КАК Сделка,
	|	ТаблицаДокумента.Подразделение		КАК Подразделение,
	|	ТаблицаДокумента.Ответственный		КАК Менеджер,
	|	ВтТовары.АналитикаФинансовогоУчета	КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ВтТовары.Количество КАК Количество,
	|
	// Прочие поля
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Дополнение)	КАК ТипЗаписи,
	|	ВтТовары.ИдентификаторСтроки						КАК ИдентификаторСтроки,
	|	ВтТовары.ИдентификаторФинЗаписи						КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)			КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеРасходовНаПартииПроизводства)	КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК ВтТовары
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И НЕ ВтТовары.СписатьНаРасходы
	|";

	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.СписаниеНаДругиеПартии,
		ТекстЗапроса);

	#КонецОбласти
	
	Возврат ОписаниеОпераций;
	
КонецФункции

#КонецОбласти

#Область УчетНДС

Процедура ОтразитьВУчетеНДС(Запрос, ТекстыЗапроса, Регистры)
	
	Если Не УчетНДСУП.ТребуетсяПроведениеПоРегистрамНДС(Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЦенности =
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата                  КАК Период,
	|	ДанныеШапки.Ссылка                КАК Ссылка,
	|	ДанныеШапки.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеШапки.Давалец               КАК Организация,
	|	ДанныеШапки.Организация           КАК Контрагент,
	|	ДанныеШапки.Договор               КАК Договор,
	|	ДанныеШапки.Подразделение         КАК Подразделение,
	|	ДанныеШапки.Подразделение         КАК ПодразделениеУчета,
	|	ДанныеШапки.НалогообложениеНДС    КАК НалогообложениеНДС,
	|	СпрПартииПроизводства.ВидДеятельностиНДС      КАК ВидДеятельностиНДС,
	|	СпрПартииПроизводства.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЛОЖЬ                                КАК ПриобретениеНаПартиюПроизводства,
	|	НЕОПРЕДЕЛЕНО                        КАК НаправлениеДеятельностиПартииПроизводства,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Грузоотправитель,
	|	ДанныеШапки.Ссылка                КАК ДокументПриобретения,
	|	ДанныеШапки.Ссылка                КАК ИсходныйТорговыйДокумент,
	|	ЛОЖЬ                              КАК ИсправлениеОшибок,
	|	ЛОЖЬ                              КАК КорректировкаПоСогласованиюСторон,
	|	НЕОПРЕДЕЛЕНО                      КАК ДокументКорректировкиПриобретения,
	|	ТаблицаТовары.Номенклатура        КАК Номенклатура,
	|	ТаблицаТовары.Характеристика      КАК Характеристика,
	|	ТаблицаТовары.Назначение          КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
	|	ТаблицаТовары.СтавкаНДС           КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО                      КАК НомерГТД,
	|	НЕОПРЕДЕЛЕНО                      КАК СписатьНаРасходы,
	|	НЕОПРЕДЕЛЕНО                      КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                      КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                      КАК СтатьяПрочихАктивов,
	|	НЕОПРЕДЕЛЕНО                      КАК АналитикаПрочихАктивов,
	|	ТаблицаТовары.ИдентификаторСтроки    КАК ИдентификаторСтроки,
	|	ДанныеШапки.ОбъектРасчетовПолучателя.УникальныйИдентификатор КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации   КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтТовары КАК ТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцуМеждуОрганизациями КАК ДанныеШапки
	|	ПО ДанныеШапки.Ссылка = ТаблицаТовары.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|	ПО СпрПартииПроизводства.Ссылка = ТаблицаТовары.ПартияПроизводства
	|ГДЕ
	|	НЕ ТаблицаТовары.СписатьНаРасходы
	|";
	
	УчетНДСУП.ОтразитьПриобретениеУПоставщика(Запрос, ТекстыЗапроса, Регистры, ТекстЦенности);
	
	ТекстЦенности = "
	|ВЫБРАТЬ
	|	ДанныеШапки.Дата                     КАК Период,
	|	ДанныеШапки.Ссылка                   КАК Ссылка,
	|	ДанныеШапки.ХозяйственнаяОперация    КАК ХозяйственнаяОперация,
	|	ДанныеШапки.Организация              КАК Организация,
	|	ДанныеШапки.Давалец                  КАК Контрагент,
	|	ДанныеШапки.Договор                  КАК Договор,
	|	ДанныеШапки.Подразделение            КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Грузоотправитель,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Грузополучатель,
	|	ЛОЖЬ                                 КАК РеализацияВРозницу,
	|	ДанныеШапки.Ссылка                   КАК ДокументРеализации,
	|	НЕОПРЕДЕЛЕНО                         КАК ДокументКорректировкиРеализации,
	|	НЕОПРЕДЕЛЕНО                         КАК ПокупательКомиссионногоТовара,
	|	ЛОЖЬ                                 КАК РеализацияЧерезКомиссионера,
	|	ЛОЖЬ                                 КАК ИсправлениеОшибок,
	|	ЛОЖЬ                                 КАК КорректировкаПоСогласованиюСторон,
	|	ДанныеШапки.ОбъектРасчетов           КАК ОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО                         КАК ДокументКорректировкаРеализации,
	|	ДанныеШапки.НалогообложениеНДС       КАК НалогообложениеНДС,
	|	ТаблицаТовары.НомерСтроки            КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ТаблицаТовары.Характеристика         КАК Характеристика,
	|	ТаблицаТовары.Серия                  КАК Серия,
	|	ТаблицаТовары.СтавкаНДС              КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)   КАК НоменклатураПартнера,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК НоменклатураНабора,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
	|	""""                                 КАК Содержание,
	|	ТаблицаТовары.Количество             КАК Количество,
	|	0                                    КАК КоличествоПоРНПТ,
	|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НЕОПРЕДЕЛЕНО                         КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК КодТНВЭД,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)        КАК ВидЗапасов,
	|	ТаблицаТовары.ИдентификаторСтроки    КАК ИдентификаторСтроки,
	|	ТаблицаТовары.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации      КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтТовары КАК ТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцуМеждуОрганизациями КАК ДанныеШапки
	|	ПО ТаблицаТовары.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	НЕ ТаблицаТовары.СписатьНаРасходы
	|";
	
	УчетНДСУП.ОтразитьРеализациюКлиенту(Запрос, ТекстыЗапроса, Регистры, ТекстЦенности);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона:
//         * Имя            - Строка - Уникальное имя общего реквизита.
//         * Представление  - Строка - Представление общего реквизита.
//         * Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         * Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения:
//         * Имя            - Строка - Уникальное имя вложения.
//         * Представление  - Строка - Представление варианта.
//         * ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие из КлючИЗначение- список используемых в шаблоне реквизитов:
//      * Ключ     - Строка - имя реквизита в шаблоне;
//      * Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие из КлючИЗначение - список используемых в шаблоне общих реквизитов:
//      * Ключ     - Строка - имя реквизита в шаблоне;
//      * Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие из КлючИЗначение - значения реквизитов
//      * Ключ     - Строка - имя вложения в шаблоне;
//      * Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS:
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма:
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов        - Массив из ДокументСсылка - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати       - Структура       - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект, представление - имя области в которой был выведен объект (выходной параметр).
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ОтчетДавальцуМеждуОрганизациямиЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

// Возвращает данные, необходимые для печатной формы "Акт об оказании услуг".
// 
// Параметры:
// 	ПараметрыПечати - Структура - дополнительные настройки печати
// 	МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать
// 	
// Возвращаемое значение:
// 	Структура - Содержит в себе данные по шапке документа, табличной части:
// 	* РезультатПоШапке          - РезультатЗапроса - 
// 	* РезультатПоТабличнойЧасти - РезультатЗапроса - 
//
Функция ПолучитьДанныеДляПечатнойФормыАктОбОказанииУслуг(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка       КАК Ссылка,
	|	ТаблицаТоваров.НомерСтроки  КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика  КАК Характеристика,
	|	ВЫРАЗИТЬ("""" КАК Строка(200)) КАК УслугаНаименованиеПолное,
	|	ТаблицаТоваров.СтавкаНДС    КАК СтавкаНДС,
	|	ТаблицаТоваров.Цена         КАК Цена,
	|	ТаблицаТоваров.Количество   КАК Количество,
	|	ТаблицаТоваров.Сумма        КАК Сумма,
	|	ТаблицаТоваров.СуммаНДС     КАК СуммаНДС,
	|	ЛОЖЬ                        КАК ЭтоТовар
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями.Товары КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|	ПО ИСТИНА
	|
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В (&МассивДокументов)
	|");
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	ШаблонСодержания = НСтр("ru = 'Услуга по выпуску продукции ""%1"" из давальческого сырья';
							|en = 'Service to release the ""%1"" product from provided materials'");
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекущиеДанные Из ТаблицаТоваров Цикл
		Если ТекущиеДанные.ЭтоТовар Тогда
			ТекущиеДанные.УслугаНаименованиеПолное = СтрШаблон(ШаблонСодержания, ТекущиеДанные.Номенклатура);
		Иначе
			ТекущиеДанные.УслугаНаименованиеПолное = ТекущиеДанные.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетДавальцу.Ссылка                          КАК Ссылка,
	|	ОтчетДавальцу.Номер                           КАК Номер,
	|	ОтчетДавальцу.Дата                            КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|	ОтчетДавальцу.Давалец                         КАК Контрагент,
	|	ОтчетДавальцу.Организация                     КАК Организация,
	|	ОтчетДавальцу.Организация.Префикс             КАК Префикс,
	|	ОтчетДавальцу.Валюта                          КАК Валюта,
	|	ОтчетДавальцу.ЦенаВключаетНДС                 КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ОтчетДавальцу.НалогообложениеНДС В (&НалогообложениеБезНДС)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                         КАК УчитыватьНДС
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями КАК ОтчетДавальцу
	|ГДЕ
	|	ОтчетДавальцу.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка                   КАК Ссылка,
	|	ТаблицаТоваров.НомерСтроки              КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура             КАК Номенклатура,
	|	ТаблицаТоваров.УслугаНаименованиеПолное КАК УслугаНаименованиеПолное,
	|	ТаблицаТоваров.Характеристика           КАК Характеристика,
	|	ТаблицаТоваров.СтавкаНДС                КАК СтавкаНДС,
	|	ТаблицаТоваров.Цена                     КАК Цена,
	|	ТаблицаТоваров.Количество               КАК Количество,
	|	ТаблицаТоваров.Сумма                    КАК Сумма,
	|	ТаблицаТоваров.СуммаНДС                 КАК СуммаНДС
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка                            КАК Ссылка,
	|	ТаблицаТоваров.НомерСтроки                       КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                      КАК Номенклатура,
	|	ТаблицаТоваров.УслугаНаименованиеПолное          КАК УслугаНаименованиеПолное,
	|	ТаблицаТоваров.Номенклатура.Код                  КАК Код,
	|	ТаблицаТоваров.Номенклатура.Артикул              КАК Артикул,
	|	ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаЦены,
	|	ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Характеристика                    КАК Характеристика,
	|	ТаблицаТоваров.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
	|	НЕОПРЕДЕЛЕНО                                     КАК УпаковкаНаименование,
	|	ТаблицаТоваров.СтавкаНДС                         КАК СтавкаНДС,
	|	ТаблицаТоваров.Цена                              КАК Цена,
	|	ТаблицаТоваров.Количество                        КАК Количество,
	|	ТаблицаТоваров.Сумма                             КАК Сумма,
	|	ТаблицаТоваров.СуммаНДС                          КАК СуммаНДС,
	|	0                                                КАК СуммаСкидки,
	|	ТаблицаТоваров.Сумма                             КАК СуммаБезСкидки,
	|	ЛОЖЬ                                             КАК ЭтоВозвратнаяТара
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка
	|";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	НалогообложениеБезНДС = Новый Массив();
	НалогообложениеБезНДС.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	НалогообложениеБезНДС.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД);
	Запрос.УстановитьПараметр("НалогообложениеБезНДС", НалогообложениеБезНДС);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",          МассивРезультатов[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", МассивРезультатов[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, МассивОбъектов, КодЯзыка = Неопределено) Экспорт
	
	Возврат ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов, КодЯзыка);
	
КонецФункции

Функция ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов, КодЯзыка = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка                                            КАК Ссылка,
	|	Документы.Номер                                             КАК Номер,
	|	Документы.Дата                                              КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                                КАК ДокументОснование,
	|	ЕСТЬNULL(Документы.БанковскийСчетПереработчика.Владелец, Документы.Организация) КАК Организация,
	|	Документы.Организация                                       КАК ОрганизацияПоставщик,
	|	ТаблицаОтветственныеЛица.РуководительНаименование           КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность              КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование       КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|				ИЛИ Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                       КАК УчитыватьНДС,
	|	Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя) КАК ОперацияОблагаетсяНДСУПокупателя,
	|	Документы.Давалец                                           КАК Контрагент,
	|	Документы.Давалец.ЮрФизЛицо                                 КАК КонтрагентЮрФизЛицо,
	|	Документы.БанковскийСчетПереработчика                       КАК БанковскийСчет,
	|	
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.ИностранныйБанк
	|			ИЛИ Документы.БанковскийСчетПереработчика.ВалютаДенежныхСредств <> Документы.Организация.ВалютаРегламентированногоУчета
	|			ИЛИ Документы.БанковскийСчетДавальца.ИностранныйБанк
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                       КАК ПлатежЗаРубеж,
	|	Документы.БанковскийСчетПереработчика.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	Документы.БанковскийСчетПереработчика.СчетВБанкеДляРасчетов КАК СчетВБанкеДляРасчетов,
	|	
	|	Документы.БанковскийСчетПереработчика.НомерСчета            КАК НомерБанковскогоСчета,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетПереработчика.БИКБанка
	|		ИНАЧЕ КлассификаторБанков.Код
	|	КОНЕЦ                                                       КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетПереработчика.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанков.Наименование
	|	КОНЕЦ                                                       КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетПереработчика.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанков.КоррСчет
	|	КОНЕЦ                                                       КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетПереработчика.ГородБанка
	|		ИНАЧЕ КлассификаторБанков.Город
	|	КОНЕЦ                                                       КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ                                                       КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ                                                       КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ                                                       КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ                                                       КАК ГородБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.НаименованиеБанкаМеждународное
	|		ИНАЧЕ КлассификаторБанков.МеждународноеНаименование
	|	КОНЕЦ                                                       КАК НаименованиеБанкаМеждународное,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.СВИФТБанка
	|		ИНАЧЕ КлассификаторБанков.СВИФТБИК
	|	КОНЕЦ                                                       КАК СВИФТБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.ГородБанкаМеждународный
	|		ИНАЧЕ КлассификаторБанков.ГородМеждународный
	|	КОНЕЦ                                                       КАК ГородБанкаМеждународный,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.АдресБанка
	|		ИНАЧЕ КлассификаторБанков.Адрес
	|	КОНЕЦ                                                       КАК АдресБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.АдресБанкаМеждународный
	|		ИНАЧЕ КлассификаторБанков.АдресМеждународный
	|	КОНЕЦ                                                       КАК АдресБанкаМеждународный,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.СтранаБанка
	|		ИНАЧЕ КлассификаторБанков.Страна
	|	КОНЕЦ                                                       КАК СтранаБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.НаименованиеБанкаДляРасчетовМеждународное
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.МеждународноеНаименование
	|	КОНЕЦ                                                       КАК НаименованиеБанкаДляРасчетовМеждународное,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.СВИФТБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.СВИФТБИК
	|	КОНЕЦ                                                       КАК СВИФТБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.ГородБанкаДляРасчетовМеждународный
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.ГородМеждународный
	|	КОНЕЦ                                                       КАК ГородБанкаДляРасчетовМеждународный,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.АдресБанкаДляРасчетовМеждународный
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.АдресМеждународный
	|	КОНЕЦ                                                       КАК АдресБанкаДляРасчетовМеждународный,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.АдресБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Адрес
	|	КОНЕЦ                                                       КАК АдресБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетПереработчика.СтранаБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Страна
	|	КОНЕЦ                                                       КАК СтранаБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанка
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(КлассификаторБанков.БИКРКЦ.Наименование, """")
	|	КОНЕЦ                                                       КАК НаименованиеРКЦБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетПереработчика.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(КлассификаторБанковКорреспондентовРФ.БИКРКЦ.Наименование, """")
	|	КОНЕЦ                                                       КАК НаименованиеРКЦБанкаДляРасчетов,
	|	Документы.БанковскийСчетПереработчика.ТекстКорреспондента   КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС                                   КАК ЦенаВключаетНДС,
	|	Документы.Валюта                                            КАК Валюта,
	|	Документы.Ответственный.ФизическоеЛицо                      КАК Менеджер,
	|	Документы.СуммаДокумента                                    КАК СуммаКВозврату,
	|	ЛОЖЬ                                                        КАК ЧастичнаяОплата,
	|	""""                                                        КАК НазначениеПлатежа,
	|	100                                                         КАК ПроцентОплаты,
	|	""""                                                        КАК ДополнительнаяИнформация,
	|	Документы.СуммаДокумента                                    КАК СуммаДокумента,
	|	Документы.Организация                                       КАК Грузоотправитель,
	|	Документы.Давалец                                           КАК Грузополучатель,
	|	Документы.ИдентификаторПлатежа                              КАК ИдентификаторПлатежа,
	|	ЛОЖЬ                                                        КАК СчетКВозврату
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями КАК Документы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|	ПО Документы.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|	ПО Документы.БанковскийСчетПереработчика.Банк = КлассификаторБанков.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковКорреспондентовРФ
	|	ПО Документы.БанковскийСчетПереработчика.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	0            КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПлатежа,
	|	0            КАК ПроцентПлатежа,
	|	0            КАК СуммаПлатежа,
	|	ЛОЖЬ         КАК ЭтоЗалогЗаТару
	|ГДЕ
	|	ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка         КАК Ссылка,
	|	Товары.НомерСтроки    КАК НомерСтроки,
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество     КАК Количество,
	|	Товары.Цена           КАК Цена,
	|	Товары.Сумма          КАК Сумма,
	|	Товары.СтавкаНДС      КАК СтавкаНДС,
	|	Товары.СуммаНДС       КАК СуммаНДС
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	Документ.ОтчетДавальцуМеждуОрганизациями.Товары КАК Товары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|	ПО ИСТИНА
	|	
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                        КАК Ссылка,
	|	Товары.НомерСтроки                   КАК НомерСтроки,
	|	Товары.Номенклатура                  КАК Номенклатура,
	|	Товары.Номенклатура.Код              КАК Код,
	|	Товары.Номенклатура.Артикул          КАК Артикул,
	|	ЕСТЬNULL(НоменклатураПредставления.НаименованиеПолное, Товары.Номенклатура.НаименованиеПолное) КАК НаименованиеПолное,
	|	ЕСТЬNULL(ХарактеристикиНоменклатурыПредставления.НаименованиеПолное, ЕСТЬNULL(Товары.Характеристика.НаименованиеПолное, """")) КАК Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество                    КАК Количество,
	|	Товары.Цена                          КАК Цена,
	|	Товары.Сумма                         КАК Сумма,
	|	Товары.СтавкаНДС                     КАК СтавкаНДС,
	|	Товары.СуммаНДС                      КАК СуммаНДС,
	|	Товары.Сумма                         КАК СуммаБезСкидки,
	|	НЕОПРЕДЕЛЕНО                         КАК ВидЦеныИсполнителя,
	|	НЕОПРЕДЕЛЕНО                         КАК Упаковка,
	|	0                                    КАК СуммаСкидки,
	|	ЛОЖЬ                                 КАК ЭтоВозвратнаяТара
	|ИЗ
	|	ВтТовары КАК Товары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Представления КАК НоменклатураПредставления
	|	ПО Товары.Номенклатура = НоменклатураПредставления.Ссылка
	|	И НоменклатураПредставления.КодЯзыка = &КодЯзыка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.Представления КАК ХарактеристикиНоменклатурыПредставления
	|	ПО Товары.Характеристика = ХарактеристикиНоменклатурыПредставления.Ссылка
	|	И ХарактеристикиНоменклатурыПредставления.КодЯзыка = &КодЯзыка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("КодЯзыка", КодЯзыка);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты", ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[ПакетРезультатовЗапроса.Количество() - 1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурналеДокументовИнтеркампани

// Возвращает текст гиперссылки перехода из журнала документов в рабочее место оформления отчетов давальцу между организациями.
//
// Параметры:
//	Параметры - Структура - параметры формирования текста гиперссылки.
//
// Возвращаемое значение:
//  Неопределено, ФорматированнаяСтрока - текст гиперссылки перехода в рабочее место оформления отчетов давальцу между организациями.
Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	ХозяйственныеОперацииИДокументы = Параметры.ХозяйственныеОперацииИДокументы;
	
	Отбор = Новый Структура("Отбор, КлючНазначенияИспользования", Истина, "ОтчетДавальцуМеждуОрганизациями");
	ХозяйственныеОперацииОтчетов = ХозяйственныеОперацииИДокументы.НайтиСтроки(Отбор);
	
	Если ХозяйственныеОперацииОтчетов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапросаОстатков = Документы.ОтчетДавальцуМеждуОрганизациями.ПараметрыЗапросаОстатковОтчетовКОформлению();
	ПараметрыЗапросаОстатков.Организация = Параметры.Организация;
	
	Запрос = Документы.ОтчетДавальцуМеждуОрганизациями.ЗапросОстаткиОтчетовКОформлению(ПараметрыЗапросаОстатков);
	Запрос = СхемыЗапросов.УстановитьКоличествоПолучаемыхЗаписей(Запрос, 1);
	
	ТекстГиперссылки = НСтр("ru = 'Отчеты давальцу';
							|en = 'Consumption reports — Subcontracting services delivered'");
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат
			Новый ФорматированнаяСтрока(
					ТекстГиперссылки,,
					ЦветаСтиля.НезаполненноеПолеТаблицы,,
					"Документ.ОтчетДавальцуМеждуОрганизациями.Форма.ФормаРабочееМесто");
	Иначе
		Возврат
			Новый ФорматированнаяСтрока(
					ТекстГиперссылки,,,,
					"Документ.ОтчетДавальцуМеждуОрганизациями.Форма.ФормаРабочееМесто");
	КонецЕсли;
	
КонецФункции

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Возврат
		Новый ФорматированнаяСтрока(
				НСтр("ru = 'Документы между организациями (отчеты давальцу)';
					|en = 'Intercompany documents (consumption reports — subcontracting services delivered)'"),,,,
				"Обработка.ЖурналДокументовИнтеркампани.Форма.ФормаСписка");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
