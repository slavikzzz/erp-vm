#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует параметры заполнения видов запасов дополнительных свойств документа, используемых при записи документа
// в режиме 'Проведения' или 'Отмены проведения'.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект.ОтчетДавальцуМеждуОрганизациями - документ, для которого выполняется инициализация параметров.
//	РежимЗаписи - РежимЗаписиДокумента - режим записи документа.
//
Процедура ИнициализироватьПараметрыЗаполненияВидовЗапасовДляПроведения(ДокументОбъект, РежимЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПараметрыЗаполненияВидовЗапасов", ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокументПередЗаполнением();
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		// Если передается Месяц, то это заполнение по распоряжениям.
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения, "Месяц") Тогда
			
			Дата = КонецМесяца(ДанныеЗаполнения.Месяц);
			
			ПараметрыЗапросаОстатков = Документы.ОтчетДавальцуМеждуОрганизациями.ПараметрыЗапросаОстатковОтчетовКОформлению();
			ЗаполнитьЗначенияСвойств(ПараметрыЗапросаОстатков, ДанныеЗаполнения);
			
			Запрос = Документы.ОтчетДавальцуМеждуОрганизациями.ЗапросОстаткиОтчетовКОформлению(ПараметрыЗапросаОстатков);
			Запрос = СхемыЗапросов.ИзменитьПсевдонимПоляВыборкиВЗапросе(Запрос, "Номенклатура",   "ОсновноеИзделиеНоменклатура");
			Запрос = СхемыЗапросов.ИзменитьПсевдонимПоляВыборкиВЗапросе(Запрос, "Характеристика", "ОсновноеИзделиеХарактеристика");
			
			Товары.Загрузить(Запрос.Выполнить().Выгрузить());
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	Если Не Товары.Количество() = 0 Тогда
		
		ОтборВидаЦен = Новый Структура;
		ОтборВидаЦен.Вставить("ИспользоватьПриПередачеМеждуОрганизациями", Истина);
		ОтборВидаЦен.Вставить("ЦенаВключаетНДС",                           ЦенаВключаетНДС);
		ОтборВидаЦен.Вставить("Статус",                                    Перечисления.СтатусыДействияВидовЦен.Действует);
		
		ВидЦеныПоУмолчанию = Неопределено;
		ВидЦеныПоУмолчанию = Справочники.ВидыЦен.ВидЦеныПоУмолчанию(ВидЦеныПоУмолчанию, ОтборВидаЦен);
		
		Если ЗначениеЗаполнено(ВидЦеныПоУмолчанию) Тогда
			Для Каждого ТекущиеДанные Из Товары Цикл
				ТекущиеДанные.ВидЦены = ВидЦеныПоУмолчанию;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ВзаиморасчетыСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения);
	
	// Выбор статей и аналитик.
	ПараметрыВыбораСтатейИАналитик = Документы.ОтчетДавальцуМеждуОрганизациями.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	ОтчетДавальцуМеждуОрганизациямиЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	МаксимальныйКодСтрокиТовары = 0;
	ОбщегоНазначенияУТ.ОчиститьИдентификаторыДокумента(ЭтотОбъект, "Товары");
	
	ИнициализироватьДокумент();
	
	ВзаиморасчетыСервер.ПриКопировании(ЭтотОбъект);
	
	ОтчетДавальцуМеждуОрганизациямиЛокализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПроверитьОрганизации(Отказ);
	ПроверитьБанковскиеСчета(Отказ);
	
	#Область Товары
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПроверитьТовары(МассивНепроверяемыхРеквизитов, Отказ);
	
	// Выбор статей и аналитик.
	ПараметрыВыбораСтатейИАналитик = Документы.ОтчетДавальцуМеждуОрганизациями.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
	// Конец Выбор статей и аналитик.
	
	#КонецОбласти
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ОтчетДавальцуМеждуОрганизациямиЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ИсправлениеДокументов.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	СуммаДокумента = Товары.Итог("СуммаСНДС");
	
	Если Не ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	// Выбор статей и аналитик.
	ПараметрыВыбораСтатейИАналитик = Документы.ОтчетДавальцуМеждуОрганизациями.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПередЗаписью(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	// Конец Выбор статей и аналитик.
	
	ПараметрыРегистрации = Документы.ОтчетДавальцуМеждуОрганизациями.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПередЗаписью(ПараметрыРегистрации, РежимЗаписи, ПометкаУдаления, Проведен);
	
	ВзаиморасчетыСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары", "МаксимальныйКодСтрокиТовары");
	ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, "Товары");
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаполнитьАналитикиУчетаНоменклатуры();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Автор) И ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	НастройкаСчетовУчетаСервер.ПередЗаписью(ЭтотОбъект, Документы.ОтчетДавальцуМеждуОрганизациями.ПараметрыНастройкиСчетовУчета());
	
	ОтчетДавальцуМеждуОрганизациямиЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	ОтчетДавальцуМеждуОрганизациямиЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ПараметрыРегистрации = Документы.ОтчетДавальцуМеждуОрганизациями.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПриПроведении(ПараметрыРегистрации);
	
	ОтчетДавальцуМеждуОрганизациямиЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ПараметрыРегистрации = Документы.ОтчетДавальцуМеждуОрганизациями.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПриУдаленииПроведения(ПараметрыРегистрации);
	
	ОтчетДавальцуМеждуОрганизациямиЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокументПередЗаполнением()
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетДавальцуМеждуОрганизациями;
	КонецЕсли;
	
	Организация         = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Валюта               = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
	ВалютаВзаиморасчетов = Валюта;
	
	Автор = Пользователи.ТекущийПользователь();
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		ИменаПолей = "НаправлениеДеятельности, НаименованиеДляПечати, ПорядокРасчетов, Номер, Дата, ВалютаВзаиморасчетов";
		РеквизитыДоговора       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, ИменаПолей);
		НаправлениеДеятельности = РеквизитыДоговора.НаправлениеДеятельности;
		ПорядокРасчетов         = РеквизитыДоговора.ПорядокРасчетов;
		Основание               = РеквизитыДоговора.НаименованиеДляПечати;
		ОснованиеНомер          = РеквизитыДоговора.Номер;
		ОснованиеДата           = РеквизитыДоговора.Дата;
		ВалютаВзаиморасчетов    = РеквизитыДоговора.ВалютаВзаиморасчетов;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НалогообложениеНДС) Тогда
		ЗаполнитьНалогообложениеНДС();
	КонецЕсли;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    = Организация;
	СтруктураПараметров.БанковскийСчет = БанковскийСчетПереработчика;

	БанковскийСчетПереработчика = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    = Давалец;
	СтруктураПараметров.БанковскийСчет = БанковскийСчетДавальца;

	БанковскийСчетДавальца = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Автор, Подразделение);
	
	Если НЕ ЗначениеЗаполнено(ДатаПлатежа) Тогда
		ДатаПлатежа = Дата;
	КонецЕсли;
	
	ГруппаФинансовогоУчетаПереработчика = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(Организация, ВалютаВзаиморасчетов, ХозяйственнаяОперация);
	ГруппаФинансовогоУчетаДавальца      = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(Давалец, ВалютаВзаиморасчетов, ХозяйственнаяОперация, Истина);
	
	Если Не ЗначениеЗаполнено(СпособРаспределенияЗатрат) Тогда
		СпособРаспределенияЗатрат = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	КонецЕсли;
	
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Заполняет аналитики учета номенклатуры в табличной части документа, хранящих информацию о товарах.
//
Процедура ЗаполнитьАналитикиУчетаНоменклатуры()
	
	МестаУчета =
		РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			Перечисления.ТипыМестХранения.Подразделение,
			Неопределено,
			Подразделение,
			Неопределено);
	
	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.Назначение          = "";
	ИменаПолей.Серия               = "";
	ИменаПолей.СтатусУказанияСерий = "";
	
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета, ИменаПолей);
	
КонецПроцедуры

#КонецОбласти

#Область УчетНДС

Процедура ЗаполнитьНалогообложениеНДС()
	
	ПараметрыЗаполнения = Документы.ОтчетДавальцуМеждуОрганизациями.ПараметрыЗаполненияНалогообложенияНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область Проверки

Процедура ПроверитьОрганизации(Отказ)
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Давалец) Тогда
		
		Если Давалец = Организация Тогда
			
			ТекстСообщения = НСтр("ru = 'Организация-давалец совпадает с организацией-переработчиком.';
									|en = 'Material provider company and the subcontractor company are the same.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Давалец",, Отказ);
			
		КонецЕсли;
		
		Если Не Давалец = Организация
			И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(Организация, Давалец) Тогда
			
			ТекстСообщения = НСтр("ru = 'Организация-давалец не должна быть взаимосвязана с организацией-переработчиком по организационной структуре.';
									|en = 'Material provider company must not be interrelated to the subcontractor company by the organizational structure.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Давалец",, Отказ);
			
		КонецЕсли;
		
		СтруктураПроверки = Справочники.Организации.СтраныРегистрацииИВалютыРегламентированногоУчетаСовпадают(Организация, Давалец);
		
		Если Не СтруктураПроверки.ВалютыСовпадают Тогда
			ТекстОшибки = НСтр("ru = 'Валюты регламентированного учета ""%1"" и ""%2"" должны совпадать.';
								|en = 'The %1 and %2 local accounting currencies must be the same.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Организация, Давалец);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Давалец",, Отказ);
		КонецЕсли;
		
		Если Не СтруктураПроверки.СтраныСовпадают Тогда
			ТекстОшибки = НСтр("ru = 'Страны регистрации ""%1"" и ""%2"" должны совпадать.';
								|en = 'The %1 and %2 countries of residence must be the same.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Организация, Давалец);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Давалец",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьБанковскиеСчета(Отказ)
	
	Если ЗначениеЗаполнено(БанковскийСчетПереработчика)
		И ЗначениеЗаполнено(БанковскийСчетДавальца) Тогда
		
		ВалютаОтправителя = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчетПереработчика).Валюта;
		ВалютаПолучателя = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчетДавальца).Валюта;
		Если ВалютаОтправителя <> ВалютаПолучателя Тогда
			Текст = НСтр("ru = 'Валюта счета давальца не соответствует валюте счета переработчика';
						|en = 'Account currency of the material provider does not match the subcontractor account currency'");
			ОбщегоНазначения.СообщитьПользователю(Текст, ЭтотОбъект, "БанковскийСчетДавальца",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТовары(МассивНепроверяемыхРеквизитов, Отказ)
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СтатьяКалькуляции");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки        КАК НомерСтроки,
	|	Товары.ПартияПроизводства КАК ПартияПроизводства,
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.ДоляСтоимости      КАК ДоляСтоимости,
	|	Товары.СтатьяКалькуляции  КАК СтатьяКалькуляции,
	|	Товары.СписатьНаРасходы   КАК СписатьНаРасходы,
	|	Товары.СтавкаНДС          КАК СтавкаНДС
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПартияПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ПартияПроизводства                   КАК ПартияПроизводства,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Номенклатура)   КАК КоличествоНоменклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Характеристика) КАК КоличествоХарактеристика
	|ПОМЕСТИТЬ ИтогиПоГруппеЗатрат
	|ИЗ
	|	ВтТовары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.ПартияПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ИСТИНА КАК СтатьяКалькуляцииНеЗаполнена,
	|	ЛОЖЬ   КАК СтавкаНДСНеЗаполнена,
	|	ЛОЖЬ   КАК ДоляСтоимостиНеЗаполнена,
	|	ЛОЖЬ   КАК ОтчетУжеВведен
	|ИЗ
	|	ВтТовары КАК Товары
	|ГДЕ
	|	НЕ Товары.СписатьНаРасходы
	|	И Товары.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ЛОЖЬ   КАК СтатьяКалькуляцииНеЗаполнена,
	|	ИСТИНА КАК СтавкаНДСНеЗаполнена,
	|	ЛОЖЬ   КАК ДоляСтоимостиНеЗаполнена,
	|	ЛОЖЬ   КАК ОтчетУжеВведен
	|ИЗ
	|	ВтТовары КАК Товары
	|ГДЕ
	|	НЕ Товары.СписатьНаРасходы
	|	И Товары.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ЛОЖЬ   КАК СтатьяКалькуляцииНеЗаполнена,
	|	ЛОЖЬ   КАК СтавкаНДСНеЗаполнена,
	|	ИСТИНА КАК ДоляСтоимостиНеЗаполнена,
	|	ЛОЖЬ   КАК ОтчетУжеВведен
	|ИЗ
	|	ВтТовары КАК Товары
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИтогиПоГруппеЗатрат КАК ИтогиПоГруппеЗатрат
	|	ПО Товары.ПартияПроизводства = ИтогиПоГруппеЗатрат.ПартияПроизводства
	|ГДЕ
	|	Товары.ДоляСтоимости = 0
	|	И (ИтогиПоГруппеЗатрат.КоличествоНоменклатура > 1
	|		ИЛИ ИтогиПоГруппеЗатрат.КоличествоХарактеристика > 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ЛОЖЬ   КАК СтатьяКалькуляцииНеЗаполнена,
	|	ЛОЖЬ   КАК СтавкаНДСНеЗаполнена,
	|	ЛОЖЬ   КАК ДоляСтоимостиНеЗаполнена,
	|	ИСТИНА КАК ОтчетУжеВведен
	|ИЗ
	|	ВтТовары КАК Товары
	|	
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ОтчетДавальцуМеждуОрганизациями.Товары КАК ПартииТекущегоМесяца
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Сторно КАК ДанныеСторно
	|			ПО ДанныеСторно.СторнируемыйДокумент = ПартииТекущегоМесяца.Ссылка
	|			И НАЧАЛОПЕРИОДА(ДанныеСторно.Дата, МЕСЯЦ) = &Месяц
	|		
	|		ГДЕ
	|			Товары.ПартияПроизводства = ПартииТекущегоМесяца.ПартияПроизводства
	|			И ПартииТекущегоМесяца.Ссылка.Организация = &Организация
	|			И НАЧАЛОПЕРИОДА(ПартииТекущегоМесяца.Ссылка.Дата, МЕСЯЦ) = &Месяц
	|			И НЕ ПартииТекущегоМесяца.Ссылка = &Ссылка
	|			И ПартииТекущегоМесяца.Ссылка.Проведен
	|			И ДанныеСторно.Ссылка ЕСТЬ NULL
	|		)
	|";
	
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Месяц",        НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("Товары",       Товары.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СтатьяКалькуляцииНеЗаполнена Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Статья калькуляции"" в строке %1 списка ""Товары""';
								|en = 'The ""Product cost element"" field in line %1 of the ""Goods"" list is not filled'");
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, Выборка.НомерСтроки),
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "СтатьяКалькуляции"),,
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.СтавкаНДСНеЗаполнена Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Ставка НДС"" в строке %1 списка ""Товары""';
								|en = 'The ""VAT rate"" field in line %1 of the ""Goods"" list is not filled'");
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, Выборка.НомерСтроки),
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "СтавкаНДС"),,
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.ДоляСтоимостиНеЗаполнена Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Доля стоимости"" в строке %1 списка ""Товары""';
								|en = 'The ""Cost share"" field in line %1 of the ""Goods"" list is not filled'");
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, Выборка.НомерСтроки),
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "ДоляСтоимости"),,
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.ОтчетУжеВведен Тогда
			
			ТекстОшибки = НСтр("ru = 'В строке %1 списка ""Товары"" указана партия производства по которой в текущем месяце уже оформлен отчет давальцу.';
								|en = 'In line %1 of the ""Goods"" list, the production lot for which the consumption report — subcontracting services delivered is already registered in this month is specified.'");
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, Выборка.НомерСтроки),
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "ПартияПроизводства"),,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли