#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Возврат при получении формы для анализа.
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ОтборыФормыСписка) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.ОтборыФормыСписка);
		
	КонецЕсли;
	
	КлючНазначенияИспользования = "ОтчетДавальцуМеждуОрганизациями";
	
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	// Если отборы уже загружены из параметров
	Если ТипЗнч(Параметры.ОтборыФормыСписка) = Тип("Структура") Тогда
		Если Параметры.ОтборыФормыСписка.Свойство("Организация") Тогда
			Настройки.Удалить("Организация");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ЗаполнитьОтчетыКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОтчетДавальцуМеждуОрганизациями"
		Или ИмяСобытия = "Запись_ПроизводствоБезЗаказа"
		Или ИмяСобытия = "Запись_РаспределениеПроизводственныхЗатрат"
		Или ИмяСобытия = "Запись_РаспределениеПрочихЗатрат"
		Или ИмяСобытия = "Запись_ЭтапыПроизводства"
		Или ИмяСобытия = "Принять_ФормаСозданныхДокументов"
		Или ИмяСобытия = "Проведение_Сторно"
		Или ИмяСобытия = "Запись_Сторно" Тогда
		ЗаполнитьОтчетыКОформлению();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Организация");
	
	ЗаполнитьОтчетыКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ДавалецПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Давалец");
	
	ЗаполнитьОтчетыКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СмТакжеВРаботеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтборыФормыСписка = Новый Структура;
	ОтборыФормыСписка.Вставить("Организация", Организация);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("СтруктураБыстрогоОтбора",     ОтборыФормыСписка);
	ПараметрыЖурнала.Вставить("КлючНазначенияИспользования", КлючНазначенияИспользования);
	
	ОткрытьФорму(НавигационнаяСсылкаФорматированнойСтроки, ПараметрыЖурнала);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтчетыКОформлению

&НаКлиенте
Процедура ОтчетыКОформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ОтчетыКОформлению.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ИмяРеквизита    = СтрЗаменить(Поле.Имя, "ОтчетыКОформлению", "");
		ЗначениеПоля = ТекущиеДанные[ИмяРеквизита];
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			ПоказатьЗначение(, ЗначениеПоля);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьОтчетыКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура Оформить(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ОтчетДавальцуМеждуОрганизациями.Форма.ФормаРабочееМесто.Оформить");
	
	ВыделенныеСтроки = Элементы.ОтчетыКОформлению.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ГруппировкиРаспоряжений = Новый Массив;
	ПоляГруппировки = "Месяц,Организация,Давалец,НаправлениеДеятельности";
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ОтчетыКОформлению.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущаяГруппировка = Неопределено;
		
		Для Каждого ЗначенияГруппировки Из ГруппировкиРаспоряжений Цикл
			Если ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ЗначенияГруппировки, ТекущиеДанные, ПоляГруппировки) Тогда
				ТекущаяГруппировка = ЗначенияГруппировки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущаяГруппировка = Неопределено Тогда
			
			ТекущаяГруппировка = Новый Структура(ПоляГруппировки);
			ЗаполнитьЗначенияСвойств(ТекущаяГруппировка, ТекущиеДанные);
			
			ТекущаяГруппировка.Вставить("ПартииПроизводства", Новый Массив);
			
			ГруппировкиРаспоряжений.Добавить(ТекущаяГруппировка);
			
		КонецЕсли;
		
		ТекущаяГруппировка.ПартииПроизводства.Добавить(ТекущиеДанные.ПартияПроизводства);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ГруппировкиРаспоряжений) Тогда
		
		Результат = ОформитьНаСервере(ГруппировкиРаспоряжений);
		СписокОшибок = Результат.СписокОшибок;
		ПараметрыСозданныхДокументов = Результат.ПараметрыСозданныхДокументов;
		
		НакладныеКлиент.ОткрытьФормуСозданныхДокументов(ПараметрыСозданныхДокументов, ЭтотОбъект);
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Обязательность оформления для завершенных партий производства.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОбщегоНазначенияУТ.ЗаполнитьРекурсивноПоляУсловногоОформления(Элемент.Поля, Элементы.ОтчетыКОформлению.ПодчиненныеЭлементы);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтчетыКОформлению.ИдентификаторСтатуса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Статус партии "В работе".
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтчетыКОформлениюСтатус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтчетыКОформлению.ИдентификаторСтатуса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Справочники.ПартииПроизводства.ТекстСтатусаВРаботе());
	
	// Статус партии "Завершена".
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтчетыКОформлениюСтатус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтчетыКОформлению.ИдентификаторСтатуса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Справочники.ПартииПроизводства.ТекстСтатусаЗавершена());
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	Элементы.ОтчетыКОформлениюОформить.Доступность = ПравоДоступа("Добавление", Метаданные.Документы.ОтчетДавальцуМеждуОрганизациями);
	
	#Область СмТакже
	
	ПараметрыФормирования = Новый Структура;
	
	МассивМенеджеровРасчетаСмТакжеВРаботе = Новый Массив();
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Документ.ОтчетДавальцуМеждуОрганизациями");
	
	СмТакжеВРаботе = ОбщегоНазначенияУТ.СформироватьГиперссылкуСмТакжеВРаботе(МассивМенеджеровРасчетаСмТакжеВРаботе, ПараметрыФормирования);
	Элементы.СмТакжеВРаботе.Видимость = ЗначениеЗаполнено(СмТакжеВРаботе);
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, Реквизиты = "")
	
	Элементы = Форма.Элементы;
	
	Реквизиты = Новый Структура(Реквизиты);
	Инициализация = Реквизиты.Количество() = 0;
	
	Если Инициализация
		Или Реквизиты.Свойство("Организация") Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "Организация") Тогда
			Элементы.ОтчетыКОформлениюОрганизация.Видимость = Не ЗначениеЗаполнено(Форма.Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Инициализация
		Или Реквизиты.Свойство("Давалец") Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "Давалец") Тогда
			Элементы.ОтчетыКОформлениюДавалец.Видимость = Не ЗначениеЗаполнено(Форма.Давалец);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыСлужебные

&НаСервере
Функция ОформитьНаСервере(ГруппировкиРаспоряжений)
	
	СписокОшибок = Неопределено;
	
	ПараметрыСозданныхДокументов      = Новый Структура("ИмяФормы, Параметры");
	ПараметрыФормыСозданныхДокументов = ПараметрыФормыСозданныхДокументов();
	
	Если ГруппировкиРаспоряжений.Количество() = 1 Тогда
		
		ПараметрыСозданныхДокументов.ИмяФормы = "Документ.ОтчетДавальцуМеждуОрганизациями.ФормаОбъекта";
		ПараметрыСозданныхДокументов.Параметры = Новый Структура("Основание", ГруппировкиРаспоряжений[0]);
		
	Иначе
		
		СозданныеДокументы = Новый Массив;
		Для Каждого ЗначенияГруппировки Из ГруппировкиРаспоряжений Цикл
			
			ДокументОбъект = Документы.ОтчетДавальцуМеждуОрганизациями.СоздатьДокумент();
			ДокументОбъект.Заполнить(ЗначенияГруппировки);
			ДокументОбъект.Дата = ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ТекущаяДатаСеанса());
			
			Отказ = Не ДокументОбъект.ПроверитьЗаполнение();
			Если Не Отказ Тогда
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Ошибка при проведении документа';
							|en = 'An error occurred while posting the document'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,,,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
			
			Если Отказ Тогда
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				Сообщения = ПолучитьСообщенияПользователю(Истина);
				Для Каждого Сообщение Из Сообщения Цикл
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ОтчетыКОформлению", Сообщение.Текст, Неопределено);
				КонецЦикла;
				
				ТекстОшибки = НСтр("ru = 'Не удалось провести документ - %1';
									|en = 'Cannot post the document: %1'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ДокументОбъект.Ссылка);
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ОтчетыКОформлению", ТекстОшибки, Неопределено);
				
			КонецЕсли;
			
			ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
			СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
			
		КонецЦикла;
		
		Владелец = Пользователи.АвторизованныйПользователь();
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СозданныеДокументы, ПараметрыФормыСозданныхДокументов.КлючДанных);
		УстановитьПривилегированныйРежим(Ложь);
		
		ПараметрыСозданныхДокументов.ИмяФормы = "ОбщаяФорма.ФормаСозданныхДокументов";
		ПараметрыСозданныхДокументов.Параметры = ПараметрыФормыСозданныхДокументов;
		ПараметрыСозданныхДокументов.Вставить("КоличествоСозданныхДокументов", СозданныеДокументы.Количество());
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыСозданныхДокументов", ПараметрыСозданныхДокументов);
	Результат.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыСозданныхДокументов()
	
	ПараметрыФормы = Новый Структура("КлючДанных, ВидимыеКолонки, СобытияОбновления",
		КлючНазначенияИспользования, Новый Массив, Новый Массив);
	
	ПараметрыФормы.ВидимыеКолонки.Добавить("Номер");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Дата");
	ПараметрыФормы.ВидимыеКолонки.Добавить("ТипЗначения");
	ПараметрыФормы.ВидимыеКолонки.Добавить("ХозяйственнаяОперация");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Организация");
	ПараметрыФормы.ВидимыеКолонки.Добавить("НаправлениеДеятельности");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Дополнительно");
	
	ПараметрыФормы.СобытияОбновления.Добавить("Запись_ОтчетДавальцуМеждуОрганизациями");
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеОтчетовКОформлению

&НаКлиенте
Процедура ЗаполнитьОтчетыКОформлению()
	
	ФоновоеЗадание = ЗаполнитьОтчетыКОформлениюСервер();
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	Обработчик = Новый ОписаниеОповещения("ЗаполнитьОтчетыКОформлениюЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОтчетыКОформлениюСервер()
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение списка отчетов давальцу между организациями к оформлению.';
																|en = 'Fill the list of intercompany consumption reports — subcontracting services delivered to register.'");
	
	ФоновоеЗадание =
		ДлительныеОперации.ВыполнитьВФоне(
			"Документы.ОтчетДавальцуМеждуОрганизациями.ЗаполнитьОтчетыКОформлению",
			ПараметрыЗаполненияОтчетовКОформлению(),
			ПараметрыВыполненияВФоне);
		
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОтчетыКОформлениюЗавершение(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗадание <> Неопределено 
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
	
		Если ЭтоАдресВременногоХранилища(ФоновоеЗадание.АдресРезультата) Тогда
			ЗагрузитьОтчетыКОформлению(ФоновоеЗадание.АдресРезультата);
		КонецЕсли;
		
	Иначе
		
		Если ФоновоеЗадание <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось закончить выполнения задания по причине: %Причина%';
									|en = 'Cannot complete job. Reason: %Причина%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%",  ФоновоеЗадание.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
		
		ОтчетыКОформлению.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОтчетыКОформлению(АдресВоВременномХранилище)
	
	Результат = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если Не Результат = Неопределено Тогда
		ОтчетыКОформлению.Загрузить(Результат);
	Иначе
		ОтчетыКОформлению.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗаполненияОтчетовКОформлению()
	
	ПараметрыЗаполнения = Документы.ОтчетДавальцуМеждуОрганизациями.ПараметрыЗапросаОстатковОтчетовКОформлению();
	
	ПараметрыЗаполнения.Организация = Организация;
	ПараметрыЗаполнения.Давалец     = Давалец;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ПараметрыЖурнала()
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация", Организация);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	ПараметрыЖурнала.Вставить("ИмяРабочегоМеста",        "ЖурналДокументовИнтеркампани");
	ПараметрыЖурнала.Вставить("КлючНазначенияФормы",     "ОтчетДавальцуМеждуОрганизациями");
	ПараметрыЖурнала.Вставить("СинонимЖурнала",          НСтр("ru = 'Документы между организациями';
																|en = 'Documents between companies'"));
	
	Возврат ПараметрыЖурнала;
	
КонецФункции

#КонецОбласти