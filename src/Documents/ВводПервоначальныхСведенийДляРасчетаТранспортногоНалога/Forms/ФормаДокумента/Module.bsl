
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	#Область СтандартныеПодсистемы
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ГиперссылкаФайлов = РаботаСФайлами.ГиперссылкаФайлов();
	ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	ПараметрыВыбораСтатейИАналитик = Документы.ПараметрыНачисленияТранспортногоНалога.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтруктураСохраняемыхРеквизитов = Новый Структура;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьСлужебныеРеквизиты();

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога", ПараметрыЗаписи, Объект.Ссылка);
	Оповестить("Запись_ВводОстатков", ПараметрыЗаписи, Объект.Ссылка);
	ОбщегоНазначенияУТКлиент.ОповеститьОЗаписиДокументаВЖурнал();
	ВнеоборотныеАктивыКлиент.ОповеститьОЗаписиДокументаВЖурналОС();
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормыВыбораПериода = Новый Структура("Значение, РежимВыбораПериода", КонецМесяца(Объект.Дата)+1, "МЕСЯЦ");
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		ПараметрыФормыВыбораПериода, 
		ЭтотОбъект, 
		ЭтотОбъект.УникальныйИдентификатор,,, 
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	ПериодРегистрации = КонецМесяца(Объект.Дата) + 1;
	
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(
		Направление,
		СтандартнаяОбработка,
		ПериодРегистрации,
		ПредставлениеПериодаРегистрации);
		
	Объект.Дата = НачалоМесяца(ПериодРегистрации) - 1;
	
	НастроитьЗависимыеЭлементыФормы("Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыНалога

&НаКлиенте
Процедура ПараметрыНалогаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ПараметрыНалога.ТекущиеДанные;
		ТекущиеДанные.СтавкаОпределяетсяАвтоматически = Истина;
		ТекущиеДанные.НалоговаяЛьгота = ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.НеПрименяется");
		ТекущиеДанные.Льгота = ИмущественныеНалогиКлиентСервер.ПредставлениеЛьготыПоТранспортномуНалогу(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНалогаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ПараметрыНалогаЛьгота Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ПараметрыНалога.ТекущиеДанные;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастройкаЛьготыПоТранспортномуНалогуЗавершение", ЭтотОбъект);
		
		ИмущественныеНалогиКлиент.НастройкаЛьготыПоТранспортномуНалогу(
			ЭтотОбъект, ТекущиеДанные, ОповещениеОЗакрытии);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНалогаКодВидаТранспортногоСредстваПриИзменении(Элемент)
	
	ПриИзмененииКодаВидаТранспортногоСредства();

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНалогаКодВидаТранспортногоСредстваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ПараметрыНалога.ТекущиеДанные;
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ВыбратьКодВидаТранспортногоСредстваЗавершение", ЭтотОбъект);
	
	ИмущественныеНалогиКлиент.ВыбратьКодВидаТранспортногоСредства(
		ЭтотОбъект,
		Элемент, 
		?(ТекущиеДанные.ДатаПараметров <> '000101010000', ТекущиеДанные.ДатаПараметров, Объект.Дата), 
		ТекущиеДанные.КодВидаТранспортногоСредства, 
		ОбработчикВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНалогаЕдиницаИзмеренияНалоговойБазыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыНалога.ТекущиеДанные;
	
	ТекущиеДанные.ВидНалоговойБазы = ИмущественныеНалогиКлиентСервер.ПредставлениеБазыТранспортногоНалога(
		ТекущиеДанные.ЕдиницаИзмеренияНалоговойБазы) + ":";

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНалогаЭкологическийКлассНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПараметрыНалога.ТекущиеДанные;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПараметрыНалогаЭкологическийКлассНачалоВыбораЗавершение", ЭтотОбъект);

	ИмущественныеНалогиКлиент.ВыбратьКодИзКлассификатора(
		"ЭкологическийКласс", 
		"КодыЭкологическихКлассов", 
		"ПараметрыНачисленияТранспортногоНалога", 
		ТекущиеДанные.ДатаПараметров, 
		ТекущиеДанные.ЭкологическийКласс, 
		ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНалогаСтавкаОпределяетсяАвтоматическиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыНалога.ТекущиеДанные;

	Если ТекущиеДанные.СтавкаОпределяетсяАвтоматически Тогда
		ТекущиеДанные.НалоговаяСтавка = 0;
		ТекущиеДанные.НалоговаяСтавкаЗависитОтГодаВыпускаТС = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНалоговыйОрган

&НаКлиенте
Процедура НалоговыйОрганПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.НалоговыйОрган.ТекущиеДанные;
		ТекущиеДанные.ПостановкаНаУчетВНалоговомОргане = ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ПоМестуНахожденияОрганизации");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйОрганПостановкаНаУчетВНалоговомОрганеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НалоговыйОрган.ТекущиеДанные;
	
	Если ТекущиеДанные.ПостановкаНаУчетВНалоговомОргане <> ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане") Тогда
		ТекущиеДанные.НалоговыйОрган = ПредопределенноеЗначение("Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка");
	КонецЕсли;
	
	Если ТекущиеДанные.ПостановкаНаУчетВНалоговомОргане <> ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО")
		И ТекущиеДанные.ПостановкаНаУчетВНалоговомОргане <> ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане") Тогда
		ТекущиеДанные.КодПоОКТМО = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйОрганНалоговыйОрганПриИзменении(Элемент)
	
	НалоговыйОрганПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвансовыеПлатежи

&НаКлиенте
Процедура АвансовыеПлатежиКварталТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = СписокКварталов(Объект);

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКварталаАвансаЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура АвансовыеПлатежиКварталТекстОчистка(Элемент, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.АвансовыеПлатежи.ТекущиеДанные;
	ТекущиеДанные.Дата = '000101010000';
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтражениеРасходов

&НаКлиенте
Процедура ОтражениеРасходовСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеРасходовСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеРасходовАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеРасходовАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеРасходовАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект);
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)

	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	СписокКодовЕдиницИзмеренияТС = ИмущественныеНалоги.КодыЕдиницИзмеренияТранспортныхСредств();
	Для Каждого ЕдиницаИзмеренияТС Из СписокКодовЕдиницИзмеренияТС Цикл
		Элементы.ПараметрыНалогаЕдиницаИзмеренияНалоговойБазы.СписокВыбора.Добавить(ЕдиницаИзмеренияТС.Значение, ЕдиницаИзмеренияТС.Представление);
	КонецЦикла;
	
	ИмущественныеНалоги.ЗаполнитьСписокРегионов(СписокРегионов);
	ЗаполнитьКодыВидовТС();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(Форма, Знач ИзмененныеРеквизиты)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрыРеквизитовОбъекта = ИмущественныеНалогиКлиентСервер.НастройкаРеквизитов_ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога(
									Объект, ИзмененныеРеквизиты);
									
	ОбщегоНазначенияУТКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	УчетСНачалаГода = (КонецМесяца(Объект.Дата) = КонецГода(Объект.Дата));
	
	Если НЕ ОбновитьВсе Тогда
		ОбщегоНазначенияУТКлиентСервер.ОчиститьНеиспользуемыеРеквизиты(
			Объект, ПараметрыРеквизитовОбъекта, "ПараметрыРегистрации,ПараметрыНалога,НалоговыйОрган,АвансовыеПлатежи");
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		Форма.ПредставлениеПериодаРегистрации = ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(КонецМесяца(Объект.Дата) + 1);
		
		СписокВыбора = Элементы.АвансовыеПлатежиКварталТекст.СписокВыбора;
		СписокВыбора.Очистить();
		СписокКварталов = СписокКварталов(Объект);
		Для Каждого ЭлементСписка Из СписокКварталов Цикл
			СписокВыбора.Добавить(ЭлементСписка.Представление);
		КонецЦикла;
		
		Если УчетСНачалаГода Тогда
			Элементы.НадписьПараметрыРегистрацииПодвал.Заголовок = 
				НСтр("ru = 'Указываются сведения о регистрации транспортного средства с начала года.';
					|en = 'Specify vehicle registration information from the beginning of the year.'");
		Иначе
			Элементы.НадписьПараметрыРегистрацииПодвал.Заголовок = 
				СтрШаблон(НСтр("ru = 'Указываются сведения о регистрации транспортного средства с начала года (если транспортное средство зарегистрировано до начала года) или с месяца регистрации.
							   |Если в %1 г. сведения изменялись, то указываются измененные сведения на дату изменения.';
							   |en = 'Specify information about vehicle registration as of the year start (if it was registered before the beginning of the year) or registration month.
							   |If the information changed in %1, specify the changed information as of the change date.'"), Формат(Год(Объект.Дата), "ЧГ=;"));
		КонецЕсли;
			 	
		Если УчетСНачалаГода Тогда
			Элементы.НадписьПараметрыНалогаПодвал.Заголовок =
				НСтр("ru = 'Указываются параметры, определяющие налоговую базу с начала года.';
					|en = 'Specify parameters that define the tax base from the beginning of the year.'");
		Иначе
			Элементы.НадписьПараметрыНалогаПодвал.Заголовок =
				СтрШаблон(НСтр("ru = 'Указываются параметры, определяющие налоговую базу с начала года (если транспортное средство зарегистрировано до начала года) или с месяца регистрации.
						  	 |Если в %1 г. параметры изменялись, то указываются измененные параметры на дату изменения.';
						  	 |en = 'Specify the parameters that define a tax base as of the year start (if the vehicle was registered before the beginning of the year) or registration date.
						  	 |If the information was changed in %1, specify the changed parameters as of the change date.'"), Формат(Год(Объект.Дата), "ЧГ=;"));
		КонецЕсли;
		
		Если УчетСНачалаГода Тогда
			Элементы.НадписьНалоговыйОрганПодвал.Заголовок =
				НСтр("ru = 'Указывается в каком налоговом органе зарегистрировано транспортное средство с начала года.';
					|en = 'Specify in which tax authority the vehicle was registered from the beginning of the year.'");
		Иначе
			Элементы.НадписьНалоговыйОрганПодвал.Заголовок =
				СтрШаблон(НСтр("ru = 'Указывается в каком налоговом органе зарегистрировано транспортное средство с начала года (если транспортное средство зарегистрировано до начала года) или с месяца регистрации.
							   |Если в %1 г. сведения изменялись, то указываются измененные сведения на дату изменения.';
							   |en = 'Specify in which tax authority the vehicle is registered as of the year start (if it was registered before the beginning of the year) or registration month.
							   |If the information changed in %1, specify the changed information as of the change date.'"), Формат(Год(Объект.Дата), "ЧГ=;"));
		КонецЕсли;
		
		Элементы.КартинкаАвансовыеПлатежиПодвал.Видимость = Элементы.АвансовыеПлатежи.Видимость;
		Элементы.НадписьАвансовыеПлатежиПодвал.Видимость = Элементы.АвансовыеПлатежи.Видимость;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(Знач ИзмененныеРеквизиты = "")

	Если ТребуетсяВызовСервераДляНастройкиЭлементовФормы(ИзмененныеРеквизиты) Тогда
		НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты)
	Иначе
		НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, ИзмененныеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(Знач ИзмененныеРеквизиты = "")
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;

	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
			
		ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Объект.Организация);
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяВызовСервераДляНастройкиЭлементовФормы(ИзмененныеРеквизиты)
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);

	Если СтруктураИзмененныхРеквизитов.Количество() = 0
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация") Тогда
			
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	#Область ПараметрыНалога_ОбщаяСобственность
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПараметрыРегистрацииДоляВПравеОбщейСобственностиЧислитель.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПараметрыРегистрацииДоляВПравеОбщейСобственностиЗнаменатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПараметрыРегистрации.ОбщаяСобственность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область ПараметрыНалогаЕдиницаИзмеренияНалоговойБазы_Текст
	
	СписокКодовЕдиницИзмеренияТС = ИмущественныеНалоги.КодыЕдиницИзмеренияТранспортныхСредств();
	Для Каждого ЕдиницаИзмеренияТС Из СписокКодовЕдиницИзмеренияТС Цикл
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПараметрыНалогаЕдиницаИзмеренияНалоговойБазы.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПараметрыНалога.ЕдиницаИзмеренияНалоговойБазы");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ЕдиницаИзмеренияТС.Значение;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ЕдиницаИзмеренияТС.Представление);
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ПараметрыНалога_НалоговаяСтавка
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПараметрыНалогаНалоговаяСтавка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПараметрыНалога.СтавкаОпределяетсяАвтоматически");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<автоматически>';
																|en = '<automatically>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
	#КонецОбласти
	
	#Область ПараметрыНалога_НалоговаяСтавкаЗависитОтГодаВыпускаТС
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПараметрыНалогаНалоговаяСтавкаЗависитОтГодаВыпускаТС.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПараметрыНалога.СтавкаОпределяетсяАвтоматически");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	#КонецОбласти
	
	#Область НалоговыйОрган_НалоговыйОрган_ТолькоПросмотр
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НалоговыйОрганНалоговыйОрган.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НалоговыйОрган.ПостановкаНаУчетВНалоговомОргане");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	#Область НалоговыйОрган_КодПоОКТМО_ТолькоПросмотр
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НалоговыйОрганКодПоОКТМО.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НалоговыйОрган.ПостановкаНаУчетВНалоговомОргане");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = Новый СписокЗначений();
	ОтборЭлемента.ПравоеЗначение.Добавить(Перечисления.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО);
	ОтборЭлемента.ПравоеЗначение.Добавить(Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	#Область ОтражениеРасходовПодразделение
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтражениеРасходовПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтражениеРасходов.Подразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Местонахождение ОС>';
																|en = '<Fixed assets location>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	#КонецОбласти
	
	#Область ОтражениеРасходовНаправлениеДеятельности
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтражениеРасходовНаправлениеДеятельности.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтражениеРасходов.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Направление деятельности ОС>';
																|en = '<FA line of business>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКодВидаТранспортногоСредстваЗавершение(Результат, ДопПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;

	ТекущиеДанные = Элементы.ПараметрыНалога.ТекущиеДанные;
	ТекущиеДанные.КодВидаТранспортногоСредства = Результат.КодВидаТС;
	
	ПриИзмененииКодаВидаТранспортногоСредства();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКодаВидаТранспортногоСредства()

	ТекущиеДанные = Элементы.ПараметрыНалога.ТекущиеДанные;

	СтруктураКодов = КодыВидовТС.Получить(ТекущиеДанные.КодВидаТранспортногоСредства);
	
	Если СтруктураКодов <> Неопределено Тогда
		
		КодЕдиницыИзмерения = Элементы.ПараметрыНалогаЕдиницаИзмеренияНалоговойБазы.СписокВыбора.НайтиПоЗначению(СтруктураКодов.КодЕдиницыИзмерения);
		Если КодЕдиницыИзмерения <> Неопределено Тогда
			ТекущиеДанные.ЕдиницаИзмеренияНалоговойБазы = КодЕдиницыИзмерения.Значение;
		Иначе
			ТекущиеДанные.ЕдиницаИзмеренияНалоговойБазы = "";
		КонецЕсли;
			
		ТекущиеДанные.ВидНалоговойБазы = ИмущественныеНалогиКлиентСервер.ПредставлениеБазыТранспортногоНалога(
			ТекущиеДанные.ЕдиницаИзмеренияНалоговойБазы) + ":";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКодыВидовТС()
	
	КодыВидовТС = Новый ФиксированноеСоответствие(ИмущественныеНалоги.КодыВидовТранспортныхСредств(Объект.Дата));
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	Для Каждого ДанныеСтроки Из Объект.ПараметрыНалога Цикл
		
		ДанныеСтроки.ВидНалоговойБазы = ИмущественныеНалогиКлиентСервер.ПредставлениеБазыТранспортногоНалога(
			ДанныеСтроки.ЕдиницаИзмеренияНалоговойБазы) + ":";
			
		ДанныеСтроки.Льгота = ИмущественныеНалогиКлиентСервер.ПредставлениеЛьготыПоТранспортномуНалогу(ДанныеСтроки);
		
	КонецЦикла;
	
	Для Каждого ДанныеСтроки Из Объект.АвансовыеПлатежи Цикл
		
		Если ДанныеСтроки.Дата <> '000101010000' Тогда
			ДанныеСтроки.КварталТекст = ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(ДанныеСтроки.Дата, "Квартал");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокКварталов(Объект)
	
	СписокВыбора = Новый СписокЗначений();

	Если Объект.Дата <> '000101010000' Тогда
		
		НачалоПериода = НачалоГода(Объект.Дата);
		Пока НачалоПериода <= НачалоКвартала(Объект.Дата) Цикл
			
			СписокВыбора.Добавить(
				НачалоПериода,
				ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(НачалоПериода, "Квартал"));
				
			НачалоПериода = ДобавитьМесяц(НачалоПериода, 3);
			
		КонецЦикла;
	
	КонецЕсли;

	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура НастройкаЛьготыПоТранспортномуНалогуЗавершение(Результат, ДопПараметры) Экспорт
		
	ТекущиеДанные = Элементы.ПараметрыНалога.ТекущиеДанные;
	ТекущиеДанные.Льгота = ИмущественныеНалогиКлиентСервер.ПредставлениеЛьготыПоТранспортномуНалогу(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНалогаЭкологическийКлассНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные = Элементы.ПараметрыНалога.ТекущиеДанные;
		ТекущиеДанные.ЭкологическийКласс = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НалоговыйОрганПриИзмененииНаСервере()
	
	ТекущаяСтрока = Элементы.НалоговыйОрган.ТекущаяСтрока;
	ТекущиеДанные = Объект.НалоговыйОрган.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НалоговыйОрган) Тогда 
		ТекущиеДанные.КодПоОКТМО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.НалоговыйОрган, "КодПоОКТМО");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод <> Неопределено Тогда
		Модифицированность = Истина;
		Объект.Дата = НачалоМесяца(ВыбранныйПериод) - 1;
		НастроитьЗависимыеЭлементыФормы("Дата");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКварталаАвансаЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ТекущиеДанные = Элементы.АвансовыеПлатежи.ТекущиеДанные;
		ТекущиеДанные.Дата = Результат.Значение;
		ТекущиеДанные.КварталТекст = Результат.Представление;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
