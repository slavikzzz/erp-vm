#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив из Строка- список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ИмущественныеНалоги");
	МеханизмыДокумента.Добавить("ОсновныеСредства");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры);
		
		ТекстЗапросаТаблицаПараметрыНачисленияТранспортногоНалога(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРасчетТранспортногоНалога(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСпособыОтраженияРасходовПоИмущественнымНалогам(ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДокументыПоОС(ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область Команды

// Добавляет команду создания документа "Параметры начисления земельного налога".
// 
// Параметры:
//  КомандыСозданияНаОсновании - ТаблицаЗначений - - :
// * Идентификатор - Строка - 
// * Представление - Строка - 
// * Важность - Строка - 
// * Порядок - Число - 
// * Картинка - Картинка - 
// * ТипПараметра - ОписаниеТипов - 
// * ВидимостьВФормах - Строка - 
// * ФункциональныеОпции - Строка - 
// * УсловияВидимости - Массив из Структура- 
// * ИзменяетВыбранныеОбъекты - Булево - 
// * МножественныйВыбор - Булево, Неопределено - 
// * РежимЗаписи - Строка - 
// * ТребуетсяРаботаСФайлами - Булево - 
// * Менеджер - Строка - 
// * ИмяФормы - Строка - 
// * ПараметрыФормы - Неопределено, ФиксированнаяСтруктура - 
// * Обработчик - Строка - 
// * ДополнительныеПараметры - ФиксированнаяСтруктура - 
// - См. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
// 
// Возвращаемое значение:
//  Неопределено, СтрокаТаблицыЗначений - Добавить команду создать на основании:
// * Идентификатор - Строка - 
// * Представление - Строка - 
// * Важность - Строка - 
// * Порядок - Число - 
// * Картинка - Картинка - 
// * ТипПараметра - ОписаниеТипов - 
// * ВидимостьВФормах - Строка - 
// * ФункциональныеОпции - Строка - 
// * УсловияВидимости - Массив из Структура- 
// * ИзменяетВыбранныеОбъекты - Булево - 
// * МножественныйВыбор - Булево, Неопределено - 
// * РежимЗаписи - Строка - 
// * ТребуетсяРаботаСФайлами - Булево - 
// * Менеджер - Строка - 
// * ИмяФормы - Строка - 
// * ПараметрыФормы - Неопределено, ФиксированнаяСтруктура - 
// * Обработчик - Строка - 
// * ДополнительныеПараметры - ФиксированнаяСтруктура - 
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	Возврат;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	Возврат ИсточникиДанных;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
		ВЗапросеЕстьИсточник = Ложь;
		
	ИначеЕсли ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДокументыПоОС(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов"
		ИЛИ ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	МенеджерВременныхТаблиц = Неопределено;

	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц) Тогда
		
		МенеджерВременныхТаблиц = ?(МенеджерВременныхТаблиц = Неопределено,
									Новый МенеджерВременныхТаблиц,
									МенеджерВременныхТаблиц);
		
	Иначе
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|	ДанныеДокумента.УказаныСпособыОтражениеРасходов КАК УказаныСпособыОтражениеРасходов,
	|
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДанныеДокумента.Дата, ДЕНЬ, 1), ГОД) КАК НачалоГода
	|
	|ИЗ
	|	Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога"));
	ЗначенияПараметровПроведения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога);

	Если Реквизиты <> Неопределено Тогда
		
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		
		ОсновнойНалоговыйОрган = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Реквизиты.Организация, Реквизиты.Период);
		ЗначенияПараметровПроведения.Вставить("ОсновнойНалоговыйОрган", ОсновнойНалоговыйОрган);
		
		ЗначенияПараметровПроведения.Вставить(
			"КодПоОКТМО", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойНалоговыйОрган, "КодПоОКТМО", Истина));
		
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаПараметрыНачисленияТранспортногоНалога(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыНачисленияТранспортногоНалога";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтДатыПараметровПоследние(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(втДатыПараметровПоследние.Дата, ДЕНЬ) КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидЗаписиОРегистрации.Регистрация) КАК ВидЗаписи,	
	|	
	|	&Организация КАК Организация,
	|	&ОсновноеСредство КАК ОсновноеСредство,
	|	
	|	ИСТИНА КАК ВключатьВНалоговуюБазу,
	|
	|	ПараметрыРегистрации.РегистрационныйЗнак КАК РегистрационныйЗнак,
	|	ПараметрыРегистрации.ИдентификационныйНомер КАК ИдентификационныйНомер,
	|	ПараметрыРегистрации.Марка КАК Марка,
	|	ПараметрыРегистрации.ОбщаяСобственность КАК ОбщаяСобственность,
	|	ПараметрыРегистрации.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	ПараметрыРегистрации.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|
	|	ТаблицаНалоговыйОрган.ПостановкаНаУчетВНалоговомОргане КАК ПостановкаНаУчетВНалоговомОргане,
	|	ТаблицаНалоговыйОрган.НалоговыйОрган КАК НалоговыйОрган,
	|	ТаблицаНалоговыйОрган.КодПоОКТМО КАК КодПоОКТМО,
	|
	|	ПараметрыНалога.КодВидаТранспортногоСредства КАК КодВидаТранспортногоСредства,
	|	ПараметрыНалога.НалоговаяБаза КАК НалоговаяБаза,
	|	ПараметрыНалога.ЕдиницаИзмеренияНалоговойБазы КАК ЕдиницаИзмеренияНалоговойБазы,
	|	ПараметрыНалога.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ПараметрыНалога.СтавкаОпределяетсяАвтоматически КАК СтавкаОпределяетсяАвтоматически,
	|	ПараметрыНалога.НалоговаяЛьгота КАК НалоговаяЛьгота,
	|	ПараметрыНалога.КодНалоговойЛьготы КАК КодНалоговойЛьготы,
	|	ПараметрыНалога.ЛьготнаяСтавка КАК ЛьготнаяСтавка,
	|	ПараметрыНалога.ПроцентУменьшения КАК ПроцентУменьшения,
	|	ПараметрыНалога.СуммаУменьшения КАК СуммаУменьшения,
	|	ПараметрыНалога.РегиональныйКодЛьготы КАК РегиональныйКодЛьготы,
	|	ПараметрыНалога.ЭкологическийКласс КАК ЭкологическийКласс,
	|	ПараметрыНалога.ПовышающийКоэффициент КАК ПовышающийКоэффициент,
	|	ПараметрыНалога.НалоговаяСтавкаЗависитОтГодаВыпускаТС КАК НалоговаяСтавкаЗависитОтГодаВыпускаТС	
	|
	|ИЗ
	|	втДатыПараметровПоследние КАК втДатыПараметровПоследние
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.ПараметрыРегистрации КАК ПараметрыРегистрации
	|		ПО ПараметрыРегистрации.ДатаРегистрации = втДатыПараметровПоследние.ПараметрыРегистрации_ДатаПараметров
	|			И ПараметрыРегистрации.Ссылка = &Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.ПараметрыНалога КАК ПараметрыНалога
	|		ПО ПараметрыНалога.ДатаПараметров = втДатыПараметровПоследние.ПараметрыНалога_ДатаПараметров
	|			И ПараметрыНалога.Ссылка = &Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.НалоговыйОрган КАК ТаблицаНалоговыйОрган
	|		ПО ТаблицаНалоговыйОрган.ДатаПараметров = втДатыПараметровПоследние.НалоговыйОрган_ДатаПараметров
	|			И ТаблицаНалоговыйОрган.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПараметрыРегистрации.ДатаСнятияСРегистрации, ДЕНЬ) КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидЗаписиОРегистрации.СнятиеСРегистрационногоУчета) КАК ВидЗаписи,	
	|	
	|	&Организация КАК Организация,
	|	&ОсновноеСредство КАК ОсновноеСредство,
	|	
	|	ЛОЖЬ КАК ВключатьВНалоговуюБазу,
	|
	|	"""" КАК РегистрационныйЗнак,
	|	"""" КАК ИдентификационныйНомер,
	|	"""" КАК Марка,
	|	ЛОЖЬ КАК ОбщаяСобственность,
	|	0 КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	0 КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|
	|	НЕОПРЕДЕЛЕНО КАК ПостановкаНаУчетВНалоговомОргане,
	|	НЕОПРЕДЕЛЕНО КАК НалоговыйОрган,
	|	"""" КАК КодПоОКТМО,
	|
	|	"""" КАК КодВидаТранспортногоСредства,
	|	0 КАК НалоговаяБаза,
	|	"""" КАК ЕдиницаИзмеренияНалоговойБазы,
	|	0 КАК НалоговаяСтавка,
	|	ЛОЖЬ КАК СтавкаОпределяетсяАвтоматически,
	|	НЕОПРЕДЕЛЕНО КАК НалоговаяЛьгота,
	|	"""" КАК КодНалоговойЛьготы,
	|	0 КАК ЛьготнаяСтавка,
	|	0 КАК ПроцентУменьшения,
	|	0 КАК СуммаУменьшения,
	|	"""" КАК РегиональныйКодЛьготы,
	|	"""" КАК ЭкологическийКласс,
	|	0 КАК ПовышающийКоэффициент,
	|	ЛОЖЬ КАК НалоговаяСтавкаЗависитОтГодаВыпускаТС	
	|
	|ИЗ
	|	Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.ПараметрыРегистрации КАК ПараметрыРегистрации
	|
	|ГДЕ
	|	ПараметрыРегистрации.Ссылка = &Ссылка
	|	И ПараметрыРегистрации.ДатаСнятияСРегистрации <> ДАТАВРЕМЯ(1,1,1)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаРасчетТранспортногоНалога(ТекстыЗапроса, Регистры)

	ИмяРегистра = "РасчетТранспортногоНалога";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапросаТаблицаВтСведенияАвансовыеПлатежи(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(АвансовыеПлатежи.Дата, КВАРТАЛ) КАК ПериодРасчета,
	|
	|	&Организация КАК Организация,
	|	&ОсновноеСредство КАК ОсновноеСредство,
	|
	|	Сведения.ИФНС КАК ИФНС,
	|	Сведения.КодПоОКТМО КАК КодПоОКТМО,
	|	Сведения.ДатаРегистрационныхДанных КАК ДатаРегистрационныхДанных,
	|
	|	АвансовыеПлатежи.СуммаНалогаКУплате КАК СуммаНалогаКУплате,
	|	АвансовыеПлатежи.СуммаНалоговогоВычета КАК СуммаНалоговогоВычета,
	|	АвансовыеПлатежи.СуммаОсвобожденияОтУплатыНалога КАК СуммаОсвобожденияОтУплатыНалога
	|
	|ИЗ
	|	Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.АвансовыеПлатежи КАК АвансовыеПлатежи
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияАвансовыеПлатежи КАК Сведения
	|		ПО Сведения.Дата = АвансовыеПлатежи.Дата
	|
	|ГДЕ
	|	АвансовыеПлатежи.Ссылка = &Ссылка";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаСпособыОтраженияРасходовПоИмущественнымНалогам(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СпособыОтраженияРасходовПоИмущественнымНалогам";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	&ОсновноеСредство КАК ОсновноеСредство,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог) КАК ВидНалога,
	|	ИСТИНА КАК СпособОтраженияРасходовЗаданДокументом,
	|	&Ссылка КАК СпособОтраженияРасходов
	|
	|ГДЕ
	|	&УказаныСпособыОтражениеРасходов";
	
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра, Истина);
	
	Возврат Текст;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	ЛОЖЬ                                    КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
	|	&Период                                 КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                            КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоОС(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоОС";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	0                                       КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Организация                            КАК Организация,
	|	&Проведен                               КАК Проведен,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	ИСТИНА                                  КАК ОтражатьВРеглУчете,
	|	ЛОЖЬ                                    КАК ОтражатьВУпрУчете,
	|	&ОсновноеСредство                       КАК ОсновноеСредство
	|
	|ИЗ
	|	Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаВтДатыПараметровПоследние(ТекстыЗапроса) Экспорт
	
	ИмяТаблицы = "втДатыПараметровПоследние";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтДатыПараметров(ТекстыЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втДатыПараметров.Дата < &НачалоГода
	|			ТОГДА &НачалоГода
	|		ИНАЧЕ втДатыПараметров.Дата
	|	КОНЕЦ КАК Дата,
	|
	|	МАКСИМУМ(ПараметрыРегистрации.ДатаРегистрации) КАК ПараметрыРегистрации_ДатаПараметров,
	|	МАКСИМУМ(ПараметрыНалога.ДатаПараметров) КАК ПараметрыНалога_ДатаПараметров,
	|	МАКСИМУМ(ТаблицаНалоговыйОрган.ДатаПараметров) КАК НалоговыйОрган_ДатаПараметров
	|
	|ПОМЕСТИТЬ втДатыПараметровПоследние
	|
	|ИЗ
	|	втДатыПараметров КАК втДатыПараметров
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.ПараметрыРегистрации КАК ПараметрыРегистрации
	|		ПО ПараметрыРегистрации.ДатаРегистрации <= втДатыПараметров.Дата
	|			И ПараметрыРегистрации.Ссылка = &Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.ПараметрыНалога КАК ПараметрыНалога
	|		ПО ПараметрыНалога.ДатаПараметров <= втДатыПараметров.Дата
	|			И ПараметрыНалога.Ссылка = &Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.НалоговыйОрган КАК ТаблицаНалоговыйОрган
	|		ПО ТаблицаНалоговыйОрган.ДатаПараметров <= втДатыПараметров.Дата
	|			И ТаблицаНалоговыйОрган.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА втДатыПараметров.Дата < &НачалоГода
	|			ТОГДА &НачалоГода
	|		ИНАЧЕ втДатыПараметров.Дата
	|	КОНЕЦ
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаВтДатыПараметров(ТекстыЗапроса)
	
	ИмяТаблицы = "втДатыПараметров";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокДат.Дата КАК Дата
	|ПОМЕСТИТЬ втДатыПараметров
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПараметрыРегистрации.ДатаРегистрации КАК Дата
	|	ИЗ
	|		Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.ПараметрыРегистрации КАК ПараметрыРегистрации
	|	ГДЕ
	|		ПараметрыРегистрации.Ссылка = &Ссылка
	|		И ПараметрыРегистрации.ДатаРегистрации <> ПараметрыРегистрации.ДатаСнятияСРегистрации
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ПараметрыНалога.ДатаПараметров КАК Дата
	|	ИЗ
	|		Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.ПараметрыНалога КАК ПараметрыНалога
	|	ГДЕ
	|		ПараметрыНалога.Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаНалоговыйОрган.ДатаПараметров КАК Дата
	|	ИЗ
	|		Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.НалоговыйОрган КАК ТаблицаНалоговыйОрган
	|	ГДЕ
	|		ТаблицаНалоговыйОрган.Ссылка = &Ссылка
	|	
	|	) КАК СписокДат";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаВтСведенияАвансовыеПлатежи(ТекстыЗапроса)
	
	ИмяТаблицы = "втСведенияАвансовыеПлатежи";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДатыПараметров.Дата КАК Дата,
	|
	|	ВЫБОР
	|		КОГДА ТаблицаНалоговыйОрган.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
	|			ТОГДА ТаблицаНалоговыйОрган.НалоговыйОрган
	|		ИНАЧЕ &ОсновнойНалоговыйОрган
	|	КОНЕЦ КАК ИФНС,
	|
	|	ВЫБОР
	|		КОГДА ТаблицаНалоговыйОрган.ПостановкаНаУчетВНалоговомОргане В (
	|				ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане),
	|				ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО))
	|			ТОГДА ТаблицаНалоговыйОрган.КодПоОКТМО
	|		ИНАЧЕ &КодПоОКТМО
	|	КОНЕЦ КАК КодПоОКТМО,
	|
	|	ВЫБОР
	|		КОГДА ПараметрыРегистрации.ДатаРегистрации < &НачалоГода
	|			ТОГДА &НачалоГода
	|		ИНАЧЕ ПараметрыРегистрации.ДатаРегистрации
	|	КОНЕЦ КАК ДатаРегистрационныхДанных
	|
	|ПОМЕСТИТЬ втСведенияАвансовыеПлатежи
	|
	|ИЗ
	|	
	|	(ВЫБРАТЬ
	|		АвансовыеПлатежи.Дата КАК Дата,
	|
	|		МАКСИМУМ(ПараметрыРегистрации.ДатаРегистрации) КАК ПараметрыРегистрации_Дата,
	|		МАКСИМУМ(ТаблицаНалоговыйОрган.ДатаПараметров) КАК НалоговыйОрган_Дата
	|
	|	ИЗ
	|		Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.АвансовыеПлатежи КАК АвансовыеПлатежи
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.ПараметрыРегистрации КАК ПараметрыРегистрации
	|			ПО ПараметрыРегистрации.ДатаРегистрации <= КОНЕЦПЕРИОДА(АвансовыеПлатежи.Дата, КВАРТАЛ)
	|				И ПараметрыРегистрации.ДатаРегистрации <> ПараметрыРегистрации.ДатаСнятияСРегистрации
	|				И ПараметрыРегистрации.Ссылка = &Ссылка
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.НалоговыйОрган КАК ТаблицаНалоговыйОрган
	|			ПО ТаблицаНалоговыйОрган.ДатаПараметров <= КОНЕЦПЕРИОДА(АвансовыеПлатежи.Дата, КВАРТАЛ)
	|				И ТаблицаНалоговыйОрган.Ссылка = &Ссылка
	|
	|	СГРУППИРОВАТЬ ПО
	|		АвансовыеПлатежи.Дата
	|
	|	) КАК ДатыПараметров
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.ПараметрыРегистрации КАК ПараметрыРегистрации
	|		ПО ПараметрыРегистрации.ДатаРегистрации = ДатыПараметров.ПараметрыРегистрации_Дата
	|			И ПараметрыРегистрации.Ссылка = &Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога.НалоговыйОрган КАК ТаблицаНалоговыйОрган
	|		ПО ТаблицаНалоговыйОрган.ДатаПараметров = ДатыПараметров.НалоговыйОрган_Дата
	|			И ТаблицаНалоговыйОрган.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область БлокировкаПриОбновленииИБ

Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ПредставлениеОперации) Экспорт
	
	ВходящиеДанные = Новый Соответствие;
	
	ЗакрытиеМесяцаСервер.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Возврат; //В дальнейшем будет добавлен код команд
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Параметры выбора статей и аналитик.
// 
// Возвращаемое значение:
//  см. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики
Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект.ОтражениеРасходов";
	ПараметрыВыбора.Статья = "СтатьяРасходов";
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ОтражениеРасходовСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ОтражениеРасходовАналитикаРасходов");
	
	Возврат ПараметрыВыбора;
	
КонецФункции

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - см. ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт

	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Дата");

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли