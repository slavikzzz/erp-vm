#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(Сотрудники.Сотрудник, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

Функция ДанныеДляПечати(МассивОбъектов) Экспорт
	Возврат РезультатЗапросаДанныхДляПечати(МассивОбъектов).Выгрузить();
КонецФункции

Функция ИдентификаторКомандыПечатиЗаявления() Экспорт
	Возврат "ПФ_MXL_ЗаявленияОПредоставленииСведенийОТрудовойДеятельности";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПроведенияДокумента(СсылкаНаДокумент) Экспорт
	
	ДанныеДляПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Заявление.Ссылка.Дата КАК Период,
		|	Заявление.Ссылка.Организация КАК Организация,
		|	Заявление.Сотрудник КАК ФизическоеЛицо,
		|	МАКСИМУМ(Заявление.ВидЗаявления) КАК ВидЗаявления,
		|	Заявление.Ссылка КАК Заявление,
		|	МАКСИМУМ(Заявление.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Сотрудники КАК Заявление
		|ГДЕ
		|	Заявление.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Заявление.Сотрудник,
		|	Заявление.Ссылка.Дата,
		|	Заявление.Ссылка.Организация,
		|	Заявление.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	ДанныеДляПроведения.Вставить("ЗаявленияОВеденииТрудовыхКнижек", Запрос.Выполнить().Выгрузить());
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = ИдентификаторКомандыПечатиЗаявления();
	КомандаПечати.Представление = НСтр("ru = 'Заявление';
										|en = 'Application'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ДополнительныеПараметры.Вставить("РеквизитыДетализации", "ФизическоеЛицо");
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИдентификаторКомандыПечатиЗаявления()) Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			ИдентификаторКомандыПечатиЗаявления(), 
			"Заявление о предоставлении сведений о трудовой деятельности", 
			ПечатнаяФормаПредоставленииСведенийОТрудовойДеятельности(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатнаяФормаПредоставленииСведенийОТрудовойДеятельности(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ДанныеПечати = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаДокументов = ОбщегоНазначения.ОбщийМодуль("РассылкаДокументов");
		ДанныеПечати = МодульРассылкаДокументов.ДанныеПечати(ПараметрыПечати);
	КонецЕсли;
	
	Если ДанныеПечати = Неопределено Тогда
		ДанныеПечати = ДанныеДляПечати(МассивОбъектов);
	КонецЕсли;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(
		"Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.ПФ_MXL_ЗаявленияОПредоставленииСведенийОТрудовойДеятельности");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявленияОПредоставленииСведенийОТрудовойДеятельности";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Если ДанныеПечати.Количество() = 0 Тогда
		Возврат ДокументРезультат;
	КонецЕсли;
	
	ТекущаяСсылка = Неопределено;
	ЭтоСледующийДокумент = Ложь;
	КоллекцияСсылок = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеПечати, "Ссылка", Истина);
	Для Каждого Ссылка Из КоллекцияСсылок Цикл
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		Для Каждого СтрокаДанных Из ДанныеПечати Цикл
			
			Если СтрокаДанных.Ссылка <> Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтрокиНачалаОбласти = ДокументРезультат.ВысотаТаблицы + 1;
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДокументРезультат.Вывести(ТабличныйДокументОбластьЗаявления(Макет, СтрокаДанных));
			
			КадровыйЭДО.ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ДокументРезультат, ИдентификаторКомандыПечатиЗаявления(),
				НомерСтрокиНачалаОбласти, СтрокаДанных, Ссылка);
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ТабличныйДокументОбластьЗаявления(Макет, ДанныеЗаполнения)
	
	ОбластьЗаявлений = Макет.ПолучитьОбласть("Бланк");
	ЗаполнитьЗначенияСвойств(ОбластьЗаявлений.Параметры, ДанныеЗаполнения);
	ОбластьЗаявлений.Параметры.Номер = ЗарплатаКадрыОтчеты.НомерНаПечать(ОбластьЗаявлений.Параметры.Номер);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Обращение", ?(ДанныеЗаполнения.Пол = 2, НСтр("ru = 'Уважаемая';
																				|en = 'Dear'"), НСтр("ru = 'Уважаемый';
																										|en = 'Dear'")));
	ПараметрыЗаполнения.Вставить("ИмяОтчество",
		Сред(ДанныеЗаполнения.ФИОСотрудника, СтрДлина(ДанныеЗаполнения.СотрудникФамилия) + 2));
	
	ПараметрыЗаполнения.Вставить("ДолжностьСотрудникаВДательномПадеже", ДанныеЗаполнения.ДолжностьНаименование);
	ПараметрыЗаполнения.Вставить("ФИОПолныеВДательномПадеже", ДанныеЗаполнения.ФИОСотрудника);
	ПараметрыЗаполнения.Вставить("ДолжностьРуководителяВДательномПадеже", ДанныеЗаполнения.ДолжностьРуководителяНаименование);
	ПараметрыЗаполнения.Вставить("ФИОРуководителяВДательномПадеже", ДанныеЗаполнения.ФИОРуководителя);
	ПараметрыЗаполнения.Вставить("ФИОПолныеВРодительномПадеже", ДанныеЗаполнения.ФИОСотрудника);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.СклонениеПредставленийОбъектов") Тогда
		
		МодульСклонениеПредставленийОбъектов = ОбщегоНазначения.ОбщийМодуль("СклонениеПредставленийОбъектов");
		
		ДолжностьСотрудникаВДательномПадеже = МодульСклонениеПредставленийОбъектов.ПросклонятьПредставление(
			ПараметрыЗаполнения.ДолжностьСотрудникаВДательномПадеже, 3, ДанныеЗаполнения.Должность);
		
		Если ЗначениеЗаполнено(ДолжностьСотрудникаВДательномПадеже) Тогда
			ПараметрыЗаполнения.Вставить("ДолжностьСотрудникаВДательномПадеже", ДолжностьСотрудникаВДательномПадеже);
		КонецЕсли;
		
		ФИОПолныеВДательномПадеже = МодульСклонениеПредставленийОбъектов.ПросклонятьФИО(
			ДанныеЗаполнения.ФИОСотрудника, 3, ДанныеЗаполнения.ФизическоеЛицо, ДанныеЗаполнения.Пол);
		
		Если ЗначениеЗаполнено(ФИОПолныеВДательномПадеже)Тогда
			ПараметрыЗаполнения.Вставить("ФИОПолныеВДательномПадеже", ФИОПолныеВДательномПадеже);
		КонецЕсли;
		
		ДолжностьРуководителяВДательномПадеже = МодульСклонениеПредставленийОбъектов.ПросклонятьПредставление(
			ПараметрыЗаполнения.ДолжностьРуководителяВДательномПадеже, 3, ДанныеЗаполнения.ДолжностьРуководителя);
		
		Если ЗначениеЗаполнено(ДолжностьРуководителяВДательномПадеже) Тогда
			ПараметрыЗаполнения.Вставить("ДолжностьРуководителяВДательномПадеже", ДолжностьРуководителяВДательномПадеже);
		КонецЕсли;
		
		ФИОРуководителяВДательномПадеже = МодульСклонениеПредставленийОбъектов.ПросклонятьФИО(
			ДанныеЗаполнения.ФИОРуководителя, 3, ДанныеЗаполнения.Руководитель,
				?(ДанныеЗаполнения.ПолРуководителя = Перечисления.ПолФизическогоЛица.Женский, 2, 1));
		
		Если ЗначениеЗаполнено(ФИОРуководителяВДательномПадеже)Тогда
			ПараметрыЗаполнения.Вставить("ФИОРуководителяВДательномПадеже", ФИОРуководителяВДательномПадеже);
		КонецЕсли;
		
		ФИОПолныеВРодительномПадеже = МодульСклонениеПредставленийОбъектов.ПросклонятьФИО(
			ДанныеЗаполнения.ФИОСотрудника, 2, ДанныеЗаполнения.ФизическоеЛицо, ДанныеЗаполнения.Пол);
		
		Если ЗначениеЗаполнено(ФИОПолныеВРодительномПадеже)Тогда
			ПараметрыЗаполнения.Вставить("ФИОПолныеВРодительномПадеже", ФИОПолныеВРодительномПадеже);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбластьЗаявлений.Параметры, ПараметрыЗаполнения);
	
	Возврат ОбластьЗаявлений;
	
КонецФункции

Функция РезультатЗапросаДанныхДляПечати(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка,
		|	Сотрудники.Ссылка.Организация КАК Организация,
		|	Сотрудники.Ссылка.Номер КАК Номер,
		|	Сотрудники.Ссылка.Дата КАК Дата,
		|	Сотрудники.Ссылка.Дата КАК Период,
		|	Сотрудники.Ссылка.Руководитель КАК Руководитель,
		|	Сотрудники.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	Сотрудники.НомерСтроки КАК НомерСтроки,
		|	Сотрудники.Сотрудник КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА Сотрудники.Сотрудник.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Пол,
		|	Сотрудники.ВидЗаявления КАК ВидЗаявления,
		|	ОсновныеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
		|		ПО Сотрудники.Сотрудник = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|			И Сотрудники.Ссылка.Организация.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
		|			И (Сотрудники.Ссылка.Дата МЕЖДУ ОсновныеСотрудникиФизическихЛиц.ДатаНачала И ОсновныеСотрудникиФизическихЛиц.ДатаОкончания)
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСсылок)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, 
		Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Руководитель"), "ВТДанныеДокументов");
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТДанныеДокументов", "Сотрудник,Период");
	
	Описатель.ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудниковДляЗаявления";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "Должность,ФИОПолные,ИОФамилия,Фамилия");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.Ссылка КАК РассылаемыйДокумент,
		|	ДанныеДокументов.Организация КАК Организация,
		|	ВЫРАЗИТЬ(ДанныеДокументов.Организация КАК Справочник.Организации).НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ВЫРАЗИТЬ(ДанныеДокументов.Организация КАК Справочник.Организации).НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное,
		|	ДанныеДокументов.Номер КАК Номер,
		|	ДанныеДокументов.Дата КАК Дата,
		|	ДанныеДокументов.Руководитель КАК Руководитель,
		|	ЕСТЬNULL(ФИОПоследние.ФИОПолные, """") КАК ФИОРуководителя,
		|	ЕСТЬNULL(ФИОПоследние.РасшифровкаПодписи, """") КАК РуководительРасшифровкаПодписи,
		|	ЕСТЬNULL(ФИОПоследние.Пол, НЕОПРЕДЕЛЕНО) КАК ПолРуководителя,
		|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ДанныеДокументов.ДолжностьРуководителя.Наименование КАК ДолжностьРуководителяНаименование,
		|	ДанныеДокументов.НомерСтроки КАК НомерСтроки,
		|	ДанныеДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДокументов.Пол КАК Пол,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ФИОПолные, """") КАК ФИОСотрудника,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.Фамилия, """") КАК СотрудникФамилия,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ИОФамилия, """") КАК СотрудникРасшифровкаПодписи,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.Должность, """") КАК Должность,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.Должность.Наименование, """") КАК ДолжностьНаименование,
		|	ДанныеДокументов.ВидЗаявления КАК ВидЗаявления
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОПоследние
		|		ПО ДанныеДокументов.Ссылка = ФИОПоследние.Ссылка
		|			И ДанныеДокументов.Руководитель = ФИОПоследние.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудниковДляЗаявления КАК КадровыеДанныеСотрудников
		|		ПО ДанныеДокументов.Период = КадровыеДанныеСотрудников.Период
		|			И ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки";

	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли