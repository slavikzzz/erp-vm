#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// В качестве данных заполнения может принимать структуру с полями.
//		Ссылка
//		Действие
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Исправить" Тогда
			
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, ДанныеЗаполнения.Ссылка);
			
			ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Сотрудник") Тогда
			ЗаполнитьЗначенияСвойств(Сотрудники.Добавить(), ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Документы.ПрогулНеявкаСписком.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства);
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		Если Не ЗначениеЗаполнено(ВидОтсутствия) 
			И Не ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияПрочихНевыходов") Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
			Документы.ПрогулНеявка.ТекстСообщенияНеЗаполненВидРасчета(Ложь),
			Ссылка,
			,
			,
			Отказ);
		КонецЕсли;
		
		Если ПерерасчетВыполнен Тогда
			
			// Проверка корректности распределения по источникам финансирования
			ИменаТаблицРаспределяемыхПоСтатьямФинансирования = "Начисления,НачисленияПерерасчет";
			
			ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержанийОбъекта(
				ЭтотОбъект, ИменаТаблицРаспределяемыхПоСтатьямФинансирования, Отказ);
			
			// Проверка корректности распределения по территориям и условиям труда
			ИменаТаблицРаспределенияПоТерриториямУсловиямТруда = "Начисления,НачисленияПерерасчет";
			
			РасчетЗарплатыРасширенный.ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(
				ЭтотОбъект, ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, Отказ);
			
			ПроверитьПериодДействияНачислений(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.Свойство("ПроверкаПересеченияПериодовВыполнена") Тогда
		ПроверитьПересечениеПериодовОтсутствия(Отказ);
	КонецЕсли;
	
	ПериодыСотрудников = Новый Соответствие;
	
	Для Каждого СтрокаСотрудника Из Сотрудники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаНачала) Или Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаОкончания) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаСотрудника.ДатаНачала > СтрокаСотрудника.ДатаОкончания Тогда 
			
			ТекстСообщения = НСтр("ru = 'Сотрудник %1: дата начала не может быть больше даты окончания';
									|en = 'Employee %1: start date cannot be greater than end date'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСотрудника.Сотрудник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"Сотрудники[" + Формат(Сотрудники.Индекс(СтрокаСотрудника), "ЧН=0; ЧГ=0") + "].Сотрудник", "Объект", Отказ);
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеСотрудника = Новый Структура("ДатаНачала, ДатаОкончания, НомерСтроки, ИндексСтроки");
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, СтрокаСотрудника);
		
		ДанныеСотрудника.ИндексСтроки = Сотрудники.Индекс(СтрокаСотрудника);
		ПериодыСотрудника = ПериодыСотрудников[СтрокаСотрудника.Сотрудник];
		
		Если ПериодыСотрудника = Неопределено Тогда 
			
			ПериодыСотрудника = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСотрудника);
			ПериодыСотрудников.Вставить(СтрокаСотрудника.Сотрудник, ПериодыСотрудника);
			
		Иначе 
			
			Для Каждого ПериодОтсутствия Из ПериодыСотрудника Цикл
				
				Если Не (ДанныеСотрудника.ДатаНачала > ПериодОтсутствия.ДатаОкончания Или ДанныеСотрудника.ДатаОкончания < ПериодОтсутствия.ДатаНачала) Тогда
					
					ТекстСообщения = НСтр("ru = 'Пересекаются периоды отсутствия сотрудника %1 (строки %2 и %3)';
											|en = 'Periods of employee %1 absence overlap (lines %2 and %3)'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСотрудника.Сотрудник, ПериодОтсутствия.НомерСтроки, ДанныеСотрудника.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"Сотрудники[" + Формат(ДанныеСотрудника.ИндексСтроки, "ЧН=0; ЧГ=0") + "].Сотрудник", "Объект", Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПериодыСотрудника.Добавить(ДанныеСотрудника);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОсвобождатьСтавку Тогда
		
		СотрудникиПериоды = Сотрудники.Выгрузить(, "Сотрудник,ДатаНачала,ДатаОкончания");
		УправлениеШтатнымРасписанием.ПроверитьВозможностьПроведенияВременногоОсвобожденияСтавокПоТаблицеЗначений(
			Ссылка, Проведен, СотрудникиПериоды, Отказ, ИсправленныйДокумент, , "Сотрудники");
		
	КонецЕсли;
	
	КадровыйЭДО.ПроверитьВозможностьСохраненияИзмененийДокументаСПечатнымиФормами(
		ЭтотОбъект, Метаданные.Роли.ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ОсвобождатьСтавку Тогда
		СотрудникиПериоды = Сотрудники.Выгрузить(, "Сотрудник,ДатаНачала,ДатаОкончания");
		УправлениеШтатнымРасписанием.ПроверитьВозможностьОтменыПроведенияПоТаблицеЗначений(Ссылка, СотрудникиПериоды, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьПериодДействияНачислений(Отказ)
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("НачисленияПерерасчет", НСтр("ru = 'Перерасчет прошлого периода';
																																	|en = 'Recalculation of the last period'")));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ЭтотОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
КонецПроцедуры

Процедура ПроверитьПересечениеПериодовОтсутствия(Отказ)
	
	РезультатПроверки = РезультатПроверкиПересеченийПериодовОтсутствия();
	
	Отказ = Отказ Или РезультатПроверки.Отказ;
	
	Для Каждого РезультатПроверкиСотрудника Из РезультатПроверки.ДанныеСотрудников Цикл
		
		ДанныеСотрудника = РезультатПроверкиСотрудника.Значение;
		
		Если РезультатПроверки.Отказ И ТипЗнч(ДанныеСотрудника.Регистратор) <> Тип("ДокументСсылка.БольничныйЛист") Тогда

			ТекстСообщения = НСтр("ru = '%1: на период %2 уже зарегистрировано отсутствие документом %3.';
									|en = '%1: the absence during period %2 has already been registered with document %3.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			    РезультатПроверкиСотрудника.Ключ,
				ДанныеСотрудника.ПредставлениеПериода,
				ДанныеСотрудника.Регистратор);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатПроверкиПересеченийПериодовОтсутствия() Экспорт
		
	ИсходныеДанные = СостоянияСотрудников.ПустаяТаблицаДанныхСостоянийСотрудника();
	
	Для Каждого СтрокаСотрудника Из Сотрудники Цикл
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Сотрудник = СтрокаСотрудника.Сотрудник;
		НоваяСтрока.Состояние = СостояниеСотрудника;
		НоваяСтрока.Начало = СтрокаСотрудника.ДатаНачала;
		НоваяСтрока.Окончание = СтрокаСотрудника.ДатаОкончания;
		
	КонецЦикла;
	
	Возврат СостоянияСотрудников.ПроверитьПересечениеПериодовОтсутствия(ИсходныеДанные, Ссылка, ИсправленныйДокумент);
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли