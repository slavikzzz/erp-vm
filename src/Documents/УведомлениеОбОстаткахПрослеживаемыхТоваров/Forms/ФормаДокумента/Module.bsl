
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ.

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Возврат при получении формы для анализа.
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ЭтоУправлениеТорговлей = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	Элементы.ГруппаПанельОтправки.Видимость = НЕ ЭтоУправлениеТорговлей;
	Элементы.Отправка.Видимость = НЕ ЭтоУправлениеТорговлей;
	Элементы.ПрослеживаемыеТоварыВСоставе.Видимость = НЕ ЭтоУправлениеТорговлей;
	Элементы.СтраницаОсновныеСредства.Видимость = НЕ ЭтоУправлениеТорговлей;
	Элементы.ГруппаТМЦВЭксплуатации.Видимость = НЕ ЭтоУправлениеТорговлей;
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	УстановитьТекстПервичногоУведомления();

//++ НЕ УТ
	УстановитьПереключательТабличныхЧастей();
	УстановитьВидимостьТабличныхЧастей();
//-- НЕ УТ
	Если Параметры.Свойство("ПервичныйДокумент") Тогда
		ЗаполнитьДанныеПервичногоДокумента(Параметры);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
//++ НЕ УТ
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
//-- НЕ УТ
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

//++ НЕ УТ
&НаСервере
Процедура УстановитьВидимостьТабличныхЧастей()
	
	Если ПрослеживаемыеТоварыВСоставе = 1 Тогда
		Элементы.ГруппаТовары.Видимость = Истина;
		Элементы.СтраницаОсновныеСредства.Видимость = Ложь;
		Элементы.ГруппаТМЦВЭксплуатации.Видимость = Ложь;
	ИначеЕсли ПрослеживаемыеТоварыВСоставе = 2 Тогда
		Элементы.ГруппаТовары.Видимость = Ложь;
		Элементы.СтраницаОсновныеСредства.Видимость = Истина;
		Элементы.ГруппаТМЦВЭксплуатации.Видимость = Ложь;
	Иначе
		Элементы.ГруппаТовары.Видимость = Ложь;
		Элементы.СтраницаОсновныеСредства.Видимость = Ложь;
		Элементы.ГруппаТМЦВЭксплуатации.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПереключательТабличныхЧастей()

	Если ЗаполненаТабличнаяЧасть("ТМЦВЭксплуатации") Тогда
		ПрослеживаемыеТоварыВСоставе = 3;
	ИначеЕсли  ЗаполненаТабличнаяЧасть("ОсновныеСредства") Тогда
		ПрослеживаемыеТоварыВСоставе = 2;
	Иначе
		ПрослеживаемыеТоварыВСоставе = 1;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполненаТабличнаяЧасть(ИмяТабличнойЧасти)
	
	Заполнена = Ложь;
	
	ТЧ = Объект[ИмяТабличнойЧасти];
	Если ТЧ.Количество() > 0 Тогда
		Заполнена = Истина;
	КонецЕсли;
	
	Возврат Заполнена;
	
КонецФункции
//-- НЕ УТ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	ИначеЕсли ЗакупкиКлиент.ЭтоПодборНомераГТД(ИсточникВыбора) Тогда
		ОбработатьПодборНомераГТД(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов" Тогда
		ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Форма.ФормаВыбора" Тогда
		Объект.ДокументУведомлениеОбОстатках = ВыбранноеЗначение;	 
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Форма.ФормаПараметровУведомлений" Тогда 
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение,,"Продавцы");
		
		Объект.Продавцы.Очистить();
		
		Для каждого ТекущаяСтрока Из ВыбранноеЗначение.Продавцы Цикл
			
			НоваяСтрока = Объект.Продавцы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
		КонецЦикла;
	
	//++ НЕ УТ
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ПартииТМЦВЭксплуатации.Форма.ФормаПодбора" 
		И ВыбранноеЗначение.Количество() > 0 Тогда
			
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	
	//-- НЕ УТ
	КонецЕсли;
	
	
	ЭтотОбъект.Модифицированность = Истина;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData"
			И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
			
		КонецЕсли;
		
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ЗакупкиКлиент.ЭтоУказаниеНомераГТД(Источник) Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			Действия = Новый Структура;
			
			ИмяПоляМестаХранения = ИмяПоляМестаХранения(ТекущаяСтрока);
			
			УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
				Объект,
				Действия,
				ИмяПоляМестаХранения,
				Истина);
			
			ЗакупкиКлиент.ОбработатьУказаниеНомераГТД(ЭтотОбъект, НовыйОбъект, , , Действия);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если Объект.КорректировочноеУведомление И Объект.Товары.Количество() > 0 Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПрослеживаемостьБРУ.СохранитьСтатусОтправки(ЭтотОбъект);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗакупкиСервер.ЗаполнитьСлужебныеРеквизитыНомераГТД(Объект.Товары);
	ЗаполнитьПредставлениеМестаХранения();
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_ОприходованиеПрослеживаемыхТоваров", ПараметрыЗаписи, Объект.Ссылка);
	
	СобытияФормКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект,
													НавигационнаяСсылкаФорматированнойСтроки,
													СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РНПТПриИзменении(Элемент)

	Для Каждого Строка Из Объект.ВидыЗапасов Цикл
		Строка.РНПТ = Неопределено;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыНомерГТД" Тогда
		
		ЗакупкиКлиент.ЗаполнитьСписокВыбораНомеровГТД(Элементы.Товары.ТекущиеДанные,
														Элементы.ТоварыНомерГТД.СписокВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,
																	КэшированныеЗначения,
																	ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,
																КэшированныеЗначения,
																ПараметрыУказанияСерий,
																Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ЗаполнитьПризнакАртикул						= Новый Структура("Номенклатура", "Артикул");
	ЗаполнитьПризнакТипНоменклатуры				= Новый Структура("Номенклатура", "ТипНоменклатуры");
	ПроверитьСериюРассчитатьСтатус				= Новый Структура("Склад, ПараметрыУказанияСерий",
															Неопределено, ПараметрыУказанияСерий);
	ЗаполнитьПризнакВедетсяУчетПоГТД			= Новый Структура("Номенклатура", "ВедетсяУчетПоГТД");
	НоменклатураПриИзмененииПереопределяемый	= Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
																	ИмяФормы, "Товары");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",					ЗаполнитьПризнакАртикул);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",			ЗаполнитьПризнакТипНоменклатуры);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",		ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",			ПроверитьСериюРассчитатьСтатус);
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",			ЗаполнитьПризнакВедетсяУчетПоГТД);
	СтруктураДействий.Вставить("ЗаполнитьСтрануПроисхожденияНоменклатуры",
								ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтраныПроисхождения());
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый",	НоменклатураПриИзмененииПереопределяемый);
	
	ЗаполнитьСтруктуруДействийПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекЗаполненияСлужебныхРеквизитовТабличнойЧасти(
		СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если Не ТекущаяСтрока.ВедетсяУчетПоГТД Тогда
		ТекущаяСтрока.НомерГТД = Неопределено;
		ТекущаяСтрока.ТипНомераГТД = Неопределено;
		ТекущаяСтрока.СтранаПроисхождения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ХарактеристикаПриИзмененииПереопределяемый = Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
																ИмяФормы, "Товары");
	
	СтруктураДействий = Новый Структура("ХарактеристикаПриИзмененииПереопределяемый",
										ХарактеристикаПриИзмененииПереопределяемый);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоИзменении(Элемент)
	
	ТекущаяСтрока			= Элементы.Товары.ТекущиеДанные;
	ИмяПоляМестаХранения	= ИмяПоляМестаХранения(ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		СтруктураДействий,
		ИмяПоляМестаХранения,
		Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("НомерГТД", ТекущиеДанные.НомерГТД);
	
	Действия = Новый Структура;
	Действия.Вставить("ЗаполнитьТипНомераГТД", ПараметрыЗаполнения);
	Действия.Вставить("ЗаполнитьСтрануПроисхожденияДляНомераГТД", ПараметрыЗаполнения);
	
	ИмяПоляМестаХранения = ИмяПоляМестаХранения(ТекущиеДанные);
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		Действия,
		ИмяПоляМестаХранения,
		Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, Действия, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = ЗакупкиКлиент.ДополнительныеПараметрыСозданияНомераГТД();
	ДополнительныеПараметры.ИмяПоляКоличество = "Количество";
	ДополнительныеПараметры.ОснованиеСтоимостиПоступления = Ложь;
	ДополнительныеПараметры.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = Истина;
	
	ПараметрыСоздания = ЗакупкиКлиент.ПараметрыСозданияНомераГТД(ТекущиеДанные,
																Элемент.ТекстРедактирования,
																ДополнительныеПараметры);
	
	ЗакупкиКлиент.ОткрытьФормуСозданияНомераГТД(ЭтотОбъект, ПараметрыСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТипМестаХраненияПриИзменении(Элемент)
	
	МестаХранения = МестаХранения();
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если (ТекущиеДанные.ТипМестаХранения = МестаХранения.Склад
			И Не ЗначениеЗаполнено(ТекущиеДанные.Склад))
		Или (ТекущиеДанные.ТипМестаХранения = МестаХранения.Подразделение
			И Не ЗначениеЗаполнено(ТекущиеДанные.Подразделение))
		Или (ТекущиеДанные.ТипМестаХранения = МестаХранения.ДоговорКонтрагента
			И Не ЗначениеЗаполнено(ТекущиеДанные.Договор))
		Или Не ЗначениеЗаполнено(ТекущиеДанные.ТипМестаХранения) Тогда
		
		ЗначенияПоУмолчанию = Новый Структура("Склад, Подразделение, Договор, Хранитель, Контрагент, 
												|ПредставлениеМестаХранения");
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ЗначенияПоУмолчанию);
		
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредставлениеМестаХраненияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПроверитьСериюРассчитатьСтатус = Новый Структура("Склад, ПараметрыУказанияСерий",
													Неопределено, ПараметрыУказанияСерий);
	
	СтруктураДействий = Новый Структура("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
	
	ИмяПоляМестаХранения = ИмяПоляМестаХранения(ТекущаяСтрока);
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		СтруктураДействий,
		ИмяПоляМестаХранения,
		Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредставлениеМестаХраненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МестаХранения = МестаХранения();
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипМестаХранения = МестаХранения.Склад Тогда
		ИмяФормыОткрытия	= "Справочник.Склады.Форма.ФормаВыбора";
		ПараметрыФормы		= ПараметрыВыбораСклада();
	ИначеЕсли ТекущиеДанные.ТипМестаХранения = МестаХранения.Подразделение Тогда
		ИмяФормыОткрытия	= "Справочник.СтруктураПредприятия.Форма.ФормаВыбора";
		ПараметрыФормы		= ПараметрыВыбораПодразделения();
	ИначеЕсли ТекущиеДанные.ТипМестаХранения = МестаХранения.ДоговорКонтрагента Тогда
		ИмяФормыОткрытия	= "Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора";
		ПараметрыФормы		= ПараметрыВыбораДоговора(ТекущиеДанные.Хранитель, ТекущиеДанные.Контрагент);
	КонецЕсли;
	
	ОткрытьФормуВыбораМестаХранения(ИмяФормыОткрытия, ПараметрыФормы, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредставлениеМестаХраненияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МестаХранения = МестаХранения();
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипМестаХранения = МестаХранения.Склад Тогда
		МестоХранения = ТекущиеДанные.Склад;
	ИначеЕсли ТекущиеДанные.ТипМестаХранения = МестаХранения.Подразделение Тогда
		МестоХранения = ТекущиеДанные.Подразделение;
	ИначеЕсли ТекущиеДанные.ТипМестаХранения = МестаХранения.ДоговорКонтрагента Тогда
		МестоХранения = ТекущиеДанные.Договор;
	КонецЕсли;
	
	ПоказатьЗначение(, МестоХранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредставлениеМестаХраненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ЗаполнитьМестоХранения(ВыбранноеЗначение, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредставлениеМестаХраненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МестаХранения = МестаХранения();
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипМестаХранения = МестаХранения.Склад Тогда
		ТипДанныхВыбора			= Тип("СправочникСсылка.Склады");
		ПараметрыВыбораДанных	= ПараметрыВыбораСклада(Ложь);
	ИначеЕсли ТекущиеДанные.ТипМестаХранения = МестаХранения.Подразделение Тогда
		ТипДанныхВыбора			= Тип("СправочникСсылка.СтруктураПредприятия");
		ПараметрыВыбораДанных = ПараметрыВыбораПодразделения();
	ИначеЕсли ТекущиеДанные.ТипМестаХранения = МестаХранения.ДоговорКонтрагента Тогда
		ТипДанныхВыбора			= Тип("СправочникСсылка.ДоговорыКонтрагентов");
		ПараметрыВыбораДанных	= ПараметрыВыбораДоговора(ТекущиеДанные.Хранитель, ТекущиеДанные.Контрагент);
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораДанных.Вставить("СтрокаПоиска", Текст);
	ПараметрыВыбораДанных.Вставить("ВыборГруппИЭлементов",
									ПредопределенноеЗначение("ИспользованиеГруппИЭлементов.Элементы"));
	
	ДанныеВыбора = ПолучитьДанныеВыбора(ТипДанныхВыбора, ПараметрыВыбораДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Товары) Тогда
		СкопироватьСтрокиНаСервере();
		
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(
			Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество() - КоличествоТоваровДоВставки;
	
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы	= Элементы.Товары;
	ДанныеТаблицы	= Объект.Товары;
	
	ДополнительныеПараметры = УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеПараметровРазбиенияСтрокиТабличнойЧасти(
								ТаблицаФормы.ТекущиеДанные);
	Оповещение				= Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество";
	
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект);
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено';
								|en = '""Company"" is required'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Организация", "", Отказ);
	КонецЕсли;
	
	Если Не Отказ
		И Объект.Товары.Количество() > 0 Тогда
		
		ОписаниеОповещения	= Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект);
		ТекстВопроса		=  НСтр("ru = 'Табличная часть будет очищена и заполнена прослеживаемыми импортными товарами, которые нужно оприходовать по РНПТ. Продолжить?';
									|en = 'The tabular section will be cleared and filled with traced imported goods that need to be recorded as received as per GBRN. Continue?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаполнитьПоОстаткамСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоОстаткамСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыЗагрузки = РаботаСТабличнымиЧастямиКлиент.ПараметрыЗагрузкиНоменклатуры();
	ПараметрыЗагрузки.ЗагружатьГТД			= Истина;
	ПараметрыЗагрузки.ПересчитыватьСуммы	= Ложь;
	ПараметрыЗагрузки.ЦенаВключаетНДС		= Ложь;
	ПараметрыЗагрузки.НалогообложениеНДС	= ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка");
	ПараметрыЗагрузки.ДатаЗаполнения		= Объект.Дата;
	
	ПараметрыЗагрузки.ПараметрыОтбора.Вставить("ТипНоменклатуры",
												НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзВнешнегоФайлаЗавершение", ЭтотОбъект);
	
	РаботаСТабличнымиЧастямиКлиент.ПоказатьФормуЗагрузкиНоменклатуры(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(АдресЗагруженныхДанных) Тогда
		ПолучитьЗагруженныеТоварыИзХранилища(АдресЗагруженныхДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераГТД(Команда)
	
	ПараметрыОповещения	= Новый Структура("ЗаполненыНомераГТД", Неопределено);
	ОписаниеОповещения	= Новый ОписаниеОповещения("ЗаполнитьНомераГТДЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора",
				,
				ЭтотОбъект,
				УникальныйИдентификатор,
				,
				,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераГТДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НомерГТД = Результат;
	ЗаполненыНомераГТД = ДополнительныеПараметры.ЗаполненыНомераГТД;
	
	Если ЗначениеЗаполнено(НомерГТД) Тогда
		ЗаполнитьНомераГТДНаСервере(НомерГТД, ЗаполненыНомераГТД);
	КонецЕсли;
	
	ЗакупкиКлиент.ОповеститьОЗаполненииНомеровГТДВТабличнойЧасти(ЗаполненыНомераГТД, НомерГТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ТМЦВЭксплуатацииКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТМЦВЭксплуатации.ТекущиеДанные;
	ТекущаяСтрока.КоличествоПоРНПТ = ТекущаяСтрока.Количество;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОткрытьВидыЗапасов(Команда)
	
	ПараметрыРедактированияВидовЗапасов = ПоместитьТоварыИВидыЗапасовВХранилище();
	
	ФинансыКлиент.ОткрытьВидыЗапасов(ЭтотОбъект, ПараметрыРедактированияВидовЗапасов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьУведомлениеВXML(Команда)
	
	ВыгрузитьУведомлениеОбОстатках();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
//++ НЕ УТ
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма);
//-- НЕ УТ
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
//++ НЕ УТ
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
//-- НЕ УТ
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
//++ НЕ УТ
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
//-- НЕ УТ
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
//++ НЕ УТ
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСС");
//-- НЕ УТ
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
//++ НЕ УТ
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСС");
//-- НЕ УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
//++ НЕ УТ
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru = 'Подтвердите, что уведомление уже сдано.';
													|en = 'Confirm that the notification has already been submitted.'"));
	
	ИнтерфейсыВзаимодействияБРОКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
//-- НЕ УТ
КонецПроцедуры

&НаКлиенте
Процедура ПодборТМЦ(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ТекущаяСтрока = Элементы.ТМЦВЭксплуатации.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ПараметрыФормы.Вставить("Подразделение", ТекущаяСтрока.Подразделение);
	КонецЕсли;
	ПараметрыФормы.Вставить("ТекущийРегистратор", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.ПартииТМЦВЭксплуатации.Форма.ФормаПодбора", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		СтруктураДействий = Новый Структура();
		
		ИмяПоляМестаХранения = ИмяПоляМестаХранения(ТекущаяСтрока);
		
		УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
			Объект,
			СтруктураДействий,
			ИмяПоляМестаХранения,
			Истина);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
																	МассивЭлементов,
																	"Доступность",
																	РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект.Товары, Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры",
							НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	
	ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПризнакАртикул						= Новый Структура("Номенклатура", "Артикул");
	ЗаполнитьПризнакТипНоменклатуры				= Новый Структура("Номенклатура", "ТипНоменклатуры");
	ЗаполнитьПризнакХарактеристикиИспользуются	= Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	ЗаполнитьПризнакВедетсяУчетПоГТД			= Новый Структура("Номенклатура", "ВедетсяУчетПоГТД");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",						ЗаполнитьПризнакАртикул);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",				ЗаполнитьПризнакТипНоменклатуры);
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	ЗаполнитьПризнакХарактеристикиИспользуются);
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",				ЗаполнитьПризнакВедетсяУчетПоГТД);
	
	ДобавитьВСтруктуруДействияИнициализациюМестаХранения(СтруктураДействий);
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекЗаполненияСлужебныхРеквизитовТабличнойЧасти(
		СтруктураДействий);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ИмяПоляМестаХранения = ИмяПоляМестаХранения(ТекущаяСтрока);
		
		УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
			Объект,
			СтруктураДействий,
			ИмяПоляМестаХранения,
			Истина);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ЗакупкиСервер.ЗаполнитьСлужебныеРеквизитыНомераГТД(Объект.Товары);
	ЗаполнитьПредставлениеМестаХранения();
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ЗаполнитьПризнакАртикул				= Новый Структура("Номенклатура", "Артикул");
	ЗаполнитьПризнакТипНоменклатуры		= Новый Структура("Номенклатура", "ТипНоменклатуры");
	ЗаполнитьПризнакВедетсяУчетПоГТД	= Новый Структура("Номенклатура", "ВедетсяУчетПоГТД");
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул",			ЗаполнитьПризнакАртикул);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры",	ЗаполнитьПризнакТипНоменклатуры);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",	ЗаполнитьПризнакВедетсяУчетПоГТД);
	
	ДобавитьВСтруктуруДействияИнициализациюМестаХранения(СтруктураДействийСДобавленнымиСтроками);
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекЗаполненияСлужебныхРеквизитовТабличнойЧасти(
		СтруктураДействийСДобавленнымиСтроками);
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		СтруктураДействийСДобавленнымиСтроками,
		"Склад",
		Истина);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		СтруктураДействийСИзмененнымиСтроками,
		"Склад",
		Истина);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	СтруктураДействий.Штрихкоды									= ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками	= СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками		= СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий					= ПараметрыУказанияСерий;
	СтруктураДействий.ИмяКолонкиКоличество						= "Количество";
	СтруктураДействий.ИзменятьКоличество						= Истина;
	СтруктураДействий.НеИспользоватьУпаковки					= Истина;
	СтруктураДействий.ТолькоТовары								= Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий, КэшированныеЗначения, ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры", 0.1, Истина);
	КонецЕсли;
	
	ПроверитьКодыТНВЭД();
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКодыТНВЭД()

	Если Объект.КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка() Тогда 
			Объект.КодТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Товары[0].Номенклатура, "КодТНВЭД");
			ОбщегоНазначения.СообщитьПользователю("Установлен код ТН ВЭД " + Объект.КодТНВЭД);
		Иначе
			СоответствиеТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Объект.Товары.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"), "КодТНВЭД");
			Для каждого Элемент Из СоответствиеТНВЭД Цикл
				Если Элемент.Значение = Объект.КодТНВЭД Тогда
					Продолжить;
				КонецЕсли;
				ПараметрыОтбора = Новый Структура("Номенклатура", Элемент.Ключ);
				СтрокиКУдалению = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
				Для каждого Строка Из СтрокиКУдалению Цикл
					ОбщегоНазначения.СообщитьПользователю("Код ТН ВЭД номенклатуры " + Элемент.Ключ + " (" + Элемент.Значение + ") отличается от кода ТН ВЭД документа.");
					 Объект.Товары.Удалить(Строка);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма, Объект, СтруктураПараметровДействия,
		КэшированныеЗначения);
	ЗакупкиСервер.ЗаполнитьСлужебныеРеквизитыНомераГТД(Объект.Товары);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	НуженСерверныйВызов =НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,
																				ПараметрыУказанияСерий,
																				Текст,
																				ТекущиеДанные);
	
	Если НуженСерверныйВызов Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - в этом документе для указания серий не нужен серверный вызов.';
								|en = 'An error occurred when attempting to specify batch. No server call is required to specify batch in this document.'");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	
	ОткрытьПодборСерий(, ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти

#Область НомераГТД

&НаКлиенте
Процедура ОбработатьПодборНомераГТД(РезультатПодбора)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполненыНомераГТД = Ложь;
	НомерГТД = Неопределено;
	
	ОбработатьУказаниеНомераГТДСервер(ИдентификаторСтроки, РезультатПодбора, ЗаполненыНомераГТД, НомерГТД);
	
	ЗакупкиКлиент.ОповеститьОЗаполненииНомеровГТДВТабличнойЧасти(ЗаполненыНомераГТД, НомерГТД);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеНомераГТДСервер(ИдентификаторСтроки,
											РезультатПодбора,
											ЗаполненыНомераГТД,
											НомерГТД)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИмяПоляМестаХранения = ИмяПоляМестаХранения(ТекущаяСтрока);
	
	ДанныеПодбора	= ПолучитьИзВременногоХранилища(РезультатПодбора.АдресВоВременномХранилище);
	НомерГТД		= ?(ДанныеПодбора.ОстаточныйНомерГТД <> Неопределено,
						НомерГТД,
						ДанныеПодбора.ОсновнойНомерГТД);
	
	ДействияОбработки = Новый Структура;
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		ДействияОбработки,
		ИмяПоляМестаХранения,
		Истина);
	
	ПараметрыПодбораНомераГТД = ЗакупкиСервер.ПараметрыПодбораНомераГТД();
	ПараметрыПодбораНомераГТД.ИмяПоляКоличествоУпаковок = "Количество";
	
	ЗакупкиСервер.ОбработатьУказаниеНомераГТДСервер(ЭтотОбъект,
													ИдентификаторСтроки,
													ДанныеПодбора,
													ЗаполненыНомераГТД,
													ПараметрыПодбораНомераГТД,
													ДействияОбработки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомераГТДНаСервере(Знач НомерГТД, ЗаполненыНомераГТД)
	
	ЗакупкиСервер.ЗаполнитьНомераГТДВТабличнойЧасти(
		Объект.Товары,
		НомерГТД,
		Элементы.Товары.ВыделенныеСтроки,
		ЗаполненыНомераГТД);
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

&НаСервере
Процедура ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение)
	
	ЗапасыСервер.ОбработатьВводВидовЗапасовВручную(ВыбранноеЗначение, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыИВидыЗапасовВХранилище()
	
	Возврат ЗапасыСервер.ПоместитьТоварыИВидыЗапасовВХранилище(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект, "СерииВсегдаВТЧТовары");
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтотОбъект);
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтотОбъект, "ТоварыСтранаПроисхождения");
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоПоРНПТ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНомераГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНомеровГТД.НомерРНПТКомплекта;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<прослеживаемый комплект>';
																|en = '<traceable kit>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь); 
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНомераГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНомеровГТД.НомерРНПТКомплекта;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Установка условного оформления для элемента 'ПредставлениеМестаХранения' табличной части 'Товары'
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПредставлениеМестаХранения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипМестаХранения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите операцию>';
																|en = '<select operation>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Установка условного оформления для элемента 'ПредставлениеМестаХранения' табличной части 'Товары'
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПредставлениеМестаХранения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипМестаХранения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПредставлениеМестаХранения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Установка условного оформления для элемента 'ПредставлениеМестаХранения' табличной части 'Товары'
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТипМестаХранения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипМестаХранения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыМестХранения.Склад;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Оприходование товаров, хранящихся на складе';
																|en = 'Recording of goods stored in the warehouse as received'"));
	
	// Установка условного оформления для элемента 'ПредставлениеМестаХранения' табличной части 'Товары'
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТипМестаХранения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипМестаХранения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыМестХранения.Подразделение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Оприходование товаров, хранящихся в производственном подразделении';
																|en = 'Recording of goods stored in a production unit as received'"));
	
	// Установка условного оформления для элемента 'ПредставлениеМестаХранения' табличной части 'Товары'
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТипМестаХранения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипМестаХранения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыМестХранения.ДоговорКонтрагента;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Оприходование товаров, хранящихся у партнера';
																|en = 'Recording of goods stored by a partner as received'"));
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(
															Объект,
															Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров));
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьСписокВыбораТоварыТипМестаХранения();
	ЗаполнитьПредставлениеМестаХранения();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ЗакупкиСервер.ЗаполнитьСлужебныеРеквизитыНомераГТД(Объект.Товары);
	
	УстановитьВидимостьКорректировкаУведомления();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ЗаполнитьПризнакАртикул						= Новый Структура("Номенклатура", "Артикул");
	ЗаполнитьПризнакТипНоменклатуры				= Новый Структура("Номенклатура", "ТипНоменклатуры");
	ЗаполнитьПризнакХарактеристикиИспользуются	= Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	ЗаполнитьПризнакВедетсяУчетПоГТД			= Новый Структура("Номенклатура", "ВедетсяУчетПоГТД");
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",			ЗаполнитьПризнакАртикул);
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",	ЗаполнитьПризнакТипНоменклатуры);
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											ЗаполнитьПризнакХарактеристикиИспользуются);
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",	ЗаполнитьПризнакВедетсяУчетПоГТД);
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекЗаполненияСлужебныхРеквизитовТабличнойЧасти(
		ПараметрыЗаполненияРеквизитов);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТоварыТипМестаХранения()
	
	ПолеФормы = Элементы.ТоварыТипМестаХранения;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		ЭлементСписка = ПолеФормы.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыМестХранения.Подразделение);
		
		Если ЭлементСписка <> Неопределено Тогда
			ПолеФормы.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
	Если Не (ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков")
		И ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки")
		И ПолучитьФункциональнуюОпцию("ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи")) Тогда
		
		ЭлементСписка = ПолеФормы.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыМестХранения.ДоговорКонтрагента);
		
		Если ЭлементСписка <> Неопределено Тогда
			ПолеФормы.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеМестаХранения()
	
	Товары = Объект.Товары;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки	КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)
	|			ТОГДА Товары.Склад
	|		КОГДА Товары.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение)
	|			ТОГДА Товары.Подразделение
	|		КОГДА Товары.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.ДоговорКонтрагента)
	|			ТОГДА Товары.Договор
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ				КАК МестоХранения,
	|	ВЫБОР
	|		КОГДА Товары.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.ДоговорКонтрагента)
	|			ТОГДА Товары.Хранитель
	|		ИНАЧЕ """"
	|	КОНЕЦ				КАК ПрефиксМестоХранения,
	|	ВЫБОР
	|		КОГДА Товары.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.ДоговорКонтрагента)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ				КАК МестоХраненияДоговор
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	&ТоварыДокумента КАК Товары
	|
	|;
	|/////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	Товары.НомерСтроки							КАК НомерСтроки,
	|	Товары.МестоХранения						КАК МестоХранения,
	|	ПРЕДСТАВЛЕНИЕ(Товары.МестоХранения)			КАК ПредставлениеМестаХранения,
	|	ПРЕДСТАВЛЕНИЕ(Товары.ПрефиксМестоХранения)	КАК ПредставлениеПрефиксМестаХранения
	|ИЗ
	|	ТоварыДляЗапроса КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|		ПО Товары.МестоХраненияДоговор
	|			И Товары.МестоХранения = Договоры.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТоварыДокумента", Товары.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для НомерСтроки = 0 По Товары.Количество() - 1 Цикл
		Выборка.Следующий();
		
		Товары[НомерСтроки].ПредставлениеМестаХранения = ПредставлениеМестаХранения(Выборка.ПредставлениеМестаХранения,
																					Выборка.ПредставлениеПрефиксМестаХранения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеМестаХранения(Представление, ПредставлениеПрефикс)
	
	ШаблонРасширенногоПредставления = НСтр("ru = '%1, %2';
											|en = '%1, %2'");
	
	РасширенноеПредставление	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасширенногоПредставления,
																						ПредставлениеПрефикс,
																						Представление);
	ПредставлениеМестаХранения	= ?(ПустаяСтрока(ПредставлениеПрефикс),
									Представление,
									РасширенноеПредставление);
	
	Возврат ПредставлениеМестаХранения;
	
КонецФункции

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	ТоварыИзХранилища		= ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	КэшированныеЗначения	= ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияИнициализациюМестаХранения(СтруктураДействий);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ЗакупкиСервер.ЗаполнитьСлужебныеРеквизитыНомераГТД(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьПодчиненныеРеквизитыОбъекта(Объект, ИмяРеквизитаРодителя);
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДПриИзменении(Элемент)
	КодТНВЭДПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КодТНВЭДПриИзмененииНаСервере()
	ПриИзмененииДанныхУведомления();
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	ПриИзмененииДанныхУведомления();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДанныхУведомления()
	
	Объект.Товары.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПересчитатьРеквизитыУведомления();

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваПриИзменении(Элемент)

	ПересчитатьРеквизитыУведомления();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРеквизитыУведомления()
	
	Если Объект.Товары.Количество()> 0 Тогда
		
		ТаблицаКоличестваТоваров = Объект.Товары.Выгрузить(, "Количество, КоличествоПоРНПТ");
		ТаблицаКоличестваТоваров.Свернуть(, "Количество, КоличествоПоРНПТ");
		СтрокаТаблицыЗначений = ТаблицаКоличестваТоваров[0];
		Объект.Количество = СтрокаТаблицыЗначений.Количество;
		Объект.КоличествоПрослеживаемости = СтрокаТаблицыЗначений.КоличествоПоРНПТ;
		
	ИначеЕсли Объект.ОсновныеСредства.Количество()> 0 Тогда
		
		Объект.Количество = Объект.ОсновныеСредства.Количество();
		Объект.КоличествоПрослеживаемости = Объект.ОсновныеСредства.Итог("КоличествоПоРНПТ");
		
	ИначеЕсли Объект.ТМЦВЭксплуатации.Количество()> 0 Тогда
		
		ТаблицаКоличестваТМЦВЭксплуатации = Объект.ТМЦВЭксплуатации.Выгрузить(, "Количество, КоличествоПоРНПТ");
		ТаблицаКоличестваТМЦВЭксплуатации.Свернуть(, "Количество, КоличествоПоРНПТ");
		СтрокаТаблицыЗначений = ТаблицаКоличестваТМЦВЭксплуатации[0];
		Объект.Количество = СтрокаТаблицыЗначений.Количество;
		Объект.КоличествоПрослеживаемости = СтрокаТаблицыЗначений.КоличествоПоРНПТ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыКОформлению.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТоварыКОформлению.ВидЗапасов					КАК ВидЗапасов,
	|	ТоварыКОформлению.НомерГТД						КАК НомерГТД,
	|	СУММА(ТоварыКОформлению.Количество)				КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|		ТоварыОрганизаций.ВидЗапасов					КАК ВидЗапасов,
	|		ТоварыОрганизаций.НомерГТД						КАК НомерГТД,
	|		ТоварыОрганизаций.КоличествоОстаток				КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций.Остатки(&Период,
	|				Организация = &Организация) КАК ТоварыОрганизаций
	|	
	|	ГДЕ
	|		ТоварыОрганизаций.КоличествоОстаток > 0
	|		И ЕСТЬNULL(ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.ПрослеживаемыйТовар, ЛОЖЬ)
	|		И ЕСТЬNULL(ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД.ПрослеживаемыйТовар, ЛОЖЬ)
	|		И ЕСТЬNULL(ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД, НЕОПРЕДЕЛЕНО) = &КодТНВЭД
	|		И ЕСТЬNULL(ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) = &ЕдиницаИзмерения
	|		И НЕ ЕСТЬNULL(ТоварыОрганизаций.НомерГТД.ТипНомераГТД, ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.ПустаяСсылка)) В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|		РезервыТоваровОрганизаций.ВидЗапасов					КАК ВидЗапасов,
	|		РезервыТоваровОрганизаций.НомерГТД						КАК НомерГТД,
	|		РезервыТоваровОрганизаций.КоличествоОстаток				КАК Количество
	|	ИЗ
	|		РегистрНакопления.РезервыТоваровОрганизаций.Остатки(,
	|				Организация = &Организация) КАК РезервыТоваровОрганизаций
	|	
	|	ГДЕ
	|		РезервыТоваровОрганизаций.КоличествоОстаток > 0
	|		И ЕСТЬNULL(РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.ПрослеживаемыйТовар, ЛОЖЬ)
	|		И ЕСТЬNULL(РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД.ПрослеживаемыйТовар, ЛОЖЬ)
	|		И ЕСТЬNULL(РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД, НЕОПРЕДЕЛЕНО) = &КодТНВЭД
	|		И ЕСТЬNULL(РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) = &ЕдиницаИзмерения
	|		И НЕ ЕСТЬNULL(РезервыТоваровОрганизаций.НомерГТД.ТипНомераГТД, ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.ПустаяСсылка)) В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|		ТоварыОрганизаций.ВидЗапасов					КАК ВидЗапасов,
	|		ТоварыОрганизаций.НомерГТД						КАК НомерГТД,
	|		ВЫБОР
	|			КОГДА ТоварыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ТоварыОрганизаций.Количество
	|			ИНАЧЕ ТоварыОрганизаций.Количество
	|		КОНЕЦ											КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|	
	|	ГДЕ
	|		ТоварыОрганизаций.Активность
	|		И ТоварыОрганизаций.Регистратор = &Регистратор
	|		И ЕСТЬNULL(ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.ПрослеживаемыйТовар, ЛОЖЬ)
	|		И ЕСТЬNULL(ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД.ПрослеживаемыйТовар, ЛОЖЬ)
	|		И ЕСТЬNULL(ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД, НЕОПРЕДЕЛЕНО) = &КодТНВЭД
	|		И ЕСТЬNULL(ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) = &ЕдиницаИзмерения
	|	
	|	) КАК ТоварыКОформлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.АналитикаУчетаНоменклатуры,
	|	ТоварыКОформлению.ВидЗапасов,
	|	ТоварыКОформлению.НомерГТД
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура							КАК Номенклатура,
	|	Аналитика.Характеристика						КАК Характеристика,
	|	Аналитика.Назначение							КАК Назначение,
	|	Аналитика.Серия									КАК Серия,
	|	ТоварыКОформлению.НомерГТД						КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлению.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ											КАК НомерГТДОтсутствует,
	|	Аналитика.ТипМестаХранения						КАК ТипМестаХранения,
	|	Аналитика.СкладскаяТерритория					КАК Склад,
	|	Аналитика.Подразделение							КАК Подразделение,
	|	Аналитика.Договор								КАК Договор,
	|	Аналитика.Партнер								КАК Хранитель,
	|	Аналитика.Контрагент							КАК Контрагент,
	|	ТоварыКОформлению.ВидЗапасов					КАК ВидЗапасов,
	|	ТоварыКОформлению.Количество					КАК Количество,
	|	ТоварыКОформлению.Количество					КАК КоличествоПоРНПТ
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТоварыКОформлению.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО Аналитика.Номенклатура = Товары.Ссылка
	|
	|ГДЕ
	|	ЕСТЬNULL(Товары.ПрослеживаемыйТовар, ЛОЖЬ) = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Аналитика.МестоХранения.Представление,
	|	Товары.Представление,
	|	Аналитика.Характеристика.Представление,
	|	Аналитика.Назначение.Представление,
	|	Аналитика.Серия.Представление,
	|	ТоварыКОформлению.НомерГТД.Представление";
	
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	Запрос.УстановитьПараметр("Регистратор",	Объект.Ссылка);
	Запрос.УстановитьПараметр("КодТНВЭД",	Объект.КодТНВЭД);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения",	Объект.ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Период", НачалоМесяца(Константы.ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров.Получить()));
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьПредставлениеМестаХранения();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ЗакупкиСервер.ЗаполнитьСлужебныеРеквизитыНомераГТД(Объект.Товары);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоляМестаХранения(ТекущаяСтрока)
	
	МестаХранения			= МестаХранения();
	ИмяПоляМестаХранения	= ?(ТекущаяСтрока <> Неопределено,
								?(ТекущаяСтрока.ТипМестаХранения = МестаХранения.Склад,
									"Склад",
									?(ТекущаяСтрока.ТипМестаХранения = МестаХранения.Подразделение,
										"Подразделение",
										"Договор")),
									"Склад");
	
	Возврат ИмяПоляМестаХранения;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтруктуруДействийПриДобавленииСтроки(Форма, СтруктураДействий)
	
	ТекущаяСтрока	= Форма.Элементы.Товары.ТекущиеДанные;
	ПолеФормы		= Форма.Элементы.ТоварыТипМестаХранения;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		Если Не ПолеФормы.Видимость
			И Не ЗначениеЗаполнено(ТекущаяСтрока.ТипМестаХранения) Тогда
			
			ЗаполнитьТипМестаХраненияПоУмолчанию = Новый Структура("ТипМестаХранения",
																	"Перечисление.ТипыМестХранения.Склад");
			
			СтруктураДействий.Вставить("ЗаполнитьТипМестаХраненияПоУмолчанию", ЗаполнитьТипМестаХраненияПоУмолчанию);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСтруктуруДействияИнициализациюМестаХранения(СтруктураДействий)
	
	Если Не Элементы.ТоварыТипМестаХранения.Видимость Тогда
		ЗаполнитьТипМестаХраненияПоУмолчанию = Новый Структура("ТипМестаХранения", "Перечисление.ТипыМестХранения.Склад");
		
		СтруктураДействий.Вставить("ЗаполнитьТипМестаХраненияПоУмолчанию", ЗаполнитьТипМестаХраненияПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МестаХранения()
	
	МестаХранения = Новый Структура;
	
	МестаХранения.Вставить("Склад",         ПредопределенноеЗначение("Перечисление.ТипыМестХранения.Склад"));
	МестаХранения.Вставить("Подразделение", ПредопределенноеЗначение("Перечисление.ТипыМестХранения.Подразделение"));
	МестаХранения.Вставить("ДоговорКонтрагента",
							ПредопределенноеЗначение("Перечисление.ТипыМестХранения.ДоговорКонтрагента"));
	
	Возврат МестаХранения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыВыбораСклада(ОткрытиеФормыВыбора = Истина)
	
	Отбор = Новый Структура("ЭтоГруппа", Ложь);
	ПараметрыВыбораДанных = Новый Структура("Отбор", Отбор);
	
	Если ОткрытиеФормыВыбора Тогда
		ПараметрыВыбораДанных.Вставить("ВыборГруппыСкладов", ИспользованиеГруппИЭлементов.Элементы);
	КонецЕсли;
	
	Возврат ПараметрыВыбораДанных;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыВыбораПодразделения()
	
	Отбор = Новый Структура("ПроизводственноеПодразделение", Истина);
	ПараметрыВыбораДанных = Новый Структура("Отбор", Отбор);
	
	Возврат ПараметрыВыбораДанных;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыВыбораДоговора(Партнер, Контрагент)
	
	ОперацииДоговора = Новый Массив;
	ОперацииДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути"));
	ОперацииДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки"));
	ОперацииДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути"));
	ОперацииДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути"));
	ОперацииДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки"));
	ОперацииДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи"));
	
	Отбор = Новый Структура;
	Отбор.Вставить("ХозяйственнаяОперация",
					Новый ФиксированныйМассив(ОперацииДоговора));
	Отбор.Вставить("Статус",
					ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует"));
	Отбор.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыВыбораДанных = Новый Структура;
	ПараметрыВыбораДанных.Вставить("Отбор", Отбор);
	ПараметрыВыбораДанных.Вставить("РазрешитьВыборПартнера");
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		ПараметрыВыбораДанных.Вставить("Партнер", Партнер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ПараметрыВыбораДанных.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	Возврат ПараметрыВыбораДанных;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораМестаХранения(ИмяФормыОткрытия, ПараметрыФормы, ТекущиеДанные)
	
	ПараметрыОповещения = Новый Структура("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения  = Новый ОписаниеОповещения("ВыборМестаХраненияЗавершение",
													ЭтаФорма,
													ПараметрыОповещения);
	
	ОткрытьФорму(ИмяФормыОткрытия,
					ПараметрыФормы,
					,
					,
					,
					,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМестаХраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьМестоХранения(Результат, ДополнительныеПараметры.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМестоХранения(МестоХранения, ТекущиеДанные)
	
	МестаХранения				= МестаХранения();
	ПредставлениеМестаХранения	= Строка(МестоХранения);
	
	ЗначенияПоУмолчанию = Новый Структура("Склад, Подразделение, Договор, Хранитель, Контрагент");
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ЗначенияПоУмолчанию);
	
	Если ТекущиеДанные.ТипМестаХранения = МестаХранения.Склад Тогда;
		ТекущиеДанные.Склад = МестоХранения;
	ИначеЕсли ТекущиеДанные.ТипМестаХранения = МестаХранения.Подразделение Тогда
		ТекущиеДанные.Подразделение = МестоХранения;
	ИначеЕсли ТекущиеДанные.ТипМестаХранения = МестаХранения.ДоговорКонтрагента Тогда
		ТекущиеДанные.Договор = МестоХранения;
		
		РеквизитыДоговора = РеквизитыДоговора(МестоХранения);
		ТекущиеДанные.Хранитель  = РеквизитыДоговора.Партнер;
		ТекущиеДанные.Контрагент = РеквизитыДоговора.Контрагент;
	КонецЕсли;
	
	ТекущиеДанные.ПредставлениеМестаХранения = ПредставлениеМестаХранения(ПредставлениеМестаХранения,
																			Строка(ТекущиеДанные.Хранитель));
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	
КонецПроцедуры

&НаСервере
Функция РеквизитыДоговора(Договор)
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Партнер, Контрагент");
	
	Возврат РеквизитыДоговора;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстПервичногоУведомления()
	
	Если ЗначениеЗаполнено(Объект.ДокументУведомлениеОбОстатках) Тогда
		СтрокаПервичноеУведомление =  Объект.ДокументУведомлениеОбОстатках;
	Иначе
		СтрокаПервичноеУведомление = НСтр("ru = '<Отсутствует>';
											|en = '<missing>'"); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПервичногоДокумента(Параметры)
	
	Объект.ДатаПервичногоДокумента			= Параметры.ДатаПервичногоДокумента;
	Объект.НомерПервичногоДокумента			= Параметры.НомерПервичногоДокумента;
	Объект.НаименованиеПервичногоДокумента	= Параметры.НаименованиеПервичногоДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУведомлениеОбОстаткахНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
		
	ОткрытьФорму(
		"Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Форма.ФормаВыбора"
		,,,,,, Новый ОписаниеОповещения("ДокументУведомлениеОбОстаткахНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ДокументУведомлениеОбОстаткахНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ДокументУведомлениеОбОстатках = Результат;
	КонецЕсли;
	УстановитьТекстПервичногоУведомления();

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПараметрыНажатие(Элемент)
	
	Форма = ЭтотОбъект;
	
	Если НЕ Форма.ТолькоПросмотр Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",          Форма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("ИННДоРеорганизации",      Объект.ИННДоРеорганизации);
	ПараметрыФормы.Вставить("КППДоРеорганизации",      Объект.КППДоРеорганизации);
	ПараметрыФормы.Вставить("ФормаОткрытаИзКорректировочногоУведомления",  Объект.КорректировочноеУведомление);
	ПараметрыФормы.Вставить("ПризнакУведомления",      Объект.ПризнакУведомления);
	ПараметрыФормы.Вставить("КодФормыРеорганизации",   Объект.КодФормыРеорганизации);
	ПараметрыФормы.Вставить("НаименованиеПервичногоДокумента", Объект.НаименованиеПервичногоДокумента);
	ПараметрыФормы.Вставить("ДатаПервичногоДокумента", Объект.ДатаПервичногоДокумента);
	ПараметрыФормы.Вставить("НомерПервичногоДокумента", Объект.НомерПервичногоДокумента);
	ПараметрыФормы.Вставить("КодТНВЭД", Объект.КодТНВЭД);
	ПараметрыФормы.Вставить("КодОКПД2", Объект.КодОКПД2);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", Объект.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ЕдиницаПрослеживаемости", Объект.ЕдиницаПрослеживаемости);
	ПараметрыФормы.Вставить("Количество", Объект.Количество);
	ПараметрыФормы.Вставить("КоличествоПрослеживаемости", Объект.КоличествоПрослеживаемости);
	ПараметрыФормы.Вставить("Сумма", Объект.Сумма);
	ПараметрыФормы.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	
	ПараметрыФормы.Вставить("Продавцы", Объект.Продавцы);
	ПараметрыФормы.Вставить("ВидыЗапасов", Объект.ВидыЗапасов);
	
	ОткрытьФорму(
		"Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Форма.ФормаПараметровУведомлений",
		ПараметрыФормы, 
		Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировочноеУведомлениеПриИзменении(Элемент)
	
	УстановитьВидимостьКорректировкаУведомления();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКорректировкаУведомления()
		
	Элементы.Корректировка.Видимость 		= Объект.КорректировочноеУведомление;
	Элементы.ДанныеКорректировки.Видимость	= Объект.КорректировочноеУведомление;
	Элементы.ГруппаТовары.Видимость			= НЕ Объект.КорректировочноеУведомление;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьУведомлениеОбОстатках()
	
	ПрослеживаемостьКлиент.ВыгрузитьУведомлениеПоПрослеживаемости(ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ПрослеживаемыеТоварыВСоставеПриИзменении(Элемент)

//++ НЕ УТ
	Если ПрослеживаемыеТоварыВСоставе <> 2 И ЗаполненаТабличнаяЧасть("ОсновныеСредства") Тогда
		
		ТекстВопроса = 
		НСтр("ru = 'Табличная часть ""Основные средства"" не пустая.
		|При переключении табличная часть ""Основные средства"" будет очищена.';
		|en = 'The Fixed assets table is not empty.
		|When switching, the Fixed assets table will be cleared.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить';
											|en = 'Continue'"));
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена';
										|en = 'Cancel'"));
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("Картинка", БиблиотекаКартинок.Информация32);
		ПараметрыВопроса.Вставить("Заголовок",
		НСтр("ru = 'Предупреждение об очистке табличной части';
			|en = 'Warning about the table cleanup'"));
		ПараметрыВопроса.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
		ОбработчикРезультата = Новый ОписаниеОповещения("ОбработатьОтветНаПредупреждениеОбОчисткеТабличнойЧасти", ЭтотОбъект);
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОбработчикРезультата, ТекстВопроса, Кнопки, ПараметрыВопроса);
		
	ИначеЕсли ПрослеживаемыеТоварыВСоставе <> 1 И ЗаполненаТабличнаяЧасть("Товары") Тогда
		
		ТекстВопроса = 
		НСтр("ru = 'Табличная часть ""Товары"" не пустая.
		|При переключении табличная часть ""Товары"" будет очищена.';
		|en = 'The Goods table is not empty.
		|When switching, the Goods table will be cleared.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить';
											|en = 'Continue'"));
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена';
										|en = 'Cancel'"));
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("Картинка", БиблиотекаКартинок.Информация32);
		ПараметрыВопроса.Вставить("Заголовок",
		НСтр("ru = 'Предупреждение об очистке табличной части';
			|en = 'Warning about the table cleanup'"));
		ПараметрыВопроса.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
		ОбработчикРезультата = Новый ОписаниеОповещения("ОбработатьОтветНаПредупреждениеОбОчисткеТабличнойЧасти", ЭтотОбъект);
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОбработчикРезультата, ТекстВопроса, Кнопки, ПараметрыВопроса);
	
	ИначеЕсли ПрослеживаемыеТоварыВСоставе <> 3 И ЗаполненаТабличнаяЧасть("ТМЦВЭксплуатации") Тогда
		
		ТекстВопроса = 
		НСтр("ru = 'Табличная часть ""ТМЦ в эксплуатации"" не пустая.
		|При переключении табличная часть ""ТМЦ в эксплуатации"" будет очищена.';
		|en = 'The Inventory in operation table is not empty.
		|When switching, the Inventory in operation table will be cleared.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить';
											|en = 'Continue'"));
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена';
										|en = 'Cancel'"));
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("Картинка", БиблиотекаКартинок.Информация32);
		ПараметрыВопроса.Вставить("Заголовок",
		НСтр("ru = 'Предупреждение об очистке табличной части';
			|en = 'Warning about the table cleanup'"));
		ПараметрыВопроса.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
		ОбработчикРезультата = Новый ОписаниеОповещения("ОбработатьОтветНаПредупреждениеОбОчисткеТабличнойЧасти", ЭтотОбъект);
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОбработчикРезультата, ТекстВопроса, Кнопки, ПараметрыВопроса);
		
	Иначе
		УстановитьВидимостьТабличныхЧастей();
	КонецЕсли;

//-- НЕ УТ
КонецПроцедуры

//++ НЕ УТ
&НаКлиенте
Процедура ОбработатьОтветНаПредупреждениеОбОчисткеТабличнойЧасти(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено Или Ответ.Значение = "Отмена" Тогда
		Если ЗаполненаТабличнаяЧасть("ТМЦВЭксплуатации") Тогда
			ПрослеживаемыеТоварыВСоставе = 3;
		ИначеЕсли ЗаполненаТабличнаяЧасть("ОсновныеСредства") Тогда
			ПрослеживаемыеТоварыВСоставе = 2;
		Иначе
			ПрослеживаемыеТоварыВСоставе = 1;
		КонецЕсли;
		Возврат;
	ИначеЕсли Ответ.Значение = "Продолжить" Тогда
		
		Если ПрослеживаемыеТоварыВСоставе = 1 Тогда
			
			УстановитьВидимостьТабличныхЧастей();
			Если ЗаполненаТабличнаяЧасть("ОсновныеСредства") Тогда
				ОчиститьТабличнуюЧасть("ОсновныеСредства");
			КонецЕсли;
			Если ЗаполненаТабличнаяЧасть("ТМЦВЭксплуатации") Тогда
				ОчиститьТабличнуюЧасть("ТМЦВЭксплуатации");
			КонецЕсли;
		
		ИначеЕсли ПрослеживаемыеТоварыВСоставе = 2 Тогда
			
			УстановитьВидимостьТабличныхЧастей();
			Если ЗаполненаТабличнаяЧасть("Товары") Тогда
				ОчиститьТабличнуюЧасть("Товары");
			КонецЕсли;
			Если ЗаполненаТабличнаяЧасть("ТМЦВЭксплуатации") Тогда
				ОчиститьТабличнуюЧасть("ТМЦВЭксплуатации");
			КонецЕсли;
		
		Иначе
			
			УстановитьВидимостьТабличныхЧастей();
			Если ЗаполненаТабличнаяЧасть("Товары") Тогда
				ОчиститьТабличнуюЧасть("Товары");
			КонецЕсли;
			Если ЗаполненаТабличнаяЧасть("ОсновныеСредства") Тогда
				ОчиститьТабличнуюЧасть("ОсновныеСредства");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОчиститьТабличнуюЧасть(ИмяТабличнойЧасти)
	
	Объект[ИмяТабличнойЧасти].Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		НоваяСтрока = Объект.ТМЦВЭксплуатации.Добавить();
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
		Иначе
			НоваяСтрока.Партия = ЭлементМассива;
		КонецЕсли;
	КонецЦикла;

	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);

	ЗаполнитьСлужебныеРеквизитыТЧ();
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТЧ()

	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);

	ТМЦВЭксплуатацииСервер.ЗаполнитьСлужебныеРеквизитыПоПартииТМЦ(Объект.Товары);
	
КонецПроцедуры

//-- НЕ УТ

&НаКлиенте
Процедура СформироватьВедомость(Команда)
	
	Отбор = Новый Структура;
    Отбор.Вставить("Организация", Объект.Организация);  
	ПериодОтчета = Новый СтандартныйПериод();
	ПериодОтчета.ДатаНачала = НачалоДня(Объект.Дата);
	ПериодОтчета.ДатаОкончания = КонецДня(Объект.Дата);
 	Отбор.Вставить("Период", ПериодОтчета);	
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии, КлючВарианта", Отбор, Истина, "Основной");	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.СформироватьВедомость(ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти