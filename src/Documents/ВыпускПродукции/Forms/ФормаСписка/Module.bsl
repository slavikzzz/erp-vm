
//++ Устарело_Производство21
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТКА
	Если Параметры.Свойство("ОтборПоСпискуЗаказов") Тогда
		ОтборПоСпискуЗаказов(Параметры.ОтборПоСпискуЗаказов);
	ИначеЕсли Параметры.Свойство("ОтборПоСпискуПродукции") Тогда
		ОтборПоСпискуПродукции(Параметры.ОтборПоСпискуПродукции);
	ИначеЕсли Параметры.Свойство("ОтборПоСпискуЭтаповГрафика") Тогда
		ОтборПоСпискуЭтаповГрафика(Параметры.ОтборПоСпискуЭтаповГрафика);
	ИначеЕсли Параметры.Свойство("ОтборПоСпискуЭтапов") Тогда
		ОтборПоСпискуЭтапов(Параметры.ОтборПоСпискуЭтапов);
	КонецЕсли; 
	//-- НЕ УТКА
	
	Если НЕ ПолучитьФункциональнуюОпцию("УправлениеПредприятием") Тогда
		Элементы.Выпуск.Видимость = Ложь;
	КонецЕсли; 
	
	ПриИзмененииНаправленияВыпуска();
	УстановитьСвойстваДинамическогоСпискаСписок();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокКоманднаяПанель);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	

	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);

	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("НеЗагружатьОтборы") Тогда
		Настройки.Удалить("ОтборНаправлениеВыпуска");
		Настройки.Удалить("ОтборПодразделениеОтправитель");
		Настройки.Удалить("ОтборПодразделениеПолучатель");
		Настройки.Удалить("ОтборСклад");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПриИзмененииНаправленияВыпуска();
	УстановитьСвойстваДинамическогоСпискаСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВыпускПродукции" Тогда
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПодразделениеОтправительПриИзменении(Элемент)
	
	УстановитьСвойстваДинамическогоСпискаСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	
	УстановитьСвойстваДинамическогоСпискаСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПолучательПриИзменении(Элемент)
	
	УстановитьСвойстваДинамическогоСпискаСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаправлениеВыпускаПриИзменении(Элемент)
	
	УстановитьОтборПоНаправлениюВыпуска();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	ОбеспечениеВДокументахКлиент.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборПоНаправлениюВыпуска()
	
	ПриИзмененииНаправленияВыпуска();
	УстановитьСвойстваДинамическогоСпискаСписок();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНаправленияВыпуска()
	
	ОтборСклад = Справочники.Склады.ПустаяСсылка();
	ОтборПодразделениеПолучатель = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	Элементы.ОтборСклад.Видимость = Ложь;
	Элементы.ОтборПодразделениеПолучатель.Видимость = Ложь;
	
	Если ОтборНаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад Тогда
		Элементы.ОтборСклад.Видимость = Истина;
	ИначеЕсли ОтборНаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение Тогда
		Элементы.ОтборПодразделениеПолучатель.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваДинамическогоСпискаСписок()
	
	// Определение текста запроса.
	ЕстьОтборПоСкладу = ЗначениеЗаполнено(ОтборСклад);
	ЕстьОтборПоПодразделениюПолучателю = ЗначениеЗаполнено(ОтборПодразделениеПолучатель);
	
	ТекстЗапроса = "";
	ОтборПоРеквизитуТЧ = Неопределено;
	Если ЕстьОтборПоСкладу Или ЕстьОтборПоПодразделениюПолучателю Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ВыпускПродукцииПереопределяемый.Ссылка                  КАК Ссылка,
			|	ВыпускПродукцииПереопределяемый.ПометкаУдаления         КАК ПометкаУдаления,
			|	ВыпускПродукцииПереопределяемый.Номер                   КАК Номер,
			|	ВыпускПродукцииПереопределяемый.Дата                    КАК Дата,
			|	ВыпускПродукцииПереопределяемый.Проведен                КАК Проведен,
			|	ВыпускПродукцииПереопределяемый.Организация             КАК Организация,
			|	ВыпускПродукцииПереопределяемый.Распоряжение            КАК Распоряжение,
			|	ВыпускПродукцииПереопределяемый.Подразделение           КАК Подразделение,
			|	ВыпускПродукцииПереопределяемый.ВидЦены                 КАК ВидЦены,
			|	ВыпускПродукцииПереопределяемый.Ответственный           КАК Ответственный,
			|	ВыпускПродукцииПереопределяемый.Комментарий             КАК Комментарий,
			|	ВыпускПродукцииПереопределяемый.ВыпускПоРаспоряжениям   КАК ВыпускПоРаспоряжениям,
			|	
			|	ВЫБОР КОГДА ВыпускПродукцииПереопределяемый.ВыпускПоРаспоряжениям ТОГДА
			|				ВЫРАЗИТЬ(&ТекстПоРаспоряжению КАК СТРОКА(100))
			|			ИНАЧЕ
			|				ВЫРАЗИТЬ(&ТекстБезРаспоряжения КАК СТРОКА(100))
			|		КОНЕЦ КАК Выпуск,
			|		
			|	ВЫБОР КОГДА ВыпускПродукцииПереопределяемый.НаправлениеВыпуска = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад) ТОГДА
			|				ВЫРАЗИТЬ(&ВыпускПродукцииНаСклад КАК СТРОКА(100))
			|			ИНАЧЕ
			|				ВЫРАЗИТЬ(&ВыпускПродукцииВПодразделение КАК СТРОКА(100))
			|		КОНЕЦ КАК НаправлениеВыпуска
			|ИЗ
			|	Документ.ВыпускПродукции КАК ВыпускПродукцииПереопределяемый
			|ГДЕ
			|	&ПодстановкаОтборПоШапке
			|		И ИСТИНА В(
			|			ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				Документ.ВыпускПродукции.Товары КАК Товары
			|			ГДЕ
			|				Товары.Ссылка = ВыпускПродукцииПереопределяемый.Ссылка
			|				И &ПодстановкаОтборПоТЧ = &ОтборПоРеквизитуТЧ)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПодстановкаОтборПоТЧ", "Товары." + ?(ЕстьОтборПоСкладу, "Склад", "Подразделение"));
		ОтборПоРеквизитуТЧ = ?(ЕстьОтборПоСкладу, ОтборСклад, ОтборПодразделениеПолучатель);
		
	Иначе
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ВыпускПродукцииПереопределяемый.Ссылка                  КАК Ссылка,
			|	ВыпускПродукцииПереопределяемый.ПометкаУдаления         КАК ПометкаУдаления,
			|	ВыпускПродукцииПереопределяемый.Номер                   КАК Номер,
			|	ВыпускПродукцииПереопределяемый.Дата                    КАК Дата,
			|	ВыпускПродукцииПереопределяемый.Проведен                КАК Проведен,
			|	ВыпускПродукцииПереопределяемый.Организация             КАК Организация,
			|	ВыпускПродукцииПереопределяемый.Распоряжение            КАК Распоряжение,
			|	ВыпускПродукцииПереопределяемый.Подразделение           КАК Подразделение,
			|	ВыпускПродукцииПереопределяемый.ВидЦены                 КАК ВидЦены,
			|	ВыпускПродукцииПереопределяемый.Ответственный           КАК Ответственный,
			|	ВыпускПродукцииПереопределяемый.Комментарий             КАК Комментарий,
			|	ВыпускПродукцииПереопределяемый.ВыпускПоРаспоряжениям   КАК ВыпускПоРаспоряжениям,
			|	
			|	ВЫБОР КОГДА ВыпускПродукцииПереопределяемый.ВыпускПоРаспоряжениям ТОГДА
			|				ВЫРАЗИТЬ(&ТекстПоРаспоряжению КАК СТРОКА(100))
			|			ИНАЧЕ
			|				ВЫРАЗИТЬ(&ТекстБезРаспоряжения КАК СТРОКА(100))
			|		КОНЕЦ КАК Выпуск,
			|		
			|	ВЫБОР КОГДА ВыпускПродукцииПереопределяемый.НаправлениеВыпуска = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад) ТОГДА
			|				ВЫРАЗИТЬ(&ВыпускПродукцииНаСклад КАК СТРОКА(100))
			|			ИНАЧЕ
			|				ВЫРАЗИТЬ(&ВыпускПродукцииВПодразделение КАК СТРОКА(100))
			|		КОНЕЦ КАК НаправлениеВыпуска
			|ИЗ
			|	Документ.ВыпускПродукции КАК ВыпускПродукцииПереопределяемый
			|ГДЕ
			|	&ПодстановкаОтборПоШапке";
		
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура();
	
	ОтборыПоШапкеТекст = Новый Массив();
	Если ИспользуетсяОтборПоСпискуДокументов Тогда
		ОтборыПоШапкеТекст.Добавить("ВыпускПродукцииПереопределяемый.Ссылка В (&Ссылки)");
		ПараметрыЗапроса.Вставить("Ссылки", СписокДокументов.ВыгрузитьЗначения());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПодразделениеОтправитель) Тогда
		ОтборыПоШапкеТекст.Добавить("ВыпускПродукцииПереопределяемый.Подразделение = &ОтборПодразделение");
		ПараметрыЗапроса.Вставить("ОтборПодразделение", ОтборПодразделениеОтправитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНаправлениеВыпуска) Тогда
		ОтборыПоШапкеТекст.Добавить("ВыпускПродукцииПереопределяемый.НаправлениеВыпуска = &ОтборНаправлениеВыпуска");
		ПараметрыЗапроса.Вставить("ОтборНаправлениеВыпуска", ОтборНаправлениеВыпуска);
	КонецЕсли;
	
	Если ОтборыПоШапкеТекст.Количество() = 0 Тогда
		ОтборыПоШапкеТекст.Добавить("ИСТИНА");
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОтборПоРеквизитуТЧ", ОтборПоРеквизитуТЧ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПодстановкаОтборПоШапке", СтрСоединить(ОтборыПоШапкеТекст, " И "));
	
	// Установка параметров динамического списка.
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = "Документ.ВыпускПродукции";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	Для Каждого Элемент Из ПараметрыЗапроса Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекстПоРаспоряжению",           НСтр("ru = 'По заказу';
																													|en = 'Against order'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекстБезРаспоряжения",          НСтр("ru = 'Без заказа';
																													|en = 'Without order'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ВыпускПродукцииНаСклад",        НСтр("ru = 'На склад';
																													|en = 'To warehouse'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ВыпускПродукцииВПодразделение", НСтр("ru = 'В подразделение';
																													|en = 'To business unit'"));
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура ОтборПоСпискуЗаказов(СписокЗаказов)
	
	ИспользуетсяОтборПоСпискуДокументов = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВыпускПродукцииТовары.Ссылка
	|ИЗ
	|	Документ.ВыпускПродукции.Товары КАК ВыпускПродукцииТовары
	|ГДЕ
	|	ВыпускПродукцииТовары.Распоряжение.Распоряжение В(&СписокЗаказов)";
	
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	
	СписокДокументов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Заголовок = НСтр("ru = 'Выпуск продукции и выполнение работ (установлен отбор по заказам)';
					|en = 'Product release and work performance (filter by orders is set)'");
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоСпискуПродукции(СписокПродукции)

	ИспользуетсяОтборПоСпискуДокументов = Истина;
	ТаблицаПродукции = Новый ТаблицаЗначений;
	ТаблицаПродукции.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаПродукции.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	Для каждого ДанныеПродукции Из СписокПродукции Цикл
		СтрокаПродукции = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПродукции, ДанныеПродукции);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ КАК Заказ,
	|	ТаблицаПродукции.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ТаблицаПродукции
	|ИЗ
	|	&ТаблицаПродукции КАК ТаблицаПродукции
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВыпускПродукцииТовары.Ссылка
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ПО (МаршрутныйЛистПроизводства.Распоряжение = ТаблицаПродукции.Заказ)
	|			И (МаршрутныйЛистПроизводства.КодСтроки = ТаблицаПродукции.КодСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыпускПродукции.Товары КАК ВыпускПродукцииТовары
	|		ПО (ВыпускПродукцииТовары.Распоряжение = МаршрутныйЛистПроизводства.Ссылка)";
	
	Запрос.УстановитьПараметр("ТаблицаПродукции", ТаблицаПродукции);
	
	СписокДокументов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", СписокДокументов);

	Заголовок = НСтр("ru = 'Выпуск продукции и выполнение работ (установлен отбор по продукции)';
					|en = 'Product release and work performance (filter by products is set)'");
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоСпискуЭтаповГрафика(СписокЭтапов)

	ИспользуетсяОтборПоСпискуДокументов = Истина;
	ТаблицаЭтапов = Новый ТаблицаЗначений;
	ТаблицаЭтапов.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаЭтапов.Колонки.Добавить("КодСтрокиПродукция", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЭтапов.Колонки.Добавить("КодСтрокиЭтапыГрафик", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	Для каждого ДанныеЭтапа Из СписокЭтапов Цикл
		СтрокаЭтап = ТаблицаЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭтап, ДанныеЭтапа);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЭтапов.Заказ КАК Заказ,
	|	ТаблицаЭтапов.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ТаблицаЭтапов.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
	|ПОМЕСТИТЬ ТаблицаЭтапов
	|ИЗ
	|	&ТаблицаЭтапов КАК ТаблицаЭтапов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВыпускПродукцииТовары.Ссылка
	|ИЗ
	|	ТаблицаЭтапов КАК ТаблицаЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ПО (МаршрутныйЛистПроизводства.Распоряжение = ТаблицаЭтапов.Заказ)
	|			И (МаршрутныйЛистПроизводства.КодСтроки = ТаблицаЭтапов.КодСтрокиПродукция)
	|			И (МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик = ТаблицаЭтапов.КодСтрокиЭтапыГрафик)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыпускПродукции.Товары КАК ВыпускПродукцииТовары
	|		ПО (ВыпускПродукцииТовары.Распоряжение = МаршрутныйЛистПроизводства.Ссылка)";
	
	Запрос.УстановитьПараметр("ТаблицаЭтапов", ТаблицаЭтапов);
	
	СписокДокументов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", СписокДокументов);

	Заголовок = НСтр("ru = 'Выпуск продукции и выполнение работ (установлен отбор по этапам)';
					|en = 'Product release and work performance (filter by stages is set)'");
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоСпискуЭтапов(СписокЭтапов)
	
	ИспользуетсяОтборПоСпискуДокументов = Истина;
	ТаблицаЭтапов = Новый ТаблицаЗначений;
	ТаблицаЭтапов.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаЭтапов.Колонки.Добавить("КодСтрокиПродукция", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЭтапов.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	Для каждого ДанныеЭтапа Из СписокЭтапов Цикл
		СтрокаЭтап = ТаблицаЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭтап, ДанныеЭтапа);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЭтапов.Заказ КАК Заказ,
	|	ТаблицаЭтапов.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ТаблицаЭтапов.Этап КАК Этап
	|ПОМЕСТИТЬ ТаблицаЭтапов
	|ИЗ
	|	&ТаблицаЭтапов КАК ТаблицаЭтапов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	КодСтрокиПродукция,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВыпускПродукцииТовары.Ссылка
	|ИЗ
	|	ТаблицаЭтапов КАК ТаблицаЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ПО (МаршрутныйЛистПроизводства.Распоряжение = ТаблицаЭтапов.Заказ)
	|			И (МаршрутныйЛистПроизводства.КодСтроки = ТаблицаЭтапов.КодСтрокиПродукция)
	|			И (МаршрутныйЛистПроизводства.Этап = ТаблицаЭтапов.Этап)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыпускПродукции.Товары КАК ВыпускПродукцииТовары
	|		ПО (ВыпускПродукцииТовары.Распоряжение = МаршрутныйЛистПроизводства.Ссылка)";
	
	Запрос.УстановитьПараметр("ТаблицаЭтапов", ТаблицаЭтапов);
	
	СписокДокументов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", СписокДокументов);
	
	Заголовок = НСтр("ru = 'Выпуск продукции и выполнение работ (установлен отбор по этапам)';
					|en = 'Product release and work performance (filter by stages is set)'");
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти
//-- Устарело_Производство21