#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ИдентификаторСтрокиЗатрат", ИдентификаторСтрокиЗатрат);
	
	Параметры.Свойство("Организация",			Организация);
	Параметры.Свойство("ПериодРегистрации",		ПериодРегистрации);
	
	Параметры.Свойство("Сотрудник", 	Сотрудник);
	Параметры.Свойство("Подразделение", Подразделение);
	Параметры.Свойство("Начисление", 	Начисление);
	
	ПереносыСтрокиЗатрат = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилищеПереносовСтрокиЗатрат);
	
	ЗаполнитьЗначенияСвойств(Затраты.Добавить(), ПереносыСтрокиЗатрат.Затраты[0]);
	Переносы.Загрузить(ПереносыСтрокиЗатрат.Переносы);
	
	НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
	ВидыОперацийПоЗарплатеБезСпособаОтражения = ОтражениеЗарплатыВБухучетеРасширенный.ВидыОперацийПоЗарплатеБезСпособаОтражения();
	СпособОтраженияДоступен = ВидыОперацийПоЗарплатеБезСпособаОтражения.Найти(НачислениеУдержаниеВидОперации[Начисление]) = Неопределено;
	
	Элементы.ПереносыСпособОтраженияЗарплатыВБухучете.Видимость = СпособОтраженияДоступен;
	Элементы.ЗатратыСпособОтраженияЗарплатыВБухучете.Видимость  = СпособОтраженияДоступен;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РассчитатьИтоги()
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОбязательныеПоляПереносов = Новый Соответствие;
	Если СпособОтраженияДоступен Тогда
		ОбязательныеПоляПереносов.Вставить("СпособОтраженияЗарплатыВБухучете",  НСтр("ru = 'Не указан способ отражения';
																					|en = 'Record method is not specified'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		ОбязательныеПоляПереносов.Вставить("СтатьяРасходов",  НСтр("ru = 'Не указана статья расходов';
																	|en = 'Expense item is not specified'"));
	КонецЕсли;
	ОбязательныеПоляПереносов.Вставить("СтатьяФинансирования",  НСтр("ru = 'Не указана статья финансирования';
																	|en = 'Financing item is not specified'"));
	
	Для ИндексСтроки = 0 По Переносы.Количество()-1 Цикл
		Для Каждого ОбязательноеПоле Из ОбязательныеПоляПереносов Цикл
			Если НЕ ЗначениеЗаполнено(Переносы[ИндексСтроки][ОбязательноеПоле.Ключ]) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					ОбязательноеПоле.Значение,, 
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Переносы", ИндексСтроки + 1, ОбязательноеПоле.Ключ),,
					Отказ);
			КонецЕсли;
		КонецЦикла	
	КонецЦикла;
	
	СуммаБыло 	   = Затраты[0].Сумма;
	СуммаПереносим = Переносы.Итог("Сумма");
	СуммаБыло = ?(СуммаБыло>0,СуммаБыло,-СуммаБыло);
	СуммаПереносим = ?(СуммаПереносим>0,СуммаПереносим,-СуммаПереносим);
	
	Если СуммаПереносим > СуммаБыло Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Сумма перенесенных затрат больше исходных';
				|en = 'Amount of transferred expenses is greater than initial expenses'"));
		Отказ = Истина
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПереносы

&НаКлиенте
Процедура ПереносыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.ИдентификаторСтрокиЗатрат		= ИдентификаторСтрокиЗатрат;
		Элемент.ТекущиеДанные.ИдентификаторСтрокиПереноса	= Новый УникальныйИдентификатор;
		
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, Затраты[0], "СпособОтраженияЗарплатыВБухучете, СтатьяРасходов");
		Элемент.ТекущиеДанные.Сумма = Затраты[0].Сумма - ПереносыИтого;
		
		Элемент.ТекущийЭлемент = Элементы.ПереносыСтатьяФинансирования
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереносыПриИзменении(Элемент)
	РассчитатьИтоги();
	Элементы.Переносы.ОтметкаНезаполненного = Затраты[0].Сумма <> (ЗатратыСтало + ЗатратыПеренесено)
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ВыбратьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РассчитатьИтоги()
	
	ПереносыИтого = Переносы.Итог("Сумма");
	
	ЗатратыПеренесено = ПереносыИтого;
	Для Каждого Перенос Из Переносы.НайтиСтроки(Новый Структура("СтатьяФинансирования", Затраты[0].СтатьяФинансирования)) Цикл
		ЗатратыПеренесено = ЗатратыПеренесено - Перенос.Сумма;
	КонецЦикла; 
	
	ЗатратыСтало = Затраты[0].Сумма - ЗатратыПеренесено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПроверитьЗаполнение() Тогда
		
		РезультатыРедактирования = Новый Структура;
		РезультатыРедактирования.Вставить("Модифицированность", Модифицированность);
		РезультатыРедактирования.Вставить("ИдентификаторСтрокиЗатрат", ИдентификаторСтрокиЗатрат);
		РезультатыРедактирования.Вставить("АдресВХранилищеПереносовСтрокиЗатрат", АдресВХранилищеПереносовСтрокиЗатрат());
		
		Модифицированность = Ложь;
		Закрыть(РезультатыРедактирования)
		
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция АдресВХранилищеПереносовСтрокиЗатрат()
	Возврат ПоместитьВоВременноеХранилище(Переносы.Выгрузить(), УникальныйИдентификатор);
КонецФункции	

#КонецОбласти
