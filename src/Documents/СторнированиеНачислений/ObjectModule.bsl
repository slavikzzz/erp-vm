#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Сторнировать" Тогда
		ЗаполнитьПоСторнируемомуДокументу(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("СторнируемыйДокумент", СторнируемыйДокумент);
	Документы.СторнированиеНачислений.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.ЗаполнитьИсходныйДокумент(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("Сторнирование", Истина);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РасчетЗарплатыРасширенный.ЗаполнитьИсходныйДокументПриКопировании(ЭтотОбъект, ОбъектКопирования.Ссылка);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьДокументОснование(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПериодДействияНачислений(Отказ);
	
	ПараметрыСторнируемого = Документы.СторнированиеНачислений.ПараметрыСторнируемогоДокумента(СторнируемыйДокумент);
	
	Если ПараметрыСторнируемого.ПериодРегистрации = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ИсправлениеДокументовЗарплатаКадры.ВозможноИсправлениеТекущимПериодом(СторнируемыйДокумент) Тогда
		Если ПараметрыСторнируемого.ПериодРегистрации > ПериодРегистрации Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Месяц сторнирования должен быть больше или равен месяцу сторнируемого документа (%1)';
					|en = 'The reversal month must be later or equal to the reversed document month (%1)'"),
				Формат(ПараметрыСторнируемого.ПериодРегистрации, НСтр("ru = 'ДФ=''ММММ гггг ""г.""''';
																		|en = 'DF=''MMMM yyyy'''")));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ПериодРегистрации",, Отказ);
		КонецЕсли;
	Иначе
		Если ПараметрыСторнируемого.ПериодРегистрации >= ПериодРегистрации Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Месяц сторнирования должен быть больше месяца сторнируемого документа (%1)';
					|en = 'The reversal month must be later than the reversed document month (%1)'"),
				Формат(ПараметрыСторнируемого.ПериодРегистрации, НСтр("ru = 'ДФ=''ММММ гггг ""г.""''';
																		|en = 'DF=''MMMM yyyy'''")));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ПериодРегистрации",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыСторнируемого.РаспределениеНачисленийВТаблицах Тогда
		// Проверка корректности распределения по источникам финансирования
		ИменаТаблицРаспределяемыхПоСтатьямФинансирования = "ДоначисленияИПерерасчеты,Сторнировано";
		ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержанийОбъекта(
			ЭтотОбъект, ИменаТаблицРаспределяемыхПоСтатьямФинансирования, Отказ);
		
		// Проверка корректности распределения по территориям и условиям труда
		ИменаТаблицРаспределенияПоТерриториямУсловиямТруда = "ДоначисленияИПерерасчеты";
		РасчетЗарплатыРасширенный.ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(
			ЭтотОбъект, ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьПериодДействияНачислений(Отказ)
	
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("ДоначисленияИПерерасчеты", НСтр("ru = 'Доначисления и перерасчеты';
																																		|en = 'Additional accruals and recalculations'")));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ЭтотОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьПоСторнируемомуДокументу(ДанныеЗаполнения)
	
	Сторнировано.Очистить();
	ДоначисленияИПерерасчеты.Очистить();
	Показатели.Очистить();
	РаспределениеРезультатовНачислений.Очистить();
	РаспределениеПоТерриториямУсловиямТруда.Очистить();
	
	СторнируемыйДокумент = ДанныеЗаполнения.Ссылка;
	ПараметрыСторнируемого = Документы.СторнированиеНачислений.ПараметрыСторнируемогоДокумента(СторнируемыйДокумент);
	ВидРасчетаВШапке = ПараметрыСторнируемого.НачислениеДокумента <> Неопределено;
	
	Организация = ПараметрыСторнируемого.Организация; // В реквизит документа.
	
	Если ДанныеЗаполнения.Свойство("Период") Тогда
		ПериодРегистрации = ДанныеЗаполнения.Период;
	ИначеЕсли ДанныеЗаполнения.Свойство("ДопустимоИсправлениеВТекущемПериоде") И ДанныеЗаполнения.ДопустимоИсправлениеВТекущемПериоде Тогда
		ПериодРегистрации = ДанныеЗаполнения.ПериодРегистрацииИсправленногоДокумента;
	Иначе
		ЗаполняемыеЗначения = Новый Структура("Месяц");
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения);
		ПериодРегистрации = Макс(ЗаполняемыеЗначения.Месяц, ДобавитьМесяц(ПараметрыСторнируемого.ПериодРегистрации, 1));
		ДоначислитьЗарплатуПриНеобходимости = Истина;
	КонецЕсли;
	
	ДоначислитьЗарплатуПриНеобходимости = ДоначислитьЗарплатуПриНеобходимости И (ПараметрыСторнируемого.ПериодРегистрации < ПериодРегистрации);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТДокументыСторнируемыхНачислений(СторнируемыйДокумент, МенеджерВременныхТаблиц);
	
	Данные = ДанныеСторнируемыхНачислений(СторнируемыйДокумент, МенеджерВременныхТаблиц, ПараметрыСторнируемого);
	
	ВременныйРегистраторПерерасчета = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	
	НачисленияЗаднимЧислом = ИсправлениеДокументовРасчетЗарплаты.ПустаяТаблицаНачисленийЗаднимЧислом();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВременныйРегистраторПерерасчета", ВременныйРегистраторПерерасчета);
	ДополнительныеПараметры.Вставить("УчитыватьСуммуВычета", Ложь);
	ДополнительныеПараметры.Вставить("УчитыватьСкидкуПоВзносам", Ложь);
	ДополнительныеПараметры.Вставить("РаспределениеРезультатов");
	ДополнительныеПараметры.Вставить("РаспределениеПоТерриториям");
	ДополнительныеПараметры.Вставить("ПоляОтбора");
	
	Если Данные.Свойство("НачисленийСторнируемого") Тогда
		// Заполним сторнируемые начисления, по сторнируемому документу.
		ДополнительныеПараметры.УчитыватьСуммуВычета       = Данные.НачисленийСторнируемого.Колонки.Найти("СуммаВычета") <> Неопределено;
		ДополнительныеПараметры.УчитыватьСкидкуПоВзносам   = Данные.НачисленийСторнируемого.Колонки.Найти("СкидкаПоВзносам") <> Неопределено;
		ДополнительныеПараметры.РаспределениеРезультатов   = Данные.РаспределениеРезультатовСторнируемого;
		ДополнительныеПараметры.РаспределениеПоТерриториям = Данные.РаспределениеПоТерриториямСторнируемого;
		ДополнительныеПараметры.ПоляОтбора = "ИдентификаторСтроки";
		
		ВыборкаНачислений = Данные.НачисленийСторнируемого.Выбрать();
		Пока ВыборкаНачислений.Следующий() Цикл
			ДополнитьСторнируемыеНачисления(ВыборкаНачислений, НачисленияЗаднимЧислом, ПараметрыСторнируемого, ДополнительныеПараметры);
		КонецЦикла;
	КонецЕсли;

	// Заполним сторнируемые начисления, по документам "на основании" сторнируемого документа.
	ДополнительныеПараметры.РаспределениеРезультатов   = Данные.РаспределениеРезультатовНаОсновании;
	ДополнительныеПараметры.РаспределениеПоТерриториям = Данные.РаспределениеПоТерриториямНаОсновании;
	ДополнительныеПараметры.ПоляОтбора = "ИдентификаторСтроки,Ссылка";
	ВыборкаНачислений = Данные.НачисленийДокументовНаОсновании.Выбрать();
	Пока ВыборкаНачислений.СледующийПоЗначениюПоля("Ссылка") Цикл
		Пока ВыборкаНачислений.Следующий() Цикл
			ДополнитьСторнируемыеНачисления(ВыборкаНачислений, НачисленияЗаднимЧислом, ПараметрыСторнируемого, ДополнительныеПараметры);
		КонецЦикла;
	КонецЦикла;
	
	Если Не ПараметрыСторнируемого.НачисленияСДатойНачала Тогда
		ЗарплатаКадрыРасширенный.СкорректироватьДатыНачисленийБезПериодаДействия(Сторнировано, ПараметрыСторнируемого.ПериодРегистрации);
	КонецЕсли;
	
	НаборыДляВременнойЗаписи = Новый Массив();
	
	НачатьТранзакцию();
	
	Если ПараметрыСторнируемого.НачисленияСДатойНачала
		И (ДоначислитьЗарплатуПриНеобходимости Или ПараметрыСторнируемого.ВыполнилДоначисление)
		И (Не ВидРасчетаВШапке Или ПараметрыСторнируемого.ЗачетНормыВремени) Тогда
		
		НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременныйРегистраторПерерасчета);
		НаборыДляВременнойЗаписи.Добавить(НаборыЗаписей.Начисления);
		НаборыДляВременнойЗаписи.Добавить(НаборыЗаписей.ЗначенияПоказателейНачислений);		
		
		Данные = ДанныеДляВыявленияПлановыхНачислений(СторнируемыйДокумент, МенеджерВременныхТаблиц, ПараметрыСторнируемого);
		
		ИдентификаторСтрокиДоначисления = ЗарплатаКадрыРасширенный.МаксимальныйИдентификаторСтроки(
			Сторнировано, "ИдентификаторСтрокиВидаРасчета") + 1;
		
		Для Каждого ИсправляемыйПериод Из Данные.ИсправляемыеПериодыСотрудников Цикл
			
			НачалоСтарогоПериода = ИсправляемыйПериод.ДатаНачала;
			
			Если ИсправляемыйПериод.ДатаНачала >= ПериодРегистрации Тогда
				ОкончаниеСтарогоПериода = ИсправляемыйПериод.ДатаОкончания;
			Иначе
				ОкончаниеСтарогоПериода = Мин(ИсправляемыйПериод.ДатаОкончания, ПериодРегистрации - 1);
			КонецЕсли;
			
			// Получим данные плановых начислений за исправляемый период.
			МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ПериодРегистрации, ИсправляемыйПериод.Организация);
			МенеджерРасчета.ИсключаемыйРегистратор = Ссылка;
			МенеджерРасчета.НастройкиРасчета.ИсключатьРанееОплаченныеПериоды = Ложь;
			ПлановыеНачисления = МенеджерРасчета.НачисленияЗарплатыСотрудникаЗаПериод(ИсправляемыйПериод.Сотрудник, НачалоСтарогоПериода, ОкончаниеСтарогоПериода);
			
			// Добавим во временный набор плановые начисления сторнируемого периода.
			Для Каждого СтрокаНачисления Из ПлановыеНачисления Цикл
				
				Если СтрокаНачисления.ДокументОснование = СторнируемыйДокумент Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаНачисленияЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаНачисленияЗаднимЧислом, СтрокаНачисления);
				НоваяСтрокаНачисленияЗаднимЧислом.ВидРасчета = СтрокаНачисления.Начисление;
				НоваяСтрокаНачисленияЗаднимЧислом.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
				НоваяСтрокаНачисленияЗаднимЧислом.ПериодДействияКонец = СтрокаНачисления.ДатаОкончания;
				
				НоваяСтрокаДоначислений = ДоначисленияИПерерасчеты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДоначислений, СтрокаНачисления);
				НоваяСтрокаДоначислений.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиДоначисления;
				Для Каждого СтрокаПоказателя Из СтрокаНачисления.Показатели Цикл
					НоваяСтрокаПоказателя = Показатели.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателя, СтрокаПоказателя);
					НоваяСтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиДоначисления;
				КонецЦикла;
				ИдентификаторСтрокиДоначисления = ИдентификаторСтрокиДоначисления + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЭтоНовый() Тогда
		НаборыДляВременнойЗаписи.Добавить(РасчетЗарплатыРасширенный.НаборЗаписейНачисления(Ссылка));
	КонецЕсли;
	
	Если НаборыДляВременнойЗаписи.Количество() > 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		Для Каждого Набор Из НаборыДляВременнойЗаписи Цикл
			Набор.Записать();
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ДоначислитьЗарплатуПриНеобходимости Или ПараметрыСторнируемого.ВыполнилДоначисление Тогда
		
		ДанныеПерерасчетов = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
		
		ИсправлениеДокументовРасчетЗарплаты.ЗаполнитьНачисленияПерерасчетПоНачисленияЗаднимЧислом(
			Организация, ПериодРегистрации,	НачисленияЗаднимЧислом,	ДоначисленияИПерерасчеты,
			ВременныйРегистраторПерерасчета, ДанныеПерерасчетов, Показатели);
		
		ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
		ИспользоватьРаспределениеПоТерриториям = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация);
		
		Если ИспользоватьСтатьиФинансирования Или ИспользоватьРаспределениеПоТерриториям Тогда
			Для Каждого Строка Из ДанныеПерерасчетов Цикл
				
				Если ИспользоватьСтатьиФинансирования Тогда
					Для Каждого СтрокаРаспределения Из Строка.РезультатРаспределения Цикл
						НоваяСтрока = РаспределениеРезультатовНачислений.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
						НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтрокиВидаРасчета;
					КонецЦикла;
				КонецЕсли;
				
				Если ИспользоватьРаспределениеПоТерриториям	Тогда
					Для Каждого СтрокаТерритории Из Строка.РаспределениеПоТерриториямУсловиямТруда Цикл
						НоваяСтрока = РаспределениеПоТерриториямУсловиямТруда.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТерритории);
						НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтрокиВидаРасчета;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтменитьТранзакцию();
	
КонецПроцедуры

Процедура СоздатьВТДокументыСторнируемыхНачислений(СторнируемыйДокумент, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Начисления.Регистратор КАК ДокументНачисления
		|ПОМЕСТИТЬ ВТДокументыСторнируемыхНачислений
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ДокументОснование = &СторнируемыйДокумент
		|	И Начисления.Регистратор <> &СторнируемыйДокумент");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СторнируемыйДокумент", СторнируемыйДокумент);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстОбъединитьВсе()
	
	Возврат "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	
КонецФункции
	
Функция ДанныеДляВыявленияПлановыхНачислений(СторнируемыйДокумент, МенеджерВременныхТаблиц, ОписаниеДокумента)
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.ДатаОкончания КАК ДатаОкончания,
		|	Начисления.Ссылка.Организация КАК Организация,
		|	Начисления.Ссылка.МесяцНачисления КАК ПериодРегистрации,
		|	Начисления.Начисление КАК ВидРасчета,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТДокументыСторнируемыхНачислений.ДокументНачисления
		|			ИЗ
		|				ВТДокументыСторнируемыхНачислений)
		|	И Начисления.ДокументОснование = &СторнируемыйДокумент");
	
	Для Каждого ОписаниеТаблицы Из ОписаниеДокумента.ТаблицыНачислений Цикл
		Текст = 
			"ВЫБРАТЬ
			|	Начисления.ДатаНачала КАК ДатаНачала,
			|	ВЫБОР
			|		КОГДА Начисления.ДатаОкончания > НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
			|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ПериодРегистрации, МЕСЯЦ, -1), МЕСЯЦ)
			|		ИНАЧЕ Начисления.ДатаОкончания
			|	КОНЕЦ КАК ДатаОкончания,
			|	Начисления.Ссылка.Организация КАК Организация,
			|	&ПериодРегистрацииСторнируемого КАК ПериодРегистрации,
			|	&ИмяПоляВидРасчета КАК ВидРасчета,
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация
			|ИЗ
			|	&ИмяТабличнойЧастиСторнируемого КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &СторнируемыйДокумент
			|	И Начисления.ДатаНачала < НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)";
		
		Текст = СтрЗаменить(Текст, "&ИмяПоляВидРасчета",
			"Начисления." + СтрЗаменить(ОписаниеТаблицы.ИмяПоляВидРасчета, "Объект.", "Ссылка."));
		Текст = СтрЗаменить(Текст, "&ИмяТабличнойЧастиСторнируемого",
			ОписаниеДокумента.ПолноеИмя + "." + ОписаниеТаблицы.ИмяТаблицы);
		ЧастиЗапроса.Добавить(Текст);
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МИНИМУМ(Начисления.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(Начисления.ДатаОкончания) КАК ДатаОкончания,
		|	Начисления.Организация КАК Организация,
		|	Начисления.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
		|	Начисления.Сотрудник КАК Сотрудник
		|ИЗ
		|	#НачисленияТабличныхЧастей КАК Начисления
		|ГДЕ
		|	Начисления.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Организация,
		|	Начисления.ГоловнаяОрганизация,
		|	Начисления.ПериодРегистрации,
		|	Начисления.Сотрудник";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"#НачисленияТабличныхЧастей",
		"(" + СтрСоединить(ЧастиЗапроса, ТекстОбъединитьВсе()) + ")");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СторнируемыйДокумент", СторнируемыйДокумент);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодРегистрацииСторнируемого", ОписаниеДокумента.ПериодРегистрации);
	
	Результат = Новый Структура;
	Результат.Вставить("ИсправляемыеПериодыСотрудников", Запрос.Выполнить().Выгрузить());
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеСторнируемыхНачислений(СторнируемыйДокумент, МенеджерВременныхТаблиц, ОписаниеДокумента)
	
	ОписаниеТаблицы = ИсправлениеДокументовЗарплатаКадры.НовыйОписаниеТаблицыНачислений();
	ОписаниеТаблицы.ИмяТаблицы = "Начисления";
	ОписаниеТаблицы.ИмяПоляВидРасчета = "Начисление";
	
	ИспользуемыеРеквизитыНачислений = РеквизитыТабличнойЧастиСторнировано();
	ИменаРеквизитов = ПриведенныеИменаРеквизитовТабличнойЧасти(
		"Документ.НачислениеЗарплаты", ОписаниеТаблицы, ИспользуемыеРеквизитыНачислений);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(
		"ВЫБРАТЬ
		|	" + ИменаРеквизитов + "
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТДокументыСторнируемыхНачислений.ДокументНачисления
		|			ИЗ
		|				ВТДокументыСторнируемыхНачислений)
		|	И НачислениеЗарплаты.ДокументОснование = &СторнируемыйДокумент");
	
	ЧастиЗапроса.Добавить(
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Документ.НачислениеЗарплаты.РаспределениеРезультатовНачислений КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТДокументыСторнируемыхНачислений.ДокументНачисления
		|			ИЗ
		|				ВТДокументыСторнируемыхНачислений)");
	
	ЧастиЗапроса.Добавить(
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Документ.НачислениеЗарплаты.РаспределениеПоТерриториямУсловиямТруда КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТДокументыСторнируемыхНачислений.ДокументНачисления
		|			ИЗ
		|				ВТДокументыСторнируемыхНачислений)");
	
	СторнироватьПоТабличнымЧастям = ОписаниеДокумента.ТаблицыНачислений.Количество() > 0 И ОписаниеДокумента.ДокументРассчитан <> Ложь;
	
	Если СторнироватьПоТабличнымЧастям Тогда
		
		ИспользоватьПсевдонимы = Истина;
		ЧастиПодзапроса = Новый Массив;
		Для Каждого ОписаниеТаблицы Из ОписаниеДокумента.ТаблицыНачислений Цикл
			ИменаРеквизитов = ПриведенныеИменаРеквизитовТабличнойЧасти(
				ОписаниеДокумента.ПолноеИмя, ОписаниеТаблицы, ИспользуемыеРеквизитыНачислений, ИспользоватьПсевдонимы);
				
			ЧастиПодзапроса.Добавить(
				"ВЫБРАТЬ
				|	" + ИменаРеквизитов + "
				|ИЗ
				|	" + ОписаниеДокумента.ПолноеИмя + "." + ОписаниеТаблицы.ИмяТаблицы + " КАК Начисления
				|ГДЕ
				|	Начисления.Ссылка = &СторнируемыйДокумент");
			ИспользоватьПсевдонимы = Ложь;
		КонецЦикла;
		
		ЧастиЗапроса.Добавить(СтрСоединить(ЧастиПодзапроса, ТекстОбъединитьВсе()));
		
		Если ОписаниеДокумента.РаспределениеНачисленийВТаблицах Тогда
			ЧастиЗапроса.Добавить(
				"ВЫБРАТЬ
				|	*
				|ИЗ
				|	" + ОписаниеДокумента.ПолноеИмя + ".РаспределениеРезультатовНачислений КАК РаспределениеРезультатов
				|ГДЕ
				|	РаспределениеРезультатов.Ссылка = &СторнируемыйДокумент");
				
			ЧастиЗапроса.Добавить(
				"ВЫБРАТЬ
				|	*
				|ИЗ
				|	" + ОписаниеДокумента.ПолноеИмя + ".РаспределениеПоТерриториямУсловиямТруда КАК РаспределениеПоТерриториям
				|ГДЕ
				|	РаспределениеПоТерриториям.Ссылка = &СторнируемыйДокумент");
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрСоединить(ЧастиЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СторнируемыйДокумент", СторнируемыйДокумент);
	Результаты = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("НачисленийДокументовНаОсновании",       Результаты[0]);
	Результат.Вставить("РаспределениеРезультатовНаОсновании",   Результаты[1].Выгрузить());
	Результат.Вставить("РаспределениеПоТерриториямНаОсновании", Результаты[2].Выгрузить());

	Если СторнироватьПоТабличнымЧастям Тогда
		Результат.Вставить("НачисленийСторнируемого",                 Результаты[3]);
		Результат.Вставить("РаспределениеРезультатовСторнируемого",   Неопределено);
		Результат.Вставить("РаспределениеПоТерриториямСторнируемого", Неопределено);
		Если ОписаниеДокумента.РаспределениеНачисленийВТаблицах Тогда
			Результат.РаспределениеРезультатовСторнируемого   = Результаты[4].Выгрузить();
			Результат.РаспределениеПоТерриториямСторнируемого = Результаты[5].Выгрузить();
		Иначе
			Попытка
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СторнируемыйДокумент);
				Результат.РаспределениеРезультатовСторнируемого = МенеджерДокумента.ПолучитьРаспределениеНачислений(СторнируемыйДокумент);
			Исключение
			КонецПопытки
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыТабличнойЧастиСторнировано()
	
	Имена = Новый Массив;
	Для Каждого Реквизит Из Метаданные.Документы.СторнированиеНачислений.ТабличныеЧасти.Сторнировано.Реквизиты Цикл
		Имена.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат Имена;
	
КонецФункции

Функция ПриведенныеИменаРеквизитовТабличнойЧасти(ИмяДокумента, ОписаниеТаблицы, ИспользуемыеРеквизиты, ИспользоватьПсевдонимы = Истина)
	
	ИменаРеквизитов = Новый ТаблицаЗначений;
	ИменаРеквизитов.Колонки.Добавить("Имя");
	ИменаРеквизитов.Колонки.Добавить("Счетчик");
	ИменаРеквизитов.Колонки.Добавить("Используемый");
	
	Для Каждого Имя Из ИспользуемыеРеквизиты Цикл
		НоваяСтрока = ИменаРеквизитов.Добавить();
		НоваяСтрока.Имя = Имя;
		НоваяСтрока.Счетчик = 1;
		НоваяСтрока.Используемый = 1;
	КонецЦикла;
	НоваяСтрока = ИменаРеквизитов.Добавить();
	НоваяСтрока.Имя = "Ссылка";
	НоваяСтрока.Счетчик = 2;
	НоваяСтрока.Используемый = 1;
	
	ВидРасчетаДобавлен = Ложь;
	Выражения = Новый Соответствие;
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ИмяДокумента);
	Для Каждого Реквизит Из МетаданныеДокумента.ТабличныеЧасти[ОписаниеТаблицы.ИмяТаблицы].Реквизиты Цикл
		НоваяСтрока = ИменаРеквизитов.Добавить();
		Если Реквизит.Имя = ОписаниеТаблицы.ИмяПоляВидРасчета Тогда
			НоваяСтрока.Имя = "Начисление";
			ВидРасчетаДобавлен = Истина;
			Выражения.Вставить(НоваяСтрока.Имя, ОписаниеТаблицы.ИмяПоляВидРасчета);
		ИначеЕсли Реквизит.Имя = ОписаниеТаблицы.ИмяПоляИдентификаторСтрокиВидаРасчета Тогда
			НоваяСтрока.Имя = "ИдентификаторСтрокиВидаРасчета";
			Выражения.Вставить(НоваяСтрока.Имя, ОписаниеТаблицы.ИмяПоляИдентификаторСтрокиВидаРасчета);
		Иначе
			НоваяСтрока.Имя = Реквизит.Имя;
		КонецЕсли;
		НоваяСтрока.Счетчик = 1;
	КонецЦикла;
	Если Не ВидРасчетаДобавлен Тогда
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ИмяПоляВидРасчета) Тогда
			НоваяСтрока = ИменаРеквизитов.Добавить();
			НоваяСтрока.Имя = "Начисление";
			НоваяСтрока.Счетчик = 1;
			Выражения.Вставить(НоваяСтрока.Имя, СтрЗаменить(ОписаниеТаблицы.ИмяПоляВидРасчета, "Объект.", "Ссылка."));
		ИначеЕсли ЗначениеЗаполнено(ОписаниеТаблицы.ВидРасчетаЗначение) Тогда
			НоваяСтрока = ИменаРеквизитов.Добавить();
			НоваяСтрока.Имя = "Начисление";
			НоваяСтрока.Счетчик = 1;
			Выражения.Вставить(НоваяСтрока.Имя, "ЗНАЧЕНИЕ(" + ОписаниеТаблицы.ВидРасчетаЗначение + ")");
		КонецЕсли;
	КонецЕсли;
	
	ИменаРеквизитов.Свернуть("Имя", "Счетчик,Используемый");
	Строки = ИменаРеквизитов.НайтиСтроки(Новый Структура("Используемый", 1));
	
	ВыбираемыеПоля = Новый Массив;
	Для Каждого Строка Из Строки Цикл
		Псевдоним = ?(ИспользоватьПсевдонимы, " КАК " + Строка.Имя, "");
		Выражение = Выражения[Строка.Имя];
		ИмяПоля = ?(Выражение = Неопределено, Строка.Имя, Выражение);
		ВыбираемыеПоля.Добавить(?(Строка.Счетчик = 2, ИмяПоля, "НЕОПРЕДЕЛЕНО") + Псевдоним);
	КонецЦикла;
	
	Результат = СтрСоединить(ВыбираемыеПоля, "," + Символы.ПС + Символы.Таб);
	Возврат Результат;

КонецФункции

Процедура ДополнитьСторнируемыеНачисления(ВыборкаНачислений, НачисленияЗаднимЧислом, ОписаниеДокумента, ДополнительныеПараметры)
	
	СтрокаСторно = Сторнировано.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаСторно, ВыборкаНачислений);
	СтрокаСторно.Результат = - СтрокаСторно.Результат;
	СтрокаСторно.РезультатФСС = - СтрокаСторно.РезультатФСС;
	Если ДополнительныеПараметры.УчитыватьСуммуВычета Тогда
		СтрокаСторно.СуммаВычета = - СтрокаСторно.СуммаВычета;
	КонецЕсли;
	Если ДополнительныеПараметры.УчитыватьСкидкуПоВзносам Тогда
		СтрокаСторно.СкидкаПоВзносам = - СтрокаСторно.СкидкаПоВзносам;
	КонецЕсли;
	СтрокаСторно.ОтработаноДней = - СтрокаСторно.ОтработаноДней;
	СтрокаСторно.ОтработаноЧасов = - СтрокаСторно.ОтработаноЧасов;
	СтрокаСторно.ОплаченоДней = - СтрокаСторно.ОплаченоДней;
	СтрокаСторно.ОплаченоЧасов = - СтрокаСторно.ОплаченоЧасов;
	Если ОписаниеДокумента.НачисленияСДатойНачала Тогда
		Если Не ЗначениеЗаполнено(СтрокаСторно.ПериодДействия) Тогда
			СтрокаСторно.ПериодДействия = НачалоМесяца(СтрокаСторно.ДатаНачала);
		КонецЕсли;
	ИначеЕсли ВыборкаНачислений.ПериодДействия <> Неопределено Тогда
		СтрокаСторно.ДатаНачала = ВыборкаНачислений.ПериодДействия;
		СтрокаСторно.ДатаОкончания = КонецМесяца(ВыборкаНачислений.ПериодДействия);
	КонецЕсли;
	СтрокаСторно.Сторно = Истина;
	СтрокаСторно.ФиксСторно = Истина;
	СтрокаСторно.ФиксРасчет = Истина;
	
	НовыйИдентификаторСтроки = Сторнировано.Количество();
	СтрокаСторно.ИдентификаторСтрокиВидаРасчета = НовыйИдентификаторСтроки;
	 
	СтрокаНачисленийЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНачисленийЗаднимЧислом, ВыборкаНачислений);
	СтрокаНачисленийЗаднимЧислом.Регистратор = ДополнительныеПараметры.ВременныйРегистраторПерерасчета;
	СтрокаНачисленийЗаднимЧислом.ИдентификаторСтроки = НовыйИдентификаторСтроки;
	СтрокаНачисленийЗаднимЧислом.РегистраторПоказателей = Неопределено;
	СтрокаНачисленийЗаднимЧислом.ИдентификаторСтрокиПоказателей = Неопределено;
	СтрокаНачисленийЗаднимЧислом.ВидРасчета = ВыборкаНачислений.Начисление;
	Если ОписаниеДокумента.НачисленияСДатойНачала Тогда
		СтрокаНачисленийЗаднимЧислом.ПериодДействияНачало = ВыборкаНачислений.ДатаНачала;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияКонец = ВыборкаНачислений.ДатаОкончания;
	КонецЕсли;
	СтрокаНачисленийЗаднимЧислом.Сторно = Истина;
	
	ОтборСтрок = Новый Структура(ДополнительныеПараметры.ПоляОтбора);
	ОтборСтрок.ИдентификаторСтроки = ВыборкаНачислений.ИдентификаторСтрокиВидаРасчета;
	Если ОтборСтрок.Свойство("Ссылка") Тогда
		ОтборСтрок.Ссылка = ВыборкаНачислений.Ссылка;
	КонецЕсли;
	
	Если ДополнительныеПараметры.РаспределениеРезультатов <> Неопределено Тогда
		СтрокиРаспределения = ДополнительныеПараметры.РаспределениеРезультатов.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			НоваяСтрока = РаспределениеРезультатовНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
			НоваяСтрока.Результат = - НоваяСтрока.Результат;
			НоваяСтрока.ИдентификаторСтроки = НовыйИдентификаторСтроки;
		КонецЦикла;
	КонецЕсли;
	
	Если ДополнительныеПараметры.РаспределениеПоТерриториям <> Неопределено Тогда
		СтрокиТерриторий = ДополнительныеПараметры.РаспределениеПоТерриториям.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаТерритории Из СтрокиТерриторий Цикл
			НоваяСтрока = РаспределениеПоТерриториямУсловиямТруда.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТерритории);
			НоваяСтрока.Результат = - НоваяСтрока.Результат;
			НоваяСтрока.СуммаВычета = - НоваяСтрока.СуммаВычета;
			НоваяСтрока.СкидкаПоВзносам = - НоваяСтрока.СкидкаПоВзносам;
			НоваяСтрока.ИдентификаторСтроки = НовыйИдентификаторСтроки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДокументОснование(Отказ)
	
	Если Не ЗначениеЗаполнено(СторнируемыйДокумент) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	Сведения = ИсправлениеДокументовЗарплатаКадры.СведенияОбИсправленииДокумента(СторнируемыйДокумент);
	
	Если Не Сведения.Проведен Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Сторнируемый документ не проведен.';
				|en = 'Reversed document is not posted.'"),,"Объект.СторнируемыйДокумент",,Отказ);
			
	ИначеЕсли Сведения.Исправлен Или Сведения.Сторнирован И Сведения.СторнирующийДокумент <> Ссылка Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Проведение запрещено.';
				|en = 'Posting is prohibited.'")
				+ Символы.ПС + Сведения.ПредставлениеСостояния,,"Объект.СторнируемыйДокумент",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли
