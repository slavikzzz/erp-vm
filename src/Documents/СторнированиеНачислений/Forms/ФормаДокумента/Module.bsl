#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();

	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда // Заполнение нового документа.
		
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Ответственный", "Объект.ПериодРегистрации", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ЗарплатаКадрыРасширенный.УстановитьНаименованиеПервичногоДокумента(Объект);
		ПриПолученииДанныхНаСервере();
		
		Если Параметры.Свойство("Основание") И Параметры.Основание <> Неопределено Тогда
			РассчитатьПослеЗаполнения(Объект);
			УстановитьВидимостьПланируемойДатыВыплатыНаСервере(Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Элементы.СторнируемыйДокумент.ОграничениеТипа =
		Документы.СторнированиеНачислений.ТипыДокументовСторнируемыхИнтерактивно();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
		
	УстановитьВидимостьСотрудникаНаСервере();
	УстановитьВидимостьПланируемойДатыВыплатыНаСервере(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ПерерасчетыДоступны() Тогда
		ТекущийОбъект.ДоначислитьЗарплатуПриНеобходимости = Ложь;
		
		МассивИменТаблиц = КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении();
		Для каждого ИмяТаблицы Из МассивИменТаблиц Цикл
			ТекущийОбъект[СтрЗаменить(ИмяТаблицы, "Объект.", "")].Очистить();
		КонецЦикла;
	КонецЕсли;
	
	РеквизитыВДанные(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДанныеВРеквизиты();
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Сторнировано, "ПериодДействия", "ПериодДействияСтрокой");
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИсправлениеДокументовЗарплатаКадрыКлиент.ОповеститьОСторнированииДокумента(
		Объект.СторнируемыйДокумент,
		Объект.Ссылка, 
		ПараметрыЗаписи.РежимЗаписи);
	
	Оповестить("Запись_СторнированиеНачислений", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ТекущийОбъект);
	
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СторнируемыйДокументПриИзменении(Элемент)
	
	ЗаполнитьПоСторнируемомуДокументу();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Редактирование месяца строкой.

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииПриИзмененииЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой",, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначислитьЗарплатуПриНеобходимостиПриИзменении(Элемент)
	
	ЗаполнитьПоСторнируемомуДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьОтображениеРеквизитовПервичногоДокумента(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьОтображениеРеквизитовПервичногоДокумента(ЭтотОбъект);
КонецПроцедуры

#Область РеквизитыПервичногоДокумента

&НаКлиенте
Процедура НаименованиеПервичногоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ОткрытьФормуСпискаЗначенийСтроковогоРеквизита(Элемент, 
		СтандартнаяОбработка, "ПервичныйДокумент", НСтр("ru = 'Первичные документы';
														|en = 'Source documents'"), НСтр("ru = 'Первичный документ';
																							|en = 'Source document'"));
		
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПервичногоДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Объект.НаименованиеПервичногоДокумента = ВыбранноеЗначение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПервичногоДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ПодборЗначенияСтроковогоРеквизита(Текст, ДанныеВыбора, СтандартнаяОбработка, "ПервичныйДокумент");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПервичногоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ДатаПервичногоДокументаНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВводДаты(Оповещение, ?(ЗначениеЗаполнено(Объект.ДатаПервичногоДокумента), Объект.ДатаПервичногоДокумента, Объект.Дата), НСтр("ru = 'Дата первичного документа';
																																		|en = 'Source document date'"), ЧастиДаты.Дата);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПервичногоДокументаНачалоВыбораЗавершение(Дата, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Дата) Тогда
		Объект.ДатаПервичногоДокумента = Дата;
		ДатаПервичногоДокументаПредставление = Формат(Дата,"ДФ=dd.MM.yyyy");
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПервичногоДокументаОчистка(Элемент, СтандартнаяОбработка)
	Объект.ДатаПервичногоДокумента = Дата(1,1,1);
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоначисленияИПерерасчеты

&НаКлиенте
Процедура ДоначисленияИПерерасчетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыДоначисленияИПерерасчеты(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;	
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ДоначисленияИПерерасчетыВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыДоначисленияИПерерасчеты(), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "ДоначисленияИПерерасчеты", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПередУдалением(Элемент, Отказ)
	
	РасчетЗарплатыРасширенныйКлиент.ПередУдалениемСтрокиПерерасчета(ЭтотОбъект, "ДоначисленияИПерерасчеты", Элемент, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьИзмененныеДанныеПерерасчета(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И ЗначениеЗаполнено(Сотрудник) Тогда
		Элементы.ДоначисленияИПерерасчеты.ТекущиеДанные.Сотрудник = Сотрудник;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "ДоначисленияИПерерасчеты", Элементы.ДоначисленияИПерерасчеты.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыСотрудникПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыДоначисленияИПерерасчеты();
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ДобавитьИзмененныеДанныеПерерасчета(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты());
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.ДоначисленияИПерерасчеты.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.ДоначисленияИПерерасчеты.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.ДоначисленияИПерерасчеты.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПриИзменении(Элемент)
	УстановитьВидимостьПланируемойДатыВыплатыНаСервере(Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСторнировано

&НаКлиенте
Процедура СторнированоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыСторнировано(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;	
	КонецЕсли;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыСторнировано(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ДоначисленияИПерерасчетыРазрешеноРедактироватьСторно(Команда)
	РасчетЗарплатыРасширенныйКлиент.НастроитьРедактированиеСторно(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
 
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОтмененныеНачисленияСотрудник");
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДоначисленияИПерерасчетыСотрудник");
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сотрудник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПоПроблемам(ЭлементИлиКоманда, НавигационнаяСсылка, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамОбъекта(ЭтотОбъект, Объект.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

&НаСервере
Процедура ЗаполнитьСотрудникаВШапке()
	
	Сотрудники = Объект.Сторнировано.Выгрузить(,"Сотрудник");
	Сотрудники.Свернуть("Сотрудник");
	
	СотрудникВШапке = Сотрудники.Количество() = 1;
	
	Если СотрудникВШапке Тогда
		Сотрудник = Сотрудники[0].Сотрудник;
	Иначе
		Сотрудник = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСторнируемомуДокументу()
	
	Если Не ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		Возврат;
	КонецЕсли;
		
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Действие", "Сторнировать");
	ПараметрыЗаполнения.Вставить("Ссылка", ДокументОбъект.СторнируемыйДокумент);
	ПараметрыЗаполнения.Вставить("Период", ДокументОбъект.ПериодРегистрации);
	ПараметрыЗаполнения.Вставить("ДоначислитьЗарплатуПриНеобходимости", ДокументОбъект.ДоначислитьЗарплатуПриНеобходимости);
	
	ДокументОбъект.Заполнить(ПараметрыЗаполнения);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ПриПолученииДанныхНаСервере();
	РассчитатьПослеЗаполнения(ДокументОбъект);
	ЗарплатаКадрыРасширенный.ЗаполнитьДоступностьМестаПолученияДохода(ЭтаФорма, СтруктураОписанияТаблицДляРаспределенияРезультата());
	УстановитьВидимостьПланируемойДатыВыплатыНаСервере(Истина);
	
КонецПроцедуры

// Подключение универсальных механизмов.
&НаСервере
Процедура ДополнитьФорму()
	
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты(), "Начисления");
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФормуРезультатыРаспределения(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата());
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДополнитьФорму(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры

&НаСервере
Функция ОписаниеДокумента()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.НачисленияИмя = "ДоначисленияИПерерасчеты";
	Описание.СторноИмя = "Сторнировано";
	Описание.МесяцНачисленияИмя = "ПериодРегистрации";
	Описание.ПорядокВыплатыИмя = Неопределено;
	Описание.ОписанияТаблицДляРаспределенияРезультата = СтруктураОписанияТаблицДляРаспределенияРезультата();
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыДоначисленияИПерерасчеты()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "ДоначисленияИПерерасчеты";
	ОписаниеТаблицы.ПутьКДанным = "Объект.ДоначисленияИПерерасчеты";
	ОписаниеТаблицы.НомерТаблицы = 1;
	ОписаниеТаблицы.СодержитПолеСотрудник = Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "Сотрудник";
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей = "ДатыДоначисленияИПерерасчеты";
	ОписаниеТаблицы.ОтображатьПоляОписанияВремени				= Истина;
	ОписаниеТаблицы.УправлятьОтображениемПолейОписанияВремени	= Истина;
	ОписаниеТаблицы.ОтображатьПоляНормыВремени					= Истина;
	ОписаниеТаблицы.ЭтоПерерасчеты = Истина;
	ОписаниеТаблицы.ИмяРеквизитаПериод 							= "ПериодРегистрации";
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование 				= "ДокументОснование";
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "ДоначисленияИПерерасчетыРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	ОписаниеТаблицы.СодержитПолеМестоПолученияДохода 			= Истина;
	ОписаниеТаблицы.СодержитПолеИсходныйДокумент				= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыСторнировано()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "Сторнировано";
	ОписаниеТаблицы.ПутьКДанным = "Объект.Сторнировано";
	ОписаниеТаблицы.НомерТаблицы = 2;
	ОписаниеТаблицы.СодержитПолеСотрудник = Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "Сотрудник";
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей = "ДатыСторнирование";
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование = "ДокументОснование";
	ОписаниеТаблицы.ИмяРеквизитаФиксСторно = "ФиксСторно";
	ОписаниеТаблицы.ИмяРеквизитаПериод = "ПериодРегистрации";
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "ОтмененныеНачисленияРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	ОписаниеТаблицы.СодержитПолеМестоПолученияДохода 			= Истина;
	ОписаниеТаблицы.СодержитПолеИсходныйДокумент				= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДляРаспределенияРезультата()

	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыДоначисленияИПерерасчеты());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыСторнировано());
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОписанияТаблицДляРаспределенияРезультата()

	ОписанияТаблиц = Новый Структура;
	ОписанияТаблиц.Вставить("ДоначисленияИПерерасчеты", ОписаниеТаблицыДоначисленияИПерерасчеты());
	ОписанияТаблиц.Вставить("Сторнировано", ОписаниеТаблицыСторнировано());
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка = Истина)

	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(ЭтаФорма, ОписаниеТаблицы, ВыбраннаяСтрока, Объект.ПериодРегистрации);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивОписанийТаблицФормы()
	МассивОписанийТаблицФормы = Новый Структура;
	МассивОписанийТаблицФормы.Вставить("ДоначисленияИПерерасчеты", ОписаниеТаблицыДоначисленияИПерерасчеты());
	Возврат МассивОписанийТаблицФормы  
КонецФункции

#Область РаспределениеПоТерриториямУсловиямТруда

&НаКлиенте
Процедура ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыДляВыбора = РасчетЗарплатыРасширенныйКлиент.ПараметрыДляВыбораПолеРаспределениеПоТерриториямУсловиямТруда();
	ПараметрыДляВыбора.Форма = ЭтаФорма;
	ПараметрыДляВыбора.ОписаниеДокумента = ОписаниеДокумента();
	ПараметрыДляВыбора.ОписаниеТаблицы = ОписаниеТаблицы;
	
	РасчетЗарплатыРасширенныйКлиент.ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПараметрыДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ЭтаФорма, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда()
	
	Описания = Новый Массив;
	Описания.Добавить(ОписаниеТаблицыСторнировано());
	Описания.Добавить(ОписаниеТаблицыДоначисленияИПерерасчеты());
	
	Возврат Описания;
	
КонецФункции

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.ДоначисленияИПерерасчеты");
	Массив.Добавить("Объект.Показатели");
	Возврат Массив
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "СторнируемыйДокумент", НСтр("ru = 'сторнируемого документа';
																								|en = 'reversed document'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, ПредупреждениеПриРедактировании",
		"ДоначислитьЗарплатуПриНеобходимости",
		ЗарплатаКадрыРасширенный.КлючевыеРеквизитыЗаполненияФормыТекстПредупрежденияДокументовСАвтоматическимРасчетом()));
	
	Возврат Массив
КонецФункции

#КонецОбласти

// Контролируемые поля
&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	ДоначисленияИПерерасчетыФиксРасчет = Новый Массив;
	ДоначисленияИПерерасчетыФиксРасчет.Добавить("Результат");
	
	ДоначисленияИПерерасчетыФиксРасчетВремени = Новый Массив;
	ДоначисленияИПерерасчетыФиксРасчетВремени.Добавить("ОтработаноДней");
	ДоначисленияИПерерасчетыФиксРасчетВремени.Добавить("ОтработаноЧасов");
	ДоначисленияИПерерасчетыФиксРасчетВремени.Добавить("НормаДней");
	ДоначисленияИПерерасчетыФиксРасчетВремени.Добавить("НормаЧасов");
	
	ДоначисленияИПерерасчетыФиксСтрока = Новый Массив;
	ДоначисленияИПерерасчетыФиксСтрока.Добавить("Сотрудник");
	ДоначисленияИПерерасчетыФиксСтрока.Добавить("Подразделение");
	ДоначисленияИПерерасчетыФиксСтрока.Добавить("Начисление");
	ДоначисленияИПерерасчетыФиксСтрока.Добавить("ДатаНачала");
	ДоначисленияИПерерасчетыФиксСтрока.Добавить("ДатаОкончания");
	
	ДоначисленияИПерерасчетыФиксЗаполнение = Новый Массив;
	ДоначисленияИПерерасчетыФиксЗаполнение.Добавить("МестоПолученияДохода");
	
	СтруктураКонтролируемыхПолей = Новый Структура;
	СтруктураКонтролируемыхПолей.Вставить("ФиксРасчет", ДоначисленияИПерерасчетыФиксРасчет);
	СтруктураКонтролируемыхПолей.Вставить("ФиксЗаполнение", ДоначисленияИПерерасчетыФиксЗаполнение);
	СтруктураКонтролируемыхПолей.Вставить("ФиксСтрока", ДоначисленияИПерерасчетыФиксСтрока);
	СтруктураКонтролируемыхПолей.Вставить("ФиксРасчетВремени", ДоначисленияИПерерасчетыФиксРасчетВремени);
	КонтролируемыеПоля = Новый Структура("ДоначисленияИПерерасчеты", СтруктураКонтролируемыхПолей);
	
	Возврат КонтролируемыеПоля;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей() Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация", Объект.Организация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	
	ДополнитьФорму();
	
	// чтение данных
	ДанныеВРеквизиты();
	
	ЗаполнитьСотрудникаВШапке();
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьВидимостьПерерасчетовНаСервере();

	ЗагрузитьНастройки();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Сторнировано, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ДоначисленияИПерерасчеты, "ПериодДействия", "ПериодДействияСтрокой");
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизиты()
	
	Если ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		ПараметрыСторнируемогоДокумента = Документы.СторнированиеНачислений.ПараметрыСторнируемогоДокумента(Объект.СторнируемыйДокумент);
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты(), 2);
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы());
	ЗарплатаКадрыРасширенный.ЗаполнитьДоступностьМестаПолученияДохода(ЭтаФорма, СтруктураОписанияТаблицДляРаспределенияРезультата());
	
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаДанныеВРеквизит(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата());
	ОтражениеЗарплатыВБухучетеРасширенный.ОбъектПриЧтенииНаСервереПредставлениеРаспределения(ЭтаФорма, ОписаниеДокумента());
	
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДанныеВРеквизит(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьОтображениеРеквизитовПервичногоДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	ТекущийОбъект.Показатели.Очистить();
	
	Если Не ТекущийОбъект.ДоначислитьЗарплатуПриНеобходимости Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыДоначисленияИПерерасчеты());
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблиц, 2);
	
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицДляРаспределенияРезультата());
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры	

&НаКлиенте
Процедура ДоначисленияИПерерасчетыПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ДоначисленияИПерерасчетыПодробно.Пометка, ОписаниеТаблицыДоначисленияИПерерасчеты());
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.ДоначисленияИПерерасчетыПодробно.Пометка, ОписаниеТаблицыДоначисленияИПерерасчеты());
КонецПроцедуры  

&НаКлиенте
Процедура ДополнитьСтроку(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)
	РасчетЗарплатыРасширенныйФормы.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеДокумента(), ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДоначисленияИПерерасчетыОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты());
КонецПроцедуры

&НаКлиенте
Процедура ПереЗаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ЗаполнитьПоСторнируемомуДокументу();
	
КонецПроцедуры

// Процедура используется для инициации расчета начислений из вне (на клиенте).
&НаКлиенте
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	
	РассчитатьСотрудникаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере()
	
	РассчитатьПослеЗаполнения(Объект);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудниковНаСервере(Сотрудники, СохранятьИсправления = Ложь)
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.ПериодРегистрации, Объект.Организация);
	ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета, СохранятьИсправления);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчета, ИзмененныеДанные);
	
	Отбор = Новый Структура("ФизическиеЛицаСотрудников",
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо"));
	ПозицииВставки = Новый Структура;
	ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, ПозицииВставки);
	
	МенеджерРасчета.РассчитатьЗарплату();
	
	РасчетЗарплатыВДанныеФормы(МенеджерРасчета.Зарплата, ПозицииВставки);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПослеЗаполнения(ДокументОбъект)
	
	НачатьТранзакцию();
	
	// Перед расчетом надо записать сторно-движения, что бы перерасчеты и доначисления
	// рассчитались так, как если бы сторнирующий документ уже был проведен.
	ВременныйРегистраторПерерасчета = Документы.СторнированиеНачислений.ПолучитьСсылку();
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.СторнированиеНачислений, ВременныйРегистраторПерерасчета);
	
	// Сотрудники и их данные.
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект.Сторнировано, "Сотрудник", Истина);
	
	ИсправлениеВТекущемПериоде = ДокументОбъект.ПериодРегистрации = ПараметрыСторнируемогоДокумента.ПериодРегистрации;
	
	Если ИсправлениеВТекущемПериоде Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		РегистрыРасчета.Начисления.СторнироватьДвиженияВТекущемПериоде(НаборыЗаписей.Начисления, ДокументОбъект.СторнируемыйДокумент);
		НаборыЗаписей.Начисления.Записать();
		НаборыЗаписей.ИсходныеДанныеПерерасчетов.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Организация, "ГоловнаяОрганизация");
		
		ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект.Сторнировано, "Начисление", Истина);
		Начисления = Новый Массив;
		Для Каждого ВидРасчета Из ВидыРасчета Цикл
			Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
				Начисления.Добавить(ВидРасчета);
			КонецЕсли;
		КонецЦикла;
		
		Если Начисления.Количество() > 0 Тогда
			ФизлицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
			ИспользованиеПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Начисления, "ИспользованиеПериода");
			ВариантИспользованияПериодДействия = Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия;
			
			Для Каждого СтрокаСторно Из ДокументОбъект.Сторнировано Цикл
				НоваяСтрока = НаборыЗаписей.Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСторно);
				НоваяСтрока.Регистратор = ВременныйРегистраторПерерасчета;
				НоваяСтрока.ВидРасчета = СтрокаСторно.Начисление;
				НоваяСтрока.ФизическоеЛицо = ФизлицаСотрудников[НоваяСтрока.Сотрудник];
				НоваяСтрока.Организация = ДокументОбъект.Организация;
				НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
				НоваяСтрока.ПериодРегистрации = ДокументОбъект.ПериодРегистрации;
				Если ИспользованиеПериода[НоваяСтрока.ВидРасчета] = ВариантИспользованияПериодДействия Тогда
					НоваяСтрока.ПериодДействияНачало = СтрокаСторно.ДатаНачала;
					НоваяСтрока.ПериодДействияКонец = СтрокаСторно.ДатаОкончания;
				Иначе
					НоваяСтрока.ПериодДействияНачало = СтрокаСторно.ПериодДействия;
					НоваяСтрока.ПериодДействияКонец = КонецМесяца(СтрокаСторно.ПериодДействия);
				КонецЕсли;
				
				НоваяСтрокаДополнительная = НаборыЗаписей.ИсходныеДанныеПерерасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДополнительная, СтрокаСторно);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДополнительная, НоваяСтрока);
				НоваяСтрокаДополнительная.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
				
			КонецЦикла;
		КонецЕсли;
		
		РеквизитыДляПроведения = Документы.СторнированиеНачислений.РеквизитыДляПроведенияПустаяСтруктура();
		РеквизитыДляПроведения.ПериодРегистрации = Объект.ПериодРегистрации;
		РеквизитыДляПроведения.СторнируемыйДокумент = ДокументОбъект.СторнируемыйДокумент;
		
		ПараметрыСторнирования = ИсправлениеДокументовЗарплатаКадры.ПараметрыСторнирования();
		ПараметрыСторнирования.ОтменаДокумента = Истина;
		ПараметрыСторнирования.РеквизитыДляПроведения = РеквизитыДляПроведения;
		ПараметрыСторнирования.ПериодРегистрации = Объект.ПериодРегистрации;
		
		СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
		СтруктураВидовУчета.ПроведениеПоВсемУчетам = Истина;
		СтруктураВидовУчета.ОстальныеВидыУчета = Истина;
		
		УстановитьПривилегированныйРежим(Истина);
		
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.СторнируемыйДокумент);
		ДокументСторнирован = МенеджерДокумента.СторнироватьПоУчетам(
			НаборыЗаписей,
			ВременныйРегистраторПерерасчета,
			ДокументОбъект.СторнируемыйДокумент,
			СтруктураВидовУчета,
			ПараметрыСторнирования);
		
		Если ДокументСторнирован <> Истина Тогда
			ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияПоВсемУчетам(
				НаборыЗаписей, ДокументОбъект.СторнируемыйДокумент, ПараметрыСторнирования, СтруктураВидовУчета);
		КонецЕсли;
		
		// Запишем не все движения, а только те которые могут повлиять на расчет (для повышения производительности).
		// Здесь мы могли что-то забыть.
		НаборыЗаписей.Начисления.Записать();
		НаборыЗаписей.ИсходныеДанныеПерерасчетов.Записать();
		НаборыЗаписей.ДанныеОперативногоУчетаРабочегоВремениСотрудников.Записать();
		НаборыЗаписей.РаспределениеРезультатовНачислений.Записать();
		НаборыЗаписей.БухучетНачисленияУдержанияПоСотрудникам.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	РассчитатьСотрудниковНаСервере(Сотрудники);
	
	ОтменитьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, ПозицииВставки, СтрокиМенеджераРасчетаСторнировано = Неопределено)
	
	РасчетЗарплатыРасширенныйФормы.НачисленияВДанныеМенеджераРасчета(Объект.ДоначисленияИПерерасчеты, МенеджерРасчета, Объект.Организация, Отбор, ПозицииВставки);
	
	Если СтрокиМенеджераРасчетаСторнировано <> Неопределено Тогда
		Для каждого СтрокаСторнировано Из Объект.Сторнировано Цикл
		
			НоваяСтрока = МенеджерРасчета.СтрокаТаблицыНачислений();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСторнировано);
			РасчетЗарплатыРасширенныйФормы.РезультатРаспределенияВМенеджерРасчета(НоваяСтрока, СтрокаСторнировано, СтрокаСторнировано.ИдентификаторСтрокиВидаРасчета);
			РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаВМенеджерРасчета(
				НоваяСтрока,
				СтрокаСторнировано,
				СтрокаСторнировано.ИдентификаторСтрокиВидаРасчета,
				МенеджерРасчета,
				Объект.Организация);
			СтрокиМенеджераРасчетаСторнировано.Вставить(НоваяСтрока, СтрокаСторнировано);
			
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета, СохранятьИсправления)
	
	МенеджерРасчета.ИсключаемыйРегистратор = Объект.Ссылка;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = Объект.ДоначислитьЗарплатуПриНеобходимости;
	МенеджерРасчета.НастройкиРасчета.РассчитатьПоказателиНакапливаемыеВЦеломЗаМесяц = Не СохранятьИсправления;
	МенеджерРасчета.НастройкиРасчета.СохранятьИсправления = СохранятьИсправления;
	
	ИсправлениеДокументовРасчетЗарплаты.НастроитьМенеджерРасчета(МенеджерРасчета, ЭтаФорма, ОписаниеДокумента());
	
КонецПроцедуры

&НаСервере
Процедура РасчетЗарплатыВДанныеФормы(ДанныеМенеджераРасчета, ПозицииВставки, СтрокиМенеджераРасчетаСторнировано = Неопределено)
	
	ТаблицыНачислений = РасчетЗарплатыРасширенныйФормы.ТаблицыНачисленийФормы();
	ТаблицыНачислений.Начисления = Объект.ДоначисленияИПерерасчеты;
	
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыНачисленияВДанныеФормы(
		ТаблицыНачислений, ДанныеМенеджераРасчета.Начисления, Объект.Организация,,ПозицииВставки);
	
	РасчетЗарплатыРасширенныйФормы.СортироватьПерерасчеты(Объект.ДоначисленияИПерерасчеты);
	
	ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтотОбъект, МассивОписанийТаблицФормы());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеНачисленияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Сторнировано.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеНачисленияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.Сторнировано.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеНачисленияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Сторнировано.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеНачисленияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтмененныеНачисленияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтаФорма, ОписаниеТаблицыДоначисленияИПерерасчеты());
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(ЗадатьВопрос = Истина)
	
	Если ПараметрыСторнируемогоДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазностьПериодов = Объект.ПериодРегистрации - ПараметрыСторнируемогоДокумента.ПериодРегистрации;
	
	Если РазностьПериодов < 0 Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипВопроса", "НеКорректныйПериод");
		Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Период сторнирования не может быть меньше периода сторнируемого документа (%1)';
				|en = 'The reversal period cannot be less than the reversed document period (%1)'"),
			Формат(ПараметрыСторнируемогоДокумента.ПериодРегистрации, НСтр("ru = 'ДФ=''ММММ гггг ""г.""''';
																			|en = 'DF=''MMMM yyyy'''")));
		
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ОК);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПериодРегистрацииПриИзмененииНаСервере()
	
	Если ПерерасчетыДоступны() И Объект.ДоначислитьЗарплатуПриНеобходимости Тогда
		ЗаполнитьПоСторнируемомуДокументу();
	КонецЕсли;
	
	УстановитьВидимостьПерерасчетовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ТипВопроса") Тогда
		ЗадатьВопрос = Ложь;
		
		Если ДополнительныеПараметры.ТипВопроса = "ТекущийПериод" И Результат = КодВозвратаДиалога.Отмена Тогда
			Объект.ПериодРегистрации = ДобавитьМесяц(ПараметрыСторнируемогоДокумента.ПериодРегистрации, 1);
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
			
		ИначеЕсли ДополнительныеПараметры.ТипВопроса = "НеКорректныйПериод" Тогда
			Объект.ПериодРегистрации = ПараметрыСторнируемогоДокумента.ПериодРегистрации;
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
			
		КонецЕсли;
	Иначе
		ЗадатьВопрос = Истина;
	КонецЕсли;
	
	ПериодРегистрацииПриИзменении(ЗадатьВопрос);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПерерасчетовНаСервере()
	
	ПерерасчетыДоступны = ПерерасчетыДоступны();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ДоначислитьЗарплатуПриНеобходимости", "Видимость", ПерерасчетыДоступны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"СтраницаДоначисленияИПерерасчеты", "Видимость", ПерерасчетыДоступны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"Информация", "Видимость", Не ПерерасчетыДоступны);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьСотрудникаНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Сотрудник", "Видимость", ЗначениеЗаполнено(Сотрудник));
		
КонецПроцедуры

&НаСервере
Функция ПерерасчетыДоступны()
	
	Возврат ПараметрыСторнируемогоДокумента <> Неопределено
		И (ПараметрыСторнируемогоДокумента.ПериодРегистрации < Объект.ПериодРегистрации
			Или ПараметрыСторнируемогоДокумента.ВыполнилДоначисление);
	
КонецФункции

// Видимость используется только в случае доначислений документа. 
// Видимость используется для установки даты выплаты в механизмах НДФЛ.
// Если изменился месяц, либо первыбран сторнируемый документ - обновляем дату выплаты,
&НаСервере
Процедура УстановитьВидимостьПланируемойДатыВыплатыНаСервере(ЗаполнитьДатуВыплаты)
	
	Видимость = Объект.ДоначисленияИПерерасчеты.Итог("Результат") > 0;
	Элементы.ПланируемаяДатаВыплаты.Видимость = Видимость;
	Если Не Видимость И ЗначениеЗаполнено(Объект.ПланируемаяДатаВыплаты) Тогда
		Объект.ПланируемаяДатаВыплаты = '00010101';
	ИначеЕсли ЗаполнитьДатуВыплаты Тогда
		Объект.ПланируемаяДатаВыплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Объект.Организация,
																											 Объект.ПериодРегистрации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзмененныеДанныеПерерасчета(ТекущиеДанные) Экспорт
	
	РасчетЗарплатыРасширенныйКлиент.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияПерерасчета() Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;

#КонецОбласти
