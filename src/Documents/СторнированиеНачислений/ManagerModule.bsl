#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка  - ДокументСсылка.СторнированиеНачислений - Ссылка на документ.
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный).
//  Отказ           - Булево - Признак отказа от выполнения проведения.
//  ВидыУчетов      - Строка - Список видов учета, по которым необходимо провести документ.
//                             Если параметр пустой или Неопределено, то документ проведется по всем учетам.
//  Движения        - КоллекцияДвижений, Структура - Передается только при вызове из обработки проведения документа.
//  Объект          - ДокументОбъект.СторнированиеНачислений - Передается только при вызове из обработки проведения документа.
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа.
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(
		РежимПроведения, ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, Объект, Отказ);
	
	СторнируемыйДокумент = ?(ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("СторнируемыйДокумент"), 
		ДополнительныеПараметры.СторнируемыйДокумент, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "СторнируемыйДокумент"));
		
	ПараметрыСторнируемого = ПараметрыСторнируемогоДокумента(СторнируемыйДокумент);
		
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка, ПараметрыСторнируемого);
	ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета, ПараметрыСторнируемого);
	
	РезультатИсправления = ИсправлениеДокументовЗарплатаКадры.ПриПроведенииИсправления(ДокументСсылка,
		Движения, РежимПроведения, Отказ, РеквизитыДляПроведения, СтруктураВидовУчета, Объект);
	
	Если Не РезультатИсправления.ИсправлениеВТекущемПериоде Или РезультатИсправления.ИсправлениеДоначислением Тогда
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
			
			Если ПараметрыСторнируемого.РаспределениеНачисленийВТаблицах Тогда
				РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
				РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
				РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияРезультатовНачислений(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеРезультатовНачислений);
				
				ПерерасчетЗарплаты.СформироватьДвиженияИсходныеДанныхПерерасчетов(Движения, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.Начисления);
			КонецЕсли;
			
			ПланируемаяДатаВыплаты = ?(ЗначениеЗаполнено(РеквизитыДляПроведения.ПланируемаяДатаВыплаты),РеквизитыДляПроведения.ПланируемаяДатаВыплаты,КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации));
			
			// Заполним описание данных для проведения в учете начисленной зарплаты.
			ДанныеДляПроведенияУчетЗарплаты = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
			ДанныеДляПроведенияУчетЗарплаты.Движения 				= Движения;
			ДанныеДляПроведенияУчетЗарплаты.Организация 			= РеквизитыДляПроведения.Организация;
			ДанныеДляПроведенияУчетЗарплаты.ПериодРегистрации 		= РеквизитыДляПроведения.ПериодРегистрации;
			ДанныеДляПроведенияУчетЗарплаты.ПланируемаяДатаВыплаты	= КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации);
			ДанныеДляПроведенияУчетЗарплаты.ПорядокВыплаты 			= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
			ДанныеДляПроведенияУчетЗарплаты.ДниОтпускаАвансом 		= ДанныеДляПроведения.ДниОтпускаАвансом;
			ДанныеДляПроведенияУчетЗарплаты.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
			
			// - Регистрация начислений в учете начислений и удержаний.
			Если ПараметрыСторнируемого.ЭтоПрочиеДоходы Тогда
				ПрочиеДоходы = ДанныеДляПроведения.НачисленияПоСотрудникам;
				Начисления = Неопределено;
			Иначе
				ПрочиеДоходы = Неопределено;
				Начисления = ДанныеДляПроведения.НачисленияПоСотрудникам;
			КонецЕсли;
			УчетНачисленнойЗарплаты.ЗарегистрироватьНачисления(ДанныеДляПроведенияУчетЗарплаты, Отказ, Начисления, ПрочиеДоходы);
			УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);
			
			// - Регистрация начислений в доходах для страховых взносов.
			УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Ложь, РеквизитыДляПроведения.Ссылка);
			ЗаписатьСведенияОДоходахСтраховыеВзносы(Движения, РеквизитыДляПроведения);
			
			// - Регистрация бухучета начислений и удержаний, выполняется до вызова регистрации доходов в учете НДФЛ.
			ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьНачисленияУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ,
				ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, ДанныеДляПроведения.НДФЛПоСотрудникам);
				
			Если ПараметрыСторнируемого.РаспределениеНачисленийВТаблицах Тогда
				// - Регистрация начислений в учете НДФЛ.
				УчетНДФЛРасширенный.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, РеквизитыДляПроведения.Организация,
							КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ПланируемаяДатаВыплаты,
							ДанныеДляПроведения.МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПериодРегистрацииСторнируемого, , Истина, "ВТНачисленияДляУчетаДоходовНДФЛ", РеквизитыДляПроведения.Ссылка);
			КонецЕсли;
						
			// Дополняем доходы НДФЛ сведениями о распределении по статьям финансирования и/или статьям расходов.
			ОтражениеЗарплатыВУчетеРасширенный.ДополнитьСведенияОДоходахНДФЛСведениямиОРаспределенииПоСтатьям(Движения);
			
			// Подготовка данных для регистрации удержаний, НДФЛ и Корректировок выплаты в учете начисленной зарплаты.
			УчетНачисленнойЗарплаты.СоздатьВТРаспределениеНачисленийТекущегоДокумента(ДанныеДляПроведенияУчетЗарплаты);
			
			// - Регистрация удержаний в учете начисленной зарплаты.
			УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.УдержанияПоСотрудникам);
			
			УчетСтраховыхВзносов.СформироватьПособия(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.Пособия, ДанныеДляПроведения.ПособияПоУходу);
			
			ПараметрыДвиженийОтпусков = ОстаткиОтпусков.ПараметрыДляСформироватьДвиженияФактическихОтпусков();
			ПараметрыДвиженийОтпусков.ДатаРегистрации = РеквизитыДляПроведения.Дата;
			ПараметрыДвиженийОтпусков.Начисления = ДанныеДляПроведения.Начисления;
			ПараметрыДвиженийОтпусков.ПериодНачисления = РеквизитыДляПроведения.ПериодРегистрации;
			ОстаткиОтпусков.СформироватьДвиженияФактическихОтпусков(Движения, Отказ, ПараметрыДвиженийОтпусков);
			
		КонецЕсли;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
			// Учет среднего заработка
			УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
		КонецЕсли;
		
		// Предотвращение повторного сторнирования движений в учетах.
		ИзолироватьСторнированныеДвижения(Движения, ДанныеДляПроведения);
		
	КонецЕсли;
	
	ПараметрыСторнирования = ИсправлениеДокументовЗарплатаКадры.ПараметрыСторнирования();
	ПараметрыСторнирования.ИсправлениеВТекущемПериоде = РезультатИсправления.ИсправлениеВТекущемПериоде;
	ПараметрыСторнирования.ИсправлениеДоначислением = РезультатИсправления.ИсправлениеДоначислением;
	ПараметрыСторнирования.ОтменаДокумента = Истина;
	ПараметрыСторнирования.ПериодРегистрации = РеквизитыДляПроведения.ПериодРегистрации;
	ПараметрыСторнирования.РеквизитыДляПроведения = РеквизитыДляПроведения;
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СторнируемыйДокумент);
	ДокументСторнирован = МенеджерДокумента.СторнироватьПоУчетам(
		Движения, ДокументСсылка, СторнируемыйДокумент, СтруктураВидовУчета, ПараметрыСторнирования);
	
	Если ДокументСторнирован <> Истина Тогда
		ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияПоВсемУчетам(
			Движения, СторнируемыйДокумент, ПараметрыСторнирования, СтруктураВидовУчета);
	КонецЕсли;
		
	Если ПроведениеСервер.ЕстьДвижения(Движения, "СведенияОДоходахНДФЛ") 
		И ПроведениеСервер.ЕстьДвижения(Движения, "РасчетыНалогоплательщиковСБюджетомПоНДФЛ") Тогда
		УчетНДФЛ.СформироватьДокументыУчтенныеПриРасчетеДляМежрасчетногоДокументаПоВременнойТаблице(Движения, Отказ, РеквизитыДляПроведения.Организация, ДанныеДляПроведения.МенеджерВременныхТаблиц, ДокументСсылка);
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, СтруктураВидовУчета);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ДляВсехСтрок( ЗначениеРазрешено(ФизическиеЛица.ФизическоеЛицо, NULL КАК ИСТИНА)
		|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиПравилРегистрации

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляОтбораПоОрганизации(Настройки);
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляОбъектаСПрисоединеннымиФайлами(Настройки);
КонецПроцедуры

#КонецОбласти

Функция ТипыДокументовСторнируемыхИнтерактивно() Экспорт
	
	ВычитаемыеТипы = Новый Массив;
	ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ПереносДанных"));
	ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.НачислениеЗарплаты"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВычитаемыеТипы,
		РегистраторыУвольнения());
	
	Возврат
		Новый ОписаниеТипов(ИсправлениеДокументовРасчетЗарплаты.ОписаниеТиповСторнируемогоДокумента(),, ВычитаемыеТипы);
	
КонецФункции

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.СторнированиеНачислений;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаписатьСведенияОДоходахСтраховыеВзносы(Движения, РеквизитыДляПроведения)
	
	Если ТипЗнч(РеквизитыДляПроведения.СторнируемыйДокумент) = Тип("ДокументСсылка.ПризПодарок") Тогда
		Документы.ПризПодарок.ДополнитьСведенияОДоходахСтраховыеВзносы(Движения, РеквизитыДляПроведения);
	КонецЕсли;
	
	Движения.СведенияОДоходахСтраховыеВзносы.Записать();
	Движения.СведенияОДоходахСтраховыеВзносы.Записывать = Ложь;
	
КонецПроцедуры

Функция ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета, ПараметрыСторнируемого)
	
	ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Сторнировано,ДоначисленияИПерерасчеты", "Ссылка.ПериодРегистрации");
		РасчетЗарплаты.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.СторнируемыйДокумент);
		
		ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВД(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, ДанныеДляПроведения.НачисленияПоСотрудникам);
		
		ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения, ДанныеДляПроведения, ПараметрыСторнируемого);
		
		Документы.Отпуск.ЗаполнитьДниОтпускаАвансом(РеквизитыДляПроведения.СторнируемыйДокумент, ДанныеДляПроведения, Истина);
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка("Сторнировано,ДоначисленияИПерерасчеты");
		ДополнительныеПараметры.МесяцНачисления = "Ссылка.ПериодРегистрации";
		
		Если УчетСреднегоЗаработка.ДокументМожетМенятьПоказательПремирования(РеквизитыДляПроведения.СторнируемыйДокумент) Тогда
			ДополнительныеПараметры.Таблицы.Сторнировано.ПоказательПремирования = "Ссылка.СторнируемыйДокумент.ПоказательПремирования"
		КонецЕсли;
		
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения, ДанныеДляПроведения, ПараметрыСторнируемого)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&СторнируемыйДокумент КАК Ссылка,
		|	ТаблицаНачислений.Начисление,
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ВидЗанятости,
		|	ТаблицаНачислений.Сторно,
		|	ТаблицаНачислений.ОплаченоДней,
		|	ТаблицаНачислений.Результат,
		|	ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ
		|ПОМЕСТИТЬ ВТНачисленияДляУчетаПособий
		|ИЗ
		|	Документ.СторнированиеНачислений.Сторнировано КАК ТаблицаНачислений
		|ГДЕ
		|	ТаблицаНачислений.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	Запрос.УстановитьПараметр("СторнируемыйДокумент", РеквизитыДляПроведения.СторнируемыйДокумент);
	
	Запрос.Выполнить();
	
	ПособиеПлатитУчастникПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(
		ПараметрыСторнируемого.Организация,
		ПараметрыСторнируемого.ПериодРегистрации,
		ПараметрыСторнируемого.ЭЛНКарантинПоКоронавирусу);
	
	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьСведенияОПособиях(ДанныеДляПроведения, ПособиеПлатитУчастникПилотногоПроекта);
	
КонецПроцедуры

Функция РеквизитыДляПроведения(ДокументСсылка, ПараметрыСторнируемого)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СторнированиеНачислений.Ссылка КАК Ссылка,
		|	СторнированиеНачислений.Организация КАК Организация,
		|	СторнированиеНачислений.ПериодРегистрации КАК ПериодРегистрации,
		|	СторнированиеНачислений.Дата КАК Дата,
		|	СторнированиеНачислений.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
		|	СторнированиеНачислений.СторнируемыйДокумент КАК СторнируемыйДокумент
		|ИЗ
		|	Документ.СторнированиеНачислений КАК СторнированиеНачислений
		|ГДЕ
		|	СторнированиеНачислений.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.НомерСтроки КАК НомерСтроки,
		|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.Территория КАК Территория,
		|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.УсловияТруда КАК УсловияТруда,
		|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения КАК ДоляРаспределения,
		|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.Результат КАК Результат,
		|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.РанееНачислено КАК РанееНачислено,
		|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.СуммаВычета КАК СуммаВычета,
		|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.СкидкаПоВзносам КАК СкидкаПоВзносам,
		|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтрокиПоказателей
		|ИЗ
		|	Документ.СторнированиеНачислений.РаспределениеПоТерриториямУсловиямТруда КАК СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда
		|ГДЕ
		|	СторнированиеНачисленийРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.Территория КАК Территория,
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	СУММА(СторнированиеНачисленийРаспределениеРезультатовНачислений.Результат) КАК Результат,
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат
		|ИЗ
		|	Документ.СторнированиеНачислений.РаспределениеРезультатовНачислений КАК СторнированиеНачисленийРаспределениеРезультатовНачислений
		|ГДЕ
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.ПодразделениеУчетаЗатрат,
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.СпособОтраженияЗарплатыВБухучете,
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.СтатьяФинансирования,
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.ОблагаетсяЕНВД,
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.Территория,
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.СтатьяРасходов,
		|	СторнированиеНачисленийРаспределениеРезультатовНачислений.ИдентификаторСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	РеквизитыДляПроведения.ПериодРегистрацииСторнируемого =  ПараметрыСторнируемого.ПериодРегистрации;
	РеквизитыДляПроведения.ДатаВыплатыСторнированныхНачислений = ПараметрыСторнируемого.ДатаВыплаты;
	
	Выборка = Результаты[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, Выборка);
	КонецЕсли;
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	РеквизитыДляПроведения.РаспределениеРезультатовНачислений = Результаты[2].Выгрузить();
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура() Экспорт
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура(
		"Ссылка,
		|Организация,
		|ПериодРегистрации,
		|Дата,
		|ПланируемаяДатаВыплаты,
		|СторнируемыйДокумент,
		|ПериодРегистрацииСторнируемого,
		|ДатаВыплатыСторнированныхНачислений,
		|РаспределениеПоТерриториямУсловиямТруда,
		|РаспределениеРезультатовНачислений");
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

Функция ПараметрыСторнируемогоДокумента(СторнируемыйДокумент) Экспорт
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СторнируемыйДокумент);
	Возврат МенеджерДокумента.ПараметрыСторнируемогоДокумента(СторнируемыйДокумент);
	
КонецФункции

Процедура ЗаполнитьИсходныеДанныеПерерасчетов(ПараметрыОбновления) Экспорт

	ПараметрыЗаполнения = ПерерасчетЗарплаты.ПараметрыЗаполненияИсходныхДанныхПерерасчетов();
	ПараметрыЗаполнения.ТаблицыНачислений = "Сторнировано,ДоначисленияИПерерасчеты";
	ПерерасчетЗарплаты.ЗаполнитьИсходныеДанныеПерерасчетов(ПараметрыОбновления, Метаданные.Документы.СторнированиеНачислений, ПараметрыЗаполнения);

КонецПроцедуры

Процедура ИзолироватьСторнированныеДвижения(Движения, ДанныеДляПроведения)
	
	ДвиженияВСтруктуре = ТипЗнч(Движения) = Тип("Структура");
	
	// Не пустые наборы не изолированные учетами, могут содержать сторно записи сформированные учетами не умеющими
	// изолировать наборы. Изолируем наборы здесь, что бы в них не попали дублирующие сторно строки при сторнировании
	// по учетам в исправленном документе.
	Для Каждого НаборЗаписей Из Движения Цикл
		Набор = ?(ДвиженияВСтруктуре, НаборЗаписей.Значение, НаборЗаписей);
		Если Не Набор.ДополнительныеСвойства.Свойство("ИзолированоУчетом") И Набор.Количество() > 0 Тогда
			ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, "<ВнеУчета>");
		КонецЕсли;
	КонецЦикла;
	
	// Некоторые учеты при формировании движений сворачивают данные для проведения,
	// при этом если результат равен 0, то новые движения не формируются и наборы остаются пустыми.
	// Дополнительно изолируем наборы, которые оказались пустыми из-за сворачивания результатов начислений.
	Если ДанныеДляПроведения.НачисленияПоСотрудникам <> Неопределено
		И ДанныеДляПроведения.НачисленияПоСотрудникам.Колонки.Найти("Сторно") <> Неопределено
		И ДанныеДляПроведения.НачисленияПоСотрудникам.Найти(Истина, "Сторно") <> Неопределено Тогда
		
		// Не все начисления учитываются во взаиморасчетах. Вычисление итоговой суммы документа для взаиморасчетов.
		ИтогоДляВзаиморасчетов = 0;
		ПравилаУчетаНачислений = УчетНачисленнойЗарплатыПовтИсп.ПравилаУчетаНачисленийСотрудников();
		Для Каждого Строка Из ДанныеДляПроведения.НачисленияПоСотрудникам Цикл
			ПравилаУчетаНачисления = ПравилаУчетаНачислений[Строка.Начисление];
			Если ПравилаУчетаНачисления <> Неопределено И ПравилаУчетаНачисления.УчитыватьВоВзаиморасчетах Тогда
				ИтогоДляВзаиморасчетов = ИтогоДляВзаиморасчетов + Строка.Сумма
			КонецЕсли;
		КонецЦикла;
		
		// Если сумма взаиморасчетов с сотрудниками равна 0, то сторнировать наборы не требуется.
		Если ИтогоДляВзаиморасчетов = 0 Тогда
			МетаданныеРегистров = ВзаиморасчетыССотрудникамиРасширенный.МетаданныеРегистровПодсистемы();
			
			НаборЗаписей = Неопределено;
			Для Каждого МетаданныеРегистра Из МетаданныеРегистров Цикл
				Если ДвиженияВСтруктуре Тогда
					Движения.Свойство(МетаданныеРегистра.Имя, НаборЗаписей);
				Иначе
					НаборЗаписей = Движения.Найти(МетаданныеРегистра.Имя);
				КонецЕсли;
				Если НаборЗаписей <> Неопределено Тогда
					ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(НаборЗаписей, "<ВнеУчета>");	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РегистраторыУвольнения()
	
	ТипыДокументовУвольнения = Новый Массив;
	ТипыДокументовУвольнения.Добавить(Тип("ДокументСсылка.Увольнение"));
	ТипыДокументовУвольнения.Добавить(Тип("ДокументСсылка.УвольнениеСписком"));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ДополнитьРегистраторыУвольнения(ТипыДокументовУвольнения);
	КонецЕсли;
	
	Возврат ТипыДокументовУвольнения;
	
КонецФункции

#КонецОбласти

#КонецЕсли