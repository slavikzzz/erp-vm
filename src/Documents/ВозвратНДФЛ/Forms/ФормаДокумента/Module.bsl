
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммыВозвратаОбновитьСуммыКВозврату", "Видимость", 
		УчетНДФЛДокументы.ЕстьПраваНаЧтениеДанныхУчетаНДФЛ());
	
	Если Параметры.Ключ = Документы.ВозвратНДФЛ.ПустаяСсылка() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Организация, Ответственный", 
		"Объект.Месяц",
		"Объект.Организация",
		"Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере();
			
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			ЗаполнитьСуммыКВозврату();
		КонецЕсли; 
			
	КонецЕсли;
	
	ВозвратНДФЛФормыВнутренний.ДополнитьФормуДокумента(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЗаполнитьИдентификаторыСтрок(ЭтотОбъект, Объект);
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ВозвратНДФЛФормыВнутренний.РеквизитыВДанные(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыНДФЛ());
	
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьИдентификаторыСтрок(ЭтотОбъект, ТекущийОбъект);
	ВозвратНДФЛФормыВнутренний.РеквизитыВДанные(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыНДФЛ());
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриПолученииДанныхНаСервере();
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВозвратНДФЛ", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" И Источник.ВладелецФормы = ЭтотОбъект Тогда
		ОбновитьДанныеНДФЛНаСервере(Параметр);
	КонецЕсли; 
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	ЗаполнитьСуммыКВозврату();
КонецПроцедуры

//////////////////////////////////////
// Редактирование месяца строкой.

&НаКлиенте
Процедура МесяцСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.Месяц", "МесяцСтрокой", Модифицированность);
	УстановитьВидимостьКолонокПрогрессивногоНалога(Объект.Месяц);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "Объект.Месяц", "МесяцСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьВидимостьКолонокПрогрессивногоНалога(Объект.Месяц);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.Месяц", "МесяцСтрокой", Направление, Модифицированность);
	УстановитьВидимостьКолонокПрогрессивногоНалога(Объект.Месяц);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСуммыВозврата

&НаКлиенте
Процедура СуммыВозвратаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "СуммыВозвратаНалог" И Поле.Имя <> "СуммыВозвратаКомандаРедактированияРаспределения" Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СуммыВозврата.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИдентификаторыСтрок(ЭтотОбъект, Объект);
	
	СтандартнаяОбработка = Ложь;
	УчетНДФЛКлиент.ОткрытьФормуПодробнееОРасчетеНДФЛ(
		Объект.Организация, ЭтотОбъект, Объект.Месяц, Объект.Сотрудник, ТекущиеДанные.МесяцНалоговогоПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыВозвратаКатегорияДоходаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыВозврата.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СтавкаНалогообложенияРезидента = Неопределено;
	Если ЗначениеЗаполнено(ТекущиеДанные.КатегорияДохода) Тогда 
		ТекущиеДанные.СтавкаНалогообложенияРезидента = УчетНДФЛКлиент.СтавкаНалогообложенияКатегорииДоходовПоУмолчанию(ТекущиеДанные.КатегорияДохода);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьСуммыКВозврату(Команда)
	ЗаполнитьСуммыКВозврату();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ПрочитатьГоловнуюОрганизацию();
	УстановитьФункциональныеОпцииФормы();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.Месяц", "МесяцСтрокой");
	
	ВозвратНДФЛФормыВнутренний.ПослеПолученияДанныхНаСервере(ЭтотОбъект, ОписаниеТаблицыНДФЛ());
	УстановитьВидимостьКолонокПрогрессивногоНалога(Объект.Месяц);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("Организация", Объект.Организация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()
	
	ОчиститьТаблицыДокумента();
	ПрочитатьГоловнуюОрганизацию();
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьГоловнуюОрганизацию()
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммыКВозврату()
	
	ОчиститьТаблицыДокумента();
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		ДанныеОПереплатеПоНДФЛ = УчетНДФЛ.ДанныеОПереплатеПоНДФЛ(Объект.Организация, КонецМесяца(Объект.Месяц), Объект.Сотрудник, Объект.Ссылка);
		ДанныеОПереплатеПоНДФЛ.Сортировать("МесяцНалоговогоПериода Убыв");	
		
		ИменаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("Налог");
		
		Для Каждого СтрокаПереплатыНДФЛ Из ДанныеОПереплатеПоНДФЛ Цикл
				
			ПроверкаНалогов = Ложь;
			Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
				ПроверкаНалогов = ПроверкаНалогов Или СтрокаПереплатыНДФЛ[ИмяРесурса] > 0;
			КонецЦикла;
			Если ПроверкаНалогов Тогда 									
				СтрокаТаблицыНДФЛКВозврату = Объект.СуммыВозврата.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыНДФЛКВозврату, СтрокаПереплатыНДФЛ);
				СтрокаТаблицыНДФЛКВозврату.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
			КонецЕсли;
			
			Если СтрокаПереплатыНДФЛ.ПоСтавке09 > 0 Или СтрокаПереплатыНДФЛ.ПоСтавке09СПревышения > 0 Тогда 									
				СтрокаТаблицыНДФЛКВозврату = Объект.СуммыВозврата.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыНДФЛКВозврату, СтрокаПереплатыНДФЛ);
				СтрокаТаблицыНДФЛКВозврату.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
				СтрокаТаблицыНДФЛКВозврату.Налог = СтрокаПереплатыНДФЛ.ПоСтавке09;
				СтрокаТаблицыНДФЛКВозврату.НалогСПревышения = СтрокаПереплатыНДФЛ.ПоСтавке09СПревышения;
			КонецЕсли;
			
			Если СтрокаПереплатыНДФЛ.ПоСтавке35 > 0 Тогда 									
				СтрокаТаблицыНДФЛКВозврату = Объект.СуммыВозврата.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыНДФЛКВозврату, СтрокаПереплатыНДФЛ);
				СтрокаТаблицыНДФЛКВозврату.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;
				СтрокаТаблицыНДФЛКВозврату.Налог = СтрокаПереплатыНДФЛ.ПоСтавке35;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РаспределитьПоИсточникамФинансирования();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыДокумента()
	
	Объект.СуммыВозврата.Очистить();
	Объект.РаспределениеРезультатовУдержаний.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИдентификаторыСтрок(Форма, ТекущийОбъект) 
	
	ОписаниеТаблицы = ОписаниеТаблицыНДФЛ();
	ИдентификаторСтроки = ОписаниеТаблицы.НомерТаблицы * 1000000 + 1;
	ДанныеФормыКоллекция = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	ТаблицаОбъекта = ТекущийОбъект[ОписаниеТаблицы.ИмяТаблицы];
	Индекс = 0;
	Пока Индекс < ДанныеФормыКоллекция.Количество() Цикл
		СтрокаКоллекции = ДанныеФормыКоллекция[Индекс];
		СтрокаТаблицы = ТаблицаОбъекта[Индекс];
		СтрокаКоллекции[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки] = ИдентификаторСтроки;
		СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки] = ИдентификаторСтроки;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СведенияОбНДФЛ(ФизическоеЛицо = Неопределено) Экспорт
	
	НДФЛ = Объект.СуммыВозврата.Выгрузить();
	НДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйКодВычета");
	НДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета");
	
	ДанныеОбНДФЛ = Новый Структура;
	ДанныеОбНДФЛ.Вставить("НДФЛ", НДФЛ);
	ДанныеОбНДФЛ.Вставить("ПримененныеВычетыНаДетейИИмущественные", Новый Массив);
	ДанныеОбНДФЛ.Вставить("СведенияОДоходах", РегистрыНакопления.СведенияОДоходахНДФЛ.СоздатьНаборЗаписей().Выгрузить());
	ДанныеОбНДФЛ.Вставить("ВычетыКДоходам", Новый Массив);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбНДФЛ, ЭтотОбъект.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	СтрокиВозвратаКУдалению = Новый Массив;
	СтрокиНДФЛКУдалению = Новый Массив;
	
	Для Каждого СтрокаВозврата Из Объект.СуммыВозврата Цикл
		Отбор = Новый Структура("ИдентификаторСтрокиНДФЛ", СтрокаВозврата.ИдентификаторСтрокиНДФЛ);
		НайденныеСтроки = Параметр.НДФЛ.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			ЗаполнитьЗначенияСвойств(СтрокаВозврата, НайденныеСтроки[0]);
			СтрокиНДФЛКУдалению.Добавить(НайденныеСтроки[0]);
		Иначе 
			СтрокиВозвратаКУдалению.Добавить(СтрокаВозврата);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаВозврата Из СтрокиВозвратаКУдалению Цикл 
		Объект.СуммыВозврата.Удалить(СтрокаВозврата);
	КонецЦикла;
	
	Для Каждого СтрокаНДФЛ Из СтрокиНДФЛКУдалению Цикл 
		Параметр.НДФЛ.Удалить(СтрокаНДФЛ);
	КонецЦикла;	
	
	Для Каждого СтрокаНДФЛ Из Параметр.НДФЛ Цикл 
		НоваяСтрока = Объект.СуммыВозврата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНДФЛ);
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоИсточникамФинансирования()
	
	ВозвратНДФЛФормыВнутренний.РаспределитьПоИсточникамФинансирования(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНДФЛ()
	
	Описание = УчетНДФЛКлиентСервер.ФормаПодробнееОРасчетеНДФЛОписаниеТаблицыНДФЛ();
	Описание.ИмяТаблицы = "СуммыВозврата";
	Описание.ПутьКДанным = "Объект.СуммыВозврата";
	Описание.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтрокиНДФЛ";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "";
	Описание.ИмяПоляДляВставкиПоказателей = "Налог";
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов = "";
	Описание.ИмяПоляРезультат = "Налог";
	Описание.СодержитПолеСотрудник = Ложь;
	Описание.ИмяРеквизитаСотрудник = "Сотрудник";
	Описание.ПроверяемыеРеквизиты = "";
	Описание.ОтменятьВсеИсправления	= Ложь;
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Функция НДФЛПодробнееНаСервере(ФизическиеЛица) Экспорт
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, СписокФизическихЛиц, Объект.Месяц);
	
КонецФункции

&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьКолонокПрогрессивногоНалога(ДатаПолученияДохода)
	
	ВидимостьКолонок = ДатаПолученияДохода >= УчетНДФЛ.ДатаЗакона176ФЗ();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКолонокНалогПоПрогрессивнымСтавкам",
																"Видимость", ВидимостьКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммыВозвратаНалогСПревышения",
																"Видимость", НЕ ВидимостьКолонок);
	
КонецПроцедуры

#КонецОбласти
