#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ВнешниеДанные Экспорт;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения, , Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВнешниеДанные = Истина Тогда
		Если Не ЗначениеЗаполнено(СпособФормирования) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "СведенияОДоходах.МесяцНалоговогоПериода");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "НалоговыйПериод");
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "Организация");
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "РегистрацияВНалоговомОргане");
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "КодИФНС");
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "СпособФормирования");
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "Дата");
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "Номер");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПометкаУдаления Тогда
		СформироватьВыходнойФайл();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла =  Новый УникальныйИдентификатор();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьДанныеДокумента(Отказ) Экспорт
	
	СоответствиеСтавокДоходов = УчетНДФЛ.СоответствиеДоходовСтавкам();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураДанныхНА = УчетНДФЛ.СведенияОДоходахСотрудникаДляСоцВыплатДанныеНалоговогоАгента(Организация, НалоговыйПериод, РегистрацияВНалоговомОргане, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал);
		СтруктураДанныхНА.КодНалоговогоОргана = КодИФНС;
		УчетНДФЛ.СправкиНДФЛПроверитьДанныеНалоговогоАгента(ЭтотОбъект, СтруктураДанныхНА, СпособФормирования, Отказ);
	КонецЕсли;
	
	ПараметрыПроверкиДанныхФизическихЛиц = Документы.СправкаНДФЛ.ПараметрыПроверкиДанныхФизическихЛиц();
	ПараметрыПроверкиДанныхФизическихЛиц.Ссылка						= Ссылка;
	ПараметрыПроверкиДанныхФизическихЛиц.ПроверяемыеДанные 			= ПолучитьДанныеСотрудникДляПроверки();
	ПараметрыПроверкиДанныхФизическихЛиц.ДатаДокумента				= Дата;
	ПараметрыПроверкиДанныхФизическихЛиц.ПутьКДаннымФизическогоЛица = "";
	ПараметрыПроверкиДанныхФизическихЛиц.ПроверятьАдрес				= Ложь;
	
	Документы.СправкаНДФЛ.ПроверитьДанныеФизическогоЛица(ПараметрыПроверкиДанныхФизическихЛиц, Отказ);
	
	Доходы = СведенияОДоходах.Выгрузить();
	Вычеты = СведенияОВычетах.Выгрузить();
	Уведомления = УведомленияНОоПравеНаВычеты.Выгрузить();
	
	Сводно = (СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.Сводно);
	
	НачалоСообщенияОбОшибке = СтрШаблон(
		НСтр("ru = 'Сведения о доходах физического лица, направляемые в целях назначения социальных выплат по %1:';
			|en = 'Information on personal income to submit for assigning social payments by %1:'"), 
		ПараметрыПроверкиДанныхФизическихЛиц.ПроверяемыеДанные);
	
	УчетНДФЛ.СправкиНДФЛПроверитьДанныеОДоходахНалогахВычетах(
		Ссылка,
		Дата,
		ЭтотОбъект,
		"",
		Доходы,
		Вычеты,
		СоответствиеСтавокДоходов,
		НачалоСообщенияОбОшибке,
		Отказ,
		Сводно,,,
		Уведомления);
	
КонецПроцедуры

Функция ПолучитьДанныеСотрудникДляПроверки()
	ДанныеСотрудника = Новый Структура("Сотрудник, ИНН, Фамилия, Имя, Отчество, Адрес, ВидДокумента, СерияДокумента, НомерДокумента,
									   |Гражданство, ДатаРождения, СтатусНалогоплательщика, АдресЗарубежом, СотрудникНаименование");
									   
	ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ДанныеСотрудника.Сотрудник) Тогда
		ДанныеСотрудника.СотрудникНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСотрудника.Сотрудник, "Наименование");
	Иначе
		ДанныеСотрудника.СотрудникНаименование = "";
	КонецЕсли;	
	
	Возврат ДанныеСотрудника;
КонецФункции	

//ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ФОРМИРОВАНИЯ ФАЙЛА

Процедура СформироватьВыходнойФайл()
	
	ИмяСформированногоФайла = "";
	ТекстФайла = ТекстВыходногоФайла2024(ИмяСформированногоФайла);
	ЗарплатаКадры.ЗаписатьФайлВАрхив(Ссылка, ИмяСформированногоФайла + ".xml", ТекстФайла);
	
КонецПроцедуры

Функция ТекстВыходногоФайла2024(ИмяФайла)
	
	СоответствиеСтавокДоходов = УчетНДФЛ.СоответствиеДоходовСтавкам();
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющихЛичность = Новый Соответствие;
	СоответствиеКодовДоходов = Новый Соответствие;
	СоответствиеКодовФНССтатусамНДФЛ = Новый Соответствие;
	УчетНДФЛ.ПрочитатьКлассификаторыВСоответствия(СоответствиеКодовСтран, 
											СоответствиеИменСтран, 
											СоответствиеДокументовУдостоверяющихЛичность,
											СоответствиеКодовДоходов, 
											СоответствиеКодовФНССтатусамНДФЛ);
	
	СоответствиеСтавок = Новый Соответствие;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка03] = 3;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка05] = 5;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка06] = 6;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка07] = 7;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка09] = 9;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка10] = 10;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка12] = 12;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка13] = 13;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка15] = 15;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка18] = 18;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка20] = 20;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка22] = 22;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка30] = 30;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка35] = 35;
	
	// -----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
	
	СтруктураДанныхНА = УчетНДФЛ.СведенияОДоходахСотрудникаДляСоцВыплатДанныеНалоговогоАгента(Организация, НалоговыйПериод, РегистрацияВНалоговомОргане, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал);
	СтруктураДанныхНА.КодНалоговогоОргана = КодИФНС;
	ОрганизацияЭтоФизЛицо = Не СтруктураДанныхНА.ЭтоЮрЛицо;
	СтруктураДанныхНА.Вставить("КППОтправки", КППОтправки);
	СтруктураДанныхНА.Вставить("ФормаРеорганизации", ФормаРеорганизации);
	СтруктураДанныхНА.Вставить("ИННРеорганизованнойОрганизации", ИННРеорганизованнойОрганизации);
	СтруктураДанныхНА.Вставить("КППРеорганизованнойОрганизации", КППРеорганизованнойОрганизации);
	СтруктураДанныхНА.Вставить("ИдФайлОсн",СокрЛП(ИдентификаторФайлаЗапроса));
	СтруктураДанныхНА.Вставить("РегНомерДоверенности", "");

	Если ЗначениеЗаполнено(ФормаРеорганизации) Тогда
		СтруктураДанныхНА.НазваниеОрганизации = НаименованиеРеорганизованнойОрганизации
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВычетыНДФЛ.Ссылка,
	|	ВычетыНДФЛ.КодПрименяемыйВНалоговойОтчетностиС2016Года КАК КодВычетаСтрокой,
	|	ВычетыНДФЛ.ГруппаВычета
	|ИЗ
	|	Справочник.ВидыВычетовНДФЛ КАК ВычетыНДФЛ";
	
	СведенияИзКлассификатораВычетов = Запрос.Выполнить().Выгрузить();
	СведенияИзКлассификатораВычетов.Индексы.Добавить("Ссылка");
	
	// Загружаем формат файла сведений
	ДеревоФорматаXML = ПолучитьМакет("ФорматСведенияДляСоцВыплат2024XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();
	
	ДеревоФормата = ЗарплатаКадры.ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);
	ФорматФайла = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "Файл");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ЗарплатаКадры.СоздатьДеревоXML();
	
	ИмяФайла = ИмяФайлаСведенияДляСоцВыплат(
					Дата, 
					СтруктураДанныхНА.ЭтоЮрЛицо, 
					СтруктураДанныхНА.КодНалоговогоОрганаПолучателя,
					СтруктураДанныхНА.КодНалоговогоОргана, 
					СтруктураДанныхНА.ИННорг, 
					КППОтправки,
					ИдентификаторФайла);
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("ИдФайл", ИмяФайла);
	Атрибуты.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеПрограммы());
	Атрибуты.Вставить("ВерсФорм", "5.01");
	
	УзелФайл = ЗарплатаКадры.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
	
	// Состав и структура документа
	ФорматДокумент = ФорматФайла.Документ.Значение;
	ФорматДокумент.ДатаДок.Значение = СтруктураДанныхНА.Дата;
	ФорматДокумент.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
	ФорматДокумент.КодНО.Значение = СтруктураДанныхНА.КодНалоговогоОргана;
	ФорматДокумент.ИдФайлОсн.Значение = СтруктураДанныхНА.ИдФайлОсн;
	
	УзелДокумент = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФайл, "Документ", "", АтрибутыВыгружаемогоУзла(ФорматДокумент));
	
	// Сведения о налоговом агенте
	НаборНалоговыйАгент = ФорматДокумент.СвНП.Значение;
	НаборНалоговыйАгент.ОКТМО.Значение = СтруктураДанныхНА.ОКТМО;
	НаборНалоговыйАгент.Тлф.Значение = СтруктураДанныхНА.Телефон;
	НаборНалоговыйАгент.Тлф.НеВыводитьВФайл = НЕ ЗначениеЗаполнено(СтруктураДанныхНА.Телефон);
	НаборЗаписейОтправитель = НаборНалоговыйАгент.НПЮЛ.Значение;
	
	НаборЗаписейОтправитель.НаимОрг.Значение = СтруктураДанныхНА.НазваниеОрганизации;
	НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
	НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КППОтправки;
	Если ЗначениеЗаполнено(СтруктураДанныхНА.ФормаРеорганизации) Тогда
		ИНН_КПП_НеОбязателен = СтрНайти("1/2/3/5/6", СокрЛП(СтруктураДанныхНА.ФормаРеорганизации)) = 0;
		НаборЗаписейОРеорганизации = НаборЗаписейОтправитель.СвРеоргЮЛ.Значение;
		НаборЗаписейОРеорганизации.ФормРеорг.Значение = СтруктураДанныхНА.ФормаРеорганизации;
		НаборЗаписейОРеорганизации.ИННЮЛ.Значение = СтруктураДанныхНА.ИННРеорганизованнойОрганизации;
		НаборЗаписейОРеорганизации.ИННЮЛ.НеВыводитьВФайл = Не ЗначениеЗаполнено(СтруктураДанныхНА.ИННРеорганизованнойОрганизации) И ИНН_КПП_НеОбязателен;
		НаборЗаписейОРеорганизации.КПП.Значение = СтруктураДанныхНА.КППРеорганизованнойОрганизации;
		НаборЗаписейОРеорганизации.КПП.НеВыводитьВФайл = Не ЗначениеЗаполнено(СтруктураДанныхНА.КППРеорганизованнойОрганизации) И ИНН_КПП_НеОбязателен;
	Иначе
		НаборЗаписейОтправитель.СвРеоргЮЛ.НеВыводитьВФайл = Истина;
	КонецЕсли;
	
	Атрибуты = АтрибутыВыгружаемогоУзла(НаборНалоговыйАгент);
	УзелНалоговыйАгент = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелДокумент, "СвНП","", Атрибуты);
	ЗарплатаКадры.ДобавитьИнформациюВДеревоБезУдаленияАтрибутов(УзелНалоговыйАгент, НаборНалоговыйАгент);
	
	// Сведения о лице, подписавшем документ
	НаборЗаписейПодписант = ФорматДокумент.Подписант.Значение;
	НаборЗаписейПодписант.ПрПодп.Значение = СтруктураДанныхНА.ТипПодписанта;
	Если СтруктураДанныхНА.ТипПодписанта = "2" Тогда
		// уполномоченный представитель
		НаборЗаписейПодписант.ФИО.Значение.Фамилия = СтруктураДанныхНА.ФамилияПредставителя;
		НаборЗаписейПодписант.ФИО.Значение.Имя = СтруктураДанныхНА.ИмяПредставителя;
		НаборЗаписейПодписант.ФИО.Значение.Отчество = СтруктураДанныхНА.ОтчествоПредставителя;
		НаборЗаписейПодписант.СвПред.Значение.НаимДок = СтруктураДанныхНА.ДокументПредставителя;
	Иначе
		// налоговый агент
		НаборЗаписейПодписант.ФИО.Значение.Фамилия = СтруктураДанныхНА.Фамилия;
		НаборЗаписейПодписант.ФИО.Значение.Имя = СтруктураДанныхНА.Имя;
		НаборЗаписейПодписант.ФИО.Значение.Отчество = СтруктураДанныхНА.Отчество;
		НаборЗаписейПодписант.СвПред.НеВыводитьВФайл = Истина;
	КонецЕсли;
	Атрибуты = АтрибутыВыгружаемогоУзла(НаборЗаписейПодписант);
	УзелПодписант = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелДокумент, "Подписант","", Атрибуты);
	ЗарплатаКадры.ДобавитьИнформациюВДеревоБезУдаленияАтрибутов(УзелПодписант, НаборЗаписейПодписант);
	
	// СправДох
	СтруктураДанныхСправки = ФорматДокумент.СправДох.Значение;
	НаборЗаписейСведенияОДоходах = ОбщегоНазначения.СкопироватьРекурсивно(ФорматДокумент.СправДох.Значение.СведДох.Значение);
	ФорматСведенияОВычетах = ОбщегоНазначения.СкопироватьРекурсивно(НаборЗаписейСведенияОДоходах.НалВычССИ.Значение.ПредВычССИ);
	СтруктураДанныхСправки.Удалить("СведДох");
	
	СтруктураОтбораДохода = Новый Структура("МесяцНалоговогоПериода,КодДохода,Ставка");
	ТаблицаВычетовКДоходам = СведенияОВычетах.ВыгрузитьКолонки("СуммаВычета");
	ТаблицаВычетовКДоходам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	
	// СправДох
	
	// Данные о физическом лице - получателе дохода
	НаборЗаписейПолучателиДохода = СтруктураДанныхСправки.ПолучДох.Значение;
	НаборЗаписейПолучателиДохода.ИННФЛ.Значение = ИНН;
	НаборЗаписейПолучателиДохода.ИННФЛ.НеВыводитьВФайл = ПустаяСтрока(ИНН);
	
	Описание = СоответствиеКодовФНССтатусамНДФЛ.Получить(СтатусНалогоплательщика);
	НаборЗаписейПолучателиДохода.Статус.Значение = ?(Описание = Неопределено, "", Описание.КодФНС_2015);
	НаборЗаписейПолучателиДохода.ДатаРожд.Значение = ДатаРождения;
	НаборЗаписейПолучателиДохода.Гражд.Значение = ФизическиеЛицаЗарплатаКадры.КодСтраныДляОтчетности(СоответствиеКодовСтран, Гражданство, СтранаВыдачиДокумента);
	// Фамилия, Имя, Отчество
	НаборЗаписейПолучателиДохода.ФИО.Значение.Фамилия = СокрЛП(Фамилия);
	НаборЗаписейПолучателиДохода.ФИО.Значение.Имя = СокрЛП(Имя);
	НаборЗаписейПолучателиДохода.ФИО.Значение.Отчество = СокрЛП(Отчество);
	// Удостоверение личности
	НаборЗаписейДокУдЛичности = НаборЗаписейПолучателиДохода.УдЛичнФЛ.Значение;//  КодУдЛичн, СерНомДок 
	Описание = СоответствиеДокументовУдостоверяющихЛичность.Получить(ВидДокумента);
	НаборЗаписейДокУдЛичности.КодУдЛичн = ?(Описание = Неопределено, "", Описание.КодМВД_2015);
	НаборЗаписейДокУдЛичности.СерНомДок = СокрЛП(СерияДокумента) + " " + СокрЛП(НомерДокумента);
	
	Атрибуты = АтрибутыВыгружаемогоУзла(СтруктураДанныхСправки);
	УзелСправДох = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелДокумент, "СправДох", "", Атрибуты);
	ЗарплатаКадры.ДобавитьИнформациюВДеревоБезУдаленияАтрибутов(УзелСправДох, СтруктураДанныхСправки);
	
	// Сведения о доходах
	ДоходыПоВидам = СведенияОДоходах.Выгрузить();
	ВычетыПоВидам = СведенияОВычетах.Выгрузить();
	
	ДополнитьТаблицуСВычетами(ДоходыПоВидам, СведенияИзКлассификатораВычетов);
	ДополнитьТаблицуСВычетами(ВычетыПоВидам, СведенияИзКлассификатораВычетов);
	
	Для Каждого СтавкаНДФЛ Из Перечисления.НДФЛСтавки Цикл
		Если Не СправкаНДФЛЕстьИтогиПоСтавке(СтавкаНДФЛ) Тогда
			Продолжить;
		КонецЕсли;
		
		// Сведения о доходах физического лица(по ставке налога)(СведДох)
		НаборЗаписейСведенияОДоходах.Ставка.Значение = СоответствиеСтавок[СтавкаНДФЛ];
		
		ЗачтеноАвансовыхПлатежей = ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("ЗачтеноАвансовыхПлатежей", СтавкаНДФЛ)];
		
		// Сведения о доходах и соответствующих вычетах по месяцам налогового периода (ДохВыч)
		НаборЗаписейДоходы = НаборЗаписейСведенияОДоходах.ДохВыч.Значение;
		ТаблицаДоходов = НаборЗаписейДоходы.СвСумДох.Значение;
		ТаблицаДоходов.Очистить();
		Если ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("ОбщаяСуммаДохода", СтавкаНДФЛ)] <> 0 Тогда
			ТаблицаСтрок = УчетНДФЛ.СправкиНДФЛИзвлечьДоходыПоСтавке(СтавкаНДФЛ, НалоговыйПериод, СтатусНалогоплательщика, ДоходыПоВидам, СоответствиеСтавокДоходов);
			ТаблицаСтрок.Свернуть("МесяцНалоговогоПериода,КодДохода,Ставка");
			ТаблицаСтрок.Сортировать("МесяцНалоговогоПериода,КодДохода");
			Для Каждого СтрокаДоходов Из ТаблицаСтрок Цикл // Доходы
				ЗаполнитьЗначенияСвойств(СтруктураОтбораДохода, СтрокаДоходов);
				Строки = ДоходыПоВидам.НайтиСтроки(СтруктураОтбораДохода);
				СуммаДохода = 0;
				ТаблицаВычетовКДоходам.Очистить();
				Для Каждого ОтобраннаяСтрока Из Строки Цикл
					СуммаДохода = СуммаДохода + ОтобраннаяСтрока.СуммаДохода;
					Если ЗначениеЗаполнено(ОтобраннаяСтрока.КодВычета) И ЗначениеЗаполнено(ОтобраннаяСтрока.СуммаВычета) Тогда
						ЗаполнитьЗначенияСвойств(ТаблицаВычетовКДоходам.Добавить(), ОтобраннаяСтрока);
					КонецЕсли;
				КонецЦикла;
				
				СтрокаТЗ = ТаблицаДоходов.Добавить();
				СтрокаТЗ.Месяц = ?(СтрДлина(СтрокаДоходов.МесяцНалоговогоПериода) = 1,"0","") + СтрокаДоходов.МесяцНалоговогоПериода;
				СтрокаТЗ.КодДоход = СоответствиеКодовДоходов[СтрокаДоходов.КодДохода];
				СтрокаТЗ.СумДоход = СуммаДохода;
				Если ТаблицаВычетовКДоходам.Количество() > 0 Тогда
					ТаблицаДляСтроки = ТаблицаВычетовКДоходам.Скопировать();
					ТаблицаДляСтроки.Колонки.КодВычетаСтрокой.Имя = "КодВычет";
					ТаблицаДляСтроки.Колонки.СуммаВычета.Имя = "СумВычет";
					НаборЗаписейСведенияОВычетах = ОбщегоНазначения.СкопироватьРекурсивно(ФорматСведенияОВычетах);
					НаборЗаписейСведенияОВычетах.Значение = ТаблицаДляСтроки;
					СтрокаТЗ.СвСумВыч = Новый Структура("СвСумВыч", НаборЗаписейСведенияОВычетах);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Стандартные, социальные и имущественные налоговые вычеты(НалВычССИ)
		Если ВычетыПоВидам.Количество() > 0 И СтавкаНДФЛ = Перечисления.НДФЛСтавки.Ставка13 
			Или ЗачтеноАвансовыхПлатежей > 0 Тогда
			НаборЗаписейВычет = НаборЗаписейСведенияОДоходах.НалВычССИ.Значение;
			ТаблицаВычетов = НаборЗаписейВычет.ПредВычССИ.Значение;
			ТаблицаВычетов.Очистить();
			Для каждого СтрокаВычетов Из ВычетыПоВидам Цикл // Вычеты
				СтрокаТЗ = ТаблицаВычетов.Добавить();
				СтрокаТЗ.КодВычет = СтрокаВычетов.КодВычетаСтрокой;
				СтрокаТЗ.СумВычет = СтрокаВычетов.СуммаВычета;
			КонецЦикла;
			Если ТаблицаВычетов.Количество() = 0 Тогда
				НаборЗаписейВычет.ПредВычССИ.НеВыводитьВФайл = Истина;
				НаборЗаписейСведенияОДоходах.НалВычССИ.НеВыводитьВФайл = Истина;
			КонецЕсли;
		Иначе
			НаборЗаписейСведенияОДоходах.НалВычССИ.НеВыводитьВФайл = Истина;
		КонецЕсли;
		
		// Общие суммы дохода и налога по итогам налогового периода(СумИтНалПер)
		СтруктураСГДНалПер = НаборЗаписейСведенияОДоходах.СумИтНалПер.Значение;
		СтруктураСГДНалПер.СумДохОбщ.Значение = ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("ОбщаяСуммаДохода", СтавкаНДФЛ)];
		СтруктураСГДНалПер.НалБаза.Значение = ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("ОблагаемаяСуммаДохода", СтавкаНДФЛ)];
		СтруктураСГДНалПер.НалИсчисл.Значение = ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("Исчислено", СтавкаНДФЛ)];
		СтруктураСГДНалПер.АвансПлатФикс.Значение = ЗачтеноАвансовыхПлатежей;
		СтруктураСГДНалПер.СумНалПрибЗач.Значение = ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("НалогНаПрибыльДляДивидендов", СтавкаНДФЛ)];
		СтруктураСГДНалПер.НалУдерж.Значение = ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("Удержано", СтавкаНДФЛ)];
		СтруктураСГДНалПер.НалПеречисл.Значение = ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("Перечислено", СтавкаНДФЛ)];
		СтруктураСГДНалПер.НалУдержЛиш.Значение = ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("ИзлишнеУдержано", СтавкаНДФЛ)];
		
		// Сумма дохода, с которого не удержан налог налоговым агентом, и сумма неудержанного налога (СумДохНеУд)
		Задолженность = ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("Задолженность", СтавкаНДФЛ)];
		СумДохНеУдерж = ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("СуммаДоходаНеудержанного", СтавкаНДФЛ)];
		Если Задолженность <> 0 Тогда
			ТаблицаЗаписейДохНеУд = НаборЗаписейСведенияОДоходах.СумДохНеУд.Значение;
			ТаблицаЗаписейДохНеУд.Очистить();
			СтрокаТЗ = ТаблицаЗаписейДохНеУд.Добавить();
			СтрокаТЗ.СумДохНеУдерж = СумДохНеУдерж;
			СтрокаТЗ.СумНеУдНал = Задолженность;
		Иначе
			НаборЗаписейСведенияОДоходах.СумДохНеУд.НеВыводитьВФайл = Истина;
		КонецЕсли;
		
		Атрибуты = АтрибутыВыгружаемогоУзла(НаборЗаписейСведенияОДоходах);
		УзелСведенияОДоходах = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСправДох, "СведДох","", Атрибуты);
		ЗарплатаКадры.ДобавитьИнформациюВДеревоБезУдаленияАтрибутов(УзелСведенияОДоходах, НаборЗаписейСведенияОДоходах);
	КонецЦикла;
		
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML();
	ЗарплатаКадры.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	// получаем содержимое файла в виде строки
	СтрокаXML = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрокаXML
	
КонецФункции

Процедура ДополнитьТаблицуСВычетами(ТаблицаСВычетами, Вычеты)
	
	ТаблицаСВычетами.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	ТаблицаСВычетами.Колонки.Добавить("ГруппаВычета", Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыВычетовПоНДФЛ"));
	
	Для каждого СтрокаТЗ Из ТаблицаСВычетами Цикл
		СтрокаВычета = Вычеты.Найти(СтрокаТЗ.КодВычета, "Ссылка");
		Если СтрокаВычета <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтрокаВычета);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция АтрибутыВыгружаемогоУзла(СтруктураДанных, НеВыводитьАтрибуты = Истина)
	
	Атрибуты = Новый Структура;
	Для Каждого Поле Из СтруктураДанных Цикл
		Если Поле.Значение.ТипЭлемента = "А" Тогда
			Если Поле.Значение.НеВыводитьВФайл = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Данные = Поле.Значение.Значение;
			Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
				Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
			ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
				Если Не ЗначениеЗаполнено(Данные) Тогда
					Данные = ""
				Иначе
					Данные = Формат(Данные,"ДЛФ=D");
				КонецЕсли;
			КонецЕсли;
			Атрибуты.Вставить(Поле.Ключ, Данные);
			Поле.Значение.НеВыводитьВФайл = НеВыводитьАтрибуты;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Атрибуты
	
КонецФункции

Функция СправкаНДФЛЕстьИтогиПоСтавке(Ставка)
	Возврат ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("ОбщаяСуммаДохода", Ставка)] <> 0 
		Или ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("ОблагаемаяСуммаДохода", Ставка)] <> 0
		Или ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("Исчислено", Ставка)] <> 0
		Или ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("Удержано", Ставка)] <> 0
		Или ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("Перечислено", Ставка)] <> 0
		Или ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("Задолженность", Ставка)] <> 0
		Или ЭтотОбъект[УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("ИзлишнеУдержано", Ставка)] <> 0;
	
КонецФункции

Функция ИмяФайлаСведенияДляСоцВыплат(ДатаСоставления, ЭтоЮрЛицо, Знач КодНалоговогоОрганаПолучателя, КодНалоговогоОргана, ИНН, КПП, ИдентификаторФайла)
	
	Возврат "ON_SVDOXSOC"
			+ "_" + ?(ПустаяСтрока(КодНалоговогоОрганаПолучателя), КодНалоговогоОргана, КодНалоговогоОрганаПолучателя)
			+ "_" + КодНалоговогоОргана
			+ "_" + ?(ЭтоЮрЛицо, СокрЛП(ИНН) + СокрЛП(КПП), СокрЛП(ИНН))
			+ "_" + Формат(ДатаСоставления, "ДФ=ггггММдд")
			+ "_" + ИдентификаторФайла;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли