
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	ЗаявкиСотрудниковФормы.ПриСозданииНаСервере(ЭтотОбъект, ОписаниеДокумента());
	ИнициализацияФормы();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ПриПолученииДанных(ТекущийОбъект);
	ЗаявкиСотрудниковФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, ОписаниеДокумента());
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, ПараметрОповещения, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, ПараметрОповещения) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаявкиСотрудниковФормыКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, ПараметрОповещения, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияУдалитьФайлНажатие(Элемент)
	
	ЗаголовокВопроса = НСтр("ru = 'Подтверждение';
							|en = 'Подтверждение'");
	ТекстВопроса = НСтр("ru = 'Файл справки будет удален';
						|en = 'Файл справки будет удален'");
	
	ПараметрыОповещения = Новый Структура("Форма,Элемент", ЭтаФорма, Элемент);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("УдалитьФайлСправкиЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, ИнтеграцияУправлениеПерсоналомКлиента.ОписаниеКнопокВопроса(),,,ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлСправкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаявкиСотрудниковФормыКлиент.ОткрытьПрисоединенныйФайл(ЭтаФорма, ФайлСправки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиПодключаемыхКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ЗаявкаВыполнена(Команда)
	
	РезультатВыполненияЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена");
	ВыполнитьЗаявкуНаКлиенте(РезультатВыполненияЗаявки);

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаОтклонена(Команда)
	
	РезультатВыполненияЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена");
	ВыполнитьЗаявкуНаКлиенте(РезультатВыполненияЗаявки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТиповойОтвет(Команда)
	
	ЗаявкиСотрудниковФормыКлиент.ВыбратьТиповойОтвет(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокИсполнения(Команда)
	
	ЗаявкиСотрудниковФормыКлиент.ИзменитьСрокИсполнения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлСправки(Команда)
	
	СоздатьФайлСправкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСправку(Команда)
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("СправкаОстаткиОтпусков");
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ПечатнаяФормаСправкаСМестаРаботы();
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл(Команда)
	
	ЗаявкиСотрудниковФормыКлиент.ВыбратьФайлСправки(ЭтаФорма, Элементы.ФайлСправки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайл(Команда)
	
	ЗаявкиСотрудниковФормыКлиент.ПодписатьФайл(ЭтаФорма, ФайлСправки, ЭтоФайлПечатнойФормы(ФайлСправки));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиПодсистем

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ЗавершениеЗаявки

&НаКлиенте
Процедура ВыполнитьЗаявкуНаКлиенте(РезультатВыполненияЗаявки)

	Если ЗаявкаГотоваКВыполнению(РезультатВыполненияЗаявки) Тогда
		ЗаявкиСотрудниковФормыКлиент.НачатьВыполнениеКомандыЗаявкаВыполнена(ЭтаФорма, РезультатВыполненияЗаявки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция РезультатЗаписиВыполненияЗаявки(РезультатВыполненияЗаявки) Экспорт

	Возврат РезультатЗаписиВыполненияЗаявкиНаСервере(РезультатВыполненияЗаявки);

КонецФункции

&НаСервере
Функция РезультатЗаписиВыполненияЗаявкиНаСервере(РезультатВыполненияЗаявки) Экспорт
	
	Возврат ЗаявкиСотрудников.РезультатЗаписиВыполненияЗаявки(ЭтаФорма, РезультатВыполненияЗаявки, ОписаниеДокумента());
	
КонецФункции

&НаКлиенте
Процедура ОбработчикЗавершенияЗаписиВыполненияЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаявкиСотрудниковФормыКлиент.ОбработчикЗавершенияЗаписиВыполненияЗаявки(Результат, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область ОбработкаФайлаСправки

&НаСервере
Функция ЗаменитьЗапрещенныеСимволыВИмениФайла(ИсходнаяСтрока, ЗаменятьНа = "_")
	
	ЗапрещенныеСимволы = СтрРазделить("@,\,/,:,*,?,"",<,>,|,+", ",");
	
	СтрокаПослеЗамены = СокрЛП(ИсходнаяСтрока);
	
	Для Каждого ЗапрещенныйСимвол Из ЗапрещенныеСимволы Цикл
		СтрокаПослеЗамены = СтрЗаменить(СтрокаПослеЗамены, ЗапрещенныйСимвол, ЗаменятьНа);
	КонецЦикла;
	
	Если СтрЗаканчиваетсяНа(СтрокаПослеЗамены, ".") Тогда
		СтрокаПослеЗамены = Лев(СтрокаПослеЗамены, СтрДлина(СтрокаПослеЗамены) - 1) + ЗаменятьНа;
	КонецЕсли;
	
	Возврат СтрокаПослеЗамены;
	
КонецФункции

&НаСервере
Процедура СоздатьФайлСправкиНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидСправки) Тогда
		ИмяФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидСправки, "ПредставлениеСправки");
		Если ПустаяСтрока(ИмяФайла) Тогда
			ИмяФайла = НСтр("ru = 'Справка';
							|en = 'Справка'");
		Иначе
			ИмяФайла = ЗаменитьЗапрещенныеСимволыВИмениФайла(ИмяФайла);
		КонецЕсли;
	Иначе
		ИмяФайла = НСтр("ru = 'Справка с места работы';
						|en = 'Справка с места работы'");
	КонецЕсли;
	
	ТабличныйДокумент = ПечатнаяФормаСправкаСМестаРаботы();
	
	НачатьТранзакцию();
	Попытка
		
		Если ИспользуетсяКадровыйЭДО Тогда
			
			ДанныеПечатнойФормы = КадровыйЭДОВызовСервера.ДобавитьПечатнуюФорму(
				ТабличныйДокумент, Объект.Ссылка,
				Документы.ЗаявкаСправкаСМестаРаботыКабинетСотрудника.ИдентификаторПечатнойФормы(),
				ИмяФайла, Объект.Организация, Объект.ФизическоеЛицо);
				
			ФайлСправкиОбъект = ДанныеПечатнойФормы.ФайлОбъекта.ПолучитьОбъект();
			ФайлСправкиОбъект.ФайлОтвета = Истина;
			ФайлСправкиОбъект.Записать();
			
			РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗарегистрироватьОбработкуФайлов(
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПечатнойФормы.ФайлОбъекта),
						Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);

		Иначе
			
			Поток = Новый ПотокВПамяти();
			ТабличныйДокумент.Записать(Поток, КадровыйЭДОВызовСервера.ТипФайлаЭлектронногоДокумента());
			АдресХранилища = ПоместитьВоВременноеХранилище(Поток.ЗакрытьИПолучитьДвоичныеДанные());
			
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("ФайлОтвета");
			ПараметрыФайла.ВладелецФайлов 		= Объект.Ссылка;
			ПараметрыФайла.ИмяБезРасширения 	= ИмяФайла;
			ПараметрыФайла.РасширениеБезТочки 	= "pdf";
			ПараметрыФайла.Служебный 			= Истина;
			ПараметрыФайла.ФайлОтвета 			= Истина;
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);
			
			ЗаявкиСотрудников.СоздатьДокументКЭДОСправкаСотруднику(Объект.Организация, Объект.ФизическоеЛицо, Объект.Ссылка, ПрисоединенныйФайл, Истина);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Ошибка формирования файла справки.';
								|en = 'Ошибка формирования файла справки.'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон("%1%2%3", ТекстСообщения, Символы.ПС, ПодробноеПредставлениеОшибки);
		ЗаписьЖурналаРегистрации(ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось сформировать файлы';
													|en = 'Не удалось сформировать файлы'"));

		Возврат;
		
	КонецПопытки;
	
	ПрочитатьФайлСправки();

КонецПроцедуры

&НаСервере
Функция ПечатнаяФормаСправкаСМестаРаботы()
	
	ДатаАктуальности = КонецДня(ТекущаяДатаСеанса());
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.КадровыеДанные 		= "Организация,ВидСобытия";
	ПараметрыПолучения.СписокФизическихЛиц 	= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ФизическоеЛицо);
	ПараметрыПолучения.Организация 			= Объект.Организация;
	ПараметрыПолучения.НачалоПериода 		= ДатаАктуальности;
	ПараметрыПолучения.ОкончаниеПериода 	= ДатаАктуальности;
	ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Истина;
	ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	ПараметрыПолучения.ВключаяУволенныхНаНачалоПериода = Ложь;
	ПараметрыПолучения.ВыбрасыватьИсключениеДоступа = Ложь;
	
	КадровыеДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
	СотрудникиФизическогоЛица = Новый Массив;
	Если КадровыеДанныеСотрудников.Количество() = 1 Тогда
		СотрудникиФизическогоЛица.Добавить(КадровыеДанныеСотрудников[0].Сотрудник);
	Иначе
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			Если СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				Продолжить;
			КонецЕсли;
			СотрудникиФизическогоЛица.Добавить(СтрокаТЗ.Сотрудник);
		КонецЦикла;
	КонецЕсли;
	
	Если СотрудникиФизическогоЛица.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			СотрудникиФизическогоЛица.Добавить(Объект.Сотрудник);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'На указанную дату нет действующего трудового договора, справка не может быть подготовлена.';
														|en = 'На указанную дату нет действующего трудового договора, справка не может быть подготовлена.'"));
			Возврат Новый ТабличныйДокумент;
		КонецЕсли;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	Если ЗначениеЗаполнено(Объект.ВидСправки) Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
			МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
			ПараметрыПолученияСправок = МодульСамообслуживаниеСотрудников.НовыеПараметрыПолученияСправок();
			СтрокаТаблицыПараметров = ПараметрыПолученияСправок.Добавить();
			СтрокаТаблицыПараметров.ИдентификаторЗапроса 	= Объект.ИдентификаторЗаявки;
			СтрокаТаблицыПараметров.ФизическоеЛицо 			= Объект.ФизическоеЛицо;
			СтрокаТаблицыПараметров.Организация 			= Объект.Организация;
			СтрокаТаблицыПараметров.ВидСправки 				= Объект.ВидСправки;
			СтрокаТаблицыПараметров.ДатаАктуальности 		= Объект.Дата;
			ТабличныеДокументы = МодульСамообслуживаниеСотрудников.ПечатныеФормыПредоставляемыхСотрудникамСправок(ПараметрыПолученияСправок);
			ТабДокумент = ТабличныеДокументы.Найти(Объект.ИдентификаторЗаявки, "ИдентификаторЗапроса").Результат.ТабличныйДокумент;
		КонецЕсли;
	Иначе
		ТабДокумент = Обработки.ПечатьКадровыхПриказовРасширенная.ПечатнаяФормаСправкаСМестаРаботы(СотрудникиФизическогоЛица);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

&НаКлиенте
Процедура УдалитьФайлСправкиЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаявкиСотрудниковВызовСервера.УдалитьФайлСправки(ФайлСправки);
	КонецЕсли;
	
	ПрочитатьФайлСправки();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлСправки()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ПодписанЭП КАК ПодписанЭП
	|ИЗ
	|	Справочник.ЗаявкаСправкаСМестаРаботыКабинетСотрудникаПрисоединенныеФайлы КАК Таблица
	|ГДЕ
	|	Таблица.ВладелецФайла = &ВладелецФайла
	|	И Таблица.ФайлОтвета
	|	И НЕ Таблица.ПометкаУдаления";
	ФайлыСправок = Запрос.Выполнить().Выгрузить();
	
	ФайлСправки 	= Неопределено;
	ФайлСправкиПодписанЭП 	= Ложь;
	Если ЗначениеЗаполнено(ФайлыСправок) Тогда
		ФайлСправки 			= ФайлыСправок[0].Ссылка;
		ФайлСправкиПодписанЭП 	= ФайлыСправок[0].ПодписанЭП;
	КонецЕсли;
	
	ФайлСправкиОжидаетПодписания = Ложь;
	ТребуетсяПодпись = (Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
	Если ТребуетсяПодпись Тогда
		Если ЗначениеЗаполнено(ФайлСправки) И Не ФайлСправкиПодписанЭП Тогда
			ФайлыОжидающиеПодписание = ЗаявкиСотрудниковФормы.ФайлыОжидающиеПодписание(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФайлСправки));
			ФайлСправкиОжидаетПодписания = (ФайлыОжидающиеПодписание[ФайлСправки] <> Неопределено);
			ФайлСправкиОжидаетПодписания = ФайлСправкиОжидаетПодписания И ТекущийПользователь <> ФайлыОжидающиеПодписание[ФайлСправки];
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияСостояниеПодписания", "Видимость", ТребуетсяПодпись И ЗначениеЗаполнено(ФайлСправки));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодписатьФайл", "Видимость", ТребуетсяПодпись);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодписатьФайл", "Доступность", Не ФайлСправкиПодписанЭП И Не ФайлСправкиОжидаетПодписания);

	Если ТребуетсяПодпись И ЗначениеЗаполнено(ФайлСправки) Тогда
		ТекстПоясненияПодписания = "";
		Если ФайлСправкиПодписанЭП Тогда
			ТекстПоясненияПодписания = НСтр("ru = 'Файл подписан';
											|en = 'Файл подписан'");
		ИначеЕсли ФайлСправкиОжидаетПодписания Тогда
			ТекстПоясненияПодписания = НСтр("ru = 'Файл ожидает подписания';
											|en = 'Файл ожидает подписания'");
		Иначе
			ТекстПоясненияПодписания = НСтр("ru = 'Необходимо подписать файл';
											|en = 'Необходимо подписать файл'")
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияСостояниеПодписания", "Заголовок", ТекстПоясненияПодписания);
	КонецЕсли;
	
	КомандаДоступна = Не ЗначениеЗаполнено(ФайлСправки);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздатьФайлСправки", "Доступность", КомандаДоступна);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СформироватьСправку", "Доступность", КомандаДоступна);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьФайл", "Доступность", КомандаДоступна);
	
	ПоказыватьФайл = (Объект.ВариантФормированияФайлаОтвета <> Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде);
	Если ПоказыватьФайл Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьФайлЗаявкиПояснение", "Видимость", Не ЗначениеЗаполнено(ФайлСправки));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФайл", "Видимость", ЗначениеЗаполнено(ФайлСправки));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьФайлЗаявкиПояснение", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФайл", "Видимость", Ложь);
	КонецЕсли;
	
	Если Объект.Выполнена Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияУдалитьФайл", "Видимость", Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлСправкиЗавершение(ПомещенныйФайл, Элемент) Экспорт

	ДобавитьФайлСправки(ПомещенныйФайл);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлСправки(ПомещенныйФайл)

	ИмяФайлаИнфо = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПомещенныйФайл.Имя);
	
	ТребуетсяПодписьФайла = (Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
	
	НачатьТранзакцию();
	Попытка
		
		АдресХранилища = ПомещенныйФайл.Хранение;
		
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("ФайлОтвета");
		ПараметрыФайла.ВладелецФайлов 		= Объект.Ссылка;
		ПараметрыФайла.ИмяБезРасширения 	= ИмяФайлаИнфо.ИмяБезРасширения; 
		ПараметрыФайла.РасширениеБезТочки 	= ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ИмяФайлаИнфо.Расширение);
		ПараметрыФайла.Служебный 			= Истина;
		ПараметрыФайла.ФайлОтвета 			= Истина;
		
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);
			
		ЗаявкиСотрудников.СоздатьДокументКЭДОСправкаСотруднику(Объект.Организация, Объект.ФизическоеЛицо, Объект.Ссылка, ПрисоединенныйФайл, Не ТребуетсяПодписьФайла);
		Если Не ТребуетсяПодписьФайла И ИспользуетсяКадровыйЭДО Тогда
			РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗарегистрироватьОбработкуФайлов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПрисоединенныйФайл),
				Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Ошибка выбора и присоединения файла.';
								|en = 'Ошибка выбора и присоединения файла.'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон("%1%2%3", ТекстСообщения, Символы.ПС, ПодробноеПредставлениеОшибки);
		ЗаписьЖурналаРегистрации(ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось прикрепить файл';
													|en = 'Не удалось прикрепить файл'"));
		Возврат;
	КонецПопытки;
	
	ПрочитатьФайлСправки();

КонецПроцедуры

#КонецОбласти

#Область ПодписаниеФайла

&НаКлиенте
Процедура ПодписатьФайлЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Отказ") И Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодписатьФайлЗавершениеНаСервере(ПараметрыОповещения.ПодписанныйФайл);

КонецПроцедуры

&НаСервере
Процедура ПодписатьФайлЗавершениеНаСервере(ПодписанныйФайл) Экспорт

	Если ИспользуетсяКадровыйЭДО Тогда
		РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗарегистрироватьОбработкуФайлов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПодписанныйФайл),
				Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
	Иначе
		ЗаявкиСотрудников.ЗарегистрироватьДокументКЭДОКВыгрузке(ПодписанныйФайл);
	КонецЕсли;
	
	ПрочитатьФайлСправки();

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриПолученииДанных(ТекущийОбъект)
	
	ПрочитатьФайлСправки();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаОтправитьНаПочту", "Видимость", Объект.ОтправлятьEmail);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"КоличествоЭкземпляров", "Видимость", Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде);
	
	Если ЗначениеЗаполнено(Объект.ВидСправки) Тогда
		ТекстНазначениеСправки = Строка(Объект.ВидСправки);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОписание", "Заголовок", ТекстНазначениеСправки);
	КонецЕсли;
	
	ФормироватьФайл 	= Ложь;
	ФормироватьСправку 	= Ложь;
	ВыбиратьФайл 		= Ложь;
	ПодписыватьФайл 	= Ложь;
	Если Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде Тогда
		ФормироватьСправку = Истина;
		Строка1 = НСтр("ru = 'Для выполнения заявки необходимо сформировать и распечатать справку, или передать сотруднику уже готовую справку.';
						|en = 'Для выполнения заявки необходимо сформировать и распечатать справку, или передать сотруднику уже готовую справку.'");
		Строка2 = НСтр("ru = 'Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".';
						|en = 'Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".'");
		ТекстПояснения = СтрШаблон("%1 %2", Строка1, Строка2);
	ИначеЕсли Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.СканСПодписьюИПечатью Тогда
		ФормироватьСправку 	= Истина;
		ВыбиратьФайл 		= Истина;
		Строка1 = НСтр("ru = 'Для выполнения заявки необходимо приложить файл справки с подписью и печатью.';
						|en = 'Для выполнения заявки необходимо приложить файл справки с подписью и печатью.'");
		Строка2 = НСтр("ru = 'Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".';
						|en = 'Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".'");
		ТекстПояснения = СтрШаблон("%1 %2", Строка1, Строка2);
	ИначеЕсли Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП Тогда
		ПодписыватьФайл 	= Истина;
		ФормироватьФайл = Истина;
		ВыбиратьФайл 	= Истина;
		Строка1 = НСтр("ru = 'Для выполнения заявки необходимо создать файл справки или выбрать существующий файл и подписать его.';
						|en = 'Для выполнения заявки необходимо создать файл справки или выбрать существующий файл и подписать его.'");
		Строка2 = НСтр("ru = 'Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".';
						|en = 'Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".'");
		ТекстПояснения = СтрШаблон("%1 %2", Строка1, Строка2);
	Иначе
		ФормироватьФайл = Истина;
		ВыбиратьФайл 	= Истина;
		Строка1 = НСтр("ru = 'Для выполнения заявки необходимо создать файл справки или выбрать существующий файл.';
						|en = 'Для выполнения заявки необходимо создать файл справки или выбрать существующий файл.'");
		Строка2 = НСтр("ru = 'Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".';
						|en = 'Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".'");
		ТекстПояснения = СтрШаблон("%1 %2", Строка1, Строка2);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияВыполнениеПояснение", "Заголовок", ТекстПояснения);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздатьФайлСправки", "Видимость", ФормироватьФайл);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СформироватьСправку", "Видимость", ФормироватьСправку);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьФайл", "Видимость", ВыбиратьФайл);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодписатьФайл", "Видимость", ПодписыватьФайл);
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоФайлПечатнойФормы(ПрисоединенныйФайл)
	
	Возврат КадровыйЭДО.ЭтоФайлПечатнойФормы(ПрисоединенныйФайл);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента()

	Описание = ЗаявкиСотрудниковКлиентСервер.НовоеОписаниеДокументаЗаявки();
	
	Возврат Описание;

КонецФункции

&НаКлиенте
Функция ЗаявкаГотоваКВыполнению(РезультатВыполненияЗаявки)

	Если РезультатВыполненияЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена") Тогда
		Если ПустаяСтрока(Объект.ОтветПоЗаявке) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо указать причину, по которой заявка отклоняется.';
									|en = 'Необходимо указать причину, по которой заявка отклоняется.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ОтветПоЗаявке", "Объект");
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	Иначе
		ТребуетсяПодпись = Объект.ВариантФормированияФайлаОтвета = ПредопределенноеЗначение("Перечисление.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП");
		ТребуетсяФайл = (Объект.ВариантФормированияФайлаОтвета <> ПредопределенноеЗначение("Перечисление.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде"));
		Если ТребуетсяФайл Тогда
			Если ЗначениеЗаполнено(ФайлСправки) Тогда
				Если ТребуетсяПодпись И Не ФайлСправкиПодписанЭП Тогда
					ТекстПредупреждения = НСтр("ru = 'Необходимо подписать файл справки';
												|en = 'Необходимо подписать файл справки'");
					ПоказатьПредупреждение(,ТекстПредупреждения);
					Возврат Ложь;
				Иначе
					Возврат Истина;
				КонецЕсли;
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Отсутствует файл справки';
											|en = 'Отсутствует файл справки'");
				ПоказатьПредупреждение(,ТекстПредупреждения);
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

КонецФункции


#КонецОбласти