#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата                        = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный               = Пользователи.ТекущийПользователь();
	Уведомление                 = Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка();
	ДокументОснование           = Неопределено;
	РазрешитьВыгружатьСОшибками = Ложь;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ПлатежиВБюджет.ИспользуетсяЕдиныйНалоговыйПлатеж(Организация, Дата) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Организация %1 не является плательщиком единого налогового платежа';
				|en = '%1 company is not a unified tax payer'"),
			Организация);
			
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
		
	КонецЕсли;
	
	ДатаПереходаНаЕдиныйНалоговыйПлатеж = РеглУчетСервер.ДатаНачалаОбязательногоПримененияЕНП();
	ПроверятьОтчетныйНалоговыйПериод = Дата >= ДатаПереходаНаЕдиныйНалоговыйПлатеж;
	ГлубинаОсмотра = НачалоГода(ДобавитьМесяц(ДатаПереходаНаЕдиныйНалоговыйПлатеж, -1));
	ДальностьОсмотра = КонецГода(ДобавитьМесяц(Дата, 12));
	
	Если ПроверятьОтчетныйНалоговыйПериод Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Налоги.СрокУплаты");
	КонецЕсли;
	
	Для Каждого СтрокаДокумента Из Налоги Цикл
		
		Префикс = "Налоги[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		
		// С момента всеобщего перехода на ЕНС требуется проверять отчетный период
		Если ПроверятьОтчетныйНалоговыйПериод Тогда
			ПериодКорректен = Истина;
			
			Если Не ЗначениеЗаполнено(СтрокаДокумента.НачалоПериода)
				Или Не ЗначениеЗаполнено(СтрокаДокумента.КонецПериода)
				Или СтрокаДокумента.НачалоПериода > СтрокаДокумента.КонецПериода
				Или СтрокаДокумента.НачалоПериода < ГлубинаОсмотра
				Или СтрокаДокумента.КонецПериода > ДальностьОсмотра Тогда
				
				Поле = Префикс + "ПредставлениеПериода";
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Некорректно указан отчетный (налоговый) период в строке %1 списка ""Налоги""';
						|en = 'Accounting (fiscal) period in line %1 of the ""Taxes"" list is specified incorrectly'"),
					СтрокаДокумента.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Налоги", "Объект");
			КонецЕсли;
			
			Если ПериодКорректен Тогда
				
				Если СтрокаДокумента.СрокУплаты < ГлубинаОсмотра Тогда
					Поле = Префикс + "СрокУплаты";
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Некорректно указан срок уплаты в строке %1 списка ""Налоги"": указанно значение до перехода на ЕНС';
							|en = 'The payment due date in line %1 of the ""Taxes"" list is incorrect: the value is specified before switching to the unified tax account'"),
						СтрокаДокумента.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
						ЭтотОбъект,
						Поле,
						"Объект",
						Отказ);
				КонецЕсли;
				
				Если СтрокаДокумента.СрокУплаты > ДальностьОсмотра Тогда
					Поле = Префикс + "СрокУплаты";
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Некорректно указан срок уплаты в строке %1 списка ""Налоги"": уведомления по данному сроку уплаты не сдаются';
							|en = 'The payment due date in line %1 of the ""Taxes"" list is incorrect: notifications for this payment due date are not submitted'"),
						СтрокаДокумента.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
						ЭтотОбъект,
						Поле,
						"Объект",
						Отказ);
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Уведомления по налогам и взносам подается до наступления срока платежа.
			// Исключение - НДФЛ, по которому сведения подаются после уплаты.
			// В остальных случаях - сообщаем пользователю о возможной ошибке.
			Если ЗначениеЗаполнено(СтрокаДокумента.СрокУплаты)
				И (СтрокаДокумента.СрокУплаты < НачалоДня(Дата)
					И (СтрокаДокумента.ТипНалога <> ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛ")
					И СтрокаДокумента.ТипНалога <> ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛСПревышения"))) Тогда
					
				Поле = Префикс + "СрокУплаты";
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Вероятно, некорректно заполнена колонка ""Срок уплаты"" в строке %1 списка ""Налоги"": указанное значение меньше даты уведомления';
						|en = 'The ""Payment due date"" in line %1 of the ""Taxes"" list might be filled incorrectly: the specified value is less than the notification date'"),
					СтрокаДокумента.НомерСтроки);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
					ЭтотОбъект,
					Поле,
					"Объект");
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Для уведомлений по УСН и ЕСХН разрешено отправлять отрицательные суммы
		Если СтрокаДокумента.Сумма < 0
			И Не ЕдиныйНалоговыйСчет.МожноИспользоватьОтрицательнуюСуммуВУведомлении(СтрокаДокумента.ТипНалога) Тогда
			
				Поле = Префикс + "Сумма";
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Некорректно заполнена колонка ""Сумма"" в строке %1 списка ""Налоги"": указанное значение должно быть больше нуля';
						|en = 'The ""Amount"" column in line %1 of the ""Taxes"" list is filled incorrectly: the specified value must be greater than zero'"),
					СтрокаДокумента.НомерСтроки);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
					ЭтотОбъект,
					Поле,
					"Объект",
					Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// Проверка уникальности записей в самом документе
	ПроверитьУникальностьДанныхВДокументе(Отказ);
	
	Если Не Отказ Тогда
		// Проверка реквизитов на правильность заполнения
		ПроверитьКорректностьЗаполненияРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Налоги.Итог("Сумма");
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("СинхронизацияСостоянийУведомлений") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Налоги) Тогда
		АктуализироватьУведомлениеОСпецрежимахНалогообложения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиныйНалоговыйСчет.СинхронизироватьСостояниеУведомлений(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьОбязательныеПоля(Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана организация.';
													|en = 'Company is not specified.'"), ЭтотОбъект, "Организация", "Объект", Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеДокумента(Отказ, НеблокирующиеПроверки = Истина) Экспорт
	
	ДополнительныеСвойства.Вставить("НеблокирующиеПроверки", НеблокирующиеПроверки);
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Ошибки = Неопределено;
	ДополнительныеСвойства.Свойство("Ошибки", Ошибки);
	
КонецПроцедуры

Функция ТребуетсяАктуализация(ТекущийОбъект)
	
	ТребуетсяАктуализация = Ложь;
	Если Ссылка.Пустая() Или ТекущийОбъект.ДополнительныеСвойства.Свойство("Актуализировать") Тогда
		ТребуетсяАктуализация = Истина;
	Иначе
		ОбъектДоИзменения    = Ссылка.ПолучитьОбъект();
		ОбъектПослеИзменения = ТекущийОбъект;
		Если ОбъектДоИзменения.Дата <> ОбъектПослеИзменения.Дата
			Или ОбъектДоИзменения.Комментарий <> ОбъектПослеИзменения.Комментарий
			Или ОбъектДоИзменения.СуммаДокумента <> ОбъектПослеИзменения.СуммаДокумента
			Или ОбъектДоИзменения.РазрешитьВыгружатьСОшибками <> ОбъектПослеИзменения.РазрешитьВыгружатьСОшибками
			Или ОбъектДоИзменения.Налоги.Количество() <> ОбъектПослеИзменения.Налоги.Количество() Тогда
			ТребуетсяАктуализация = Истина;
		Иначе
			СписокКолонок = ТекущийОбъект.Метаданные().ТабличныеЧасти.Налоги.Реквизиты;
			Для ИндексСтроки = 0 По ОбъектДоИзменения.Налоги.Количество() - 1 Цикл
				СтрокаДоИзменения    = ОбъектДоИзменения.Налоги[ИндексСтроки];
				СтрокаПослеИзменения = ОбъектПослеИзменения.Налоги[ИндексСтроки];
				Для Каждого Колонка Из СписокКолонок Цикл
					Если СтрокаДоИзменения[Колонка.Имя] <> СтрокаПослеИзменения[Колонка.Имя] Тогда
						ТребуетсяАктуализация = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТребуетсяАктуализация;
	
КонецФункции

Процедура АктуализироватьУведомлениеОСпецрежимахНалогообложения(ТекущийОбъект)
	
	Если Не ТребуетсяАктуализация(ТекущийОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизация         = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(ТекущийОбъект.Организация);
	РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнаяОрганизация, "РегистрацияВНалоговомОргане");
	ЭтоЮЛ                       = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ГоловнаяОрганизация);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		СсылкаОбъекта = Документы.УведомлениеОбИсчисленныхСуммахНалогов.ПолучитьСсылку();
		ТекущийОбъект.УстановитьСсылкуНового(СсылкаОбъекта);
	Иначе
		СсылкаОбъекта = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	// Титульный
	ДанныеУведомленияТитульный = Новый Структура;
	
	Если ЭтоЮЛ Тогда 
		СтрокаСведений = "ИННЮЛ,НаимЮЛПол,КППЮЛ,ТелОрганизации,ФамилияРук,ИмяРук,ОтчествоРук";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			ГоловнаяОрганизация,
			ТекущийОбъект.Дата,
			СтрокаСведений);
		ДанныеУведомленияТитульный.Вставить("ИНН",     СведенияОбОрганизации.ИННЮЛ);
		ДанныеУведомленияТитульный.Вставить("НаимОрг", СведенияОбОрганизации.НаимЮЛПол);
		ДанныеУведомленияТитульный.Вставить("КПП",     СведенияОбОрганизации.КППЮЛ);
		ДанныеУведомленияТитульный.Вставить("Тлф",     СведенияОбОрганизации.ТелОрганизации);
	Иначе
		СтрокаСведений = "ФИО,ИННФЛ,ТелСлуж,ФамилияИП,ИмяИП,ОтчествоИП";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			ГоловнаяОрганизация,
			ТекущийОбъект.Дата,
			СтрокаСведений);
		ДанныеУведомленияТитульный.Вставить("ИНН",     СведенияОбОрганизации.ИННФЛ);
		ДанныеУведомленияТитульный.Вставить("НаимОрг", СведенияОбОрганизации.ФИО);
		ДанныеУведомленияТитульный.Вставить("Тлф",     СведенияОбОрганизации.ТелСлуж);
		ДанныеУведомленияТитульный.Вставить("КПП",     "");
	КонецЕсли;
	ДанныеУведомленияТитульный.Вставить("ДАТА_ПОДПИСИ",     ТекущийОбъект.Дата);
	ДанныеУведомленияТитульный.Вставить("РегистрацияВИФНС", РегистрацияВНалоговомОргане);
	
	Реквизиты = РегистрацияВНОСервер.ДанныеРегистрации(РегистрацияВНалоговомОргане);
	ДанныеУведомленияТитульный.Вставить("КодНО", Реквизиты.Код);
	ДанныеУведомленияТитульный.Вставить("КПП",   Реквизиты.КПП);
	
	ПодписантФамилия  = "";
	ПодписантИмя      = "";
	ПодписантОтчество = "";
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
			ТекущийОбъект.Организация,
			ДанныеУведомленияТитульный["КодНО"], 
			ДанныеУведомленияТитульный["КПП"]);
		Если ЗначениеЗаполнено(СведенияОПредставителе.НаименованиеОрганизацииПредставителя) Тогда
			ПодписантСтр = СведенияОПредставителе.ФИОПредставителя;
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПодписантСтр);
			ПодписантФамилия = СокрЛП(ФИО.Фамилия);
			ПодписантИмя = СокрЛП(ФИО.Имя);
			ПодписантОтчество = СокрЛП(ФИО.Отчество);
		Иначе
			ДанныеПредставителя = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(
				Реквизиты.Представитель,
				,
				ТекущийОбъект.Дата);
			ПодписантФамилия  = СокрЛП(ДанныеПредставителя.Фамилия);
			ПодписантИмя      = СокрЛП(ДанныеПредставителя.Имя);
			ПодписантОтчество = СокрЛП(ДанныеПредставителя.Отчество);
			ПодписантСтр = СокрЛП(ПодписантФамилия + " " + ПодписантИмя + " " + ПодписантОтчество);
		КонецЕсли;
		ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПодписантСтр);
		ДанныеУведомленияТитульный.Вставить("НаимОргПред",                    СведенияОПредставителе.НаименованиеОрганизацииПредставителя);
		ДанныеУведомленияТитульный.Вставить("ПРИЗНАК_НП_ПОДВАЛ",              "2");
		ДанныеУведомленияТитульный.Вставить("НаимДок",                        Реквизиты.ДокументПредставителя);
	Иначе
		Если ЭтоЮЛ Тогда
			ПодписантФамилия  = СведенияОбОрганизации.ФамилияРук;
			ПодписантИмя      = СведенияОбОрганизации.ИмяРук;
			ПодписантОтчество = СведенияОбОрганизации.ОтчествоРук;
		Иначе
			ПодписантФамилия  = СведенияОбОрганизации.ФамилияИП;
			ПодписантИмя      = СведенияОбОрганизации.ИмяИП;
			ПодписантОтчество = СведенияОбОрганизации.ОтчествоИП;
		КонецЕсли;
		ПодписантСтр = СокрЛП(ПодписантФамилия + " " + ПодписантИмя + " " + ПодписантОтчество);
		ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПодписантСтр);
		ДанныеУведомленияТитульный.Вставить("ПРИЗНАК_НП_ПОДВАЛ",              "1");
		ДанныеУведомленияТитульный.Вставить("НаимДок",                        "");
	КонецЕсли;
	
	МассивРегистраций = ОбщегоНазначения.ВыгрузитьКолонку(ТекущийОбъект.Налоги, "РегистрацияВНалоговомОргане", Истина);
	РеквизитыРегистраций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивРегистраций, "КПП");
	
	ВидыНалоговНаИмущество         = ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговНаИмущество();
	ВидыНалоговНДФЛПредпринимателя = ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговНДФЛПредпринимателя();
	
	// СумИсчНалог
	ДанныеУведомленияРезультат = Новый Массив;
	Для Каждого ТекущаяСтрока Из ТекущийОбъект.Налоги Цикл
		
		Если ВидыНалоговНаИмущество.Найти(ТекущаяСтрока.ТипНалога) <> Неопределено Тогда
			КППДекл = Реквизиты.КПП;
		Иначе
			КППДекл = РеквизитыРегистраций[ТекущаяСтрока.РегистрацияВНалоговомОргане];
		КонецЕсли;
		ОсобыйПериод = ВидыНалоговНДФЛПредпринимателя.Найти(ТекущаяСтрока.ТипНалога) <> Неопределено;
		
		СтруктураДанныхНалог = Новый Структура;
		СтруктураДанныхНалог.Вставить("КППДекл",       КППДекл);
		СтруктураДанныхНалог.Вставить("ОКТМО",         СокрЛП(ТекущаяСтрока.КодПоОКТМО));
		СтруктураДанныхНалог.Вставить("КБК",           ТекущаяСтрока.КодБК);
		СтруктураДанныхНалог.Вставить("СумНалогАванс", ТекущаяСтрока.Сумма);
		СтруктураДанныхНалог.Вставить("СрокУпл",       ТекущаяСтрока.СрокУплаты);
		
		СоставПериода = РазложитьПериод(ТекущаяСтрока.НачалоПериода, ТекущаяСтрока.КонецПериода, ОсобыйПериод);
		СтруктураДанныхНалог.Вставить("Период",        СоставПериода.Период);
		СтруктураДанныхНалог.Вставить("НомерМесКварт", СоставПериода.НомерМесКварт);
		СтруктураДанныхНалог.Вставить("Год",           СоставПериода.Год);
		
		ДанныеУведомленияРезультат.Добавить(СтруктураДанныхНалог);
		
	КонецЦикла;
	
	ПараметрыЗаявления = Новый Структура;
	ПараметрыЗаявления.Вставить("Организация",                 ГоловнаяОрганизация);
	ПараметрыЗаявления.Вставить("РегистрацияВИФНС",            РегистрацияВНалоговомОргане);
	ПараметрыЗаявления.Вставить("Титульная",                   ДанныеУведомленияТитульный);
	ПараметрыЗаявления.Вставить("СумИсчНалог",                 ДанныеУведомленияРезультат);
	ПараметрыЗаявления.Вставить("ПодписантФамилия",            ПодписантФамилия);
	ПараметрыЗаявления.Вставить("ПодписантИмя",                ПодписантИмя);
	ПараметрыЗаявления.Вставить("ПодписантОтчество",           ПодписантОтчество);
	ПараметрыЗаявления.Вставить("ДокументОснование",           СсылкаОбъекта);
	ПараметрыЗаявления.Вставить("ДатаОснования",               Дата);
	ПараметрыЗаявления.Вставить("КомментарийОснования",        Комментарий);
	ПараметрыЗаявления.Вставить("РазрешитьВыгружатьСОшибками", РазрешитьВыгружатьСОшибками);
	Если ЗначениеЗаполнено(ТекущийОбъект.Уведомление) И ОбщегоНазначения.СсылкаСуществует(ТекущийОбъект.Уведомление) Тогда
		ПараметрыЗаявления.Вставить("СсылкаНаДокумент", ТекущийОбъект.Уведомление);
	КонецЕсли;
	
	ТекущийОбъект.Уведомление = Отчеты.РегламентированноеУведомлениеИсчисленныеСуммыНалогов.СформироватьНовоеУведомление(
			Отчеты.РегламентированноеУведомлениеИсчисленныеСуммыНалогов.ДействующаяРедакцияФормы(ТекущийОбъект.Дата),
			ПараметрыЗаявления);
	
КонецПроцедуры

Функция РазложитьПериод(НачалоПериода, КонецПериода, ОсобыйПериод)
	
	// Год:
	//    год отчетного периода
	// Период:
	//    21 - первый квартал
	//    31 - полугодие
	//    33 - 9 месяцев
	//    34 - год
	// НомерМесКварт:
	//    01 - первый месяц квартала/первый квартал (для 34)
	//    02 - второй месяц квартала/второй квартал (для 34)
	//    03 - третий месяц квартала/третий квартал (для 34)
	//    04 - конец декабря/четвертый квартал (для 34)
	//    Дополнительно для агентского НДФЛ в 2024 г.
	//       11 - вторая половина первого месяца квартала
	//       12 - вторая половина второго месяца квартала
	//       13 - вторая половина третьего месяца квартала
	//
	// Если особый период, тогда всегда 21/04, 31/04, 32/04, 33/04
	
	ПередаютсяПромежуточныеУведомления = Год(НачалоПериода) >= 2024;
	
	СоставПериода = Новый Структура("Период, НомерМесКварт, Год");
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		
		СоставПериода.Год = Формат(Год(НачалоПериода), "ЧГ=");
		
		НомерМесяца = Месяц(КонецПериода);
		НомерКвартала = Цел((НомерМесяца - 1) / 3 + 1);
		Если (Не ПередаютсяПромежуточныеУведомления
			И НачалоМесяца(НачалоПериода) <> НачалоПериода
			И КонецМесяца(НачалоПериода) = КонецГода(НачалоПериода))
			Или ОсобыйПериод Тогда
			// Особый период для декабря или переданный явно
			СоставПериода.НомерМесКварт = "04";
		ИначеЕсли ПередаютсяПромежуточныеУведомления
			И (НачалоМесяца(НачалоПериода) <> НачалоПериода
				Или КонецДня(КонецПериода) <> КонецМесяца(КонецПериода)) Тогда
			// Особый порядок для периодов по НДФЛ 2024 г.
			// Получим номер месяца и сделаем поправку
			НомерМесКварт = НомерМесяца - Цел((НомерМесяца - 1)/3) * 3;
			ПерваяПоловинаМесяца = НачалоМесяца(НачалоПериода) = НачалоПериода
				И КонецДня(КонецПериода) <> КонецМесяца(КонецПериода);
			Если Не ПерваяПоловинаМесяца Тогда
				НомерМесКварт = 10 + НомерМесКварт;
			КонецЕсли;
			СоставПериода.НомерМесКварт = Формат(НомерМесКварт, "ЧЦ=2; ЧН=00; ЧВН=");
		ИначеЕсли НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) Тогда 
			// Получим номер месяца
			НомерМесКварт = НомерМесяца - Цел((НомерМесяца - 1)/3) * 3;
			СоставПериода.НомерМесКварт = Формат(НомерМесКварт, "ЧЦ=2; ЧН=00; ЧВН=");
		ИначеЕсли Не ОсобыйПериод Тогда
			// Получим номер квартала
			СоставПериода.НомерМесКварт = Формат(НомерКвартала, "ЧЦ=2; ЧН=00; ЧВН=");
			СоставПериода.Период = "34";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СоставПериода.Период) Тогда
			Если НомерКвартала = 1 Тогда
				СоставПериода.Период = "21";
			ИначеЕсли НомерКвартала = 2 Тогда
				СоставПериода.Период = "31";
			ИначеЕсли НомерКвартала = 3 Тогда
				СоставПериода.Период = "33";
			Иначе
				СоставПериода.Период = "34";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СоставПериода;
	
КонецФункции

Процедура ПроверитьУникальностьДанныхВДокументе(Отказ)
	
	ТаблицаНалоги = Налоги.Выгрузить();
	КолонкиСверки = "ТипНалога, КодБК, РегистрацияВНалоговомОргане, КодПоОКТМО, СрокУплаты";
	Если Дата >= РеглУчетСервер.ДатаНачалаОбязательногоПримененияЕНП() Тогда
		КолонкиСверки = КолонкиСверки + ", " + "НачалоПериода, КонецПериода";
	КонецЕсли;
	ТаблицаНалоги.Свернуть(КолонкиСверки);
	Если ТаблицаНалоги.Количество() <> Налоги.Количество() Тогда
		ОтборСтрок = Новый Структура(КолонкиСверки);
		Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
			
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаТаблицы);
			МассивСтрок = Налоги.НайтиСтроки(ОтборСтрок);
			Если МассивСтрок.Количество() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			НомераСтрок = "";
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				НомераСтрок = НомераСтрок + ?(НомераСтрок <> "", ", ", "") + СтрокаМассива.НомерСтроки;
			КонецЦикла;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Дублируются ключевые значения в строках %1 списка ""Налоги""';
					|en = 'Key values in lines %1 of the ""Taxes"" list are duplicated'"),
				НомераСтрок);
				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
				,
				"Налоги",
				"Объект",
				Отказ);
				
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьЗаполненияРеквизитов()
	
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "НеблокирующиеПроверки", Истина) Тогда
		Возврат;
	КонецЕсли;
	
	КодыПоОКТМО = Налоги.ВыгрузитьКолонку("КодПоОКТМО");
	
	РезультатПроверкиОКТМО = АдресныйКлассификатор.ПроверитьОКТМОБюджетополучателя(КодыПоОКТМО);
	ПровереныОКТМОБюджетополучатетей = РезультатПроверкиОКТМО.Отказ = Ложь;
	
	Для Каждого СтрокаДокумента Из Налоги Цикл
		
		Префикс = "Налоги[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		
		Если ПровереныОКТМОБюджетополучатетей Тогда
			Если Не РезультатПроверкиОКТМО.Данные[СокрЛП(СтрокаДокумента.КодПоОКТМО)].Успешно Тогда

			Поле = Префикс + "КодПоОКТМО";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вероятно, некорректно заполнен код по ОКТМО в строке %1 списка ""Налоги"": %2';
					|en = 'The RNCMT code in line %1 of the ""Taxes"" list might be incorrect: %2'"),
				СтрокаДокумента.НомерСтроки,
				РезультатПроверкиОКТМО.Данные[СокрЛП(СтрокаДокумента.КодПоОКТМО)].ТекстОшибки);
				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
				ЭтотОбъект,
				Поле,
				"Объект");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли