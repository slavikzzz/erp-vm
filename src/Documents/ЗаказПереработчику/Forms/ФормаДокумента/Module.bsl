#Область ОписаниеПеременных

&НаКлиенте
Перем ФормаМодифицирована; // используется для отработки события изменения модифицированности формы

&НаКлиенте
Перем ОтветПередЗаписью;

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

&НаКлиенте
Перем ПараметрыДляЗаписи Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне2_5") Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'При использовании производства на стороне версии 2.5 создание новых заказов версии 2.4 запрещено.';
				|en = 'When you use External subcontracting version 2.5, you cannot create new orders of version 2.4.'"),,,,
			Отказ);
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	
	//++ НЕ УТКА

	// ++ Устарело_Производство21
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		АдресДвиженийЗаказа = АдресДвиженийЗаказаВХранилище();
	КонецЕсли;
	// -- Устарело_Производство21

	//-- НЕ УТКА
	
	ПараметрыВстраивания = Документы.ЗаказПереработчику.ДоступныеОстаткиПараметрыВстраивания(Объект);
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриСозданииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		//++ НЕ УТКА
		Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
			ОбновитьКолонкуДоступноСервер(); // данные Редактирование этапов инициализируются в ПриЧтенииСозданииНаСервере
		КонецЕсли;
		//-- НЕ УТКА
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		СтатусДокумента = Перечисления.СтатусыЗаказовПереработчикам.ПустаяСсылка();
		
	КонецЕсли;
	
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	
	ЗаполнитьСписокВыбораГруппировкиЗатрат();
	
	ИспользоватьПричиныОтменыЗаказовПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтогоПродукция.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	НастроитьЭлементыФормыПоФункциональнымОпциям(ЭтаФорма);
	
	УстановитьВидимостьВидаЦен();
	ЗаполнятьВидыЦенПоУмолчанию = ЗначениеЗаполнено(Объект.ВидЦены);

	НастроитьВидимостьИЗаполнениеУслуг(ЭтаФорма);
	
	Элементы.ЗакрытьЗаказ.Доступность = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказПереработчику);
	
	УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
	Элементы.ВозвратныеОтходыВидЦены.БыстрыйВыбор = Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен");

	// ПараметрыВыбораСтатейИАналитик
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказПереработчику.ПараметрыВыбораСтатейИАналитик();
	//++ НЕ УТКА
	ДополнитьПараметрыВыбораСтатейРасходовЭтаповПроизводства(ПараметрыВыбораСтатейИАналитик);
	//-- НЕ УТКА
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	// Конец ПараметрыВыбораСтатейИАналитик
	
	ЭлементыДляЗаполнения = Новый Массив;
	ЭлементыДляЗаполнения.Добавить(Элементы.ВремяДоставкиС);
	ЭлементыДляЗаполнения.Добавить(Элементы.ВремяДоставкиПо);
	ЭлементыДляЗаполнения.Добавить(Элементы.ВремяДоставкиС1);
	ЭлементыДляЗаполнения.Добавить(Элементы.ВремяДоставкиПо1);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(ЭлементыДляЗаполнения);
	
	ВзаиморасчетыСервер.ФормаПриСозданииНаСервере(ЭтаФорма);
	
	#Область СтандартныеМеханизмы
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма, "Продукция,ВозвратныеОтходы,Материалы");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	//++ НЕ УТКА
	РазблокироватьЭтапыНаСервере();
	//-- НЕ УТКА
	
	//++ НЕ УТКА

	// ++ Устарело_Производство21
	АдресДвиженийЗаказа = АдресДвиженийЗаказаВХранилище();
	// -- Устарело_Производство21

	//-- НЕ УТКА
	
	ПараметрыВстраивания = Документы.ЗаказПереработчику.ДоступныеОстаткиПараметрыВстраивания(Объект);
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	
	ПриЧтенииСозданииНаСервере();
	//++ НЕ УТКА
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		ОбновитьКолонкуДоступноСервер(); // данные Редактирование этапов инициализируются в ПриЧтенииСозданииНаСервере
	КонецЕсли;
	//-- НЕ УТКА
	
	// ПараметрыВыбораСтатейИАналитик
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказПереработчику.ПараметрыВыбораСтатейИАналитик();
	//++ НЕ УТКА
	ДополнитьПараметрыВыбораСтатейРасходовЭтаповПроизводства(ПараметрыВыбораСтатейИАналитик);
	//-- НЕ УТКА
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	// Конец ПараметрыВыбораСтатейИАналитик
	
	ВзаиморасчетыСервер.ФормаПриЧтенииНаСервере(ЭтаФорма);
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Объект.Проведен Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыЗаказовПереработчикам.ПустаяСсылка();
	КонецЕсли;

	Если Объект.ПереработкаПоЗаказу Тогда
		ИсходныеРаспоряжения.Очистить();
		Для каждого ДанныеСтроки Из Объект.Услуги Цикл
			ИсходныеРаспоряжения.Добавить(ДанныеСтроки.Распоряжение);
		КонецЦикла;
	КонецЕсли;
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	ТребуетсяЗаполнитьДанныеРаспоряжения = Ложь;
	ТребуетсяУточнитьДанныеРаспоряжения = Ложь;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеГруппыЗатрат(Отказ);
	
	//++ НЕ УТКА
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		
		РедактированиеЭтаповОбъект = РеквизитФормыВЗначение("РедактированиеЭтапов");
		РедактированиеЭтаповОбъект.ЗаказПереработчику = Объект.Ссылка;
		РедактированиеЭтаповОбъект.Статус             = Объект.Статус;
		// Переопределяем текущий признак проведения, так как это проверка перед проведением.
		РедактированиеЭтаповОбъект.Проведен           = Истина;
		
		Если НЕ РедактированиеЭтаповОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТКА
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	// Если документ проводится, заполним пустые даты поступления в тч Продукция
	// и пустые даты отгрузки в тч Материалы, рассчитаем скидки, заполним график оплаты.
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		Отказ = Истина;
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
			ЭтаФорма,
			"Материалы",
			"Номенклатура,Характеристика,Количество,Склад,ДатаОтгрузки",
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//++ НЕ УТКА

	//++ Устарело_Производство21
	Если ТекущийОбъект.ПереработкаПоЗаказу 
		И (ТребуетсяЗаполнитьДанныеРаспоряжения 
			ИЛИ НЕ ТекущийОбъект.Проведен И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
			
		ТекущийОбъект.ЗаполнитьДанныеРаспоряжения();
		
	ИначеЕсли ТребуетсяУточнитьДанныеРаспоряжения Тогда
		
		ОперативныйУчетПроизводстваКлиентСервер.ЗаполнитьДанныеРаспоряженияЗаказаПереработчику(
			ТекущийОбъект, 
			Перечисления.ТипыДвиженияЗапасов.Поступление,
			Перечисления.ТипыДвиженияЗапасов.Отгрузка);
			
	КонецЕсли;
	//-- Устарело_Производство21
	
	Если ТекущийОбъект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		Объект.ПоступлениеОднойДатой = РедактированиеЭтапов.ПроизводствоОднойДатой;
		Объект.ДатаПоступления = РедактированиеЭтапов.ДатаПроизводства;
		Объект.НеОтгружатьЧастями = РедактированиеЭтапов.НеОтгружатьЧастями;
		Объект.ДатаОтгрузки = РедактированиеЭтапов.ДатаОтгрузки;
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РедактированиеЭтапов", РедактированиеЭтапов);
	КонецЕсли;
	
	//-- НЕ УТКА
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ВзаиморасчетыСервер.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыЗаказовПереработчикам.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	ИспользоватьУправлениеПроизводством2_2 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(
		Объект.Материалы,
		ЗависимыеРеквизитыМатериалы());
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(
		Объект.ВозвратныеОтходы,
		ЗависимыеРеквизитыВозвратныеОтходы());
		
	//++ НЕ УТКА	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства
       И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
       	
       	#Область Округление
       	
		ПараметрыОкругления = Обработки.РедактированиеЭтаповПроизводства.ПараметрыТЧДляОкругления();
		
		НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(
			РедактированиеЭтапов,, ПараметрыОкругления["ВыходныеИзделия"]);
			       	
		НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(
			РедактированиеЭтапов,, ПараметрыОкругления["ПобочныеИзделия"]);
			
		НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(
			РедактированиеЭтапов,, ПараметрыОкругления["ОбеспечениеМатериаламиИРаботами"]);
			
		#КонецОбласти
       	
	КонецЕсли;
	//-- НЕ УТКА		
	
	ОбновитьСостояниеСервер();
	
	// ПараметрыВыбораСтатейИАналитик
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ПараметрыВыбораСтатейИАналитик
	
	ВзаиморасчетыСервер.ФормаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект.ДополнительныеСвойства);
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	ТребуетсяЗаполнитьДанныеРаспоряжения = Ложь;
	ТребуетсяУточнитьДанныеРаспоряжения = Ложь;
	ОбеспечениеВДокументахСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	УстановитьВидимостьОбеспечения();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	СкрыватьОтмененныеСтрокиМатериалы = Настройки.Получить("СкрыватьОтмененныеСтрокиМатериалы");
	
	Если СкрыватьОтмененныеСтрокиМатериалы Тогда
		Элементы.Материалы.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Материалы.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	СкрыватьОтмененныеСтрокиПродукция = Настройки.Получить("СкрыватьОтмененныеСтрокиПродукция");
	
	Если СкрыватьОтмененныеСтрокиПродукция Тогда
		Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Продукция.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.МатериалыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиМатериалы;
	Элементы.ПродукцияСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиПродукция;
	
	//++ НЕ УТКА
	СкрыватьОтмененныеСтрокиВыходныеИзделияЭтапов = Настройки.Получить("СкрыватьОтмененныеСтрокиВыходныеИзделияЭтапов");
	
	Если СкрыватьОтмененныеСтрокиВыходныеИзделияЭтапов Тогда
		Элементы.РедактированиеЭтаповВыходныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.РедактированиеЭтаповВыходныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.РедактированиеЭтапов_Продукция_СкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиВыходныеИзделияЭтапов;	
	
	СкрыватьОтмененныеСтрокиПобочныеИзделияЭтапов = Настройки.Получить("СкрыватьОтмененныеСтрокиПобочныеИзделияЭтапов");
	
	Если СкрыватьОтмененныеСтрокиПобочныеИзделияЭтапов Тогда
		Элементы.РедактированиеЭтаповПобочныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.РедактированиеЭтаповПобочныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.РедактированиеЭтапов_Отходы_СкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиПобочныеИзделияЭтапов;	
	//-- НЕ УТКА
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Настройки.Удалить("Объект.НеОтгружатьЧастями");
		Настройки.Удалить("Объект.ПоступлениеОднойДатой");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			Данные = МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалы Тогда
				ОбработатьШтрихкоды(Данные, "Материалы");
			Иначе
				ОбработатьШтрихкоды(Данные, "Продукция");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалы Тогда
			ОбработатьШтрихкоды(ДанныеШтрихкодов, "Материалы");
		Иначе
			ОбработатьШтрихкоды(ДанныеШтрихкодов, "Продукция");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВзаиморасчетыКлиент.НуженВызовОбработкиОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ИзмененаОплатаСервер(ИмяСобытия, Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииМодифицированностиФормы", 1);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ФормаМодифицирована = Неопределено;
	Подключаемый_ПриИзмененииМодифицированностиФормы();
	
	ПараметрыОповещения = Новый Массив;
	Если Объект.ПереработкаПоЗаказу Тогда
		Для каждого ДанныеСтроки Из Объект.Услуги Цикл
			ПараметрыОповещения.Добавить(ДанныеСтроки.Распоряжение);
		КонецЦикла;
		Для каждого ЭлементСписка Из ИсходныеРаспоряжения Цикл
			Если ПараметрыОповещения.Найти(ЭлементСписка.Значение) = Неопределено Тогда
				ПараметрыОповещения.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Оповестить("Запись_ЗаказПереработчику", ПараметрыОповещения, Объект.Ссылка);
	ОповеститьОбИзменении(Объект.Ссылка);
	ОбеспечениеВДокументахКлиент.ПослеЗаписи(ЭтотОбъект, "Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов");
	ВзаиморасчетыКлиент.ФормаПослеЗаписи(ЭтаФорма);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказПереработчику.Форма.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспеченияЗаказов.Форма.Форма" Тогда
		
		Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства") Тогда
			
			//++ НЕ УТКА
			АдресТаблицыДвижений = ЗаполнитьОбеспечениеЭтапаИзФормыСостоянияОбеспечения(
				ВыбранноеЗначение.КодДействия,
				ВыбранноеЗначение.АдресАналитик,
				ВыбранноеЗначение.ПараметрыЗаполнения);
			//-- НЕ УТКА
				
		Иначе
			
			АдресТаблицыДвижений = ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(
				ВыбранноеЗначение.КодДействия,
				ВыбранноеЗначение.АдресАналитик,
				ВыбранноеЗначение.ПараметрыЗаполнения);
				
		КонецЕсли;
			
		// Возврат управления в форму обработки состояния обеспечения.
		ВыполнитьОбработкуОповещения(ВыбранноеЗначение.ВыполняемоеОповещение, АдресТаблицыДвижений);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		Если ВыбранноеЗначение.ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
			//++ НЕ УТКА
			НоменклатураКлиент.ОбработатьУказаниеСерии(
					ЭтаФорма, 
					ПараметрыУказанияСерийРедактированиеЭтапов[ВыбранноеЗначение.ИмяТЧ], 
					ВыбранноеЗначение,
					Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные);
			//-- НЕ УТКА
		Иначе
			НоменклатураКлиент.ОбработатьУказаниеСерии(
					ЭтаФорма, 
					ПараметрыУказанияСерий, 
					ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалы Тогда
		
			ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение,"Материалы");
			
		ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалыЭтапов Тогда
			
			ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение,"РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
			
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия" Тогда
		
		РезультатОтмены = СкорректироватьСтрокиЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена неотработанных строк';
											|en = 'Cancel unfulfilled lines'"), , РезультатОтмены.Оповещение);
		
	ИначеЕсли ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВводДолиСтоимости" Тогда
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		ОбработкаВводаДолиСтоимости(ТекущийЭлемент, ТекущиеДанные, ВыбранноеЗначение);
		
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦены)
		И (Объект.ВозвратныеОтходы.Количество() + Объект.Материалы.Количество()) > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВидЦеныПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru = 'Перезаполнить цены в табличных частях документа?';
																									|en = 'Refill prices in the tables of the document?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КодОтвета = РезультатВопроса;
    
    Если КодОтвета = КодВозвратаДиалога.Да Тогда
        
        ЦеныРассчитаны = Ложь;
        ПриИзмененииВидаЦеныСервер(ЦеныРассчитаны);
        
        ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьВидЦенПоУмолчаниюПриИзменении(Элемент)
	
	Если ЗаполнятьВидыЦенПоУмолчанию Тогда
		
		ДоступныеВидыЦен = ОпределитьДоступныеВидыЦен();
		
		Если ДоступныеВидыЦен.Количество() = 1 Тогда
			
			Объект.ВидЦены = ДоступныеВидыЦен[0];
			
		Иначе
			
			ЗаполнятьВидыЦенПоУмолчанию = Ложь;
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не найден вид цен по умолчанию';
														|en = 'Default price type is not found'"));
			Возврат;
			
		КонецЕсли;
		
		Если (Объект.ВозвратныеОтходы.Количество() + Объект.Материалы.Количество()) > 0 Тогда
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ЗаполнятьВидЦенПоУмолчаниюПриИзмененииЗавершение", ЭтотОбъект),
				НСтр("ru = 'Перезаполнить цены в табличных частях документа?';
					|en = 'Refill prices in the tables of the document?'"),
				РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		
		Объект.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьВидЦенПоУмолчаниюПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КодОтвета = РезультатВопроса;
    
    Если КодОтвета = КодВозвратаДиалога.Да Тогда
        
        ЦеныРассчитаны = Ложь;
        ПриИзмененииВидаЦеныСервер(ЦеныРассчитаны);
        
        ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы, Объект);
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	ПриИзмененииКонтактногоЛицаСервер(ПартнерИзменился);
	
	Если ПартнерИзменился И Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы, Объект);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВходящегоДокументаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьНаличиеЗаказовПоДаннымПереработчика(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ПриИзмененииДоговораСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Согласован 
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КИсполнению")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.Закрыт") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	ПриИзмененииСтатусаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	СпособРаспределенияЗатратНаВыходныеИзделияПриИзмененииНаСервере();
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ПересчитатьСуммы = Истина;
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ПересчитатьСуммы = Ложь;
			
		ИначеЕсли ВалютаДокумента = Объект.Валюта Тогда
			ПересчитатьСуммы = Ложь;
			
		ИначеЕсли Объект.Сумма = 0
				И Объект.ВозвратныеОтходы.Итог("Цена") = 0
				И Объект.Материалы.Итог("Цена") = 0 
				И Объект.Услуги.Итог("Сумма") = 0 Тогда
				
			ПересчитатьСуммы = Ложь;
			
		КонецЕсли;
		
		Если ПересчитатьСуммы Тогда
			
			ТекстВопроса = НСтр("ru = 'Пересчитать суммы в документе в валюту ""%Валюта%""?';
								|en = 'Convert amounts in the document into currency ""%Валюта%""?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Валюта%", Объект.Валюта);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПересчитатьСуммыПриИзмененииВалюты", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
		ВалютаПриИзмененииЗавершение(ПересчитатьСуммы);
		
	Иначе
		
		ВалютаДокумента = Объект.Валюта;
		ВалютаПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелаемаяДатаПоступленияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МаксДатаАванса = МаксимальнаяДатаАванса();
	
	Если ЗначениеЗаполнено(МаксДатаАванса) Тогда
		
		ПредставлениеМаксДатаАванса = НСтр("ru = '%МаксДатаАванса%';
											|en = '%МаксДатаАванса%'");
		ПредставлениеМаксДатаАванса = СтрЗаменить(ПредставлениеМаксДатаАванса, "%МаксДатаАванса%", Формат(МаксДатаАванса,"ДЛФ=DD"));
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(МаксДатаАванса, ПредставлениеМаксДатаАванса);
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ЖелаемаяДатаПоступленияНачалоВыбораИзСпискаЗавершение", ЭтотОбъект), СписокВыбора, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, "Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтгружатьЧастямиПриИзменении(Элемент)
	
	НеОтгружатьЧастямиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	ПриИзмененииПоступлениеОднойДатойСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	
	ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Менеджер");
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммыУслугиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСуммыУслугиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДССервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, СтавкаНДС, Сумма, СуммаНДС, СуммаСНДС");
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Объект);
	ТекущаяСтрока.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Объект.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Объект.СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
	Объект.СуммаНДС = ТекущаяСтрока.СуммаНДС;
	Объект.СуммаСНДС = ТекущаяСтрока.СуммаСНДС;
	ХарактеристикиИспользуются = ТекущаяСтрока.ХарактеристикиИспользуются;
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
	
	Объект.ПроверятьУказаниеРаботы = Истина;
	
	ОбновитьДанныеТаблицыУслуг(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	ОбновитьДанныеТаблицыУслуг(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяКалькуляцииПриИзменении(Элемент)
	
	ОбновитьДанныеТаблицыУслуг(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаЗатратПриИзменении(Элемент)
	
	Если ГруппировкаЗатратДоИзменения = Объект.ГруппировкаЗатрат Тогда
		Возврат;
	КонецЕсли;
	
	Если (Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства")
			ИЛИ ГруппировкаЗатратДоИзменения = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства")
			//++ Устарело_Производство21
			ИЛИ Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство")
			ИЛИ ГруппировкаЗатратДоИзменения = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство")
			//-- Устарело_Производство21 
			)
		И (Объект.Продукция.Количество() <> 0 
			ИЛИ Объект.ВозвратныеОтходы.Количество() <> 0
			ИЛИ Объект.Материалы.Количество() <> 0
			//++ НЕ УТКА
			ИЛИ РедактированиеЭтапов.ВыходныеИзделия.Количество() <> 0 
			ИЛИ РедактированиеЭтапов.ПобочныеИзделия.Количество() <> 0
			ИЛИ РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.Количество() <> 0
			//-- НЕ УТКА
			)
			Тогда
		
		ТекстВопроса = НСтр("ru = 'Продукция, возвратные отходы, сырье и материалы будут очищены.
			|Изменить группировку затрат?';
			|en = 'Items, recyclable waste, raw and consumable materials will be cleared.
			|Change cost grouping?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ГруппировкаЗатратПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ГруппировкаЗатратПриИзмененииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИменаРеквизитовАдресовДоставки = ДоставкаТоваровКлиентСервер.ИменаРеквизитовАдресовДоставки("АдресДоставки");
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
		Элемент,
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставки],
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставкиЗначенияПолей]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	ИменаРеквизитовАдресовДоставки = ДоставкаТоваровКлиентСервер.ИменаРеквизитовАдресовДоставки("АдресДоставки");
	
	ДоставкаТоваровКлиент.ОчиститьПредставлениеАдреса(
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставки],
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставкиЗначенияПолей],
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставкиЗначение]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИменаРеквизитовАдресовДоставки = ДоставкаТоваровКлиентСервер.ИменаРеквизитовАдресовДоставки("АдресДоставки");
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
		Элемент,
		Объект,
		ИменаРеквизитовАдресовДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПеревозчикаПриИзменении(Элемент)
	
	ИменаРеквизитовАдресовДоставки = ДоставкаТоваровКлиентСервер.ИменаРеквизитовАдресовДоставки("АдресДоставкиПеревозчика");
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
		Элемент,
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставки],
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставкиЗначенияПолей]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПеревозчикаОчистка(Элемент, СтандартнаяОбработка)
	
	ИменаРеквизитовАдресовДоставки = ДоставкаТоваровКлиентСервер.ИменаРеквизитовАдресовДоставки("АдресДоставкиПеревозчика");
	
	ДоставкаТоваровКлиент.ОчиститьПредставлениеАдреса(
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставки],
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставкиЗначенияПолей],
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставкиЗначение]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПеревозчикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИменаРеквизитовАдресовДоставки = ДоставкаТоваровКлиентСервер.ИменаРеквизитовАдресовДоставки("АдресДоставкиПеревозчика");
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
		Элемент,
		Объект,
		ИменаРеквизитовАдресовДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПеревозчикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПеревозчикаПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ВзаиморасчетыКлиент.ОбновитьТекстГиперссылкиЭтапыОплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаказыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ДобавитьРаспоряжения" Тогда
		СтандартнаяОбработка = Ложь;
		//++ НЕ УТКА
		ОткрытьПодборРаспоряжений();
		//-- НЕ УТКА
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПроизводствоОднойДатойПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Если НЕ ЗаблокироватьЭтапы() Тогда
		РедактированиеЭтапов.ПроизводствоОднойДатой = НЕ РедактированиеЭтапов.ПроизводствоОднойДатой;
		Возврат;
	КонецЕсли;
	
	ПроизводствоОднойДатойПриИзмененииНаСервере();
	//-- НЕ УТКА
	
	Возврат; // В КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповДатаПроизводстваПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Объект.ДатаПоступления = РедактированиеЭтапов.ДатаПроизводства;
	ЗаполнитьДатыПроизводстваЭтапаСервер(РедактированиеЭтапов.ДатаПроизводства);
	//-- НЕ УТКА
	
	Возврат; // В КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповНеОтгружатьЧастямиПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Если НЕ ЗаблокироватьЭтапы() Тогда
		РедактированиеЭтапов.НеОтгружатьЧастями = НЕ РедактированиеЭтапов.НеОтгружатьЧастями;
		Возврат;
	КонецЕсли;
	
	НеОтгружатьЧастямиПриИзмененииНаСервере();
	
	//-- НЕ УТКА
	
	Возврат; // В КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповДатаОтгрузкиПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Объект.ДатаОтгрузки = РедактированиеЭтапов.ДатаОтгрузки;
	ЗаполнитьДатуВТЧ("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами", "ДатаОтгрузки", РедактированиеЭтапов.ДатаОтгрузки);
	//-- НЕ УТКА
	
	Возврат; // В КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзменении(Элемент)
	
	СпособРаспределенияЗатратНаВыходныеИзделияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкаПодДеятельностьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспеченияДинамическаяСтруктураНажатие(Элемент)
	
	//++ НЕ УТКА
	Если Модифицированность Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаписатьИОткрытьУкомплектованностьЗавершение", ЭтотОбъект),
			НСтр("ru = 'Необходимо записать документ для выполнения операции. Записать документ?';
				|en = 'You need to save the document before running the operation. Do you want to save it?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьУкомплектованность();
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // В КА пустой обработчик
	
КонецПроцедуры

//++ НЕ УТКА
&НаКлиенте
Процедура ЗаписатьИОткрытьУкомплектованностьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		ОткрытьУкомплектованность();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУкомплектованность()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Этап", СписокЗаказов);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ПоЭтапуКонтекст");
	
	ОткрытьФорму("Отчет.УкомплектованностьЗаказов.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры
//-- НЕ УТКА

#Область Обеспечение

&НаКлиенте
Процедура МатериалыГиперссылкаСостояниеОбеспеченияНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыГиперссылкаСостояниеОбеспеченияОтгружаетсяНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыГиперссылкаСостояниеОбеспеченияПроблемаНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыГиперссылкаСостояниеОбеспеченияЗаказовНаПроизводствоНажатие(Элемент)
	
	//++ НЕ УТКА

	//++ Устарело_Производство21
	МассивЗаказов = СписокЗаказов.ВыгрузитьЗначения();
	Если МассивЗаказов.Количество() = 1 Тогда
		
		ПараметрыФормы = ОбеспечениеВДокументахКлиент.ПараметрыФормыСостояниеОбеспеченияЗаказов("СПИСОКЗАКАЗОВ");
		ПараметрыФормы.Заказы = МассивЗаказов[0];
		ОткрытьФорму("Обработка.СостояниеОбеспеченияЗаказовНаПроизводство.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор);
			
	Иначе
		
		ПараметрыФормы = ОбеспечениеВДокументахКлиент.ПараметрыФормыСостояниеОбеспеченияЗаказов("СПИСОКЗАКАЗОВ");
		ПараметрыФормы.Заказы = МассивЗаказов;
		ОткрытьФорму("Обработка.СостояниеОбеспеченияЗаказов.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			Неопределено,
			РежимОткрытияОкнаФормы.Независимый);
			
	КонецЕсли;
	//-- Устарело_Производство21

	//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЭтаповГиперссылкаСостояниеОбеспеченияОтгружаетсяНажатие(Элемент)
	
	//++ НЕ УТКА
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщийЭтапы();
	//-- НЕ УТКА
	
	Возврат; // в УТ и КА обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЭтаповГиперссылкаСостояниеОбеспеченияПроблемаНажатие(Элемент)
	
	//++ НЕ УТКА
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщийЭтапы();
	//-- НЕ УТКА
	
	Возврат; // в УТ и КА обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЭтаповГиперссылкаСостояниеОбеспеченияНажатие(Элемент)
	
	//++ НЕ УТКА
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщийЭтапы();
	//-- НЕ УТКА
	
	Возврат; // в УТ и КА обработчик пустой
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияПриИзменении(Элемент)
	
	ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//++ НЕ УТКА
	Если Объект.ПереработкаПоЗаказу И Объект.Услуги.Количество() = 0 Тогда
		// Если нет ниодного заказа, то нужно выбрать заказ
		// Если заказ есть, то выполняется стандартное добавление строки.
		Отказ = Истина;
		ОткрытьПодборРаспоряжений();
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Продукция, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент)
	
	ПродукцияПослеУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение, "Продукция");
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Продукция, ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, ТекущиеДанные, "Объект.Продукция");
	
	ОграничениеТипаПолучателя(ТекущиеДанные, "ПродукцияПолучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если Поле = Элементы.МатериалыЦена Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И Не Объект.Согласован Тогда
			
			ОчиститьСообщения();
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для редактирования цены очистите вид цены';
				|en = 'To edit the price, clear the price type'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Продукция", ТекущиеДанные.НомерСтроки, "ВидЦены"));
			
		КонецЕсли;
		
	ИначеЕсли (Поле = Элементы.ПродукцияДоляСтоимости
			Или Поле = Элементы.ПродукцияДоляСтоимостиПроцент
			Или Поле = Элементы.ПродукцияЕстьОшибкиЗаполненияДолиСтоимости)
		И Объект.СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока
		И ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	КэшСтроки = РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Продукция, ЭтотОбъект);
	
	Если ТекущиеДанные <> Неопределено И Объект.ПоступлениеОднойДатой Тогда
		ТекущиеДанные.ДатаПоступления = Объект.ДатаПоступления;
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		
		ЗаполнитьНомерГруппыЗатратВСтрокеПродукцииПередОкончаниемРедактирования(ТекущиеДанные, Объект, КэшСтроки, НоваяСтрока);
		
		РезультатЗаполнения = ЗаполнитьУслугиПоПродукции(Объект);
		ПриИзмененииСуммыУслуг(ЭтаФорма);
		Если РезультатЗаполнения.УдаленыСтрокиМатериалов Тогда
			ОбновитьКолонкуДоступноСервер();
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Если НоваяСтрока Тогда
		
		Если Не ОтменаРедактирования Тогда
			ЗаполнитьПолучателяПоУмолчанию(ТекущиеДанные);
		КонецЕсли;
		
		ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
		
	КонецЕсли;
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элемент, ПараметрыРаспределенияЗатрат, КэшСтроки, НоваяСтрока) Тогда
		ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
		Группировки = Новый Массив;
		Группировки.Добавить(КэшСтроки.НомерГруппыЗатрат);
		Группировки.Добавить(ТекущиеДанные.НомерГруппыЗатрат);
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Группировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));

	ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(Объект.Подразделение, СтруктураДействий, "Получатель");
	
	ДоходыИРасходыКлиентСервер.ВставитьДействиеЗаполнитьСтатьюАналитикуРасходовНоменклатуры(
		СтруктураДействий,
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"),
		Объект.Организация,
		"Объект.Продукция");
	
	ПродукцияНоменклатураПриИзмененииНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииСписатьНаРасходы("Продукция");
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции")
		ИЛИ Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям") Тогда
		
		ПродукцияХарактеристикаПриИзмененииНаСервере(Элементы.Продукция.ТекущаяСтрока);
		
	КонецЕсли;
	
	ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка");
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьГруппуЗатрат("Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПолучательПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	ПриИзмененииПолучателя(ТекущиеДанные);

	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСписатьНаРасходыПриИзменении(Элемент)
	
	ПриИзмененииСписатьНаРасходы("Продукция");

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтатьяРасходовВыбор(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтатьяРасходовПриИзменении(Элемент)
	
	СтатьяРасходовПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыПриИзменении(Элемент)
	
	ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение, "ВозвратныеОтходы");
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		
		Если Не Копирование Тогда
			ТекущиеДанные.ВидЦены = Объект.ВидЦены;
		КонецЕсли;
		
	КонецЕсли;
	
	ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, ТекущиеДанные, "Объект.ВозвратныеОтходы");
	
	ОграничениеТипаПолучателя(ТекущиеДанные, "ВозвратныеОтходыПолучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ВозвратныеОтходыЦена Тогда
		
		ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И Не Объект.Согласован Тогда
			
			ОчиститьСообщения();
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Для редактирования цены очистите вид цены';
					|en = 'To edit the price, clear the price type'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ВозвратныеОтходы", ТекущиеДанные.НомерСтроки, "ВидЦены"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока
		И ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И Объект.ПоступлениеОднойДатой Тогда
		ТекущиеДанные.ДатаПоступления = Объект.ДатаПоступления;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Если НоваяСтрока Тогда
		
		Если Не ОтменаРедактирования Тогда
			ЗаполнитьПолучателяПоУмолчанию(ТекущиеДанные);
		КонецЕсли;
		
		ТребуетсяУточнитьДанныеРаспоряжения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(Объект.Подразделение, СтруктураДействий, "Получатель");
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	ДоходыИРасходыКлиентСервер.ВставитьДействиеЗаполнитьСтатьюАналитикуРасходовНоменклатуры(
		СтруктураДействий,
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"),
		Объект.Организация,
		"Объект.ВозвратныеОтходы");
	
	ВозвратныеОтходыНоменклатураПриИзмененииНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииСписатьНаРасходы("ВозвратныеОтходы");
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("ВозвратныеОтходы", СтруктураДействий);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И ТекущаяСтрока.Цена <> 0 Тогда
		ТекущаяСтрока.ВидЦены = Неопределено;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьГруппуЗатрат("ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ПриИзмененииПолучателя(ТекущиеДанные);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыСписатьНаРасходыПриИзменении(Элемент)
	
	ПриИзмененииСписатьНаРасходы("ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтатьяРасходовВыбор(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыСтатьяРасходовПриИзменении(Элемент)
	
	СтатьяРасходовПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСырьеИМатериалы

&НаКлиенте
Процедура МатериалыПослеУдаления(Элемент) 
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока
		И ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И Объект.НеОтгружатьЧастями Тогда
		ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	Если НоваяСтрока Тогда
		ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Материалы, ЭтотОбъект);
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.ВидЦены = Объект.ВидЦены;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		
		СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
				ИспользоватьНесколькоСкладов, 
				СкладПоУмолчанию, 
				ТекущиеДанные);
				
	КонецЕсли;
	
	Если Копирование Тогда
		СтруктураДействий = Новый Структура;
		ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ВариантОбеспечения,Доступно,СкладОбязателен,ДатаОтгрузкиОбязательна");
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказПереработчику.Форма.ФормаДокумента.Элементы.Материалы.Выбор");
	
	Если Элемент.ТекущийЭлемент = Элементы.МатериалыДоступно И Не ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерийМатериалы(Неопределено);
			
		Если ПараметрыФормы <> Неопределено Тогда
			ОткрытьФорму("Обработка.ЗапросКоличестваИСерий.Форма", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.МатериалыЦена Тогда
		
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И Не Объект.Согласован Тогда
			
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Для редактирования цены очистите вид цены';
					|en = 'To edit the price, clear the price type'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Материалы", ТекущиеДанные.НомерСтроки, "ВидЦены"));
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ПродукцияГруппаЗатрат Тогда
		
		ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
		Если ТекущиеДанные.НомерГруппыЗатрат = 0 Тогда
			СтандартнаяОбработка = Ложь;
			ВыбратьГруппуЗатрат("Продукция");
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ВозвратныеОтходыГруппаЗатрат Тогда
		
		ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
		Если ТекущиеДанные.НомерГруппыЗатрат = 0 Тогда
			СтандартнаяОбработка = Ложь;
			ВыбратьГруппуЗатрат("ВозвратныеОтходы");
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.МатериалыГруппаЗатрат Тогда
		
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		Если ТекущиеДанные.НомерГруппыЗатрат = 0 Тогда
			СтандартнаяОбработка = Ложь;
			ВыбратьГруппуЗатрат("Материалы");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	
	СтруктураСкладМатериалов = Новый Структура("Склад", СкладПоУмолчанию);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(СтруктураСкладМатериалов, Ложь));
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ВариантОбеспечения,ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Материалы"));

	ДобавитьДействиеПроверитьЗаполнитьСклад("Материалы", ЭтаФорма, СтруктураДействий);
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ВариантОбеспечения,ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Материалы"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("Материалы", СтруктураДействий);
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ВариантОбеспечения,ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Материалы.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Материалы.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьГруппуЗатрат("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;
	
КонецПроцедуры
&НаКлиенте
Процедура МатериалыСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерийМатериалы(ОбеспечениеВДокументахКлиентСервер.РежимПодборСкладов());
	
	Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерииМатериалы", ЭтотОбъект, ПараметрыФормы));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВариантОбеспеченияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияОбработкаВыбора(
		ЭтотОбъект,
		Элементы.Материалы.ТекущиеДанные,
		ВыбранноеЗначение);
		
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВариантОбеспеченияПриИзменении(Элемент)
	
	Перем ПараметрыФормы;
	Если ОбеспечениеВДокументахКлиент.ОткрытьФормуВыбораСкладаИСерий(ЭтотОбъект) Тогда
		ВариантПолученияПараметров = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия();
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерийМатериалы(ВариантПолученияПараметров); // вызов сервера
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		ПараметрыФормы,
		"ОбработатьВыборСкладаИСерииМатериалы",
		Истина,
		"МатериалыВариантОбеспеченияПриИзмененииПослеВопроса");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВариантОбеспеченияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбособленноПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Материалы.ТекущиеДанные;
	ОбеспечениеВДокументахКлиент.ОбособленноПриИзменении(СтрокаТаблицы);
	
	СтруктураДействий = Новый Структура();
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	Если Поле = Элементы.УслугиГруппаЗатрат Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущиеДанные.Распоряжение) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Распоряжение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Услуги"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Объект.ПроверятьУказаниеРаботы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРедактированиеЭтаповВыходныеИзделия

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	
	// Если группировка по этапам, то доли всегда редактируются в отдельной форме.
	Если (Поле = Элементы.РедактированиеЭтаповВыходныеИзделияДоляСтоимости
			Или Поле = Элементы.РедактированиеЭтаповВыходныеИзделияДоляСтоимостиПроцент
			Или Поле = Элементы.РедактированиеЭтаповВыходныеИзделияЕстьОшибкиЗаполненияДолиСтоимости) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные);
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	
	УстановитьДоступностьНаправленияДеятельности(ЭтаФорма);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "РедактированиеЭтаповВыходныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПередНачаломИзменения(Элемент, Отказ)
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//++ НЕ УТКА
	Если Объект.ПереработкаПоЗаказу И Объект.Услуги.Количество() = 0 Тогда
		// Если нет ниодного заказа, то нужно выбрать заказ
		// Если заказ есть, то выполняется стандартное добавление строки.
		Отказ = Истина;
		ОткрытьПодборРаспоряжений();
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.РедактированиеЭтаповВыходныеИзделия, ЭтотОбъект);
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		
		Если Не Копирование Тогда
					
			ЗаполнитьГруппуЗатратВНовойСтроке(ТекущиеДанные, ЭтаФорма);
			ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные, ЭтаФорма);
			ЗаполнитьСлужебныеРеквизитыВыходныеИзделияЭтапаВСтроке(ТекущиеДанные, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, ТекущиеДанные, "РедактированиеЭтапов.ВыходныеИзделия");
	
	ОграничениеТипаПолучателя(ТекущиеДанные, "РедактированиеЭтаповВыходныеИзделияПолучатель");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока
		И ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	КэшСтроки = РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.РедактированиеЭтаповВыходныеИзделия, ЭтотОбъект);
	
	РассчитатьПроцентРаспределенияЗатрат = ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
		Элемент,
		ПараметрыРаспределенияЗатрат,
		КэшСтроки,
		НоваяСтрока);
	
	СтруктураПоиска = Новый Структура("Распоряжение", ТекущиеДанные.Распоряжение);
	НайденныеСтроки = РедактированиеЭтапов.Этапы.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ОбновитьПараметрыНазначений = Ложь;
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтапСтруктура, НайденныеСтроки[0],, "Распоряжение, Заказ");
		ЭтапСтруктура.Распоряжение = НайденныеСтроки[0].Заказ;
		ОбновитьПараметрыНазначений = ОбеспечениеПроизводстваКлиентСервер.НеобходимоОбновитьПараметрыЗаполненияНазначенийПриИзмененииИзделий(
			ЭтапСтруктура,
			ТекущиеДанные,
			КэшСтроки);
	КонецЕсли;
	
	Если РассчитатьПроцентРаспределенияЗатрат 
		ИЛИ ОбновитьПараметрыНазначений Тогда
			
		Группировки = Новый Массив;
		Группировки.Добавить(КэшСтроки.Распоряжение);
		Группировки.Добавить(ТекущиеДанные.Распоряжение);
		РедактированиеЭтаповВыходныеИзделияПередОкончаниемРедактированияНаСервере(
			Группировки,
			РассчитатьПроцентРаспределенияЗатрат,
			ОбновитьПараметрыНазначений);
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		Если Не ОтменаРедактирования Тогда
		
			ПризнакВыполнения = Ложь;
			ЗаполнитьПолучателяПоУмолчанию(ТекущиеДанные, ПризнакВыполнения);
			
			Если ПризнакВыполнения Тогда
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая", Новый Структура("ИмяПоляСклад", "Получатель"));
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
				
				ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;	
		
		КонецЕсли;
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

//++ НЕ УТКА
&НаСервере
Процедура РедактированиеЭтаповВыходныеИзделияПередОкончаниемРедактированияНаСервере(Группировки, РассчитатьПроцентРаспределенияЗатрат, ОбновитьПараметрыНазначений)
	
	Если РассчитатьПроцентРаспределенияЗатрат Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Группировки);
	КонецЕсли;
	
	Если ОбновитьПараметрыНазначений Тогда
		ЗаполнитьПараметрыВыбораНазначенийЭтапов();
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТКА

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПослеУдаления(Элемент)
	
	//++ НЕ УТКА
	РедактированиеЭтаповВыходныеИзделияПослеУдаленияНаСервере();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

//++ НЕ УТКА
&НаСервере
Процедура РедактированиеЭтаповВыходныеИзделияПослеУдаленияНаСервере()
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	ЗаполнитьПараметрыВыбораНазначенийЭтапов();
	
КонецПроцедуры
//-- НЕ УТКА

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииНоменклатурыЭтапа(ТекущиеДанные, "ВыходныеИзделия");
	
	ПриИзмененииСписатьНаРасходы("РедактированиеЭтаповВыходныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияХарактеристикаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущаяСтрока = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	
	СтруктураПоиска = Новый Структура("Распоряжение", ТекущаяСтрока.Распоряжение);
	НайденныеСтроки = РедактированиеЭтапов.Этапы.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти", ЭтаФорма.ИмяФормы, "РедактированиеЭтаповВыходныеИзделия"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииУпаковкиСтрокиЭтапа(ТекущиеДанные, "РедактированиеЭтаповВыходныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковокВТЧЭтапа(ТекущиеДанные, "РедактированиеЭтаповВыходныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПолучательПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая", Новый Структура("ИмяПоляСклад", "Получатель"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ВыбратьГруппуЗатрат("РедактированиеЭтаповВыходныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;
	ТекущиеДанные.Распоряжение = Неопределено;
	ЗаполнитьСлужебныеРеквизитыВыходныеИзделияЭтапаВСтроке(ТекущиеДанные, ЭтаФорма);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияОтмененоПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	ИзделияЭтаповОтмененоПриИзменении(ТекущиеДанные);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияЭтапПотребительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	ЭтапПотребительНачалоВыбора(ТекущиеДанные, "ВыходныеИзделия")
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияСписатьНаРасходыПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииСписатьНаРасходы("РедактированиеЭтаповВыходныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	СтатьяРасходовВыбор(Элемент, СтандартнаяОбработка);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияСтатьяРасходовПриИзменении(Элемент)
	
	//++ НЕ УТКА
	СтатьяРасходовПриИзменении(Элемент);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРедактированиеЭтаповПобочныеИзделия

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Если РедактированиеЭтапов.ЕстьВыпускающийЭтап Тогда
		Элементы.ГруппаРедактированиеЭтаповПобочныеИзделия.Заголовок =
			?(РедактированиеЭтапов.ПобочныеИзделия.Количество() = 0,
			НСтр("ru = 'Побочный и промежуточный выпуск по фиксированной стоимости';
				|en = 'Side and intermediate release at fixed cost'"),
			СтрШаблон(НСтр("ru = 'Побочный и промежуточный выпуск по фиксированной стоимости (%1)';
							|en = 'Side and intermediate release at fixed cost (%1)'"), РедактированиеЭтапов.ПобочныеИзделия.Количество()));
	КонецЕсли;
	ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "РедактированиеЭтаповПобочныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияПередНачаломИзменения(Элемент, Отказ)
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//++ НЕ УТКА
	Если Объект.ПереработкаПоЗаказу И Объект.Услуги.Количество() = 0 Тогда
		// Если нет ниодного заказа, то нужно выбрать заказ
		// Если заказ есть, то выполняется стандартное добавление строки.
		Отказ = Истина;
		ОткрытьПодборРаспоряжений();
		Возврат;
	КонецЕсли; 
	
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		
		Если Не Копирование Тогда
			
			ЗаполнитьГруппуЗатратВНовойСтроке(ТекущиеДанные, ЭтаФорма);
			ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные, ЭтаФорма);
			ЗаполнитьСлужебныеРеквизитыПобочныеИзделияЭтапаВСтроке(ТекущиеДанные, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, ТекущиеДанные, "РедактированиеЭтапов.ПобочныеИзделия");
	
	ОграничениеТипаПолучателя(ТекущиеДанные, "РедактированиеЭтаповПобочныеИзделияПолучатель");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияНоменклатураПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииНоменклатурыЭтапа(ТекущиеДанные, "ВыходныеИзделия");
	
	ПриИзмененииСписатьНаРасходы("РедактированиеЭтаповПобочныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияХарактеристикаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущаяСтрока = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "РедактированиеЭтаповПобочныеИзделия"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияУпаковкаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииУпаковкиСтрокиЭтапа(ТекущиеДанные, "РедактированиеЭтаповПобочныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковокВТЧЭтапа(ТекущиеДанные, "РедактированиеЭтаповПобочныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияПолучательПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая", Новый Структура("ИмяПоляСклад", "Получатель"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);	
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ВыбратьГруппуЗатрат("РедактированиеЭтаповПобочныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;
	ТекущиеДанные.Распоряжение = Неопределено;
	ЗаполнитьСлужебныеРеквизитыПобочныеИзделияЭтапаВСтроке(ТекущиеДанные, ЭтаФорма);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияОтмененоПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	ИзделияЭтаповОтмененоПриИзменении(ТекущиеДанные);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияЭтапПотребительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	ЭтапПотребительНачалоВыбора(ТекущиеДанные, "ПобочныеИзделия")
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока
		И ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТКА
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		
		ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
		
		ПризнакВыполнения = Ложь;
		ЗаполнитьПолучателяПоУмолчанию(ТекущиеДанные, ПризнакВыполнения);
		
		Если ПризнакВыполнения Тогда
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая", Новый Структура("ИмяПоляСклад", "Получатель"));
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
						
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);	
			
		КонецЕсли;	
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияСписатьНаРасходыПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииСписатьНаРасходы("РедактированиеЭтаповПобочныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	СтатьяРасходовВыбор(Элемент, СтандартнаяОбработка);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияСтатьяРасходовПриИзменении(Элемент)
	
	//++ НЕ УТКА
	СтатьяРасходовПриИзменении(Элемент);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРедактированиеЭтаповОбеспечениеМатериаламиИРаботами

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	Если Поле = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиДоступно И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбеспечениеМатериаламиИРаботамиВыборДоступно();
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПередНачаломИзменения(Элемент, Отказ)
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//++ НЕ УТКА
	Если Объект.ПереработкаПоЗаказу И Объект.Услуги.Количество() = 0 Тогда
		// Если нет ниодного заказа, то нужно выбрать заказ
		// Если заказ есть, то выполняется стандартное добавление строки.
		Отказ = Истина;
		ОткрытьПодборРаспоряжений();
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	ПередУдалениемСтрокВходящихВНаборы();
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//++ НЕ УТКА
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами, ЭтотОбъект);
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьГруппуЗатратВНовойСтроке(ТекущиеДанные, ЭтаФорма);
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаПриНачалеРедактирования(
		ЭтаФорма, ТекущиеДанные, НоваяСтрока, Копирование);
	
	ОбеспечениеМатериаламиИРаботамиПриНачалеРедактирования(ТекущиеДанные, НоваяСтрока, Копирование);
	
	СкладыКлиент.ОбновитьКешированныеЗначения(
		Элемент, 
		КэшированныеЗначения, 
		ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами, 
		Копирование);
		
	Если НоваяСтрока Тогда
		УправлениеДаннымиОбИзделияхКлиент.ОчиститьРеквизитыНабораВСтроке(ТекущиеДанные);
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиНоменклатураПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииНоменклатурыЭтапа(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиХарактеристикаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущаяСтрока = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ТекущаяСтрока.КлючСвязиСпецификация = Неопределено;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьКлючСвязиСпецификации");
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ОбеспечениеМатериаламиИРаботами"));

	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	ПриИзмененииНоменклатурыХарактеристикиВСтрокеВходящейВНабор();
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиУпаковкаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ДанныеСтроки = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ПриИзмененииУпаковкиСтрокиЭтапа(ДанныеСтроки, "ОбеспечениеМатериаламиИРаботами");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиКоличествоУпаковокПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковокВТЧЭтапа(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСерияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущаяСтрока = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(
		ЭтаФорма,
		ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами,
		ВыбранноеЗначение,
		ТекущаяСтрока);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПодборСерийЭтапа(
		Элемент.ТекстРедактирования,
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПроизводитсяПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураПоиска = Новый Структура("Распоряжение", ТекущиеДанные.Распоряжение);
	НайденныеСтроки = РедактированиеЭтапов.Этапы.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура();
	
	ТекущиеДанные.Спецификация = Неопределено;
	Если ТекущиеДанные.Производится Тогда
		СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
			НайденныеСтроки[0],
			ТекущиеДанные,
			ПараметрыВыбораСпецификацийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	КонецЕсли;
	
	СтруктураДействий.Вставить(
		"ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
		НайденныеСтроки[0].ПараметрыЗаполненияНазначений);
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("ЗаказНаПроизводство",           НайденныеСтроки[0].Заказ);
	ПараметрыМетода.Вставить("Подразделение",                 НайденныеСтроки[0].Подразделение);
	ПараметрыМетода.Вставить("Ссылка",                        НайденныеСтроки[0].Распоряжение);
	ПараметрыМетода.Вставить("Статус",                        НайденныеСтроки[0].Статус);
	ПараметрыМетода.Вставить("ЗаказПереработчику",            Объект.Ссылка);
	ПараметрыМетода.Вставить("ПараметрыУказанияСерий",        ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
	ПараметрыМетода.Вставить("Форма",                         ЭтотОбъект);
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства(
		СтруктураДействий,
		ПараметрыМетода,
		ТекущиеДанные);
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"ДоступноВДругихСтроках",
		Новый Структура("Форма", ЭтотОбъект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСпецификацияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураПоиска = Новый Структура("Распоряжение", ТекущиеДанные.Распоряжение);
	НайденныеСтроки = РедактированиеЭтапов.Этапы.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтапСтруктура, РедактированиеЭтапов);
	ЗаполнитьЗначенияСвойств(ЭтапСтруктура, НайденныеСтроки[0],, "Распоряжение, Заказ");
	ЭтапСтруктура.Распоряжение = НайденныеСтроки[0].Заказ;
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("ЗаказНаПроизводство",           НайденныеСтроки[0].Заказ);
	ПараметрыМетода.Вставить("Подразделение",                 НайденныеСтроки[0].Подразделение);
	ПараметрыМетода.Вставить("Ссылка",                        НайденныеСтроки[0].Распоряжение);
	ПараметрыМетода.Вставить("Статус",                        НайденныеСтроки[0].Статус);
	ПараметрыМетода.Вставить("ЗаказПереработчику",            Объект.Ссылка);
	ПараметрыМетода.Вставить("ПараметрыУказанияСерий",        ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
	ПараметрыМетода.Вставить("Форма",                         ЭтотОбъект);
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства(
		СтруктураДействий,
		ПараметрыМетода,
		ТекущиеДанные);
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"ДоступноВДругихСтроках",
		Новый Структура("Форма", ЭтотОбъект));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
		
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСкладПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураДействий = УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаСкладПриИзменении(
		ЭтотОбъект,
		ТекущиеДанные,
		ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами, 
		КэшированныеЗначения);
		
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ВыбратьГруппуЗатрат("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;
	ТекущиеДанные.Распоряжение = Неопределено;
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиОтмененоПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если Не ТекущиеДанные.Отменено Тогда
		ТекущиеДанные.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыПроизводства.ПустаяСсылка");
	КонецЕсли;
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Склад);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий",
		 ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПослеУдаления(Элемент)
	
	//++ НЕ УТКА
	
	ОбновитьКолонкуДоступноСервер();
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
		РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами,
		ДатаОтгрузкиОбязательна,
		СкладОбязателен);
		
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиВариантОбеспеченияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияОбработкаВыбора(
		ЭтотОбъект,
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные,
		ВыбранноеЗначение);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	Перем ПараметрыФормы;
	Если ОбеспечениеВДокументахКлиент.ОткрытьФормуВыбораСкладаИСерий(ЭтотОбъект) Тогда
		ВариантПолученияПараметров = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия();
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерийМатериалыЭтапов(ВариантПолученияПараметров); // вызов сервера
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		ПараметрыФормы,
		"ОбработатьВыборСкладаИСерииМатериалыЭтапов",
		Истина,
		"РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзмененииПослеВопроса");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиВариантОбеспеченияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиОбособленноПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	Строка = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ОбеспечениеВДокументахКлиент.ОбособленноПриИзменении(Строка);
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьНазначениеВЭтапеПроизводства");
	ДобавитьДействияОбеспеченияЭтаповНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиНазначениеОбеспеченияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	Строка = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура();
	ДобавитьДействияОбеспеченияЭтаповНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	СтруктураДействий.Вставить("ЗаполнитьНазначениеВЭтапеПроизводства");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерийМатериалыЭтапов(ОбеспечениеВДокументахКлиентСервер.РежимПодборСкладов());
	
	Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерииМатериалыЭтапов", ЭтотОбъект, ПараметрыФормы));
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиВариантОбеспеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	НовыйМассив = Новый Массив();
	
	НовыйПараметр = Новый ПараметрВыбора("НесколькоСкладов", Истина);
	НовыйМассив.Добавить(НовыйПараметр);
	
	// Недоступен вариант обеспечения Резервировать по мере поступления
	Если ДинамическаяСтруктура <> Неопределено И ДинамическаяСтруктура Тогда
		МассивДействий = ОбеспечениеВДокументахКлиентСервер.ДоступныеДействияДляВыбораОбеспеченияВСтрокеПоУмолчанию();
		Индекс = МассивДействий.Найти(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления"));
		Если Индекс <> Неопределено Тогда
			МассивДействий.Удалить(Индекс);
		КонецЕсли;
		
		ДопустимыеДействия = Новый ФиксированныйМассив(МассивДействий);
		НовыйПараметр = Новый ПараметрВыбора("ДопустимыеДействия", ДопустимыеДействия);
		
		НовыйМассив.Добавить(НовыйПараметр);
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#Область КомандыТЧ_Продукция

&НаКлиенте
Процедура ПродукцияЗаполнитьДатуПоступления(Команда)
	
	Если Элементы.Продукция.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуПоступления("Продукция", Элементы.Продукция.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКопированиеВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Продукция.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена("Продукция");
	
	КоличествоВставленных = Объект.Продукция.Количество() - КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
		
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКопированиеСкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Продукция) Тогда
		СкопироватьСтрокиНаСервере("Продукция");
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Продукция.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ПродукцияОбщееЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Материалы Тогда
			ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "Материалы");
		Иначе
			ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "Продукция");
		КонецЕсли;
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееПодобратьТовары(Команда)
	
	ПодобратьТовар("Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПродукцияОбщееПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, "Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееРазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Продукция;
	ДанныеТаблицы = Объект.Продукция;
	
	Оповещение = Новый ОписаниеОповещения("ПродукцияОбщееРазбитьСтрокуЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееРазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("Продукция", СтруктураДействий);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, ТекущаяСтрока, Объект.СпособРаспределенияЗатратНаВыходныеИзделия);
		
		Группировки = Новый Массив;
		Группировки.Добавить(ТекущаяСтрока.НомерГруппыЗатрат);
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Группировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтменаСтрокОтменитьВыделенныеСтроки(Команда)
	
	Если Не ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(Объект.Продукция,
		НСтр("ru = 'Выпускаемая продукция';
			|en = 'Released products'"), Элементы.Продукция.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовПоставщикам Тогда
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора",,,,,,
			Новый ОписаниеОповещения("ПродукцияОтменитьВыделенныеСтрокиЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	ПродукцияОтменитьВыделенныеСтрокиФрагмент(ПричинаОтмены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтменитьВыделенныеСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПричинаОтмены = Результат;
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПродукцияОтменитьВыделенныеСтрокиФрагмент(ПричинаОтмены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтменитьВыделенныеСтрокиФрагмент(ПричинаОтмены)
	
	Группировки = Новый Массив;
	
	Для Каждого ТекСтрока Из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Продукция.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			СтрокаТаблицы.Отменено = Истина;
			Группировки.Добавить(СтрокаТаблицы.НомерГруппыЗатрат);
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Группировки);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выделенные строки отменены';
			|en = 'Selected lines are canceled'"),
		,
		НСтр("ru = 'Выделенные строки отменены.';
			|en = 'Selected lines are canceled.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтменаСтрокОтменитьНепоставленныеСтроки(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказПереработчику.Форма.ФормаДокумента.Команда.ПродукцияОтменитьНеотработанные");
	
	Если Объект.Продукция.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'В документе не заполнен список Выпускаемая продукция. Строки не могут быть отменены.';
									|en = 'List ""Released products"" in the document is not filled in. Cannot cancel the lines.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	ИначеЕсли Объект.Продукция.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'В документе для списка Выпускаемая продукция все строки уже отменены.';
									|en = 'All lines are already canceled in the document for the ""Released products"" list.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовПоставщикам Тогда
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора",,,,,,
			Новый ОписаниеОповещения("ПродукцияОтменитьНепоставленныеСтрокиЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	ПродукцияОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтменитьНепоставленныеСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПричинаОтмены = Результат;
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОтмены = ПродукцияОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена неотработанных строк';
										|en = 'Cancel unfulfilled lines'"), , РезультатОтмены.Оповещение);
	
КонецПроцедуры

&НаСервере
Функция ПродукцияОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены)
	
	СтруктураКорректировкиСтрокЗаказа = ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа();
	СтруктураКорректировкиСтрокЗаказа.ОтменитьНеотработанныеСтроки = Истина;
	СтруктураКорректировкиСтрокЗаказа.ИмяТабличнойЧасти = "Продукция";
	СтруктураКорректировкиСтрокЗаказа.ПричинаОтмены = ПричинаОтмены;
	
	Возврат СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
	
КонецФункции

&НаКлиенте
Процедура ПродукцияОтменаСтрокСкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтрокиПродукция = Не СкрыватьОтмененныеСтрокиПродукция;
	
	Если СкрыватьОтмененныеСтрокиПродукция Тогда
		Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Продукция.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПродукцияСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиПродукция;
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_ПодобратьПоЗаказамНаПроизводство(Команда)
	
	//++ НЕ УТКА

	//++ Устарело_Производство21
	ОткрытьПодборРаспоряжений();
	//-- Устарело_Производство21

	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_Заполнение_Перезаполнить(Команда)
	
	ЗаполнитьВозвратныеОтходыИМатериалы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьПолучателя(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказПереработчику.Форма.ФормаДокумента.Команда.Продукция_Заполнить_ЗаполнитьПолучателя");

	ПараметрыТЧ = Новый Структура;
	ПараметрыТЧ.Вставить("ИмяТЧФорма"      , "Продукция");
	ПараметрыТЧ.Вставить("ИмяТЧОбъект"     , "Продукция");
	ПараметрыТЧ.Вставить("ПредставлениеТЧ" , НСтр("ru = 'Продукция';
													|en = 'Manufactured products'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПолучателяЗавершение", 
												   ЭтотОбъект, Новый Структура("ПараметрыТЧ", ПараметрыТЧ));
	
	ПроизводствоКлиент.ОткрытьФормуВыбораПолучателя(ЭтаФорма, Объект, ПараметрыТЧ,, ОписаниеОповещения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучателяЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТЧ      = ДополнительныеПараметры.ПараметрыТЧ;
	ВыделенныеСтроки = Элементы[ПараметрыТЧ.ИмяТЧФорма].ВыделенныеСтроки;
	
	ЗаполнитьПолучателяНаСервере(ПараметрыТЧ, ВыделенныеСтроки, ВыбранноеЗначение);
	
	ОповеститьОбОкончанииЗаполненияПолучателей();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПолучателяНаСервере(ПараметрыТЧ, ВыделенныеСтроки, Получатель)
	
	ИмяТЧОбъект = ПараметрыТЧ.ИмяТЧОбъект;
	ИмяТЧФорма  = ПараметрыТЧ.ИмяТЧФорма;
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект[ИмяТЧОбъект].НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ДанныеСтроки.Получатель = Получатель;
		
	КонецЦикла;
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧФорма, ВыделенныеСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыЗаполнитьДатуПоступления(Команда)
	
	Если Элементы.ВозвратныеОтходы.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуПоступления("ВозвратныеОтходы", Элементы.ВозвратныеОтходы.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если Элементы.ВозвратныеОтходы.ВыделенныеСтроки.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В таблице отсутствуют выделенные строки. Выделите строки для заполнения цен';
				|en = 'No selected rows in the table. Select rows to fill in the prices'"),
			Объект.Ссылка,
			"Объект.ВозвратныеОтходы");
		
		Возврат;
		
	КонецЕсли;
	
	Если ЦеныПредприятияЗаполнениеКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "ВозвратныеОтходы", НСтр("ru = 'Возвратные отходы';
																											|en = 'Recyclable waste'")) Тогда
		
		ПараметрыВыбораЦен = ЦеныПредприятияЗаполнениеКлиент.НовыйПараметрыЗаполненияВыбратьВидЦен();
		ПараметрыВыбораЦен.ОписаниеОповещения = 
			Новый ОписаниеОповещения("ВозвратныеОтходыЗаполнитьЦеныПоВидуЦенЗавершение", ЭтотОбъект);
		ПараметрыВыбораЦен.ЦенаВключаетНДС = Ложь;
		ЦеныПредприятияЗаполнениеКлиент.ВыбратьВидЦен(ПараметрыВыбораЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЗаполнитьЦеныПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен, "ВозвратныеОтходы", Истина);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКопированиеВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.ВозвратныеОтходы.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена("ВозвратныеОтходы");
	
	КоличествоВставленных = Объект.ВозвратныеОтходы.Количество() - КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
		
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКопированиеСкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.ВозвратныеОтходы) Тогда
		СкопироватьСтрокиНаСервере("ВозвратныеОтходы");
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.ВозвратныеОтходы.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ВозвратныеОтходыЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "ВозвратныеОтходы");
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОбщееПодобратьТовары(Команда)
	
	ПодобратьТовар("ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОбщееПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ВозвратныеОтходыОбщееПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОбщееПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, "ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОбщееРазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.ВозвратныеОтходы;
	ДанныеТаблицы = Объект.ВозвратныеОтходы;
	
	Оповещение = Новый ОписаниеОповещения("ВозвратныеОтходыОбщееРазбитьСтрокуЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОбщееРазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("ВозвратныеОтходы", СтруктураДействий);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("ВозвратныеОтходы", СтруктураДействий);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОтменаСтрокОтменитьВыделенныеСтроки(Команда)
	
	Если Не ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(Объект.ВозвратныеОтходы,
		НСтр("ru = 'Возвратные отходы';
			|en = 'Recyclable waste'"), Элементы.ВозвратныеОтходы.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовПоставщикам Тогда
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора",,,,,,
			Новый ОписаниеОповещения("ВозвратныеОтходыОтменитьВыделенныеСтрокиЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	ВозвратныеОтходыОтменитьВыделенныеСтрокиФрагмент(ПричинаОтмены);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОтменитьВыделенныеСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПричинаОтмены = Результат;
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВозвратныеОтходыОтменитьВыделенныеСтрокиФрагмент(ПричинаОтмены);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОтменитьВыделенныеСтрокиФрагмент(ПричинаОтмены)
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	
	Для Каждого ТекСтрока Из Элементы.ВозвратныеОтходы.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ВозвратныеОтходы.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			СтрокаТаблицы.Отменено = Истина;
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выделенные строки отменены';
			|en = 'Selected lines are canceled'"),
		,
		НСтр("ru = 'Выделенные строки отменены.';
			|en = 'Selected lines are canceled.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОтменаСтрокОтменитьНепоставленныеСтроки(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказПереработчику.Форма.ФормаДокумента.Команда.ВозвратныеОтходыОтменитьНеотработанные");
	
	Если Объект.ВозвратныеОтходы.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'В документе не заполнен список Возвратные отходы. Строки не могут быть отменены.';
									|en = 'List ""Recyclable waste"" in the document is not filled in. Cannot cancel the lines.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	ИначеЕсли Объект.ВозвратныеОтходы.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'В документе для списка Возвратные отходы все строки уже отменены.';
									|en = 'All lines are already canceled in the document for the ""Recyclable waste"" list.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовПоставщикам Тогда
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора",,,,,,
			Новый ОписаниеОповещения("ВозвратныеОтходыОтменитьНепоставленныеСтрокиЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	ВозвратныеОтходыОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОтменитьНепоставленныеСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПричинаОтмены = Результат;
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОтмены = ВозвратныеОтходыОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена неотработанных строк';
										|en = 'Cancel unfulfilled lines'"), , РезультатОтмены.Оповещение);
	
КонецПроцедуры

&НаСервере
Функция ВозвратныеОтходыОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены)
	
	СтруктураКорректировкиСтрокЗаказа = ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа();
	СтруктураКорректировкиСтрокЗаказа.ОтменитьНеотработанныеСтроки = Истина;
	СтруктураКорректировкиСтрокЗаказа.ИмяТабличнойЧасти = "ВозвратныеОтходы";
	СтруктураКорректировкиСтрокЗаказа.ПричинаОтмены = ПричинаОтмены;
	
	Возврат СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
	
КонецФункции

&НаКлиенте
Процедура ВозвратныеОтходыОтменаСтрокСкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтрокиПродукция = Не СкрыватьОтмененныеСтрокиПродукция;
	
	Если СкрыватьОтмененныеСтрокиПродукция Тогда
		Элементы.ВозвратныеОтходы.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ВозвратныеОтходы.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ВозвратныеОтходыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиПродукция;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходы_Заполнить_ЗаполнитьГруппуЗатрат(Команда)
	
	ВыбратьГруппуЗатрат("ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЗаполнитьПолучателя(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказПереработчику.Форма.ФормаДокумента.Команда.ВозвратныеОтходы_Заполнить_ЗаполнитьПолучателя");

	ПараметрыТЧ = Новый Структура;
	ПараметрыТЧ.Вставить("ИмяТЧФорма"      , "ВозвратныеОтходы");
	ПараметрыТЧ.Вставить("ИмяТЧОбъект"     , "ВозвратныеОтходы");
	ПараметрыТЧ.Вставить("ПредставлениеТЧ" , НСтр("ru = 'Возвратные отходы';
													|en = 'Recyclable waste'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПолучателяЗавершение", 
												   ЭтотОбъект, Новый Структура("ПараметрыТЧ", ПараметрыТЧ));
	
	ПроизводствоКлиент.ОткрытьФормуВыбораПолучателя(ЭтаФорма, Объект, ПараметрыТЧ,, ОписаниеОповещения); 
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_Материалы

&НаКлиенте
Процедура МатериалыЗаполнитьДатуОтгрузки(Команда)
	
	ЗаполнитьДатуОтгрузки("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьСклад(Команда)
	
	ВыделенныеСтроки = Элементы.Материалы.ВыделенныеСтроки;
	ТребуетсяЗаполнение = СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(
		Объект,
		Объект.Материалы,
		НСтр("ru = 'Сырье и материалы для производства';
			|en = 'Raw and consumable materials for production'"),
		ВыделенныеСтроки);
	
	Если ТребуетсяЗаполнение Тогда
		
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		
		СтруктураОтбора = Новый Структура("ЭтоГруппа", Ложь);
		
		СтруктураПараметров = Новый Структура("Отбор", СтруктураОтбора);
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		СтруктураПараметров.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"МатериалыЗаполнитьСкладЗавершение",
			ЭтотОбъект,
			Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки));
		
		ОткрытьФорму(
			"Справочник.Склады.ФормаВыбора",
			СтруктураПараметров,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранныйСклад      = Результат;
    
    Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
        
        ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере("Материалы", ВыделенныеСтроки, ВыбранныйСклад);
        
        СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(
        ВыбранныйСклад,
        ЗаполненоСтрок,
        ВыделенныеСтроки.Количество());
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если Элементы.Материалы.ВыделенныеСтроки.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В таблице отсутствуют выделенные строки. Выделите строки для заполнения цен';
				|en = 'No selected rows in the table. Select rows to fill in the prices'"),
			Объект.Ссылка,
			"Объект.Материалы");
		
		Возврат;
		
	КонецЕсли;
	
	Если ЦеныПредприятияЗаполнениеКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Материалы", НСтр("ru = 'Сырье и материалы для производства';
																									|en = 'Raw and consumable materials for production'")) Тогда
		
		ПараметрыВыбораЦен = ЦеныПредприятияЗаполнениеКлиент.НовыйПараметрыЗаполненияВыбратьВидЦен();
		ПараметрыВыбораЦен.ОписаниеОповещения = 
			Новый ОписаниеОповещения("МатериалыЗаполнитьЦеныПоВидуЦенЗавершение", ЭтотОбъект);
		ПараметрыВыбораЦен.ЦенаВключаетНДС = Ложь;
		ЦеныПредприятияЗаполнениеКлиент.ВыбратьВидЦен(ПараметрыВыбораЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьЦеныПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен, "Материалы", Истина);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКопированиеВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Материалы.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена("Материалы");
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	КоличествоВставленных = Объект.Материалы.Количество() - КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКопированиеСкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Материалы) Тогда
		СкопироватьСтрокиНаСервере("Материалы");
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Материалы.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("МатериалыОбщееЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Материалы Тогда
			ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "Материалы");
		Иначе
			ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "Продукция");
		КонецЕсли;
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееПодобратьТовары(Команда)
	
	ПодобратьТовар("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("МатериалыОбщееПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, "Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Материалы",
		"Номенклатура,Характеристика,Количество,Склад,ДатаОтгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееРазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Материалы;
	ДанныеТаблицы = Объект.Материалы;
	
	Оповещение = Новый ОписаниеОповещения("МатериалыОбщееРазбитьСтрокуЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееРазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("Материалы", СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОтменаСтрокОтменитьВыделенныеСтроки(Команда)
	
	Если Не ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(Объект.Материалы,
		НСтр("ru = 'Сырье и материалы';
			|en = 'Raw and consumable materials'"), Элементы.Материалы.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	МатериалыОтменитьВыделенныеСтрокиСервер();
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена выделенных строк';
										|en = 'Cancel selected lines'"), , НСтр("ru = 'Выделенные строки отменены';
																					|en = 'Selected lines are canceled'"));
	
КонецПроцедуры

&НаСервере
Процедура МатериалыОтменитьВыделенныеСтрокиСервер()
	
	ВыделенныеСтроки = Элементы.Материалы.ВыделенныеСтроки;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
	КэшированныеЗначения = Неопределено;
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		Строка = Объект.Материалы.НайтиПоИдентификатору(Идентификатор);
		Строка.Отменено = Истина;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОтменаСтрокОтменитьНеотработанныеСтроки(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказПереработчику.Форма.ФормаДокумента.Команда.МатериалыОтменитьНеотработанные");
	
	РезультатОтмены = МатериалыОтменитьНеотработанныеСервер();
	ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена неотработанных строк';
										|en = 'Cancel unfulfilled lines'"), , РезультатОтмены.Оповещение);
	
КонецПроцедуры

&НаСервере
Функция МатериалыОтменитьНеотработанныеСервер()
	
	СтруктураКорректировкиСтрокЗаказа = ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа();
	СтруктураКорректировкиСтрокЗаказа.ОтменитьНеотработанныеСтроки = Истина;
	СтруктураКорректировкиСтрокЗаказа.ИмяТабличнойЧасти = "Материалы";
	
	Возврат СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
	
КонецФункции

&НаКлиенте
Процедура МатериалыОтменаСтрокСкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтрокиМатериалы = Не СкрыватьОтмененныеСтрокиМатериалы;
	
	Если СкрыватьОтмененныеСтрокиМатериалы Тогда
		Элементы.Материалы.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Материалы.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.МатериалыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиМатериалы;
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_Заполнить_ЗаполнитьГруппуЗатрат(Команда)
	
	ВыбратьГруппуЗатрат("Материалы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_Заполнить_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("Материалы", ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Материальные"));
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВключитьОбособленноеОбеспечение(Команда)
	
	ОбеспечениеУстановитьДействие("ФЛАГ_ОБОСОБЛЕННО");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВыключитьОбособленноеОбеспечение(Команда)
	
	ОбеспечениеУстановитьДействие("ФЛАГ_НЕОБОСОБЛЕННО");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКОбеспечению(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРезервироватьПоМереПоступления(Команда)
	
	ОбеспечениеУстановитьДействие("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬПОМЕРЕПОСТУПЛЕНИЯ");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНеОбеспечивать(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОтгрузить(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_ОТГРУЗИТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРезервировать(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ");
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	ДанныеДокумента = ОбеспечениеВДокументахВызовСервера.ДанныеДокументаДляСозданияКорректировкиНазначения(Объект.Ссылка,
		Новый Структура("ИдентификаторВХранилище,ЭтоСнятиеРезерва", УникальныйИдентификатор, Ложь));
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.НеСогласован") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КИсполнению");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Ложь, МинимальныйСтатус);
	ИначеЕсли Модифицированность Или Не ДанныеДокумента.Проведен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для резервирования под назначение необходимо предварительно провести документ.';
										|en = 'To reserve for assignment, post the document first.'"));
	Иначе
		
		ОписаниеКоманды = Новый Структура();
		ОписаниеКоманды.Вставить("ОбъектыОснований", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
		ОписаниеКоманды.Вставить("Форма", ЭтотОбъект);
		ОписаниеКоманды.Вставить("АдресТоваров", ДанныеДокумента.АдресТоваров);
		Если ДанныеДокумента.ЕстьТоварыКОбособленномуОбеспечению Тогда
			Если ДанныеДокумента.Назначения.Количество() = 1 Тогда
				ОписаниеКоманды.Вставить("Назначение", ДанныеДокумента.Назначения[0]);
				СозданиеНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
			Иначе
				ОписаниеКоманды.Вставить("Назначения", ДанныеДокумента.Назначения);
				СозданиеНаОснованииУТКлиент.ОткрытьМастерМассовогоРезервирования(ОписаниеКоманды);
			КонецЕсли;
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	ДанныеДокумента = ОбеспечениеВДокументахВызовСервера.ДанныеДокументаДляСозданияКорректировкиНазначения(Объект.Ссылка,
		Новый Структура("ИдентификаторВХранилище,ЭтоСнятиеРезерва", УникальныйИдентификатор, Истина));
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.НеСогласован") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КИсполнению");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Ложь, МинимальныйСтатус);
	ИначеЕсли Модифицированность Или Не ДанныеДокумента.Проведен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для снятия резерва под назначение необходимо предварительно провести документ.';
										|en = 'To unreserve inventory, please post the document.'"));
	Иначе
		
		ОписаниеКоманды = Новый Структура();
		ОписаниеКоманды.Вставить("ОбъектыОснований", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
		ОписаниеКоманды.Вставить("Форма", ЭтотОбъект);
		ОписаниеКоманды.Вставить("АдресТоваров", ДанныеДокумента.АдресТоваров);
		Если ДанныеДокумента.ЕстьТоварыКСнятиюРезерва Тогда
			Если ДанныеДокумента.Назначения.Количество() = 1 Тогда
				ОписаниеКоманды.Вставить("Назначение", ДанныеДокумента.Назначения[0]);
				СозданиеНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ОписаниеКоманды);
			Иначе
				ОписаниеКоманды.Вставить("Назначения", ДанныеДокумента.Назначения);
				СозданиеНаОснованииУТКлиент.ОткрытьМастерМассовогоСнятияРезерва(ОписаниеКоманды);
			КонецЕсли;
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКСнятиюРезерва();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_Услуги

&НаКлиенте
Процедура Услуги_ВыбратьИЗаполнитьУслугу(Команда)
	
	Если Элементы.Услуги.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для заполнения услуги необходимо выбрать строки.';
										|en = 'To fill in the service, select lines.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Услуги_ВыбратьИЗаполнитьУслугуЗавершение", ЭтотОбъект);
	ПараметрыОтбора = Новый Структура("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_РедактированиеЭтаповПродукция

&НаКлиенте
Процедура РедактированиеЭтапов_Продукция_РазбитьСтроку(Команда)
	
	//++ НЕ УТКА
	
	Если ЗаблокироватьЭтапы() Тогда
		РазбитьСтрокуТЧЭтапа("РедактированиеЭтаповВыходныеИзделия");
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Продукция_ВставитьСтроки(Команда)
	
	//++ НЕ УТКА
	
	Если Объект.ПереработкаПоЗаказу И Объект.Услуги.Количество() = 0 Тогда
		// Если нет ниодного заказа, то нужно выбрать заказ
		// Если заказ есть, то выполняется стандартное добавление строки.
		ОткрытьПодборРаспоряжений();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоТоваровДоВставки = РедактированиеЭтапов.ВыходныеИзделия.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена("РедактированиеЭтаповВыходныеИзделия");
	
	КоличествоВставленных = РедактированиеЭтапов.ВыходныеИзделия.Количество() - КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Продукция_СкопироватьСтроки(Команда)
	
	//++ НЕ УТКА
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.РедактированиеЭтаповВыходныеИзделия) Тогда
		СкопироватьСтрокиНаСервере("РедактированиеЭтаповВыходныеИзделия");
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.РедактированиеЭтаповВыходныеИзделия.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Продукция_ОтменитьВыделенныеСтроки(Команда)
	
	//++ НЕ УТКА
	ОтменитьВыделенныеСтроки(
		"ВыходныеИзделия",
		НСтр("ru = 'Продукция по рассчитываемой стоимости';
			|en = 'Products at the calculated cost'"));
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Продукция_СкрыватьОтмененныеСтроки(Команда)
	
	//++ НЕ УТКА
	СкрыватьОтмененныеСтрокиВыходныеИзделияЭтапов = Не СкрыватьОтмененныеСтрокиВыходныеИзделияЭтапов;
	
	Если СкрыватьОтмененныеСтрокиВыходныеИзделияЭтапов Тогда
		Элементы.РедактированиеЭтаповВыходныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.РедактированиеЭтаповВыходныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.РедактированиеЭтапов_Продукция_СкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиВыходныеИзделияЭтапов;	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Продукция_ЗаполнитьПолучателя(Команда)
	
	//++ НЕ УТКА
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказПереработчику.Форма.ФормаДокумента.Команда.РедактированиеЭтапов_Продукция_ЗаполнитьПолучателя");

	ПараметрыТЧ = Новый Структура;
	ПараметрыТЧ.Вставить("ИмяТЧФорма"      , "РедактированиеЭтаповВыходныеИзделия");
	ПараметрыТЧ.Вставить("ИмяТЧОбъект"     , "ВыходныеИзделия");
	ПараметрыТЧ.Вставить("ПредставлениеТЧ" , НСтр("ru = 'Продукция по рассчитываемой стоимости';
													|en = 'Products at the calculated cost'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭтапыЗаполнитьПолучателяЗавершение", 
												   ЭтотОбъект, Новый Структура("ПараметрыТЧ", ПараметрыТЧ));
	
	ПроизводствоКлиент.ОткрытьФормуВыбораПолучателя(ЭтаФорма, РедактированиеЭтапов, ПараметрыТЧ,, ОписаниеОповещения); 
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыЗаполнитьПолучателяЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	//++ НЕ УТКА
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыТЧ      = ДополнительныеПараметры.ПараметрыТЧ;
	ВыделенныеСтроки = Элементы[ПараметрыТЧ.ИмяТЧФорма].ВыделенныеСтроки;
	
	ЭтапыЗаполнитьПолучателяНаСервере(ПараметрыТЧ, ВыделенныеСтроки, ВыбранноеЗначение);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры	

#КонецОбласти

#Область КомандыТЧ_РедактированиеЭтаповОтходы

&НаКлиенте
Процедура РедактированиеЭтапов_Отходы_РазбитьСтроку(Команда)
	
	//++ НЕ УТКА
	
	Если ЗаблокироватьЭтапы() Тогда
		РазбитьСтрокуТЧЭтапа("РедактированиеЭтаповПобочныеИзделия");
	КонецЕсли;
		
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Отходы_ВставитьСтроки(Команда)
	
	//++ НЕ УТКА
	
	Если Объект.ПереработкаПоЗаказу И Объект.Услуги.Количество() = 0 Тогда
		// Если нет ниодного заказа, то нужно выбрать заказ
		// Если заказ есть, то выполняется стандартное добавление строки.
		ОткрытьПодборРаспоряжений();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоТоваровДоВставки = РедактированиеЭтапов.ПобочныеИзделия.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена("РедактированиеЭтаповПобочныеИзделия");
	
	КоличествоВставленных = РедактированиеЭтапов.ПобочныеИзделия.Количество() - КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Отходы_СкопироватьСтроки(Команда)
	
	//++ НЕ УТКА
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.РедактированиеЭтаповПобочныеИзделия) Тогда
		СкопироватьСтрокиНаСервере("РедактированиеЭтаповПобочныеИзделия");
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.РедактированиеЭтаповПобочныеИзделия.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Отходы_ОтменитьВыделенныеСтроки(Команда)
	
	//++ НЕ УТКА
	ОтменитьВыделенныеСтроки(
		"ПобочныеИзделия",
		НСтр("ru = 'Выпуск по фиксированной стоимости';
			|en = 'Release at fixed cost'"));
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Отходы_СкрыватьОтмененныеСтроки(Команда)
	
	//++ НЕ УТКА
	СкрыватьОтмененныеСтрокиПобочныеИзделияЭтапов = Не СкрыватьОтмененныеСтрокиПобочныеИзделияЭтапов;
	
	Если СкрыватьОтмененныеСтрокиПобочныеИзделияЭтапов Тогда
		Элементы.РедактированиеЭтаповПобочныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.РедактированиеЭтаповПобочныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.РедактированиеЭтапов_Отходы_СкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиПобочныеИзделияЭтапов;	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Отходы_ЗаполнитьПолучателя(Команда)
	
	//++ НЕ УТКА
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказПереработчику.Форма.ФормаДокумента.Команда.РедактированиеЭтапов_Отходы_ЗаполнитьПолучателя");	
	
	ПараметрыТЧ = Новый Структура;
	ПараметрыТЧ.Вставить("ИмяТЧФорма"      , "РедактированиеЭтаповПобочныеИзделия");
	ПараметрыТЧ.Вставить("ИмяТЧОбъект"     , "ПобочныеИзделия");
	ПараметрыТЧ.Вставить("ПредставлениеТЧ" , НСтр("ru = 'Побочный и промежуточный выпуск по фиксированной стоимости';
													|en = 'Side and intermediate release at fixed cost'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭтапыЗаполнитьПолучателяЗавершение", 
												   ЭтотОбъект, Новый Структура("ПараметрыТЧ", ПараметрыТЧ));
	
	ПроизводствоКлиент.ОткрытьФормуВыбораПолучателя(ЭтаФорма, РедактированиеЭтапов, ПараметрыТЧ,, ОписаниеОповещения); 
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_РедактированиеЭтаповОбеспечениеМатериаламиИРаботами

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_ПодобратьТовары(Команда)
	
	//++ НЕ УТКА
	
	Если ЗаблокироватьЭтапы() Тогда
		ПодобратьТовар("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_ЗаполнитьГруппуЗатрат(Команда)
	
	//++ НЕ УТКА
	
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьГруппуЗатрат("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами", Истина);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_ЗаполнитьДатуОтгрузки(Команда)
	
	//++ НЕ УТКА
	
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДатуОтгрузки("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_ВставитьСтроки(Команда)
	
	//++ НЕ УТКА
	
	Если Объект.ПереработкаПоЗаказу И Объект.Услуги.Количество() = 0 Тогда
		// Если нет ниодного заказа, то нужно выбрать заказ
		// Если заказ есть, то выполняется стандартное добавление строки.
		ОткрытьПодборРаспоряжений();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоТоваровДоВставки = РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
		РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами,
		ДатаОтгрузкиОбязательна,
		СкладОбязателен);
	
	КоличествоВставленных = РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.Количество() - КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_СкопироватьСтроки(Команда)
	
	//++ НЕ УТКА
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами) Тогда
		СкопироватьСтрокиНаСервере("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_РазбитьСтроку(Команда)
	
	//++ НЕ УТКА
	
	Если ЗаблокироватьЭтапы() Тогда
		РазбитьСтрокуТЧЭтапа("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_ОтменитьВыделенныеСтроки(Команда)
	
	//++ НЕ УТКА
	ОтменитьВыделенныеСтроки("ОбеспечениеМатериаламиИРаботами", НСтр("ru = 'Сырье и материалы';
																	|en = 'Raw and consumable materials'"));
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_СкрыватьОтмененныеСтроки(Команда)
	
	//++ НЕ УТКА
	СкрыватьОтмененныеСтрокиОбеспечениеМатериаламиИРаботами =  Не СкрыватьОтмененныеСтрокиОбеспечениеМатериаламиИРаботами;
	
	Если СкрыватьОтмененныеСтрокиОбеспечениеМатериаламиИРаботами Тогда
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.РедактированиеЭтапов_Обеспечение_СкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиОбеспечениеМатериаламиИРаботами;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВключитьОбособленноеОбеспечение(Команда)
	
	//++ НЕ УТКА
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	ОбеспечениеЭтаповУстановитьДействие("ФЛАГ_ОБОСОБЛЕННО");
	//-- НЕ УТКА
	
	Возврат // в КА и УТ Обработчик пустой;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыключитьОбособленноеОбеспечение(Команда)
	
	//++ НЕ УТКА
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	ОбеспечениеЭтаповУстановитьДействие("ФЛАГ_НЕОБОСОБЛЕННО");
	//-- НЕ УТКА
	
	Возврат // в КА и УТ Обработчик пустой;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповКОбеспечению(Команда)
	
	//++ НЕ УТКА
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	ОбеспечениеЭтаповУстановитьДействиеСВопросом("ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ");
	//-- НЕ УТКА
	
	Возврат // в КА и УТ Обработчик пустой;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповНеОбеспечивать(Команда)
	
	//++ НЕ УТКА
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	ОбеспечениеЭтаповУстановитьДействиеСВопросом("ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ");
	//-- НЕ УТКА
	
	Возврат // в КА и УТ Обработчик пустой;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповРезервироватьПоМереПоступления(Команда)
	
	//++ НЕ УТКА
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	ОбеспечениеЭтаповУстановитьДействиеСВопросом("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬПОМЕРЕПОСТУПЛЕНИЯ");
	//-- НЕ УТКА
	
	Возврат // в КА и УТ Обработчик пустой;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОтгрузить(Команда)
	
	//++ НЕ УТКА
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	ОбеспечениеЭтаповУстановитьДействиеСВопросом("ДЕЙСТВИЕ_ОТГРУЗИТЬ");
	//-- НЕ УТКА
	
	Возврат // в КА и УТ Обработчик пустой;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповРезервировать(Команда)
	
	//++ НЕ УТКА
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	ОбеспечениеЭтаповУстановитьДействиеСВопросом("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ");
	//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеКоманды

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства") Тогда
		
		ОчиститьСообщения();
		
		ПринудительноЗакрытьФорму = Истина;
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
		ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Истина);
		ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
		
		Если ПровестиИЗакрытьНаСервере(ПараметрыЗаписи) Тогда
			ПослеЗаписи(ПараметрыЗаписи);
		Иначе
			ТекстИсключения = СтрШаблон(
				НСтр("ru = 'Не удалось провести ""%1""';
					|en = 'Cannot post ""%1""'"),
				?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, НСтр("ru = 'Заказ переработчику';
																		|en = 'Subcontracting purchase order'")));
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаления(Команда)
	
	ТекстВопроса = НСтр("ru = 'Пометить ""%1"" на удаление?';
						|en = 'Do you want to mark %1 for deletion?'");
	Если Объект.ПометкаУдаления Тогда
		ТекстВопроса = НСтр("ru = 'Снять с ""%1"" пометку на удаление?';
							|en = 'Do you want to clear a deletion mark for ""%1""?'");
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(ТекстВопроса, Объект.Ссылка);
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПометкаУдаленияОбработчикОповещения", ЭтаФорма),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаленияОбработчикОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПометкаУдаления = Не Объект.ПометкаУдаления;
	
	ПринудительноЗакрытьФорму = Ложь;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

&НаКлиенте
Процедура ЗачетОплаты(Команда)
	ВзаиморасчетыКлиент.ЗачетОплаты(ЭтаФорма, Элементы.ЗачетОплатыФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСтатьяКалькуляции.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьяКалькуляции.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиСтатьяКалькуляции.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПартионныйУчетВерсии22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#Область СтандартноеОформление

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтаФорма, 
		"СерииВсегдаВТЧТовары", 
		"МатериалыСерия", 
		"Объект.Материалы.СтатусУказанияСерий",
		"Объект.Материалы.ТипНоменклатуры");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		ЭтаФорма,
		"ПродукцияНазначение",
		"Объект.Продукция.ТипНоменклатуры");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		ЭтаФорма,
		"ВозвратныеОтходыНазначение",
		"Объект.ВозвратныеОтходы.ТипНоменклатуры");
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
		Элементы.Продукция,
		Элементы.ПродукцияОтменено.Имя,
		Элементы.ПродукцияПричинаОтмены.Имя);
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
		Элементы.ВозвратныеОтходы,
		Элементы.ВозвратныеОтходыОтменено.Имя,
		Элементы.ВозвратныеОтходыПричинаОтмены.Имя);
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
		Элементы.Материалы,
		Элементы.Материалы.Имя);
	
	//++ НЕ УТКА
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтаФорма,
		"РедактированиеЭтаповВыходныеИзделияНоменклатураЕдиницаИзмерения", 
		"РедактированиеЭтапов.ВыходныеИзделия.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма,
		"РедактированиеЭтаповВыходныеИзделияХарактеристика",
		"РедактированиеЭтапов.ВыходныеИзделия.ХарактеристикиИспользуются");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		ЭтаФорма,
		"РедактированиеЭтаповВыходныеИзделияНазначение",
		"РедактированиеЭтапов.ВыходныеИзделия.ТипНоменклатуры",
		Ложь);
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
		Элементы.РедактированиеЭтаповВыходныеИзделия,
		Элементы.РедактированиеЭтаповВыходныеИзделияОтменено.Имя,
		Элементы.РедактированиеЭтаповВыходныеИзделияПричинаОтмены.Имя);
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтаФорма,
		"РедактированиеЭтаповПобочныеИзделияНоменклатураЕдиницаИзмерения", 
		"РедактированиеЭтапов.ПобочныеИзделия.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма,
		"РедактированиеЭтаповПобочныеИзделияХарактеристика",
		"РедактированиеЭтапов.ПобочныеИзделия.ХарактеристикиИспользуются");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		ЭтаФорма,
		"РедактированиеЭтаповПобочныеИзделияНазначение",
		"РедактированиеЭтапов.ПобочныеИзделия.ТипНоменклатуры",
		Ложь);
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
		Элементы.РедактированиеЭтаповПобочныеИзделия,
		Элементы.РедактированиеЭтаповПобочныеИзделияОтменено.Имя,
		Элементы.РедактированиеЭтаповПобочныеИзделияПричинаОтмены.Имя);
	//-- НЕ УТКА
	

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ПродукцияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.Продукция.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВозвратныеОтходыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВозвратныеОтходы.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "МатериалыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.Материалы.Упаковка");

	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПриоритета(ЭтаФорма);

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, 
		"РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиХарактеристика",
		"РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, 
		"МатериалыХарактеристика",
		"Объект.Материалы.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, 
		"ПродукцияХарактеристика",
		"Объект.Продукция.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, 
		"ВозвратныеОтходыХарактеристика",
		"Объект.ВозвратныеОтходы.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, 
		"УслугиХарактеристика",
		"Объект.Услуги.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма,
		"Характеристика",
		"ХарактеристикиИспользуются");
		
	ЦеныПредприятияЗаполнениеСервер.УстановитьУсловноеОформлениеВидовЦен(
		ЭтаФорма, 
		"МатериалыВидЦены", 
        "Объект.Материалы.ВидЦены");

	ЦеныПредприятияЗаполнениеСервер.УстановитьУсловноеОформлениеВидовЦен(
		ЭтаФорма, 
		"ВозвратныеОтходыВидЦены", 
        "Объект.ВозвратныеОтходы.ВидЦены");
														 
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(УсловноеОформление,
		"ДатаОтгрузки", "Объект.ДатаОтгрузки", "ДатаОтгрузкиОбязательна");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(УсловноеОформление,
		"МатериалыДатаОтгрузки", "Объект.Материалы.ДатаОтгрузки", "Объект.Материалы.ДатаОтгрузкиОбязательна");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(УсловноеОформление,
		"МатериалыСклад", "Объект.Материалы.Склад", "Объект.Материалы.СкладОбязателен");
	
	СтатусыЧерновик = Новый СписокЗначений;
	СтатусыЧерновик.Добавить(Перечисления.СтатусыЗаказовПереработчикам.НеСогласован);
	
	ОбеспечениеВДокументахСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"Подразделение", "Подразделение", "", СтатусыЧерновик);
	
	ОбеспечениеВДокументахСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"ДатаПоступления", "ДатаПоступления", "", СтатусыЧерновик);
	
	ОбеспечениеВДокументахСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"ПродукцияДатаПоступления", "ДатаПоступления", "Продукция", СтатусыЧерновик);
	
	ОбеспечениеВДокументахСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"ВозвратныеОтходыДатаПоступления", "ДатаПоступления", "ВозвратныеОтходы", СтатусыЧерновик);
	
	
	#КонецОбласти
	
	// ЦветГиперссылки для поля ГруппаЗатрат
#Область ЦветГиперссылки
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиГруппаЗатрат.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПереработкаПоЗаказу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);																 
#КонецОбласти

	// Текст <продукция не выбрана> в поле ГруппаЗатрат
#Область ТекстПродукцияНеВыбрана
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыГруппаЗатрат.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.НомерГруппыЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГруппировкаЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<продукция не выбрана>';
																|en = '<products are not selected>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыГруппаЗатрат.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.НомерГруппыЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГруппировкаЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<продукция не выбрана>';
																|en = '<products are not selected>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиГруппаЗатрат.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.НомерГруппыЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГруппировкаЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<продукция не выбрана>';
																|en = '<products are not selected>'"));
#КонецОбласти

	// Только просмотр СуммыНДС, если СтавкаНДС = БезНДС или НДС0%
#Область УслугиСуммаНДС_ТолькоПросмотр
	
	УчетНДСУП.УстановитьУсловноеОформлениеСуммНДСПоСтавкеНДСЗакупки(ЭтаФорма, "УслугиСтавкаНДС", "УслугиСуммаНДС");
	
#КонецОбласти

	#Область ПродукцияСпецификация_ОтметкаНеЗаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСпецификация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГруппировкаЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Ложь);
	#КонецОбласти
	
	СтароеЗначение = ДоступныеОстаткиПараметрыВстраивания;
	//++ НЕ УТКА
	#Область ВыходныеИзделия
	
	ПутиКДанным = Новый Структура;
	ПутиКДанным.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия", "Объект.СпособРаспределенияЗатратНаВыходныеИзделия");
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(ЭтаФорма, "РедактированиеЭтапов", "ВыходныеИзделия", "РедактированиеЭтаповВыходныеИзделия", ПутиКДанным);
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиОтмененныхСтрок(ЭтаФорма, "РедактированиеЭтапов", "ВыходныеИзделия", "РедактированиеЭтаповВыходныеИзделияДоляСтоимости");
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляЭтапПотребительПолуфабриката(ЭтаФорма, "РедактированиеЭтапов", "ВыходныеИзделия", "РедактированиеЭтапов", ПутиКДанным);
	
	#Область ВыходныеИзделия_ДатаПроизводства
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РедактированиеЭтаповВыходныеИзделияДатаПроизводства.Имя);
	
	ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РедактированиеЭтапов.ВыходныеИзделия.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	#Область ВыходныеИзделия_СписаниеНаРасходы
	
	УстановитьУсловноеОформлениеСписатьНаРасходы("РедактированиеЭтапов", "РедактированиеЭтапов", "ВыходныеИзделия");
	
	#КонецОбласти
	
	#Область ВыходныеИзделия_Получатель
	
	УстановитьУсловноеОформлениеПолучатель("РедактированиеЭтапов", "РедактированиеЭтапов", "ВыходныеИзделия");
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ПобочныеИзделия
	
	ПутиКДанным.Вставить("Статус", "РедактированиеЭтапов.ПобочныеИзделия.Статус");
	
	ПроизводствоУправлениеФормами.УстановитьУсловноеОформлениеСтатьиКалькуляции(ЭтаФорма, "РедактированиеЭтапов", "ПобочныеИзделия", "РедактированиеЭтаповПобочныеИзделияСтатьяКалькуляции", ПутиКДанным, Истина);
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляЭтапПотребительПолуфабриката(ЭтаФорма, "РедактированиеЭтапов", "ПобочныеИзделия", "РедактированиеЭтапов", ПутиКДанным);
	
	#Область ПобочныеИзделия_ДатаПроизводства
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РедактированиеЭтаповПобочныеИзделияДатаПроизводства.Имя);
	
	ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РедактированиеЭтапов.ПобочныеИзделия.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	#Область ПобочныеИзделия_СписаниеНаРасходы
	
	УстановитьУсловноеОформлениеСписатьНаРасходы("РедактированиеЭтапов", "РедактированиеЭтапов", "ПобочныеИзделия");
	
	#КонецОбласти
	
	#Область ПобочныеИзделия_Получатель
	
	УстановитьУсловноеОформлениеПолучатель("РедактированиеЭтапов", "РедактированиеЭтапов", "ПобочныеИзделия");
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ОбеспечениеМатериаламиИРаботами
	
	ПутиКДанным = Новый Структура;
	ПутиКДанным.Вставить("ДинамическаяСтруктура", "ДинамическаяСтруктура");
	
	ИменаЭлементов = ПроизводствоУправлениеФормами.ИменаЭлементовОбеспеченияМатериаламиИРаботами();
	ИменаЭлементов.ИмяТЧ = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.Имя;
	ИменаЭлементов.ДатаОтгрузки = Элементы.РедактированиеЭтаповДатаОтгрузки.Имя;
	ИменаЭлементов.ТЧДатаОтгрузки = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Имя;
	ИменаЭлементов.ТЧКоличествоУпаковок = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиКоличествоУпаковок.Имя;
	ИменаЭлементов.ТЧНоменклатураЕдиницаИзмерения = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиНоменклатураЕдиницаИзмерения.Имя;
	ИменаЭлементов.ТЧОбособленно = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиОбособленно.Имя;
	ИменаЭлементов.ТЧОтменено = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиОтменено.Имя;
	ИменаЭлементов.ТЧПричинаОтмены = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПричинаОтмены.Имя;
	ИменаЭлементов.ТЧСерия = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСерия.Имя;
	ИменаЭлементов.ТЧСклад = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСклад.Имя;
	ИменаЭлементов.ТЧСпецификация = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСпецификация.Имя;
	ИменаЭлементов.ТЧСтатьяКалькуляции = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСтатьяКалькуляции.Имя;
	ИменаЭлементов.ТЧХарактеристика = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиХарактеристика.Имя;
	ИменаЭлементов.ТЧНазначение = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиНазначениеОбеспечения.Имя;
	ИменаЭлементов.ТЧПроизводится = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПроизводится.Имя;
	
	ДополнительныеПараметры = Новый Структура("ВернутьПараметрыРедактированияЭтапов", Истина);
	ДоступныеОстаткиПараметрыВстраивания = Документы.ЗаказПереработчику.ДоступныеОстаткиПараметрыВстраивания(
		Неопределено,
		ДополнительныеПараметры);
	ПроизводствоУправлениеФормами.УстановитьУсловноеОформлениеОбеспеченияМатериаламиИРаботами(ЭтаФорма, "РедактированиеЭтапов", "ОбеспечениеМатериаламиИРаботами", ИменаЭлементов, ПутиКДанным);
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиДобавитьОформлениеКолонкиДоступно(ЭтотОбъект);
	
	#КонецОбласти
	//-- НЕ УТКА
	
	#Область Продукция
	
	#Область Продукция_ДоляСтоимости
	
	// Установка оформления процента
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(ЭтаФорма, "Объект", "Продукция");
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиОтмененныхСтрок(ЭтаФорма, "Объект", "Продукция", "ПродукцияДоляСтоимости");
	
	// Установка видимости колонки Доля стоимости по группировке затрат
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДоляСтоимости.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДоляСтоимостиПроцент.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияЕстьОшибкиЗаполненияДолиСтоимости.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГруппировкаЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	#Область Продукция_СписаниеНаРасходы
	
	// оформление статей и аналитики расходов
	
	УстановитьУсловноеОформлениеСписатьНаРасходы("Объект",, "Продукция");
	
	#КонецОбласти
	
	#Область Продукция_Получатель
	
	УстановитьУсловноеОформлениеПолучатель("Объект",, "Продукция");
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ВозвратныеОтходы
	
	#Область ВозвратныеОтходы_СписаниеНаРасходы
	
	// оформление статей и аналитики расходов
	
	УстановитьУсловноеОформлениеСписатьНаРасходы("Объект",, "ВозвратныеОтходы");
	
	#КонецОбласти
	
	#Область ВозвратныеОтходы_Получатель
	
	УстановитьУсловноеОформлениеПолучатель("Объект",, "ВозвратныеОтходы");
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область Прочее

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеПросрочено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЗаказовПереработчикам.Закрыт;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДатаПоступления.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыДатаПоступления.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыЦена.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыЦена.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПоступления1.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовПереработчикам.КИсполнению);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовПереработчикам.Закрыт);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаПоступления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладОтгрузкиГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияОтменено.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПричинаОтмены.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.SpecialTextColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыОтменено.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыПричинаОтмены.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.SpecialTextColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияОтмененоПричиныОтменыНеИспользуются.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FieldSelectionBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыОтмененоПричиныОтменыНеИспользуются.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FieldSelectionBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Номенклатура.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроверятьУказаниеРаботы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроверятьУказаниеРаботы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Подразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПереработкаПоЗаказу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ДополнительныеПараметры = Новый Структура("ВернутьПараметрыРедактированияЭтапов", Ложь);
	ДоступныеОстаткиПараметрыВстраивания = Документы.ЗаказПереработчику.ДоступныеОстаткиПараметрыВстраивания(
		Неопределено,
		ДополнительныеПараметры);
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиДобавитьОформлениеКолонкиДоступно(ЭтотОбъект);
	
	ДоступныеОстаткиПараметрыВстраивания = СтароеЗначение;
	
	ОбеспечениеВДокументахСервер.УстановитьУсловноеОформлениеОбособленно(
		УсловноеОформление,
		Элементы.МатериалыОбособленно,
		"Объект.Материалы.ВариантОбеспечения",
		"Объект.Материалы.ТипНоменклатуры");
	
#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписатьНаРасходы(ИмяОбъекта, ПрефиксТЧ = "", ИмяТЧ)
	
	НазванияПолей = НазванияПолей(ПрефиксТЧ, ИмяТЧ);
	
	// только просмотр, поясняющая надпись, если товар
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеСписатьНаРасходы = Элементы[НазванияПолей.СписатьНаРасходы]; // ПолеФормы
	ПолеСтатьяРасходов = Элементы[НазванияПолей.СтатьяРасходов]; // ПолеФормы
	ПолеАналитикаРасходов = Элементы[НазванияПолей.АналитикаРасходов]; // ПолеФормы
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеСписатьНаРасходы.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеСтатьяРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеАналитикаРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр" , Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст"          , НСтр("ru = '<для работ>';
																			|en = '<for works>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста"     , ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// назначение не указывается при списании на расходы
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеНазначение = Элементы[НазванияПолей.Назначение]; // ПолеФормы
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста"     , ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст"          , НСтр("ru = '<не используется при списании на расходы>';
																			|en = '<not used while writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр" , Истина);
	
КонецПроцедуры

&НаСервере
Функция НазванияПолей(ПрефиксТЧ, ИмяТЧ)
	
	СтруктураВозврата = Новый Структура("СписатьНаРасходы, СтатьяРасходов, АналитикаРасходов, Назначение");
	
	Если ПрефиксТЧ = "РедактированиеЭтапов" Тогда
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			СтруктураВозврата.СписатьНаРасходы = "РедактированиеЭтаповВыходныеИзделияСписатьНаРасходы";
			СтруктураВозврата.СтатьяРасходов = "РедактированиеЭтаповВыходныеИзделияСтатьяРасходов";
			СтруктураВозврата.АналитикаРасходов = "РедактированиеЭтаповВыходныеИзделияАналитикаРасходов";
			СтруктураВозврата.Назначение = "РедактированиеЭтаповВыходныеИзделияНазначение";
		ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
			СтруктураВозврата.СписатьНаРасходы = "РедактированиеЭтаповВозвратныеОтходыСписатьНаРасходы";
			СтруктураВозврата.СтатьяРасходов = "РедактированиеЭтаповВозвратныеОтходыСтатьяРасходов";
			СтруктураВозврата.АналитикаРасходов = "РедактированиеЭтаповВозвратныеОтходыАналитикаРасходов";
			СтруктураВозврата.Назначение = "РедактированиеЭтаповВозвратныеОтходыНазначение";
		ИначеЕсли ИмяТЧ = "Продукция" Тогда
			СтруктураВозврата.СписатьНаРасходы = "РедактированиеЭтаповПродукцияСписатьНаРасходы";
			СтруктураВозврата.СтатьяРасходов = "РедактированиеЭтаповПродукцияСтатьяРасходов";
			СтруктураВозврата.АналитикаРасходов = "РедактированиеЭтаповПродукцияАналитикаРасходов";
			СтруктураВозврата.Назначение = "РедактированиеЭтаповПродукцияНазначение";
		ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
			СтруктураВозврата.СписатьНаРасходы = "РедактированиеЭтаповПобочныеИзделияСписатьНаРасходы";
			СтруктураВозврата.СтатьяРасходов = "РедактированиеЭтаповПобочныеИзделияСтатьяРасходов";
			СтруктураВозврата.АналитикаРасходов = "РедактированиеЭтаповПобочныеИзделияАналитикаРасходов";
			СтруктураВозврата.Назначение = "РедактированиеЭтаповПобочныеИзделияНазначение";
		КонецЕсли;
	Иначе
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			СтруктураВозврата.СписатьНаРасходы = "ВыходныеИзделияСписатьНаРасходы";
			СтруктураВозврата.СтатьяРасходов = "ВыходныеИзделияСтатьяРасходов";
			СтруктураВозврата.АналитикаРасходов = "ВыходныеИзделияАналитикаРасходов";
			СтруктураВозврата.Назначение = "ВыходныеИзделияНазначение";
		ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
			СтруктураВозврата.СписатьНаРасходы = "ВозвратныеОтходыСписатьНаРасходы";
			СтруктураВозврата.СтатьяРасходов = "ВозвратныеОтходыСтатьяРасходов";
			СтруктураВозврата.АналитикаРасходов = "ВозвратныеОтходыАналитикаРасходов";
			СтруктураВозврата.Назначение = "ВозвратныеОтходыНазначение";
		ИначеЕсли ИмяТЧ = "Продукция" Тогда
			СтруктураВозврата.СписатьНаРасходы = "ПродукцияСписатьНаРасходы";
			СтруктураВозврата.СтатьяРасходов = "ПродукцияСтатьяРасходов";
			СтруктураВозврата.АналитикаРасходов = "ПродукцияАналитикаРасходов";
			СтруктураВозврата.Назначение = "ПродукцияНазначение";
		ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
			СтруктураВозврата.СписатьНаРасходы = "ПобочныеИзделияСписатьНаРасходы";
			СтруктураВозврата.СтатьяРасходов = "ПобочныеИзделияСтатьяРасходов";
			СтруктураВозврата.АналитикаРасходов = "ПобочныеИзделияАналитикаРасходов";
			СтруктураВозврата.Назначение = "ПобочныеИзделияНазначение";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеПолучатель(ИмяОбъекта, ПрефиксТЧ = "", ИмяТЧ)
	
	ПолеПолучатель = Элементы[ИмяЭлементаПолучатель(ПрефиксТЧ, ИмяТЧ)];
	
	// Получатель при установленном флаге списать на расходы с типом работа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Получатель");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст"      , Новый ПолеКомпоновкиДанных("Объект.Подразделение"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста" , ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	
	// Получатель при снятом флаге списать на расходы с типом работа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Получатель");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	// Получатель с типом товары / многооборотная тара
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Получатель");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	                             	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	// Несколько складов не используются для типов товары / многооборотная тара
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста"            , ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного" , Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр"        , Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	
	// Отмененные строки
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Функция ИмяЭлементаПолучатель(ПрефиксТЧ, ИмяТЧ)
	
	Если ПрефиксТЧ = "РедактированиеЭтапов" Тогда
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			Возврат "РедактированиеЭтаповВыходныеИзделияПолучатель"
		ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
			Возврат "РедактированиеЭтаповПобочныеИзделияПолучатель"
		ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
			Возврат "РедактированиеЭтаповВозвратныеОтходыПолучатель"
		ИначеЕсли ИмяТЧ = "Продукция" Тогда
			Возврат "РедактированиеЭтаповПродукцияПолучатель"
		КонецЕсли;
	Иначе
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			Возврат "ВыходныеИзделияПолучатель"
		ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
			Возврат "ПобочныеИзделияПолучатель"
		ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
			Возврат "ВозвратныеОтходыПолучатель"
		ИначеЕсли ИмяТЧ = "Продукция" Тогда
			Возврат "ПродукцияПолучатель"
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповПобочныеИзделия" Тогда
			Возврат "РедактированиеЭтаповПобочныеИзделияПолучатель"
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" Тогда
			Возврат "РедактированиеЭтаповВыходныеИзделияПолучатель"
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииСуммыУслугиСервер()
	
	ТекущаяСтрока = Объект;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ОбновитьДанныеТаблицыУслуг(Объект);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтатусаСервер()
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КИсполнению")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.Закрыт") Тогда
		
		ЗаполнитьПустыеДатыПоступленияСервер();
			
	КонецЕсли;
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтавкиНДССервер()
	
	ТекущаяСтрока = Объект;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ОбновитьДанныеТаблицыУслуг(Объект);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	Документы.ЗаказПереработчику.ЗаполнитьУсловияЗакупокПоУмолчанию(Объект);
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(Объект);
	
	ВалютаДокумента = Объект.Валюта;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Материалы, ЗависимыеРеквизитыМатериалы());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвратныеОтходы, ЗависимыеРеквизитыВозвратныеОтходы());
	
	УстановитьВидимостьДоговора();
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер");
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Партнер");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельности(ЭтотОбъект);
	Объект.ОбосабливатьПоНазначениюПродукции = Константы.ВариантОбособленияМатериаловВПереработке.Получить()
		= Перечисления.ВариантыОбособленияПриПередачеВПереработку.НазначениеПродукции;
	
	АктуализироватьЗакупкуПодДеятельность();
	ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтактногоЛицаСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораСервер()
	
	ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет);
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ОплатаВВалюте");
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(Объект);
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельности(ЭтотОбъект);
	Объект.ОбосабливатьПоНазначениюПродукции = Константы.ВариантОбособленияМатериаловВПереработке.Получить()
		= Перечисления.ВариантыОбособленияПриПередачеВПереработку.НазначениеПродукции;
		
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Договор");
	АктуализироватьЗакупкуПодДеятельность();
	ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаЦеныСервер(ЦеныРассчитаны)
	
	ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(Объект.ВидЦены, "ВозвратныеОтходы", Ложь);
	ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(Объект.ВидЦены, "Материалы", Ложь) И ЦеныРассчитаны;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта, ПересчитатьСуммы)
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		
		СтараяВалюта                = ВалютаДокумента;
		ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
		БазоваяВалюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента, БазоваяВалюта);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента, БазоваяВалюта);
		
		// Пересчет общей суммы документа
		Объект.Сумма = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
			Объект.Сумма,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
		
		// Пересчет сумм в продукции
		ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.ВозвратныеОтходы,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
		
		// Пересчет сумм в материалах
		ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Материалы,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
		
		// Пересчет сумм в услугах
		ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Услуги,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты,
			"СуммаСНДС");
		
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Материалы, ЗависимыеРеквизитыМатериалы());
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвратныеОтходы, ЗависимыеРеквизитыВозвратныеОтходы());
		
		ПриИзмененииСуммыУслуг(ЭтаФорма);
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
		
	КонецЕсли;
	
	ВалютаПриИзмененииНаСервере();
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()
	
	УстановитьВидимостьДоговора();
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельности(ЭтотОбъект);
	Объект.ОбосабливатьПоНазначениюПродукции = Константы.ВариантОбособленияМатериаловВПереработке.Получить()
		= Перечисления.ВариантыОбособленияПриПередачеВПереработку.НазначениеПродукции;
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Контрагент");
	ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	УстановитьВидимостьДоговора();
	
	АктуализироватьСтавкуНДССервер();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
		КонецЕсли;
		
	КонецЕсли;
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Организация");
	
	АктуализироватьЗакупкуПодДеятельность();
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(
		Объект.Организация, 
		Объект.БанковскийСчет, 
		Объект.ФормаОплаты, 
		Объект.НаправлениеДеятельности);
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(
		Объект.Организация, 
		Объект.Касса, 
		Объект.ФормаОплаты, 
		Объект.НаправлениеДеятельности);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельности(ЭтотОбъект);
	Объект.ОбосабливатьПоНазначениюПродукции = Константы.ВариантОбособленияМатериаловВПереработке.Получить()
		= Перечисления.ВариантыОбособленияПриПередачеВПереработку.НазначениеПродукции;
	
	ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПоступлениеОднойДатойСервер()
	
	// Вычислим максимальную дату поступления и приведем к ней ТЧ
	Если Объект.ПоступлениеОднойДатой Тогда
		
		Объект.ДатаПоступления = МаксимальнаяДатаПоступления();
		
		ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыСервер()
	
	ПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(Объект.Дата);
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	УстановитьВидимостьЭлементовПоВерсииПартионногоУчета();
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Дата");
	АктуализироватьЗакупкуПодДеятельность();
	
	СпособРаспределенияЗатратНаВыходныеИзделияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельности(ЭтотОбъект);
	Объект.ОбосабливатьПоНазначениюПродукции = Константы.ВариантОбособленияМатериаловВПереработке.Получить()
		= Перечисления.ВариантыОбособленияПриПередачеВПереработку.НазначениеПродукции;
	
	АктуализироватьЗакупкуПодДеятельность();
	ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоУслуг(Количество, ГруппировкаЗатрат)
	
	Если ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки") Тогда
		Возврат 0;
	Иначе
		Возврат Количество;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииСписатьНаРасходы(ИмяТаблицы)
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ТекущиеДанные.СписатьНаРасходы
		И ТекущиеДанные.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ТекущиеДанные.СписатьНаРасходы = Ложь;
	КонецЕсли;
	
	Если ТекущиеДанные.СписатьНаРасходы Тогда
		ТекущиеДанные.Назначение = Неопределено;
	КонецЕсли;
	
	ДоходыИРасходыКлиентСервер.ПриИзмененииРеквизитаДоступностиСтатьиВСтроке(ЭтотОбъект, ТекущиеДанные, "Объект." + ИмяТаблицы);
	ОграничениеТипаПолучателя(ТекущиеДанные, ИмяЭлементаПолучатель( "", ИмяТаблицы), Истина);
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеТаблицыУслуг(ОбъектФормы)
	
	Если Не ОбъектФормы.Услуги.Количество() = 1 Тогда
		ОбъектФормы.Услуги.Очистить();
		ТекущаяСтрока = ОбъектФормы.Услуги.Добавить();
	Иначе
		ТекущаяСтрока = ОбъектФормы.Услуги[0];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ОбъектФормы);
	
КонецПроцедуры

#КонецОбласти

#Область Ценообразование

&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен, ИмяТЧ, ПоВыделеннымСтрокам)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата",    Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта",  Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	
	Если ПоВыделеннымСтрокам Тогда
		
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы[ИмяТЧ].ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект[ИмяТЧ].НайтиПоИдентификатору(Строка));
		КонецЦикла;
		
	Иначе
		
		МассивСтрок = Неопределено;
		
	КонецЕсли;
	
	ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
		Объект[ИмяТЧ],
		МассивСтрок,
		ПараметрыЗаполнения,
		СтруктураДействий);
	
	Если ИмяТЧ = "Материалы" Тогда
		СтруктураЗависимыхРеквизитов = ЗависимыеРеквизитыМатериалы();
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект[ИмяТЧ], СтруктураЗависимыхРеквизитов);
	ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
		СтруктураЗависимыхРеквизитов = ЗависимыеРеквизитыВозвратныеОтходы();
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект[ИмяТЧ], СтруктураЗависимыхРеквизитов);
	КонецЕсли;
	
	Если ИмяТЧ = "Материалы" Тогда
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	КонецЕсли;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ПодобратьТовар(ИмяТЧ)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",    Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",         Ложь);
	ПараметрыФормы.Вставить("Валюта",                  Объект.Валюта);
	ПараметрыФормы.Вставить("Дата",                    Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	
	Если ИмяТЧ = "Материалы" 
		ИЛИ ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки", Истина);
		ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
		ПараметрыФормы.Вставить("Назначение",         Объект.Назначение);
		ПараметрыФормы.Вставить("Подразделение",      Объект.Подразделение);
		ПараметрыФормы.Вставить("ПодборВариантовОбеспечения", Истина);
		ПараметрыФормы.Вставить("ДоступныеОстаткиПараметрыДокумента",
			ОбеспечениеВДокументахКлиент.ДоступныеОстаткиПараметрыДокумента(ЭтотОбъект));
		ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам", Истина);
		
		ФормаПодбораТоваров = "Обработка.ПодборТоваровВДокументПродажи.Форма";
		
		ОткрытьФорму(ФормаПодбораТоваров, ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
		
	Иначе
		
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", 
			?(
			  //++ Устарело_Производство21
			  Не ИспользоватьУправлениеПроизводством2_2
			  Или 
			  Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство")
			  Или
			  //-- Устарело_Производство21
			  Не ИспользоватьПроизводство, 
			  НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь), НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТареРаботе(Ложь)));
		
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		
		ФормаПодбораТоваров = "Обработка.ПодборТоваровВДокументЗакупки.Форма";
		
		ОткрытьФорму(ФормаПодбораТоваров, ПараметрыФормы, Элементы[ИмяТЧ], УникальныйИдентификатор);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено';
																|en = '""Currency"" is required'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТЧ)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	ТаблицаДокумента = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
	
	Если ИмяТЧ = "Продукция" Тогда
		СписокСвойств = "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
		СписокСвойств = "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "Материалы" Тогда
		СписокСвойств = "Номенклатура,Характеристика,Упаковка,Склад,Цена,КоличествоУпаковок,ВидЦены,
		|СрокПоставки,ВариантОбеспечения,Обособленно,Серия,ДатаОтгрузки";
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" Тогда
		СписокСвойств = "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповПобочныеИзделия" Тогда
		СписокСвойств = "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		СписокСвойств = "Номенклатура,Характеристика,Упаковка,Склад,КоличествоУпаковок,ВариантОбеспечения,
			|Обособленно,Серия,ДатаОтгрузки";
	КонецЕсли;
	
	ВыделенныеСтроки = Новый Массив;
	
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = ТаблицаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий);
		
		Если ИмяТЧ = "Продукция" 
		 Или ИмяТЧ = "ВозвратныеОтходы"
		 Или ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия"
		 Или ИмяТЧ = "РедактированиеЭтаповПобочныеИзделия" Тогда
			
			Если ИмяТЧ = "Продукция"
				Или ИмяТЧ = "ВозвратныеОтходы" Тогда
				ПутьКДаннымТаблицы = "Объект." + ИмяТЧ;
			ИначеЕсли ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" Тогда
				ПутьКДаннымТаблицы = "РедактированиеЭтапов.ВыходныеИзделия";
			ИначеЕсли ИмяТЧ = "РедактированиеЭтаповПобочныеИзделия" Тогда
				ПутьКДаннымТаблицы = "РедактированиеЭтапов.ПобочныеИзделия";
			КонецЕсли;
			ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, ТекущаяСтрока, ПутьКДаннымТаблицы);
			
		Иначе
			ДобавитьДействиеПроверитьЗаполнитьСклад(ИмяТЧ, ЭтаФорма, СтруктураДействий);
		КонецЕсли;
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, СтруктураДействий);
		
		Если ИмяТЧ = "Материалы" Тогда
			
			Если Объект.НеОтгружатьЧастями Тогда
				ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
			ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
			Если Не ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
				ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "ВариантОбеспечения");
			КонецЕсли;
			
		ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
			
			ТекущаяСтрока.ВидЦены = Объект.ВидЦены;
			Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
				СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
				СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
			КонецЕсли;
			
		ИначеЕсли ИмяТЧ = "Продукция" Тогда
			
			Если Объект.ПоступлениеОднойДатой Тогда
				ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
			
			ВыделенныеСтроки.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
			ПродукцияСтрокаЗаполнитьСпецификацию(ТекущаяСтрока);
			ЗаполнитьНомерГруппыЗатратВСтрокеПродукции(ТекущаяСтрока, Объект);
		
		//++ НЕ УТКА
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
			
			Если РедактированиеЭтапов.НеОтгружатьЧастями Тогда
				ТекущаяСтрока.ДатаОтгрузки = РедактированиеЭтапов.ДатаОтгрузки;
			КонецЕсли;
			ДобавитьДействияОбеспеченияЭтаповНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
			
			Если Не ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
				ДобавитьДействияОбеспеченияЭтаповНаСервере(СтруктураДействий, "ВариантОбеспечения");
			КонецЕсли;
		//-- НЕ УТКА
		КонецЕсли;
		
		//++ НЕ УТКА
		Если ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
			ЗаполнитьГруппуЗатратВНовойСтроке(ТекущаяСтрока, ЭтаФорма);
			ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаВСтроке(ТекущаяСтрока, ЭтаФорма);
		КонецЕсли;
		
		Если ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" Тогда
			ЗаполнитьСлужебныеРеквизитыВыходныеИзделияЭтапаВСтроке(ТекущаяСтрока, ЭтаФорма);
		КонецЕсли; 
		
		Если ИмяТЧ = "РедактированиеЭтаповПобочныеИзделия" Тогда
			ЗаполнитьСлужебныеРеквизитыПобочныеИзделияЭтапаВСтроке(ТекущаяСтрока, ЭтаФорма);
		КонецЕсли; 
		//-- НЕ УТКА
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		Если ИмяТЧ = "ВозвратныеОтходы" Или ИмяТЧ = "Продукция" Тогда
			НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если ИмяТЧ = "Продукция" 
		 Или ИмяТЧ = "ВозвратныеОтходы" 
		 Или ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" 
		 Или ИмяТЧ = "РедактированиеЭтаповПобочныеИзделия" Тогда
		 
			ТекущаяСтрока.Получатель = ?(ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа, 
										 ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"), 
										 ?(ЗначениеЗаполнено(СтрокаТовара.Склад), СтрокаТовара.Склад, СкладПоУмолчанию));
				
		КонецЕсли;	
		
		Если ИмяТЧ = "Материалы" Тогда
			
			ТекущаяСтрока.ДатаОтгрузки = ОбеспечениеВДокументахСервер.ДатаОтгрузкиОбработкаВыбораПодбор(
				СтрокаТовара.ДатаОтгрузки,
				ТекущаяСтрока.ВариантОбеспечения,
				НачалоДня);
			
		КонецЕсли;
		//++ НЕ УТКА
		Если ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
			
			ТекущаяСтрока.ДатаОтгрузки = ОбеспечениеВДокументахСервер.ДатаОтгрузкиОбработкаВыбораПодбор(
				СтрокаТовара.ДатаОтгрузки,
				ТекущаяСтрока.ВариантОбеспечения,
				НачалоДня);
			
		КонецЕсли;
		//-- НЕ УТКА
		
	КонецЦикла;
	
	Если ИмяТЧ = "Материалы" Тогда
		
		ОбеспечениеВДокументахСервер.АктуализироватьДатуОтгрузкиОднойДатой(
			Объект.НеОтгружатьЧастями,
			Объект.ДатаОтгрузки,
			Объект.Материалы,
			"ДатаОтгрузки");
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	Если ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		
		ОбеспечениеВДокументахСервер.АктуализироватьДатуОтгрузкиОднойДатой(
			РедактированиеЭтапов.НеОтгружатьЧастями,
			РедактированиеЭтапов.ДатаОтгрузки,
			РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами,
			"ДатаОтгрузки");
			
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "ВозвратныеОтходы" Тогда
		МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	КонецЕсли;
	
	Если ИмяТЧ = "Продукция" Тогда
		
		ЗаполнитьУслугиПоПродукции(Объект);
		ЗаполнитьВозвратныеОтходыИМатериалыНаСервере(ВыделенныеСтроки);
		ПриИзмененииСуммыУслуг(ЭтаФорма);
		ОбновитьКолонкуДоступноСервер();
		
	КонецЕсли;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ,, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение, ИмяТЧ)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТЧ = "Материалы" Тогда
		
		ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеПодбора(
			ЭтотОбъект,
			ВыбранноеЗначение,
			"ОбработкаВыбораПодборНаКлиентеПослеВопросаМатериалы");
			
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		
		ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеПодбора(
			ЭтотОбъект,
			ВыбранноеЗначение,
			"ОбработкаВыбораПодборНаКлиентеПослеВопросаРедактированиеЭтапов");
			
	Иначе
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиентеПослеВопросаМатериалы(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(ДополнительныеПараметры, "Материалы");
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "Материалы" Тогда
		
		СтруктураДействийСДобавленнымиСтроками = Новый Структура;
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", Объект.ВидЦены));
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
		
		ДобавитьДействиеПроверитьЗаполнитьСклад(ИмяТабличнойЧасти, ЭтаФорма, СтруктураДействийСДобавленнымиСтроками);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТабличнойЧасти, СтруктураДействийСДобавленнымиСтроками);
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействийСДобавленнымиСтроками);
		
		СтруктураДействийСИзмененнымиСтроками = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТабличнойЧасти, СтруктураДействийСИзмененнымиСтроками);
		
		СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
		СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
		СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
		СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
		СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
		СтруктураДействий.ИмяТЧ                                  = ИмяТабличнойЧасти;
		СтруктураДействий.ИзменятьКоличество                     = Истина;
		СтруктураДействий.ТолькоТовары                           = Истина;
		
		ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения, ИмяТабличнойЧасти);
		ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна, СкладОбязателен);
		ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения, ЭтаФорма);
		
		Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
			
			ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
			ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры", 0.1, Истина);
			
		КонецЕсли;
		
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
		
		Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
			Элементы.Материалы.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
		КонецЕсли;
		
	Иначе // Продукция и возвратные отходы
		
		СтруктураДействийСДобавленнымиСтроками = Новый Структура;
		СтруктураДействийСИзмененнымиСтроками = Новый Структура;
		
		Если ИмяТабличнойЧасти = "ВозвратныеОтходы" Тогда
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", Объект.ВидЦены));
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
			СтруктураДействийСИзмененнымиСтроками.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
		КонецЕсли;
		
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействийСДобавленнымиСтроками);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТабличнойЧасти, СтруктураДействийСДобавленнымиСтроками);
		ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(Объект.Подразделение, СтруктураДействийСДобавленнымиСтроками, "Получатель");
		
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействийСДобавленнымиСтроками);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТабличнойЧасти, СтруктураДействийСИзмененнымиСтроками);
		
		СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
		СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
		СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
		СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
		СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
		СтруктураДействий.ИмяТЧ                                  = ИмяТабличнойЧасти;
		СтруктураДействий.ИзменятьКоличество                     = Истина;
		СтруктураДействий.ТолькоТоварыИРабота                    = Истина;
		
		ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения, ИмяТабличнойЧасти);
		ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
		
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
		
		Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
			
			Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
			
			ТекущиеДанные = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
			ЗаполнитьПолучателяПоУмолчанию(ТекущиеДанные);
			
			Если ИмяТабличнойЧасти = "Продукция"
				Или ИмяТабличнойЧасти = "ВозвратныеОтходы" Тогда
				ПутьКДаннымТаблицы = "Объект." + ИмяТабличнойЧасти;
			Иначе
				ПутьКДаннымТаблицы = "РедактированиеЭтапов." + ИмяТаблицы(ИмяТабличнойЧасти);
			КонецЕсли;
			ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, ТекущиеДанные, ПутьКДаннымТаблицы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения, ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "Материалы" Тогда
		ДобавитьДействияОбеспеченияНаСервере(
			СтруктураПараметровДействия.СтруктураДействийСДобавленнымиСтроками,
			"ВариантОбеспечения,СкладОбязателен,ДатаОтгрузкиОбязательна");
	КонецЕсли;
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма, Объект, СтруктураПараметровДействия, КэшированныеЗначения);
	Если ИмяТабличнойЧасти = "Материалы" Тогда
		ОбеспечениеВДокументахКлиентСервер.УдалитьДействияОбеспечения(СтруктураПараметровДействия.СтруктураДействийСДобавленнымиСтроками);
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Материалы.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалы Тогда
		ОткрытьПодборСерий(,ТекущиеДанные);
	//++ НЕ УТКА
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалыЭтапов Тогда
		ОткрытьПодборСерийЭтапа(, ТекущиеДанные);
	//-- НЕ УТКА
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказПереработчику));
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерийМатериалы(
		ОбеспечениеВДокументахКлиентСервер.РежимПодборСерий());
	
	Если ПараметрыФормы <> Неопределено Тогда
		
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерииМатериалы", ЭтотОбъект, ПараметрыФормы));
			
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура ОткрытьПодборСерийЭтапа(Текст = "", ТекущиеДанные = Неопределено)
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерийМатериалыЭтапов(
		ОбеспечениеВДокументахКлиентСервер.РежимПодборСерий());
	
	Если ПараметрыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы.Вставить("ВыборСерии", Истина);
	
	Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерииМатериалыЭтапов", ЭтотОбъект, ПараметрыФормы));
		
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область Обеспечение

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов()
	
	Ошибка = Ложь;
	Если ОбеспечениеВДокументахКлиент.НужноОбновитьДоступностьПослеЗаписи(ЭтотОбъект,
		"Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов", Ошибка) Тогда
		Если Объект.ГруппировкаЗатрат
			= ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство") Тогда
			Элементы.МатериалыСтраницыГиперссылкаСостояниеОбеспечения.ТекущаяСтраница
				= Элементы.МатериалыСтраницаГиперссылкаСостояниеОбеспеченияЗаказовНаПроизводство;
		Иначе
			ОбеспечениеВДокументахКлиент.НастроитьГиперссылкиСостояниеОбеспеченияПослеЗаписи(ЭтотОбъект, Ошибка);
		КонецЕсли;
		ОбновлятьКолонку = ОбеспечениеВДокументахКлиент.ОбновлятьКолонкуДоступноПослеРаспределенияЗапасов(ЭтотОбъект);
		Если ОбновлятьКолонку Тогда
			ОбновитьКолонкуДоступноПослеРаспределенияЗапасов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонкуДоступноПослеРаспределенияЗапасов()
	ОбеспечениеВДокументахСервер.ОбновитьДоступностьПослеЗаписи(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ДатыОтгрузки

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузки(ИмяТЧ)

	МассивВыделенныхСтрок = Элементы[ИмяТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() > 0 Тогда
		ДатаОтгрузки = Объект.ДатаОтгрузки;
		
		ДопПараметры = Новый Структура("МассивВыделенныхСтрок,ИмяТЧ", МассивВыделенныхСтрок, ИмяТЧ);
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьДатуОтгрузкиЗавершение", ЭтотОбъект, ДопПараметры);
		
		ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаОтгрузки, НСтр("ru = 'Введите дату отгрузки';
																						|en = 'Enter shipment date'"), ЧастиДаты.Дата, Оповещение);
		
	Иначе
		ТекстПредупреждения = НСтр("ru = 'В документе не выбраны строки для заполнения. Дата отгрузки не будет заполнена.';
									|en = 'No lines to fill in are selected in the document. The shipment date will not be filled in.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузкиЗавершение(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата <> Неопределено И ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		ДатаОтгрузки = ВыбраннаяДата;
		МассивВыделенныхСтрок = ДополнительныеПараметры.МассивВыделенныхСтрок;
		
		ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, ДополнительныеПараметры.ИмяТЧ, МассивВыделенныхСтрок);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, ИмяТЧ, МассивВыделенныхСтрок = Неопределено)

	ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
	
	ОбеспечениеВДокументахСервер.ЗаполнитьРеквизитВКоллекции(
		ТабличнаяЧасть,
		"ДатаОтгрузки",
		ДатаОтгрузки,
		МассивВыделенныхСтрок);

КонецПроцедуры

&НаСервере
Процедура НеОтгружатьЧастямиПриИзмененииСервер()

	Если Объект.НеОтгружатьЧастями Тогда
		Объект.ДатаОтгрузки = ОбеспечениеВДокументахСервер.МаксимальноеЗначениеВКоллекции(Объект.Материалы, "ДатаОтгрузки", '00010101');
		ОбеспечениеВДокументахСервер.ЗаполнитьРеквизитВКоллекции(Объект.Материалы, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;

	УстановитьВидимостьЭлементовФормыДатОтгрузки();

КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область ЗаказНаПроизводство

//++ Устарело_Производство21

&НаСервере
Процедура ЗаполнитьЗапланированноеКоличествоЭтапов()
	
	Если НЕ Объект.ПереработкаПоЗаказу Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУслуги.Распоряжение КАК Распоряжение,
	|	ТаблицаУслуги.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	&ТаблицаУслуги КАК ТаблицаУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Распоряжение КАК Распоряжение,
	|	ТаблицаУслуги.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаЭтапыГрафик.Количество КАК Количество
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТаблицаУслуги.Распоряжение)
	|			И (ТаблицаЭтапыГрафик.КодСтроки = ТаблицаУслуги.КодСтрокиЭтапыГрафик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЭтапыГрафик.ЗаказНаПроизводство КАК Распоряжение,
	|	ТаблицаЭтапыГрафик.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаЭтапыГрафик.Номенклатура КАК Номенклатура,
	|	ТаблицаЭтапыГрафик.Характеристика КАК Характеристика,
	|	ТаблицаЭтапыГрафик.КЗаказуПриход КАК Количество
	|ИЗ
	|	РегистрНакопления.ПереработкаПоГрафикуПроизводства.Обороты(
	|			,
	|			,
	|			,
	|			(ЗаказНаПроизводство, КодСтрокиЭтапыГрафик) В
	|				(ВЫБРАТЬ
	|					ТаблицаУслуги.Распоряжение,
	|					ТаблицаУслуги.КодСтрокиЭтапыГрафик
	|				ИЗ
	|					ТаблицаУслуги)) КАК ТаблицаЭтапыГрафик";
	
	ТаблицаУслуги = Объект.Услуги.Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаУслуги", ТаблицаУслуги);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.ВыполнитьПакет();
	ЭтапыЗаказа = Результат[2].Выгрузить();
	ПродукцияЗаказа = Результат[2].Выгрузить();
	
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		
		Запланировано = 0;
		
		СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаУслуга);
		СписокСтрок = ЭтапыЗаказа.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаУслуга);
			НормативнаяПродукция = ПродукцияЗаказа.Скопировать(СтруктураПоиска);
			
			СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
			ФактическаяПродукция = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
			
			КоэффициентНормативов = Документы.ЗаказПереработчику.КоэффициентНормативов(
											ФактическаяПродукция, 
											НормативнаяПродукция, 
											Ложь);
											
			Запланировано = СписокСтрок[0].Количество * КоэффициентНормативов;
		КонецЕсли;
		
		СтрокаУслуга.Запланировано = Запланировано;
		
	КонецЦикла;
	
КонецПроцедуры

//-- Устарело_Производство21

&НаСервере
Процедура ОбновитьИнформациюПоЗаказам()
	
	Если НЕ Объект.ПереработкаПоЗаказу Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	СписокЗаказов.Очистить();
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ГруппаЗатрат) Тогда
			ПараметрыГруппыЗатрат = Новый Структура("НомерГруппыЗатрат,Распоряжение,Спецификация");
			ЗаполнитьЗначенияСвойств(ПараметрыГруппыЗатрат, ТекСтрока);
			ПредставлениеРаспоряжения = ПереработкаНаСтороне.ПредставлениеГруппыЗатрат(
											ПараметрыГруппыЗатрат, 
											Объект.ГруппировкаЗатрат, 
											Объект.Продукция,
											ИмяПоляГруппаЗатрат);
		Иначе
			ПредставлениеРаспоряжения = ТекСтрока.ГруппаЗатрат;
		КонецЕсли;
		
		СписокЗаказов.Добавить(ТекСтрока.Распоряжение, ПредставлениеРаспоряжения);
	КонецЦикла;
	
	МассивСтрок = Новый Массив;
	
	Если СписокЗаказов.Количество() = 0 Тогда
		
		Если НЕ Объект.ПометкаУдаления
			И НЕ ТолькоПросмотр Тогда
			//++ Устарело_Производство21
			Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
				ШаблонНадписи = НСтр("ru = 'Добавить заказы';
									|en = 'Add orders'");
			Иначе
			//-- Устарело_Производство21	
				ШаблонНадписи = НСтр("ru = 'Добавить этапы';
									|en = 'Add stages'");
			//++ Устарело_Производство21	
			КонецЕсли;
			//-- Устарело_Производство21
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ШаблонНадписи,,,, "#ДобавитьРаспоряжения"));
		КонецЕсли;
		
	ИначеЕсли СписокЗаказов.Количество() = 1 Тогда
		
		ШаблонНадписи = НСтр("ru = 'Основание:';
							|en = 'Base document:'");
		МассивСтрок.Добавить(ШаблонНадписи);
		МассивСтрок.Добавить(" ");
		
		ТекстРаспоряжение = Новый ФорматированнаяСтрока(СписокЗаказов[0].Представление,,,, ПолучитьНавигационнуюСсылку(СписокЗаказов[0].Значение));
		МассивСтрок.Добавить(ТекстРаспоряжение);
		
		Если Не ТолькоПросмотр Тогда
			МассивСтрок.Добавить(" ");
			ШаблонНадписи = НСтр("ru = 'изменить';
								|en = 'change'");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ШаблонНадписи,,,, "#ДобавитьРаспоряжения"));
		КонецЕсли;
		
	Иначе
		
		//++ Устарело_Производство21
		Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
			ШаблонНадписи = НСтр("ru = 'Всего заказов: %1';
								|en = 'Total orders: %1'");
		Иначе
		//-- Устарело_Производство21	
			ШаблонНадписи = НСтр("ru = 'Всего этапов: %1';
								|en = 'Total stages: %1'");
		//++ Устарело_Производство21	
		КонецЕсли;
		//-- Устарело_Производство21
			
		СсылкаСтроки = "";
		Если Не ТолькоПросмотр Тогда
			СсылкаСтроки = "#ДобавитьРаспоряжения";
		КонецЕсли;
		
		ТекстРаспоряжение = СтрШаблон(ШаблонНадписи, Формат(СписокЗаказов.Количество(), "ЧГ=0"));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстРаспоряжение,,,, СсылкаСтроки));
		
	КонецЕсли;
	
	НадписьЗаголовокЗаказы = Новый ФорматированнаяСтрока(МассивСтрок);
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		НесколькоЭтапов = (СписокЗаказов.Количество() > 1);
		Элементы.РедактированиеЭтаповВыходныеИзделияГруппаЗатрат.Видимость = НесколькоЭтапов;
		Элементы.РедактированиеЭтаповПобочныеИзделияГруппаЗатрат.Видимость = НесколькоЭтапов;
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатрат.Видимость = НесколькоЭтапов;
		Элементы.УслугиГруппаЗатрат.Видимость = НесколькоЭтапов;
	КонецЕсли;
	
	ДинамическаяСтруктура = Неопределено;
	Для Каждого Заказ Из СписокЗаказов.ВыгрузитьЗначения() Цикл
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
			ДинамическаяСтруктура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "ДинамическаяСтруктура");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеЭтапаПроизводства

&НаСервере
Процедура ЭтапыЗаполнитьПолучателяНаСервере(ПараметрыТЧ, ВыделенныеСтроки, Получатель)
	
	ИмяТЧОбъект = ПараметрыТЧ.ИмяТЧОбъект;
	ИмяТЧФорма  = ПараметрыТЧ.ИмяТЧФорма;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая", Новый Структура("ИмяПоляСклад", "Получатель"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = РедактированиеЭтапов[ИмяТЧОбъект].НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ДанныеСтроки.Получатель = Получатель;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧФорма, ВыделенныеСтроки, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаблокироватьЭтапы(Отказ = Неопределено)

	Если ЭтапыЗаблокированы Тогда
		Возврат Истина;
	КонецЕсли;
	
	СписокЭтапов = Новый Массив;
	Для каждого ЭлементКоллекции Из РедактированиеЭтапов.Этапы Цикл
		СписокЭтапов.Добавить(Новый Структура("Ссылка,ВерсияДанных", ЭлементКоллекции.Распоряжение, ЭлементКоллекции.ВерсияДанных));
	КонецЦикла;
	
	ТекстПредупреждения = ЗаблокироватьЭтапыНаСервере(СписокЭтапов, УникальныйИдентификатор);
	Если ТекстПредупреждения <> Неопределено Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	ЭтапыЗаблокированы = Истина;
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаблокироватьЭтапыНаСервере(Знач СписокЭтапов, Знач ИдентификаторФормы)

	Для каждого ПараметрыЭтапа Из СписокЭтапов Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ПараметрыЭтапа.Ссылка, ПараметрыЭтапа.ВерсияДанных, ИдентификаторФормы);
		Исключение
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстПредупреждения = НСтр("ru = 'Не удалось заблокировать объект %1, по причине:
												|%2';
												|en = 'Cannot lock the %1 object. Reason:
												|%2'");
			Возврат СтрШаблон(ТекстПредупреждения, ПараметрыЭтапа.Ссылка, КраткоеПредставлениеОшибки);
		КонецПопытки;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

&НаСервере
Процедура РазблокироватьЭтапыНаСервере()

	Если НЕ ЭтапыЗаблокированы Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПараметрыЭтапа Из РедактированиеЭтапов.Этапы Цикл
		РазблокироватьДанныеДляРедактирования(ПараметрыЭтапа.Распоряжение, УникальныйИдентификатор);
	КонецЦикла;
	
	ЭтапыЗаблокированы = Ложь;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРедактированиеЭтапов(СписокНовыхУслуг = Неопределено)

	Если Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		Возврат;
	КонецЕсли;
	
	ЭтапСтруктура = Новый Структура;
	Для каждого Реквизит Из РеквизитФормыВЗначение("РедактированиеЭтапов").Метаданные().ТабличныеЧасти.Этапы.Реквизиты Цикл
		ЭтапСтруктура.Вставить(Реквизит.Имя);
	КонецЦикла;
	ЭтапСтруктура.Вставить("НеОтгружатьЧастями");
	ЭтапСтруктура.Вставить("ДатаОтгрузки");
	
	ДанныеЭтапов = Новый Соответствие;
	
	Обработки.РедактированиеЭтаповПроизводства.ДобавитьДанныеЭтапов(
			РедактированиеЭтапов,
			Объект.Услуги.Выгрузить(СписокНовыхУслуг, "Распоряжение").ВыгрузитьКолонку("Распоряжение"));
	
	Для каждого Строка Из РедактированиеЭтапов.Этапы Цикл
		ДанныеЭтапов.Вставить(Строка.Распоряжение, Строка);
	КонецЦикла;
	
	// Заполнение номера группы затрат
	НомераГруппЗатрат = Новый Соответствие;
	КоллекцияУслуг = ?(СписокНовыхУслуг <> Неопределено, СписокНовыхУслуг, Объект.Услуги);
	Для каждого СтрокаУслуга Из КоллекцияУслуг Цикл
		НомераГруппЗатрат.Вставить(СтрокаУслуга.Распоряжение, СтрокаУслуга.НомерГруппыЗатрат);
	КонецЦикла;
	
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("РедактированиеЭтаповВыходныеИзделия");
	СписокТЧ.Добавить("РедактированиеЭтаповПобочныеИзделия");
	СписокТЧ.Добавить("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	СписокТЧ.Добавить("РедактированиеЭтаповЭтапы");
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
		Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
			НомерГруппыЗатрат = НомераГруппЗатрат.Получить(ДанныеСтроки.Распоряжение);
			Если НомерГруппыЗатрат <> Неопределено Тогда
				ДанныеСтроки.НомерГруппыЗатрат = НомерГруппыЗатрат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	РедактированиеЭтапов.НеОтгружатьЧастями = Объект.НеОтгружатьЧастями;
	РедактированиеЭтапов.ДатаОтгрузки = Объект.ДатаОтгрузки;
	РедактированиеЭтапов.ПроизводствоОднойДатой = Объект.ПоступлениеОднойДатой;
	РедактированиеЭтапов.ДатаПроизводства = Объект.ДатаПоступления;
	
	Если Объект.НеОтгружатьЧастями Тогда
		ЗаполнитьДатуВТЧ("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами", "ДатаОтгрузки", РедактированиеЭтапов.ДатаОтгрузки);
	КонецЕсли;
	Если Объект.ПоступлениеОднойДатой Тогда
		ЗаполнитьДатуВТЧ("РедактированиеЭтаповВыходныеИзделия", "ДатаПроизводства", РедактированиеЭтапов.ДатаПроизводства);
		ЗаполнитьДатуВТЧ("РедактированиеЭтаповПобочныеИзделия", "ДатаПроизводства", РедактированиеЭтапов.ДатаПроизводства);
		ЗаполнитьДатуВТЧ("РедактированиеЭтаповЭтапы", "ДатаПроизводства", РедактированиеЭтапов.ДатаПроизводства);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СписокРаспоряжений = РедактированиеЭтапов.Этапы.Выгрузить(,"Заказ").ВыгрузитьКолонку(0);
	УправлениеПроизводством.ОбновитьПризнакТребуетсяЗаполнитьПолеЭтапПотребитель(ЭтаФорма, СписокРаспоряжений);
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьСлужебныеРеквизитыВыходныеИзделияЭтапа(ДанныеЭтапов);
	ЗаполнитьСлужебныеРеквизитыПобочныеИзделияЭтапа(ДанныеЭтапов);
	ЗаполнитьПараметрыВыбораНазначенийЭтапов();
	
	Если Объект.ПометкаУдаления Тогда
		Элементы.РедактированиеЭтаповВыходныеИзделия.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповПобочныеИзделия.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповПроизводствоОднойДатой.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповДатаПроизводства.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповНеОтгружатьЧастями.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповДатаОтгрузки.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтапов_Продукция_РазбитьСтроку.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Отходы_РазбитьСтроку.Доступность = Ложь;
		Элементы.МатериалыЭтаповОтгрузить.Доступность = Ложь;
		Элементы.МатериалыЭтаповРезервировать.Доступность = Ложь;
		Элементы.МатериалыЭтаповОбеспечению.Доступность = Ложь;
		Элементы.МатериалыЭтаповНеОбеспечивать.Доступность = Ложь;
		Элементы.МатериалыЭтаповВключитьОбособленноеОбеспечение.Доступность = Ложь;
		Элементы.МатериалыЭтаповВыключитьОбособленноеОбеспечение.Доступность = Ложь;
		Элементы.РедактированиеЭтаповКонтекстноеМенюОтгрузить.Доступность = Ложь;
		Элементы.РедактированиеЭтаповКонтекстноеМенюРезервировать.Доступность = Ложь;
		Элементы.РедактированиеЭтаповКонтекстноеМенюКОбеспечению.Доступность = Ложь;
		Элементы.РедактированиеЭтаповКонтекстноеМенюНеОбеспечивать.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_ВставитьСтроки.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_РазбитьСтроку.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_ПодобратьТовары.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_ЗаполнитьДатуОтгрузки.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_ЗаполнитьГруппуЗатрат.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_ВставитьСтрокиКонтекстноеМеню.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_РазбитьСтрокуКонтекстноеМеню.Доступность = Ложь;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтаФорма, "Этапы,НеОтгружатьЧастями,ПроизводствоОднойДатой");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатыПроизводстваЭтапаСервер(ДатаПроизводства)
	
	ЗаполнитьДатуВТЧ("РедактированиеЭтаповВыходныеИзделия", "ДатаПроизводства", ДатаПроизводства);
	ЗаполнитьДатуВТЧ("РедактированиеЭтаповПобочныеИзделия", "ДатаПроизводства", ДатаПроизводства);
	ЗаполнитьДатуВТЧ("РедактированиеЭтаповЭтапы",           "ДатаПроизводства", ДатаПроизводства);
	
КонецПроцедуры

&НаСервере
Процедура ПроизводствоОднойДатойПриИзмененииНаСервере()

	Объект.ПоступлениеОднойДатой = РедактированиеЭтапов.ПроизводствоОднойДатой;
	
	Если РедактированиеЭтапов.ПроизводствоОднойДатой Тогда
		
		РедактированиеЭтапов.ДатаПроизводства = Макс(Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(РедактированиеЭтапов.ВыходныеИзделия, "ДатаПроизводства"), 
										Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(РедактированиеЭтапов.ПобочныеИзделия, "ДатаПроизводства"));
										
		ЗаполнитьДатыПроизводстваЭтапаСервер(РедактированиеЭтапов.ДатаПроизводства);								
		
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтаФорма, "ПроизводствоОднойДатой");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные, Форма)
	
	Если Форма.РедактированиеЭтапов.ПроизводствоОднойДатой
		И НЕ ТекущиеДанные.Отменено Тогда
		
		ТекущиеДанные.ДатаПроизводства = Форма.РедактированиеЭтапов.ДатаПроизводства;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НеОтгружатьЧастямиПриИзмененииНаСервере()

	Объект.НеОтгружатьЧастями = РедактированиеЭтапов.НеОтгружатьЧастями;
	
	Если РедактированиеЭтапов.НеОтгружатьЧастями Тогда
		РедактированиеЭтапов.ДатаОтгрузки = Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(
									РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами, "ДатаОтгрузки");
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтаФорма, "НеОтгружатьЧастями");

КонецПроцедуры

// Процедура вызывается при изменении реквизитов от которых зависят свойства других реквизитов, например, видимость.
//
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыЭтапа(Форма, СписокРеквизитов = "")
	
	Объект = Форма.РедактированиеЭтапов;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("НеОтгружатьЧастями")
		ИЛИ Инициализация Тогда
		
		Элементы.РедактированиеЭтаповДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Видимость = НЕ Объект.НеОтгружатьЧастями;
		Элементы.РедактированиеЭтапов_Обеспечение_ЗаполнитьДатуОтгрузки.Доступность = НЕ Объект.НеОтгружатьЧастями;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПроизводствоОднойДатой")
		ИЛИ Инициализация Тогда
		
		Элементы.РедактированиеЭтаповДатаПроизводства.Видимость = Объект.ПроизводствоОднойДатой;
		Элементы.РедактированиеЭтаповВыходныеИзделияДатаПроизводства.Видимость = НЕ Объект.ПроизводствоОднойДатой;
		Элементы.РедактированиеЭтаповПобочныеИзделияДатаПроизводства.Видимость = НЕ Объект.ПроизводствоОднойДатой;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Этапы")
		ИЛИ Инициализация Тогда
		Элементы.РедактированиеЭтаповВыходныеИзделия.Видимость = Объект.ЕстьВыпускающийЭтап;
		Элементы.РедактированиеЭтапов_Обеспечение_ПодобратьТовары.Доступность = (Объект.Этапы.Количество() <> 0);
		
		Если Объект.ЕстьВыпускающийЭтап Тогда
			Элементы.ГруппаРедактированиеЭтаповПобочныеИзделия.ОтображатьЗаголовок = Истина;
			Элементы.ГруппаРедактированиеЭтаповПобочныеИзделия.Заголовок =
				?(Объект.ПобочныеИзделия.Количество() = 0,
				НСтр("ru = 'Побочный и промежуточный выпуск по фиксированной стоимости';
					|en = 'Side and intermediate release at fixed cost'"),
				СтрШаблон(НСтр("ru = 'Побочный и промежуточный выпуск по фиксированной стоимости (%1)';
								|en = 'Side and intermediate release at fixed cost (%1)'"), Объект.ПобочныеИзделия.Количество()));
		Иначе
			Элементы.ГруппаРедактированиеЭтаповПобочныеИзделия.ОтображатьЗаголовок = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧЭтапа(ИмяТЧ)
	
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧЭтапаЗавершение", ЭтотОбъект, ИмяТЧ);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма), Элементы[ИмяТЧ],
		Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧЭтапаЗавершение(НоваяСтрока, ИмяТЧ) Экспорт
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока.КодСтроки           = 0;
	НоваяСтрока.ИдентификаторСтроки = Неопределено;
	Если ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		НоваяСтрока.КлючНоменклатура = Неопределено;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	Если ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий,"ОбновитьКэшНоменклатура");
		ОбработатьРазделениеСтрокиВходящейВНабор(НоваяСтрока);
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" Тогда
		ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, ТекущиеДанные, ТекущиеДанные.СпособРаспределенияЗатратНаВыходныеИзделия);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьГруппуЗатратВНовойСтроке(ТекущиеДанные, Форма)
	
	Если Форма.Объект.Услуги.Количество() <> 0 Тогда
		ТекущиеДанные.НомерГруппыЗатрат = Форма.Объект.Услуги[0].НомерГруппыЗатрат;
		ТекущиеДанные.ГруппаЗатрат = Форма.Объект.Услуги[0].ГруппаЗатрат;
		ТекущиеДанные.Распоряжение = Форма.Объект.Услуги[0].Распоряжение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаВСтроке(ТекущиеДанные, Форма, ДанныеЭтапов = Неопределено)
	
	ДанныеЭтапа = Неопределено;
	Если ДанныеЭтапов <> Неопределено Тогда
		ДанныеЭтапа = ДанныеЭтапов.Получить(ТекущиеДанные.Распоряжение);
	КонецЕсли;
	
	Если ДанныеЭтапа = Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Распоряжение", ТекущиеДанные.Распоряжение);
		НайденныеСтроки = Форма.РедактированиеЭтапов.Этапы.НайтиСтроки(СтруктураПоиска);
		Если Не НайденныеСтроки.Количество() = 0 Тогда
			
			ДанныеЭтапа = НайденныеСтроки[0];
			
			Если ДанныеЭтапов <> Неопределено Тогда
				ДанныеЭтапов.Вставить(ТекущиеДанные.Распоряжение, ДанныеЭтапа);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеЭтапа, "Подразделение");
	
	Форма.Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиНазначениеОбеспечения.СписокВыбора.ЗагрузитьЗначения(
		ДанныеЭтапа.СписокВыбораНазначений.ВыгрузитьЗначения());
	
	Форма.ОтборСсылокВФормеВыбораНазначений.ЗагрузитьЗначения(
		ДанныеЭтапа.СписокВыбораНазначений.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВыходныеИзделияЭтапа(ДанныеЭтапов)
	
	Для каждого Строка Из РедактированиеЭтапов.ВыходныеИзделия Цикл
		
		ЗаполнитьСлужебныеРеквизитыВыходныеИзделияЭтапаВСтроке(Строка, ЭтаФорма, ДанныеЭтапов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыВыходныеИзделияЭтапаВСтроке(ТекущиеДанные, Форма, ДанныеЭтапов = Неопределено)
	
	ДанныеЭтапа = Неопределено;
	Если ДанныеЭтапов <> Неопределено Тогда
		ДанныеЭтапа = ДанныеЭтапов.Получить(ТекущиеДанные.Распоряжение);
	КонецЕсли;
	
	Если ДанныеЭтапа = Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Распоряжение", ТекущиеДанные.Распоряжение);
		НайденныеСтроки = Форма.РедактированиеЭтапов.Этапы.НайтиСтроки(СтруктураПоиска);
		Если Не НайденныеСтроки.Количество() = 0 Тогда
			
			ДанныеЭтапа = НайденныеСтроки[0];
			
			Если ДанныеЭтапов <> Неопределено Тогда
				ДанныеЭтапов.Вставить(ТекущиеДанные.Распоряжение, ДанныеЭтапа);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные.СпособРаспределенияЗатратНаВыходныеИзделия = ДанныеЭтапа.СпособРаспределенияЗатратНаВыходныеИзделия;
	ТекущиеДанные.Подразделение = ДанныеЭтапа.Подразделение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПобочныеИзделияЭтапа(ДанныеЭтапов)
	
	Для каждого Строка Из РедактированиеЭтапов.ПобочныеИзделия Цикл
		
		ЗаполнитьСлужебныеРеквизитыПобочныеИзделияЭтапаВСтроке(Строка, ЭтаФорма, ДанныеЭтапов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыПобочныеИзделияЭтапаВСтроке(ТекущиеДанные, Форма, ДанныеЭтапов = Неопределено)
	
	ДанныеЭтапа = Неопределено;
	Если ДанныеЭтапов <> Неопределено Тогда
		ДанныеЭтапа = ДанныеЭтапов.Получить(ТекущиеДанные.Распоряжение);
	КонецЕсли;
	
	Если ДанныеЭтапа = Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Распоряжение", ТекущиеДанные.Распоряжение);
		НайденныеСтроки = Форма.РедактированиеЭтапов.Этапы.НайтиСтроки(СтруктураПоиска);
		Если Не НайденныеСтроки.Количество() = 0 Тогда
			
			ДанныеЭтапа = НайденныеСтроки[0];
			Если ДанныеЭтапов <> Неопределено Тогда
				ДанныеЭтапов.Вставить(ТекущиеДанные.Распоряжение, ДанныеЭтапа);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные.Статус = ДанныеЭтапа.Статус;
	ТекущиеДанные.Подразделение = ДанныеЭтапа.Подразделение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПриНачалеРедактирования(ТекущиеДанные, НоваяСтрока, Копирование)
	
	ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаВСтроке(ТекущиеДанные, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзделияЭтаповОтмененоПриИзменении(ТекущиеДанные)
	
	Если НЕ ТекущиеДанные.Отменено Тогда
		
		ТекущиеДанные.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыПроизводства.ПустаяСсылка");
		ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(ИмяТЧ, ПредставлениеТЧ)
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ИмяЭлементаФормыТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами";
	ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
		ИмяЭлементаФормыТЧ = "РедактированиеЭтаповПобочныеИзделия";
	ИначеЕсли ИмяТЧ = "ВыходныеИзделия" Тогда
		ИмяЭлементаФормыТЧ = "РедактированиеЭтаповВыходныеИзделия";
	КонецЕсли;
	
	ОтменаСтрокВозможна = ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(
		РедактированиеЭтапов[ИмяТЧ],
		ПредставлениеТЧ,
		Элементы[ИмяЭлементаФормыТЧ].ВыделенныеСтроки);
	
	Если НЕ ОтменаСтрокВозможна Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", Элементы[ИмяЭлементаФормыТЧ].ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтменитьВыделенныеСтрокиВыборПричиныЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.ПричиныОтменыПроизводства.ФормаВыбора",
		,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтрокиВыборПричиныЗавершение(ПричинаОтмены, ДополнительныеПараметры) Экспорт
	
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОтмененныеСтроки = Ложь;
	
	Для Каждого ТекСтрока Из ДополнительныеПараметры.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = РедактированиеЭтапов[ДополнительныеПараметры.ИмяТЧ].НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
				СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
				ЕстьОтмененныеСтроки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОтмененныеСтроки Тогда
		
		Если ДополнительныеПараметры.ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
			ОбеспечениеМатериаламиИРаботамиПослеОтменыСтрокНаСервере();
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выделенные строки отменены';
				|en = 'Selected lines are canceled'"),
			,
			,
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выделенные строки уже отменены.';
													|en = 'Selected lines are already canceled.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеМатериаламиИРаботамиПослеОтменыСтрокНаСервере()
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
			РедактированиеЭтапов, 
			ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПотребительНачалоВыбора(ТекущиеДанные, ИмяТЧ)
	
	ДанныеЭтапа = РедактированиеЭтапов.Этапы.НайтиСтроки(Новый Структура("Распоряжение", ТекущиеДанные.Распоряжение))[0];
	ОбъектЭтап = Новый Структура("Ссылка, Распоряжение", ДанныеЭтапа.Распоряжение, ДанныеЭтапа.Заказ);
	
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		ТаблицаФормы = Элементы.РедактированиеЭтаповПобочныеИзделия; // ТаблицаФормы
	ИначеЕсли ИмяТЧ = "ВыходныеИзделия" Тогда
		ТаблицаФормы = Элементы.РедактированиеЭтаповВыходныеИзделия; // ТаблицаФормы
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТаблицаФормы.ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭтапПотребительНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеПроизводствомКлиент.ОткрытьФормуВыбораЭтапаПотребителя(
		ОбъектЭтап,
		ТекущиеДанные,
		ЭтаФорма,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПотребительНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = РедактированиеЭтапов[Параметры.ИмяТЧ].НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	Строка.ЭтапПотребитель = Результат;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьПараметрыВыбораСтатейРасходовЭтаповПроизводства(ПараметрыВыбораСтатейИАналитик)
	
	// Выходные изделия этапов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	
	ПараметрыВыбора.ПутьКДанным					= "РедактированиеЭтапов.ВыходныеИзделия";
	ПараметрыВыбора.Статья						= "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи					= "ТипСтатьи";
	
	ПараметрыВыбора.ВыборСтатьиРасходов			= Истина;
	ПараметрыВыбора.АналитикаРасходов			= "АналитикаРасходов";
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов	= Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов	= "АналитикаАктивовПассивов";
	
	ЭлементыФормы = ПараметрыВыбора.ЭлементыФормы;
	ЭлементыФормы.Статья.Добавить("РедактированиеЭтаповВыходныеИзделияСтатьяРасходов");
	ЭлементыФормы.АналитикаРасходов.Добавить("РедактированиеЭтаповВыходныеИзделияАналитикаРасходов");
	ЭлементыФормы.АналитикаАктивовПассивов.Добавить("РедактированиеЭтаповВыходныеИзделияАналитикаАктивовПассивов");
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
	// Побочные изделия этапов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	
	ПараметрыВыбора.ПутьКДанным					= "РедактированиеЭтапов.ПобочныеИзделия";
	ПараметрыВыбора.Статья						= "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи					= "ТипСтатьи";
	
	ПараметрыВыбора.ВыборСтатьиРасходов			= Истина;
	ПараметрыВыбора.АналитикаРасходов			= "АналитикаРасходов";
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов	= Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов	= "АналитикаАктивовПассивов";
	
	ЭлементыФормы = ПараметрыВыбора.ЭлементыФормы;
	ЭлементыФормы.Статья.Добавить("РедактированиеЭтаповПобочныеИзделияСтатьяРасходов");
	ЭлементыФормы.АналитикаРасходов.Добавить("РедактированиеЭтаповПобочныеИзделияАналитикаРасходов");
	ЭлементыФормы.АналитикаАктивовПассивов.Добавить("РедактированиеЭтаповПобочныеИзделияАналитикаАктивовПассивов");
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВыбораНазначенийЭтапов()
	
	СтруктураПоиска = Новый Структура("Распоряжение");
	Для каждого Этап Из РедактированиеЭтапов.Этапы Цикл
		
		ЗаполнитьЗначенияСвойств(ЭтапСтруктура, Этап,, "Распоряжение, Заказ");
		ЭтапСтруктура.Распоряжение = Этап.Заказ;
		
		СтруктураПоиска.Распоряжение = Этап.Распоряжение;
		ИзделияРаспоряжения = РедактированиеЭтапов.ВыходныеИзделия.Выгрузить(СтруктураПоиска);
		
		Этап.ПараметрыЗаполненияНазначений = ОбеспечениеПроизводства.ПараметрыДействияЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(
			ЭтапСтруктура,
			ИзделияРаспоряжения);
		
		ОбеспечениеПроизводства.ЗаполнитьСписокВыбораНазначенийВЭтапеПроизводства(
			ЭтапСтруктура,
			ИзделияРаспоряжения,
			Этап.СписокВыбораНазначений);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область ДоступностьИВидимостьЭлементовНаФорме

&НаСервере
Процедура УстановитьВидимостьЭлементовФормыДатПоступления()
	
	// Кнопка и реквизит ТЧ
	Элементы.ПродукцияЗаполнитьДатуПоступления.Видимость = Не Объект.ПоступлениеОднойДатой;
	Элементы.ПродукцияДатаПоступления.Видимость = Не Объект.ПоступлениеОднойДатой;
	
	Элементы.ВозвратныеОтходыЗаполнитьДатуПоступления.Видимость = Не Объект.ПоступлениеОднойДатой;
	Элементы.ВозвратныеОтходыДатаПоступления.Видимость = Не Объект.ПоступлениеОднойДатой;
	
	// Общий реквизит формы
	Элементы.ДатаПоступления1.Видимость = Объект.ПоступлениеОднойДатой;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормыДатОтгрузки()
		
	// Кнопка и реквизит ТЧ
	Элементы.МатериалыЗаполнитьДатуОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;
	Элементы.МатериалыДатаОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;
	
	//++ НЕ УТКА
	Элементы.РедактированиеЭтапов_Обеспечение_ЗаполнитьДатуОтгрузки.Видимость = Не РедактированиеЭтапов.НеОтгружатьЧастями;
	Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Видимость = Не РедактированиеЭтапов.НеОтгружатьЧастями;
	//-- НЕ УТКА
	
	// Общий реквизит формы и кнопка
	Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
	//++ НЕ УТКА
	Элементы.РедактированиеЭтаповДатаОтгрузки.Видимость = РедактированиеЭтапов.НеОтгружатьЧастями;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован
		Или Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.Закрыт Тогда
		
		УстановитьПодписку = Ложь;
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению
		Или Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.КИсполнению Тогда
		
		УстановитьПодписку = Объект.Согласован;
		
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Договор");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Контрагент");
	
	МассивЭлементов.Добавить("ЖелаемаяДатаПоступления");
	
	МассивЭлементов.Добавить("НеОтгружатьЧастями");
	МассивЭлементов.Добавить("ДатаОтгрузки");
	МассивЭлементов.Добавить("ПоступлениеОднойДатой");
	МассивЭлементов.Добавить("ДатаПоступления");
	
	МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	// Элементы управления, связанные с оплатой
	МассивЭлементов.Добавить("БанковскийСчет");
	
	// Элементы управления, связанные с таблицей Возвращаемые товары
	МассивЭлементов.Добавить("ПродукцияНоменклатура");
	МассивЭлементов.Добавить("ПродукцияХарактеристика");
	МассивЭлементов.Добавить("ПродукцияКоличествоУпаковок");
	МассивЭлементов.Добавить("ПродукцияУпаковка");
	МассивЭлементов.Добавить("ПродукцияЦена");
	МассивЭлементов.Добавить("ПродукцияСтавкаНДС");
	МассивЭлементов.Добавить("ПродукцияСумма");
	
	// Элементы управления, связанные с таблицей Заменяющие товары
	МассивЭлементов.Добавить("МатериалыНоменклатура");
	МассивЭлементов.Добавить("МатериалыХарактеристика");
	МассивЭлементов.Добавить("МатериалыКоличествоУпаковок");
	МассивЭлементов.Добавить("МатериалыУпаковка");
	МассивЭлементов.Добавить("МатериалыВидЦены");
	МассивЭлементов.Добавить("МатериалыЦена");
	МассивЭлементов.Добавить("МатериалыСумма");
	
	МассивЭлементов.Добавить("Продукция;ПередНачаломДобавления,ПередУдалением");
	МассивЭлементов.Добавить("Материалы;ПередНачаломДобавления,ПередУдалением;МатериалыДатаОтгрузки,МатериалыВариантОбеспечения");
	
	// Элементы управления, связанные с таблицей Возвращаемые товары
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("ПродукцияДобавить");
	МассивЭлементов.Добавить("ПродукцияИзменить");
	МассивЭлементов.Добавить("ПродукцияСкопировать");
	МассивЭлементов.Добавить("ПродукцияУдалить");
	
	МассивЭлементов.Добавить("ПродукцияЗаполнитьПоСпецификации");
	МассивЭлементов.Добавить("ПродукцияЗаполнитьДатуПоступления");
	
	МассивЭлементов.Добавить("ПродукцияОткрытьПодбор");
	МассивЭлементов.Добавить("ПродукцияПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ПродукцияЗагрузитьДанныеИзТСД");
	
	// Элементы управления, связанные с таблицей Заменяющие товары
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("МатериалыДобавить");
	МассивЭлементов.Добавить("МатериалыИзменить");
	МассивЭлементов.Добавить("МатериалыСкопировать");
	МассивЭлементов.Добавить("МатериалыУдалить");
	
	МассивЭлементов.Добавить("МатериалыЗаполнитьПоСпецификации");
	МассивЭлементов.Добавить("МатериалыЗаполнитьЦеныПоВидуЦен");
	МассивЭлементов.Добавить("МатериалыЗаполнитьДатуОтгрузки");
	МассивЭлементов.Добавить("МатериалыЗаполнитьСклад");
	МассивЭлементов.Добавить("МатериалыДополнитьМногооборотнойТарой");
	
	МассивЭлементов.Добавить("МатериалыОткрытьПодбор");
	МассивЭлементов.Добавить("МатериалыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("МатериалыЗагрузитьДанныеИзТСД");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВидаЦен()
	
	ДоступныеВидыЦен = ОпределитьДоступныеВидыЦен();
	
	Если ДоступныеВидыЦен = Неопределено Тогда // ФО Несколько видов цен включена.
		
		Элементы.ВидЦены.Видимость                     = Истина;
		Элементы.ЗаполнятьВидыЦенПоУмолчанию.Видимость = Ложь;
		
	ИначеЕсли ДоступныеВидыЦен.Количество() > 1 Тогда // ФО Несколько видов цен выключена, видов цен - больше одного.
		
		Элементы.ВидЦены.Видимость                     = Ложь;
		Элементы.ЗаполнятьВидыЦенПоУмолчанию.Видимость = Истина;
		
	ИначеЕсли ДоступныеВидыЦен.Количество() = 1 Тогда // ФО Несколько видов цен выключена, вид цены - один.
		
		Элементы.ВидЦены.Видимость                     = Ложь;
		Элементы.ЗаполнятьВидыЦенПоУмолчанию.Видимость = Истина;
		
	Иначе // ФО Несколько видов цен выключена, видов цен в базе нет.
		
		Элементы.ВидЦены.Видимость                     = Ложь;
		Элементы.ЗаполнятьВидыЦенПоУмолчанию.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ДоступныеВидыЦен <> Неопределено И ДоступныеВидыЦен.Количество() = 0 Тогда
		Объект.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьДоступныеВидыЦен()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		СтруктураОтбора.Вставить("ЦенаВключаетНДС", Ложь);
		СтруктураОтбора.Вставить("Статус", Перечисления.СтатусыДействияВидовЦен.Действует);
		Возврат Справочники.ВидыЦен.ДоступныеВидыЦен(СтруктураОтбора);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	ВидимостьДоговора = Ложь;
	
	ПараметрыОбъекта = Новый Структура("Партнер, Контрагент, Организация, Соглашение, Договор");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(
		ПараметрыОбъекта,
		Элементы.Договор.Доступность,
		ВидимостьДоговора,
		Объект.Договор);
	
	Элементы.Договор.Видимость = ВидимостьДоговора;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОбеспечения()
	
	ЕстьПраво = ОбеспечениеВДокументахСервер.ЕстьПравоПросмотраГиперссылкиСостоянияОбеспечения();
	Элементы.МатериалыСтраницыГиперссылкаСостояниеОбеспечения.Видимость = ЕстьПраво;
	//++ НЕ УТКА
	Элементы.МатериалыЭтаповСтраницыГиперссылкаСостояниеОбеспечения.Видимость = ЕстьПраво
		И (ДинамическаяСтруктура = Неопределено Или Не ДинамическаяСтруктура);
	//-- НЕ УТКА
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Элементы.СоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
		Элементы.СоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;
	НастроитьГиперссылкиСостояниеОбеспечения();
	Элементы.ДатаОтгрузки.Подсказка = ОбеспечениеВДокументахСервер.ПодсказкаДатаОтгрузки();
	
	//++ НЕ УТКА
	Элементы.РедактированиеЭтаповДатаОтгрузки.Подсказка = ОбеспечениеВДокументахСервер.ПодсказкаДатаОтгрузки();
	
	Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПроизводится.Видимость = 
		ДинамическаяСтруктура = Неопределено Или Не ДинамическаяСтруктура;
	
	Элементы.МатериалыЭтаповСостояниеОбеспеченияДинамическаяСтруктура.Видимость =
		ПравоДоступа("Просмотр", Метаданные.Отчеты.УкомплектованностьЗаказов)
		И ДинамическаяСтруктура <> Неопределено
		И ДинамическаяСтруктура;
	
	Элементы.МатериалыЭтаповРезервироватьПоМереПоступления.Видимость = 
		ДинамическаяСтруктура = Неопределено Или Не ДинамическаяСтруктура;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГиперссылкиСостояниеОбеспечения()
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		
		Элементы.МатериалыСтраницыГиперссылкаСостояниеОбеспечения.ТекущаяСтраница
			= Элементы.МатериалыСтраницаГиперссылкаСостояниеОбеспеченияЗаказовНаПроизводство;
		
	Иначе
		
		ОбеспечениеВДокументахСервер.НастроитьГиперссылкиСостояниеОбеспечения(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьГиперссылкиСостояниеОбеспеченияКлиент()
	
	Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство") Тогда
		
		Элементы.МатериалыСтраницыГиперссылкаСостояниеОбеспечения.ТекущаяСтраница
			= Элементы.МатериалыСтраницаГиперссылкаСостояниеОбеспеченияЗаказовНаПроизводство;
		
	ИначеЕсли Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства") Тогда
		
		ОбеспечениеВДокументахКлиент.НастроитьГиперссылкиСостояниеОбеспечения(ЭтотОбъект);
		
	Иначе
		
		ОбеспечениеВДокументахКлиент.НастроитьГиперссылкиСостояниеОбеспечения(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоВерсииПартионногоУчета()
	
	Элементы.ВозвратныеОтходыСтатьяКалькуляции.Видимость = ПартионныйУчетВерсии22;
	
КонецПроцедуры

// Процедура устанавливает свойства реквизитов в зависимости от значений функциональных опции, например, видимость.
//
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормыПоФункциональнымОпциям(Форма)
	
	Элементы = Форма.Элементы;
	
	// ИспользоватьНесколькоСкладов
	Если Не Форма.ИспользоватьНесколькоСкладов Тогда
		Элементы.ПродукцияПолучатель.Заголовок        = НСтр("ru = 'Подразделение';
															|en = 'Business unit'");
		Элементы.ВозвратныеОтходыПолучатель.Заголовок = НСтр("ru = 'Подразделение';
															|en = 'Business unit'");
	КонецЕсли;
	
	Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиВходитВНабор.Видимость =
		Форма.ДоступноИспользованиеНаборовВПроизводстве;
	
КонецПроцедуры	

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы)
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Договор" Тогда
		ДоговорПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НеОтгружатьЧастями" Тогда
		НеОтгружатьЧастямиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДатаОтгрузки" Тогда
		ДатаОтгрузкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПоступлениеОднойДатой" Тогда
		ПоступлениеОднойДатойПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДатаПоступления" Тогда
		ДатаПоступленияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВернутьМногооборотнуюТару" Тогда
		ВернутьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияНоменклатура" Тогда
		ПродукцияНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияХарактеристика" Тогда
		ПродукцияХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияПолучатель" Тогда
		ПродукцияПолучательПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияКоличествоУпаковок" Тогда
		ПродукцияКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияУпаковка" Тогда
		ПродукцияУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияСписатьНаРасходы" Тогда
		ПродукцияСписатьНаРасходыПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияСтатьяРасходов" Тогда
		ПродукцияСтатьяРасходовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыНоменклатура" Тогда
		МатериалыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыХарактеристика" Тогда
		МатериалыХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыКоличествоУпаковок" Тогда
		МатериалыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыОбособленно" Тогда
		МатериалыОбособленноПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыУпаковка" Тогда
		МатериалыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыВидЦены" Тогда
		МатериалыВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыЦена" Тогда
		МатериалыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыСумма" Тогда
		МатериалыСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияОтмененоПричиныОтменыНеИспользуются" Тогда
		ПродукцияОтмененоПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияОтменено" Тогда
		ПродукцияОтмененоПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыСерия" Тогда
		МатериалыСерияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыСклад" Тогда
		МатериалыСкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыОтменено" Тогда
		МатериалыОтмененоПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "Продукция_Заполнить_ЗаполнитьДатуПоступления" Тогда
		ПродукцияЗаполнитьДатуПоступления(Команда);
	ИначеЕсли Команда.Имя = "Продукция_Заполнить_ЗаполнитьПолучателя" Тогда
		ПродукцияЗаполнитьПолучателя(Команда);
	ИначеЕсли Команда.Имя = "Продукция_Общее_ПодобратьТовары" Тогда
		ПродукцияОбщееПодобратьТовары(Команда);
	ИначеЕсли Команда.Имя = "Продукция_Общее_ПоискПоШтрихкоду" Тогда
		ПродукцияОбщееПоискПоШтрихкоду(Команда);
	ИначеЕсли Команда.Имя = "Продукция_Общее_ЗагрузитьДанныеИзТСД" Тогда
		ПродукцияОбщееЗагрузитьДанныеИзТСД(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Заполнить_ЗаполнитьЦеныПоВидуЦен" Тогда
		МатериалыЗаполнитьЦеныПоВидуЦен(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Заполнить_ЗаполнитьДатуОтгрузки" Тогда
		МатериалыЗаполнитьДатуОтгрузки(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Заполнить_ЗаполнитьСклад" Тогда
		МатериалыЗаполнитьСклад(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Заполнить_ДополнитьМногооборотнойТарой" Тогда
		ДополнитьМногооборотнойТарой(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Общее_ПодобратьТовары" Тогда
		МатериалыОбщееПодобратьТовары(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Общее_ПоискПоШтрихкоду" Тогда
		МатериалыОбщееПоискПоШтрихкоду(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Общее_ЗагрузитьДанныеИзТСД" Тогда
		МатериалыОбщееЗагрузитьДанныеИзТСД(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	Если Элемент.Имя = "Продукция" Тогда
		ПродукцияПередУдалением(Элемент, Отказ);
	ИначеЕсли Не Элемент.Имя = "Материалы" Тогда
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элемент.Имя = "Продукция" Тогда
		ПродукцияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Неопределено);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

// Параметры:
// 	Элемент - ПолеФормы - команда
&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Элемент - ПолеФормы - команда
&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Команда - КомандаФормы - команда
&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Элемент - ТаблицаФормы - таблица формы
// 	Отказ - Булево - Отказ
&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура УстановитьВидимостьОбеспеченияМатериалыЭтапов()
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Элементы.МатериалыЭтаповСоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
		Элементы.МатериалыЭтаповСоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТКА

// Параметры:
// 	Элемент - ТаблицаФормы - таблица формы
// 	Отказ - Булево - Отказ
&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Элемент - ТаблицаФормы - таблица формы
// 	Отказ - Булево - Отказ
// 	Копирование - Булево - Копирование
// 	Родитель - ГруппаФормы - Родитель
// 	Группа - ГруппаФормы - Группа
&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	ИзменитьДокументСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ГруппировкаЗатрат

&НаСервере
Процедура ЗаполнитьСписокВыбораГруппировкиЗатрат()

	ПараметрыИспользования = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПараметрыИспользования();
	
	//++ Устарело_Производство21
	ПараметрыИспользования.ПоЗаказамНаПроизводство = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	//++ НЕ УТКА
	ПараметрыИспользования.ПоЗаказамНаПроизводство = ПараметрыИспользования.ПоЗаказамНаПроизводство
		И (ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством")
			Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство);
	//-- НЕ УТКА

	//-- Устарело_Производство21
	
	ПараметрыИспользования.ПоЭтапамПроизводства = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	//++ НЕ УТКА

	//++ Устарело_Производство21
	ПараметрыИспользования.ПоЭтапамПроизводства = ПараметрыИспользования.ПоЭтапамПроизводства
		И (ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2")
			Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства);
	//-- Устарело_Производство21

	//-- НЕ УТКА
	
	ПараметрыИспользования.БезГруппировки = Не Объект.ОбосабливатьПоНазначениюПродукции
		Или (Объект.Проведен
				И Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
				
	ПараметрыИспользования.ПоСпецификациям =
		ИспользоватьПроизводство
		И (Не Объект.ОбосабливатьПоНазначениюПродукции
			Или (Объект.Проведен
				И Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям));
	
	Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ЗаполнитьДанныеВыбора(
		Элементы.ГруппировкаЗатрат.СписокВыбора, ПараметрыИспользования);

КонецПроцедуры

&НаСервере
Процедура ГруппировкаЗатратПриИзмененииНаСервере()

	Если Не ЗначениеЗаполнено(Объект.ГруппировкаЗатрат) Тогда
		Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки;
	КонецЕсли;
	
	ПерепривязатьМатериалы = ГруппировкаЗатратДоИзменения = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
		И Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям;
		
	Если ПерепривязатьМатериалы Тогда
		
		// Проверка что одна и та же номенклатура не оформлена двумя строками с разными спецификациями.
		ПродукцияКопия = Объект.Продукция.Выгрузить(, "НомерГруппыЗатрат,Спецификация");
		ПродукцияКопия.Свернуть("НомерГруппыЗатрат,Спецификация");
		ВсегоСтрок = ПродукцияКопия.Количество();
		ПродукцияКопия.Свернуть("НомерГруппыЗатрат");
		ПерепривязатьМатериалы = ВсегоСтрок = ПродукцияКопия.Количество();
		
	КонецЕсли;

	Объект.ПереработкаПоЗаказу = (
		//++ Устарело_Производство21
		Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство
		Или
		//-- Устарело_Производство21
		Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства);
	
	Если ПерепривязатьМатериалы Тогда
		
		ВыполнитьСменуГруппировкиЗатратСПродукцииНаСпецификации();
		
	ИначеЕсли Объект.ПереработкаПоЗаказу Тогда 
		
		// Нельзя текущие данные привязать к заказам, поэтому удалим все
		// Пользователю нужно воспользоваться подбором из заказов.
		Объект.Продукция.Очистить();
		Объект.ВозвратныеОтходы.Очистить();
		Объект.Материалы.Очистить();
		Объект.Услуги.Очистить();
		//++ НЕ УТКА
		РедактированиеЭтапов.ВыходныеИзделия.Очистить();
		РедактированиеЭтапов.ПобочныеИзделия.Очистить();
		РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.Очистить();
		РедактированиеЭтапов.Этапы.Очистить();
		КоличествоВыходныхИзделий = 0;
		
		Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
			ИнициализироватьРедактированиеЭтапов();
		КонецЕсли;
		//-- НЕ УТКА
		
	Иначе
		
		// В остальных случаях пользователю нужно заново определять группировки
		Для каждого ДанныеСтроки Из Объект.ВозвратныеОтходы Цикл
			ДанныеСтроки.НомерГруппыЗатрат = 0;
		КонецЦикла;
		
		Для каждого ДанныеСтроки Из Объект.Материалы Цикл
			ДанныеСтроки.НомерГруппыЗатрат = 0;
		КонецЦикла;
		
		Для каждого ДанныеСтроки Из Объект.Продукция Цикл
			ДанныеСтроки.НомерГруппыЗатрат = 0;
		КонецЦикла;
		
		Для каждого ДанныеСтроки Из Объект.Продукция Цикл
			ЗаполнитьНомерГруппыЗатратВСтрокеПродукции(ДанныеСтроки, Объект);
		КонецЦикла;
		
		Объект.Услуги.Очистить();
		
		//++ НЕ УТКА
		Если НЕ Объект.ПереработкаПоЗаказу Тогда
			Объект.Распоряжение = Неопределено;
			РедактированиеЭтапов.ВыходныеИзделия.Очистить();
			РедактированиеЭтапов.ПобочныеИзделия.Очистить();
			РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.Очистить();
			РедактированиеЭтапов.Этапы.Очистить();
		КонецЕсли;
		//-- НЕ УТКА
		
		НадписьЗаголовокЗаказы = Новый ФорматированнаяСтрока("");
		
	КонецЕсли;
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства
		Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции Тогда
		Объект.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПустаяСсылка();
	ИначеЕсли Не ЗначениеЗаполнено(Объект.СпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		Объект.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	КонецЕсли;
	
	СпособРаспределенияЗатратНаВыходныеИзделияПриИзмененииНаСервере();
	
	ЗаполнитьУслугиПоПродукции(Объект);
	
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		ПриИзмененииСуммыУслугиСервер();
	Иначе
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	КонецЕсли;
	
	ЗаполнитьПредставлениеГруппыЗатрат();
	НастроитьФормуПоСпособуГруппировкиЗатрат();
	
	ГруппировкаЗатратДоИзменения = Объект.ГруппировкаЗатрат;
	ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	
	ПараметрыВстраивания = Документы.ЗаказПереработчику.ДоступныеОстаткиПараметрыВстраивания(Объект);
	ДоступныеОстаткиПараметрыВстраивания = Неопределено;
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриСозданииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);
	УстановитьВидимостьОбеспечения();
		
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСменуГруппировкиЗатратСПродукцииНаСпецификации()

	Для каждого СтрокаПродукция Из Объект.Продукция Цикл
		СтруктураПоиска = Новый Структура("Спецификация", СтрокаПродукция.Спецификация);
		СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаПродукцияСТакойжеСпецификацией Из СписокСтрок Цикл
			Если СтрокаПродукцияСТакойжеСпецификацией.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаПродукцияСТакойжеСпецификацией.НомерГруппыЗатрат);
			СписокСтрок = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
			Для каждого Строкаотход Из СписокСтрок Цикл
				Строкаотход.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат;
			КонецЦикла;
			
			СписокСтрок = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаМатериал Из СписокСтрок Цикл
				СтрокаМатериал.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат;
			КонецЦикла;
			СтрокаПродукцияСТакойжеСпецификацией.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат ;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоСпособуГруппировкиЗатрат()

	// Заголовки элементов
	#Область Заголовки
	ЗаголовокГруппы = ПереработкаНаСторонеКлиентСервер.ЗаголовокПоляГруппыЗатрат(
		Объект.ГруппировкаЗатрат, Объект.ОбосабливатьПоНазначениюПродукции);
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции Тогда
		
		ПодсказкаГруппыПродукция = НСтр("ru = 'Продукция к которой относится продукция';
										|en = 'Products that include products'");
		ПодсказкаГруппыОтходы    = НСтр("ru = 'Продукция к которой относится возвратный отход';
										|en = 'Products that include recyclable waste'");
		ПодсказкаГруппыМатериалы = НСтр("ru = 'Продукция к которой относится материал';
										|en = 'Products that include material'");
		ПодсказкаГруппыУслуги    = НСтр("ru = 'Продукция к которой относится услуга';
										|en = 'Products that include service'");
		
		ЗаголовокКомандыЗаполнитьГруппуЗатрат = НСтр("ru = 'Продукцию';
													|en = 'Products'");
		
	ИначеЕсли Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям Тогда
		
		ПодсказкаГруппыПродукция = НСтр("ru = 'Спецификация к которой относится продукция';
										|en = 'Bill of materials to which products belong'");
		ПодсказкаГруппыОтходы    = НСтр("ru = 'Спецификация к которой относится возвратный отход';
										|en = 'Bill of materials to which recyclable waste belongs'");
		ПодсказкаГруппыМатериалы = НСтр("ru = 'Спецификация к которой относится материал';
										|en = 'Bill of materials to which the material belongs'");
		ПодсказкаГруппыУслуги    = НСтр("ru = 'Спецификация к которой относится услуга';
										|en = 'Bill of materials to which the service belongs'");
		
		ЗаголовокКомандыЗаполнитьГруппуЗатрат = НСтр("ru = 'Спецификацию';
													|en = 'Specification'");
	//++ Устарело_Производство21	
	ИначеЕсли Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		
		ПодсказкаГруппыПродукция = НСтр("ru = 'Заказ (этап, спецификация) к которому относится продукция';
										|en = 'Order (stage, BOM) that includes the products'");
		ПодсказкаГруппыОтходы    = НСтр("ru = 'Заказ (этап, спецификация) к которому относится возвратный отход';
										|en = 'Order (stage, BOM) that includes the recyclable waste'");
		ПодсказкаГруппыМатериалы = НСтр("ru = 'Заказ (этап, спецификация) к которому относится материал';
										|en = 'Order (stage, BOM) that includes the material'");
		ПодсказкаГруппыУслуги    = НСтр("ru = 'Заказ (этап, спецификация) к которому относится услуга';
										|en = 'Order (stage, BOM) that includes the service'");
		
		ЗаголовокКомандыЗаполнитьГруппуЗатрат = НСтр("ru = 'Заказ (этап, спецификация)';
													|en = 'Order (step, BOM)'");
	//-- Устарело_Производство21
	
	ИначеЕсли Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		
		ПодсказкаГруппыПродукция = НСтр("ru = 'Этап к которому относится продукция';
										|en = 'Stage to which products are related'");
		ПодсказкаГруппыОтходы    = НСтр("ru = 'Этап к которому относится возвратный отход';
										|en = 'Stage to which the recyclable waste is related'");
		ПодсказкаГруппыМатериалы = НСтр("ru = 'Этап к которому относится материал';
										|en = 'Stage to which material is related'");
		ПодсказкаГруппыУслуги    = НСтр("ru = 'Этап к которому относится услуга';
										|en = 'Stage to which the service is related'");
		
		ЗаголовокКомандыЗаполнитьГруппуЗатрат = НСтр("ru = 'Этап производства';
													|en = 'Production stage'");
	КонецЕсли;

	Если Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		Элементы.ПродукцияГруппаЗатрат.Заголовок        = ЗаголовокГруппы;
		Элементы.ВозвратныеОтходыГруппаЗатрат.Заголовок = ЗаголовокГруппы;
		Элементы.МатериалыГруппаЗатрат.Заголовок        = ЗаголовокГруппы;
		Элементы.УслугиГруппаЗатрат.Заголовок           = ЗаголовокГруппы;
		//++ НЕ УТКА
		Элементы.РедактированиеЭтаповВыходныеИзделияГруппаЗатрат.Заголовок = ЗаголовокГруппы;
		Элементы.РедактированиеЭтаповПобочныеИзделияГруппаЗатрат.Заголовок = ЗаголовокГруппы;
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатрат.Заголовок = ЗаголовокГруппы;
		//-- НЕ УТКА
		
		Элементы.ПродукцияГруппаЗатрат.Подсказка        = ПодсказкаГруппыПродукция;
		Элементы.ВозвратныеОтходыГруппаЗатрат.Подсказка = ПодсказкаГруппыОтходы;
		Элементы.МатериалыГруппаЗатрат.Подсказка        = ПодсказкаГруппыМатериалы;
		Элементы.УслугиГруппаЗатрат.Подсказка           = ПодсказкаГруппыУслуги;
		//++ НЕ УТКА
		Элементы.РедактированиеЭтаповВыходныеИзделияГруппаЗатрат.Подсказка = ПодсказкаГруппыПродукция;
		Элементы.РедактированиеЭтаповПобочныеИзделияГруппаЗатрат.Подсказка = ПодсказкаГруппыОтходы;
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатрат.Подсказка = ПодсказкаГруппыМатериалы;
		//-- НЕ УТКА
		
		Элементы.ВозвратныеОтходыЗаполнитьГруппуЗатрат.Заголовок = ЗаголовокКомандыЗаполнитьГруппуЗатрат;
		Элементы.МатериалыЗаполнитьГруппуЗатрат.Заголовок = ЗаголовокКомандыЗаполнитьГруппуЗатрат;
		//++ НЕ УТКА
		Элементы.РедактированиеЭтапов_Обеспечение_ЗаполнитьГруппуЗатрат.Заголовок = ЗаголовокКомандыЗаполнитьГруппуЗатрат;
		//-- НЕ УТКА
	КонецЕсли;
	
	#КонецОбласти

	// Видимость элементов
	#Область Видимость
	Элементы.ПродукцияГруппаЗатрат.Видимость = Объект.ПереработкаПоЗаказу;
	
	ПоЭтапам = (Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства);
	Элементы.СтраницаПродукцияЭтапов.Видимость = ПоЭтапам;
	Элементы.СтраницаМатериалыЭтапов.Видимость = ПоЭтапам;
	Элементы.СтраницаПродукция.Видимость = НЕ ПоЭтапам;
	Элементы.СтраницаМатериалы.Видимость = НЕ ПоЭтапам;
	Элементы.СуммаВсегоБезНДСМатериалов.Видимость = НЕ ПоЭтапам;
	
	Элементы.ПродукцияПерезаполнить.Видимость = 
		Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки
		И ИспользоватьПроизводство;
	
	Элементы.ВозвратныеОтходыГруппаЗатрат.Видимость = (Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
	Элементы.МатериалыГруппаЗатрат.Видимость = (Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
	Элементы.ВозвратныеОтходыЗаполнитьГруппуЗатрат.Видимость = (Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
	Элементы.МатериалыЗаполнитьГруппуЗатрат.Видимость = (Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
	
	//++ Устарело_Производство21
	Элементы.ПродукцияПодобратьПоЗаказамНаПроизводство.Видимость = Объект.ПереработкаПоЗаказу;
	//-- Устарело_Производство21
	
	Элементы.УслугиЗапланировано.Видимость = Ложь;
	//++ Устарело_Производство21
	Элементы.УслугиЗапланировано.Видимость = (Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство);
	//-- Устарело_Производство21
	
	Элементы.ПродукцияСпецификация.Видимость = (
		Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям
		ИЛИ Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции);
	
	Элементы.ЗакрытьЗаказ.Видимость = Не Объект.ПереработкаПоЗаказу;
	Элементы.НадписьЗаголовокЗаказы.Видимость = Объект.ПереработкаПоЗаказу;
	//++ НЕ УТКА
	Элементы.НадписьЗаголовокЗаказы.Доступность =
		ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаПроизводство2_2)
		И ПравоДоступа("Чтение", Метаданные.Документы.ЭтапПроизводства2_2);
	//-- НЕ УТКА
	
	Элементы.ПродукцияОтменитьНепоставленныеСтроки.Видимость = Не Объект.ПереработкаПоЗаказу;
	Элементы.ВозвратныеОтходыОтменитьНепоставленныеСтроки.Видимость = Не Объект.ПереработкаПоЗаказу;
	Элементы.МатериалыОтменитьНеотработанныеСтроки.Видимость = Не Объект.ПереработкаПоЗаказу;
	
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПереработчикам") Или Объект.ПереработкаПоЗаказу;
	
	Элементы.Статус.Видимость = ИспользоватьСтатусы;
	
	Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Видимость =
		Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки
		//++ Устарело_Производство21
		Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство
		//-- Устарело_Производство21
		Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям;
		
	#КонецОбласти
	
	// Прочее
	#Область Прочее
	ЕстьКнопкаОткрытия = Объект.ПереработкаПоЗаказу;
	Элементы.ПродукцияГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	Элементы.ВозвратныеОтходыГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	Элементы.МатериалыГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	Элементы.УслугиГруппаЗатрат.ГиперссылкаЯчейки = ЕстьКнопкаОткрытия;
	//++ НЕ УТКА
	Элементы.РедактированиеЭтаповВыходныеИзделияГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	Элементы.РедактированиеЭтаповПобочныеИзделияГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	//-- НЕ УТКА
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		Элементы.СтраницыУслуги.ТекущаяСтраница = Элементы.СтраницаОднаУслуга;
	Иначе
		Элементы.СтраницыУслуги.ТекущаяСтраница = Элементы.СтраницаНесколькоУслуг;
	КонецЕсли;
	
	//++ НЕ УТКА
	Если Объект.ПометкаУдаления И Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		Элементы.РедактированиеЭтаповВыходныеИзделия.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповПобочныеИзделия.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УстановитьДоступностьНаправленияДеятельности(ЭтаФорма);
	
	ОбновитьИнформациюПоЗаказам();
	
	//-- НЕ УТКА
	
	МассивТиповВыбора = ?(
						 //++ Устарело_Производство21
						 Не ИспользоватьУправлениеПроизводством2_2
						 Или 
						 Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство")
						 Или
						 //-- Устарело_Производство21
						 Не ИспользоватьПроизводство, 
		НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь), 
		НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТареРаботе(Ложь));
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивТиповВыбора)));
	
	Элементы.ПродукцияНоменклатура.ПараметрыВыбора        = Новый ФиксированныйМассив(МассивПараметровВыбора);
	Элементы.ВозвратныеОтходыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеГруппыЗатрат()

	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	ПараметрыГруппыЗатрат = Новый Структура("Распоряжение, Спецификация,"+ИмяПоляГруппаЗатрат);
	
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить(Объект.Продукция);
	СписокТЧ.Добавить(Объект.ВозвратныеОтходы);
	СписокТЧ.Добавить(Объект.Материалы);
	//++ НЕ УТКА
	СписокТЧ.Добавить(РедактированиеЭтапов.ВыходныеИзделия);
	СписокТЧ.Добавить(РедактированиеЭтапов.ПобочныеИзделия);
	СписокТЧ.Добавить(РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
	СписокТЧ.Добавить(РедактированиеЭтапов.Этапы);
	//-- НЕ УТКА
	
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыГруппыЗатрат, СтрокаУслуга);
		ПредставлениеГруппы = ПереработкаНаСтороне.ПредставлениеГруппыЗатрат(
			ПараметрыГруппыЗатрат,
			Объект.ГруппировкаЗатрат,
			Объект.Продукция,
			ИмяПоляГруппаЗатрат);
		
		СтрокаУслуга.ГруппаЗатрат = ПредставлениеГруппы;
		
		Для каждого ТабличнаяЧасть Из СписокТЧ Цикл
			Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
				Если ДанныеСтроки[ИмяПоляГруппаЗатрат] = СтрокаУслуга[ИмяПоляГруппаЗатрат] Тогда
					ДанныеСтроки.ГруппаЗатрат = ПредставлениеГруппы;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	// Очистка наименования группы затрат если она не указана
	Для каждого ТабличнаяЧасть Из СписокТЧ Цикл
		Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяПоляГруппаЗатрат]) Тогда
				ДанныеСтроки.ГруппаЗатрат = "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставленияГруппЗатрат(Знач СписокГруппЗатрат, Знач ГруппировкаЗатрат, Знач Продукция, Знач ИмяПоляГруппаЗатрат)
	
	Результат = Новый Соответствие;
	
	Для каждого ПараметрыГруппыЗатрат Из СписокГруппЗатрат Цикл
		
		ПредставлениеГруппыЗатрат = ПереработкаНаСтороне.ПредставлениеГруппыЗатрат(
			ПараметрыГруппыЗатрат, 
			ГруппировкаЗатрат, 
			Продукция,
			ИмяПоляГруппаЗатрат);
		
		Результат.Вставить(ПараметрыГруппыЗатрат[ИмяПоляГруппаЗатрат], ПредставлениеГруппыЗатрат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомерГруппыЗатратВСтрокеПродукцииПередОкончаниемРедактирования(СтрокаПродукция, Объект, КешТекущейСтроки, НоваяСтрока)
	
	Если (Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям")
			И (КешТекущейСтроки.Спецификация <> СтрокаПродукция.Спецификация))
		Или (Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции")
			И (КешТекущейСтроки.Номенклатура <> СтрокаПродукция.Номенклатура
				Или КешТекущейСтроки.Характеристика <> СтрокаПродукция.Характеристика
				Или КешТекущейСтроки.Назначение <> СтрокаПродукция.Назначение)) Тогда
		
		ЗаполнитьНомерГруппыЗатратВСтрокеПродукции(СтрокаПродукция, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомерГруппыЗатратВСтрокеПродукции(СтрокаПродукция, Объект)
	
	Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции") Тогда
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Назначение");
	ИначеЕсли Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям") Тогда
		СтруктураПоиска = Новый Структура("Спецификация");
	Иначе
		Возврат;
	КонецЕсли;
	
	СтрокаПродукция.НомерГруппыЗатрат = Объект.МаксимальныйНомерГруппыЗатрат + 1;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПродукция);
	СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
	
	Если СписокСтрок.Количество() > 0 И СписокСтрок[0] = СтрокаПродукция Тогда
		СписокСтрок.Удалить(0);
	КонецЕсли;
	
	Если СписокСтрок.Количество() > 0 И СписокСтрок[0].НомерГруппыЗатрат <> 0 Тогда
		СтрокаПродукция.НомерГруппыЗатрат = СписокСтрок[0].НомерГруппыЗатрат;
	КонецЕсли;
	
	Если СтрокаПродукция.НомерГруппыЗатрат > Объект.МаксимальныйНомерГруппыЗатрат Тогда
		Объект.МаксимальныйНомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГруппуЗатрат(ИмяТЧ, МножественныйВыборСтрок = Ложь)

	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ГруппировкаЗатрат", Объект.ГруппировкаЗатрат);
	ПараметрыФормы.Вставить("Услуги", Объект.Услуги);
	ПараметрыФормы.Вставить("НомерГруппыЗатрат", ТекущиеДанные[ИмяПоляГруппаЗатрат]);
	ПараметрыФормы.Вставить("ИмяПоляГруппаЗатрат", ИмяПоляГруппаЗатрат);
	ПараметрыФормы.Вставить(
		"ЗаголовокГруппы",
		ПереработкаНаСторонеКлиентСервер.ЗаголовокПоляГруппыЗатрат(
			Объект.ГруппировкаЗатрат,
			Объект.ОбосабливатьПоНазначениюПродукции));
			
			
	СтруктураПараметров = Новый Структура("ИмяТЧ, МножественныйВыборСтрок", ИмяТЧ, МножественныйВыборСтрок);
	
	ОписаниеОповещения  = Новый ОписаниеОповещения("ВыбратьГруппуЗатратЗавершение", ЭтотОбъект, СтруктураПараметров);
	ОткрытьФорму("Документ.ЗаказПереработчику.Форма.ВыборГруппыЗатрат", ПараметрыФормы,,,,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГруппуЗатратЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказПереработчику.Форма.ФормаДокумента.ВыбратьГруппуЗатратЗавершение");
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	Модифицированность = Истина;
	
	ДанныеЭтапов = Новый Соответствие;
	
	ИмяТЧ                   = ДополнительныеПараметры.ИмяТЧ;
	МножественныйВыборСтрок = ДополнительныеПараметры.МножественныйВыборСтрок;
	
	Если МножественныйВыборСтрок Тогда
		ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;	
	Иначе
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(Элементы[ИмяТЧ].ТекущаяСтрока);
	КонецЕсли;
	
	ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущиеДанные[ИмяПоляГруппаЗатрат] = РезультатЗакрытия[ИмяПоляГруппаЗатрат];
		ТекущиеДанные.ГруппаЗатрат = РезультатЗакрытия.ГруппаЗатрат;
		
		Если ИмяТЧ = "Продукция" И Объект.ПереработкаПоЗаказу Тогда
			
			ТекущиеДанные.Спецификация = РезультатЗакрытия.Спецификация;
			
		//++ НЕ УТКА
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" Тогда
			
			ТекущиеДанные.Распоряжение = РезультатЗакрытия.Распоряжение;
			ЗаполнитьСлужебныеРеквизитыВыходныеИзделияЭтапаВСтроке(ТекущиеДанные, ЭтаФорма, ДанныеЭтапов);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, Неопределено);
			
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповПобочныеИзделия" Тогда
			
			ТекущиеДанные.Распоряжение = РезультатЗакрытия.Распоряжение;
			ЗаполнитьСлужебныеРеквизитыПобочныеИзделияЭтапаВСтроке(ТекущиеДанные, ЭтаФорма, ДанныеЭтапов);
			
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
			
			ТекущиеДанные.Распоряжение = РезультатЗакрытия.Распоряжение;
			ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаВСтроке(ТекущиеДанные, ЭтаФорма, ДанныеЭтапов);
			
		//-- НЕ УТКА
		КонецЕсли;
		
	КонецЦикла;
	
	ВыбратьГруппуЗатратЗавершениеНаСервере(ИмяТЧ, МножественныйВыборСтрок);
	
	Если ИмяТЧ = "Продукция" Тогда
		ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	Иначе
		ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьГруппуЗатратЗавершениеНаСервере(ИмяТЧ, МножественныйВыборСтрок)
	
	ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
	ТекущаяСтрока = ТабличнаяЧасть.НайтиПоИдентификатору(Элементы[ИмяТЧ].ТекущаяСтрока);
	
	ЗаполнитьУслугиПоПродукции(Объект);
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	ЗаполнитьПредставлениеГруппыЗатрат();
	
	Если ИмяТЧ = "Материалы" Или ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		
		Если МножественныйВыборСтрок Тогда
			
			ОбновитьКолонкуДоступноСервер();
			
		Иначе
			
			ОбновитьКолонкуДоступноСервер();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаЗатратПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказПереработчику.Форма.ФормаДокумента.ГруппировкаЗатратПриИзмененииЗавершение");
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ГруппировкаЗатратПриИзмененииНаСервере();
	Иначе
		Объект.ГруппировкаЗатрат = ГруппировкаЗатратДоИзменения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеГруппыЗатрат(Отказ)
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""';
							|en = 'Column ""%1"" in line #%2, list ""%3"" cannot be empty.'");
	ЗаголовокПоля = ПереработкаНаСторонеКлиентСервер.ЗаголовокПоляГруппыЗатрат(
		Объект.ГруппировкаЗатрат, Объект.ОбосабливатьПоНазначениюПродукции);
	
	СписокТЧ = Новый СписокЗначений;
	СписокТЧ.Добавить("Продукция", НСтр("ru = 'Продукция';
										|en = 'Manufactured products'"));
	СписокТЧ.Добавить("ВозвратныеОтходы", НСтр("ru = 'Возвратные отходы';
												|en = 'Recyclable waste'"));
	СписокТЧ.Добавить("Материалы", НСтр("ru = 'Сырье и материалы';
										|en = 'Raw and consumable materials'"));
	//++ НЕ УТКА
	СписокТЧ.Добавить("РедактированиеЭтаповВыходныеИзделия", НСтр("ru = 'Продукция';
																	|en = 'Manufactured products'"));
	СписокТЧ.Добавить("РедактированиеЭтаповПобочныеИзделия", НСтр("ru = 'Возвратные отходы';
																	|en = 'Recyclable waste'"));
	СписокТЧ.Добавить("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами", НСтр("ru = 'Сырье и материалы';
																					|en = 'Raw and consumable materials'"));
	//-- НЕ УТКА
	
	ИмяПоляГруппаЗатрат	= ИмяПоляГруппаЗатрат(Объект);
	
	Для каждого ПараметрыТЧ Из СписокТЧ Цикл
		ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ПараметрыТЧ.Значение, ЭтаФорма);
		Если ПараметрыТЧ.Значение = "РедактированиеЭтаповВыходныеИзделия" Тогда
			ИмяТЧ = "РедактированиеЭтапов.ВыходныеИзделия";
		ИначеЕсли ПараметрыТЧ.Значение = "РедактированиеЭтаповПобочныеИзделия" Тогда
			ИмяТЧ = "РедактированиеЭтапов.ПобочныеИзделия";
		ИначеЕсли ПараметрыТЧ.Значение = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
			ИмяТЧ = "РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами";
		Иначе
			ИмяТЧ = "Объект." + ПараметрыТЧ.Значение;
		КонецЕсли;
		Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяПоляГруппаЗатрат]) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗаголовокПоля, ДанныеСтроки.НомерСтроки, ПараметрыТЧ.Представление);
				ПутьКТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ДанныеСтроки.НомерСтроки, "ГруппаЗатрат");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, ПутьКТЧ,, Отказ);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоляГруппаЗатрат(Объект)

	Возврат ПереработкаНаСторонеКлиентСервер.ИмяПоляГруппаЗатратВЗаказеПереработчику(Объект);

КонецФункции

&НаСервере
Функция НомераГруппыЗатратВыделенныхСтрок(Коллекция, ВыделенныеСтроки)
	
	НомераГруппыЗатрат = Новый Массив();
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		Строка = Коллекция.НайтиПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(Строка.НомерГруппыЗатрат) Тогда
			НомераГруппыЗатрат.Добавить(Строка.НомерГруппыЗатрат);
		КонецЕсли;
		
	КонецЦикла;
	НомераГруппыЗатрат = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НомераГруппыЗатрат);
	Возврат НомераГруппыЗатрат;
	
КонецФункции

&НаСервере
Функция СтрокиПоНомеруГруппыЗатрат(Коллекция, НомераГруппыЗатрат)
	
	Строки = Новый Массив;
	
	Поле = "НомерГруппыЗатрат";
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить(Поле);
	Таблица.Колонки.Добавить("СтрокаТаблицы");
	
	Для Каждого Строка Из Коллекция Цикл
		
		Если Строка.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.СтрокаТаблицы = Строка;
		НоваяСтрока[Поле] = Строка[Поле];
		
	КонецЦикла;
	
	Таблица.Индексы.Добавить(Поле);
	
	Отбор = Новый Структура(Поле);
	Для Каждого Значение Из НомераГруппыЗатрат Цикл
		Отбор[Поле] = Значение;
		НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Строки, НайденныеСтроки);
	КонецЦикла;
	
	Для Индекс = 0 По Строки.ВГраница() Цикл
		Строки[Индекс] = Строки[Индекс].СтрокаТаблицы;
	КонецЦикла;
	
	Возврат Строки;
	
КонецФункции

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ) 
	
	ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(ТабличнаяЧасть, Элементы[ИмяТЧ].ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена(ИмяТЧ) 
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
	
	Колонки = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,ДатаПоступления,ДатаОтгрузки,ДатаПроизводства,
		|Цена,Спецификация,СтатьяКалькуляции,Получатель,Склад";
	
	ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, Колонки);
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
	
	МассивИдентификаторовСтрок = Новый Массив;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		Если ИмяТЧ = "Продукция" Тогда
			ЗаполнитьНомерГруппыЗатратВСтрокеПродукции(ТекущаяСтрока, Объект);
			МассивИдентификаторовСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		//++ НЕ УТКА
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
			ЗаполнитьГруппуЗатратВНовойСтроке(ТекущаяСтрока, ЭтаФорма);
			ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаВСтроке(ТекущаяСтрока, ЭтаФорма);
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" Тогда
			ЗаполнитьГруппуЗатратВНовойСтроке(ТекущаяСтрока, ЭтаФорма);
			ЗаполнитьДатуПроизводстваВСтроке(ТекущаяСтрока, ЭтаФорма);
			ЗаполнитьСлужебныеРеквизитыВыходныеИзделияЭтапаВСтроке(ТекущаяСтрока, ЭтаФорма);
			МассивИдентификаторовСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповПобочныеИзделия" Тогда
			ЗаполнитьГруппуЗатратВНовойСтроке(ТекущаяСтрока, ЭтаФорма);
			ЗаполнитьДатуПроизводстваВСтроке(ТекущаяСтрока, ЭтаФорма);
			ЗаполнитьСлужебныеРеквизитыПобочныеИзделияЭтапаВСтроке(ТекущаяСтрока, ЭтаФорма);
		//-- НЕ УТКА
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		
		Если ИмяТЧ = "Продукция" Тогда
			Если Объект.ПоступлениеОднойДатой Тогда
				ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
			КонецЕсли;
		ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Или ИмяТЧ = "Материалы" Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
		ИначеЕсли (ИмяТЧ = "Материалы" ИЛИ ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами")
			И Объект.НеОтгружатьЧастями Тогда
			ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		
		Если ИмяТЧ = "Продукция" Или ИмяТЧ = "ВозвратныеОтходы" Тогда
			ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(Объект.Подразделение, СтруктураДействий, "Получатель");
		Иначе
			ДобавитьДействиеПроверитьЗаполнитьСклад(ИмяТЧ, ЭтаФорма, СтруктураДействий);
		КонецЕсли;	
		
		Если ИмяТЧ = "Материалы" Тогда
			
			ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "ВариантОбеспечения,СкладОбязателен,ДатаОтгрузкиОбязательна");
			
		//++ НЕ УТКА
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
			
			ДобавитьДействияОбеспеченияЭтаповНаСервере(СтруктураДействий, "ВариантОбеспечения,СкладОбязателен,ДатаОтгрузкиОбязательна");
				
		//-- НЕ УТКА
		ИначеЕсли ИмяТЧ = "Продукция" Тогда
			НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
		ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
			НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		КонецЕсли;
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, СтруктураДействий);
		
		//++ НЕ УТКА
		Если ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" Тогда
			СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
		КонецЕсли;
		//-- НЕ УТКА
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	Если ИмяТЧ = "Материалы" Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		ОбновитьКолонкуДоступноСервер();
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
			РедактированиеЭтапов, 
			ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
		ОбновитьКолонкуДоступноСервер();
	Иначе
		МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивИдентификаторовСтрок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ДоступностьЭлементов)
	
	Форма.Элементы.МатериалыВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.МатериалыКонтекстноеМенюВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.ПродукцияВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.ПродукцияКонтекстноеМенюВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.ВозвратныеОтходыВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.ВозвратныеОтходыКонтекстноеМенюВставитьСтроки.Доступность = ДоступностьЭлементов;
	//++ НЕ УТКА
	Форма.Элементы.РедактированиеЭтапов_Обеспечение_ВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.РедактированиеЭтапов_Обеспечение_ВставитьСтрокиКонтекстноеМеню.Доступность = ДоступностьЭлементов;
	Форма.Элементы.РедактированиеЭтапов_Продукция_ВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.КонтекстноеМенюРедактированиеЭтапов_Продукция_ВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.РедактированиеЭтапов_Отходы_ВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.КонтекстноеМенюРедактированиеЭтапов_Отходы_ВставитьСтроки.Доступность = ДоступностьЭлементов;
	//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область НаборыМатериаловИРабот

&НаКлиенте
Процедура ПередУдалениемСтрокВходящихВНаборы()
	
	ВыделенныеСтроки = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки;
	
	Если УправлениеДаннымиОбИзделияхКлиент.ЕстьСтрокиВходящиеВНабор(РедактированиеЭтапов, ВыделенныеСтроки) Тогда
		
		ОбработатьУдалениеСтрокВходящихВНаборы(ВыделенныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатурыХарактеристикиВСтрокеВходящейВНабор()
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КлючСвязиНабор) Тогда
		
		ИдентификаторыСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущаяСтрока);
		ОбработатьУдалениеСтрокВходящихВНаборы(ИдентификаторыСтрок);
		
		ТекущиеДанные.КлючСвязиНабор = Неопределено;
		ТекущиеДанные.ВходитВНабор   = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУдалениеСтрокВходящихВНаборы(ИдентификаторыСтрок)
	
	УправлениеДаннымиОбИзделиях.ОбработатьУдалениеСтрокВходящихВНаборы(РедактированиеЭтапов, ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРазделениеСтрокиВходящейВНабор(НоваяСтрока)
	
	Если ЗначениеЗаполнено(НоваяСтрока.КлючСвязиНабор) Тогда
		ОбработатьРазделениеСтрокиВходящейВНаборСервер(НоваяСтрока.КлючСвязиНабор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРазделениеСтрокиВходящейВНаборСервер(КлючСвязиНабор)
	
	УправлениеДаннымиОбИзделиях.СкорректироватьТаблицуНаборыМатериаловИРабот(
		РедактированиеЭтапов.НаборыМатериаловИРабот, КлючСвязиНабор, 1);
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область Прочее

&НаСервере
Функция ПровестиИЗакрытьНаСервере(ПараметрыЗаписи)
	
	РезультатЗаписи = Ложь;
	
	Попытка
		РезультатЗаписи = Записать(ПараметрыЗаписи);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проведение документа';
				|en = 'Document posting'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат РезультатЗаписи;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОбъекта()
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПересчетаСуммыНДСВТЧ(Форма)
	
	СтруктураПересчетаСуммы = Новый Структура("ЦенаВключаетНДС", Ложь);
	
	Возврат СтруктураПересчетаСуммы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействийИзмененныеСтроки);
	ДобавитьДействиеПроверитьЗаполнитьСклад("Материалы", ЭтаФорма, СтруктураДействийИзмененныеСтроки);
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДействийИзмененныеСтроки);
	ДобавитьДействияОбеспеченияНаСервере(СтруктураДействийДобавленныеСтроки, "ВариантОбеспечения,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Материалы",
		"Номенклатура,Характеристика,Склад,ДатаОтгрузки",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияНоменклатураПриИзмененииНаСервере(ИдентификаторСтроки, СтруктураДействий, КэшированныеЗначения)

	ТекущаяСтрока = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ПродукцияСтрокаЗаполнитьСпецификацию(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Функция ПродукцияСтрокаЗаполнитьСпецификацию(ДанныеСтроки)
	
	Если Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
		И Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеСтроки.Номенклатура.Пустая() Тогда
		ДанныеСтроки.Спецификация = Неопределено;
		Возврат Истина;
	КонецЕсли;
	
	ДанныеОбИзделии = УправлениеДаннымиОбИзделияхКлиентСервер.СобратьДанныеОбИзделииДляВыбораСпецификации(
		Объект, ДанныеСтроки, ПараметрыВыбораСпецификаций);
	ДанныеОбИзделии.ТекущаяСпецификация = ДанныеСтроки.Спецификация;
	
	ДанныеСпецификации = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
		ДанныеОбИзделии, ПараметрыВыбораСпецификаций);
	
	СпецификацияИзменилась = Ложь;
	Если ДанныеСпецификации = Неопределено Тогда
		
		ДанныеСтроки.Спецификация = Неопределено;
		
		СпецификацияИзменилась = Истина;
		
	Иначе
		
		Если ДанныеСпецификации.Спецификация <> ДанныеСтроки.Спецификация Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеСпецификации);
			СпецификацияИзменилась = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СпецификацияИзменилась;
	
КонецФункции

&НаСервере
Процедура ВозвратныеОтходыНоменклатураПриИзмененииНаСервере(ИдентификаторСтроки, СтруктураДействий, КэшированныеЗначения)

	ТекущаяСтрока = Объект.ВозвратныеОтходы.НайтиПоИдентификатору(ИдентификаторСтроки);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	Форма.Элементы.СрокВозвратаМногооборотнойТары.Доступность = Форма.Объект.ВернутьМногооборотнуюТару;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыТабличнойЧастиВВалюту(Таблица, 
	Знач СтруктураКурсовСтаройВалюты,
	Знач СтруктураКурсовНовойВалюты,
	ИмяПоляСумма = "Сумма")
	
	СуммаКРаспределению = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
		Таблица.Итог(ИмяПоляСумма),
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты);
	
	МассивСумм = Новый Массив;
	
	Для Х = 0 По Таблица.Количество() - 1 Цикл
		
		ТекСтрока = Таблица[Х];
		
		Если Таблица <> Объект.Услуги Тогда
			ТекСтрока.Цена = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
				ТекСтрока.Цена,
				СтруктураКурсовСтаройВалюты,
				СтруктураКурсовНовойВалюты);
		КонецЕсли;
		
		СуммаВНовойВалюте = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
			ТекСтрока[ИмяПоляСумма],
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
		
		МассивСумм.Добавить(СуммаВНовойВалюте);
		
	КонецЦикла;
	
	МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, МассивСумм);
	
	Если МассивСумм <> Неопределено Тогда
		
		Для Х = 0 По Таблица.Количество() - 1 Цикл
			
			ТекСтрока = Таблица[Х];
			ТекСтрока[ИмяПоляСумма] = МассивСумм[Х];
			Если ИмяПоляСумма = "СуммаСНДС" Тогда
				Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(ТекСтрока, Ложь, Ложь, Ложь, Ложь, "Сумма");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	//++ НЕ УТКА

	//++ Устарело_Производство21	
	ЗаполнитьЗапланированноеКоличествоЭтапов();
	//-- Устарело_Производство21

	//-- НЕ УТКА
	
	ЗаполнитьПредставлениеГруппыЗатрат();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(СписокТЧ = "")
	
	СтруктураТЧ = Новый Структура(СписокТЧ);
	ВсеТЧ = Не ЗначениеЗаполнено(СтруктураТЧ);
	
	//++ НЕ УТКА
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда

		Если ВсеТЧ Или СтруктураТЧ.Свойство("ВыходныеИзделия") Тогда
			
			УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(
				РедактированиеЭтапов.ВыходныеИзделия);
				
			ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
				РедактированиеЭтапов, ПараметрыРаспределенияЗатрат);	
				
		КонецЕсли;		
				
		Если ВсеТЧ Или СтруктураТЧ.Свойство("ПобочныеИзделия") Тогда
					
			УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(
				РедактированиеЭтапов.ПобочныеИзделия);
				
		КонецЕсли;
		
		Если ВсеТЧ Или СтруктураТЧ.Свойство("ОбеспечениеМатериаламиИРаботами") Тогда
			УправлениеДаннымиОбИзделиях.ЗаполнитьРеквизитВходитВНабор(РедактированиеЭтапов);
		КонецЕсли;
		
	Иначе	
	//-- НЕ УТКА
	
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий);
		
		Если ВсеТЧ Или СтруктураТЧ.Свойство("Продукция") Тогда
			  
			НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
				Объект.Продукция, СтруктураДействий);
				
			ПроизводствоСервер.ЗаполнитьПризнакЦеховаяКладоваяВТаблице(Объект.Продукция, "Получатель");
			
			ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
				Объект, ПараметрыРаспределенияЗатрат);
			
		КонецЕсли;
	
		Если ВсеТЧ Или СтруктураТЧ.Свойство("ВозвратныеОтходы") Тогда
			  
			НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
				Объект.ВозвратныеОтходы, СтруктураДействий);
				
			ПроизводствоСервер.ЗаполнитьПризнакЦеховаяКладоваяВТаблице(Объект.ВозвратныеОтходы, "Получатель");
			
		КонецЕсли;
	
		Если ВсеТЧ Или СтруктураТЧ.Свойство("Материалы") Тогда
			  
			НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
				Объект.Материалы, СтруктураДействий);
				
			ПроизводствоСервер.ЗаполнитьПризнакЦеховаяКладоваяВТаблице(Объект.Материалы, "Склад");
			
		КонецЕсли;
	
	//++ НЕ УТКА
	КонецЕсли;
	//-- НЕ УТКА
	
	Если ВсеТЧ Или СтруктураТЧ.Свойство("Услуги") Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий, Истина);
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Услуги, СтруктураДействий);
		
	КонецЕсли;
	
	Если ВсеТЧ Или СтруктураТЧ.Свойство("Материалы") Или СтруктураТЧ.Свойство("ОбеспечениеМатериаламиИРаботами") Тогда
		ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Функция МаксимальнаяДатаАванса()
	
	МаксДатаАванса = '00010101';
	
	Для Каждого ТекЭтап Из Объект.ЭтапыГрафикаОплаты Цикл
		
		Если ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления")
			Или ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения") Тогда
			
			МаксДатаАванса = Макс(МаксДатаАванса, ТекЭтап.ДатаПлатежа);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МаксДатаАванса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизитыВозвратныеОтходы()
	
	Возврат Новый Структура("Отменено", "Сумма");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизитыМатериалы()
	
	Возврат Новый Структура("Отменено", "Сумма");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизитыМатериалыСтрокой()
	
	Возврат "СуммаОтменено";
	
КонецФункции


&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	Если Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению
		И Элементы.Статус.СписокВыбора.НайтиПоЗначению(Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению) = Неопределено Тогда
		Элементы.Статус.СписокВыбора.Вставить(1, Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению);
	КонецЕсли;
	
	Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(Документы.ЗаказПереработчику.ПараметрыРаспределенияЗатрат(Объект));
	
	//++ НЕ УТКА
	ПараметрыРедактированияЭтапа = Новый ФиксированнаяСтруктура(Обработки.РедактированиеЭтаповПроизводства.ПараметрыРедактированияЭтапа());
	
	ЗначениеВРеквизитФормы(Обработки.РедактированиеЭтаповПроизводства.Создать(), "РедактированиеЭтапов");
	ИнициализироватьРедактированиеЭтапов();
	//-- НЕ УТКА
	
	ВалютаДокумента = Объект.Валюта;
	
	ИспользоватьУпрощеннуюСхемуОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках");
	ИспользоватьНаправленияДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	
	ХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.Номенклатура);
	Элементы.Характеристика.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры");
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
	
	ПравоДоступаДобавление               = ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПереработчику);
	ИспользоватьПроизводствоНаСтороне2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне2_5");
	
	ДоступноИспользованиеНаборовВПроизводстве = УправлениеДаннымиОбИзделияхПовтИсп.ДоступноИспользованиеНаборовВПроизводстве();
	
	Если ПравоДоступаДобавление
		И ИспользоватьПроизводствоНаСтороне2_5 Тогда
		Элементы.ФормаСкопировать.Видимость = Ложь;
	ИначеЕсли ПравоДоступаДобавление Тогда
		Элементы.ФормаСкопировать.Видимость = Истина;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
		НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказПереработчику));
	
	//++ НЕ УТКА
	ПараметрыУказанияСерийРедактированиеЭтапов = Новый ФиксированнаяСтруктура(
		НоменклатураСервер.ПараметрыУказанияСерий(РедактированиеЭтапов, Обработки.РедактированиеЭтаповПроизводства));
	//-- НЕ УТКА
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Материалы, ЗависимыеРеквизитыМатериалы());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвратныеОтходы, ЗависимыеРеквизитыВозвратныеОтходы());
	
	УстановитьВидимостьДоговора();
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ОбновитьСостояниеСервер();
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	УстановитьВидимостьЭлементовФормыДатПоступления();
	УстановитьВидимостьЭлементовПоВерсииПартионногоУчета();
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Продукция);
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.РедактированиеЭтаповВыходныеИзделия);
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Материалы);
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами);
	
	ИспользоватьПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	ИспользоватьУправлениеПроизводством2_2 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	
	НастроитьФормуПоСпособуГруппировкиЗатрат();
	
	УстановитьВидимостьОбеспечения();
	
	ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	КоличествоУслуг = КоличествоУслуг(Объект.Услуги.Количество(), Объект.ГруппировкаЗатрат);
	ГруппировкаЗатратДоИзменения = Объект.ГруппировкаЗатрат;
	
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтотОбъект);
	
	АктуализироватьЗакупкуПодДеятельность(Ложь);
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Документы.ЗаказПереработчику);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.ПродукцияСпецификация, ПараметрыВыбораСпецификаций);
	
//++ НЕ УТКА
	ПараметрыВыбораСпецификацийРедактированиеЭтапов = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Обработки.РедактированиеЭтаповПроизводства);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСпецификация, ПараметрыВыбораСпецификацийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
//-- НЕ УТКА
	
	//++ НЕ УТКА
	УстановитьВидимостьОбеспеченияМатериалыЭтапов();
	//-- НЕ УТКА
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНаправленияДеятельности(Форма)
	
	Форма.Элементы.НаправлениеДеятельности.ТолькоПросмотр =
		Форма.Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства")
		И (Форма.РедактированиеЭтапов.ВыходныеИзделия.Количество() + Форма.РедактированиеЭтапов.ПобочныеИзделия.Количество()) <> 0;
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиДокумента(Форма)
	
	КоллекцияМатериалы = Форма.Объект.Материалы;
	
	Форма.СуммаМатериалов         = КоллекцияМатериалы.Итог("Сумма") - КоллекцияМатериалы.Итог("СуммаОтменено");
	Форма.СуммаОтмененоМатериалов = КоллекцияМатериалы.Итог("СуммаОтменено");
	
	Форма.СуммаАвансаДоПодтверждения     = 0;
	Форма.СуммаПредоплатыДоПоступления   = 0;
	Форма.СуммаКредитаПослеПоступления   = 0;
	Форма.ПроцентАвансаДоПодтверждения   = 0;
	Форма.ПроцентПредоплатыДоПоступления = 0;
	Форма.ПроцентКредитаПослеПоступления = 0;
	ПроцентПлатежейОбщий                 = 0;
	
	АвансДоПодтверждения    = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения");
	ПредоплатаДоПоступления = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления");
	НеКонтролируется  = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.КредитСдвиг");
	
	СтруктураАванс      = Новый Структура("Сумма, Проценты", "СуммаАвансаДоПодтверждения",   "ПроцентАвансаДоПодтверждения");
	СтруктураПредоплата = Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоПоступления", "ПроцентПредоплатыДоПоступления");
	СтруктураКредит     = Новый Структура("Сумма, Проценты", "СуммаКредитаПослеПоступления", "ПроцентКредитаПослеПоступления");
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(АвансДоПодтверждения,    СтруктураАванс);
	СоответствиеВариантовОплаты.Вставить(ПредоплатаДоПоступления, СтруктураПредоплата);
	СоответствиеВариантовОплаты.Вставить(НеКонтролируется,        СтруктураКредит);
	
	ПредыдущееЗначениеДаты = Дата(1, 1, 1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		
		ПроцентПлатежейОбщий = ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
		ТекСтрока.ПроцентЗаполненНеВерно = (ПроцентПлатежейОбщий > 100);
		ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
		
		ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
		Если ПроцентПлатежейОбщий = 100 Тогда
			Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
		КонецЕсли;
		
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма]    = Форма[ИменаЭлементов.Сумма]    + ТекСтрока.СуммаПлатежа;
			Форма[ИменаЭлементов.Проценты] = Форма[ИменаЭлементов.Проценты] + ТекСтрока.ПроцентПлатежа;
		КонецЕсли;
		
	КонецЦикла;
	
	БезНДС	= ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС");
	
	ЕстьНДС = Ложь;
	Для каждого СтрокаУслуга Из Форма.Объект.Услуги Цикл
		Если СтрокаУслуга.СтавкаНДС <> БезНДС Тогда
			ЕстьНДС = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНДС Тогда
		Форма.Элементы.ГруппаСтраницыВсегоПродукция.ТекущаяСтраница	= Форма.Элементы.СтраницаВсегоСНДСПродукция;
	Иначе
		Форма.Элементы.ГруппаСтраницыВсегоПродукция.ТекущаяСтраница	= Форма.Элементы.СтраницаВсегоБезНДСПродукция;
	КонецЕсли;
	
	ТолькоПросмотрСуммаНДС = СуммаНДСТолькоПросмотр(Форма.Объект.СтавкаНДС);
	
	Форма.Элементы.СуммаНДС.ТолькоПросмотр				= СуммаНДСТолькоПросмотр(Форма.Объект.СтавкаНДС);;
	Форма.Элементы.СуммаНДС.ОтметкаНезаполненного		= Не ТолькоПросмотрСуммаНДС;
	Форма.Элементы.СуммаНДС.АвтоОтметкаНезаполненного	= Не ТолькоПросмотрСуммаНДС;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииСуммыУслуг(Форма)
	
	Форма.Объект.СуммаНДС				= Форма.Объект.Услуги.Итог("СуммаНДС");
	Форма.Объект.СуммаСНДС				= Форма.Объект.Услуги.Итог("СуммаСНДС");
	Форма.Объект.СуммаДокумента	= Форма.Объект.СуммаСНДС;
	Форма.КоличествоУслуг					= КоличествоУслуг(Форма.Объект.Услуги.Количество(), Форма.Объект.ГруппировкаЗатрат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий, ЭтоУслуги = Ложь)
	
	СтруктураХарактеристики  = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураХарактеристики);
	
	Если НЕ ЭтоУслуги Тогда
		СтруктураТипНоменклатуры = Новый Структура("Номенклатура", "ТипНоменклатуры");
		СтруктураАртикул         = Новый Структура("Номенклатура", "Артикул");
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", СтруктураТипНоменклатуры);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", СтруктураАртикул);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТабличнойЧасти, СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Если ИмяТабличнойЧасти = "ВозвратныеОтходы" 
			Или ИмяТабличнойЧасти = "Материалы" Тогда
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	ПараметрыОбъекта = Новый Структура("Партнер, Договор, Контрагент, Организация");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
			
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов 
			И ИспользоватьНаправленияДеятельности Тогда
			
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = Объект.Валюта;
		ДопПараметры.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ПараметрыОбъекта, 
															Объект.ХозяйственнаяОперация, 
															ДопПараметры);
	Иначе
		
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = Объект.Валюта;
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ПараметрыОбъекта, 
															Объект.ХозяйственнаяОперация, 
															ДопПараметры);
	КонецЕсли;	
		
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		АктуализироватьЗакупкуПодДеятельность();
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет);
	КонецЕсли;
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Договор");
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ИмяТЧ, Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(
						ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма), 
						МассивВыделенныхСтрок, 
						Склад);
	
	Если ИмяТЧ = "Материалы" И ЗаполненоСтрок > 0 Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	Если ЗаполненоСтрок > 0 Тогда
        
        ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
        
        КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
        	
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		
		Для каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
		КонецЦикла;				
			
	КонецЕсли;	

	ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДокументСервер()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеДатыПоступленияСервер()
	
	Если Объект.Продукция.Количество() = 0 
		И Объект.ВозвратныеОтходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПоступления = Неопределено;
	
	Если НЕ Объект.ПоступлениеОднойДатой Тогда
		Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
			ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
			Объект.ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
		КонецЕсли;
		ДатаПоступления = Объект.ДатаПоступления;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаПоступления) Тогда
		ДатаПоступления = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.Продукция Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.ВозвратныеОтходы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеСервер()
	
	Документы.ЗаказПереработчику.РассчитатьСостояние(
		Объект.Ссылка,
		Объект.Договор,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступления(ИмяТЧ, МассивВыделенныхСтрок = Неопределено)
	
	ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДатуПоступленияЗавершение", ЭтотОбъект, Новый Структура("ИмяТЧ, МассивВыделенныхСтрок", ИмяТЧ, МассивВыделенныхСтрок));
	
	ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаПоступления, НСтр("ru = 'Введите дату поступления';
																						|en = 'Enter date of receipt'"), ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступленияЗавершение(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата <> Неопределено И ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		ДатаПоступления = ВыбраннаяДата;
		МассивВыделенныхСтрок = ДополнительныеПараметры.МассивВыделенныхСтрок;
		ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
		
		ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
		
		Если МассивВыделенныхСтрок = Неопределено Тогда
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				СтрокаТЧ.ДатаПоступления = ДатаПоступления;
			КонецЦикла;
			
		Иначе
			
			Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
				
				СтрокаТЧ = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
				СтрокаТЧ.ДатаПоступления = ДатаПоступления;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияДатПоступления(ДатаПоступления, (МассивВыделенныхСтрок <> Неопределено));
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект);
	ПоместитьЭтапыОплатыВоВременноеХранилище(Элемент.Имя);
	ВзаиморасчетыКлиент.НадписьЭтапыОплатыНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка, Оповещение );
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ИзмененныеРеквизиты = Результат.СтарыеЗначенияИзмененныхРеквизитов;
		ОтразитьИзмененияПравилОплаты(ИзмененныеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьЭтапыОплатыВоВременноеХранилище(ИмяЭлемента)
	ВзаиморасчетыСервер.ПоместитьЭтапыОплатыВоВременноеХранилище(ЭтаФорма, ИмяЭлемента);
КонецПроцедуры

&НаСервере
Процедура ОтразитьИзмененияПравилОплаты(ИзмененныеРеквизиты)
	
	ВзаиморасчетыСервер.ЗагрузитьЭтапыОплатыИзВременногоХранилища(ЭтаФорма);
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, ИзмененныеРеквизиты, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВТЧ(Знач ИмяТЧ, Знач ПолеДата, Знач НоваяДата)

	Если НоваяДата = '000101010000' Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
	Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		ДанныеСтроки[ПолеДата] = НоваяДата;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатыПоступленияСервер(ДатаПоступления)
	
	ЗаполнитьДатуВТЧ("Продукция", "ДатаПоступления", ДатаПоступления);
	ЗаполнитьДатуВТЧ("ВозвратныеОтходы", "ДатаПоступления", ДатаПоступления);
	
КонецПроцедуры

&НаСервере
Функция МаксимальнаяДатаПоступления()
	
	МаксимальнаяДатаПоступления = Дата(1,1,1);
	Для Каждого Товар Из Объект.Продукция Цикл 
		МаксимальнаяДатаПоступления = Макс(МаксимальнаяДатаПоступления, Товар.ДатаПоступления);
	КонецЦикла;
	
	Для Каждого Товар Из Объект.ВозвратныеОтходы Цикл 
		МаксимальнаяДатаПоступления = Макс(МаксимальнаяДатаПоступления, Товар.ДатаПоступления);
	КонецЦикла;
	
	Возврат МаксимальнаяДатаПоступления
	
КонецФункции

&НаСервере
Процедура ИзмененаОплатаСервер(ИмяСобытия, Параметр)
	
	ОбновитьСостояниеСервер();
	
	// Взаиморасчеты
	ВзаиморасчетыСервер.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр);
	// Конец Взаиморасчеты
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеЗаказовПоДаннымПереработчика(НомерПоДаннымПартнера)
	
	СписокЗаказовПоНомеру = ЗаказыПоДаннымПереработчика(Объект.Ссылка, Объект.Контрагент, НомерПоДаннымПартнера);
	
	Если СписокЗаказовПоНомеру.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	СписокКнопок = Новый СписокЗначений;
	Если СписокЗаказовПоНомеру.Количество() = 1 Тогда
		ТекстВопроса = НСтр("ru = 'В информационной базе уже существует заказ с таким же номером по данным переработчика. Продолжить?';
							|en = 'Order with the same number by subcontractor data already exists in the infobase. Continue?'");
		СписокКнопок.Добавить("ОткрытьСписокЗаказов", НСтр("ru = 'Открыть заказ';
															|en = 'Open order'"));
	Иначе
		ТекстВопроса = НСтр("ru = 'В информационной базе уже существуют заказы с таким же номером по данным переработчика. Продолжить?';
							|en = 'Orders with the same number by subcontractor data already exist in the infobase. Continue?'");
		СписокКнопок.Добавить("ОткрытьСписокЗаказов", НСтр("ru = 'Открыть список заказов';
															|en = 'Open order list'"));
	КонецЕсли;
	
	СписокКнопок.Добавить("Продолжить", НСтр("ru = 'Продолжить';
											|en = 'Continue'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьНаличиеЗаказовПоДаннымПереработчикаЗавершение", ЭтотОбъект, Новый Структура("СписокЗаказов", СписокЗаказовПоНомеру));
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеЗаказовПоДаннымПереработчикаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    СписокЗаказовПоНомеру = ДополнительныеПараметры.СписокЗаказов;
    
    Если РезультатВопроса = "ОткрытьСписокЗаказов" Тогда
        
		Если СписокЗаказовПоНомеру.Количество() > 1 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СписокДокументов", СписокЗаказовПоНомеру);
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Заказы переработчикам (%КоличествоДокументов%)';
														|en = 'Subcontracting purchase orders (%КоличествоДокументов%)'"));
            ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", ПараметрыФормы);
			
        Иначе
            
            ПараметрыФормы = Новый Структура("Ключ", СписокЗаказовПоНомеру.Получить(0).Значение);
            ОткрытьФорму("Документ.ЗаказПереработчику.ФормаОбъекта", ПараметрыФормы);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаказыПоДаннымПереработчика(ТекущийЗаказ, Контрагент, НомерВходящегоДокумента)
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийЗаказ, "Дата");
	ДатаВходящегоДокумента = ?(ЗначениеЗаполнено(РеквизитыЗаказа), РеквизитыЗаказа, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПереработчику.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|ГДЕ
	|	ЗаказПереработчику.Ссылка <> &ТекущийЗаказ
	|	И ЗаказПереработчику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаказПереработчику.НомерПоДаннымПартнера = &НомерПоДаннымПартнера
	|	И ЗаказПереработчику.Контрагент = &Контрагент
	|	И НЕ ЗаказПереработчику.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДатаНачала",    ДобавитьМесяц(ДатаВходящегоДокумента, -3));
	Запрос.УстановитьПараметр("ДатаОкончания", ДобавитьМесяц(ДатаВходящегоДокумента, 3));
	Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	Запрос.УстановитьПараметр("ТекущийЗаказ",  ТекущийЗаказ);
	Запрос.УстановитьПараметр("НомерПоДаннымПартнера", НомерВходящегоДокумента);
	
	СписокЗаказовПоНомеру = Новый СписокЗначений;
	СписокЗаказовПоНомеру.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокЗаказовПоНомеру;
	
КонецФункции

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСПоставщиками("КарточкаРасчетовСПоставщикамиПоДокументамКонтекст", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьПодчиненныеРеквизитыОбъекта(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыПриИзмененииВалюты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПересчитатьСуммы = (РезультатВопроса = КодВозвратаДиалога.Да);
	ВалютаПриИзмененииЗавершение(ПересчитатьСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииЗавершение(ПересчитатьСуммы)

	ПриИзмененииВалютыСервер(Объект.Валюта, ПересчитатьСуммы);
	
	Если ПересчитатьСуммы Тогда
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;

КонецПроцедуры

&НаКлиенте
Процедура ЖелаемаяДатаПоступленияНачалоВыбораИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = ВыбранныйЭлемент;
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        Объект.ЖелаемаяДатаПоступления = ВыбранноеЗначение.Значение;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПродукцияХарактеристикаПриИзмененииНаСервере(ИдентификаторСтроки)

	ТекущаяСтрока = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);

	ПродукцияСтрокаЗаполнитьСпецификацию(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура Услуги_ВыбратьИЗаполнитьУслугуЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Услуги"));

	Для каждого ИдентификаторСтроки Из Элементы.Услуги.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Услуги.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.Номенклатура = РезультатЗакрытия;
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ДанныеСтроки.Характеристика);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРаспоряжениеГруппы(ТекущиеДанные)
	
	ИмяПоляГруппаЗатрат	= ИмяПоляГруппаЗатрат(Объект);

	Если НЕ ЗначениеЗаполнено(ТекущиеДанные[ИмяПоляГруппаЗатрат]) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПереработкаПоЗаказу Тогда
		СтруктураПоиска = Новый Структура(ИмяПоляГруппаЗатрат, ТекущиеДанные[ИмяПоляГруппаЗатрат]);
	 	СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			ПоказатьЗначение(, СписокСтрок[0].Распоряжение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозвратныеОтходыИМатериалы()

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать выбрать продукцию.';
										|en = 'Select products.'"));
		Возврат;
	КонецЕсли;
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	// Нужно проверить что в выбранных строках заполнена спецификация или заказ
	Отказ = Ложь;
	ДанныеВыбранныхСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ТекущиеДанные.Отменено Тогда
			Продолжить;
		ИначеЕсли (Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции")
				ИЛИ Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям"))
			И НЕ ЗначениеЗаполнено(ТекущиеДанные.Спецификация) Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Необходимо указать спецификацию в строке %1 списка ""Продукция""';
					|en = 'Specify BOM in line %1 of the Products list'"), 
				Формат(ТекущиеДанные.НомерСтроки, "ЧГ="));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Продукция", ТекущиеДанные.НомерСтроки, "Спецификация"),
				, 
				Отказ);
			
			Продолжить;
		
		//++ Устарело_Производство21	
		ИначеЕсли Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство")
			И НЕ ЗначениеЗаполнено(ТекущиеДанные[ИмяПоляГруппаЗатрат]) Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Необходимо указать заказ в строке %1 списка ""Продукция""';
					|en = 'Specify an order in line %1 of the Products list'"), 
				Формат(ТекущиеДанные.НомерСтроки, "ЧГ="));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Продукция", ТекущиеДанные.НомерСтроки, "ГруппаЗатрат"),
				, 
				Отказ);
			
			Продолжить;
		//-- Устарело_Производство21			
		КонецЕсли;
		
		ДанныеВыбранныхСтрок.Добавить(ИдентификаторСтроки);
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеВыбранныхСтрок.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых возможно перезаполнение по спецификации.';
									|en = 'Select lines that can be overwritten by BOM.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = Неопределено;
	Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции")
		ИЛИ Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям") Тогда
		
		ТекстВопроса = НСтр("ru = 'Заполнить возвратные отходы, сырье и материалы по спецификации?';
							|en = 'Populate recyclable waste, raw and consumable materials from bill of materials?'");
	
	//++ Устарело_Производство21	
	ИначеЕсли Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство") Тогда
		
		ТекстВопроса = НСтр("ru = 'Заполнить возвратные отходы, сырье и материалы по заказу на производство?';
							|en = 'Fill in recyclable waste, materials against the production order?'");
	//-- Устарело_Производство21	
	КонецЕсли;
	
	Если ТекстВопроса <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьВозвратныеОтходыИМатериалыПриИзмененииПродукцииЗавершение", ЭтотОбъект, ДанныеВыбранныхСтрок);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозвратныеОтходыИМатериалыПриИзмененииПродукцииЗавершение(РезультатВопроса, ВыделенныеСтроки) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьВозвратныеОтходыИМатериалыНаСервере(ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВозвратныеОтходыИМатериалыНаСервере(ВыделенныеСтроки)

	Если (Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции")
		Или Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям")) Тогда
		
		ЗаполнитьПоСпецификации(ВыделенныеСтроки);
		
	//++ НЕ УТКА

	//++ Устарело_Производство21
	ИначеЕсли Объект.ПереработкаПоЗаказу Тогда
		
		ЗаполнитьПоЗаказуНаПроизводство(ВыделенныеСтроки);
	//-- Устарело_Производство21	

	//-- НЕ УТКА
	Иначе
		Возврат;
	КонецЕсли;

	ЗаполнитьПредставлениеГруппыЗатрат();
	ЗаполнитьЦеныПоВидуЦенСервер(Объект.ВидЦены, "ВозвратныеОтходы", Ложь);
	ЗаполнитьЦеныПоВидуЦенСервер(Объект.ВидЦены, "Материалы", Ложь);
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей("ВозвратныеОтходы, Материалы");
	ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ВозвратныеОтходы, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Материалы, СтруктураДействий, КэшированныеЗначения);
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСпецификации(ВыделенныеСтроки)

	НомераГруппыЗатрат = НомераГруппыЗатратВыделенныхСтрок(Объект.Продукция, ВыделенныеСтроки);
	СписокПродукции = СтрокиПоНомеруГруппыЗатрат(Объект.Продукция, НомераГруппыЗатрат);
	
	УдалитьСтрокиТЧПоНомерамГруппыЗатрат("ВозвратныеОтходы", НомераГруппыЗатрат);
	УдалитьСтрокиТЧПоНомерамГруппыЗатрат("Материалы", НомераГруппыЗатрат);
	
	Документы.ЗаказПереработчику.ЗаполнитьВозвратныеОтходыИМатериалыПоСпецификации(СписокПродукции, Объект);
	НаправленияДеятельностиСервер.ПриЗаполненииПоСпецификацииСервер(ЭтаФорма);
	
	ЗаполнитьПредставлениеГруппыЗатрат();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиТЧПоНомерамГруппыЗатрат(ИмяТЧ, НомераГруппыЗатрат)
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	ОтборСтрок = Новый Структура(ИмяПоляГруппаЗатрат);
	Если НомераГруппыЗатрат.Количество() = 0 Тогда
		ОтборСтрок[ИмяПоляГруппаЗатрат] = 0;
		НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(ОтборСтрок);
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Объект[ИмяТЧ].Удалить(ТекСтрока);
		КонецЦикла;
	Иначе
		Для Каждого ТекНомер Из НомераГруппыЗатрат Цикл
			ОтборСтрок[ИмяПоляГруппаЗатрат] = ТекНомер;
			НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(ОтборСтрок);
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				Объект[ИмяТЧ].Удалить(ТекСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедуру следует использовать, если строки были добавлены программно (не интерактивно), например, при вставке из
// буфера, при заполнении по спецификации. Процедура выполняет действия которые зависят от данных в строках.
//
&НаСервере
Процедура ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивИдентификаторовСтрок = Неопределено, СтруктураРанееВыполненныхДействий = Неопределено)
	
	СписокТЧ = СтрРазделить(ИмяТЧ, ",");
	
	Если СтруктураРанееВыполненныхДействий = Неопределено Тогда
		СтруктураРанееВыполненныхДействий = Новый Структура;
	КонецЕсли;	
	
	Если СписокТЧ.Найти("Продукция") <> Неопределено
			ИЛИ СписокТЧ.Найти("ВозвратныеОтходы") <> Неопределено
			ИЛИ СписокТЧ.Найти("РедактированиеЭтаповВыходныеИзделия") <> Неопределено
			ИЛИ СписокТЧ.Найти("РедактированиеЭтаповПобочныеИзделия") <> Неопределено Тогда
		ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	КонецЕсли;
	
	Если СписокТЧ.Найти("Услуги") <> Неопределено Тогда
		ПриИзмененииСуммыУслуг(ЭтаФорма);
	КонецЕсли;
	
	Если СписокТЧ.Найти("Продукция") <> Неопределено ИЛИ СписокТЧ.Найти("РедактированиеЭтаповВыходныеИзделия") <> Неопределено Тогда
		
		МассивГруппировок = Новый Массив;
		
		Если МассивИдентификаторовСтрок <> Неопределено Тогда
			Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
				Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
					ДанныеСтроки = РедактированиеЭтапов.ВыходныеИзделия.НайтиПоИдентификатору(ИдентификаторСтроки);
					МассивГруппировок.Добавить(ДанныеСтроки.Распоряжение);
				Иначе
					ДанныеСтроки = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
					МассивГруппировок.Добавить(ДанныеСтроки.НомерГруппыЗатрат);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(МассивГруппировок);
		
	КонецЕсли;
	
	Если СписокТЧ.Найти("Услуги") = Неопределено 
	   И (Не СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакЦеховаяКладовая")
			Или Не СтруктураРанееВыполненныхДействий.Свойство("ПересчитатьКоличествоЕдиниц")) Тогда
	   		   		   		   			
		Для каждого ИмяТекущейТаблицы Из СписокТЧ Цикл
			
			ИмяПоляСклад = "";
				
			Если ИмяТекущейТаблицы = "Продукция"
		 	 Или ИмяТекущейТаблицы = "ВозвратныеОтходы"
		 	 Или ИмяТекущейТаблицы = "РедактированиеЭтаповВыходныеИзделия"
		 	 Или ИмяТекущейТаблицы = "РедактированиеЭтаповПобочныеИзделия" Тогда
		 	 	ИмяПоляСклад = "Получатель";
			ИначеЕсли ИмяТекущейТаблицы = "Материалы"
				  Или ИмяТекущейТаблицы = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
				ИмяПоляСклад = "Склад";  	
			Иначе
				Продолжить;		  	
			КонецЕсли;	  		
			
			ТекущаяТаблица = ТабличнаяЧастьПоИмени(ИмяТекущейТаблицы, ЭтаФорма);
			
			ИсточникДанных = ?(СтрНайти(ИмяТекущейТаблицы, "РедактированиеЭтапов") > 0, РедактированиеЭтапов, Объект);
			ИмяТекущейТабличнойЧасти = ИмяТаблицы(ИмяТекущейТаблицы);
				
			МассивСтрок = Неопределено;
			КоллекцияСтрок = ТекущаяТаблица;
			Если МассивИдентификаторовСтрок <> Неопределено Тогда
				МассивСтрок = Новый Массив;
				Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
					МассивСтрок.Добавить(ИсточникДанных[ИмяТекущейТабличнойЧасти].НайтиПоИдентификатору(ИдентификаторСтроки));
				КонецЦикла; 
				КоллекцияСтрок = МассивСтрок;
			КонецЕсли;
			
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц()); 
			Если Не СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакЦеховаяКладовая") Тогда
				СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая", Новый Структура("ИмяПоляСклад", ИмяПоляСклад));
			КонецЕсли;
				
			Для каждого СтрокаТаблицы Из КоллекцияСтрок Цикл
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
			КонецЦикла;		
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	//++ НЕ УТКА
	Если СписокТЧ.Найти("РедактированиеЭтаповВыходныеИзделия") <> Неопределено Тогда
		ЗаполнитьПараметрыВыбораНазначенийЭтапов();
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервере
Функция ИмяТаблицы(ИмяЭлемента)
	
	Если ИмяЭлемента = "Продукция" Или ИмяЭлемента = "ВозвратныеОтходы" Или ИмяЭлемента = "Материалы" Тогда
		Возврат ИмяЭлемента
	ИначеЕсли ИмяЭлемента = "РедактированиеЭтаповВыходныеИзделия" Тогда
		Возврат "ВыходныеИзделия"
	ИначеЕсли ИмяЭлемента = "РедактированиеЭтаповПобочныеИзделия" Тогда
		Возврат "ПобочныеИзделия"
	ИначеЕсли ИмяЭлемента = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		Возврат "ОбеспечениеМатериаламиИРаботами"
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТабличнаяЧастьПоИмени(ИмяТЧ, Форма)

	Если ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		ТабличнаяЧасть = Форма.РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами;
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" Тогда
		ТабличнаяЧасть = Форма.РедактированиеЭтапов.ВыходныеИзделия;
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповПобочныеИзделия" Тогда
		ТабличнаяЧасть = Форма.РедактированиеЭтапов.ПобочныеИзделия;
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповЭтапы" Тогда
		ТабличнаяЧасть = Форма.РедактированиеЭтапов.Этапы;
	Иначе
		ТабличнаяЧасть = Форма.Объект[ИмяТЧ];
	КонецЕсли;

	Возврат ТабличнаяЧасть;
	
КонецФункции
 
//++ НЕ УТКА

//++ Устарело_Производство21

&НаСервере
Процедура ЗаполнитьПоЗаказуНаПроизводство(ВыделенныеСтроки)

	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	НомераГруппыЗатрат = Новый Массив;
	ВыбранныеЭтапыГрафика = Новый Массив;
	
	Для каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если ЗначениеЗаполнено(ТекущиеДанные[ИмяПоляГруппаЗатрат])
			И НомераГруппыЗатрат.Найти(ТекущиеДанные[ИмяПоляГруппаЗатрат]) = Неопределено Тогда
			
			СтруктураПоиска = Новый Структура(ИмяПоляГруппаЗатрат, ТекущиеДанные[ИмяПоляГруппаЗатрат]);
		 	СтрокаУслуга = Объект.Услуги.НайтиСтроки(СтруктураПоиска)[0];
			ДанныеЭтапа = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
			ЗаполнитьЗначенияСвойств(ДанныеЭтапа, СтрокаУслуга);
			ВыбранныеЭтапыГрафика.Добавить(ДанныеЭтапа);
			НомераГруппыЗатрат.Добавить(ТекущиеДанные[ИмяПоляГруппаЗатрат]);
		КонецЕсли;
		
	КонецЦикла;
	
	НомераГруппыЗатрат = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НомераГруппыЗатрат);
	
	Если НомераГруппыЗатрат.Количество() <> 0 Тогда
		
		УдалитьСтрокиТЧПоНомерамГруппыЗатрат("ВозвратныеОтходы", НомераГруппыЗатрат);
		УдалитьСтрокиТЧПоНомерамГруппыЗатрат("Материалы", НомераГруппыЗатрат);
		
		Документы.ЗаказПереработчику.ЗаполнитьПоЗаказуНаПроизводство(ВыбранныеЭтапыГрафика, Объект, НомераГруппыЗатрат);
		
	КонецЕсли;
	
КонецПроцедуры
 
 //-- Устарело_Производство21
 
&НаКлиенте
Процедура ОткрытьПодборРаспоряжений()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка",        Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("Партнер",       Объект.Партнер);
	ПараметрыФормы.Вставить("Продукция",     Объект.Продукция);
	ПараметрыФормы.Вставить("Услуги",        Объект.Услуги);
	ПараметрыФормы.Вставить("Склад",         ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ТолькоПросмотр",ТолькоПросмотр);
	ПараметрыФормы.Вставить("ЗапрещенВыборНовыхЭтапов", Объект.ПометкаУдаления);
	ПараметрыФормы.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("ГруппировкаЗатрат", Объект.ГруппировкаЗатрат);
	ПараметрыФормы.Вставить(
		"ЗаголовокПоляГруппыЗатрат",
			ПереработкаНаСторонеКлиентСервер.ЗаголовокПоляГруппыЗатрат(
				Объект.ГруппировкаЗатрат,
				Объект.ОбосабливатьПоНазначениюПродукции));
	ПараметрыФормы.Вставить("ДинамическаяСтруктура", ДинамическаяСтруктура);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборРаспоряженийЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказПереработчику.Форма.ПодборРаспоряжений", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборРаспоряженийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ПодборРаспоряженийЗавершениеНаСервере(РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодборРаспоряженийЗавершениеНаСервере(ДанныеЗаполнения)
	
	ЭтапыГрафика = Новый Массив;
	Для каждого СтрокаКоллекции Из ДанныеЗаполнения.ЭтапыГрафика Цикл
		//++ Устарело_Производство21
		Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
			СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаКоллекции);
			СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 Тогда
				ЭтапыГрафика.Добавить(ОбщегоНазначения.СкопироватьРекурсивно(СтрокаКоллекции));
			КонецЕсли;
		Иначе
		//-- Устарело_Производство21	
			СтруктураПоиска = Новый Структура("Распоряжение", СтрокаКоллекции);
			СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 Тогда
				ЭтапыГрафика.Добавить(СтрокаКоллекции);
			КонецЕсли;
		//++ Устарело_Производство21	
		КонецЕсли;
		//-- Устарело_Производство21
	КонецЦикла;
	
	//++ Устарело_Производство21
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		
		Документы.ЗаказПереработчику.ЗаполнитьПоЗаказуНаПроизводство(ЭтапыГрафика, Объект);
		ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
		АдресДвиженийЗаказа = АдресДвиженийЗаказаВХранилище();
		
	Иначе
	//-- Устарело_Производство21	
		СписокНовыхУслуг = Документы.ЗаказПереработчику.ЗаполнитьПоЭтапамПроизводства(ЭтапыГрафика, Объект);
		ИнициализироватьРедактированиеЭтапов(СписокНовыхУслуг);
	//++ Устарело_Производство21	
	КонецЕсли;
	//-- Устарело_Производство21
	
	УдалитьУслугиПослеВыбораРаспоряжений(ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) 
		И ЗначениеЗаполнено(ДанныеЗаполнения.РеквизитыШапки.Организация) Тогда
		Объект.Организация = ДанныеЗаполнения.РеквизитыШапки.Организация;
		ПриИзмененииОрганизацииСервер();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Партнер) 
		И ЗначениеЗаполнено(ДанныеЗаполнения.РеквизитыШапки.Партнер) Тогда
		Объект.Партнер = ДанныеЗаполнения.РеквизитыШапки.Партнер;
		ПриИзмененииПартнераСервер();
	КонецЕсли;
	
	ОбновитьИнформациюПоЗаказам();
	
	УстановитьВидимостьОбеспечения();
	УстановитьВидимостьОбеспеченияМатериалыЭтапов();

	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	ОбеспечениеВДокументахСервер.ОбновитьДоступностьПослеЗаписи(ЭтотОбъект); // добавились этапы, нужно получать остатки заново
	
	УстановитьДоступностьНаправленияДеятельности(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУслугиПослеВыбораРаспоряжений(ДанныеЗаполнения)

	СтрокиУслугКУдалению = Новый Массив;
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		
		//++ Устарело_Производство21
		Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
			ЭтапГрафикаВыбран = Ложь;
			Для каждого ДанныеЭтапа Из ДанныеЗаполнения.ЭтапыГрафика Цикл
				Если ДанныеЭтапа.Распоряжение = СтрокаУслуга.Распоряжение
					И ДанныеЭтапа.КодСтрокиЭтапыГрафик = СтрокаУслуга.КодСтрокиЭтапыГрафик Тогда
					ЭтапГрафикаВыбран = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЭтапГрафикаВыбран Тогда
				СтрокиУслугКУдалению.Добавить(СтрокаУслуга);
			КонецЕсли;
		Иначе
		//-- Устарело_Производство21	
			Если ДанныеЗаполнения.ЭтапыГрафика.Найти(СтрокаУслуга.Распоряжение) = Неопределено Тогда
				СтрокиУслугКУдалению.Добавить(СтрокаУслуга);
			КонецЕсли;
		//++ Устарело_Производство21	
		КонецЕсли;
		//-- Устарело_Производство21
		
	КонецЦикла;
	
	СписокТЧ = Новый Массив;
	//++ Устарело_Производство21
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		СписокТЧ.Добавить("Продукция");
		СписокТЧ.Добавить("ВозвратныеОтходы");
		СписокТЧ.Добавить("Материалы");
	Иначе
	//-- Устарело_Производство21	
		СписокТЧ.Добавить("РедактированиеЭтаповВыходныеИзделия");
		СписокТЧ.Добавить("РедактированиеЭтаповПобочныеИзделия");
		СписокТЧ.Добавить("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	//++ Устарело_Производство21	
	КонецЕсли;
	//-- Устарело_Производство21
	
	Для каждого СтрокаУслуга Из СтрокиУслугКУдалению Цикл
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
		Для каждого ИмяТЧ Из СписокТЧ Цикл
			ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
			СписокСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Для каждого ДанныеСтроки Из СписокСтрок Цикл
				ТабличнаяЧасть.Удалить(ДанныеСтроки);
			КонецЦикла;
		КонецЦикла;
		Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
			СтруктураПоиска = Новый Структура("Распоряжение", СтрокаУслуга.Распоряжение);
			СписокСтрок = РедактированиеЭтапов.Этапы.НайтиСтроки(СтруктураПоиска);
			Для каждого ДанныеСтроки Из СписокСтрок Цикл
				РедактированиеЭтапов.Этапы.Удалить(ДанныеСтроки);
			КонецЦикла;
		КонецЕсли;
		Объект.Услуги.Удалить(СтрокаУслуга);
	КонецЦикла;

	ПослеИзмененияСтрокТЧПрограммноНаСервере(СтрСоединить(СписокТЧ, ",") + ",Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатурыЭтапа(СтрокаТабличнойЧасти, ИмяТЧ)
	
	СтруктураПоиска = Новый Структура("Распоряжение", СтрокаТабличнойЧасти.Распоряжение);
	НайденныеСтроки = РедактированиеЭтапов.Этапы.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДанныеЭтапа = НайденныеСтроки[0];
	ЗаполнитьЗначенияСвойств(ЭтапСтруктура, РедактированиеЭтапов);
	ЗаполнитьЗначенияСвойств(ЭтапСтруктура, НайденныеСтроки[0],, "Распоряжение, Заказ");
	ЭтапСтруктура.Распоряжение = НайденныеСтроки[0].Заказ;
	
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		СтруктураДействий.Вставить("ПроверитьЗаполнитьКлючСвязиСпецификации");
		ПараметрыПроверкиСерий = Новый Структура;
		ПараметрыПроверкиСерий.Вставить("Склад", СтрокаТабличнойЧасти.Склад);
		ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерийРедактированиеЭтапов[ИмяТЧ]);
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
		Если СтрокаТабличнойЧасти.Производится Тогда
			ПараметрыЗаполнения = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
				ЭтапСтруктура,
				СтрокаТабличнойЧасти,
				ПараметрыВыбораСпецификацийРедактированиеЭтапов[ИмяТЧ],,
				Новый Структура("ИмяРеквизитаОбъект", "РедактированиеЭтапов"));
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", ПараметрыЗаполнения);
		КонецЕсли;
		
		ДобавитьДействияОбеспеченияЭтаповНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
		
		ПриИзмененииНоменклатурыХарактеристикиВСтрокеВходящейВНабор();
		
		СтруктураДействий.Вставить(
			"ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
			ДанныеЭтапа.ПараметрыЗаполненияНазначений);
		
	КонецЕсли;
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
		СтрокаТабличнойЧасти,
		ИмяТЧ,
		ЭтаФорма,
		ЭтапСтруктура,
		СтруктураДействий);
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
		
		ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов(
			СтруктураДействий,
			ЭтотОбъект,
			"Объект.ВыходныеИзделия");
		
		ДоходыИРасходыКлиентСервер.ВставитьДействиеЗаполнитьСтатьюАналитикуРасходовНоменклатуры(
			СтруктураДействий,
			ЭтотОбъект,
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"),
			Объект.Организация,
			"Объект.ВыходныеИзделия");
		
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Или ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая", Новый Структура("ИмяПоляСклад", "Получатель"));	
	КонецЕсли;	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
			ОбновитьКолонкуДоступноСервер();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУпаковкиСтрокиЭтапа(СтрокаТабличнойЧасти, ИмяТЧ)
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Если ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ДобавитьДействияОбеспеченияЭтаповНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
			ОбновитьКолонкуДоступноСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваУпаковокВТЧЭтапа(СтрокаТабличнойЧасти, ИмяТЧ)
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Если ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
			ОбновитьКолонкуДоступноСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура ОсобыеУсловияПеревозкиПриИзменении(Элемент)
	
	ОсобыеУсловияПеревозкиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОсобыеУсловияПеревозкиПриИзмененииСервер()
	
	ДоставкаТоваров.ОсобыеУсловияПеревозкиПриИзменении(Элементы, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершениеНаСервере();
	
	// Предложим пользователю скорректировать желаемую дату поступления
	
	Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) Тогда
		
		МаксДатаАванса = МаксимальнаяДатаАванса();
		
		Если НЕ ОтветПередЗаписью И ЗначениеЗаполнено(МаксДатаАванса) И МаксДатаАванса > Объект.ЖелаемаяДатаПоступления Тогда
			
			ТекстВопроса = НСтр("ru = 'Желаемая дата поступления меньше даты этапов предоплаты. Дата будет скорректирована до %МаксДатаАванса%';
								|en = 'Requested delivery date is less than the prepayment milestone date. The date will be adjusted to %МаксДатаАванса%'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%МаксДатаАванса%", Формат(МаксДатаАванса,"ДЛФ=DD"));
			
			ДополнительныеПараметры.Вставить("МаксДатаАванса", МаксДатаАванса);
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				ТекстВопроса,
				РежимДиалогаВопрос.ОКОтмена);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Объект.НеОтгружатьЧастями Тогда
		
		Отказ = Ложь;
		
		ЭтапыОплатыКлиент.ПредложитьЗаполнитьГрафикОплатПоУмолчанию(
			ЭтотОбъект,
			Новый ОписаниеОповещения(
				"ПередЗаписьюПредложитьЗаполнитьГрафикОплатПоУмолчаниюЗавершение", 
				ЭтотОбъект, 
				ДополнительныеПараметры),
			Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершениеНаСервере()
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КИсполнению")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.Закрыт") Тогда
		
		ЗаполнитьПустыеДатыПоступленияСервер();
		
	КонецЕсли;
	
	ВзаиморасчетыВызовСервера.ФормаПередЗаписьюНаКлиентеСервер(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МаксДатаАванса = ДополнительныеПараметры.МаксДатаАванса;
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
		ОтветПередЗаписью = Истина;
		Объект.ЖелаемаяДатаПоступления = МаксДатаАванса;
	КонецЕсли;
	
	Если Не Объект.НеОтгружатьЧастями Тогда
		
		Отказ = Ложь;
		
		ЭтапыОплатыКлиент.ПредложитьЗаполнитьГрафикОплатПоУмолчанию(
			ЭтотОбъект,
			Новый ОписаниеОповещения(
				"ПередЗаписьюПредложитьЗаполнитьГрафикОплатПоУмолчаниюЗавершение", 
				ЭтотОбъект, 
				ДополнительныеПараметры),
			Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьЗаполнитьГрафикОплатПоУмолчаниюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ЭтапыГрафикаОплаты.Очистить();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьКоличествоВыходныхИзделий(Форма)

	Форма.КоличествоВыходныхИзделий = 
		Форма.Объект.Продукция.Количество() 
		+ Форма.Объект.ВозвратныеОтходы.Количество()
		//++ НЕ УТКА
		+ Форма.РедактированиеЭтапов.ВыходныеИзделия.Количество()
		+ Форма.РедактированиеЭтапов.ПобочныеИзделия.Количество()
		//-- НЕ УТКА
		;

КонецПроцедуры
 
// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗакупкуПодДеятельность(Заполнить = Истина)
	
	ПараметрыЗаполнения = Документы.ЗаказПереработчику.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ЗакупкаПодДеятельность,
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ЗакупкаПодДеятельность,
		Объект.ЗакупкаПодДеятельность,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоПереработкеПриИзменении(Элемент)
	
	НастроитьВидимостьИЗаполнениеУслуг(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИЗаполнениеУслуг(Форма)
	
	ИспользоватьУслуги = (Форма.Объект.УслугиПоПереработке = ПредопределенноеЗначение("Перечисление.ВариантыОформленияУслугДокументовПереработки.УказываютсяВЗаказеОтчете"));
	ПоЭтапам = (Форма.Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства"));
	
	Форма.Элементы.ГруппаОплата.Видимость                 = ИспользоватьУслуги;
	Форма.Элементы.ГруппаСтраницыВсегоПродукция.Видимость = ИспользоватьУслуги;
	Форма.Элементы.ВалютаДокумента.Видимость              = ИспользоватьУслуги Или Не ПоЭтапам;
	
	Форма.Элементы.СтраницаУслуги.Видимость               = ИспользоватьУслуги;
	
	Форма.Элементы.БанковскийСчет.Видимость               = ИспользоватьУслуги;
	Форма.Элементы.ГруппаФинансовогоУчета.Видимость       = ИспользоватьУслуги;
	
	Если Не ИспользоватьУслуги Тогда
		
		Форма.Объект.БанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка");
		Форма.Объект.ГруппаФинансовогоУчета = ПредопределенноеЗначение("Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка");
		
		Форма.Объект.Сумма = 0;
		Форма.Объект.СуммаНДС = 0;
		
		Для Каждого Строка Из Форма.Объект.Услуги Цикл
			Строка.Сумма = 0;
			Строка.СуммаНДС = 0;
			Строка.СуммаСНДС = 0;
		КонецЦикла;
		
		ПриИзмененииСуммыУслуг(Форма);
		
		Форма.Объект.ЭтапыГрафикаОплаты.Очистить();
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказ(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗакрытьЗаказЗавершение", ЭтотОбъект),
			НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?';
				|en = 'To proceed, you need to post the document. Do you want to post the document?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЗакрытьЗаказФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказФрагмент(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказПереработчику.ФормаДокумента.Команда.ЗакрытьЗаказФрагмент");
	
	СписокЗаказовКЗакрытию = Новый СписокЗначений;
	СписокЗаказовКЗакрытию.Добавить(Объект.Ссылка);
	
	СтруктураЗакрытия = Новый Структура;
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказовКЗакрытию);
	СтруктураЗакрытия.Вставить("ДокументИнициатор",            Объект.Ссылка);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьЗаказФрагмент", ЭтотОбъект);
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи",ОписаниеОповещения);
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляции(ИмяТабличнойЧасти, ТипЗатрат)

	Если Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо заполнить статью калькуляции.';
									|en = 'Select the lines for which it is required to populate the product cost element.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипЗатрат", ТипЗатрат);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьСтатьюКалькуляцииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.СтатьиКалькуляции.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляцииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = ДополнительныеПараметры.ИмяТабличнойЧасти;
	
	Для каждого ИдентификаторСтроки Из Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.СтатьяКалькуляции = РезультатЗакрытия;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеТипаПолучателя(ТекущаяСтрока, ИмяЭлемента, ПриветсиКТипу = Ложь)
	
	ОграничитьТипПодразделением = ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
	                              Или ТекущаяСтрока.СписатьНаРасходы;
	
	Элементы[ИмяЭлемента].ОграничениеТипа = ?(ОграничитьТипПодразделением,
											  Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"),
											  Новый ОписаниеТипов("СправочникСсылка.Склады"));
											  
	Если ПриветсиКТипу Тогда
		ТекущаяСтрока.Получатель = Элементы[ИмяЭлемента].ОграничениеТипа.ПривестиЗначение(ТекущаяСтрока.Получатель);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция СуммаНДСТолькоПросмотр(СтавкаНДС)
	
	Возврат УчетНДСУП.НезначащаяСтавка(СтавкаНДС);
	
КонецФункции

&НаСервере
Процедура ВалютаПриИзмененииНаСервере()
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Валюта");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПолучателя(СтрокаТабличнойЧасти)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая", Новый Структура("ИмяПоляСклад", "Получатель"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров)
	
	ИмяТЧ = ?(СтруктураДополнительныхПараметров.ИмяТабличнойЧасти = "Товары",
				"Продукция, ВозвратныеОтходы, Материалы", 
				СтруктураДополнительныхПараметров.ИмяТабличнойЧасти);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураДополнительныхПараметров.ПроверятьОстатки = Не (ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован);
	
	СтруктураРезультата = ДокументОбъект.СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров);
	
	Если СтруктураДополнительныхПараметров.ЗакрыватьЗаказы Тогда
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПереработчикам.Закрыт;
		
		ПриИзмененииСтатусаСервер();
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(ИмяТЧ);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвратныеОтходы, ЗависимыеРеквизитыВозвратныеОтходы());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Материалы, ЗависимыеРеквизитыМатериалы());
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	ОбновитьКолонкуДоступноСервер();
	
	Модифицированность = Истина;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьДействиеПроверитьЗаполнитьСклад(ИмяТЧ, Форма, СтруктураДействий)
	
	Если НЕ Форма.ИспользоватьНесколькоСкладов Тогда
		СтруктураПараметровДействия = Новый Структура("СкладПоУмолчанию, СкладГруппа", Форма.СкладПоУмолчанию, Ложь);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", СтруктураПараметровДействия);
	КонецЕсли;
		
	ИмяПоляСклад = 
		?(ИмяТЧ = "Материалы" Или ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами", "Склад", "Получатель");
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая", Новый Структура("ИмяПоляСклад", ИмяПоляСклад));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаДолиСтоимости(ТекущаяСтрока)
	
	Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства") Тогда
		ИмяОбъекта = "РедактированиеЭтапов";
	Иначе
		ИмяОбъекта = "Объект";
	КонецЕсли;
	
	НетОшибок = ПроизводствоКлиент.ПроверитьЗаполнениеПередВводомДолиСтоимости(ТекущаяСтрока, ПараметрыРаспределенияЗатрат, ИмяОбъекта);
	
	Если НетОшибок Тогда
		ПараметрыФормы = ПараметрыФормыВводаДолиСтоимости(
			ИмяОбъекта,
			ПараметрыРаспределенияЗатрат,
			ТекущаяСтрока.ПолучитьИдентификатор());
		ОткрытьФорму("ОбщаяФорма.ВводДолиСтоимости",
			ПараметрыФормы,
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаДолиСтоимости(Элемент, ТекущиеДанные, ВыбранноеЗначение)
	
	Если ТекущиеДанные.ДоляСтоимости <> ВыбранноеЗначение.ДоляСтоимости Тогда
		
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(
			ТекущиеДанные,
			ВыбранноеЗначение);
		
		Группировки = Новый Массив;
		
		Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства") Тогда
			Группировки.Добавить(ТекущиеДанные.Распоряжение);
		Иначе
			Группировки.Добавить(ТекущиеДанные.НомерГруппыЗатрат);
		КонецЕсли;
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Группировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзмененииНаСервере()
	
	ПараметрыРаспределенияЗатратСтруктура = Документы.ЗаказПереработчику.ПараметрыРаспределенияЗатрат(Объект);
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(ПараметрыРаспределенияЗатратСтруктура);
	
	Если Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		ПроизводствоСервер.РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Группировки = Неопределено)
	
	//++ НЕ УТКА
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(РедактированиеЭтапов, ПараметрыРаспределенияЗатрат, Группировки);
	Иначе
	//-- НЕ УТКА	
		ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Объект, ПараметрыРаспределенияЗатрат, Группировки);
	//++ НЕ УТКА	
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВводаДолиСтоимости(ИмяОбъекта, ПараметрыРаспределенияЗатратЭтапа, ТекущиеДанныеИдентификатор)
	
	ПараметрыФормы = ПроизводствоСервер.ПараметрыФормыВводаДолейСтоимости(ЭтаФорма[ИмяОбъекта], ПараметрыРаспределенияЗатратЭтапа, ТекущиеДанныеИдентификатор);
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПолучателяПоУмолчанию(ТекущиеДанные, ПризнакВыполнения = Ложь)
	
	НастройкиЗаполнения = Новый Соответствие;
	НастройкиЗаполнения.Вставить("ТипНоменклатуры", Новый Соответствие);
	
	НастройкиТипНоменклатура = НастройкиЗаполнения.Получить("ТипНоменклатуры");
	
	НастройкиТипНоменклатура.Вставить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") ,
		ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	
	Если Не ИспользоватьНесколькоСкладов Тогда
		НастройкиТипНоменклатура.Вставить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")              , СкладПоУмолчанию);
		НастройкиТипНоменклатура.Вставить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") , СкладПоУмолчанию);
	КонецЕсли;	
	
	ПроизводствоКлиентСервер.ЗаполнитьЗначениеРеквизита(ТекущиеДанные, "Получатель", НастройкиЗаполнения, Истина, ПризнакВыполнения); 
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовВыбор(Элемент, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОкончанииЗаполненияПолучателей()
		
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Получатель заполнен';
			|en = 'Recipient is filled in'"),
		,
		НСтр("ru = 'Для выделенных строк получатель установлен';
			|en = 'Recipient is set for the selected lines'"),
		БиблиотекаКартинок.Информация32);
		
КонецПроцедуры

#Область Обеспечение

//++ НЕ УТКА

//++ Устарело_Производство21

&НаСервере
Функция АдресДвиженийЗаказаВХранилище()
	
	ДанныеОбъекта = Новый Структура();
	ДанныеОбъекта.Вставить("Объект", Объект);
	ДанныеОбъекта.Вставить("ДоступныеОстаткиПараметрыВстраивания", Неопределено);
	ДанныеОбъекта.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыВстраиванияРаспоряжениеСпецификация =
		Документы.ЗаказПереработчику.ДоступныеОстаткиПараметрыВстраиванияРаспоряжениеСпецификация();
	ОбеспечениеВДокументахСервер.ЗаполнитьПараметрыВстраивания(ДанныеОбъекта, ПараметрыВстраиванияРаспоряжениеСпецификация);
	
	АдресДвиженийЗаказа = ОбеспечениеВДокументахСервер.АдресТаблицыДвиженийВХранилище(ДанныеОбъекта);
	Возврат АдресДвиженийЗаказа;
	
КонецФункции

//-- Устарело_Производство21

//-- НЕ УТКА

&НаСервере
Функция АдресТаблицыДвиженийВХранилище()
	
	Возврат ОбеспечениеВДокументахСервер.АдресТаблицыДвиженийВХранилище(ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(КодДействия, АдресАналитик, ПараметрыЗаполнения)
	
	Модифицированность = Истина;
	Изменения = ОбеспечениеВДокументахСервер.ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(
		КодДействия,
		АдресАналитик,
		ЭтотОбъект);
	
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимСостоянияОбеспечения();
	ПослеЗаполненияОбеспечения(Изменения, Режим, ПараметрыЗаполнения);
	АдресТаблицыДвижений = АдресТаблицыДвиженийВХранилище();
	Возврат АдресТаблицыДвижений;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьУслугиПоПродукции(Объект)
	
	Если Объект.ПереработкаПоЗаказу Тогда
		// При переработке по заказам список услуг не зависит от продукции
		Результат = Новый Структура("УдаленыСтрокиМатериалов", Ложь);
		Возврат Результат;
	КонецЕсли;
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	СписокГруппЗатрат = Новый Массив;
	
	// Добавление услуг для групп которых нет в списке услуг
	Для каждого СтрокаПродукция Из Объект.Продукция Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаПродукция[ИмяПоляГруппаЗатрат]) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыГруппыЗатрат = Новый Структура("Распоряжение,Спецификация,"+ИмяПоляГруппаЗатрат);
		ЗаполнитьЗначенияСвойств(ПараметрыГруппыЗатрат, СтрокаПродукция);
		СписокГруппЗатрат.Добавить(ПараметрыГруппыЗатрат);
		
		СтруктураПоиска = Новый Структура(ИмяПоляГруппаЗатрат, СтрокаПродукция[ИмяПоляГруппаЗатрат]);
		СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			СтрокаУслуга = Объект.Услуги.Добавить();
			СтрокаУслуга[ИмяПоляГруппаЗатрат] = СтрокаПродукция[ИмяПоляГруппаЗатрат];
			СтрокаУслуга.Спецификация = СтрокаПродукция.Спецификация;
		КонецЕсли;
	КонецЦикла;
	
	ПредставленияГруппЗатрат = ПредставленияГруппЗатрат(
		СписокГруппЗатрат,
		Объект.ГруппировкаЗатрат,
		Объект.Продукция,
		ИмяПоляГруппаЗатрат);
	
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		ГруппаЗатрат = ПредставленияГруппЗатрат.Получить(СтрокаУслуга[ИмяПоляГруппаЗатрат]);
		Если ГруппаЗатрат <> Неопределено Тогда
			СтрокаУслуга.ГруппаЗатрат = ГруппаЗатрат;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление услуг для групп, которых нет в списке продукции
	СтрокиУслугКУдалению = Новый Массив;
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		СтруктураПоиска = Новый Структура(ИмяПоляГруппаЗатрат, СтрокаУслуга[ИмяПоляГруппаЗатрат]);
		СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			СтрокиУслугКУдалению.Добавить(СтрокаУслуга);
		КонецЕсли;
	КонецЦикла;
	
	УдаленыСтрокиМатериалов = Ложь;
	Для каждого СтрокаУслуга Из СтрокиУслугКУдалению Цикл
		СтруктураПоиска = Новый Структура(ИмяПоляГруппаЗатрат, СтрокаУслуга[ИмяПоляГруппаЗатрат]);
		
		СписокСтрок = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			Объект.ВозвратныеОтходы.Удалить(ДанныеСтроки);
		КонецЦикла;
		
		СписокСтрок = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
		УдаленыСтрокиМатериалов = СписокСтрок.Количество() > 0;
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			Объект.Материалы.Удалить(ДанныеСтроки);
		КонецЦикла;
		
		Объект.Услуги.Удалить(СтрокаУслуга);
	КонецЦикла;
	
	Результат = Новый Структура("УдаленыСтрокиМатериалов", УдаленыСтрокиМатериалов);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбеспечениеУстановитьДействие(КодДействия)
	
	Результат = ОбеспечениеВДокументахСервер.ОбеспечениеУстановитьДействиеСтруктураРезультата();
	
	Если КодДействия = "ФЛАГ_ОБОСОБЛЕННО" Или КодДействия = "ФЛАГ_НЕОБОСОБЛЕННО" Тогда
		
		Изменения = ОбеспечениеВДокументахСервер.УстановитьДействиеОбособленно(
			КодДействия,
			ЭтотОбъект,
			Элементы.Материалы.ВыделенныеСтроки);
		
		ОбновитьКолонкуДоступноСервер();
		
	Иначе
		
		Изменения = ОбеспечениеВДокументахСервер.УстановитьДействие(
			КодДействия,
			ЭтотОбъект,
			Элементы.Материалы.ВыделенныеСтроки);
			
		ЗаполнитьЗначенияСвойств(Результат, Изменения);
		
		Если Изменения.ТаблицаИзменений <> Неопределено Тогда
			ПослеЗаполненияОбеспечения(
				Изменения.ТаблицаИзменений,
				ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
				Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработатьВыборСкладаИСерииМатериалыНаСервере(ВыбранноеЗначение, ПараметрыФормы, ПараметрыЗаполнения)
	
	Модифицированность = Истина;
	Изменения = ОбеспечениеВДокументахСервер.ПриВыбореСклада(
		ВыбранноеЗначение,
		ЭтотОбъект,
		Элементы.Материалы.ТекущаяСтрока,
		ПараметрыФормы.ЗаполняемыеПоля);
		
	ПослеЗаполненияОбеспечения(Изменения, ПараметрыФормы.Режим, ПараметрыЗаполнения);
	ТекстОбработаноСтрок = ОбеспечениеВДокументахСервер.ТекстОбработаноСтрок(Изменения.Количество());
	Возврат ТекстОбработаноСтрок;
	
КонецФункции

&НаСервере
Функция ПараметрыВыбораОбеспеченияМатериалы(Режим)
	
	ПараметрыФормы = ОбеспечениеВДокументахСервер.ПараметрыВыбораОбеспечения(
		ЭтотОбъект,
		Элементы.Материалы.ТекущаяСтрока,
		Режим);
		
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыДокументаДляДействийОбеспечения(Форма, ДатаОтгрузки)
	
	ПараметрыДокумента = Новый Структура();
	ПараметрыДокумента.Вставить("Форма",                              Форма);
	ПараметрыДокумента.Вставить("Коллекция",                          Форма.Объект.Материалы);
	ПараметрыДокумента.Вставить("ВариантОбеспеченияИФлагОбособленно", Неопределено);
	
	Возврат ПараметрыДокумента;
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияНажатиеОбщий()
	
	ПараметрыФормы = ОбеспечениеВДокументахКлиент.ГиперссылкаСостояниеОбеспеченияНажатие(ЭтотОбъект);
	
	Если ПараметрыФормы.КонтекстИспользования = "ТАБЛИЦА" Тогда
		
		ПараметрыФормы.АдресТаблицыДвижений = АдресТаблицыДвиженийВХранилище();
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.СостояниеОбеспеченияЗаказов.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, ПоляСтрокой)
	
	ПараметрыДокумента = ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект, Неопределено);
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, ПоляСтрокой, ДатаОтгрузки = Неопределено)
	
	ПараметрыДокумента = ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект, ДатаОтгрузки);
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыФормыДокумента()
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		//++ НЕ УТКА
		УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаПроизводства(ЭтотОбъект,
			РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
		//-- НЕ УТКА
	Иначе
		ПараметрыДокумента = ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект, Неопределено);
		ОбеспечениеВДокументахСервер.ЗаполнитьСлужебныеРеквизитыФормыДокумента(ПараметрыДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыВариантОбеспеченияПриИзмененииНаСервере(ПараметрыЗаполнения)
	
	Изменения = ОбеспечениеВДокументахСервер.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		Элементы.Материалы.ТекущаяСтрока);
	
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействияНепосредственно();
	ПослеЗаполненияОбеспечения(Изменения, Режим, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВариантОбеспеченияПриИзмененииПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаполнения = ОбеспечениеВДокументахКлиент.ПараметрыОбработкиДатОтгрузкиПослеЗаполненияОбеспечения(Ответ);
	МатериалыВариантОбеспеченияПриИзмененииНаСервере(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат)
	
	СтруктураРезультата = ОбеспечениеВДокументахСервер.УстановитьДействиеПослеВопроса(Ответ, Результат, ЭтотОбъект);
	ПослеЗаполненияОбеспечения(
		СтруктураРезультата.ТаблицаИзменений,
		ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
		СтруктураРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеУстановитьДействиеСВопросом(КодДействия)
	
	Результат = ОбеспечениеУстановитьДействие(КодДействия);
	
	ВопросЗадан = ОбеспечениеВДокументахКлиент.ПоказатьВопросЗаполнятьОбеспечениеЦелымиУпаковками(
		ЭтотОбъект,
		Объект.Материалы,
		Результат,
		"ПослеВопросаЗаполнятьОбеспечениеЦелымиУпаковками");
		
	Если Не ВопросЗадан Тогда
		
		ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатой(
			ЭтотОбъект,
			Объект.Материалы,
			Результат,
			"ПослеВопросаСнятьФлагОтгружатьОднойДатой");
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонкуДоступноСервер()
	
	ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСкладаИСерииМатериалы(ВыбранноеЗначение, ПараметрыФормы) Экспорт
	
	Если Не ОбеспечениеВДокументахКлиент.ЕстьПодобранныеТовары(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеВыбораОбеспечения(
		ЭтотОбъект,
		ВыбранноеЗначение,
		ПараметрыФормы,
		"ОбработатьВыборСкладаИСерииПослеВопросаМатериалы");
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСкладаИСерииПослеВопросаМатериалы(Ответ, Параметры) Экспорт
	
	ПараметрыЗаполнения = ОбеспечениеВДокументахКлиент.ПараметрыОбработкиДатОтгрузкиПослеЗаполненияОбеспечения(Ответ);
	
	Оповещение = ОбработатьВыборСкладаИСерииМатериалыНаСервере(
		Параметры.ВыбранноеЗначение,
		Параметры.ПараметрыФормы,
		ПараметрыЗаполнения);
	
	ТекстОповещения = ОбеспечениеВДокументахКлиент.ТекстОповещенияОбработкиВыборСкладаИСерии(Параметры.ПараметрыФормы.Режим);
	ПоказатьОповещениеПользователя(ТекстОповещения, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииМодифицированностиФормы()
	
	Если ФормаМодифицирована <> Модифицированность Тогда
		
		ФормаМодифицирована = Модифицированность;
		НастроитьГиперссылкиСостояниеОбеспеченияКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаполнятьОбеспечениеЦелымиУпаковками(Ответ, Результат) Экспорт
	
	ВопросЗадан = ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеВопроса(
		ЭтотОбъект,
		Объект.Материалы,
		Результат,
		Ответ,
		"ПослеВопросаСнятьФлагОтгружатьОднойДатой");
		
	Если Не ВопросЗадан Тогда
		
		ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСнятьФлагОтгружатьОднойДатой(Ответ, Результат) Экспорт
	
	ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияОбеспечения(Изменения, Режим = Неопределено, ПараметрыЗаполнения = Неопределено)
	
	Документы.ЗаказПереработчику.ПослеЗаполненияОбеспечения(Объект, Изменения, Режим, ПараметрыЗаполнения);
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
	ЗаказыСервер.ПересчитатьЗависимыеРеквизитыПослеРазбиенияСтрок(Изменения, ЗависимыеРеквизитыМатериалыСтрокой());
	
	ЗаполнитьСлужебныеРеквизиты();
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	// Обновление признака СкладОбязателен.
	СтруктураДействий = Новый Структура();
	ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Для Каждого Изменение Из Изменения Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Изменение.Строка, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияПослеУдаленияСервер()
	
	ЗаполнитьУслугиПоПродукции(Объект);
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВыборДоступно()

	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерийМатериалыЭтапов(Неопределено);
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ЗапросКоличестваИСерий.Форма", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОбеспечениеЭтапаИзФормыСостоянияОбеспечения(КодДействия, АдресАналитик, ПараметрыЗаполнения)
	
	Модифицированность = Истина;
	
	Изменения = ОбеспечениеВДокументахСервер.ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(
		КодДействия,
		АдресАналитик,
		ЭтотОбъект);
	
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимСостоянияОбеспечения();
	ПослеЗаполненияОбеспеченияЭтапов(Изменения, Режим, ПараметрыЗаполнения);
	АдресТаблицыДвижений = АдресТаблицыДвиженийЭтаповВХранилище();
	Возврат АдресТаблицыДвижений;
	
КонецФункции

&НаСервере
Функция АдресТаблицыДвиженийЭтаповВХранилище()
	
	Возврат ОбеспечениеВДокументахСервер.АдресТаблицыДвиженийВХранилище(ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ОбеспечениеЭтаповУстановитьДействие(КодДействия)
	
	Результат = ОбеспечениеВДокументахСервер.ОбеспечениеУстановитьДействиеСтруктураРезультата();
	
	Если КодДействия = "ФЛАГ_ОБОСОБЛЕННО" Или КодДействия = "ФЛАГ_НЕОБОСОБЛЕННО" Тогда
		
		Идентификаторы = Новый Массив();
		Для Каждого Идентификатор Из Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки Цикл
			СтрокаТовары = РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(Идентификатор);
			Если КодДействия = "ФЛАГ_НЕОБОСОБЛЕННО" И СтрокаТовары.Производится Тогда
				Продолжить;
			КонецЕсли;
			Идентификаторы.Добавить(Идентификатор);
		КонецЦикла;
		
		Изменения = ОбеспечениеВДокументахСервер.УстановитьДействиеОбособленно(
			КодДействия,
			ЭтотОбъект,
			Идентификаторы);
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("ЗаполнитьНазначениеВЭтапеПроизводства");
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		Для каждого Строка Из Изменения.ТаблицаИзменений Цикл
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка.Строка, СтруктураДействий, КэшированныеЗначения);
		КонецЦикла;
		
		ОбновитьКолонкуДоступноСервер();
		
	Иначе
		
		Изменения = ОбеспечениеВДокументахСервер.УстановитьДействие(
			КодДействия,
			ЭтотОбъект,
			Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки);
			
		ЗаполнитьЗначенияСвойств(Результат, Изменения);
		
		Если Изменения.ТаблицаИзменений <> Неопределено Тогда
			ПослеЗаполненияОбеспеченияЭтапов(
				Изменения.ТаблицаИзменений,
				ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
				Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработатьВыборСкладаИСерииЭтапаНаСервере(ВыбранноеЗначение, ПараметрыФормы, ПараметрыЗаполнения)
	
	Модифицированность = Истина;
	Изменения = ОбеспечениеВДокументахСервер.ПриВыбореСклада(
		ВыбранноеЗначение,
		ЭтотОбъект,
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущаяСтрока,
		ПараметрыФормы.ЗаполняемыеПоля);
		
	ПослеЗаполненияОбеспеченияЭтапов(Изменения, ПараметрыФормы.Режим, ПараметрыЗаполнения);
	
	ТекстОбработаноСтрок = ОбеспечениеВДокументахСервер.ТекстОбработаноСтрок(Изменения.Количество());
	Возврат ТекстОбработаноСтрок;
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияНажатиеОбщийЭтапы()
	
	ПараметрыФормы = ОбеспечениеВДокументахКлиент.ГиперссылкаСостояниеОбеспеченияНажатие(ЭтотОбъект);
	
	Если Объект.ГруппировкаЗатрат
		= ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства") Тогда
			ПараметрыФормы.ЗаказыРегистраторыДвижений = Новый Массив();
			Для Каждого Строка Из РедактированиеЭтапов.Этапы Цикл
				ПараметрыФормы.ЗаказыРегистраторыДвижений.Добавить(Строка.Ссылка);
			КонецЦикла;
	КонецЕсли;
	Если ПараметрыФормы.КонтекстИспользования = "ТАБЛИЦА" Тогда
		
		ПараметрыФормы.АдресТаблицыДвижений = АдресТаблицыДвиженийЭтаповВХранилище();
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.СостояниеОбеспеченияЗаказов.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействияОбеспеченияЭтаповНаКлиенте(СтруктураДействий, ПоляСтрокой)
	
	ПараметрыДокумента = Новый Структура();
	ПараметрыДокумента.Вставить("Форма",                         ЭтотОбъект);
	ПараметрыДокумента.Вставить("Коллекция",                     РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
	ПараметрыДокумента.Вставить("ВариантыОбеспечения",           Неопределено);
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДействияОбеспеченияЭтаповНаСервере(СтруктураДействий, ПоляСтрокой)
	
	ПараметрыДокумента = Новый Структура();
	ПараметрыДокумента.Вставить("Форма",                         ЭтотОбъект);
	ПараметрыДокумента.Вставить("Коллекция",                     РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
	ПараметрыДокумента.Вставить("ВариантыОбеспечения",           Неопределено);
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеЭтаповУстановитьДействиеПослеВопроса(Ответ, Результат)
	
	СтруктураРезультата = ОбеспечениеВДокументахСервер.УстановитьДействиеПослеВопроса(Ответ, Результат, ЭтотОбъект);
	ПослеЗаполненияОбеспеченияЭтапов(
		СтруктураРезультата.ТаблицаИзменений,
		ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
		СтруктураРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеЭтаповУстановитьДействиеСВопросом(КодДействия)
	
	Результат = ОбеспечениеЭтаповУстановитьДействие(КодДействия);
	
	ВопросЗадан = ОбеспечениеВДокументахКлиент.ПоказатьВопросЗаполнятьОбеспечениеЦелымиУпаковками(
		ЭтотОбъект,
		РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами,
		Результат,
		"ПослеВопросаЗаполнятьОбеспечениеЭтаповЦелымиУпаковками");
		
	Если Не ВопросЗадан Тогда
		
		ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатой(
			ЭтотОбъект,
			РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами,
			Результат,
			"ПослеВопросаСнятьФлагОтгружатьОднойДатойЭтапов");
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСкладаИСерииМатериалыЭтапов(ВыбранноеЗначение, ПараметрыФормы) Экспорт
	
	Если Не ОбеспечениеВДокументахКлиент.ЕстьПодобранныеТовары(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеВыбораОбеспечения(
		ЭтотОбъект,
		ВыбранноеЗначение,
		ПараметрыФормы,
		"ОбработатьВыборСкладаИСерииПослеВопросаМатериалыЭтапов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСкладаИСерииПослеВопросаМатериалыЭтапов(Ответ, Параметры) Экспорт
	
	ПараметрыЗаполнения = ОбеспечениеВДокументахКлиент.ПараметрыОбработкиДатОтгрузкиПослеЗаполненияОбеспечения(Ответ);
	
	Оповещение = ОбработатьВыборСкладаИСерииЭтапаНаСервере(
		Параметры.ВыбранноеЗначение,
		Параметры.ПараметрыФормы,
		ПараметрыЗаполнения);
	
	ТекстОповещения = ОбеспечениеВДокументахКлиент.ТекстОповещенияОбработкиВыборСкладаИСерии(Параметры.ПараметрыФормы.Режим);
	ПоказатьОповещениеПользователя(ТекстОповещения, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиентеПослеВопросаРедактированиеЭтапов(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РедактированиеЭтапов.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(ДополнительныеПараметры, "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаполнятьОбеспечениеЭтаповЦелымиУпаковками(Ответ, Результат) Экспорт
	
	ВопросЗадан = ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеВопроса(
		ЭтотОбъект,
		РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами,
		Результат,
		Ответ,
		"ПослеВопросаСнятьФлагОтгружатьОднойДатойЭтапов");
		
	Если Не ВопросЗадан Тогда
		
		ОбеспечениеЭтаповУстановитьДействиеПослеВопроса(Ответ, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСнятьФлагОтгружатьОднойДатойЭтапов(Ответ, Результат) Экспорт
	
	ОбеспечениеЭтаповУстановитьДействиеПослеВопроса(Ответ, Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияОбеспеченияЭтапов(Изменения, Режим = Неопределено, ПараметрыЗаполнения = Неопределено)
	
	ОбеспечениеВДокументахСервер.АктуализироватьДатуОтгрузки(
		ПараметрыЗаполнения,
		РедактированиеЭтапов.НеОтгружатьЧастями,
		РедактированиеЭтапов.ДатаОтгрузки,
		РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами,
		"ДатаОтгрузки");
		
	Если ОбеспечениеВДокументахКлиентСервер.НужноПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(Режим) Тогда
		
		ОбеспечениеВДокументахСервер.ПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(
			Изменения.ВыгрузитьКолонку("Строка"),
			"ДатаОтгрузки",
			РедактированиеЭтапов.НеОтгружатьЧастями,
			РедактированиеЭтапов.ДатаОтгрузки);
			
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтаФорма, "НеОтгружатьЧастями");
	
	ОбеспечениеВДокументахСервер.ПересчитатьКоличествоЕдиниц(Изменения);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		РедактированиеЭтапов,
		ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
	
	ЗаполнитьСлужебныеРеквизиты();
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	СтруктураДействий = Новый Структура();
	ДобавитьДействияОбеспеченияЭтаповНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	НайденныеЭтапы = Новый Соответствие;
	
	Для Каждого Изменение Из Изменения Цикл
		
		СтрокаОбеспечение = РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(Изменение.Идентификатор);
		
		ОбъектЭтап = НайденныеЭтапы.Получить(СтрокаОбеспечение.Распоряжение);
		Если ОбъектЭтап = Неопределено Тогда
			ПараметрыОтбора = Новый Структура("Ссылка", СтрокаОбеспечение.Распоряжение);
			ОбъектЭтап = РедактированиеЭтапов.Этапы.НайтиСтроки(ПараметрыОтбора)[0];
			НайденныеЭтапы.Вставить(СтрокаОбеспечение.Распоряжение, ОбъектЭтап);
		КонецЕсли;
		
		// Обработка строки ТЧ
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Изменение.Строка, СтруктураДействий, КэшированныеЗначения);
		
		Если ОбеспечениеВДокументахКлиентСервер.НужноПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(Режим) Тогда
			
			// Учет ограничений указания вариантов обеспечения в этапе - если есть отгрузить, то меняется статус документа.
			Если Изменение.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
					
				Если ОбъектЭтап.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется
					Или ОбъектЭтап.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован
					Или ОбъектЭтап.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению Тогда
					
					ОбъектЭтап.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
					
				КонецЕсли;
				
				Если Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован Тогда
					Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.КИсполнению;
				КонецЕсли;
				
			// Учет ограничений указания вариантов обеспечения в этапе - если есть Резервировать, то меняется статус документа.
			ИначеЕсли Изменение.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
					
				Если ОбъектЭтап.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
					
					ОбъектЭтап.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
		РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами,
		ДатаОтгрузкиОбязательна,
		СкладОбязателен);
		
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзмененииНаСервере(ПараметрыЗаполнения)
	
	Изменения = ОбеспечениеВДокументахСервер.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущаяСтрока);
		
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействияНепосредственно();
	ПослеЗаполненияОбеспеченияЭтапов(Изменения, Режим, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзмененииПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаполнения = ОбеспечениеВДокументахКлиент.ПараметрыОбработкиДатОтгрузкиПослеЗаполненияОбеспечения(Ответ);
	РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзмененииНаСервере(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораОбеспеченияЭтапа(Режим)
	
	ПараметрыФормы = ОбеспечениеВДокументахСервер.ПараметрыВыбораОбеспечения(
		ЭтотОбъект,
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущаяСтрока,
		Режим);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерийМатериалыЭтапов(Режим)
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
										"ОбеспечениеМатериаламиИРаботами", 
										НСтр("ru = 'Обеспечение';
											|en = 'Supply'"));
		
	ПараметрыПроверки.Поля.Удалить("Склад");
	
	НетОшибок = ОбеспечениеКлиент.ПроверитьЗаполнение(
					РедактированиеЭтапов, 
					РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами, 
					Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущаяСтрока,
					ПараметрыПроверки,
					Неопределено,
					Режим);
	
	Если Не НетОшибок Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспеченияЭтапа(Режим);
	ПараметрыФормы.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	Возврат ПараметрыФормы;
	
КонецФункции

//-- НЕ УТКА

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерийМатериалы(Режим)
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("Материалы",
		НСтр("ru = 'Сырье и материалы для производства';
			|en = 'Raw and consumable materials for production'"));
	ПараметрыПроверки.Поля.Удалить("Склад");
	Если Не ИспользоватьПодразделения Тогда
		ПараметрыПроверки.Поля.Удалить("Подразделение");
	КонецЕсли;

	Если Не ОбеспечениеКлиент.ПроверитьЗаполнение(
				Объект,
				Объект.Материалы,
				Элементы.Материалы.ТекущаяСтрока,
				ПараметрыПроверки,
				Неопределено,
				Объект.Подразделение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспеченияМатериалы(Режим);
	ПараметрыФормы.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура АктуализироватьСтавкуНДССервер()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, Неопределено);
	
	СтруктураПересчетаСуммы = Новый Структура("ЦенаВключаетНДС", Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Услуги, СтруктураДействий, Неопределено);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ОтветПередЗаписью = Ложь;

#КонецОбласти

