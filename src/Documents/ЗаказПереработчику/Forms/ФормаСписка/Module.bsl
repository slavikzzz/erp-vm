
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ОтборПоСпискуЗаказов") Тогда
		ОтборПоСпискуЗаказов(Параметры.ОтборПоСпискуЗаказов);
	//++ НЕ УТКА

	//++ Устарело_Производство21
	ИначеЕсли Параметры.Свойство("ОтборПоСпискуЭтаповГрафика") Тогда
		ОтборПоСпискуЭтаповГрафика(Параметры.ОтборПоСпискуЭтаповГрафика);
	ИначеЕсли Параметры.Свойство("ОтборПоСпискуЭтапов") Тогда
		ОтборПоСпискуЭтапов(Параметры.ОтборПоСпискуЭтапов);
	//-- Устарело_Производство21	

	//-- НЕ УТКА
	КонецЕсли; 
	
	ПравоДоступаДобавление =
		ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПереработчику);
	
	ИспользоватьПроизводствоНаСтороне2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне2_5");
	ИспользоватьРасширенноеОбеспечениеПотребностей =
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	
	Если Не ПравоДоступаДобавление Тогда
		Элементы.ФормаСписокГруппаСоздать.Видимость = Ложь;
	ИначеЕсли ИспользоватьПроизводствоНаСтороне2_5 Тогда
		Элементы.ФормаСписокГруппаСоздать.Видимость = Ложь;
		Элементы.СписокСоздать.Видимость = Ложь;
		Элементы.СписокСкопировать.Видимость = Ложь;
	ИначеЕсли ИспользоватьРасширенноеОбеспечениеПотребностей Тогда
		Элементы.ФормаСписокГруппаСоздать.Видимость = Истина;
		Элементы.СписокСоздать.Видимость = Ложь;
		Элементы.СписокСкопировать.Видимость = Истина;
	Иначе
		Элементы.ФормаСписокГруппаСоздать.Видимость = Ложь;
		Элементы.СписокСоздать.Видимость = Истина;
		Элементы.СписокСкопировать.Видимость = Истина;
	КонецЕсли;
	
	Если ИспользоватьПроизводствоНаСтороне2_5 Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Заказы переработчикам (2.4)';
						|en = 'Purchase orders — Subcontracting (2.4)'")
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("НеЗагружатьОтборы") Тогда
		Настройки.Удалить("Менеджер");
		Настройки.Удалить("Приоритет");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Менеджер  = Настройки.Получить("Менеджер");
	Приоритет = Настройки.Получить("Приоритет");
	ОтборПодразделение = Настройки.Получить("ОтборПодразделение");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Подразделение",  ОтборПодразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборПодразделение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Менеджер",  Менеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Менеджер));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Приоритет", Приоритет, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Приоритет));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Подразделение",  ОтборПодразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборПодразделение));
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Менеджер",  Менеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Менеджер));

КонецПроцедуры

&НаКлиенте
Процедура ОтборПриоритетПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Приоритет", Приоритет, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Приоритет));

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Условное оформление динамического списка "Список"
	СписокУсловноеОформление = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет высокий приоритет';
								|en = 'High priority document'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет низкий приоритет';
								|en = 'Low priority document'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	

	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.СписокДата.Имя);

	
КонецПроцедуры

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПереработчику.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Элементы.Список.ТекущаяСтрока = МассивСсылок[0];
		ПоказатьЗначение(Неопределено, МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоСпискуЗаказов(СписокЗаказов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПереработчику.Ссылка
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|ГДЕ
	|	ЗаказПереработчику.Распоряжение В (&СписокЗаказов)";
	
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	
	СписокДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", СписокДокументов);

	Заголовок = НСтр("ru = 'Заказы переработчикам (установлен отбор по заказам)';
					|en = 'Subcontracting purchase orders (filtered by orders)'");
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

//++ НЕ УТКА

//++ Устарело_Производство21

&НаСервере
Процедура ОтборПоСпискуЭтаповГрафика(СписокЭтапов)

	ТаблицаЭтапов = Новый ТаблицаЗначений;
	ТаблицаЭтапов.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаЭтапов.Колонки.Добавить("КодСтрокиПродукция", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЭтапов.Колонки.Добавить("КодСтрокиЭтапыГрафик", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	Для каждого ДанныеЭтапа Из СписокЭтапов Цикл
		СтрокаЭтап = ТаблицаЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭтап, ДанныеЭтапа);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЭтапов.Заказ КАК Заказ,
	|	ТаблицаЭтапов.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ТаблицаЭтапов.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
	|ПОМЕСТИТЬ ТаблицаЭтапов
	|ИЗ
	|	&ТаблицаЭтапов КАК ТаблицаЭтапов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказПереработчику.Ссылка
	|ИЗ
	|	ТаблицаЭтапов КАК ТаблицаЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ЗаказПереработчику
	|		ПО (ЗаказПереработчику.Распоряжение = ТаблицаЭтапов.Заказ)
	|			И (ЗаказПереработчику.КодСтрокиПродукция = ТаблицаЭтапов.КодСтрокиПродукция)
	|			И (ЗаказПереработчику.КодСтрокиЭтапыГрафик = ТаблицаЭтапов.КодСтрокиЭтапыГрафик)";
	
	Запрос.УстановитьПараметр("ТаблицаЭтапов", ТаблицаЭтапов);
	
	СписокДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", СписокДокументов);

	Заголовок = НСтр("ru = 'Заказы переработчикам (установлен отбор по этапам)';
					|en = 'Tolling orders (filtered by stages)'");
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоСпискуЭтапов(СписокЭтапов)

	ТаблицаЭтапов = Новый ТаблицаЗначений;
	ТаблицаЭтапов.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаЭтапов.Колонки.Добавить("КодСтрокиПродукция", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЭтапов.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	Для каждого ДанныеЭтапа Из СписокЭтапов Цикл
		СтрокаЭтап = ТаблицаЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭтап, ДанныеЭтапа);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЭтапов.Заказ КАК Заказ,
	|	ТаблицаЭтапов.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ТаблицаЭтапов.Этап КАК Этап
	|ПОМЕСТИТЬ ТаблицаЭтапов
	|ИЗ
	|	&ТаблицаЭтапов КАК ТаблицаЭтапов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	КодСтрокиПродукция,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказПереработчику.Ссылка
	|ИЗ
	|	ТаблицаЭтапов КАК ТаблицаЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ЗаказПереработчику
	|		ПО (ЗаказПереработчику.Распоряжение = ТаблицаЭтапов.Заказ)
	|			И (ЗаказПереработчику.КодСтрокиПродукция = ТаблицаЭтапов.КодСтрокиПродукция)
	|			И (ЗаказПереработчику.Этап = ТаблицаЭтапов.Этап)";
	
	Запрос.УстановитьПараметр("ТаблицаЭтапов", ТаблицаЭтапов);
	
	СписокДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", СписокДокументов);

	Заголовок = НСтр("ru = 'Заказы переработчикам (установлен отбор по этапам)';
					|en = 'Tolling orders (filtered by stages)'");
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

//-- Устарело_Производство21

//-- НЕ УТКА

#КонецОбласти
