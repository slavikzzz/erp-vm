//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ДоступностьРабочихЦентров");
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("Производство");
	МеханизмыДокумента.Добавить("Производство21");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("АдресныйСклад");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаказНаПроизводство") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаЭтапыПроизводства(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыНаПроизводствоТрудозатраты(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДоступностьВидовРабочихЦентров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыНаПроизводствоСпецификации(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаБракВПроизводстве(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыМатериаловВПроизводство(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыМатериаловСУчетомКорректировок(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПереработкаПоГрафикуПроизводства(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;

	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Формирует представление объекта метаданных на основном языке.
// Возвращаемое значение:
// Строка - Представление объекта метаданных на основном языке.
//
Функция ПредставлениеОбъектаНаОсновномЯзыке() Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
	ПредставлениеОбъекта = НСтр(
		"ru = 'Заказ на производство';
		|en = 'Production order'",
		КодОсновногоЯзыка);
		
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.РазрешениеНаЗаменуМатериалов.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Обработки.ВводКорректировкиЗаказаМатериалов.ДобавитьКомандуСоздатьНаОснованииКорректировкаЗаказаМатериалов(КомандыСозданияНаОсновании);
	
	Документы.ПередачаМатериаловВПроизводство.ДобавитьКомандуСоздатьНаОснованииПередачаВПроизводство(КомандыСозданияНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	//++ НЕ УТКА
	Документы.ЗаказНаРемонт.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	//-- НЕ УТКА
	
КонецПроцедуры

// Добавляет команду создания документа "Заказ на производство".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьОбеспечивающийЗаказ(КомандыСозданияНаОсновании) Экспорт
	Возврат УправлениеПроизводством.ДобавитьКомандуСоздатьОбеспечивающийЗаказ(КомандыСозданияНаОсновании);
КонецФункции

// Параметры создания на основании обеспечивающего заказа.
// Возвращаемое значение:
// см. ОбеспечениеВДокументахСервер.ПараметрыОтбораТоваровДляСозданияОбеспечивающиегоЗаказа
Функция ПараметрыСозданияНаОснованииОбеспечивающегоЗаказа() Экспорт
	
	ПараметрыТаблицыТовары = ОбеспечениеВДокументахСервер.ПараметрыОтбораТоваровДляСозданияОбеспечивающиегоЗаказа();
	ПараметрыТаблицыТовары.ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	ПараметрыТаблицыТовары.ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ПараметрыТаблицыТовары.ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	Возврат ПараметрыТаблицыТовары;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ НЕ УТКА
	Отчеты.ОтклонениеЗаказаФактаОтКалькуляции.ДобавитьКомандуОтчета(КомандыОтчетов);
	Отчеты.ПередачаМатериаловПоЗаказу.ДобавитьКомандуПередачаМатериаловПоЗаказу(КомандыОтчетов);
	//-- НЕ УТКА
	
	//++ НЕ УТКА
	КомандаОтчет = Отчеты.СостояниеВыполненияЗаказовНаПроизводство.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	//-- НЕ УТКА
	
	//++ НЕ УТКА
	Отчеты.СтоимостьМатериаловИРаботСпецификации.ДобавитьКомандуОтчета(КомандыОтчетов);
	//-- НЕ УТКА
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Возвращает новый номер в очереди заказов на производство.
//
// Возвращаемое значение:
//   - Число - номер очереди
//
Функция НовыйНомерОчереди() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказНаПроизводство.Очередь + 1 КАК НовыйНомерОчереди
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаПроизводство.Очередь УБЫВ");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		НовыйНомерОчереди = 1;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НовыйНомерОчереди = Выборка.НовыйНомерОчереди;
		
	КонецЕсли;
	
	Возврат НовыйНомерОчереди;
	
КонецФункции

// Формирует график выпуска по данным документа
//
// Параметры:
// 	ДанныеДокумента	- Структура - содержит данные табличных частей заказа на производство
// 	АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат расчета.
//
Процедура РассчитатьГрафикВыпуска(ДанныеДокумента, АдресХранилища) Экспорт
	
	РезультатРасчета = ПолучитьГрафикВыпускаПродукции(ДанныеДокумента);
	
	ДанныеХранилища = Новый Структура;
	ДанныеХранилища.Вставить("ДанныеДокумента", ДанныеДокумента);
	ДанныеХранилища.Вставить("РезультатРасчета", РезультатРасчета);
	
	ПоместитьВоВременноеХранилище(ДанныеХранилища, АдресХранилища);
	
КонецПроцедуры

// Планирует график по очереди заказов на производство с неактуальным графиком
//  и записывает его в качестве рабочего графика.
//
Процедура ПланироватьОчередьЗаказовНаПроизводство() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказНаПроизводство.Ссылка КАК ЗаказНаПроизводство
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ГДЕ
		|	ЗаказНаПроизводство.Проведен
		|	И ЗаказНаПроизводство.СтатусГрафикаПроизводства = ЗНАЧЕНИЕ(Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать)
		|	И ЗаказНаПроизводство.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания,
		|	ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания,
		|	ЗаказНаПроизводство.Очередь");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаказНаПроизводство = Выборка.ЗаказНаПроизводство.ПолучитьОбъект();
		
		РезультатРасчета = ЗаказНаПроизводство.РассчитатьГрафикВыпуска();
		
		Если РезультатРасчета.Запланирован Тогда
			
			ЗаказНаПроизводство.Статус = Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству;
			
			ЗаказНаПроизводство.ИнициализироватьПараметрыАктуализацииМаршрутныхЛистов();
			
			ЗаказНаПроизводство.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//++ Устарело_Переработка24

// Заполняет таблицу продукции заказа на производство по непоставленной части заказов.
//
// Параметры:
//	ЗаказДавальца - ДокументСсылка.ЗаказДавальца - Заказ давальца, для которого необходимо создать/перезаполнить заказ на производство продукции по заказу давальца.
//	Продукция     - Документ.ЗаказДавальца.Продукция, ДанныеФормыКоллекция - Табличная часть продукции, которую необходимо заполнить/перезаполнить.
//	ТекущийДокумент - ДокументСсылка.ЗаказНаПроизводство - Заказ на производство, продукцию которого необходимо перезаполнить.
//
Процедура ЗаполнитьПоОстаткамПродукцииКОбеспечениюДавальцу(ЗаказДавальца, Продукция, ТекущийДокумент = Неопределено) Экспорт
	
	ВыборкаУслуги = ПолучитьРезультатЗапросаПоОстаткамПродукцииКОбеспечениюДавальцу(ЗаказДавальца, ТекущийДокумент).Выбрать();
	
	Пока ВыборкаУслуги.Следующий() Цикл
		
		ТекСтрока = Продукция.Добавить();
		ТекСтрока.КлючСвязи = Новый УникальныйИдентификатор;
		
		ЗаполнитьЗначенияСвойств(ТекСтрока, ВыборкаУслуги);
		
	КонецЦикла;
	
КонецПроцедуры
//-- Устарело_Переработка24

// Возвращает заказы, по которым необходимо планировать график
//
// Параметры:
//  МассивЗаказов	 - Массив	 - заказы для проверки.
// 
// Возвращаемое значение:
//   - Массив - заказы требующие планирования.
//
Функция ТребуетсяПланировать(МассивЗаказов) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗанятостьВидовРабочихЦентров.Регистратор КАК Заказ,
		|	ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	ЗанятостьВидовРабочихЦентров.ДатаИнтервала КАК ДатаИнтервала,
		|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания КАК ПриоритетПорядок,
		|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.ЗаказНаПроизводство).Подразделение.РеквизитДопУпорядочивания КАК ПодразделениеПорядок,
		|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.ЗаказНаПроизводство).Очередь КАК Очередь
		|ПОМЕСТИТЬ ВТЗанятость
		|ИЗ
		|	РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ЗанятостьВидовРабочихЦентров
		|ГДЕ
		|	ЗанятостьВидовРабочихЦентров.Активность
		|	И ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы
		|	И НЕ ЗанятостьВидовРабочихЦентров.ЭтоДвижениеВводаДоступности
		|	И ЗанятостьВидовРабочихЦентров.Регистратор В (&МассивЗаказов)
		|	И (ЗанятостьВидовРабочихЦентров.Регистратор, ЗанятостьВидовРабочихЦентров.КодСтрокиЭтапыГрафик) В
		|			(ВЫБРАТЬ
		|				Т.Распоряжение,
		|				Т.КодСтрокиЭтапыГрафик
		|			ИЗ
		|				РегистрСведений.ГрафикЭтаповПроизводства КАК Т)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение,
		|	ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра,
		|	ЗанятостьВидовРабочихЦентров.ДатаИнтервала,
		|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания,
		|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Подразделение.РеквизитДопУпорядочивания,
		|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Очередь
		|ИЗ
		|	РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ЗанятостьВидовРабочихЦентров
		|ГДЕ
		|	ЗанятостьВидовРабочихЦентров.Активность
		|	И ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы
		|	И НЕ ЗанятостьВидовРабочихЦентров.ЭтоДвижениеВводаДоступности
		|	И ЗанятостьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
		|	И ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение В (&МассивЗаказов)
		|	И (ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение, ЗанятостьВидовРабочихЦентров.КодСтрокиЭтапыГрафик) В
		|			(ВЫБРАТЬ
		|				Т.Распоряжение,
		|				Т.КодСтрокиЭтапыГрафик
		|			ИЗ
		|				РегистрСведений.ГрафикЭтаповПроизводства КАК Т)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРабочегоЦентра,
		|	ДатаИнтервала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Занятость.Заказ КАК Заказ,
		|	Занятость.ПриоритетПорядок КАК ПриоритетПорядок,
		|	Занятость.ПодразделениеПорядок КАК ПодразделениеПорядок,
		|	Занятость.Очередь КАК Очередь,
		|	Доступность.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	Доступность.ДатаИнтервала КАК ДатаИнтервала,
		|	ВЫБОР
		|		КОГДА Доступность.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
		|			ТОГДА Доступность.ДоступностьПоВидуРЦОборот
		|		ИНАЧЕ Доступность.ДоступностьПоРЦОборот
		|	КОНЕЦ КАК Доступность
		|ПОМЕСТИТЬ ВТПерегрузка
		|ИЗ
		|	РегистрНакопления.ДоступностьВидовРабочихЦентров.Обороты КАК Доступность
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗанятость КАК Занятость
		|		ПО (Занятость.ВидРабочегоЦентра = Доступность.ВидРабочегоЦентра)
		|			И (Занятость.ДатаИнтервала = Доступность.ДатаИнтервала)
		|ГДЕ
		|	Доступность.ЗанятоОборот > ВЫБОР
		|			КОГДА Доступность.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
		|				ТОГДА Доступность.ДоступностьПоВидуРЦОборот
		|			ИНАЧЕ Доступность.ДоступностьПоРЦОборот
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРабочегоЦентра,
		|	ДатаИнтервала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Распоряжение КАК Распоряжение,
		|	Т.Номенклатура КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад КАК Склад,
		|	МИНИМУМ(Т.ДатаПотребности) КАК Период
		|ПОМЕСТИТЬ ВТДатыПотребностиМатериалов
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок КАК Т
		|ГДЕ
		|	Т.Распоряжение В (&МассивЗаказов)
		|	И Т.КодСтрокиРаспоряжения <> 0
		|	И НЕ Т.Обособленно
		|	И Т.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению))
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Распоряжение,
		|	Т.Номенклатура,
		|	Т.Характеристика,
		|	Т.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	ВТДатыПотребностиМатериалов КАК Таблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|//////////////////////////////////////////////
		|" + РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ")
		+ "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикЭтаповПроизводства.Распоряжение КАК Заказ
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства КАК ГрафикЭтаповПроизводства
		|ГДЕ
		|	ГрафикЭтаповПроизводства.Распоряжение В (&МассивЗаказов)
		|	И (ГрафикЭтаповПроизводства.НачалоЭтапа < ВЫБОР ГрафикЭтаповПроизводства.Подразделение.ИнтервалПланирования
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
		|					ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ЧАС)
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
		|					ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
		|					ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, НЕДЕЛЯ)
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
		|					ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, МЕСЯЦ)
		|			КОНЕЦ
		|			ИЛИ ГрафикЭтаповПроизводства.ТребуетсяПерепланировать)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказНаПроизводство.Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ГДЕ
		|	ЗаказНаПроизводство.Ссылка В (&МассивЗаказов)
		|	И ЗаказНаПроизводство.СтатусГрафикаПроизводства = ЗНАЧЕНИЕ(Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перегрузка.Заказ
		|ИЗ
		|	ВТПерегрузка КАК Перегрузка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДоступностьВидовРабочихЦентров КАК Занятость
		|		ПО Перегрузка.ВидРабочегоЦентра = Занятость.ВидРабочегоЦентра
		|			И Перегрузка.ДатаИнтервала = Занятость.ДатаИнтервала
		|			И (Занятость.Активность)
		|			И (НЕ Занятость.ЭтоДвижениеВводаДоступности)
		|			И (Занятость.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
		|					И (ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания < Перегрузка.ПриоритетПорядок
		|						ИЛИ ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания = Перегрузка.ПриоритетПорядок
		|							И ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЗаказНаПроизводство).Подразделение.РеквизитДопУпорядочивания < Перегрузка.ПодразделениеПорядок
		|						ИЛИ ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания = Перегрузка.ПриоритетПорядок
		|							И ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЗаказНаПроизводство).Подразделение.РеквизитДопУпорядочивания = Перегрузка.ПодразделениеПорядок
		|							И ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЗаказНаПроизводство).Очередь <= Перегрузка.Очередь)
		|				ИЛИ Занятость.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
		|					И (ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЭтапПроизводства2_2).Распоряжение.Приоритет.РеквизитДопУпорядочивания < Перегрузка.ПриоритетПорядок
		|						ИЛИ ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЭтапПроизводства2_2).Распоряжение.Приоритет.РеквизитДопУпорядочивания = Перегрузка.ПриоритетПорядок
		|							И ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЭтапПроизводства2_2).Распоряжение.Подразделение.РеквизитДопУпорядочивания < Перегрузка.ПодразделениеПорядок)
		|				ИЛИ Занятость.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
		|					И (ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания < Перегрузка.ПриоритетПорядок
		|						ИЛИ ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания = Перегрузка.ПриоритетПорядок
		|							И ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Подразделение.РеквизитДопУпорядочивания < Перегрузка.ПодразделениеПорядок
		|						ИЛИ ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания = Перегрузка.ПриоритетПорядок
		|							И ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Подразделение.РеквизитДопУпорядочивания = Перегрузка.ПодразделениеПорядок
		|							И ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Очередь <= Перегрузка.Очередь))
		|
		|СГРУППИРОВАТЬ ПО
		|	Перегрузка.Заказ,
		|	Перегрузка.ВидРабочегоЦентра,
		|	Перегрузка.ДатаИнтервала
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(Перегрузка.Доступность) < СУММА(Занятость.Занято)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Распоряжение
		|ИЗ
		|	ВТДатыПотребностиМатериалов КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК ТаблицаСпособыОбеспечения
		|		ПО (ТаблицаСпособыОбеспечения.Номенклатура = Т.Номенклатура)
		|			И (ТаблицаСпособыОбеспечения.Характеристика = Т.Характеристика)
		|			И (ТаблицаСпособыОбеспечения.Склад = Т.Склад)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
		|		ПО (СпрСпособ.Ссылка = ТаблицаСпособыОбеспечения.СпособОбеспеченияПотребностей)
		|ГДЕ
		|	Т.Период < ДОБАВИТЬКДАТЕ(&ТекущаяДатаСеанса, ДЕНЬ, ЕСТЬNULL(СпрСпособ.СрокИсполненияЗаказа, 0))
		|	И ЕСТЬNULL(СпрСпособ.СрокИсполненияЗаказа, 0) > 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыМатериалов.Распоряжение
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок.Обороты(
		|			,
		|			,
		|			,
		|			Распоряжение В (&МассивЗаказов)
		|				И КодСтрокиРаспоряжения <> 0
		|				И НЕ Обособленно
		|				И ВариантОбеспечения В(
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению))) КАК ЗаказыМатериалов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ЗаказМатериалыИУслуги
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
		|			ПО ЗаказМатериалыИУслуги.Ссылка = ЗаказЭтапыГрафик.Ссылка
		|				И ЗаказМатериалыИУслуги.КлючСвязиЭтапы = ЗаказЭтапыГрафик.КлючСвязиЭтапы
		|		ПО ЗаказыМатериалов.Распоряжение = ЗаказМатериалыИУслуги.Ссылка
		|			И ЗаказыМатериалов.КодСтрокиРаспоряжения = ЗаказМатериалыИУслуги.КодСтроки
		|ГДЕ
		|	ЗаказыМатериалов.КоличествоОборот > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыМатериалов.Распоряжение,
		|	ЗаказыМатериалов.КодСтрокиРаспоряжения
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ЗаказыМатериалов.ДатаПотребности) > ЕСТЬNULL(МИНИМУМ(ЗаказЭтапыГрафик.НачалоЭтапа), ДАТАВРЕМЯ(1, 1, 1))");
		
	Запрос.УстановитьПараметр("МассивЗаказов",     МассивЗаказов);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
		
	Результат = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Результат.Добавить(Выборка.Заказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает очередь заказов для планирования по указанный заказ
//
// Параметры:
//  Заказ				 - ДокументСсылка.ЗаказНаПроизводство	 - ссылка на заказ, по который нужно планировать
//  ПоВсемДиспетчерам	 - Булево								 - признак, планировать по всем диспетчерам.
//
// Возвращаемое значение:
//   - Массив - очередь планирования.
//
Функция ОчередьПланирования(Заказ, ПоВсемДиспетчерам = Истина) Экспорт
	
	Если ПоВсемДиспетчерам Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаказНаПроизводство.Ссылка КАК Заказ
			|ИЗ
			|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство КАК ТекущийЗаказНаПроизводство
			|		ПО (ТекущийЗаказНаПроизводство.Ссылка = &Заказ)
			|			И (ЗаказНаПроизводство.Проведен)
			|			И (ЗаказНаПроизводство.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству))
			|			И (ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
			|				ИЛИ ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
			|					И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания
			|				ИЛИ ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
			|					И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания
			|					И ЗаказНаПроизводство.Очередь <= ТекущийЗаказНаПроизводство.Очередь)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания,
			|	ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания,
			|	ЗаказНаПроизводство.Очередь";
		
	Иначе
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаказНаПроизводство.Ссылка КАК Заказ
			|ИЗ
			|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство КАК ТекущийЗаказНаПроизводство
			|		ПО (ТекущийЗаказНаПроизводство.Ссылка = &Заказ)
			|			И (ЗаказНаПроизводство.Проведен)
			|			И (ЗаказНаПроизводство.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству))
			|			И (ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение)
			|			И (ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
			|				ИЛИ ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
			|					И ЗаказНаПроизводство.Очередь <= ТекущийЗаказНаПроизводство.Очередь)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания,
			|	ЗаказНаПроизводство.Очередь";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ");
	
КонецФункции

// Определяет наличие заказов с недействующими спецификациями
//
// Параметры:
// 	Подразделение	- СправочникСсылка.СтруктураПредприятия - Подразделение заказа
// 	Ответственный	- СправочникСсылка.Пользователи - Ответственный заказа.
//
// Возвращаемое значение:
// 	Булево - Истина, если есть заказы с недействующими спецификациями.
//
Функция ЕстьЗаказыСНедействующимиСпецификациями(Подразделение, Ответственный) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТаблицаПродукция.НомерСтроки КАК ЗаказыНаПроизводствоСНедействующимиСпецификациями
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|ГДЕ
	|	(ТаблицаПродукция.Спецификация.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			ИЛИ ТаблицаПродукция.Спецификация.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности < ТаблицаПродукция.Спецификация.НачалоДействия
	|			ИЛИ ТаблицаПродукция.Спецификация.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности > ТаблицаПродукция.Спецификация.КонецДействия
	|			ИЛИ ТаблицаПродукция.Спецификация.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее < ТаблицаПродукция.Спецификация.НачалоДействия
	|			ИЛИ ТаблицаПродукция.Спецификация.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее >= ТаблицаПродукция.Спецификация.КонецДействия)
	|	И ТаблицаПродукция.Ссылка.Проведен
	|	И ТаблицаПродукция.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|	И (ТаблицаПродукция.Ссылка.Подразделение = &Подразделение
	|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	И (ТаблицаПродукция.Ссылка.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПродукция.НомерСтроки
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.КлючСвязи = ТаблицаМатериалыИУслуги.КлючСвязиПродукция)
	|			И (ТаблицаПродукция.Ссылка = ТаблицаМатериалыИУслуги.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК ТРесурсныеСпецификации
	|		ПО ТаблицаМатериалыИУслуги.ИсточникПолученияПолуфабриката = ТРесурсныеСпецификации.Ссылка
	|ГДЕ
	|	(ТРесурсныеСпецификации.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			ИЛИ ТРесурсныеСпецификации.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности < ТРесурсныеСпецификации.НачалоДействия
	|			ИЛИ ТРесурсныеСпецификации.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности > ТРесурсныеСпецификации.КонецДействия
	|			ИЛИ ТРесурсныеСпецификации.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее < ТРесурсныеСпецификации.НачалоДействия
	|			ИЛИ ТРесурсныеСпецификации.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее >= ТРесурсныеСпецификации.КонецДействия
	|				И ТаблицаМатериалыИУслуги.Ссылка.Проведен)
	|	И ТаблицаМатериалыИУслуги.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|	И (ТаблицаМатериалыИУслуги.Ссылка.Подразделение = &Подразделение
	|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	И (ТаблицаМатериалыИУслуги.Ссылка.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Определяет наличие строк с недействующими спецификациями в заказе
//
// Параметры:
// 	Продукция	- ДанныеФормыКоллекция - Продукция заказа
// 	МатериалыИУслуги	- ДанныеФормыКоллекция - Материалы заказа.
//
// Возвращаемое значение:
// 	Булево - Истина, если в заказе есть недействующие спецификации.
//
Функция ВЗаказеЕстьНедействующиеСпецификации(Продукция, МатериалыИУслуги) Экспорт
	
	МассивСпецификаций = Новый Массив;
	
	Для каждого ДанныеСтроки Из Продукция Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.Спецификация) Тогда
			МассивСпецификаций.Добавить(ДанныеСтроки.Спецификация);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ДанныеСтроки Из МатериалыИУслуги Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ИсточникПолученияПолуфабриката) 
			И ТипЗнч(ДанныеСтроки.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			МассивСпецификаций.Добавить(ДанныеСтроки.ИсточникПолученияПолуфабриката);
		КонецЕсли; 
	КонецЦикла; 
	
	МассивСпецификаций = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивСпецификаций);
	
	РеквизитыСпецификаций = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСпецификаций, "Статус,НачалоДействия,КонецДействия");
	
	// Проверим статус спецификаций
	Для каждого КлючИЗначение Из РеквизитыСпецификаций Цикл
		ЗначенияРеквизитов = КлючИЗначение.Значение;
		Если ЗначенияРеквизитов.Статус <> Перечисления.СтатусыСпецификаций.Действует Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим период действия спецификаций
	Для каждого ДанныеСтроки Из Продукция Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.Спецификация) Тогда
			ЗначенияРеквизитов = РеквизитыСпецификаций.Получить(ДанныеСтроки.Спецификация);
			Если НЕ СпецификацияДействует(ЗначенияРеквизитов, ДанныеСтроки) Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
	Для каждого ДанныеСтроки Из МатериалыИУслуги Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ИсточникПолученияПолуфабриката) 
			И ТипЗнч(ДанныеСтроки.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			ЗначенияРеквизитов = РеквизитыСпецификаций.Получить(ДанныеСтроки.ИсточникПолученияПолуфабриката);
			СтруктураПоиска = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязиПродукция);
			СписокСтрок = Продукция.НайтиСтроки(СтруктураПоиска);
			Если НЕ СпецификацияДействует(ЗначенияРеквизитов, СписокСтрок[0]) Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь
	
КонецФункции

// Возвращает текст запроса для получения табличных частей заказа на производство.
//
// Возвращаемое значение:
// 	Строка - Текст запроса
//
Функция ТекстЗапросаПоТабличнымЧастямЗаказа() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВыходныеИзделия.НомерСтроки КАК НомерСтроки,
	|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВыходныеИзделия.Характеристика КАК Характеристика,
	|	СУММА(ВыходныеИзделия.Количество) КАК Количество,
	|	СУММА(ВыходныеИзделия.ДоляСтоимости) КАК ДоляСтоимости,
	|	ВыходныеИзделия.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ВыходныеИзделия.Ссылка.Организация КАК Организация,
	|	ВыходныеИзделия.Ссылка КАК ЗаказНаПроизводство,
	|	Продукция.КодСтроки КАК КодСтрокиЗаказаНаПроизводство,
	|	Продукция.Спецификация КАК Спецификация,
	|	Продукция.ДатаПотребности КАК ДатаПотребности,
	|	Продукция.НачатьНеРанее КАК НачатьНеРанее
	|ПОМЕСТИТЬ ВТВыходныеИзделия
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ВыходныеИзделия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
	|		ПО ВыходныеИзделия.Ссылка = Продукция.Ссылка
	|			И ВыходныеИзделия.КлючСвязиПродукция = Продукция.КлючСвязи
	|ГДЕ
	|	ВыходныеИзделия.Ссылка = &ЗаказНаПроизводство
	|	И НЕ ВыходныеИзделия.ПроизводитсяВПроцессе
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыходныеИзделия.Номенклатура,
	|	ВыходныеИзделия.КлючСвязиПродукция,
	|	ВыходныеИзделия.Характеристика,
	|	ВыходныеИзделия.НомерСтроки,
	|	ВыходныеИзделия.Ссылка.Организация,
	|	ВыходныеИзделия.Ссылка,
	|	Продукция.КодСтроки,
	|	Продукция.Спецификация,
	|	Продукция.ДатаПотребности,
	|	Продукция.НачатьНеРанее
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиПродукция,
	|	Спецификация,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВыходныеИзделия.ДоляСтоимости) КАК ДоляСтоимости,
	|	ВыходныеИзделия.КлючСвязиПродукция КАК КлючСвязиПродукция
	|ПОМЕСТИТЬ ВТИтогДоляСтоимости
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка = &ЗаказНаПроизводство
	|	И НЕ ВыходныеИзделия.ПроизводитсяВПроцессе
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыходныеИзделия.КлючСвязиПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыходныеИзделия.НомерСтроки КАК НомерСтроки,
	|	ВТВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВТВыходныеИзделия.Характеристика КАК Характеристика,
	|	ВТВыходныеИзделия.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ВТИтогДоляСтоимости.ДоляСтоимости = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВТВыходныеИзделия.ДоляСтоимости / ВТИтогДоляСтоимости.ДоляСтоимости
	|	КОНЕЦ КАК ДоляСтоимости,
	|	ВТВыходныеИзделия.Организация КАК Организация,
	|	ВТВыходныеИзделия.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВТВыходныеИзделия.КодСтрокиЗаказаНаПроизводство КАК КодСтрокиЗаказаНаПроизводство,
	|	ВТВыходныеИзделия.Спецификация КАК Спецификация,
	|	ВТВыходныеИзделия.ДатаПотребности КАК ДатаПотребности,
	|	ВТВыходныеИзделия.НачатьНеРанее КАК НачатьНеРанее,
	|	ВТВыходныеИзделия.Количество КАК КоличествоПоЗаказу,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫРАЗИТЬ(РесурсныеСпецификацииВыходныеИзделия.КоличествоУпаковок
	|			* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК ЧИСЛО(15,3)), 0)) КАК КоличествоПоСпецификации
	|ПОМЕСТИТЬ СпецификацияВыходныеИзделия
	|ИЗ
	|	ВТВыходныеИзделия КАК ВТВыходныеИзделия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИтогДоляСтоимости КАК ВТИтогДоляСтоимости
	|		ПО ВТВыходныеИзделия.КлючСвязиПродукция = ВТИтогДоляСтоимости.КлючСвязиПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|		ПО ВТВыходныеИзделия.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка
	|			И ВТВыходныеИзделия.Номенклатура = РесурсныеСпецификацииВыходныеИзделия.Номенклатура
	|			И (ВТВыходныеИзделия.Характеристика = РесурсныеСпецификацииВыходныеИзделия.Характеристика
	|				ИЛИ РесурсныеСпецификацииВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВыходныеИзделия.ДатаПотребности,
	|	ВТВыходныеИзделия.Характеристика,
	|	ВТВыходныеИзделия.НачатьНеРанее,
	|	ВТВыходныеИзделия.Организация,
	|	ВТВыходныеИзделия.Спецификация,
	|	ВТВыходныеИзделия.ЗаказНаПроизводство,
	|	ВТВыходныеИзделия.Номенклатура,
	|	ВТВыходныеИзделия.НомерСтроки,
	|	ВТВыходныеИзделия.Номенклатура.ЕдиницаИзмерения,
	|	ВТВыходныеИзделия.Количество,
	|	ВЫБОР
	|		КОГДА ВТИтогДоляСтоимости.ДоляСтоимости = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВТВыходныеИзделия.ДоляСтоимости / ВТИтогДоляСтоимости.ДоляСтоимости
	|	КОНЕЦ,
	|	ВТВыходныеИзделия.КодСтрокиЗаказаНаПроизводство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	МатериалыИУслуги.Характеристика КАК Характеристика,
	|	МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МатериалыИУслуги.ПрименениеМатериала КАК Описание,
	|	СУММА(МатериалыИУслуги.Количество) КАК Количество,
	|	МатериалыИУслуги.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	Продукция.Ссылка КАК ЗаказНаПроизводство,
	|	Продукция.КодСтроки КАК КодСтрокиЗаказаНаПроизводство,
	|	Продукция.Спецификация КАК Спецификация,
	|	Продукция.НачатьНеРанее КАК НачатьНеРанее
	|ПОМЕСТИТЬ ВТСпецификацияМатериалы
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК МатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
	|		ПО МатериалыИУслуги.КлючСвязиПродукция = Продукция.КлючСвязи
	|ГДЕ
	|	МатериалыИУслуги.Ссылка = &ЗаказНаПроизводство
	|	И Продукция.Ссылка = &ЗаказНаПроизводство
	|	И НЕ МатериалыИУслуги.ПроизводитсяВПроцессе
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыИУслуги.СтатьяКалькуляции,
	|	МатериалыИУслуги.Характеристика,
	|	МатериалыИУслуги.Номенклатура,
	|	МатериалыИУслуги.ПрименениеМатериала,
	|	Продукция.КодСтроки,
	|	Продукция.Ссылка,
	|	Продукция.Спецификация,
	|	Продукция.НачатьНеРанее,
	|	МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводствоВозвратныеОтходы.Номенклатура КАК Номенклатура,
	|	ЗаказНаПроизводствоВозвратныеОтходы.Характеристика КАК Характеристика,
	|	ЗаказНаПроизводствоВозвратныеОтходы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказНаПроизводствоВозвратныеОтходы.ОписаниеИзделия КАК Описание,
	|	ЗаказНаПроизводствоВозвратныеОтходы.Количество КАК Количество,
	|	ЗаказНаПроизводствоВозвратныеОтходы.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ЗаказНаПроизводствоПродукция.Ссылка КАК ЗаказНаПроизводство,
	|	ЗаказНаПроизводствоПродукция.КодСтроки КАК КодСтрокиЗаказаНаПроизводство,
	|	ЗаказНаПроизводствоПродукция.Спецификация КАК Спецификация,
	|	ЗаказНаПроизводствоПродукция.НачатьНеРанее КАК НачатьНеРанее
	|ПОМЕСТИТЬ ВТСпецификацияОтходы
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ЗаказНаПроизводствоВозвратныеОтходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО ЗаказНаПроизводствоВозвратныеОтходы.КлючСвязиПродукция = ЗаказНаПроизводствоПродукция.КлючСвязи
	|ГДЕ
	|	ЗаказНаПроизводствоВозвратныеОтходы.Ссылка = &ЗаказНаПроизводство
	|	И НЕ ЗаказНаПроизводствоВозвратныеОтходы.ПроизводитсяВПроцессе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Трудозатраты.ВидРабот КАК ВидРабот,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	Трудозатраты.ВидРабот.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Трудозатраты.НазначениеРабот КАК Описание,
	|	СУММА(Трудозатраты.Количество) КАК Количество,
	|	Трудозатраты.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	Продукция.Ссылка КАК ЗаказНаПроизводство,
	|	Продукция.КодСтроки КАК КодСтрокиЗаказаНаПроизводство,
	|	Продукция.Спецификация КАК Спецификация,
	|	Продукция.НачатьНеРанее КАК НачатьНеРанее
	|ПОМЕСТИТЬ ВТСпецификацияТрудозатраты
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Трудозатраты КАК Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
	|		ПО Трудозатраты.КлючСвязиПродукция = Продукция.КлючСвязи
	|ГДЕ
	|	Трудозатраты.Ссылка = &ЗаказНаПроизводство
	|	И Продукция.Ссылка = &ЗаказНаПроизводство
	|
	|СГРУППИРОВАТЬ ПО
	|	Трудозатраты.СтатьяКалькуляции,
	|	Продукция.КодСтроки,
	|	Трудозатраты.ВидРабот,
	|	Продукция.Ссылка,
	|	Продукция.Спецификация,
	|	Продукция.НачатьНеРанее,
	|	Трудозатраты.ВидРабот.ЕдиницаИзмерения,
	|	Трудозатраты.НазначениеРабот";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"РесурсныеСпецификацииВыходныеИзделия.Упаковка",
			"РесурсныеСпецификацииВыходныеИзделия.Номенклатура"));
	
	ТекстЗапроса = ТекстЗапроса +
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет наличие права доступа "Добавления" для текущего пользователя
//
// Возвращаемое значение:
//   - Булево - Истина, если доступно право добавления.
//
Функция ПравоДоступаДобавление() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПроизводство);
	
КонецФункции

// Формирует структуру для создания внутреннего потребления по одному или нескольким заказам.
//
// Параметры:
//  ДанныеДокументов	 - ТаблицаЗначений	 - содержит данные необходимые для формирования внутреннего потребления
//  ТекстПредупреждения	 - Строка			 - строка, в которую будет помещено сообщение поясняющее почему нельзя оформить документ.
//
// Возвращаемое значение:
//  Структура - структура, в которую будут помещены реквизиты шапки из массива заказов.
//
Функция ПараметрыОформленияПередачиМатериаловВПроизводство(ДанныеДокументов, ТекстПредупреждения) Экспорт
	
	Отказ = Ложь;
	
	Организация        = Неопределено;
	Склад              = Неопределено;
	Подразделение      = Неопределено;
	
	ПроверитьОрганизацию        = Истина;
	ПроверитьСклад              = Истина;
	ПроверитьПодразделение      = Истина;
	
	ШаблонСообщения = НСтр("ru = '- у выбранных заказов распоряжений отличается поле %ПредставлениеПоля%.';
							|en = '- field %ПредставлениеПоля% differs for the selected reference orders.'");
	
	Для каждого ДанныеСтроки Из ДанныеДокументов Цикл
		
		Если Организация = Неопределено Тогда
			Организация = ДанныеСтроки.Организация;
		ИначеЕсли Организация <> ДанныеСтроки.Организация И ПроверитьОрганизацию Тогда
			ТекстСообщения = ТекстСообщения
								+ ?(ТекстСообщения = "", "", Символы.ПС)
								+ СтрЗаменить(ШаблонСообщения, "%ПредставлениеПоля%", НСтр("ru = '""Организация""';
																							|en = '""Company""'"));
			ПроверитьОрганизацию = Ложь;
			Отказ = Истина;
		КонецЕсли; 
		
		Если Склад = Неопределено Тогда
			Склад = ДанныеСтроки.Склад;
		ИначеЕсли Склад <> ДанныеСтроки.Склад И ПроверитьСклад Тогда
			ТекстСообщения = ТекстСообщения
								+ ?(ТекстСообщения = "", "", Символы.ПС)
								+ СтрЗаменить(ШаблонСообщения, "%ПредставлениеПоля%", НСтр("ru = '""Склад""';
																							|en = '""Warehouse""'"));
			ПроверитьСклад = Ложь;
			Отказ = Истина;
		КонецЕсли; 
		
		Если Подразделение = Неопределено Тогда
			Подразделение = ДанныеСтроки.Подразделение;
		ИначеЕсли Подразделение <> ДанныеСтроки.Подразделение И ПроверитьПодразделение Тогда
			ТекстСообщения = ТекстСообщения
								+ ?(ТекстСообщения = "", "", Символы.ПС)
								+ СтрЗаменить(ШаблонСообщения, "%ПредставлениеПоля%", НСтр("ru = '""Получатель""';
																							|en = '""Recipient""'"));
			ПроверитьПодразделение = Ложь;
			Отказ = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если Отказ Тогда
		ТекстПредупреждения = НСтр("ru = 'Невозможно оформить передачу в производство на основании выбранных распоряжений.';
									|en = 'Cannot register transfer to production based on the selected references.'")
								+ Символы.ПС
								+ ТекстСообщения;
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОформления = Новый Структура;
	ПараметрыОформления.Вставить("Организация",           Организация);
	ПараметрыОформления.Вставить("Подразделение",         Подразделение);
	ПараметрыОформления.Вставить("Склад",                 Склад);
	ПараметрыОформления.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПередачаВПроизводство);
	
	Возврат ПараметрыОформления;
	
КонецФункции

// Возвращает признак использования заказов на производство.
//
// Возвращаемое значение:
//		Булево - Истина, если заказы на производство используются.
//
Функция ИспользуютсяЗаказыНаПроизводство() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК Т
		|ГДЕ
		|	НЕ Т.ПометкаУдаления");
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Дата";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//   - Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	ПараметрыУказанияСерий.ИмяТЧТовары      = "МатериалыИУслуги";
	ПараметрыУказанияСерий.ИмяТЧСерии       = "МатериалыИУслуги";
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ПроизводитсяВПроцессе");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ЗаказатьНаСклад");
	
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура());
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура());
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПередачаВПроизводствоОтгрузка);
	
	ПараметрыУказанияСерий.ИмяПоляСклад = Неопределено;
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Подразделение");
	
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	ПараметрыУказанияСерий.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Подразделение,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийОтправитель,
	|	Товары.СтатусУказанияСерийПолучатель,
	|	Товары.НомерСтроки,
	|	Товары.ВариантОбеспечения,
	|	Товары.ЗаказатьНаСклад,
	|	Товары.ПроизводитсяВПроцессе
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА НЕ Товары.ЗаказатьНаСклад
	|				ИЛИ Товары.ПроизводитсяВПроцессе
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 14
	|							КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|								ТОГДА 15
	|							ИНАЧЕ 13
	|						КОНЕЦ
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 10
	|							КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|								ТОГДА 11
	|							ИНАЧЕ 9
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыОтправитель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА НЕ Товары.ЗаказатьНаСклад
	|				ИЛИ Товары.ПроизводитсяВПроцессе
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА 14
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|			ТОГДА 10
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыПолучатель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Подразделение)
	|			И (ПолитикиУчетаСерий.Ссылка = СпрНоменклатура.ВидНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерийОтправитель,
	|	ВЫБОР
	|		КОГДА СтатусыОтправитель.СтатусУказанияСерий В (10, 14)
	|			ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерийПолучатель,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОтправитель КАК СтатусыОтправитель
	|		ПО (СтатусыОтправитель.НомерСтроки = Товары.НомерСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПолучатель КАК СтатусыПолучатель
	|		ПО (СтатусыПолучатель.НомерСтроки = Товары.НомерСтроки)
	|ГДЕ
	|	(СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийОтправитель
	|			ИЛИ ВЫБОР
	|				КОГДА СтатусыОтправитель.СтатусУказанияСерий В (10, 14)
	|					ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|				ИНАЧЕ 0
	|			КОНЕЦ <> Товары.СтатусУказанияСерийПолучатель
	|			ИЛИ СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовКлиентов[НовыйСтатус];
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В (&МассивДокументов)
		|";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
//  Возвращаемое значение:
//  См. Справочники.Назначения.МакетФормыВыбораНазначений
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Собственное);
	
	// Потребности в продукции на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Продукция.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Продукция.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Продукция.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Продукция.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Продукция.Склад";
	
	// Потребности в производимых работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "Объект.Продукция.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Продукция.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Продукция.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Продукция.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "Объект.Продукция.Подразделение";
	
	Возврат МакетФормы;
	
КонецФункции

// Возвращает параметры выбора спецификаций для изделий, указанных в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров выбора спецификаций.
//
// Возвращаемое значение:
//   Структура - Структура, переопределяющая умолчания, заданные в функции УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций().
//
Функция ПараметрыВыбораСпецификаций(Объект) Экспорт
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификаций.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	ПараметрыВыбораСпецификаций.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыВыбораСпецификаций.ДоступныСпецификацииСПроизводствомНаСтороне =
		НЕ Объект.ПроизводствоПоЗаказу
		//++ Устарело_Переработка24
		ИЛИ НЕ ТипЗнч(Объект.Заказ) = Тип("ДокументСсылка.ЗаказДавальца")
		//-- Устарело_Переработка24
		ИЛИ Ложь;
	
	ПараметрыВыбораСпецификаций.РеквизитыСпецификации = "ОптимальноеКоличествоПередачиМеждуЭтапами";
	
	СвязиПараметровВыбора = Новый Структура(УправлениеДаннымиОбИзделияхКлиентСервер.ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
	
	СвязиПараметровВыбора.Номенклатура           = "Объект.Продукция.Номенклатура";
	СвязиПараметровВыбора.Характеристика         = "Объект.Продукция.Характеристика";
	СвязиПараметровВыбора.НачалоПроизводства     = "Объект.Продукция.НачатьНеРанее";
	СвязиПараметровВыбора.ПодразделениеДиспетчер = "Объект.Подразделение";
	
	ПараметрыВыбораСпецификаций.СвязиПараметровВыбора.Вставить("Объект.Продукция.Спецификация", СвязиПараметровВыбора);
	
	Возврат ПараметрыВыбораСпецификаций;
	
КонецФункции

// Имена реквизитов, от значений которых зависят параметры выбора спецификаций
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций() Экспорт
	
	ИменаРеквизитов = "ПроизводствоПоЗаказу,Заказ";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Инициализирует параметры заполнения вида деятельности НДС
//
// Параметры:
//  Объект	 - ДокументОбъект.ЗаказНаПроизводство, ДанныеФормыСтруктура	 - документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  См. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС
//
Функция ПараметрыЗаполненияВидаДеятельностиНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ПараметрыЗаполнения.Организация             = Объект.Организация;
	ПараметрыЗаполнения.Дата                    = Объект.Дата;
	ПараметрыЗаполнения.Склад                   = Неопределено;
	ПараметрыЗаполнения.Договор                 = Неопределено;
	ПараметрыЗаполнения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	
	ПараметрыЗаполнения.ВыпускПродукцииИРабот = Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Формирует структуру параметров документа для встраивания документа в механимы обеспечения.
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗаказНаПроизводство - документ
// Возвращаемое значение:
//  см. ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания
//
Функция ДоступныеОстаткиПараметрыВстраивания(ДокументОбъект = Неопределено) Экспорт
	
	ПараметрыВстраивания = ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания();
	ПараметрыВстраивания.ОчищаемыеРеквизиты = "КодСтроки";
	
	// Временная таблица данных документа.
	ПараметрыВстраивания.ИмяОбъекта = "Форма";
	ПараметрыВстраивания.ИмяТаблицы = "Форма.МатериалыИУслугиТаблица";
	
	ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента =
		"ВЫБРАТЬ
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Этап.Подразделение КАК Подразделение,
		|	ТабЧасть.Склад КАК Склад,
		|	ТабЧасть.Назначение КАК Назначение,
		|	ТабЧасть.Ссылка КАК ЗаказНаОтгрузку,
		|	ТабЧасть.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ТабЧасть.Обособленно КАК Обособленно,
		|	ТабЧасть.Количество КАК Количество,
		|	ТабЧасть.Отменено КАК Отменено,
		|	ИСТИНА КАК ГотовКОбеспечению,
		|	ИСТИНА КАК ГотовКОтгрузке,
		|	НЕОПРЕДЕЛЕНО КАК ЖелаемаяДатаОтгрузки,
		|	НЕОПРЕДЕЛЕНО КАК ДатаДокумента,
		|	НЕОПРЕДЕЛЕНО КАК Приоритет
		|	ПОМЕСТИТЬ ВременнаяТаблицаДанныхДокумента
		|ИЗ
		|	Форма.МатериалыИУслугиТаблица КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.ЗаказатьНаСклад";
	
	// Шаблон сериализации данных формы.
	МатериалыИУслуги = Новый Структура();
	МатериалыИУслуги.Вставить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	МатериалыИУслуги.Вставить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	МатериалыИУслуги.Вставить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	МатериалыИУслуги.Вставить("Этап",               Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	МатериалыИУслуги.Вставить("Назначение",         Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	МатериалыИУслуги.Вставить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	МатериалыИУслуги.Вставить("Обособленно",        Новый ОписаниеТипов("Булево"));
	МатериалыИУслуги.Вставить("Количество",         Новый ОписаниеТипов("Число"));
	МатериалыИУслуги.Вставить("Отменено",           Новый ОписаниеТипов("Булево"));
	МатериалыИУслуги.Вставить("ЗаказатьНаСклад",    Новый ОписаниеТипов("Булево"));
	МатериалыИУслуги.Вставить("Ссылка",             Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	
	ПараметрыВстраивания.ШаблонСериализацииДанныхФормы.Вставить("МатериалыИУслугиТаблица", МатериалыИУслуги);
	
	Возврат ПараметрыВстраивания;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПроизводство) 
			ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЭтапыПроизводства)  Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаСписка";
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

#Область Обеспечение

Функция ДанныеОбъектаДляОткрытияРедактированияСпецификации(Объект, КлючСвязи, УникальныйИдентификатор) Экспорт
	
	ДоступныеОстаткиПараметрыВстраивания = ДоступныеОстаткиПараметрыВстраивания();
	МатериалыИУслугиТаблица = Объект.МатериалыИУслуги.Выгрузить();
	МатериалыИУслугиТаблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	МатериалыИУслугиКоличествоСтрок = МатериалыИУслугиТаблица.Количество();
	Для Счетчик = 1 По МатериалыИУслугиКоличествоСтрок Цикл
		
		Индекс = МатериалыИУслугиКоличествоСтрок - Счетчик;
		СтрокаТаблицы = МатериалыИУслугиТаблица[Индекс];
		Если СтрокаТаблицы.КлючСвязиПродукция = КлючСвязи Тогда
			МатериалыИУслугиТаблица.Удалить(СтрокаТаблицы);
		Иначе
			СтрокаТаблицы.Ссылка = Объект.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеОбъекта = Новый Структура();
	ДанныеОбъекта.Вставить("МатериалыИУслугиТаблица", МатериалыИУслугиТаблица);
	ДанныеОбъекта.Вставить("ДоступныеОстаткиПараметрыВстраивания", Неопределено);
	ДанныеОбъекта.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ОбеспечениеВДокументахСервер.ЗаполнитьПараметрыВстраивания(ДанныеОбъекта, ДоступныеОстаткиПараметрыВстраивания);
	Возврат ДанныеОбъекта;
	
КонецФункции	

#КонецОбласти

#Область НаправленияДеятельности

// см. НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности
Функция ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности(Форма) Экспорт
	
	ПорядокОбработкиДокумента = НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности();
	ПорядокОбработкиДокумента.ЗаполнятьНазначениеВШапке = Истина;
	ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляОчисткиНекорректныхНазначений = "Продукция";
	ТаблицаУсловий = НаправленияДеятельностиСервер.УсловияОбработкиНазначенийВСтроках("ТипНоменклатуры");
	ПорядокОбработкиДокумента.УсловияОбработкиСтрок.Вставить("Продукция", ТаблицаУсловий);
	
	Возврат ПорядокОбработкиДокумента;
	
КонецФункции

#КонецОбласти

#Область Назначения

// Возвращает шаблон для генерации назначения товаров в документе.
//
// Параметры:
// 		Объект - ДокументОбъект.ЗаказНаПроизводство, ДанныеФормыСтруктура - заказ на производство, по которому необходимо получить шаблон назначения.
//
// Возвращаемое значение:
// 		См. Справочники.Назначения.ШаблонНового
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	ВариантОбособления = Константы.ВариантОбособленияМатериаловВПроизводстве.Получить();
	
	Если ВариантОбособления <> Перечисления.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности
		Или Не ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности) Тогда
		
		ШаблонНазначения.Заказ = Объект.Ссылка;
		
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказНаПроизводство.Дата                      КАК Период,
	|	ЗаказНаПроизводство.Организация               КАК Организация,
	|	ЗаказНаПроизводство.Статус                    КАК Статус,
	|	ЗаказНаПроизводство.СтатусГрафикаПроизводства КАК СтатусГрафикаПроизводства,
	|	ЗаказНаПроизводство.Подразделение             КАК Подразделение,
	|	ЗаказНаПроизводство.Назначение                КАК Назначение,
	|	ЗаказНаПроизводство.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	ЗаказНаПроизводство.Приоритет                 КАК Приоритет,
	|	ЗаказНаПроизводство.Ответственный             КАК Ответственный,
	|	ЗаказНаПроизводство.Комментарий               КАК Комментарий,
	|	ЗаказНаПроизводство.Номер                     КАК Номер,
	|	ЗаказНаПроизводство.Проведен                  КАК Проведен,
	|	ЗаказНаПроизводство.ПометкаУдаления           КАК ПометкаУдаления,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство) КАК ХозяйственнаяОперация,
	|	ЕСТЬNULL(ЗаказНаПроизводство.Назначение.ДвиженияПоСкладскимРегистрам,Ложь) КАК ДвиженияПоСкладскимРегистрам
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Статус", Реквизиты.Статус);
	Запрос.УстановитьПараметр("Номер", Реквизиты.Номер);
	Запрос.УстановитьПараметр("СтатусГрафикаПроизводства", Реквизиты.СтатусГрафикаПроизводства);
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Назначение", Реквизиты.Назначение);
	Запрос.УстановитьПараметр("Приоритет", Реквизиты.Приоритет);
	Запрос.УстановитьПараметр("ДвиженияПоСкладскимРегистрам", Реквизиты.ДвиженияПоСкладскимРегистрам);
	Запрос.УстановитьПараметр("ПустойКлюч", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Реквизиты.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("Ответственный", Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("Комментарий", Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("Проведен", Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ПометкаУдаления", Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
	Запрос.УстановитьПараметр("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	
КонецПроцедуры

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 
	
КонецФункции

Функция ТекстЗапросаТаблицаЭтапыПроизводства(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЭтапыПроизводства";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаЭтапыГрафик.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЭтапыГрафик.ОкончаниеЭтапа КАК Период,
	|	ТаблицаЭтапыГрафик.Этап КАК Этап,
	|	ТаблицаЭтапыГрафик.Подразделение КАК Подразделение,
	|	ТаблицаЭтапыГрафик.Ссылка КАК Распоряжение,
	|	ТаблицаПродукция.КодСтроки КАК КодСтрокиПродукция,
	|	ТаблицаЭтапыГрафик.КодСтроки КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаЭтапыГрафик.Количество КАК ЗапланированоЗаказом,
	|	ТаблицаЭтапыГрафик.НачалоПредварительногоБуфера КАК НачалоПредварительногоБуфера,
	|	ТаблицаЭтапыГрафик.НачалоЭтапа КАК НачалоЭтапа,
	|	ТаблицаЭтапыГрафик.ОкончаниеЗавершающегоБуфера КАК ОкончаниеЗавершающегоБуфера,
	|	ТаблицаЭтапыГрафик.НомерЭтапа КАК НомерЭтапа,
	|	ТаблицаЭтапыГрафик.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|	ТаблицаЭтапы.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО ТаблицаЭтапыГрафик.Ссылка = ТаблицаПродукция.Ссылка
	|			И ТаблицаЭтапыГрафик.КлючСвязиПродукция = ТаблицаПродукция.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаЭтапы
	|		ПО ТаблицаЭтапы.Ссылка = ТаблицаЭтапыГрафик.Ссылка
	|			И ТаблицаЭтапы.КлючСвязи = ТаблицаЭтапыГрафик.КлючСвязиЭтапы
	|			И ТаблицаЭтапы.КлючСвязиПродукция = ТаблицаЭтапыГрафик.КлючСвязиПродукция
	|ГДЕ
	|	ТаблицаЭтапыГрафик.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыНаПроизводствоТрудозатраты(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыНаПроизводствоТрудозатраты";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаЭтапыГрафик.НачалоПредварительногоБуфера КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТрудозатратыГрафик.Ссылка КАК ЗаказНаПроизводство,
	|	ТаблицаПродукция.КодСтроки КАК КодСтрокиПродукция,
	|	ТаблицаЭтапыГрафик.КодСтроки КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаЭтапыГрафик.Этап КАК Этап,
	|	ТаблицаТрудозатраты.ВидРабот КАК ВидРабот,
	|	ТаблицаТрудозатратыГрафик.Количество КАК ПоЗаказу
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ТрудозатратыГрафик КАК ТаблицаТрудозатратыГрафик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Трудозатраты КАК ТаблицаТрудозатраты
	|		ПО (ТаблицаТрудозатраты.Ссылка = ТаблицаТрудозатратыГрафик.Ссылка)
	|			И (ТаблицаТрудозатраты.КлючСвязи = ТаблицаТрудозатратыГрафик.КлючСвязиТрудозатраты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.Ссылка = ТаблицаТрудозатратыГрафик.Ссылка)
	|			И (ТаблицаПродукция.КлючСвязи = ТаблицаТрудозатратыГрафик.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТаблицаТрудозатратыГрафик.Ссылка)
	|			И (ТаблицаЭтапыГрафик.КлючСвязи = ТаблицаТрудозатратыГрафик.КлючСвязиЭтапыГрафик)
	|ГДЕ
	|	ТаблицаТрудозатратыГрафик.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|	И ТаблицаПродукция.ГрафикРассчитан";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДоступностьВидовРабочихЦентров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДоступностьВидовРабочихЦентров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Распоряжение,
	|	ТаблицаЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ТаблицаЗанятостьВидовРабочихЦентров.ДатаИнтервала КАК ДатаИнтервала,
	|	СУММА(ТаблицаЗанятостьВидовРабочихЦентров.Количество) КАК Занято,
	|	ТаблицаПродукция.КодСтроки КАК КодСтрокиПродукция,
	|	ТаблицаЭтапыГрафик.КодСтроки КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаЭтапыГрафик.Подразделение КАК Подразделение,
	|	ЛОЖЬ КАК ЭтоДвижениеВводаДоступности,
	|	ИСТИНА КАК ЭтоДвижениеЗаказаНаПроизводство,
	|	ЛОЖЬ КАК ЭтоДвижениеМаршрутногоЛиста,
	|	ЕСТЬNULL(ТаблицаВидыРабочихЦентров.ВариантНаладки, ТаблицаАльтернативныеВидыРабочихЦентров.ВариантНаладки) КАК ВариантНаладки
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ЗанятостьВидовРабочихЦентров КАК ТаблицаЗанятостьВидовРабочихЦентров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.Ссылка = ТаблицаЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ТаблицаПродукция.КлючСвязи = ТаблицаЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТаблицаЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ТаблицаЭтапыГрафик.КлючСвязи = ТаблицаЗанятостьВидовРабочихЦентров.КлючСвязиЭтапыГрафик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВидыРабочихЦентров КАК ТаблицаВидыРабочихЦентров
	|		ПО (ТаблицаВидыРабочихЦентров.Ссылка = ТаблицаЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ТаблицаВидыРабочихЦентров.КлючСвязиПродукция = ТаблицаЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|			И (ТаблицаВидыРабочихЦентров.КлючСвязиЭтапы = ТаблицаЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы)
	|			И (ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра = ТаблицаЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВидыРабочихЦентров КАК ТаблицаАльтернативныеВидыРабочихЦентров
	|		ПО (ТаблицаАльтернативныеВидыРабочихЦентров.Ссылка = ТаблицаЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ТаблицаАльтернативныеВидыРабочихЦентров.КлючСвязиПродукция = ТаблицаЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|			И (ТаблицаАльтернативныеВидыРабочихЦентров.КлючСвязиЭтапы = ТаблицаЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы)
	|			И (ТаблицаАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра = ТаблицаЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра)
	|ГДЕ
	|	ТаблицаЗанятостьВидовРабочихЦентров.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|	И ТаблицаПродукция.ГрафикРассчитан
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра,
	|	ТаблицаЗанятостьВидовРабочихЦентров.ДатаИнтервала,
	|	ТаблицаПродукция.КодСтроки,
	|	ТаблицаЭтапыГрафик.КодСтроки,
	|	ТаблицаЭтапыГрафик.Подразделение,
	|	ЕСТЬNULL(ТаблицаВидыРабочихЦентров.ВариантНаладки, ТаблицаАльтернативныеВидыРабочихЦентров.ВариантНаладки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтрокиПродукция,
	|	ДатаИнтервала,
	|	КодСтрокиЭтапыГрафик";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаБракВПроизводстве(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "БракВПроизводстве";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЭтапыВосстановления.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ЭтапыВосстановления.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ЭтапыВосстановленияБрака КАК ЭтапыВосстановления
	|ГДЕ
	|	ЭтапыВосстановления.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПереработкаПоГрафикуПроизводства(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПереработкаПоГрафикуПроизводства";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)     КАК ВидДвижения,
		|	ТаблицаВыходныеИзделияГрафик.ДатаЗапуска   КАК Период,
		|	ТаблицаВыходныеИзделия.НомерСтроки         КАК НомерСтроки,
		|	&Ссылка                                    КАК ЗаказНаПроизводство,
		|	ТаблицаЭтапыГрафик.КодСтроки               КАК КодСтрокиЭтапыГрафик,
		|	ТаблицаВыходныеИзделия.Номенклатура        КАК Номенклатура,
		|	ТаблицаВыходныеИзделия.Характеристика      КАК Характеристика,
		|	ТаблицаВыходныеИзделия.Склад               КАК Склад,
		|	ТаблицаВыходныеИзделияГрафик.Количество    КАК КЗаказу
		|ИЗ
		|	Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаЭтапы
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
		|		ПО ТаблицаЭтапыГрафик.Ссылка = &Ссылка
		|			И ТаблицаЭтапыГрафик.КлючСвязиЭтапы = ТаблицаЭтапы.КлючСвязи
		|			И ТаблицаЭтапыГрафик.КлючСвязиПродукция = ТаблицаЭтапы.КлючСвязиПродукция
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделияГрафик КАК ТаблицаВыходныеИзделияГрафик
		|		ПО ТаблицаВыходныеИзделияГрафик.Ссылка = ТаблицаЭтапыГрафик.Ссылка
		|			И ТаблицаВыходныеИзделияГрафик.КлючСвязиЭтапыГрафик = ТаблицаЭтапыГрафик.КлючСвязи
		|			И ТаблицаВыходныеИзделияГрафик.КлючСвязиПродукция = ТаблицаЭтапыГрафик.КлючСвязиПродукция
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
		|		ПО ТаблицаВыходныеИзделия.Ссылка = ТаблицаВыходныеИзделияГрафик.Ссылка
		|			И ТаблицаВыходныеИзделия.КлючСвязи = ТаблицаВыходныеИзделияГрафик.КлючСвязиВыходныеИзделия
		|			И ТаблицаВыходныеИзделия.КлючСвязиПродукция = ТаблицаВыходныеИзделияГрафик.КлючСвязиПродукция
		|
		|ГДЕ
		|	ТаблицаЭтапы.Ссылка = &Ссылка
		|	И ТаблицаЭтапы.ПроизводствоНаСтороне
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ТаблицаМатериалыИУслуги.Ссылка               КАК Ссылка,
	|	ТаблицаМатериалыИУслуги.Ссылка.Дата		     КАК Период,
	|	ТаблицаМатериалыИУслуги.Ссылка               КАК Заказ,
	|	НЕОПРЕДЕЛЕНО                                 КАК Накладная,
	|	ЛОЖЬ                                         КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                 КАК ИсправляемыйДокумент,
	|	ТаблицаМатериалыИУслуги.Подразделение        КАК Получатель,
	|	ТаблицаМатериалыИУслуги.Склад                КАК Склад,
	|	ТаблицаМатериалыИУслуги.Номенклатура         КАК Номенклатура,
	|	ТаблицаМатериалыИУслуги.Характеристика       КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалыИУслуги.Обособленно
	|			ТОГДА ТаблицаМатериалыИУслуги.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                        КАК Назначение,
	|	ТаблицаМатериалыИУслуги.Серия                КАК Серия,
	|	ТаблицаМатериалыИУслуги.СтатусУказанияСерий	 КАК СтатусУказанияСерий,
	|	ТаблицаМатериалыИУслуги.Количество           КАК Количество,
	|	ТаблицаМатериалыИУслуги.Отменено			 КАК Отменено,
	|	ЛОЖЬ                                         КАК ЭтоНакладная,
	|	ЛОЖЬ                                         КАК ОтгрузкаПоЗаказу,
	|	ЛОЖЬ                                         КАК СверхЗаказа
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|ГДЕ
	|	ТаблицаМатериалыИУслуги.Ссылка В(&Ссылка)
	|	И (ТаблицаМатериалыИУслуги.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан) 
	|			И ТаблицаМатериалыИУслуги.ВариантОбеспечения В(ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|															ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
	|		ИЛИ ТаблицаМатериалыИУслуги.Ссылка.Статус В(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
	|													ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|			И ТаблицаМатериалыИУслуги.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))";
	
	СкладыСервер.ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
		
КонецПроцедуры

Процедура ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ТаблицаМатериалыИУслуги.Ссылка              КАК Ссылка,
	|	ТаблицаМатериалыИУслуги.Ссылка.Дата		    КАК Период,
	|	ТаблицаМатериалыИУслуги.Ссылка              КАК Заказ,
	|	НЕОПРЕДЕЛЕНО                                КАК Накладная,
	|	ЛОЖЬ                                        КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                КАК ИсправляемыйДокумент,
	|	ТаблицаМатериалыИУслуги.Подразделение       КАК Получатель,
	|	ТаблицаМатериалыИУслуги.Склад               КАК Склад,
	|	ТаблицаМатериалыИУслуги.Номенклатура        КАК Номенклатура,
	|	ТаблицаМатериалыИУслуги.Характеристика      КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалыИУслуги.Обособленно
	|			ТОГДА ТаблицаМатериалыИУслуги.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                       КАК Назначение,
	|	ТаблицаМатериалыИУслуги.Серия               КАК Серия,
	|	ТаблицаМатериалыИУслуги.СтатусУказанияСерий	КАК СтатусУказанияСерий,
	|	ТаблицаМатериалыИУслуги.Количество          КАК Количество,
	|	ТаблицаМатериалыИУслуги.Отменено			КАК Отменено,
	|	ЛОЖЬ                                        КАК ЭтоНакладная,
	|	ЛОЖЬ                                        КАК ОтгрузкаПоЗаказу,
	|	ЛОЖЬ                                        КАК СверхЗаказа
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|ГДЕ
	|	ТаблицаМатериалыИУслуги.Ссылка В(&Ссылка)
	|	И ТаблицаМатериалыИУслуги.Ссылка.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|	И ТаблицаМатериалыИУслуги.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И ТаблицаМатериалыИУслуги.Номенклатура.ТипНоменклатуры В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	СкладыСервер.ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
	
КонецПроцедуры


Функция ТекстЗапросаТаблицаЗаказыНаПроизводствоСпецификации(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыНаПроизводствоСпецификации";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЭтапыГрафик.НачалоПредварительногоБуфера КАК Период,
	|	ТабличнаяЧасть.Ссылка КАК ЗаказНаПроизводство,
	|	ТаблицаВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ТаблицаВыходныеИзделия.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.КодСтроки КАК КодСтрокиПродукция,
	|	ТаблицаЭтапыГрафик.КодСтроки КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаЭтапыГрафик.Этап КАК Этап,
	|	ВЫБОР
	|		КОГДА ТаблицаВыходныеИзделия.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТаблицаВыходныеИзделия.Подразделение
	|		ИНАЧЕ ТаблицаВыходныеИзделия.Склад
	|	КОНЕЦ КАК Склад,
	|	ТаблицаВыходныеИзделия.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе,
	|	ТаблицаЭтапыГрафик.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипДвиженияЗапасов,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПотребности,
	|	ТаблицаВыходныеИзделия.Назначение КАК Назначение,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
	|	ЛОЖЬ КАК Обособленно,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВыходныеИзделияГрафик КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
	|		ПО (ТаблицаВыходныеИзделия.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаВыходныеИзделия.КлючСвязи = ТабличнаяЧасть.КлючСвязиВыходныеИзделия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаПродукция.КлючСвязи = ТабличнаяЧасть.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаЭтапыГрафик.КлючСвязи = ТабличнаяЧасть.КлючСвязиЭтапыГрафик)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЭтапыГрафик.НачалоПредварительногоБуфера,
	|	ТабличнаяЧасть.Ссылка,
	|	ТаблицаВозвратныеОтходы.Номенклатура,
	|	ТаблицаВозвратныеОтходы.Характеристика,
	|	ТаблицаПродукция.КодСтроки,
	|	ТаблицаЭтапыГрафик.КодСтроки,
	|	ТаблицаЭтапыГрафик.Этап,
	|	ВЫБОР
	|		КОГДА ТаблицаВозвратныеОтходы.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТаблицаВозвратныеОтходы.Подразделение
	|		ИНАЧЕ ТаблицаВозвратныеОтходы.Склад
	|	КОНЕЦ,
	|	ТаблицаВозвратныеОтходы.ПроизводитсяВПроцессе,
	|	ТаблицаЭтапыГрафик.Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ТаблицаВозвратныеОтходы.Назначение,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка),
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВозвратныеОтходыГрафик КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ТаблицаВозвратныеОтходы
	|		ПО (ТаблицаВозвратныеОтходы.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаВозвратныеОтходы.КлючСвязи = ТабличнаяЧасть.КлючСвязиВозвратныеОтходы)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаПродукция.КлючСвязи = ТабличнаяЧасть.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаЭтапыГрафик.КлючСвязи = ТабличнаяЧасть.КлючСвязиЭтапыГрафик)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЭтапыГрафик.НачалоПредварительногоБуфера,
	|	ТабличнаяЧасть.Ссылка,
	|	ТаблицаМатериалыИУслуги.Номенклатура,
	|	ТаблицаМатериалыИУслуги.Характеристика,
	|	ТаблицаПродукция.КодСтроки,
	|	ТаблицаЭтапыГрафик.КодСтроки,
	|	ТаблицаЭтапыГрафик.Этап,
	|	ТаблицаМатериалыИУслуги.Склад,
	|	ТаблицаМатериалыИУслуги.ПроизводитсяВПроцессе,
	|	ТаблицаЭтапыГрафик.Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка),
	|	ТаблицаМатериалыИУслуги.ДатаПотребности,
	|	ТаблицаМатериалыИУслуги.Назначение,
	|	ТаблицаМатериалыИУслуги.ВариантОбеспечения,
	|	ТаблицаМатериалыИУслуги.Обособленно,
	|	ТаблицаМатериалыИУслуги.Серия,
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслугиГрафик КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ПО (ТаблицаМатериалыИУслуги.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаМатериалыИУслуги.КлючСвязи = ТабличнаяЧасть.КлючСвязиМатериалыИУслуги)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаПродукция.КлючСвязи = ТабличнаяЧасть.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаЭтапыГрафик.КлючСвязи = ТабличнаяЧасть.КлючСвязиЭтапыГрафик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаЭтапы
	|		ПО (ТаблицаЭтапы.Ссылка = ТаблицаЭтапыГрафик.Ссылка)
	|			И (ТаблицаЭтапы.КлючСвязиПродукция = ТаблицаЭтапыГрафик.КлючСвязиПродукция)
	|			И (ТаблицаЭтапы.КлючСвязи = ТаблицаЭтапыГрафик.КлючСвязиЭтапы)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТаблицаЭтапы.ПроизводствоНаСтороне
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыМатериаловВПроизводство(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыМатериаловВПроизводство";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Ссылка                                КАК Распоряжение,
	|	ТабличнаяЧасть.Подразделение           КАК Подразделение,
	|	ТабличнаяЧасть.Подразделение           КАК Получатель,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.Серия                   КАК Серия,
	|	ТабличнаяЧасть.Склад                   КАК Склад,
	|	ТабличнаяЧасть.Назначение              КАК Назначение,
	|	ТабличнаяЧасть.Назначение              КАК НазначениеОтправителя,
	|	ТабличнаяЧасть.КодСтроки               КАК КодСтроки,
	|	ТабличнаяЧасть.Количество              КАК Заказано,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|				И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			ТОГДА ТабличнаяЧасть.Количество
	|	КОНЕЦ                                   КАК КОформлению
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаЭтапы
	|		ПО (ТаблицаЭтапы.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаЭтапы.КлючСвязи = ТабличнаяЧасть.КлючСвязиЭтапы)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.ЗаказатьНаСклад
	|	И НЕ ТаблицаЭтапы.ПроизводствоНаСтороне
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаЗаказыМатериаловСУчетомКорректировок(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ЗаказыМатериаловСУчетомКорректировок";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТМатериалыИУслуги.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ТДатыНачалаЭтапов.Период, НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)) КАК Период,
	|	&Организация КАК Организация,
	|	ТМатериалыИУслуги.Подразделение КАК Подразделение,
	|	&Ссылка КАК Распоряжение,
	|	ТМатериалыИУслуги.КодСтроки КАК КодСтрокиРаспоряжения,
	|	ТМатериалыИУслуги.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ТМатериалыИУслуги.Обособленно КАК Обособленно,
	|	ТМатериалыИУслуги.ДатаПотребности КАК ДатаПотребности,
	|	ТМатериалыИУслуги.КодСтроки КАК КодСтроки,
	|	ТМатериалыИУслуги.Отменено КАК Отменено,
	|	ТЭтапы.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
	|	ТМатериалыИУслуги.Серия КАК Серия,
	|	ТМатериалыИУслуги.Склад КАК Склад,
	|	ТМатериалыИУслуги.Упаковка КАК Упаковка,
	|	ТМатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	ТМатериалыИУслуги.Характеристика КАК Характеристика,
	|	ТМатериалыИУслуги.Назначение КАК Назначение,
	|	ТМатериалыИУслуги.Количество КАК Количество,
	|	ТМатериалыИУслуги.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТМатериалыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЭтапыГрафик.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|			ЭтапыГрафик.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|			МИНИМУМ(ЭтапыГрафик.НачалоПредварительногоБуфера) КАК Период
	|		ИЗ
	|			Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЭтапыГрафик
	|		ГДЕ
	|			ЭтапыГрафик.Ссылка = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЭтапыГрафик.КлючСвязиЭтапы,
	|			ЭтапыГрафик.КлючСвязиПродукция) КАК ТДатыНачалаЭтапов
	|		ПО ТМатериалыИУслуги.КлючСвязиПродукция = ТДатыНачалаЭтапов.КлючСвязиПродукция
	|			И ТМатериалыИУслуги.КлючСвязиЭтапы = ТДатыНачалаЭтапов.КлючСвязиЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТЭтапы
	|		ПО ТМатериалыИУслуги.Ссылка = ТЭтапы.Ссылка
	|			И ТМатериалыИУслуги.КлючСвязиЭтапы = ТЭтапы.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТПродукция
	|		ПО ТМатериалыИУслуги.Ссылка = ТПродукция.Ссылка
	|			И ТМатериалыИУслуги.КлючСвязиПродукция = ТПродукция.КлючСвязи
	|ГДЕ
	|	ТМатериалыИУслуги.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка         КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата    КАК Период,
		|	ТабЧасть.Номенклатура   КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			ТабЧасть.Этап.Подразделение
		|		ИНАЧЕ
		|			ТабЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ТабЧасть.Назначение     КАК Назначение,
		|	ТабЧасть.Количество     КАК Количество,
		|	ТабЧасть.Ссылка         КАК ЗапланированныйРасходРаспределенногоЗапаса,
		|	ИСТИНА                  КАК КонтрольСвободногоОстатка
		|ИЗ
		|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.ЗаказатьНаСклад
		|		И ТабЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
		|		И ТабЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)";
	
	РаспределениеЗапасовДвижения.РасходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка                                     КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата                                КАК Период,
		|	ТабЧасть.Номенклатура                               КАК Номенклатура,
		|	ТабЧасть.Характеристика                             КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			ТабЧасть.Этап.Подразделение
		|		ИНАЧЕ
		|			ТабЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ТабЧасть.Назначение                                 КАК Назначение,
		|	ТабЧасть.Количество                                 КАК Количество,
		|	ТабЧасть.ВариантОбеспечения                         КАК ВариантОбеспечения,
		|	ТабЧасть.Ссылка                                     КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабЧасть.ДатаПотребности <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|				ТабЧасть.ДатаПотребности
		|			ИНАЧЕ
		|				Продукция.НачатьНеРанее
		|		КОНЕЦ КАК ЖелаемаяДатаОтгрузки,
		|	ЛОЖЬ КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО КАК РаспоряжениеВГрафике,
		|	0 КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТабЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
		|		ПО Продукция.Ссылка             = ТабЧасть.Ссылка
		|		 И Продукция.КлючСвязиПродукция = ТабЧасть.КлючСвязи
		|ГДЕ
		|	ТабЧасть.ЗаказатьНаСклад
		|			И ТабЧасть.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|		ИЛИ ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка                                     КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата                                КАК Период,
		|	ТабЧасть.Номенклатура                               КАК Номенклатура,
		|	ТабЧасть.Характеристика                             КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			ТабЧасть.Этап.Подразделение
		|		ИНАЧЕ
		|			ТабЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ТабЧасть.Назначение                                 КАК Назначение,
		|	ТабЧасть.Количество                                 КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада) КАК ВариантОбеспечения,
		|	ТабЧасть.Ссылка                                     КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабЧасть.ДатаПотребности <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|				ТабЧасть.ДатаПотребности
		|			ИНАЧЕ
		|				Продукция.НачатьНеРанее
		|		КОНЕЦ КАК ЖелаемаяДатаОтгрузки,
		|	ЛОЖЬ КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО КАК РаспоряжениеВГрафике,
		|	0 КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТабЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
		|		ПО Продукция.Ссылка             = ТабЧасть.Ссылка
		|		 И Продукция.КлючСвязиПродукция = ТабЧасть.КлючСвязи
		|ГДЕ
		|	ТабЧасть.ЗаказатьНаСклад
		|		И ТабЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан)
		|		И ТабЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)";
	
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		// Выходные изделия, график не рассчитан.
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка         КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата    КАК Период,
		|	ТабЧасть.Номенклатура   КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			ТабЧасть.Подразделение
		|		ИНАЧЕ
		|			ТабЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ТабЧасть.Назначение     КАК Назначение,
		|	ТабЧасть.Количество     КАК Количество,
		|	ТабЧасть.Ссылка         КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабЧасть.ПроизводитсяВПроцессе И МатериалыИУслуги.ДатаПотребности <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|				МатериалыИУслуги.ДатаПотребности
		|			ИНАЧЕ
		|				Продукция.ДатаПотребности
		|		КОНЕЦ КАК ДатаПоступления,
		|	
		|	ИСТИНА                  КАК ДоступенДляРасхода,
		|	ЛОЖЬ                    КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО            КАК РаспоряжениеВГрафике,
		|	0                       КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТабЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
		|		ПО ТабЧасть.Ссылка             = Продукция.Ссылка
		|		 И ТабЧасть.КлючСвязиПродукция = Продукция.КлючСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК МатериалыИУслуги
		|		ПО ТабЧасть.Ссылка = МатериалыИУслуги.Ссылка
		|		 И ТабЧасть.КлючСвязиПолуфабрикат = МатериалыИУслуги.КлючСвязи
		|		 И ТабЧасть.ПроизводитсяВПроцессе
		|ГДЕ
		|	(ТабЧасть.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИЛИ ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|		И (ТабЧасть.ПроизводитсяВПроцессе
		|			ИЛИ ТабЧасть.Ссылка.Статус В(
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)))
		|		И НЕ Продукция.ГрафикРассчитан";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		// Возвратные отходы, график не рассчитан.
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка         КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата    КАК Период,
		|	ТабЧасть.Номенклатура   КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			ТабЧасть.Подразделение
		|		ИНАЧЕ
		|			ТабЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ТабЧасть.Назначение     КАК Назначение,
		|	ТабЧасть.Количество     КАК Количество,
		|	ТабЧасть.Ссылка         КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабЧасть.ПроизводитсяВПроцессе И МатериалыИУслуги.ДатаПотребности <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|				МатериалыИУслуги.ДатаПотребности
		|			ИНАЧЕ
		|				Продукция.ДатаПотребности
		|		КОНЕЦ КАК ДатаПоступления,
		|	
		|	ИСТИНА                  КАК ДоступенДляРасхода,
		|	ЛОЖЬ                    КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО            КАК РаспоряжениеВГрафике,
		|	0                       КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ТабЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
		|		ПО ТабЧасть.Ссылка             = Продукция.Ссылка
		|		 И ТабЧасть.КлючСвязиПродукция = Продукция.КлючСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК МатериалыИУслуги
		|		ПО ТабЧасть.Ссылка = МатериалыИУслуги.Ссылка
		|		 И ТабЧасть.КлючСвязиПолуфабрикат = МатериалыИУслуги.КлючСвязи
		|		 И ТабЧасть.ПроизводитсяВПроцессе
		|ГДЕ
		|	(ТабЧасть.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИЛИ ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|		И (ТабЧасть.ПроизводитсяВПроцессе
		|			ИЛИ ТабЧасть.Ссылка.Статус В(
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)))
		|		И НЕ Продукция.ГрафикРассчитан";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		// Выходные изделия, график рассчитан.
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка         КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата    КАК Период,
		|	ТабЧасть.Номенклатура   КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			ТабЧасть.Подразделение
		|		ИНАЧЕ
		|			ТабЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ТабЧасть.Назначение     КАК Назначение,
		|	График.Количество       КАК Количество,
		|	ТабЧасть.Ссылка         КАК Заказ,
		|	
		|	ВЫБОР КОГДА График.ДатаВыпуска > НАЧАЛОПЕРИОДА(График.ДатаВыпуска, ДЕНЬ) ТОГДА
		|			ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(График.ДатаВыпуска, ДЕНЬ), ДЕНЬ, 1)
		|		ИНАЧЕ
		|			График.ДатаВыпуска
		|	КОНЕЦ КАК ДатаПоступления,
		|	
		|	ИСТИНА                  КАК ДоступенДляРасхода,
		|	ЛОЖЬ                    КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО            КАК РаспоряжениеВГрафике,
		|	0                       КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТабЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделияГрафик КАК График
		|		ПО График.Ссылка                   = ТабЧасть.Ссылка
		|		 И График.КлючСвязиВыходныеИзделия = ТабЧасть.КлючСвязи
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
		|		ПО Продукция.Ссылка             = ТабЧасть.Ссылка
		|		 И Продукция.КлючСвязи          = ТабЧасть.КлючСвязиПродукция
		|ГДЕ
		|	(ТабЧасть.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИЛИ ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|		И (ТабЧасть.ПроизводитсяВПроцессе
		|			ИЛИ ТабЧасть.Ссылка.Статус В(
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)))
		|		И Продукция.ГрафикРассчитан
		|		И НЕ График.Ссылка ЕСТЬ NULL";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		// Возвратные отходы, график рассчитан.
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка         КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата    КАК Период,
		|	ТабЧасть.Номенклатура   КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			ТабЧасть.Подразделение
		|		ИНАЧЕ
		|			ТабЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ТабЧасть.Назначение     КАК Назначение,
		|	График.Количество       КАК Количество,
		|	ТабЧасть.Ссылка         КАК Заказ,
		|	
		|	ВЫБОР КОГДА График.ДатаВыпуска > НАЧАЛОПЕРИОДА(График.ДатаВыпуска, ДЕНЬ) ТОГДА
		|			ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(График.ДатаВыпуска, ДЕНЬ), ДЕНЬ, 1)
		|		ИНАЧЕ
		|			График.ДатаВыпуска
		|	КОНЕЦ КАК ДатаПоступления,
		|	
		|	ИСТИНА                  КАК ДоступенДляРасхода,
		|	ЛОЖЬ                    КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО            КАК РаспоряжениеВГрафике,
		|	0                       КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ТабЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВозвратныеОтходыГрафик КАК График
		|		ПО График.Ссылка                    = ТабЧасть.Ссылка
		|		 И График.КлючСвязиВозвратныеОтходы = ТабЧасть.КлючСвязи
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
		|		ПО Продукция.Ссылка             = ТабЧасть.Ссылка
		|		 И Продукция.КлючСвязи          = ТабЧасть.КлючСвязиПродукция
		|ГДЕ
		|	(ТабЧасть.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИЛИ ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|		И (ТабЧасть.ПроизводитсяВПроцессе
		|			ИЛИ ТабЧасть.Ссылка.Статус В(
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)))
		|		И Продукция.ГрафикРассчитан
		|		И НЕ График.Ссылка ЕСТЬ NULL";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетГрафика

Функция ПолучитьГрафикВыпускаПродукции(ДанныеДокумента, ПараметрыОтладки = Неопределено) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("МежцеховоеУправление.РасчетГрафикаПроизводства");
	
	РезультатРасчета = РассчитатьГрафикВыпускаПродукции(ДанныеДокумента, ПараметрыОтладки);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ДанныеДокумента.Этапы.Количество());
	
	Возврат РезультатРасчета;
	
КонецФункции

Функция РассчитатьГрафикВыпускаПродукции(ДанныеДокумента, ПараметрыОтладки)
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ПустойУникальныйИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Статус             = ДанныеДокумента.Статус;
	Ссылка             = ДанныеДокумента.Ссылка;
	Назначение         = ДанныеДокумента.Назначение;
	НомерВОчереди      = ДанныеДокумента.НомерВОчереди;
	ПриоритетНомер     = ДанныеДокумента.ПриоритетНомер;
	ПодразделениеНомер = ДанныеДокумента.ПодразделениеНомер;
	
	Продукция             = ДанныеДокумента.Продукция;
	ВыходныеИзделия       = ДанныеДокумента.ВыходныеИзделия;
	ВозвратныеОтходы      = ДанныеДокумента.ВозвратныеОтходы;
	Этапы                 = ДанныеДокумента.Этапы;
	ВидыРабочихЦентров    = ДанныеДокумента.ВидыРабочихЦентров;
	МатериалыИУслуги      = ДанныеДокумента.МатериалыИУслуги;
	Трудозатраты          = ДанныеДокумента.Трудозатраты;
	
	ПродукцияГрафик               = ДанныеДокумента.ПродукцияГрафик;
	ЭтапыГрафик                   = ДанныеДокумента.ЭтапыГрафик;
	ВыходныеИзделияГрафик         = ДанныеДокумента.ВыходныеИзделияГрафик;
	ВозвратныеОтходыГрафик        = ДанныеДокумента.ВозвратныеОтходыГрафик;
	МатериалыИУслугиГрафик        = ДанныеДокумента.МатериалыИУслугиГрафик;
	ТрудозатратыГрафик            = ДанныеДокумента.ТрудозатратыГрафик;
	ЗанятостьВидовРабочихЦентров  = ДанныеДокумента.ЗанятостьВидовРабочихЦентров;
	
	Продукция.Колонки.Добавить("Начало");
	Продукция.Колонки.Добавить("Окончание");
	
	СтруктураПараметров = Новый Структура("
		|Ссылка, 
		|НомерВОчереди, 
		|ПриоритетНомер, 
		|ПодразделениеНомер, 
		|Этапы, 
		|ЗанятостьВидовРЦ,
		|Начало, 
		|Окончание, 
		|РазмещениеВыпуска, 
		|ИзменятьРазмещениеВыпуска, 
		|ОптимальноеКоличествоПередачиМеждуЭтапами, 
		|ПотребностиСпланированныеРанее");

	СтруктураПараметров.Вставить("ИгнорироватьОграниченияДоступностиМатериалов", ДанныеДокумента.ИгнорироватьОграниченияДоступностиМатериалов);
	СтруктураПараметров.Вставить("ИгнорироватьОграниченияДоступностиВидовРабочихЦентров", ДанныеДокумента.ИгнорироватьОграниченияДоступностиВидовРабочихЦентров);
	СтруктураПараметров.Вставить("НаПустойЗавод", ДанныеДокумента.НаПустойЗавод);
	СтруктураПараметров.Вставить("ЗадействоватьРезервДоступности", ДанныеДокумента.ЗадействоватьРезервДоступности);
	СтруктураПараметров.Вставить("ДатыОбеспечения", ДанныеДокумента.ДатыОбеспечения);
	
	СтруктураПараметров.Вставить("ТекущаяДатаСеанса", ТекущаяДатаСеанса);
	
	// Для всех строк сбрасывается признак рассчитанности графика
	Продукция.ЗаполнитьЗначения(Ложь, "ГрафикРассчитан");
	
	Для каждого СтрокаПродукция Из Продукция Цикл
		
		ПланируемыеСтроки = Новый Массив;
		РазмещениеВыпуска = СтрокаПродукция.РазмещениеВыпуска;
		
		// Строка с продукцией
		Если СтрокаПродукция.КлючСвязиПродукция = ПустойУникальныйИдентификатор Тогда
			
			ПланируемыеСтроки.Добавить(СтрокаПродукция);
			
			Для каждого ПланируемаяСтрока Из ПланируемыеСтроки Цикл
				
				ПланируемаяСтрока.Начало = ПланируемаяСтрока.НачатьНеРанее;
				ПланируемаяСтрока.Окончание = ПланируемаяСтрока.ДатаПотребности;
				
				// Поиск связанных полуфабрикатов
				Полуфабрикаты = Продукция.НайтиСтроки(Новый Структура("КлючСвязиПродукция", ПланируемаяСтрока.КлючСвязи));
				
				Для каждого Полуфабрикат Из Полуфабрикаты Цикл
					
					ПланируемыеСтроки.Добавить(Полуфабрикат);
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			// Полуфабрикаты пропускаются
			Продолжить;
			
		КонецЕсли;
		
		Индекс = 0;
		ДобавленныеСтроки = Новый Массив;
		
		Пока Индекс <= ПланируемыеСтроки.ВГраница() Цикл
			
			Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу Тогда
				
				// От полуфабрикатов нижнего уровня до продукции
				ПланируемаяСтрока = ПланируемыеСтроки[ПланируемыеСтроки.ВГраница() - Индекс];
				
			Иначе
				
				// От продукции до полуфабрикатов нижнего уровня
				ПланируемаяСтрока = ПланируемыеСтроки[Индекс];
				
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
			СтруктураПараметров.Ссылка = Ссылка;
			СтруктураПараметров.НомерВОчереди = НомерВОчереди;
			СтруктураПараметров.ПриоритетНомер = ПриоритетНомер;
			СтруктураПараметров.ПодразделениеНомер = ПодразделениеНомер;
			СтруктураПараметров.Этапы = ЭтапыДляРасчетаГрафика(ПланируемаяСтрока, Этапы, ВидыРабочихЦентров);
			СтруктураПараметров.ЗанятостьВидовРЦ = ЗанятостьВидовРабочихЦентров;
			
			СтруктураПараметров.Начало = ПланируемаяСтрока.Начало;
			СтруктураПараметров.Окончание = ПланируемаяСтрока.Окончание;
			СтруктураПараметров.РазмещениеВыпуска = РазмещениеВыпуска;
			СтруктураПараметров.ИзменятьРазмещениеВыпуска = ПланируемыеСтроки.Количество() = 1;
			СтруктураПараметров.ОптимальноеКоличествоПередачиМеждуЭтапами = ПланируемаяСтрока.ОптимальноеКоличествоПередачиМеждуЭтапами;
			
			НовыйГрафикВыпускаПродукции = ПланированиеПроизводстваПереопределяемый.РассчитатьГрафикВыпускаПродукции(СтруктураПараметров, ПараметрыОтладки);
			
			Если НовыйГрафикВыпускаПродукции = Неопределено Тогда
				
				Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию
					И НЕ СтруктураПараметров.ИзменятьРазмещениеВыпуска Тогда
					
					Для каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
						
						ДобавленнаяСтрока.Владелец().Удалить(ДобавленнаяСтрока);
						
					КонецЦикла;
					
					ДобавленныеСтроки = Новый Массив;
					
					РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
					Индекс = 0;
					Продолжить;
					
				Иначе
					
					СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать;
					
					РезультатРасчета = Новый Структура("Запланирован, НомерСтрокиПродукция, Ошибки", Ложь,
						ПланируемаяСтрока.НомерСтроки, СтруктураПараметров.Ошибки);
					
					Возврат РезультатРасчета;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Для строки устанавливается признак рассчитанности графика
			ПланируемаяСтрока.ГрафикРассчитан = Истина;
			
			СтрокаПродукцияГрафик = ПродукцияГрафик.Найти(ПланируемаяСтрока.КлючСвязи, "КлючСвязиПродукция");
			
			Если СтрокаПродукцияГрафик = Неопределено Тогда
				
				СтрокаПродукцияГрафик = ПродукцияГрафик.Добавить();
				ДобавленныеСтроки.Добавить(СтрокаПродукцияГрафик);
				СтрокаПродукцияГрафик.КлючСвязиПродукция = ПланируемаяСтрока.КлючСвязи;
				
			КонецЕсли;
			
			СтрокаПродукцияГрафик.Начало = Неопределено;
			СтрокаПродукцияГрафик.Окончание = Неопределено;
			
			Если НовыйГрафикВыпускаПродукции.Количество() = 0 Тогда
				
				Для каждого СтрокаЭтапыГрафик Из ЭтапыГрафик Цикл
					
					Если СтрокаПродукцияГрафик.КлючСвязиПродукция <> СтрокаЭтапыГрафик.КлючСвязиПродукция Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаПродукцияГрафик.Начало) ИЛИ СтрокаПродукцияГрафик.Начало > СтрокаЭтапыГрафик.НачалоПредварительногоБуфера Тогда
						
						СтрокаПродукцияГрафик.Начало = СтрокаЭтапыГрафик.НачалоПредварительногоБуфера;
						ПланируемаяСтрока.Начало = СтрокаЭтапыГрафик.НачалоПредварительногоБуфера;
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаПродукцияГрафик.Окончание) ИЛИ СтрокаПродукцияГрафик.Окончание < СтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера Тогда
						
						СтрокаПродукцияГрафик.Окончание = СтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера;
						ПланируемаяСтрока.Окончание = СтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Статус = Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству Тогда
				
				ПланируемаяСтрока.ИзмененияЗапрещены = Истина;
				
			КонецЕсли;
			
			СтрокиВыходныеИзделияГрафик = Новый Массив;
			
			Для каждого ГрафикЭтапа Из НовыйГрафикВыпускаПродукции Цикл
				
				ТекущийЭтап = Этапы.Найти(ГрафикЭтапа.КлючСвязиЭтап, "КлючСвязи");
				
				НоваяСтрокаЭтапыГрафик = ЭтапыГрафик.Добавить();
				ДобавленныеСтроки.Добавить(НоваяСтрокаЭтапыГрафик);
				
				НоваяСтрокаЭтапыГрафик.Этап = ГрафикЭтапа.Этап;
				НоваяСтрокаЭтапыГрафик.Спецификация = ТекущийЭтап.Спецификация;
				НоваяСтрокаЭтапыГрафик.Подразделение = ТекущийЭтап.Подразделение;
				НоваяСтрокаЭтапыГрафик.НачалоПредварительногоБуфера = ГрафикЭтапа.НачалоПредварительногоБуфера;
				НоваяСтрокаЭтапыГрафик.НачалоЭтапа = ГрафикЭтапа.НачалоЭтапа;
				НоваяСтрокаЭтапыГрафик.ОкончаниеЭтапа = ГрафикЭтапа.ОкончаниеЭтапа;
				НоваяСтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера = ГрафикЭтапа.ОкончаниеЗавершающегоБуфера;
				НоваяСтрокаЭтапыГрафик.Количество = ГрафикЭтапа.Количество;
				НоваяСтрокаЭтапыГрафик.КлючСвязиПродукция = ТекущийЭтап.КлючСвязиПродукция;
				НоваяСтрокаЭтапыГрафик.КлючСвязиЭтапы = ТекущийЭтап.КлючСвязи;
				НоваяСтрокаЭтапыГрафик.КлючСвязи = ГрафикЭтапа.КлючСвязи;
				НоваяСтрокаЭтапыГрафик.НомерЭтапа = ТекущийЭтап.НомерЭтапа;
				НоваяСтрокаЭтапыГрафик.НомерСледующегоЭтапа = ТекущийЭтап.НомерСледующегоЭтапа;
				
				Если НЕ ЗначениеЗаполнено(СтрокаПродукцияГрафик.Начало) ИЛИ СтрокаПродукцияГрафик.Начало > НоваяСтрокаЭтапыГрафик.НачалоПредварительногоБуфера Тогда
					
					СтрокаПродукцияГрафик.Начало = НоваяСтрокаЭтапыГрафик.НачалоПредварительногоБуфера;
					ПланируемаяСтрока.Начало = НоваяСтрокаЭтапыГрафик.НачалоПредварительногоБуфера;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаПродукцияГрафик.Окончание) ИЛИ СтрокаПродукцияГрафик.Окончание < НоваяСтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера Тогда
					
					СтрокаПродукцияГрафик.Окончание = НоваяСтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера;
					ПланируемаяСтрока.Окончание = НоваяСтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера;
					
				КонецЕсли;
				
				ВыходныеИзделияНайденныеСтроки = ВыходныеИзделия.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ТекущийЭтап.КлючСвязи));
				
				Для каждого СтрокаВыходныеИзделия Из ВыходныеИзделияНайденныеСтроки Цикл
					
					НоваяСтрокаВыходныеИзделияГрафик = ВыходныеИзделияГрафик.Добавить();
					ДобавленныеСтроки.Добавить(НоваяСтрокаВыходныеИзделияГрафик);
					
					НоваяСтрокаВыходныеИзделияГрафик.ДатаВыпуска = НоваяСтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера;
					НоваяСтрокаВыходныеИзделияГрафик.КоличествоУпаковок = СтрокаВыходныеИзделия.КоличествоУпаковок * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаВыходныеИзделияГрафик.Количество = СтрокаВыходныеИзделия.Количество * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаВыходныеИзделияГрафик.КлючСвязиПродукция = НоваяСтрокаЭтапыГрафик.КлючСвязиПродукция;
					НоваяСтрокаВыходныеИзделияГрафик.КлючСвязиЭтапыГрафик = НоваяСтрокаЭтапыГрафик.КлючСвязи;
					НоваяСтрокаВыходныеИзделияГрафик.КлючСвязиВыходныеИзделия = СтрокаВыходныеИзделия.КлючСвязи;
					
					СтрокиВыходныеИзделияГрафик.Добавить(НоваяСтрокаВыходныеИзделияГрафик);
					
				КонецЦикла;
				
				ВозвратныеОтходыНайденныеСтроки = ВозвратныеОтходы.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ТекущийЭтап.КлючСвязи));
				
				Для каждого СтрокаВозвратныеОтходы Из ВозвратныеОтходыНайденныеСтроки Цикл
					
					НоваяСтрокаВозвратныеОтходыГрафик = ВозвратныеОтходыГрафик.Добавить();
					ДобавленныеСтроки.Добавить(НоваяСтрокаВозвратныеОтходыГрафик);
					
					НоваяСтрокаВозвратныеОтходыГрафик.ДатаВыпуска = НоваяСтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера;
					НоваяСтрокаВозвратныеОтходыГрафик.КоличествоУпаковок = СтрокаВозвратныеОтходы.КоличествоУпаковок * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаВозвратныеОтходыГрафик.Количество = СтрокаВозвратныеОтходы.Количество * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаВозвратныеОтходыГрафик.КлючСвязиПродукция = НоваяСтрокаЭтапыГрафик.КлючСвязиПродукция;
					НоваяСтрокаВозвратныеОтходыГрафик.КлючСвязиЭтапыГрафик = НоваяСтрокаЭтапыГрафик.КлючСвязи;
					НоваяСтрокаВозвратныеОтходыГрафик.КлючСвязиВозвратныеОтходы= СтрокаВозвратныеОтходы.КлючСвязи;
					
				КонецЦикла;
				
				МатериалыИУслугиНайденныеСтроки = МатериалыИУслуги.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ТекущийЭтап.КлючСвязи));
				
				Для каждого СтрокаМатериалыИУслуги Из МатериалыИУслугиНайденныеСтроки Цикл
					
					НоваяСтрокаМатериалыИУслугиГрафик = МатериалыИУслугиГрафик.Добавить();
					ДобавленныеСтроки.Добавить(НоваяСтрокаМатериалыИУслугиГрафик);
					
					НоваяСтрокаМатериалыИУслугиГрафик.ДатаПотребности = НоваяСтрокаЭтапыГрафик.НачалоПредварительногоБуфера;
					НоваяСтрокаМатериалыИУслугиГрафик.КоличествоУпаковок = СтрокаМатериалыИУслуги.КоличествоУпаковок * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаМатериалыИУслугиГрафик.Количество = СтрокаМатериалыИУслуги.Количество * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаМатериалыИУслугиГрафик.КлючСвязиПродукция = НоваяСтрокаЭтапыГрафик.КлючСвязиПродукция;
					НоваяСтрокаМатериалыИУслугиГрафик.КлючСвязиЭтапыГрафик = НоваяСтрокаЭтапыГрафик.КлючСвязи;
					НоваяСтрокаМатериалыИУслугиГрафик.КлючСвязиМатериалыИУслуги = СтрокаМатериалыИУслуги.КлючСвязи;
					
				КонецЦикла;
				
				ТрудозатратыНайденныеСтроки = Трудозатраты.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ТекущийЭтап.КлючСвязи));
				
				Для каждого СтрокаТрудозатраты Из ТрудозатратыНайденныеСтроки Цикл
					
					НоваяСтрокаТрудозатратыГрафик = ТрудозатратыГрафик.Добавить();
					ДобавленныеСтроки.Добавить(НоваяСтрокаТрудозатратыГрафик);
					
					НоваяСтрокаТрудозатратыГрафик.ДатаПотребности = НоваяСтрокаЭтапыГрафик.НачалоПредварительногоБуфера;
					НоваяСтрокаТрудозатратыГрафик.Количество = СтрокаТрудозатраты.Количество * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаТрудозатратыГрафик.КлючСвязиПродукция = НоваяСтрокаЭтапыГрафик.КлючСвязиПродукция;
					НоваяСтрокаТрудозатратыГрафик.КлючСвязиЭтапыГрафик = НоваяСтрокаЭтапыГрафик.КлючСвязи;
					НоваяСтрокаТрудозатратыГрафик.КлючСвязиТрудозатраты = СтрокаТрудозатраты.КлючСвязи;
					
				КонецЦикла;
				
				Если ГрафикЭтапа.Занятость <> Неопределено Тогда
					
					Для каждого СтрокаЗанятость Из ГрафикЭтапа.Занятость Цикл
						
						Если СтрокаЗанятость.Количество > 0 Тогда
							
							НоваяСтрокаЗанятостьВидовРабочихЦентров = ЗанятостьВидовРабочихЦентров.Добавить();
							ДобавленныеСтроки.Добавить(НоваяСтрокаЗанятостьВидовРабочихЦентров);
							
							НоваяСтрокаЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра = СтрокаЗанятость.ВидРабочегоЦентра;
							НоваяСтрокаЗанятостьВидовРабочихЦентров.ДатаИнтервала = СтрокаЗанятость.ДатаИнтервала;
							НоваяСтрокаЗанятостьВидовРабочихЦентров.Количество = СтрокаЗанятость.Количество;
							НоваяСтрокаЗанятостьВидовРабочихЦентров.КлючСвязиПродукция = НоваяСтрокаЭтапыГрафик.КлючСвязиПродукция;
							НоваяСтрокаЗанятостьВидовРабочихЦентров.КлючСвязиЭтапыГрафик = НоваяСтрокаЭтапыГрафик.КлючСвязи;
							НоваяСтрокаЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы = НоваяСтрокаЭтапыГрафик.КлючСвязиЭтапы;
							НоваяСтрокаЗанятостьВидовРабочихЦентров.НомерСтрокиПродукция = СтрокаПродукция.НомерСтроки;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполним даты запуска выходных изделий
			Для каждого СтрокаВыходныеИзделияГрафик Из СтрокиВыходныеИзделияГрафик Цикл
				
				СтрокаВыходныеИзделияГрафик.ДатаЗапуска = ДатаЗапускаЭтапов(СтрокаВыходныеИзделияГрафик.КлючСвязиПродукция, 
					СтрокаВыходныеИзделияГрафик.КлючСвязиЭтапыГрафик, 
					Этапы, 
					ЭтапыГрафик);
				
			КонецЦикла; 
			
			// Корректировка дат начала/окончания производства продукции/полуфабрикатов, включенных в заказ.
			Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу Тогда
				
				// Это полуфабрикат и необходимо скорректировать начало производства продукции
				Для каждого ПланируемаяСтрокаПродукция Из ПланируемыеСтроки Цикл
					
					Если ПланируемаяСтрокаПродукция.КлючСвязи = ПланируемаяСтрока.КлючСвязиПродукция Тогда
						
						ПланируемаяСтрокаПродукция.Начало = Макс(ПланируемаяСтрока.Окончание, ПланируемаяСтрокаПродукция.Начало);
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				// Это продукция и необходимо скорректировать окончание производства полуфабриката
				Для каждого ПланируемаяСтрокаПолуфабрикат Из ПланируемыеСтроки Цикл
					
					Если ПланируемаяСтрокаПолуфабрикат.КлючСвязиПродукция = ПланируемаяСтрока.КлючСвязи Тогда
						
						ПланируемаяСтрокаПолуфабрикат.Окончание = Мин(ПланируемаяСтрока.Начало, ПланируемаяСтрокаПолуфабрикат.Окончание);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЭтапыГрафик.Сортировать("НачалоЭтапа, ОкончаниеЭтапа", Новый СравнениеЗначений);
	
	СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.Рассчитан;
	
	РезультатРасчета = Новый Структура("Запланирован", Истина);
	
	Возврат РезультатРасчета;
	
КонецФункции

Функция ЭтапыДляРасчетаГрафика(СтрокаПродукция, Этапы, ВидыРабочихЦентров)
	
	ЭтапыДляРасчетаГрафика = Этапы.Скопировать(Новый Структура("КлючСвязиПродукция", СтрокаПродукция.КлючСвязи));
	ВидыРЦДляРасчетаГрафика = ВидыРабочихЦентров.Скопировать(Новый Структура("КлючСвязиПродукция", СтрокаПродукция.КлючСвязи));
	
	ВидыРЦДляРасчетаГрафика.Индексы.Добавить("КлючСвязиЭтапы");
	
	// Данные о периоде производства
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	// Данные видов РЦ
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("ВидыРабочихЦентров");
	
	// График работы подразделения
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	
	// Интервал планирования подразделения
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("ИнтервалПланирования", Новый ОписаниеТипов("ПеречислениеСсылка.ТочностьГрафикаПроизводства"));
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("НачалоИнтервалаПланирования", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("ОкончаниеИнтервалаПланирования", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	// Виды рабочих центров, которые встречаются в этапах
	МассивВидовРЦ = Новый Массив;
	
	Для каждого ВидРЦДляРасчетаГрафика Из ВидыРЦДляРасчетаГрафика Цикл
		
		Если МассивВидовРЦ.Найти(ВидРЦДляРасчетаГрафика.ВидРабочегоЦентра) = Неопределено Тогда
			
			МассивВидовРЦ.Добавить(ВидРЦДляРасчетаГрафика.ВидРабочегоЦентра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыВидовРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивВидовРЦ, "МинимальныйЗначимыйБуфер, Наименование");
	
	// Подразделения, которые встречаются в этапах
	МассивПодразделений = Новый Массив;
	
	// Этапы
	МассивЭтапов = Новый Массив;
	
	Для каждого ЭтапДляРасчетаГрафика Из ЭтапыДляРасчетаГрафика Цикл
		
		Если МассивПодразделений.Найти(ЭтапДляРасчетаГрафика.Подразделение) = Неопределено Тогда
			
			МассивПодразделений.Добавить(ЭтапДляРасчетаГрафика.Подразделение);
			
		КонецЕсли;
		
		Если МассивЭтапов.Найти(ЭтапДляРасчетаГрафика.Этап) = Неопределено Тогда
			
			МассивЭтапов.Добавить(ЭтапДляРасчетаГрафика.Этап);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПодразделений = ПроизводствоСервер.ПараметрыПроизводственныхПодразделений(МассивПодразделений);
	
	Для каждого ЭтапДляРасчетаГрафика Из ЭтапыДляРасчетаГрафика Цикл
		
		ПараметрыПодразделения = ПараметрыПодразделений[ЭтапДляРасчетаГрафика.Подразделение];
		
		ЭтапДляРасчетаГрафика.Начало = СтрокаПродукция.Начало;
		ЭтапДляРасчетаГрафика.Окончание = СтрокаПродукция.Окончание;
		
		ЭтапДляРасчетаГрафика.ГрафикРаботы = ?(ПараметрыПодразделения.ГрафикиРаботы.ВГраница() <> -1,
			ПараметрыПодразделения.ГрафикиРаботы[0],
			Справочники.Календари.ПустаяСсылка());
		
		ЭтапДляРасчетаГрафика.ИнтервалПланирования = ПараметрыПодразделения.ИнтервалПланирования;
		ЭтапДляРасчетаГрафика.НачалоИнтервалаПланирования = ПараметрыПодразделения.НачалоИнтервалаПланирования;
		ЭтапДляРасчетаГрафика.ОкончаниеИнтервалаПланирования = ПараметрыПодразделения.ОкончаниеИнтервалаПланирования;
		
		ЭтапДляРасчетаГрафика.ВидыРабочихЦентров = Новый Массив;
		
		Если ЭтапДляРасчетаГрафика.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ВидыРЦЭтапа = ВидыРЦДляРасчетаГрафика.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ЭтапДляРасчетаГрафика.КлючСвязи));
			
			Для каждого ВидРЦЭтапа Из ВидыРЦЭтапа Цикл
				
				ПараметрыВидаРЦ = Новый Структура;
				ПараметрыВидаРЦ.Вставить("ИнтервалПланирования", ПараметрыПодразделения.ИнтервалПланирования);
				ПараметрыВидаРЦ.Вставить("МинимальныйЗначимыйБуфер", РеквизитыВидовРЦ[ВидРЦЭтапа.ВидРабочегоЦентра].МинимальныйЗначимыйБуфер);
				ПараметрыВидаРЦ.Вставить("УчитыватьДоступностьПоГрафикуРаботы", ВидРЦЭтапа.УчитыватьДоступностьПоГрафикуРаботы);
				ПараметрыВидаРЦ.Вставить("ВидРабочегоЦентра", ВидРЦЭтапа.ВидРабочегоЦентра);
				ПараметрыВидаРЦ.Вставить("НаименованиеВидаРабочегоЦентра", РеквизитыВидовРЦ[ВидРЦЭтапа.ВидРабочегоЦентра].Наименование);
				ПараметрыВидаРЦ.Вставить("ВремяРаботы", ВидРЦЭтапа.ВремяРаботы);
				ПараметрыВидаРЦ.Вставить("ЕдиницаИзмерения", ВидРЦЭтапа.ЕдиницаИзмерения);
				
				ЭтапДляРасчетаГрафика.ВидыРабочихЦентров.Добавить(ПараметрыВидаРЦ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭтапыДляРасчетаГрафика;
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Параметры:
//  ТекущиеДела - см. ТекущиеДелаСервер.ТекущиеДела
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность = ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказНаПроизводство)
		И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	ДелоЗаказыНаПроизводствоОжидающиеПередачиВПроизводство(ТекущиеДела, ОбщиеПараметрыЗапросов);
	ДелоЗаказыНаПроизводствоСНедействующимиСпецификациями(ТекущиеДела, ОбщиеПараметрыЗапросов);
	
КонецПроцедуры

Процедура ДелоЗаказыНаПроизводствоОжидающиеПередачиВПроизводство(ТекущиеДела, ОбщиеПараметрыЗапросов)

	ИмяФормы = "Документ.ЗаказНаПроизводство.ФормаСписка";
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК ЗаказыНаПроизводствоОжидающиеПередачиВПроизводство
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан)
	|	И ЗаказНаПроизводство.Проведен";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ЗаказыНаПроизводство
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор = "ЗаказыНаПроизводство";
	ДелоРодитель.Представление = НСтр("ru = 'Заказы на производство';
										|en = 'Production orders'");
	ДелоРодитель.ЕстьДела = Результат.ЗаказыНаПроизводствоОжидающиеПередачиВПроизводство > 0;
	ДелоРодитель.Владелец = Метаданные.Подсистемы.Производство;
	
	// ЗаказыНаПроизводствоОжидающиеПередачиВПроизводство
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Статус", Перечисления.СтатусыЗаказовНаПроизводство.Создан);
	ПараметрыОтбора.Вставить("Приоритет", Справочники.Приоритеты.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Ответственный", Справочники.Пользователи.ПустаяСсылка());
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор = "ЗаказыНаПроизводствоОжидающиеПередачиВПроизводство";
	Дело.ЕстьДела = Результат.ЗаказыНаПроизводствоОжидающиеПередачиВПроизводство > 0;
	Дело.Представление = НСтр("ru = 'Ожидающие передачи в производство';
								|en = 'Awaiting transfer to production'");
	Дело.Количество = Результат.ЗаказыНаПроизводствоОжидающиеПередачиВПроизводство;
	Дело.Важное = Ложь;
	Дело.Форма = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец = "ЗаказыНаПроизводство";
	
КонецПроцедуры

Процедура ДелоЗаказыНаПроизводствоСНедействующимиСпецификациями(ТекущиеДела, ОбщиеПараметрыЗапросов)
	
	ИмяФормы = "Документ.ЗаказНаПроизводство.Форма.ЗаменаНедействующихСпецификаций";
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТМатериалыИУслуги.Ссылка КАК Ссылка,
	|	ТМатериалыИУслуги.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	РесурсныеСпецификации.НачалоДействия КАК НачалоДействия,
	|	РесурсныеСпецификации.КонецДействия КАК КонецДействия,
	|	РесурсныеСпецификации.Статус КАК Статус
	|ПОМЕСТИТЬ ВТМатериалыИУслуги
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|		ПО ТМатериалыИУслуги.ИсточникПолученияПолуфабриката = РесурсныеСпецификации.Ссылка
	|ГДЕ
	|	ТМатериалыИУслуги.Ссылка.Проведен
	|	И ТМатериалыИУслуги.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ТаблицаПродукция.НомерСтроки) КАК ЗаказыНаПроизводствоСНедействующимиСпецификациями
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|ГДЕ
	|	(ТаблицаПродукция.Спецификация.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			ИЛИ ТаблицаПродукция.Спецификация.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности < ТаблицаПродукция.Спецификация.НачалоДействия
	|			ИЛИ ТаблицаПродукция.Спецификация.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности > ТаблицаПродукция.Спецификация.КонецДействия
	|			ИЛИ ТаблицаПродукция.Спецификация.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее < ТаблицаПродукция.Спецификация.НачалоДействия
	|			ИЛИ ТаблицаПродукция.Спецификация.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее >= ТаблицаПродукция.Спецификация.КонецДействия)
	|	И ТаблицаПродукция.Ссылка.Проведен
	|	И ТаблицаПродукция.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТаблицаПродукция.НомерСтроки)
	|ИЗ
	|	ВТМатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.КлючСвязи = ТаблицаМатериалыИУслуги.КлючСвязиПродукция)
	|			И (ТаблицаПродукция.Ссылка = ТаблицаМатериалыИУслуги.Ссылка)
	|ГДЕ
	|	(ТаблицаМатериалыИУслуги.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			ИЛИ ТаблицаМатериалыИУслуги.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности < ТаблицаМатериалыИУслуги.НачалоДействия
	|			ИЛИ ТаблицаМатериалыИУслуги.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности > ТаблицаМатериалыИУслуги.КонецДействия
	|			ИЛИ ТаблицаМатериалыИУслуги.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее < ТаблицаМатериалыИУслуги.НачалоДействия
	|			ИЛИ ТаблицаМатериалыИУслуги.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее >= ТаблицаМатериалыИУслуги.КонецДействия)";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ЗаказыНаПроизводство
	ДелоРодитель = ТекущиеДела.Найти("ЗаказыНаПроизводство", "Идентификатор");
	
	// ЗаказыНаПроизводствоСНедействующимиСпецификациями
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Ответственный", Справочники.Пользователи.ПустаяСсылка());
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор = "ЗаказыНаПроизводствоСНедействующимиСпецификациями";
	Дело.ЕстьДела = Результат.ЗаказыНаПроизводствоСНедействующимиСпецификациями > 0;
	Дело.Представление = НСтр("ru = 'Заказы с недействующими спецификациями';
								|en = 'Orders with invalid BOMs'");
	Дело.Количество = Результат.ЗаказыНаПроизводствоСНедействующимиСпецификациями;
	Дело.Важное = Ложь;
	Дело.Форма = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец = "ЗаказыНаПроизводство";
	
	Если Результат.ЗаказыНаПроизводствоСНедействующимиСпецификациями > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводствоПоЗаказуДавальца

//++ Устарело_Переработка24

// Формирует результат запроса по непоставленной части заказов
//
// Параметры:
//	ЗаказДавальца - ДокументСсылка.ЗаказДавальца - Заказ давальца, для которого необходимо создать/перезаполнить заказ на производство продукции по заказу давальца.
//	ТекущийДокумент - ДокументСсылка.ЗаказНаПроизводство - Заказ на производство, который необходимо перезаполнить продукцией.
//
// Возвращаемое значение:
//	Результат запроса - результат запроса для заполнения табличной части продукции заказа на производство по заказу давальца.
//
Функция ПолучитьРезультатЗапросаПоОстаткамПродукцииКОбеспечениюДавальцу(ЗаказДавальца, ТекущийДокумент = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказДавальца, "Назначение");
	
	Назначение = Неопределено;
	Если РеквизитыЗаказа <> Неопределено Тогда
		Назначение = РеквизитыЗаказа.Назначение;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Набор.Назначение        КАК Назначение,
		|	Набор.Номенклатура      КАК Номенклатура,
		|	Набор.Характеристика    КАК Характеристика,
		|	Набор.Склад             КАК Склад,
		|	СУММА(Набор.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтОстатки
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТаблицаОстатков.Назначение     КАК Назначение,
		|		ТаблицаОстатков.Номенклатура   КАК Номенклатура,
		|		ТаблицаОстатков.Характеристика КАК Характеристика,
		|		ТаблицаОстатков.Склад          КАК Склад,
		|		ТаблицаОстатков.НеОбеспечено   КАК Количество
		|	ИЗ
		|		РегистрСведений.РаспределениеЗапасов КАК ТаблицаОстатков
		|	ГДЕ
		|		ТаблицаОстатков.Назначение = &Назначение
		|			И ТаблицаОстатков.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Движения.Назначение КАК Назначение,
		|		Движения.Номенклатура КАК Номенклатура,
		|		Движения.Характеристика КАК Характеристика,
		|		Движения.Склад КАК Склад,
		|		ВЫБОР
		|			КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА Движения.Заказано
		|			ИНАЧЕ -Движения.Заказано
		|		КОНЕЦ КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ЗапасыИПотребности КАК Движения
		|	ГДЕ
		|		Движения.Активность
		|			И Движения.Назначение  = &Назначение
		|			И Движения.Регистратор = &ТекущийДокумент) КАК Набор
		|	
		|СГРУППИРОВАТЬ ПО
		|	Набор.Назначение, Набор.Номенклатура, Набор.Характеристика, Набор.Склад
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) > 0
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Назначение     КАК Назначение,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Количество     КАК Количество,
		|	Таблица.Количество / МАКСИМУМ(ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)) КАК КоличествоУпаковок,
		|	
		|	МАКСИМУМ(ЗаказТовары.Спецификация) КАК Спецификация,
		|	МАКСИМУМ(ЗаказТовары.Упаковка)     КАК Упаковка,
		|	
		|	МИНИМУМ(ЗаказТовары.ДатаОтгрузки) КАК ДатаПотребности,
		|	
		|	ЛОЖЬ               КАК ИзмененияЗапрещены,
		|	&РазмещениеВыпуска КАК РазмещениеВыпуска,
		|	&НачатьНеРанее     КАК НачатьНеРанее
		|ИЗ
		|	ВтОстатки КАК Таблица
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца.Продукция КАК ЗаказТовары
		|		ПО ЗаказТовары.Ссылка = &ЗаказДавальца
		|		 И ЗаказТовары.Номенклатура      = Таблица.Номенклатура
		|		 И ЗаказТовары.Характеристика    = Таблица.Характеристика
		|		 И ЗаказТовары.Склад             = Таблица.Склад
		|ГДЕ
		|	НЕ ЗаказТовары.Ссылка ЕСТЬ NULL
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Назначение, Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад, Таблица.Количество";
	
	Подстановка = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ЗаказТовары.Упаковка", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки", Подстановка);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Назначение",        Назначение);
	Запрос.УстановитьПараметр("ЗаказДавальца",     ЗаказДавальца);
	Запрос.УстановитьПараметр("НачатьНеРанее",     НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("РазмещениеВыпуска", Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу);
	Запрос.УстановитьПараметр("ТекущийДокумент",   ТекущийДокумент);
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции
//-- Устарело_Переработка24

// Создает временную таблицу ВтСпособыПолученияМатериалов
//
// Параметры:
//  Объект					 - ДокументОбъект.ЗаказНаПроизводство, ОбработкаОбъект.РедактированиеСпецификацииЗаказа	 - объект
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц																 - менеджер временных таблиц.
//
// Возвращаемое значение:
//   - МенеджерВременныхТаблиц - менеджер временных таблиц.
//
Функция СоздатьВтСпособыПолученияМатериалов(Объект, МенеджерВременныхТаблиц = Неопределено) Экспорт

	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	//++ Устарело_Переработка24
	Если Объект.ПроизводствоПоЗаказу 
		И ЗначениеЗаполнено(Объект.Заказ) 
		И ЗначениеЗаполнено(Объект.Назначение) Тогда
		
		Документы.ЗаказДавальца.СоздатьВтСпособыПолученияМатериалов2_1ДляЗаказа(
			МенеджерВременныхТаблиц, 
			Объект.Заказ);
		
	Иначе
	//-- Устарело_Переработка24
		ТекстЗапроса = ОбеспечениеПроизводства.ТекстЗапросаВТСпособыПолученияМатериаловПустая();
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	//++ Устарело_Переработка24
	КонецЕсли;
	//-- Устарело_Переработка24
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Вызывается при заполнении варианта обеспечения.
// Удаляет данные которые относятся к полуфабрикатам:
// - если не используются корректировки и выбраны разные варианты для одной строки (это приводит к разбиению строки)
// - если вариант обеспечения не обособленный.
//
Процедура УдалитьНедопустимыеДанныеЗаполнения(Товары, РазрешеноРазбиватьСтроки, ДанныеЗаполнения) Экспорт
	
	СтрокиПолуфабрикатов = Новый Соответствие;
	ИдентификаторыСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл
		Идентификатор = СтрокаОбеспечения.Идентификатор;
		Если ИдентификаторыСтрокКУдалению.Найти(Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТовары = Товары.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаТовары.ПроизводитсяВПроцессе Тогда
			
			Если НЕ РазрешеноРазбиватьСтроки
					И СтрокиПолуфабрикатов.Получить(СтрокаТовары.НомерСтроки) <> Неопределено
						Или ДанныеЗаполнения.Колонки.Найти("Обособленно") <> Неопределено И СтрокаОбеспечения.Обособленно Тогда 
					
				Если ИдентификаторыСтрокКУдалению.Найти(Идентификатор) = Неопределено Тогда
					ИдентификаторыСтрокКУдалению.Добавить(Идентификатор);
				КонецЕсли; 
				
			КонецЕсли;
			
			Если НЕ РазрешеноРазбиватьСтроки Тогда
				СтрокиПолуфабрикатов.Вставить(СтрокаТовары.НомерСтроки, 1);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторыСтрокКУдалению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив; 
	Для каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл
		Если ИдентификаторыСтрокКУдалению.Найти(СтрокаОбеспечения.Идентификатор) <> Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаОбеспечения);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого СтрокаОбеспечения Из СтрокиКУдалению Цикл
		ДанныеЗаполнения.Удалить(СтрокаОбеспечения);
	КонецЦикла; 

КонецПроцедуры

Функция СпецификацияДействует(ЗначенияРеквизитов, ДанныеСтроки)
	
	Если ЗначенияРеквизитов.НачалоДействия <> '000101010000'
			И ДанныеСтроки.ДатаПотребности < ЗначенияРеквизитов.НачалоДействия
		ИЛИ ЗначенияРеквизитов.КонецДействия <> '000101010000'
			И ДанныеСтроки.ДатаПотребности > ЗначенияРеквизитов.КонецДействия
		ИЛИ ЗначенияРеквизитов.НачалоДействия <> '000101010000'
			И ДанныеСтроки.НачатьНеРанее < ЗначенияРеквизитов.НачалоДействия
		ИЛИ ЗначенияРеквизитов.КонецДействия <> '000101010000'
			И ДанныеСтроки.НачатьНеРанее >= ЗначенияРеквизитов.КонецДействия Тогда
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	Возврат Истина
	
КонецФункции

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ЗаказНаПроизводство";
КонецФункции

#КонецОбласти

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутнаяКартаНаПродукцию") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"МаршрутнаяКартаНаПродукцию", 
			НСтр("ru = 'Маршрутная карта на продукцию';
				|en = 'Operations sheet for products'"), 
			ПечатнаяФормаМаршрутнойКартыНаПродукцию(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДиаграммаГрафикаПроизводства") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ДиаграммаГрафикаПроизводства", 
			НСтр("ru = 'График производства';
				|en = 'Production schedule'"), 
			ПечатнаяФормаГрафикаПроизводства(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатнаяФормаМаршрутнойКартыНаПродукцию(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаПроизводство.ПФ_MXL_МаршрутнаяКартаНаПродукцию");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьМаршрутныхКартНаПродукцию_МаршрутнаяКартаНаПродукцию";
	
	ТаблицаПродукции = Новый ТаблицаЗначений;
	ТаблицаПродукции.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаПродукции.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ТаблицаПродукции.Колонки.Добавить("ЭтоПолуфабрикат", Новый ОписаниеТипов("Булево"));
	Для каждого ДанныеОПродукции Из ПараметрыПечати.ДанныеДляПечати Цикл
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеОПродукции);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ КАК Заказ,
	|	ТаблицаПродукции.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукции.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат
	|ПОМЕСТИТЬ ТаблицаПродукции
	|ИЗ
	|	&ТаблицаПродукции КАК ТаблицаПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1 Шапка
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Заказ,
	|	ТаблицаПродукция.КодСтроки,
	|	ТаблицаПродукция.НомерСтроки,
	|	ТаблицаПродукция.Распоряжение,
	|	ТаблицаПродукция.Номер,
	|	ТаблицаПродукция.Дата,
	|	ТаблицаПродукция.Спецификация,
	|	ТаблицаПродукция.Спецификация.Представление КАК СпецификацияПредставление,
	|	ТаблицаПродукция.Спецификация.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	ТаблицаПродукция.Спецификация.ПечатьМаршрутнойКарты КАК ПечатьМаршрутнойКарты,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Номенклатура.Представление КАК НоменклатураПредставление,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаПродукция.Упаковка.Представление
	|		ИНАЧЕ ТаблицаПродукция.Номенклатура.ЕдиницаИзмерения.Представление
	|	КОНЕЦ КАК ЕдИзм,
	|	ТаблицаПродукция.Запланировано,
	|	ТаблицаПродукция.ЭтоПолуфабрикат,
	|	ТаблицаПродукция.Начало,
	|	ТаблицаПродукция.Окончание
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПродукции.Заказ КАК Заказ,
	|		ЗаказПродукция.КодСтроки КАК КодСтроки,
	|		ЗаказПродукция.НомерСтроки КАК НомерСтроки,
	|		ЗаказПродукция.Ссылка КАК Распоряжение,
	|		ЗаказПродукция.Ссылка.Номер КАК Номер,
	|		ЗаказПродукция.Ссылка.Дата КАК Дата,
	|		ЗаказПродукция.Спецификация КАК Спецификация,
	|		ЗаказПродукция.Номенклатура КАК Номенклатура,
	|		ЗаказПродукция.Характеристика КАК Характеристика,
	|		ЗаказПродукция.КоличествоУпаковок КАК Запланировано,
	|		ЗаказПродукция.Упаковка КАК Упаковка,
	|		ЛОЖЬ КАК ЭтоПолуфабрикат,
	|		МИНИМУМ(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера) КАК Начало,
	|		МАКСИМУМ(ЗаказЭтапыГрафик.ОкончаниеЗавершающегоБуфера) КАК Окончание
	|	ИЗ
	|		ТаблицаПродукции КАК ТаблицаПродукции
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|			ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|				И (ЗаказПродукция.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|			ПО (ЗаказЭтапыГрафик.Ссылка = ЗаказПродукция.Ссылка)
	|				И (ЗаказЭтапыГрафик.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|	ГДЕ
	|		НЕ ТаблицаПродукции.ЭтоПолуфабрикат
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПродукции.Заказ,
	|		ЗаказПродукция.КодСтроки,
	|		ЗаказПродукция.НомерСтроки,
	|		ЗаказПродукция.Ссылка,
	|		ЗаказПродукция.Спецификация,
	|		ЗаказПродукция.Номенклатура,
	|		ЗаказПродукция.Характеристика,
	|		ЗаказПродукция.КоличествоУпаковок,
	|		ЗаказПродукция.Ссылка.Номер,
	|		ЗаказПродукция.Ссылка.Дата,
	|		ЗаказПродукция.Упаковка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаПродукции.Заказ,
	|		ЗаказПродукция.КодСтроки,
	|		ЗаказВыходныеИзделия.НомерСтроки,
	|		ЗаказПродукция.Ссылка,
	|		ЗаказПродукция.Ссылка.Номер,
	|		ЗаказПродукция.Ссылка.Дата,
	|		МАКСИМУМ(ЗаказЭтапы.Этап.Владелец),
	|		ЗаказВыходныеИзделия.Номенклатура,
	|		ЗаказВыходныеИзделия.Характеристика,
	|		ЗаказВыходныеИзделия.КоличествоУпаковок,
	|		ЗаказВыходныеИзделия.Упаковка,
	|		ИСТИНА,
	|		МИНИМУМ(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера),
	|		МАКСИМУМ(ЗаказЭтапыГрафик.ОкончаниеЗавершающегоБуфера)
	|	ИЗ
	|		ТаблицаПродукции КАК ТаблицаПродукции
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказВыходныеИзделия
	|			ПО (ЗаказВыходныеИзделия.Ссылка = ТаблицаПродукции.Заказ)
	|				И (ЗаказВыходныеИзделия.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|			ПО (ЗаказПродукция.Ссылка = ЗаказВыходныеИзделия.Ссылка)
	|				И (ЗаказПродукция.КлючСвязи = ЗаказВыходныеИзделия.КлючСвязиПродукция)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|			ПО (ЗаказЭтапы.Ссылка = ЗаказПродукция.Ссылка)
	|				И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|				И (ЗаказЭтапы.КлючСвязиПолуфабрикат <> &ПустойКлючСвязи)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|			ПО (ЗаказЭтапыГрафик.Ссылка = ЗаказЭтапы.Ссылка)
	|				И (ЗаказЭтапыГрафик.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|	ГДЕ
	|		ТаблицаПродукции.ЭтоПолуфабрикат
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПродукции.Заказ,
	|		ЗаказПродукция.КодСтроки,
	|		ЗаказВыходныеИзделия.НомерСтроки,
	|		ЗаказПродукция.Ссылка,
	|		ЗаказПродукция.Ссылка.Номер,
	|		ЗаказПродукция.Ссылка.Дата,
	|		ЗаказВыходныеИзделия.Номенклатура,
	|		ЗаказВыходныеИзделия.Характеристика,
	|		ЗаказВыходныеИзделия.КоличествоУпаковок,
	|		ЗаказВыходныеИзделия.Упаковка) КАК ТаблицаПродукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукция.Заказ,
	|	ТаблицаПродукция.КодСтроки,
	|	ТаблицаПродукция.ЭтоПолуфабрикат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2 Этапы
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказПродукция.НомерСтроки,
	|	ЛОЖЬ КАК ЭтоПолуфабрикат,
	|	ЗаказЭтапы.Этап КАК Этап,
	|	ЗаказЭтапы.Этап.Представление КАК ЭтапПредставление,
	|	ЗаказЭтапы.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьОперации КАК ИспользоватьОперации,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьВыходныеИзделия КАК ИспользоватьВыходныеИзделия,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьМатериалы КАК ИспользоватьМатериалы,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьТрудозатраты КАК ИспользоватьТрудозатраты,
	|	ЗаказЭтапы.НомерЭтапа КАК НомерЭтапа,
	|	ЗаказЭтапы.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|	ЗаказЭтапы.Этап.Подразделение КАК Подразделение,
	|	ЗаказЭтапы.Этап.Подразделение.Код КАК ПодразделениеКод,
	|	ЗаказЭтапы.Количество КАК Количество,
	|	МИНИМУМ(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера) КАК НачатьНеРаньше,
	|	МАКСИМУМ(ЗаказЭтапыГрафик.ОкончаниеЗавершающегоБуфера) КАК ЗавершитьНеПозже
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказПродукция.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = &ПустойКлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|		ПО (ЗаказЭтапыГрафик.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ЗаказЭтапыГрафик.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|ГДЕ
	|	НЕ ТаблицаПродукции.ЭтоПолуфабрикат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукции.Заказ,
	|	ЗаказПродукция.НомерСтроки,
	|	ЗаказЭтапы.Этап,
	|	ЗаказЭтапы.Этап.Представление,
	|	ЗаказЭтапы.МаршрутнаяКарта,
	|	ЗаказЭтапы.НомерЭтапа,
	|	ЗаказЭтапы.НомерСледующегоЭтапа,
	|	ЗаказЭтапы.Этап.Подразделение,
	|	ЗаказЭтапы.Этап.Подразделение.Код,
	|	ЗаказЭтапы.Количество,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьОперации,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьВыходныеИзделия,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьМатериалы,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьТрудозатраты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказВыходныеИзделия.НомерСтроки,
	|	ИСТИНА,
	|	ЗаказЭтапы.Этап,
	|	ЗаказЭтапы.Этап.Представление,
	|	ЗаказЭтапы.МаршрутнаяКарта,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьОперации,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьВыходныеИзделия,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьМатериалы,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьТрудозатраты,
	|	ЗаказЭтапы.НомерЭтапа,
	|	ЗаказЭтапы.НомерСледующегоЭтапа,
	|	ЗаказЭтапы.Этап.Подразделение,
	|	ЗаказЭтапы.Этап.Подразделение.Код,
	|	ЗаказЭтапы.Количество,
	|	МИНИМУМ(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера),
	|	МАКСИМУМ(ЗаказЭтапыГрафик.ОкончаниеЗавершающегоБуфера)
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказВыходныеИзделия
	|		ПО (ЗаказВыходныеИзделия.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказВыходныеИзделия.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказВыходныеИзделия.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = ЗаказВыходныеИзделия.КлючСвязиПолуфабрикат)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|		ПО (ЗаказЭтапыГрафик.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ЗаказЭтапыГрафик.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ЗаказВыходныеИзделия.Ссылка)
	|			И (ЗаказПродукция.КлючСвязи = ЗаказВыходныеИзделия.КлючСвязиПродукция)
	|ГДЕ
	|	ТаблицаПродукции.ЭтоПолуфабрикат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукции.Заказ,
	|	ЗаказВыходныеИзделия.НомерСтроки,
	|	ЗаказЭтапы.Этап,
	|	ЗаказЭтапы.Этап.Представление,
	|	ЗаказЭтапы.МаршрутнаяКарта,
	|	ЗаказЭтапы.НомерЭтапа,
	|	ЗаказЭтапы.НомерСледующегоЭтапа,
	|	ЗаказЭтапы.Этап.Подразделение,
	|	ЗаказЭтапы.Этап.Подразделение.Код,
	|	ЗаказЭтапы.Количество,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьОперации,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьВыходныеИзделия,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьМатериалы,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьТрудозатраты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3 ВыходныеИзделия
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказПродукция.НомерСтроки,
	|	ЛОЖЬ КАК ЭтоПолуфабрикат,
	|	ТаблицаВыходныеИзделия.Номенклатура,
	|	ТаблицаВыходныеИзделия.Номенклатура.Код КАК НоменклатураКод,
	|	ТаблицаВыходныеИзделия.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ТаблицаВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ТаблицаВыходныеИзделия.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ТаблицаВыходныеИзделия.Характеристика.Наименование КАК ХарактеристикаПредставление,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения1 КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказЭтапы.НомерЭтапа КАК НомерЭтапа,
	|	ЗаказЭтапы.Этап КАК Этап
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказПродукция.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = &ПустойКлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
	|		ПО (ТаблицаВыходныеИзделия.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ТаблицаВыходныеИзделия.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|ГДЕ
	|	НЕ ТаблицаПродукции.ЭтоПолуфабрикат
	|	И (ЗаказЭтапы.Этап.Владелец.ПечатьМаршрутнойКарты = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиМаршрутнойКартыНаПродукцию.ПоЭтапам)
	|			ИЛИ НЕ ЕСТЬNULL(ЗаказЭтапы.Этап.МаршрутнаяКарта.ИспользоватьВыходныеИзделия, ИСТИНА))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказПродукция.НомерСтроки,
	|	ЛОЖЬ,
	|	ТаблицаВозвратныеОтходы.Номенклатура,
	|	ТаблицаВозвратныеОтходы.Номенклатура.Код,
	|	ТаблицаВозвратныеОтходы.Номенклатура.Артикул,
	|	ТаблицаВозвратныеОтходы.Номенклатура,
	|	ТаблицаВозвратныеОтходы.Номенклатура.НаименованиеПолное,
	|	ТаблицаВозвратныеОтходы.Характеристика.Наименование,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения2,
	|	ТаблицаВозвратныеОтходы.КоличествоУпаковок,
	|	ЗаказЭтапы.НомерЭтапа,
	|	ЗаказЭтапы.Этап
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказПродукция.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = &ПустойКлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ТаблицаВозвратныеОтходы
	|		ПО (ТаблицаВозвратныеОтходы.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ТаблицаВозвратныеОтходы.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|ГДЕ
	|	НЕ ТаблицаПродукции.ЭтоПолуфабрикат
	|	И (ЗаказЭтапы.Этап.Владелец.ПечатьМаршрутнойКарты = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиМаршрутнойКартыНаПродукцию.ПоЭтапам)
	|			ИЛИ НЕ ЕСТЬNULL(ЗаказЭтапы.Этап.МаршрутнаяКарта.ИспользоватьВыходныеИзделия, ИСТИНА))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказВыходныеИзделия.НомерСтроки,
	|	ИСТИНА,
	|	ТаблицаВыходныеИзделия.Номенклатура,
	|	ТаблицаВыходныеИзделия.Номенклатура.Код,
	|	ТаблицаВыходныеИзделия.Номенклатура.Артикул,
	|	ТаблицаВыходныеИзделия.Номенклатура,
	|	ТаблицаВыходныеИзделия.Номенклатура.НаименованиеПолное,
	|	ТаблицаВыходныеИзделия.Характеристика.Наименование,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения1,
	|	ТаблицаВыходныеИзделия.КоличествоУпаковок,
	|	ЗаказЭтапы.НомерЭтапа,
	|	ЗаказЭтапы.Этап
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказВыходныеИзделия
	|		ПО (ЗаказВыходныеИзделия.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказВыходныеИзделия.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказВыходныеИзделия.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = ЗаказВыходныеИзделия.КлючСвязиПолуфабрикат)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
	|		ПО (ТаблицаВыходныеИзделия.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ТаблицаВыходныеИзделия.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|ГДЕ
	|	ТаблицаПродукции.ЭтоПолуфабрикат
	|	И (ЗаказЭтапы.Этап.Владелец.ПечатьМаршрутнойКарты = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиМаршрутнойКартыНаПродукцию.ПоЭтапам)
	|			ИЛИ НЕ ЕСТЬNULL(ЗаказЭтапы.Этап.МаршрутнаяКарта.ИспользоватьВыходныеИзделия, ИСТИНА))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4 МатериалыИУслуги
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказПродукция.НомерСтроки,
	|	ЛОЖЬ КАК ЭтоПолуфабрикат,
	|	ТаблицаМатериалыИУслуги.Номенклатура,
	|	ТаблицаМатериалыИУслуги.Номенклатура.Код КАК НоменклатураКод,
	|	ТаблицаМатериалыИУслуги.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ТаблицаМатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалыИУслуги.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ТаблицаМатериалыИУслуги.Характеристика.Наименование КАК ХарактеристикаПредставление,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения3 КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаМатериалыИУслуги.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказЭтапы.НомерЭтапа КАК НомерЭтапа,
	|	ЗаказЭтапы.Этап КАК Этап
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказПродукция.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = &ПустойКлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ПО (ТаблицаМатериалыИУслуги.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ТаблицаМатериалыИУслуги.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|ГДЕ
	|	НЕ ТаблицаПродукции.ЭтоПолуфабрикат
	|	И (ЗаказЭтапы.Этап.Владелец.ПечатьМаршрутнойКарты = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиМаршрутнойКартыНаПродукцию.ПоЭтапам)
	|			ИЛИ НЕ ЕСТЬNULL(ЗаказЭтапы.Этап.МаршрутнаяКарта.ИспользоватьМатериалы, ИСТИНА))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказВыходныеИзделия.НомерСтроки,
	|	ИСТИНА,
	|	ТаблицаМатериалыИУслуги.Номенклатура,
	|	ТаблицаМатериалыИУслуги.Номенклатура.Код,
	|	ТаблицаМатериалыИУслуги.Номенклатура.Артикул,
	|	ТаблицаМатериалыИУслуги.Номенклатура,
	|	ТаблицаМатериалыИУслуги.Номенклатура.НаименованиеПолное,
	|	ТаблицаМатериалыИУслуги.Характеристика.Наименование,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения3,
	|	ТаблицаМатериалыИУслуги.КоличествоУпаковок,
	|	ЗаказЭтапы.НомерЭтапа,
	|	ЗаказЭтапы.Этап
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказВыходныеИзделия
	|		ПО (ЗаказВыходныеИзделия.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказВыходныеИзделия.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказВыходныеИзделия.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = ЗаказВыходныеИзделия.КлючСвязиПолуфабрикат)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ПО (ТаблицаМатериалыИУслуги.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ТаблицаМатериалыИУслуги.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|ГДЕ
	|	ТаблицаПродукции.ЭтоПолуфабрикат
	|	И (ЗаказЭтапы.Этап.Владелец.ПечатьМаршрутнойКарты = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиМаршрутнойКартыНаПродукцию.ПоЭтапам)
	|			ИЛИ НЕ ЕСТЬNULL(ЗаказЭтапы.Этап.МаршрутнаяКарта.ИспользоватьМатериалы, ИСТИНА))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаВыходныеИзделия.Упаковка",
			"ТаблицаВыходныеИзделия.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаВозвратныеОтходы.Упаковка",
			"ТаблицаВозвратныеОтходы.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаМатериалыИУслуги.Упаковка",
			"ТаблицаМатериалыИУслуги.Номенклатура"));
	
	Запрос.УстановитьПараметр("ТаблицаПродукции", ТаблицаПродукции);
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МаршрутныйЛистПроизводства_МаршрутныйЛист";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеПечати = МассивРезультатов[1].Выбрать();
	ТаблицаЭтапы = МассивРезультатов[2].Выгрузить();
	ТаблицаВыходныеИзделия = МассивРезультатов[3].Выгрузить();
	ТаблицаМатериалыИУслуги = МассивРезультатов[4].Выгрузить();
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	
	ПервыйДокумент = Истина;
	ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим общие реквизиты шапки
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		
		// Используем структуру для заполнения параметров, т.к. макет может изменяться пользователем.
		ДополнительныеПараметрыОбластьМакета = Новый Структура;
		
		Если ДанныеПечати.ЭтоПолуфабрикат Тогда
			ТекстЗаголовка = НСтр("ru = 'Маршрутная карта на полуфабрикат';
									|en = 'Operations sheet for semi-finished product'");
			ЗаголовокИзделия = НСтр("ru = 'Полуфабрикат:';
									|en = 'Semi-finished product:'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Маршрутная карта на продукцию';
									|en = 'Operations sheet for products'");
			ЗаголовокИзделия = НСтр("ru = 'Продукция:';
									|en = 'Products:'");
		КонецЕсли;
		
		ДополнительныеПараметрыОбластьМакета.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДополнительныеПараметрыОбластьМакета.Вставить("ЗаголовокИзделия", ЗаголовокИзделия);
		
		// РаспоряжениеПредставление
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер);
		РаспоряжениеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '№%1 от %2 (код строки %3)';
				|en = 'No. %1 from %2 (line code %3)'"),
			НомерДокумента,
			Формат(ДанныеПечати.Дата, "ДЛФ=D"),
			Формат(ДанныеПечати.КодСтроки, "ЧГ="));
		
		ДополнительныеПараметрыОбластьМакета.Вставить("РаспоряжениеПредставление", РаспоряжениеПредставление);
		
		ИзделиеПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			ДанныеПечати.НоменклатураПредставление, 
			ДанныеПечати.ХарактеристикаПредставление,
			,
			,
			ДопПараметрыПредставлениеНоменклатуры);
		ДополнительныеПараметрыОбластьМакета.Вставить("ИзделиеПредставление", ИзделиеПредставление);
		
		СсылкаОбластьПечати = ИзделиеПредставление + "_"
			+ ДанныеПечати.СпецификацияПредставление + "_"
			+ РаспоряжениеПредставление;
		
		Если Минута(ДанныеПечати.Начало) = 0 
			И Час(ДанныеПечати.Начало) = 0 
			И Минута(ДанныеПечати.Окончание) = 59 
			И Час(ДанныеПечати.Окончание) = 23 Тогда
			
			ФорматПериода = "ДЛФ=D";
		Иначе
			ФорматПериода = "ДФ='dd.MM.yy ЧЧ:мм'";
		КонецЕсли;
		
		НачатьНеРаньше = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(не раньше %1)';
				|en = '(not earlier than %1)'"),
			Формат(ДанныеПечати.Начало, ФорматПериода));
		
		ДополнительныеПараметрыОбластьМакета.Вставить("НачатьНеРаньше", НачатьНеРаньше);
		
		СрокНеПозже = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(не позже %1)';
				|en = '(not later than %1)'"),
			Формат(ДанныеПечати.Окончание, ФорматПериода));
		
		ДополнительныеПараметрыОбластьМакета.Вставить("СрокНеПозже", СрокНеПозже);
		
		ОбластьМакета.Параметры.Заполнить(ДополнительныеПараметрыОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерСтраницы = 1;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		Если ДанныеПечати.ПечатьМаршрутнойКарты = Перечисления.ВариантыПечатиМаршрутнойКартыНаПродукцию.ПоЭтапам Тогда
			
			#Область Печать_по_этапам
			// ВыходныеИзделия
			ПараметрыВывода = Новый Структура;
			ПараметрыВывода.Вставить("ПолучитьПредставлениеНоменклатурыДляПечати");
			ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "ВыходныеИзделия");
			ПараметрыВывода.Вставить("КолонкаКодов", ИмяКолонкиКодов);
			ПараметрыВывода.Вставить("ПредставлениеКолонкиКодов", ПредставлениеКолонкиКодов);
			
			СтруктураПоиска = Новый Структура("Заказ,НомерСтроки,ЭтоПолуфабрикат");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПечати);
			ВыборкаПоТабличнойЧасти = ТаблицаВыходныеИзделия.Скопировать(СтруктураПоиска);
			ВыборкаПоТабличнойЧасти.Сортировать("НомерСтроки");
			ВывестиТабличнуюЧасть(ПараметрыВывода, 
				СтруктураПоиска, 
				ВыборкаПоТабличнойЧасти, 
				Макет, 
				МассивВыводимыхОбластей, 
				НомерСтраницы,
				0, 
				Истина,
				ТабличныйДокумент);
			
			// Этапы
			ПараметрыВывода = Новый Структура;
			ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "Этапы");
			
			СтруктураПоиска = Новый Структура("Заказ,НомерСтроки,ЭтоПолуфабрикат");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПечати);
			ВыборкаПоТабличнойЧасти = ТаблицаЭтапы.Скопировать(СтруктураПоиска);
			ВыборкаПоТабличнойЧасти.Сортировать("НомерЭтапа, НачатьНеРаньше");
			ВывестиТабличнуюЧасть(ПараметрыВывода, 
				СтруктураПоиска, 
				ВыборкаПоТабличнойЧасти, 
				Макет, 
				МассивВыводимыхОбластей, 
				НомерСтраницы,
				0, 
				Истина,
				ТабличныйДокумент);
			
			// МатериалыИУслуги
			ПараметрыВывода = Новый Структура;
			ПараметрыВывода.Вставить("ПолучитьПредставлениеНоменклатурыДляПечати");
			ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "МатериалыИУслуги");
			ПараметрыВывода.Вставить("КолонкаКодов", ИмяКолонкиКодов);
			ПараметрыВывода.Вставить("ПредставлениеКолонкиКодов", ПредставлениеКолонкиКодов);
			
			СтруктураПоиска = Новый Структура("Заказ,НомерСтроки,ЭтоПолуфабрикат");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПечати);
			ВыборкаПоТабличнойЧасти = ТаблицаМатериалыИУслуги.Скопировать(СтруктураПоиска);
			ВыборкаПоТабличнойЧасти.Сортировать("НомерЭтапа,НоменклатураПредставление");
			ВывестиТабличнуюЧасть(ПараметрыВывода, 
				СтруктураПоиска, 
				ВыборкаПоТабличнойЧасти, 
				Макет, 
				МассивВыводимыхОбластей, 
				НомерСтраницы,
				0, 
				Истина,
				ТабличныйДокумент);
			
			#КонецОбласти	
			
		Иначе
			
			#Область Печать_по_маршрутным_картам_этапов
			
			// Получим данные МК по этапам
			ДанныеПоЭтапам = Новый Массив;
			
			СтруктураПоиска = Новый Структура("Заказ,НомерСтроки,ЭтоПолуфабрикат");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПечати);
			ВыборкаЭтапов = ТаблицаЭтапы.Скопировать(СтруктураПоиска);
			ВыборкаЭтапов.Сортировать("НомерЭтапа");
			ЭтапыКУдалению = Новый Массив;
			Для каждого СтрокаЭтап Из ВыборкаЭтапов Цикл
				Если СтрокаЭтап.МаршрутнаяКарта.Пустая() Тогда
					ЭтапыКУдалению.Добавить(СтрокаЭтап);
					Продолжить;
				КонецЕсли;
				
				СтруктураДанныхМаршрутнойКарты = Справочники.МаршрутныеКарты.ДанныеМаршрутнойКартыДляПечати(
					СтрокаЭтап.МаршрутнаяКарта, 
					СтрокаЭтап.Количество, 
					ДанныеПечати.Номенклатура, 
					ДанныеПечати.Характеристика);
				
				ДанныеПоЭтапам.Добавить(СтруктураДанныхМаршрутнойКарты);
			КонецЦикла; 
			
			Для каждого СтрокаЭтап Из ЭтапыКУдалению Цикл
				ВыборкаЭтапов.Удалить(СтрокаЭтап);
			КонецЦикла; 
			
			// ВыходныеИзделия
			ПараметрыВывода = Новый Структура;
			ПараметрыВывода.Вставить("ПолучитьПредставлениеНоменклатурыДляПечати");
			ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "ВыходныеИзделия");
			ПараметрыВывода.Вставить("КолонкаКодов", ИмяКолонкиКодов);
			ПараметрыВывода.Вставить("ПредставлениеКолонкиКодов", ПредставлениеКолонкиКодов);
			ПараметрыВывода.Вставить("НеВыводитьПустыеСтрокНоменклатуры");
			ПараметрыВывода.Вставить("ЗаголовокНомерЭтапа", НСтр("ru = 'Номер операции';
																|en = 'Operation number'"));
			
			НомерСтроки = 0;
			ИндексДанныхЭтапа = 0;
			Для каждого СтрокаЭтап Из ВыборкаЭтапов Цикл
				
				ПараметрыВывода.Вставить("НомерЭтапа", СтрокаЭтап.НомерЭтапа);
				
				ЗавершитьВыводТЧ = (ИндексДанныхЭтапа = (ВыборкаЭтапов.Количество() - 1));
				
				Если СтрокаЭтап.ИспользоватьВыходныеИзделия Тогда
					
					СтруктураДанныхМаршрутнойКарты = ДанныеПоЭтапам[ИндексДанныхЭтапа];
					ВыборкаВыходныеИзделия = СтруктураДанныхМаршрутнойКарты.ВыходныеИзделия;
					
				Иначе
					
					СтруктураПоиска = Новый Структура("Заказ,НомерСтроки,ЭтоПолуфабрикат");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПечати);
					СтруктураПоиска.Вставить("Этап", СтрокаЭтап.Этап);
					ВыборкаВыходныеИзделия = ТаблицаВыходныеИзделия.Скопировать(СтруктураПоиска);
					ВыборкаВыходныеИзделия.Сортировать("НомерСтроки");
					
				КонецЕсли;
				
				ВывестиТабличнуюЧасть(ПараметрыВывода, 
					СтруктураПоиска, 
					ВыборкаВыходныеИзделия, 
					Макет, 
					МассивВыводимыхОбластей, 
					НомерСтраницы,
					НомерСтроки,
					ЗавершитьВыводТЧ,
					ТабличныйДокумент);
				
				ИндексДанныхЭтапа = ИндексДанныхЭтапа + 1;
				
			КонецЦикла; 
			
			// Операции
			ПараметрыВывода = Новый Структура;
			ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "Операции");
			
			НомерСтроки = 0;
			ИндексДанныхЭтапа = 0;
			Для каждого СтрокаЭтап Из ВыборкаЭтапов Цикл
				
				Если СтрокаЭтап.ИспользоватьОперации Тогда
					
					ЗавершитьВыводТЧ = (ИндексДанныхЭтапа = (ВыборкаЭтапов.Количество() - 1));
					
					ПараметрыВывода.Вставить("НомерЭтапа", СтрокаЭтап.НомерЭтапа);
					
					СтруктураДанныхМаршрутнойКарты = ДанныеПоЭтапам[ИндексДанныхЭтапа];
					
					ВывестиТабличнуюЧасть(ПараметрыВывода, 
						СтруктураПоиска, 
						СтруктураДанныхМаршрутнойКарты.Операции, 
						Макет, 
						МассивВыводимыхОбластей, 
						НомерСтраницы,
						НомерСтроки,
						ЗавершитьВыводТЧ,
						ТабличныйДокумент);
					
				КонецЕсли;
				
				ИндексДанныхЭтапа = ИндексДанныхЭтапа + 1;
				
			КонецЦикла; 
			
			// МатериалыИУслуги
			ПараметрыВывода = Новый Структура;
			ПараметрыВывода.Вставить("ПолучитьПредставлениеНоменклатурыДляПечати");
			ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "МатериалыИУслуги");
			ПараметрыВывода.Вставить("КолонкаКодов", ИмяКолонкиКодов);
			ПараметрыВывода.Вставить("ПредставлениеКолонкиКодов", ПредставлениеКолонкиКодов);
			ПараметрыВывода.Вставить("НеВыводитьПустыеСтрокНоменклатуры");
			ПараметрыВывода.Вставить("ЗаголовокНомерЭтапа", НСтр("ru = 'Номер операции';
																|en = 'Operation number'"));
			НомерСтроки = 0;
			ИндексДанныхЭтапа = 0;
			Для каждого СтрокаЭтап Из ВыборкаЭтапов Цикл
				
				ПараметрыВывода.Вставить("НомерЭтапа", СтрокаЭтап.НомерЭтапа);
				
				ЗавершитьВыводТЧ = (ИндексДанныхЭтапа = (ВыборкаЭтапов.Количество() - 1));
				
				Если СтрокаЭтап.ИспользоватьМатериалы Тогда
					
					СтруктураДанныхМаршрутнойКарты = ДанныеПоЭтапам[ИндексДанныхЭтапа];
					ВыборкаМатериалыИУслуги = СтруктураДанныхМаршрутнойКарты.Материалы;
					
				Иначе
					
					СтруктураПоиска = Новый Структура("Заказ,НомерСтроки,ЭтоПолуфабрикат");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПечати);
					СтруктураПоиска.Вставить("Этап", СтрокаЭтап.Этап);
					ВыборкаМатериалыИУслуги = ТаблицаМатериалыИУслуги.Скопировать(СтруктураПоиска);
					ВыборкаМатериалыИУслуги.Сортировать("НомерЭтапа,НоменклатураПредставление");
					
				КонецЕсли;
				
				ВывестиТабличнуюЧасть(ПараметрыВывода, 
					СтруктураПоиска, 
					ВыборкаМатериалыИУслуги, 
					Макет, 
					МассивВыводимыхОбластей, 
					НомерСтраницы, 
					НомерСтроки,
					ЗавершитьВыводТЧ,
					ТабличныйДокумент);
				
				ИндексДанныхЭтапа = ИндексДанныхЭтапа + 1;
				
			КонецЦикла; 
			
			#КонецОбласти
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаОбластьПечати);
		
	КонецЦикла; 
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиТабличнуюЧасть(ПараметрыВывода, СтруктураПоиска, ВыборкаПоТабличнойЧасти, Макет, МассивВыводимыхОбластей, НомерСтраницы, НомерСтроки, ЗавершитьВыводТЧ, ТабличныйДокумент)
	
	Если ВыборкаПоТабличнойЧасти.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыводитьКоды = ПараметрыВывода.Свойство("КолонкаКодов") И ЗначениеЗаполнено(ПараметрыВывода.КолонкаКодов);
	
	ИмяТабличнойЧасти = ПараметрыВывода.ИмяТабличнойЧасти;
	ОбластьИмяТаблицы = Макет.ПолучитьОбласть("ИмяТаб_" + ИмяТабличнойЧасти);
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаб_" + ИмяТабличнойЧасти + ?(ВыводитьКоды, "_Код", ""));
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("Подвал_" + ИмяТабличнойЧасти + ?(ВыводитьКоды, "_Код", ""));
	ОбластьМакета = Макет.ПолучитьОбласть("Строка_" + ИмяТабличнойЧасти + ?(ВыводитьКоды, "_Код", ""));
	Если НомерСтроки = 0 Тогда
		ТабличныйДокумент.Вывести(ОбластьИмяТаблицы);
		ТабличныйДокумент.НачатьГруппуСтрок(ИмяТабличнойЧасти);
	КонецЕсли; 
	
	Если ВыводитьКоды Тогда
		ОбластьЗаголовокТаблицы.Параметры.ИмяКолонкиКодов = ПараметрыВывода.ПредставлениеКолонкиКодов;
	КонецЕсли; 
	
	Если ПараметрыВывода.Свойство("ЗаголовокНомерЭтапа") Тогда
		ЗаголовокНомерЭтапа = Новый Структура("ЗаголовокНомерЭтапа", ПараметрыВывода.ЗаголовокНомерЭтапа);
	Иначе
		ЗаголовокНомерЭтапа = Новый Структура("ЗаголовокНомерЭтапа", НСтр("ru = 'Номер этапа';
																			|en = 'Stage number'"));
	КонецЕсли; 
	ОбластьЗаголовокТаблицы.Параметры.Заполнить(ЗаголовокНомерЭтапа);
	
	ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Для каждого СтрокаТовары Из ВыборкаПоТабличнойЧасти Цикл
		
		Если ПараметрыВывода.Свойство("НеВыводитьПустыеСтрокНоменклатуры")
			И НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		Если НомерСтроки = 1 Тогда
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			
			Если НомерСтроки <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Используем структуру для заполнения параметров, т.к. макет может изменяться пользователем.
		ДополнительныеПараметрыОбластьМакета = Новый Структура;
		
		ДополнительныеПараметрыОбластьМакета.Вставить("НомерСтроки", НомерСтроки);
		
		Если ПараметрыВывода.Свойство("ПолучитьПредставлениеНоменклатурыДляПечати") Тогда
			НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				СтрокаТовары.НоменклатураПредставление, 
				СтрокаТовары.ХарактеристикаПредставление,
				,
				,
				ДопПараметрыПредставлениеНоменклатуры);
			
			ДополнительныеПараметрыОбластьМакета.Вставить("НоменклатураПредставление", НоменклатураПредставление);
		КонецЕсли;
		
		Если ВыводитьКоды Тогда
			ДополнительныеПараметрыОбластьМакета.Вставить("Артикул", СтрокаТовары["Номенклатура" + ПараметрыВывода.КолонкаКодов]);
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Операции" Тогда
			НормативноеВремя = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
				СтрокаТовары.ВремяВыполнения,
				СтрокаТовары.ВремяВыполненияЕдИзм);
			
			НормативноеВремя = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
				НормативноеВремя, 
				Перечисления.ЕдиницыИзмеренияВремени.Час);
			
			ДополнительныеПараметрыОбластьМакета.Вставить("НормативноеВремя", НормативноеВремя);
		КонецЕсли; 
		
		Если ПараметрыВывода.Свойство("НомерЭтапа") Тогда
			НомерЭтапа = Формат(ПараметрыВывода.НомерЭтапа, "ЧГ=") + "." + Формат(СтрокаТовары.НомерОперации, "ЧГ=");
			ДополнительныеПараметрыОбластьМакета.Вставить("НомерЭтапа", НомерЭтапа);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Заполнить(ДополнительныеПараметрыОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Если ЗавершитьВыводТЧ Тогда
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЕсли; 
	
КонецПроцедуры

Функция ПечатнаяФормаГрафикаПроизводства(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаПроизводство.ПФ_MXL_ДиаграммаГрафикаПроизводства");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ГрафикПроизводства_Диаграмма";
	
	Заказ = МассивОбъектов[0];
	
	ДанныеПечати = ПолучитьИзВременногоХранилища(ПараметрыПечати.АдресДанныеПечати);
	
	// Вывод заголовка
	#Область ВыводЗаголовка
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПроизводствоПродукция.Номенклатура.Представление КАК НоменклатураПредставление,
	|	ЗаказНаПроизводствоПродукция.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Номер КАК Номер,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Дата КАК Дата,
	|	ЗаказНаПроизводствоПродукция.КодСтроки КАК КодСтроки
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка = &Заказ
	|	И ЗаказНаПроизводствоПродукция.КлючСвязи = &КлючСвязи";
	
	Запрос.УстановитьПараметр("КлючСвязи", ДанныеПечати.ТекущиеДанные.КлючСвязи);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Результат = Запрос.Выполнить();
	ВыборкаДанных = Результат.Выбрать();
	ВыборкаДанных.Следующий();
	
	ДополнительныеПараметрыОбластьМакета = Новый Структура;
	
	ДополнительныеПараметрыОбластьМакета.Вставить("ДатаЗапуска", Формат(ДанныеПечати.ТекущиеДанные.ДатаЗапуска, "ДЛФ=D"));
	ДополнительныеПараметрыОбластьМакета.Вставить("ДатаВыпуска", Формат(ДанныеПечати.ТекущиеДанные.ДатаВыпуска, "ДЛФ=D"));
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДанных.Номер);
	РаспоряжениеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '№%1 от %2 (код строки %3)';
			|en = 'No. %1 from %2 (line code %3)'"),
		НомерДокумента,
		Формат(ВыборкаДанных.Дата, "ДЛФ=D"),
		Формат(ВыборкаДанных.КодСтроки, "ЧГ="));
	
	ДополнительныеПараметрыОбластьМакета.Вставить("РаспоряжениеПредставление", РаспоряжениеПредставление);
	
	ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ИзделиеПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
	ВыборкаДанных.НоменклатураПредставление, 
	ВыборкаДанных.ХарактеристикаПредставление,
	,
	,
	ДопПараметрыПредставлениеНоменклатуры);
	
	ДополнительныеПараметрыОбластьМакета.Вставить("ИзделиеПредставление", ИзделиеПредставление);
	
	ОбластьЗаголовок.Параметры.Заполнить(ДополнительныеПараметрыОбластьМакета);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	#КонецОбласти
	
	// Вывод диаграммы
	#Область ВыводДиаграммы
	ОбластьДиаграмма = Макет.ПолучитьОбласть("Диаграмма");
	
	Диаграмма = ОбластьДиаграмма.Рисунки.ДиаграммаГанта.Объект;
	
	ПланированиеПроизводстваКлиентСервер.УстановитьПараметрыДиаграммыПоУмолчанию(Диаграмма);
	Диаграмма.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	
	ПланированиеПроизводстваКлиентСервер.ВывестиДиаграммуГанта(
		Диаграмма,
		ДанныеПечати.ТекущиеДанные,
		ДанныеПечати.Ошибки,
		Неопределено,
		Истина);
	
	Для каждого Точка Из Диаграмма.Точки Цикл
		
		Диаграмма.РазвернутьТочку(Точка, Истина);
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьДиаграмма);
	#КонецОбласти
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, Заказ);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДатаЗапускаЭтапов(КлючСвязиПродукция, КлючСвязиЭтапыГрафик, Этапы, ЭтапыГрафик)
	
	СтруктураПоиска = Новый Структура("КлючСвязиПродукция,КлючСвязи", КлючСвязиПродукция, КлючСвязиЭтапыГрафик);
	СписокСтрок = ЭтапыГрафик.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() = 0 Тогда
		Возврат '000101010000';
	КонецЕсли;
	
	СтрокаЭтапыГрафик = СписокСтрок[0];
	СтруктураПоиска = Новый Структура("КлючСвязиПродукция, КлючСвязи", 
	КлючСвязиПродукция, СтрокаЭтапыГрафик.КлючСвязиЭтапы);
	СписокСтрок = Этапы.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() = 0 Тогда
		Возврат '000101010000';
	КонецЕсли;
	
	// Найдем все этапы изделия и возьмем наименьшую дату
	ДатаЗапуска = '000101010000';
	СтрокаЭтап = СписокСтрок[0];
	СтруктураПоиска = Новый Структура("КлючСвязиПродукция,КлючСвязиПолуфабрикат", КлючСвязиПродукция, СтрокаЭтап.КлючСвязиПолуфабрикат);
	ЭтапыИзделия = Этапы.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаЭтап Из ЭтапыИзделия Цикл
		СтруктураПоиска = Новый Структура("КлючСвязиПродукция,КлючСвязиЭтапы", КлючСвязиПродукция, СтрокаЭтап.КлючСвязи);
		ГрафикЭтапа = ЭтапыГрафик.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаЭтапыГрафик Из ГрафикЭтапа Цикл
			ДатаЗапуска = ?(ДатаЗапуска <> '000101010000', Мин(СтрокаЭтапыГрафик.НачалоПредварительногоБуфера, ДатаЗапуска), СтрокаЭтапыГрафик.НачалоПредварительногоБуфера);
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат ДатаЗапуска;
	
КонецФункции

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурналеДокументовВнутреннегоТовародвижения

Функция ЕстьЗаказыВРаботе(Параметры)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаказНаПроизводство.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ГДЕ
		|	ЗаказНаПроизводство.Проведен
		|	И ЗаказНаПроизводство.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)");
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Не (ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаПроизводство)
			И ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		ТекстГиперссылки = НСтр("ru = 'Заказы на производство 2.1';
								|en = 'Production orders 2.1'");
	Иначе
		ТекстГиперссылки = НСтр("ru = 'Заказы на производство';
								|en = 'Production orders'");
	КонецЕсли;
	ТекстСсылки = "Документ.ЗаказНаПроизводство.Форма.ФормаСпискаДокументов";
	
	Если ЕстьЗаказыВРаботе(Параметры) Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,, ТекстСсылки);
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,, ЦветаСтиля.НезаполненноеПолеТаблицы,, ТекстСсылки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#Область СлужебныеФункцииОбновления

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.ЗаказНаПроизводство";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ХозяйственнаяОперация",
		Перечисления.ХозяйственныеОперации.СобственноеПроизводство);
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "ЗаказыНаПроизводствоСпецификации" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаПроизводствоСпецификации(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ЗаказыМатериаловВПроизводство" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыМатериаловВПроизводство(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ЗаказыМатериаловСУчетомКорректировок" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыМатериаловСУчетомКорректировок(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТМатериалыИУслуги";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаБлокировкиДанных

Функция ТекстЗапросаТоварыДокумента(Отбор) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Распоряжение                 КАК Распоряжение,
	|	Таблица.Номенклатура                 КАК Номенклатура,
	|	Таблица.Характеристика               КАК Характеристика,
	|	Таблица.Назначение                   КАК Назначение,
	|	ДанныеУчета.НазначениеОтправителя    КАК НазначениеОтправителя,
	|	Таблица.КодСтроки                    КАК КодСтроки,
	|	Таблица.Серия                        КАК Серия,
	|	0                                    КАК Количество,
	|	Таблица.Упаковка                     КАК Упаковка,
	|	Таблица.ДатаПотребности              КАК ДатаОтгрузки,
	|	Таблица.Отменено                     КАК Отменено,
	|	0                                    КАК СтатусУказанияСерий,
	|	Таблица.ВариантОбеспечения           КАК ВариантОбеспечения,
	|	Таблица.Обособленно           		 КАК Обособленно,
	|	ЕСТЬNULL(ДанныеДокументаЗаказНаПроизводствоПродукция.Номенклатура.ГруппаАналитическогоУчета,
	|				ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка))
	|				КАК ГруппаПродукции,
	|	Таблица.Склад                        КАК Склад,
	|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
	|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано
	|ИЗ
	|	РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок.Обороты КАК Таблица
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
	|	ПО Таблица.Распоряжение = ДанныеУчета.Распоряжение
	|	И Таблица.Распоряжение ССЫЛКА Документ.ЗаказНаПроизводство
	|	И Таблица.КодСтроки = ДанныеУчета.КодСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ДанныеДокументаЗаказНаПроизводствоТовары
	|	ПО Таблица.Распоряжение = ДанныеДокументаЗаказНаПроизводствоТовары.Ссылка
	|		И Таблица.КодСтрокиРаспоряжения = ДанныеДокументаЗаказНаПроизводствоТовары.КодСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ДанныеДокументаЗаказНаПроизводствоПродукция
	|	ПО ДанныеДокументаЗаказНаПроизводствоПродукция.Ссылка = ДанныеДокументаЗаказНаПроизводствоТовары.Ссылка
	|		И ДанныеДокументаЗаказНаПроизводствоПродукция.КлючСвязи = ДанныеДокументаЗаказНаПроизводствоТовары.КлючСвязиПродукция
	|ГДЕ
	|	НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
	|		И &Отбор";
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		Тексты = Новый Массив();
		
		Для Каждого КлючЗначение Из Отбор Цикл
			
			Ключ = КлючЗначение.Ключ;
			
			Если Ключ = "Распоряжение" Тогда
				Ключ = "Таблица.Распоряжение";
			КонецЕсли;
			
			Тексты.Добавить(Ключ + " В(&" + КлючЗначение.Значение + ")");
			
		КонецЦикла;
		ТекстОтбора = СтрСоединить(Тексты, " И ");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор", ТекстОтбора);
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор", "ИСТИНА");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Период КАК ДатаДокументаИБ,
	|	&Номер КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация КАК Организация,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&Подразделение КАК МестоХранения,
	|	&Подразделение КАК Подразделение,
	|	&Ответственный КАК Ответственный,
	|	&Комментарий КАК Комментарий,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	0 КАК Сумма,
	|	&Статус КАК Статус,
	|	&Проведен КАК Проведен,
	|	&ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	"""" КАК Дополнительно,
	|	&Период КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать КАК НомерПервичногоДокумента,
	|	ЛОЖЬ КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК ИсправляемыйДокумент,
	|	&Период    КАК ДатаОтраженияВУчете,
	|	&Приоритет КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21
