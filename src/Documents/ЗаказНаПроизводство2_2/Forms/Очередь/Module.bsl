#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	
	СтруктураОтборов = Неопределено;
	
	Если Параметры.Свойство("СтруктураОтборов", СтруктураОтборов) 
		И ЗначениеЗаполнено(СтруктураОтборов) Тогда
		
		СтруктураБыстрогоОтбора = Новый Структура;
		
		Если СтруктураОтборов.Свойство("Приоритет", Приоритет) Тогда
			СтруктураБыстрогоОтбора.Вставить("Приоритет", Приоритет);
		КонецЕсли;
		
		Если СтруктураОтборов.Свойство("Подразделение", Подразделение) Тогда
			СтруктураБыстрогоОтбора.Вставить("Подразделение", Подразделение);
		КонецЕсли;
		
		Если СтруктураОтборов.Свойство("Ответственный", Ответственный) Тогда
			СтруктураБыстрогоОтбора.Вставить("Ответственный", Ответственный);
		КонецЕсли;
		
		Если СтруктураОтборов.Свойство("ТипПроизводственногоПроцесса", ТипПроизводственногоПроцесса) Тогда
			СтруктураБыстрогоОтбора.Вставить("ТипПроизводственногоПроцесса", ТипПроизводственногоПроцесса);
		КонецЕсли;
		
		ОтборПоСостояниюПриСозданииНаСервере(СтруктураОтборов);
		
	ИначеЕсли Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора) Тогда
		
		ОтборПоСостояниюПриСозданииНаСервере(СтруктураБыстрогоОтбора);
		
	КонецЕсли;
	
	Если Параметры.Свойство("ТекущаяСтрока") Тогда
		Элементы.Список.ТекущаяСтрока = Параметры.ТекущаяСтрока;
	КонецЕсли;
	
	Если Параметры.Свойство("ПроверкаЗакрытияМесяца") Тогда
		
		МассивОрганизаций = Неопределено;
		Если Параметры.Свойство("МассивОрганизаций", МассивОрганизаций) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список,
				"Организация",
				МассивОрганизаций);
		КонецЕсли;
		
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ЗаполнитьСписокВыбораОтбораПоАктуальности(Элементы.ДатаПотребностиОтбор.СписокВыбора);
	
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриСозданииНаСервере(Список, Актуальность, Элементы.ДатаПотребностиОтбор.СписокВыбора, ДатаСобытия, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Приоритет", Приоритет, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Подразделение", Подразделение, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Ответственный", Ответственный, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "ТипПроизводственногоПроцесса", ТипПроизводственногоПроцесса, СтруктураБыстрогоОтбора);
	
	УстановитьПериод();
	
	Список.Параметры.УстановитьЗначениеПараметра("ПланируетсяГрафикПроизводства", ПланируетсяГрафикПроизводства);
	
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеТребуетсяПроверитьЭтапы", Перечисления.СостоянияЗаказовНаПроизводствоВОчереди.ТребуетсяПроверитьЭтапы);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеТребуетсяСформироватьЭтапы", Перечисления.СостоянияЗаказовНаПроизводствоВОчереди.ТребуетсяСформироватьЭтапы);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеТребуетсяПередатьЭтапыКВыполнению", Перечисления.СостоянияЗаказовНаПроизводствоВОчереди.ТребуетсяПередатьЭтапыКВыполнению);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеТребуетсяОбеспечение", Перечисления.СостоянияЗаказовНаПроизводствоВОчереди.ТребуетсяОбеспечение);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеНарушенаДатаПотребности", Перечисления.СостоянияЗаказовНаПроизводствоВОчереди.НарушенаДатаПотребности);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеВыполнен", Перечисления.СостоянияЗаказовНаПроизводствоВОчереди.Выполнен);
	
	#Область УниверсальныеМеханизмы
	
	// ПодключаемоеОборудование
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
	ТекущиеДелаПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Список);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.КоманднаяПанельГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
	ОбновитьГиперссылкиПриОткрытииФормы = Истина;
	
	НастроитьЭлементыФормы();
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	ПодключитьОбработчикОжидания("ПроверитьОшибкиРасчетаСтруктурыЗаказа", 0.5, Истина);
	
	Если ОбновитьГиперссылкиПриОткрытииФормы Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьГиперссылки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ГрафикПроизводства"
		ИЛИ ИмяСобытия = "Запись_ЗаказНаПроизводство" ИЛИ ИмяСобытия = "Запись_ЗаказНаПроизводство2_2" Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли; 
	
	Если ИмяСобытия = "Запись_ЗаказНаПроизводство" Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьГиперссылки", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Настройки.Удалить("Подразделение");
		Настройки.Удалить("Ответственный");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ДопПанельСвернута") = Истина Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ДопПанель");
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, "Подразделение", Подразделение, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, "Ответственный", Ответственный, СтруктураБыстрогоОтбора, Настройки);
	
	ОбновитьГиперссылкиПриОткрытииФормы = Ложь;
	ОбновитьГиперссылки(ЭтотОбъект);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборПодразделение, ОтборОтветственный");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	Возврат; // в данной конфигурации дополнительных действий не предусмотрено
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КоманднаяПанельЗаказы

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаПроизводство2_2.Очередь.Команда.ОбновитьСписок");
	
	ОбновитьСписокНаСервере();
	
	ПодключитьОбработчикОжидания("ПроверитьОшибкиРасчетаСтруктурыЗаказа", 0.5, Истина);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере()
	
	УстановитьУсловноеОформлениеПолеПриоритет();
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьЗаказВОчереди(ВыбранныеЗаказы[0], -1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьЗаказВОчереди(ВыбранныеЗаказы[0], 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭтапыПроизводства(Команда)
	
	СписокЗаказов = Новый Массив();
	
	КоличествоЗаказовПоВариантамРаботы = Новый Массив(2);
	КоличествоЗаказовПоВариантамРаботы[0] = 0;
	КоличествоЗаказовПоВариантамРаботы[1] = 0;
	
	Для Итератор = 0 По Элементы.Список.ВыделенныеСтроки.Количество() - 1 Цикл
		
		Идентификатор = Элементы.Список.ВыделенныеСтроки[Итератор];
		
		Если ТипЗнч(Идентификатор) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Идентификатор);
		
		ВариантРаботы = Число(ДанныеСтроки.ДинамическаяСтруктура);
		КоличествоЗаказовПоВариантамРаботы[ВариантРаботы] = КоличествоЗаказовПоВариантамРаботы[ВариантРаботы] + 1;
		
		СписокЗаказов.Добавить(ДанныеСтроки.Ссылка);
		
	КонецЦикла;
	
	Если КоличествоЗаказовПоВариантамРаботы[0] > 0 И КоличествоЗаказовПоВариантамРаботы[1] > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Выполнение команды не возможно для заказов на производство разных типов.';
									|en = 'The command cannot be executed for production orders of different types.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
		
	КонецЕсли;
	
	Если КоличествоЗаказовПоВариантамРаботы[0] > 0 Тогда
		
		ОпределитьПараметрыИСформироватьЭтапы(СписокЗаказов);
		
	ИначеЕсли КоличествоЗаказовПоВариантамРаботы[1] > 0 Тогда
		
		СтруктураОтборов = Новый Структура();
		
		Если КоличествоЗаказовПоВариантамРаботы[1] = 1 Тогда
			СтруктураОтборов.Вставить("ЗаказНаПроизводство", СписокЗаказов[0]);
		КонецЕсли;
		
		ОткрытьФорму("Обработка.ФормированиеЭтаповПроизводства.Форма.Форма", Новый Структура("СтруктураОтборов", СтруктураОтборов), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИСформироватьЭтапы(Распоряжения)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОпределитьПараметрыИСформироватьЭтапыЗавершение", 
		ЭтотОбъект);
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.ПараметрыФормированияЭтапов", 
		Новый Структура("Распоряжения", Распоряжения),
		ЭтаФорма,
		УникальныйИдентификатор,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИСформироватьЭтапыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьФоновоеЗадание(
		"СформироватьЭтапыПроизводства",
		НСтр("ru = 'Формирование этапов производства';
			|en = 'Generate production stages'"),
		"Документы.ЭтапПроизводства2_2.СформироватьЭтапы",
		Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьЭтапыКВыполнению(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Распоряжения", ВыбранныеЗаказы);
	
	ЗапуститьФоновоеЗадание(
		"ПередатьЭтапыКВыполнению",
		НСтр("ru = 'Передача этапов к выполнению';
			|en = 'Release stages'"),
		"Документы.ЭтапПроизводства2_2.ПередатьЭтапыКВыполнениюОтложенно",
		ПараметрыПроцедуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЭтапыПроизводства(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеЭтапыПроизводстваЗавершение", ЭтаФорма, ВыбранныеЗаказы);
	
	Если ВыбранныеЗаказы.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Пометить на удаление все этапы выбранных заказов?';
							|en = 'Mark all stages of the selected order for deletion?'");
	Иначе
		Представление = УправлениеПроизводствомВызовСервера.ПредставлениеЗаказа(ВыбранныеЗаказы[0],"");
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить на удаление все этапы заказа %1?';
										|en = 'Mark all stages of order %1 for deletion?'"), Представление);
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЭтапыПроизводстваЗавершение(РезультатВопроса, ПараметрыПроцедуры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьФоновоеЗадание(
		"ПометитьНаУдалениеЭтапыПроизводства",
		НСтр("ru = 'Пометка на удаление этапов производства';
			|en = 'Production stage deletion mark'"),
		"Документы.ЭтапПроизводства2_2.ПометитьНаУдалениеЭтапыОтложенно",
		ПараметрыПроцедуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиспетчированиеЭтапов(Команда)
	
	Перем Распоряжение;
	
	Для Итератор = 0 По Элементы.Список.ВыделенныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(Элементы.Список.ВыделенныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Распоряжение = Элементы.Список.ВыделенныеСтроки[Итератор];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОткрытьДиспетчированиеЭтапов(Распоряжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьТекущий(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуПланированияЗаказа(ВыбранныеЗаказы[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьВыбранные(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьПараметрыИЗапланировать(ВыбранныеЗаказы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьОчередьПоТекущий(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОчередьПланирования = ОчередьПланирования(ВыбранныеЗаказы[0], Подразделение);
	ОпределитьПараметрыИЗапланировать(ОчередьПланирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИЗапланировать(Распоряжения)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Распоряжения", Распоряжения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОпределитьПараметрыИЗапланироватьЗавершение", 
			ЭтотОбъект, Распоряжения);
	
	ОткрытьФорму("Обработка.ПланированиеГрафикаПроизводства2_2.Форма.НастройкиПланированияСпискаРаспоряженийИЭтапов", 
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИЗапланироватьЗавершение(Результат, Распоряжения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Распоряжения", Распоряжения);
	
	Для Каждого КлючИЗначение Из Результат Цикл
		ПараметрыПроцедуры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ЗапуститьФоновоеЗадание(
		"ПланироватьГрафикПроизводства",
		НСтр("ru = 'Планирование графика производства';
			|en = 'Production schedule creating'"),
		"Обработки.ПланированиеГрафикаПроизводства2_2.ПланироватьРабочийГрафикРаспоряжений",
		ПараметрыПроцедуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказов(Команда)
	
	ОткрытьПланированиеПолуфабрикатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеЦеховыхКладовых(Команда)
	
	ОткрытьОбеспечениеЦеховыхКладовых();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПеремещенияПоЗаказуНаПроизводство(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	
	Если ВыбранныеЗаказы.ВГраница() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтборов = Новый Структура();
	СтруктураОтборов.Вставить("ЗаказНаПроизводство", ВыбранныеЗаказы[0]);
	
	ОткрытьФорму("Обработка.ФормированиеПеремещенийПоЗаказамНаПроизводство.Форма", Новый Структура("СтруктураОтборов", СтруктураОтборов), ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЖелаемыеДатыОбеспечения(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Распоряжение", ВыбранныеЗаказы[0]);
	
	ОткрытьФорму("Обработка.ПереносЖелаемойДатыОбеспеченияЭтаповПроизводства.Форма",
		ПараметрыФормы, ЭтаФорма, ВыбранныеЗаказы[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрыт(Команда)
	
	ВыделенныеСтроки = ВыбранныеЗаказы();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке заказов будет установлен статус ""Закрыт"". Продолжить?';
						|en = 'Status of the orders selected in the list will be set to Closed. Continue?'");
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтатусЗакрытЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрытЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Закрыт", Новый Структура("КонтрольВыполненияЗаказа"));
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru = 'Закрыт';
																																					|en = 'Closed'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтруктуруЗаказа(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаказаКлиент.ЗапуститьПересчетСтруктурыЗаказа(ВыбранныеЗаказы);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ПанельДопОтборовЗаказы

&НаКлиенте
Процедура ФормирующиесяЗаказы(Команда)
	
	ОткрытьФормирующиесяЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытыеЗаказы(Команда)
	
	ОткрытьЗакрытыеЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДопПанель(Команда)
	
	ДопПанельСвернута = Ложь;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ДопПанель");
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДопПанель(Команда)
	
	ДопПанельСвернута = Истина;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ДопПанель");
	
КонецПроцедуры

#КонецОбласти

#Область Универсальные

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область Шапка

&НаКлиенте
Процедура ОтборДатаПотребностиПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборДатаПотребности");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаПотребностиОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборыСписковКлиентСервер.ПриОчисткеОтбораПоАктуальности(Список, Актуальность, ДатаСобытия, СтандартнаяОбработка);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборДатаПотребности");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаПотребностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТКлиент.ПриВыбореОтбораПоАктуальности(
		ВыбранноеЗначение, 
		СтандартнаяОбработка, 
		ЭтаФорма,
		Список, 
		"Актуальность",
		"ДатаПотребностиОтбор",
		"ДатаСобытия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетОтборПриИзменении(Элемент)
	
	УстановитьОтборПриоритет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОтборПриИзменении(Элемент)
	
	УстановитьОтборПодразделение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОтборПриИзменении(Элемент)
	
	УстановитьОтборОтветственный();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураДополнительныхОтборовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Отключить_ТипПроизводственногоПроцесса" Тогда
		
		ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.ПустаяСсылка");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ТипПроизводственногоПроцесса", ТипПроизводственногоПроцесса,,, Ложь);
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СтруктураДополнительныхОтборов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеСостояниеРасчетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Подробнее" Тогда
		
		СписокТипов = Новый Массив();
		СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРазузлования"));
		СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРаспределенияЗапасов"));
		
		ОткрытьФорму("РегистрСведений.ПротоколРасчетаСтруктурыЗаказа.ФормаСписка", Новый Структура("Отбор", Новый Структура("ТипОшибки", СписокТипов)));
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Пересчитать" Тогда
		
		ПересчитатьОшибкиРасчетаСтруктурыЗаказа();
		
		Элементы.ГруппаПредупреждениеСостояниеРасчета.Видимость = Ложь;
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Запущено исправление зарегистрированных ошибок';
											|en = 'Correction of registered errors has been started'"),,, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельДопОтборовЗаказы

&НаКлиенте
Процедура ОтборПоСостояниюПриИзменении(Элемент)
	
	УстановитьОтборПоСостоянию();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборПоСостоянию");
	
КонецПроцедуры

#КонецОбласти

#Область СписокЗаказы

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) <> Тип("ДокументСсылка.ЗаказНаПроизводство2_2") Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "СостояниеЭтаповИГрафикаПроизводства" Тогда
	
		СтандартнаяОбработка = Ложь;
		
		КодСостояния = Элемент.ТекущиеДанные.СостояниеЭтаповИГрафикаПроизводства;
		
		ОбработкаВыбораСостояниеЭтаповИГрафикаПроизводства(КодСостояния, ВыбраннаяСтрока);
		
	ИначеЕсли Поле.Имя = "СостояниеОбеспечения" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КодСостояния = Элемент.ТекущиеДанные.СостояниеОбеспечения;
		
		ОбработкаВыбораСостояниеОбеспечения(КодСостояния, ВыбраннаяСтрока);
		
	ИначеЕсли Поле.Имя = "СостояниеВыпускаПродукции" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КодСостояния = Элемент.ТекущиеДанные.СостояниеВыпускаПродукции;
		
		ОбработкаВыбораСостояниеВыпускаПродукции(КодСостояния, ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСостояниеЭтаповИГрафикаПроизводства(КодСостояния, ВыбраннаяСтрока)

	Если КодСостояния = 1 Тогда
		
		Распоряжения = МассивСсылок(ВыбраннаяСтрока);
		ОпределитьПараметрыИСформироватьЭтапы(Распоряжения);
		
	ИначеЕсли КодСостояния = 2 Тогда
		
		СтруктураОтборов = Новый Структура("ТребуетсяУточнение", Истина);
		ОткрытьДиспетчированиеЭтапов(ВыбраннаяСтрока, СтруктураОтборов);
		
	ИначеЕсли КодСостояния = 3 Тогда
		
		ОткрытьФормуПланированияЗаказа(ВыбраннаяСтрока);
		
	ИначеЕсли КодСостояния = 4 Тогда
		
		ПараметрыПроцедуры = ПараметрыЗапускаЗаданийПоЗаказу(ВыбраннаяСтрока);
		
		ЗапуститьФоновоеЗадание(
			"ПередатьЭтапыКВыполнению",
			НСтр("ru = 'Передача этапов к выполнению';
				|en = 'Release stages'"),
			"Документы.ЭтапПроизводства2_2.ПередатьЭтапыКВыполнениюОтложенно",
			ПараметрыПроцедуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСостояниеОбеспечения(КодСостояния, ВыбраннаяСтрока)
	
	Если КодСостояния = 1 Тогда
		
		СтруктураОтборов = Новый Структура("ТребуетсяОбеспечение", Истина);
		ОткрытьДиспетчированиеЭтапов(ВыбраннаяСтрока, СтруктураОтборов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСостояниеВыпускаПродукции(КодСостояния, ВыбраннаяСтрока)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = РазрешитьПеретаскивание;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если РазрешеноПеретаскивание(ПараметрыПеретаскивания.Значение, Строка) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(НоваяПозицияВОчереди) И ПараметрыПеретаскивания.Значение.ВГраница() = 0 Тогда
		
		ВставитьДокументВОчередь(ПараметрыПеретаскивания.Значение[0], НоваяПозицияВОчереди);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбслуживаниеФормы

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	// Настройки видимости/доступности
	
	ПравоДоступаДобавление = Документы.ЗаказНаПроизводство2_2.ПравоДоступаДобавление();
	
	ИспользоватьПодменюСоздания = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей")
							  ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПроизводства");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюСписокГруппаСоздать", "Видимость", ПравоДоступаДобавление И ИспользоватьПодменюСоздания);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьНовый",         "Видимость", ПравоДоступаДобавление И НЕ ИспользоватьПодменюСоздания);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСкопировать",          "Видимость", ПравоДоступаДобавление);
	
	ИспользуетсяНесколькоПодразделений = Справочники.СтруктураПредприятия.ИспользуетсяНесколькоПодразделенийДиспетчеров();
	Элементы.ПодразделениеОтбор.Видимость = ИспользуетсяНесколькоПодразделений;
	
	Элементы.ПланироватьТекущий.Видимость   = ПланируетсяГрафикПроизводства;
	Элементы.ПланироватьВыбранные.Видимость = ПланируетсяГрафикПроизводства;
	
	Элементы.КонтекстноеМенюПланироватьТекущий.Видимость   = ПланируетсяГрафикПроизводства;
	Элементы.КонтекстноеМенюПланироватьВыбранные.Видимость = ПланируетсяГрафикПроизводства;
	
	Элементы.ПланироватьОчередьПоТекущий.Видимость                = ПланируетсяГрафикПроизводства;
	Элементы.КонтекстноеМенюПланироватьОчередьПоТекущий.Видимость = ПланируетсяГрафикПроизводства;
	
	Элементы.ГруппаОтборПланироватьГрафик.Видимость       = ПланируетсяГрафикПроизводства;
	Элементы.ГруппаОтборНарушенаДатаПотребности.Видимость = ПланируетсяГрафикПроизводства;
	
	Элементы.ФормаПеренестиЖелаемыеДатыОбеспечения.Видимость = ПланируетсяГрафикПроизводства;
	Элементы.КонтекстноеМенюПеренестиЖелаемыеДатыОбеспечения.Видимость = ПланируетсяГрафикПроизводства;
	
	Элементы.СостояниеОбеспечения.Видимость          = Не ДинамическаяСтруктураЗаказовНаПроизводство;
	Элементы.ГруппаОтборТребуетОбеспечения.Видимость = Не ДинамическаяСтруктураЗаказовНаПроизводство;

	Элементы.ГруппаОтборТребуетСформироватьЭтапы.Видимость = Не ДинамическаяСтруктураЗаказовНаПроизводство;
	
	Элементы.СформироватьЭтапыПроизводства.Заголовок = ?(ДинамическаяСтруктураЗаказовНаПроизводство, НСтр("ru = 'Cформировать партии...';
																											|en = 'Generate lots...'"), НСтр("ru = 'Cформировать этапы...';
																																				|en = 'Generate stages...'"));
	Элементы.КонтекстноеМенюСформироватьЭтапыПроизводства.Заголовок = Элементы.СформироватьЭтапыПроизводства.Заголовок;

	Элементы.ДиспетчированиеЭтапов.Видимость = Документы.ЭтапПроизводства2_2.ДоступноДиспетчированиеЭтапов();
	
	НастроитьЭлементыФормыПоПравам();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПоПравам()

	ДоступноОбеспечениеПотребностей = ПравоДоступа("Просмотр", Метаданные.Обработки.ОбеспечениеПотребностей);
	
	ДоступноФормированиеЗаказовМатериалов = 
			ДоступноОбеспечениеПотребностей 
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказМатериаловВПроизводство);
			
	ДоступноФормированиеЗаказовНаЗакупку = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") 
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказПоставщику);
			
	ДоступноФормированиеЗаказовНаСборку = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку")
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказНаСборку);
					
	ДоступноФормированиеЗаказовНаПеремещение = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение")
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказНаПеремещение);
					
	//++ Устарело_Переработка24
	ДоступноФормированиеЗаказовПереработчику = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне")
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказПереработчику);
	//-- Устарело_Переработка24
	
	ДоступноФормированиеЗаказовПереработчику2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне2_5")
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказПереработчику2_5);
	
	РасширенноеОбеспечениеПотребностей = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	
	ДоступноФормированиеПеремещенийПоГрафикуПроизводства = ДинамическаяСтруктураЗаказовНаПроизводство
			И (ДоступноФормированиеЗаказовНаПеремещение ИЛИ ДоступноФормированиеЗаказовМатериалов)
			И ПравоДоступа("Просмотр", Метаданные.Обработки.ФормированиеПеремещенийПоЗаказамНаПроизводство);
	
	ДоступноОбеспечениеКладовых = 
			ДоступноОбеспечениеПотребностей
			И РасширенноеОбеспечениеПотребностей
			И (ДоступноФормированиеЗаказовМатериалов
				ИЛИ ДоступноФормированиеЗаказовНаЗакупку
				ИЛИ ДоступноФормированиеЗаказовНаСборку
				ИЛИ ДоступноФормированиеЗаказовНаПеремещение
				//++ Устарело_Переработка24
				ИЛИ ДоступноФормированиеЗаказовПереработчику
				//-- Устарело_Переработка24
				ИЛИ ДоступноФормированиеЗаказовПереработчику2_5);
	
	Элементы.КартинкаЗапланироватьПолуфабрикаты.Видимость = ДоступноОбеспечениеПотребностей;
	Элементы.ЗапланироватьПолуфабрикаты.Видимость = ДоступноОбеспечениеПотребностей;
	
	Элементы.КартинкаОбеспечениеЦеховыхКладовых.Видимость = ДоступноОбеспечениеКладовых;
	Элементы.ОбеспечениеЦеховыхКладовых.Видимость = ДоступноОбеспечениеКладовых;
	
	Элементы.КонтекстноеМенюСформироватьПеремещенияПоЗаказамНаПроизводство.Видимость = ДоступноФормированиеПеремещенийПоГрафикуПроизводства;
	
	ИзменитьВыделенныеДоступна = ПроизводствоСервер.ДоступнаКомандаИзменитьВыделенные(Метаданные.Документы.ЗаказНаПроизводство2_2);
	Элементы.ИзменитьВыделенные.Видимость                      = ИзменитьВыделенныеДоступна;
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = ИзменитьВыделенныеДоступна;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	// Отбор по приоритету
	Если СтруктураРеквизитов.Свойство("ОтборПриоритет") ИЛИ Инициализация Тогда
		
		Элементы.Приоритет.Видимость = НЕ ЗначениеЗаполнено(Форма.Приоритет);
		
	КонецЕсли;
	
	// Отбор по подразделению-диспетчеру
	Если СтруктураРеквизитов.Свойство("ОтборПодразделение") ИЛИ Инициализация Тогда
		
		Элементы.Подразделение.Видимость = Элементы.ПодразделениеОтбор.Видимость
											И НЕ ЗначениеЗаполнено(Форма.Подразделение);
		
	КонецЕсли;
	
	// Отбор по ответственному
	Если СтруктураРеквизитов.Свойство("ОтборОтветственный") ИЛИ Инициализация Тогда
		
		Элементы.Ответственный.Видимость = НЕ ЗначениеЗаполнено(Форма.Ответственный);
		
	КонецЕсли;
	
	// Доступность элементов управления очередью
	Если СтруктураРеквизитов.Свойство("ОтборПриоритет")
		ИЛИ СтруктураРеквизитов.Свойство("ОтборОтветственный")
		ИЛИ СтруктураРеквизитов.Свойство("ОтборДатаПотребности")
		ИЛИ СтруктураРеквизитов.Свойство("ОтборПоСостоянию")
		ИЛИ Инициализация Тогда
		
		ОчередьДоступна = ОчередьДоступна(Форма);
		
		Форма.РазрешитьПеретаскивание = ОчередьДоступна;
		
		Элементы.ПереместитьВниз.Доступность  = ОчередьДоступна;
		Элементы.ПереместитьВверх.Доступность = ОчередьДоступна;
		
		Элементы.ПланироватьОчередьПоТекущий.Доступность                = ОчередьДоступна;
		Элементы.КонтекстноеМенюПланироватьОчередьПоТекущий.Доступность = ОчередьДоступна;
		
	КонецЕсли;
	
	// Информационная надпись
	Если СтруктураРеквизитов.Свойство("СтруктураДополнительныхОтборов")
		ИЛИ Инициализация Тогда
		
		МассивСтрок = Новый Массив;
		
		Если ЗначениеЗаполнено(Форма.ТипПроизводственногоПроцесса) Тогда
			
			ТекстСтроки = СтрШаблон(НСтр("ru = 'Тип производственного процесса: ""%1""';
										|en = 'Production process: %1'"), Форма.ТипПроизводственногоПроцесса);;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстСтроки));
			МассивСтрок.Добавить(" (");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'отключить';
																	|en = 'disable'"),,,, "Отключить_ТипПроизводственногоПроцесса"));
			МассивСтрок.Добавить(")");
			
		КонецЕсли;
		
		Форма.СтруктураДополнительныхОтборов = Новый ФорматированнаяСтрока(МассивСтрок);
		Элементы.СтруктураДополнительныхОтборов.Видимость = ЗначениеЗаполнено(МассивСтрок);
		
	КонецЕсли;
	
	// Настройка элементов расположенных на доп. панели отборов
	Если СтруктураРеквизитов.Свойство("ДопПанель")
		ИЛИ Инициализация Тогда
		
		Элементы.ЗапланироватьПолуфабрикаты.Видимость    = НЕ Форма.ДопПанельСвернута И Форма.ДоступноОбеспечениеПотребностей;
		Элементы.ФормирующиесяЗаказы.Видимость           = НЕ Форма.ДопПанельСвернута;
		Элементы.ОбеспечениеЦеховыхКладовых.Видимость    = НЕ Форма.ДопПанельСвернута И Форма.ДоступноОбеспечениеКладовых;
		
		Элементы.РазвернутьДопПанель.Видимость   = Форма.ДопПанельСвернута;
		Элементы.СвернутьДопПанель.Видимость     = НЕ Форма.ДопПанельСвернута;
		Элементы.ОткрытьЗакрытыеЗаказы.Видимость = НЕ Форма.ДопПанельСвернута;
		
		Элементы.ДекорацияОтобратьЗаказы.Заголовок = 
				?(Форма.ДопПанельСвернута, НСтр("ru = 'Отобрать';
												|en = 'Pick'"), 
					НСтр("ru = 'Отобрать заказы, для которых требуется';
						|en = 'Filter orders'"));
		
		Элементы.ДекорацияОтобратьЗаказыПродолжение.Заголовок = 
				?(НЕ Форма.ДопПанельСвернута, НСтр("ru = 'Или по которым';
													|en = 'Filter orders'"), "");
		
		ТекущееОтображениеПодсказки = ?(Форма.ДопПанельСвернута, 
											ОтображениеПодсказки.Всплывающая,
											ОтображениеПодсказки.ОтображатьСправа);
		
		МассивЭлементов = Новый Массив;
		
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборТребуетсяСформироватьЭтапы);
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборТребуетсяПроверитьЭтапы);
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборТребуетсяПланированиеГрафика);
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборТребуетсяПередатьКВыполнению);
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборТребуетсяОбеспечение);
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборНарушенаДатаПотребности);
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборВыполнен);
		
		Для Каждого ТекущийЭлемент Из МассивЭлементов Цикл
			
			ТекущийЭлемент.ОтображениеПодсказки = ТекущееОтображениеПодсказки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// приоритет
	УстановитьУсловноеОформлениеПолеПриоритет();
	
	// начало производства
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляДатаПроизводства(ЭтотОбъект, "Список", "НачалоПроизводства");
	
	// дата потребности
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляДатаПроизводства(ЭтотОбъект, "Список", "ДатаПотребности");
	
	// дата
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
	// выделение цветом просроченного заказа
	#Область ПросроченныеЗаказы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДатаПотребности");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Просрочен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПолеПриоритет()
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляПриоритет(ЭтотОбъект, "Список", "ПриоритетОчередь", "Приоритет", Истина, "Приоритет", "ПриоритетОтбор");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ПланируетсяГрафикПроизводства = УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства();
	
	ДинамическаяСтруктураЗаказовНаПроизводство = ПолучитьФункциональнуюОпцию("ДинамическаяСтруктураЗаказовНаПроизводство");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаСписка

&НаСервере
Процедура УстановитьПериод()
	
	ТекущаяДата      = ТекущаяДатаСеанса();
	ДатаАктуальности = НачалоДня(ТекущаяДата);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияОсновныхОтборов(Форма, ТолькоЗаполненные = Истина)
	
	СтруктураОтборов = Новый Структура;
	
	Если НЕ ТолькоЗаполненные ИЛИ ЗначениеЗаполнено(Форма.Приоритет) Тогда
		СтруктураОтборов.Вставить("Приоритет", Форма.Приоритет);
	КонецЕсли;
	
	Если НЕ ТолькоЗаполненные ИЛИ ЗначениеЗаполнено(Форма.Подразделение) Тогда
		СтруктураОтборов.Вставить("Подразделение", Форма.Подразделение);
	КонецЕсли;
	
	Если НЕ ТолькоЗаполненные ИЛИ ЗначениеЗаполнено(Форма.Ответственный) Тогда
		СтруктураОтборов.Вставить("Ответственный", Форма.Ответственный);
	КонецЕсли;

	Возврат СтруктураОтборов;

КонецФункции

&НаСервере
Процедура УстановитьОтборПриоритет()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Приоритет", Приоритет, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Приоритет));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборПриоритет");
	
	ОбновитьГиперссылки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПодразделение()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Подразделение", Подразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Подразделение));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборПодразделение");
	
	ОбновитьГиперссылки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОтветственный()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Ответственный));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборОтветственный");
	
	ОбновитьГиперссылки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоСостояниюПриСозданииНаСервере(СтруктураОтборов)
	
	СтруктураОтборов.Свойство("ТребуетсяПроверитьЭтапы",           ОтборТребуетсяПроверитьЭтапы);
	СтруктураОтборов.Свойство("ТребуетсяСформироватьЭтапы",        ОтборТребуетсяСформироватьЭтапы);
	СтруктураОтборов.Свойство("ТребуетсяПланированиеГрафика",      ОтборТребуетсяПланированиеГрафика);
	СтруктураОтборов.Свойство("ТребуетсяПередатьЭтапыКВыполнению", ОтборТребуетсяПередатьЭтапыКВыполнению);
	СтруктураОтборов.Свойство("ТребуетсяОбеспечение",              ОтборТребуетсяОбеспечение);
	СтруктураОтборов.Свойство("НарушенаДатаПотребности",           ОтборНарушенаДатаПотребности);
	СтруктураОтборов.Свойство("Выполнен",                          ОтборВыполнен);
	
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСостоянию()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,, "ГруппаОтбораПоСостоянию");
	
	ОтборПоСостояниюЭтаповИГрафика = СписокДоступныхСостоянийЭтаповИГрафика();
	ОтборПоСостояниюВыпуска        = СписокДоступныхСостоянийВыпуска();
	
	Если ОтборПоСостояниюЭтаповИГрафика.Количество() > 0
		ИЛИ ОтборТребуетсяОбеспечение
		ИЛИ ОтборПоСостояниюВыпуска.Количество() > 0 Тогда
		
		ГруппаОтбораПоСостоянию = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Список.Отбор.Элементы, "ГруппаОтбораПоСостоянию", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаОтбораПоСостоянию, "СостояниеЭтаповИГрафикаПроизводства", ОтборПоСостояниюЭтаповИГрафика, ВидСравненияКомпоновкиДанных.ВСписке,, ЗначениеЗаполнено(ОтборПоСостояниюЭтаповИГрафика));
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаОтбораПоСостоянию, "СостояниеОбеспечения", ОтборТребуетсяОбеспечение, ВидСравненияКомпоновкиДанных.Равно,, ОтборТребуетсяОбеспечение);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаОтбораПоСостоянию, "СостояниеВыпускаПродукции", ОтборПоСостояниюВыпуска, ВидСравненияКомпоновкиДанных.ВСписке,, ЗначениеЗаполнено(ОтборПоСостояниюВыпуска));
		
		ГруппаОтбораПоСостоянию.Использование = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокДоступныхСостоянийЭтаповИГрафика()

	Результат = Новый Массив;
	
	Если ОтборТребуетсяСформироватьЭтапы Тогда
		Результат.Добавить(1);
	КонецЕсли;
	
	Если ОтборТребуетсяПроверитьЭтапы Тогда
		Результат.Добавить(2);
	КонецЕсли;
	
	Если ОтборТребуетсяПланированиеГрафика Тогда
		Результат.Добавить(3);
	КонецЕсли;
	
	Если ОтборТребуетсяПередатьЭтапыКВыполнению Тогда
		Результат.Добавить(4);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СписокДоступныхСостоянийВыпуска()

	Результат = Новый Массив;
	
	Если ОтборНарушенаДатаПотребности Тогда
		Результат.Добавить(1);
	КонецЕсли;
	
	Если ОтборВыполнен Тогда
		Результат.Добавить(2);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеГиперссылок

&НаКлиенте
Процедура Подключаемый_ОбновитьГиперссылки()
	
	ОбновитьГиперссылки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьГиперссылки(Форма)
	
	Элементы = Форма.Элементы;
	
	СтруктураОтборов = ЗначенияОсновныхОтборов(Форма);
	СтруктураОтборов.Вставить(
		"Статус",
		ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется"));
	
	КоличествоЗаказов = КоличествоЗаказов(СтруктураОтборов);
	КоличествоЗаказовСтрокой = Формат(КоличествоЗаказов, "ЧН=0; ЧГ=0");
	
	Элементы.ФормирующиесяЗаказы.Заголовок = СтрШаблон(
												НСтр("ru = 'Формирующиеся заказы (%1)';
													|en = 'Orders being generated (%1)'"),
												КоличествоЗаказовСтрокой);
	
КонецПроцедуры

#КонецОбласти

#Область Очередь

&НаКлиентеНаСервереБезКонтекста
Функция ОчередьДоступна(Форма)
	
	Возврат НЕ (ЗначениеЗаполнено(Форма.ДатаСобытия)
			ИЛИ ЗначениеЗаполнено(Форма.Приоритет)
			ИЛИ ЗначениеЗаполнено(Форма.Ответственный)
			ИЛИ ЗначениеЗаполнено(Форма.Актуальность)
			ИЛИ Форма.ОтборТребуетсяСформироватьЭтапы
			ИЛИ Форма.ОтборТребуетсяПроверитьЭтапы
			ИЛИ Форма.ОтборТребуетсяПланированиеГрафика
			ИЛИ Форма.ОтборТребуетсяПередатьЭтапыКВыполнению
			ИЛИ Форма.ОтборТребуетсяОбеспечение
			ИЛИ Форма.ОтборНарушенаДатаПотребности
			ИЛИ Форма.ОтборВыполнен
	);
	
КонецФункции

&НаКлиенте
Функция РазрешеноПеретаскивание(МассивЗаказов, ПроверяемаяПозиция)
	
	Если ПроверяемаяПозиция <> Неопределено 
		И ТипЗнч(МассивЗаказов) = Тип("Массив") И МассивЗаказов.ВГраница() = 0 
		И ТипЗнч(МассивЗаказов[0]) = Тип("ДокументСсылка.ЗаказНаПроизводство2_2")
		И МожноВставитьДокументВОчередь(МассивЗаказов[0], ПроверяемаяПозиция) Тогда
		
		НоваяПозицияВОчереди = ПроверяемаяПозиция;
		
	Иначе
		
		НоваяПозицияВОчереди = Неопределено;
		
	КонецЕсли;
	
	Возврат (НоваяПозицияВОчереди <> Неопределено);
	
КонецФункции

&НаСервереБезКонтекста
Функция МожноВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозицияВОчереди)
	
	Возврат МенеджерОбъекта().МожноВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозицияВОчереди);
	
КонецФункции

&НаСервере
Процедура ВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозицияВОчереди)
	
	ЗаблокироватьДанныеДляРедактирования(ТекущийЗаказ);
	ЗаблокироватьДанныеДляРедактирования(НоваяПозицияВОчереди);
	
	МенеджерОбъекта().ВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозицияВОчереди);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьЗаказВОчереди(ТекущийЗаказ, Направление)
	
	Если НЕ МенеджерОбъекта().МожноПереместитьДокументВОчереди(ТекущийЗаказ, Направление) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(ТекущийЗаказ);

	МенеджерОбъекта().ПереместитьДокументВОчереди(ТекущийЗаказ, Направление);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОчередьПланирования(ТекущийЗаказ, ПодразделениеДиспетчер)
	
	Возврат МенеджерОбъекта().ОчередьПланирования(ТекущийЗаказ, ПодразделениеДиспетчер);
	
КонецФункции

#КонецОбласти

#Область СтруктураЗаказа

&НаКлиенте
Процедура ПроверитьОшибкиРасчетаСтруктурыЗаказа() Экспорт

	Если Не ЕстьОшибкиРасчетаСтруктурыЗаказа() Тогда
		
		Элементы.ГруппаПредупреждениеСостояниеРасчета.Видимость = Ложь;
		
	Иначе
		
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(НСтр("ru = 'Расчет структуры заказов завершился с ошибками';
									|en = 'The order structure calculation completed with errors'"));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'пересчитать';
																|en = 'recalculate'"),,,, "Пересчитать"));
		МассивСтрок.Добавить(" / ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'подробнее';
																|en = 'details'"),,,, "Подробнее"));
		ПредупреждениеСостояниеРасчета = Новый ФорматированнаяСтрока(МассивСтрок);
		Элементы.ГруппаПредупреждениеСостояниеРасчета.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьОшибкиРасчетаСтруктурыЗаказа()

	ПротоколДоступен = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа);

	Если Не ПротоколДоступен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьОшибкиВПротоколе = РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.ПроверитьОшибкиОчередиЗаказов();
	
	Возврат ЕстьОшибкиВПротоколе;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПересчитатьОшибкиРасчетаСтруктурыЗаказа()

	РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.ПересчитатьОшибкиИзОчередиЗаказов();
	
КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание(ИмяЗадания, НаименованиеЗадания, ИмяПроцедуры, ПараметрыПроцедуры)
	
	ОчиститьСообщения();
	
	РезультатЗапуска = ЗапуститьФоновоеЗаданиеНаСервере(
		НаименованиеЗадания,
		ИмяПроцедуры,
		ПараметрыПроцедуры);
	
	Если РезультатЗапуска.НачатьОжидание Тогда
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ВыполнитьВФонеЗавершение", ЭтотОбъект, Новый Структура("ИмяЗадания", ИмяЗадания)),
			ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект));
		
	Иначе
		
		ОповеститьОВыполненииЗадания(ИмяЗадания, РезультатЗапуска.РезультатЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере(НаименованиеЗадания, ИмяПроцедуры, ПараметрыПроцедуры)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	НачатьОжидание = Истина;
	РезультатЗадания = Неопределено;
	
	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		
		НачатьОжидание = Ложь;
		РезультатЗадания = ОбработатьРезультатФоновогоЗадания(ДлительнаяОперация);
		
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
	Возврат Новый Структура("НачатьОжидание, РезультатЗадания", НачатьОжидание, РезультатЗадания);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		РезультатЗадания = ОбработатьРезультатФоновогоЗадания(Результат);
		
		ОповеститьОВыполненииЗадания(ДопПараметры.ИмяЗадания, РезультатЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОВыполненииЗадания(ИмяЗадания, РезультатЗадания)

	Если ИмяЗадания = "СформироватьЭтапыПроизводства" Тогда
		
		УправлениеПроизводствомКлиент.ОповеститьПользователяОФормированииЭтаповПроизводства(
			РезультатЗадания, УникальныйИдентификатор);
		
	ИначеЕсли ИмяЗадания = "ПередатьЭтапыКВыполнению" Тогда
		
		УправлениеПроизводствомКлиент.ОповеститьПользователяОПередачиЭтаповКВыполнению(
			РезультатЗадания, УникальныйИдентификатор);
		
	ИначеЕсли ИмяЗадания = "ПометитьНаУдалениеЭтапыПроизводства" Тогда
		
		УправлениеПроизводствомКлиент.ОповеститьПользователяОПометкеНаУдалениеЭтаповПроизводства(
			РезультатЗадания);
		
	ИначеЕсли ИмяЗадания = "ПланироватьГрафикПроизводства" Тогда
		
		УправлениеПроизводствомКлиент.ОповеститьПользователяОПланированииГрафикаПроизводства(
			РезультатЗадания, УникальныйИдентификатор);
			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатФоновогоЗадания(Результат)
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Результат.Статус = "Ошибка" Тогда
		
		Если ТипЗнч(РезультатЗадания) = Тип("Структура") И РезультатЗадания.Свойство("Сообщения") Тогда
			
			Для каждого Сообщение Из РезультатЗадания.Сообщения Цикл
			
				Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
				Сообщение.Сообщить();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	Иначе
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	Возврат РезультатЗадания;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОткрытьДиспетчированиеЭтапов(Распоряжение, ДополнительныеОтборы = Неопределено)
	
	Отборы = Новый Структура;
	
	Отборы.Вставить("ПодразделениеДиспетчер", Подразделение);
	Отборы.Вставить("Распоряжение",           Распоряжение);
	
	Если ДополнительныеОтборы <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Отборы, ДополнительныеОтборы);
		
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.Диспетчирование",
		Новый Структура("СтруктураОтборов", Отборы), ЭтаФорма);
	
	Оповестить(УправлениеПроизводствомКлиентСервер.ИмяСобытияОбновитьДиспетчированиеЭтапов(),
		Отборы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПланированияЗаказа(Распоряжение)
	
	ПараметрыФормы = Новый Структура("Распоряжение", Распоряжение);
	
	ОткрытьФорму("Обработка.ПланированиеГрафикаПроизводства2_2.Форма.ПланированиеГрафикаЗаказа", 
		ПараметрыФормы,, Распоряжение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПланированиеПолуфабрикатов()
	
	ПараметрыФормы = ОбеспечениеКлиент.ПараметрыОткрытияФормыОбработкиОбеспечениеПотребностей();
	
	ПараметрыФормы.ОтборПоТипуОбеспечения      = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Производство");
	ПараметрыФормы.ОтборПоИсточникуОбеспечения = Подразделение;
	
	ПараметрыФормы.ЕстьШагЗапасы = Ложь;
	
	ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбеспечениеЦеховыхКладовых()
	
	ПараметрыФормы = ОбеспечениеКлиент.ПараметрыОткрытияФормыОбработкиОбеспечениеПотребностей();
	
	ПараметрыФормы.ОтборПоЦеховымКладовым = Истина;
	
	ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормирующиесяЗаказы()
	
	СтруктураОтборов = ЗначенияОсновныхОтборов(ЭтаФорма, Ложь);
	СтруктураОтборов.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется"));
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаСписка", 
		Новый Структура("СтруктураОтборов", СтруктураОтборов));

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗакрытыеЗаказы()
	
	СтруктураОтборов = ЗначенияОсновныхОтборов(ЭтаФорма, Ложь);
	СтруктураОтборов.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт"));
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаСписка",
		Новый Структура("СтруктураОтборов", СтруктураОтборов));

КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоЗаказов(Знач ПараметрыОтбора)
	
	Возврат Документы.ЗаказНаПроизводство2_2.КоличествоЗаказов(ПараметрыОтбора);
	
КонецФункции

&НаКлиенте
Функция ВыбранныеЗаказы()

	Возврат ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивСсылок(Ссылка = Неопределено)
	
	МассивСсылок = Новый Массив;
	
	Если Ссылка <> Неопределено Тогда
		МассивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗапускаЗаданийПоЗаказу(ВыбраннаяСтрока)
	
	МассивСсылок = МассивСсылок(ВыбраннаяСтрока);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Распоряжения", МассивСсылок);
	
	Возврат ПараметрыОбработки;

КонецФункции

&НаСервереБезКонтекста
Функция МенеджерОбъекта()
	
	Возврат Документы.ЗаказНаПроизводство2_2;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Элементы.Список.ТекущаяСтрока = МассивСсылок[0];
		ПоказатьЗначение(Неопределено, МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказНаПроизводство2_2.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

#КонецОбласти

#КонецОбласти
