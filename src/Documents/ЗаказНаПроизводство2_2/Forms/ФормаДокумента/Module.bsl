#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	Если Параметры.Свойство("ВыбраннаяСтрока") Тогда
		
		ИдентификаторАктивнойСтроки = НайтиСтрокуПоДаннымСтроки(Параметры.ВыбраннаяСтрока)
		
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказНаПроизводство2_2.ПараметрыВыбораСтатейИАналитик(Объект);
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	МетаДокумент = Метаданные.Документы.ЗаказНаПроизводство2_2;
	Если Не ПравоДоступа("Добавление", МетаДокумент)
	   И Не ПравоДоступа("Изменение", МетаДокумент) Тогда
		
		Элементы.ФормаОчередьЗаказов.Видимость             = Ложь;
		Элементы.ФормаПересчитатьСтруктуруЗаказа.Видимость = Ложь;
		Элементы.ПересчитатьСтруктуруЗаказа.Видимость      = Ложь;
		
		Элементы.ГруппаДинамическаяСтруктура.Доступность   = Ложь;
		
	КонецЕсли;
	
	#Область УниверсальныеМеханизмы
	
	// Документ основание
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ДокументОснование", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование));

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	// Настройка команд буфера обмена
	УстановитьДоступностьКомандБуфераОбмена();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	Если ЗаказЗапланирован Тогда
		ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	КонецЕсли;
	
	#КонецОбласти
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ИдентификаторАктивнойСтроки <> Неопределено Тогда
		Элементы.Содержание.ТекущаяСтраница = Элементы.СтраницаПродукция;
		Элементы.Продукция.ТекущаяСтрока = ИдентификаторАктивнойСтроки;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	ПодключитьОбработчикОжидания("КонтрольРасчетаСтруктурыЗаказа", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ПродукцияОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаказДавальца2_5.Форма.ФормаВыбораЗаказа"
			//++ Устарело_Переработка24
			Или ИсточникВыбора.ИмяФормы = "Документ.ЗаказДавальца.Форма.ФормаВыбораЗаказа"
			//-- Устарело_Переработка24
			Или Ложь Тогда
		
		ПродукцияОбработкаВыбораПодборПоЗаказамДавальцаНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВводДолиСтоимости" Тогда
		
		ОбработкаВводаДолиСтоимости(ТекущийЭлемент.ТекущиеДанные, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказНаПроизводство" ИЛИ ИмяСобытия = "Запись_ЗаказНаПроизводство2_2" Тогда
		
		Если Параметр = Неопределено
			ИЛИ ТипЗнч(Параметр) = Тип("ДокументСсылка.ЗаказНаПроизводство2_2") И Параметр = Объект.Ссылка
			ИЛИ ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ЗаказНаПроизводство") И Параметр.ЗаказНаПроизводство = Объект.Ссылка
			ИЛИ ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ЗаказыНаПроизводство") И Параметр.ЗаказыНаПроизводство.Найти(Объект.Ссылка) <> Неопределено Тогда
			КонтрольРасчетаСтруктурыЗаказа();
		КонецЕсли;
		
	КонецЕсли;

	Если ИмяСобытия = "Запись_ЭтапыПроизводства" Тогда
		
		ОбновитьСостояниеГиперссылкиЭтапыЗаказа();
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом	
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	Если ЗаказЗапланирован Тогда
		ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	КонецЕсли;
	
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Обработчик подсистемы запрета редактирования реквизитов объектов
	Если НЕ ЗаказЗапланирован Тогда
		
		ЗаблокированныеРеквизиты = СписокЗаблокированныхРеквизитовОбъекта();
		
		Если ЗаблокированныеРеквизиты.Количество() > 0 Тогда
			ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтотОбъект, ЗаблокированныеРеквизиты);
		КонецЕсли;
		
	КонецЕсли;
	
	Оповестить("Запись_ЗаказНаПроизводство", Объект.Ссылка);
	
	ПодключитьОбработчикОжидания("КонтрольРасчетаСтруктурыЗаказа", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	СкрыватьОтмененныеСтроки = Настройки.Получить("СкрыватьОтмененныеСтроки");
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Продукция.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПродукцияСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтроки;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура СодержаниеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Статус");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПроизводственногоПроцессаПриИзменении(Элемент)
	
	ТипПроизводственногоПроцессаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПодДеятельностьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НачатьНеРанееПриИзменении(Элемент)
	
	ЗаполнитьСпецификациюВТабличнойЧасти(,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДинамическаяСтруктураПриИзменении(Элемент)
	
	Если Объект.ДинамическаяСтруктура
		И Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка") Тогда
		
		Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка");
		
		ТипПроизводственногоПроцессаПриИзмененииНаСервере();
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ДинамическаяСтруктура");
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиПодбораСпецификацийВЗаказахНаПроизводствоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("ЗаказНаПроизводство", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ПротоколРасчетаСтруктурыЗаказа.Форма.ВыводОшибокПодбораСпецификацийВЗаказахНаПроизводство", СтруктураПараметров, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиЗаполненияДанныхОбИзделияхОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("ЗаказНаПроизводство", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ПротоколРасчетаСтруктурыЗаказа.Форма.ВыводОшибокРазузлованияСтруктурыИзделия", СтруктураПараметров, Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ОшибкиРасчетаНормативногоГрафикаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("ЗаказНаПроизводство", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.НормативныйГрафикСтруктурыЗаказа.Форма.ЖурналОшибок", СтруктураПараметров, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПотребностиПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ДатаПотребности");
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеВыпускаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РазмещениеВыпуска");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыПродукция

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Продукция, ЭтотОбъект);
	
	Если НоваяСтрока Тогда
		
		ЗаполнитьСкладПоУмолчаниюВСтроке(ЭтаФорма, ТекущиеДанные);
		
		Если Не Копирование Тогда
			
			ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, ТекущиеДанные, "Объект.Продукция");
			
		КонецЕсли;
		
		ТекущиеДанные.КлючНоменклатура = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элемент, ПараметрыРаспределенияЗатрат, ПродукцияКешТекущейСтроки, НоваяСтрока) Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	КонецЕсли;
	
	КэшТекущейСтроки = РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Продукция, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент)
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если (Поле = Элементы.ПродукцияДоляСтоимостиПроцент
			ИЛИ Поле = Элементы.ПродукцияЕстьОшибкиЗаполненияДолиСтоимости)
		И Объект.СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	Если ТекущаяСтрока.СписатьНаРасходы
		Или ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			
		ТекущаяСтрока.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		
	Иначе
		
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Склад) 
			И ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ТипНоменклатуры") = 
											ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
												
			ТекущаяСтрока.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			
		КонецЕсли;
			
	КонецЕсли;
	
	ЗаполнитьСкладПоУмолчаниюВСтроке(ЭтаФорма, ТекущаяСтрока);
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока,
			ЭтаФорма,
			СтруктураДействий);
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
			ТекущаяСтрока,
			ЭтаФорма,
			СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	
	Если Не НазначениеУказываетсяВШапкеДокумента(ЭтаФорма) Тогда
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	КонецЕсли;
	
	СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
			Объект,
			ТекущаяСтрока,
			ПараметрыВыбораСпецификаций);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	
	Если Объект.ТипПроизводственногоПроцесса =
		ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
		ТекущаяСтрока,
		ЭтаФорма,
		СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Если Объект.ТипПроизводственногоПроцесса =
		ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыПроизводства.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСписатьНаРасходыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		
		СтруктураДействий = Новый Структура;
		
		Если ТекущиеДанные.СписатьНаРасходы Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Склад) Тогда
				ТекущиеДанные.Склад         = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Подразделение) Тогда
				ТекущиеДанные.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
			КонецЕсли;
			
			ЗаполнитьСкладПоУмолчаниюВСтроке(ЭтаФорма, ТекущиеДанные, СтруктураДействий);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДействий) Тогда
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;	
		
	КонецЕсли;
	
	ДоходыИРасходыКлиентСервер.ПриИзмененииРеквизитаДоступностиСтатьиВСтроке(ЭтотОбъект, ТекущиеДанные, "Объект.Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыДополнительно

&НаКлиенте
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзменении(Элемент)
	
	СпособРаспределенияЗатратНаВыходныеИзделияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзмененииНаСервере()
	
	ПараметрыРаспределенияЗатратСтруктура = Документы.ЗаказНаПроизводство2_2.ПараметрыРаспределенияЗатрат(Объект);
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(ПараметрыРаспределенияЗатратСтруктура);
	
	ПроизводствоСервер.РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат);
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#Область КоманднаяПанельФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтруктуруЗаказаДействие(Команда)
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Провести и продолжить?';
													|en = 'Post and continue?'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'Для перехода в рабочее место ""Структура заказа"" необходимо провести документ.';
							|en = 'To go to the order structure, post the document.'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСтруктуруЗаказаДействиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		
	Иначе
		
		ОткрытьСтруктуруЗаказа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтруктуруЗаказаДействиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПринудительноЗакрытьФорму = Ложь;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	Если Записать(ПараметрыЗаписи) Тогда
		ОткрытьСтруктуруЗаказа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияДокумента(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаленияДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтруктуруЗаказа(Команда)
	
	Если Объект.Проведен И Не Модифицированность Тогда
		
		ЗапуститьПолныйРасчетСтруктурыЗаказа();
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПровестиИПересчитатьСтруктуруЗаказаЗавершение", ЭтотОбъект);
		Кнопки = Новый СписокЗначений();
		ТекстВопроса = НСтр("ru = 'Для пересчета структуры заказа документ должен быть проведен! Провести?';
							|en = 'To recalculate the order structure, the document must be posted. Post?'");
		Кнопки.Добавить(КодВозвратаДиалога.Да,НСтр("ru = 'Провести';
													|en = 'Post'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена,НСтр("ru = 'Отмена';
														|en = 'Cancel'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИПересчитатьСтруктуруЗаказаЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		
		ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
		
		ЗапуститьПолныйРасчетСтруктурыЗаказа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПриоритет(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ОткрытьФорму(
			"Справочник.Приоритеты.ФормаВыбора",
			Новый Структура("ТекущаяСтрока", Объект.Приоритет),
			Элементы.Приоритет,
			УникальныйИдентификатор,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Модифицированность Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаписатьДокументИИзменитьПриоритетЗавершение", ЭтотОбъект),
			НСтр("ru = 'Для изменения приоритета требуется записать документ.
				|Записать и продолжить?';
				|en = 'To change the priority, save the document.
				|Save and continue?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьФорму(
			"Справочник.Приоритеты.ФормаВыбора",
			Новый Структура("ТекущаяСтрока", Объект.Приоритет),
			ЭтаФорма,
			УникальныйИдентификатор,,,
			Новый ОписаниеОповещения("ИзменитьПриоритетЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументИИзменитьПриоритетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		
		ОткрытьФорму(
			"Справочник.Приоритеты.ФормаВыбора",
			Новый Структура("ТекущаяСтрока", Объект.Приоритет),
			ЭтаФорма,
			УникальныйИдентификатор,,,
			Новый ОписаниеОповещения("ИзменитьПриоритетЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПриоритетЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	НачатьОжидание = ИзменитьПриоритетВФоне(РезультатВыбора);
	
	Если НачатьОжидание Тогда
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ИзменитьПриоритетВФонеЗавершение", ЭтотОбъект),
			ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект));
		
	Иначе
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодвалФормы

&НаКлиенте
Процедура ДекорацияЭтапыЗаказаНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Распоряжение", Объект.Ссылка);
	
	ПараметрыСпискаЭтапов = Новый Структура;
	ПараметрыСпискаЭтапов.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.ФормаСписка", ПараметрыСпискаЭтапов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРедактироватьЭтапыНажатие(Элемент)
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству") Тогда
		
		ТекстСообщения = НСтр("ru = 'Планирование этапов возможно только для заказов в статусе ""%Статус%""';
								|en = 'You can plan stages only for orders in status ""%Статус%"".'");
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%Статус%",
			ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "Статус");
		
		Возврат;
		
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Провести и продолжить?';
													|en = 'Post and continue?'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'Для редактирования этапов заказа необходимо провести документ.';
							|en = 'To edit order stages, post the document.'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияРедактироватьЭтапыНажатиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		
	Иначе
		
		РедактироватьЭтапы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРедактироватьЭтапыНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПринудительноЗакрытьФорму = Ложь;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	Если Записать(ПараметрыЗаписи) Тогда
		РедактироватьЭтапы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтразитьВыполненныйЭтапНажатие(Элемент)
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству") Тогда
		
		ТекстСообщения = НСтр("ru = 'Отражение выполненных этапов возможно только для заказов в статусе ""%Статус%""';
								|en = 'Recording of completed stages is available only for orders in the ""%Статус%"" status'");
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%Статус%",
			ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "Статус");
		
		Возврат;
		
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Провести и продолжить?';
													|en = 'Post and continue?'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'Для отражения выполненных этапов необходимо провести документ.';
							|en = 'Post the document to record completed stages.'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияОтразитьВыполненныйЭтапНажатиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		
	Иначе
		
		ОтразитьВыполненныйЭтап();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтразитьВыполненныйЭтапНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПринудительноЗакрытьФорму = Ложь;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	Если Записать(ПараметрыЗаписи) Тогда
		ОтразитьВыполненныйЭтап();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаПродукция

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%';
							|en = 'Pick goods in %Документ%'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
		
	Иначе
		
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'заказ на производство';
																				|en = 'production order'"));
		
	КонецЕсли;
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	Если Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
	 Или Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
	 
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         	 Истина);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    	 Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",          	 Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 	 ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                     	 Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                 	 Объект.Ссылка);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",                       Новый ФиксированныйМассив(МассивТиповНоменклатуры));
	ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам",                          Истина);
		
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьПоЗаказамДавальца(Команда)
	
	ПараметрыОтбора = Новый Структура("Организация, НаправлениеДеятельности, Партнер, Договор, ТипПроизводственногоПроцесса");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);
	ПараметрыОтбора.Вставить("УправлениеПроизводством2_2", Истина);
	ПараметрыФормы = Новый Структура("Отбор, МножественныйВыбор", ПараметрыОтбора, Истина);
	
	Если Объект.ХозяйственнаяОперация =
			ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора() Тогда
		ИмяФормыВыбораЗаказа = "Документ.ЗаказДавальца2_5.Форма.ФормаВыбораЗаказа";
	//++ Устарело_Переработка24
	Иначе
		ИмяФормыВыбораЗаказа = "Документ.ЗаказДавальца.Форма.ФормаВыбораЗаказа";
	//-- Устарело_Переработка24
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыВыбораЗаказа, ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(Объект.Продукция, Элементы.Продукция, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока.КлючНоменклатура = Неопределено;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
		ТекущиеДанные,
		ЭтаФорма,
		СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(МассивСтрок, СтруктураДействий);

КонецПроцедуры

&НаКлиенте
Процедура Спецификации_Заполнить(Команда)
	
	Если Элементы.Продукция.ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В таблице отсутствуют выделенные строки. Выделите строки для заполнения реквизита ""Спецификация""';
										|en = 'No lines are selected in the table. Select lines to fill in the BOM attribute'"));
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСпецификациюВТабличнойЧасти(Элементы.Продукция.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьПолучателя(Команда)
	
	Если Элементы.Продукция.ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В таблице отсутствуют выделенные строки. Выделите строки для заполнения реквизита ""Получатель""';
										|en = 'There are no selected rows in the table. Select rows to fill the ""Recipient"" attribute'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыТЧ = Новый Структура;
	ПараметрыТЧ.Вставить("ИмяТЧФорма", "Продукция");
	ПараметрыТЧ.Вставить("ИмяТЧОбъект", "Продукция");
	ПараметрыТЧ.Вставить("ПредставлениеТЧ", НСтр("ru = 'Продукция';
												|en = 'Manufactured products'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПолучателяЗавершение", 
													ЭтотОбъект, Новый Структура("ПараметрыТЧ", ПараметрыТЧ));
	
	ПроизводствоКлиент.ОткрытьФормуВыбораПолучателя(ЭтаФорма, Объект, ПараметрыТЧ,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьСтатьюРасходов(Команда)
	
	Если Элементы.Продукция.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать продукцию, для которой требуется заполнить статью расходов.';
									|en = 'Select manufactured products for which you need to fill the expense item.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Новый Массив();
	Для каждого ИдентификаторСтроки Из Элементы.Продукция.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Не ДанныеСтроки.СписатьНаРасходы Тогда
			Продолжить;
		КонецЕсли;
		Идентификаторы.Добавить(ИдентификаторСтроки);
	КонецЦикла;
	
	Если Идентификаторы.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'В выделенных строках отсутствует продукция, для которой требуется заполнить статью расходов.';
									|en = 'The selected rows do not contain manufactured products for which you need to fill the expense item.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ДоходыИРасходыКлиент.ЗаполнитьСтатьюИАналитикуВВыделенныхСтроках(ЭтотОбъект, Элементы.ПродукцияСтатьяРасходов, Идентификаторы);
	
КонецПроцедуры


&НаКлиенте
Процедура ПродукцияОтменитьВыделенныеСтроки(Команда)
	
	Если Объект.Продукция.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Табличная часть не заполнена.';
													|en = 'Table is not filled in.'"));
		Возврат;
	ИначеЕсли Элементы.Продукция.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В табличной части отсутствуют выделенные строки.';
													|en = 'No rows are selected in the table.'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ПричиныОтменыПроизводства.ФормаВыбора",
		,
		,
		,
		,
		,
		Новый ОписаниеОповещения("ПродукцияОтменитьВыделенныеСтрокиЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтменитьВыделенныеСтрокиЗавершение(ПричинаОтмены, ДополнительныеПараметры) Экспорт
	
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	ПродукцияОтменитьВыделенныеСтрокиЗавершениеСервер(ВыделенныеСтроки, ПричинаОтмены);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выделенные строки отменены';
			|en = 'Selected lines are canceled'"),
		,
		НСтр("ru = 'Выделенные строки заказа отменены.';
			|en = 'Selected order lines are canceled.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияОтменитьВыделенныеСтрокиЗавершениеСервер(Знач ВыделенныеСтроки, ПричинаОтмены)
	
	Для каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Продукция.НайтиПоИдентификатору(Идентификатор);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ТипПроизводственногоПроцесса =
		ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтроки = Не СкрыватьОтмененныеСтроки;
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Продукция.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПродукцияСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияДеревоСпецификации(Команда)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В таблице отсутствует выделенная строка. Выделите строку для открытия дерева спецификации.';
										|en = 'There is no selected line in the table. Select a line to open a BOM tree.'"));
		Возврат;
	КонецЕсли;
	
	Спецификация = ТекущиеДанные.Спецификация;
	Номенклатура = ТекущиеДанные.Номенклатура;
	Характеристика = ТекущиеДанные.Характеристика;
	
	Если НЕ ЗначениеЗаполнено(Спецификация) И НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В выбранной строке должна быть заполнена спецификация либо номенклатура.';
										|en = 'The bill of materials or the item must be filled in the selected line.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Спецификация", Спецификация);
	ПараметрыОткрытия.Вставить("Номенклатура", Номенклатура);
	ПараметрыОткрытия.Вставить("Характеристика", Характеристика);
	ПараметрыОткрытия.Вставить("КоличествоВыходногоИзделия", ТекущиеДанные.Количество);
	ПараметрыОткрытия.Вставить("КоличествоУпаковокВыходногоИзделия", ТекущиеДанные.КоличествоУпаковок);
	ПараметрыОткрытия.Вставить("УпаковкаВыходногоИзделия", ТекущиеДанные.Упаковка);
	ПараметрыОткрытия.Вставить("Дата", Объект.НачатьНеРанее);
	ПараметрыОткрытия.Вставить("ПодразделениеДиспетчер", Объект.Подразделение);
	ПараметрыОткрытия.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Дерево спецификации';
												|en = 'BOM tree'")); 
	ПараметрыОткрытия.Вставить("РежимОтображения", "Спецификация");
	
	
	ОткрытьФорму("Обработка.ДеревоРесурсныхСпецификаций.Форма",
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеМеханизмы

#Область ИнтеграцияС1СДокументооборотом

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)

	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область БуферОбмена

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Продукция.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Продукция.Количество() - КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Продукция) Тогда
		СкопироватьСтрокиНаСервере();
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Продукция.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// стандартное оформление номенклатуры
#Область НоменклатураХарактеристика

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
		"ПродукцияЕдиницаИзмерения", 
		"Объект.Продукция.Упаковка");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
		"ПродукцияХарактеристика",
		"Объект.Продукция.ХарактеристикиИспользуются");
		
#КонецОбласти

	// оформление склада и подразделения
#Область Получатель

	// отключение видимости склада, если работа или услуга или установлен списать на расходы
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСклад.Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбораИ = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// отключение видимости подразделения, если товар или тара или пустая или не выбран и не установлен списать на расходы

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.ПустаяСсылка());
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Поясняющая надпись для подразделения, если Ф.О. "Несколько складов" не используется.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
#КонецОбласти

	// оформление статей и аналитики расходов
#Область СписаниеНаРасходы
	
	ДавальческиеОперации = Новый СписокЗначений;
	//++ Устарело_Переработка24
	ДавальческиеОперации.Добавить(Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья);
	//-- Устарело_Переработка24
	ДавальческиеОперации.Добавить(ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора());
	
	// видимость зависит от типа производственного процесса
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСписатьНаРасходы.Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация"); 
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ДавальческиеОперации;
		
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокТиповПроцесса = Новый СписокЗначений;
	СписокТиповПроцесса.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Разборка);
	СписокТиповПроцесса.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Ремонт);
	
	ОтборЭлемента.ПравоеЗначение = СписокТиповПроцесса;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость" , Ложь);

	// поясняющая надпись, если работа и на расходы не списываем

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст"      , НСтр("ru = '<при списании на расходы>';
																		|en = '<when writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста" , ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// назначение не указывается при списании на расходы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста"     , ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст"          , НСтр("ru = '<не используется при списании на расходы>';
																			|en = '<not used while writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр" , Истина);
	
#КонецОбласти

	// обязательное заполнение договоров
#Область Договор
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Договор.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорНеОбязателен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
#КонецОбласти

	// в давальческой схеме назначение обязательно для заполнения
#Область Назначение
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НазначениеПродукция.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ДавальческиеОперации;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НазначениеПродукция");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияНазначение.Имя);
	
	ГруппаОтбораИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ДавальческиеОперации;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
#КонецОбласти

	// приоритет
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПриоритета(ЭтаФорма);
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление, Элементы.Продукция, Элементы.ПродукцияОтменено.Имя, Элементы.ПродукцияПричинаОтмены.Имя);

#Область Спецификация
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСпецификация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДинамическаяСтруктура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСпецификация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
#КонецОбласти

#Область ДолиСтоимости

	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(
		ЭтаФорма, "Объект", "Продукция");
		
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиОтмененныхСтрок(
		ЭтаФорма, "Объект", "Продукция", "ПродукцияДоляСтоимости");
	
#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область НастройкаФормы

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ДоступноОписаниеТипаПроизводственногоПроцесса = УправлениеДаннымиОбИзделиях.ДоступноОписаниеТипаПроизводственногоПроцесса();
	
	Элементы.ТипПроизводственногоПроцесса.Видимость = ДоступноОписаниеТипаПроизводственногоПроцесса;
	Если ДоступноОписаниеТипаПроизводственногоПроцесса Тогда
		ПроизводствоСервер.ЗаполнитьСписокТиповПроизводственногоПроцесса(Элементы.ТипПроизводственногоПроцесса);
	КонецЕсли;
	
	Элементы.НачатьНеРанее.ФорматРедактирования = ФорматДатыГрафика;
	Элементы.ДатаПотребности.ФорматРедактирования = ФорматДатыГрафика;
	
	ОбновитьСостояниеГиперссылкиЭтапыЗаказа();
	
	Элементы.ХозяйственнаяОперация.Видимость =
		ИспользоватьПроизводствоИзДавальческогоСырья2_5
		//++ Устарело_Переработка24
		Или ИспользоватьПроизводствоИзДавальческогоСырья
		//-- Устарело_Переработка24
		Или Ложь;
	
	ЗаполнитьСписокВыбораОпераций();
	
	#Область УправлениеДоступом
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.РесурсныеСпецификации) Тогда
		Элементы.ПродукцияСпецификацииЗаполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Отчеты.СтруктураЗаказаНаПроизводство2_2)
			ИЛИ Не ПравоДоступа("Просмотр", Метаданные.Отчеты.СтруктураЗаказаНаПроизводствоДинамическая) Тогда
		Элементы.ФормаСтруктураЗаказа.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Использование", Метаданные.Обработки.РедактированиеПоследовательностиЭтаповПроизводства) Тогда
		Элементы.ДекорацияРедактироватьЭтапы.Доступность = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ЭтапПроизводства2_2) Тогда
		Элементы.ДекорацияОтразитьВыполненныйЭтап.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Обработки.ДеревоРесурсныхСпецификаций) Тогда
		Элементы.ПродукцияСпецификацииДеревоСпецификации.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.Склады) Тогда
		Элементы.ПродукцияЗаполнитьПолучателя.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Просмотр", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов)
		ИЛИ Не ПравоДоступа("Просмотр", Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов) Тогда
		Элементы.ПродукцияЗаполнитьПолучателя.Видимость = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Тогда
		
		Элементы.Приоритет.ТолькоПросмотр = Форма.ЗаказЗапланирован;
		Элементы.ИзменитьПриоритет.Видимость = Форма.ЗаказЗапланирован И Форма.ЕстьПравоНаИзменение;
		Элементы.ДинамическаяСтруктура.Видимость = Не Форма.ЗаказЗапланирован;
		
	КонецЕсли;
	
	// Дин. структура
	Если СтруктураРеквизитов.Свойство("ДинамическаяСтруктура")
		ИЛИ Инициализация Тогда
		Элементы.ФормаПересчитатьСтруктуруЗаказа.Видимость = Объект.ДинамическаяСтруктура;
		Элементы.УкрупненныйЗаказПоНазначениямПродукции.Видимость = Объект.ДинамическаяСтруктура
			И (Объект.ВариантОбособления = ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции")
				Или Объект.ВариантОбособления.Пустая()
				И Форма.ТекущийВариантОбособления = ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции"));
		Элементы.ОбособленноеОбеспечениеМатериаловИРабот.Видимость = Не Объект.ДинамическаяСтруктура Или Объект.ОбособленноеОбеспечениеМатериаловИРабот;
	КонецЕсли;
	
	// Назначение выходных изделий в шапке
	Если СтруктураРеквизитов.Свойство("ТипПроизводственногоПроцесса")
		Или Инициализация Тогда
		
		Элементы.НазначениеПродукция.Видимость = НазначениеУказываетсяВШапкеДокумента(Форма);
		
	КонецЕсли;
	
	// Табличная часть "Продукция"
	Если СтруктураРеквизитов.Свойство("ТипПроизводственногоПроцесса")
		Или СтруктураРеквизитов.Свойство("Статус")
		Или СтруктураРеквизитов.Свойство("ХозяйственнаяОперация")
		Или Инициализация Тогда
		
		Элементы.СтраницаПродукция.Заголовок = ПроизводствоКлиентСервер.ЗаголовокТабличнойЧастиПоТипуПроцесса(Объект.ТипПроизводственногоПроцесса);
		
		Элементы.ДатаПотребности.Видимость =
			Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка");
		Элементы.РазмещениеВыпуска.Видимость =
			Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка");
		
		Элементы.ПродукцияНазначение.Видимость = НЕ НазначениеУказываетсяВШапкеДокумента(Форма);
		
		Если Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
		 Или Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
			Если Форма.ИспользоватьНесколькоСкладов Тогда
				Элементы.ПродукцияГруппаПолучатель.Заголовок = НСтр("ru = 'Получатель';
																	|en = 'Recipient'");
			Иначе
				Элементы.ПродукцияГруппаПолучатель.Заголовок = НСтр("ru = 'Подразделение-получатель';
																	|en = 'Receiving business unit'");
			КонецЕсли;
		Иначе
			Элементы.ПродукцияГруппаПолучатель.Заголовок = НСтр("ru = 'Склад';
																|en = 'Warehouse'");
		КонецЕсли;
		
		Элементы.ПродукцияОткрытьПодбор.Видимость =
			Объект.ХозяйственнаяОперация <> ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора()
			//++ Устарело_Переработка24
			И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья")
			//-- Устарело_Переработка24
			И Истина;
		Элементы.ПродукцияЗаполнитьПоЗаказамДавальца.Видимость =
			Объект.ХозяйственнаяОперация = ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора()
			//++ Устарело_Переработка24
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья")
			//-- Устарело_Переработка24
			Или Ложь;
		
		Элементы.ПродукцияСпецификацииЗаполнить.Видимость =
			Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
	КонецЕсли;
	
	// Дополнительные действия при изменении типа производственного процесса
	//  - установка параметров выбора номенклатуры
	//  - установка параметров выбора спецификаций.
	//  - установка видимости структуры заказа
	//  - установка видимости доли стоимости.
	//  - вывод в подвал гиперссылок редактирования этапов
	Если СтруктураРеквизитов.Свойство("ТипПроизводственногоПроцесса")
		Или Инициализация Тогда
		
		УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(Элементы.ПродукцияНоменклатура, Форма);
		УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.ПродукцияСпецификация, Форма.ПараметрыВыбораСпецификаций);
		
		Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Видимость =
			Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
			
		Элементы.ПродукцияГруппаДоляСтоимости.Видимость =
			Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
		Элементы.ДекорацияРедактироватьЭтапы.Видимость =
			Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
		Элементы.ДекорацияОтразитьВыполненныйЭтап.Видимость =
			Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
	КонецЕсли;
	
	// Дополнительные действия при изменении хозяйственной операции
	//  - установка видимости партнера/договора.
	//  - установка параметров выбора партнера
	Если СтруктураРеквизитов.Свойство("ХозяйственнаяОперация")
		Или Инициализация Тогда
		
		ЗначениеБулево =
			Объект.ХозяйственнаяОперация =
				ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора()
				//++ Устарело_Переработка24
				Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья")
				//-- Устарело_Переработка24
				Или Ложь;
		
		Элементы.Партнер.Видимость = ЗначениеБулево;
		Элементы.Договор.Видимость = ЗначениеБулево;
		
		// Параметры выбора партнера
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
		Если Объект.ХозяйственнаяОперация = ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора() Тогда
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		КонецЕсли;
		
		Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
	КонецЕсли;
	
	// В текущей версии конфигурации для заказов с динамической структурой не поддерживается опция размещения выпуска ""К началу""
	Если СтруктураРеквизитов.Свойство("РазмещениеВыпуска")
		ИЛИ СтруктураРеквизитов.Свойство("ДинамическаяСтруктура")
		ИЛИ Инициализация Тогда
		
		Элементы.РазмещениеВыпуска.Доступность = Не Объект.ДинамическаяСтруктура Или Объект.РазмещениеВыпуска <> ПредопределенноеЗначение("Перечисление.СпособыПривязкиОперацийПроизводства.КОкончанию");
		
	КонецЕсли;
	
	// Желаемая дата выпуска обязательна к заполнению для динамических заказов и при планировании "К окончанию"
	Если СтруктураРеквизитов.Свойство("ДатаПотребности") 
		ИЛИ СтруктураРеквизитов.Свойство("РазмещениеВыпуска")
		ИЛИ СтруктураРеквизитов.Свойство("ДинамическаяСтруктура")
		ИЛИ Инициализация Тогда
		
		Элементы.ДатаПотребности.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.ДатаПотребности)
			И (Объект.ДинамическаяСтруктура
				ИЛИ Объект.РазмещениеВыпуска = ПредопределенноеЗначение("Перечисление.СпособыПривязкиОперацийПроизводства.КОкончанию"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеГиперссылкиЭтапыЗаказа()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ДекорацияСписокЭтапов.ЦветТекста = ЦветаГиперссылок["Незаполнено"];
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Распоряжение", Объект.Ссылка);
	ЭтапыЗаказа = Документы.ЭтапПроизводства2_2.НайтиЭтапы(СтруктураОтбора, 1);
	Если ЭтапыЗаказа.Количество() = 0 Тогда
		Элементы.ДекорацияСписокЭтапов.ЦветТекста = ЦветаГиперссылок["Незаполнено"];
	Иначе
		Элементы.ДекорацияСписокЭтапов.ЦветТекста = ЦветаГиперссылок["Заполнено"];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСтраницыОсновное

&НаСервере
Процедура ПриИзмененииДатыСервер()
	
	АктуализироватьЗаказПодДеятельность(Истина);

	СпособРаспределенияЗатратНаВыходныеИзделияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	АктуализироватьЗаказПодДеятельность(Истина);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииНаСервере()
	
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельности(ЭтотОбъект);
	
	АктуализироватьЗаказПодДеятельность(Истина);
	
	ПроверитьОбновитьРеквизитНазначение(Истина, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗаказПодДеятельность(Заполнить = Истина)
	
	ПараметрыЗаполнения = Документы.ЗаказНаПроизводство2_2.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ЗаказПодДеятельность,
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ЗаказПодДеятельность,
		Объект.ЗаказПодДеятельность,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	ПроверитьОбновитьРеквизитНазначение(Истина, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	ПроверитьОбновитьРеквизитНазначение(Истина, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииНаСервере()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство Тогда
		
		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Объект.Партнер = Справочники.Партнеры.ПустаяСсылка();
		
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказНаПроизводство2_2.ПараметрыВыбораСтатейИАналитик(Объект);
	ДоходыИРасходыСервер.ПриИзмененииПараметровВыбораСтатей(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПроверитьОбновитьРеквизитНазначение(Истина, Истина);
	ПроверитьОбновитьРеквизитыСписаниеНаРасходыВТабличнойЧасти();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ХозяйственнаяОперация");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОпераций()
	
	СписокВыбора = Элементы.ХозяйственнаяОперация.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СобственноеПроизводство"));
	
	//++ Устарело_Переработка24
	Если ИспользоватьПроизводствоИзДавальческогоСырья Тогда
		СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья"));
	КонецЕсли;
	//-- Устарело_Переработка24
	
	Если ИспользоватьПроизводствоИзДавальческогоСырья2_5 Тогда
		СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТипПроизводственногоПроцессаПриИзмененииНаСервере()
	
	Документы.ЗаказНаПроизводство2_2.УстановитьСлужебныйРеквизитДинамическаяСтруктура(Объект);
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка
		ИЛИ Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		Объект.ДатаПотребности = '00010101';
		Объект.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
	КонецЕсли;
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Документы.ЗаказНаПроизводство2_2);
	ЗаполнитьСпецификациюВТабличнойЧасти();
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказНаПроизводство2_2.ПараметрыВыбораСтатейИАналитик(Объект);
	ДоходыИРасходыСервер.ПриИзмененииПараметровВыбораСтатей(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПроверитьОбновитьРеквизитНазначение(Истина, Истина);
	ПроверитьОбновитьРеквизитыСписаниеНаРасходыВТабличнойЧасти();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ТипПроизводственногоПроцесса");
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбновитьРеквизитНазначение(ОбновитьРеквизитВШапке, ОбновитьРеквизитВТабличнойЧасти)
	
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	
	Если ОбновитьРеквизитВШапке Тогда
		
		Если Не НазначениеУказываетсяВШапкеДокумента(ЭтаФорма) Тогда
			
			Объект.НазначениеПродукция = ПустоеНазначение;
			
		Иначе
			
			Ссылки = Новый Массив;
			Ссылки.Добавить(Объект.НазначениеПродукция);
			Шаблоны = Справочники.Назначения.ШаблоныИзСсылок(Ссылки);
			
			Если Объект.ХозяйственнаяОперация = ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора()
				//++ Устарело_Переработка24
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
				//-- Устарело_Переработка24
				Или Ложь Тогда
				
				ШаблонНазначения = Новый Структура("НаправлениеДеятельности, Партнер, Договор, ТипыНазначений");
				Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
					ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
				КонецЕсли;
				ШаблонНазначения.Договор = Объект.Договор;
				ШаблонНазначения.Партнер = Объект.Партнер;
				
				ШаблонНазначения.ТипыНазначений = Новый Массив;
				
				Если Объект.ХозяйственнаяОперация = ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора() Тогда
					ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Давальческое2_5);
					ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
				//++ Устарело_Переработка24
				Иначе
					ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеПродукция22);
					ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалы22);
					ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
				//-- Устарело_Переработка24
				КонецЕсли;
				
				Шаблон = Шаблоны.Получить(Объект.НазначениеПродукция);
				Если Шаблон = Неопределено
					Или ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности)
					И ШаблонНазначения.НаправлениеДеятельности <> Шаблон.НаправлениеДеятельности
					Или ШаблонНазначения.Партнер <> Шаблон.Партнер
					Или ШаблонНазначения.Договор <> Шаблон.Договор
					Или ШаблонНазначения.ТипыНазначений.Найти(Шаблон.ТипНазначения) = Неопределено Тогда
					
					Объект.НазначениеПродукция = ПустоеНазначение;
					
				КонецЕсли;
				
			Иначе
				
				ТолкающееНазначение = НаправленияДеятельностиСервер.ТолкающееНазначение(Объект.НаправлениеДеятельности);
				
				Если ЗначениеЗаполнено(ТолкающееНазначение) Тогда
					
					Объект.НазначениеПродукция = ТолкающееНазначение;
					
				Иначе
				
					Шаблон = Шаблоны.Получить(Объект.НазначениеПродукция);
					Если Шаблон = Неопределено Или Шаблон.ТипНазначения <> Перечисления.ТипыНазначений.Собственное Тогда
						
						Объект.НазначениеПродукция = ПустоеНазначение;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновитьРеквизитВТабличнойЧасти Тогда
		
		Если Не НазначениеУказываетсяВШапкеДокумента(ЭтаФорма) Тогда
			
			Ссылки = Объект.Продукция.Выгрузить(, "Назначение").ВыгрузитьКолонку("Назначение");
			Шаблоны = Справочники.Назначения.ШаблоныИзСсылок(Ссылки);
			
			Если Объект.ХозяйственнаяОперация = ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора()
				//++ Устарело_Переработка24
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
				//-- Устарело_Переработка24
				Или Ложь Тогда
				
				ШаблонНазначения = Новый Структура("НаправлениеДеятельности, Партнер, Договор, ТипНазначения");
				Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
					ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
				КонецЕсли;
				ШаблонНазначения.Договор       = Объект.Договор;
				ШаблонНазначения.Партнер       = Объект.Партнер;
				
				Если Объект.ХозяйственнаяОперация = ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора() Тогда
					ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.Давальческое2_5;
				//++ Устарело_Переработка24
				Иначе
					ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеПродукция22;
				//-- Устарело_Переработка24
				КонецЕсли;
				
				Для Каждого Строка Из Объект.Продукция Цикл
					
					Шаблон = Шаблоны.Получить(Строка.Назначение);
					Если Шаблон = Неопределено
							Или ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности)
								И ШаблонНазначения.НаправлениеДеятельности <> Шаблон.НаправлениеДеятельности
							Или ШаблонНазначения.Партнер <> Шаблон.Партнер
							Или ШаблонНазначения.Договор <> Шаблон.Договор
							Или ШаблонНазначения.ТипНазначения <> Шаблон.ТипНазначения Тогда
						
						Строка.Назначение = ПустоеНазначение;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Для Каждого Строка Из Объект.Продукция Цикл
					
					Шаблон = Шаблоны.Получить(Строка.Назначение);
					Если Шаблон = Неопределено Или Шаблон.ТипНазначения <> Перечисления.ТипыНазначений.Собственное Тогда
						
						Строка.Назначение = ПустоеНазначение;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			Для Каждого Строка Из Объект.Продукция Цикл
				
				Строка.Назначение = ПустоеНазначение;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбновитьРеквизитыСписаниеНаРасходыВТабличнойЧасти()
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство Тогда
		Возврат;
	КонецЕсли;
	
	МассивНайденныхСтрок = Объект.Продукция.НайтиСтроки(Новый Структура("СписатьНаРасходы", Истина));
	
	Если МассивНайденныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий = Новый Структура();
	
	ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов(СтруктураДействий, ЭтотОбъект, "Объект.Продукция");

	Для каждого Строка Из МассивНайденныхСтрок Цикл
		
		Строка.СписатьНаРасходы = Ложь;
		
		Если Строка.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
			Строка.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЭтапы()
	
	Отказ = Ложь;
	
	Если Не Отказ
		И ЗначениеЗаполнено(Объект.ПартияПроизводства) Тогда
		
		УправлениеПроизводствомКлиент.ОткрытьФормуРедактированияЦепочкиЭтапов(
			Объект.Ссылка,
			Объект.ПартияПроизводства,,
			ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВыполненныйЭтап()
	
	УправлениеПроизводствомКлиент.ОткрытьФормуОтраженияВыполненногоЭтапаИзЗаказа(Объект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОчередьЗаказов(Команда)
	
	УправлениеПроизводствомКлиент.ОткрытьОчередьЗаказов(, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСтраницыПродукция

&НаСервере
Процедура ПродукцияОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	МассивСтрок = Новый Массив;
	ИдентификаторыСтрок = Новый Массив;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий = Новый Структура;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,
															  |Характеристика,
															  |Упаковка,
															  |КоличествоУпаковок,
															  |Склад");
		
		ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
				ТекущаяСтрока,
				ЭтаФорма,
				СтруктураДействий);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
				ТекущаяСтрока,
				ЭтаФорма,
				СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(ТекущаяСтрока);
		ИдентификаторыСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	ЗаполнитьСпецификациюВТабличнойЧасти(ИдентификаторыСтрок);
	ПослеИзмененияСтрокТЧПрограммноНаСервере(МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияОбработкаВыбораПодборПоЗаказамДавальцаНаСервере(ВыбранноеЗначение)
	
	Результат = Документы.ЗаказНаПроизводство2_2.ОстаткиПродукцииКОбеспечениюДавальцу(ВыбранноеЗначение, Объект.Ссылка, Объект.ТипПроизводственногоПроцесса);
	ТаблицаТоваров = Результат.Выгрузить();
	
	МассивСтрок = Новый Массив;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий = Новый Структура;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
				ТекущаяСтрока,
				ЭтаФорма,
				СтруктураДействий);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
				ТекущаяСтрока,
				ЭтаФорма,
				СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияСтрокТЧПрограммноНаСервере(КоллекцияСтрок = Неопределено, СтруктураРанееВыполненныхДействий = Неопределено)

	МассивСтрок = ПолучитьДанныеСтрокПоКоллекцииСтрокТЧ(КоллекцияСтрок);
	
	Если СтруктураРанееВыполненныхДействий = Неопределено Тогда
		СтруктураРанееВыполненныхДействий = Новый Структура;
	КонецЕсли;
	
	Если НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакАртикул")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры") Тогда
		
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(МассивСтрок);
		Иначе
			ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		КонецЕсли;

	КонецЕсли;
	
	Если Объект.ТипПроизводственногоПроцесса =
		ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	КонецЕсли;
	
	ЗаполнитьСкладПоУмолчаниюВКоллекции(ЭтаФорма, ?(МассивСтрок.Количество() > 0, МассивСтрок, Объект.Продукция));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтрокПоКоллекцииСтрокТЧ(КоллекцияСтрок)
	
	МассивСтрок = Новый Массив;
	
	Если ЗначениеЗаполнено(КоллекцияСтрок) Тогда
		
		Если ТипЗнч(КоллекцияСтрок[0]) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
			
			Для Каждого ЭлементКоллекции Из КоллекцияСтрок Цикл
				
				ДанныеСтроки = Объект.Продукция.НайтиПоИдентификатору(ЭлементКоллекции);
				
				Если ДанныеСтроки <> Неопределено Тогда
					МассивСтрок.Добавить(ДанныеСтроки);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Возврат КоллекцияСтрок;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивСтрок;

КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтрокиЗаполнения = Неопределено)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
								Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Продукция, 
		СтруктураДействий, 
		СтрокиЗаполнения);
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ТекущаяСтрока, Форма, СтруктураДействий)
	
	Объект = Форма.Объект;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	Если Не НазначениеУказываетсяВШапкеДокумента(Форма) Тогда
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(Форма, СтруктураДействий);
	КонецЕсли;
	
	СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
		Объект,
		ТекущаяСтрока,
		Форма.ПараметрыВыбораСпецификаций);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	
	ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов(СтруктураДействий, Форма, "Объект.Продукция");
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		Форма.ИмяФормы, "Продукция"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущаяСтрока, Форма, СтруктураДействий)
	
	Объект = Форма.Объект;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Если Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", Форма.ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСкладПоУмолчаниюВКоллекции(Форма, МассивСтрок)
	
	Если Форма.ИспользоватьНесколькоСкладов Тогда
		Возврат;
	КонецЕсли;

	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	Для каждого Строка Из МассивСтрок Цикл
		
		Если Строка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			Строка.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		Иначе
			Строка.Склад = Форма.СкладПоУмолчанию;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСкладПоУмолчаниюВСтроке(Форма, Строка, СтруктураДействий = Неопределено)
	
	Если Форма.ИспользоватьНесколькоСкладов Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.СписатьНаРасходы
		Или Строка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		
		Строка.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		
	Иначе
		Строка.Склад = Форма.СкладПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуПоДаннымСтроки(ДанныеСтроки)
	
	Идентификатор = -1;
	
	ЕстьСпецификация = ДанныеСтроки.Свойство("Спецификация") И ЗначениеЗаполнено(ДанныеСтроки.Спецификация);
	ЕстьСкладПодразделение = ДанныеСтроки.Свойство("Склад") И ЗначениеЗаполнено(ДанныеСтроки.Склад)
		ИЛИ ДанныеСтроки.Свойство("Подразделение") И ЗначениеЗаполнено(ДанныеСтроки.Подразделение);
	
	Для каждого Строка Из Объект.Продукция Цикл
		
		Если Строка.Номенклатура = ДанныеСтроки.Номенклатура
			И Строка.Характеристика = ДанныеСтроки.Характеристика
			
			И Строка.Назначение = ДанныеСтроки.Назначение
			
			И (ЕстьСпецификация И Строка.Спецификация = ДанныеСтроки.Спецификация
				ИЛИ Не ЕстьСпецификация)
			
			И (ЕстьСкладПодразделение 
				И (Строка.Склад = ДанныеСтроки.Склад 
					ИЛИ Строка.Подразделение = ДанныеСтроки.Подразделение)
				ИЛИ Не ЕстьСкладПодразделение) Тогда
				
			Идентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпецификациюВТабличнойЧасти(Знач Идентификаторы = Неопределено, РежимПроверитьЗаполнить = Ложь)
	
	Модифицированность = Истина;
	МассивСтрок = Новый Массив;
	
	Если Идентификаторы <> Неопределено Тогда
		Для каждого Идентификатор Из Идентификаторы Цикл
			Строка = Объект.Продукция.НайтиПоИдентификатору(Идентификатор);
			МассивСтрок.Добавить(Строка);
		КонецЦикла;
	Иначе
		Для каждого Строка Из Объект.Продукция Цикл
			МассивСтрок.Добавить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	МассивДанных = Новый Массив;
	
	Для каждого ТекущаяСтрока Из МассивСтрок Цикл
		
		ДанныеОбИзделии = УправлениеДаннымиОбИзделияхКлиентСервер.СобратьДанныеОбИзделииДляВыбораСпецификации(
			Объект, ТекущаяСтрока, ПараметрыВыбораСпецификаций);
		Если РежимПроверитьЗаполнить Тогда
			ДанныеОбИзделии.Вставить("ТекущаяСпецификация", ТекущаяСтрока.Спецификация);
		КонецЕсли;
		
		МассивДанных.Добавить(ДанныеОбИзделии);
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанных, ПараметрыВыбораСпецификаций);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучателяЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТЧ		 = ДополнительныеПараметры.ПараметрыТЧ;
	ВыделенныеСтроки = Элементы[ПараметрыТЧ.ИмяТЧФорма].ВыделенныеСтроки;
	
	ЗаполнитьПолучателяНаСервере(ПараметрыТЧ, ВыделенныеСтроки, ВыбранноеЗначение);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Склад/подразделение заполнено';
			|en = 'Warehouse/business unit is filled in'"),,
		НСтр("ru = 'Для выделенных строк выполнено заполнение склада/подразделения';
			|en = 'Warehouse/business unit is filled in for the selected lines'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателяНаСервере(ПараметрыТЧ, ВыделенныеСтроки, Получатель)
	
	ИмяТЧОбъект = ПараметрыТЧ.ИмяТЧОбъект;
	
	СтруктураДействий = Новый Структура;
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Склады") Тогда
		ИмяПоля = "Склад";
		СтруктураДействий.Вставить(
			"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	Иначе
		ИмяПоля = "Подразделение";
	КонецЕсли;
		
	КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект[ИмяТЧОбъект].НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ДанныеСтроки[ИмяПоля] = Получатель;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшируемыеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные)

	НетОшибок = ПроизводствоКлиент.ПроверитьЗаполнениеПередВводомДолиСтоимости(ТекущиеДанные, ПараметрыРаспределенияЗатрат);
	
	Если НетОшибок Тогда
		ПараметрыФормы = ПараметрыФормыВводаДолиСтоимости(ТекущиеДанные.ПолучитьИдентификатор());
		ОткрытьФорму("ОбщаяФорма.ВводДолиСтоимости",
			ПараметрыФормы,
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаДолиСтоимости(ТекущиеДанные, ВыбранноеЗначение)
	
	Если ТекущиеДанные.ДоляСтоимости <> ВыбранноеЗначение.ДоляСтоимости Тогда
		
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(
			ТекущиеДанные,
			ВыбранноеЗначение);
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВводаДолиСтоимости(ТекущиеДанныеИдентификатор)
	
	ПараметрыФормы = ПроизводствоСервер.ПараметрыФормыВводаДолейСтоимости(Объект, ПараметрыРаспределенияЗатрат, ТекущиеДанныеИдентификатор);
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия()
	
	ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Объект, ПараметрыРаспределенияЗатрат);
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеМеханизмы

#Область Свойства

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект.Продукция, Элементы.Продукция.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка Тогда
		МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
		МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры", МассивТиповНоменклатуры);
	
	Колонки = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,Спецификация,Склад,Подразделение";
	
	ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, Колонки);
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивСтрок = Новый Массив;
	ИдентификаторыСтрок = Новый Массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока,
			ЭтаФорма,
			СтруктураДействий);
	
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
			ТекущаяСтрока,
			ЭтаФорма,
			СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(ТекущаяСтрока);
		ИдентификаторыСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	ЗаполнитьСпецификациюВТабличнойЧасти(ИдентификаторыСтрок, Истина);
	ПослеИзмененияСтрокТЧПрограммноНаСервере(МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность",
		РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДинамическаяСтруктура

&НаКлиенте
Процедура КонтрольРасчетаСтруктурыЗаказа()
	
	Если Объект.Ссылка.Пустая() ИЛИ НЕ Объект.ДинамическаяСтруктура Тогда
		Возврат;
	КонецЕсли;
	
	Протокол = ПротоколРасчетаСтруктурыЗаказа(Объект.Ссылка);
	
	СтруктураЗаказаКлиентСервер.ОтобразитьСостояниеРасчетаСтруктуры(Элементы, Протокол);
	
	ОжидатьЗавершение = СтруктураЗаказаКлиентСервер.ОжидатьЗавершениеРасчетаСтруктурыЗаказа(Протокол.Состояние, Протокол.КодыСостояний);
	
	Если ОжидатьЗавершение Тогда
		
		ИнтервалПроверкиЗавершенияРасчета = ?(ИнтервалПроверкиЗавершенияРасчета = 0, 1, МИН(ИнтервалПроверкиЗавершенияРасчета * КоэффициентУвеличенияИнтервала(), МаксимальныйИнтервалПроверкиЗавершенияРасчета()));
		
		ПодключитьОбработчикОжидания("КонтрольРасчетаСтруктурыЗаказа", ИнтервалПроверкиЗавершенияРасчета, Истина);
		Возврат;
		
	КонецЕсли;
	
	ИнтервалПроверкиЗавершенияРасчета = 0;
	
КонецПроцедуры

&НаКлиенте
Функция КоэффициентУвеличенияИнтервала()
	
	Возврат 1.4;
	
КонецФункции

&НаКлиенте
Функция МаксимальныйИнтервалПроверкиЗавершенияРасчета()
	
	Возврат 15;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПротоколРасчетаСтруктурыЗаказа(Ссылка)
	
	Возврат Документы.ЗаказНаПроизводство2_2.ПротоколРасчетаСтруктурыЗаказа(Ссылка);
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПолныйРасчетСтруктурыЗаказа()
	
	СтруктураЗаказаКлиент.ЗапуститьПересчетСтруктурыЗаказа(Объект.Ссылка);
	ПодключитьОбработчикОжидания("КонтрольРасчетаСтруктурыЗаказа", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Продукция);
	
	ЗаполнитьСлужебныеРеквизиты();
	
	АктуализироватьЗаказПодДеятельность(Ложь);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказНаПроизводство2_2.ПараметрыВыбораСтатейИАналитик(Объект);
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);

	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиПодсистемыПроизводство);
	
	ХарактеристикиИспользуются = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	//++ Устарело_Переработка24
	ИспользоватьПроизводствоИзДавальческогоСырья    =
		ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья");
	//-- Устарело_Переработка24
	ИспользоватьПроизводствоИзДавальческогоСырья2_5 =
		ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья2_5");
	ЕстьПравоНаИзменение = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаПроизводство2_2);
	
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтотОбъект);
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Документы.ЗаказНаПроизводство2_2);
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(Документы.ЗаказНаПроизводство2_2.ПараметрыРаспределенияЗатрат(Объект));
	
	ЦветаГиперссылок = Новый Структура;
	ЦветаГиперссылок.Вставить("Незаполнено", ЦветаСтиля.НезаполненноеПолеТаблицы);
	ЦветаГиперссылок.Вставить("Заполнено", ЦветаСтиля.ГиперссылкаЦвет);
	
	ТекущийВариантОбособления = УправлениеПроизводством.ВариантОбособленияМатериаловВПроизводстве();
	ЗаказЗапланирован = ЗаказЗапланирован();
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	ЗаполнитьСкладПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Функция ЗаказЗапланирован()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыДоИзменения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "Статус, Проведен");
	
	Возврат РеквизитыДоИзменения.Проведен И (РеквизитыДоИзменения.Статус = Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству
				ИЛИ РеквизитыДоИзменения.Статус = Перечисления.СтатусыЗаказовНаПроизводство2_2.Закрыт);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей()
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкладПоУмолчанию()
	
	Если ИспользоватьНесколькоСкладов Тогда
		СкладПоУмолчанию = Справочники.Склады.ПустаяСсылка();
	Иначе
		СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтруктуруЗаказа()
	
	ФормаОтчета = ?(Объект.ДинамическаяСтруктура,
		"Отчет.СтруктураЗаказаНаПроизводствоДинамическая.Форма.ФормаОтчета",
		"Отчет.СтруктураЗаказаНаПроизводство2_2.Форма.СтруктураЗаказа");
	
	ОткрытьФорму(
		ФормаОтчета,
		Новый Структура("Заказ", Объект.Ссылка),
		,
		Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Объект, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, ИмяРеквизита);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НазначениеУказываетсяВШапкеДокумента(Форма)
	
	Если Форма.Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Форма.Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция СписокЗаблокированныхРеквизитовОбъекта()
	
	ФормаПодготовлена = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
	Если ФормаПодготовлена Тогда
		
		ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(ЭтотОбъект);
		
	Иначе
		
		ЗаблокированныеРеквизиты = Новый Массив();
		
	КонецЕсли;
	
	Возврат ЗаблокированныеРеквизиты
	
КонецФункции

&НаСервере
Функция ИзменитьПриоритетВФоне(Приоритет)
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПроцедуры.Вставить("Приоритет", Приоритет);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Изменение приоритета заказа на производство';
			|en = 'Changing the production order priority'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ЗаказНаПроизводство2_2.УстановитьПриоритетВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		НачатьОжидание = Истина;
		
	Иначе
		
		ОбработатьРезультатИзмененияПриоритетаВФоне(ДлительнаяОперация);
		
		НачатьОжидание = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
	Возврат НачатьОжидание;
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатИзмененияПриоритетаВФоне(Результат)
	
	Прочитать();
	
	Если Результат.Статус = "Ошибка" Тогда
		
		РезультатСтруктура = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ТипЗнч(РезультатСтруктура) = Тип("Структура") И РезультатСтруктура.Свойство("Сообщения") Тогда
			
			Для каждого Сообщение Из РезультатСтруктура.Сообщения Цикл
			
				Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
				Сообщение.Сообщить();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПриоритетВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		ОбработатьРезультатИзмененияПриоритетаВФоне(Результат);
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
