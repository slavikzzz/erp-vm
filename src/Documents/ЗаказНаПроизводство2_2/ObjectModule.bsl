
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//								Конструктор структуры: ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа().
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовНаПроизводство2_2[НовыйСтатус];
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Отменить продукцию заказа.
// 
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//  Спецификация - СправочникСсылка.РесурсныеСпецификации
//  Количество - Число
//  ПричинаОтмены - СправочникСсылка.ПричиныОтменыПроизводства
//
Процедура ОтменитьПродукцию(Номенклатура, Характеристика, Спецификация, Знач Количество, ПричинаОтмены) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", Характеристика);
	СтруктураПоиска.Вставить("Спецификация", Спецификация);
	СтруктураПоиска.Вставить("Отменено", Ложь);
	
	НайденныеСтроки = Продукция.НайтиСтроки(СтруктураПоиска);
	Для Индекс = -НайденныеСтроки.ВГраница() По 0 Цикл
		Строка = НайденныеСтроки[-Индекс];
		
		Если Строка.Количество > Количество Тогда
			НоваяСтрока = Продукция.Вставить(Продукция.Индекс(Строка)+1);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "Количество, КоличествоУпаковок, КлючНоменклатура");
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.Отменено = Истина;
			НоваяСтрока.ПричинаОтмены = ПричинаОтмены;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			Строка.Количество = Строка.Количество - Количество;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
			
			Количество = 0;
		Иначе
			Строка.Отменено = Истина;
			Строка.ПричинаОтмены = ПричинаОтмены;
			Количество = Количество - Строка.Количество;
		КонецЕсли;
		
		Если Количество = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заменить продукцию заказа.
// 
// Параметры:
//  КлючиПродукции - Структура - содержит:
//    * Номенклатура - СправочникСсылка.Номенклатура
//    * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//    * Спецификация - СправочникСсылка.РесурсныеСпецификации
//  Количество - Число
//  ПричинаОтмены - СправочникСсылка.ПричиныОтменыПроизводства
//  КлючиНовойПродукции - Структура - содержит:
//    * Номенклатура - СправочникСсылка.Номенклатура
//    * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//    * Спецификация - СправочникСсылка.РесурсныеСпецификации
//
Процедура ЗаменитьПродукцию(КлючиПродукции, Знач Количество, ПричинаОтмены, КлючиНовойПродукции) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", КлючиПродукции.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", КлючиПродукции.Характеристика);
	СтруктураПоиска.Вставить("Спецификация", КлючиПродукции.Спецификация);
	СтруктураПоиска.Вставить("Отменено", Ложь);
	
	НайденныеСтроки = Продукция.НайтиСтроки(СтруктураПоиска);
	Для Индекс = -НайденныеСтроки.ВГраница() По 0 Цикл
		Строка = НайденныеСтроки[-Индекс];
		СтрокаОтмена = Неопределено;
		
		Если Строка.Количество > Количество Тогда
			НоваяСтрока = Продукция.Вставить(Продукция.Индекс(Строка)+1);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "Количество, КоличествоУпаковок, КлючНоменклатура");
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.Отменено = Истина;
			НоваяСтрока.ПричинаОтмены = ПричинаОтмены;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			СтрокаОтмена = НоваяСтрока;
			
			Строка.Количество = Строка.Количество - Количество;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
			
			Количество = 0;
		Иначе
			Строка.Отменено = Истина;
			Строка.ПричинаОтмены = ПричинаОтмены;
			СтрокаОтмена = Строка;
			Количество = Количество - Строка.Количество;
		КонецЕсли;
		
		НоваяСтрока = Продукция.Вставить(Продукция.Индекс(СтрокаОтмена)+1);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтмена,, "Номенклатура, Характеристика, Спецификация, Отменено, ПричинаОтмены, КлючНоменклатура");
		НоваяСтрока.Номенклатура = КлючиНовойПродукции.Номенклатура;
		НоваяСтрока.Характеристика = КлючиНовойПродукции.Характеристика;
		НоваяСтрока.Спецификация = КлючиНовойПродукции.Спецификация;
		Если Не НоваяСтрока.Упаковка.Пустая() Тогда
			НоваяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ИдентичнаяУпаковка(
				СтрокаОтмена.Номенклатура, НоваяСтрока.Номенклатура, НоваяСтрока.Упаковка);
		КонецЕсли;
		
		Если Количество = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Автор = Пользователи.АвторизованныйПользователь();
	
	// Реквизиты используются при заполнении заказа, поэтому получим их заранее
	ТипПроизводственногоПроцесса = Метаданные.Документы.ЗаказНаПроизводство2_2.Реквизиты.ТипПроизводственногоПроцесса.ЗначениеЗаполнения;
	ДинамическаяСтруктура = Документы.ЗаказНаПроизводство2_2.ДоступенРасчетСтруктурыЗаказа(ЭтотОбъект);
	Ответственный = Пользователи.ТекущийПользователь();
	Подразделение = ЗначениеНастроекПовтИсп.ПолучитьПодразделениеДиспетчерПоУмолчанию(Подразделение, Ответственный);
	НачатьНеРанее = НачалоДня(ТекущаяДатаСеанса());
	РазмещениеВыпуска = ?(ДинамическаяСтруктура, Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию, Метаданные.Документы.ЗаказНаПроизводство2_2.Реквизиты.РазмещениеВыпуска.ЗначениеЗаполнения);

	Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	
	ОчиститьХозяйственнуюОперацию = Ложь;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("РеквизитыШапки") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АдресПродукция") Тогда
			ЗаполнитьПоТаблицеТовары(ДанныеЗаполнения.АдресПродукция);
		ИначеЕсли ДанныеЗаполнения.Свойство("Товары") Тогда // заполнение из обработки ОбеспечениеПотребностей
			ЗаполнитьПоТаблицеТовары(ДанныеЗаполнения.Товары); 
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Источник") И ДанныеЗаполнения.Источник = "ФормированиеЗаказовНаПроизводствоПоПлану" Тогда
			УстановитьНовыйНомерОчередиПоДатеПотребности();
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Основание") Тогда // создание на основании заказа
			
			ТипОснования = ТипЗнч(ДанныеЗаполнения.Основание);
			Если ТипОснования = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
				ЗаполнитьПоЗаказуНаПеремещение(ДанныеЗаполнения);
				Назначения = Продукция.Выгрузить(, "Назначение").ВыгрузитьКолонку("Назначение");
				ХозяйственнаяОперация = ДавальческаяСхема.ХозяйственнаяОперацияПроизводства(Назначения);
				ОчиститьХозяйственнуюОперацию = Не ЗначениеЗаполнено(ХозяйственнаяОперация);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
				ЗаполнитьПоЗаявкаНаВозврат(ДанныеЗаполнения);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
				ЗаполнитьПоЗаказуНаВнутреннееПотребление(ДанныеЗаполнения);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказНаРемонт") Тогда
				ЗаполнитьПоЗаказуНаРемонт(ДанныеЗаполнения);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
				ЗаполнитьПоЗаказуНаСборку(ДанныеЗаполнения);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство") Тогда
				ЗаполнитьПоЗаказуМатериаловВПроизводство(ДанныеЗаполнения);
				Назначения = Продукция.Выгрузить(, "Назначение").ВыгрузитьКолонку("Назначение");
				ХозяйственнаяОперация = ДавальческаяСхема.ХозяйственнаяОперацияПроизводства(Назначения);
				ОчиститьХозяйственнуюОперацию = Не ЗначениеЗаполнено(ХозяйственнаяОперация);
			КонецЕсли;
			
		КонецЕсли;
		
	//++ Устарело_Переработка24
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		ЗаполнитьПоЗаказуДавальца(ДанныеЗаполнения);
	//-- Устарело_Переработка24
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказДавальца2_5") Тогда
		ЗаполнитьПоЗаказуДавальца2_5(ДанныеЗаполнения);
	КонецЕсли;
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	ПараметрыЗаполнения = Документы.ЗаказНаПроизводство2_2.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ЗаказПодДеятельность, ПараметрыЗаполнения);
	
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказНаПроизводство2_2.ПараметрыВыбораСтатейИАналитик(ЭтотОбъект);
	ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	Если Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство;
	КонецЕсли;
	
	Если ОчиститьХозяйственнуюОперацию Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "Продукция", "Отменено");
	
	// Подразделение-диспетчер
	Если ЗначениеЗаполнено(Подразделение)
		И ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение).ПодразделениеДиспетчер <> Истина Тогда
	
		ТекстОшибки = НСтр("ru = 'Подразделением, ответственным за выполнение заказа, должно быть подразделение-диспетчер';
							|en = 'Dispatching unit should be a business unit responsible for the order fulfillment'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,,
			"Подразделение", 
			"Объект",
			Отказ);
		
	КонецЕсли;
	
	// Желаемая дата, начать не ранее, размешение выпуска
	Если Статус = Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РазмещениеВыпуска");
		
	Иначе
		
		Если ЗначениеЗаполнено(ДатаПотребности) И ЗначениеЗаполнено(НачатьНеРанее) И ДатаПотребности < НачатьНеРанее Тогда
			
			ТекстОшибки = НСтр("ru = 'Желаемая дата выпуска меньше даты начала производства';
								|en = 'Required release date is earlier than the production start date'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,,
				"ДатаПотребности", 
				"Объект",
				Отказ);
		
		КонецЕсли;
		
	КонецЕсли;
	
	// Желаемая дата выпуска необходима только при планировании "К окончанию".
	Если РазмещениеВыпуска <> Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию
		И Не ДинамическаяСтруктура Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПотребности");
	КонецЕсли;
	
	Если РазмещениеВыпуска <> Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию
		И ДинамическаяСтруктура Тогда
		
		ТекстОшибки = НСтр("ru = 'В текущей версии конфигурации для заказов с динамической структурой не поддерживается опция размещения выпуска ""К началу""';
							|en = 'The ""Backward"" release option is not supported in the current configuration version for orders with a dynamic structure'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"РазмещениеВыпуска",
			,
			Отказ);
		
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	Иначе
		Если ДоговорНеОбязателен Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Договор");
		КонецЕсли;
	КонецЕсли;
	
	// Назначение выходных изделий получаемых в результате разборки должно быть заполнено в давальческой схеме.
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5
			//++ Устарело_Переработка24
			И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
			//-- Устарело_Переработка24
			И Истина
		ИЛИ НЕ НазначениеУказываетсяВШапкеДокумента() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НазначениеПродукция");
	КонецЕсли;
	
	// Способ распределения затрат на выходные изделия должен быть заполнен только для заказов
	// с типом процесса "Без спецификаций"
	Если ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособРаспределенияЗатратНаВыходныеИзделия");
	КонецЕсли;
	
	ПроверитьЗаполнениеТаблицыПродукция(
		МассивНепроверяемыхРеквизитов,
		Отказ);
		
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказНаПроизводство2_2.ПараметрыВыбораСтатейИАналитик(ЭтотОбъект);
	ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "Продукция";
	НоменклатураСервер.ПроверитьОкруглениеКоличества(ЭтотОбъект, Отказ, ПараметрыПроверки);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если ЭтоНовый() Тогда
		СсылкаНового = ПолучитьСсылкуНового();
		Если СсылкаНового.Пустая() Тогда
			СсылкаНового = Документы.ЗаказНаПроизводство2_2.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
		УникальныйИдентификатор = СсылкаНового.УникальныйИдентификатор();
	ИначеЕсли Не ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
		УникальныйИдентификатор = Ссылка.УникальныйИдентификатор();
	КонецЕсли;
	Если ПустаяСтрока(УникальныйИдентификаторСтрока) Тогда
		УникальныйИдентификаторСтрока = Строка(УникальныйИдентификатор);
	КонецЕсли;
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	СтруктураЗаказаПроведениеДокументов.ЗаказНаПроизводствоПередЗаписью(ЭтотОбъект, ДополнительныеСвойства, Отказ);
	
	УстановитьНовыйНомерОчереди();
	
	#Область ЗаполнениеНазначений
	
	ТекущийВариантОбособления = ВариантОбособления;
	
	Если ВариантОбособления.Пустая() Тогда
		ВариантОбособления = УправлениеПроизводством.ВариантОбособленияМатериаловВПроизводстве(
								ХозяйственнаяОперация,
								ДинамическаяСтруктура);
	КонецЕсли;
	
	Если ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций
		И ВариантОбособления = Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства Тогда
		ВариантОбособления = Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство;
	КонецЕсли;
	
	Если ДинамическаяСтруктура
		И ВариантОбособления = Перечисления.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции Тогда
		Если Не УкрупненныйЗаказПоНазначениямПродукции
			И ОбщегоНазначенияКлиентСервер.СвернутьМассив(Продукция.ВыгрузитьКолонку("Назначение")).Количество() > 1 Тогда
			УкрупненныйЗаказПоНазначениямПродукции = Истина;
		КонецЕсли;
	Иначе
		УкрупненныйЗаказПоНазначениямПродукции = Ложь;
	КонецЕсли;
	
	Если ТекущийВариантОбособления <> ВариантОбособления Тогда
		Назначение = Неопределено;
	КонецЕсли;
	
	ШаблонНазначения = Документы.ЗаказНаПроизводство2_2.ШаблонНазначения(ЭтотОбъект);
	ПустойШаблон = ВариантОбособления = Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства;
	ПерегенерацияНазначения = Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(Назначение, ШаблонНазначения,
		ЭтотОбъект, "НаправлениеДеятельности,Партнер,Договор,ХозяйственнаяОперация", Отказ, Ложь, ПустойШаблон);
	
	Если ПерегенерацияНазначения Тогда
		ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется = Ложь;
	КонецЕсли;
	
	Если НазначениеУказываетсяВШапкеДокумента() И (ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		ИЛИ ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт) Тогда
		ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(Продукция, НазначениеПродукция, "Назначение");
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЗаполнениеПартииПроизводства
	
	Если ТипПроизводственногоПроцесса =
			Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций
		И Не ЗначениеЗаполнено(ПартияПроизводства) Тогда
		ПартияПроизводства = Справочники.ПартииПроизводства.ПолучитьСсылку();
	КонецЕсли;
	
	#КонецОбласти
	
	ПараметрыОкругления = НоменклатураСервер.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "Продукция";
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказНаПроизводство2_2.ПараметрыВыбораСтатейИАналитик(ЭтотОбъект);
	ДоходыИРасходыСервер.ПередЗаписью(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);

	#Область ОчисткаДанных
	
	Для каждого СтрокаТЧ Из Продукция Цикл
		
		Если СтрокаТЧ.СписатьНаРасходы Тогда
			СтрокаТЧ.Назначение = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	ДополнительныеСвойства.Вставить("ПометкаУдаленияДоЗаписи",
		?(ЭтоНовый(), Ложь,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления")));
	
	Если ЭтоНовый() Тогда
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = Пользователи.АвторизованныйПользователь();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	#Область ЗаполнениеНазначений
	
	ШаблонНазначения = Документы.ЗаказНаПроизводство2_2.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПриЗаписиДокумента(Назначение, ШаблонНазначения, ЭтотОбъект, Подразделение, ЗаказПодДеятельность);
	
	#КонецОбласти
	
	#Область ЗаполнениеПартииПроизводства
	
	Если ЗначениеЗаполнено(ПартияПроизводства) Тогда
		
		ПоляПартии = Документы.ЗаказНаПроизводство2_2.ПоляПартии(ЭтотОбъект);
		ПоляПартии.ПометкаУдаления = ПометкаУдаления;
		Если Не ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			ПоляПартии.ПометкаУдаления = Истина;
		КонецЕсли;
		
		Справочники.ПартииПроизводства.СоздатьОбновитьПартиюПроизводства(
			ПартияПроизводства,
			ПоляПартии,
			ДоступноОбновлениеПартииПроизводства());
		
		Если Не ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			ПартияПроизводства = Справочники.ПартииПроизводства.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	СтруктураЗаказаПроведениеДокументов.ЗаказНаПроизводствоПриЗаписи(ЭтотОбъект, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	МетаданныеРеквизиты = Метаданные.Документы.ЗаказНаПроизводство2_2.Реквизиты;
	
	ДокументОснование = Неопределено;
	
	УникальныйИдентификаторСтрока = "";
	УникальныйИдентификатор = Неопределено;
	Назначение = Неопределено;
	ДоговорНеОбязателен = Ложь;
	
	Если ЗначениеЗаполнено(НачатьНеРанее) Тогда
		ИспользоватьИнтервалПланированияЧас = Константы.ИспользоватьИнтервалПланированияЧас.Получить();
		НачатьНеРанее = Макс(
			НачатьНеРанее,
			?(ИспользоватьИнтервалПланированияЧас, НачалоЧаса(ТекущаяДатаСеанса()), НачалоДня(ТекущаяДатаСеанса())));
	КонецЕсли;
	
	ВариантОбособления = Неопределено;
	ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется = Ложь;
	
	ПартияПроизводства = Неопределено;
	
	Статус = МетаданныеРеквизиты.Статус.ЗначениеЗаполнения;
	Очередь = МетаданныеРеквизиты.Очередь.ЗначениеЗаполнения;
	
	ДинамическаяСтруктура =
		Документы.ЗаказНаПроизводство2_2.ДоступенРасчетСтруктурыЗаказа(ЭтотОбъект);
	
	ОбособленноеОбеспечениеМатериаловИРабот =
		МетаданныеРеквизиты.ОбособленноеОбеспечениеМатериаловИРабот.ЗначениеЗаполнения;
	
	РазмещениеВыпуска = ?(ДинамическаяСтруктура,
							Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию,
							Метаданные.Документы.ЗаказНаПроизводство2_2.Реквизиты.РазмещениеВыпуска.ЗначениеЗаполнения);

	Ответственный = Пользователи.ТекущийПользователь();

	СтруктураЗаказаПроведениеДокументов.ОчиститьКлючиСтрокВТабличнойЧасти(ЭтотОбъект, "Продукция", "КлючНоменклатура");
	
	ПараметрыЗаполнения = Документы.ЗаказНаПроизводство2_2.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ЗаказПодДеятельность, ПараметрыЗаполнения);
	
	Автор = Пользователи.АвторизованныйПользователь();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ВыполнитьКонтрольЗаказаПослеПроведения(Отказ);
	
	РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ВыполнитьКонтрольЗапланированныхЭтапов(Отказ, Истина);
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовНаПроизводство.ОчиститьСостояние(ЭтотОбъект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

Процедура ЗаполнитьПоТаблицеТовары(АдресПродукция)
	
	Если ЭтоАдресВременногоХранилища(АдресПродукция) Тогда
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресПродукция);
		УдалитьИзВременногоХранилища(АдресПродукция);
	Иначе
		ТаблицаТоваров = АдресПродукция; //ТаблицаЗначений - для заполнения была передана таблица значений.
	КонецЕсли;
	
	Продукция.Очистить();
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНачатьНеРанее = ТаблицаТоваров.Колонки.Найти("НачатьНеРанее") <> Неопределено;
	ЕстьДатаПотребности = ТаблицаТоваров.Колонки.Найти("ДатаПотребности") <> Неопределено;
	ЕстьЗаказыКОбеспечению = ТаблицаТоваров.Колонки.Найти("Заказ") <> Неопределено;
	
	ЗаказыКОбеспечению = Новый Массив;
	Если ЕстьНачатьНеРанее ИЛИ ЕстьДатаПотребности ИЛИ ЕстьЗаказыКОбеспечению Тогда
		
		НачатьНеРанееМинимальная = Неопределено;
		ДатаПотребностиМинимальная = Неопределено;
		
		Для Каждого Строка Из ТаблицаТоваров Цикл
			Если ЕстьНачатьНеРанее Тогда
				Если НачатьНеРанееМинимальная <> Неопределено Тогда
					НачатьНеРанееМинимальная = Мин(Строка.НачатьНеРанее,НачатьНеРанееМинимальная);
				Иначе
					НачатьНеРанееМинимальная = Строка.НачатьНеРанее;
				КонецЕсли;
			КонецЕсли;
			Если ЕстьДатаПотребности Тогда
				Если ДатаПотребностиМинимальная <> Неопределено Тогда
					ДатаПотребностиМинимальная = Мин(Строка.ДатаПотребности,ДатаПотребностиМинимальная);
				Иначе
					ДатаПотребностиМинимальная = Строка.ДатаПотребности;
				КонецЕсли;
			КонецЕсли;
			Если ЕстьЗаказыКОбеспечению Тогда
				Если ЗначениеЗаполнено(Строка.Заказ) 
					И ЗаказыКОбеспечению.Найти(Строка.Заказ) = Неопределено Тогда
					ЗаказыКОбеспечению.Добавить(Строка.Заказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НачатьНеРанееМинимальная) Тогда
			НачатьНеРанее = НачатьНеРанееМинимальная;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаПотребностиМинимальная) Тогда
			ДатаПотребности = ДатаПотребностиМинимальная;
		КонецЕсли;
		
	КонецЕсли;
	
	ГруппируемыеПоля = "Номенклатура,Характеристика"
		+ ?(ТаблицаТоваров.Колонки.Найти("Назначение") <> Неопределено,",Назначение","")
		+ ?(ТаблицаТоваров.Колонки.Найти("Склад") <> Неопределено,",Склад","")
		+ ?(ТаблицаТоваров.Колонки.Найти("Подразделение") <> Неопределено,",Подразделение","")
		+ ?(ТаблицаТоваров.Колонки.Найти("Спецификация") <> Неопределено,",Спецификация","")
		+ ?(ТаблицаТоваров.Колонки.Найти("Упаковка") <> Неопределено,",Упаковка","")
		+ ?(ТаблицаТоваров.Колонки.Найти("СписатьНаРасходы") <> Неопределено,",СписатьНаРасходы","")
		+ ?(ТаблицаТоваров.Колонки.Найти("СтатьяРасходов") <> Неопределено,",СтатьяРасходов","")
		+ ?(ТаблицаТоваров.Колонки.Найти("АналитикаРасходов") <> Неопределено,",АналитикаРасходов","")
		+ ?(ТаблицаТоваров.Колонки.Найти("АналитикаАктивовПассивов") <> Неопределено,",АналитикаАктивовПассивов","");
	
	СвернутаяТаблицаТоваров = ТаблицаТоваров.Скопировать(,ГруппируемыеПоля+",Количество");
	СвернутаяТаблицаТоваров.Свернуть(ГруппируемыеПоля,"Количество");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрокаТовара Из СвернутаяТаблицаТоваров Цикл
		
		СтрокаПродукция = Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПродукция, СтрокаТовара);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаПродукция, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ЗаполнитьДанныеСпецификацииВСтроках(Истина);
	
	УстановитьПриоритетИНомерОчередиПоПотребности(ЗаказыКОбеспечению);
	
КонецПроцедуры

//++ Устарело_Переработка24

Процедура ЗаполнитьПоЗаказуДавальца(ЗаказДавальца)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказДавальца.Ссылка КАК Заказ,
	|	ЗаказДавальца.Статус КАК СтатусДокумента,
	|
	|	ЗаказДавальца.Приоритет                    КАК Приоритет,
	|	ЗаказДавальца.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|
	|	ЗаказДавальца.Организация        КАК Организация,
	|	ЗаказДавальца.НалогообложениеНДС КАК ЗаказПодДеятельность,
	|	ЗаказДавальца.Партнер            КАК Партнер,
	|	ЗаказДавальца.Договор            КАК Договор,
	|	ВЫБОР 
	|		КОГДА ЗаказДавальца.НаправлениеДеятельности.УчетЗатрат
	|			ТОГДА ЗаказДавальца.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ                            КАК НаправлениеДеятельности,
	|
	// Ошибки заполнения
	|	ВЫБОР
	|		КОГДА ЗаказДавальца.Статус НЕ В
	|					(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                     КАК ЕстьОшибкиСтатус,
	|	НЕ ЗаказДавальца.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказДавальца КАК ЗаказДавальца
	|ГДЕ
	|	ЗаказДавальца.Ссылка = &ЗаказДавальца
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|// Дата потребности
	|ВЫБРАТЬ
	|	МИНИМУМ(Товары.ДатаОтгрузки) КАК ДатаПотребности
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено
	|	И Товары.Ссылка = &ЗаказДавальца
	|");
	
	Запрос.УстановитьПараметр("ЗаказДавальца", ЗаказДавальца);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Реквизиты = ПакетРезультатов[0].Выбрать();
	Реквизиты.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказДавальца,
		Реквизиты.СтатусДокумента,
		Реквизиты.ЕстьОшибкиПроведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	// Заполнение шапки
	РеквизитыШапки = "Приоритет, ТипПроизводственногоПроцесса, Организация, ЗаказПодДеятельность, НаправлениеДеятельности, Партнер, Договор";
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты, РеквизитыШапки);
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
	ДокументОснование = ЗаказДавальца;
	
	ДатаПотребности = '00010101';
	Выборка = ПакетРезультатов[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаПотребности = Выборка.ДатаПотребности;
		Если ЗначениеЗаполнено(ДатаПотребности) Тогда
			РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию;
		КонецЕсли;
	КонецЕсли;
	ДатаПотребности = Макс(ДатаПотребности, НачалоДня(ТекущаяДатаСеанса()));
	
	МассивЗаказов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаказДавальца);
	Результат = Документы.ЗаказНаПроизводство2_2.ОстаткиПродукцииКОбеспечениюДавальцу(МассивЗаказов,, ТипПроизводственногоПроцесса);
	Продукция.Загрузить(Результат.Выгрузить());
	ЗаполнитьДанныеСпецификацииВСтроках(Истина);
	
КонецПроцедуры
//-- Устарело_Переработка24

Процедура ЗаполнитьПоЗаказуДавальца2_5(ЗаказДавальца)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказДавальца2_5.Ссылка                       КАК Заказ,
	|	ЗаказДавальца2_5.Статус                       КАК СтатусДокумента,
	|	ЗаказДавальца2_5.Приоритет                    КАК Приоритет,
	|	ЗаказДавальца2_5.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	ЗаказДавальца2_5.Организация                  КАК Организация,
	|	ЗаказДавальца2_5.НалогообложениеНДС           КАК ЗаказПодДеятельность,
	|	ЗаказДавальца2_5.Партнер                      КАК Партнер,
	|	ЗаказДавальца2_5.Договор                      КАК Договор,
	|	ВЫБОР 
	|		КОГДА ЗаказДавальца2_5.НаправлениеДеятельности.УчетЗатрат
	|			ТОГДА ЗаказДавальца2_5.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ                                         КАК НаправлениеДеятельности,
	|	ЗаказДавальца2_5.Статус НЕ В (
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) КАК ЕстьОшибкиСтатус,
	|	НЕ ЗаказДавальца2_5.Проведен                                               КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ЗаказДавальца2_5
	|ГДЕ
	|	ЗаказДавальца2_5.Ссылка = &ЗаказДавальца
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Товары.ДатаОтгрузки) КАК ДатаПотребности
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Продукция КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ЗаказДавальца
	|	И НЕ Товары.Отменено";
	
	Запрос.УстановитьПараметр("ЗаказДавальца", ЗаказДавальца);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();  
	Реквизиты = ПакетРезультатов[0].Выбрать();
	Реквизиты.Следующий();
	
	ДопустимыеСтатусы = Новый Массив;
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказДавальца,
		Реквизиты.СтатусДокумента,
		Реквизиты.ЕстьОшибкиПроведен,
		Реквизиты.ЕстьОшибкиСтатус,
		ДопустимыеСтатусы);
	
	// Заполнение шапки
	РеквизитыШапки = "Приоритет,
					 |ТипПроизводственногоПроцесса,
					 |Организация,
					 |ЗаказПодДеятельность,
					 |НаправлениеДеятельности,
					 |Партнер,
					 |Договор";
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты, РеквизитыШапки);
	
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5;
	ДокументОснование     = ЗаказДавальца;
	
	Выборка = ПакетРезультатов[1].Выбрать();
	ДатаПотребности = Макс(?(Выборка.Следующий(), Выборка.ДатаПотребности, '00010101'), НачалоДня(ТекущаяДатаСеанса()));
	
	Результат = Документы.ЗаказНаПроизводство2_2.ОстаткиПродукцииКОбеспечениюДавальцу(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаказДавальца),, ТипПроизводственногоПроцесса);
	
	Продукция.Загрузить(Результат.Выгрузить());
	
	ЗаполнитьДанныеСпецификацииВСтроках(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения)
	
	ЗаказКлиента = ДанныеЗаполнения.Основание;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказКлиента.Приоритет          КАК Приоритет,
		|	ЗаказКлиента.Организация        КАК Организация,
		|	ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат
		|			ТОГДА ЗаказКлиента.НаправлениеДеятельности
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &ЗаказКлиента");
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	// Заполнение шапки
	Организация             = Реквизиты.Организация;
	ДокументОснование       = ЗаказКлиента;
	ЗаказПодДеятельность    = Реквизиты.НалогообложениеНДС;
	Приоритет               = Реквизиты.Приоритет;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	НачатьНеРанее     = ТекущаяДатаСеанса();
	
	// Заполнение табличной части.
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары); // ТаблицаЗначений
	УдалитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары);
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		ДатаОтгрузки = Строка.ДатаОтгрузки;
		Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
			ДатаПотребности = ?(ЗначениеЗаполнено(ДатаПотребности), Мин(ДатаПотребности, ДатаОтгрузки), ДатаОтгрузки);
		КонецЕсли;
		
	КонецЦикла;
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаПеремещение(ДанныеЗаполнения)
	
	ЗаказНаПеремещение = ДанныеЗаполнения.Основание;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказНаПеремещение.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ЗаказНаПеремещение.НаправлениеДеятельности.УчетЗатрат
		|			ТОГДА ЗаказНаПеремещение.НаправлениеДеятельности
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|ГДЕ
		|	ЗаказНаПеремещение.Ссылка = &ЗаказНаПеремещение");
	
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказНаПеремещение);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	// Заполнение шапки
	Организация             = Реквизиты.Организация;
	ДокументОснование       = ЗаказНаПеремещение;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	НачатьНеРанее     = ТекущаяДатаСеанса();
	РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
	
	// Заполнение табличной части.
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары); // ТаблицаЗначений
	УдалитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары);
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		ДатаОтгрузки = Строка.ДатаОтгрузки;
		Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
			ДатаПотребности = ?(ЗначениеЗаполнено(ДатаПотребности), Мин(ДатаПотребности, ДатаОтгрузки), ДатаОтгрузки);
		КонецЕсли;
		
	КонецЦикла;
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкаНаВозврат(ДанныеЗаполнения)
	
	ЗаявкаНаВозврат = ДанныеЗаполнения.Основание;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказКлиента.Организация КАК Организация,
		|	ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат
		|			ТОГДА ЗаказКлиента.НаправлениеДеятельности
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &ЗаявкаНаВозврат");
	
	Запрос.УстановитьПараметр("ЗаявкаНаВозврат", ЗаявкаНаВозврат);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	// Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаявкаНаВозврат;
	ЗаказПодДеятельность	= Реквизиты.НалогообложениеНДС;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	НачатьНеРанее     = ТекущаяДатаСеанса();
	РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
	
	// Заполнение табличной части.
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары); // ТаблицаЗначений
	УдалитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары);
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		ДатаОтгрузки = Строка.ДатаОтгрузки;
		Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
			ДатаПотребности = ?(ЗначениеЗаполнено(ДатаПотребности), Мин(ДатаПотребности, ДатаОтгрузки), ДатаОтгрузки);
		КонецЕсли;
		
	КонецЦикла;
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаВнутреннееПотребление(ДанныеЗаполнения)
	
	ЗаказНаВнутреннееПотребление = ДанныеЗаполнения.Основание;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Заказ.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА Заказ.НаправлениеДеятельности.УчетЗатрат
		|			ТОГДА Заказ.НаправлениеДеятельности
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка = &Заказ");
	
	Запрос.УстановитьПараметр("Заказ", ЗаказНаВнутреннееПотребление);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	// Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаказНаВнутреннееПотребление;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	НачатьНеРанее     = ТекущаяДатаСеанса();
	РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
	
	// Заполнение табличной части.
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары); // ТаблицаЗначений
	УдалитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары);
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		ДатаОтгрузки = Строка.ДатаОтгрузки;
		Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
			ДатаПотребности = ?(ЗначениеЗаполнено(ДатаПотребности), Мин(ДатаПотребности, ДатаОтгрузки), ДатаОтгрузки);
		КонецЕсли;
		
	КонецЦикла;
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаРемонт(ДанныеЗаполнения)
	
	ЗаказНаРемонт = ДанныеЗаполнения.Основание;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Заказ.Организация КАК Организация,
		|	Заказ.ДатаНачала КАК ДатаПотребности,
		|	ВЫБОР
		|		КОГДА Заказ.НаправлениеДеятельности.УчетЗатрат
		|			ТОГДА Заказ.НаправлениеДеятельности
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаРемонт КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка = &ЗаказНаРемонт");
	
	Запрос.УстановитьПараметр("ЗаказНаРемонт", ЗаказНаРемонт);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	// Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаказНаРемонт;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = Реквизиты.ДатаПотребности;
	НачатьНеРанее     = ТекущаяДатаСеанса();
	РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
	
	// Заполнение табличной части.
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары); // ТаблицаЗначений
	УдалитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары);
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаСборку(ДанныеЗаполнения)
	
	ЗаказНаСборку = ДанныеЗаполнения.Основание;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Заказ.Организация             КАК Организация,
		|	Заказ.НачалоСборкиРазборки    КАК ДатаПотребности,
		|	ВЫБОР
		|		КОГДА Заказ.НаправлениеДеятельности.УчетЗатрат
		|			ТОГДА Заказ.НаправлениеДеятельности
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка = &ЗаказНаСборку");
		
	Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	// Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаказНаСборку;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = Реквизиты.ДатаПотребности;
	НачатьНеРанее     = ТекущаяДатаСеанса();
	РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
	
	// Заполнение табличной части.
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары); // ТаблицаЗначений
	УдалитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары);
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуМатериаловВПроизводство(ДанныеЗаполнения)
	
	ЗаказМатериаловВПроизводство = ДанныеЗаполнения.Основание;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Заказ.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА Заказ.НаправлениеДеятельности.УчетЗатрат
		|			ТОГДА Заказ.НаправлениеДеятельности
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказМатериаловВПроизводство КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка = &Заказ");
	Запрос.УстановитьПараметр("Заказ", ЗаказМатериаловВПроизводство);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	// Заполнение шапки
	Организация	      = Реквизиты.Организация;
	НачатьНеРанее     = ТекущаяДатаСеанса();
	РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
	ДокументОснование = ЗаказМатериаловВПроизводство;
	
	// Заполнение табличной части.
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары); // ТаблицаЗначений
	УдалитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары);
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		ДатаОтгрузки = Строка.ДатаОтгрузки;
		Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
			ДатаПотребности = ?(ЗначениеЗаполнено(ДатаПотребности), Мин(ДатаПотребности, ДатаОтгрузки), ДатаОтгрузки);
		КонецЕсли;
		
	КонецЦикла;
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСпецификацииВСтроках(ТолькоНезаполненные = Ложь)
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(ЭтотОбъект, Документы.ЗаказНаПроизводство2_2);
	
	// Заполнение спецификаций
	МассивДанных = Новый Массив;
	МассивСтрок = Новый Массив;
	
	Для каждого Строка Из Продукция Цикл
		
		Если ТолькоНезаполненные И Не Строка.Спецификация.Пустая() Тогда
			Продолжить;
		КонецЕсли;

		ДанныеОбИзделии = УправлениеДаннымиОбИзделияхКлиентСервер.СобратьДанныеОбИзделииДляВыбораСпецификации(
			ЭтотОбъект, Строка, ПараметрыВыбораСпецификаций);
		
		МассивДанных.Добавить(ДанныеОбИзделии);
		МассивСтрок.Добавить(Строка);
		
	КонецЦикла;
	
	// Заполним спецификации
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанных, ПараметрыВыбораСпецификаций);
	
КонецПроцедуры

#КонецОбласти

#Область Очередь

Процедура УстановитьНовыйНомерОчереди()
	
	Если Статус <> Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству
		ИЛИ ЗначениеЗаполнено(Очередь) Тогда
		
		Если Статус = Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется Тогда
			Очередь = 0;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Очередь) Тогда
		Очередь = Документы.ЗаказНаПроизводство2_2.НовыйНомерОчереди();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПриоритетИНомерОчередиПоПотребности(ЗаказыКОбеспечению)
	
	ЗаказыПоТипам = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(ЗаказыКОбеспечению);
	
	СписокЭтапов = Новый Массив;
	Для каждого Элемент Из ЗаказыПоТипам Цикл
		Если Элемент.Ключ = "Документ.ЭтапПроизводства2_2" Тогда
			СписокЭтапов = Элемент.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(СписокЭтапов) Тогда
		Возврат;
	КонецЕсли;
	
	СписокНазначений = Новый Массив;
	Для каждого Строка Из Продукция Цикл
		Если ЗначениеЗаполнено(Строка.Назначение) И СписокНазначений.Найти(Строка.Назначение) = Неопределено
			И Не Строка.Отменено Тогда
			СписокНазначений.Добавить(Строка.Назначение);
		КонецЕсли;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(СписокНазначений) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Приоритет КАК Приоритет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Приоритет КАК Приоритет
	|	ИЗ
	|		Документ.ЗаказКлиента КАК Т
	|	ГДЕ
	|		Т.Назначение В(&СписокНазначений)
	//++ Устарело_Переработка24
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Приоритет
	|	ИЗ
	|		Документ.ЗаказДавальца КАК Т
	|	ГДЕ
	|		Т.Назначение В(&СписокНазначений)
	//-- Устарело_Переработка24
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Распоряжение.Приоритет
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК Т
	|	ГДЕ
	|		Т.Ссылка В(&СписокЭтапов)) КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Приоритет.РеквизитДопУпорядочивания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Распоряжение КАК Распоряжение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Т
	|ГДЕ
	|	Т.Ссылка В(&СписокЭтапов) И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)");
	
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("СписокЭтапов", СписокЭтапов);
	Запрос.УстановитьПараметр("СписокНазначений", СписокНазначений);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапроса[0].Пустой() Тогда
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		
		Приоритет = Выборка.Приоритет;
		
	КонецЕсли;
	
	Если Не РезультатЗапроса[1].Пустой() Тогда
		
		Распоряжения = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку(0);
		Очередь = Документы.ЗаказНаПроизводство2_2.НомерОчередиДляВставкиПередДокументами(Распоряжения);
		
	КонецЕсли
	
КонецПроцедуры

Процедура УстановитьНовыйНомерОчередиПоДатеПотребности()
	
	Если Не ЗначениеЗаполнено(ДатаПотребности)
		ИЛИ Приоритет.Пустая()
		ИЛИ Подразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Заказы.Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
		|ГДЕ
		|	Заказы.Приоритет = &Приоритет
		|	И Заказы.Подразделение = &Подразделение
		|	И Заказы.ДатаПотребности > &ДатаПотребности
		|	И Заказы.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Заказы.Приоритет.РеквизитДопУпорядочивания,
		|	Заказы.Подразделение.РеквизитДопУпорядочивания,
		|	Заказы.Очередь");
	
	Запрос.УстановитьПараметр("Приоритет", Приоритет);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ДатаПотребности", ДатаПотребности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Распоряжения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Ссылка);
		Очередь = Документы.ЗаказНаПроизводство2_2.НомерОчередиДляВставкиПередДокументами(Распоряжения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольРезультатовПроведения

Процедура ВыполнитьКонтрольЗаказаПослеПроведения(Отказ)
	
	ВыполнитьКонтрольЗакрытияЗаказа(Отказ);
	ВыполнитьКонтрольЗапланированныхЭтапов(Отказ);
	
КонецПроцедуры

Процедура ВыполнитьКонтрольЗакрытияЗаказа(Отказ)
	
	Если Статус <> Перечисления.СтатусыЗаказовНаПроизводство2_2.Закрыт Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	
	ПараметрыПроверки = Новый Структура("КонтрольВыполненияЗаказа");
	Запрос =
		Документы.ЗаказНаПроизводство2_2.СформироватьЗапросПроверкиПриСменеСтатуса(
			МассивСсылок,
			Статус,
			ПараметрыПроверки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Отказ = Отказ Или Не Документы.ЗаказНаПроизводство2_2.ПроверкаПередСменойСтатуса(Выборка, Статус, ПараметрыПроверки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьКонтрольЗапланированныхЭтапов(Отказ, УдалениеПроведения = Ложь)
	
	Если Статус <> Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется
		И Не УдалениеПроведения Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.УстановитьЗначение("Распоряжение", ЭтотОбъект.Ссылка);
	
	Блокировка.Заблокировать();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|ГДЕ
	|	Таблица.Распоряжение = &Ссылка
	|	И Таблица.Проведен");
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Если УдалениеПроведения Тогда
			ТекстШаблона = НСтр("ru = 'Не удалось сделать непроведенным заказ на производство № %1 от %2';
								|en = 'Cannot make production order No.%1, %2 unposted'");
		Иначе
			ТекстШаблона = НСтр("ru = 'Не удалось провести заказ на производство № %1 от %2';
								|en = 'Cannot post production order No.%1, %2'");
		КонецЕсли;
		
		ТекстШаблона = ТекстШаблона + НСтр("ru = ', т.к. по заказу запланированы этапы.';
											|en = ', as stages are planned for the order.'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстШаблона,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, Истина),
			Формат(Дата, "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПроверитьЗаполнениеТаблицыПродукция(МассивНепроверяемыхРеквизитов, Отказ)
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция");
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Характеристика");
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Спецификация");
		
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Подразделение");
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Назначение");
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.ПричинаОтмены");
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Количество");
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.ДоляСтоимости");
	
	// Проверка заполнения табличной части "Продукция"
	ЗаголовокТЧ = ПроизводствоКлиентСервер.ЗаголовокТабличнойЧастиПоТипуПроцесса(ТипПроизводственногоПроцесса);
	Если Не ЗначениеЗаполнено(Продукция) Тогда
		
		Шаблон = НСтр("ru = 'Не заполнена табличная часть ""%1""';
						|en = 'Table ""%1"" is not filled in'");
		ТекстСообщения = СтрШаблон(Шаблон, ЗаголовокТЧ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"Продукция",
			,
			Отказ);
		Возврат;
		
	КонецЕсли;
	
	// Проверка строк табличной части "Продукция"
	РеквизитыНоменклатуры = Новый Соответствие;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СправочникНоменклатура.ВестиУчетПоГТД КАК ВестиУчетПоГТД,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В (&МассивСсылок)");
	Запрос.УстановитьПараметр("МассивСсылок", Продукция.ВыгрузитьКолонку("Номенклатура"));

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначенияРеквизитов = Новый Структура("ТипНоменклатуры,ХарактеристикиИспользуются,ВестиУчетПоГТД");
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
		РеквизитыНоменклатуры.Вставить(Выборка.Номенклатура, ЗначенияРеквизитов);
	КонецЦикла;
	ХарактеристикиИспользуются = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД =
		ПолучитьФункциональнуюОпцию("ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД");
	
	ШаблонАдреса = НСтр("ru = 'в строке %1 списка ""%2""';
						|en = 'in line %1 of the ""%2"" list'");
	ШаблонГТД = НСтр("ru = 'В строке %1 списка ""%2"" выбрана номенклатура, для которой ведется учет по ГТД.
		|При включенной опции ""Запретить оформление операций с импортными товарами без номеров ГТД"" выбор такой номенклатуры запрещен.';
		|en = 'Items with CCD records are selected in line %1 of the %2 list. 
		|you cannot select such products while the ""Prohibit registration of operations with imported goods without CCD numbers"" option is enabled.'");
	
	Для каждого Строка Из Продукция Цикл
		
		АдресОшибки = СтрШаблон(ШаблонАдреса, Строка.НомерСтроки, ЗаголовокТЧ);
		
		// Проверка заполнения колонки "Номенклатура"
		Если Строка.Номенклатура.Пустая() Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Номенклатура""';
									|en = 'Column ""Items"" is not filled in'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Номенклатура");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения + " " + АдресОшибки,
				ЭтотОбъект,
				Поле,
				,
				Отказ);
				
			Продолжить;
		КонецЕсли;
		
		// Проверка правильности выбора изделий при учете по ГТД
		Если Не Строка.Номенклатура.Пустая()
			И ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД
			И РеквизитыНоменклатуры[Строка.Номенклатура].ВестиУчетПоГТД = Истина
			И (РеквизитыНоменклатуры[Строка.Номенклатура].ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
				ИЛИ РеквизитыНоменклатуры[Строка.Номенклатура].ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонГТД,
				Строка.НомерСтроки,
				ЗаголовокТЧ);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Номенклатура");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				Поле,
				,
				Отказ);
			
		КонецЕсли;
		
		// Проверка заполнения колонки "Характеристика"
		Если ХарактеристикиИспользуются И РеквизитыНоменклатуры[Строка.Номенклатура].ХарактеристикиИспользуются
			И Строка.Характеристика.Пустая() Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Характеристика""';
									|en = 'Column ""Variant"" is not filled in'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Характеристика");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения + " " + АдресОшибки,
				ЭтотОбъект,
				Поле,
				, 
				Отказ);
			
		КонецЕсли;
		
		// Проверка заполнения колонки "Назначение"
		Если (ХозяйственнаяОперация = ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора()
				//++ Устарело_Переработка24
				Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
				//-- Устарело_Переработка24
				Или Ложь)
			И Не НазначениеУказываетсяВШапкеДокумента()
			И Не Строка.Отменено
			И Строка.Назначение.Пустая() Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Назначение""';
									|en = 'Column ""Assignment"" is not filled in'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Назначение");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения + " " + АдресОшибки,
				ЭтотОбъект,
				Поле,
				, 
				Отказ);
			
		КонецЕсли;
		
		// Проверка заполнения колонок "Склад" и "Подразделение"
		Если РеквизитыНоменклатуры[Строка.Номенклатура].ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
			
			Если Строка.СписатьНаРасходы Тогда
				
				Если Строка.Подразделение.Пустая() Тогда
					
					ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Подразделение""';
											|en = 'Column ""Business unit"" is not filled in'");
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Подразделение");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения + " " + АдресОшибки,
						ЭтотОбъект,
						Поле,
						, 
						Отказ);
					
				КонецЕсли;
				
			Иначе	
	
				Если Строка.Склад.Пустая() Тогда
					
					ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Склад""';
											|en = 'Column ""Warehouse"" is not filled in'");
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Склад");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения + " " + АдресОшибки,
						ЭтотОбъект,
						Поле,
						, 
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Сборка
				И ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			
				ТекстСообщения = НСтр("ru = 'Не допускается указание работы';
										|en = 'It is not allowed to specify work'");
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Номенклатура");
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения + " " + АдресОшибки,
					ЭтотОбъект,
					Поле,
					,
					Отказ);
			
			ИначеЕсли Строка.Подразделение.Пустая() Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Подразделение""';
										|en = 'Column ""Business unit"" is not filled in'");
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Подразделение");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения + " " + АдресОшибки,
					ЭтотОбъект,
					Поле,
					, 
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
			
		// Причина отмены обязательна для заполнения в строках без признака Отменено
		Если Строка.Отменено И Не ЗначениеЗаполнено(Строка.ПричинаОтмены) Тогда
			
			ТекстСообщения = НСтр("ru = 'Необходимо указать причину отмены';
									|en = 'Cancellation reason is required'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "ПричинаОтмены");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения + " " + АдресОшибки,
				ЭтотОбъект,
				Поле,
				,
				Отказ);
			
		КонецЕсли;
		
		// Проверка заполнения колонки "Количество"
		Если Строка.Количество = 0 И Не Строка.Отменено Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Количество""';
									|en = 'Column ""Quantity"" is not filled in'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Количество");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения + " " + АдресОшибки,
				ЭтотОбъект,
				Поле,
				,
				Отказ);
			
		КонецЕсли;
		
		// Проверка заполнения колонки "Доля стоимости"
		Если ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций
			И ПроизводствоСервер.ТребуетсяЗаполнитьДолюСтоимости(ЭтотОбъект, Строка) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Доля стоимости""';
									|en = 'Column ""Cost share"" is not filled in'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "ДоляСтоимости");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения + " " + АдресОшибки,
				ЭтотОбъект,
				Поле,
				,
				Отказ);
				
		КонецЕсли;
		
		// Проверка заполнения колонки "Спецификация"
		Если ДинамическаяСтруктура И Строка.Спецификация.Пустая() Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Спецификация""';
									|en = 'Column ""BOM"" is not filled in'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Спецификация");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения + " " + АдресОшибки,
				ЭтотОбъект,
				Поле,
				,
				Отказ);
				
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыполнятьЗапросПроверкиТаблицы = Ложь;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство
			И (ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья2_5")
				//++ Устарело_Переработка24
				Или ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья")
				//-- Устарело_Переработка24
				Или Ложь) Тогда
				
				ВыполнятьЗапросПроверкиТаблицы = Истина; // нужна проверка указания давальческих назначений.
				
	КонецЕсли;
	
	Если ВыполнятьЗапросПроверкиТаблицы Тогда
		
		КолонкиДляВыгрузки = "НомерСтроки,Назначение";
		Запрос.УстановитьПараметр("Продукция", Продукция.Выгрузить(Новый Структура("Отменено", Ложь), КолонкиДляВыгрузки));
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Продукция.НомерСтроки КАК НомерСтроки,
			|	ВЫРАЗИТЬ(Продукция.Назначение КАК Справочник.Назначения) КАК Назначение
			|ПОМЕСТИТЬ ПроверяемаяТаблица
			|ИЗ
			|	&Продукция КАК Продукция
			|ИНДЕКСИРОВАТЬ ПО
			|	Назначение
			|;
			|
			|/////////////////////////////////////////
			|ВЫБРАТЬ
			|	Таблица.НомерСтроки КАК НомерСтроки,
			|	Таблица.ОшибкаУказанияДавальческогоНазначения КАК ОшибкаУказанияДавальческогоНазначения
			|ИЗ(
			|	ВЫБРАТЬ
			|		Продукция.НомерСтроки КАК НомерСтроки,
			|		Продукция.Назначение КАК Назначение,
			|		ВЫБОР
			|			КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)
			|					И Продукция.Назначение.ТипНазначения В(
			|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5),
			
			//++ Устарело_Переработка24
			
			|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
			|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
			
			//-- Устарело_Переработка24
			
			|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22))
			
			//-- Устарело_Переработка24
			
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК ОшибкаУказанияДавальческогоНазначения
			|	ИЗ
			|		ПроверяемаяТаблица КАК Продукция) КАК Таблица
			|ГДЕ
			|	Таблица.ОшибкаУказанияДавальческогоНазначения
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		ТаблицаОшибок = Запрос.Выполнить().Выгрузить();
		
		ПолеНазначение = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Строка.НомерСтроки, "Назначение");
		Для Индекс = 0 По ТаблицаОшибок.Количество() - 1 Цикл
			
			ТекущаяОшибка = ТаблицаОшибок[Индекс];
			Строка = Продукция[ТекущаяОшибка.НомерСтроки - 1];
			
			Если ТекущаяОшибка.ОшибкаУказанияДавальческогоНазначения Тогда
			
				ШаблонСообщения = НСтр("ru = 'Запрещено выбирать назначение давальца при собственном производстве (строка %1 списка ""%2"").';
										|en = 'Cannot select the provider assignment for in-house production (line %1 of the ""%2"" list).'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка.НомерСтроки, НСтр("ru = 'Продукция';
																					|en = 'Manufactured product'"));
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					ПолеНазначение,
					Неопределено,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступноОбновлениеПартииПроизводства()
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.УстановитьЗначение("Распоряжение", Ссылка);
	ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ПартияПроизводства);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапПроизводства22.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства22
	|ГДЕ
	|	ЭтапПроизводства22.ПартияПроизводства = &ПартияПроизводства
	|	И ЭтапПроизводства22.Проведен");
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат.Пустой();
	
КонецФункции

Функция НазначениеУказываетсяВШапкеДокумента()
	
	Если ЭтотОбъект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтотОбъект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
