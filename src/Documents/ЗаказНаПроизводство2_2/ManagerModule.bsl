
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("Производство");
	МеханизмыДокумента.Добавить("СтруктураЗаказа");
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаказНаПроизводство2_2") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаОбеспечениеПроизводственныхПроцессов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыНаПроизводство(Запрос, ТекстыЗапроса, Регистры);  
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОснованииЗаказаКлиента(КомандыСозданияНаОсновании);
	
	Документы.ПлановаяКалькуляция2_2.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.РазрешениеНаЗаменуМатериалов.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Заказ на производство".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
// см. УправлениеПроизводством.ДобавитьКомандуСоздатьОбеспечивающийЗаказ
Функция ДобавитьКомандуСоздатьОбеспечивающийЗаказ(КомандыСозданияНаОсновании) Экспорт
	Возврат УправлениеПроизводством.ДобавитьКомандуСоздатьОбеспечивающийЗаказ(КомандыСозданияНаОсновании);
КонецФункции

// Параметры создания на основании обеспечивающего заказа.
// Возвращаемое значение:
// см. ОбеспечениеВДокументахСервер.ПараметрыОтбораТоваровДляСозданияОбеспечивающиегоЗаказа
Функция ПараметрыСозданияНаОснованииОбеспечивающегоЗаказа() Экспорт
	
	ПараметрыТаблицыТовары = ОбеспечениеВДокументахСервер.ПараметрыОтбораТоваровДляСозданияОбеспечивающиегоЗаказа();
	ПараметрыТаблицыТовары.ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	ПараметрыТаблицыТовары.ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ПараметрыТаблицыТовары.ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	Возврат ПараметрыТаблицыТовары;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.ДиаграммаПроизводстваЗаказа.ДобавитьКомандуГрафикПроизводстваЗаказа(КомандыОтчетов);
	
	Отчеты.УкомплектованностьЗаказов.ДобавитьКомандуУкомплектованностиПоЗаказу(КомандыОтчетов);
	
	Отчеты.ГрафикПотребленияМатериаловПоЗаказамНаПроизводство.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	Отчеты.ГрафикЗанятостиТрудовыхРесурсовПоЗаказамНаПроизводство.ДобавитьКомандуОтчета(КомандыОтчетов);

	Отчеты.ТрудоемкостьЗаказаНаПроизводство.ДобавитьКомандуОтчета(КомандыОтчетов, "ТрудоемкостьПоЗаказу");
	
	Отчеты.МониторингЗаказа.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	Отчеты.ДеревоСебестоимостиПродукции.ДобавитьКомандуОтчета(КомандыОтчетов);
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказНаПроизводство";
	КомандаПечати.Представление = НСтр("ru = 'Заказ на производство';
										|en = 'Production order'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область Очередь

// Возвращает новый номер в очереди заказов на производство.
//
// Возвращаемое значение:
//   - Число - новый номер в очереди.
//
Функция НовыйНомерОчереди() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	(Т.Очередь + 1) КАК НовыйНомерОчереди
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Очередь УБЫВ");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		НовыйНомерОчереди = 1;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НовыйНомерОчереди = Выборка.НовыйНомерОчереди;
		
	КонецЕсли;
	
	Возврат НовыйНомерОчереди;
	
КонецФункции

// Определяет можно ли переместить документ в очереди на одну позицию
//
// Параметры:
//  ТекущийЗаказ - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ
//  Направление	 - число - -1, перемещает заказ вверх по очереди
//                         +1, перемещает заказ вниз по очереди.
// 
// Возвращаемое значение:
//   - Булево - Истина, если документ можно переместить в очереди на одну позицию.
//
Функция МожноПереместитьДокументВОчереди(ТекущийЗаказ, Направление) Экспорт
	
	Если Направление = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
		|		ПО ЗаказНаПроизводство.Приоритет        = ТекущийЗаказНаПроизводство.Приоритет
		|			И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
		|			И ЗаказНаПроизводство.Очередь       < ТекущийЗаказНаПроизводство.Очередь
		|ГДЕ
		|	ТекущийЗаказНаПроизводство.Ссылка = &ТекущийЗаказ
		|	И ЗаказНаПроизводство.Статус = &СтатусКПроизводству
		|	И ЗаказНаПроизводство.Проведен";
	
	Если Направление > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<", ">");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущийЗаказ", ТекущийЗаказ);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Перемещает документ в очереди заказов на одну позицию
//
// Параметры:
//  ТекущийЗаказ - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ
//  Направление	 - число - -1, перемещает заказ вверх по очереди
//                         +1, перемещает заказ вниз по очереди.
// 
Процедура ПереместитьДокументВОчереди(ТекущийЗаказ, Направление) Экспорт
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ТекущийЗаказ);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Не удалось заблокировать %Документ%. %ОписаниеОшибки%';
							|en = 'Failed to lock %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Документ%", ТекущийЗаказ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ТекущийЗаказ);
		Возврат;
	КонецПопытки;
		
	Запрос = Новый Запрос;
	
	Если Направление > 0 Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Т.Приоритет КАК Приоритет,
			|	ВЫБОР
			|		КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум
			|			ТОГДА Т.ОчередьМаксимум + 1
			|		ИНАЧЕ Т.ОчередьСреднее
			|	КОНЕЦ       КАК Очередь
			|
			|ИЗ
			|	(ВЫБРАТЬ ПЕРВЫЕ 1
			|		Т.Приоритет         КАК Приоритет,
			|		Т.ПриоритетПорядок  КАК ПриоритетПорядок,
			|		СРЕДНЕЕ(Т.Очередь)  КАК ОчередьСреднее,
			|		МАКСИМУМ(Т.Очередь) КАК ОчередьМаксимум
			|	ИЗ
			|		(
			|			ВЫБРАТЬ
			|				Т.Приоритет        КАК Приоритет,
			|				Т.ПриоритетПорядок КАК ПриоритетПорядок,
			|				Т.Очередь          КАК Очередь
			|			ИЗ (
			|				ВЫБРАТЬ ПЕРВЫЕ 2
			|					ЗаказНаПроизводство.Приоритет                           КАК Приоритет,
			|					ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания КАК ПриоритетПорядок,
			|					ЗаказНаПроизводство.Очередь                             КАК Очередь
			|				ИЗ
			|					Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
			|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
			|						ПО ЗаказНаПроизводство.Приоритет        = ТекущийЗаказНаПроизводство.Приоритет
			|							И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
			|							И ЗаказНаПроизводство.Очередь       > ТекущийЗаказНаПроизводство.Очередь
			|				ГДЕ
			|					ТекущийЗаказНаПроизводство.Ссылка = &ТекущийЗаказ
			|					И ЗаказНаПроизводство.Статус = &СтатусКПроизводству
			|					И ЗаказНаПроизводство.Проведен
			|
			|				УПОРЯДОЧИТЬ ПО
			|					Очередь
			|				) КАК Т
			|			
			|			ОБЪЕДИНИТЬ ВСЕ
			|
			|			ВЫБРАТЬ
			|				Т.Приоритет        КАК Приоритет,
			|				Т.ПриоритетПорядок КАК ПриоритетПорядок,
			|				Т.Очередь          КАК Очередь
			|			ИЗ (
			|				ВЫБРАТЬ ПЕРВЫЕ 2
			|					ЗаказНаПроизводство.Приоритет                           КАК Приоритет,
			|					ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания КАК ПриоритетПорядок,
			|					ЗаказНаПроизводство.Очередь                             КАК Очередь
			|				ИЗ
			|					Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
			|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
			|						ПО ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания > ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
			|							И ЗаказНаПроизводство.Подразделение                    = ТекущийЗаказНаПроизводство.Подразделение
			|				ГДЕ
			|					ТекущийЗаказНаПроизводство.Ссылка = &ТекущийЗаказ
			|					И ЗаказНаПроизводство.Статус = &СтатусКПроизводству
			|					И ЗаказНаПроизводство.Проведен
			|					И НЕ ИСТИНА В (
			|									ВЫБРАТЬ ПЕРВЫЕ 1
			|										ИСТИНА
			|									ИЗ
			|										Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводствоОчередь
			|									ГДЕ
			|										ЗаказНаПроизводствоОчередь.Приоритет       = ТекущийЗаказНаПроизводство.Приоритет
			|										И ЗаказНаПроизводствоОчередь.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
			|										И ЗаказНаПроизводствоОчередь.Очередь       > ТекущийЗаказНаПроизводство.Очередь
			|										И ЗаказНаПроизводствоОчередь.Статус = &СтатусКПроизводству
			|					                    И ЗаказНаПроизводствоОчередь.Проведен)
			|				УПОРЯДОЧИТЬ ПО
			|					ПриоритетПорядок,
			|					Очередь
			|				) КАК Т
			|		) КАК Т
			|
			|	СГРУППИРОВАТЬ ПО
			|		Т.Приоритет,
			|		Т.ПриоритетПорядок
			|
			|	УПОРЯДОЧИТЬ ПО
			|		ПриоритетПорядок
			|	) КАК Т
			|
			|ГДЕ
			|	НЕ Т.ОчередьСреднее ЕСТЬ NULL";
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Т.Приоритет КАК Приоритет,
			|	ВЫБОР
			|		КОГДА Т.ОчередьСреднее = Т.ОчередьМинимум
			|			ТОГДА Т.ОчередьМинимум / 2
			|		ИНАЧЕ Т.ОчередьСреднее
			|	КОНЕЦ       КАК Очередь
			|
			|ИЗ
			|	(ВЫБРАТЬ ПЕРВЫЕ 1
			|		Т.Приоритет         КАК Приоритет,
			|		Т.ПриоритетПорядок  КАК ПриоритетПорядок,
			|		МИНИМУМ(Т.Очередь)  КАК ОчередьМинимум,
			|		СРЕДНЕЕ(Т.Очередь)  КАК ОчередьСреднее
			|	ИЗ
			|		(
			|			ВЫБРАТЬ
			|				Т.Приоритет        КАК Приоритет,
			|				Т.ПриоритетПорядок КАК ПриоритетПорядок,
			|				Т.Очередь          КАК Очередь
			|			ИЗ (
			|				ВЫБРАТЬ ПЕРВЫЕ 2
			|					ЗаказНаПроизводство.Приоритет                           КАК Приоритет,
			|					ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания КАК ПриоритетПорядок,
			|					ЗаказНаПроизводство.Очередь                             КАК Очередь
			|				ИЗ
			|					Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
			|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
			|						ПО ЗаказНаПроизводство.Приоритет        = ТекущийЗаказНаПроизводство.Приоритет
			|							И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
			|							И ЗаказНаПроизводство.Очередь       < ТекущийЗаказНаПроизводство.Очередь
			|				ГДЕ
			|					ТекущийЗаказНаПроизводство.Ссылка = &ТекущийЗаказ
			|					И ЗаказНаПроизводство.Статус = &СтатусКПроизводству
			|					И ЗаказНаПроизводство.Проведен
			|
			|				УПОРЯДОЧИТЬ ПО
			|					Очередь УБЫВ
			|				) КАК Т
			|			
			|			ОБЪЕДИНИТЬ ВСЕ
			|
			|			ВЫБРАТЬ
			|				Т.Приоритет        КАК Приоритет,
			|				Т.ПриоритетПорядок КАК ПриоритетПорядок,
			|				Т.Очередь          КАК Очередь
			|			ИЗ (
			|				ВЫБРАТЬ ПЕРВЫЕ 2
			|					ЗаказНаПроизводство.Приоритет                           КАК Приоритет,
			|					ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания КАК ПриоритетПорядок,
			|					ЗаказНаПроизводство.Очередь                             КАК Очередь
			|				ИЗ
			|					Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
			|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
			|						ПО ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
			|							И ЗаказНаПроизводство.Подразделение                    = ТекущийЗаказНаПроизводство.Подразделение
			|				ГДЕ
			|					ТекущийЗаказНаПроизводство.Ссылка = &ТекущийЗаказ
			|					И ЗаказНаПроизводство.Статус = &СтатусКПроизводству
			|					И ЗаказНаПроизводство.Проведен
			|					И НЕ ИСТИНА В (
			|									ВЫБРАТЬ ПЕРВЫЕ 1
			|										ИСТИНА
			|									ИЗ
			|										Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводствоОчередь
			|									ГДЕ
			|										ЗаказНаПроизводствоОчередь.Приоритет       = ТекущийЗаказНаПроизводство.Приоритет
			|										И ЗаказНаПроизводствоОчередь.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
			|										И ЗаказНаПроизводствоОчередь.Очередь       < ТекущийЗаказНаПроизводство.Очередь
			|										И ЗаказНаПроизводствоОчередь.Статус = &СтатусКПроизводству
			|					                    И ЗаказНаПроизводствоОчередь.Проведен)
			|
			|				УПОРЯДОЧИТЬ ПО
			|					ПриоритетПорядок УБЫВ,
			|					Очередь УБЫВ
			|				) КАК Т
			|		) КАК Т
			|
			|	СГРУППИРОВАТЬ ПО
			|		Т.Приоритет,
			|		Т.ПриоритетПорядок
			|
			|	УПОРЯДОЧИТЬ ПО
			|		ПриоритетПорядок УБЫВ
			|	) КАК Т
			|
			|ГДЕ
			|	НЕ Т.ОчередьСреднее ЕСТЬ NULL";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущийЗаказ",        ТекущийЗаказ);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаказОбъект = ТекущийЗаказ.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ЗаказОбъект, Выборка, "Приоритет, Очередь");
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось записать %1. %2';
										|en = 'Cannot save %1. %2'"),
				ТекущийЗаказ,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ТекущийЗаказ);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет можно ли вставить документ в очередь
//
// Параметры:
//  ТекущийЗаказ - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ
//  НоваяПозиция - ДокументСсылка.ЗаказНаПроизводство2_2 - новая позиция в очереди.
// 
// Возвращаемое значение:
//   - Булево - Истина, если документ можно вставить в указанную позицию очереди.
//
Функция МожноВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозиция) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ИСТИНА 
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК НоваяПозиция
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказ
		|		ПО  ТекущийЗаказ.Ссылка          = &ТекущийЗаказ
		|			И НоваяПозиция.Ссылка        = &НоваяПозиция
		|			И НоваяПозиция.Подразделение = ТекущийЗаказ.Подразделение
		|			И НоваяПозиция.Приоритет     = ТекущийЗаказ.Приоритет
		|			И НоваяПозиция.Статус        = &СтатусКПроизводству
		|			И ТекущийЗаказ.Статус        = &СтатусКПроизводству
		|			И НоваяПозиция.Проведен
		|			И ТекущийЗаказ.Проведен");
	
	Запрос.УстановитьПараметр("ТекущийЗаказ", ТекущийЗаказ);
	Запрос.УстановитьПараметр("НоваяПозиция", НоваяПозиция);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Вставляет документ в очередь заказов
//
// Параметры:
//  ТекущийЗаказ - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ
//  НоваяПозиция - ДокументСсылка.ЗаказНаПроизводство2_2 - новая позиция в очереди.
//
Процедура ВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозиция) Экспорт
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ТекущийЗаказ);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Не удалось заблокировать %Документ%. %ОписаниеОшибки%';
							|en = 'Failed to lock %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Документ%", ТекущийЗаказ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ТекущийЗаказ);
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
			|	Т.Приоритет КАК Приоритет,
			|	ВЫБОР
			|		КОГДА Т.ОчередьСреднее = Т.ОчередьМинимум
			|			ТОГДА Т.ОчередьМинимум / 2
			|		ИНАЧЕ Т.ОчередьСреднее
			|	КОНЕЦ       КАК Очередь
			|
			|ИЗ
			|	(ВЫБРАТЬ
			|		Т.Приоритет         КАК Приоритет,
			|		МИНИМУМ(Т.Очередь)  КАК ОчередьМинимум,
			|		СРЕДНЕЕ(Т.Очередь)  КАК ОчередьСреднее
			|	ИЗ
			|		(
			|			ВЫБРАТЬ ПЕРВЫЕ 2
			|				ЗаказНаПроизводство.Приоритет КАК Приоритет,
			|				ЗаказНаПроизводство.Очередь   КАК Очередь
			|			ИЗ
			|				Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводствоНоваяПозиция
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
			|					ПО ЗаказНаПроизводство.Приоритет        = ЗаказНаПроизводствоНоваяПозиция.Приоритет
			|						И ЗаказНаПроизводство.Подразделение = ЗаказНаПроизводствоНоваяПозиция.Подразделение
			|						И ЗаказНаПроизводство.Очередь      <= ЗаказНаПроизводствоНоваяПозиция.Очередь
			|			ГДЕ
			|				ЗаказНаПроизводствоНоваяПозиция.Ссылка = &НоваяПозиция
			|				И ЗаказНаПроизводство.Статус = &СтатусКПроизводству
			|				И ЗаказНаПроизводство.Проведен
			|
			|			УПОРЯДОЧИТЬ ПО
			|				Очередь УБЫВ
			|		) КАК Т
			|
			|	СГРУППИРОВАТЬ ПО
			|		Т.Приоритет
			|	) КАК Т
			|
			|ГДЕ
			|	НЕ Т.ОчередьСреднее ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("НоваяПозиция", НоваяПозиция);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			ЗаказОбъект = ТекущийЗаказ.ПолучитьОбъект();
			ПриоритетИзменен = ЗаказОбъект.Приоритет <> Выборка.Приоритет;
			ЗаполнитьЗначенияСвойств(ЗаказОбъект, Выборка, "Приоритет, Очередь");
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Если ПриоритетИзменен Тогда
				ПриИзмененииПриоритета(ТекущийЗаказ);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ШаблонОшибки = НСтр("ru = 'Не удалось записать %Документ%. %ОписаниеОшибки%';
								|en = 'Failed to save %Документ%. %ОписаниеОшибки%'");
			
			ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Документ%", ТекущийЗаказ);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ТекущийЗаказ);
			Возврат;
			
		КонецПопытки
		
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает номер очереди для вставки перед документами
//
// Параметры:
//  Заказы - Массив - заказы на производство.
//
// Возвращаемое значение:
//   - Число - номер очереди для вставки перед документами.
//
Функция НомерОчередиДляВставкиПередДокументами(Заказы) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Граница.Приоритет     КАК Приоритет,
		|	Граница.Подразделение КАК Подразделение,
		|	Граница.Статус        КАК Статус,
		|	Граница.Очередь       КАК Очередь
		|ПОМЕСТИТЬ ВТГраница
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Граница
		|ГДЕ
		|	Граница.Ссылка В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				Т.Ссылка КАК Ссылка
		|			ИЗ
		|				Документ.ЗаказНаПроизводство2_2 КАК Т
		|			ГДЕ
		|				Т.Ссылка В (&Заказы)
		|				И Т.Статус = &СтатусКПроизводству
		|				И Т.Проведен
		|			УПОРЯДОЧИТЬ ПО
		|				-Т.Приоритет.РеквизитДопУпорядочивания УБЫВ,
		|				Т.Подразделение.РеквизитДопУпорядочивания,
		|				Т.Очередь)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМинимум ТОГДА
		|		Т.ОчередьМинимум / 2
		|	ИНАЧЕ
		|		Т.ОчередьСреднее
		|	КОНЕЦ КАК НомерОчереди
		|
		|ИЗ
		|	(ВЫБРАТЬ
		|		МИНИМУМ(Т.Очередь)  КАК ОчередьМинимум,
		|		СРЕДНЕЕ(Т.Очередь)  КАК ОчередьСреднее,
		|		МАКСИМУМ(Т.Очередь) КАК ОчередьМаксимум
		|	ИЗ
		|		(ВЫБРАТЬ ПЕРВЫЕ 2
		|			ЗаказНаПроизводство.Очередь КАК Очередь
		|
		|		ИЗ
		|			Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
		|
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГраница КАК Граница
		|
		|				ПО ЗаказНаПроизводство.Приоритет        = Граница.Приоритет
		|					И ЗаказНаПроизводство.Подразделение = Граница.Подразделение
		|					И ЗаказНаПроизводство.Статус        = Граница.Статус
		|					И ЗаказНаПроизводство.Очередь      <= Граница.Очередь
		|					И ЗаказНаПроизводство.Проведен
		|	
		|		УПОРЯДОЧИТЬ ПО
		|			Очередь УБЫВ
		|		) КАК Т
		|	) КАК Т
		|
		|ГДЕ
		|	НЕ ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
		|		Т.ОчередьСреднее + 1
		|	ИНАЧЕ
		|		Т.ОчередьСреднее
		|	КОНЕЦ ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("Заказы",              Заказы);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	НомерОчереди = 0;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НомерОчереди = Выборка.НомерОчереди;
		
	КонецЕсли;
	
	Возврат НомерОчереди;

КонецФункции

// Возвращает очередь заказов для планирования по указанный заказ
//
// Параметры:
//  ТекущийЗаказ			 - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ
//  ПодразделениеДиспетчер	 - СправочникСсылка.СтруктураПредприятия - для какого подразделения-диспетчера нужно получить очередь заказов.
//
// Возвращаемое значение:
//   - Массив - очередь планирования.
//
Функция ОчередьПланирования(ТекущийЗаказ, ПодразделениеДиспетчер = Неопределено) Экспорт
	
	Запрос = Новый Запрос( 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНаПроизводство.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
		|		ПО (ТекущийЗаказНаПроизводство.Ссылка = &ТекущийЗаказ)
		|			И (ЗаказНаПроизводство.Проведен)
		|			И (ЗаказНаПроизводство.Статус = &СтатусКПроизводству)
		|			И (НЕ &ЕстьОтборПоПодразделению
		|				ИЛИ &ЕстьОтборПоПодразделению
		|					И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение)
		|			И (ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
		|				ИЛИ НЕ &ЕстьОтборПоПодразделению
		|					И ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
		|					И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания
		|				ИЛИ ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
		|					И (&ЕстьОтборПоПодразделению
		|						ИЛИ НЕ &ЕстьОтборПоПодразделению
		|							И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания)
		|					И ЗаказНаПроизводство.Очередь <= ТекущийЗаказНаПроизводство.Очередь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания,
		|	ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания,
		|	ЗаказНаПроизводство.Очередь");
	
	Запрос.УстановитьПараметр("ТекущийЗаказ", ТекущийЗаказ);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	Запрос.УстановитьПараметр("ПодразделениеДиспетчер", ПодразделениеДиспетчер);
	Запрос.УстановитьПараметр("ЕстьОтборПоПодразделению", ЗначениеЗаполнено(ПодразделениеДиспетчер));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Формирует временную таблицу с заказами, приоритет которых выше чем у заданного заказа.
// Выбираются проведенные документы во всех статусах кроме Завершен/Закрыт.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, в который будет помещена
//		сформированная временная таблица.
//  ИмяВременнойТаблицы	- Строка - имя сформированной временной таблицы.
//  Заказ - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ, относительно которого требуется получить
//		более приоритетные заказы.
//
Процедура СоздатьВТЗаказыСБольшимПриоритетом(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, Заказ) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказНаПроизводство2_2.Приоритет.РеквизитДопУпорядочивания КАК ПриоритетНомер,
	|	ЗаказНаПроизводство2_2.Подразделение.РеквизитДопУпорядочивания КАК ПодразделениеНомер,
	|	ЗаказНаПроизводство2_2.Очередь КАК Очередь
	|ПОМЕСТИТЬ ВТДанныеРаспоряжения
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
	|ГДЕ
	|	ЗаказНаПроизводство2_2.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводство2_2.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаказыСБольшимПриоритетом
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРаспоряжения КАК ВТДанныеРаспоряжения
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗаказНаПроизводство2_2.Проведен
	|	И ЗаказНаПроизводство2_2.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|	И (ЗаказНаПроизводство2_2.Приоритет.РеквизитДопУпорядочивания < ВТДанныеРаспоряжения.ПриоритетНомер
	|			ИЛИ ЗаказНаПроизводство2_2.Приоритет.РеквизитДопУпорядочивания = ВТДанныеРаспоряжения.ПриоритетНомер
	|				И ЗаказНаПроизводство2_2.Подразделение.РеквизитДопУпорядочивания < ВТДанныеРаспоряжения.ПодразделениеНомер
	|			ИЛИ ЗаказНаПроизводство2_2.Приоритет.РеквизитДопУпорядочивания = ВТДанныеРаспоряжения.ПриоритетНомер
	|				И ЗаказНаПроизводство2_2.Подразделение.РеквизитДопУпорядочивания = ВТДанныеРаспоряжения.ПодразделениеНомер
	|				И ЗаказНаПроизводство2_2.Очередь < ВТДанныеРаспоряжения.Очередь)
	//++ Устарело_Производство21
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПроизводство.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРаспоряжения КАК ВТДанныеРаспоряжения
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗаказНаПроизводство.Проведен
	|	И ЗаказНаПроизводство.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|	И (ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания < ВТДанныеРаспоряжения.ПриоритетНомер
	|			ИЛИ ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ВТДанныеРаспоряжения.ПриоритетНомер
	|				И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания <= ВТДанныеРаспоряжения.ПодразделениеНомер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	//-- Устарело_Производство21
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЗаказыСБольшимПриоритетом", ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет наличие конфликтов в очереди заказов, когда заказ обеспечен ожидаемыеми поступлениями 
// менее приоритетного заказа.
//
// Возвращаемое значение:
//  Булево - Истина, если конфликты есть, Ложь - если конфликтов нет.
//
Функция ЕстьКонфликтыВОчереди() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|ГДЕ
		|	РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)
		|	И РаспределениеЗапасов.ЗаказНаОтгрузку ССЫЛКА Документ.ЭтапПроизводства2_2
		|	И РаспределениеЗапасов.ЗаказНаПоступление ССЫЛКА Документ.ЭтапПроизводства2_2
		|	И ИСТИНА В (
		|			ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2 КАК ЗаказНаПоступление
		|					ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЗаказНаОтгрузку
		|					ПО ИСТИНА
		|			ГДЕ
		|				ЗаказНаПоступление.Ссылка = РаспределениеЗапасов.ЗаказНаПоступление
		|				И ЗаказНаПоступление.Распоряжение.Проведен
		|				И ЗаказНаПоступление.Распоряжение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)
		|				И ЗаказНаОтгрузку.Ссылка = РаспределениеЗапасов.ЗаказНаОтгрузку
		|				И ЗаказНаОтгрузку.Распоряжение.Проведен
		|				И ЗаказНаОтгрузку.Распоряжение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)
		|				И (
		|					ЗаказНаПоступление.Распоряжение.Приоритет.РеквизитДопУпорядочивания > ЗаказНаОтгрузку.Распоряжение.Приоритет.РеквизитДопУпорядочивания
		|					ИЛИ ЗаказНаПоступление.Распоряжение.Приоритет.РеквизитДопУпорядочивания = ЗаказНаОтгрузку.Распоряжение.Приоритет.РеквизитДопУпорядочивания
		|						И ЗаказНаПоступление.Распоряжение.Подразделение.РеквизитДопУпорядочивания > ЗаказНаОтгрузку.Распоряжение.Подразделение.РеквизитДопУпорядочивания
		|					ИЛИ ЗаказНаПоступление.Распоряжение.Приоритет.РеквизитДопУпорядочивания = ЗаказНаОтгрузку.Распоряжение.Приоритет.РеквизитДопУпорядочивания
		|						И ЗаказНаПоступление.Распоряжение.Подразделение.РеквизитДопУпорядочивания = ЗаказНаОтгрузку.Распоряжение.Подразделение.РеквизитДопУпорядочивания
		|						И ЗаказНаПоступление.Распоряжение.Очередь > ЗаказНаОтгрузку.Распоряжение.Очередь))");
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// При обнаружении заказа, который обеспечивается заказом с меньшим приоритетом, изменяет приоритеты заказов.
//
// Параметры:
//  Заказ - ДокументСсылка.ЗаказНаПроизводство2_2 - проблемный заказ.
//  Отказ - Булево - возвращаемый параметр, истина, если не удается устранить конфликт.
//
Процедура УстранитьКонфликтыВОчереди(Заказ, Отказ) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫРАЗИТЬ(РаспределениеЗапасов.ЗаказНаОтгрузку КАК Документ.ЭтапПроизводства2_2).Распоряжение               КАК НоваяПозиция,
		|	ВЫРАЗИТЬ(РаспределениеЗапасов.ЗаказНаОтгрузку КАК Документ.ЭтапПроизводства2_2).Распоряжение.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|ГДЕ
		|	РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)
		|	И РаспределениеЗапасов.ЗаказНаОтгрузку ССЫЛКА Документ.ЭтапПроизводства2_2
		|	И РаспределениеЗапасов.ЗаказНаПоступление ССЫЛКА Документ.ЭтапПроизводства2_2
		|	И ИСТИНА В (
		|			ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2 КАК ЗаказНаПоступление
		|					ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЗаказНаОтгрузку
		|					ПО ИСТИНА
		|			ГДЕ
		|				ЗаказНаПоступление.Ссылка = РаспределениеЗапасов.ЗаказНаПоступление
		|				И ЗаказНаПоступление.Распоряжение.Проведен
		|				И ЗаказНаПоступление.Распоряжение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)
		|				И ЗаказНаОтгрузку.Ссылка = РаспределениеЗапасов.ЗаказНаОтгрузку
		|				И ЗаказНаОтгрузку.Распоряжение.Проведен
		|				И ЗаказНаОтгрузку.Распоряжение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)
		|				И (
		|					ЗаказНаПоступление.Распоряжение.Приоритет.РеквизитДопУпорядочивания > ЗаказНаОтгрузку.Распоряжение.Приоритет.РеквизитДопУпорядочивания
		|					ИЛИ ЗаказНаПоступление.Распоряжение.Приоритет.РеквизитДопУпорядочивания = ЗаказНаОтгрузку.Распоряжение.Приоритет.РеквизитДопУпорядочивания
		|						И ЗаказНаПоступление.Распоряжение.Подразделение.РеквизитДопУпорядочивания > ЗаказНаОтгрузку.Распоряжение.Подразделение.РеквизитДопУпорядочивания
		|					ИЛИ ЗаказНаПоступление.Распоряжение.Приоритет.РеквизитДопУпорядочивания = ЗаказНаОтгрузку.Распоряжение.Приоритет.РеквизитДопУпорядочивания
		|						И ЗаказНаПоступление.Распоряжение.Подразделение.РеквизитДопУпорядочивания = ЗаказНаОтгрузку.Распоряжение.Подразделение.РеквизитДопУпорядочивания
		|						И ЗаказНаПоступление.Распоряжение.Очередь > ЗаказНаОтгрузку.Распоряжение.Очередь))
		|	И ВЫРАЗИТЬ(РаспределениеЗапасов.ЗаказНаПоступление КАК Документ.ЭтапПроизводства2_2).Распоряжение = &Заказ
		|	И ВЫРАЗИТЬ(РаспределениеЗапасов.ЗаказНаОтгрузку КАК Документ.ЭтапПроизводства2_2).Распоряжение.Проведен
		|	И ВЫРАЗИТЬ(РаспределениеЗапасов.ЗаказНаОтгрузку КАК Документ.ЭтапПроизводства2_2).Распоряжение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫРАЗИТЬ(РаспределениеЗапасов.ЗаказНаОтгрузку КАК Документ.ЭтапПроизводства2_2).Распоряжение.Приоритет.РеквизитДопУпорядочивания,
		|	ВЫРАЗИТЬ(РаспределениеЗапасов.ЗаказНаОтгрузку КАК Документ.ЭтапПроизводства2_2).Распоряжение.Подразделение.РеквизитДопУпорядочивания,
		|	ВЫРАЗИТЬ(РаспределениеЗапасов.ЗаказНаОтгрузку КАК Документ.ЭтапПроизводства2_2).Распоряжение.Очередь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	ВыборкаНоваяПозиция = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаНоваяПозиция.Следующий() Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Подразделение") = ВыборкаНоваяПозиция.Подразделение Тогда
			ВставитьДокументВОчередь(Заказ, ВыборкаНоваяПозиция.НоваяПозиция);
		Иначе
			
			// Обеспечиваемый заказ принадлежит другому подразделению диспетчеру
			Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Т.Ссылка      КАК Ссылка,
				|	Т.Приоритет   КАК Приоритет,
				|	Т.Очередь + 1 КАК Очередь
				|ИЗ
				|	(ВЫБРАТЬ
				|		ЗаказНаПроизводство.Ссылка                              КАК Ссылка,
				|		ЗаказНаПроизводство.Приоритет                           КАК Приоритет,
				|		ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания КАК ПриоритетПорядок,
				|		ЗаказНаПроизводство.Очередь                             КАК Очередь
				|	ИЗ
				|		Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПоступление
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаОтгрузку
				|			ПО ИСТИНА
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
				|			ПО ЗаказНаПроизводство.Подразделение = ЗаказНаПоступление.Подразделение
				|				И ЗаказНаПроизводство.Приоритет = ЗаказНаОтгрузку.Приоритет
				|				И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания < ЗаказНаОтгрузку.Подразделение.РеквизитДопУпорядочивания
				|	ГДЕ
				|		ЗаказНаПоступление.Ссылка = &Заказ
				|		И ЗаказНаОтгрузку.Ссылка = &НоваяПозиция
				|		И ЗаказНаПроизводство.Статус = &СтатусКПроизводству
				|		И ЗаказНаПроизводство.Проведен
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ЗаказНаПроизводство.Ссылка                              КАК Ссылка,
				|		ЗаказНаПроизводство.Приоритет                           КАК Приоритет,
				|		ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания КАК ПриоритетПорядок,
				|		ЗаказНаПроизводство.Очередь                             КАК Очередь
				|	ИЗ
				|		Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПоступление
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаОтгрузку
				|			ПО ИСТИНА
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
				|			ПО ЗаказНаПроизводство.Подразделение = ЗаказНаПоступление.Подразделение
				|				И ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания < ЗаказНаОтгрузку.Приоритет.РеквизитДопУпорядочивания
				|	ГДЕ
				|		ЗаказНаПоступление.Ссылка = &Заказ
				|		И ЗаказНаОтгрузку.Ссылка = &НоваяПозиция
				|		И ЗаказНаПроизводство.Статус = &СтатусКПроизводству
				|		И ЗаказНаПроизводство.Проведен) КАК Т
				|ГДЕ
				|	НЕ Т.Ссылка ЕСТЬ NULL
				|
				|УПОРЯДОЧИТЬ ПО
				|	Т.ПриоритетПорядок УБЫВ,
				|	Т.Очередь УБЫВ";
			Запрос.УстановитьПараметр("Заказ", Заказ);
			Запрос.УстановитьПараметр("НоваяПозиция", ВыборкаНоваяПозиция.НоваяПозиция);
			Запрос.УстановитьПараметр("СтатусКПроизводству", Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству);
			
			ВыборкаОчередь = Запрос.Выполнить().Выбрать();
			Если ВыборкаОчередь.Следующий() Тогда
				
				Попытка
					
					ЗаблокироватьДанныеДляРедактирования(Заказ);
					
					ЗаказОбъект = Заказ.ПолучитьОбъект();
					ПриоритетИзменен = ЗаказОбъект.Приоритет <> ВыборкаОчередь.Приоритет;
					ЗаполнитьЗначенияСвойств(ЗаказОбъект, ВыборкаОчередь, "Приоритет, Очередь");
					ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					Если ПриоритетИзменен Тогда
						ПриИзмененииПриоритета(Заказ);
					КонецЕсли;
					
				Исключение
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось записать %1. %2';
												|en = 'Cannot save %1. %2'"),
						Заказ,
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Заказ,,, Отказ);
				КонецПопытки;
				
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не удалось выполнить действие. Обеспечиваемый заказ принадлежит более приоритетному подразделению-диспетчеру.';
						|en = 'Cannot complete action. The order being supplied belongs to the higher priority dispatcher business unit.'"),
					ВыборкаНоваяПозиция.НоваяПозиция,,,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СхемыОбособления

// Создает временную таблицу схем обособления продукции в производстве
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц
//  Распоряжения			 - Массив					 - список заказов на производство.
//
Процедура СоздатьВтСхемыОбособленияВПроизводстве(МенеджерВременныхТаблиц, Распоряжения) Экспорт
	
	ТекстЗапроса = ТекстЗапросаСхемыОбособленияПоРаспоряжению(Истина);
	ТекстЗапроса = ТекстЗапроса + " ИНДЕКСИРОВАТЬ ПО Распоряжение, Назначение ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
КонецПроцедуры

// Получает схемы обособления продукции заказа на производство
//
// Параметры:
//  Распоряжения - Массив	 - список заказов на производство.
//
// Возвращаемое значение:
//   Соответствие из КлючИЗначение:
//    * Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//    * Назначение   - СправочникСсылка.Назначения - назначение продукции заказа на производство.
//
//    * Обособленно - Булево - Истина, если производственный процесс должен быть разделен по назначениям.
//
//    * НазначениеПродукция - СправочникСсылка.Назначения - разделитель учета (целевое назначение продукции)
//    * НазначениеМатериалы - СправочникСсылка.Назначения - назначение обособленного обеспечения этапов материалами и работами.
//
Функция СхемыОбособленияЗаказов(Распоряжения) Экспорт
	
	ТекстЗапроса = ТекстЗапросаСхемыОбособленияПоРаспоряжению();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	СхемыОбособления = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если СхемыОбособления[Выборка.Распоряжение] = Неопределено Тогда
			СхемыОбособления.Вставить(Выборка.Распоряжение, Новый Соответствие);
		КонецЕсли;
		
		СхемыОбособления[Выборка.Распоряжение].Вставить(Выборка.Назначение, СоздатьСхемуОбособления(Выборка));
		
	КонецЦикла;
	
	Возврат СхемыОбособления;
	
КонецФункции

// Получает схему обособления продукции заказа на производство
//
// Параметры:
//  Распоряжение		 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  НазначениеПродукция	 - СправочникСсылка.Назначения			 - назначение продукции заказа на производство.
//
// Возвращаемое значение:
//  см. СоздатьСхемуОбособления
//
Функция СхемаОбособления(Распоряжение, НазначениеПродукция) Экспорт
	
	ТекстЗапроса = ТекстЗапросаСхемыОбособленияПоНазначению();
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("Назначение",   НазначениеПродукция);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка.Следующий();
	
	СхемаОбособления = СоздатьСхемуОбособления(Выборка);
	Возврат СхемаОбособления;
	
КонецФункции

#КонецОбласти

#Область ЗаменаСпецификаций

// Выполняет замену спецификаций в заказах на производство.
//  - не поддерживается замена спецификаций для полуфабрикатов производимых в процессе.
//
// Параметры:
//  ДанныеЗамены - см. ДанныеЗаменыСпецификаций
//
// Возвращаемое значение:
//   Структура - результат замены:
//    * ЕстьОшибки     - Булево -
//    * ВсегоЗамен     - Число -
//    * ВыполненоЗамен - Число -
//
Функция ЗаменитьСпецификацииБезКонтроля(ДанныеЗамены) Экспорт
	
	ВыполненоЗамен = 0;
	ВсегоЗамен = ДанныеЗамены.Количество();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|
	|	Замены.Номенклатура        КАК Номенклатура,
	|	Замены.Характеристика      КАК Характеристика,
	|	Замены.Склад               КАК Склад,
	|	Замены.Назначение          КАК Назначение,
	|	Замены.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Замены.Спецификация        КАК Спецификация
	|
	|ПОМЕСТИТЬ ДанныеЗамены
	|ИЗ 
	|	&ДанныеЗамены КАК Замены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|
	|	ЗаказНаПроизводство,
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение
	|;
	|
	|ВЫБРАТЬ
	|
	|	Замены.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|
	|	Замены.Номенклатура        КАК Номенклатура,
	|	Замены.Характеристика      КАК Характеристика,
	|	Замены.Склад               КАК Склад,
	|	Замены.Назначение          КАК Назначение,
	|
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЗаказНаПроизводство2_2.Продукция КАК ДД
	|			ГДЕ
	|				ДД.Ссылка           = Замены.ЗаказНаПроизводство
	|				И ДД.Номенклатура   = Замены.Номенклатура
	|				И ДД.Характеристика = Замены.Характеристика
	|				И ДД.Склад          = Замены.Склад
	|				И ДД.Назначение     = Замены.Назначение
	|				И НЕ ДД.Отменено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПродукция,
	|
	|	Замены.Спецификация        КАК Спецификация
	|
	|ИЗ
	|	ДанныеЗамены КАК Замены
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаПроизводство
	|");
	Запрос.УстановитьПараметр("ДанныеЗамены", ДанныеЗамены);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ГруппыСтрок = Новый Структура("Продукция, Полуфабрикаты", ДанныеЗаменыСпецификаций(), ДанныеЗаменыСпецификаций());
	
	ЕстьЗаписиВВыборке = Выборка.Следующий();
	Пока ЕстьЗаписиВВыборке Цикл
		
		ЗаказНаПроизводство = Выборка.ЗаказНаПроизводство;
		
		Пока ЕстьЗаписиВВыборке И ЗаказНаПроизводство = Выборка.ЗаказНаПроизводство Цикл
			
			ЗаполнитьЗначенияСвойств(?(Выборка.ЭтоПродукция, ГруппыСтрок.Продукция, ГруппыСтрок.Полуфабрикаты).Добавить(), Выборка);
			ЕстьЗаписиВВыборке = Выборка.Следующий();
			
		КонецЦикла;
		
		Если ГруппыСтрок.Полуфабрикаты.Количество() > 0 Тогда
			
			ВыполненоЗамен = ВыполненоЗамен + СтруктураЗаказаСлужебный.ЗаменитьСпецификации(ГруппыСтрок.Полуфабрикаты);
			ГруппыСтрок.Полуфабрикаты.Очистить();
			
		КонецЕсли;
		
		Если ГруппыСтрок.Продукция.Количество() > 0 Тогда
			
			ВыполненоЗамен = ВыполненоЗамен + ЗаменитьСпецификацииПродукции(ЗаказНаПроизводство, ГруппыСтрок.Продукция);
			ГруппыСтрок.Продукция.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыполненоЗамен > 0
		И ПолучитьФункциональнуюОпцию("ДинамическаяСтруктураЗаказовНаПроизводство") Тогда
		СтруктураЗаказа.ЗапуститьРасчет();
	КонецЕсли;
	
	Результат = Новый Структура("ЕстьОшибки, ВсегоЗамен, ВыполненоЗамен", ВыполненоЗамен <> ВсегоЗамен, ВсегоЗамен, ВыполненоЗамен);
	
	Возврат Результат;
	
КонецФункции

// Выполняет замену спецификаций для продукции в заказе на производство.
//
// Параметры:
// 
//  ЗаказНаПроизводство - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  ДанныеЗамены - 	Массив, ТаблицаЗначений - Описание:
//    * Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
//    * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика.
//    * Склад - СправочникСсылка.Склады - склад.
//    * Назначение - СправочникСсылка.Назначения - назначение.
//    * Спецификация - СправочникСсылка.РесурсныеСпецификации - новая спецификация.
//
// Возвращаемое значение:
//   Число - количество выполненных замены.
Функция ЗаменитьСпецификацииПродукции(ЗаказНаПроизводство, ДанныеЗамены) Экспорт
	
	СтруктураЗамены = Новый Структура("Номенклатура,Характеристика,Склад,Назначение");
	
	ЗаменВыполнено = 0;
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(ЗаказНаПроизводство);
		
		ЗаказОбъект = ЗаказНаПроизводство.ПолучитьОбъект();
		
		Если ЗаказОбъект = Неопределено Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Заказ %1 не найден.';
											|en = 'The %1 order is not found.'"), ЗаказНаПроизводство);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ЗаказИзменен = Ложь;
		
		Для каждого Замена Из ДанныеЗамены Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураЗамены, Замена);
			
			НайденныеСтроки = ЗаказОбъект.Продукция.НайтиСтроки(СтруктураЗамены);
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если НайденнаяСтрока.Спецификация = Замена.Спецификация Тогда
					Продолжить;
				КонецЕсли;
				
				НайденнаяСтрока.Спецификация = Замена.Спецификация;
				
				ЗаказИзменен = Истина;
				
			КонецЦикла;
			
			ЗаменВыполнено = ЗаменВыполнено + 1;
			
		КонецЦикла;
		
		ЗаменаЗавершена = Ложь;
		
		Если Не ЗаказИзменен Тогда
			
			ЗаменаЗавершена = Истина;
			
		Иначе
			
			Если ЗаказОбъект.ПроверитьЗаполнение() Тогда
				
				Если ЗаказОбъект.Проведен Тогда
					ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				
				ЗаменаЗавершена = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗаменаЗавершена Тогда
			ТекстСообщения = НСтр("ru = 'При проверке заполнения были найдены ошибки.';
									|en = 'Errors were found while checking the filling.'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеЗаменаСпецификаций();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заменить спецификации в заказе на производство: %1 по причине: %2';
										|en = 'Cannot replace the bills of materials in the production order: %1 due to: %2'"),
							ЗаказНаПроизводство,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, ЗаказНаПроизводство.Метаданные(), ЗаказНаПроизводство, ТекстСообщения);
		
		ЗаменВыполнено = 0;
		
	КонецПопытки;
	
	Возврат ЗаменВыполнено;
	
КонецФункции

// Конструктор структуры данных для выполнения замены спецификаций
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ЗаказНаПроизводство - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство.
// * Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика.
// * Склад - СправочникСсылка.Склады - склад.
// * Назначение - СправочникСсылка.Назначения - назначение.
// * Спецификация - СправочникСсылка.РесурсныеСпецификации - новая спецификация.
Функция ДанныеЗаменыСпецификаций() Экспорт
	
	Результат = Новый ТаблицаЗначений();
	
	Результат.Колонки.Добавить("ЗаказНаПроизводство", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
	
	// аналитика номенклатуры
	
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Результат.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	
	// новая спецификация
	
	Результат.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УправлениеЭтапами

// Функция проверяет, требуется ли уточнить этапы для заказов
//
// Параметры:
//  Заказы - ДокументСсылка.ЗаказНаПроизводство2_2, Массив - Заказы на производство.
//
// Возвращаемое значение:
//  Булево - Истина - требуется уточнить этапы.
//
Функция ТребуетсяУточнитьЭтапы(Заказы) Экспорт
	
	Возврат Документы.ЭтапПроизводства2_2.ТребуетсяУточнитьЭтапы(Заказы);
	
КонецФункции

// Функция проверяет, требуется ли сформировать этапы по спецификации для заказов на производство
//
// Параметры:
//  Распоряжения - Массив	 - Заказы на производство.
//
// Возвращаемое значение:
//  Булево - Истина - требуется сформировать этапы.
//
Функция ТребуетсяСформироватьЭтапыПоСпецификации(Распоряжения) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВтДанныеДляФормированияЭтапов(МенеджерВременныхТаблиц, Распоряжения);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Заказы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|ГДЕ
	|	Заказы.Ссылка В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				Таблица.Распоряжение
	|			ИЗ
	|				ВтДанныеДляФормированияЭтапов КАК Таблица
	|			ГДЕ
	|				Таблица.Распоряжение = Заказы.Ссылка
	|				И Таблица.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				И Таблица.Количество > 0)
	|	И Заказы.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству))
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область СтатусДокумента

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(НовыйСтатус) = Тип("Строка") Тогда
		ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовНаПроизводство2_2[НовыйСтатус];
	Иначе
		ЗначениеНовогоСтатуса = НовыйСтатус;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		КонтролироватьВыполнениеЗаказов = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПроизводствоБезПолнойОтработки");
	Иначе
		КонтролироватьВыполнениеЗаказов = Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением,
	|	&КонтрольЗакрытияЗаказа КАК ЕстьОстаткиПоЗаказу,
	|	&КонтрольОтнесенияЗатрат КАК ЕстьЗатратыПослеВыпуска
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ТаблицаДокументов,
	|	&СоединениеКонтрольЗакрытияЗаказа,
	|	&СоединениеКонтрольОтнесенияЗатрат
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивСсылок)
	|";
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокументов.ДатаПотребности
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ТаблицаДокументов,", "КАК ТаблицаДокументов");
	
	ВыполнитьПодстановкуТекстЗапросаКонтрольЗакрытияЗаказа(ТекстЗапроса, КонтролироватьВыполнениеЗаказов);
	ВыполнитьПодстановкуТекстЗапросаКонтрольОтнесенияЗатрат(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ДопустимоеОтклонение = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ДопустимоеОтклонение);
	
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивСсылок", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - ПеречислениеСсылка.СтатусыЗаказовНаПроизводство2_2 - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если Не ДополнительныеПараметры = Неопределено
		И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа")
		И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ отработан не полностью';
							|en = 'The ""%Статус%"" status of the %Документ% document is not set as the order is not fully processed'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ВыборкаПроверки.ЕстьЗатратыПослеВыпуска Тогда
		
		ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к. есть затраты, для которых нет выпуска продукции позже их отнесения.';
							|en = '%Документ% status is not set in the %Статус% document, as there are costs for which there is no product release after their allocation.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти

#Область Представление

// Формирует представление заказа на производство.
// Формат: "Заказ № %1 от %2".
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  Префикс	 - Строка								 - префикс.
//  РеквизитыЗаказа	 - Структура					 - номер и дата заказа.
//
// Возвращаемое значение:
//  Строка - представление заказа на производство.
//
Функция ПредставлениеЗаказа(Ссылка, Знач Префикс = Неопределено, Знач РеквизитыЗаказа = Неопределено) Экспорт
	
	ШаблонПрефикс = ?(Префикс <> Неопределено, Префикс, НСтр("ru = 'Заказ';
															|en = 'Order'"));
	Шаблон = ШаблонПрефикс + ?(ПустаяСтрока(ШаблонПрефикс),""," ") + НСтр("ru = '№ %1 от %2';
																			|en = 'No. %1 from %2'");
	
	Если РеквизитыЗаказа = Неопределено Тогда
		РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Номер,Дата");
	КонецЕсли;

	НомерЗаказа = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыЗаказа.Номер, Ложь, Истина);
	НомерЗаказа = СокрЛП(НомерЗаказа);
	
	ДатаЗаказа  = Формат(РеквизитыЗаказа.Дата, "ДЛФ=D");
	
	Возврат СтрШаблон(Шаблон, НомерЗаказа, ДатаЗаказа);
	
КонецФункции

// Формирует полное представление заказа на производство.
// Формат: "Заказ № %1 от %2, дата потребности %3".
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  Префикс	 - Строка								 - префикс.
//
// Возвращаемое значение:
//  Строка - полное представление заказа на производство.
//
Функция ПолноеПредставлениеЗаказа(Ссылка, Префикс = Неопределено) Экспорт
	
	ШаблонПрефикс = ?(Префикс <> Неопределено, Префикс, НСтр("ru = 'Заказ';
															|en = 'Order'"));
	Шаблон = ШаблонПрефикс + ?(ПустаяСтрока(ШаблонПрефикс),""," ") + НСтр("ru = '№ %1 от %2, дата потребности %3';
																			|en = 'No. %1, %2, demand date %3'");
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,"Номер,Дата,ДатаПотребности");
	
	НомерЗаказа = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыЗаказа.Номер, Ложь, Истина);
	НомерЗаказа = СокрЛП(НомерЗаказа);
	
	ДатаЗаказа      = Формат(РеквизитыЗаказа.Дата, "ДЛФ=D");
	ДатаПотребности = Формат(РеквизитыЗаказа.ДатаПотребности, "ДЛФ=D");
	
	Возврат СтрШаблон(Шаблон, НомерЗаказа, ДатаЗаказа, ДатаПотребности);
	
КонецФункции

#КонецОбласти

#Область Прочее

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - Структура - описание реквизитов, для которых необходимо получить значения по статистике
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов,
		"РазмещениеВыпуска", Параметры);
	
КонецПроцедуры

// Формирует представление объекта метаданных на основном языке.
// Возвращаемое значение:
// Строка - Представление объекта метаданных на основном языке.
//
Функция ПредставлениеОбъектаНаОсновномЯзыке() Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ПредставлениеОбъекта = НСтр(
		"ru = 'Заказ на производство';
		|en = 'Production order'",
		КодОсновногоЯзыка);
		
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Номер");
	Результат.Добавить("Подразделение");
	Результат.Добавить("ТипПроизводственногоПроцесса");
	
	Результат.Добавить("Организация");
	Результат.Добавить("ЗаказПодДеятельность");
	Результат.Добавить("НаправлениеДеятельности");
	
	Результат.Добавить("НазначениеПродукция");
	
	Результат.Добавить("ХозяйственнаяОперация");
	Результат.Добавить("Партнер");
	Результат.Добавить("Договор");
	
	Результат.Добавить("СпособРаспределенияЗатратНаВыходныеИзделия");
	
	Результат.Добавить("УкрупненныйЗаказПоНазначениямПродукции");
	
	Возврат Результат;
	
КонецФункции

// Определяет есть ли право доступа на добавление документа
//
// Возвращаемое значение:
//   - Булево - Истина, если есть право доступа на добавление.
//
Функция ПравоДоступаДобавление() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПроизводство2_2);
	
КонецФункции

// Определяет есть ли право доступа на изменение документа
//
// Возвращаемое значение:
//   - Булево - Истина, если есть право доступа на изменение.
//
Функция ПравоДоступаИзменение() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаПроизводство2_2);
	
КонецФункции

// Определяет наличие права доступа "УправлениеОчередьюЗаказовНаПроизводство" для текущего пользователя.
//
// Возвращаемое значение:
//   - Булево - Истина, если управление очередью доступно.
//
Функция ДоступноУправлениеОчередью() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.УправлениеОчередьюЗаказовНаПроизводство);
	
КонецФункции

// Функция проверяет, запланированы ли этапы заказа на производство
//
// Параметры:
//  Ссылка - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство.
//
// Возвращаемое значение:
//  Булево - Истина, если заказ запланирован.
//
Функция ЗаказЗапланирован(Ссылка) Экспорт
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	Возврат ЗаказыЗапланированы(МассивСсылок)[Ссылка];
	
КонецФункции

// Функция проверяет, запланированы ли этапы заказов на производство
//
// Параметры:
//  МассивСсылок - Массив - заказы на производство.
//
// Возвращаемое значение:
//  Соответствие - соответствие состояния заказов.
//
Функция ЗаказыЗапланированы(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказыНаПроизводство.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Документ.ЭтапПроизводства2_2 КАК Этапы
	|				ГДЕ
	|					Этапы.Распоряжение = ЗаказыНаПроизводство.Ссылка
	|					И Этапы.Проведен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Запланирован
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказыНаПроизводство
	|ГДЕ
	|	ЗаказыНаПроизводство.Ссылка В (&МассивСсылок)");
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Соответствие;

	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Ссылка, Выборка.Запланирован);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция рассчитывает количество заказов на производство по структуре отбора
//
// Параметры:
//  СтруктураОтборов - Структура - Структура отборов
//   *Статус
//   *Подразделение
//   *Приоритет
//   *Ответственный.
//
// Возвращаемое значение:
//   - Число - Количество заказов в определенном статусе.
//
Функция КоличествоЗаказов(СтруктураОтборов = Неопределено) Экспорт
	
	КоличествоЗаказов = 0;
	
	Запрос = Новый Запрос;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса("
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Заказы.Ссылка) КАК Количество
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
		|ГДЕ
		|	Заказы.Проведен");
		
	ОператорВыбораЗаказов = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	
	Если СтруктураОтборов.Свойство("Статус") Тогда
		
		Запрос.УстановитьПараметр("Статус", СтруктураОтборов.Статус);
		ОператорВыбораЗаказов.Отбор.Добавить("Статус = &Статус");
		
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Подразделение") Тогда
		
		Запрос.УстановитьПараметр("Подразделение", СтруктураОтборов.Подразделение);
		ОператорВыбораЗаказов.Отбор.Добавить("Подразделение = &Подразделение");
		
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Приоритет") Тогда
		
		Запрос.УстановитьПараметр("Приоритет", СтруктураОтборов.Приоритет);
		ОператорВыбораЗаказов.Отбор.Добавить("Приоритет = &Приоритет");
		
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Ответственный") Тогда
		
		Запрос.УстановитьПараметр("Ответственный", СтруктураОтборов.Ответственный);
		ОператорВыбораЗаказов.Отбор.Добавить("Ответственный = &Ответственный");
		
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		КоличествоЗаказов = Выборка.Количество;
		
	КонецЕсли;
	
	Возврат КоличествоЗаказов;
	
КонецФункции

// Формирует массив заказов на производство подходящих под параметры поиска
//
// Параметры:
//  Текст	 - Строка	 - текст поиска.
//  СтруктураОтбора - Структура
//
// Возвращаемое значение:
//  Массив - массив, содержащий заказы на производство.
//
Функция АвтоПодборЗаказовНаПроизводство(Текст, СтруктураОтбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 7
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|	И Таблица.Номер ПОДОБНО &Текст
	|	И &Отбор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.Дата УБЫВ, Таблица.Ссылка");
	Запрос.УстановитьПараметр("Текст", "%" + Текст + "%");
	
	ТекстОтбора = "";
	Если ЗначениеЗаполнено(СтруктураОтбора) Тогда
		Для каждого КлючИЗначение Из СтруктураОтбора Цикл
			ТекстОтбора = ТекстОтбора
						  + ?(ЗначениеЗаполнено(ТекстОтбора), "И ", "")
						  + "Таблица."+КлючИЗначение.Ключ + " В (&"+КлючИЗначение.Ключ + ") ";
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", ?(ЗначениеЗаполнено(ТекстОтбора), ТекстОтбора, "ИСТИНА"));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
//  Возвращаемое значение:
//  См. Справочники.Назначения.МакетФормыВыбораНазначений
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Собственное);
	
	//++ Устарело_Переработка24
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.Продукция.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеПродукция22);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалы22);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
	//-- Устарело_Переработка24
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.Продукция.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Давальческое2_5);
	
	//++ Устарело_Переработка24
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.НазначениеПродукция");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеПродукция22);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалы22);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
	//-- Устарело_Переработка24
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.НазначениеПродукция");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Давальческое2_5);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
	
	// Потребности в продукции на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Продукция.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Продукция.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Продукция.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Продукция.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Продукция.Склад";
	
	// Потребности в производимых работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "Объект.Продукция.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Продукция.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Продукция.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Продукция.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "Объект.Продукция.Подразделение";
	
	// Потребности в продукции на всех складах.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовВсеСклады", Истина, "Объект.Продукция.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Продукция.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Продукция.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Продукция.Характеристика";
	
	// Все назначения для поля НазначениеПродукция в шапке документа.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ВсеНазначения", Ложь, "Объект.НазначениеПродукция");
	
	Возврат МакетФормы;
	
КонецФункции

// Возвращает параметры выбора спецификаций для изделий, указанных в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров выбора спецификаций.
//
// Возвращаемое значение:
//   Структура - Структура, переопределяющая умолчания, заданные в функции УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций().
//
Функция ПараметрыВыбораСпецификаций(Объект) Экспорт
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификаций.ДоступныеТипы.Добавить(Объект.ТипПроизводственногоПроцесса);
	ПараметрыВыбораСпецификаций.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыВыбораСпецификаций.ДоступныСпецификацииНаПобочныйВыход = Истина;
	
	СвязиПараметровВыбора = Новый Структура(УправлениеДаннымиОбИзделияхКлиентСервер.ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
	
	СвязиПараметровВыбора.Номенклатура            = "Объект.Продукция.Номенклатура";
	СвязиПараметровВыбора.Характеристика          = "Объект.Продукция.Характеристика";
	СвязиПараметровВыбора.НачалоПроизводства      = "Объект.НачатьНеРанее";
	СвязиПараметровВыбора.ПодразделениеДиспетчер  = "Объект.Подразделение";
	СвязиПараметровВыбора.НаправлениеДеятельности = "Объект.НаправлениеДеятельности";
	
	ПараметрыВыбораСпецификаций.СвязиПараметровВыбора.Вставить("Объект.Продукция.Спецификация", СвязиПараметровВыбора);
	
	Возврат ПараметрыВыбораСпецификаций;
	
КонецФункции

// Имена реквизитов, от значений которых зависят параметры выбора спецификаций
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций() Экспорт
	
	ИменаРеквизитов = "ТипПроизводственногоПроцесса";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Инициализирует параметры заполнения вида деятельности НДС.
//
// Параметры:
//  Объект	 - ДокументОбъект.ЗаказНаПроизводство2_2, ДанныеФормыСтруктура	 - документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  См. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС
//
Функция ПараметрыЗаполненияВидаДеятельностиНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ПараметрыЗаполнения.Организация             = Объект.Организация;
	ПараметрыЗаполнения.Дата                    = Объект.Дата;
	ПараметрыЗаполнения.Склад                   = Неопределено;
	ПараметрыЗаполнения.Договор                 = Неопределено;
	ПараметрыЗаполнения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	
	ПараметрыЗаполнения.ВыпускПродукцииИРабот = Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Возвращает параметры распределения затрат на выходные изделия.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров распределения затрат.
//
// Возвращаемое значение:
//  Структура - параметры, уточняющие особенности распределения затрат на выходные изделия.
//
Функция ПараметрыРаспределенияЗатрат(Объект) Экспорт
	
	ПараметрыРаспределенияЗатрат = ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия("Продукция", Объект.СпособРаспределенияЗатратНаВыходныеИзделия);
	
	ПараметрыРаспределенияЗатрат.ЕстьПолеОтменено = Истина;
	
	ПараметрыРаспределенияЗатрат.РассчитыватьПолеДоляСтоимостиПроцент = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакЕстьОшибкиЗаполнения = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакДоляСтоимостиОбязательна = Истина;
	ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Дата = 
								?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Дата"), 
								Объект.Дата, 
								Дата("00010101"));
	ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Валюта = 
								?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Валюта"), 
								Объект.Валюта, 
								Справочники.Валюты.ПустаяСсылка());
	
	Возврат ПараметрыРаспределенияЗатрат;
	
КонецФункции

// Возвращает параметры выбора статей в документе.
// 
// Возвращаемое значение:
//  Массив, Структура - См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики
//
Функция ПараметрыВыбораСтатейИАналитик(Объект) Экспорт
	
	ПараметрыВыбораСтатейИАналитик = Новый Массив;
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	
	ПараметрыВыбора.ПутьКДанным         = "Объект.Продукция";
	ПараметрыВыбора.Статья              = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи           = "ТипСтатьи";
	ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	
	ПараметрыВыбора.ДоступностьПоОперации = НЕ
		(Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка
			//++ Устарело_Переработка24
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
			//-- Устарело_Переработка24
			ИЛИ Объект.ХозяйственнаяОперация = ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора()
			ИЛИ Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт);
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов   = "АналитикаРасходов";
	УправлениеПроизводством.ЗаполнитьОтборСтатейРасходов(ПараметрыВыбора.ОтборСтатейРасходов);
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов   = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ПродукцияСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ПродукцияАналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("ПродукцияАналитикаАктивовПассивов");
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("Отменено", Ложь);
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
	Возврат ПараметрыВыбораСтатейИАналитик;
	
КонецФункции

// Устанавливает приоритет документу с выполнением сопутствующих действий:
//	Обновление движений этапов производства в реестре документов (обновление приоритета этапов).
//	Пересчет обеспечения этапов.
//
// Параметры:
//		Ссылка - ДокументСсылка.ЗаказНаПроизводство2_2 - ссылка на документ.
//		Приоритет - СправочникСсылка.Приоритеты - новый приоритет.
//
Процедура УстановитьПриоритет(Ссылка, Приоритет) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		БлокировкаДанных.Добавить("Документ.ЗаказНаПроизводство2_2").УстановитьЗначение("Ссылка", Ссылка);
		БлокировкаДанных.Заблокировать();
		
		Объект = Ссылка.ПолучитьОбъект();
		Объект.Заблокировать();
		Объект.Приоритет = Приоритет;
		Объект.Записать();
		
		ПриИзмененииПриоритета(Ссылка);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Заказ на производство';
				|en = 'Production order'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Ссылка.Метаданные(),
			Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось установить приоритет %1 документу %2';
										|en = 'Cannot set priority %1 to document %2'"), Приоритет, Ссылка);
		
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает признак "динамическая структура" заказу на производство.
//
// Параметры:
//   Объект - ДокументОбъект.ЗаказНаПроизводство2_2 - заказ на производство.
//
Процедура УстановитьСлужебныйРеквизитДинамическаяСтруктура(Объект) Экспорт
	Объект.ДинамическаяСтруктура = ДоступенРасчетСтруктурыЗаказа(Объект);
КонецПроцедуры

// Возвращает признак "доступен расчет динамической структуры заказа".
//
// Параметры:
//   Объект - ДокументОбъект.ЗаказНаПроизводство2_2 - заказ на производство или структура реквизитов заказа.
//
// Возвращаемое значение:
//  Булево - признак, Истина если доступен расчет динамической структуры заказа.
//
Функция ДоступенРасчетСтруктурыЗаказа(Объект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ДинамическаяСтруктураЗаказовНаПроизводство") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ГруппировкаЗатрат

// Возвращает перечень полей, идентифицирующих группу затрат.
//	Возвращаемое значение:
//		СписокЗначений из Строка - перечень полей, идентифицирующих группу затрат.
//
Функция ПереченьПолейГруппыЗатрат() Экспорт
	
	СписокПолей = Новый СписокЗначений;
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	СписокПолей.Добавить("Спецификация",	НСтр("ru = 'Спецификация';
												|en = 'Bill of materials'", КодЯзыка));
	СписокПолей.Добавить("Назначение",		НСтр("ru = 'Назначение';
													|en = 'Assignment'", КодЯзыка));
	
	Возврат СписокПолей;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НаправленияДеятельности

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
// 
// Возвращаемое значение:
//  Структура - см. НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности
Функция ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности(Форма) Экспорт
	
	ПорядокОбработкиДокумента = НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности();
	ПорядокОбработкиДокумента.ЗаполнятьНазначениеВШапке = Истина;
	ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляОчисткиНекорректныхНазначений = "Продукция";
	ТаблицаУсловий = НаправленияДеятельностиСервер.УсловияОбработкиНазначенийВСтроках("ТипНоменклатуры");
	ПорядокОбработкиДокумента.УсловияОбработкиСтрок.Вставить("Продукция", ТаблицаУсловий);
	
	Возврат ПорядокОбработкиДокумента;
	
КонецФункции

#КонецОбласти

#Область Проведение

#Область Инициализация

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Дата                         КАК Период,
	|	Таблица.Номер                        КАК Номер, 
	|	Таблица.Партнер                      КАК Партнер,
	|	Таблица.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	Таблица.Ответственный        		 КАК Ответственный,
	|	Таблица.Комментарий        			 КАК Комментарий, 
	|	Таблица.ПометкаУдаления        		 КАК ПометкаУдаления,  
	|	Таблица.Приоритет        		 	 КАК Приоритет,
	|	Таблица.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	Таблица.Организация                  КАК Организация,
	|	Таблица.Статус                       КАК Статус,
	|	Таблица.Проведен                     КАК Проведен,
	|	Таблица.Подразделение                КАК Подразделение,
	|	Таблица.ДатаПотребности              КАК ДатаПотребности,
	|	Таблица.НачатьНеРанее                КАК НачатьНеРанее,
	|	Таблица.РазмещениеВыпуска            КАК РазмещениеВыпуска,
	|	Таблица.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	Таблица.НазначениеПродукция          КАК НазначениеПродукция,
	|	Таблица.ДинамическаяСтруктура        КАК ДинамическаяСтруктура,
	|	Таблица.УникальныйИдентификатор      КАК УникальныйИдентификатор
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();    
	
	Запрос.УстановитьПараметр("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	УстановитьПредопределенныеПараметрыИнициализации(Запрос);
	
КонецПроцедуры

Процедура УстановитьПредопределенныеПараметрыИнициализации(Запрос)
	
	Запрос.УстановитьПараметр("ПустаяСсылкаНазначение",    Справочники.Назначения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаСклад",         Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("СтатусФормируется",   Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется);
	Запрос.УстановитьПараметр("СтатусКПроизводству", Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству);
	Запрос.УстановитьПараметр("СтатусЗакрыт",        Перечисления.СтатусыЗаказовНаПроизводство2_2.Закрыт);
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовПроведения

Функция ТекстЗапросаТаблицаОбеспечениеПроизводственныхПроцессов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеПроизводственныхПроцессов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                              КАК Период,
	|	ТабличнаяЧасть.НомерСтроки           КАК НомерСтроки,
	|
	|	&Ссылка                              КАК Распоряжение,
	|
	|	ТабличнаяЧасть.Номенклатура          КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика        КАК Характеристика,
	|	ТабличнаяЧасть.Спецификация          КАК Спецификация,
	|
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.СписатьНаРасходы
	|			И &ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций)
	|			ТОГДА &НазначениеПродукция
	|		ИНАЧЕ ТабличнаяЧасть.Назначение
	|	КОНЕЦ                                КАК Назначение,
	|
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) 
	|			И НЕ ТабличнаяЧасть.СписатьНаРасходы ТОГДА
	|		ТабличнаяЧасть.Склад
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|		  ИЛИ ТабличнаяЧасть.СписатьНаРасходы ТОГДА
	|		ТабличнаяЧасть.Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|
	|	ТабличнаяЧасть.СписатьНаРасходы         КАК СписатьНаРасходы,
	|
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СписатьНаРасходы 
	|			ТОГДА ТабличнаяЧасть.СтатьяРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ  									КАК СтатьяРасходов,
	|
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СписатьНаРасходы 
	|			ТОГДА ТабличнаяЧасть.АналитикаРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ  									КАК АналитикаРасходов,
	|
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СписатьНаРасходы 
	|			ТОГДА ТабличнаяЧасть.АналитикаАктивовПассивов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ  									КАК АналитикаАктивовПассивов,
	|
	|	ВЫБОР КОГДА &ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка) ТОГДА
	|		ТабличнаяЧасть.Количество
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                КАК Требуется,
	|
	|	ВЫБОР КОГДА &ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка) ТОГДА
	|		ТабличнаяЧасть.Количество
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                КАК ТребуетсяРазборка
	|
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		&СтатусКПроизводству,
	|		&СтатусЗакрыт)
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаЗаказыНаПроизводство(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыНаПроизводство";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|
	|	ТабличнаяЧасть.НомерСтроки                                                КАК НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура                                               КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                             КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			И НЕ ТабличнаяЧасть.СписатьНаРасходы ТОГДА
	|		ТабличнаяЧасть.Склад
	|	КОГДА ТабличнаяЧасть.СписатьНаРасходы
	|		ИЛИ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
	|		ТабличнаяЧасть.Подразделение
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                                     КАК Склад,
	|	ТабличнаяЧасть.Назначение                                                 КАК Назначение,
	|	ТабличнаяЧасть.Ссылка                                                     КАК ЗаказНаПроизводство,
	|	ТабличнаяЧасть.КлючНоменклатура                                           КАК КлючНоменклатура,
	|	ТабличнаяЧасть.Спецификация                                               КАК Спецификация,
	|	ТабличнаяЧасть.Количество                                                 КАК Заказано,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству) ТОГДА
	|			ТабличнаяЧасть.Количество
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                                                     КАК КПроизводству
	|
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабличнаяЧасть
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Ссылка.Проведен
	|	И ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт))
	|		И НЕ ТабличнаяЧасть.Отменено
	|		И НЕ ТабличнаяЧасть.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ЗаказНаПроизводство2_2";
	СинонимТаблицыДокумента = "ТабличнаяЧасть";  

	ВЗапросеЕстьИсточник = Истина;
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
		
	ПереопределениеРасчетаПараметров = ПереопределениеРасчетаПараметров(СинонимТаблицыДокумента + ".Ссылка");
	
	Если ИмяРегистра = "ЗаказыНаПроизводство" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаПроизводство(Запрос, ТекстыЗапроса, ИмяРегистра);
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеПроизводственныхПроцессов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеПроизводственныхПроцессов(Запрос, ТекстыЗапроса, ИмяРегистра);
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
		КонецЕсли;
		
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ТекстЗапроса;
	Результат.ЗначенияПараметров = ЗначенияПараметров;

	Возврат Результат;
	
КонецФункции

Функция ПереопределениеРасчетаПараметров(ОсновнаяТаблица)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Статус", "ТабличнаяЧасть.Ссылка.Статус");
	Результат.Вставить("СтатусФормируется", "ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется)");
	Результат.Вставить("СтатусКПроизводству", "ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)");
	Результат.Вставить("СтатусЗакрыт", "ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)");
	
	Возврат Результат;
	
КонецФункции

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка                 КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата            КАК Период,
		|	ТабЧасть.Номенклатура           КАК Номенклатура,
		|	ТабЧасть.Характеристика         КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабЧасть.СписатьНаРасходы ТОГДА
		|					ТабЧасть.Подразделение
		|			КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|					ТабЧасть.Подразделение
		|				ИНАЧЕ
		|					ТабЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций) ТОГДА
		|			ТабЧасть.Ссылка.НазначениеПродукция
		|		ИНАЧЕ
		|			ТабЧасть.Назначение
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабЧасть.Количество             КАК Количество,
		|	ТабЧасть.Ссылка                 КАК Заказ,
		|	ТабЧасть.Ссылка.ДатаПотребности КАК ДатаПоступления,
		|	ВЫБОР
		|		КОГДА ТабЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)
		|				И НЕ ТабЧасть.СписатьНаРасходы
		|				И ТабЧасть.Ссылка.ДатаПотребности <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                           КАК ДоступенДляРасхода,
		|	ЛОЖЬ                            КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                    КАК РаспоряжениеВГрафике,
		|	0                               КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабЧасть
		|ГДЕ
		|	НЕ ТабЧасть.Отменено
		|		И ТабЧасть.Ссылка.ТипПроизводственногоПроцесса В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка                                           КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата                                      КАК Период,
		|	ТабЧасть.Номенклатура                                     КАК Номенклатура,
		|	ТабЧасть.Характеристика                                   КАК Характеристика,
		|	ТабЧасть.Подразделение                                    КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций) ТОГДА
		|			ТабЧасть.Ссылка.НазначениеПродукция
		|		ИНАЧЕ
		|			ТабЧасть.Назначение
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабЧасть.Количество                                       КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)    КАК ВариантОбеспечения,
		|	ТабЧасть.Ссылка                                           КАК Заказ,
		|	ДАТАВРЕМЯ(1, 1, 1)                                        КАК ЖелаемаяДатаОтгрузки,
		|	ЛОЖЬ                                                      КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                                              КАК РаспоряжениеВГрафике,
		|	0                                                         КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабЧасть
		|ГДЕ
		|	НЕ ТабЧасть.Отменено
		|		И ТабЧасть.СписатьНаРасходы
		|		И ТабЧасть.Ссылка.ТипПроизводственногоПроцесса В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))";
		
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Период КАК ДатаДокументаИБ,
	|	&Номер КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация КАК Организация,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Партнер КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК МестоХранения,
	|	&Подразделение КАК Подразделение,
	|	&Ответственный КАК Ответственный,
	|	&Комментарий КАК Комментарий,
	|	НЕОПРЕДЕЛЕНО КАК Валюта,
	|	0 КАК Сумма,
	|	&Статус КАК Статус,
	|	&Проведен КАК Проведен,
	|	&ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	"""" КАК Дополнительно,
	|	&Период КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать КАК НомерПервичногоДокумента,
	|	ЛОЖЬ КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК ИсправляемыйДокумент,
	|	&Период    КАК ДатаОтраженияВУчете,
	|	&Приоритет КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПартияПроизводства

// Определяет данные полей партии производства.
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаПроизводство2_2 -
//
// Возвращаемое значение:
//  см. Справочники.ПартииПроизводства.ОписаниеПартииПроизводства
//
Функция ПоляПартии(Объект) Экспорт
	
	ПоляПартии = Справочники.ПартииПроизводства.ОписаниеПартииПроизводства();
	
	ПоляПартии.Документ = Объект.Ссылка;
	ПоляПартии.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоДокументу;
	
	ПоляПартии.ТипПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций;
	ПоляПартии.Спецификация = Справочники.РесурсныеСпецификации.ПустаяСсылка();
	
	ПоляПартии.Организация = Объект.Организация;
	ПоляПартии.ВидДеятельностиНДС = Объект.ЗаказПодДеятельность;
	
	ПоляПартии.Назначение = Объект.НазначениеПродукция;
	ПоляПартии.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	
	Если ЗначениеЗаполнено(Объект.НазначениеПродукция) Тогда
		НаправлениеДеятельности = УправлениеПроизводствомПовтИсп.НаправлениеДеятельностиНазначенияПродукции(Объект.НазначениеПродукция);
		ПоляПартии.НаправлениеДеятельности = НаправлениеДеятельности;
	КонецЕсли;
	
	Строки = Объект.Продукция.НайтиСтроки(Новый Структура("Отменено", Ложь));
	Если Строки.Количество() > 0 Тогда
		ПоляПартии.ОсновноеИзделиеНоменклатура = Строки[0].Номенклатура;
		ПоляПартии.ОсновноеИзделиеХарактеристика = Строки[0].Характеристика;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоляПартии.ОсновноеИзделиеНоменклатура) Тогда
		ПоляПартии.ГруппаПродукции =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строки[0].Номенклатура, "ГруппаАналитическогоУчета");
	КонецЕсли;
	
	// Организации этапов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Этапы.Организация КАК Организация
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Этапы
	|ГДЕ
	|	Этапы.ПартияПроизводства = &ПартияПроизводства
	|	И Этапы.Организация <> &Организация
	|	И Этапы.Проведен
	|";
	
	Запрос.УстановитьПараметр("Организация",        Объект.Организация);
	Запрос.УстановитьПараметр("ПартияПроизводства", Объект.ПартияПроизводства);
	
	Организации = Запрос.Выполнить().Выгрузить();
	Если Организации.Количество() > 0 Тогда
		
		ПоляПартии.ВнутренняяПереработка = Истина;
		
		НоваяСтрока = Организации.Добавить();
		НоваяСтрока.Организация = ПоляПартии.Организация;
		
		ПоляПартии.Организации = Организации;
		
	КонецЕсли;
	
	Возврат ПоляПартии;
	
КонецФункции

#КонецОбласти

#Область СхемыОбособления

Функция ТекстЗапросаСхемыОбособленияПоРаспоряжению(СоздатьВременнуюТаблицу = Ложь)
	
	// Текст запроса модифицируется программно
	//  - создание временной таблицы ВтСхемыОбособленияВПроизводстве
	//  - подстановка параметров.
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|
	|	СхемыОбособления.Распоряжение              КАК Распоряжение,
	|	СхемыОбособления.Назначение                КАК Назначение,
	|
	|	СхемыОбособления.Обособленно               КАК Обособленно,
	|
	|	СхемыОбособления.НазначениеПродукция       КАК НазначениеПродукция,
	|	СхемыОбособления.НазначениеПобочногоВыхода КАК НазначениеПобочногоВыхода,
	|	СхемыОбособления.НазначениеМатериалы       КАК НазначениеМатериалы,
	|
	|	СхемыОбособления.Распоряжение.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется КАК ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется
	|
	|ПОМЕСТИТЬ ВтСхемыОбособленияВПроизводстве
	|
	|ИЗ
	|	(ВЫБРАТЬ
	// настройки для обособленных строк (по табличной части)
	|	
	|		Товары.Ссылка                   КАК Распоряжение,
	|		Товары.Назначение               КАК Назначение,
	|	
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                           КАК Обособленно,
	|	
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА Товары.Назначение
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                           КАК НазначениеПродукция,
	|	
	|		&ТекстНазначениеПобочногоВыхода КАК НазначениеПобочногоВыхода,
	|	
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА Товары.Назначение
	|			ИНАЧЕ
	|				ВЫБОР
	|					КОГДА Заказы.ВариантОбособления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ДоговорДавальца))
	|						ТОГДА Заказы.Назначение
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				КОНЕЦ
	|		КОНЕЦ                           КАК НазначениеМатериалы
	|
	|	ИЗ
	|		Документ.ЗаказНаПроизводство2_2.Продукция КАК Товары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|		ПО Товары.Ссылка = Заказы.Ссылка
	|	
	|	ГДЕ
	|		Товары.Ссылка В(&Распоряжения) 
	|		И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Заказы.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|												ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|	
	// настройки для обособленных строк (по шапке документа)
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Заказы.Ссылка                   КАК Распоряжение,
	|		Заказы.НазначениеПродукция      КАК Назначение,
	|
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                           КАК Обособленно,
	|
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА Заказы.НазначениеПродукция
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                           КАК НазначениеПродукция,
	|
	|		&ТекстНазначениеПобочногоВыхода КАК НазначениеПобочногоВыхода,
	|
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА Заказы.НазначениеПродукция
	|			ИНАЧЕ
	|				ВЫБОР
	|					КОГДА Заказы.ВариантОбособления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ДоговорДавальца))
	|						ТОГДА Заказы.Назначение
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				КОНЕЦ
	|		КОНЕЦ                           КАК НазначениеМатериалы
	|
	|	ИЗ
	|		Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|
	|	ГДЕ
	|		Заказы.Ссылка В(&Распоряжения)
	|		И Заказы.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций),
	|													ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|		И Заказы.НазначениеПродукция <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	
	// настройки для необособленных строк
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Заказы.Ссылка                                КАК Распоряжение,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                                        КАК Обособленно,
	|
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК НазначениеПродукция,
	|		&ТекстНазначениеПобочногоВыхода              КАК НазначениеПобочногоВыхода,
	|		ВЫБОР
	|			КОГДА Заказы.ВариантОбособления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
	|												ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции),
	|												ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство),
	|												ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ДоговорДавальца))
	|				ТОГДА Заказы.Назначение
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                                        КАК НазначениеМатериалы
	|
	|	ИЗ
	|		Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|
	|	ГДЕ
	|		Заказы.Ссылка В(&Распоряжения)
	|
	|) КАК СхемыОбособления";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОбособленно", ТекстЗапросаПолеОбособленно());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстНазначениеПобочногоВыхода", ТекстЗапросаНазначениеПобочногоВыхода());
	
	Если Не СоздатьВременнуюТаблицу Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВтСхемыОбособленияВПроизводстве", "");
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСхемыОбособленияПоНазначению()
	
	ТекстЗапроса =
	// настройки для обособленных строк
	"ВЫБРАТЬ
	|
	|	Заказы.Ссылка                   КАК Распоряжение,
	|	&Назначение                     КАК Назначение,
	|	
	|	ВЫБОР
	|		КОГДА &ТекстОбособленно
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                           КАК Обособленно,
	|	
	|	ВЫБОР
	|		КОГДА &ТекстОбособленно
	|			ТОГДА &Назначение
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                           КАК НазначениеПродукция,
	|	
	|	&ТекстНазначениеПобочногоВыхода КАК НазначениеПобочногоВыхода,
	|	
	|	ВЫБОР
	|		КОГДА &ТекстОбособленно
	|			ТОГДА &Назначение
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА Заказы.ВариантОбособления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
	|													ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции),
	|													ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство),
	|													ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ДоговорДавальца))
	|					ТОГДА Заказы.Назначение
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ                           КАК НазначениеМатериалы,
	|
	|	Заказы.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется КАК ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется
	|
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|
	|ГДЕ
	|	Заказы.Ссылка = &Распоряжение 
	|	И &Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	
	// настройки для необособленных строк
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|
	|	Заказы.Ссылка                                КАК Распоряжение,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|
	|	ВЫБОР
	|		КОГДА &ТекстОбособленно
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                        КАК Обособленно,
	|
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК НазначениеПродукция,
	|	
	|	&ТекстНазначениеПобочногоВыхода              КАК НазначениеПобочногоВыхода,
	|	
	|	ВЫБОР
	|		КОГДА Заказы.ВариантОбособления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ДоговорДавальца))
	|			ТОГДА Заказы.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                        КАК НазначениеМатериалы,
	|
	|	Заказы.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется КАК ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется
	|
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|
	|ГДЕ
	|	Заказы.Ссылка = &Распоряжение
	|	И &Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОбособленно",               ТекстЗапросаПолеОбособленно());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстНазначениеПобочногоВыхода", ТекстЗапросаНазначениеПобочногоВыхода());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПолеОбособленно(ПутьКДаннымПолеРаспоряжение = Неопределено) Экспорт
	
	ТекстЗапроса = "Заказы.ВариантОбособления = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции)
				//++ Устарело_Переработка24
				|И Заказы.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
				//-- Устарело_Переработка24
				|";
	
	Если ПутьКДаннымПолеРаспоряжение <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Заказы", ПутьКДаннымПолеРаспоряжение);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНазначениеПобочногоВыхода()
	
	ТекстЗапроса =
	"ВЫБОР
	|	
	|	КОГДА Заказы.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|			И Заказы.НазначениеПродукция <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	
	|		ТОГДА
	|			Заказы.НазначениеПродукция
	|	
	|	КОГДА Заказы.ХозяйственнаяОперация В (
	//++ Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья),
	//-- Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5))
	|			И Заказы.ВариантОбособления В ( ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ДоговорДавальца))
	|	
	|		ТОГДА
	|			Заказы.Назначение
	|	
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	
	|КОНЕЦ";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СоздатьСхемуОбособления(ЗначенияЗаполнения)
	
	СхемаОбособления = Новый Структура;
	СхемаОбособления.Вставить("Распоряжение", Документы.ЗаказНаПроизводство2_2.ПустаяСсылка());
	СхемаОбособления.Вставить("Назначение", Справочники.Назначения.ПустаяСсылка());
	СхемаОбособления.Вставить("НазначениеПродукция", Справочники.Назначения.ПустаяСсылка());
	СхемаОбособления.Вставить("НазначениеПобочногоВыхода", Справочники.Назначения.ПустаяСсылка());
	СхемаОбособления.Вставить("НазначениеМатериалы", Справочники.Назначения.ПустаяСсылка());
	СхемаОбособления.Вставить("Обособленно", Ложь);
	СхемаОбособления.Вставить("ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется", Ложь);
	
	ЗаполнитьЗначенияСвойств(СхемаОбособления, ЗначенияЗаполнения);
	
	Возврат СхемаОбособления;
	
КонецФункции

#КонецОбласти

#Область ДинамическаяСтруктура

// Возвращает протокол расчета структуры заказа на производство.
//
// Параметры:
//  ЗаказНапроизводство - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство.
// 
// Возвращаемое значение:
//  Структура - протокол расчета
//
Функция ПротоколРасчетаСтруктурыЗаказа(ЗаказНапроизводство) Экспорт
	
	ВыполняетсяРасчет = СтруктураЗаказа.ВыполняетсяРасчет() Или РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.ВыполняетсяРасчет();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыполняетсяРасчет", ВыполняетсяРасчет);
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Код
	|ПОМЕСТИТЬ Ошибки
	|ГДЕ
	|	ИСТИНА В
	|	 (ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА
	|		ИЗ РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК ДД
	|		ГДЕ ДД.ЗаказНаПроизводство = &ЗаказНаПроизводство И ДД.ТипОшибки = ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаПодбораСпецификаций))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Код
	|ГДЕ
	|	ИСТИНА В
	|	 (ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА
	|		ИЗ РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК ДД
	|		ГДЕ ДД.ЗаказНаПроизводство = &ЗаказНаПроизводство И ДД.ТипОшибки В (ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРазузлования),
	|																			ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаЗаполненияДанныхСпецификации)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3 КАК Код
	|ГДЕ
	|	ИСТИНА В
	|	 (ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА
	|		ИЗ РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК ДД
	|		ГДЕ ДД.ЗаказНаПроизводство = &ЗаказНаПроизводство И ДД.ТипОшибки = ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРасчетаНормативногоГрафика))
	|;
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА 
	|			(ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации КАК Т
	|				ГДЕ
	|					Т.ЗаказНаПроизводство = Таблица.Ссылка)
	|				ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.БуферЗаданийКРасчетуСтруктурыЗаказаСпецификации КАК Т
	|				ГДЕ
	|					Т.ЗаказНаПроизводство = Таблица.Ссылка)
	|				ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК Т
	|				ГДЕ
	|					Т.ЗаказНаПроизводство = Таблица.Ссылка)
	|				ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.БуферЗаданийКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК Т
	|				ГДЕ
	|					Т.ЗаказНаПроизводство = Таблица.Ссылка)
	|				ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.ЗаданияКОчисткеСтруктурыЗаказа КАК Т
	|				ГДЕ
	|					Т.ЗаказНаПроизводство = Таблица.Ссылка)
	|				ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик КАК Т
	|				ГДЕ
	|					Т.ЗаказНаПроизводство = Таблица.Ссылка)
	|					И НЕ ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК Т
	|						ГДЕ
	|							Т.ЗаказНаПроизводство = Таблица.Ссылка
	|							И Т.ТипОшибки = ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРасчетаНормативногоГрафика)))
	|			ТОГДА ВЫБОР
	|					КОГДА &ВыполняетсяРасчет И &Активен    ТОГДА 3
	|					КОГДА &ВыполняетсяРасчет И НЕ &Активен ТОГДА 4
	|					ИНАЧЕ 2
	|				КОНЕЦ
	|		КОГДА
	|			&Активен
	|				И ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Ошибки
	|				ГДЕ
	|					Ошибки.Код > 0)
	|			ТОГДА 5
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &Активен ТОГДА 1 ИНАЧЕ 0 КОНЕЦ
	|	КОНЕЦ КАК Код
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &ЗаказНапроизводство
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&Активен",
		"Таблица.Проведен И Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)");
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	УстановитьПривилегированныйРежим(Ложь);
	
	КодыСостояний = Новый Структура();
	
	КодыСостояний.Вставить("НеРассчитан",           0);
	КодыСостояний.Вставить("Рассчитан",             1);
	КодыСостояний.Вставить("ОжидаетРасчета",        2);
	КодыСостояний.Вставить("Рассчитывается",        3);
	КодыСостояний.Вставить("Отменяется",            4);
	КодыСостояний.Вставить("РассчитанЕстьОшибки",   5);
	КодыСостояний.Вставить("НеРассчитанЕстьОшибки", 6);
	
	КодыОшибок = Новый Структура();
	
	КодыОшибок.Вставить("НетОшибок ",                       0);
	КодыОшибок.Вставить("ОшибкиПодбораСпецификаций",        1);
	КодыОшибок.Вставить("ОшибкиЗаполненияДанныхОбИзделиях", 2);
	КодыОшибок.Вставить("ОшибкиРасчетаНормативногоГрафика", 3);
	
	Результат = Новый Структура();
	
	Результат.Вставить("КодыСостояний",КодыСостояний);
	Результат.Вставить("КодыОшибок",КодыОшибок);
	Результат.Вставить("Ошибки",РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку(0));
	Результат.Вставить("Состояние",РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку(0)[0]);
	
	Если Результат.Состояние = КодыСостояний.ОжидаетРасчета И ОбщегоНазначения.РежимОтладки() Тогда
		СтруктураЗаказа.ЗапуститьРасчет();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЭтапов

Функция ТекстыЗапросаНоменклатураКПроизводству(СоздатьВременнуюТаблицу, ИмяВременнойТаблицы = "ВтНоменклатураКПроизводству", ЕстьОтборПоПериоду = Ложь, ТекстОтбораПоИзмерениям = "")
	
	ТекстыЗапроса = Новый Структура;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Распоряжение	 КАК Распоряжение,
	|
	|	Таблица.Номенклатура	 КАК Номенклатура,
	|	Таблица.Характеристика	 КАК Характеристика,
	|
	|	Таблица.Назначение		 КАК Назначение,
	|	Таблица.Этап			 КАК Этап,
	|
	|	Таблица.СписатьНаРасходы КАК СписатьНаРасходы,
	|
	|	Таблица.Склад			 КАК Склад,
	|
	|	Таблица.ТребуетсяОборот 			КАК ТребуетсяОборот,
	|	Таблица.ЗапланированоОборот 		КАК ЗапланированоОборот,
	|	Таблица.ПереданоКПроизводствуОборот КАК ПереданоКПроизводствуОборот,
	|	Таблица.ПроизводитсяОборот 			КАК ПроизводитсяОборот,
	|	Таблица.ПроизведеноОборот 			КАК ПроизведеноОборот,
	|
	|	Таблица.ТребуетсяРазборкаОборот		КАК ТребуетсяРазборкаОборот,
	|	Таблица.ЗапланированаРазборкаОборот КАК ЗапланированаРазборкаОборот,
	|	Таблица.ГотовКРазборкеОборот		КАК ГотовКРазборкеОборот,
	|
	|	Таблица.ТребуетсяОборот
	|		- Таблица.ЗапланированоОборот
	|		- Таблица.ПереданоКПроизводствуОборот
	|		- Таблица.ПроизводитсяОборот
	|		- Таблица.ПроизведеноОборот
	|		- ВЫБОР
	|			КОГДА Таблица.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (
	|													ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
	|													ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
	|													ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
	|													ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
	|				ТОГДА Таблица.ТребуетсяОборот * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
	|			ИНАЧЕ 0
	|		КОНЕЦ                           КАК ТребуетсяПроизводствоСУчетомДопустимогоОтклонения,
	|
	|	ТИПЗНАЧЕНИЯ(Таблица.Назначение.Заказ)                                            КАК ТипЗаказИзНазначения,
	|	ВЫРАЗИТЬ(Таблица.Назначение.Заказ КАК Документ.ЭтапПроизводства2_2).Распоряжение КАК РаспоряжениеИзНазначения
	|
	|ПОМЕСТИТЬ ОбеспечениеПроизводственныхПроцессовВРазрезеСкладов
	|ИЗ
	|	РегистрНакопления.ОбеспечениеПроизводственныхПроцессов.Обороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		,
	|		&ОтборПоИзмерениям) КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Этап,
	|	СписатьНаРасходы,
	|	Назначение
	|";
	
	Если Не ЕстьОтборПоПериоду Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоПериода", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонецПериода", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоИзмерениям", ТекстОтбораПоИзмерениям);
	
	ТекстыЗапроса.Вставить("ТекстЗапросаИсточник", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Распоряжение     КАК Распоряжение,
	|	Таблица.Номенклатура     КАК Номенклатура,
	|	Таблица.Характеристика   КАК Характеристика,
	|	Таблица.Назначение       КАК Назначение,
	|	Таблица.Этап             КАК Этап,
	|	Таблица.СписатьНаРасходы КАК СписатьНаРасходы
	|ПОМЕСТИТЬ ВтТребуемыеНазначенияКПроизводству
	|ИЗ
	|	ОбеспечениеПроизводственныхПроцессовВРазрезеСкладов КАК Таблица
	|ГДЕ
	|	Таблица.ТипЗаказИзНазначения = ТИП(Документ.ЭтапПроизводства2_2)
	|	И Таблица.РаспоряжениеИзНазначения = Таблица.Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Распоряжение,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Назначение,
	|	Таблица.Этап,
	|	Таблица.СписатьНаРасходы
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.ТребуетсяПроизводствоСУчетомДопустимогоОтклонения) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Этап,
	|	СписатьНаРасходы
	|";
	
	ТекстыЗапроса.Вставить("ТекстЗапросаДополнительный", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|
	|	Таблица.Распоряжение     КАК Распоряжение,
	|
	|	Таблица.Номенклатура     КАК Номенклатура,
	|	Таблица.Характеристика   КАК Характеристика,
	|
	|	Таблица.Назначение       КАК Назначение,
	|	Таблица.Этап             КАК Этап,
	|
	|	Таблица.СписатьНаРасходы КАК СписатьНаРасходы,
	|
	|	СУММА(Таблица.ТребуетсяОборот
	|			- Таблица.ЗапланированоОборот
	|			- Таблица.ПереданоКПроизводствуОборот
	|			- Таблица.ПроизводитсяОборот
	|			- Таблица.ПроизведеноОборот) КАК ТребуетсяПроизводство,
	|
	|	СУММА(Таблица.ТребуетсяРазборкаОборот)
	|			- ВЫБОР
	|				КОГДА СУММА(Таблица.ЗапланированаРазборкаОборот) - СУММА(Таблица.ГотовКРазборкеОборот) > 0
	|					ТОГДА СУММА(Таблица.ЗапланированаРазборкаОборот) - СУММА(Таблица.ГотовКРазборкеОборот)
	|				ИНАЧЕ 0
	|			КОНЕЦ                        КАК ТребуетсяРазборка
	|
	|ПОМЕСТИТЬ ВтНоменклатураКПроизводству
	|ИЗ
	|	(ВЫБРАТЬ
	|
	|		Таблица.Распоряжение     КАК Распоряжение,
	|
	|		Таблица.Номенклатура     КАК Номенклатура,
	|		Таблица.Характеристика   КАК Характеристика,
	|
	|		Таблица.Назначение       КАК Назначение,
	|		Таблица.Этап             КАК Этап,
	|
	|		Таблица.СписатьНаРасходы КАК СписатьНаРасходы,
	|
	|		Таблица.ТребуетсяОборот             КАК ТребуетсяОборот,
	|		Таблица.ЗапланированоОборот         КАК ЗапланированоОборот,
	|		Таблица.ПереданоКПроизводствуОборот КАК ПереданоКПроизводствуОборот,
	|		Таблица.ПроизводитсяОборот          КАК ПроизводитсяОборот,
	|		Таблица.ПроизведеноОборот           КАК ПроизведеноОборот,
	|
	|		Таблица.ТребуетсяРазборкаОборот     КАК ТребуетсяРазборкаОборот,
	|		Таблица.ЗапланированаРазборкаОборот КАК ЗапланированаРазборкаОборот,
	|		Таблица.ГотовКРазборкеОборот        КАК ГотовКРазборкеОборот
	|
	|	ИЗ
	|		ОбеспечениеПроизводственныхПроцессовВРазрезеСкладов КАК Таблица
	|
	|	ГДЕ
	|		ИСТИНА В 
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ОбеспечениеПроизводственныхПроцессовВРазрезеСкладов КАК ДД
	|			ГДЕ
	|				ДД.Распоряжение		= Таблица.Распоряжение
	|				И ДД.Номенклатура		= Таблица.Номенклатура
	|				И ДД.Характеристика	= Таблица.Характеристика
	|				И ДД.Назначение		= Таблица.Назначение
	|				И ДД.Этап				= Таблица.Этап
	|				И ДД.СписатьНаРасходы = Таблица.СписатьНаРасходы
	|				И ДД.ТребуетсяПроизводствоСУчетомДопустимогоОтклонения > 0)
	|		ИЛИ
	|		ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ОбеспечениеПроизводственныхПроцессовВРазрезеСкладов КАК ДД
	|			ГДЕ
	|				ДД.Распоряжение		= Таблица.Распоряжение
	|				И ДД.Номенклатура		= Таблица.Номенклатура
	|				И ДД.Характеристика	= Таблица.Характеристика
	|				И ДД.Назначение		= Таблица.Назначение
	|				И ДД.Этап				= Таблица.Этап
	|				И ДД.СписатьНаРасходы = Таблица.СписатьНаРасходы
	|				И ДД.ТребуетсяПроизводствоСУчетомДопустимогоОтклонения <= 0
	|
	|			СГРУППИРОВАТЬ ПО
	|				ДД.Распоряжение,
	|				ДД.Номенклатура,
	|				ДД.Характеристика,
	|				ДД.Назначение,
	|				ДД.Этап,
	|				ДД.СписатьНаРасходы
	|
	|			ИМЕЮЩИЕ
	|				СУММА(ДД.ТребуетсяРазборкаОборот)
	|					- ВЫБОР
	|						КОГДА СУММА(ДД.ЗапланированаРазборкаОборот) - СУММА(ДД.ГотовКРазборкеОборот) > 0
	|							ТОГДА СУММА(ДД.ЗапланированаРазборкаОборот) - СУММА(ДД.ГотовКРазборкеОборот)
	|					ИНАЧЕ 0
	|				КОНЕЦ > 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|
	|		Таблица.Распоряжение     КАК Распоряжение,
	|
	|		Таблица.Номенклатура     КАК Номенклатура,
	|		Таблица.Характеристика   КАК Характеристика,
	|
	|		НазначенияКПроизводству.Назначение КАК Назначение,
	|		Таблица.Этап                       КАК Этап,
	|
	|		Таблица.СписатьНаРасходы КАК СписатьНаРасходы,
	|
	|		Таблица.ТребуетсяОборот             КАК ТребуетсяОборот,
	|		Таблица.ЗапланированоОборот         КАК ЗапланированоОборот,
	|		Таблица.ПереданоКПроизводствуОборот КАК ПереданоКПроизводствуОборот,
	|		Таблица.ПроизводитсяОборот          КАК ПроизводитсяОборот,
	|		Таблица.ПроизведеноОборот           КАК ПроизведеноОборот,
	|
	|		Таблица.ТребуетсяРазборкаОборот     КАК ТребуетсяРазборкаОборот,
	|		Таблица.ЗапланированаРазборкаОборот КАК ЗапланированаРазборкаОборот,
	|		Таблица.ГотовКРазборкеОборот        КАК ГотовКРазборкеОборот
	|
	|	ИЗ
	|		ОбеспечениеПроизводственныхПроцессовВРазрезеСкладов КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтТребуемыеНазначенияКПроизводству КАК НазначенияКПроизводству
	|			ПО Таблица.Распоряжение     = НазначенияКПроизводству.Распоряжение
	|			 И Таблица.Номенклатура     = НазначенияКПроизводству.Номенклатура
	|			 И Таблица.Характеристика   = НазначенияКПроизводству.Характеристика
	|			 И Таблица.Этап             = НазначенияКПроизводству.Этап
	|			 И Таблица.СписатьНаРасходы = НазначенияКПроизводству.СписатьНаРасходы
	|
	|	ГДЕ
	|		Таблица.ТребуетсяПроизводствоСУчетомДопустимогоОтклонения < 0
	|		И НЕ НазначенияКПроизводству.Назначение ЕСТЬ NULL
	|		И НЕ ИСТИНА В 
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ОбеспечениеПроизводственныхПроцессовВРазрезеСкладов КАК ДД
	|				ГДЕ
	|					ДД.Распоряжение		  = Таблица.Распоряжение
	|					И ДД.Номенклатура	  = Таблица.Номенклатура
	|					И ДД.Характеристика	  = Таблица.Характеристика
	|					И ДД.Назначение		  = Таблица.Назначение
	|					И ДД.Этап			  = Таблица.Этап
	|					И ДД.СписатьНаРасходы = Таблица.СписатьНаРасходы
	|					И ДД.ТребуетсяПроизводствоСУчетомДопустимогоОтклонения > 0)) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Распоряжение,
	|
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|
	|	Таблица.Назначение,
	|	Таблица.Этап,
	|
	|	Таблица.СписатьНаРасходы
	|
	|ИМЕЮЩИЕ	
	|	СУММА(Таблица.ТребуетсяОборот
	|			- Таблица.ЗапланированоОборот
	|			- Таблица.ПереданоКПроизводствуОборот
	|			- Таблица.ПроизводитсяОборот
	|			- Таблица.ПроизведеноОборот) > 0
	|	ИЛИ
	|	СУММА(Таблица.ТребуетсяРазборкаОборот)
	|			- ВЫБОР
	|				КОГДА СУММА(Таблица.ЗапланированаРазборкаОборот) - СУММА(Таблица.ГотовКРазборкеОборот) > 0
	|					ТОГДА СУММА(Таблица.ЗапланированаРазборкаОборот) - СУММА(Таблица.ГотовКРазборкеОборот)
	|				ИНАЧЕ 0
	|			КОНЕЦ > 0
	|";
	
	Если СоздатьВременнуюТаблицу Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение,
		|	Этап,
		|	СписатьНаРасходы";
		
		Если ИмяВременнойТаблицы <> "ВтНоменклатураКПроизводству" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтНоменклатураКПроизводству", ИмяВременнойТаблицы);
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВтНоменклатураКПроизводству", "");
		
	КонецЕсли;
	
	ТекстыЗапроса.Вставить("ТекстЗапросаОсновной", ТекстЗапроса);
	
	Возврат ТекстыЗапроса;
	
КонецФункции

Процедура СоздатьВтДанныеДляФормированияЭтапов(МенеджерВременныхТаблиц, Распоряжения) Экспорт
	
	СписокЗапросов = Новый СписокЗначений();
	
	ТекстыЗапросаНоменклатураКПроизводству =
		ТекстыЗапросаНоменклатураКПроизводству(Истина,, Истина, "Распоряжение В (&Распоряжения)");
		
	СписокЗапросов.Добавить(ТекстыЗапросаНоменклатураКПроизводству.ТекстЗапросаИсточник,       "");
	СписокЗапросов.Добавить(ТекстыЗапросаНоменклатураКПроизводству.ТекстЗапросаДополнительный, "");
	СписокЗапросов.Добавить(ТекстыЗапросаНоменклатураКПроизводству.ТекстЗапросаОсновной,       "");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Распоряжение             КАК Распоряжение,
		|
		|	Таблица.Номенклатура             КАК Номенклатура,
		|	Таблица.Характеристика           КАК Характеристика,
		|
		|	Таблица.Назначение               КАК Назначение,
		|	Таблица.Этап                     КАК Этап,
		|
		|	Таблица.Склад                    КАК Склад,
		|	Таблица.Подразделение            КАК Подразделение,
		|
		|	Таблица.Спецификация             КАК Спецификация,
		|
		|	Таблица.СписатьНаРасходы         КАК СписатьНаРасходы,
		|	Таблица.СтатьяРасходов           КАК СтатьяРасходов,
		|	Таблица.АналитикаРасходов        КАК АналитикаРасходов,
		|	Таблица.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|
		|	(Таблица.ТребуетсяОборот
		|		- Таблица.ЗапланированоОборот
		|		- Таблица.ПереданоКПроизводствуОборот
		|		- Таблица.ПроизводитсяОборот
		|		- Таблица.ПроизведеноОборот) КАК Количество
		|
		|ПОМЕСТИТЬ ВтНоменклатураКПроизводствуДетальныеЗаписи
		|ИЗ
		|	РегистрНакопления.ОбеспечениеПроизводственныхПроцессов.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			(Распоряжение, Номенклатура, Характеристика, Назначение, Этап, СписатьНаРасходы) В
		|					(ВЫБРАТЬ
		|						Таблица.Распоряжение,
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Назначение,
		|						Таблица.Этап,
		|						Таблица.СписатьНаРасходы
		|					ИЗ
		|						ВтНоменклатураКПроизводству КАК Таблица
		|					ГДЕ 
		|						Таблица.ТребуетсяПроизводство > 0)) КАК Таблица
		|ГДЕ
		|	(Таблица.ТребуетсяОборот
		|		- Таблица.ЗапланированоОборот
		|		- Таблица.ПереданоКПроизводствуОборот
		|		- Таблица.ПроизводитсяОборот
		|		- Таблица.ПроизведеноОборот) <> 0
		|";
	СписокЗапросов.Добавить(ТекстЗапроса, "");
	
	ТекстЗапроса = СтрЗаменить(
		"ВЫБРАТЬ
		|	&ТекстИсточник                   КАК Источник,
		|
		|	Таблица.Распоряжение             КАК Распоряжение,
		|
		|	Таблица.Номенклатура             КАК Номенклатура,
		|	Таблица.Характеристика           КАК Характеристика,
		|
		|	Таблица.Назначение               КАК Назначение,
		|	Таблица.Этап                     КАК Этап,
		|
		|	Таблица.Склад                    КАК Склад,
		|	Таблица.Подразделение            КАК Подразделение,
		|
		|	Таблица.Спецификация             КАК Спецификация,
		|
		|	Таблица.СписатьНаРасходы         КАК СписатьНаРасходы,
		|	Таблица.СтатьяРасходов           КАК СтатьяРасходов,
		|	Таблица.АналитикаРасходов        КАК АналитикаРасходов,
		|	Таблица.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|
		|	Таблица.Количество               КАК Количество
		|ИЗ
		|	ВтНоменклатураКПроизводствуДетальныеЗаписи КАК Таблица
		|ГДЕ
		|	Таблица.Количество > 0
		|",
		"&ТекстИсточник",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПолеЭтапИсточник(
			"Таблица.Распоряжение",
			"Таблица.Этап",
			"Таблица.Назначение"));
	СписокЗапросов.Добавить(ТекстЗапроса, "ТребуетсяПроизводство");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Распоряжение             КАК Распоряжение,
		|
		|	Таблица.Номенклатура             КАК Номенклатура,
		|	Таблица.Характеристика           КАК Характеристика,
		|
		|	Таблица.Назначение               КАК Назначение,
		|	Таблица.Этап                     КАК Этап,
		|
		|	Таблица.Склад                    КАК Склад,
		|	Таблица.Подразделение            КАК Подразделение,
		|
		|	Таблица.Спецификация             КАК Спецификация,
		|
		|	Таблица.СписатьНаРасходы         КАК СписатьНаРасходы,
		|	Таблица.СтатьяРасходов           КАК СтатьяРасходов,
		|	Таблица.АналитикаРасходов        КАК АналитикаРасходов,
		|	Таблица.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|
		|	-Таблица.Количество              КАК Количество
		|ИЗ
		|	ВтНоменклатураКПроизводствуДетальныеЗаписи КАК Таблица
		|ГДЕ
		|	Таблица.Количество < 0
		|";
	СписокЗапросов.Добавить(ТекстЗапроса, "ЗапланированоПроизводство");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|
		|	ВЫБОР
		|		КОГДА Движения.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2 ТОГДА
		|			Движения.Регистратор
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                             КАК Источник,
		|
		|	Движения.Распоряжение             КАК Распоряжение,
		|
		|	Движения.Номенклатура             КАК Номенклатура,
		|	Движения.Характеристика           КАК Характеристика,
		|
		|	Движения.Назначение               КАК Назначение,
		|	Движения.Этап                     КАК Этап,
		|
		|	Движения.Склад                    КАК Склад,
		|
		|	Движения.Спецификация             КАК Спецификация,
		|
		|	Движения.СписатьНаРасходы         КАК СписатьНаРасходы,
		|	Движения.СтатьяРасходов           КАК СтатьяРасходов,
		|	Движения.АналитикаРасходов        КАК АналитикаРасходов,
		|	Движения.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|
		|	СУММА(Движения.ТребуетсяРазборка) КАК Количество
		|ИЗ
		|	РегистрНакопления.ОбеспечениеПроизводственныхПроцессов КАК Движения
		|ГДЕ
		|	(Движения.Распоряжение, Движения.Номенклатура, Движения.Характеристика, Движения.Назначение, Движения.Этап, Движения.СписатьНаРасходы) В
		|					(ВЫБРАТЬ
		|						Таблица.Распоряжение,
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Назначение,
		|						Таблица.Этап,
		|						Таблица.СписатьНаРасходы
		|					ИЗ
		|						ВтНоменклатураКПроизводству КАК Таблица
		|					ГДЕ 
		|						Таблица.ТребуетсяРазборка > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	Движения.Регистратор,
		|	Движения.Распоряжение,
		|	Движения.Номенклатура,
		|	Движения.Характеристика,
		|	Движения.Назначение,
		|	Движения.Этап,
		|	Движения.Склад,
		|	Движения.Спецификация,
		|	Движения.СписатьНаРасходы,
		|	Движения.СтатьяРасходов,
		|	Движения.АналитикаРасходов,
		|	Движения.АналитикаАктивовПассивов
		|
		|ИМЕЮЩИЕ
		|	СУММА(Движения.ТребуетсяРазборка) > 0
		|";
	СписокЗапросов.Добавить(ТекстЗапроса, "ТребуетсяРазборка");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|
		|	Движения.Распоряжение             КАК Распоряжение,
		|
		|	Движения.Номенклатура             КАК Номенклатура,
		|	Движения.Характеристика           КАК Характеристика,
		|
		|	Движения.Склад                    КАК Склад,
		|
		|	Движения.Этап                     КАК Этап,
		|	Движения.Назначение               КАК Назначение,
		|
		|	Движения.Спецификация             КАК Спецификация,
		|
		|	Движения.СписатьНаРасходы         КАК СписатьНаРасходы,
		|	Движения.СтатьяРасходов           КАК СтатьяРасходов,
		|	Движения.АналитикаРасходов        КАК АналитикаРасходов,
		|	Движения.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|
		|	СУММА(ВЫБОР
		|		КОГДА Движения.ЗапланированаРазборка - Движения.ГотовКРазборке > 0
		|			ТОГДА
		|				Движения.ЗапланированаРазборка - Движения.ГотовКРазборке
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ)                        КАК Количество
		|ИЗ
		|	РегистрНакопления.ОбеспечениеПроизводственныхПроцессов КАК Движения
		|ГДЕ
		|	(Движения.Распоряжение, Движения.Номенклатура, Движения.Характеристика, Движения.Назначение, Движения.Этап, Движения.СписатьНаРасходы) В
		|					(ВЫБРАТЬ
		|						Таблица.Распоряжение,
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Назначение,
		|						Таблица.Этап,
		|						Таблица.СписатьНаРасходы
		|					ИЗ
		|						ВтНоменклатураКПроизводству КАК Таблица
		|					ГДЕ 
		|						Таблица.ТребуетсяРазборка > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	Движения.Распоряжение,
		|	Движения.Номенклатура,
		|	Движения.Характеристика,
		|	Движения.Назначение,
		|	Движения.Этап,
		|	Движения.Склад,
		|	Движения.Спецификация,
		|	Движения.СписатьНаРасходы,
		|	Движения.СтатьяРасходов,
		|	Движения.АналитикаРасходов,
		|	Движения.АналитикаАктивовПассивов
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|		КОГДА Движения.ЗапланированаРазборка - Движения.ГотовКРазборке > 0
		|			ТОГДА
		|				Движения.ЗапланированаРазборка - Движения.ГотовКРазборке
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ) > 0
		|";
	СписокЗапросов.Добавить(ТекстЗапроса, "ЗапланированаРазборка");
	
	ДанныеДляФормирования = СтруктураДанныхДляФормированияЭтаповКонструктор();
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ОбеспечениеПроизводственныхПроцессов", "Распоряжение В (&Распоряжения)", Новый Структура("Распоряжения", Распоряжения));
	Запрос.Параметры.Вставить("НачалоПериода", ГраницыОборотов.МинимальнаяДата);
	Запрос.Параметры.Вставить("КонецПериода", ГраницыОборотов.МаксимальнаяДата);
	ДопустимоеОтклонение = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ДопустимоеОтклонение);
	
	РезультатЗапроса = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, СписокЗапросов,, Истина);
	
	Если РезультатЗапроса["ТребуетсяПроизводство"].Количество() > 0 Тогда
		
		Аналитика = "Распоряжение,Номенклатура,Характеристика,Назначение,Этап,СписатьНаРасходы";
		ПорядокРасчета = Новый Массив();
		ПорядокРасчета.Добавить(Аналитика);
		
		Требуется     = РезультатЗапроса["ТребуетсяПроизводство"];
		Запланировано = РезультатЗапроса["ЗапланированоПроизводство"];//ТаблицаЗначений - 
		Запланировано.Индексы.Добавить(ПорядокРасчета[0]);
		
		СтрокиКОбеспечению = Новый Массив();
		РаспределитьКоличество(Требуется, Запланировано, ПорядокРасчета[0], СтрокиКОбеспечению);
		
		ДобавитьСтрокиВДанныеДляФормированияЭтапов(СтрокиКОбеспечению, ДанныеДляФормирования, 1);
		
	КонецЕсли;
	
	Если РезультатЗапроса["ТребуетсяРазборка"].Количество() > 0 Тогда
		
		Аналитика = "Распоряжение,Номенклатура,Характеристика,Назначение,Этап";
		ПорядокРасчета = Новый Массив();
		ПорядокРасчета.Добавить(Аналитика + ",Спецификация,Склад");
		ПорядокРасчета.Добавить(Аналитика);
		
		Требуется     = РезультатЗапроса["ТребуетсяРазборка"];
		Запланировано = РезультатЗапроса["ЗапланированаРазборка"];//ТаблицаЗначений - 
		Запланировано.Индексы.Добавить(ПорядокРасчета[0]);
		
		СтрокиКОбеспечению = Новый Массив();
		РаспределитьКоличество(Требуется, Запланировано, ПорядокРасчета[0]);
		РаспределитьКоличество(Требуется, Запланировано, ПорядокРасчета[1], СтрокиКОбеспечению);
		
		ДобавитьСтрокиВДанныеДляФормированияЭтапов(СтрокиКОбеспечению, ДанныеДляФормирования, -1);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Распоряжение КАК Распоряжение,
	|
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Назначение     КАК Назначение,
	|
	|	Таблица.Спецификация КАК Спецификация,
	|
	|	Таблица.Отправитель  КАК Отправитель,
	|	Таблица.Получатель   КАК Получатель,
	|
	|	Таблица.ЭтапИсточник КАК ЭтапИсточник,
	|
	|	Таблица.СписатьНаРасходы         КАК СписатьНаРасходы,
	|	Таблица.СтатьяРасходов           КАК СтатьяРасходов,
	|	Таблица.АналитикаРасходов        КАК АналитикаРасходов,
	|	Таблица.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|
	|	Таблица.Количество КАК Количество
	|
	|ПОМЕСТИТЬ ДанныеДляФормирования
	|ИЗ
	|	&ДанныеДляФормирования КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка         КАК Распоряжение,
	|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Назначение     КАК Назначение,
	|	ТабличнаяЧасть.Спецификация   КАК Спецификация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			ТОГДА ТабличнаяЧасть.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК Отправитель,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) 
	|			И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|			ТОГДА ТабличнаяЧасть.Склад
	|		КОГДА ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			И (ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|				ИЛИ ТабличнаяЧасть.СписатьНаРасходы)
	|			ТОГДА ТабличнаяЧасть.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ Получатель,
	|	МИНИМУМ(ТабличнаяЧасть.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ НомераСтрок
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабличнаяЧасть
	|ГДЕ
	|	(ТабличнаяЧасть.Ссылка, ТабличнаяЧасть.Номенклатура, ТабличнаяЧасть.Характеристика, ТабличнаяЧасть.Назначение, ТабличнаяЧасть.Спецификация) В
	|		(ВЫБРАТЬ
	|			Таблица.Распоряжение КАК Ссылка,
	|			Таблица.Номенклатура КАК Номенклатура,
	|			Таблица.Характеристика КАК Характеристика,
	|			Таблица.Назначение КАК Назначение,
	|			Таблица.Спецификация КАК Спецификация
	|		ИЗ
	|			ДанныеДляФормирования КАК Таблица)
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Назначение,
	|	ТабличнаяЧасть.Спецификация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			ТОГДА ТабличнаяЧасть.Склад
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) 
	|			И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|			ТОГДА ТабличнаяЧасть.Склад
	|		КОГДА ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			И (ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|				ИЛИ ТабличнаяЧасть.СписатьНаРасходы)
	|			ТОГДА ТабличнаяЧасть.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение, Номенклатура, Характеристика, Назначение, Спецификация, Отправитель, Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Распоряжение КАК Распоряжение,
	|
	|	ВЫБОР
	|		КОГДА &ТекстОбособленно
	|			ТОГДА ВЫБОР
	|					КОГДА Таблица.ЭтапИсточник = ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ТипПроизводственногоПроцесса В (
	|												ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|												ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|									ТОГДА Таблица.Назначение
	|								ИНАЧЕ ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).НазначениеПродукция
	|							КОНЕЦ
	|					ИНАЧЕ ВЫРАЗИТЬ(Таблица.ЭтапИсточник КАК Документ.ЭтапПроизводства2_2).НазначениеПродукция
	|				КОНЕЦ
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК НазначениеПродукция,
	|
	|	ВЫБОР
	|		КОГДА &ТекстОбособленно
	|			ТОГДА ВЫБОР
	|					КОГДА Таблица.ЭтапИсточник = ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ТипПроизводственногоПроцесса В (
	|															ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|															ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|									ТОГДА Таблица.Назначение
	|								ИНАЧЕ ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).НазначениеПродукция
	|							КОНЕЦ
	|					ИНАЧЕ ВЫРАЗИТЬ(Таблица.ЭтапИсточник КАК Документ.ЭтапПроизводства2_2).НазначениеПродукция
	|				КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ВариантОбособления В (
	|															ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
	|															ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции),
	|															ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство),
	|															ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ДоговорДавальца))
	|					ТОГДА ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).Назначение
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК НазначениеМатериалы,
	|
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Назначение     КАК Назначение,
	|
	|	Таблица.Спецификация КАК Спецификация,
	|
	|	Таблица.Отправитель  КАК Отправитель,
	|	Таблица.Получатель   КАК Получатель,
	|
	|	Таблица.ЭтапИсточник КАК ЭтапИсточник,
	|
	|	Таблица.СписатьНаРасходы         КАК СписатьНаРасходы,
	|	Таблица.СтатьяРасходов           КАК СтатьяРасходов,
	|	Таблица.АналитикаРасходов        КАК АналитикаРасходов,
	|	Таблица.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|
	|	ЕСТЬNULL(НомераСтрок.НомерСтроки, 100000) КАК НомерСтроки,
	|
	|	Таблица.Количество КАК Количество
	|
	|ПОМЕСТИТЬ ВтДанныеДляФормированияЭтапов
	|ИЗ
	|	ДанныеДляФормирования КАК Таблица
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ НомераСтрок КАК НомераСтрок
	|	ПО Таблица.Распоряжение = НомераСтрок.Распоряжение
	|		И Таблица.Номенклатура = НомераСтрок.Номенклатура
	|		И Таблица.Характеристика = НомераСтрок.Характеристика
	|		И Таблица.Назначение = НомераСтрок.Назначение
	|		И Таблица.Спецификация = НомераСтрок.Спецификация
	|		И Таблица.Отправитель = НомераСтрок.Отправитель
	|		И Таблица.Получатель = НомераСтрок.Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДляФормирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НомераСтрок
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОбособленно", ТекстЗапросаПолеОбособленно("Таблица.Распоряжение"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДанныеДляФормирования", ДанныеДляФормирования);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура РаспределитьКоличество(Требуется, Запланировано, Аналитика, Остаток = Неопределено)
	
	Отбор = Новый Структура(Аналитика);
	
	Для каждого СтрокаТребуется Из Требуется Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТребуется);
		Остатки = Запланировано.НайтиСтроки(Отбор);
		
		Для каждого СтрокаОстаток Из Остатки Цикл
			Если СтрокаОстаток.Количество > 0 Тогда
				Сторно = Мин(СтрокаТребуется.Количество, СтрокаОстаток.Количество);
				СтрокаОстаток.Количество = СтрокаОстаток.Количество - Сторно;
				СтрокаТребуется.Количество = СтрокаТребуется.Количество - Сторно;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаТребуется.Количество > 0 И Остаток <> Неопределено Тогда
			Остаток.Добавить(СтрокаТребуется);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  ТаблицаЗначений - Структура данных для формирования этапов конструктор:
// * Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2
// * Номенклатура - СправочникСсылка.Номенклатура
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
// * Спецификация - СправочникСсылка.РесурсныеСпецификации
// * Получатель - СправочникСсылка.СтруктураПредприятия,СправочникСсылка.Склады
// * Отправитель - СправочникСсылка.Склады
// * Назначение - СправочникСсылка.Назначения
// * ЭтапИсточник - ДокументСсылка.ЭтапПроизводства2_2
// * СписатьНаРасходы - Булево
// * СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов,ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов
// * АналитикаРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов
// * АналитикаАктивовПассивов - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов
// * Количество - Число
Функция СтруктураДанныхДляФормированияЭтаповКонструктор()
	
	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2");
	Результат.Колонки.Добавить("Распоряжение", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Результат.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	Результат.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации");
	Результат.Колонки.Добавить("Спецификация", ОписаниеТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Склады"));

	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Результат.Колонки.Добавить("Получатель", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Склады");
	Результат.Колонки.Добавить("Отправитель", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	Результат.Колонки.Добавить("Назначение", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	Результат.Колонки.Добавить("ЭтапИсточник", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Результат.Колонки.Добавить("СписатьНаРасходы", ОписаниеТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Результат.Колонки.Добавить("СтатьяРасходов", ОписаниеТипов);
	                                    
	Результат.Колонки.Добавить("АналитикаРасходов", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
	
	Результат.Колонки.Добавить("АналитикаАктивовПассивов", Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.Тип);
	
	ОписаниеТипов = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный);
	Результат.Колонки.Добавить("Количество", ОписаниеТипов);
	
	Возврат Результат;
	
КонецФункции

// Добавляет строки в данные для формирования этапов.
//
// Параметры:
//  Строки - Массив из СтрокаТаблицыЗначений - содержит:
//                      * Источник - ДокументСсылка.ЭтапПроизводства2_2 -
//                      * Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 -
//                      * Номенклатура - СправочникСсылка.Номенклатура -
//                      * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
//                      * Назначение - СправочникСсылка.Назначения -
//                      * Этап - ДокументСсылка.ЭтапПроизводства2_2 -
//                      * Склад - СправочникСсылка.Склады -
//                      * Подразделение - СправочникСсылка.СтруктураПредприятия -
//                      * Спецификация - СправочникСсылка.РесурсныеСпецификации -
//                      * СписатьНаРасходы - Булево -
//                      * СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов, ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов -
//                      * АналитикаРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов -
//                      * АналитикаАктивовПассивов - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов -
//                      * Количество - Число -
//  Таблица     - см. СтруктураДанныхДляФормированияЭтаповКонструктор
//  Направление - Число -
//
Процедура ДобавитьСтрокиВДанныеДляФормированияЭтапов(Строки, Таблица, Направление)
	
	Для каждого Строка Из Строки Цикл
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(
			НоваяСтрока,
			Строка,
			"Распоряжение,
			|Номенклатура,
			|Характеристика,
			|Спецификация,
			|СписатьНаРасходы,
			|СтатьяРасходов,
			|АналитикаРасходов,
			|АналитикаАктивовПассивов,
			|Количество");

		Если Направление > 0 Тогда

			НоваяСтрока.Назначение   = Строка.Назначение;
			НоваяСтрока.ЭтапИсточник = Строка.Источник;

			НоваяСтрока.Отправитель = Справочники.Склады.ПустаяСсылка();
			НоваяСтрока.Получатель = ?(ЗначениеЗаполнено(Строка.Склад), Строка.Склад, Строка.Подразделение);

		ИначеЕсли Направление < 0 Тогда
			
			НоваяСтрока.Назначение   = Справочники.Назначения.ПустаяСсылка();
			НоваяСтрока.ЭтапИсточник = Строка.Источник;
			
			НоваяСтрока.Отправитель = Строка.Склад;
			НоваяСтрока.Получатель  = Справочники.Склады.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаВТТребуетсяСформироватьЭтапы() Экспорт
	
	ТекстыЗапросов = Новый Массив;
	
	ТекстыЗапросаНоменклатураКПроизводству =
		ТекстыЗапросаНоменклатураКПроизводству(Истина,, Ложь, "Распоряжение В (&МассивСсылок)");
		
	ТекстыЗапросов.Добавить(ТекстыЗапросаНоменклатураКПроизводству.ТекстЗапросаИсточник);
	ТекстыЗапросов.Добавить(ТекстыЗапросаНоменклатураКПроизводству.ТекстЗапросаДополнительный);
	ТекстыЗапросов.Добавить(ТекстыЗапросаНоменклатураКПроизводству.ТекстЗапросаОсновной);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Распоряжение КАК Ссылка
	|ПОМЕСТИТЬ ВтТребуетсяСформироватьЭтапы
	|ИЗ
	|	ВТНоменклатураКПроизводству КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Распоряжение
	|ИМЕЮЩИЕ
	|	(ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЗаказНаПроизводство2_2 КАК Т
	|			ГДЕ
	|				Т.Ссылка = Таблица.Распоряжение
	|				И Т.ТипПроизводственногоПроцесса В (
	|						ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)))
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ОбеспечениеПроизводственныхПроцессов КАК Т
	|			ГДЕ
	|				Т.Распоряжение = Таблица.Распоряжение
	|				И Т.Запланировано + Т.ПереданоКПроизводству + Т.Производится + Т.Произведено > 0)
	|)";
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура СоздатьВТЭтапыОбеспечивающиеЗаказы(МенеджерВременныхТаблиц, Распоряжения) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка КАК Заказ,
		|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Назначение КАК Назначение,
		|	ТабличнаяЧасть.Склад КАК Склад,
		|	ТабличнаяЧасть.Спецификация КАК Спецификация,
		|	СУММА(ТабличнаяЧасть.Количество) КАК Количество,
		|	ВЫБОР
		|		КОГДА Документ.ТипПроизводственногоПроцесса = &Разборка
		|			ТОГДА &Разборка
		|		ИНАЧЕ &Сборка
		|	КОНЕЦ КАК ТипПроцесса,
		|	МИНИМУМ(ТабличнаяЧасть.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТНоменклатураЗаказано
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК Документ
		|		ПО ТабличнаяЧасть.Ссылка = Документ.Ссылка
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка В(&Заказы)
		|	И Документ.Проведен
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.Склад,
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Спецификация,
		|	ВЫБОР
		|		КОГДА Документ.ТипПроизводственногоПроцесса = &Разборка
		|			ТОГДА &Разборка
		|		ИНАЧЕ &Сборка
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документ.Распоряжение КАК Заказ,
		|	Документ.Ссылка КАК Этап,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА &Разборка
		|		ИНАЧЕ &Сборка
		|	КОНЕЦ КАК ТипПроцесса,
		|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Назначение КАК Назначение,
		|	ТабличнаяЧасть.Получатель КАК Склад,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА ТабличнаяЧасть.Спецификация
		|		ИНАЧЕ Документ.Спецификация
		|	КОНЕЦ КАК Спецификация,
		|	СУММА(ТабличнаяЧасть.Количество) КАК Количество,
		|	ТабличнаяЧасть.Произведено КАК Произведено
		|ПОМЕСТИТЬ ВТВыпуск
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документ
		|		ПО ТабличнаяЧасть.Ссылка = Документ.Ссылка
		|ГДЕ
		|	Документ.Распоряжение В(&Заказы)
		|	И Документ.Проведен
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.Получатель,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА ТабличнаяЧасть.Спецификация
		|		ИНАЧЕ Документ.Спецификация
		|	КОНЕЦ,
		|	Документ.Ссылка,
		|	Документ.Распоряжение,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА &Разборка
		|		ИНАЧЕ &Сборка
		|	КОНЕЦ,
		|	ТабличнаяЧасть.Произведено
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Документ.Распоряжение,
		|	Документ.Ссылка,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА &Разборка
		|		ИНАЧЕ &Сборка
		|	КОНЕЦ,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.Получатель,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА ТабличнаяЧасть.Спецификация
		|		ИНАЧЕ Документ.Спецификация
		|	КОНЕЦ,
		|	СУММА(ТабличнаяЧасть.Количество),
		|	ТабличнаяЧасть.Произведено
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документ
		|		ПО ТабличнаяЧасть.Ссылка = Документ.Ссылка
		|ГДЕ
		|	Документ.Распоряжение В(&Заказы)
		|	И Документ.Проведен
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.Получатель,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА ТабличнаяЧасть.Спецификация
		|		ИНАЧЕ Документ.Спецификация
		|	КОНЕЦ,
		|	Документ.Ссылка,
		|	Документ.Распоряжение,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА &Разборка
		|		ИНАЧЕ &Сборка
		|	КОНЕЦ,
		|	ТабличнаяЧасть.Произведено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документ.Распоряжение КАК Заказ,
		|	Документ.Ссылка КАК Этап,
		|	&Сборка КАК ТипПроцесса,
		|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Обособленно
		|			ТОГДА ТабличнаяЧасть.Назначение
		|		ИНАЧЕ &ПустоеНазначение
		|	КОНЕЦ КАК Назначение,
		|	ТабличнаяЧасть.Склад КАК Склад,
		|	ТабличнаяЧасть.Спецификация КАК Спецификация,
		|	СУММА(ТабличнаяЧасть.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТОбеспечение
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документ
		|		ПО ТабличнаяЧасть.Ссылка = Документ.Ссылка
		|ГДЕ
		|	Документ.Распоряжение В(&Заказы)
		|	И Документ.Проведен
		|	И ТабличнаяЧасть.Производится
		|	И ТабличнаяЧасть.Спецификация <> &ПустаяСпецификация
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Склад,
		|	ТабличнаяЧасть.Номенклатура,
		|	Документ.Ссылка,
		|	ТабличнаяЧасть.Спецификация,
		|	Документ.Распоряжение,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Обособленно
		|			ТОГДА ТабличнаяЧасть.Назначение
		|		ИНАЧЕ &ПустоеНазначение
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Документ.Распоряжение,
		|	Документ.Ссылка,
		|	&Разборка,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Обособленно
		|			ТОГДА ТабличнаяЧасть.Назначение
		|		ИНАЧЕ &ПустоеНазначение
		|	КОНЕЦ,
		|	ТабличнаяЧасть.Склад,
		|	Документ.Спецификация,
		|	СУММА(ТабличнаяЧасть.Количество)
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документ
		|		ПО ТабличнаяЧасть.Ссылка = Документ.Ссылка
		|ГДЕ
		|	Документ.Распоряжение В(&Заказы)
		|	И Документ.Проведен
		|	И Документ.ТипПроизводственногоПроцесса = &Разборка
		|	И НЕ ТабличнаяЧасть.Производится
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	Документ.Ссылка,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Склад,
		|	ТабличнаяЧасть.Характеристика,
		|	Документ.Распоряжение,
		|	Документ.Спецификация,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Обособленно
		|			ТОГДА ТабличнаяЧасть.Назначение
		|		ИНАЧЕ &ПустоеНазначение
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТЗаказано.Номенклатура КАК Номенклатура,
		|	ВТЗаказано.Характеристика КАК Характеристика,
		|	ВТЗаказано.Назначение КАК Назначение,
		|	ВТЗаказано.Склад КАК Склад,
		|	ВТЗаказано.Спецификация КАК Спецификация,
		|	ВТЗаказано.Заказ КАК Заказ,
		|	ВТВыпуск.Этап КАК Этап
		|ПОМЕСТИТЬ ВТЭтапыОбеспечивающиеЗаказы
		|	
		|ИЗ
		|	ВТНоменклатураЗаказано КАК ВТЗаказано
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыпуск КАК ВТВыпуск
		|		ПО ВТЗаказано.Заказ = ВТВыпуск.Заказ
		|			И ВТЗаказано.Номенклатура = ВТВыпуск.Номенклатура
		|			И ВТЗаказано.Характеристика = ВТВыпуск.Характеристика
		|			И ВТЗаказано.Назначение = ВТВыпуск.Назначение
		|			И ВТЗаказано.Склад = ВТВыпуск.Склад
		|			И ВТЗаказано.Спецификация = ВТВыпуск.Спецификация
		|			И ВТЗаказано.ТипПроцесса = ВТВыпуск.ТипПроцесса
		|ГДЕ
		|	ВТЗаказано.ТипПроцесса = &Сборка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТЗаказано.Номенклатура,
		|	ВТЗаказано.Характеристика,
		|	ВТЗаказано.Назначение,
		|	ВТЗаказано.Склад,
		|	ВТЗаказано.Спецификация,
		|	ВТЗаказано.Заказ,
		|	ВТОбеспечение.Этап
		|ИЗ
		|	ВТНоменклатураЗаказано КАК ВТЗаказано
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбеспечение КАК ВТОбеспечение
		|		ПО ВТЗаказано.Заказ = ВТОбеспечение.Заказ
		|			И ВТЗаказано.Номенклатура = ВТОбеспечение.Номенклатура
		|			И ВТЗаказано.Характеристика = ВТОбеспечение.Характеристика
		|			И ВТЗаказано.Назначение = ВТОбеспечение.Назначение
		|			И ВТЗаказано.Склад = ВТОбеспечение.Склад
		|			И ВТЗаказано.Спецификация = ВТОбеспечение.Спецификация
		|			И ВТЗаказано.ТипПроцесса = ВТОбеспечение.ТипПроцесса
		|ГДЕ
		|	ВТЗаказано.ТипПроцесса = &Разборка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Заказы", Распоряжения);
	Запрос.УстановитьПараметр("ПустоеНазначение", Справочники.Назначения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСпецификация", Справочники.РесурсныеСпецификации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Сборка", Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	Запрос.УстановитьПараметр("Разборка", Перечисления.ТипыПроизводственныхПроцессов.Разборка);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВтСпособыПолученияМатериалов2_2(МенеджерВременныхТаблиц, Распоряжения) Экспорт
	
	// Процедура инициализирует переопределение НСИ для конкретного заказа (Склад, признак Обособленно).
	// Переопределение способов в динамической структуре не актуально и не должно действовать.
	// Процедура создает временные таблицы они могут переиспользоваться в процессе формирования этапов. Например, при замене на аналоги, в процедуре СоздатьВтИсключенияЗаменаНаАналоги.
	Запрос = Новый Запрос();
	Запрос.Текст =
		ТекстЗапросаОбеспечениеЗаказаДавальческиеМатериалы(Истина)
		+ ОбщегоНазначенияУТ.РазделительЗапросовВПакете() 
		+ ТекстЗапросаОбеспечениеЗаказаРазбираемыеИзделия(Истина)
		+ ОбщегоНазначенияУТ.РазделительЗапросовВПакете()
		+ ТекстЗапросаВтСпособыПолученияМатериалов2_2(Истина); 
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаВтСпособыПолученияМатериалов2_2(ИсточникиДанныхФормируютсяОтдельно = Ложь) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Материалы.Распоряжение      КАК Распоряжение,
		|	Материалы.Номенклатура      КАК Номенклатура,
		|	Материалы.Характеристика    КАК Характеристика,
		|	Материалы.Склад             КАК Склад,
		|	ИСТИНА                      КАК Обособленно
		|
		|ПОМЕСТИТЬ ВтСпособыПолученияМатериалов
		|ИЗ
		|	ВтОбеспечениеЗаказаДавальческиеМатериалы КАК Материалы
		|
		|ГДЕ
		|	НЕ Материалы.ДинамическаяСтруктура
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РазбираемыеИзделия.Распоряжение      КАК Распоряжение,
		|	РазбираемыеИзделия.Номенклатура      КАК Номенклатура,
		|	РазбираемыеИзделия.Характеристика    КАК Характеристика,
		|	РазбираемыеИзделия.Склад             КАК Склад,
		|	НЕОПРЕДЕЛЕНО                         КАК Обособленно
		|ИЗ
		|	ВтОбеспечениеЗаказаРазбираемыеИзделия КАК РазбираемыеИзделия
		|
		|ГДЕ
		|	НЕ РазбираемыеИзделия.ДинамическаяСтруктура
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказыНаПроизводство.Ссылка КАК Распоряжение,
		|	НЕОПРЕДЕЛЕНО                КАК Номенклатура,
		|	НЕОПРЕДЕЛЕНО                КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО                КАК Склад,
		|	ИСТИНА                      КАК Обособленно
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказыНаПроизводство
		|ГДЕ
		|	ЗаказыНаПроизводство.Ссылка В(&Распоряжения)
		|		И ЗаказыНаПроизводство.ОбособленноеОбеспечениеМатериаловИРабот
		|		И НЕ ЗаказыНаПроизводство.ДинамическаяСтруктура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Номенклатура,
		|	Характеристика,
		|	Склад";
		
	Если Не ИсточникиДанныхФормируютсяОтдельно Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтОбеспечениеЗаказаДавальческиеМатериалы", "(" + ТекстЗапросаОбеспечениеЗаказаДавальческиеМатериалы() + ")");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтОбеспечениеЗаказаРазбираемыеИзделия", "(" + ТекстЗапросаОбеспечениеЗаказаРазбираемыеИзделия() + ")");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СоздатьВтИсключенияЗаменаНаАналоги(МенеджерВременныхТаблиц, Распоряжения) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Материалы.Распоряжение      КАК Распоряжение,
		|	Материалы.Номенклатура      КАК Номенклатура,
		|	Материалы.Характеристика    КАК Характеристика,
		|	Материалы.Склад             КАК Склад
		|
		|ПОМЕСТИТЬ ВтИсключенияЗаменаНаАналоги
		|ИЗ
		|	ВтОбеспечениеЗаказаДавальческиеМатериалы КАК Материалы
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РазбираемыеИзделия.Распоряжение      КАК Распоряжение,
		|	РазбираемыеИзделия.Номенклатура      КАК Номенклатура,
		|	РазбираемыеИзделия.Характеристика    КАК Характеристика,
		|	РазбираемыеИзделия.Склад             КАК Склад
		|ИЗ
		|	ВтОбеспечениеЗаказаРазбираемыеИзделия КАК РазбираемыеИзделия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Номенклатура,
		|	Характеристика,
		|	Склад";  
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтОбеспечениеЗаказаДавальческиеМатериалы") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтОбеспечениеЗаказаДавальческиеМатериалы", "(" + ТекстЗапросаОбеспечениеЗаказаДавальческиеМатериалы() + ")");
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтОбеспечениеЗаказаРазбираемыеИзделия") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтОбеспечениеЗаказаРазбираемыеИзделия", "(" + ТекстЗапросаОбеспечениеЗаказаРазбираемыеИзделия() + ")");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаОбеспечениеЗаказаДавальческиеМатериалы(ПоместитьВоВременнуюТаблицу = Ложь)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказыНаПроизводство.Ссылка                КАК Распоряжение,
		|	ЗаказыНаПроизводство.ДинамическаяСтруктура КАК ДинамическаяСтруктура,
		|	ТаблицаМатериалы.Номенклатура              КАК Номенклатура,
		|	ТаблицаМатериалы.Характеристика            КАК Характеристика,
		|	МАКСИМУМ(ТаблицаМатериалы.Склад)           КАК Склад
		|
		|ПОМЕСТИТЬ ВтОбеспечениеЗаказаДавальческиеМатериалы
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказыНаПроизводство
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2.Продукция КАК ПродукцияЗаказаНаПроизводство
		|		ПО ПродукцияЗаказаНаПроизводство.Ссылка = ЗаказыНаПроизводство.Ссылка
		|		И НЕ ПродукцияЗаказаНаПроизводство.Отменено
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца2_5 КАК ЗаказыДавальца
		|		ПО ЗаказыДавальца.Назначение = ПродукцияЗаказаНаПроизводство.Назначение
		|		И ЗаказыДавальца.Проведен
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца2_5.Материалы КАК ТаблицаМатериалы
		|		ПО ТаблицаМатериалы.Ссылка = ЗаказыДавальца.Ссылка
		|ГДЕ
		|	ЗаказыНаПроизводство.Ссылка В(&Распоряжения)
		|	И ЗаказыНаПроизводство.ТипПроизводственногоПроцесса В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
		|	И ЗаказыНаПроизводство.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)
		|	И НЕ ТаблицаМатериалы.Ссылка ЕСТЬ NULL
		|	И НЕ ТаблицаМатериалы.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыНаПроизводство.Ссылка,
		|	ЗаказыНаПроизводство.ДинамическаяСтруктура,
		|	ТаблицаМатериалы.Номенклатура,
		|	ТаблицаМатериалы.Характеристика
		//++ Устарело_Переработка24
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказыНаПроизводство.Ссылка                КАК Распоряжение,
		|	ЗаказыНаПроизводство.ДинамическаяСтруктура КАК ДинамическаяСтруктура,
		|	ТаблицаМатериалы.Номенклатура              КАК Номенклатура,
		|	ТаблицаМатериалы.Характеристика            КАК Характеристика,
		|	МАКСИМУМ(ТаблицаМатериалы.Склад)           КАК Склад
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказыНаПроизводство
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2.Продукция КАК ПродукцияЗаказаНаПроизводство
		|		ПО ПродукцияЗаказаНаПроизводство.Ссылка = ЗаказыНаПроизводство.Ссылка
		|		 И НЕ ПродукцияЗаказаНаПроизводство.Отменено
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца КАК ЗаказыДавальца
		|		ПО ЗаказыДавальца.Назначение = ПродукцияЗаказаНаПроизводство.Назначение
		|		 И ЗаказыДавальца.Проведен
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца.Материалы КАК ТаблицаМатериалы
		|		ПО ТаблицаМатериалы.Ссылка = ЗаказыДавальца.Ссылка
		|ГДЕ
		|	ЗаказыНаПроизводство.Ссылка В(&Распоряжения)
		|	И ЗаказыНаПроизводство.ТипПроизводственногоПроцесса В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
		|	И ЗаказыНаПроизводство.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
		|	И НЕ ТаблицаМатериалы.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыНаПроизводство.Ссылка,
		|	ЗаказыНаПроизводство.ДинамическаяСтруктура,
		|	ТаблицаМатериалы.Номенклатура,
		|	ТаблицаМатериалы.Характеристика
		//-- Устарело_Переработка24
		|";
	Если Не ПоместитьВоВременнуюТаблицу Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВтОбеспечениеЗаказаДавальческиеМатериалы", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбеспечениеЗаказаРазбираемыеИзделия(ПоместитьВоВременнуюТаблицу = Ложь)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказыНаПроизводство.Ссылка                   КАК Распоряжение,
		|	ЗаказыНаПроизводство.ДинамическаяСтруктура    КАК ДинамическаяСтруктура,
		|	ПродукцияЗаказаНаПроизводство.Номенклатура    КАК Номенклатура,
		|	ПродукцияЗаказаНаПроизводство.Характеристика  КАК Характеристика,
		|	МАКСИМУМ(ПродукцияЗаказаНаПроизводство.Склад) КАК Склад
		|
		|ПОМЕСТИТЬ ВтОбеспечениеЗаказаРазбираемыеИзделия
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказыНаПроизводство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2.Продукция КАК ПродукцияЗаказаНаПроизводство
		|		ПО ПродукцияЗаказаНаПроизводство.Ссылка = ЗаказыНаПроизводство.Ссылка
		|		И НЕ ПродукцияЗаказаНаПроизводство.Отменено
		|ГДЕ
		|	ЗаказыНаПроизводство.Ссылка В (&Распоряжения)
		|	И ЗаказыНаПроизводство.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|	И НЕ ЗаказыНаПроизводство.ДинамическаяСтруктура
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыНаПроизводство.Ссылка,
		|	ЗаказыНаПроизводство.ДинамическаяСтруктура,
		|	ПродукцияЗаказаНаПроизводство.Номенклатура,
		|	ПродукцияЗаказаНаПроизводство.Характеристика
		|";
	Если Не ПоместитьВоВременнуюТаблицу Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВтОбеспечениеЗаказаРазбираемыеИзделия", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СостояниеЗаказа

Функция ТекстЗапросаВТНезавершенныеЗаказы() Экспорт
	
	ТекстыВременныеТаблицы = Новый Массив;
	ТекстыВыборка = Новый Массив;

	// статическая структура
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|
		|	Таблица.Распоряжение        КАК Распоряжение,
		|	Таблица.Номенклатура        КАК Номенклатура,
		|	Таблица.Характеристика      КАК Характеристика,
		|	Таблица.Назначение          КАК Назначение
		|
		|ПОМЕСТИТЬ ВтОтборПродукцииСС
		|ИЗ
		|	РегистрНакопления.ОбеспечениеПроизводственныхПроцессов КАК Таблица
		|ГДЕ
		|	Таблица.Регистратор В (&МассивСсылок) И Таблица.Требуется > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение
		|";
	ТекстыВременныеТаблицы.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Распоряжение КАК Ссылка
		|
		|ИЗ
		|	(ВЫБРАТЬ
		|		Таблица.Распоряжение   КАК Распоряжение,
		|		Таблица.Номенклатура   КАК Номенклатура,
		|		Таблица.Характеристика КАК Характеристика,
		|		Таблица.Назначение     КАК Назначение
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеПроизводственныхПроцессов КАК Таблица
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОтборПродукцииСС КАК Отбор
		|		ПО Отбор.Распоряжение = Таблица.Распоряжение
		|		И Отбор.Номенклатура = Таблица.Номенклатура
		|		И Отбор.Характеристика = Таблица.Характеристика
		|		И Отбор.Назначение = Таблица.Назначение
		|
		|СГРУППИРОВАТЬ ПО
		|		Таблица.Распоряжение,
		|		Таблица.Номенклатура,
		|		Таблица.Характеристика,
		|		Таблица.Назначение
		|
		|	ИМЕЮЩИЕ
		|		СУММА(Таблица.Требуется)
		|			* ВЫБОР
		|				КОГДА Таблица.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (
		|														ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|														ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
		|														ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|														ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
		|					ТОГДА 1 - &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100
		|				ИНАЧЕ 1
		|			КОНЕЦ > СУММА(Таблица.Произведено)
		|	
		|	) КАК Таблица
		|";
	ТекстыВыборка.Добавить(ТекстЗапроса);
	
	// динамическая структура
	Если ПолучитьФункциональнуюОпцию("ДинамическаяСтруктураЗаказовНаПроизводство") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|
			|	Таблица.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
			|	Таблица.Номенклатура        КАК Номенклатура,
			|	Таблица.Характеристика      КАК Характеристика,
			|	Таблица.Назначение          КАК Назначение
			|
			|ПОМЕСТИТЬ ВтОтборПродукцииДС
			|ИЗ
			|	РегистрСведений.ЗаказыНаПроизводство КАК Таблица
			|ГДЕ
			|	Таблица.Регистратор В (&МассивСсылок) И Таблица.Заказано > 0
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЗаказНаПроизводство,
			|	Номенклатура,
			|	Характеристика,
			|	Назначение
			|";
		ТекстыВременныеТаблицы.Добавить(ТекстЗапроса);
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.ЗаказНаПроизводство КАК Ссылка
			|
			|ИЗ
			|	(ВЫБРАТЬ
			|		Таблица.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
			|		Таблица.Номенклатура        КАК Номенклатура,
			|		Таблица.Характеристика      КАК Характеристика,
			|		Таблица.Назначение          КАК Назначение
			|	ИЗ
			|		РегистрСведений.ЗаказыНаПроизводство КАК Таблица
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОтборПродукцииДС КАК Отбор
			|		ПО Отбор.ЗаказНаПроизводство = Таблица.ЗаказНаПроизводство
			|		И Отбор.Номенклатура = Таблица.Номенклатура
			|		И Отбор.Характеристика = Таблица.Характеристика
			|		И Отбор.Назначение = Таблица.Назначение
			|
			|СГРУППИРОВАТЬ ПО
			|		Таблица.ЗаказНаПроизводство,
			|		Таблица.Номенклатура,
			|		Таблица.Характеристика,
			|		Таблица.Назначение
			|
			|	ИМЕЮЩИЕ
			|		СУММА(Таблица.Заказано)
			|			* ВЫБОР
			|				КОГДА Таблица.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (
			|													ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
			|													ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
			|													ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
			|													ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
			|					ТОГДА 1 - &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100
			|				ИНАЧЕ 1
			|			КОНЕЦ > СУММА(Таблица.Готово)
			|	) КАК Таблица
			|";
		ТекстыВыборка.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ТекстыВременныеТаблицы, ОбщегоНазначения.РазделительПакетаЗапросов())
		+ ОбщегоНазначения.РазделительПакетаЗапросов()
		+ СтрЗаменить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВтНезавершенныеЗаказы
			|ИЗ
			|	ОбъединениеТаблицВыборкиДанных КАК Таблица",
			"ОбъединениеТаблицВыборкиДанных",
			"(" + СтрСоединить(ТекстыВыборка, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()) + ")");

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКонтрольЗакрытияЗаказа()
	
	ТекстыВыборка = Новый Массив;
	ТекстыВременныеТаблицы = Новый Массив;
	
#Область НоменклатураКПроизводству
	
	// статическая структура
	ТекстыЗапросаНоменклатураКПроизводству =
		ТекстыЗапросаНоменклатураКПроизводству(Истина,, Ложь, "Распоряжение В (&МассивСсылок)");
	
	ТекстыВременныеТаблицы.Добавить(ТекстыЗапросаНоменклатураКПроизводству.ТекстЗапросаИсточник);
	ТекстыВременныеТаблицы.Добавить(ТекстыЗапросаНоменклатураКПроизводству.ТекстЗапросаДополнительный);
	ТекстыВременныеТаблицы.Добавить(ТекстыЗапросаНоменклатураКПроизводству.ТекстЗапросаОсновной);
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Распоряжение КАК Ссылка
		|ИЗ
		|	ВТНоменклатураКПроизводству КАК Таблица
		|";
	ТекстыВыборка.Добавить(ТекстЗапроса); 
	
	// динамическая структура
	Если ПолучитьФункциональнуюОпцию("ДинамическаяСтруктураЗаказовНаПроизводство") Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|
			|	Таблица.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
			|	Таблица.Номенклатура        КАК Номенклатура,
			|	Таблица.Характеристика      КАК Характеристика,
			|	Таблица.Назначение          КАК Назначение
			|
			|ПОМЕСТИТЬ ВтОтборПродукцииДС
			|ИЗ
			|	РегистрСведений.ЗаказыНаПроизводство КАК Таблица
			|ГДЕ
			|	Таблица.Регистратор В (&МассивСсылок) И Таблица.Заказано > 0
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЗаказНаПроизводство,
			|	Номенклатура,
			|	Характеристика,
			|	Назначение
			|";
		ТекстыВременныеТаблицы.Добавить(ТекстЗапроса);
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.ЗаказНаПроизводство КАК Ссылка
			|
			|ИЗ
			|	(ВЫБРАТЬ
			|		Таблица.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
			|		Таблица.Номенклатура        КАК Номенклатура,
			|		Таблица.Характеристика      КАК Характеристика,
			|		Таблица.Назначение          КАК Назначение
			|	ИЗ
			|		РегистрСведений.ЗаказыНаПроизводство КАК Таблица
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОтборПродукцииДС КАК Отбор
			|		ПО Отбор.ЗаказНаПроизводство = Таблица.ЗаказНаПроизводство
			|		И Отбор.Номенклатура = Таблица.Номенклатура
			|		И Отбор.Характеристика = Таблица.Характеристика
			|		И Отбор.Назначение = Таблица.Назначение
			|
			|СГРУППИРОВАТЬ ПО
			|		Таблица.ЗаказНаПроизводство,
			|		Таблица.Номенклатура,
			|		Таблица.Характеристика,
			|		Таблица.Назначение
			|
			|	ИМЕЮЩИЕ
			|		СУММА(Таблица.Заказано)
			|			* ВЫБОР
			|				КОГДА Таблица.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (
			|													ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
			|													ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
			|													ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
			|													ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
			|					ТОГДА 1 - &ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100
			|				ИНАЧЕ 1
			|			КОНЕЦ > СУММА(Таблица.Готово)
			|	) КАК Таблица
			|";
		ТекстыВыборка.Добавить(ТекстЗапроса);
		
	КонецЕсли;

#КонецОбласти

#Область ЭтапыВРаботе
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Распоряжение
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)
		|	И ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			РегистрСведений.СостоянияЭтаповПроизводства КАК СостоянияЭтаповПроизводства
		|		ГДЕ
		|			СостоянияЭтаповПроизводства.Распоряжение = Таблица.Ссылка
		|			И СостоянияЭтаповПроизводства.СостояниеНаМежцеховомУровне <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.Завершен))
		|";
	ТекстыВыборка.Добавить(ТекстЗапроса);

#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыВременныеТаблицы, ОбщегоНазначения.РазделительПакетаЗапросов())
		+ ОбщегоНазначения.РазделительПакетаЗапросов()
		+ СтрЗаменить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВтКонтрольЗакрытияЗаказа
			|ИЗ
			|	ОбъединениеТаблицВыборкиДанных КАК Таблица",
			"ОбъединениеТаблицВыборкиДанных",
			"(" + СтрСоединить(ТекстыВыборка, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()) + ")");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ВыполнитьПодстановкуТекстЗапросаКонтрольЗакрытияЗаказа(ТекстЗапроса, КонтролироватьВыполнениеЗаказов)
	
	Если Не КонтролироватьВыполнениеЗаказов Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрольЗакрытияЗаказа", "ЛОЖЬ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СоединениеКонтрольЗакрытияЗаказа,", "");
		
		Возврат;
	КонецЕсли;
	
	Пакет = Новый Массив;
	Пакет.Добавить(ТекстЗапросаКонтрольЗакрытияЗаказа());
	
	ПолеПодстановки = "
	|	ВЫБОР
	|		КОГДА ВтКонтрольЗакрытияЗаказа.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрольЗакрытияЗаказа", ПолеПодстановки);
	
	ПолеПодстановки = "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВтКонтрольЗакрытияЗаказа
	|ПО
	|	ВтКонтрольЗакрытияЗаказа.Ссылка = ТаблицаДокументов.Ссылка";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СоединениеКонтрольЗакрытияЗаказа,", ПолеПодстановки);
	
	Пакет.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(Пакет, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецПроцедуры

Функция ТекстЗапросаКонтрольОтнесенияЗатрат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Затраты.Распоряжение				КАК Распоряжение,
	|	МАКСИМУМ(Затраты.Месяц)	КАК Месяц
	|ПОМЕСТИТЬ ВтЗатраты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка.Распоряжение								КАК Распоряжение,
	|		КОНЕЦПЕРИОДА(ТаблицаТовары.ДатаРасхода, МЕСЯЦ)	КАК Месяц
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТовары
	|	ГДЕ
	|		&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)
	|		И ТаблицаТовары.Ссылка.Распоряжение В (&МассивСсылок)
	|		И ТаблицаТовары.Ссылка.Проведен
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка.Распоряжение											КАК Распоряжение,
	|		КОНЕЦПЕРИОДА(ТаблицаТовары.ДатаВыполнения, МЕСЯЦ)	КАК Месяц
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.Трудозатраты КАК ТаблицаТовары
	|	ГДЕ
	|		&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)
	|		И ТаблицаТовары.Ссылка.Распоряжение В (&МассивСсылок)
	|		И ТаблицаТовары.Ссылка.Проведен
	|		И ТаблицаТовары.Выполнено
	|		И НЕ ТаблицаТовары.Отменено
	|	) КАК Затраты
	|
	|СГРУППИРОВАТЬ ПО
	|	Затраты.Распоряжение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продукция.Распоряжение				КАК Распоряжение,
	|	МАКСИМУМ(Продукция.Месяц)	КАК Месяц
	|ПОМЕСТИТЬ ВтПродукция
	|ИЗ
	|	(ВЫБРАТЬ 
	|		ТаблицаТовары.Ссылка.Распоряжение											КАК Распоряжение,
	|		КОНЕЦПЕРИОДА(ТаблицаТовары.ДатаПроизводства, МЕСЯЦ)	КАК Месяц
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)
	|		И ТаблицаТовары.Ссылка.Распоряжение В (&МассивСсылок)
	|		И ТаблицаТовары.Ссылка.Проведен
	|		И НЕ ТаблицаТовары.Ссылка.ПроизводствоНаСтороне
	|		И ТаблицаТовары.Произведено
	|		И НЕ ТаблицаТовары.Отменено
	//++ Устарело_Переработка24
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ 
	|		ТаблицаТовары.ЭтапПроизводства.Распоряжение			КАК Распоряжение,
	|		КОНЕЦПЕРИОДА(ТаблицаТовары.Ссылка.Дата, МЕСЯЦ)	КАК Месяц
	|	ИЗ
	|		Документ.ОтчетПереработчика.Продукция КАК ТаблицаТовары
	|	ГДЕ
	|		&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)
	|		И ТаблицаТовары.ЭтапПроизводства.Распоряжение В (&МассивСсылок)
	|		И ТаблицаТовары.Ссылка.Проведен
	//-- Устарело_Переработка24
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ 
	|		ТаблицаТовары.ЭтапПроизводства.Распоряжение    КАК Распоряжение,
	|		КОНЕЦПЕРИОДА(ТаблицаТовары.Ссылка.Дата, МЕСЯЦ) КАК Месяц
	|	ИЗ
	|		Документ.ОтчетПереработчика2_5.ВыходныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)
	|		И ТаблицаТовары.ЭтапПроизводства.Распоряжение В (&МассивСсылок)
	|		И ТаблицаТовары.Ссылка.Проведен
	|	) КАК Продукция
	|
	|СГРУППИРОВАТЬ ПО
	|	Продукция.Распоряжение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтЗатраты.Распоряжение КАК Ссылка
	|ПОМЕСТИТЬ ВтКонтрольОтнесенияЗатрат
	|ИЗ
	|	ВтЗатраты КАК ВтЗатраты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтПродукция КАК ВтПродукция
	|	ПО ВтПродукция.Распоряжение = ВтЗатраты.Распоряжение
	|	И ВтПродукция.Месяц < ВтЗатраты.Месяц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ВыполнитьПодстановкуТекстЗапросаКонтрольОтнесенияЗатрат(ТекстЗапроса)
	
	Пакет = Новый Массив;
	Пакет.Добавить(ТекстЗапросаКонтрольОтнесенияЗатрат());
	
	ПолеПодстановки = "
	|	ВЫБОР
	|		КОГДА ВтКонтрольОтнесенияЗатрат.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрольОтнесенияЗатрат", ПолеПодстановки);
	
	ПолеПодстановки = "
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКонтрольОтнесенияЗатрат КАК ВтКонтрольОтнесенияЗатрат
	|	ПО ВтКонтрольОтнесенияЗатрат.Ссылка = ТаблицаДокументов.Ссылка
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СоединениеКонтрольОтнесенияЗатрат", ПолеПодстановки);
	
	Пакет.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(Пакет, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецПроцедуры

#КонецОбласти

#Область Давалец

// Формирует результат запроса по непоставленной части заказов
//
// Параметры:
//	МассивЗаказов - Массив из ДокументСсылка.ЗаказДавальца2_5 - Заказ давальца, для которого необходимо создать/перезаполнить заказ на производство продукции по заказу давальца.
//	ТекущийДокумент - ДокументСсылка.ЗаказНаПроизводство2_2 - Заказ на производство, который необходимо перезаполнить продукцией.
//	ТипПроизводственногоПроцесса - ПеречислениеСсылка.ТипыПроизводственныхПроцессов - отбор строк по типу производственного процесса.
//
// Возвращаемое значение:
//	РезультатЗапроса - результат запроса для заполнения табличной части продукции заказа на производство по заказу давальца.
//
Функция ОстаткиПродукцииКОбеспечениюДавальцу(МассивЗаказов, ТекущийДокумент = Неопределено, ТипПроизводственногоПроцесса = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура           КАК Номенклатура,
		|	Таблица.Характеристика         КАК Характеристика,
		|	Таблица.Ссылка.Назначение      КАК Назначение,
		|	ВЫБОР
		|		КОГДА Таблица.Номенклатура.ТипНоменклатуры В (
		|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			ТОГДА Таблица.Склад
		|		ИНАЧЕ Таблица.Подразделение
		|	КОНЕЦ                          КАК Склад,
		|	СУММА(Таблица.Количество)      КАК Количество,
		|	МАКСИМУМ(Таблица.Спецификация) КАК Спецификация,
		|	МАКСИМУМ(Таблица.Упаковка)     КАК Упаковка,
		|	МИНИМУМ(Таблица.ДатаОтгрузки)  КАК ДатаПотребности
		|ПОМЕСТИТЬ ВтЗаказДавальца
		|ИЗ
		|	Документ.ЗаказДавальца2_5.Продукция КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|	И Таблица.Обособленно
		|	И (&ТипПроизводственногоПроцесса <> НЕОПРЕДЕЛЕНО
		|		И Таблица.Ссылка.ТипПроизводственногоПроцесса = &ТипПроизводственногоПроцесса
		|	   ИЛИ &ТипПроизводственногоПроцесса = НЕОПРЕДЕЛЕНО)
		|	И НЕ Таблица.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	ВЫБОР
		|		КОГДА Таблица.Номенклатура.ТипНоменклатуры В (
		|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			ТОГДА Таблица.Склад
		|		ИНАЧЕ Таблица.Подразделение
		|	КОНЕЦ,
		|	Таблица.Ссылка.Назначение
		//++ Устарело_Переработка24
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура      КАК Номенклатура,
		|	Таблица.Характеристика    КАК Характеристика,
		|	Таблица.Ссылка.Назначение КАК Назначение,
		|	Таблица.Склад             КАК Склад,
		|	СУММА(Таблица.Количество) КАК Количество,
		|	МАКСИМУМ(Таблица.Спецификация) КАК Спецификация,
		|	МАКСИМУМ(Таблица.Упаковка)     КАК Упаковка,
		|	
		|	МИНИМУМ(Таблица.ДатаОтгрузки) КАК ДатаПотребности
		|ИЗ
		|	Документ.ЗаказДавальца.Продукция КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|	И Таблица.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению))
		|	И Таблица.Обособленно
		|	И (&ТипПроизводственногоПроцесса <> НЕОПРЕДЕЛЕНО И Таблица.Ссылка.ТипПроизводственногоПроцесса = &ТипПроизводственногоПроцесса
		|		ИЛИ &ТипПроизводственногоПроцесса = НЕОПРЕДЕЛЕНО)
		|	И НЕ Таблица.Отменено
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад, Таблица.Ссылка.Назначение
		//-- Устарело_Переработка24
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Набор.Назначение     КАК Назначение,
		|	Набор.Номенклатура   КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Склад          КАК Склад,
		|	СУММА(Набор.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтОстатки
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТаблицаОстатков.Назначение     КАК Назначение,
		|		ТаблицаОстатков.Номенклатура   КАК Номенклатура,
		|		ТаблицаОстатков.Характеристика КАК Характеристика,
		|		ТаблицаОстатков.Склад          КАК Склад,
		|		ТаблицаОстатков.НеОбеспечено   КАК Количество
		|	ИЗ
		|		ВтЗаказДавальца КАК Продукция
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ТаблицаОстатков
		|			ПО ТаблицаОстатков.Номенклатура   = Продукция.Номенклатура
		|			 И ТаблицаОстатков.Характеристика = Продукция.Характеристика
		|			 И ТаблицаОстатков.Склад          = Продукция.Склад
		|			 И ТаблицаОстатков.Назначение     = Продукция.Назначение
		|			 И ТаблицаОстатков.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)
		|	ГДЕ
		|		НЕ ТаблицаОстатков.Номенклатура ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Движения.Назначение КАК Назначение,
		|		Движения.Номенклатура КАК Номенклатура,
		|		Движения.Характеристика КАК Характеристика,
		|		Движения.Склад КАК Склад,
		|		ВЫБОР
		|			КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА Движения.Заказано
		|			ИНАЧЕ -Движения.Заказано
		|		КОНЕЦ КАК КЗаказу
		|ИЗ
		|	ВтЗаказДавальца КАК Продукция
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыИПотребности КАК Движения
		|		ПО Движения.Номенклатура   = Продукция.Номенклатура
		|		 И Движения.Характеристика = Продукция.Характеристика
		|		 И Движения.Склад          = Продукция.Склад
		|		 И Движения.Назначение     = Продукция.Назначение
		|	ГДЕ
		|		Движения.Активность
		|			И Движения.Регистратор = &ТекущийДокумент) КАК Набор
		|	
		|СГРУППИРОВАТЬ ПО
		|	Набор.Назначение, Набор.Номенклатура, Набор.Характеристика, Набор.Склад
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказТовары.Назначение      КАК Назначение,
		|	ЗаказТовары.Номенклатура    КАК Номенклатура,
		|	ЗаказТовары.Характеристика  КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказТовары.Склад) = ТИП(Справочник.Склады)
		|			ТОГДА ЗаказТовары.Склад
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ                       КАК Склад,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказТовары.Склад) = ТИП(Справочник.СтруктураПредприятия)
		|			ТОГДА ЗаказТовары.Склад
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ                       КАК Подразделение,
		|	
		|	ВЫБОР КОГДА ЗаказТовары.Количество <= ТаблицаОстатки.Количество ТОГДА
		|				ЗаказТовары.Количество
		|			ИНАЧЕ
		|				ЕСТЬNULL(ТаблицаОстатки.Количество, 0)
		|		КОНЕЦ                   КАК Количество,
		|	
		|	ВЫБОР КОГДА ЗаказТовары.Количество <= ТаблицаОстатки.Количество ТОГДА
		|				ЗаказТовары.Количество
		|			ИНАЧЕ
		|				ЕСТЬNULL(ТаблицаОстатки.Количество, 0)
		|		КОНЕЦ / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоУпаковок,
		|	
		|	ЗаказТовары.Спецификация    КАК Спецификация,
		|	ЗаказТовары.Упаковка        КАК Упаковка,
		|	
		|	ЗаказТовары.ДатаПотребности КАК ДатаПотребности,
		|	
		|	ЛОЖЬ               КАК ИзмененияЗапрещены,
		|	&РазмещениеВыпуска КАК РазмещениеВыпуска,
		|	&НачатьНеРанее     КАК НачатьНеРанее
		|ИЗ
		|	ВтЗаказДавальца КАК ЗаказТовары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстатки КАК ТаблицаОстатки
		|		ПО ТаблицаОстатки.Номенклатура   = ЗаказТовары.Номенклатура
		|		 И ТаблицаОстатки.Характеристика = ЗаказТовары.Характеристика
		|		 И ТаблицаОстатки.Склад          = ЗаказТовары.Склад
		|		 И ТаблицаОстатки.Назначение     = ЗаказТовары.Назначение
		|ГДЕ
		|	НЕ ТаблицаОстатки.Номенклатура ЕСТЬ NULL";
	
	Подстановка = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ЗаказТовары.Упаковка", "ЗаказТовары.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки", Подстановка);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивЗаказов",     МассивЗаказов);
	Запрос.УстановитьПараметр("НачатьНеРанее",     НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("РазмещениеВыпуска", Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу);
	Запрос.УстановитьПараметр("ТекущийДокумент",   ТекущийДокумент);
	Запрос.УстановитьПараметр("ТипПроизводственногоПроцесса", ТипПроизводственногоПроцесса);
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаПроизводство") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаказНаПроизводство",
			НСтр("ru = 'Заказ на производство';
				|en = 'Production order'"),
			СформироватьПечатнуюФормуЗаказНаПроизводство(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(
		ПараметрыВывода.ПараметрыОтправки,
		МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуЗаказНаПроизводство(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаПроизводство2_2_ЗаказНаПроизводство";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаПроизводство2_2.ПФ_MXL_ЗаказНаПроизводство");
	ПервыйДокумент = Истина;
	
	ДанныеДляПечати = ДанныеДляПечатиЗаказНаПроизводство(МассивОбъектов);
	ВыборкаШапка = ДанныеДляПечати.ВыборкаШапка;
	ВыборкаПродукция = ДанныеДляПечати.ВыборкаПродукция;
	ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Пока ВыборкаШапка.Следующий() Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Шапка - Заголовок
		
		Область = Макет.ПолучитьОбласть("Заголовок"); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
		
		Область.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(
			ВыборкаШапка,
			СтрШаблон(НСтр("ru = 'Заказ на производство (%1)';
							|en = 'Production order (%1)'", ОбщегоНазначения.КодОсновногоЯзыка()),
						НРег(ВыборкаШапка.ТипПроизводственногоПроцесса)));
		Область.Параметры.Ссылка = ВыборкаШапка.Ссылка;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
			ТабличныйДокумент,
			Макет,
			Область,
			ВыборкаШапка.Ссылка);
	
		ТабличныйДокумент.Вывести(Область);
		
		// Шапка - Организация
		
		Область = Макет.ПолучитьОбласть("Организация");
		Область.Параметры.Заполнить(ВыборкаШапка);
		ТабличныйДокумент.Вывести(Область);
		
		// Шапка - Диспетчер
		
		Область = Макет.ПолучитьОбласть("Диспетчер");
		Область.Параметры.Заполнить(ВыборкаШапка);
		ТабличныйДокумент.Вывести(Область);
		
		// Шапка - Давалец
		
		Если ВыборкаШапка.ПроизводствоИзДавальческогоСырья Тогда
			
			Область = Макет.ПолучитьОбласть("Давалец");
			Область.Параметры.Заполнить(ВыборкаШапка);
			ТабличныйДокумент.Вывести(Область);
			
		КонецЕсли;
		
		// Таблица
		
		Если ВыборкаПродукция.НайтиСледующий(Новый Структура("Ссылка", ВыборкаШапка.Ссылка)) Тогда
			
			КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
			ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
			ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
			ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
			Если ВыводитьКоды Тогда
		    	
				ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы_СКодом");
				ОбластьШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
				ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы_СКодом"); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
				
			Иначе
				
				ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы_БезКода");
				ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы_БезКода"); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
		
			КонецЕсли;
			
			ОбластьШапка.Параметры.ИмяКолонкиНоменклатура = ПроизводствоКлиентСервер.ЗаголовокТабличнойЧастиПоТипуПроцесса(
				ВыборкаШапка.ТипПроизводственногоПроцесса,
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			НомерСтроки = 0;
			Выборка = ВыборкаПродукция.Выбрать();
			Пока Выборка.Следующий() Цикл
		
				ОбластьСтрока.Параметры.Заполнить(Выборка);
				
				НомерСтроки = НомерСтроки + 1;
				ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
				Если ВыводитьКоды Тогда
					ОбластьСтрока.Параметры.Артикул = Выборка[ИмяКолонкиКодов];
				КонецЕсли;
						
				ОбластьСтрока.Параметры.НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					Выборка.НоменклатураНаименованиеПолное,
					Выборка.ХарактеристикаНаименованиеПолное,
					,
					,
					ДопПараметрыПредставлениеНоменклатуры);
		
				ТабличныйДокумент.Вывести(ОбластьСтрока);
		
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалТаблицы"));
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ВыборкаШапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеДляПечатиЗаказНаПроизводство(Ссылки)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Заказы.Ссылка                       КАК Ссылка,
		|	Заказы.Номер                        КАК Номер,
		|	Заказы.Дата                         КАК Дата,
		|	Заказы.Организация                  КАК Организация,
		|	Заказы.Организация.Представление    КАК ОрганизацияПредставление,
		|	Заказы.Подразделение                КАК Диспетчер,
		|	Заказы.Подразделение.Представление  КАК ДиспетчерПредставление,
		|	Заказы.Партнер                      КАК Давалец,
		|	Заказы.Партнер.Представление        КАК ДавалецПредставление,
		|	Заказы.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
		|	Заказы.ХозяйственнаяОперация В (
		//++ Устарело_Переработка24
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья),
		//-- Устарело_Переработка24
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)) КАК ПроизводствоИзДавальческогоСырья
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
		|ГДЕ
		|	Заказы.Ссылка В(&Ссылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Продукция.Ссылка                            КАК Ссылка,
		|	Продукция.Номенклатура                      КАК Номенклатура,
		|	Продукция.Номенклатура.Код                  КАК Код,
		|	Продукция.Номенклатура.Артикул              КАК Артикул,
		|	Продукция.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
		|	Продукция.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	Продукция.Спецификация                      КАК Спецификация,
		|	Продукция.Спецификация.Представление        КАК СпецификацияПредставление,
		|	&ТекстЗапросаЕдиницаИзмерения               КАК ЕдиницаИзмерения,
		|	Продукция.КоличествоУпаковок                КАК Количество
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК Продукция
		|ГДЕ
		|	Продукция.Ссылка В(&Ссылки)
		|	И Продукция.Отменено = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Продукция.НомерСтроки
		|ИТОГИ ПО
		|	Ссылка";
	
	ТекстЕдИзм = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
		"Наименование",
		"Продукция.Упаковка",
		"Продукция.Номенклатура");
			
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ТекстЗапросаЕдиницаИзмерения",
		ТекстЕдИзм);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("ВыборкаШапка", МассивРезультатов[0].Выбрать());
	ДанныеДляПечати.Вставить("ВыборкаПродукция", МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Возврат ДанныеДляПечати;
	
КонецФункции

#КонецОбласти

#Область Прочее

#Область ФормированиеГиперссылкиВЖурналеПроизводства

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаПроизводство2_2) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаказНаПроизводство2_2.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
		|ГДЕ
		|	НЕ ЗаказНаПроизводство2_2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)
		|	И (ЗаказНаПроизводство2_2.Организация = &Организация
		|		ИЛИ &ВсеОрганизации)
		|	И (ЗаказНаПроизводство2_2.Подразделение = &Подразделение
		|		ИЛИ &ВсеПодразделения)";
	
	Запрос.УстановитьПараметр("ВсеОрганизации", Не ЗначениеЗаполнено(Параметры.Организация));
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("ВсеПодразделения", Не ЗначениеЗаполнено(Параметры.Подразделение));
	Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством") Тогда
		ТекстГиперссылки = НСтр("ru = 'Заказы на производство 2.2';
								|en = 'Production orders 2.2'");
	Иначе
		ТекстГиперссылки = НСтр("ru = 'Заказы на производство';
								|en = 'Production orders'");
	КонецЕсли;
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			"Документ.ЗаказНаПроизводство2_2.Форма.ФормаСписка");
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			"Документ.ЗаказНаПроизводство2_2.Форма.ФормаСписка");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Возвращает шаблон для генерации назначения документа
//
// Параметры:
//  Объект	 - ДокументОбъект.ЗаказНаПроизводство2_2 - заказ.
//
// Возвращаемое значение:
//  См. Справочники.Назначения.ШаблонНового
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	ВариантОбособления = Объект.ВариантОбособления;
	
	Если ВариантОбособления <> Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства Тогда
		
		Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
			ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		КонецЕсли;
		
		Если Объект.ХозяйственнаяОперация =
				ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора() Тогда
			
			ШаблонНазначения.Партнер	   = Объект.Партнер;
			ШаблонНазначения.Договор	   = Объект.Договор;
			ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.Давальческое2_5;
			
		//++ Устарело_Переработка24
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда
			
			ШаблонНазначения.Партнер = Объект.Партнер;
			ШаблонНазначения.Договор = Объект.Договор;
			
			Если ВариантОбособления = Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство Тогда
				
				ШаблонНазначения.Заказ = Объект.Ссылка;
				ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22;
				
			Иначе //НаправлениеДеятельности и НазначениеПродукции
				
				ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалы22;
				
			КонецЕсли;
		//-- Устарело_Переработка24
		Иначе
			
			Если ВариантОбособления <> Перечисления.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности
				Или Не ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности) Тогда
				
				ШаблонНазначения.Заказ = Объект.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

Функция СтатусЗаказаКПроизводству()
	
	Возврат Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству;
	
КонецФункции

// Возвращает текст запроса, результатом выполнения которого является перечень заказов (в разрезе продукции),
// по которым произведена часть продукции, а производство оставшейся части не запланировано.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаВТНезапланированнаяПродукцияЗаказа() Экспорт
	
	ТекстыЗапроса = Новый Массив;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыНаПроизводство.Распоряжение КАК Распоряжение
	|ПОМЕСТИТЬ ЗаказыСОборотами
	|ИЗ
	|	РегистрНакопления.ОбеспечениеПроизводственныхПроцессов.Обороты(&НачалоПериода, &КонецПериода) КАК ЗаказыНаПроизводство
	|ГДЕ
	|	НЕ ЗаказыНаПроизводство.ПроизведеноОборот = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыСОборотами.Распоряжение КАК Ссылка
	|ПОМЕСТИТЬ ЗаказыТребующиеПроверки
	|ИЗ
	|	ЗаказыСОборотами КАК ЗаказыСОборотами
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК РеквизитыЗаказа
	|	ПО РеквизитыЗаказа.Ссылка = ЗаказыСОборотами.Распоряжение
	|	
	|ГДЕ
	|	РеквизитыЗаказа.Организация В (&МассивОрганизаций)
	|	И НЕ РеквизитыЗаказа.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)
	|	И РеквизитыЗаказа.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстыЗапросаНоменклатураКПроизводству = ТекстыЗапросаНоменклатураКПроизводству(Истина,, Ложь,
		"Распоряжение В (
		|	ВЫБРАТЬ
		|		ЗаказыТребующиеПроверки.Ссылка
		|	ИЗ
		|		ЗаказыТребующиеПроверки КАК ЗаказыТребующиеПроверки
		|)");
	ТекстыЗапроса.Добавить(ТекстыЗапросаНоменклатураКПроизводству.ТекстЗапросаИсточник);
	ТекстыЗапроса.Добавить(ТекстыЗапросаНоменклатураКПроизводству.ТекстЗапросаДополнительный);
	ТекстыЗапроса.Добавить(ТекстыЗапросаНоменклатураКПроизводству.ТекстЗапросаОсновной);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеквизитыЗаказа.Организация					КАК Организация,
	|	ВтНоменклатураКПроизводству.Распоряжение	КАК ЗаказНаПроизводство,
	|	ВтНоменклатураКПроизводству.Номенклатура	КАК Номенклатура,
	|	ВтНоменклатураКПроизводству.Характеристика	КАК Характеристика,
	|	ВтНоменклатураКПроизводству.Назначение		КАК Назначение
	|ПОМЕСТИТЬ НезапланированнаяПродукцияБезСпецификаций
	|ИЗ
	|	ВтНоменклатураКПроизводству КАК ВтНоменклатураКПроизводству
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК РеквизитыЗаказа
	|	ПО РеквизитыЗаказа.Ссылка = ВтНоменклатураКПроизводству.Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыЗаказа.Организация,
	|	ВтНоменклатураКПроизводству.Распоряжение,
	|	ВтНоменклатураКПроизводству.Номенклатура,
	|	ВтНоменклатураКПроизводству.Характеристика,
	|	ВтНоменклатураКПроизводству.Назначение
	|";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Возврат СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецФункции

Процедура УстановитьПриоритетВФоне(Параметры, АдресХранилища) Экспорт
	
	Попытка
		
		 УстановитьПриоритет(Параметры.Ссылка, Параметры.Приоритет);
		
	Исключение
		
		ПоместитьВоВременноеХранилище(
			Новый Структура("Сообщения", ПолучитьСообщенияПользователю()),
			АдресХранилища);
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриИзмененииПриоритета(Ссылка)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭтапПроизводства2_2.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
		|ГДЕ
		|	ЭтапПроизводства2_2.Распоряжение = &Распоряжение
		|	И ЭтапПроизводства2_2.Проведен");
	Запрос.УстановитьПараметр("Распоряжение", Ссылка);
	Этапы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Документы.ЭтапПроизводства2_2.ОбновитьРеестрДокументов(Ссылка, Этапы);
	РаспределениеЗапасовДвижения.ПриИзмененииПриоритета(Этапы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
