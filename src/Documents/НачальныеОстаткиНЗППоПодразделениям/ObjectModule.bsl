#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("РеквизитыШапки") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ПараметрыВыбораСтатейИАналитик = Документы.НачальныеОстаткиНЗППоПодразделениям.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ЗатратыСервер.ПроверитьИспользованиеПартионногоУчета22(ЭтотОбъект, Дата, Отказ);
	
	#Область Таблица_Затраты
	
	МассивНепроверяемыхРеквизитов.Добавить("Затраты.СтатьяРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("Затраты.ПравилоОтнесенияНаВыпускУпр");
	МассивНепроверяемыхРеквизитов.Добавить("Затраты.ПравилоОтнесенияНаВыпускРегл");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиРасходов.Ссылка КАК СтатьяРасходов,
		|	ВЫБОР
		|		КОГДА СтатьиРасходов.ВариантРаспределенияРасходовУпр В (ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты), ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НеРаспределять))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПроверятьПравилоУпр,
		|	ВЫБОР
		|		КОГДА СтатьиРасходов.ВариантРаспределенияРасходовРегл В (ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты), ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НеРаспределять))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПроверятьПравилоРегл
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|ГДЕ
		|	СтатьиРасходов.Ссылка В(&СтатьиРасходов)";
	
	Запрос.УстановитьПараметр("СтатьиРасходов", Затраты.ВыгрузитьКолонку("СтатьяРасходов"));
	
	РеквизитыСтатейРасходов = Запрос.Выполнить().Выгрузить();
	РеквизитыСтатейРасходов.Индексы.Добавить("СтатьяРасходов");
	
	ШаблонСообщения = НСтр("ru = 'В строке %НомерСтроки% списка ""Затраты"" не заполнено поле ""%ИмяПоля%"".';
							|en = '""%ИмяПоля%"" in line %НомерСтроки% of the list ""Costs"" is required.'");
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
	
	Для Каждого ТекСтрока Из Затраты Цикл
		
		Если ТекСтрока.ТипЗатрат = Перечисления.ТипыЗатрат.Прочее
			Или ТекСтрока.ТипЗатрат = Перечисления.ТипыЗатрат.Амортизация Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			
			Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяРасходов) Тогда
				
				СообщениеОбОшибке = СтрЗаменить(ТекстСообщения, "%ИмяПоля%", НСтр("ru = 'Статья расходов';
																					|en = 'Expense item'"));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Затраты", ТекСтрока.НомерСтроки, "СтатьяРасходов");
				ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, КлючДанных , Поле, "Объект", Отказ);
				
				Продолжить;
				
			КонецЕсли;
			
			РеквизитыСтатьи = РеквизитыСтатейРасходов.Найти(ТекСтрока.СтатьяРасходов);
			Если РеквизитыСтатьи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если РеквизитыСтатьи.ПроверятьПравилоУпр
				И Не ЗначениеЗаполнено(ТекСтрока.ПравилоОтнесенияНаВыпускУпр) Тогда
				
				СообщениеОбОшибке = СтрЗаменить(ТекстСообщения, "%ИмяПоля%", НСтр("ru = 'Правило отнесения на выпуск (упр.)';
																					|en = 'Rule of allocating to release (manag.)'"));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Затраты", ТекСтрока.НомерСтроки, "ПравилоОтнесенияНаВыпускУпр");
				ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, КлючДанных , Поле, "Объект", Отказ);
				
			КонецЕсли;
			
			Если РеквизитыСтатьи.ПроверятьПравилоРегл
				И Не ЗначениеЗаполнено(ТекСтрока.ПравилоОтнесенияНаВыпускРегл) Тогда
				
				СообщениеОбОшибке = СтрЗаменить(ТекстСообщения, "%ИмяПоля%", НСтр("ru = 'Правило отнесения на выпуск (регл.)';
																					|en = 'Rule of allocating to release (local)'"));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Затраты", ТекСтрока.НомерСтроки, "ПравилоОтнесенияНаВыпускРегл");
				ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, КлючДанных , Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ПроверкаСтатейИАналитик
	
	ПараметрыВыбораСтатейИАналитик = Документы.НачальныеОстаткиНЗППоПодразделениям.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
	
	#КонецОбласти
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	Если ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект).ЭтоНовый Тогда
		ЭтотОбъект.ПолучитьСсылкуНового();
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.НачальныеОстаткиНЗППоПодразделениям.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПередЗаписью(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ТипыЗатратПостатейныхРасходов = Новый Массив;
	ТипыЗатратПостатейныхРасходов.Добавить(Перечисления.ТипыЗатрат.Амортизация);
	ТипыЗатратПостатейныхРасходов.Добавить(Перечисления.ТипыЗатрат.Прочее);
	
	Для Каждого СтрокаЗатраты Из Затраты Цикл
		
		Если ТипыЗатратПостатейныхРасходов.Найти(СтрокаЗатраты.ТипЗатрат) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗатраты.ПравилоОтнесенияНаВыпускРегл) Тогда
			
			СтрокаЗатраты.СуммаВР = 0;
			СтрокаЗатраты.СуммаПР = 0;
			СтрокаЗатраты.СуммаРегл = 0;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗатраты.ПравилоОтнесенияНаВыпускУпр) Тогда
			СтрокаЗатраты.Сумма = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаДокумента = Затраты.Итог("Сумма");
	
	// Обработка смены реквизитов
	Если Не ЭтоНовый() Тогда
		СтарыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ПометкаУдаления");
		ДополнительныеСвойства.Вставить("ПометкаУдаленияДоЗаписи", СтарыеЗначения.ПометкаУдаления);
	Иначе
		ДополнительныеСвойства.Вставить("ПометкаУдаленияДоЗаписи", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Дата			= ТекущаяДатаСеанса();
	Организация		= ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	ВидЦены			= Справочники.ВидыЦен.ВидЦеныПлановойСтоимостиТМЦ(ВидЦены);
	Ответственный	= Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли