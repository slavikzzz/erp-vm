#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление(); 
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.НачальныеОстаткиНЗППоПодразделениям.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПараметрыВыбораСтатейИАналитик = Документы.НачальныеОстаткиНЗППоПодразделениям.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.МодификацияКонфигурации
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.МодификацияКонфигурации
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	ЗаполнитьСлужебныеРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьВалютуРеглУчета();
	
	УстановитьВидимость();
	УстановитьЗаголовки();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаСтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗатраты

&НаКлиенте
Процедура ЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Затраты.ТекущиеДанные;
	
	ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, ТекущиеДанные, "Объект.Затраты");
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ТекущиеДанные.ПринимаетсяКНУ = Истина;
		ТекущиеДанные.ПравилоОтнесенияНаВыпускУпр =
			ПредопределенноеЗначение("Перечисление.ПравилаОтнесенияНаВыпуск.ПоМатериальнымИТрудозатратам");
		ТекущиеДанные.ПравилоОтнесенияНаВыпускРегл =
			ПредопределенноеЗначение("Перечисление.ПравилаОтнесенияНаВыпуск.ПоМатериальнымИТрудозатратам");
		
	КонецЕсли;
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Затраты, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыТипЗатратПриИзменении(Элемент)
	
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Затраты.ТекущаяСтрока);
	ЗатратыТипЗатратПриИзмененииСервер(ИдентификаторыСтрок, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗатратыТипЗатратПриИзмененииСервер(ИдентификаторыСтрок, КэшированныеЗначения)
	
	Для Каждого Идентификатор Из ИдентификаторыСтрок Цикл
		
		ТекущиеДанные = Объект.Затраты.НайтиПоИдентификатору(Идентификатор);
		Если ТекущиеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДоходыИРасходыКлиентСервер.ПриИзмененииРеквизитаДоступностиСтатьиВСтроке(ЭтаФорма, ТекущиеДанные, "Объект.Затраты");
		
		Если Не ТекущиеДанные.ТипЗатрат = ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Амортизация")
			И Не ТекущиеДанные.ТипЗатрат = ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Прочее") Тогда
			
			ТекущиеДанные.СтатьяКалькуляции					= Неопределено;
			ТекущиеДанные.ПравилоОтнесенияНаВыпускУпр		= Неопределено;
			ТекущиеДанные.ПравилоОтнесенияНаВыпускРегл		= Неопределено;
			ТекущиеДанные.ВариантРаспределенияРасходовУпр	= Неопределено;
			ТекущиеДанные.ВариантРаспределенияРасходовРегл	= Неопределено;
			ТекущиеДанные.АналитикаРасходовОбязательна		= Ложь;
			ТекущиеДанные.АналитикаРасходовЗаказРеализация	= Ложь;
			ТекущиеДанные.ТипСтатьи							= 1;
			ТекущиеДанные.ПринимаетсяКНУ					= Истина;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуПР", КоэффициентПересчетаИзВалютыУпрВРегл);
			СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
			СтруктураДействий.Вставить("ПересчитатьСуммуВР");
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыСтатьяРасходовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Затраты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходов) Тогда
		ЗатратыСтатьяРасходовПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор(), КэшированныеЗначения);
	Иначе
		
		ТекущиеДанные.АналитикаРасходов = Неопределено;
		ТекущиеДанные.АналитикаРасходовОбязательна = Ложь;
		ТекущиеДанные.ПринимаетсяКНУ = Истина;
		ТекущиеДанные.ВариантРаспределенияРасходовУпр = Неопределено;
		ТекущиеДанные.ВариантРаспределенияРасходовРегл = Неопределено;
		ТекущиеДанные.ПравилоОтнесенияНаВыпускУпр = Неопределено;
		ТекущиеДанные.ПравилоОтнесенияНаВыпускРегл = Неопределено;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуПР", КоэффициентПересчетаИзВалютыУпрВРегл);
		СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
		СтруктураДействий.Вставить("ПересчитатьСуммуВР");
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗатратыСтатьяРасходовПриИзмененииСервер(ТекущийИдентификатор, КэшированныеЗначения)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элементы.ЗатратыСтатьяРасходов);
	
	ТекущиеДанные = Объект.Затраты.НайтиПоИдентификатору(ТекущийИдентификатор);
	
	ЗаполнитьВариантыРаспределенияСтатейРасходов(ТекущиеДанные);
	
	РеквизитыСтатьи = Новый Структура;
	РеквизитыСтатьи.Вставить("СтатьяКалькуляции");
	РеквизитыСтатьи.Вставить("БазаРаспределенияПоПартиямУпр", "ПравилоРаспределенияРасходовУпр.БазаРаспределенияПоПартиям");
	РеквизитыСтатьи.Вставить("БазаРаспределенияПоПартиямРегл", "ПравилоРаспределенияРасходовРегл.БазаРаспределенияПоПартиям");
	РеквизитыСтатьи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.СтатьяРасходов, РеквизитыСтатьи);
	
	ПравилаОтнесенияНаВыпуск = ПравилаОтнесенияНаВыпуск();
	
	ТекущиеДанные.СтатьяКалькуляции		= РеквизитыСтатьи.СтатьяКалькуляции;
	ТекущиеДанные.ПравилоОтнесенияНаВыпускУпр	= ПравилаОтнесенияНаВыпуск[РеквизитыСтатьи.БазаРаспределенияПоПартиямУпр];
	ТекущиеДанные.ПравилоОтнесенияНаВыпускРегл	= ПравилаОтнесенияНаВыпуск[РеквизитыСтатьи.БазаРаспределенияПоПартиямРегл];
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакПринимаетсяКНУ");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуПР", КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Затраты.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл",	КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуПР",	КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыСуммаРеглПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Затраты.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуПР", КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыСуммаНУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Затраты.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыСуммаПРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Затраты.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	Если ТекущиеДанные.ПринимаетсяКНУ Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


#Область КомандыОбъекта

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧЗатраты

&НаКлиенте
Процедура ЗаполнитьТипЗатрат(Команда)
	
	ВыделенныеСтроки = Элементы.Затраты.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо заполнить тип затрат.';
									|en = 'Select lines for which a cost type should be populated.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьТипЗатратЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Перечисление.ТипыЗатрат.ФормаВыбора",
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТипЗатратЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.НачальныеОстаткиНЗППоПодразделениям.Форма.ФормаДокумента.ЗаполнитьТипЗатратЗавершение");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТипЗатратЗавершениеСервер(Результат, ДополнительныеПараметры, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипЗатратЗавершениеСервер(Результат, ДополнительныеПараметры, КэшированныеЗначения)

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитТЧЗавершениеСервер("ТипЗатрат", Результат, ДополнительныеПараметры);
	ЗатратыТипЗатратПриИзмененииСервер(ДополнительныеПараметры.ВыделенныеСтроки, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляции(Команда)
	
	ВыделенныеСтроки = Элементы.Затраты.ВыделенныеСтроки;
	
	СтрокиКЗаполнению = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ТекСтрока = Объект.Затраты.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекСтрока.ТипЗатрат = ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Амортизация")
			Или ТекСтрока.ТипЗатрат = ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Прочее") Тогда
			СтрокиКЗаполнению.Добавить(ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиКЗаполнению.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо заполнить статью калькуляции.';
									|en = 'Select the lines for which it is required to populate the product cost element.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", СтрокиКЗаполнению);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьСтатьюКалькуляцииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Справочник.СтатьиКалькуляции.ФормаВыбора",
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляцииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.НачальныеОстаткиНЗППоПодразделениям.Форма.ФормаДокумента.ЗаполнитьСтатьюКалькуляцииЗавершение");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитТЧЗавершениеСервер("СтатьяКалькуляции", Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПравилоОтнесенияНаВыпускУпр(Команда)
	
	ЗаполнитьПравилоОтнесенияНаВыпуск("Упр");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПравилоОтнесенияНаВыпускРегл(Команда)
	
	ЗаполнитьПравилоОтнесенияНаВыпуск("Регл");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПравилоОтнесенияНаВыпуск(ВидУчета)
	
	ВыделенныеСтроки = Элементы.Затраты.ВыделенныеСтроки;
	
	ДоступныеВариантыОтнесенияНаВыпуск = Новый Массив;
	ДоступныеВариантыОтнесенияНаВыпуск.Добавить(
		ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты"));
	ДоступныеВариантыОтнесенияНаВыпуск.Добавить(
		ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НеРаспределять"));
	
	Если ВидУчета = "Упр" Тогда
		ИмяРеквизитаВариантРаспределенияРасходов = "ВариантРаспределенияРасходовУпр";
		ИмяРеквизита = "ПравилоОтнесенияНаВыпускУпр";
	Иначе
		ИмяРеквизитаВариантРаспределенияРасходов = "ВариантРаспределенияРасходовРегл";
		ИмяРеквизита = "ПравилоОтнесенияНаВыпускРегл";
	КонецЕсли;
	
	СтрокиКЗаполнению = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекСтрока = Объект.Затраты.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если (ТекСтрока.ТипЗатрат = ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Амортизация")
			Или ТекСтрока.ТипЗатрат = ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Прочее"))
			И Не ДоступныеВариантыОтнесенияНаВыпуск.Найти(ТекСтрока[ИмяРеквизитаВариантРаспределенияРасходов]) = Неопределено Тогда
			СтрокиКЗаполнению.Добавить(ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиКЗаполнению.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо заполнить правило отнесения на выпуск.';
									|en = 'Select the lines for which it is required to populate the rule of allocating to release.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	МассивПравил = Новый Массив;
	МассивПравил.Добавить(ПредопределенноеЗначение("Перечисление.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам"));
	МассивПравил.Добавить(ПредопределенноеЗначение("Перечисление.ПравилаОтнесенияНаВыпуск.ПоМатериальнымИТрудозатратам"));
	МассивПравил.Добавить(ПредопределенноеЗначение("Перечисление.ПравилаОтнесенияНаВыпуск.ПоТрудозатратам"));
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Ссылка", Новый ФиксированныйМассив(МассивПравил));
	
	ПараметрыФормы.Вставить("Отбор",				СтруктураОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизита",     ИмяРеквизита);
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", СтрокиКЗаполнению);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПравилоОтнесенияНаВыпускЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Перечисление.ПравилаОтнесенияНаВыпуск.ФормаВыбора",
		ПараметрыФормы,,,,,
		ОписаниеОповещения);

КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнитьПравилоОтнесенияНаВыпускЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.НачальныеОстаткиНЗППоПодразделениям.Форма.ФормаДокумента.ЗаполнитьПравилоОтнесенияНаВыпускЗавершение");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитТЧЗавершениеСервер(ДополнительныеПараметры.ИмяРеквизита, Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
												НавигационнаяСсылка = Неопределено,
												СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОстаткиНЗПЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения	= Новый Структура("АдресРезультата", Результат.АдресРезультата);
	ПараметрыОткрытия	= Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму(
		"Документ.НачальныеОстаткиНЗППоПодразделениям.ФормаОбъекта",
		ПараметрыОткрытия,
		ЭтаФорма);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если Не Объект.Затраты.Количество() = 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Таблица затрат будет перезаполнена. Продолжить?';
							|en = 'The Costs table will be refilled. Continue?'");
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПоказатьФормуЗагрузкиИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьФормуЗагрузкиИзФайла();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СобытияФормы

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьСлужебныеРеквизитыФормы();
		
	УстановитьВидимость();
	УстановитьЗаголовки();
	УстановитьПараметрыВыбораСтатьи();
	УстановитьПараметрыВыбораПравилаОтнесенияНаВыпуск();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область РеквизитыПрочихРасходов
	
	ДоступныеВариантыОтнесенияНаВыпуск = Новый СписокЗначений;
	ДоступныеВариантыОтнесенияНаВыпуск.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	ДоступныеВариантыОтнесенияНаВыпуск.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства);
	ДоступныеВариантыОтнесенияНаВыпуск.Добавить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
		
	// Только просмотр по типу затрат
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗатратыСтатьяКалькуляции.Имя);
	
	ТипыПрочихРасходов = Новый СписокЗначений;
	ТипыПрочихРасходов.Добавить(Перечисления.ТипыЗатрат.Амортизация);
	ТипыПрочихРасходов.Добавить(Перечисления.ТипыЗатрат.Прочее);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Затраты.ТипЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыПрочихРасходов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указывается>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#Область ПравилаОтнесенияНаВыпуск
	// Доступность правила отнесения на выпуск по вариантам распределения и типу затрат.
	// Упр.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗатратыПравилоОтнесенияНаВыпускУпр.Имя);
	
	ГруппаИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Затраты.ТипЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыПрочихРасходов;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Затраты.ВариантРаспределенияРасходовУпр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ДоступныеВариантыОтнесенияНаВыпуск;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указывается>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Регл.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗатратыПравилоОтнесенияНаВыпускРегл.Имя);
	
	ГруппаИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Затраты.ТипЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыПрочихРасходов;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Затраты.ВариантРаспределенияРасходовРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ДоступныеВариантыОтнесенияНаВыпуск;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указывается>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
	#КонецОбласти
	
	// Сумма упр.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗатратыСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Затраты.ТипЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыПрочихРасходов;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Затраты.ВариантРаспределенияРасходовУпр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ДоступныеВариантыОтнесенияНаВыпуск;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указывается>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Суммы регл.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗатратыСуммаРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗатратыСуммаНУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗатратыСуммаПР.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗатратыСуммаВР.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Затраты.ТипЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыПрочихРасходов;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Затраты.ВариантРаспределенияРасходовРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ДоступныеВариантыОтнесенияНаВыпуск;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указывается>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	// Видимость суммы регл
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗатратыСуммаРегл.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаРегламентированногоУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаУправленческогоУчета");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ПрименяетсяПБУ18 = Ложь;
	ВедетсяУчетПостоянныхИВременныхРазниц = Ложь;
	//++ Локализация
	ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
		"УчетнаяПолитикаБухУчета",
		Объект.Организация,
		Объект.Дата);
	
	Если ПараметрыУчетнойПолитики <> Неопределено Тогда
		ПрименяетсяПБУ18 = ПараметрыУчетнойПолитики.ПрименяетсяПБУ18;
		ВедетсяУчетПостоянныхИВременныхРазниц = ПараметрыУчетнойПолитики.ВедетсяУчетПостоянныхИВременныхРазниц;
	КонецЕсли;
	//-- Локализация
	
	Элементы.ЗатратыСуммаПР.Видимость = ВедетсяУчетПостоянныхИВременныхРазниц;
	Элементы.ЗатратыСуммаВР.Видимость = ВедетсяУчетПостоянныхИВременныхРазниц;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовки()
	
	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета Тогда
		Элементы.ЗатратыСумма.Заголовок     = НСтр("ru = 'Сумма';
													|en = 'Amount'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Сумма (%1)';
								|en = 'Amount (%1)'");
		Элементы.ЗатратыСумма.Заголовок = СтрШаблон(ТекстЗаголовка, ВалютаУправленческогоУчета);
	КонецЕсли;
	
	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета
		Или Не ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		Элементы.ЗатратыСуммаРегл.Заголовок = НСтр("ru = 'Сумма регл.';
													|en = 'Local amount'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Сумма регл. (%1)';
								|en = 'Local amount (%1)'");
		Элементы.ЗатратыСуммаРегл.Заголовок = СтрШаблон(ТекстЗаголовка, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета
		Или Не ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		Элементы.ЗатратыСуммаНУ.Заголовок = НСтр("ru = 'НУ';
												|en = 'TA'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'НУ (%1)';
								|en = 'TA (%1)'");
		Элементы.ЗатратыСуммаНУ.Заголовок = СтрШаблон(ТекстЗаголовка, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета
		Или Не ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		Элементы.ЗатратыСуммаПР.Заголовок = НСтр("ru = 'ПР';
												|en = 'PD'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'ПР (%1)';
								|en = 'PD (%1)'");
		Элементы.ЗатратыСуммаПР.Заголовок = СтрШаблон(ТекстЗаголовка, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета
		Или Не ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		Элементы.ЗатратыСуммаВР.Заголовок = НСтр("ru = 'ВР';
												|en = 'TD'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'ВР (%1)';
								|en = 'TD (%1)'");
		Элементы.ЗатратыСуммаВР.Заголовок = СтрШаблон(ТекстЗаголовка, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСтатьи()
	
	ПараметрыВыбораСтатьи = Новый Массив;
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина));
	ПараметрыВыбораСтатьи.Добавить(
		Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВводОстатковЗатратПартийПроизводства));
	
	МассивВариантов = Новый Массив;
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	
	ПараметрыВыбораСтатьи.Добавить(
		Новый ПараметрВыбора("Отбор.ВариантРаспределенияРасходовИли", Новый ФиксированныйМассив(МассивВариантов)));
	
	Элементы.ЗатратыСтатьяРасходов.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСтатьи);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПравилаОтнесенияНаВыпуск()
	
	ПараметрыВыбораПравила = Новый Массив;
	
	МассивПравил = Новый Массив;
	МассивПравил.Добавить(Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам);
	МассивПравил.Добавить(Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымИТрудозатратам);
	МассивПравил.Добавить(Перечисления.ПравилаОтнесенияНаВыпуск.ПоТрудозатратам);
	МассивПравил.Добавить(Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	
	ПараметрыВыбораПравила.Добавить(
		Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивПравил)));
	
	Элементы.ЗатратыПравилоОтнесенияНаВыпускУпр.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПравила);
	Элементы.ЗатратыПравилоОтнесенияНаВыпускРегл.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПравила);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыСлужебные

#Область КомандыТЧЗатраты

&НаСервере
Процедура ЗаполнитьРеквизитТЧЗавершениеСервер(Реквизит, Результат, ДополнительныеПараметры)

	ТабличнаяЧасть		= Объект.Затраты;
	ВыделенныеСтроки	= ДополнительныеПараметры.ВыделенныеСтроки;
	Модифицированность	= Истина;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущиеДанные[Реквизит] = Результат;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СтандартныеПодсистемы

#Область Свойства

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ПоказатьФормуЗагрузкиИзФайла()
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "НачальныеОстаткиНЗППоПодразделениям.Затраты";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка остатков затрат НЗП из файла';
										|en = 'Download WIP cost balances from the file'");
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьФормуЗагрузкиИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуЗагрузкиИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	Объект.Затраты.Загрузить(ЗагруженныеДанные);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакПринимаетсяКНУ");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Затраты, СтруктураДействий, Неопределено);
	ЗаполнитьПринимаетсяКНУПоУмолчанию();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл",	КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуПР",	КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Затраты, СтруктураДействий, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыФормы()
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ЗаполнитьВалютуРеглУчета();
	
	ЗаполнитьВариантыРаспределенияСтатейРасходов();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакПринимаетсяКНУ");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Затраты, СтруктураДействий, Неопределено);
	ЗаполнитьПринимаетсяКНУПоУмолчанию();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Затраты, СтруктураДействий, Неопределено);
	
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Затраты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютуРеглУчета()
	
	ВалютаРегламентированногоУчета			= ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	КоэффициентПересчетаИзВалютыУпрВРегл	= КоэффициентПересчета();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыРаспределенияСтатейРасходов(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		СтатьиРасходов = Объект.Затраты.Выгрузить(, "СтатьяРасходов").ВыгрузитьКолонку("СтатьяРасходов");
	Иначе
		СтатьиРасходов = ОбщегоНазначенияУТКлиентСервер.Массив(ТекущиеДанные.СтатьяРасходов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьиРасходов", СтатьиРасходов);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиРасходов.Ссылка КАК СтатьяРасходов,
		|	СтатьиРасходов.ВариантРаспределенияРасходовРегл КАК ВариантРаспределенияРасходовРегл,
		|	СтатьиРасходов.ВариантРаспределенияРасходовУпр КАК ВариантРаспределенияРасходовУпр
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|ГДЕ
		|	СтатьиРасходов.Ссылка В(&СтатьиРасходов)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущиеДанные = Неопределено Тогда
			
			СтрокиПоСтатьеРасходов = Объект.Затраты.НайтиСтроки(Новый Структура("СтатьяРасходов", Выборка.СтатьяРасходов));
			Для Каждого СтрокаЗатраты Из СтрокиПоСтатьеРасходов Цикл
				
				СтрокаЗатраты.ВариантРаспределенияРасходовУпр  = Выборка.ВариантРаспределенияРасходовУпр;
				СтрокаЗатраты.ВариантРаспределенияРасходовРегл = Выборка.ВариантРаспределенияРасходовРегл;
				
			КонецЦикла;
			
		Иначе
			
			ТекущиеДанные.ВариантРаспределенияРасходовУпр  = Выборка.ВариантРаспределенияРасходовУпр;
			ТекущиеДанные.ВариантРаспределенияРасходовРегл = Выборка.ВариантРаспределенияРасходовРегл;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПринимаетсяКНУПоУмолчанию()
	
	Для Каждого ТекСтрока Из Объект.Затраты Цикл
		Если Не ТекСтрока.ТипЗатрат = Перечисления.ТипыЗатрат.Амортизация
			И Не ТекСтрока.ТипЗатрат = Перечисления.ТипыЗатрат.Прочее Тогда
			ТекСтрока.ПринимаетсяКНУ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КоэффициентПересчета()
	
	Возврат
		РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
			ВалютаУправленческогоУчета,
			ВалютаРегламентированногоУчета,
			?(Объект.Дата = Дата(1,1,1), ТекущаяДатаСеанса(), Объект.Дата));
	
КонецФункции

&НаСервере
Функция ПравилаОтнесенияНаВыпуск()
	
	ПравилаОтнесенияНаВыпуск = Новый Соответствие;
	
	// Правило "ПоМатериальнымЗатратам"
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.СуммаМатериальныхЗатрат,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.НормативРасходаМатериала,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам);
	
	// Правило "ПоТрудозатратам"
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.СуммаРасходовНаОплатуТруда,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоТрудозатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоТрудозатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоТрудозатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ДлительностьВыполненияРабот,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоТрудозатратам);
	
	// Правило "ПоМатериальнымИТрудозатратам"
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.СуммаМатериальныхИТрудозатрат,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымИТрудозатратам);
	
	// Правило "ПоПродукцииСУчетомБудущихВыпусков"
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.КоличествоПродукции,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ВесПродукции,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ОбъемПродукции,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукции,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.КоличествоПродукцииСУчетомБудущихВыпусков,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ОбъемПродукцииСУчетомБудущихВыпусков,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ВесПродукцииСУчетомБудущихВыпусков,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукцииСУчетомБудущихВыпусков,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	
	Возврат ПравилаОтнесенияНаВыпуск;
	
КонецФункции

#КонецОбласти

#КонецОбласти
