#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);

	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, 
		Документы.РаспределениеВозвратныхОтходов.ПараметрыВыбораСтатейИАналитик());
		
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, 
		Документы.РаспределениеВозвратныхОтходов.ПараметрыНастройкиСчетовУчета());
		
	ЗаполнитьСпискиОтбора();
	
	УстановитьТекстИВидимостьОтбораБазыРаспределения();
	УстановитьВидимостьПоОтборуПоГруппамПродукции();
	УстановитьТекстНадписиОтбораПоГруппамПродукции();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		УстановитьДоступностьСерииВШапке();
		
	КонецЕсли;
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтоги.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	Если Параметры.Свойство("ЕстьОшибки") И Параметры.ЕстьОшибки Тогда
		Для Каждого ТекОшибка Из Параметры.МассивОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекОшибка.Текст, ТекОшибка.КлючДанных, ТекОшибка.Поле, ТекОшибка.ПутьКДанным);
		КонецЦикла;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриЧтенииСозданииНаСервере();
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
		Если ЦенообразованиеКлиент.НеобходимПересчетЦеныПриИзменении(Объект.Номенклатура, "Серия", Объект.Дата) Тогда
	
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
			
			Если Не СтруктураДействий.Количество() = 0 Тогда
				ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьКешированныеЗначенияШапкиДляУчетаСерий();
		
		ОбновитьИтоги();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	НастройкаСчетовУчетаСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	ЗаполнитьСлужебныеРеквизитыФормы();
	ЗатратыСервер.ЗаполнитьХарактеристикиИзделийПоПартииПроизводства(Объект.ПартииПроизводства);
	
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	НастройкаСчетовУчетаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если Не Отказ Тогда
		ТекущийОбъект.ОтборПоГруппамПродукции.Очистить();
		Если ИспользоватьОтборПоГруппамПродукции Тогда
			Для Каждого Элемент Из ОтборПоГруппамПродукции Цикл 
				НоваяСтрока = ТекущийОбъект.ОтборПоГруппамПродукции.Добавить();
				НоваяСтрока.ГруппаПродукции = Элемент.Значение;
			КонецЦикла;
		КонецЕсли;
		ТекущийОбъект.ОтборПоМатериалам.Очистить();
		Если Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов
			ИЛИ Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов
			ИЛИ Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов Тогда
			Для Каждого Элемент Из ОтборПоМатериалам Цикл 
				НоваяСтрока = ТекущийОбъект.ОтборПоМатериалам.Добавить();
				НоваяСтрока.Материал = Элемент.Значение;
			КонецЦикла;
		КонецЕсли;
		ТекущийОбъект.ОтборПоВидамРабот.Очистить();
		Если Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов Тогда
			Для Каждого Элемент Из ОтборПоВидамРабот Цикл 
				НоваяСтрока = ТекущийОбъект.ОтборПоВидамРабот.Добавить();
				НоваяСтрока.ВидРабот = Элемент.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбновитьПриОткрытии Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВидимостьНастройкиПравилаРаспределения();
	
	ОграничениеТипаПолучатель();
	УстановитьОформлениеХарактеристики();
	УстановитьОформлениеНазначения();
	
	ОбновитьКешированныеЗначенияШапкиДляУчетаСерий();
	
	ОбновитьИтоги();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("Запись_РаспределениеВозвратныхОтходов");
	
	УстановитьОформлениеХарактеристики();
	УстановитьОформлениеНазначения();
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
	
	Если ОтборПоМатериалам.Количество() = 0 И (Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов
		Или Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов
		Или Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны материалы для базы распределения';
								|en = 'Materials for allocation base are not specified'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,,,Отказ);
		
	ИначеЕсли ОтборПоВидамРабот.Количество() = 0 И (Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны виды работ для базы распределения';
								|en = 'Activity kinds for allocation base are not specified'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,,,Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
		
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовШапкиФормыВкладкаОсновное

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	АктуализироватьВыпускПодДеятельность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	АктуализироватьВыпускПодДеятельность();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Новый Структура("Номенклатура, Характеристика, Серия, СтатусУказанияСерий,
									|ХарактеристикиИспользуются, ТипНоменклатуры, ВидЦены, Цена");
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Объект);
	
	СтруктураДействий = Новый Структура;
											
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ЭтаФорма, СтруктураДействий);
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(Объект, ТекущаяСтрока);
	
	ТипНоменклатуры				= ТекущаяСтрока.ТипНоменклатуры;
	ХарактеристикиИспользуются	= ТекущаяСтрока.ХарактеристикиИспользуются;
	
	УстановитьОформлениеХарактеристики();
	УстановитьОформлениеНазначения();
	
	НоменклатураПриИзмененииСервер(КэшированныеЗначения);
	
	ОбновитьКешированныеЗначенияШапкиДляУчетаСерий();
	
	ОграничениеТипаПолучатель();
	
	Объект.Получатель = Элементы.Получатель.ОграничениеТипа.ПривестиЗначение(Объект.Получатель);
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииСервер(КэшированныеЗначения)
	
	УстановитьЗаголовокПолучателя();
	ПолучательПоУмолчаниюСервер();
	УстановитьВидимостьПолучателя();
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
	УстановитьЗаголовокКоличества();
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Новый Структура("Номенклатура, Характеристика, Серия, Цена");
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Объект);

	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Объект"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(Объект, ТекущаяСтрока);
	УстановитьОформлениеХарактеристики();
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусСерийВШапке(Объект, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения);
		ОбновитьКешированныеЗначенияШапкиДляУчетаСерий();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение = Объект.Серия;
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	ОбновитьКешированныеЗначенияШапкиДляУчетаСерий();
	
	Если ЦенообразованиеКлиент.НеобходимПересчетЦеныПриИзменении(Объект.Номенклатура, "Серия", Объект.Дата) Тогда

		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
		
		Если Не СтруктураДействий.Количество() = 0 Тогда
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусСерийВШапке(Объект, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения);
		ОбновитьКешированныеЗначенияШапкиДляУчетаСерий();
	КонецЕсли;
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(Истина,
		"Документ.РаспределениеВозвратныхОтходов.Форма.ФормаДокумента.Элемент.Валюта.ПриИзменении");
		
	Если ЗначениеЗаполнено(Объект.Валюта) И ЗначениеЗаполнено(ВалютаДокумента) И ВалютаДокумента <> Объект.Валюта Тогда
		ВалютаПриИзмененииСервер(КэшированныеЗначения);
		ОбновитьИтоги();
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер(КэшированныеЗначения)
	
	ДатаДокумента				= ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	СтруктураКурсовСтаройВалюты	= РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	СтруктураКурсовНовойВалюты	= РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Объект.Валюта, ДатаДокумента);
	
	// Пересчитаем цену
	Объект.Цена = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(Объект.Цена,
		СтруктураКурсовСтаройВалюты, СтруктураКурсовНовойВалюты);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	Если Не ПодразделениеДоИзменения = Объект.Подразделение Тогда
		ПодразделениеПриИзмененииСервер();
		ОбновитьКешированныеЗначенияШапкиДляУчетаСерий();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер()
	
	ПолучательПоУмолчаниюСервер();
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
	Объект.Назначение = Неопределено;
	ПодразделениеДоИзменения = Объект.Подразделение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ПолучательПриИзмененииСервер();
	
	ОбновитьКешированныеЗначенияШапкиДляУчетаСерий();
	
КонецПроцедуры

&НаСервере
Процедура ПолучательПриИзмененииСервер()
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусУказанияСерийНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий();
	
	ДополнительныеПараметры = Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатусУказанияСерийНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусУказанияСерийНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	ЗначениеВозврата = Результат;
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииНаСервере()
	
	АктуализироватьВыпускПодДеятельность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыВкладкаПоПравилу

&НаКлиенте
Процедура КоличествоПоПравилуПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоРаспределенияПриИзменении(Элемент)
	
	УстановитьВидимостьНастройкиПравилаРаспределения();
	ЗаполнитьНастройкиПоУмолчаниюИзПравилаРаспределения(Объект.ПравилоРаспределения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоРаспределенияОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьВидимостьНастройкиПравилаРаспределения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоГруппамПродукцииПриИзменении(Элемент)
	
	УстановитьВидимостьПоОтборуПоГруппамПродукции();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтборПоГруппамПродукцииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("МассивГруппПродукции", ОтборПоГруппамПродукции.ВыгрузитьЗначения());

	ОткрытьФорму("Справочник.ПравилаРаспределенияРасходов.Форма.ФормаОтбора",
			ПараметрыОтбора,
			ЭтаФорма,,,, 
			Новый ОписаниеОповещения("НадписьОтборНажатиеЗавершение", ЭтотОбъект, "ОтборПоГруппамПродукции"), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтборБазыРаспределенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура();
	ДопПараметрОтбора = "";
	Если Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов")
		ИЛИ Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов")
		ИЛИ Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов") Тогда
		ПараметрыОтбора.Вставить("МассивМатериалов", ОтборПоМатериалам.ВыгрузитьЗначения());
		ДопПараметрОтбора = "ОтборПоМатериалам";
	ИначеЕсли Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов") Тогда
		ПараметрыОтбора.Вставить("МассивВидовРабот", ОтборПоВидамРабот.ВыгрузитьЗначения());
		ДопПараметрОтбора = "ОтборПоВидамРабот";
	КонецЕсли;

	ОткрытьФорму("Справочник.ПравилаРаспределенияРасходов.Форма.ФормаОтбора",
			ПараметрыОтбора,
			ЭтаФорма,,,, 
			Новый ОписаниеОповещения("НадписьОтборНажатиеЗавершение", ЭтотОбъект, ДопПараметрОтбора), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыВкладкаДополнительно

&НаКлиенте
Процедура ВыпускПодДеятельностьПриИзменении(Элемент)
	ВыпускПодДеятельностьПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыпускПодДеятельностьПриИзмененииНаСервере()
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускПодДеятельностьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПартииПроизводства

&НаКлиенте
Процедура ПартииПроизводстваПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПроизводстваПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОткрытьФормуПодборПоПартиям();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеРасходы

&НаКлиенте
Процедура ПрочиеРасходыПриИзменении(Элемент)
	ОбновитьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, ТекущиеДанные, "Объект.ПрочиеРасходы");
	
	//Настройка счетов учета 
	Если НоваяСтрока И Копирование Тогда
		НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элементы.ПрочиеРасходыСтатьяРасходов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииВШапке(Команда)
	ОткрытьПодборСерий();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиКалькуляции(Команда)
	
	ЗаполнитьСтатьиКалькуляцииВТабличнойЧасти("ПартииПроизводства");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНастройкиВМодельФормированияСтоимости(Команда)
	
	ПеренестиНастройкиВМодельФормированияСтоимостиСервер();
	Оповестить("МодельФормированияСтоимости_Изменение");
	
КонецПроцедуры

#Область ОбработчикиКомандФормыТаблицаПрочиеРасходы

&НаКлиенте
Процедура ПрочиеРасходыЗаполнитьПодразделение(Команда)
	
	Если Не РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.ПрочиеРасходы) Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрочиеРасходыЗаполнитьПодразделениеЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки));
	
	ОткрытьФорму(
		"Справочник.СтруктураПредприятия.ФормаВыбора",,
		ЭтаФорма,
		,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыЗаполнитьПодразделениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			СтрокаТаблицы = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Строка);
			Если СтрокаТаблицы <> Неопределено Тогда
				СтрокаТаблицы.Подразделение = Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыЗаполнитьСтатьюРасходов(Команда)
	
	Если Не РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.ПрочиеРасходы) Тогда
		Возврат;
	КонецЕсли;
	ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
	ДоходыИРасходыКлиент.ЗаполнитьСтатьюИАналитикуВВыделенныхСтроках(
		ЭтотОбъект, Элементы.ПрочиеРасходыСтатьяРасходов, ВыделенныеСтроки);

КонецПроцедуры

#КонецОбласти

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НастройкаСчетовУчетаСервер.ПриЧтенииНаСервере(ЭтотОбъект, 
		Документы.РаспределениеВозвратныхОтходов.ПараметрыНастройкиСчетовУчета());
		
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, 
		Документы.РаспределениеВозвратныхОтходов.ПараметрыВыбораСтатейИАналитик());
		
	ПодразделениеДоИзменения = Объект.Подразделение;
	ЗаполнитьСтатьюКалькуляцииПоУмолчанию();
	ЗаполнитьСлужебныеРеквизитыФормы();
	ЗатратыСервер.ЗаполнитьХарактеристикиИзделийПоПартииПроизводства(Объект.ПартииПроизводства);
	
	ВалютаДокумента = Объект.Валюта;
	
	Элементы.ГруппаОтборПоВидамПродукции.Видимость = АналитическийУчетПоГруппамПродукции;
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Элементы.ПартииПроизводстваЭтап.Видимость = Ложь;
	КонецЕсли;
	
	ЗатратыСервер.НастроитьПараметрыВыбораПравилРаспределения(
		Объект.Подразделение,
		Неопределено,
		Элементы.ПравилоРаспределения,
		Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеМатериаловИРабот);
	
	ПараметрыУказанияСерий();
	НастроитьЭлементыСерий();
	УстановитьВидимостьПолучателя();
	
	УстановитьЗаголовокКоличества();
	
	АктуализироватьВыпускПодДеятельность(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеТипаПолучатель()

	Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ОграничениеТипаПолучатель = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	Иначе
		ОграничениеТипаПолучатель = Новый ОписаниеТипов("СправочникСсылка.Склады");
	КонецЕсли; 
	
	Элементы.Получатель.ОграничениеТипа = ОграничениеТипаПолучатель;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоги()
	
	КоличествоПоПартиям		= Объект.ПартииПроизводства.Итог("Количество");
	КоличествоПоРасходам	= Объект.ПрочиеРасходы.Итог("Количество");
	КоличествоПоПравилу		= Объект.КоличествоПоПравилу;
	
	СуммаВручнуюПоПартиям	= Объект.Цена * КоличествоПоПартиям;
	СуммаПоПравилам			= Объект.Цена * КоличествоПоПравилу;
	СуммаПоРасходам			= Объект.Цена * КоличествоПоРасходам;
	СуммаВсего				= СуммаВручнуюПоПартиям + СуммаПоПравилам + СуммаПоРасходам;
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область Оформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// ПравилоРаспределение, СтатьяКалькуляции - отметка незаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоРаспределения.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьяКалькуляции.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КоличествоПоПравилу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеХарактеристики()
	
	ПолеХарактеристика = Элементы.Характеристика;
	
	Если ХарактеристикиИспользуются Тогда
		ПолеХарактеристика.ПодсказкаВвода = "";
		ПолеХарактеристика.Доступность = Истина;
		ПолеХарактеристика.АвтоОтметкаНезаполненного = Истина;
	Иначе
		ПолеХарактеристика.ПодсказкаВвода = НСтр("ru = '<характеристики не используются>';
												|en = '<variants are not used>'");
		ПолеХарактеристика.Доступность = Ложь;
		ПолеХарактеристика.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеНазначения()
	
	ПолеНазначение = Элементы.Назначение;
	
	Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")
		ИЛИ ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		Объект.Назначение = Неопределено;
		ПолеНазначение.ПодсказкаВвода = НСтр("ru = '<только для товаров и работ>';
											|en = '<only for goods and labor>'");
		ПолеНазначение.Доступность = Ложь;
	Иначе
		ПолеНазначение.ПодсказкаВвода = "";
		ПолеНазначение.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКоличества()
	
	ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "ЕдиницаИзмерения");
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ТекстЗаголовка = НСтр("ru = 'Количество%1';
								|en = 'Quantity%1'");
		ПараметрСтроки = " (" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "Наименование") + ")";
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ПараметрСтроки);
		Элементы.ПартииПроизводстваКоличество.Заголовок = ТекстЗаголовка;
		Элементы.ПрочиеРасходыКоличество.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНастройкиПравилаРаспределения()
	
	Если ЗначениеЗаполнено(Объект.ПравилоРаспределения) Тогда
		Элементы.ПеренестиНастройкиВПравило.Видимость	= Истина;
		Элементы.ГруппаБазаРаспределения.Видимость		= Истина;
		Элементы.ГруппаОтборПоВидамПродукции.Видимость	= АналитическийУчетПоГруппамПродукции;
		Элементы.СтатьяКалькуляции.Видимость			= Истина;
	Иначе
		Элементы.ПеренестиНастройкиВПравило.Видимость	= Ложь;
		Элементы.ГруппаБазаРаспределения.Видимость		= Ложь;
		Элементы.ГруппаОтборПоВидамПродукции.Видимость	= Ложь;
		Элементы.СтатьяКалькуляции.Видимость			= Ложь;
	КонецЕсли;
	УстановитьТекстИВидимостьОтбораБазыРаспределения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоОтборуПоГруппамПродукции()
	
	Элементы.НадписьОтборПоГруппамПродукции.Видимость = ИспользоватьОтборПоГруппамПродукции;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокПолучателя()
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		Элементы.Получатель.Заголовок = НСтр("ru = 'Подразделение-получатель';
											|en = 'Receiving business unit'");
	Иначе
		Элементы.Получатель.Заголовок = НСтр("ru = 'Склад';
											|en = 'Warehouse'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиОтбораПоГруппамПродукции()
	
	ТекстНадписи = "";
	Для Каждого Элемент Из ОтборПоГруппамПродукции Цикл 
		ТекстНадписи = ТекстНадписи + ?(ТекстНадписи = "", "", "; ") + СокрЛП(Элемент.Значение);
	КонецЦикла;
	Если ТекстНадписи = "" Тогда
		ТекстНадписи = НСтр("ru = 'Указать группы (виды) продукции';
							|en = 'Specify groups (kinds) of manufactured products'");
	КонецЕсли;
	
	НадписьОтборПоГруппамПродукции = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстИВидимостьОтбораБазыРаспределения()

	Если Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов
		ИЛИ Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов
		ИЛИ Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов Тогда
		Элементы.НадписьОтборБазыРаспределения.Видимость = Истина;
		УстановитьТекстНадписиОтбораПоМатериалам();
	ИначеЕсли Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов Тогда
		Элементы.НадписьОтборБазыРаспределения.Видимость = Истина;
		УстановитьТекстНадписиОтбораПоВидамРабот();
	Иначе
		Элементы.НадписьОтборБазыРаспределения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиОтбораПоМатериалам()
	
	ТекстНадписи = "";
	Для Каждого Элемент Из ОтборПоМатериалам Цикл 
		ТекстНадписи = ТекстНадписи + ?(ТекстНадписи = "", "", "; ") + СокрЛП(Элемент.Значение);
	КонецЦикла;
	Если ТекстНадписи = "" Тогда
		ТекстНадписи = НСтр("ru = 'Указать материалы';
							|en = 'Specify materials'");
	КонецЕсли;
	
	НадписьОтборБазыРаспределения = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиОтбораПоВидамРабот()
	
	ТекстНадписи = "";
	Для Каждого Элемент Из ОтборПоВидамРабот Цикл 
		ТекстНадписи = ТекстНадписи + ?(ТекстНадписи = "", "", "; ") + СокрЛП(Элемент.Значение);
	КонецЦикла;
	Если ТекстНадписи = "" Тогда
		ТекстНадписи = НСтр("ru = 'Указать виды работ';
							|en = 'Specify activity kinds'");
	КонецЕсли;
	
	НадписьОтборБазыРаспределения = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолучателя()
	Если Не ИспользоватьНесколькоСкладов
		И (Не ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
			ИЛИ Объект.Номенклатура = Справочники.Номенклатура.ПустаяСсылка())Тогда
		Элементы.Получатель.Видимость = Ложь;
	Иначе
		Элементы.Получатель.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыСлужебные

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьСтатьиКалькуляцииВТабличнойЧасти(ИмяТЧ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо заполнить статью калькуляции.';
									|en = 'Select the lines for which it is required to populate the product cost element.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтатьяКалькуляции = Неопределено;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипЗатрат", ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ВозвратныеОтходы"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьСтатьиКалькуляцииВТЧЗавершение", ЭтотОбъект, ИмяТЧ);
	
	ОткрытьФорму("Справочник.СтатьиКалькуляции.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиКалькуляцииВТЧЗавершение(Результат, ИмяТЧ) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	ТабличнаяЧасть = Объект[ИмяТЧ];
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущиеДанные.СтатьяКалькуляции = Результат;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодборПоПартиям()
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Организация",		Объект.Организация);
	СтруктураОтбора.Вставить("Подразделение",	Объект.Подразделение);
	СтруктураОтбора.Вставить("Назначение",		Объект.Назначение);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("НачалоПериода",	НачалоМесяца(Объект.Дата));
	ПараметрыФормы.Вставить("ОкончаниеПериода",	КонецМесяца(Объект.Дата));
	ПараметрыФормы.Вставить("СтруктураОтбора",	СтруктураОтбора);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуПодборПоПартиямЗавершение", ЭтаФорма);
	
	ОткрытьФорму("ОбщаяФорма.ПодборПартийПроизводства",
		ПараметрыФормы,
		ЭтаФорма,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодборПоПартиямЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуПодборПоПартиямЗавершениеСервер(Результат);
	ОбновитьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьФормуПодборПоПартиямЗавершениеСервер(Результат)
	
	ТаблицаПартий		= ПолучитьИзВременногоХранилища(Результат);
	Модифицированность	= Истина;
	
	Для Каждого Строка Из ТаблицаПартий Цикл
		
		НоваяСтрока = Объект.ПартииПроизводства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если ЗначениеЗаполнено(СтатьяКалькуляции) Тогда
			НоваяСтрока.СтатьяКалькуляции = СтатьяКалькуляции;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтборНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатОтбора = Результат;
	Если ТипЗнч(РезультатОтбора) = Тип("Массив") Тогда
		Если ДополнительныеПараметры = "ОтборПоГруппамПродукции" Тогда
			ОтборПоГруппамПродукции.ЗагрузитьЗначения(РезультатОтбора);
			УстановитьТекстНадписиОтбораПоГруппамПродукции();
			Модифицированность = Истина;
		ИначеЕсли ДополнительныеПараметры = "ОтборПоМатериалам" Тогда
			ОтборПоМатериалам.ЗагрузитьЗначения(РезультатОтбора);
			УстановитьТекстНадписиОтбораПоМатериалам();
			Модифицированность = Истина;
		ИначеЕсли ДополнительныеПараметры = "ОтборПоВидамРабот" Тогда
			ОтборПоВидамРабот.ЗагрузитьЗначения(РезультатОтбора);
			УстановитьТекстНадписиОтбораПоВидамРабот();
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПеренестиНастройкиВМодельФормированияСтоимостиСервер()
	
	Запись = РегистрыСведений.МоделиФормированияСтоимости.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(Запись, Объект);
	
	Запись.Подразделение = Объект.Подразделение;
	Запись.МодельФормированияСтоимости = Перечисления.ТипыМоделейФормированияСтоимости.ВыпускПоФиксированнойСтоимости;
	Запись.ПравилоРаспределения = Объект.ПравилоРаспределения;
	Запись.Спецификация = Неопределено;
	Запись.ОтражатьЗатратыДокументом = Ложь;
	
	Запись.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСтруктурыДействий

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(Форма, СтруктураДействий)

	Объект = Форма.Объект;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Объект.Характеристика);
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		Форма.ИмяФормы, "Объект"));
		
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Номенклатура, "ТипНоменклатуры, ИспользованиеХарактеристик");

	ТипНоменклатуры 			= РеквизитыНоменклатуры.ТипНоменклатуры;
	ИспользованиеХарактеристик	= РеквизитыНоменклатуры.ИспользованиеХарактеристик;
		
	МассивВариантов = Новый Массив;
	МассивВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
	МассивВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры);
	МассивВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
	
	ХарактеристикиИспользуются = Не (МассивВариантов.Найти(ИспользованиеХарактеристик) = Неопределено);
	
	УстановитьЗаголовокПолучателя();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьюКалькуляцииПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
//++ НЕ УТКА
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПартииПроизводства.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ПартииПроизводства.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.РаспределениеВозвратныхОтходов.ПартииПроизводства КАК ПартииПроизводства
	|ГДЕ
	|	ПартииПроизводства.Ссылка.Номенклатура = &Номенклатура
	|	И ПартииПроизводства.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.СтатьяКалькуляции) Тогда
			СтатьяКалькуляции = Выборка.СтатьяКалькуляции
		Иначе
			Если Выборка.Следующий() Тогда
				СтатьяКалькуляции = Выборка.СтатьяКалькуляции;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
//-- НЕ УТКА

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПоУмолчаниюИзПравилаРаспределения(Правило)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	М.Материал
	|ИЗ
	|	Справочник.ПравилаРаспределенияРасходов.ОтборПоМатериалам КАК М
	|ГДЕ
	|	М.Ссылка = &Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Р.ВидРабот
	|ИЗ
	|	Справочник.ПравилаРаспределенияРасходов.ОтборПоВидамРабот КАК Р
	|ГДЕ
	|	Р.Ссылка = &Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	П.ГруппаПродукции
	|ИЗ
	|	Справочник.ПравилаРаспределенияРасходов.ОтборПоГруппамПродукции КАК П
	|ГДЕ
	|	П.Ссылка = &Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	С.СтатьяКалькуляции
	|ИЗ
	|	Справочник.ПравилаРаспределенияРасходов КАК С
	|ГДЕ
	|	С.Ссылка = &Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	С.БазаРаспределения
	|ИЗ
	|	Справочник.ПравилаРаспределенияРасходов КАК С
	|ГДЕ
	|	С.Ссылка = &Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
	
	Запрос.УстановитьПараметр("Ссылка", Правило);
	Результат = Запрос.ВыполнитьПакет();
	ОтборПоМатериалам.ЗагрузитьЗначения(Результат[0].Выгрузить().ВыгрузитьКолонку("Материал"));
	ОтборПоВидамРабот.ЗагрузитьЗначения(Результат[1].Выгрузить().ВыгрузитьКолонку("ВидРабот"));
	ОтборПоГруппамПродукции.ЗагрузитьЗначения(Результат[2].Выгрузить().ВыгрузитьКолонку("ГруппаПродукции"));
	
	ИспользоватьОтборПоГруппамПродукции = (ОтборПоГруппамПродукции.Количество() > 0);
	
	Объект.СтатьяКалькуляции = ?(НЕ Результат[3].Пустой(),
										Результат[3].Выгрузить()[0].СтатьяКалькуляции,
										Справочники.СтатьиКалькуляции.ПустаяСсылка());
	
	Объект.БазаРаспределения = ?(НЕ Результат[4].Пустой(),
										Результат[4].Выгрузить()[0].БазаРаспределения,
										Перечисления.ТипыБазыРаспределенияРасходов.ПустаяСсылка());
	
	УстановитьТекстИВидимостьОтбораБазыРаспределения();
	УстановитьВидимостьПоОтборуПоГруппамПродукции();
	УстановитьТекстНадписиОтбораПоГруппамПродукции();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиОтбора()
	
	ОтборПоГруппамПродукции.ЗагрузитьЗначения(Объект.ОтборПоГруппамПродукции.Выгрузить(, "ГруппаПродукции").ВыгрузитьКолонку("ГруппаПродукции"));
	ИспользоватьОтборПоГруппамПродукции = (ОтборПоГруппамПродукции.Количество() > 0);
	ОтборПоВидамРабот.ЗагрузитьЗначения(Объект.ОтборПоВидамРабот.Выгрузить(, "ВидРабот").ВыгрузитьКолонку("ВидРабот"));
	ОтборПоМатериалам.ЗагрузитьЗначения(Объект.ОтборПоМатериалам.Выгрузить(, "Материал").ВыгрузитьКолонку("Материал"));
	
КонецПроцедуры

&НаСервере
Процедура ПолучательПоУмолчаниюСервер()
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		И (Не ЗначениеЗаполнено(Объект.Получатель)
			ИЛИ НЕ ТипЗнч(Объект.Получатель) = Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
		Объект.Получатель = Объект.Подразделение;
	ИначеЕсли Не ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		Если ИспользоватьНесколькоСкладов Тогда
			Объект.Получатель = ЗначениеНастроекПовтИсп.ПолучитьЦеховуюКладовуюПоУмолчанию(Объект.Подразделение, Объект.Получатель);
		Иначе
			Объект.Получатель = СкладПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыФормы()
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ВидЦенПлановойСтоимости = Справочники.ВидыЦен.ВидЦеныПлановойСтоимостиТМЦ();
	ПартионныйУчетВключен = РасчетСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(Объект.Дата));
	АналитическийУчетПоГруппамПродукции = ПолучитьФункциональнуюОпцию("АналитическийУчетПоГруппамПродукции");
	
	ЗаполнитьСкладПоУмолчанию();
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкладПоУмолчанию()
	
	Если ИспользоватьНесколькоСкладов Тогда
		СкладПоУмолчанию = Справочники.Склады.ПустаяСсылка();
	Иначе
		СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьВыпускПодДеятельность(Заполнить = Истина)
	
	ПараметрыЗаполнения = Документы.РаспределениеВозвратныхОтходов.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ВыпускПодДеятельность,
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ВыпускПодДеятельность,
		Объект.ВыпускПодДеятельность,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Функция ПараметрыФормыУказанияСерий()
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, Неопределено, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения)

	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(Объект, 
				ПараметрыУказанияСерий, КэшированныеЗначения);
	УстановитьДоступностьСерииВШапке();

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий);
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыСерий()

	Элементы.УказатьСерииВШапке.Видимость	= ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.СтатусУказанияСерий.Видимость	= ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.Серия.Видимость				= ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;

	УстановитьДоступностьСерииВШапке();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСерииВШапке()
	
	Если Объект.СтатусУказанияСерий = 14
		Или Объект.СтатусУказанияСерий = 13 Тогда
		Элементы.Серия.Доступность = Истина;
		Элементы.Серия.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Серия.Доступность = Ложь;
		Элементы.Серия.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Элементы.УказатьСерииВШапке.Доступность = Объект.СтатусУказанияСерий <> 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма, ПараметрыУказанияСерий, Текст)Тогда
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий();
		
		ДополнительныеПараметры = Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	ЗначениеВозврата = Результат;
	
	Если ЗначениеВозврата <> Неопределено Тогда
		
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		
		Если ЦенообразованиеКлиент.НеобходимПересчетЦеныПриИзменении(Объект.Номенклатура, "Серия", Объект.Дата) Тогда
	
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
			
			Если Не СтруктураДействий.Количество() = 0 Тогда
				ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьКешированныеЗначенияШапкиДляУчетаСерий();
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКешированныеЗначенияШапкиДляУчетаСерий()
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,
												КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	
	ПараметрыУказанияСерий();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	НастроитьЭлементыСерий();
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыУказанияСерий()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РаспределениеВозвратныхОтходов));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
