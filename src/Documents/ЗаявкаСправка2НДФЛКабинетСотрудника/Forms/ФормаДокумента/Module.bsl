
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	ЗаявкиСотрудниковФормы.ПриСозданииНаСервере(ЭтотОбъект, ОписаниеДокумента());
	ИнициализацияФормы();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанных(ТекущийОбъект);
	ЗаявкиСотрудниковФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, ОписаниеДокумента());
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, ПараметрОповещения, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, ПараметрОповещения) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаявкиСотрудниковФормыКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, ПараметрОповещения, Источник);
	
	Если ИмяСобытия = "ЗаписьПечатныхФормСЭЦП" Тогда
		Отбор = Новый Структура("ДокументСсылка", Источник);
		Если ЗначениеЗаполнено(Объект.ДокументыПоЗаявке.НайтиСтроки(Отбор)) Тогда
			ВывестиДокументыИзТаблицыДокументовЗаявки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_УдалитьДокумент(Элемент)

	ЗаявкиСотрудниковФормыКлиент.УдалитьДокументПоЗаявке(ЭтаФорма, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьФайлСправки(Элемент)

	ИмяЭлемента = Элемент.Имя;
	ИдентификаторСтроки = Число(СтрЗаменить(ИмяЭлемента, "_СоздатьФайлСправки", ""));
	ЭлементКоллекции = Объект.ДокументыПоЗаявке.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ЭлементКоллекции <> Неопределено Тогда
		Справка2НДФЛ = ЭлементКоллекции.ДокументСсылка;
		СформироватьФайлСправки(Справка2НДФЛ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьФайлСправки(Элемент)
	
	ЗаявкиСотрудниковФормыКлиент.УдалитьФайлСправки(ЭтаФорма, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФайлСправкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаявкиСотрудниковФормыКлиент.ОткрытьПрисоединенныйФайл(ЭтаФорма, ЭтаФорма[Элемент.Имя]);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьФайлСправки(Элемент)

	ЗаявкиСотрудниковФормыКлиент.ВыбратьФайлСправки(ЭтаФорма, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписатьФайлСправки(Элемент)

	ИмяЭлемента = Элемент.Имя;
	ИдентификаторСтроки = Число(СтрЗаменить(ИмяЭлемента, "_ПодписанЭП", ""));
	ЭлементКоллекции = Объект.ДокументыПоЗаявке.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ЭлементКоллекции <> Неопределено Тогда
		ФайлСправки = ЭлементКоллекции.ФайлСправки;
		ЗаявкиСотрудниковФормыКлиент.ПодписатьФайл(ЭтаФорма, ФайлСправки, ЭтоФайлПечатнойФормы(ФайлСправки));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиПодключаемыхКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ЗаявкаВыполнена(Команда)
	
	РезультатВыполненияЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена");
	ВыполнитьЗаявкуНаКлиенте(РезультатВыполненияЗаявки);

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаОтклонена(Команда)
	
	РезультатВыполненияЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена");
	ВыполнитьЗаявкуНаКлиенте(РезультатВыполненияЗаявки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТиповойОтвет(Команда)
	
	ЗаявкиСотрудниковФормыКлиент.ВыбратьТиповойОтвет(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокумент(Команда)
	
	ОткрытьФорму("Документ.СправкаНДФЛ.ФормаОбъекта", ПараметрыЗаполненияСправки(), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	Отбор = Новый Структура("Организация,Сотрудник,СпособФормирования");
	Отбор.Организация 			= Объект.Организация;
	Отбор.Сотрудник 			= Объект.ФизическоеЛицо;
	Отбор.СпособФормирования 	= Объект.СпособФормирования;
	
	НалоговыйПериод = НалоговыйПериодДляСправки(ЭтаФорма);
	Если ЗначениеЗаполнено(НалоговыйПериод) Тогда
		Отбор.Вставить("НалоговыйПериод", НалоговыйПериод);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора,Отбор");
	ПараметрыФормы.РежимВыбора 	= Истина;
	ПараметрыФормы.Отбор 		= Отбор;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьДокументЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СправкаНДФЛ.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокИсполнения(Команда)
	
	ЗаявкиСотрудниковФормыКлиент.ИзменитьСрокИсполнения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиПодсистем

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ЗавершениеЗаявки

&НаКлиенте
Процедура ВыполнитьЗаявкуНаКлиенте(РезультатВыполненияЗаявки)

	Если ЗаявкаГотоваКВыполнению(РезультатВыполненияЗаявки) Тогда
		ЗаявкиСотрудниковФормыКлиент.НачатьВыполнениеКомандыЗаявкаВыполнена(ЭтаФорма, РезультатВыполненияЗаявки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция РезультатЗаписиВыполненияЗаявки(РезультатВыполненияЗаявки) Экспорт

	Возврат РезультатЗаписиВыполненияЗаявкиНаСервере(РезультатВыполненияЗаявки);

КонецФункции

&НаСервере
Функция РезультатЗаписиВыполненияЗаявкиНаСервере(РезультатВыполненияЗаявки) Экспорт
	
	Возврат ЗаявкиСотрудников.РезультатЗаписиВыполненияЗаявки(ЭтаФорма, РезультатВыполненияЗаявки, ОписаниеДокумента());
	
КонецФункции

&НаКлиенте
Процедура ОбработчикЗавершенияЗаписиВыполненияЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаявкиСотрудниковФормыКлиент.ОбработчикЗавершенияЗаписиВыполненияЗаявки(Результат, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область ВыводДокументовИзТаблицыДокументовЗаявки

&НаКлиенте
Процедура ВывестиДокументыИзТаблицыДокументовЗаявки() Экспорт
	
	ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере()
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере()
	
	ДополнитьТаблицуДокументыПоЗаявке();
	ВывестиДокументыПоЗаявке();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуДокументыПоЗаявке()
	
	Справки = Объект.ДокументыПоЗаявке.Выгрузить().ВыгрузитьКолонку("ДокументСсылка");
	Если Справки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Справки", Справки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправкаНДФЛ.Ссылка КАК Ссылка,
	|	ФайлСправки.Ссылка КАК ФайлСправки,
	|	ФайлСправки.ПодписанЭП КАК ПодписанЭП,
	|	СправкаНДФЛ.ПометкаУдаления КАК ПометкаУдаления,
	|	СправкаНДФЛ.Проведен КАК Проведен,
	|	СправкаНДФЛ.НалоговыйПериод КАК НалоговыйПериод
	|ИЗ
	|	Документ.СправкаНДФЛ КАК СправкаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СправкаНДФЛПрисоединенныеФайлы КАК ФайлСправки
	|			ПО ДокументКадровогоЭДО.ЭлектронныйДокумент = ФайлСправки.Ссылка
	|				И (НЕ ФайлСправки.ПометкаУдаления)
	|		ПО СправкаНДФЛ.Ссылка = ДокументКадровогоЭДО.ОснованиеДокумента
	|			И (НЕ ДокументКадровогоЭДО.ПометкаУдаления)
	|ГДЕ
	|	СправкаНДФЛ.Ссылка В(&Справки)";
	ДанныеСправок = Запрос.Выполнить().Выгрузить();

	ФайлыОжидающиеПодписание = Новый Соответствие;
	Если Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП Тогда
		ФайлыСправок = Новый Массив;
		Для каждого СтрокаТЗ Из ДанныеСправок Цикл
			Если ЗначениеЗаполнено(СтрокаТЗ.ФайлСправки) И Не СтрокаТЗ.ПодписанЭП Тогда
				ФайлыСправок.Добавить(СтрокаТЗ.ФайлСправки);
			КонецЕсли;
		КонецЦикла;
		ФайлыОжидающиеПодписание = ЗаявкиСотрудниковФормы.ФайлыОжидающиеПодписание(ФайлыСправок);
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Объект.ДокументыПоЗаявке Цикл
		СтрокаТЗ = ДанныеСправок.Найти(СтрокаТЧ.ДокументСсылка, "Ссылка");
		Если СтрокаТЗ <> Неопределено Тогда
			СтрокаТЧ.НалоговыйПериод 	= СтрокаТЗ.НалоговыйПериод;
			СтрокаТЧ.ФайлСправки 		= СтрокаТЗ.ФайлСправки;
			СтрокаТЧ.ПодписанЭП 		= СтрокаТЗ.ПодписанЭП;
			СтрокаТЧ.ОжидаетПодписания 	= (ФайлыОжидающиеПодписание[СтрокаТЗ.ФайлСправки] <> Неопределено);
			СтрокаТЧ.Исполнитель 		= ФайлыОжидающиеПодписание[СтрокаТЗ.ФайлСправки];
			Если СтрокаТЗ.Проведен Тогда
				СтрокаТЧ.СтатусДокумента = 1;
			ИначеЕсли СтрокаТЗ.ПометкаУдаления Тогда
				СтрокаТЧ.СтатусДокумента = 3;
			Иначе
				СтрокаТЧ.СтатусДокумента = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументыПоЗаявке()
	
	ИмяГруппыРодитель = "ГруппаДокументыПоЗаявке";
	ГруппаФормыРодитель = Элементы.Найти(ИмяГруппыРодитель);
	УдаляемыеЭлементы = Новый Массив;
	Если ГруппаФормыРодитель.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Для каждого ЭлементФормы Из ГруппаФормыРодитель.ПодчиненныеЭлементы Цикл
			УдаляемыеЭлементы.Добавить(ЭлементФормы);
		КонецЦикла;
	КонецЕсли;
	Для каждого ЭлементФормы Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(ЭлементФормы);
	КонецЦикла;
	
	РеквизитыФормы = ПолучитьРеквизиты();
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если СтрНайти(РеквизитФормы.Имя, "НалоговыйПериод") > 0
			Или СтрНайти(РеквизитФормы.Имя, "Справка") > 0
			Или СтрНайти(РеквизитФормы.Имя, "ФайлСправки") > 0
			Или СтрНайти(РеквизитФормы.Имя, "ПодписанЭП") > 0
			Или СтрНайти(РеквизитФормы.Имя, "ОжидаетПодписания") > 0 Тогда
			УдаляемыеРеквизиты.Добавить(РеквизитФормы.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ЗначенияРеквизитов = Новый Структура;
	Для каждого ЭлементКоллекции Из Объект.ДокументыПоЗаявке Цикл
		
		Индекс = Строка(ЭлементКоллекции.ПолучитьИдентификатор());
		
		ИмяРеквизита = СтрШаблон("_%1%2", "НалоговыйПериод", Индекс);
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Число"));
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		
		ИмяРеквизита = СтрШаблон("_%1%2", "Справка", Индекс);
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ДокументСсылка.СправкаНДФЛ"));
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		ЗначенияРеквизитов.Вставить(ИмяРеквизита, ЭлементКоллекции["ДокументСсылка"]);
		
		ИмяРеквизита = СтрШаблон("_%1%2", "ФайлСправки", Индекс);
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("СправочникСсылка.СправкаНДФЛПрисоединенныеФайлы"));
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		ЗначенияРеквизитов.Вставить(ИмяРеквизита, ЭлементКоллекции["ФайлСправки"]);
		
		ИмяРеквизита = СтрШаблон("_%1%2", "ПодписанЭП", Индекс);
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		ЗначенияРеквизитов.Вставить(ИмяРеквизита, ЭлементКоллекции["ПодписанЭП"]);
		
		ИмяРеквизита = СтрШаблон("_%1%2", "ОжидаетПодписания", Индекс);
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		ЗначенияРеквизитов.Вставить(ИмяРеквизита, ЭлементКоллекции["ОжидаетПодписания"]);
		
	КонецЦикла;
	
	НетДокументовПоЗаявке = (Объект.ДокументыПоЗаявке.Количество() = 0);
	Если НетДокументовПоЗаявке Тогда
		ТекстЗаголовка = НСтр("ru = '<документы по заявке не созданы>';
								|en = '<документы по заявке не созданы>'");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьДокументыЗаявкиПояснение", "Заголовок", ТекстЗаголовка);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьДокументыЗаявкиПояснение", "Видимость", НетДокументовПоЗаявке);
	
	Если ДобавляемыеРеквизиты.Количество() = 0 И УдаляемыеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов);
	
	ВыводитьФайлСправки = (Объект.ВариантФормированияФайлаОтвета <> Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде);
	ФайлСканСПодписьюИПечатью = (Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.СканСПодписьюИПечатью);
	ТребуетсяПодписьФайла = (Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
	
	Для каждого ЭлементКоллекции Из Объект.ДокументыПоЗаявке Цикл
		
		СтатусДокумента = ЭлементКоллекции.СтатусДокумента;
		КартинкаДокумента = БиблиотекаКартинок.Документ;
		Если СтатусДокумента = 1 Тогда
			КартинкаДокумента = БиблиотекаКартинок.ДокументПроведен;
		ИначеЕсли СтатусДокумента = 3 Тогда
			КартинкаДокумента = БиблиотекаКартинок.ДокументПомеченНаУдаление;
		КонецЕсли;
		
		Индекс = Строка(ЭлементКоллекции.ПолучитьИдентификатор());
		
		// Подгруппа
		ИмяГруппы = СтрШаблон("_%1%2", ИмяГруппыРодитель, Индекс);
		ГруппаСправка = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаФормыРодитель);
		ГруппаСправка.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСправка.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаСправка.Отображение 			= ОтображениеОбычнойГруппы.Нет;
		ГруппаСправка.ОтображатьЗаголовок 	= Ложь;
		ГруппаСправка.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		
		// Подгруппа справка
		ИмяГруппы = СтрШаблон("_%1%2%3", ИмяГруппыРодитель, "Справка", Индекс);
		ПодчиненнаяГруппа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаСправка);
		ПодчиненнаяГруппа.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
		ПодчиненнаяГруппа.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ПодчиненнаяГруппа.Отображение 			= ОтображениеОбычнойГруппы.Нет;
		ПодчиненнаяГруппа.ОтображатьЗаголовок 	= Ложь;
		ПодчиненнаяГруппа.ЦветФона 					= ЦветаСтиля.ЦветДополнительнойНавигации;
		ПодчиненнаяГруппа.ГоризонтальныйИнтервал 	= ИнтервалМеждуЭлементамиФормы.Половинный;
		ПодчиненнаяГруппа.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		
		// Декорация Налоговый период.
		ШаблонТекст = НСтр("ru = 'За %1 год:';
							|en = 'За %1 год:'");
		ТекстЗаголовка = СтрШаблон(ШаблонТекст, Формат(ЭлементКоллекции.НалоговыйПериод, "ЧГ=0"));
		ИмяЭлемента = СтрШаблон("_%1%2", "НалоговыйПериод", Индекс);
		ЭлементФормы = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ПодчиненнаяГруппа);
		ЭлементФормы.Вид 					= ВидДекорацииФормы.Надпись;
		ЭлементФормы.АвтоМаксимальнаяШирина = Истина;
		ЭлементФормы.Заголовок 				= ТекстЗаголовка;
		
		// Состояние документа-справки.
		ИмяЭлемента = СтрШаблон("_%1%2", "КартинкаСостояниеДокумент", Индекс);
		ЭлементФормы = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ПодчиненнаяГруппа);
		ЭлементФормы.Вид 		= ВидДекорацииФормы.Картинка;
		ЭлементФормы.Картинка 	= КартинкаДокумента;
		
		// Документ.
		ИмяЭлемента = СтрШаблон("_%1%2", "Справка", Индекс);
		ЭлементФормы = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ПодчиненнаяГруппа);
		ЭлементФормы.Вид 				= ВидПоляФормы.ПолеНадписи;
		ЭлементФормы.Гиперссылка 		= Истина;
		ЭлементФормы.ПутьКДанным 		= ИмяЭлемента;
		ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементФормы.АвтоМаксимальнаяШирина = Ложь;
		ЭлементФормы.МаксимальнаяШирина 	= 30;
		
		// Удаление документа.
		Если Не Объект.Выполнена Тогда
			ТекстПодсказки = НСтр("ru = 'Удалить справку';
									|en = 'Удалить справку'");
			ИмяЭлемента = СтрШаблон("_%1%2", "КартинкаУдалитьДокументПоЗаявке", Индекс);
			ЭлементФормы = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ПодчиненнаяГруппа);
			ЭлементФормы.Вид 			= ВидДекорацииФормы.Картинка;
			ЭлементФормы.Гиперссылка 	= Истина;
			ЭлементФормы.Подсказка 		= ТекстПодсказки;
			ЭлементФормы.Картинка 		= БиблиотекаКартинок.СерыйКрест;
			ЭлементФормы.УстановитьДействие("Нажатие", "Подключаемый_УдалитьДокумент");
		КонецЕсли;
		
		Если ВыводитьФайлСправки Тогда
			
			// Подгруппа файл справки
			ИмяГруппы = СтрШаблон("_%1%2%3", ИмяГруппыРодитель,"Файлы", Индекс);
			ПодчиненнаяГруппа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаСправка);
			ПодчиненнаяГруппа.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
			ПодчиненнаяГруппа.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ПодчиненнаяГруппа.Отображение 			= ОтображениеОбычнойГруппы.Нет;
			ПодчиненнаяГруппа.ОтображатьЗаголовок 	= Ложь;
			ПодчиненнаяГруппа.ЦветФона 					= ЦветаСтиля.ЦветДополнительнойНавигации;
			ПодчиненнаяГруппа.ГоризонтальныйИнтервал 	= ИнтервалМеждуЭлементамиФормы.Половинный;
			ПодчиненнаяГруппа.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
			
			Если Не ЗначениеЗаполнено(ЭлементКоллекции.ФайлСправки) Тогда
				
				Если Не ФайлСканСПодписьюИПечатью Тогда
					
					// Команда создания файла.
					ТекстЗаголовка = НСтр("ru = 'Создать файл справки';
											|en = 'Создать файл справки'");
					ИмяЭлемента = СтрШаблон("_%1%2", "СоздатьФайлСправки", Индекс);
					ЭлементФормы = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ПодчиненнаяГруппа);
					ЭлементФормы.Вид 					= ВидДекорацииФормы.Надпись;
					ЭлементФормы.Гиперссылка 			= Истина;
					ЭлементФормы.АвтоМаксимальнаяШирина = Истина;
					ЭлементФормы.Заголовок 				= ТекстЗаголовка;
					ЭлементФормы.УстановитьДействие("Нажатие", "Подключаемый_СоздатьФайлСправки");
					
					ТекстЗаголовка = НСтр("ru = 'или';
											|en = 'или'");
					ИмяЭлемента = СтрШаблон("_%1%2", "Или", Индекс);
					ЭлементФормы = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ПодчиненнаяГруппа);
					ЭлементФормы.Вид 					= ВидДекорацииФормы.Надпись;
					ЭлементФормы.АвтоМаксимальнаяШирина = Истина;
					ЭлементФормы.Заголовок 				= ТекстЗаголовка;
					
				КонецЕсли;
				
				// Команда выбора файла.
				Если ФайлСканСПодписьюИПечатью Тогда
					ТекстЗаголовка = НСтр("ru = 'Выбрать файл справки с подписью и печатью';
											|en = 'Выбрать файл справки с подписью и печатью'");
				Иначе
					ТекстЗаголовка = НСтр("ru = 'Выбрать файл';
											|en = 'Выбрать файл'");
				КонецЕсли;
				ИмяЭлемента = СтрШаблон("_%1%2", "ВыбратьФайлСправки", Индекс);
				ЭлементФормы = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ПодчиненнаяГруппа);
				ЭлементФормы.Вид 					= ВидДекорацииФормы.Надпись;
				ЭлементФормы.Гиперссылка 			= Истина;
				ЭлементФормы.АвтоМаксимальнаяШирина = Истина;
				ЭлементФормы.Заголовок 				= ТекстЗаголовка;
				ЭлементФормы.УстановитьДействие("Нажатие", "Подключаемый_ВыбратьФайлСправки");
				
			Иначе
				
				// Файл справки.
				ИмяЭлемента = СтрШаблон("_%1%2", "ФайлСправки", Индекс);
				ЭлементФормы = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ПодчиненнаяГруппа);
				ЭлементФормы.Вид 				= ВидПоляФормы.ПолеНадписи;
				ЭлементФормы.Гиперссылка 		= Истина;
				ЭлементФормы.ПутьКДанным 		= ИмяЭлемента;
				ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ЭлементФормы.АвтоМаксимальнаяШирина = Ложь;
				ЭлементФормы.МаксимальнаяШирина 	= 20;
				ЭлементФормы.УстановитьДействие("Нажатие", "Подключаемый_ФайлСправкиНажатие");
				
				// Удаление файла.
				Если Не Объект.Выполнена Тогда
					ТекстПодсказки = НСтр("ru = 'Удалить файл справки';
											|en = 'Удалить файл справки'");
					ИмяЭлемента = СтрШаблон("_%1%2", "КартинкаУдалитьФайлСправки", Индекс);
					ЭлементФормы = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ПодчиненнаяГруппа);
					ЭлементФормы.Вид 			= ВидДекорацииФормы.Картинка;
					ЭлементФормы.Гиперссылка 	= Истина;
					ЭлементФормы.Подсказка 		= ТекстПодсказки;
					ЭлементФормы.Картинка 		= БиблиотекаКартинок.СерыйКрест;
					ЭлементФормы.УстановитьДействие("Нажатие", "Подключаемый_УдалитьФайлСправки");
				КонецЕсли;
				
				Если ТребуетсяПодписьФайла Тогда
					
					// Подгруппа подпись
					ИмяГруппы = СтрШаблон("_%1%2%3", ИмяГруппыРодитель,"Подпись", Индекс);
					ПодчиненнаяГруппа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаСправка);
					ПодчиненнаяГруппа.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
					ПодчиненнаяГруппа.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
					ПодчиненнаяГруппа.Отображение 			= ОтображениеОбычнойГруппы.Нет;
					ПодчиненнаяГруппа.ОтображатьЗаголовок 	= Ложь;
					ПодчиненнаяГруппа.ЦветФона 					= ЦветаСтиля.ЦветДополнительнойНавигации;
					ПодчиненнаяГруппа.ГоризонтальныйИнтервал 	= ИнтервалМеждуЭлементамиФормы.Половинный;
					ПодчиненнаяГруппа.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
					
					ИмяЭлемента = СтрШаблон("_%1%2", "ПодписанЭП", Индекс);
					Если ЭтаФорма[ИмяЭлемента] = Истина Тогда
						ТекстЗаголовка = НСтр("ru = 'Файл подписан';
												|en = 'Файл подписан'");
						ЭлементФормы = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ПодчиненнаяГруппа);
						ЭлементФормы.Вид 					= ВидДекорацииФормы.Надпись;
						ЭлементФормы.АвтоМаксимальнаяШирина = Истина;
						ЭлементФормы.Заголовок 				= ТекстЗаголовка;
					Иначе
						ИмяЭлементаОжидаетПодписания = СтрШаблон("_%1%2", "ОжидаетПодписания", Индекс);
						ФайлОжидаетПодписания = (ЭтаФорма[ИмяЭлементаОжидаетПодписания] = Истина);
						Если ФайлОжидаетПодписания И ТекущийПользователь <> ЭлементКоллекции.Исполнитель Тогда
							ТекстЗаголовка = НСтр("ru = 'Ожидает подписания';
													|en = 'Ожидает подписания'");
							ЭлементФормы = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ПодчиненнаяГруппа);
							ЭлементФормы.Вид 					= ВидДекорацииФормы.Надпись;
							ЭлементФормы.АвтоМаксимальнаяШирина = Истина;
							ЭлементФормы.Заголовок 				= ТекстЗаголовка;
						Иначе
							ТекстЗаголовка = НСтр("ru = 'Подписать файл';
													|en = 'Подписать файл'");
							ЭлементФормы = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ПодчиненнаяГруппа);
							ЭлементФормы.Вид 					= ВидДекорацииФормы.Надпись;
							ЭлементФормы.Гиперссылка 			= Истина;
							ЭлементФормы.АвтоМаксимальнаяШирина = Истина;
							ЭлементФормы.Заголовок 				= ТекстЗаголовка;
							ЭлементФормы.УстановитьДействие("Нажатие", "Подключаемый_ПодписатьФайлСправки");
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработатьИзменениеТЧДокументыПоЗаявке

&НаКлиенте
Процедура ОбработатьИзменениеДокументыПоЗаявке() Экспорт

	ОбработатьИзменениеДокументыПоЗаявкеНаСервере();
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДокументыПоЗаявкеНаСервере()
	
	ЗаявкиСотрудников.ЗарегистрироватьДокументыПоЗаявкеПредварительно(ЭтаФорма);
	ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ПодписаниеФайла

&НаКлиенте
Процедура ПодписатьФайлЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Отказ") И Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодписатьФайлЗавершениеНаСервере(ПараметрыОповещения.ПодписанныйФайл);

КонецПроцедуры

&НаСервере
Процедура ПодписатьФайлЗавершениеНаСервере(ПодписанныйФайл) Экспорт

	Если ИспользуетсяКадровыйЭДО Тогда
		РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗарегистрироватьОбработкуФайлов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПодписанныйФайл),
				Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
	Иначе
		ЗаявкиСотрудников.ЗарегистрироватьДокументКЭДОКВыгрузке(ПодписанныйФайл);
	КонецЕсли;
	
	ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере();

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриПолученииДанных(ТекущийОбъект)
	
	Периоды = Новый Массив;
	Если Объект.СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.ВРазрезеКодовОКАТО Тогда
		Периоды.Добавить(Формат(Объект.НалоговыйПериод, "ЧГ=0"));
	Иначе
		Для Сч = Год(Объект.НачалоПериода) По Год(Объект.ОкончаниеПериода) Цикл
			Периоды.Добавить(Формат(Сч, "ЧГ=0"));
		КонецЦикла;
	КонецЕсли;
	НалоговыеПериоды = Новый ФиксированныйМассив(Периоды);

КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормы()
	
	ДополнитьТаблицуДокументыПоЗаявке();
	ВывестиДокументыПоЗаявке();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаОтправитьНаПочту", "Видимость", Объект.ОтправлятьEmail);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"КоличествоЭкземпляров", "Видимость", Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде);
	
	ТекстНазначениеСправки = НСтр("ru = 'Справка 2-НДФЛ для декларации доходов.';
									|en = 'Справка 2-НДФЛ для декларации доходов.'");
	Если Объект.СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.ВРазрезеКодовОКАТО Тогда
		ШаблонТекста = НСтр("ru = 'Справка 2-НДФЛ для декларации доходов за %1 год';
							|en = 'Справка 2-НДФЛ для декларации доходов за %1 год'");
		ТекстНазначениеСправки = СтрШаблон(ШаблонТекста, Формат(Объект.НалоговыйПериод, "ЧГ=0"));
	Иначе
		Если НалоговыеПериоды.Количество() = 1 Тогда
			ШаблонТекста = НСтр("ru = 'Справка 2-НДФЛ для подтверждения дохода за %1 год';
								|en = 'Справка 2-НДФЛ для подтверждения дохода за %1 год'");
			ТекстНазначениеСправки = СтрШаблон(ШаблонТекста, НалоговыеПериоды[0]);
		Иначе
			СтрокаНалоговыеПериоды = СтрСоединить(НалоговыеПериоды, ", ");
			ШаблонТекста = НСтр("ru = 'Справки 2-НДФЛ для подтверждения дохода за %1 годы.';
								|en = 'Справки 2-НДФЛ для подтверждения дохода за %1 годы.'");
			ТекстНазначениеСправки = СтрШаблон(ШаблонТекста, СтрокаНалоговыеПериоды);
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияНазначениеСправки", "Заголовок", ТекстНазначениеСправки);
	
	
	Если Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде Тогда
		Строка1 = НСтр("ru = 'Для выполнения заявки надо создать новый документ или выбрать уже существующий, распечатать и передать сотруднику справку 2-НДФЛ,';
						|en = 'Для выполнения заявки надо создать новый документ или выбрать уже существующий, распечатать и передать сотруднику справку 2-НДФЛ,'");
		Строка2 = НСтр("ru = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".';
						|en = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".'");
		ТекстПояснения = СтрШаблон("%1 %2", Строка1, Строка2);
	ИначеЕсли Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.СканСПодписьюИПечатью Тогда
		Строка1 = НСтр("ru = 'Для выполнения заявки надо создать новый документ или выбрать уже существующий, приложить файл справки 2-НДФЛ с подписью и печатью,';
						|en = 'Для выполнения заявки надо создать новый документ или выбрать уже существующий, приложить файл справки 2-НДФЛ с подписью и печатью,'");
		Строка2 = НСтр("ru = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".';
						|en = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".'");
		ТекстПояснения = СтрШаблон("%1 %2", Строка1, Строка2);
	ИначеЕсли Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП Тогда
		Строка1 = НСтр("ru = 'Для выполнения заявки надо создать новый документ или выбрать уже существующий, создать файл справки или выбрать существующий файл, подписать файл электронной подписью,';
						|en = 'Для выполнения заявки надо создать новый документ или выбрать уже существующий, создать файл справки или выбрать существующий файл, подписать файл электронной подписью,'");
		Строка2 = НСтр("ru = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".';
						|en = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".'");
		ТекстПояснения = СтрШаблон("%1 %2", Строка1, Строка2);
	Иначе
		Строка1 = НСтр("ru = 'Для выполнения заявки надо создать новый документ или выбрать уже существующий, создать файл справки или выбрать существующий файл,';
						|en = 'Для выполнения заявки надо создать новый документ или выбрать уже существующий, создать файл справки или выбрать существующий файл,'");
		Строка2 = НСтр("ru = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".';
						|en = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".'");
		ТекстПояснения = СтрШаблон("%1 %2", Строка1, Строка2);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ДекорацияВыполнениеПояснение", "Заголовок", ТекстПояснения);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗаполненияСправки()

	НалоговыйПериод = НалоговыйПериодДляСправки(ЭтаФорма);
	Если НалоговыйПериод = Неопределено Тогда
		НалоговыйПериод = Число(НалоговыеПериоды[0]);
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("Основание");
	
	Данные = Новый Структура;
	Данные.Вставить("ФизическоеЛицо", 		Объект.ФизическоеЛицо);
	Данные.Вставить("Организация", 			Объект.Организация);
	Данные.Вставить("НалоговыйПериод", 		НалоговыйПериод);
	Данные.Вставить("СпособФормирования", 	Объект.СпособФормирования);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Ссылка", Неопределено);
	ДанныеЗаполнения.Вставить("Действие", 	"ОбработкаЗапросаКабинетСотрудника");
	ДанныеЗаполнения.Вставить("Данные", 	Данные);
	
	ПараметрыЗаполнения.Основание = ДанныеЗаполнения;
		
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НалоговыйПериодДляСправки(Форма)

	НалоговыйПериод = Неопределено;
	Если Форма.Объект.ДокументыПоЗаявке.Количество() = 0 Тогда
		НалоговыйПериод = Число(Форма.НалоговыеПериоды[0]);
	Иначе
		Отбор = Новый Структура("НалоговыйПериод");
		Для каждого НалоговыйПериодСтрокой Из Форма.НалоговыеПериоды Цикл
			Отбор.НалоговыйПериод = Число(НалоговыйПериодСтрокой);
			Если Форма.Объект.ДокументыПоЗаявке.НайтиСтроки(Отбор).Количество() = 0 Тогда
				НалоговыйПериод = Отбор.НалоговыйПериод;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НалоговыйПериод;

КонецФункции

&НаСервере
Процедура СформироватьФайлСправки(СправкаНДФЛ)
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СправкаНДФЛ, "НалоговыйПериод,Дата");
	ШаблонИмяФайла = НСтр("ru = 'Справка 2НДФЛ за %1 год от %2';
							|en = 'Справка 2НДФЛ за %1 год от %2'");
	ИмяФайла = СтрШаблон(ШаблонИмяФайла, Формат(РеквизитыДокумента.НалоговыйПериод, "ЧГ=0"), Формат(РеквизитыДокумента.Дата, "ДФ=dd.MM.yyyy"));
	
	ТребуетсяПодписьФайла = (Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
	
	НачатьТранзакцию();
	Попытка
		
		ТабличныйДокумент = Документы.СправкаНДФЛ.СформироватьПечатнуюФорму2НДФЛ(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СправкаНДФЛ), Новый СписокЗначений);
		
		Если ИспользуетсяКадровыйЭДО Тогда
			
			ДанныеПечатнойФормы = КадровыйЭДОВызовСервера.ДобавитьПечатнуюФорму(
				ТабличныйДокумент, СправкаНДФЛ, "Форма2НДФЛ", ИмяФайла, Объект.Организация, Объект.ФизическоеЛицо);
				
			Если Не ТребуетсяПодписьФайла Тогда
				РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗарегистрироватьОбработкуФайлов(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПечатнойФормы.ФайлОбъекта),
					Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
			КонецЕсли;
			
		Иначе
			
			Поток = Новый ПотокВПамяти();
			ТабличныйДокумент.Записать(Поток, КадровыйЭДОВызовСервера.ТипФайлаЭлектронногоДокумента());
			АдресХранилища = ПоместитьВоВременноеХранилище(Поток.ЗакрытьИПолучитьДвоичныеДанные());
			
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.ВладелецФайлов 		= СправкаНДФЛ;
			ПараметрыФайла.ИмяБезРасширения 	= ИмяФайла;
			ПараметрыФайла.РасширениеБезТочки 	= "pdf";
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);
			
			ЗаявкиСотрудников.СоздатьДокументКЭДОСправкаСотруднику(Объект.Организация, Объект.ФизическоеЛицо, СправкаНДФЛ, ПрисоединенныйФайл, Не ТребуетсяПодписьФайла);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Ошибка формирования файла справки 2-НДФЛ.';
								|en = 'Ошибка формирования файла справки 2-НДФЛ.'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон("%1%2%3", ТекстСообщения, Символы.ПС, ПодробноеПредставлениеОшибки);
		ЗаписьЖурналаРегистрации(ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось сформировать файлы';
													|en = 'Не удалось сформировать файлы'"));

		Возврат;
		
	КонецПопытки;
	
	ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Объект.ДокументыПоЗаявке Цикл
		Если СтрокаТЧ.ДокументСсылка = ВыбранныйДокумент Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока = Объект.ДокументыПоЗаявке.Добавить();
	НоваяСтрока.ДокументСсылка = ВыбранныйДокумент;
	
	Модифицированность = Истина;
	ОбработатьИзменениеДокументыПоЗаявкеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлСправкиЗавершение(ПомещенныйФайл, Элемент) Экспорт

	ИмяЭлемента = Элемент.Имя;
	ИдентификаторСтроки = Число(СтрЗаменить(ИмяЭлемента, "_ВыбратьФайлСправки", ""));
	ЭлементКоллекции = Объект.ДокументыПоЗаявке.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ЭлементКоллекции <> Неопределено Тогда
		Справка2НДФЛ = ЭлементКоллекции.ДокументСсылка;
		ДобавитьФайлСправки(Справка2НДФЛ, ПомещенныйФайл);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлСправки(СправкаНДФЛ, ПомещенныйФайл)

	ИмяФайлаИнфо = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПомещенныйФайл.Имя);
	
	ТребуетсяПодписьФайла = (Объект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
	
	НачатьТранзакцию();
	Попытка
		
		АдресХранилища = ПомещенныйФайл.Хранение;
		
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыФайла.ВладелецФайлов = СправкаНДФЛ;
		ПараметрыФайла.ИмяБезРасширения = ИмяФайлаИнфо.ИмяБезРасширения; 
		ПараметрыФайла.РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ИмяФайлаИнфо.Расширение);
		
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);
			
		ЗаявкиСотрудников.СоздатьДокументКЭДОСправкаСотруднику(Объект.Организация, Объект.ФизическоеЛицо, СправкаНДФЛ, ПрисоединенныйФайл, Не ТребуетсяПодписьФайла);
		Если Не ТребуетсяПодписьФайла И ИспользуетсяКадровыйЭДО Тогда
			РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗарегистрироватьОбработкуФайлов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПрисоединенныйФайл),
				Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Ошибка выбора и присоединения файла.';
								|en = 'Ошибка выбора и присоединения файла.'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон("%1%2%3", ТекстСообщения, Символы.ПС, ПодробноеПредставлениеОшибки);
		ЗаписьЖурналаРегистрации(ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось прикрепить файл';
													|en = 'Не удалось прикрепить файл'"));
		Возврат;
	КонецПопытки;
	
	ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоФайлПечатнойФормы(ПрисоединенныйФайл)
	
	Возврат КадровыйЭДО.ЭтоФайлПечатнойФормы(ПрисоединенныйФайл);
	
КонецФункции

&НаКлиенте
Функция ЗаявкаГотоваКВыполнению(РезультатВыполненияЗаявки)
	
	Если РезультатВыполненияЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена") Тогда
		
		Если ПустаяСтрока(Объект.ОтветПоЗаявке) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо указать причину, по которой заявка отклоняется.';
									|en = 'Необходимо указать причину, по которой заявка отклоняется.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ОтветПоЗаявке", "Объект");
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе
		
		ТребуетсяПодпись = Ложь;
		ТребуетсяТолькоДокумент = Ложь;
		Если Объект.ВариантФормированияФайлаОтвета = ПредопределенноеЗначение("Перечисление.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП") Тогда
			ТребуетсяПодпись = Истина;
		ИначеЕсли Объект.ВариантФормированияФайлаОтвета = ПредопределенноеЗначение("Перечисление.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде") Тогда
			ТребуетсяТолькоДокумент = Истина;
		КонецЕсли;
		
		Если ТребуетсяТолькоДокумент Тогда
			Если ЗначениеЗаполнено(Объект.ДокументыПоЗаявке) Тогда
				Возврат Истина;
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Отсутствуют документы по заявке, добавьте в разделе ""Документы по заявке""';
											|en = 'Отсутствуют документы по заявке, добавьте в разделе ""Документы по заявке""'");
				ПоказатьПредупреждение(,ТекстПредупреждения);
				Возврат Ложь;
			КонецЕсли;
		Иначе
			
			Если Не ЗначениеЗаполнено(Объект.ДокументыПоЗаявке) Тогда
				ТекстПредупреждения = НСтр("ru = 'Отсутствуют документы по заявке, добавьте в разделе ""Документы по заявке""';
											|en = 'Отсутствуют документы по заявке, добавьте в разделе ""Документы по заявке""'");
				ПоказатьПредупреждение(,ТекстПредупреждения);
				Возврат Ложь;
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из Объект.ДокументыПоЗаявке Цикл
				Если Не ЗначениеЗаполнено(СтрокаТЧ.ФайлСправки) Тогда
					ТекстПредупреждения = НСтр("ru = 'Отсутствуют файлы справок, добавьте в разделе ""Документы по заявке""';
												|en = 'Отсутствуют файлы справок, добавьте в разделе ""Документы по заявке""'");
					ПоказатьПредупреждение(,ТекстПредупреждения);
					Возврат Ложь;
				КонецЕсли;
				Если ТребуетсяПодпись И Не СтрокаТЧ.ПодписанЭП Тогда
					ТекстПредупреждения = НСтр("ru = 'Необходимо подписать файл справки';
												|en = 'Необходимо подписать файл справки'");
					ПоказатьПредупреждение(,ТекстПредупреждения);
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента()

	Описание = ЗаявкиСотрудниковКлиентСервер.НовоеОписаниеДокументаЗаявки();
	
	Возврат Описание;

КонецФункции

#КонецОбласти