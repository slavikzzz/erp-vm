#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа.
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИСотрудникам(ЭтотОбъект, Таблица, "Организация", "Сотрудники.Сотрудник");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.НазначениеПлановогоНачисления") Тогда
		ДокументОснование = ДанныеЗаполнения;
		ЗаполнитьПоДокументуОснованию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Проведение документа
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ЗарплатаКадрыРасширенный.ИнициализироватьОтложеннуюРегистрациюВторичныхДанныхПоДвижениямДокумента(Движения);
	
	ДанныеДляПроведения = ПолучитьДанныеДляПроведения();
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, ДанныеДляПроведения.СотрудникиДаты, Ссылка);
	
	СтруктураПлановыхНачислений = Новый Структура;
	СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
	СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателей);
	
	РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ЭтотОбъект, Движения, СтруктураПлановыхНачислений);
	
	ОтражениеЗарплатыВБухучетеРасширенный.СформироватьПрекращениеБухучетаНачисленийСотрудников(ЭтотОбъект, Движения, Движения.ПлановыеНачисления);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаПрекращения, "Объект.ДатаПрекращения", Отказ, НСтр("ru = 'Дата прекращения';
																											|en = 'Termination date'"), , , Ложь);
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ИзмеренияДаты.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	
	Если ЗначениеЗаполнено(Начисление)
		И ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление).ПоддерживаетНесколькоПлановыхНачислений Тогда
		
		ОснованиеНачисления = ДокументОснование;
	Иначе
		ОснованиеНачисления = Неопределено;
	КонецЕсли;
	
	ИдентификаторСтроки = 0;
	Для каждого СтрокаСотрудника Из Сотрудники Цикл
		
		Если ЗначениеЗаполнено(СтрокаСотрудника.Сотрудник) Тогда
			
			СтрокаИзмерений = ИзмеренияДаты.Добавить();
			СтрокаИзмерений.ИдентификаторСтроки = ИдентификаторСтроки;
			СтрокаИзмерений.Период = СтрокаСотрудника.ДатаПрекращения;
			СтрокаИзмерений.Сотрудник= СтрокаСотрудника.Сотрудник;
			СтрокаИзмерений.Начисление = Начисление;
			СтрокаИзмерений.ДокументОснование = ОснованиеНачисления;
			
		КонецЕсли;
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		
	КонецЦикла;
	
	Если ИзмеренияДаты.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ИзмеренияДаты.ИдентификаторСтроки,
			|	ИзмеренияДаты.Период,
			|	ИзмеренияДаты.Сотрудник,
			|	ИзмеренияДаты.Начисление,
			|	ИзмеренияДаты.ДокументОснование
			|ПОМЕСТИТЬ ВТПрекращаемыеНачисления
			|ИЗ
			|	&ИзмеренияДаты КАК ИзмеренияДаты";
		
		Запрос.Выполнить();
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Регистратор", "<>", Ссылка);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеНачисления",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТПрекращаемыеНачисления", "Сотрудник,Начисление,ДокументОснование"),
			ПараметрыПостроения);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрекращаемыеНачисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ПрекращаемыеНачисления.Период,
			|	ПрекращаемыеНачисления.Сотрудник,
			|	ПрекращаемыеНачисления.Начисление,
			|	ПрекращаемыеНачисления.ДокументОснование
			|ИЗ
			|	ВТПрекращаемыеНачисления КАК ПрекращаемыеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
			|		ПО ПрекращаемыеНачисления.Сотрудник = ПлановыеНачисления.Сотрудник
			|			И ПрекращаемыеНачисления.Период = ПлановыеНачисления.Период
			|			И (ПлановыеНачисления.Используется)
			|ГДЕ
			|	ПлановыеНачисления.Сотрудник ЕСТЬ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИдентификаторСтроки";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Для сотрудника %1 нет действующего начисления на %2';
								|en = 'There is no valid accrual for employee %1 on %2 '"),
					Выборка.Сотрудник,
					Формат(Выборка.Период, "ДЛФ=DD")),
				Ссылка,
				"Сотрудники[" + Выборка.ИдентификаторСтроки + "].ДатаПрекращения",
				"Объект",
				Отказ);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает данные для формирования движений.
// Возвращает Структуру с полями.
//		ПлановыеНачисления - данные, необходимые для формирования истории плановых начислений.
//		(см. РасчетЗарплатыРасширенный.СформироватьДвиженияПлановыхНачислений)
//		ЗначенияПоказателей (см. там же).
//
Функция ПолучитьДанныеДляПроведения()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	// Подготовка данных для проведения.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрекращениеПлановогоНачисленияСотрудники.ДатаПрекращения КАК ДатаСобытия,
	|	ПрекращениеПлановогоНачисленияСотрудники.Сотрудник КАК Сотрудник,
	|	ПрекращениеПлановогоНачисленияСотрудники.Ссылка.Начисление КАК Начисление,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ПрекращениеПлановогоНачисленияСотрудники.Ссылка.Начисление КАК ПланВидовРасчета.Начисления).ПоддерживаетНесколькоПлановыхНачислений = ИСТИНА
	|			ТОГДА ПрекращениеПлановогоНачисленияСотрудники.Ссылка.ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОснование,
	|	ЛОЖЬ КАК Используется,
	|	0 КАК Размер,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ПрекращениеПлановогоНачисленияСотрудники.Ссылка.Организация КАК ОрганизацияДокумента
	|ПОМЕСТИТЬ ВТДанныеОПлановыхНачислениях
	|ИЗ
	|	Документ.ПрекращениеПлановогоНачисления.Сотрудники КАК ПрекращениеПлановогоНачисленияСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ПрекращениеПлановогоНачисленияСотрудники.Сотрудник = Сотрудники.Ссылка
	|ГДЕ
	|	ПрекращениеПлановогоНачисленияСотрудники.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОПлановыхНачислениях.ДатаСобытия КАК ДатаСобытия,
	|	ДанныеОПлановыхНачислениях.Сотрудник КАК Сотрудник,
	|	ДанныеОПлановыхНачислениях.Начисление КАК Начисление,
	|	ДанныеОПлановыхНачислениях.ДокументОснование КАК ДокументОснование,
	|	ДанныеОПлановыхНачислениях.Используется КАК Используется,
	|	ДанныеОПлановыхНачислениях.Размер КАК Размер,
	|	ДанныеОПлановыхНачислениях.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеОПлановыхНачислениях.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
	|ИЗ
	|	ВТДанныеОПлановыхНачислениях КАК ДанныеОПлановыхНачислениях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОПлановыхНачислениях.ОрганизацияДокумента КАК Организация,
	|	ДанныеОПлановыхНачислениях.Сотрудник КАК Сотрудник,
	|	ДанныеОПлановыхНачислениях.ДатаСобытия КАК ДатаСобытия,
	|	ДанныеОПлановыхНачислениях.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПоказателиНачислений.Показатель КАК Показатель,
	|	0 КАК Значение,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
	|ИЗ
	|	ВТДанныеОПлановыхНачислениях КАК ДанныеОПлановыхНачислениях
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ПО (ПоказателиНачислений.Ссылка = ДанныеОПлановыхНачислениях.Начисление)
	|			И (ПоказателиНачислений.ОтменяемыйПоказатель = ИСТИНА)
	|ГДЕ
	|	ПоказателиНачислений.Показатель ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрекращениеПлановогоНачисленияСотрудники.Сотрудник КАК Сотрудник,
	|	ПрекращениеПлановогоНачисленияСотрудники.ДатаПрекращения КАК ДатаСобытия,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
	|	ПрекращениеПлановогоНачисленияСотрудники.СовокупнаяТарифнаяСтавка КАК Значение,
	|	ВЫБОР
	|		КОГДА ПрекращениеПлановогоНачисленияСотрудники.СовокупнаяТарифнаяСтавка = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
	|		ИНАЧЕ ПрекращениеПлановогоНачисленияСотрудники.ВидТарифнойСтавки
	|	КОНЕЦ КАК ВидТарифнойСтавки,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.ПрекращениеПлановогоНачисления.Сотрудники КАК ПрекращениеПлановогоНачисленияСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ПрекращениеПлановогоНачисленияСотрудники.Сотрудник = Сотрудники.Ссылка
	|ГДЕ
	|	ПрекращениеПлановогоНачисленияСотрудники.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрекращениеПлановогоНачисленияСотрудники.ДатаПрекращения КАК ДатаСобытия,
	|	ПрекращениеПлановогоНачисленияСотрудники.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ПрекращениеПлановогоНачисления.Сотрудники КАК ПрекращениеПлановогоНачисленияСотрудники
	|ГДЕ
	|	ПрекращениеПлановогоНачисленияСотрудники.Ссылка = &Ссылка";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведения = Новый Структура; 
	
	// Таблица для формирования плановых начислений.
	ДанныеДляПроведения.Вставить("ПлановыеНачисления", РезультатыЗапроса[1].Выгрузить());
	
	// Таблица для формирования значений показателей.
	ДанныеДляПроведения.Вставить("ЗначенияПоказателей", РезультатыЗапроса[2].Выгрузить());
	
	// Таблица для формирования значений совокупных тарифных ставок.
	ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", РезультатыЗапроса[3].Выгрузить());
	
	// Таблица для формирования времени регистрации документа.
	ДанныеДляПроведения.Вставить("СотрудникиДаты", РезультатыЗапроса[4].Выгрузить());
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ЗаполнитьПоДокументуОснованию() Экспорт 
	
	ДанныеОснования = ДанныеДокументаОснования();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОснования);
	
	Если Не ЗначениеЗаполнено(ДатаПрекращения) Тогда
		
		ЗаполняемыеЗначения = Новый Структура;
		ЗаполняемыеЗначения.Вставить("ДатаСобытия");
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
		
		ДатаПрекращения = ЗаполняемыеЗначения.ДатаСобытия;
		
	КонецЕсли;
	
	Сотрудники.Очистить();
	Для Каждого ДанныеСотрудника Из ДанныеОснования.СписокСотрудников Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.ДатаОкончания)
				Или ДанныеСотрудника.ДатаОкончания >= ДатаПрекращения Тогда
			
			НоваяСтрока = Сотрудники.Добавить();
			НоваяСтрока.Сотрудник = ДанныеСотрудника.Сотрудник;
			
			Если ДатаПрекращения >= ДанныеСотрудника.ДатаНазначения Тогда
				НоваяСтрока.ДатаПрекращения = ДатаПрекращения;
			Иначе
				НоваяСтрока.ДатаПрекращения = ДанныеСотрудника.ДатаНазначения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДокументаОснования()
	
	ДанныеОснования = СтруктураДанныхДокументаОснования();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НазначениеПлановогоНачисления.Организация,
		|	НазначениеПлановогоНачисления.Начисление
		|ИЗ
		|	Документ.НазначениеПлановогоНачисления КАК НазначениеПлановогоНачисления
		|ГДЕ
		|	НазначениеПлановогоНачисления.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НазначениеПлановогоНачисленияСотрудники.Сотрудник,
		|	НазначениеПлановогоНачисленияСотрудники.ДатаНазначения,
		|	НазначениеПлановогоНачисленияСотрудники.ДатаОкончания
		|ИЗ
		|	Документ.НазначениеПлановогоНачисления.Сотрудники КАК НазначениеПлановогоНачисленияСотрудники
		|ГДЕ
		|	НазначениеПлановогоНачисленияСотрудники.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаДанных = Результат[0].Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеОснования, ВыборкаДанных);
	КонецЕсли;
	
	ВыборкаСотрудников = Результат[1].Выбрать();
	Пока ВыборкаСотрудников.Следующий() Цикл
		ДанныеСотрудника = Новый Структура("Сотрудник,ДатаНазначения,ДатаОкончания");
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ВыборкаСотрудников);
		ДанныеОснования.СписокСотрудников.Добавить(ДанныеСотрудника);
	КонецЦикла;
	
	Возврат ДанныеОснования;
	
КонецФункции

Функция СтруктураДанныхДокументаОснования()
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СтруктураДанных.Вставить("Начисление", ПланыВидовРасчета.Начисления.ПустаяСсылка());
	СтруктураДанных.Вставить("СписокСотрудников", Новый Массив);
	Возврат СтруктураДанных;
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли