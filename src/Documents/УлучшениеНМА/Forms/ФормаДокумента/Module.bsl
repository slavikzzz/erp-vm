#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	#Область СтандартныеПодсистемы
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ГиперссылкаФайлов = РаботаСФайлами.ГиперссылкаФайлов();
	ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Элементы.ДекорацияСостояниеЭДО.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ПриЧтенииСозданииНаСервере();

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_УлучшениеНМА", ПараметрыЗаписи, Объект.Ссылка);
	ОбщегоНазначенияУТКлиент.ОповеститьОЗаписиДокументаВЖурнал();
	ВнеоборотныеАктивыКлиент.ОповеститьОЗаписиДокументаВЖурналНМА();
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ЗаполнитьИнформациюВПодвале();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
		ЭтотОбъект,
		ТекущийОбъект,
		ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УлучшениеНМА" 
		И Источник <> Объект.Ссылка Тогда
		ЗаполнитьИнформациюВПодвале();
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантОтраженияВУчетеПриИзменении(Элемент)
	
	Объект.ОтражатьВУпрУчете = (ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете")
		Или ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИБухгалтерскомУчете"));
	Объект.ОтражатьВРеглУчете = (ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.БухгалтерскомУчете")
		Или ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИБухгалтерскомУчете"));
		
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, "ОтражатьВУпрУчете, ОтражатьВРеглУчете");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаСервере(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаСервере(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОДокументеВДругомУчетеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#СоздатьДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.УлучшениеНМА.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Возврат; // в WE пустой обработчик

КонецПроцедуры  

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНМА

&НаКлиенте
Процедура НМАОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПодборНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура НМАНематериальныйАктивПриИзменении(Элемент)
	
	ПриИзмененииНМАНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подобрать(Команда)
	
	ПараметрыПодбора = ОбщегоНазначенияУТКлиентСервер.ПараметрыПодбора(Элементы.НМАНематериальныйАктив, ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.НематериальныеАктивы.ФормаВыбора",
		ПараметрыПодбора,
		Элементы.НМА,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСумму(Команда)
	
	ЗаполнитьСуммуЗатрат();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект);
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
		Команда,
		ЭтотОбъект,
		Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)

	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИнициализацияФормыПриСозданииНаСервере();
	
	ЗаполнитьВариантОтраженияВУчете();

	ЗаполнитьИнформациюВПодвале();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(Форма, ИзмененныеРеквизиты = "")
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	СлужебныеПараметрыФормы = Форма.СлужебныеПараметрыФормы;

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ВспомогательныеРеквизиты = Новый Структура;
	ВспомогательныеРеквизиты.Вставить("ВалютыСовпадают", СлужебныеПараметрыФормы.ВалютыСовпадают);
	ВспомогательныеРеквизиты.Вставить("РеглУчетВНАВедетсяНезависимо", СлужебныеПараметрыФормы.РеглУчетВНАВедетсяНезависимо);

	ПараметрыРеквизитовОбъекта = ВнеоборотныеАктивыКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_УлучшениеНМА(
									Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
	
	ОбщегоНазначенияУТКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);
	
	Если НЕ ОбновитьВсе Тогда
		ОбщегоНазначенияУТКлиентСервер.ОчиститьНеиспользуемыеРеквизиты(Объект, ПараметрыРеквизитовОбъекта, "НМА");
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.ВариантОтраженияВУчете.Видимость = СлужебныеПараметрыФормы.РеглУчетВНАВедетсяНезависимо;
		
		Если НЕ СлужебныеПараметрыФормы.РеглУчетВНАВедетсяНезависимо 
			И НЕ ОбновитьВсе Тогда
			Форма.ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИБухгалтерскомУчете");
			Объект.ОтражатьВРеглУчете = Истина;
			Объект.ОтражатьВУпрУчете = Истина;
		КонецЕсли;
		
		Элементы.НМАСтоимостьУУ.Заголовок = ВнеоборотныеАктивыКлиентСервер.ПредставлениеПоляСВалютой(
			НСтр("ru = 'Сумма';
				|en = 'Amount'"), НСтр("ru = 'Сумма упр.';
										|en = 'Amount, manag.'"), СлужебныеПараметрыФормы, СлужебныеПараметрыФормы.ВалютаУпрПредставление);
		
		Элементы.НМАСтоимостьБУ.Заголовок = ВнеоборотныеАктивыКлиентСервер.ПредставлениеПоляСВалютой(
			НСтр("ru = 'Сумма';
				|en = 'Amount'"), НСтр("ru = 'Сумма регл.';
										|en = 'Amount, local'"), СлужебныеПараметрыФормы, СлужебныеПараметрыФормы.ВалютаРеглПредставление);
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(Знач ИзмененныеРеквизиты = "")
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация") 
		ИЛИ ОбновитьВсе Тогда
			
		ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"ВалютыСовпадают",
			СлужебныеПараметрыФормы.ВалютаУпр = ВалютаРегл,
			СлужебныеПараметрыФормы);
			
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"ВалютаРеглПредставление",
			Строка(ВалютаРегл),
			СлужебныеПараметрыФормы);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Организация") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		ВнеоборотныеАктивы.УстановитьПараметрыФункциональныхОпцийФормыОбъекта(ЭтотОбъект, Объект.Организация, Объект.Дата);
		
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"РеглУчетВНАВедетсяНезависимо",
			НастройкиНалоговУчетныхПолитикПовтИсп.РеглУчетВНАВедетсяНезависимо(Объект.Организация, КонецМесяца(?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса()))),
			СлужебныеПараметрыФормы);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата") 
		ИЛИ ОбновитьВсе Тогда
		
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"ЕстьУчетСебестоимости",
			РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Объект.Дата),
			СлужебныеПараметрыФормы);
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантОтраженияВУчете()
	
	Если Объект.ОтражатьВУпрУчете И Объект.ОтражатьВРеглУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИБухгалтерскомУчете;
	ИначеЕсли Объект.ОтражатьВУпрУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете;
	ИначеЕсли Объект.ОтражатьВРеглУчете Тогда
		ВариантОтраженияВУчете = Перечисления.ВариантыОтраженияВУчетеВнеоборотныхАктивов.БухгалтерскомУчете;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормыПриСозданииНаСервере()

	ИнициализироватьСлужебныеПараметрыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПодборНаСервере(ВыбранноеЗначение)

	ДобавленныеСтроки = ВнеоборотныеАктивыКлиентСервер.ОбработкаВыбораЭлемента(Объект.НМА, "НематериальныйАктив", ВыбранноеЗначение);

	Если ДобавленныеСтроки.Количество() <> 0 Тогда
		ПриИзмененииНМА(ДобавленныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНМАНаСервере()
	
	ТекущаяСтрока = Элементы.НМА.ТекущаяСтрока;
	ДанныеСтроки = Объект.НМА.НайтиПоИдентификатору(ТекущаяСтрока);
	ПриИзмененииНМА(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСтроки));
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНМА(ВыбранныеСтроки = Неопределено)

	ЗаполнитьШапкуПоВыбраннымНМА();

	ЗаполнитьСуммуЗатрат(ВыбранныеСтроки);
	
	НастроитьЗависимыеЭлементыФормыНаСервере("НематериальныйАктив");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШапкуПоВыбраннымНМА()

	ВнеоборотныеАктивыСлужебный.ЗаполнитьШапкуПоВыбраннымНМА("Организация,Подразделение", Объект.НМА, Объект);
	НастроитьЗависимыеЭлементыФормыНаСервере("Организация,Подразделение");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСлужебныеПараметрыФормы()

	НовыеСлужебныеПараметрыФормы = Новый Структура;
	НовыеСлужебныеПараметрыФормы.Вставить("ВалютаУпр", Константы.ВалютаУправленческогоУчета.Получить());
	НовыеСлужебныеПараметрыФормы.Вставить("ВалютаУпрПредставление", Строка(НовыеСлужебныеПараметрыФормы.ВалютаУпр));
	НовыеСлужебныеПараметрыФормы.Вставить("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	
	СлужебныеПараметрыФормы = Новый ФиксированнаяСтруктура(НовыеСлужебныеПараметрыФормы);

КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуЗатрат(ВыбранныеСтроки = Неопределено)

	Если НЕ СлужебныеПараметрыФормы.ЕстьУчетСебестоимости Тогда
		Возврат;
	КонецЕсли;
	
	СообщатьОбОшибках = ВыбранныеСтроки = Неопределено;
	
	Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.Дата)  Тогда
		Если СообщатьОбОшибках Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Дата"" не заполнено';
									|en = '""Date"" is required'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект", "Дата", Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Если СообщатьОбОшибках Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено';
									|en = 'The ""Company"" field is required'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект", "Организация", Отказ); 
		Иначе
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Документы.УлучшениеНМА.ЗаполнитьСуммуЗатрат(Объект, ВыбранныеСтроки);
		ЗаполнитьИнформациюВПодвале();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюВПодвале()

	ЗаголовокНадписи = ВнеоборотныеАктивыСлужебный.ИнформацияОДокументеВДругомУчете(Объект);
	Если ПредварительнаяСтоимостьОтличаетсяОтФактической() Тогда
		Если ЗаголовокНадписи.Количество() <> 0 Тогда
			ЗаголовокНадписи.Добавить(Символы.ПС);
		КонецЕсли;
		ЗаголовокНадписи.Добавить(НСтр("ru = 'Стоимость, указанная в документе, отличается от фактической.';
										|en = 'Cost specified in the document differs from the actual cost.'"));
	КонецЕсли; 
	
	ТекстСрокИспользованияИстек = СрокИспользованияИстек();
	Если ТекстСрокИспользованияИстек <> "" Тогда
		Если ЗаголовокНадписи.Количество() <> 0 Тогда
			ЗаголовокНадписи.Добавить(Символы.ПС);
		КонецЕсли;
		ЗаголовокНадписи.Добавить(ТекстСрокИспользованияИстек);
	КонецЕсли; 

	Если ЗаголовокНадписи.Количество() <> 0 Тогда
		Элементы.Информация.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокНадписи);
		Элементы.КартинкаИнформация.Видимость = Истина;
		Элементы.Информация.Видимость = Истина;
	Иначе
		Элементы.КартинкаИнформация.Видимость = Ложь;
		Элементы.Информация.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПредварительнаяСтоимостьОтличаетсяОтФактической()

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ТаблицаНМА.СтоимостьБУ КАК СтоимостьБУ,
	|	ТаблицаНМА.СтоимостьУУ КАК СтоимостьУУ
	|ПОМЕСТИТЬ втТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив
	|ИЗ
	|	втТаблицаНМА КАК ТаблицаНМА
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|		ПО (СтоимостьНМА.Регистратор = &Ссылка)
	|			И ТаблицаНМА.НематериальныйАктив = СтоимостьНМА.НематериальныйАктив
	|			И (СтоимостьНМА.РасчетСтоимости)
	|			И (СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНМА.НематериальныйАктив
	|
	|ИМЕЮЩИЕ
	|	(&ОтражатьВРеглУчете
	|			И МАКСИМУМ(ТаблицаНМА.СтоимостьБУ) <> СУММА(СтоимостьНМА.СтоимостьРегл + СтоимостьНМА.СтоимостьЦФ)
	|		ИЛИ &ОтражатьВУпрУчете
	|			И МАКСИМУМ(ТаблицаНМА.СтоимостьУУ) <> СУММА(СтоимостьНМА.Стоимость))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТаблицаНМА", Объект.НМА.Выгрузить());
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

&НаСервере
Функция СрокИспользованияИстек()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ 
	|	ПараметрыАмортизацииНМАУУ.НематериальныйАктив КАК НематериальныйАктив,
	|	ПараметрыАмортизацииНМАУУ.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
	|	ПараметрыАмортизацииНМАУУ.МетодНачисленияАмортизации КАК МетодНачисленияАмортизации,
	|	ПараметрыАмортизацииНМАУУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации
	|ПОМЕСТИТЬ втПараметрыАмортизацииНМАУУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииНМАУУ.СрезПоследних(
	|			&КонецМесяца, 
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК ПараметрыАмортизацииНМАУУ
	|ГДЕ
	|	&ОтражатьВУпрУчете
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ПараметрыАмортизацииНМАБУ.НематериальныйАктив КАК НематериальныйАктив,
	|	ПараметрыАмортизацииНМАБУ.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
	|	ПараметрыАмортизацииНМАБУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации
	|ПОМЕСТИТЬ втПараметрыАмортизацииНМАБУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииНМАБУ.СрезПоследних(
	|			&КонецМесяца, 
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК ПараметрыАмортизацииНМАБУ
	|ГДЕ
	|	&ОтражатьВРеглУчете
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ПервоначальныеСведенияНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияНМА.МетодНачисленияАмортизацииБУ КАК МетодНачисленияАмортизацииБУ
	|ПОМЕСТИТЬ втПервоначальныеСведенияНМА
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
	|			&КонецМесяца, 
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияНМА
	|ГДЕ
	|	&ОтражатьВРеглУчете
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ПорядокУчетаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ПорядокУчетаНМА.ОбъемНаработки КАК ОбъемНаработки
	|ПОМЕСТИТЬ втПорядокУчетаНМА
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМА.СрезПоследних(
	|			&КонецМесяца, 
	|			Регистратор <> &Ссылка
	|				И НематериальныйАктив В (&СписокНМА)) КАК ПорядокУчетаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ВыработкаНМА.КоличествоОборот КАК Значение
	|ПОМЕСТИТЬ втВыработкаНМА
	|ИЗ
	|	РегистрНакопления.ВыработкаНМА.Обороты(
	|			,
	|			&КонецМесяца,,
	|			НематериальныйАктив В (&СписокНМА)) КАК ВыработкаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ПроверкаПараметров.СрокИстекУУ), ЛОЖЬ) КАК СрокИстекУУ,
	|	ЕСТЬNULL(МАКСИМУМ(ПроверкаПараметров.СрокИстекБУ), ЛОЖЬ) КАК СрокИстекБУ,
	|	ЕСТЬNULL(МАКСИМУМ(ПроверкаПараметров.ЕстьПоНаработке), ЛОЖЬ) КАК ЕстьПоНаработке,
	|	ЕСТЬNULL(МАКСИМУМ(ПроверкаПараметров.ЕстьНеПоНаработке), ЛОЖЬ) КАК ЕстьНеПоНаработке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК СрокИстекУУ,
	|		ЛОЖЬ КАК СрокИстекБУ,
	|		ПараметрыАмортизацииНМАУУ.МетодНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции) КАК ЕстьПоНаработке,
	|		ПараметрыАмортизацииНМАУУ.МетодНачисленияАмортизации <> ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции) КАК ЕстьНеПоНаработке
	|	ИЗ
	|		втПараметрыАмортизацииНМАУУ КАК ПараметрыАмортизацииНМАУУ
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчетаНМА КАК ПорядокУчетаНМА
	|			ПО ПорядокУчетаНМА.НематериальныйАктив = ПараметрыАмортизацииНМАУУ.НематериальныйАктив
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ втВыработкаНМА КАК НаработкиОбъектовЭксплуатации
	|			ПО НаработкиОбъектовЭксплуатации.НематериальныйАктив = ПараметрыАмортизацииНМАУУ.НематериальныйАктив
	|
	|	ГДЕ
	|		ВЫБОР
	|			КОГДА ПараметрыАмортизацииНМАУУ.МетодНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции)
	|				ТОГДА ЕСТЬNULL(ПорядокУчетаНМА.ОбъемНаработки, 0)
	|						- ЕСТЬNULL(НаработкиОбъектовЭксплуатации.Значение, 0)
	|			ИНАЧЕ 
	|				ПараметрыАмортизацииНМАУУ.СрокИспользованияДляВычисленияАмортизации
	|					- РАЗНОСТЬДАТ(ПараметрыАмортизацииНМАУУ.ДатаПоследнегоИзменения, &КонецМесяца, МЕСЯЦ) 
	|		КОНЕЦ <= 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЛОЖЬ КАК СрокИстекУУ,
	|		ИСТИНА КАК СрокИстекБУ,
	|		ПервоначальныеСведенияНМА.МетодНачисленияАмортизацииБУ = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции) КАК ЕстьПоНаработке,
	|		ПервоначальныеСведенияНМА.МетодНачисленияАмортизацииБУ <> ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции) КАК ЕстьНеПоНаработке
	|	ИЗ
	|		втПараметрыАмортизацииНМАБУ КАК ПараметрыАмортизацииНМАБУ
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ втПервоначальныеСведенияНМА КАК ПервоначальныеСведенияНМА
	|			ПО ПервоначальныеСведенияНМА.НематериальныйАктив = ПараметрыАмортизацииНМАБУ.НематериальныйАктив
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчетаНМА КАК ПорядокУчетаНМА
	|			ПО ПорядокУчетаНМА.НематериальныйАктив = ПараметрыАмортизацииНМАБУ.НематериальныйАктив
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ втВыработкаНМА КАК ВыработкаНМА
	|			ПО ВыработкаНМА.НематериальныйАктив = ПараметрыАмортизацииНМАБУ.НематериальныйАктив
	|
	|	ГДЕ
	|		ВЫБОР
	|			КОГДА ПервоначальныеСведенияНМА.МетодНачисленияАмортизацииБУ = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции)
	|				ТОГДА ЕСТЬNULL(ПорядокУчетаНМА.ОбъемНаработки, 0)
	|						- ЕСТЬNULL(ВыработкаНМА.Значение, 0)
	|			ИНАЧЕ 
	|				ПараметрыАмортизацииНМАБУ.СрокИспользованияДляВычисленияАмортизации
	|					- РАЗНОСТЬДАТ(ПараметрыАмортизацииНМАБУ.ДатаПоследнегоИзменения, &КонецМесяца, МЕСЯЦ) 
	|		КОНЕЦ <= 0
	|
	|	) КАК ПроверкаПараметров
	|
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(МАКСИМУМ(ПроверкаПараметров.СрокИстекУУ), ЛОЖЬ)
	|		ИЛИ ЕСТЬNULL(МАКСИМУМ(ПроверкаПараметров.СрокИстекБУ), ЛОЖЬ)
	|";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("СписокНМА", Объект.НМА.Выгрузить(, "НематериальныйАктив").ВыгрузитьКолонку("НематериальныйАктив"));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстСрокИспользованияИстек = "";
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.СрокИстекБУ И Выборка.СрокИстекУУ Тогда
			
			Если Выборка.ЕстьПоНаработке И Выборка.ЕстьНеПоНаработке Тогда
				ТекстСрокИспользованияИстек = НСтр("ru = 'Срок использования (планируемый объем наработки) НМА истек (выработан). Необходимо оформить документ ""Изменение параметров НМА"" и указать новый срок (объем наработки) или приостановить начисление амортизации в бухгалтерском и управленческом учетах.';
													|en = 'Useful life (planned asset activity value) of intangible assets has expired (generated). Register the ""Adjust intangible asset financial details"" document and specify a new due date (asset activity value) or suspend amortization charge in bookkeeping and management accounting.'");
			ИначеЕсли Выборка.ЕстьПоНаработке Тогда
				ТекстСрокИспользованияИстек = НСтр("ru = 'Предполагаемый объем наработки НМА полностью выработан. Необходимо оформить документ ""Изменение параметров НМА"" и увеличить предполагаемый объем наработки или приостановить начисление амортизации.';
													|en = 'Estimated asset activity value of intangible assets is fully generated. Register the ""Adjust intangible asset financial details"" document and increase the estimated asset activity value or suspend amortization charge.'");
			Иначе
				ТекстСрокИспользованияИстек = НСтр("ru = 'Срок использования НМА истек. Необходимо оформить документ ""Изменение параметров НМА"" и указать новый срок или приостановить начисление амортизации в бухгалтерском и управленческом учетах.';
													|en = 'Useful life of intangible assets has expired. Register the ""Adjust intangible asset financial details"" document and specify a new due date or suspend amortization charge in bookkeeping and management accounting.'");
			КонецЕсли;
			
		ИначеЕсли Выборка.СрокИстекБУ Тогда
			
			Если Выборка.ЕстьПоНаработке И Выборка.ЕстьНеПоНаработке Тогда
				ТекстСрокИспользованияИстек = НСтр("ru = 'Срок использования (планируемый объем наработки) НМА истек (выработан). Необходимо оформить документ ""Изменение параметров НМА"" и указать новый срок (объем наработки) или приостановить начисление амортизации в бухгалтерском учете.';
													|en = 'Useful life (planned asset activity value) of intangible assets has expired (generated). Register the ""Adjust intangible asset financial details"" document and specify a new due date (asset activity value) or suspend amortization charge in bookkeeping.'");
			ИначеЕсли Выборка.ЕстьПоНаработке Тогда
				ТекстСрокИспользованияИстек = НСтр("ru = 'Предполагаемый объем наработки НМА полностью выработан. Необходимо оформить документ ""Изменение параметров НМА"" и увеличить предполагаемый объем наработки или приостановить начисление амортизации.';
													|en = 'Estimated asset activity value of intangible assets is fully generated. Register the ""Adjust intangible asset financial details"" document and increase the estimated asset activity value or suspend amortization charge.'");
			Иначе
				ТекстСрокИспользованияИстек = НСтр("ru = 'Срок использования НМА истек. Необходимо оформить документ ""Изменение параметров НМА"" и указать новый срок или приостановить начисление амортизации в бухгалтерском учете.';
													|en = 'Useful life of intangible assets has expired. Register the ""Adjust intangible asset financial details"" document and specify a new due date or suspend amortization charge in bookkeeping.'");
			КонецЕсли;

		Иначе			
		
			Если Выборка.ЕстьПоНаработке И Выборка.ЕстьНеПоНаработке Тогда
				ТекстСрокИспользованияИстек = НСтр("ru = 'Срок использования (планируемый объем наработки) НМА истек (выработан). Необходимо оформить документ ""Изменение параметров НМА"" и указать новый срок (объем наработки) или приостановить начисление амортизации в управленческом учете.';
													|en = 'Useful life (planned asset activity value) of intangible assets has expired (generated). Register the ""Adjust intangible asset financial details"" document and specify a new due date (asset activity value) or suspend amortization charge in management accounting.'");
			ИначеЕсли Выборка.ЕстьПоНаработке Тогда
				ТекстСрокИспользованияИстек = НСтр("ru = 'Предполагаемый объем наработки НМА полностью выработан. Необходимо оформить документ ""Изменение параметров НМА"" и увеличить предполагаемый объем наработки или приостановить начисление амортизации.';
													|en = 'Estimated asset activity value of intangible assets is fully generated. Register the ""Adjust intangible asset financial details"" document and increase the estimated asset activity value or suspend amortization charge.'");
			Иначе
				ТекстСрокИспользованияИстек = НСтр("ru = 'Срок использования НМА истек. Необходимо оформить документ ""Изменение параметров НМА"" и указать новый срок или приостановить начисление амортизации в управленческом учете.';
													|en = 'Useful life of intangible assets has expired. Register the ""Adjust intangible asset financial details"" document and specify a new due date or suspend amortization charge in management accounting.'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстСрокИспользованияИстек;
	
КонецФункции

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти