
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	МеханизмыДокумента.Добавить("НематериальныеАктивы");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	
	УлучшениеНМАЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура:
//     * Ключ - Строка - Имя таблицы.
//     * Значение - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.УлучшениеНМА") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда

		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры);
	
		ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДокументыПоНМА(ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаПараметрыАмортизацииНМАУУ(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПараметрыАмортизацииНМАБУ(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСтоимостьНМА(Запрос, ТекстыЗапроса, Регистры);
		
		//++ НЕ УТКА
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаОтражениеДокументовВМеждународномУчете(ТекстыЗапроса, Регистры);
		//-- НЕ УТКА
		
		УлучшениеНМАЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	КонецЕсли;
	
	ТаблицыДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
	Возврат ТаблицыДвижений;
	
КонецФункции

// Формирует таблицы движений при отложенном проведении.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит временные таблицы, которые используются при формировании движений.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
//
Функция ТаблицыОтложенногоФормированияДвижений(МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПолучитьДанныеДокумента(Запрос);

	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения();
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаПараметрыАмортизацииНМАУУ(Запрос, ТекстыЗапроса, Неопределено);
	ТекстЗапросаТаблицаПараметрыАмортизацииНМАБУ(Запрос, ТекстыЗапроса, Неопределено);
	
	//++ НЕ УТКА
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаОтражениеДокументовВМеждународномУчете(ТекстыЗапроса, Неопределено);
	//-- НЕ УТКА

	УлучшениеНМАЛокализация.ТаблицыОтложенногоФормированияДвижений(Запрос, ТекстыЗапроса);

	ТаблицыДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса);
	
	Возврат ТаблицыДвижений;
	
КонецФункции

// Формирует таблицы движений при расчете стоимости.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит необходимые временные таблицы.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
//
Функция ТаблицыДвиженийРасчетаСтоимости(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	ПолучитьДанныеДокумента(Запрос);

	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализацииПоПериодам(Запрос, Запрос.Параметры,, "ВтСписокДокументов");

	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения();
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 

	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаСтоимостьНМА(Запрос, ТекстыЗапроса, Неопределено);
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Неопределено);
	ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Неопределено);
	
	//++ НЕ УТКА
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаОтражениеДокументовВМеждународномУчете(ТекстыЗапроса, Неопределено);
	//-- НЕ УТКА
	
	УлучшениеНМАЛокализация.ТаблицыДвиженийРасчетаСтоимости(Запрос, ТекстыЗапроса, Неопределено);
	
	ТаблицыДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса);
	
	Возврат ТаблицыДвижений;
	
КонецФункции

#КонецОбласти

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаСписка";
	КонецЕсли;
	
	Документы.ИзменениеПараметровНМА2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Переоценка НМА".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная команда
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.УлучшениеНМА) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.УлучшениеНМА.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.УлучшениеНМА);
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииОграниченияДоступа(Списки) Экспорт

	Списки.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.УлучшениеНМА";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	ПроведениеДокументов.ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры);
	
	СформироватьТаблицуВтСписокДокументов(Запрос);
	ПолучитьДанныеДокумента(Запрос);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументаРеквизиты.Период КАК Период,
	|	ДанныеДокументаРеквизиты.Номер КАК Номер
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокументаРеквизиты";
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализацииПоПериодам(Запрос, Запрос.Параметры,, "ВтСписокДокументов");
	
КонецПроцедуры

Процедура СформироватьТаблицуВтСписокДокументов(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокДокументов.Ссылка КАК Ссылка,
	|	СписокДокументов.Организация КАК Организация,
	|	СписокДокументов.Дата КАК Период
	|
	|ПОМЕСТИТЬ ВтСписокДокументов
	|
	|ИЗ
	|	Документ.УлучшениеНМА КАК СписокДокументов
	|
	|ГДЕ
	|	СписокДокументов.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПолучитьДанныеДокумента(Запрос)
	
	СписокЗапросов = Новый Массив;
	
	#Область ДанныеДокументаРеквизиты
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Подразделение КАК Местонахождение,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УлучшениеНМА) КАК ХозяйственнаяОперация
	|
	|ПОМЕСТИТЬ ДанныеДокументаРеквизиты
	|
	|ИЗ
	|	Документ.УлучшениеНМА КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (
	|		ВЫБРАТЬ
	|			ВтСписокДокументов.Ссылка
	|		ИЗ
	|			ВтСписокДокументов КАК ВтСписокДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	МодернизацияОСЛокализация.ДобавитьВТекстЗапросаРеквизитыДокумента(ТекстЗапроса, "ДанныеДокумента");
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ДанныеДокументаТаблицаНМА
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.НематериальныйАктив КАК НематериальныйАктив,
	|	ТаблицаДокумента.НематериальныйАктив КАК ОбъектУчета,
	|
	|	ТаблицаДокумента.СтоимостьУУ КАК СтоимостьУУ,
	|	ТаблицаДокумента.СтоимостьБУ КАК СтоимостьБУ
	|
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаНМА
	|
	|ИЗ
	|	Документ.УлучшениеНМА.НМА КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (
	|		ВЫБРАТЬ
	|			ВтСписокДокументов.Ссылка
	|		ИЗ
	|			ВтСписокДокументов КАК ВтСписокДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НематериальныйАктив
	|";
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	Запрос.Текст = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.УлучшениеНМА"));
	ЗначенияПараметровПроведения.Вставить("НастройкаХозяйственнойОперации", Справочники.НастройкиХозяйственныхОпераций.УлучшениеНМА);
	ЗначенияПараметровПроведения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.УлучшениеНМА);
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru = 'Улучшение НМА';
																	|en = 'Intangible asset improvement'"));
	ЗначенияПараметровПроведения.Вставить("ВидАналитикиКапитализацииРасходов", Перечисления.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР);
	ЗначенияПараметровПроведения.Вставить("ВариантПримененияЦелевогоФинансирования", Неопределено);
	ЗначенияПараметровПроведения.Вставить("СтатьяАП", ПланыВидовХарактеристик.СтатьиАктивовПассивов.НематериальныеАктивы);
	ЗначенияПараметровПроведения.Вставить("ИспользоватьУчетСебестоимости", ПолучитьФункциональнуюОпцию("ИспользоватьУчетСебестоимости"));
	ЗначенияПараметровПроведения.Вставить("ДатаНачалаУчетаСебестоимости", Константы.ДатаНачалаУчетаСебестоимости.Получить());
	ЗначенияПараметровПроведения.Вставить("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());

	Если Реквизиты <> Неопределено Тогда
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка         КАК Ссылка,
	|	ДанныеДокумента.Дата           КАК ДатаДокументаИБ,
	|	ДанныеДокумента.Номер          КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных       КАК ТипСсылки,
	|	ДанныеДокумента.Организация    КАК Организация,
	|	&ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                   КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Подразделение  КАК Подразделение,
	|	ДанныеДокумента.Ответственный  КАК Ответственный,
	|	ДанныеДокумента.Комментарий    КАК Комментарий,
	|	ДанныеДокумента.Проведен       КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ                           КАК ДополнительнаяЗапись,
	|	ДанныеДокумента.Дата           КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                 КАК НомерПервичногоДокумента,
	|	ЛОЖЬ                           КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО                   КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                   КАК ИсправляемыйДокумент,
	|	ДанныеДокумента.Дата           КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                   КАК Приоритет
	|
	|ИЗ
	|	Документ.УлучшениеНМА КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоНМА(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоНМА";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаНМА.НомерСтроки-1, 0) КАК НомерЗаписи,
	|	ДанныеДокумента.Ссылка           КАК Ссылка,
	|	ТаблицаНМА.НематериальныйАктив   КАК НематериальныйАктив,
	|	&ХозяйственнаяОперация           КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация      КАК Организация,
	|	ДанныеДокумента.Подразделение    КАК Подразделение,
	|	ДанныеДокумента.Дата             КАК Дата,
	|	&ИдентификаторМетаданных         КАК ТипСсылки,
	|	ДанныеДокумента.Проведен         КАК Проведен,
	|	ДанныеДокумента.ОтражатьВУпрУчете  КАК ОтражатьВУпрУчете,
	|	ДанныеДокумента.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете
	|
	|ИЗ
	|	Документ.УлучшениеНМА КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УлучшениеНМА.НМА КАК ТаблицаНМА
	|		ПО ТаблицаНМА.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииНМАУУ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииНМАУУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ОтложенноеФормированиеДвиженийВНА.ТекстЗапросаПустыеТаблицыОтложенныхДвижений(Запрос, ТекстыЗапроса);
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтПараметрыАмортизацииНМАУУ(ТекстыЗапроса);
	ТекстЗапросаТаблицаВтВыработкаНМА(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка         КАК Регистратор,
	|	ДанныеДокумента.Период         КАК Период,
	|	ДанныеДокумента.Организация    КАК Организация,
	|	ДанныеДокумента.Период         КАК ДатаПоследнегоИзменения,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|
	|	ПараметрыАмортизацииНМАУУ.СрокИспользования           КАК СрокИспользования,
	|	ПараметрыАмортизацииНМАУУ.КоэффициентУскорения        КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииНМАУУ.МетодНачисленияАмортизации  КАК МетодНачисленияАмортизации,
	|	ПараметрыАмортизацииНМАУУ.ЛиквидационнаяСтоимость     КАК ЛиквидационнаяСтоимость,
	|	ПараметрыАмортизацииНМАУУ.ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимостьРегл,
	|
	// СрокИспользованияДляВычисленияАмортизации
	|	ПараметрыАмортизацииНМАУУ.СрокИспользованияДляВычисленияАмортизации
	|		- РАЗНОСТЬДАТ(ЕСТЬNULL(ПараметрыАмортизацииНМАУУ.ДатаПоследнегоИзменения, ДанныеДокумента.Период), ДанныеДокумента.Период, МЕСЯЦ) КАК СрокИспользованияДляВычисленияАмортизации,
	|
	// ОбъемПродукцииРаботДляВычисленияАмортизации
	|	ПараметрыАмортизацииНМАУУ.ОбъемПродукцииРаботДляВычисленияАмортизации
	|		- ЕСТЬNULL(ВыработкаНМА.КоличествоУУ, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаТаблицаНМА КАК ТаблицаНМА
	|		ПО ДанныеДокумента.Ссылка = ТаблицаНМА.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметрыАмортизацииНМАУУ КАК ПараметрыАмортизацииНМАУУ
	|		ПО ПараметрыАмортизацииНМАУУ.Ссылка = ТаблицаНМА.Ссылка
	|			И ПараметрыАмортизацииНМАУУ.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВыработкаНМА КАК ВыработкаНМА
	|		ПО ВыработкаНМА.Ссылка = ТаблицаНМА.Ссылка
	|			И ВыработкаНМА.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|
	|ГДЕ
	|	ДанныеДокумента.ОтражатьВУпрУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииНМАБУ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииНМАБУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтПараметрыАмортизацииНМАБУ(ТекстыЗапроса);
	ТекстЗапросаТаблицаВтВыработкаНМА(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка          КАК Регистратор,
	|	ДанныеДокумента.Период          КАК Период,
	|	ДанныеДокумента.Организация     КАК Организация,
	|	ДанныеДокумента.Период          КАК ДатаПоследнегоИзменения,
	|	ТаблицаНМА.НематериальныйАктив  КАК НематериальныйАктив,
	|
	|	ПараметрыАмортизацииНМАБУ.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользованияБУ,
	|	ПараметрыАмортизацииНМАБУ.СрокПолезногоИспользованияНУ КАК СрокПолезногоИспользованияНУ,
	|	ПараметрыАмортизацииНМАБУ.КоэффициентБУ КАК КоэффициентБУ,
	|	ПараметрыАмортизацииНМАБУ.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ПараметрыАмортизацииНМАБУ.СпециальныйКоэффициент КАК СпециальныйКоэффициент,
	|
	// СрокИспользованияДляВычисленияАмортизации
	|	ПараметрыАмортизацииНМАБУ.СрокИспользованияДляВычисленияАмортизации
	|		- РАЗНОСТЬДАТ(ЕСТЬNULL(ПараметрыАмортизацииНМАБУ.ДатаПоследнегоИзменения, ДанныеДокумента.Период), ДанныеДокумента.Период, МЕСЯЦ) КАК СрокИспользованияДляВычисленияАмортизации,
	|
	// ОбъемПродукцииРаботДляВычисленияАмортизации
	|	ПараметрыАмортизацииНМАБУ.ОбъемПродукцииРаботДляВычисленияАмортизации
	|		- ЕСТЬNULL(втВыработкаНМА.КоличествоБУ, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаТаблицаНМА КАК ТаблицаНМА
	|		ПО ДанныеДокумента.Ссылка = ТаблицаНМА.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметрыАмортизацииНМАБУ КАК ПараметрыАмортизацииНМАБУ
	|		ПО ПараметрыАмортизацииНМАБУ.Ссылка = ТаблицаНМА.Ссылка
	|			И ПараметрыАмортизацииНМАБУ.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВыработкаНМА КАК втВыработкаНМА
	|		ПО втВыработкаНМА.Ссылка = ТаблицаНМА.Ссылка
	|			И втВыработкаНМА.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|ГДЕ
	|	ДанныеДокумента.ОтражатьВРеглУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаСтоимостьНМА(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "СтоимостьНМА";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетСтоимостиВНА.ТекстЗапросаПустаяВтРасчетСтоимости(Запрос, ТекстыЗапроса);
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтПорядокУчетаНМА(ТекстыЗапроса);
	ВнеоборотныеАктивыЛокализация.ТекстЗапросаТаблицаВтНалогообложениеНМА(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                   КАК Регистратор,
	|	ДанныеДокумента.Период                   КАК Период,
	|	ДанныеДокумента.Организация              КАК Организация,
	|	ДанныеДокумента.Подразделение            КАК Подразделение,
	|	ПорядокУчетаНМА.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|	ПорядокУчетаНМА.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&ХозяйственнаяОперация                   КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ОтражатьВРеглУчете       КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете        КАК ОтражатьВУпрУчете,
	|	&ВидАналитикиКапитализацииРасходов       КАК ВидАналитикиКапитализацииРасходов,
	|	&ВариантПримененияЦелевогоФинансирования КАК ВариантПримененияЦелевогоФинансирования,
	|	ТаблицаНМА.НематериальныйАктив           КАК НематериальныйАктив,
	|	ТаблицаНМА.НематериальныйАктив           КАК АналитикаКапитализацииРасходов,
	|
	|	ЕСТЬNULL(РасчетСтоимости.КорПодразделение, НЕОПРЕДЕЛЕНО)             КАК КорПодразделение,
	|	ЕСТЬNULL(РасчетСтоимости.КорНаправлениеДеятельности, НЕОПРЕДЕЛЕНО)   КАК КорНаправлениеДеятельности,
	|	ЕСТЬNULL(РасчетСтоимости.КорСтатьяРасходов, НЕОПРЕДЕЛЕНО)            КАК КорСтатьяРасходов,
	|	ЕСТЬNULL(РасчетСтоимости.КорАналитикаРасходов, НЕОПРЕДЕЛЕНО)         КАК КорАналитикаРасходов,
	|	ВтНалогообложениеНДС.НалогообложениеНДС                              КАК НалогообложениеНДС,
	|	НЕ РасчетСтоимости.ОбъектУчета ЕСТЬ NULL                             КАК РасчетСтоимости,
	|
	|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаНМА.СтоимостьУУ)          КАК Стоимость,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаНМА.СтоимостьБУ)      КАК СтоимостьРегл,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУ, 0)                             КАК СтоимостьНУ,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПР, 0)                             КАК СтоимостьПР,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВР, ТаблицаНМА.СтоимостьБУ)        КАК СтоимостьВР,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьЦФ, 0)                             КАК СтоимостьЦФ,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУЦФ, 0)                           КАК СтоимостьНУЦФ,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПРЦФ, 0)                           КАК СтоимостьПРЦФ,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВРЦФ, 0)                           КАК СтоимостьВРЦФ,
	|	0                                                                    КАК АмортизационнаяПремия,
	|	0                                                                    КАК ПредварительнаяСтоимость,
	|	0                                                                    КАК ПредварительнаяСтоимостьРегл,
	|	ЕСТЬNULL(РасчетСтоимости.КорПостояннаяРазница, 0)                    КАК КорПостояннаяРазница,
	|
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, 0)
	|		- ЕСТЬNULL(РасчетСтоимости.КорСуммаНУ, 0)
	|		- ЕСТЬNULL(РасчетСтоимости.КорПостояннаяРазница, 0)              КАК КорВременнаяРазница,
	|	
	|	ЕСТЬNULL(РасчетСтоимости.ИдентификаторСтроки, &ИдентификаторНеиспользуемойФинЗаписи) КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаТаблицаНМА КАК ТаблицаНМА
	|		ПО ДанныеДокумента.Ссылка = ТаблицаНМА.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимости КАК РасчетСтоимости
	|		ПО РасчетСтоимости.Ссылка = ТаблицаНМА.Ссылка
	|			И РасчетСтоимости.ОбъектУчета = ТаблицаНМА.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчетаНМА КАК ПорядокУчетаНМА
	|		ПО ПорядокУчетаНМА.Ссылка = ТаблицаНМА.Ссылка
	|			И ПорядокУчетаНМА.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтНалогообложениеНДС КАК ВтНалогообложениеНДС
	|		ПО ВтНалогообложениеНДС.Ссылка = ТаблицаНМА.Ссылка
	|			И ВтНалогообложениеНДС.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Нужно отдельно записать предварительную стоимость для расчета амортизации
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                   КАК Регистратор,
	|	ДанныеДокумента.Период                   КАК Период,
	|	ДанныеДокумента.Организация              КАК Организация,
	|	ДанныеДокумента.Подразделение            КАК Подразделение,
	|	ПорядокУчетаНМА.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|	ПорядокУчетаНМА.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&ХозяйственнаяОперация                   КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ОтражатьВРеглУчете       КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете        КАК ОтражатьВУпрУчете,
	|	&ВидАналитикиКапитализацииРасходов       КАК ВидАналитикиКапитализацииРасходов,
	|	&ВариантПримененияЦелевогоФинансирования КАК ВариантПримененияЦелевогоФинансирования,
	|	ТаблицаНМА.НематериальныйАктив           КАК НематериальныйАктив,
	|	ТаблицаНМА.НематериальныйАктив           КАК АналитикаКапитализацииРасходов,
	|	НЕОПРЕДЕЛЕНО                             КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО                             КАК КорНаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                             КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                             КАК КорАналитикаРасходов,
	|	ВтНалогообложениеНДС.НалогообложениеНДС  КАК НалогообложениеНДС,
	|	ЛОЖЬ                                     КАК РасчетСтоимости,
	|	0                                        КАК Стоимость,
	|	0                                        КАК СтоимостьРегл,
	|	0                                        КАК СтоимостьНУ,
	|	0                                        КАК СтоимостьПР,
	|	0                                        КАК СтоимостьВР,
	|	0                                        КАК СтоимостьЦФ,
	|	0                                        КАК СтоимостьНУЦФ,
	|	0                                        КАК СтоимостьПРЦФ,
	|	0                                        КАК СтоимостьВРЦФ,
	|	0                                        КАК АмортизационнаяПремия,
	|	ТаблицаНМА.СтоимостьУУ                   КАК ПредварительнаяСтоимость,
	|	ТаблицаНМА.СтоимостьБУ                   КАК ПредварительнаяСтоимостьРегл,
	|	0                                        КАК КорПостояннаяРазница,
	|	0                                        КАК КорВременнаяРазница,
	|	
	|	&ИдентификаторНеиспользуемойФинЗаписи    КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                             КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаТаблицаНМА КАК ТаблицаНМА
	|		ПО ДанныеДокумента.Ссылка = ТаблицаНМА.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчетаНМА КАК ПорядокУчетаНМА
	|		ПО ПорядокУчетаНМА.Ссылка = ТаблицаНМА.Ссылка
	|			И ПорядокУчетаНМА.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтНалогообложениеНДС КАК ВтНалогообложениеНДС
	|		ПО ВтНалогообложениеНДС.Ссылка = ТаблицаНМА.Ссылка
	|			И (ВтНалогообложениеНДС.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив)
	|
	|ГДЕ
	|	(ТаблицаНМА.СтоимостьУУ <> 0
	|		ИЛИ ТаблицаНМА.СтоимостьБУ <> 0)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ДопПоля = "Регистратор";

	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса, ДопПоля);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы(ДопПоля, Истина);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтПорядокУчетаНМА(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                       КАК Регистратор,
	|	ДанныеДокумента.Период                       КАК Период,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|
	|	РасчетСтоимости.КорПодразделение             КАК Подразделение,
	|	РасчетСтоимости.КорНаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	РасчетСтоимости.КорСтатьяРасходов            КАК Статья,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаДоходов,
	|	РасчетСтоимости.КорАналитикаРасходов         КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                                 КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Подразделение                КАК КорПодразделение,
	|	ПорядокУчетаНМА.НаправлениеДеятельности      КАК КорНаправлениеДеятельности,
	|	&СтатьяАП                                    КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаРасходов,
	|	РасчетСтоимости.ОбъектУчета                  КАК КорАналитикаАктивовПассивов,
	|	ПорядокУчетаНМА.ГруппаФинансовогоУчета       КАК КорГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Организация                  КАК КорОрганизация,
	|
	|	РасчетСтоимости.Сумма                        КАК Сумма,
	|
	|	РасчетСтоимости.СтоимостьРегл 
	|		+ РасчетСтоимости.СтоимостьЦФ            КАК СуммаРегл,
	|
	|	РасчетСтоимости.Стоимость                    КАК СуммаУпр
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРасчетСтоимости КАК РасчетСтоимости
	|		ПО РасчетСтоимости.Ссылка = ДанныеДокумента.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПорядокУчетаНМА КАК ПорядокУчетаНМА
	|		ПО ПорядокУчетаНМА.Ссылка = РасчетСтоимости.Ссылка
	|			И ПорядокУчетаНМА.НематериальныйАктив = РасчетСтоимости.ОбъектУчета
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса, ДопПоля)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса, ДопПоля);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы(ДопПоля, Истина);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса, ДопПоля)

	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	СписокЗапросовОбъединение = Новый Массив;
	СписокЗапросовОбъединение.Добавить(РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы(ДопПоля));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период                       КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|   РасчетРасходов.Подразделение                 КАК Подразделение,
	|	РасчетРасходов.СтатьяРасходов                КАК СтатьяРасходов,
	|	РасчетРасходов.АналитикаРасходов             КАК АналитикаРасходов,
	|	РасчетРасходов.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
	|
	|	РасчетРасходов.Сумма                         КАК СуммаСНДС,
	|	РасчетРасходов.СуммаБезНДС                   КАК СуммаБезНДС,
	|	РасчетРасходов.СуммаУпр                      КАК СуммаБезНДСУпр,
	|
	|	РасчетРасходов.СуммаРегл                     КАК СуммаСНДСРегл,
	|	РасчетРасходов.СуммаРегл                     КАК СуммаБезНДСРегл,
	|	РасчетРасходов.ПостояннаяРазница             КАК ПостояннаяРазница,
	|	РасчетРасходов.ВременнаяРазница              КАК ВременнаяРазница,
	|	
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры,
	|	РасчетРасходов.ИдентификаторСтроки           КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации              КАК НастройкаХозяйственнойОперации,
	|
	|	ДанныеДокумента.Ссылка КАК Регистратор
	|	
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРасчетРасходов КАК РасчетРасходов
	|		ПО РасчетРасходов.Ссылка = ДанныеДокумента.Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаВтВыработкаНМА(ТекстыЗапроса)
	
	ИмяТаблицы = "втВыработкаНМА";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтУчетнаяПолитикаФинансовогоУчета(ТекстыЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|
	|	ВЫБОР
	|		КОГДА УчетнаяПолитика.ПорядокНачисленияАмортизацииНМА = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СДатыПринятияКУчету)
	|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеДокумента.Период, МЕСЯЦ), ДЕНЬ, -1), МЕСЯЦ)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеДокумента.Период, МЕСЯЦ)
	|	КОНЕЦ КАК Период
	|
	|ПОМЕСТИТЬ втСписокНМА_ВыработкаУУ
	|
	|ИЗ
	|	ДанныеДокументаТаблицаНМА КАК ТаблицаНМА
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаНМА.Ссылка
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитика
	|		ПО УчетнаяПолитика.Ссылка = ТаблицаНМА.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	НематериальныйАктив
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "втСписокНМА_ВыработкаУУ", Ложь);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|
	|	ВЫБОР
	|		КОГДА УчетнаяПолитика.ПорядокНачисленияАмортизацииНМАРегл = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СДатыПринятияКУчету)
	|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеДокумента.Период, МЕСЯЦ), ДЕНЬ, -1), МЕСЯЦ)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеДокумента.Период, МЕСЯЦ)
	|	КОНЕЦ КАК Период
	|
	|ПОМЕСТИТЬ втСписокНМА_ВыработкаБУ
	|
	|ИЗ
	|	ДанныеДокументаТаблицаНМА КАК ТаблицаНМА
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаНМА.Ссылка
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитика
	|		ПО УчетнаяПолитика.Ссылка = ТаблицаНМА.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	НематериальныйАктив
	|";
	
	//++ Локализация
	
	ВнеоборотныеАктивыЛокализация.ТекстЗапросаТаблицаВтУчетнаяПолитикаБухУчета(ТекстыЗапроса);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|
	|	ВЫБОР
	|		КОГДА УчетнаяПолитика.ПорядокНачисленияАмортизацииНМА = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СДатыПринятияКУчету)
	|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеДокумента.Период, МЕСЯЦ), ДЕНЬ, -1), МЕСЯЦ)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеДокумента.Период, МЕСЯЦ)
	|	КОНЕЦ КАК Период
	|
	|ПОМЕСТИТЬ втСписокНМА_ВыработкаБУ
	|
	|ИЗ
	|	ДанныеДокументаТаблицаНМА КАК ТаблицаНМА
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаНМА.Ссылка
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУчетнаяПолитикаБухУчета КАК УчетнаяПолитика
	|		ПО УчетнаяПолитика.Ссылка = ТаблицаНМА.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	НематериальныйАктив
	|";
	
	//-- Локализация
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "втСписокНМА_ВыработкаБУ", Ложь);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВыработкаНМА.Ссылка КАК Ссылка,
	|	ВыработкаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	СУММА(ВыработкаНМА.КоличествоУУ) КАК КоличествоУУ,
	|	СУММА(ВыработкаНМА.КоличествоБУ) КАК КоличествоБУ
	|
	|ПОМЕСТИТЬ втВыработкаНМА
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		втСписокНМА.Ссылка КАК Ссылка,
	|		ВыработкаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|		ВыработкаНМА.Количество КАК КоличествоУУ,
	|		0 КоличествоБУ
	|	ИЗ
	|		втСписокНМА_ВыработкаУУ КАК втСписокНМА
	|		
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаНМА КАК ВыработкаНМА
	|			ПО ВыработкаНМА.НематериальныйАктив = втСписокНМА.НематериальныйАктив
	|				И ВыработкаНМА.Период <= втСписокНМА.Период
	|				И ВыработкаНМА.Активность
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		втСписокНМА.Ссылка КАК Ссылка,
	|		ВыработкаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|		0 КАК КоличествоУУ,
	|		ВыработкаНМА.Количество КАК КоличествоБУ
	|
	|	ИЗ
	|		втСписокНМА_ВыработкаБУ КАК втСписокНМА
	|	
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаНМА КАК ВыработкаНМА
	|			ПО ВыработкаНМА.НематериальныйАктив = втСписокНМА.НематериальныйАктив
	|				И ВыработкаНМА.Период <= втСписокНМА.Период
	|				И ВыработкаНМА.Активность
	|
	|	) КАК ВыработкаНМА
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыработкаНМА.Ссылка,
	|	ВыработкаНМА.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НематериальныйАктив
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеПоРеглУчету

Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат УлучшениеНМАЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат УлучшениеНМАЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	

КонецПроцедуры

#КонецОбласти

#Область Прочее

// Заполнить сумму затрат.
// 
// Параметры:
//  Объект - ДокументОбъект.УлучшениеНМА - Объект
//  ВыбранныеСтроки - ТабличнаяЧасть - Выбранные строки
Процедура ЗаполнитьСуммуЗатрат(Объект, ВыбранныеСтроки = Неопределено) Экспорт

	Если НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Объект.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ДатаДокумента = ?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса());
	ТаблицаНМА = Объект.НМА.Выгрузить(ВыбранныеСтроки);

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ТаблицаНМА.СтоимостьУУ КАК СтоимостьУУ,
	|	ТаблицаНМА.СтоимостьБУ КАК СтоимостьБУ,
	|	ТаблицаНМА.ИдентификаторСтроки КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ ТаблицаНМА
	|
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ГДЕ
	|	ТаблицаНМА.НематериальныйАктив <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Дата КАК Дата,
	|	&Организация КАК Организация,
	|	&ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	ТаблицаНМА.НематериальныйАктив КАК ОбъектУчета,
	|	1 КАК Приоритет
	|
	|ПОМЕСТИТЬ ВтПорцияДанныхКРасчету
	|
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Дата КАК Дата,
	|	&Организация КАК Организация,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК ОбъектУчета,
	|
	|	ЛОЖЬ КАК РасходыРаспределяютсяПоОбъектам,
	|
	|	ТаблицаНМА.НематериальныйАктив КАК АналитикаКапитализацииРасходов,
	|
	|	ЛОЖЬ КАК ФактическаяСтоимость,
	|
	|	ТаблицаНМА.СтоимостьУУ КАК СтоимостьУУ,
	|	ТаблицаНМА.СтоимостьБУ КАК СтоимостьБУ,
	|	0 КАК СтоимостьНУ,
	|
	|	&ВариантПримененияЦелевогоФинансирования КАК ВариантПримененияЦелевогоФинансирования,
	|	0 КАК СуммаЦелевыхСредств,
	|	0 КАК ПервоначальнаяСтоимостьНУ,
	|
	|	&ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	&ОтражатьВБУ КАК ОтражатьВБУ,
	|	&ОтражатьВНУ КАК ОтражатьВНУ,
	|	&ОтражатьВБУ КАК УчестьПР,
	|
	|	ТаблицаНМА.ИдентификаторСтроки КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ ВтТаблицаОбъектов
	|
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ВидАналитикиКапитализацииРасходов", Перечисления.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР);
	Запрос.УстановитьПараметр("ОбъектСтроительства", Неопределено);
	Запрос.УстановитьПараметр("ЧастичныйВводВЭксплуатацию", Ложь);
	Запрос.УстановитьПараметр("ПорядокУчетаУУ", Неопределено);
	Запрос.УстановитьПараметр("ПорядокУчетаБУ", Неопределено);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.УлучшениеНМА);
	Запрос.УстановитьПараметр("ВариантПримененияЦелевогоФинансирования", Неопределено);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВНУ", Ложь);
	Запрос.УстановитьПараметр("ТаблицаНМА", ТаблицаНМА);
	
	Запрос.Выполнить();
	
	РасчетСтоимостиВНА.СформироватьВтТекущиеРасходы(ДатаДокумента, МенеджерВременныхТаблиц);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВтТекущиеРасходы.ОбъектУчета КАК ОбъектУчета,
	|	СУММА(ВтТекущиеРасходы.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ВтТекущиеРасходы.СуммаРегл) КАК СуммаРегл
	|ИЗ
	|	ВтТекущиеРасходы КАК ВтТекущиеРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТекущиеРасходы.ОбъектУчета
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Результат = Запрос.Выполнить();

	РасходыПоДокументу = Результат.Выгрузить();
	
	Если ВыбранныеСтроки <> Неопределено Тогда
		СписокСтрок = ВыбранныеСтроки;
	Иначе
		СписокСтрок = Объект.НМА;
	КонецЕсли; 
	
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		
		СтруктураПоиска = Новый Структура("ОбъектУчета", ДанныеСтроки.НематериальныйАктив);
		СписокСтрокРасходы = РасходыПоДокументу.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрокРасходы.Количество() <> 0 Тогда
			Если Объект.ОтражатьВРеглУчете Тогда
				ДанныеСтроки.СтоимостьБУ = СписокСтрокРасходы[0].СуммаРегл;
			КонецЕсли; 
			Если Объект.ОтражатьВУпрУчете Тогда
				ДанныеСтроки.СтоимостьУУ = СписокСтрокРасходы[0].СуммаУпр;
			КонецЕсли;
		Иначе
			ДанныеСтроки.СтоимостьУУ = 0;
			ДанныеСтроки.СтоимостьБУ = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
