
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьЗависимыеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
			И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
			
			СвойстваВыполнитьОтложеннуюИнициализацию();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура НормативыПроизводственныхРасходов(Команда)
	
	КонецПериода = Объект.ДатаОкончанияДействия;
	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = КонецГода(Объект.ДатаНачалаДействия);
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("СтандартныйПериод", Новый СтандартныйПериод(Объект.ДатаНачалаДействия, КонецПериода));
	Отбор.Вставить("Организация", Объект.Организация);
	Отбор.Вставить("Подразделение", Объект.Подразделение);
	
	ПараметрыФормы = Новый Структура("КлючВарианта, КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",		Неопределено);
	ПараметрыФормы.Вставить("Отбор",							Отбор);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",			Истина);
	ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",	Ложь);
	
	ОткрытьФорму("Отчет.ПлановыеИФактическиеНормативыПроизводственныхРасходов.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = НачалоМесяца(Объект.ДатаНачалаДействия);
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияДействия) Тогда
		Диалог.Период.ДатаОкончания = КонецМесяца(Объект.ДатаОкончанияДействия);
	КонецЕсли;
	
	Диалог.Показать(Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасходамиПредыдущегоМесяца(Команда)
	
	ЗадатьВопросПользователю("Все");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасходамиПредыдущихМесяцев(Команда)
	
	ЗадатьВопросПользователю("Все", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПеременныеРасходыПредыдущегоМесяца(Команда)
	
	ЗадатьВопросПользователю("ПеременныеРасходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПеременныеРасходыПредыдущихМесяцев(Команда)
	
	ЗадатьВопросПользователю("ПеременныеРасходы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПостоянныеРасходыПредыдущегоМесяца(Команда)
	
	ЗадатьВопросПользователю("ПостоянныеРасходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПостоянныеРасходыПредыдущихМесяцев(Команда)
	
	ЗадатьВопросПользователю("ПостоянныеРасходы", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапки

&НаКлиенте
Процедура ДатаНачалаДействияПриИзменении(Элемент)
	
	Объект.ДатаНачалаДействия = НачалоМесяца(Объект.ДатаНачалаДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончанияДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаОкончанияДействия = КонецМесяца(Объект.ДатаОкончанияДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПеременныеРасходы

&НаКлиенте
Процедура НормыПеременныхРасходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.НормыПеременныхРасходов.ТекущиеДанные;
		РассчитатьНормативИКратность(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормыПеременныхРасходовСтатьяРасходовПриИзменении(Элемент)
	
	ПриИзмененииСтатьиРасходовСервер("НормыПеременныхРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура НормыПеременныхРасходовСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НормыПеременныхРасходов.ТекущиеДанные;
	РассчитатьНормативИКратность(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НормыПеременныхРасходовВеличинаПриИзменении(Элемент)
	
	УстановитьВеличинуБазы("НормыПеременныхРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура НормыПеременныхРасходовКратностьПриИзменении(Элемент)

	ТекущиеДанные = Элементы.НормыПеременныхРасходов.ТекущиеДанные;
	ЗаполнитьПредставлениеКратности(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПостоянныеРасходы

&НаКлиенте
Процедура НормыПостоянныхРасходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.НормыПостоянныхРасходов.ТекущиеДанные;
		РассчитатьНормативИКратность(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормыПостоянныхРасходовСтатьяРасходовПриИзменении(Элемент)
	
	ПриИзмененииСтатьиРасходовСервер("НормыПостоянныхРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура НормыПостоянныхРасходовСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НормыПостоянныхРасходов.ТекущиеДанные;
	РассчитатьНормативИКратность(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НормыПостоянныхРасходовБазаПриИзменении(Элемент)
	
	УстановитьВеличинуБазы("НормыПостоянныхРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура НормыПостоянныхРасходовКратностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НормыПостоянныхРасходов.ТекущиеДанные;
	ЗаполнитьПредставлениеКратности(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийВеличиныБазРаспределения

&НаКлиенте
Процедура ВеличиныБазРаспределенияПредставлениеПравилаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = "РаспределяетсяПоПравилу" Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = "ДругиеПравила" Тогда
		
		ОтборФормы = Новый Структура("НазначениеПравила, Устаревшее", 
			ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства"), Ложь);
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТолькоСЗаданнымОтбором", Истина);
		ПараметрыФормы.Вставить("Отбор", ОтборФормы);

		ОткрытьФорму("Справочник.ПравилаРаспределенияРасходов.ФормаВыбора", ПараметрыФормы, Элемент);
		
		Возврат;
		
	КонецЕсли;
		
	ТекущиеДанные = Элементы.ВеличиныБазРаспределения.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		ТипБазы = "Перечисление.ТипыБазыРаспределенияРасходов." + ВыбранноеЗначение;
		ТекущиеДанные.ПравилоРаспределения = ПредопределенноеЗначение(ТипБазы);
		
	Иначе	
		ТекущиеДанные.ПравилоРаспределения = ВыбранноеЗначение;
	КонецЕсли;
	
	ВставитьНовыйЭлементВСписокВыбора(ТекущиеДанные.ПравилоРаспределения, НаименованиеПравила(ТекущиеДанные.ПравилоРаспределения));
	ЗаполнитьЗависимыеРеквизитыБазРаспределенияВСтроке(Элементы.ВеличиныБазРаспределения.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличиныБазРаспределенияПредставлениеПравилаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВеличиныБазРаспределения.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеПравила) Тогда
		
		ТекущиеДанные.НаименованиеПравила = "";
		ТекущиеДанные.ПравилоРаспределения = Неопределено;
		ТекущиеДанные.ЕдиницаИзмерения = "";
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличиныБазРаспределенияПредставлениеПравилаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ВеличиныБазРаспределения.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПравилоРаспределения)
		Или ТипЗнч(ТекущиеДанные.ПравилоРаспределения) = Тип("ПеречислениеСсылка.ТипыБазыРаспределенияРасходов") Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.ПравилоРаспределения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличиныБазРаспределенияВеличинаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВеличиныБазРаспределения.ТекущиеДанные;
	ЗаполнитьПредставлениеВеличины(ТекущиеДанные);
	ПересчитатьРасходы("НормыПостоянныхРасходов", ТекущиеДанные.ПравилоРаспределения, ТекущиеДанные.Величина);
	ПересчитатьРасходы("НормыПеременныхРасходов", ТекущиеДанные.ПравилоРаспределения, ТекущиеДанные.Величина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличиныБазРаспределенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ВеличиныБазРаспределения, ЭтотОбъект);
	
	ТекущиеДанные = Элементы.ВеличиныБазРаспределения.ТекущиеДанные;
	ВставитьНовыйЭлементВСписокВыбора(ТекущиеДанные.ПравилоРаспределения, ТекущиеДанные.НаименованиеПравила);
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличиныБазРаспределенияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не НоваяСтрока Или НоваяСтрока И Не ОтменаРедактирования Тогда
		
		ТекущиеДанные = Элементы.ВеличиныБазРаспределения.ТекущиеДанные;
		
		ОтборДублей = Новый Структура("ПравилоРаспределения");
		ЗаполнитьЗначенияСвойств(ОтборДублей, ТекущиеДанные);
		
		Дубли = Объект.ВеличиныБазРаспределения.НайтиСтроки(ОтборДублей);
		Если Дубли.Количество() > 1 Тогда
			
			ТекстОшибки = НСтр("ru = 'В списке уже существует строка с правилом распределения %1';
								|en = 'Line with the %1 allocation rule already exists in the list'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Дубли[0].НаименованиеПравила));
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличиныБазРаспределенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ВеличиныБазРаспределения.ТекущиеДанные;
	
	КэшСтроки = ?(НоваяСтрока, Неопределено, РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.ВеличиныБазРаспределения, ЭтотОбъект));
	Если Не НоваяСтрока И Не КэшСтроки = Неопределено 
		И Не ТекущиеДанные.ПравилоРаспределения = КэшСтроки.ПравилоРаспределения Тогда
		
		ВыбранноеПравило = ТекущиеДанные.ПравилоРаспределения;
		ТекущиеДанные.ПравилоРаспределения = КэшСтроки.ПравилоРаспределения;
		ПараметрыУдаления = ПараметрыУдаленияНорм(Элементы.ВеличиныБазРаспределения.ВыделенныеСтроки);
		
		Если ПараметрыУдаления.ЕстьСтрокиКУдалению Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыУдаления", ПараметрыУдаления);
			ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
			ДополнительныеПараметры.Вставить("ПравилоКУдалению", КэшСтроки.ПравилоРаспределения);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВеличиныБазРаспределенияПриОкончанииРедактированияЗавершение", 
				ЭтотОбъект, 
				ДополнительныеПараметры);
			
			ТекстОповещения = НСтр("ru = 'Расходы с правилом распределения %1 будут удалены. Продолжить?';
									|en = 'Expenses with the %1 allocation rule will be deleted. Continue?'");
			ПоказатьВопрос(ОписаниеОповещения, 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, КэшСтроки.НаименованиеПравила),
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			ТекущиеДанные.ПравилоРаспределения = ВыбранноеПравило;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличиныБазРаспределенияПередУдалением(Элемент, Отказ)
	
	ПараметрыУдаления = ПараметрыУдаленияНорм(Элементы.ВеличиныБазРаспределения.ВыделенныеСтроки);
	
	Если ПараметрыУдаления.ЕстьСтрокиКУдалению Тогда
		
		Отказ = Истина;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыУдаления", ПараметрыУдаления);
		ДополнительныеПараметры.Вставить("ИдСтрокВеличин", Элементы.ВеличиныБазРаспределения.ВыделенныеСтроки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВеличиныБазРаспределенияПередУдалениемЗавершение", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
		
		ТекстОповещения = НСтр("ru = 'Нормы расходов с правилами распределения удаляемых строк будут удалены. Продолжить?';
								|en = 'Expense standards with allocation rules of removed lines will be deleted. Continue?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстОповещения, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
#Область ПредставлениеПравила

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВеличиныБазРаспределенияПредставлениеПравила.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВеличиныБазРаспределения.НаименованиеПравила");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ВеличиныБазРаспределения.НаименованиеПравила"));
	
	#Область ПеременныеРасходы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПеременныхРасходовНаименованиеПравила.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПеременныхРасходов.ПравилоРаспределения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПеременныхРасходов.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не поддерживается';
																|en = 'Not supported'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПеременныхРасходовСумма.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПеременныхРасходовВеличина.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПеременныхРасходовНорматив.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПеременныхРасходовКратность.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПеременныхРасходов.ПравилоРаспределения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПеременныхРасходов.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область ПостоянныеРасходы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПостоянныхРасходовНаименованиеПравила.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПостоянныхРасходов.ПравилоРаспределения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПостоянныхРасходов.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не поддерживается';
																|en = 'Not supported'"));
	
	// Блокировка редактирования, если правило распределения неподдерживается.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПостоянныхРасходовНаименованиеПравила.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПостоянныхРасходовБаза.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПостоянныхРасходовКратность.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПостоянныхРасходов.ПравилоРаспределения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПостоянныхРасходов.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
#КонецОбласти

#Область ПредставлениеКратности

	// Постоянные расходы.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПостоянныхРасходовКратность.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПостоянныхРасходов.Величина");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.НормыПостоянныхРасходов.ПредставлениеКратности"));
	
	// Переменные расходы.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПеременныхРасходовКратность.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПеременныхРасходов.Величина");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.НормыПеременныхРасходов.ПредставлениеКратности"));
	
#КонецОбласти

#Область ТекстОтнесенияРасходов

	// Постоянные расходы.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПостоянныхРасходовОтнесениеНорматива.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПостоянныхРасходов.Величина");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'на';
																|en = 'for'"));
	
	// Переменные расходы.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПеременныхРасходовОтнесениеНорматива.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПеременныхРасходов.Величина");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'на';
																|en = 'for'"));
	
#КонецОбласти

#Область ПредставлениеВеличины

	// Постоянные расходы.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПостоянныхРасходовБаза.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПостоянныхРасходов.Величина");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.НормыПостоянныхРасходов.ПредставлениеВеличины"));
	
	// Переменные расходы.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НормыПеременныхРасходовВеличина.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НормыПеременныхРасходов.Величина");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.НормыПеременныхРасходов.ПредставлениеВеличины"));
	
	// Величины баз распределения.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВеличиныБазРаспределенияВеличина.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВеличиныБазРаспределения.Величина");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ВеличиныБазРаспределения.ПредставлениеВеличины"));
	
#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	КоличествоМесяцев = 0;
	Если Параметры.Свойство("ЗначенияЗаполнения")
	 И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") 
	 И Параметры.ЗначенияЗаполнения.Свойство("КоличествоМесяцев", КоличествоМесяцев) Тогда
		ЗаполнитьНаСервере("Все", КоличествоМесяцев);
	КонецЕсли;
	
	ЗаполнитьСписокВыбораПравил();
	УстановитьЗаголовки();
	ЗаполнитьЗависимыеРеквизиты();
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.ВеличиныБазРаспределения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимыеРеквизиты()
	
	ПредставленияБаз = ПредставленияПростыхБаз();
	
	Для Каждого СтрокаВеличины Из Объект.ВеличиныБазРаспределения Цикл
		ЗаполнитьЗависимыеРеквизитыБазРаспределенияВСтроке(СтрокаВеличины, ПредставленияБаз);
	КонецЦикла;
	
	Для Каждого ПостоянныйРасход Из Объект.НормыПостоянныхРасходов Цикл
		
		ЗаполнитьПоДаннымБазыРаспределения(ПостоянныйРасход, "НормыПостоянныхРасходов");
		ЗаполнитьПредставлениеКратности(ПостоянныйРасход);
		
	КонецЦикла;
	
	Для Каждого ПеременныйРасход Из Объект.НормыПеременныхРасходов Цикл
		
		ЗаполнитьПоДаннымБазыРаспределения(ПеременныйРасход, "НормыПеременныхРасходов");
		ЗаполнитьПредставлениеКратности(ПеременныйРасход);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовки()
	
	ТекстЗаголовкаСуммы = НСтр("ru = 'Сумма (%1)';
								|en = 'Amount (%1)'");
	ТекстЗаголовкаНорматива = НСтр("ru = 'Норматив (%1)';
									|en = 'Standard (%1)'");
	Валюта = Константы.ВалютаУправленческогоУчета.Получить();
	
	Элементы.НормыПостоянныхРасходовСумма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовкаСуммы, Валюта);
	Элементы.НормыПеременныхРасходовСумма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовкаСуммы, Валюта);
	Элементы.НормыПостоянныхРасходовГруппаНорматив.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовкаНорматива, Валюта);
	Элементы.НормыПеременныхРасходовГруппаНорматив.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовкаНорматива, Валюта);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПравил()
	
	СписокВыбора = Элементы.ВеличиныБазРаспределенияПредставлениеПравила.СписокВыбора;
	СписокВыбора.Очистить();
	
	ПростыеПравила = ПростыеПравилаРаспределения();
	Для Каждого Правило Из ПростыеПравила Цикл
		СписокВыбора.Добавить(Правило.Значение, Правило.Представление);
	КонецЦикла;
	
	СписокВыбора.Добавить("ДругиеПравила", 
		Новый ФорматированнаяСтрока(НСтр("ru = 'Другие правила...';
										|en = 'Other rules...'"),,,, "заглушка"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПростыеПравилаРаспределения()
	
	СписокПравил = Новый СписокЗначений;
	СписокПравил.Добавить("СуммаРасходовНаОплатуТруда", НСтр("ru = 'Сумма расходов на оплату труда';
															|en = 'Total payroll expenses'"));
	СписокПравил.Добавить("СуммаМатериальныхЗатрат", НСтр("ru = 'Сумма материальных затрат';
															|en = 'Material cost amount'"));
	СписокПравил.Добавить("СуммаМатериальныхИТрудозатрат", НСтр("ru = 'Сумма материальных и трудозатрат';
																|en = 'Amount of material and labor costs'"));
	СписокПравил.Добавить("ПлановаяСтоимостьПродукции", НСтр("ru = 'Плановая стоимость продукции';
															|en = 'Standard product cost'"));
	СписокПравил.Добавить("НормативыОплатыТруда", НСтр("ru = 'Нормативные расходы на оплату труда';
														|en = 'Standard payroll expenses'"));
	
	СписокПравил.Добавить("КоличествоРаботУказанныхВидов", НСтр("ru = 'Количество работ';
																|en = 'Number of works'"));
	СписокПравил.Добавить("КоличествоУказанныхМатериалов", НСтр("ru = 'Количество материалов';
																|en = 'Quantity of materials'"));
	СписокПравил.Добавить("ВесУказанныхМатериалов", НСтр("ru = 'Вес материалов';
														|en = 'Weight of materials'"));
	СписокПравил.Добавить("ОбъемУказанныхМатериалов", НСтр("ru = 'Объем материалов';
															|en = 'Material volume'"));
	
	СписокПравил.Добавить("КоличествоПродукции", НСтр("ru = 'Количество продукции';
														|en = 'Product quantity'"));
	СписокПравил.Добавить("ВесПродукции", НСтр("ru = 'Вес продукции';
												|en = 'Product weight'"));
	СписокПравил.Добавить("ОбъемПродукции", НСтр("ru = 'Объем продукции';
												|en = 'Product volume'"));
	
	Возврат СписокПравил;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииСтатьиРасходовСервер(Источник)
	
	Если Источник = "НормыПеременныхРасходов" Тогда
		ЭлементФормы = Элементы.НормыПеременныхРасходов;
	Иначе
		ЭлементФормы = Элементы.НормыПостоянныхРасходов;
	КонецЕсли;
			
	ТекущаяСтрока = Объект[Источник].НайтиПоИдентификатору(ЭлементФормы.ТекущаяСтрока);
	ЗаполнитьПоДаннымБазыРаспределения(ТекущаяСтрока, Источник);
	РассчитатьНормативИКратность(ТекущаяСтрока);
	
	ТекущаяСтрока.СтатьяКалькуляции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущаяСтрока.СтатьяРасходов, "СтатьяКалькуляции");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымБазыРаспределения(СтрокаЗаполнения, Источник)
	
	Если ТипЗнч(СтрокаЗаполнения) = Тип("Число") Тогда
		СтрокаРасхода = Объект[Источник].НайтиПоИдентификатору(СтрокаЗаполнения);
	Иначе
		СтрокаРасхода = СтрокаЗаполнения;
	КонецЕсли;
	
	ДанныеБазы = Новый Структура;
	ДанныеБазы.Вставить("ПравилоРаспределения", Неопределено);
	ДанныеБазы.Вставить("Величина", 0);
	ДанныеБазы.Вставить("ПредставлениеПравила", "");
	ДанныеБазы.Вставить("НаименованиеПравила", "");
	ДанныеБазы.Вставить("ЕдиницаИзмерения", "");
	ДанныеБазы.Вставить("ПредставлениеВеличины", "");
	
	Если Не ЗначениеЗаполнено(СтрокаРасхода.СтатьяРасходов) Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаРасхода, ДанныеБазы);
		Возврат;
		
	КонецЕсли;
	
	ПравилоРаспределения = ПравилоРаспределенияСтатьиРасходов(
		Объект.Организация, Объект.Подразделение, СтрокаРасхода.СтатьяРасходов, Объект.Дата);
	
	Если Не ЗначениеЗаполнено(ПравилоРаспределения) Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаРасхода, ДанныеБазы);
		Возврат;
		
	КонецЕсли;
	
	СтрокиСБазой = Объект.ВеличиныБазРаспределения.НайтиСтроки(
		Новый Структура("ПравилоРаспределения", ПравилоРаспределения));
	
	Если СтрокиСБазой.Количество() = 0 Тогда
		
		Если Источник = "НормыПостоянныхРасходов" Тогда
			ДанныеБазы = Объект.ВеличиныБазРаспределения.Добавить();
		КонецЕсли;
		
		ДанныеБазы.ПравилоРаспределения = ПравилоРаспределения;
		ЗаполнитьЗависимыеРеквизитыБазРаспределенияВСтроке(ДанныеБазы);
		
	Иначе
		ДанныеБазы = СтрокиСБазой[0];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаРасхода, ДанныеБазы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимыеРеквизитыБазРаспределенияВСтроке(СтрокаЗаполнения, ПредставленияБаз = Неопределено)
	
	Если ТипЗнч(СтрокаЗаполнения) = Тип("Число") Тогда
		// Передан идентификатор строки.
		СтрокаСБазой = Объект.ВеличиныБазРаспределения.НайтиПоИдентификатору(СтрокаЗаполнения);
	Иначе
		СтрокаСБазой = СтрокаЗаполнения;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаСБазой.ПравилоРаспределения) = Тип("ПеречислениеСсылка.ТипыБазыРаспределенияРасходов") Тогда
		
		ТипБазыРаспределения = СтрокаСБазой.ПравилоРаспределения;
		
		Если ПредставленияБаз = Неопределено Тогда
			ПредставлениеПравила = ПредставленияПростыхБаз()[СтрокаСБазой.ПравилоРаспределения];
		Иначе
			ПредставлениеПравила = ПредставленияБаз[СтрокаСБазой.ПравилоРаспределения];
		КонецЕсли;
		
		СтрокаСБазой.НаименованиеПравила = ПредставлениеПравила.Представление;
		СтрокаСБазой.ПредставлениеПравила = ПредставлениеПравила.Значение;
		
	Иначе
		
		ТипБазыРаспределения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСБазой.ПравилоРаспределения, "БазаРаспределенияПоПартиям");
		
		СтрокаСБазой.НаименованиеПравила = НаименованиеПравила(СтрокаСБазой.ПравилоРаспределения);
		СтрокаСБазой.ПредставлениеПравила = "РаспределяетсяПоПравилу";
		
	КонецЕсли;
	
	СтрокаСБазой.ЕдиницаИзмерения = ЕдиницаИзмеренияПравила(ТипБазыРаспределения);
	
	ЗаполнитьПредставлениеВеличины(СтрокаСБазой);
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходы(ТаблицаРасчета, ПравилоРаспределения, НоваяБаза)
	
	ОтборПоПравилу = Новый Структура;
	ОтборПоПравилу.Вставить("ПравилоРаспределения", ПравилоРаспределения);
	
	Расходы = Объект[ТаблицаРасчета].НайтиСтроки(ОтборПоПравилу);
	
	Для Каждого Расход Из Расходы Цикл
		
		Расход.Величина = НоваяБаза;
		
		ЗаполнитьПредставлениеВеличины(Расход);
		РассчитатьНормативИКратность(Расход);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеВеличины(СтрокаЗаполнения)
	
	Если ТипЗнч(СтрокаЗаполнения.ЕдиницаИзмерения) = Тип("Строка") 
		Или ТипЗнч(СтрокаЗаполнения.ЕдиницаИзмерения) = Тип("СправочникСсылка.Валюты") Тогда
		СтрокаЗаполнения.ПредставлениеВеличины = Формат(СтрокаЗаполнения.Величина, "ЧДЦ=2; ЧН=") + " " + СтрокаЗаполнения.ЕдиницаИзмерения;
	Иначе
		СтрокаЗаполнения.ПредставлениеВеличины = Формат(СтрокаЗаполнения.Величина, "ЧДЦ=3; ЧН=") + " " + СтрокаЗаполнения.ЕдиницаИзмерения;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНормативИКратность(СтрокаЗаполнения)
	
	Если СтрокаЗаполнения.Величина = 0 Или СтрокаЗаполнения.Сумма = 0 Тогда
		
		СтрокаЗаполнения.Кратность = 1;
		ЗаполнитьПредставлениеКратности(СтрокаЗаполнения);
		
		Возврат;
		
	КонецЕсли;
	
	Норматив = Окр(СтрокаЗаполнения.Сумма / СтрокаЗаполнения.Величина, 6);
	Кратность = 1;
	
	Пока Не (Окр(Норматив, 2) - Норматив) = 0 И Цел(Норматив) < 1 Цикл
		
		Норматив = Норматив * 10;
		Кратность = Кратность * 10;
		
	КонецЦикла;
	
	СтрокаЗаполнения.Норматив = Норматив;
	СтрокаЗаполнения.Кратность = Кратность;
	
	ЗаполнитьПредставлениеКратности(СтрокаЗаполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеКратности(СтрокаЗаполнения)
	
	СтрокаЗаполнения.ПредставлениеКратности = Формат(СтрокаЗаполнения.Кратность) + " " + СтрокаЗаполнения.ЕдиницаИзмерения;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВеличинуБазы(Источник)
	
	ТекущиеДанные = Элементы[Источник].ТекущиеДанные;
	
	СтрокиСБазой = Объект.ВеличиныБазРаспределения.НайтиСтроки(
		Новый Структура("ПравилоРаспределения", ТекущиеДанные.ПравилоРаспределения));
		
	Если СтрокиСБазой.Количество() > 0 Тогда
		
		СтрокиСБазой[0].Величина = ТекущиеДанные.Величина;
		ЗаполнитьПредставлениеВеличины(СтрокиСБазой[0]);
		
	Иначе
		
		// Для переменных расходов база автоматически не добавляется.
		Если ТекущиеДанные.Величина = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// База указана принудительно.
		ДанныеБазы = Объект.ВеличиныБазРаспределения.Добавить();
		ДанныеБазы.ПравилоРаспределения = ТекущиеДанные.ПравилоРаспределения;
		ДанныеБазы.Величина = ТекущиеДанные.Величина;
		ЗаполнитьЗависимыеРеквизитыБазРаспределенияВСтроке(ДанныеБазы.ПолучитьИдентификатор());
		
	КонецЕсли;
	
	ПересчитатьРасходы("НормыПеременныхРасходов", ТекущиеДанные.ПравилоРаспределения, ТекущиеДанные.Величина);
	ПересчитатьРасходы("НормыПостоянныхРасходов", ТекущиеДанные.ПравилоРаспределения, ТекущиеДанные.Величина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравилоРаспределенияСтатьиРасходов(Организация, Подразделение, СтатьяРасходов, Период)
	
	БазыСУчетомБудущихВыпусков = Новый Соответствие;
	БазыСУчетомБудущихВыпусков.Вставить(Перечисления.ТипыБазыРаспределенияРасходов.КоличествоПродукцииСУчетомБудущихВыпусков,
		Перечисления.ТипыБазыРаспределенияРасходов.КоличествоПродукции);
	БазыСУчетомБудущихВыпусков.Вставить(Перечисления.ТипыБазыРаспределенияРасходов.ВесПродукцииСУчетомБудущихВыпусков,
		Перечисления.ТипыБазыРаспределенияРасходов.ВесПродукции);
	БазыСУчетомБудущихВыпусков.Вставить(Перечисления.ТипыБазыРаспределенияРасходов.ОбъемПродукцииСУчетомБудущихВыпусков,
		Перечисления.ТипыБазыРаспределенияРасходов.ОбъемПродукции);
	БазыСУчетомБудущихВыпусков.Вставить(Перечисления.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукцииСУчетомБудущихВыпусков,
		Перечисления.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукции);
		
	ОписаниеРасхода = Новый Структура;
	ОписаниеРасхода.Вставить("Организация", Организация);
	ОписаниеРасхода.Вставить("Подразделение", Подразделение);
	ОписаниеРасхода.Вставить("СтатьяРасходов", СтатьяРасходов);
	
	СписокРасходов = Новый Массив;
	СписокРасходов.Добавить(ОписаниеРасхода);
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Период = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	НастройкиРаспределения = Документы.РаспределениеПрочихЗатрат.ПолучитьНастройкиРаспределенияСтатейРасходов(СписокРасходов, Организация, КонецМесяца(Период));
	Если Не НастройкиРаспределения.Количество() Тогда
		Возврат Перечисления.ТипыБазыРаспределенияРасходов.ПустаяСсылка();
	КонецЕсли;
	ПравилоРаспределения = НастройкиРаспределения[0].ПравилоРаспределенияУпр;
	
	Если Не ЗначениеЗаполнено(ПравилоРаспределения) Тогда
		Возврат ПравилоРаспределения;
	КонецЕсли;
	
	РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПравилоРаспределения,
		"БазаРаспределенияПоПартиям, НастройкиБазыРаспределенияПоПартиямИзменены");
	
	Если Не РеквизитыПравила.НастройкиБазыРаспределенияПоПартиямИзменены Тогда
		Если Не БазыСУчетомБудущихВыпусков.Получить(РеквизитыПравила.БазаРаспределенияПоПартиям) = Неопределено Тогда
			ПравилоРаспределения = БазыСУчетомБудущихВыпусков.Получить(РеквизитыПравила.БазаРаспределенияПоПартиям);
		Иначе
			ПравилоРаспределения = РеквизитыПравила.БазаРаспределенияПоПартиям;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ПравилоРаспределения;
	
КонецФункции

&НаСервереБезКонтекста
Функция НаименованиеПравила(Правило)
	
	Если Не ТипЗнч(Правило) = Тип("СправочникСсылка.ПравилаРаспределенияРасходов") Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "ПредставлениеПравила"));

КонецФункции

&НаСервереБезКонтекста
Функция ЕдиницаИзмеренияПравила(ТипБазыРаспределения)
	
	ЕдиницаИзмерения = "";
	Если ТипБазыРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов
		Или ТипБазыРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов 
		Или ТипБазыРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоПродукции Тогда
		ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияКоличестваШтук.Получить();
	ИначеЕсли ТипБазыРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов Тогда
		ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияВеса.Получить();
	ИначеЕсли ТипБазыРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесПродукции Тогда
		ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияВеса.Получить();
		
	ИначеЕсли ТипБазыРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов Тогда
		ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияОбъема.Получить();
	ИначеЕсли ТипБазыРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемПродукции Тогда
		ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияОбъема.Получить();
	ИначеЕсли ТипБазыРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда
		Или ТипБазыРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукции
		Или ТипБазыРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.СуммаРасходовНаОплатуТруда
		Или ТипБазыРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.СуммаМатериальныхЗатрат
		Или ТипБазыРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.СуммаМатериальныхИТрудозатрат Тогда
		ЕдиницаИзмерения = Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставленияПростыхБаз()
	
	ПредставленияБаз = Новый Соответствие;
	ПростыеПравила = ПростыеПравилаРаспределения();
	Для Каждого Правило Из ПростыеПравила Цикл
		
		ТипБазы = "Перечисление.ТипыБазыРаспределенияРасходов." + Правило.Значение;
		ПредставленияБаз.Вставить(ПредопределенноеЗначение(ТипБазы), Правило);
		
	КонецЦикла;	
	
	Возврат ПредставленияБаз;
	
КонецФункции

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог; // ДиалогРедактированияСтандартногоПериода
	
	Если Период <> Неопределено Тогда
		
		Объект.ДатаНачалаДействия    = Диалог.Период.ДатаНачала;
		Объект.ДатаОкончанияДействия = Диалог.Период.ДатаОкончания;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНовыйЭлементВСписокВыбора(ПравилоРаспределения, НаименованиеПравила)
	
	СписокВыбора = Элементы.ВеличиныБазРаспределенияПредставлениеПравила.СписокВыбора;
	ДобавляемыйЭлемент = СписокВыбора.НайтиПоЗначению("РаспределяетсяПоПравилу");
	
	Если Не ДобавляемыйЭлемент = Неопределено Тогда
		СписокВыбора.Удалить(ДобавляемыйЭлемент);
	КонецЕсли;
	
	Если ТипЗнч(ПравилоРаспределения) = Тип("СправочникСсылка.ПравилаРаспределенияРасходов")
		И ЗначениеЗаполнено(ПравилоРаспределения) Тогда
		СписокВыбора.Вставить(12, "РаспределяетсяПоПравилу", НаименованиеПравила);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыУдаленияНорм(ИдентификаторыСтрок)

	ПравилаРаспределенияКУдалению = Новый Массив;
	Для Каждого ИдСтроки Из ИдентификаторыСтрок Цикл
		ПравилаРаспределенияКУдалению.Добавить(Объект.ВеличиныБазРаспределения.НайтиПоИдентификатору(ИдСтроки).ПравилоРаспределения);
	КонецЦикла;
	
	ПараметрыУдаленияСтатей = Новый Структура;
	ПараметрыУдаленияСтатей.Вставить("Постоянные", Новый Массив);
	ПараметрыУдаленияСтатей.Вставить("ЕстьСтрокиКУдалению", Ложь);
	
	Для Каждого ПостоянныйРасход Из Объект.НормыПостоянныхРасходов Цикл
		
		Если ПравилаРаспределенияКУдалению.Найти(ПостоянныйРасход.ПравилоРаспределения) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыУдаленияСтатей.Постоянные.Добавить(ПостоянныйРасход.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	ПараметрыУдаленияСтатей.ЕстьСтрокиКУдалению = ПараметрыУдаленияСтатей.Постоянные.Количество() > 0;
	
	Возврат ПараметрыУдаленияСтатей;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокиСПравилом(ПараметрыУдаления)
	
	Для Каждого ИдСтроки Из ПараметрыУдаления.Постоянные Цикл
		Объект.НормыПостоянныхРасходов.Удалить(Объект.НормыПостоянныхРасходов.НайтиПоИдентификатору(ИдСтроки));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличиныБазРаспределенияПриОкончанииРедактированияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		
		ДополнительныеПараметры.ТекущиеДанные.ПравилоРаспределения = ДополнительныеПараметры.ПравилоКУдалению;
		ЗаполнитьЗависимыеРеквизитыБазРаспределенияВСтроке(ДополнительныеПараметры.ТекущиеДанные.ПолучитьИдентификатор());
		
		Возврат;
		
	КонецЕсли;
	
	УдалитьСтрокиСПравилом(ДополнительныеПараметры.ПараметрыУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличиныБазРаспределенияПередУдалениемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСтрокиСПравилом(ДополнительныеПараметры.ПараметрыУдаления);
	Для Каждого ИдСтроки Из ДополнительныеПараметры.ИдСтрокВеличин Цикл
		Объект.ВеличиныБазРаспределения.Удалить(Объект.ВеличиныБазРаспределения.НайтиПоИдентификатору(ИдСтроки));
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПользователю(ОбъектЗаполнения, УточнитьКоличествоМесяцев = Ложь)
	
	ТекстОповещения = "";
	Если ОбъектЗаполнения = "ПостоянныеРасходы" И Объект.НормыПостоянныхРасходов.Количество() > 0 Тогда
		ТекстОповещения = НСтр("ru = 'Табличная часть ""Постоянные расходы"" будет очищена. Продолжить?';
								|en = 'The Fixed costs table will be cleared. Do you want to continue?'");
	ИначеЕсли ОбъектЗаполнения = "ПеременныеРасходы" И Объект.НормыПеременныхРасходов.Количество() > 0 Тогда
		ТекстОповещения = НСтр("ru = 'Табличная часть ""Переменные расходы"" будет очищена. Продолжить?';
								|en = 'The Variable costs table will be cleared. Do you want to continue?'");
	ИначеЕсли Объект.НормыПостоянныхРасходов.Количество() > 0 Или Объект.НормыПеременныхРасходов.Количество() > 0 Тогда
			ТекстОповещения = НСтр("ru = 'Табличные части ""Переменные расходы"" и ""Постоянные расходы"" будут очищены. Продолжить?';
									|en = 'Tables ""Variable costs"" and ""Fixed costs"" will be cleared. Continue?'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОповещения) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбъектЗаполнения", ОбъектЗаполнения);
		ДополнительныеПараметры.Вставить("УточнитьКоличествоМесяцев", УточнитьКоличествоМесяцев);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗадатьВопросПользователюЗавершение", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстОповещения, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
		Возврат;
		
	КонецЕсли;
	
	ОпределитьПараметрыЗаполнения(ОбъектЗаполнения, УточнитьКоличествоМесяцев);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбъектЗаполнения = "Все" Тогда
		
		Объект.НормыПеременныхРасходов.Очистить();
		Объект.НормыПостоянныхРасходов.Очистить();
		
	ИначеЕсли ДополнительныеПараметры.ОбъектЗаполнения = "ПеременныеРасходы" Тогда
		Объект.НормыПеременныхРасходов.Очистить();
	Иначе
		Объект.НормыПостоянныхРасходов.Очистить();
	КонецЕсли;
	
	ОпределитьПараметрыЗаполнения(ДополнительныеПараметры.ОбъектЗаполнения, ДополнительныеПараметры.УточнитьКоличествоМесяцев);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыЗаполнения(ОбъектЗаполнения, УточнитьКоличествоМесяцев)
	
	Если УточнитьКоличествоМесяцев Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбъектЗаполнения", ОбъектЗаполнения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьПараметрыЗаполненияЗвершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Документ.УстановкаНормативовПроизводственныхРасходов.Форма.ФормаНастройкиПериода",,,,,, 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьНаСервере(ОбъектЗаполнения, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыЗаполненияЗвершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		
		ТекстОшибки = НСтр("ru = 'Не указано количество месяцев за которое необходимо получить расходы. Заполнение невозможно.';
							|en = 'Number of months to receive expenses for is not specified. Cannot fill in.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьНаСервере(ДополнительныеПараметры.ОбъектЗаполнения, РезультатЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере(ОбъектыЗаполнения, КоличествоМесяцев)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрочиеРасходыОбороты.СтатьяРасходов КАК СтатьяРасходов,
		|	ПрочиеРасходыОбороты.СтоимостьПриход КАК СуммаПриход,
		|	ПрочиеРасходыОбороты.СтатьяРасходов.СтатьяКалькуляции КАК СтатьяКалькуляции,
		|	ПрочиеРасходыОбороты.Период КАК Период
		|ПОМЕСТИТЬ ПрочиеРасходыПоПериодам
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства.Обороты(
		|			&НачалоПериода,
		|			&ОкончаниеПериода,
		|			Месяц,
		|			Организация = &Организация
		|				И Подразделение = &Подразделение
		|				И (СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
		|					ИЛИ СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты))
		|				И &УсловиеОтбораСтатей) КАК ПрочиеРасходыОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	СтатьяРасходов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ПрочиеРасходыПоПериодам.Период) КАК Период,
		|	ПрочиеРасходыПоПериодам.СтатьяРасходов КАК СтатьяРасходов
		|ПОМЕСТИТЬ МаксимальныеПериодыВозникновенияРасходов
		|ИЗ
		|	ПрочиеРасходыПоПериодам КАК ПрочиеРасходыПоПериодам
		|
		|СГРУППИРОВАТЬ ПО
		|	ПрочиеРасходыПоПериодам.СтатьяРасходов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрочиеРасходыПоПериодам.СтатьяРасходов КАК СтатьяРасходов,
		|	ПрочиеРасходыПоПериодам.СуммаПриход КАК Сумма,
		|	ПрочиеРасходыПоПериодам.СтатьяКалькуляции КАК СтатьяКалькуляции,
		|	ПрочиеРасходыПоПериодам.СтатьяРасходов.ХарактерПроизводственныхЗатрат КАК ХарактерЗатраты
		|ИЗ
		|	МаксимальныеПериодыВозникновенияРасходов КАК МаксимальныеПериодыВозникновенияРасходов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрочиеРасходыПоПериодам КАК ПрочиеРасходыПоПериодам
		|		ПО МаксимальныеПериодыВозникновенияРасходов.Период = ПрочиеРасходыПоПериодам.Период
		|			И МаксимальныеПериодыВозникновенияРасходов.СтатьяРасходов = ПрочиеРасходыПоПериодам.СтатьяРасходов
		|ИТОГИ ПО
		|	ХарактерЗатраты";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(Объект.ДатаНачалаДействия, -КоличествоМесяцев));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Объект.ДатаНачалаДействия));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Если ОбъектыЗаполнения = "ПостоянныеРасходы" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&УсловиеОтбораСтатей", 
			"СтатьяРасходов.ХарактерПроизводственныхЗатрат = ЗНАЧЕНИЕ(Перечисление.ХарактерПроизводственныхЗатрат.Постоянные)");
	ИначеЕсли ОбъектыЗаполнения = "ПеременныеРасходы" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&УсловиеОтбораСтатей", 
			"СтатьяРасходов.ХарактерПроизводственныхЗатрат = ЗНАЧЕНИЕ(Перечисление.ХарактерПроизводственныхЗатрат.Переменные)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&УсловиеОтбораСтатей", 
			"ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаПоХарактеруЗатраты = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоХарактеруЗатраты.Следующий() Цикл
		
		Если ВыборкаПоХарактеруЗатраты.ХарактерЗатраты = Перечисления.ХарактерПроизводственныхЗатрат.Постоянные Тогда
			ИмяТаблицы = "НормыПостоянныхРасходов";
		Иначе
			ИмяТаблицы = "НормыПеременныхРасходов";			
		КонецЕсли;
		
		ВыборкаДетальная = ВыборкаПоХарактеруЗатраты.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			НовыйРасход = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(НовыйРасход, ВыборкаДетальная);
			ЗаполнитьПоДаннымБазыРаспределения(НовыйРасход, ИмяТаблицы);
			
			Если Не ЗначениеЗаполнено(НовыйРасход.ПравилоРаспределения) Тогда
				
				Объект[ИмяТаблицы].Удалить(НовыйРасход);
				Продолжить;
				
			КонецЕсли;
			
			РассчитатьНормативИКратность(НовыйРасход);
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
