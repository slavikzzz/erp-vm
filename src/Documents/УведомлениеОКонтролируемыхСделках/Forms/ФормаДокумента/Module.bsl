#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Объект.ОтчетныйГод = НачалоГода(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеФормой(ЭтаФорма);
	Оповестить ("Запись_УведомлениеОКонтролируемыхСделках", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения") 
		И ИсточникВыбора.ИмяФормы = "Документ.УведомлениеОКонтролируемыхСделках.Форма.НастройкиЗаполнения" Тогда
		Для Каждого Реквизит Из ВыбранноеЗначение Цикл
			Если Объект[Реквизит.Ключ] <> Реквизит.Значение Тогда
				Модифицированность = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайлами", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтчетныйГодПриИзменении(Элемент)
	
	Объект.ОтчетныйГод = Дата(ОтчетныйГод, 1, 1);
	ПриИзмененииОтчетногоГодаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипУведомленияПриИзменении(Элемент)
	
	Если ТипУведомления = 0 Тогда
		Объект.НомерКорректировки = 0;
	Иначе
		Объект.НомерКорректировки = ?(Объект.НомерКорректировки = 0, 1, Объект.НомерКорректировки);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСделокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление", "КонтролируемыеСделки", Объект.Ссылка);
	ОткрытьФорму("Отчет.СписокКонтролируемыхСделок.Форма.ФормаОтчетаКонтролируемыеСделки", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы=Новый Структура; 
	ПараметрыФормы.Вставить("Отбор", Новый Структура("УведомлениеОКонтролируемойСделке", Объект.Ссылка));
	ПараметрыФормы.Вставить("УведомлениеОКонтролируемыхСделках", Объект.Ссылка);
	ОткрытьФорму("Документ.КонтролируемаяСделка.ФормаСписка", ПараметрыФормы, , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокПрочихКонтролируемыхСделокНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы=Новый Структура; 
	ПараметрыФормы.Вставить("Отбор", Новый Структура("УведомлениеОКонтролируемойСделке", Объект.Ссылка));
	ПараметрыФормы.Вставить("УведомлениеОКонтролируемыхСделках", Объект.Ссылка);
	ОткрытьФорму("Документ.РегистрацияПрочихКонтролируемыхСделок.ФормаСписка", ПараметрыФормы, , Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура КодФормыРеорганизацииПриИзменении(Элемент)
	
	Если Объект.КодФормыРеорганизации = "" Тогда
		Объект.ИННРеорганизованнойОрганизации = "";
		Объект.КППРеорганизованнойОрганизации = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиФормированияСпискаСделокНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура("Организация, ОтчетныйГод", Объект.Организация, ОтчетныйГод);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаВзаимозависимыеЛица", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


&НаКлиенте
Процедура КомандаПечать(Команда)

	ПараметрыПечати = Новый Структура("Уведомление", Объект);
	ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.ФормаПечатиУведомления", ПараметрыПечати, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ЗаписатьИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьУведомлениеВXML(Команда)
	
	Если Объект.Ссылка <> ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
		
		Если НЕ НомераКонтролируемыхСделокКорректны(Объект.Ссылка) Тогда
			ТекстВопроса = Нстр("ru = 'Нумерация листов 1А не корректна.#РазделительСтрок#Перенумеровать листы 1А?#РазделительСтрок#(операция может занять продолжительное время)';
								|en = '1A sheet numbering is incorrect.#РазделительСтрок#Renumber 1A sheets?#РазделительСтрок#(The operation may take a long time)'");
			Оповещение = Новый ОписаниеОповещения("ВопросПеренумероватьЛисты1АЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, СтрЗаменить(ТекстВопроса, "#РазделительСтрок#", Символы.ПС), РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыгрузитьУведомление();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьСписокСделок(Команда)
	
	Если Объект.Ссылка <> ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
		ТекстВопроса = НСтр("ru = 'Заполнение списка сделок может занять длительное время%ОчисткаСпискаСделок%
			|Продолжить?';
			|en = 'Transaction list population can take a long time%ОчисткаСпискаСделок%
			|Continue?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОчисткаСпискаСделок%",
			?(СделкиСуществуют, НСтр("ru = ',
			|существующие данные о сделках при заполнении будут очищены.';
			|en = ',
			|existing transaction data will be cleared during population.'"), НСтр("ru = '.';
																					|en = '.'")));
			
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнениеСпискаСделокЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьУведомление(Команда)
	
	Если Объект.Ссылка <> ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
		ТекстВопроса = НСтр("ru = 'Заполнение уведомления может занять значительное время%ОчисткаУведомления%
			|Продолжить?';
			|en = 'Notification population can take a long time%ОчисткаУведомления%
			|Continue?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОчисткаУведомления%",
			?(УведомлениеЗаполнено, НСтр("ru = ',
			|существующие листы 1А при заполнении будут помечены на удаление.';
			|en = ',
			|existing sheets 1A will be marked for deletion when filling in.'"), НСтр("ru = '.';
																						|en = '.'")));
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьУведомлениеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиЗаполненияУведомленияНажатие(Элемент)
	
	ПараметрыОткрытияФормы = Новый Структура("ГруппироватьСделкиСОдинаковойЦеной, КодМестаПредставления");
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормы, Объект);
	ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.НастройкиЗаполнения", ПараметрыОткрытияФормы, ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьЗаполнение(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	РезультатВыполнения = ПроверитьЗаполнениеНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Объект.Ссылка);
	ПараметрыФормы.Вставить("АдресХранилища", РезультатВыполнения.АдресХранилища);
	
	ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.ФормаОшибок", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	
КонецПроцедуры

#Область ОтправкаВФНС

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ОтчетныйГод = Год(Объект.ОтчетныйГод);
	ТипУведомления = ?(Объект.НомерКорректировки = 0, 0, 1);	
	
	СписокКодов = КонтролируемыеСделкиПовтИсп.ПолучитьКодыФормыРеорганизации();
	Элементы.КодФормыРеорганизации.СписокВыбора.Очистить();
	Для Каждого Код Из СписокКодов Цикл
		НовыйКод = Элементы.КодФормыРеорганизации.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйКод, Код);
	КонецЦикла;
	
	ЗаполнитьСписокВерсийУведомления();
	
	УстановитьСведенияОСделке();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.НомерКорректировки.Доступность = Форма.ТипУведомления <> 0;	
	Форма.Элементы.ПредставлениеСделок.Гиперссылка = Форма.СделкиСуществуют;
	Форма.Элементы.ПредставлениеУведомления.Гиперссылка = Форма.УведомлениеЗаполнено;
	ДокументЗаписан = Форма.Объект.Ссылка <> ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка");
	Форма.Элементы.КомандаСформироватьСписокСделок.Доступность = ДокументЗаписан;
	Форма.Элементы.КомандаЗаполнитьУведомление.Доступность = ДокументЗаписан;
	Форма.Элементы.КомандаПроверитьЗаполнение.Доступность = ДокументЗаписан;
	
	ОрганизацияРеорганизована = Форма.Объект.КодФормыРеорганизации <> "";
	Форма.Элементы.ИННРеорганизованнойОрганизации.Доступность = ОрганизацияРеорганизована;
	Форма.Элементы.КППРеорганизованнойОрганизации.Доступность = ОрганизацияРеорганизована;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСведенияОСделке()
	
	СделкиСуществуют = Документы.УведомлениеОКонтролируемыхСделках.ДанныеАвтоматическогоЗаполненияПодготовлены(Объект.Ссылка);
	ПредставлениеСделок = ПредставлениеСделок(СделкиСуществуют, Объект.ДатаФормированияСпискаСделок);
	УведомлениеЗаполнено = Документы.УведомлениеОКонтролируемыхСделках.УведомлениеЗаполнено(Объект.Ссылка);
	ДатаФормированияСпискаСделок = Объект.ДатаФормированияСпискаСделок;
	ДатаЗаполненияУведомления = Объект.ДатаЗаполненияУведомления;
	ПредставлениеУведомления = ПредставлениеУведомления(УведомлениеЗаполнено, ДатаЗаполненияУведомления);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомераКонтролируемыхСделокКорректны(Уведомление)
	
	Возврат КонтролируемыеСделки.НомераКонтролируемыхСделокУведомленияКорректны(Уведомление);
	
КонецФункции

&НаСервере
Процедура ПодготовитьДанныеАвтоматическогоЗаполненияНаСервере()
	
	Документы.УведомлениеОКонтролируемыхСделках.ПодготовитьДанныеАвтоматическогоЗаполнения(Объект.Ссылка);
	Прочитать(); // предыдущий метод изменил дату формирования списка сделок в Уведомлении
	УстановитьСведенияОСделке();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУведомлениеНаСервере()
	
	Документы.УведомлениеОКонтролируемыхСделках.СформироватьКонтролируемыеСделкиУведомления(Объект.Ссылка);
	УстановитьСведенияОСделке();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСделок(СделкиСуществуют, ДатаФормированияСпискаСделок)
	
	СделкиЗаполнены = ?(СделкиСуществуют, НСтр("ru = 'Контролируемые сделки (%ДатаФормированияСпискаСделок%)';
												|en = 'Controlled transactions (%ДатаФормированияСпискаСделок%)'"),НСтр("ru = 'Список контролируемых сделок пуст';
																													|en = 'Controlled transaction list is empty'"));
	СделкиЗаполнены = СтрЗаменить(СделкиЗаполнены, "%ДатаФормированияСпискаСделок%", ДатаФормированияСпискаСделок);
	
	Возврат СделкиЗаполнены;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеУведомления(УведомлениеЗаполнено, ДатаЗаполненияУведомления);
	
	Представление = ?(УведомлениеЗаполнено, НСтр("ru = 'Уведомление о контролируемых сделках (%ДатаЗаполненияУведомления%)';
												|en = 'Notification of controlled transactions (%ДатаЗаполненияУведомления%)'"),НСтр("ru = 'Уведомление о контролируемых сделках не заполнено';
																																	|en = 'Notification of controlled transactions is not filled in'"));
	Представление = СтрЗаменить(Представление, "%ДатаЗаполненияУведомления%", ДатаЗаполненияУведомления);
	
	Возврат Представление;

КонецФункции

&НаКлиенте
Процедура ВопросЗаполнениеСпискаСделокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Модифицированность Тогда
			Записать();
		КонецЕсли;
		ПодготовитьДанныеАвтоматическогоЗаполненияНаСервере();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьУведомлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Модифицированность Тогда
			Записать();
		КонецЕсли;
		ЗаполнитьУведомлениеНаСервере();
		ЭтаФорма.Прочитать();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеНаСервере(Уведомление, УникальныйИдентификатор)
	
	РезультатВыполнения = Документы.УведомлениеОКонтролируемыхСделках.ПроверитьЗаполнениеУведомления(Уведомление, УникальныйИдентификатор);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ВопросПеренумероватьЛисты1АЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренумероватьЛисты1А(Объект.Ссылка);
	КонецЕсли;
	
	ВыгрузитьУведомление();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренумероватьЛисты1А(Уведомление)
	
	КонтролируемыеСделки.ПеренумерацияКонтролируемыхСделокУведомления(Уведомление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыгрузкиУведомленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Для Каждого Сообщение Из Результат Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтчетногоГодаНаСервере()
	
	Объект.ВерсияУведомления = Документы.УведомлениеОКонтролируемыхСделках.ВерсияУведомленияПоОтчетномуГоду(Объект.ОтчетныйГод);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВерсийУведомления()
	
	Элементы.ВерсияУведомления.СписокВыбора.Очистить();
	Элементы.ВерсияУведомления.СписокВыбора.Добавить(
		КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2012(),
		НСтр("ru = 'ММВ-7-13/524@ от 27 июля 2012';
			|en = 'MMV-7-13/524@ dated 07/27/2012'"));
	
	Элементы.ВерсияУведомления.СписокВыбора.Добавить(
		КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2017(),
		НСтр("ru = 'ММВ-7-13/524@ от 27 июля 2012 (с учетом письма ЕД-4-13/5367@ от 22.03.2018)';
			|en = 'MMV-7-13/524@ dated 07/27/2012 (including letter ED-4-13/5376@ dated 03/22/2018) '"));
		
	Элементы.ВерсияУведомления.СписокВыбора.Добавить(
		КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018(),
		НСтр("ru = 'ММВ-7-13/249@ от 7 мая 2018';
			|en = 'MMV-7-13/249@ of May 7, 2018'"));
	
	Элементы.ВерсияУведомления.СписокВыбора.Добавить(
		КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2019(),
		НСтр("ru = 'ММВ-7-13/380@ от 26 июля 2019';
			|en = 'MMV-7-13/380@ of July 26, 2019'"));
		
	Элементы.ВерсияУведомления.СписокВыбора.Добавить(
		КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2021(),
		НСтр("ru = 'ММВ-7-13/380@ от 26.07.2019 с дополнениями 6-ФЗ от 17.02.2021 года';
			|en = 'MMV-7-13/380@ dated 07/26/2019 with 6-FZ amendments dated 02/17/2021'"));
		
	Элементы.ВерсияУведомления.СписокВыбора.Добавить(
		КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2024(),
		НСтр("ru = 'ЕД-7-13/1088@ от 02.12.2024';
			|en = 'ЕД-7-13/1088@ от 02.12.2024'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодключитьРасширениеРаботыСФайлами()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПодключитьРасширениеРаботыСФайламиЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодключитьРасширениеРаботыСФайламиЗавершение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
	РасширениеРаботыСФайламиПодключено = ПодключеноРасширениеРаботыСФайлами;
	
КонецПроцедуры

#Область ВыгрузкаУведомления

&НаКлиенте
Процедура ВыгрузитьУведомление()
	
	Если Объект.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ОткрытьФормуВыгрузкиУведомления_2012_2017();
	Иначе
		ВыгружаемыеДанные= ВыгрузитьФайлНаСервере(Объект.Ссылка);
		Если ВыгружаемыеДанные <> Неопределено Тогда
			ВыгрузитьУведомлениеВXML(ВыгружаемыеДанные, "");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьФайлНаСервере(Уведомление)
	
	Если ЗначениеЗаполнено(Уведомление) Тогда
		ОбъектУведомления = Уведомление.ПолучитьОбъект();
		Возврат ОбъектУведомления.ВыгрузитьДокументСРазделениемНаФайлы(УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьУведомлениеВXML(ВыгружаемыеДанные, ПутьВыгрузки="")
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		
		ПолучаемыеФайлы = Новый Массив;
		Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные Цикл
			ПолучаемыеФайлы.Добавить(
				Новый ОписаниеПередаваемогоФайла(ФайлВыгрузки.ИмяФайлаВыгрузки, ФайлВыгрузки.АдресФайлаВыгрузки));
		КонецЦикла;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьУведомлениеВXMLЗавершение", ЭтотОбъект);
		НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ПутьВыгрузки, Истина);
		
	Иначе
		
		Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные Цикл
			
			ПолучитьФайл(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьУведомлениеВXMLЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПолученныйФайл Из ПолученныеФайлы Цикл
		Если ПолученныйФайл <> Неопределено Тогда
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Нстр("ru = 'Выгружен файл %1';
					|en = 'File exported %1'"), ПолученныйФайл.Имя);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОповещения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыгрузкиУведомления_2012_2017()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыгрузкиУведомленияЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Уведомление", Объект.Ссылка);
	ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.ФормаВыгрузкиВXML", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
