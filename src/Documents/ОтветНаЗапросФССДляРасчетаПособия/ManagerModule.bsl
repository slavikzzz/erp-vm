///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//  Параметры                  - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Для использования в процедуре ДобавитьКомандыСозданияНаОсновании других модулей менеджеров объектов.
//  Добавляет в список команд создания на основании этот объект.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Возврат СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия);
	
КонецФункции

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область СЭДО

Функция ТекстXML(Документ) Экспорт
	ВидПособия = СЭДОФСС.СведенияОВидеПособия(Документ.ВидПособия);
	Особенности = ОсобенностиВыгрузки(Документ);
	
	МенеджерXML = Обработки.ПостроительXML.Создать();
	МенеджерXML.ФорматДат = "ДФ=yyyy-MM-dd";
	
	// В корне 1 элемент: Подтверждение сведений проактивно собранных Фондом.
	КореньXML = МенеджерXML.ДобавитьУзел(МенеджерXML.ДеревоXML, "proactive:approveSocialAssist");
	Если Документ.ОтказВНазначенииПособия Тогда
		// Действие не требуется.
	ИначеЕсли ВидПособия.ЭтоОбычныйБольничный Тогда
		МенеджерXML.ДобавитьПространствоИмен(КореньXML, "", "urn:ru:fss:integration:types:proactive:benefit1:v01");
	ИначеЕсли ВидПособия.ЭтоБольничныйПоБиР Тогда
		МенеджерXML.ДобавитьПространствоИмен(КореньXML, "", "urn:ru:fss:integration:types:proactive:benefit2:v01");
	ИначеЕсли ВидПособия.ЭтоПособиеПриРождении Тогда
		МенеджерXML.ДобавитьПространствоИмен(КореньXML, "", "urn:ru:fss:integration:types:proactive:benefit4:v02");
	ИначеЕсли ВидПособия.ЭтоОтпускПоУходу Тогда
		МенеджерXML.ДобавитьПространствоИмен(КореньXML, "", "urn:ru:fss:integration:types:proactive:benefit5:v01");
	ИначеЕсли ВидПособия.ЭтоНСПЗ Тогда
		МенеджерXML.ДобавитьПространствоИмен(КореньXML, "", "urn:ru:fss:integration:types:proactive:benefit6:v01");
	КонецЕсли;
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "proactive", "urn:ru:fss:integration:types:proactive:v01");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "common", "http://www.fss.ru/integration/types/common/v01");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "person", "http://www.fss.ru/integration/types/person/v02");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	// Идентификатор входящего запроса.
	МенеджерXML.ДобавитьАтрибут(КореньXML, "responseOn", Документ.ВходящийЗапросИдентификатор);
	
	Если Особенности.Версия_2_34 Тогда
		// ФИО отправителя.
		МенеджерXML.ДобавитьАтрибут(КореньXML, "author", Документ.СоставительФИО, Истина);
		// Адрес электронной почты отправителя.
		МенеджерXML.ДобавитьАтрибут(КореньXML, "email", Документ.СоставительЭлектроннаяПочта, Истина);
		// Номер телефона отправителя.
		МенеджерXML.ДобавитьАтрибут(КореньXML, "phone", Документ.СоставительТелефон, Истина);
	КонецЕсли;
	
	// Номер процесса социальной поддержки.
	МенеджерXML.ДобавитьУзел(КореньXML, "proactive:socialAssistNum", Документ.НомерПроцесса);
	
	// Причина изменения (перерасчета). Заполняется в случае повторного направления ответа.
	Если Документ.Исправление Или (Документ.Перерасчет И ЗначениеЗаполнено(Документ.ИсправлениеКодПричины)) Тогда
		МенеджерXML.ДобавитьУзел(КореньXML, "proactive:changeReason", Документ.ИсправлениеКодПричины);
	КонецЕсли;
	
	// Данные для расчета пособия.
	Примечание = СокрЛП(Документ.Примечание);
	Если Документ.ОтказВНазначенииПособия Тогда
		УзелДанных = МенеджерXML.ДобавитьУзел(КореньXML, "proactive:refuse");
		МенеджерXML.ДобавитьУзел(УзелДанных, "proactive:reason", Документ.ОтказВНазначенииПособияПричина);
	ИначеЕсли ВидПособия.ЭтоОбычныйБольничный Тогда
		УзелДанных = МенеджерXML.ДобавитьУзел(КореньXML, "benefit1Approve");
		ВыгрузитьСведенияОбЭЛН(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьСведенияОСтрахователе(Документ, МенеджерXML, УзелДанных, Особенности);
		ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьСпособВыплаты(Документ, МенеджерXML, УзелДанных, Особенности);
		ВыгрузитьДанныеДляРасчета(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьПараметрыНазначения(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьДанныеНСПЗ(Документ, МенеджерXML, УзелДанных, ВидПособия);
		ВыгрузитьИзвещение(Документ, МенеджерXML, УзелДанных);
	ИначеЕсли ВидПособия.ЭтоБольничныйПоБиР Тогда
		УзелДанных = МенеджерXML.ДобавитьУзел(КореньXML, "benefit2Approve");
		ВыгрузитьСведенияОбЭЛН(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьСведенияОСтрахователе(Документ, МенеджерXML, УзелДанных, Особенности);
		ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьСпособВыплаты(Документ, МенеджерXML, УзелДанных, Особенности);
		ВыгрузитьДанныеДляРасчета(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьПараметрыНазначения(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьСведенияОбОтпускеПоБиР(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьИзвещение(Документ, МенеджерXML, УзелДанных);
	ИначеЕсли ВидПособия.ЭтоПособиеПриРождении Тогда
		УзелДанных = МенеджерXML.ДобавитьУзел(КореньXML, "benefit4Approve");
		ВыгрузитьСведенияОСтрахователе(Документ, МенеджерXML, УзелДанных, Особенности);
		ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьСпособВыплаты(Документ, МенеджерXML, УзелДанных, Особенности);
		ВыгрузитьДанныеДляРасчета(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьПараметрыНазначения(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьИнформациюОбУсыновленииОпеке(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьИнформациюОПередачеНаВоспитание(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьИнформациюОРебенкеПособияПриРождении(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьИнформациюОДругомРодителе(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьИзвещение(Документ, МенеджерXML, УзелДанных);
	ИначеЕсли ВидПособия.ЭтоОтпускПоУходу Тогда
		УзелДанных = МенеджерXML.ДобавитьУзел(КореньXML, "benefit5Approve");
		ВыгрузитьСведенияОСтрахователе(Документ, МенеджерXML, УзелДанных, Особенности);
		ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьСпособВыплаты(Документ, МенеджерXML, УзелДанных, Особенности);
		ВыгрузитьДанныеДляРасчета(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьПараметрыНазначения(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьИнформациюОбУсыновленииОпеке(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьИнформациюОРебенкеОтпускаПоУходу(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьОснованияДляОтпускаПоУходу(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьСправкуОНеполученииПособия(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьИзвещение(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьПрочиеСведенияОтпускаПоУходу(Документ, МенеджерXML, УзелДанных, Особенности);
		Примечание = СокрП(Примечание + Символы.ПС + Документ.СправкаОНеполученииПособияПредставление);
	ИначеЕсли ВидПособия.ЭтоНСПЗ Тогда
		УзелДанных = МенеджерXML.ДобавитьУзел(КореньXML, "benefit6Approve");
		ВыгрузитьСведенияОбЭЛН(Документ, МенеджерXML, УзелДанных);
		ВыгрузитьСведенияОСтрахователе(Документ, МенеджерXML, УзелДанных, Особенности);
		ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьСпособВыплаты(Документ, МенеджерXML, УзелДанных, Особенности);
		ВыгрузитьДанныеДляРасчета(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьПараметрыНазначения(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности);
		ВыгрузитьДанныеНСПЗ(Документ, МенеджерXML, УзелДанных, ВидПособия);
		ВыгрузитьИзвещение(Документ, МенеджерXML, УзелДанных);
	КонецЕсли;
	
	// Примечание.
	МенеджерXML.ДобавитьУзел(КореньXML, "proactive:note", Примечание, Истина, Ложь);
	
	// Заполняется в случае, если был инициирован перерасчет.
	Если Документ.Перерасчет Тогда
		УзелДанных = МенеджерXML.ДобавитьУзел(КореньXML, "proactive:recalculation");
		МенеджерXML.ДобавитьУзел(УзелДанных, "proactive:batchNum", Документ.ПерерасчетИдентификаторСтрокиРеестра);
	КонецЕсли;
	
	МенеджерXML.НачатьЗаписьВСтрокуXML(Ложь);
	СтрокаXML = МенеджерXML.СтрокаXML();
	Возврат СтрокаXML;
КонецФункции

Функция ТипСообщения() Экспорт
	Возврат 101;
КонецФункции

Процедура ПриЗаполненииПараметровОтправки(МассивСсылок, ТаблицаОтправки) Экспорт
	
	ИменаРеквизитовСтроки = "Ссылка, Номер, Дата, ФизическоеЛицо, Организация";
	ИменаРеквизитов = "Ссылка, Номер, Дата, ДатаОтправки, ФизическоеЛицо, Организация, ХранилищеXML, ПометкаУдаления, Проведен";
	Соответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Документ = КлючИЗначение.Значение;
		// Добавление строки отправки и заполнение представления.
		СтрокаОтправки = ТаблицаОтправки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтправки, Документ, ИменаРеквизитовСтроки);
		СтрокаОтправки.ТипСообщения = ТипСообщения();
		СтрокаОтправки.ТекстXML     = Документ.ХранилищеXML.Получить();
		СтрокаОтправки.Отправить    = Ложь;
		СтрокаОтправки.ШаблонОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось отправить ответ на запрос ФСС для расчета пособия сотруднику %1:%2';
				|en = 'Cannot send a response to the SSF request to calculate employee''s benefit %1:%2'"),
			СтрокаОтправки.ФизическоеЛицо,
			"%1");
		// Проверки и обновление вторичных данных документа перед отправкой.
		Если Документ.ПометкаУдаления Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиУдален();
			СтрокаОтправки.Результат = НСтр("ru = 'Документ помечен на удаление';
											|en = 'The document is marked for deletion'");
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.ДатаОтправки) Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОтправлен();
			Если НачалоДня(Документ.ДатаОтправки) <= ТекущаяДатаСеанса() Тогда
				Текст = НСтр("ru = 'Документ уже отправлен %1';
							|en = 'The document is already sent %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДЛФ=D"));
			Иначе
				Текст = НСтр("ru = 'Документ уже отправлен в %1';
							|en = 'The document is already sent to %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДФ=HH:mm"));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПредупреждение();
			ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, "");
			Если Не ДокументОбъект.ОтключитьПроверкиПроведения Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Проведение документа если требуется.
		ЕстьИзменения = ДокументОбъект.ОбновитьВторичныеДанные();
		СтрокаОтправки.Отправить = Истина;
		Если ЕстьИзменения Или Не ДокументОбъект.Проведен Тогда
			Попытка
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПроведен();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ЗаполнитьЗначенияСвойств(СтрокаОтправки, ДокументОбъект, ИменаРеквизитовСтроки);
				СтрокаОтправки.ТекстXML = ДокументОбъект.ХранилищеXML.Получить();
			Исключение
				СтрокаОтправки.Отправить = Ложь;
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОстановлен();
				СтрокаОтправки.ЗначениеРасшифровки = Документ.Ссылка;
				ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриПодготовкеВыбранныхДокументовКОтправке(МассивСсылок, ТаблицаОтправки) Экспорт
	// Действие не требуется.
КонецПроцедуры

// См. СЭДОФСС.ЗарегистрироватьНепосредственныйРезультатОтправкиДокумента.
Процедура ЗарегистрироватьРезультатОтправки(РезультатОтправки) Экспорт
	// Сначала записывается отправленный документ, т.к. его данные используются при обновлении регистров (кэшей).
	ДокументОбъект = РезультатОтправки.Ссылка.ПолучитьОбъект();
	ДокументОбъект.ДатаОтправки           = РезультатОтправки.ДатаОтправки;
	ДокументОбъект.ИдентификаторСообщения = РезультатОтправки.ИдентификаторСообщения;
	ДокументОбъект.Страхователь           = РезультатОтправки.Страхователь;
	ДокументОбъект.ГоловнаяОрганизация    = РезультатОтправки.ГоловнаяОрганизация;
	СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, Ложь, РежимЗаписиДокумента.Запись);
	
	// Затем записывается транспортный регистр,
	// который при записи запускает обновление остальных регистров, зависящих от состояния отправки.
	РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ЗаполнитьПоДокументу(ДокументОбъект, РезультатОтправки);
	
	// Регистр СведенияОбЭЛН обновлять не требуется, т.к. организация, физлицо и пометка удаления не менялись.
	// Документ ВходящийЗапросФССДляРасчетаПособия обновлять не требуется по схожим причинам.
	
	РезультатОтправки.Измененные.Добавить(ДокументОбъект.Ссылка);
КонецПроцедуры

// См. СЭДОФСС.ЗагрузитьРезультатДоставкиСообщенияСЭДО.
Процедура ЗагрузитьРезультатДоставкиСообщения101(Страхователь, Сообщение, Результат) Экспорт
	Таблица = РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.НайтиПоИдентификаторуСообщения(
		Страхователь,
		Сообщение.Идентификатор,
		Результат);
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		// Сначала записывается отправленный документ, т.к. его данные используются при обновлении регистров (кэшей).
		Если Не Сообщение.ДоставленоФонду Тогда
			ДокументОбъект = СтрокаТаблицы.ИсходящийДокумент.ПолучитьОбъект();
			ДокументОбъект.ДатаОтправки           = '00010101';
			ДокументОбъект.ИдентификаторСообщения = "";
			СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, Ложь, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		// Затем записывается транспортный регистр,
		// который при записи запускает обновление остальных регистров, зависящих от состояния отправки.
		РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ЗаполнитьПоРезультатуДоставки(
			СтрокаТаблицы.ИсходящийДокумент,
			Сообщение);
		
		// Отметка для БРО и других потребителей что сообщение обработано.
		Результат.Обработано = Истина;
	КонецЦикла;
КонецПроцедуры

Функция ЗаголовокФормыОтправкиСведенийВФСС() Экспорт
	Возврат НСтр("ru = 'Отправка ответов на запросы СФР для расчета пособий через СЭДО';
				|en = 'Send responses to the Social Insurance Fund requests to calculate benefits via EDI'");
КонецФункции

#КонецОбласти

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "Сотрудник");
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных(Документ = Неопределено) Экспорт
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты(Документ));
КонецФункции

// Определяет по данным документа признак фиксации.
//
// Параметры:
//   Документ - ДокументОбъект.ОтветНаЗапросФССДляРасчетаПособия, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//   Булево
//
Функция ОбъектЗафиксирован(Документ) Экспорт
	Возврат Не Документ.ПометкаУдаления И ЗначениеЗаполнено(Документ.ДатаОтправки);
КонецФункции

#КонецОбласти

#Область МногофункциональныеДокументы

// Возвращает метаданные разделов документа.
//
// Возвращаемое значение:
//   Соответствие, Неопределено - Описание разделов документа.
//
Функция ОписаниеРазделовДанных() Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("МногофункциональныеДокументыБЗККлиентСервер");
		ВсеРазделы = Модуль.РазделыДанных();
		
		ОписаниеРазделовДанных = Новый Соответствие();
		
		ОписаниеРаздела = Модуль.НовыйОписаниеРазделаДанных();
		ОписаниеРазделовДанных.Вставить(ВсеРазделы.КадровыеДанные, ОписаниеРаздела);
		ОписаниеРаздела.РеквизитСостояние    = "Проведен";
		ОписаниеРаздела.РеквизитОтветсвенный = "Ответственный";
		
		ОписаниеРаздела = Модуль.НовыйОписаниеРазделаДанных();
		ОписаниеРазделовДанных.Вставить(ВсеРазделы.НачисленнаяЗарплата, ОписаниеРаздела);
		Возврат ОписаниеРазделовДанных;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Возвращает значения по которым будут проверяться права на документ.
//
// Параметры:
//   ДокументОбъект - ДокументОбъект, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//   Структура - Значения доступа по которым будут проверяться права на документ
//
Функция ЗначенияДоступа(ДокументОбъект) Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульМногофункциональныеДокументыБЗК = ОбщегоНазначения.ОбщийМодуль("МногофункциональныеДокументыБЗК");
		Возврат МодульМногофункциональныеДокументыБЗК.ЗначенияДоступаПоСоставуДокумента(
			ДокументОбъект,
			ДокументОбъект.Организация);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеРеквизиты(Документ = Неопределено)
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	Если Документ = Неопределено Тогда
		ЗаполненВходящийЗапрос    = Истина;
		ЗаполненПервичныйДокумент = Истина;
		ЗаполненНомерЛН           = Истина;
		ЗаполненРебенок           = Истина;
		ЗаполненаАктоваяЗапись    = Истина;
	Иначе
		ЗаполненВходящийЗапрос    = ЗначениеЗаполнено(Документ.ВходящийЗапрос);
		ЗаполненПервичныйДокумент = ЗначениеЗаполнено(Документ.ПервичныйДокумент);
		ЗаполненНомерЛН           = ЗаполненПервичныйДокумент Или ЗначениеЗаполнено(Документ.НомерЛН);
		ЗаполненРебенок           = ЗаполненПервичныйДокумент Или ЗначениеЗаполнено(Документ.Ребенок);
		ЗаполненаАктоваяЗапись    = ЗначениеЗаполнено(Документ.АктоваяЗаписьОРожденииДата)
			Или ЗначениеЗаполнено(Документ.АктоваяЗаписьОРожденииНомер);
	КонецЕсли;
	
	// Первичный документ может заполниться на основании номера ЛН.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ЭтотОбъект";
	Группа.ИмяГруппы           = "ЭтотОбъект";
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПервичныйДокумент", Ложь);
	
	// Реквизиты входящего запроса.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ВходящийЗапрос";
	Группа.ИмяГруппы           = "ВходящийЗапрос";
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Организация");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Сотрудник");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НомерПроцесса");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВходящийЗапросИдентификатор");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникКатегория");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Ребенок", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВидПособия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИзвещениеФССНомер");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИзвещениеФССДата");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПризнаниеСлучаяСтраховым", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АктН1Номер", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АктН1ДатаВыдачи", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АктПЗДатаВыдачи", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АктВПроизвольнойФормеНомер", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АктВПроизвольнойФормеДатаВыдачи", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РешениеСудаНомер", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РешениеСудаДатаВыдачи", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УтратаТрудоспобности", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ЗаменаПослеродовогоОтпускаДата", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ЗаменаПослеродовогоОтпускаНомер", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОНеполученииПособияОтМатериДатаВыдачи", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОНеполученииПособияОтМатериНомер", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОНеполученииПособияОтОтцаДатаВыдачи", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОНеполученииПособияОтОтцаНомер", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОНеполученииПособияПоДругомуМестуРаботыДатаВыдачи", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОНеполученииПособияПоДругомуМестуРаботыНомер", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОНеполученииПособияПредставление");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОРожденииДатаВыдачи", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОРожденииНомер", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОРожденииФорма", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Перерасчет", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПерерасчетИдентификаторСтрокиРеестра", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ЧислитсяУНесколькихСтрахователей");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СоставСтрахователейЗаДваГода");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "МетодНазначенияИВыплатыПособия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПриоритетУДанныхВходящегоЗапроса", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВерсияСпецификации");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВходящийСрокОтвета");
	
	// Реквизиты оснований.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения      = "ПервичныйДокумент";
	Группа.ИмяГруппы                = "ПервичныйДокумент";
	Группа.ОтображатьПредупреждение = ЗаполненПервичныйДокумент;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Исправление", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ДатаНачалаСобытия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АктоваяЗаписьОРожденииДата", ЗаполненаАктоваяЗапись);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АктоваяЗаписьОРожденииНомер", ЗаполненаАктоваяЗапись);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НомерЛН");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РайонныйКоэффициент");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ДоляВремени");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ДругойРодительОтсутствует");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОтДругогоРодителяДата");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОтДругогоРодителяНомер");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПередачаНаВоспитаниеДата");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПередачаНаВоспитаниеНомер");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УсыновлениеОпекаНомер");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УсыновлениеОпекаДата");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УсыновлениеОпекаТип");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтпускПоУходуНомер");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтпускПоУходуДата");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтпускПоУходуДатаНачала");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтпускПоУходуДатаОкончания");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СтраховойСтажЛет");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СтраховойСтажМесяцев");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НестраховойСтажЛет");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НестраховойСтажМесяцев");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УсловияИсчисленияКод1");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УсловияИсчисленияКод2");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УсловияИсчисленияКод3");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ЗаменаЛетРасчетногоПериода");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПервыйРасчетныйГод");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПервыйРасчетныйГодЗаработок");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПервыйРасчетныйГодВидЗаработка");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВторойРасчетныйГод");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВторойРасчетныйГодЗаработок");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВторойРасчетныйГодВидЗаработка");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "КалендарныхДнейРасчетногоПериода");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОплатаФССДатаНачала");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОплатаФССДатаОкончания");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НаличиеРешенияСудаОЛишенииПрав");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НаличиеДокументовОРожденииПредыдущихДетей");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НаличиеСвидетельстваОСмертиПредыдущихДетей");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УходЗаНесколькимиДетьми");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СреднемесячныйЗаработок");
	
	// Ребенок: Сведения заполняемые из первичного документа.
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Ребенок");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокОчередность");
	
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ПервичныйДокумент";
	Группа.ИмяГруппы           = "СвидетельствоОРождении";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СвидетельствоОРожденииДатаВыдачи");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СвидетельствоОРожденииСерияНомер");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СвидетельствоОРожденииСерия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СвидетельствоОРожденииНомер");
	
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ПервичныйДокумент";
	Группа.ИмяГруппы           = "ИнойДокументОРождении";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнойДокументОРожденииДатаВыдачи");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнойДокументОРожденииСерия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнойДокументОРожденииНомер");
	
	ГруппаТаблицы = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаТаблицы.Путь                = "ИсключаемыеПериоды";
	ГруппаТаблицы.РеквизитСтроки      = Истина;
	ГруппаТаблицы.ОснованиеЗаполнения = "ПервичныйДокумент";
	ГруппаТаблицы.ИмяГруппы           = "ПервичныйДокумент_ИсключаемыеПериоды";
	ГруппаТаблицы.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаТаблицы, "Причина");
	
	// Ребенок: Независимые сведения.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Ребенок";
	Группа.ИмяГруппы           = "РебенокНезависимыеСведения";
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокКодСвязи", ЗаполненРебенок);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокДатаРождения", ЗаполненРебенок);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокСНИЛС", ЗаполненРебенок);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокПол", ЗаполненРебенок);
	
	// Ребенок: ФИО.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Ребенок";
	Группа.ИмяГруппы           = "РебенокФИО";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокФамилия", ЗаполненРебенок);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокИмя", ЗаполненРебенок);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокОтчество", ЗаполненРебенок);
	
	// Реквизиты организации.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Организация";
	Группа.ИмяГруппы           = "Организация";
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Страхователь");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НомерСтрахователяФСС");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РегистрационныйНомерСФР");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "КодПодчиненностиФСС");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Составитель", Ложь);
	
	// Кадровые данные составителя.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Составитель";
	Группа.ИмяГруппы           = "Составитель";
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СоставительФИО");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СоставительТелефон");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СоставительЭлектроннаяПочта");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СоставительДолжность", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СоставительОснованиеПодписи", Ложь);
	
	// Отдельные кадровые данные.
	ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаКадровыеДанные.ОснованиеЗаполнения = "Сотрудник";
	ГруппаКадровыеДанные.ИмяГруппы           = "СотрудникКадровыеДанные";
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникДатаРождения");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникГражданство");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникПол");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникИНН");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникСНИЛС");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СтатусНалогоплательщика");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ВнешнееСовместительство");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникТелефон");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "АдресРегистрации");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "АдресПроживания");
	
	// Отдельные кадровые данные.
	ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаКадровыеДанные.ОснованиеЗаполнения = "СтатусНалогоплательщика";
	ГруппаКадровыеДанные.ИмяГруппы           = "СтатусНалогоплательщика";
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "КодСтатусаНалогоплательщика");
	
	// Вид договора.
	ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаКадровыеДанные.ОснованиеЗаполнения = "Сотрудник";
	ГруппаКадровыеДанные.ИмяГруппы           = "ВидДоговора";
	ГруппаКадровыеДанные.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ВидДоговораТрудовой", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ВидДоговораГПХ", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ДоговорГПХОблагаетсяВзносамиНС", Ложь);
	
	// Срочный трудовой договор.
	ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаКадровыеДанные.ОснованиеЗаполнения = "Сотрудник";
	ГруппаКадровыеДанные.ИмяГруппы           = "ТрудовойДоговорПериод";
	ГруппаКадровыеДанные.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ТрудовойДоговорДатаНачала");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ТрудовойДоговорДатаОкончания");
	
	// Гражданство.
	ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаКадровыеДанные.ОснованиеЗаполнения = "СотрудникГражданство";
	ГруппаКадровыеДанные.ИмяГруппы           = "СотрудникГражданство";
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "КодСтраныГражданства");
	
	// Кадровые данные: ФИО.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "ФИО";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникФамилия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникИмя");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникОтчество");
	
	// Кадровые данные: Удостоверение личности.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "УдостоверениеЛичности";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиВид");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиСерия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиНомер");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиДатаВыдачи");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиКемВыдан");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиСрокДействия");
	
	// Кадровые данные: Разрешение на проживание.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "РазрешениеНаПроживание";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеВид");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеСерия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеНомер");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеДатаВыдачи");
	
	// Кадровые данные: Адрес регистрации.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "АдресРегистрации";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииДом");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииЗаПределамиРФ");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииИндекс");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииКвартира");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииКорпус");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииФИАСДом");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииФИАСРО");
	
	// Кадровые данные: Льготы.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "Льготы";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПричинаПредоставленияЛьготы");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВидОсобойЗоны");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтношениеКОсобойЗоне");
	
	// Способ выплаты пособия.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Сотрудник";
	Группа.ИмяГруппы           = "СпособВыплатыПособия";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СпособВыплатыПособия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "КартаМИР");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Банк");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НомерСчета");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияВид");
	
	// Способ выплаты пособия: Сведения о банке.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Банк";
	Группа.ИмяГруппы           = "РеквизитыБанка";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "БанкБИК");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "БанкКоррСчет");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "БанкНаименование");
	
	// Способ выплаты пособия: реквизиты адреса проживания.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "АдресПроживания";
	Группа.ИмяГруппы           = "АдресПроживания";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияВид");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияДом");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияИндекс");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияКвартира");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияКорпус");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияФИАСДом");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияФИАСРО");
	
	// Способ выплаты пособия: Сведения о банке.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения      = "ПервичныйДокумент";
	Группа.ИмяГруппы                = "ИнаяОрганизация";
	Группа.ФиксацияГруппы           = Истина;
	Группа.ОтображатьПредупреждение = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияБИК");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияИНН");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияКБК");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияКПП");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияЛицевойСчетОрганизации");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияЛицевойСчетСотрудника");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияНаименование");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияНомерСчетаСтрахователя");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияРегистрационныйНомер");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияРегистрационныйНомерСФР");
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

Процедура ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, ИмяРеквизита, ОтображатьПредупреждение = Неопределено)
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(
		ФиксируемыеРеквизиты,
		Группа,
		ИмяРеквизита,
		ОтображатьПредупреждение);
КонецПроцедуры

#КонецОбласти

#Область ТекстXML

Функция ПоддерживаемыеВерсииСпецификации() Экспорт
	// В боевом проактиве СЭДО нумерация версий отличается от тестового.
	// Это может стать проблемой если версия проактива появится в xml в явном виде.
	// Пока версия не в xml - это "метафора" обозначающая алгоритм работы с данными (и отображения данных).
	// Поэтому при разработке понятнее и удобнее ориентироваться на нумерацию версий спецификации тестового СЭДО.
	ДатаПерехода_2_34 = Формат(СЭДОФСС.ДатаПереходаНаВерсиюПроактива_2_34(), "ДФ=dd.MM.yyyy");
	ДатаПерехода_2_36 = Формат(СЭДОФСС.ДатаПереходаНаВерсиюПроактива_2_36(), "ДФ=dd.MM.yyyy");
	ДатаПерехода_2_41 = Формат(СЭДОФСС.ДатаПереходаНаВерсиюПроактива_2_41(), "ДФ=dd.MM.yyyy");
	Список = Новый СписокЗначений;
	Список.Добавить("", "2.20");
	Список.Добавить("2.34", СтрШаблон(НСтр("ru = '%1 (с %2)';
											|en = '%1 (from %2)'"), "2.34", ДатаПерехода_2_34));
	Список.Добавить("2.36", СтрШаблон(НСтр("ru = '%1 (с %2)';
											|en = '%1 (from %2)'"), "2.36", ДатаПерехода_2_36));
	Список.Добавить("2.41", СтрШаблон(НСтр("ru = '%1 (с %2)';
											|en = '%1 (from %2)'"), "2.41", ДатаПерехода_2_41));
	Возврат Список;
КонецФункции

Функция ОсобенностиВыгрузки(Документ) Экспорт
	ВерсияСпецификацииЧислом = СЭДОФСС.ВерсияЧислом(Документ.ВерсияСпецификации);
	Результат = Новый Структура;
	Результат.Вставить("Версия_2_34", ВерсияСпецификацииЧислом >= СЭДОФСС.ВерсияЧислом("2.34"));
	Результат.Вставить("Версия_2_36", ВерсияСпецификацииЧислом >= СЭДОФСС.ВерсияЧислом("2.36"));
	Результат.Вставить("Версия_2_41", ВерсияСпецификацииЧислом >= СЭДОФСС.ВерсияЧислом("2.41"));
	Возврат Результат;
КонецФункции

Процедура ВыгрузитьСведенияОбЭЛН(Документ, МенеджерXML, УзелДанных)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение = Неопределено, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	УзелЭЛН = МенеджерXML.ДобавитьУзел(УзелДанных, "elnInfo");
	МенеджерXML.ДобавитьУзел(УзелЭЛН, "code", Документ.НомерЛН);
	МенеджерXML.ДобавитьУзел(УзелЭЛН, "mseInvalidLoss", Документ.УтратаТрудоспобности, Истина, Ложь);
КонецПроцедуры

Процедура ВыгрузитьСведенияОСтрахователе(Документ, МенеджерXML, УзелДанных, Особенности)
	УзелСтрахователь = МенеджерXML.ДобавитьУзел(УзелДанных, "insurerInfo");
	
	// Регистрационный номер страхователя.
	Если Особенности.Версия_2_41 И ЗначениеЗаполнено(Документ.РегистрационныйНомерСФР) Тогда
		МенеджерXML.ДобавитьУзел(УзелСтрахователь, "regNum", Документ.НомерСтрахователяФСС, Истина);
		МенеджерXML.ДобавитьУзел(УзелСтрахователь, "regNumSFR", Документ.РегистрационныйНомерСФР);
	Иначе
		МенеджерXML.ДобавитьУзел(УзелСтрахователь, "regNum", Документ.НомерСтрахователяФСС);
	КонецЕсли;
	
	// Признак места работы.
	ВнешнееСовместительство = ?(Документ.ВнешнееСовместительство, "OUTER", "NONE");
	МенеджерXML.ДобавитьУзел(УзелСтрахователь, "partTime", ВнешнееСовместительство);
	
	// Код подчиненности.
	КодПодчиненностиФСС = ?(ЗначениеЗаполнено(Документ.КодПодчиненностиФСС), Документ.КодПодчиненностиФСС, Неопределено);
	МенеджерXML.ДобавитьУзел(УзелСтрахователь, "parentNo", КодПодчиненностиФСС);
КонецПроцедуры

Процедура ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение = Неопределено, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	УзелСотрудник = МенеджерXML.ДобавитьУзел(УзелДанных, "insuredInfo");
	
	// Категория застрахованного лица, СНИЛС, ИНН.
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "category", ВРег(УбратьПробелы(Документ.СотрудникКатегория)));
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "snils", УбратьПробелы(Документ.СотрудникСНИЛС));
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "inn", Документ.СотрудникИНН);
	
	// ФИО.
	УзелФИО = МенеджерXML.ДобавитьУзел(УзелСотрудник, "fullName");
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:firstName",  Документ.СотрудникИмя);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:lastName",   Документ.СотрудникФамилия);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:middleName", Документ.СотрудникОтчество, Истина);
	
	// Дата рождения.
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "birthDate", Документ.СотрудникДатаРождения);
	
	// Пол.
	Пол = ?(Документ.СотрудникПол = Перечисления.ПолФизическогоЛица.Женский, "FEMALE", "MALE");
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "gender", Пол);
	
	// Код статуса налогоплательщика, код страны гражданства, адрес регистрации.
	Налогоплательщик = МенеджерXML.ДобавитьУзел(УзелСотрудник, "taxpayer", , , Истина);
	МенеджерXML.ДобавитьУзел(Налогоплательщик, "taxpayerStatus", Документ.КодСтатусаНалогоплательщика, , Истина);
	МенеджерXML.ДобавитьУзел(Налогоплательщик, "countryCode",    Документ.КодСтраныГражданства, , Истина);
	Если ЗначениеЗаполнено(Документ.АдресРегистрацииИндекс)
		И (ЗначениеЗаполнено(Документ.АдресРегистрацииФИАСДом) Или ЗначениеЗаполнено(Документ.АдресРегистрацииФИАСРО)) Тогда
		ЗаписатьАдрес(МенеджерXML, Налогоплательщик, Документ, "АдресРегистрации", "postalCode", "address");
	ИначеЕсли ЗначениеЗаполнено(Документ.АдресРегистрацииЗаПределамиРФ) Тогда
		МенеджерXML.ДобавитьУзел(Налогоплательщик, "foreignAddress", Документ.АдресРегистрацииЗаПределамиРФ);
	Иначе
		МенеджерXML.ДобавитьУзел(Налогоплательщик, "address");
		МенеджерXML.ДобавитьУзел(Налогоплательщик, "postalCode");
	КонецЕсли;
	
	// Удостоверение личности тип "IdType" пространства имен "http://www.fss.ru/integration/types/person/v02".
	УзелПаспорт = МенеджерXML.ДобавитьУзел(УзелСотрудник, "id");
	СведенияОВидеДокумента = СЭДОФССПовтИсп.СведенияОВидеДокумента(Документ.УдостоверениеЛичностиВид);
	МенеджерXML.ДобавитьУзел(УзелПаспорт, "person:type",      СведенияОВидеДокумента.КодМВД);
	МенеджерXML.ДобавитьУзел(УзелПаспорт, "person:series",    УбратьПробелы(Документ.УдостоверениеЛичностиСерия));
	МенеджерXML.ДобавитьУзел(УзелПаспорт, "person:num",       УбратьПробелы(Документ.УдостоверениеЛичностиНомер));
	МенеджерXML.ДобавитьУзел(УзелПаспорт, "person:issueDate", Документ.УдостоверениеЛичностиДатаВыдачи);
	МенеджерXML.ДобавитьУзел(УзелПаспорт, "person:dept",      Документ.УдостоверениеЛичностиКемВыдан);
	МенеджерXML.ДобавитьУзел(УзелПаспорт, "person:endDate",   Документ.УдостоверениеЛичностиСрокДействия, Истина);
	
	// Сведения о документах, подтверждающих постоянное или временное проживание (пребывание) на территории РФ
	// (для иностранных граждан и лиц без гражданства).
	ВыгрузитьРазрешениеНаПроживание(Документ, МенеджерXML, УзелСотрудник);
	
	// Номер телефона застрахованного. Последовательность для benefit2 до узла workContract, в остальных случаях после.
	// В схеме xsd от 12.12.2024 personPhone: "Номер телефона застрахованного. При наличии - мобильный, в формате +7хххххххххх"
	ПредставлениеТелефона = СтрЗаменить(КонтактнаяИнформацияБЗК.ПредставлениеТелефона(Документ.СотрудникТелефон, 30, Истина), "-", "");
	Если ВидПособия.ЭтоБольничныйПоБиР Тогда
		МенеджерXML.ДобавитьУзел(УзелСотрудник, "personPhone", ПредставлениеТелефона, Истина, Ложь);
	КонецЕсли;
	
	Если Особенности.Версия_2_41 Тогда
		// Срочный трудовой договор/Срок договора ГПХ.
		Если ЗначениеЗаполнено(Документ.ТрудовойДоговорДатаНачала) Тогда
			УзелДоговор = МенеджерXML.ДобавитьУзел(УзелСотрудник, "workContract", Неопределено, Истина, Истина);
			МенеджерXML.ДобавитьУзел(УзелДоговор, "common:begin", Документ.ТрудовойДоговорДатаНачала);
			МенеджерXML.ДобавитьУзел(УзелДоговор, "common:end",   Документ.ТрудовойДоговорДатаОкончания, Истина, Ложь);
		КонецЕсли;
	Иначе
		// Срочный трудовой договор.
		Если (ВидПособия.ЭтоОбычныйБольничный Или ВидПособия.ЭтоНСПЗ Или ВидПособия.ЭтоПособиеПриРождении)
			И ЗначениеЗаполнено(Документ.ТрудовойДоговорДатаНачала)
			И ЗначениеЗаполнено(Документ.ТрудовойДоговорДатаОкончания) Тогда
			УзелДоговор = МенеджерXML.ДобавитьУзел(УзелСотрудник, "workContract", Неопределено, Истина, Истина);
			МенеджерXML.ДобавитьУзел(УзелДоговор, "common:begin", Документ.ТрудовойДоговорДатаНачала);
			МенеджерXML.ДобавитьУзел(УзелДоговор, "common:end",   Документ.ТрудовойДоговорДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	// Код родственной связи с ребенком.
	Если ВидПособия.ЭтоПособиеПриРождении Тогда // Для 4го пособия - мать, отец, опекун, попечитель.
		МенеджерXML.ДобавитьУзел(УзелСотрудник, "childRelType", Документ.РебенокКодСвязи, Ложь, Истина);
	ИначеЕсли ВидПособия.ЭтоОтпускПоУходу Тогда // Для 5го пособия - мать, отец, иной родственник, опекун.
		МенеджерXML.ДобавитьУзел(УзелСотрудник, "childRelType", Документ.РебенокКодСвязи, Ложь, Истина);
	КонецЕсли;
	
	Если Не ВидПособия.ЭтоБольничныйПоБиР Тогда
		МенеджерXML.ДобавитьУзел(УзелСотрудник, "personPhone", ПредставлениеТелефона, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьРазрешениеНаПроживание(Документ, МенеджерXML, УзелСотрудник)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение = Неопределено, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	Если Не документы.СведенияОЗастрахованномЛицеФСС.ТребуетсяВыгрузитьРазрешениеНаПроживание(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	// Особенность ФСС (и СЭДО и прямых выплат):
	СведенияОВиде = СЭДОФССПовтИсп.СведенияОВидеДокумента(Документ.РазрешениеНаПроживаниеВид);
	РазрешениеНаПроживаниеСерияИНомер = СокрЛП(
		УбратьПробелы(Документ.РазрешениеНаПроживаниеСерия) + " " + УбратьПробелы(Документ.РазрешениеНаПроживаниеНомер));
	УзелРВП = МенеджерXML.ДобавитьУзел(УзелСотрудник, "residenceDocument");
	МенеджерXML.ДобавитьУзел(УзелРВП, "person:type",      УбратьПробелы(СведенияОВиде.КодФСС));
	МенеджерXML.ДобавитьУзел(УзелРВП, "person:number",    РазрешениеНаПроживаниеСерияИНомер);
	МенеджерXML.ДобавитьУзел(УзелРВП, "person:issueDate", Документ.РазрешениеНаПроживаниеДатаВыдачи, Истина, Ложь);
КонецПроцедуры

Функция ДопустимыеКодыВидаРазрешенияНаПроживание() Экспорт
	Результат = Новый Массив;
	Результат.Добавить("12"); // Вид на жительство в Российской Федерации.
	Результат.Добавить("15"); // Разрешение на временное проживание (пребывание) в Российской Федерации.
	Результат.Добавить("19"); // Свидетельство о предоставлении временного убежища на территории РФ.
	Результат.Добавить("61"); // Свидетельство о регистрации по месту жительства.
	Результат.Добавить("62"); // Вид на жительство иностранного гражданина.
	Результат.Добавить("63"); // Свидетельство о регистрации по месту пребывания.
	Возврат Результат;
КонецФункции

Процедура ВыгрузитьСпособВыплаты(Документ, МенеджерXML, УзелДанных, Особенности)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение = Неопределено, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	
	УзелСпособ = МенеджерXML.ДобавитьУзел(УзелДанных, "receivePayment");
	
	// Способ выплаты пособий.
	Если Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		Узел = МенеджерXML.ДобавитьУзел(УзелСпособ, "common:bankInfo");
		МенеджерXML.ДобавитьУзел(Узел, "common:bankName",   Документ.БанкНаименование);
		МенеджерXML.ДобавитьУзел(Узел, "common:bik",        Документ.БанкБИК);
		МенеджерXML.ДобавитьУзел(Узел, "common:accountNum", Документ.НомерСчета);
	ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		НомерКарты = БанковскиеКарты.ПолныйНомерКарты(Документ.КартаМИР);
		МенеджерXML.ДобавитьУзел(УзелСпособ, "common:cardMir", УбратьПробелы(НомерКарты));
	ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		ЗаписатьАдрес(МенеджерXML, УзелСпособ, Документ, "АдресПроживания", "common:postalCode", "common:currentFiasAddress");
	ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ИнаяОрганизация Тогда
		Узел = МенеджерXML.ДобавитьУзел(УзелСпособ, "common:otherOrg");
		МенеджерXML.ДобавитьУзел(Узел, "common:nameOrg",                    Документ.ИнаяОрганизацияНаименование);
		МенеджерXML.ДобавитьУзел(Узел, "common:bik",                        Документ.ИнаяОрганизацияБИК);
		МенеджерXML.ДобавитьУзел(Узел, "common:accountNum",                 Документ.ИнаяОрганизацияНомерСчетаСтрахователя);
		МенеджерXML.ДобавитьУзел(Узел, "common:personalOrgAccount",         Документ.ИнаяОрганизацияЛицевойСчетОрганизации, Истина);
		МенеджерXML.ДобавитьУзел(Узел, "common:personalInsuredAccount",     Документ.ИнаяОрганизацияЛицевойСчетСотрудника, Истина);
		МенеджерXML.ДобавитьУзел(Узел, "common:kbk",                        Документ.ИнаяОрганизацияКБК, Истина);
		Если Особенности.Версия_2_41 И ЗначениеЗаполнено(Документ.ИнаяОрганизацияРегистрационныйНомерСФР) Тогда
			МенеджерXML.ДобавитьУзел(Узел, "common:regNumCorrectionalFacility",    Документ.ИнаяОрганизацияРегистрационныйНомер, Истина);
			МенеджерXML.ДобавитьУзел(Узел, "common:regNumSFRCorrectionalFacility", Документ.ИнаяОрганизацияРегистрационныйНомерСФР);
		Иначе
			МенеджерXML.ДобавитьУзел(Узел, "common:regNumCorrectionalFacility", Документ.ИнаяОрганизацияРегистрационныйНомер);
		КонецЕсли;
		МенеджерXML.ДобавитьУзел(Узел, "common:innCorrectionalFacility",    Документ.ИнаяОрганизацияИНН);
		МенеджерXML.ДобавитьУзел(Узел, "common:kppCorrectionalFacility",    Документ.ИнаяОрганизацияКПП);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьДанныеДляРасчета(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение = Неопределено, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	
	УзелРасчет = МенеджерXML.ДобавитьУзел(УзелДанных, "calculationData");
	
	Если ВидПособия.ЭтоЛН Или ВидПособия.ЭтоОтпускПоУходу Тогда
		МенеджерXML.ДобавитьУзел(УзелРасчет, "baseCalcDays", Документ.КалендарныхДнейРасчетногоПериода);
	КонецЕсли;
	
	// Одновременный уход за несколькими детьми: Среднемесячный заработок.
	Если ВидПособия.ЭтоОтпускПоУходу Тогда
		// МожетБытьНеопределено = Ложь, хотя в схеме Истина, т.к. если указать Истина,
		// то <avgSal>0</avgSal> не выгрузится (т.к. при пустых вложенных nillable родитель превращается в nil=True)
		// и получится противоречие с флажком УходЗаНесколькимиДетьми.
		УзелУход = МенеджерXML.ДобавитьУзел(УзелРасчет, "multipart");
		Если Документ.УходЗаНесколькимиДетьми Тогда
			МенеджерXML.ДобавитьУзел(УзелУход, "avgSal", Документ.СреднемесячныйЗаработок);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПособия.ЭтоЛН Или ВидПособия.ЭтоОтпускПоУходу Тогда
		// Флаг наличия заявления о замене годов, Года для расчета, Сумма заработка за год.
		УзелГоды = МенеджерXML.ДобавитьУзел(УзелРасчет, "years");
		Если Документ.ЗаменаЛетРасчетногоПериода Тогда
			МенеджерXML.ДобавитьУзел(УзелГоды, "changeYear", Документ.ЗаменаЛетРасчетногоПериода);
		КонецЕсли;
		УзелГод1 = МенеджерXML.ДобавитьУзел(УзелГоды, "year");
		МенеджерXML.ДобавитьУзел(УзелГод1, "calc",    Документ.ПервыйРасчетныйГод);
		МенеджерXML.ДобавитьУзел(УзелГод1, "baseSum", Документ.ПервыйРасчетныйГодЗаработок);
		Если Особенности.Версия_2_34 Тогда
			ТипСуммы = Перечисления.СпособыУчетаГодовогоЗаработкаСФР.СтрокаXML(Документ.ПервыйРасчетныйГодВидЗаработка);
			МенеджерXML.ДобавитьУзел(УзелГод1, "sumType", ТипСуммы, Истина, Ложь);
		КонецЕсли;
		УзелГод2 = МенеджерXML.ДобавитьУзел(УзелГоды, "year");
		МенеджерXML.ДобавитьУзел(УзелГод2, "calc",    Документ.ВторойРасчетныйГод);
		МенеджерXML.ДобавитьУзел(УзелГод2, "baseSum", Документ.ВторойРасчетныйГодЗаработок);
		Если Особенности.Версия_2_34 Тогда
			ТипСуммы = Перечисления.СпособыУчетаГодовогоЗаработкаСФР.СтрокаXML(Документ.ВторойРасчетныйГодВидЗаработка);
			МенеджерXML.ДобавитьУзел(УзелГод2, "sumType", ТипСуммы, Истина, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	// Районный коэффициент.
	МенеджерXML.ДобавитьУзел(УзелРасчет, "kfReg", Документ.РайонныйКоэффициент*100, Ложь, Истина);
	
	Если ВидПособия.ЭтоЛН Или ВидПособия.ЭтоОтпускПоУходу Тогда
		// Количество ставок при неполном рабочем времени (от 0 до 1).
		МенеджерXML.ДобавитьУзел(УзелРасчет, "kfShortDays", Документ.ДоляВремени, Ложь, Истина);
		
		// Страховой стаж, Нестраховой период.
		МожетБытьНеопределено = ВидПособия.ЭтоОтпускПоУходу;
		УзелСтаж = МенеджерXML.ДобавитьУзел(УзелРасчет, "experience", Неопределено, Ложь, МожетБытьНеопределено);
		МенеджерXML.ДобавитьУзел(УзелСтаж, "insurYY",    Документ.СтраховойСтажЛет);
		МенеджерXML.ДобавитьУзел(УзелСтаж, "insurMM",    Документ.СтраховойСтажМесяцев);
		МенеджерXML.ДобавитьУзел(УзелСтаж, "notInsurYY", Документ.НестраховойСтажЛет);
		МенеджерXML.ДобавитьУзел(УзелСтаж, "notInsurMM", Документ.НестраховойСтажМесяцев);
	КонецЕсли;
	
	// Условия исчисления.
	Если ВидПособия.ЭтоЛН Или ?(Особенности.Версия_2_34, Ложь, ВидПособия.ЭтоОтпускПоУходу) Тогда
		УзелУсловия = МенеджерXML.ДобавитьУзел(УзелРасчет, "calcConditionList", Неопределено, Ложь, Истина);
		Если ЗначениеЗаполнено(Документ.УсловияИсчисленияКод1) Тогда
			МенеджерXML.ДобавитьУзел(УзелУсловия, "calcCondition", Документ.УсловияИсчисленияКод1);
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.УсловияИсчисленияКод2) Тогда
			МенеджерXML.ДобавитьУзел(УзелУсловия, "calcCondition", Документ.УсловияИсчисленияКод2);
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.УсловияИсчисленияКод3) Тогда
			МенеджерXML.ДобавитьУзел(УзелУсловия, "calcCondition", Документ.УсловияИсчисленияКод3);
		КонецЕсли;
	КонецЕсли;
	
	// Льготы: Проживание / работа в особой зоне.
	Если ВидПособия.ЭтоОтпускПоУходу Тогда
		ВидЧислом = СЭДОФСС.ВидОсобойЗоныЧислом(Документ.ВидОсобойЗоны);
		МенеджерXML.ДобавитьУзел(УзелРасчет, "liveCond", ВидЧислом, Истина, Истина);
	КонецЕсли;
	
	// Льготы: Причина воздействия радиации.
	Если ВидПособия.ЭтоЛН Или ВидПособия.ЭтоОтпускПоУходу Тогда
		ПричинаЧислом = СЭДОФСС.ПричинаПредоставленияЛьготыЧислом(Документ.ПричинаПредоставленияЛьготы);
		Если ПричинаЧислом <> Неопределено Тогда
			МенеджерXML.ДобавитьУзел(УзелРасчет, "causeRadiation", ПричинаЧислом);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПособия.ЭтоОбычныйБольничный Или ВидПособия.ЭтоНСПЗ Тогда
		// Период за который начисляется пособие ФСС.
		УзелПериод = МенеджерXML.ДобавитьУзел(УзелРасчет, "payPeriodFSS");
		МенеджерXML.ДобавитьУзел(УзелПериод, "begin", Документ.ОплатаФССДатаНачала,    Ложь, Истина);
		МенеджерXML.ДобавитьУзел(УзелПериод, "end",   Документ.ОплатаФССДатаОкончания, Ложь, Истина);
		
		// Периоды за которые не начисляется пособие за счет ФСС.
		ВыгрузитьИсключаемыеПериоды(Документ, МенеджерXML, УзелРасчет);
	КонецЕсли;
	
	// Периоды простоя.
	Если ВидПособия.ЭтоОбычныйБольничный Или ?(Особенности.Версия_2_34, Ложь, ВидПособия.ЭтоНСПЗ) Тогда
		ВыгрузитьПериодыПростоя(Документ, МенеджерXML, УзелРасчет);
	КонецЕсли;
	
	// Приостановления трудовых договоров.
	Если ВидПособия.ЭтоОбычныйБольничный Или ВидПособия.ЭтоНСПЗ Тогда
		ВыгрузитьПриостановленияТД(Документ, МенеджерXML, УзелРасчет);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьПараметрыНазначения(Документ, МенеджерXML, УзелДанных, ВидПособия, Особенности)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение = Неопределено, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	Если Не Особенности.Версия_2_34 Или Документ.Перерасчет Тогда
		Возврат;
	КонецЕсли;
	
	УзелНазначение = МенеджерXML.ДобавитьУзел(УзелДанных, "assignmentParams", Неопределено, Истина, Ложь);
	
	Если ВидПособия.ЭтоОбычныйБольничный Или ВидПособия.ЭтоБольничныйПоБиР Или ВидПособия.ЭтоОтпускПоУходу Тогда
		МенеджерXML.ДобавитьУзел(УзелНазначение, "insuredWorksSeveralInsurers", Документ.ЧислитсяУНесколькихСтрахователей);
	КонецЕсли;
	
	Если ВидПособия.ЭтоОбычныйБольничный Или ВидПособия.ЭтоБольничныйПоБиР
		Или (Особенности.Версия_2_36 И ВидПособия.ЭтоОтпускПоУходу) Тогда
		СтрокаXML = Перечисления.ВариантыИзмененияСоставаСтрахователейСФР.СтрокаXML(Документ.СоставСтрахователейЗаДваГода);
		МенеджерXML.ДобавитьУзел(УзелНазначение, "twoPrevYearsInsurers", СтрокаXML, Истина, Ложь);
	КонецЕсли;
	
	СтрокаXML = Перечисления.МетодыНазначенияИВыплатыПособийСФР.СтрокаXML(Документ.МетодНазначенияИВыплатыПособия);
	МенеджерXML.ДобавитьУзел(УзелНазначение, "paymentMethod", СтрокаXML);
	
	Если ВидПособия.ЭтоОбычныйБольничный Или ВидПособия.ЭтоБольничныйПоБиР Или ВидПособия.ЭтоОтпускПоУходу Тогда
		Если Документ.ВыборПодтвержденЗастрахованнымЛицом Тогда
			МенеджерXML.ДобавитьУзел(УзелНазначение, "choiceInsurerConfirmedByInsured", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПособия.ЭтоОбычныйБольничный Или ВидПособия.ЭтоБольничныйПоБиР Или Особенности.Версия_2_36 Тогда
		УзелВидДоговора = МенеджерXML.ДобавитьУзел(УзелНазначение, "contractsType");
		Если Документ.ВидДоговораТрудовой Тогда
			МенеджерXML.ДобавитьУзел(УзелВидДоговора, "contractType", "workerContract");
		КонецЕсли;
		Если Документ.ВидДоговораГПХ Тогда
			МенеджерXML.ДобавитьУзел(УзелВидДоговора, "contractType", "GPHcontract");
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПособия.ЭтоНСПЗ И Особенности.Версия_2_36 Тогда
		Если Документ.ДоговорГПХОблагаетсяВзносамиНС Тогда
			МенеджерXML.ДобавитьУзел(УзелНазначение, "insurancePaymentObligation", Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьДанныеНСПЗ(Документ, МенеджерXML, УзелДанных, ВидПособия)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение = Неопределено, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	
	УзелНСПЗ = МенеджерXML.ДобавитьУзел(УзелДанных, "insuranceCase");
	УзелНСПЗ.МожетОтсутствовать = ВидПособия.ЭтоОбычныйБольничный;
	
	// insuranceCaseState - boolean - Статус страхового случая:
	// Ложь - если случай не признается НС и ПЗ; Истина - если случай считается НС и ПЗ.
	Если Документ.ПризнаниеСлучаяСтраховым = Перечисления.ПризнаниеСлучаяСтраховым.Признан Тогда
		МенеджерXML.ДобавитьУзел(УзелНСПЗ, "insuranceCaseState", Истина);
	ИначеЕсли Документ.ПризнаниеСлучаяСтраховым = Перечисления.ПризнаниеСлучаяСтраховым.НеПризнан Тогда
		МенеджерXML.ДобавитьУзел(УзелНСПЗ, "insuranceCaseState", Ложь);
	КонецЕсли;
	
	// n1 - Номер акта Н1, Дата акта Н1.
	УзелАкт = МенеджерXML.ДобавитьУзел(УзелНСПЗ, "n1", , Истина, Ложь);
	МенеджерXML.ДобавитьУзел(УзелАкт, "num",       Документ.АктН1Номер);
	МенеджерXML.ДобавитьУзел(УзелАкт, "issueDate", Документ.АктН1ДатаВыдачи);
	
	// profIllnessAct - Дата акта о профессиональном заболевании.
	УзелАкт = МенеджерXML.ДобавитьУзел(УзелНСПЗ, "profIllnessAct", , Истина, Ложь);
	МенеджерXML.ДобавитьУзел(УзелАкт, "issueDate", Документ.АктПЗДатаВыдачи);
	
	// freeFormAct - Номер акта в произвольной форме, Дата акта в произвольной форме.
	УзелАкт = МенеджерXML.ДобавитьУзел(УзелНСПЗ, "freeFormAct", , Истина, Ложь);
	МенеджерXML.ДобавитьУзел(УзелАкт, "num",       Документ.АктВПроизвольнойФормеНомер);
	МенеджерXML.ДобавитьУзел(УзелАкт, "issueDate", Документ.АктВПроизвольнойФормеДатаВыдачи);
	
	// courtDecision - Номер решения суда, Дата решения суда.
	УзелАкт = МенеджерXML.ДобавитьУзел(УзелНСПЗ, "courtDecision", , Истина, Ложь);
	МенеджерXML.ДобавитьУзел(УзелАкт, "num",       Документ.РешениеСудаНомер);
	МенеджерXML.ДобавитьУзел(УзелАкт, "issueDate", Документ.РешениеСудаДатаВыдачи);
	
КонецПроцедуры

Процедура ВыгрузитьИсключаемыеПериоды(Документ, МенеджерXML, УзелДанных)
	УзелПериоды = МенеджерXML.ДобавитьУзел(УзелДанных, "excludePeriodList");
	Для Каждого ИсключаемыйПериод Из Документ.ИсключаемыеПериоды Цикл
		Если Не ЗначениеЗаполнено(ИсключаемыйПериод.Причина)
			Или Не ЗначениеЗаполнено(ИсключаемыйПериод.ДатаНачала)
			Или Не ЗначениеЗаполнено(ИсключаемыйПериод.ДатаОкончания) Тогда
			Продолжить;
		КонецЕсли;
		КодПричины = Перечисления.ПричиныНеоплатыБольничных.ЗначениеЧислом(ИсключаемыйПериод.Причина);
		УзелПериод = МенеджерXML.ДобавитьУзел(УзелПериоды, "excludePeriod");
		МенеджерXML.ДобавитьУзел(УзелПериод, "type", КодПричины);
		УзелДаты = МенеджерXML.ДобавитьУзел(УзелПериод, "period");
		МенеджерXML.ДобавитьУзел(УзелДаты, "common:begin", ИсключаемыйПериод.ДатаНачала);
		МенеджерXML.ДобавитьУзел(УзелДаты, "common:end", ИсключаемыйПериод.ДатаОкончания);
	КонецЦикла;
КонецПроцедуры

Процедура ВыгрузитьПериодыПростоя(Документ, МенеджерXML, УзелДанных)
	УзелПериоды = МенеджерXML.ДобавитьУзел(УзелДанных, "downPeriodList");
	Для Каждого ПериодПростоя Из Документ.ПериодыПростоя Цикл
		Если Не ЗначениеЗаполнено(ПериодПростоя.ДатаНачала)
			Или Не ЗначениеЗаполнено(ПериодПростоя.ДатаОкончания) Тогда
			Продолжить;
		КонецЕсли;
		УзелПериод = МенеджерXML.ДобавитьУзел(УзелПериоды, "downPeriod");
		УзелДаты = МенеджерXML.ДобавитьУзел(УзелПериод, "period");
		МенеджерXML.ДобавитьУзел(УзелДаты, "common:begin",      ПериодПростоя.ДатаНачала);
		МенеджерXML.ДобавитьУзел(УзелДаты, "common:end",        ПериодПростоя.ДатаОкончания);
		МенеджерXML.ДобавитьУзел(УзелПериод, "idleAverage", ПериодПростоя.СреднийЗаработок);
	КонецЦикла;
КонецПроцедуры

Процедура ВыгрузитьПриостановленияТД(Документ, МенеджерXML, УзелДанных)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение = Неопределено, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	УзелПериоды = МенеджерXML.ДобавитьУзел(УзелДанных, "mobilPeriods", , Истина, Ложь);
	Для Каждого Период Из Документ.ПриостановленияТрудовыхДоговоров Цикл
		ТипСтрокой = Перечисления.ОснованияПриостановленияТрудовыхДоговоровСФР.ЗначениеВСтрокуСЭДОXML(Период.ОснованиеНПА);
		Если Не ЗначениеЗаполнено(Период.ДатаНачала)
			Или Не ЗначениеЗаполнено(Период.ДатаОкончания)
			Или Не ЗначениеЗаполнено(ТипСтрокой) Тогда
			Продолжить;
		КонецЕсли;
		УзелПериод = МенеджерXML.ДобавитьУзел(УзелПериоды, "common:mobilPeriod");
		МенеджерXML.ДобавитьУзел(УзелПериод, "common:beginDate",  Период.ДатаНачала);
		МенеджерXML.ДобавитьУзел(УзелПериод, "common:endDate",    Период.ДатаОкончания);
		МенеджерXML.ДобавитьУзел(УзелПериод, "common:periodType", ТипСтрокой);
	КонецЦикла;
КонецПроцедуры

Процедура ВыгрузитьСведенияОбОтпускеПоБиР(Документ, МенеджерXML, УзелДанных)
	// Информация о отпуске по уходу за ребенком (отпуска по беременности и родам)).
	УзелОтпуск = МенеджерXML.ДобавитьУзел(УзелДанных, "vacation", , Ложь, Истина);
	
	// Номер приказа об отпуске.
	МенеджерXML.ДобавитьУзел(УзелОтпуск, "num", Документ.ОтпускПоУходуНомер, Ложь, Истина);
	
	// Дата приказа об отпуске.
	МенеджерXML.ДобавитьУзел(УзелОтпуск, "issueDate", Документ.ОтпускПоУходуДата, Ложь, Истина);
	
	// Дата начала отпуска.
	МенеджерXML.ДобавитьУзел(УзелОтпуск, "beginDate", Документ.ОтпускПоУходуДатаНачала, Ложь, Истина);
	
	// Дата окончания отпуска.
	МенеджерXML.ДобавитьУзел(УзелОтпуск, "endDate", Документ.ОтпускПоУходуДатаОкончания, Ложь, Истина);
КонецПроцедуры

Процедура ВыгрузитьИнформациюОбУсыновленииОпеке(Документ, МенеджерXML, УзелДанных)
	// Данные об усыновлении/опеке.
	Если Не ЗначениеЗаполнено(Документ.УсыновлениеОпекаТип)
		И Не ЗначениеЗаполнено(Документ.УсыновлениеОпекаНомер)
		И Не ЗначениеЗаполнено(Документ.УсыновлениеОпекаДата) Тогда
		Возврат;
	КонецЕсли;
	// Тип, Номер, Дата выдачи.
	УзелОпека = МенеджерXML.ДобавитьУзел(УзелДанных, "wardInfo");
	УзелОпека.МожетОтсутствовать = Истина;
	МенеджерXML.ДобавитьУзел(УзелОпека, "type",      Документ.УсыновлениеОпекаТип,   Ложь, Истина);
	МенеджерXML.ДобавитьУзел(УзелОпека, "num",       Документ.УсыновлениеОпекаНомер, Ложь, Истина);
	МенеджерXML.ДобавитьУзел(УзелОпека, "issueDate", Документ.УсыновлениеОпекаДата,  Ложь, Истина);
КонецПроцедуры

Процедура ВыгрузитьИнформациюОРебенкеОтпускаПоУходу(Документ, МенеджерXML, УзелДанных)
	
	УзелРебенок = МенеджерXML.ДобавитьУзел(УзелДанных, "childInfo");
	
	// Дата рождения.
	МенеджерXML.ДобавитьУзел(УзелРебенок, "birthDate", Документ.РебенокДатаРождения);
	
	// ФИО.
	УзелФИО = МенеджерXML.ДобавитьУзел(УзелРебенок, "fullName");
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:firstName",  Документ.РебенокИмя);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:lastName",   Документ.РебенокФамилия);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:middleName", Документ.РебенокОтчество, Истина);
	
	// СНИЛС.
	МенеджерXML.ДобавитьУзел(УзелРебенок, "snils", УбратьПробелы(Документ.РебенокСНИЛС), Истина, Истина);
	
КонецПроцедуры

Процедура ВыгрузитьОснованияДляОтпускаПоУходу(Документ, МенеджерXML, УзелДанных)
	УзелОснования = МенеджерXML.ДобавитьУзел(УзелДанных, "baseDocuments", , , Истина);
	
	// Информация о отпуске по уходу за ребенком.
	УзелОтпуск = МенеджерXML.ДобавитьУзел(УзелОснования, "vacation");
	МенеджерXML.ДобавитьУзел(УзелОтпуск, "begin",    Документ.ОтпускПоУходуДатаНачала,    Ложь, Истина);
	МенеджерXML.ДобавитьУзел(УзелОтпуск, "end",      Документ.ОтпускПоУходуДатаОкончания, Ложь, Истина);
	
	// Приказ о предоставлении отпуска по уходу за ребенком.
	УзелНомерДата = МенеджерXML.ДобавитьУзел(УзелОтпуск, "holidORD");
	Если ЗначениеЗаполнено(Документ.ОтпускПоУходуНомер) Или ЗначениеЗаполнено(Документ.ОтпускПоУходуДата) Тогда
		МенеджерXML.ДобавитьУзел(УзелНомерДата, "num",       Документ.ОтпускПоУходуНомер);
		МенеджерXML.ДобавитьУзел(УзелНомерДата, "issueDate", Документ.ОтпускПоУходуДата);
	КонецЕсли;
	
	// Приказ о замене послеродового отпуска на отпуск по уходу за ребенком.
	УзелЗаменаОтпуска = МенеджерXML.ДобавитьУзел(УзелОтпуск, "holidChORD");
	УзелЗаменаОтпуска.МожетОтсутствовать    = Истина;
	УзелЗаменаОтпуска.МожетБытьНеопределено = Истина;
	Если ЗначениеЗаполнено(Документ.ЗаменаПослеродовогоОтпускаНомер) Или ЗначениеЗаполнено(Документ.ЗаменаПослеродовогоОтпускаДата) Тогда
		МенеджерXML.ДобавитьУзел(УзелЗаменаОтпуска, "num",       Документ.ЗаменаПослеродовогоОтпускаНомер);
		МенеджерXML.ДобавитьУзел(УзелЗаменаОтпуска, "issueDate", Документ.ЗаменаПослеродовогоОтпускаДата);
	КонецЕсли;
	
	// Документы о рождении.
	УзелДокумент = МенеджерXML.ДобавитьУзел(УзелОснования, "identifyDocument", , Ложь, Истина);
	
	Если ЗначениеЗаполнено(Документ.СвидетельствоОРожденииСерия) Тогда
		// Свидетельство о рождении.
		Свидетельство = МенеджерXML.ДобавитьУзел(УзелДокумент, "birthCertificate", , Ложь, Истина);
		МенеджерXML.ДобавитьУзел(Свидетельство, "series",    Документ.СвидетельствоОРожденииСерия);
		МенеджерXML.ДобавитьУзел(Свидетельство, "number",    Документ.СвидетельствоОРожденииНомер,      Ложь, Истина);
		МенеджерXML.ДобавитьУзел(Свидетельство, "issueDate", Документ.СвидетельствоОРожденииДатаВыдачи, Ложь, Истина);
	ИначеЕсли ЗначениеЗаполнено(Документ.ИнойДокументОРожденииСерия)
		Или ЗначениеЗаполнено(Документ.ИнойДокументОРожденииНомер)
		Или ЗначениеЗаполнено(Документ.ИнойДокументОРожденииДатаВыдачи) Тогда
		// Иной документ подтверждающий рождение ребенка.
		ИнойДокумент = МенеджерXML.ДобавитьУзел(УзелДокумент, "birthDocOtherCountry");
		МенеджерXML.ДобавитьУзел(ИнойДокумент, "series",    Документ.ИнойДокументОРожденииСерия,      Истина, Ложь);
		МенеджерXML.ДобавитьУзел(ИнойДокумент, "number",    Документ.ИнойДокументОРожденииНомер,      Ложь, Истина);
		МенеджерXML.ДобавитьУзел(ИнойДокумент, "issueDate", Документ.ИнойДокументОРожденииДатаВыдачи, Ложь, Истина);
	КонецЕсли;
	
	// Актовая запись ЗАГС.
	Если ЗначениеЗаполнено(Документ.АктоваяЗаписьОРожденииНомер)
		И ЗначениеЗаполнено(Документ.АктоваяЗаписьОРожденииДата) Тогда
		АктЗАГС = МенеджерXML.ДобавитьУзел(УзелДокумент, "birthRecord", , Истина, Истина);
		МенеджерXML.ДобавитьУзел(АктЗАГС, "num",       Документ.АктоваяЗаписьОРожденииНомер, Ложь, Истина);
		МенеджерXML.ДобавитьУзел(АктЗАГС, "issueDate", Документ.АктоваяЗаписьОРожденииДата,  Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьИнформациюОПередачеНаВоспитание(Документ, МенеджерXML, УзелДанных)
	// Документ о передаче в приемную семью.
	Если Не ЗначениеЗаполнено(Документ.ПередачаНаВоспитаниеДата)
		И Не ЗначениеЗаполнено(Документ.ПередачаНаВоспитаниеНомер) Тогда
		Возврат;
	КонецЕсли;
	// Номер, Дата выдачи документа о передаче в приемную семью.
	УзелПередача = МенеджерXML.ДобавитьУзел(УзелДанных, "refFamilyInfo");
	УзелПередача.МожетОтсутствовать = Истина;
	МенеджерXML.ДобавитьУзел(УзелПередача, "num",       Документ.ПередачаНаВоспитаниеНомер, Ложь, Истина);
	МенеджерXML.ДобавитьУзел(УзелПередача, "issueDate", Документ.ПередачаНаВоспитаниеДата,  Ложь, Истина);
КонецПроцедуры

Процедура ВыгрузитьИнформациюОРебенкеПособияПриРождении(Документ, МенеджерXML, УзелДанных)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение = Неопределено, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	
	// Информация о рождении ребенка.
	УзелРождениеРебенка = МенеджерXML.ДобавитьУзел(УзелДанных, "birthInfo");
	УзелРождениеРебенка.МожетБытьНеопределено = Истина;
	
	// Данные об актовой записи ЗАГС.
	УзелАктЗАГС = МенеджерXML.ДобавитьУзел(УзелРождениеРебенка, "zagsAct");
	УзелАктЗАГС.МожетОтсутствовать = Истина;
	МенеджерXML.ДобавитьУзел(УзелАктЗАГС, "num",       Документ.АктоваяЗаписьОРожденииНомер, Ложь, Истина);
	МенеджерXML.ДобавитьУзел(УзелАктЗАГС, "issueDate", Документ.АктоваяЗаписьОРожденииДата,  Ложь, Истина);
	
	СвидетельствоОРожденииСерияНомер = Документ.СвидетельствоОРожденииСерияНомер;
	Если Не ЗначениеЗаполнено(СвидетельствоОРожденииСерияНомер) Тогда
		СвидетельствоОРожденииСерияНомер = СокрЛП(
			СокрП(Документ.СвидетельствоОРожденииСерия) + " " + СокрЛ(Документ.СвидетельствоОРожденииНомер));
	КонецЕсли;
	
	ЕстьСвидетельство = ЗначениеЗаполнено(СвидетельствоОРожденииСерияНомер)
		И ЗначениеЗаполнено(Документ.СвидетельствоОРожденииДатаВыдачи);
	ЕстьСправка = ЗначениеЗаполнено(Документ.СправкаОРожденииФорма)
		И ЗначениеЗаполнено(Документ.СправкаОРожденииНомер);
	ЕстьИнойДокумент = ЗначениеЗаполнено(Документ.ИнойДокументОРожденииНомер)
		Или ЗначениеЗаполнено(Документ.ИнойДокументОРожденииСерия)
		Или ЗначениеЗаполнено(Документ.ИнойДокументОРожденииДатаВыдачи);
	Если Не ЕстьСвидетельство И Не ЕстьСправка И Не ЕстьИнойДокумент Тогда
		ЕстьСправка = ВоВходящемЗапросеЕстьСправкаОРождении(Документ);
	КонецЕсли;
	Если ЕстьСвидетельство Тогда
		// Свидетельство о рождении.
		Узел = МенеджерXML.ДобавитьУзел(УзелРождениеРебенка, "cert");
		МенеджерXML.ДобавитьУзел(Узел, "num",       СвидетельствоОРожденииСерияНомер);
		МенеджерXML.ДобавитьУзел(Узел, "issueDate", Документ.СвидетельствоОРожденииДатаВыдачи);
	ИначеЕсли ЕстьСправка Тогда
		КодФормы = Перечисления.ФормыСправкиОРожденииРебенка.КодЗначения(Документ.СправкаОРожденииФорма);
		// Справка о рождении.
		Узел = МенеджерXML.ДобавитьУзел(УзелРождениеРебенка, "birthReference");
		МенеджерXML.ДобавитьУзел(Узел, "number",    Документ.СправкаОРожденииНомер,      Ложь, Истина);
		МенеджерXML.ДобавитьУзел(Узел, "issueDate", Документ.СправкаОРожденииДатаВыдачи, Ложь, Истина);
		МенеджерXML.ДобавитьУзел(Узел, "refType",   КодФормы,                            Ложь, Истина);
	Иначе
		// Иной документ подтверждающий рождение ребенка.
		Узел = МенеджерXML.ДобавитьУзел(УзелРождениеРебенка, "otherDoc");
		МенеджерXML.ДобавитьУзел(Узел, "num",       Документ.ИнойДокументОРожденииНомер,      Ложь, Истина);
		МенеджерXML.ДобавитьУзел(Узел, "series",    Документ.ИнойДокументОРожденииСерия,      Истина, Истина);
		МенеджерXML.ДобавитьУзел(Узел, "issueDate", Документ.ИнойДокументОРожденииДатаВыдачи, Ложь, Истина);
	КонецЕсли;
	
	// Дата рождения ребенка.
	МенеджерXML.ДобавитьУзел(УзелРождениеРебенка, "birthDate", Документ.РебенокДатаРождения, Ложь, Истина);
	
	// ФИО ребенка.
	УзелФИО = МенеджерXML.ДобавитьУзел(УзелРождениеРебенка, "fullName");
	УзелФИО.МожетБытьНеопределено = Истина;
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:firstName",  Документ.РебенокИмя);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:lastName",   Документ.РебенокФамилия);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:middleName", Документ.РебенокОтчество, Истина);
	
	// СНИЛС ребенка.
	МенеджерXML.ДобавитьУзел(УзелРождениеРебенка, "snils", УбратьПробелы(Документ.РебенокСНИЛС), Истина);
	
КонецПроцедуры

Функция ВоВходящемЗапросеЕстьСправкаОРождении(Документ)
	Если ЗначениеЗаполнено(Документ.ВходящийЗапрос) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СвойстваРеквизитовЗапроса.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.ВходящийЗапросФССДляРасчетаПособия.СвойстваРеквизитов КАК СвойстваРеквизитовЗапроса
		|ГДЕ
		|	СвойстваРеквизитовЗапроса.Ссылка = &Ссылка
		|	И СвойстваРеквизитовЗапроса.ИмяТаблицы ПОДОБНО ""birthinfo.birthreference""";
		Запрос.УстановитьПараметр("Ссылка", Документ.ВходящийЗапрос);
		Если Не Запрос.Выполнить().Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Документ.ВходящийЗапросИдентификатор) Тогда
		ТекстXML = СЭДОФСС.ТекстXML(Документ.ВходящийЗапросИдентификатор);
		Если СтрНайти(НРег(ТекстXML), "birthreference") > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Процедура ВыгрузитьИнформациюОДругомРодителе(Документ, МенеджерXML, УзелДанных)
	
	Если Документ.ДругойРодительОтсутствует Тогда
		// Фиксированный флажок в случае, если другой родитель отсутствует.
		МенеджерXML.ДобавитьУзел(УзелДанных, "otherMissing", Истина);
	Иначе
		// Справка от другого родителя о неполучении пособия.
		УзелСправка = МенеджерXML.ДобавитьУзел(УзелДанных, "refNpayOther");
		УзелСправка.МожетБытьНеопределено = Истина;
		МенеджерXML.ДобавитьУзел(УзелСправка, "num",       Документ.СправкаОтДругогоРодителяНомер, Ложь, Истина);
		МенеджерXML.ДобавитьУзел(УзелСправка, "issueDate", Документ.СправкаОтДругогоРодителяДата,  Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьСправкуОНеполученииПособия(Документ, МенеджерXML, УзелДанных)
	// Справка о неполучении пособия от матери.
	Если ЗначениеЗаполнено(Документ.СправкаОНеполученииПособияОтМатериНомер)
		Или ЗначениеЗаполнено(Документ.СправкаОНеполученииПособияОтМатериДатаВыдачи) Тогда
		Узел = МенеджерXML.ДобавитьУзел(УзелДанных, "refNpay");
		МенеджерXML.ДобавитьУзел(Узел, "refType",   2);
		МенеджерXML.ДобавитьУзел(Узел, "num",       Документ.СправкаОНеполученииПособияОтМатериНомер,       Ложь, Истина);
		МенеджерXML.ДобавитьУзел(Узел, "issueDate", Документ.СправкаОНеполученииПособияОтМатериДатаВыдачи,  Ложь, Истина);
		Возврат; // Фонд поддерживает только один узел refNpay. Остальные справки выгружаются в note.
	КонецЕсли;
	
	// Справка о неполучении пособия от отца.
	Если ЗначениеЗаполнено(Документ.СправкаОНеполученииПособияОтОтцаНомер)
		Или ЗначениеЗаполнено(Документ.СправкаОНеполученииПособияОтОтцаДатаВыдачи) Тогда
		Узел = МенеджерXML.ДобавитьУзел(УзелДанных, "refNpay");
		МенеджерXML.ДобавитьУзел(Узел, "refType",   1);
		МенеджерXML.ДобавитьУзел(Узел, "num",       Документ.СправкаОНеполученииПособияОтОтцаНомер,       Ложь, Истина);
		МенеджерXML.ДобавитьУзел(Узел, "issueDate", Документ.СправкаОНеполученииПособияОтОтцаДатаВыдачи,  Ложь, Истина);
		Возврат; // Фонд поддерживает только один узел refNpay. Остальные справки выгружаются в note.
	КонецЕсли;
	
	// Справка о неполучении пособия по другим местам работы.
	Если ЗначениеЗаполнено(Документ.СправкаОНеполученииПособияПоДругомуМестуРаботыНомер)
		Или ЗначениеЗаполнено(Документ.СправкаОНеполученииПособияПоДругомуМестуРаботыДатаВыдачи) Тогда
		Узел = МенеджерXML.ДобавитьУзел(УзелДанных, "refNpay");
		МенеджерXML.ДобавитьУзел(Узел, "refType",   3);
		МенеджерXML.ДобавитьУзел(Узел, "num",       Документ.СправкаОНеполученииПособияПоДругомуМестуРаботыНомер,       Ложь, Истина);
		МенеджерXML.ДобавитьУзел(Узел, "issueDate", Документ.СправкаОНеполученииПособияПоДругомуМестуРаботыДатаВыдачи,  Ложь, Истина);
		Возврат; // Фонд поддерживает только один узел refNpay. Остальные справки выгружаются в note.
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьПрочиеСведенияОтпускаПоУходу(Документ, МенеджерXML, УзелДанных, Особенности)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение = Неопределено, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	МенеджерXML.ДобавитьУзел(УзелДанных, "childSer", Документ.РебенокОчередность, Ложь, Истина);
	МенеджерXML.ДобавитьУзел(УзелДанных, "motherOut", Документ.НаличиеРешенияСудаОЛишенииПрав);
	Если Документ.РаботаНаДому <> "" Тогда
		МенеджерXML.ДобавитьУзел(УзелДанных, "homeWorkInfo", Документ.РаботаНаДому);
	КонецЕсли;
	Если Документ.РебенокОчередность > 1
		Или Документ.НаличиеСвидетельстваОСмертиПредыдущихДетей
		Или Документ.НаличиеДокументовОРожденииПредыдущихДетей Тогда
		// Наличие документа о другом ребенке.
		Узел = МенеджерXML.ДобавитьУзел(УзелДанных, "otherChild");
		// Наличие документа о другом ребенке\детей: о рождении(усыновлении).
		МенеджерXML.ДобавитьУзел(Узел, "otherChildFlagBirth", Число(Документ.НаличиеДокументовОРожденииПредыдущихДетей));
		// Наличие документа о другом ребенке\детей: о смерти.
		МенеджерXML.ДобавитьУзел(Узел, "otherChildFlagDeath", Число(Документ.НаличиеСвидетельстваОСмертиПредыдущихДетей));
	КонецЕсли;
	Если Особенности.Версия_2_41 Тогда
		МенеджерXML.ДобавитьУзел(УзелДанных, "expirationDate", Документ.ВходящийСрокОтвета, Истина, Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура ВыгрузитьИзвещение(Документ, МенеджерXML, УзелДанных)
	
	// Данные извещения по прямым выплатам.
	Если ЗначениеЗаполнено(Документ.ИзвещениеФССДата) И ЗначениеЗаполнено(Документ.ИзвещениеФССНомер) Тогда
		УзелИзвещение = МенеджерXML.ДобавитьУзел(УзелДанных, "notice");
		МенеджерXML.ДобавитьУзел(УзелИзвещение, "num",  Документ.ИзвещениеФССНомер);
		МенеджерXML.ДобавитьУзел(УзелИзвещение, "date", Документ.ИзвещениеФССДата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьАдрес(МенеджерXML, УзелАдреса, Документ, ИмяПоляАдрес, ИмяУзлаИндекс, ИмяУзлаФИАСXML)
	// Минимизация числа идентификаторов в выгрузке чтобы уменьшить расходы на проверку.
	УзелФИАС = МенеджерXML.ДобавитьУзел(УзелАдреса, ИмяУзлаФИАСXML);
	Если ЗначениеЗаполнено(Документ[ИмяПоляАдрес + "ФИАСДом"]) Тогда
		МенеджерXML.ДобавитьУзел(УзелФИАС, "common:houseGuid", Документ[ИмяПоляАдрес + "ФИАСДом"]);
	Иначе
		МенеджерXML.ДобавитьУзел(УзелФИАС, "common:guid",     Документ[ИмяПоляАдрес + "ФИАСРО"]);
		МенеджерXML.ДобавитьУзел(УзелФИАС, "common:house",    Документ[ИмяПоляАдрес + "Дом"],    Истина);
		МенеджерXML.ДобавитьУзел(УзелФИАС, "common:building", Документ[ИмяПоляАдрес + "Корпус"], Истина);
	КонецЕсли;
	МенеджерXML.ДобавитьУзел(УзелФИАС,   "common:flat",       Документ[ИмяПоляАдрес + "Квартира"], Истина);
	МенеджерXML.ДобавитьУзел(УзелАдреса, ИмяУзлаИндекс, Документ[ИмяПоляАдрес + "Индекс"]);
КонецПроцедуры

#КонецОбласти

#Область ПриЗаполненииПараметровОтправки

Функция ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключенияПриПроведении)
	СтрокаОтправки.Ошибки = ПолучитьСообщенияПользователю(Истина);
	
	Количество = СтрокаОтправки.Ошибки.Количество();
	Если Количество = 1 Тогда
		СтрокаОтправки.Результат = СтрокаОтправки.Ошибки[0].Текст;
	ИначеЕсли Количество > 1 Тогда
		СтрокаОтправки.Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 ошибка заполнения;;%1 ошибки заполнения;%1 ошибок заполнения;';
				|en = ';%1 filling error;;%1 filling errors;%1 filling errors;'"),
			Количество);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстИсключенияПриПроведении) Тогда
		Если СтрокаОтправки.Результат = "" Тогда
			СтрокаОтправки.Результат = СтрШаблон(НСтр("ru = 'Ошибка проведения: %1';
														|en = 'Posting error: %1'"), ТекстИсключенияПриПроведении);
		Иначе
			СтрокаОтправки.Результат = СтрокаОтправки.Результат + ";" + Символы.ПС + СтрШаблон(НСтр("ru = 'И ошибка проведения: %1';
																									|en = 'And posting error: %1'"), ТекстИсключенияПриПроведении);
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти

Функция ИменаПолейТребуемыхКадровыхДанных() Экспорт
	ИменаПолей = 
	"ФизическоеЛицо,
	|Фамилия,
	|Имя,
	|Отчество,
	|ДатаРождения,
	|Страна,
	|Пол,
	|ИНН,
	|СтраховойНомерПФР,
	|ДокументВид,
	|ДокументСерия,
	|ДокументНомер,
	|ДокументДатаВыдачи,
	|ДокументКемВыдан,
	|ДокументСрокДействия,
	|СтатусНалогоплательщика,
	|ВидЗанятости,
	|РайонныйКоэффициентРФ,
	|ЛьготаПриНачисленииПособий,
	|ОтношениеКОсобойЗоне,
	|ВидОсобойЗоны";
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		ИменаПолей = ИменаПолей + 
		",
		|ДатаНачала,
		|ДатаОкончания,
		|ДоляНеполногоРабочегоВремени,
		|СрочныйДоговор";
	КонецЕсли;
	
	Возврат ИменаПолей;
КонецФункции

Функция УбратьПробелы(Строка, УбратьТире = Истина)
	Возврат СтроковыеФункцииБЗККлиентСервер.УбратьПробелы(Строка, УбратьТире);
КонецФункции

Функция КоличествоОжидаемыхСообщений(ГоловнаяОрганизация, Организации) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК Регистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Регистрации.ГоловнаяОрганизация = Организации.Ссылка
	|ГДЕ
	|	Регистрации.Состояние = &Отправлен
	|	И Регистрации.ДатаОтправки > &ДатаНачалаАктуальности
	|	И Регистрации.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И Организации.Ссылка В(&Организации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК Регистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Регистрации.ГоловнаяОрганизация = Организации.Ссылка
	|ГДЕ
	|	Регистрации.Состояние = &ОтправленОператору
	|	И Регистрации.ДатаОтправкиОператору > &ДатаНачалаАктуальности
	|	И Регистрации.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И Организации.Ссылка В(&Организации)";
	
	Запрос.УстановитьПараметр("Отправлен", Перечисления.СостоянияДокументаСЭДОФСС.Отправлен);
	Запрос.УстановитьПараметр("ОтправленОператору", Перечисления.СостоянияДокументаСЭДОФСС.ОтправленОператору);
	Запрос.УстановитьПараметр("ДатаНачалаАктуальности", ДатаНачалаАктуальности());
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Регистрации.ГоловнаяОрганизация = &ГоловнаяОрганизация", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организации) Тогда
		Запрос.УстановитьПараметр("Организации", Организации);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Регистрации.ГоловнаяОрганизация = Организации.Ссылка", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Организации.Ссылка В(&Организации)", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
КонецФункции

Функция ДатаНачалаАктуальности()
	Возврат НачалоДня(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
КонецФункции

Функция КодыМВДРазрешенияНаПроживание() Экспорт
	Возврат "12,15,19,61,62,63";
КонецФункции

Функция ОписаниеПодписейДокумента() Экспорт 
	ОписаниеПодписей = ПодписиДокументов.ОписаниеТаблицыПодписей();
	
	ОписаниеРеквизитов = ПодписиДокументов.ОписаниеРеквизитовПодписанта();
	ОписаниеРеквизитов.ФизическоеЛицо   = "Составитель";
	ОписаниеРеквизитов.Должность        = "СоставительДолжность";
	ОписаниеРеквизитов.ОснованиеПодписи = "СоставительОснованиеПодписи";
	
	ПереопределяемыеИмена = Новый Соответствие;
	ПереопределяемыеИмена.Вставить("ПредставительСФР", ОписаниеРеквизитов);
	
	ПодписиДокументов.ДобавитьОписаниеПодписейОрганизации(ОписаниеПодписей, "ПредставительСФР", ПереопределяемыеИмена);
	
	Возврат ОписаниеПодписей;
КонецФункции

Процедура ОбновитьДанныеПодписи(ПараметрыОбновления) Экспорт
	СЭДОФСС.ЗаполнитьРеквизитыПодписиДокументовСЭДО(
		ПараметрыОбновления, "ОтветНаЗапросФССДляРасчетаПособия", ОписаниеПодписейДокумента());
КонецПроцедуры

#КонецОбласти

#КонецЕсли
