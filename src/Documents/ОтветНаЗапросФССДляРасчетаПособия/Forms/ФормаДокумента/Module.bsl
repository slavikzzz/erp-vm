///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		// Заполнение ключевых реквизитов из параметров.
		Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			Параметры.Свойство("Сотрудник", Объект.Сотрудник);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				УстановитьПривилегированныйРежим(Истина);
				КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(Ложь, Объект.Сотрудник, "Организация", ТекущаяДатаСеанса());
				УстановитьПривилегированныйРежим(Ложь);
				Если КадровыеДанные <> Неопределено Тогда
					Объект.Организация = КадровыеДанные.Организация;
				КонецЕсли;
			Иначе
				Параметры.Свойство("Организация", Объект.Организация);
			КонецЕсли;
		КонецЕсли;
		// Заполнение ключевых реквизитов из умолчаний.
		ЗначенияДляЗаполнения = Новый Структура;
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		КонецЕсли;
		Если ЗначенияДляЗаполнения.Количество() > 0 Тогда
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		КонецЕсли;
		// Заполнение второстепенных реквизитов.
		ПриПолученииДанныхНаСервере();
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Организация)
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЗарплатаКадрыБазовая")
		И Не ТолькоПросмотр Тогда
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Модифицированность = Истина;
			ОбновитьВторичныеДанныеНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	СЭДОФСС.ПриСозданииФормыЗапросаИлиОтветаДляРасчетаПособия(ЭтотОбъект, Ложь);
	
	Если Параметры.ПоказатьОшибкиОтправки Тогда
		Объект.ОтключитьПроверкиПроведения = Ложь;
		ПроверитьЗаполнение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТекстЗапросаXML = ТекущийОбъект.ХранилищеXML.Получить();
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_НастройкиПрямыхВыплатФСССотрудников"
		И Параметр.ФизическоеЛицо = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_ОтветНаЗапросФССДляРасчетаПособия"
		И (Источник = Объект.Ссылка Или Не ЗначениеЗаполнено(Источник)) Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_РегистрацииОтветовНаЗапросыФССДляРасчетаПособий"
		И (Источник = Объект.Ссылка Или Не ЗначениеЗаполнено(Источник)) Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_СведенияОЗастрахованномЛицеФСС" Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_НастройкиПрямыхВыплатФССОрганизаций"
		И Параметр.ГоловнаяОрганизация = Объект.ГоловнаяОрганизация Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеСчетаКонтрагентов" Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеКартыКонтрагентов"
		И Источник = Объект.КартаМИР Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_БольничныйЛист"
		Или ИмяСобытия = "Запись_ОтпускПоУходуЗаРебенком"
		Или ИмяСобытия = "Запись_Отпуск"
		Или ИмяСобытия = "Запись_ЗаявлениеСотрудникаНаВыплатуПособия"
		Или ИмяСобытия = "Запись_РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий"
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеОтправкиПодтвержденияПолучения() Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	СЭДОФСС.СвертываемыеГруппыОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	// До проверки объекта создаем его, дозаполняем и сами проверяем.
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Если Не Объект.ОтключитьПроверкиПроведения Тогда
			Отказ = Истина;
		КонецЕсли;
		ОбработатьСообщенияПользователю();
	КонецЕсли;
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекстЗапросаXML = ТекущийОбъект.ХранилищеXML.Получить();
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Ложь);
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтотОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, ЭтотОбъект.Объект);
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	
	ОбновитьЭлементыФормы();
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОтветНаЗапросФССДляРасчетаПособия", ПараметрыЗаписи, Объект.Ссылка);
	СЭДОФССКлиент.ОповеститьОНеобходимостиОбновитьТекущиеДела();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидПособияПриИзменении(Элемент)
	Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(Элемент.Имя, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере("СотрудникПриИзменении");
КонецПроцедуры

&НаКлиенте
Процедура ПервичныйДокументПриИзменении(Элемент)
	ПервичныйДокументПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВходящийЗапросПриИзменении(Элемент)
	ВходящийЗапросПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетУДанныхВходящегоЗапросаЧисломПриИзменении(Элемент)
	ПриоритетУДанныхВходящегоЗапросаЧисломПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РебенокПриИзменении(Элемент)
	Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(Элемент.Имя, Истина, ЗначениеЗаполнено(Объект.Ребенок));
КонецПроцедуры

&НаКлиенте
Процедура СотрудникГражданствоПриИзменении(Элемент)
	СотрудникГражданствоПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособВыплатыПособияПриИзменении(Элемент)
	СпособВыплатыПособияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	БанкПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АдресПроживанияВидПриИзменении(Элемент)
	АдресПроживанияВидПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИнаяОрганизацияБИКПриИзменении(Элемент)
	ИнаяОрганизацияБИКПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИнаяОрганизацияБанкПриИзменении(Элемент)
	ИнаяОрганизацияБанкПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиСерияПриИзменении(Элемент)
	Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиНомерПриИзменении(Элемент)
	Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтказВНазначенииПособияПриИзменении(Элемент)
	ОтказВНазначенииПособияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтказВНазначенииПособияПричинаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект." + Элемент.Имя,
		НСтр("ru = 'Причина отказа в назначении пособия';
			|en = 'Reason for refusing benefit granting'"));
КонецПроцедуры

&НаКлиенте
Процедура АдресРегистрацииЗаПределамиРФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект." + Элемент.Имя,
		НСтр("ru = 'Адрес регистрации за пределами РФ';
			|en = 'Registration address outside the Russian Federation'"));
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеПриИзменении(Элемент)
	ИсправлениеПриИзмененииСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеКодПричиныПриИзменении(Элемент)
	ИсправлениеКодПричиныПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеОписаниеПричиныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Примечание", Элемент.ПодсказкаВвода);
КонецПроцедуры

&НаКлиенте
Процедура ПримечаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Обработчик = Новый ОписаниеОповещения("ПримечаниеЗавершениеВыбора", ЭтотОбъект);
	ПоказатьФормуРедактированияКомментария(Элемент, Обработчик, "Объект.Примечание");
КонецПроцедуры

&НаКлиенте
Процедура ПримечаниеПриИзменении(Элемент)
	ОбновитьЭлементыШапки();
КонецПроцедуры

&НаКлиенте
Процедура СправкаОНеполученииПособияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Обработчик = Новый ОписаниеОповещения("СправкаОНеполученииПособияПредставлениеЗавершениеВыбора", ЭтотОбъект);
	ПоказатьФормуРедактированияКомментария(Элемент, Обработчик, "Объект." + Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СправкаОНеполученииПособияПредставлениеПриИзменении(Элемент)
	Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументПроведенИОтправленОбработкаНавигационнойСсылки(Элемент, Адрес, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Измерения = Новый Структура("ИсходящийДокумент", Объект.Ссылка);
	ПараметрыЗаписи = Новый Массив(1);
	ПараметрыЗаписи[0] = Измерения;
	КлючРегистра = Новый(Тип("РегистрСведенийКлючЗаписи.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий"), ПараметрыЗаписи);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", КлючРегистра);
	ОткрытьФорму(
		"РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ФормаЗаписи",
		ПараметрыФормы,
		,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура УстановленаУтратаТрудоспобностиПриИзменении(Элемент)
	Объект.УтратаТрудоспобности = ?(УстановленаУтратаТрудоспобности,
		Элементы.УтратаТрудоспобности.СписокВыбора[0].Значение,
		"");
	Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РазрешениеНаПроживаниеВидАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Или Не ЗначениеЗаполнено(Текст) Тогда
		// Событие было вызвано для формирования списка быстрого выбора.
		// Несмотря на СтандартнаяОбработка = Ложь, СписокВыбора из свойств поля все равно будет показан.
		// Добавлять к нему ничего не требуется.
		СтандартнаяОбработка = Ложь;
	Иначе
		// Событие было вызвано при вводе текста.
		СписокДляПодбора = Новый СписокЗначений;
		Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
			Если СтрНайти(ЭлементСписка.Представление, Текст) > 0 Тогда
				ЗаполнитьЗначенияСвойств(СписокДляПодбора.Добавить(), ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокДляПодбора;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусНалогоплательщикаПриИзменении(Элемент)
	СтатусНалогоплательщикаПриИзмененииНаСервере();
КонецПроцедуры

// Обработчик подсистемы "ПодписиДокументов".
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент) 
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
	СоставительПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент) 
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец Обработчик подсистемы "ПодписиДокументов".

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыИсключаемыеПериоды

&НаКлиенте
Процедура ИсключаемыеПериодыПриИзменении(Элемент)
	Объект.АвтозаполнениеПериодовОплаты = Ложь;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПериодыПростоя

&НаКлиенте
Процедура ПериодыПростояПриИзменении(Элемент)
	Объект.АвтозаполнениеПериодовОплаты = Ложь;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПриостановленияТрудовыхДоговоров

&НаКлиенте
Процедура ПриостановленияТрудовыхДоговоровПриИзменении(Элемент)
	Объект.АвтозаполнениеПериодовОплаты = Ложь;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеИсправления(Команда) 
	ОтменитьВсеИсправленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияСотрудника(Команда)
	СотрудникПриИзмененииНаСервере("ОтменитьИсправленияСотрудника");
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзмененияСпособаВыплатыПособия(Команда)
	ОтменитьИзмененияСпособаВыплатыПособияНаСервере();
КонецПроцедуры

#КонецОбласти

#Область Сотрудники

&НаКлиенте
Процедура Подключаемый_ПояснениеНажатие(Элемент, СтандартнаяОбработка = Ложь)
	СотрудникиКлиент.ПояснениеНажатие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИзменитьАдресРегистрации(Команда)
	Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ФизическоеЛицо);
		ПараметрыФормы.Вставить("ВводАдреса", Истина);
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
	Иначе
		Подключаемый_ПолеВводаКонтактнойИнформацииНачалоВыбора(Элементы.АдресПроживанияПредставление, Неопределено, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСпособВыплатыПособия(Команда)
	УчетПособийСоциальногоСтрахованияКлиент.НастроитьСпособПрямыхВыплатФизическогоЛица(
		Объект.Организация,
		Объект.ФизическоеЛицо,
		ЭтотОбъект,
		Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПроверкиПроведения(Команда)
	Объект.ОтключитьПроверкиПроведения = Не Объект.ОтключитьПроверкиПроведения;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВопросВПоддержку(Команда)
	
	ВопросВПоддержку = ПодготовитьВопросВПоддержку();
	
	//   *КодОшибки - Строка - идентификатор ошибки при отправки:
	//   *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
	//   *URLСтраницы - Строка - URL страницы отправки сообщения.
	Если Не ЗначениеЗаполнено(ВопросВПоддержку.КодОшибки) Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаголовокОкна", НСтр("ru = 'Отправка сообщения в службу технической поддержки';
														|en = 'Send message to technical support.'"));
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницуСДополнительнымиПараметрами(
			ВопросВПоддержку.URLСтраницы,
			ПараметрыОткрытия);
	Иначе
		ИнформированиеПользователяКлиент.ПоказатьПодробности(ВопросВПоддержку.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если Записать() Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВозможностьРедактирования(Команда)
	ВключитьВозможностьРедактированияНаСервере();
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Свойства

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

&НаСервере
Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ПараметрыФиксации = Документы.ОтветНаЗапросФССДляРасчетаПособия.ПараметрыФиксацииВторичныхДанных(Объект);
	ПараметрыФиксации.Вставить("ОписаниеФормы", ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеФормы());
	
	ОписаниеЭлементовФормы = Новый Соответствие;
	ОписаниеПутиКРеквизитамОбъекта = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ОписаниеПутиКРеквизитамОбъекта.ПрефиксПути = "Объект";
	Для Каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеПутиКРеквизитамОбъекта);
	КонецЦикла;
	ОписаниеЭлементовФормы.Вставить("ИнаяОрганизацияБанк", ОписаниеПутиКРеквизитамОбъекта);
	ОписаниеЭлементовФормы.Вставить("УстановленаУтратаТрудоспобности", ОписаниеПутиКРеквизитамОбъекта);
	
	// Адреса редактируется через реквизит формы, поэтому для них указываются пустой префикс пути к объекту.
	ОписаниеПутиКРеквизитамФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ИнициализироватьПоляВводаКонтактнойИнформации();
	Для Каждого КлючИЗначение Из ПоляВводаКонтактнойИнформации Цикл
		ОписаниеЭлементовФормы.Вставить(КлючИЗначение.Ключ, ОписаниеПутиКРеквизитамФормы);
	КонецЦикла;
	
	ПараметрыФиксации.ОписаниеФормы.ОписаниеЭлементовФормы = ОписаниеЭлементовФормы;
	Возврат ПараметрыФиксации;
КонецФункции

&НаСервере
Функция ФиксацияБыстрыйПоискРеквизитов()
	БыстрыйПоискРеквизитов = Новый Соответствие; // Ключ - имя элемента, значение - имя реквизита.
	ПараметрыФиксации = ЭтотОбъект["ПараметрыФиксацииВторичныхДанных"];
	Для Каждого КлючИЗначение Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ИмяРеквизита = КлючИЗначение.Значение.ИмяРеквизита;
		// Поиск элементов по имени.
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
			БыстрыйПоискРеквизитов.Вставить(ИмяРеквизита, ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	БыстрыйПоискРеквизитов.Вставить("ИнаяОрганизацияБанк", "ИнаяОрганизацияБИК");
	БыстрыйПоискРеквизитов.Вставить("УстановленаУтратаТрудоспобности", "УтратаТрудоспобности");
	БыстрыйПоискРеквизитов.Вставить("ПриоритетУДанныхВходящегоЗапросаЧислом", "ПриоритетУДанныхВходящегоЗапроса");
	Возврат БыстрыйПоискРеквизитов;
КонецФункции

&НаСервере
Процедура ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения(ОснованиеЗаполнения, ТекущаяСтрока = 0)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, ОснованиеЗаполнения, ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ФиксацияЗаполнитьРеквизитыОбъекта(Знач ИмяСобытия = "")
	Если ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗаполнитьИдентификаторыСтрок(ЭтотОбъект);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ДокументОбъект);
	
	ЕстьИзменения = Ложь;
	Если ИмяСобытия = "ОтменитьВсеИсправления" И ДокументОбъект.ФиксацияИзменений.Количество() > 0 Тогда
		ДокументОбъект.ФиксацияИзменений.Очистить();
		ЕстьИзменения = Истина;
	КонецЕсли;
	Если ДокументОбъект.ОбновитьВторичныеДанные(ЭтотОбъект.ПараметрыФиксацииВторичныхДанных) Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		Если ТолькоПросмотр Или Не ПравоДоступа("Изменение", ДокументОбъект.Метаданные()) Тогда
			ФиксацияВторичныхДанныхВДокументахФормы.ВывестиПредупреждениеОНаличииИзмененийВИсходныхДанныхКоторыеНельзяПрименить(
				ЭтотОбъект);
		Иначе
			Если Не ДокументОбъект.ЭтоНовый() Тогда
				ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Истина);
			КонецЕсли;
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, Объект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(ИмяЭлемента, ОбновлятьВторичныеДанные = Ложь, СброситьФиксациюДочерних = Ложь)
	Элемент = Элементы[ИмяЭлемента];
	Если    ИмяЭлемента = "СправкаОНеполученииПособияОтМатериНомер"
		Или ИмяЭлемента = "СправкаОНеполученииПособияОтМатериДатаВыдачи"
		Или ИмяЭлемента = "СправкаОНеполученииПособияОтОтцаНомер"
		Или ИмяЭлемента = "СправкаОНеполученииПособияОтОтцаДатаВыдачи"
		Или ИмяЭлемента = "СправкаОНеполученииПособияПоДругомуМестуРаботыНомер"
		Или ИмяЭлемента = "СправкаОНеполученииПособияПоДругомуМестуРаботыДатаВыдачи"
		Или ИмяЭлемента = "ВидДоговораТрудовой"
		Или ИмяЭлемента = "ВидДоговораГПХ" Тогда
		ОбновлятьВторичныеДанные = Истина;
	КонецЕсли;
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(ЭтотОбъект, Элемент, ОписаниеЭлементов);
	Если ОбновлятьВторичныеДанные Тогда
		Если СброситьФиксациюДочерних Тогда
			ИмяРеквизита = ОписаниеЭлементов.Получить(Элемент.Имя);
			ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения(ИмяРеквизита);
		КонецЕсли;
		ОбновитьВторичныеДанныеНаСервере();
	Иначе
		ОбновитьЭлементыФормы();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	Возврат Документы.ОтветНаЗапросФССДляРасчетаПособия.ОбъектЗафиксирован(Объект);
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

&НаСервере
Процедура ОбновитьЭлементыКонтактнойИнформации()
	ИнициализироватьПоляВводаКонтактнойИнформации();
	Для Каждого КлючИЗначение Из ПоляВводаКонтактнойИнформации Цикл
		ИмяРеквизитаФормы = КлючИЗначение.Ключ;
		Если ИмяРеквизитаФормы = "БыстрыйПоискРеквизитовФормы" Тогда
			Продолжить;
		КонецЕсли;
		Реквизит          = КлючИЗначение.Значение;
		Если Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			КонтактнаяИнформацияБЗК.ОбновитьПолеВводаАдреса(ЭтотОбъект, ИмяРеквизитаФормы, Объект[Реквизит.Имя]);
		ИначеЕсли Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			КонтактнаяИнформацияБЗК.ОбновитьПолеВводаТелефона(ЭтотОбъект, ИмяРеквизитаФормы, Объект[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПоляВводаКонтактнойИнформации()
	Если ПоляВводаКонтактнойИнформации <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	// ПоляВводаКонтактнойИнформации - Структура
	//   * Ключ     - Строка    - Имя реквизита формы.
	//   * Значение - Структура - Свойства реквизита объекта.
	//       * Имя - Строка - Имя реквизита объекта хранящего значение контактной информации.
	//       * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
	//       * Вид - Строка - Имя предопределенного вида контактной информации.
	ПоляВводаКонтактнойИнформации = Новый Структура;
	БыстрыйПоискРеквизитовФормы = Новый Структура;
	
	Реквизит = ОписаниеРеквизитаКонтактнойИнформации();
	Реквизит.Имя = "АдресПроживания";
	Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Реквизит.Вид = "Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица";
	ПоляВводаКонтактнойИнформации.Вставить(Реквизит.Имя + "Представление", Реквизит);
	БыстрыйПоискРеквизитовФормы.Вставить(Реквизит.Имя, Реквизит.Имя + "Представление");
	
	Реквизит = ОписаниеРеквизитаКонтактнойИнформации();
	Реквизит.Имя = "АдресРегистрации";
	Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Реквизит.Вид = "Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица";
	ПоляВводаКонтактнойИнформации.Вставить(Реквизит.Имя + "Представление", Реквизит);
	БыстрыйПоискРеквизитовФормы.Вставить(Реквизит.Имя, Реквизит.Имя + "Представление");
	
	Реквизит = ОписаниеРеквизитаКонтактнойИнформации();
	Реквизит.Имя = "СотрудникТелефон";
	Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Реквизит.Вид = "Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица";
	ПоляВводаКонтактнойИнформации.Вставить(Реквизит.Имя + "Представление", Реквизит);
	БыстрыйПоискРеквизитовФормы.Вставить(Реквизит.Имя, Реквизит.Имя + "Представление");
	
	ПоляВводаКонтактнойИнформации.Вставить("БыстрыйПоискРеквизитовФормы", БыстрыйПоискРеквизитовФормы);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеРеквизитаКонтактнойИнформации()
	Возврат Новый Структура("Имя, Тип, Вид");
КонецФункции

&НаСервере
Процедура АдаптироватьСообщениеПользователюКПолямВводаКонтактнойИнформации(Сообщение)
	Если ЗначениеЗаполнено(Сообщение.Поле)
		И СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Сообщение.Поле)
		И ПоляВводаКонтактнойИнформации.БыстрыйПоискРеквизитовФормы.Свойство(Сообщение.Поле) Тогда
		Сообщение.Поле = ПоляВводаКонтактнойИнформации.БыстрыйПоискРеквизитовФормы[Сообщение.Поле];
		Сообщение.ПутьКДанным = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаКонтактнойИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Реквизит = ПоляВводаКонтактнойИнформации[Элемент.Имя];
	Оповещение = Новый ОписаниеОповещения("ПолеВводаКонтактнойИнформацииЗавершениеВыбора", ЭтотОбъект, Реквизит);
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПредопределенноеЗначение(Реквизит.Вид),
		Объект[Реквизит.Имя]);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКонтактнойИнформацииЗавершениеВыбора(РезультатВыбора, Реквизит) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("Структура")Тогда
		Объект[Реквизит.Имя] = РезультатВыбора.Значение;
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, Реквизит.Имя);
		ФиксацияЗаполнитьРеквизитыОбъекта();
		ОбновитьЭлементыФормы();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СвертываемыеГруппы

&НаСервере
Процедура ПриОпределенииСвертываемыхГрупп(Группы) Экспорт
	// I. Группы, аналогичные документу ВходящийЗапросФССДляРасчетаПособия.
	Группы.Добавить(Элементы.СведенияОЗастрахованномЛицеГруппа);
	Группы.Добавить(Элементы.АдресРегистрацииГруппа);
	Группы.Добавить(Элементы.УдостоверениеЛичностиГруппа);
	Группы.Добавить(Элементы.РазрешениеНаПроживаниеГруппа);
	Группы.Добавить(Элементы.ВидДоговораГруппа);
	Группы.Добавить(Элементы.СрочныйТрудовойДоговорГруппа);
	Группы.Добавить(Элементы.ЛьготыГруппа);
	Группы.Добавить(Элементы.УсловияИсчисленияГруппа);
	Группы.Добавить(Элементы.ДанныеДляРасчетаГруппа);
	Группы.Добавить(Элементы.ПараметрыНазначенияГруппа);
	Группы.Добавить(Элементы.ОтпускПоУходуГруппа);
	Группы.Добавить(Элементы.ЗаменаПослеродовогоОтпускаГруппа);
	Группы.Добавить(Элементы.ДокументОРожденииГруппа);
	Группы.Добавить(Элементы.РебенокГруппа);
	Группы.Добавить(Элементы.СправкаОтДругогоРодителяГруппа);
	Группы.Добавить(Элементы.СправкаОНеполученииПособияГруппа);
	Группы.Добавить(Элементы.УсыновлениеОпекаГруппа);
	Группы.Добавить(Элементы.ПередачаНаВоспитаниеГруппа);
	Группы.Добавить(Элементы.СпособВыплатыГруппа);
	Группы.Добавить(Элементы.ИсключаемыеПериодыГруппа);
	Группы.Добавить(Элементы.ПериодыПростояГруппа);
	Группы.Добавить(Элементы.ПриостановленияТрудовыхДоговоровГруппа);
	Группы.Добавить(Элементы.ДокументыНСПЗГруппа);
	Группы.Добавить(Элементы.ИзвещениеФССГруппа);
	Группы.Добавить(Элементы.СтраховательГруппа);
	Группы.Добавить(Элементы.ПерерасчетГруппа);
	// II. Группы, которых нет в документе ВходящийЗапросФССДляРасчетаПособия.
	Группы.Добавить(Элементы.СоставительГруппа);
	Группы.Добавить(Элементы.ИсправлениеГруппа);
	Группы.Добавить(Элементы.ОтказВНазначенииПособияГруппа);
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияЭлементовСвертываемыхГрупп() Экспорт
	ГруппаСпособовВыплаты = Элементы.СпособВыплатыГруппа.Родитель;
	Элементы.Переместить(Элементы.ИзменитьСпособВыплатыПособий, ГруппаСпособовВыплаты.ПодчиненныеЭлементы[0]);
	ГруппаАдресаРегистрации = Элементы.АдресРегистрацииГруппа.Родитель;
	Элементы.Переместить(Элементы.ИзменитьАдрес, ГруппаАдресаРегистрации.ПодчиненныеЭлементы[0]);
КонецПроцедуры

&НаСервере
Процедура ПриОпределенииСвойствСвертываемойГруппы(Группа, Представление, Заполнена, Развернута, Видимость) Экспорт
	
	// I. Группы, аналогичные документу ВходящийЗапросФССДляРасчетаПособия.
	Если Группа = Элементы.СведенияОЗастрахованномЛицеГруппа Тогда
		Видимость = Не Объект.ОтказВНазначенииПособия;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеЗастрахованногоЛица();
		
	ИначеЕсли Группа = Элементы.АдресРегистрацииГруппа Тогда
		Видимость = Не Объект.ОтказВНазначенииПособия;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеАдреса("АдресРегистрации", Истина);
		
	ИначеЕсли Группа = Элементы.УдостоверениеЛичностиГруппа Тогда
		Видимость = Не Объект.ОтказВНазначенииПособия;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = СЭДОФСС.ПредставлениеУдостоверенияЛичности(
			Объект.УдостоверениеЛичностиВид,
			Объект.УдостоверениеЛичностиСерия,
			Объект.УдостоверениеЛичностиНомер,
			Объект.УдостоверениеЛичностиДатаВыдачи,
			Объект.УдостоверениеЛичностиСрокДействия,
			Объект.УдостоверениеЛичностиКемВыдан);
		
	ИначеЕсли Группа = Элементы.РазрешениеНаПроживаниеГруппа Тогда
		ОбновитьЭлементыГруппыРазрешениеНаПроживание(Группа, Представление, Заполнена, Развернута, Видимость);
		
	ИначеЕсли Группа = Элементы.ВидДоговораГруппа Тогда
		ОбновитьЭлементыГруппыВидДоговора(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.СрочныйТрудовойДоговорГруппа Тогда
		ОбновитьЭлементыГруппыСрочныйТрудовойДоговор(Группа, Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ЛьготыГруппа Тогда
		ОбновитьЭлементыГруппыЛьготы(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.УсловияИсчисленияГруппа Тогда
		ОбновитьЭлементыГруппыУсловияИсчисления(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ДанныеДляРасчетаГруппа Тогда
		ОбновитьЭлементыГруппыДанныеДляРасчета(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ПараметрыНазначенияГруппа Тогда
		ОбновитьЭлементыГруппыПараметрыНазначения(Группа, Представление, Заполнена, Развернута, Видимость);
		
	ИначеЕсли Группа = Элементы.ОтпускПоУходуГруппа Тогда
		ОбновитьЭлементыГруппыОтпускПоУходу(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ЗаменаПослеродовогоОтпускаГруппа Тогда
		ОбновитьЭлементыГруппыЗаменаПослеродовогоОтпуска(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ДокументОРожденииГруппа Тогда
		ОбновитьЭлементыГруппыДокументОРождении(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.РебенокГруппа Тогда
		ОбновитьЭлементыГруппыРебенок(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.СправкаОтДругогоРодителяГруппа Тогда
		ОбновитьЭлементыГруппыСправкаОтДругогоРодителя(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.СправкаОНеполученииПособияГруппа Тогда
		ОбновитьЭлементыГруппыСправкаОНеполученииПособия(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.УсыновлениеОпекаГруппа Тогда
		ОбновитьЭлементыГруппыУсыновлениеОпека(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ПередачаНаВоспитаниеГруппа Тогда
		ОбновитьЭлементыГруппыПередачаНаВоспитание(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.СпособВыплатыГруппа Тогда
		ОбновитьЭлементыГруппыСпособВыплаты(Видимость, Представление, Развернута);
		
	ИначеЕсли Группа = Элементы.ИсключаемыеПериодыГруппа Тогда
		Видимость = ЭтоОбычныйБольничный Или ЭтоНСПЗ;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		Заполнена = Объект.ИсключаемыеПериоды.Количество() > 0;
		Если Заполнена И Не Развернута Тогда
			Представление = ПредставлениеИсключаемыхПериодов();
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.ПериодыПростояГруппа Тогда
		ОбновитьЭлементыГруппыПериодыПростоя(Группа, Представление, Заполнена, Развернута, Видимость);
		
	ИначеЕсли Группа = Элементы.ПриостановленияТрудовыхДоговоровГруппа Тогда
		Видимость = ЭтоОбычныйБольничный Или ЭтоНСПЗ;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		Заполнена = Объект.ПриостановленияТрудовыхДоговоров.Количество() > 0;
		Если Заполнена И Не Развернута Тогда
			Представление = ПредставлениеПриостановленийТрудовыхДоговоров();
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.ДокументыНСПЗГруппа Тогда
		ОбновитьЭлементыГруппыДокументыНСПЗ(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ИзвещениеФССГруппа Тогда
		ОбновитьЭлементыГруппыИзвещениеФСС(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.СтраховательГруппа Тогда
		ОбновитьЭлементыГруппыСтрахователь(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ПерерасчетГруппа Тогда
		Представление = ПредставлениеПерерасчета();
		
	// II. Группы, которых нет в документе ВходящийЗапросФССДляРасчетаПособия.
	ИначеЕсли Группа = Элементы.СоставительГруппа Тогда
		ОбновитьЭлементыГруппыСоставитель(Группа, Представление, Заполнена, Развернута, Видимость);
		
	ИначеЕсли Группа = Элементы.ИсправлениеГруппа Тогда
		ОбновитьЭлементыГруппыИсправление(Видимость, Представление, Развернута);
		
	ИначеЕсли Группа = Элементы.ОтказВНазначенииПособияГруппа Тогда
		Видимость = Объект.ОтказВНазначенииПособия;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		Развернута    = Истина;
		Представление = ПредставлениеОтказаВНазначенииПособияГруппа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвернутьРазвернутьГруппу(Элемент)
	СвернутьРазвернутьГруппу(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура СвернутьРазвернутьГруппу(ИмяЭлемента)
	СЭДОФСС.СвернутьРазвернутьГруппу(ЭтотОбъект, ИмяЭлемента);
КонецПроцедуры

#КонецОбласти

#Область Форма

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект = "Объект")
	ПравоИзменения   = (Элементы.Найти("ФормаПровести") <> Неопределено);
	ПравоПолученияЭД = СЭДОФСС.ЕстьПравоПолучения();
	ПравоОтправкиЭД  = СЭДОФСС.ЕстьПравоОтправки();
	
	ПервичнаяИнициализицияФормы = (Элементы.УсловияИсчисленияКод1.СписокВыбора.Количество() = 0);
	Если ПервичнаяИнициализицияФормы Тогда
		// ЗарплатаКадрыПодсистемы.ПодписиДокументов
		ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект, Документы.ОтветНаЗапросФССДляРасчетаПособия.ОписаниеПодписейДокумента());
		// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод1);
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод2);
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод3);
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораТипРодственнойСвязи(Элементы.РебенокКодСвязи);
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораУтратаТрудоспобности(Элементы.УтратаТрудоспобности);
		СЭДОФСС.СписокВыбораКатегорийЗастрахованныхЛиц(Элементы.СотрудникКатегория.СписокВыбора);
		СЭДОФСС.СписокВыбораПричинИсправления(Элементы.ИсправлениеКодПричины.СписокВыбора);
		Если ЗначениеЗаполнено(Объект.ИсправлениеКодПричины)
			И Элементы.ИсправлениеКодПричины.СписокВыбора.НайтиПоЗначению(Объект.ИсправлениеКодПричины) = Неопределено Тогда
			Элементы.ИсправлениеКодПричины.СписокВыбора.Добавить(Объект.ИсправлениеКодПричины);
		КонецЕсли;
		Элементы.ПризнаниеСлучаяСтраховым.Заголовок = НСтр("ru = 'Признание страхового случая НС/ПЗ';
															|en = 'Recognition of the insured event as an industrial accident and occupational disease'");
		СписокВыбора = Элементы.ПризнаниеСлучаяСтраховым.СписокВыбора;
		СписокВыбора.Добавить(Перечисления.ПризнаниеСлучаяСтраховым.Признан, НСтр("ru = 'Признан';
																					|en = 'Recognized'"));
		СписокВыбора.Добавить(Перечисления.ПризнаниеСлучаяСтраховым.НеПризнан, НСтр("ru = 'Не признан';
																					|en = 'Not recognized'"));
		СписокВыбора.Добавить(Перечисления.ПризнаниеСлучаяСтраховым.ПустаяСсылка(), НСтр("ru = 'Неизвестно';
																						|en = 'Unknown'"));
		СЭДОФСС.НастроитьПолеВидУдостоверенияЛичности(
			Элементы.РазрешениеНаПроживаниеВид,
			Объект.РазрешениеНаПроживаниеВид,
			Документы.ОтветНаЗапросФССДляРасчетаПособия.КодыМВДРазрешенияНаПроживание());
	Иначе
		Документ = ?(ТекущийОбъект = "Объект", Объект, ТекущийОбъект);
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, Документ);
	КонецЕсли;
	
	ЗаполнитьИнаяОрганизацияБанк();
	
	ФиксацияВторичныхДанныхВДокументахФормы.ИнициализироватьМеханизмФиксацииРеквизитов(
		ЭтотОбъект,
		ТекущийОбъект,
		ПараметрыФиксацииВторичныхДанных());
	ФиксацияВторичныхДанныхВДокументахФормы.ПодключитьОбработчикиФиксацииИзмененийРеквизитов(
		ЭтотОбъект,
		ФиксацияБыстрыйПоискРеквизитов());
	
	ФиксацияЗаполнитьРеквизитыОбъекта();
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	
	ТолькоПросмотр = ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект);
	
	УстановитьФункциональныеОпцииФормы();
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные()
	ОтключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные");
	ПодключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьОбновитьВторичныеДанные()
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОбновитьВторичныеДанныеНаСервере()
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ОбновитьВторичныеДанныеНаСервере();
	Иначе
		Прочитать();
		Надпись = Элементы.Найти("ПредупреждениеОбновленияВторичныхДанных");
		Если Надпись <> Неопределено И Надпись.Видимость Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеНаСервере(Знач ИмяСобытия = "")
	ФиксацияЗаполнитьРеквизитыОбъекта(ИмяСобытия);
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеИсправленияНаСервере()
	Если ТолькоПросмотр Или Не ПравоДоступа("Изменение", Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия) Тогда
		ФиксацияВторичныхДанныхВДокументахФормы.ВывестиПредупреждениеОНаличииИзмененийВИсходныхДанныхКоторыеНельзяПрименить(
			ЭтотОбъект);
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	Объект.АвтозаполнениеПериодовОплаты = Истина;
	ОбновитьВторичныеДанныеНаСервере("ОтменитьВсеИсправления");
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы()
	
	ДокументЗафиксирован = ОбъектЗафиксирован();
	ТолькоПросмотр = ДокументЗафиксирован;
	
	Если Объект.ОтказВНазначенииПособия Тогда // Все - Ложь.
		СведенияОВидеПособия = СЭДОФСС.СведенияОВидеПособия(Неопределено);
	Иначе
		СведенияОВидеПособия = СЭДОФСС.СведенияОВидеПособия(Объект.ВидПособия);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СведенияОВидеПособия);
	
	Особенности = Документы.ОтветНаЗапросФССДляРасчетаПособия.ОсобенностиВыгрузки(Объект);
	
	ОбновитьВидимостьЭлементовПоПравам();
	
	ОбновитьКнопкиФормы(ДокументЗафиксирован);
	
	ОбновитьПанельСостоянияДокумента();
	
	ОбновитьПоляШапкиФормы();
	
	ОбновитьЭлементыКонтактнойИнформации();
	
	ОбновитьКнопкиСпособаВыплатыПособия();
	
	ОбновитьГруппуИзвещениеФСС();
	
	ОбновитьГруппуАдресРегистрации();
	
	СЭДОФСС.ОбновитьСвертываемыеГруппы(ЭтотОбъект);
	
	ОбновитьЭлементыШапки();
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументовКлиентСервер.УстановитьПредставлениеПодписей(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементовПоПравам()
	Права = СЭДОФСС.ПраваНаФактическиеНачисленияВДокументе(Объект);
	ПравоПросмотраФактическихНачислений = Права.Просмотр;
	ПравоИзмененияФактическихНачислений = Права.Редактирование;
	Элементы.ПервыйРасчетныйГодЗаработок.Видимость   = ПравоПросмотраФактическихНачислений;
	Элементы.ВторойРасчетныйГодЗаработок.Видимость   = ПравоПросмотраФактическихНачислений;
	Элементы.СреднемесячныйЗаработок.Видимость       = ПравоПросмотраФактическихНачислений;
	Элементы.ПервыйРасчетныйГодЗаработок.Доступность = ПравоИзмененияФактическихНачислений;
	Элементы.ВторойРасчетныйГодЗаработок.Доступность = ПравоИзмененияФактическихНачислений;
	Элементы.СреднемесячныйЗаработок.Доступность     = ПравоИзмененияФактическихНачислений;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиФормы(ДокументЗафиксирован)
	
	Элементы.ФормаОбновитьВторичныеДанные.Видимость           = Не ДокументЗафиксирован;
	Элементы.ФормаОтменитьВсеИсправления.Видимость            = Не ДокументЗафиксирован;
	Элементы.ОтменитьИзмененияКадровыхДанных.Видимость        = Не ДокументЗафиксирован;
	Элементы.ОтменитьИзмененияСпособаВыплатыПособия.Видимость = Не ДокументЗафиксирован;
	
	Если ПравоОтправкиЭД Тогда
		ДокументОтправлен = Не Объект.ПометкаУдаления И ЗначениеЗаполнено(Объект.ДатаОтправки);
		Элементы.ОтправитьВФонд.ТолькоВоВсехДействиях = ДокументОтправлен;
	КонецЕсли;
	
	Элементы.ФормаОтключитьПроверкиПроведения.Пометка = Объект.ОтключитьПроверкиПроведения;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельСостоянияДокумента()
	ПоложениеКнопкиЗакрыть     = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	ВидимостьКнопкиПроверить   = Ложь;
	КнопкаПоУмолчанию          = Неопределено;
	Если Объект.ПометкаУдаления Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументПомеченНаУдаление;
		Если ПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаЗаписать;
		КонецЕсли;
	ИначеЕсли Не Объект.Проведен Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументНеПроведен;
		Если ПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаПровести;
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументПроведенИНеОтправлен;
		Если ПравоОтправкиЭД Тогда
			КнопкаПоУмолчанию = Элементы.ОтправитьВФонд;
		КонецЕсли;
	Иначе
		СостояниеОтправки = СостояниеОтправки();
		Если СостояниеОтправки.ЕстьОшибки Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьОшибки;
			Элементы.НадписьДокументПроведенИЕстьОшибки.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ПравоИзменения Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		ИначеЕсли СостояниеОтправки.ЕстьПредупреждения Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьПредупреждения;
			Элементы.НадписьДокументПроведенИЕстьПредупреждения.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ПравоИзменения Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		Иначе
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИОтправлен;
			Элементы.НадписьДокументПроведенИОтправлен.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиЗакрыть = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			ВидимостьКнопкиПроверить = Истина;
			КнопкаПоУмолчанию = Элементы.ФормаЗакрыть;
		КонецЕсли;
	КонецЕсли;
	Если КнопкаПоУмолчанию <> Неопределено Тогда
		КнопкаПоУмолчанию.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	Элементы.СтраницыСостоянияДокумента.ТекущаяСтраница = ТекущаяСтраница;
	Если ПравоИзменения Тогда
		Элементы.КнопкаСкопировать.ПоложениеВКоманднойПанели = ПоложениеКнопкиСкопировать;
	КонецЕсли;
	Элементы.ФормаЗакрыть.ПоложениеВКоманднойПанели = ПоложениеКнопкиЗакрыть;
	Если ПравоПолученияЭД Тогда
		Элементы.ПроверитьНаличиеОтвета.Видимость = ВидимостьКнопкиПроверить;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоляШапкиФормы()
	
	СЭДОФСС.НастроитьПолеВводаПервичногоДокумента(
		Объект.ВидПособия,
		Объект.Сотрудник,
		Элементы.ПервичныйДокумент,
		Объект.ПервичныйДокумент);
	
	Элементы.ВходящийСрокОтвета.Видимость = ЗначениеЗаполнено(Объект.ВходящийСрокОтвета)
		Или (Особенности.Версия_2_41 И ЭтоОтпускПоУходу);
	
КонецПроцедуры

&НаСервере
Функция СостояниеОтправки()
	РегистрСведенийМенеджерЗаписи = РеквизитФормыВЗначение("РегистрацияСведений");
	РегистрСведенийМенеджерЗаписи.ИсходящийДокумент = Объект.Ссылка;
	РегистрСведенийМенеджерЗаписи.Прочитать();
	ЗначениеВРеквизитФормы(РегистрСведенийМенеджерЗаписи, "РегистрацияСведений");
	
	Состояние          = РегистрацияСведений.Состояние;
	ВариантыСостояний  = Перечисления.СостоянияДокументаСЭДОФСС;
	ЕстьОшибки         = Ложь;
	ЕстьПредупреждения = Ложь;
	Если Состояние = ВариантыСостояний.ПодготовленКОтправке Тогда
		Представление = НСтр("ru = 'Проведен и <a href=""1"">готов к отправке</a>';
							|en = 'Posted and <a href=""1"">ready for sending</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаПриОтправке Тогда
		Представление = НСтр("ru = 'При отправке в Фонд <a href=""1"">возникла ошибка</a>';
							|en = '<a href=""1"">An error occurred</a> when sending to SSF'");
	ИначеЕсли Состояние = ВариантыСостояний.ОтправленОператору Тогда
		Представление = НСтр("ru = '<a href=""1"">Отправлен оператору</a>';
							|en = '<a href=""1"">Sent to provider</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.Отправлен Тогда
		Представление = НСтр("ru = '<a href=""1"">Отправлен в Фонд</a>';
							|en = '<a href=""1"">Sent to SSF</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаЛогическогоКонтроля Тогда
		ЕстьОшибки = Истина;
		Представление = НСтр("ru = 'Не принят, см. <a href=""1"">ошибки логического контроля</a>';
							|en = 'Not accepted, see <a href=""1"">logical control errors</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.Принят Тогда
		Если РегистрацияСведений.ВыплатаСтатус = 2 Тогда
			Представление = НСтр("ru = '<a href=""1"">Документ СФР направлен на оплату</a>';
								|en = '<a href=""1"">Документ СФР направлен на оплату</a>'");
		ИначеЕсли РегистрацияСведений.ВыплатаСтатус = 3 Тогда
			Представление = НСтр("ru = '<a href=""1"">Пособие успешно выплачено</a>';
								|en = '<a href=""1"">Пособие успешно выплачено</a>'");
		ИначеЕсли РегистрацияСведений.ВыплатаСтатус = 4 Тогда
			Представление = НСтр("ru = '<a href=""1"">Оплата не прошла, отказ от банка</a>';
								|en = '<a href=""1"">Оплата не прошла, отказ от банка</a>'");
		ИначеЕсли РегистрацияСведений.ВыплатаСтатус = 5 Тогда
			Представление = НСтр("ru = '<a href=""1"">Получено извещение СФР</a>';
								|en = '<a href=""1"">Получено извещение СФР</a>'");
		Иначе
			Представление = НСтр("ru = '<a href=""1"">Успешно принят СФР</a>';
								|en = '<a href=""1"">Успешно принят СФР</a>'");
		КонецЕсли;
	ИначеЕсли Состояние = ВариантыСостояний.НеПринят Тогда
		ЕстьОшибки = Истина;
		Представление = НСтр("ru = 'Документ не принят, см. <a href=""1"">протокол</a>';
							|en = 'The document is not accepted, see <a href=""1"">the log</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.ПринятСЗамечаниями Тогда
		ЕстьПредупреждения = Истина;
		Представление = НСтр("ru = '<a href=""1"">Успешно принят СФР</a>';
							|en = '<a href=""1"">Успешно принят СФР</a>'");
	Иначе
		СостояниеСтрокой = Строка(Состояние);
		СостояниеСтрокой = НРег(Лев(СостояниеСтрокой, 1)) + Сред(СостояниеСтрокой, 2);
		Представление = СтрШаблон(НСтр("ru = 'Проведен и <a href=""1"">%1</a>';
										|en = 'Posted and <a href=""1"">%1</a>'"), СостояниеСтрокой);
	КонецЕсли;
	
	Результат = Новый Структура("Состояние, ЗаголовокНадписи, ЕстьОшибки, ЕстьПредупреждения");
	Результат.Состояние          = Состояние;
	Результат.ЗаголовокНадписи   = СтроковыеФункции.ФорматированнаяСтрока(Представление);
	Результат.ЕстьОшибки         = ЕстьОшибки;
	Результат.ЕстьПредупреждения = ЕстьПредупреждения;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСообщенияПользователю()
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	Если Объект.ОтключитьПроверкиПроведения Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Сообщение Из Сообщения Цикл
		// Привязка сообщений к объекту.
		Если Не ЗначениеЗаполнено(Сообщение.КлючДанных)
			И Не ЗначениеЗаполнено(Сообщение.ПутьКДанным)
			И Не СтрНачинаетсяС(Сообщение.Поле, "Объект.") Тогда
			Сообщение.ПутьКДанным = "Объект";
		КонецЕсли;
		// Адаптация сообщений к особенностям формы.
		Если ЗначениеЗаполнено(Сообщение.Поле) Тогда
			Если Сообщение.Поле = "КодСтатусаНалогоплательщика" Тогда
				Сообщение.Поле = "СтатусНалогоплательщика";
			КонецЕсли;
			АдаптироватьСообщениеПользователюКПолямВводаКонтактнойИнформации(Сообщение);
			СЭДОФСС.СвертываемыеГруппыАдаптироватьСообщениеПользователю(ЭтотОбъект, Сообщение);
		КонецЕсли;
		Сообщение.Сообщить();
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьГруппуИзвещениеФСС()
	
	ЗаголовокНадписи = "";
	Если ЗначениеЗаполнено(Объект.ИзвещениеФССНомер)
		И ЗначениеЗаполнено(Объект.ИзвещениеФССДата) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИзвещениеФСС.Ссылка КАК Ссылка,
		|	ИзвещениеФСС.Представление КАК Представление
		|ИЗ
		|	Документ.ИзвещениеФСС КАК ИзвещениеФСС
		|ГДЕ
		|	ИзвещениеФСС.ВходящийНомер = &ВходящийНомер
		|	И ИзвещениеФСС.ВходящаяДата = &ВходящаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИзвещениеФСС.ПометкаУдаления,
		|	ИзвещениеФСС.Ссылка УБЫВ";
		Запрос.УстановитьПараметр("ВходящийНомер", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Объект.ИзвещениеФССНомер));
		Запрос.УстановитьПараметр("ВходящаяДата",  Объект.ИзвещениеФССДата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Адрес = ПолучитьНавигационнуюСсылку(Выборка.Ссылка);
			ЗаголовокНадписи = СтроковыеФункции.ФорматированнаяСтрока(
				СтрШаблон("<a href=""%1"">%2</a>", Адрес, Выборка.Представление));
		КонецЕсли;
	КонецЕсли;
	Элементы.ИзвещениеФСССсылка.Заголовок = ЗаголовокНадписи;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГруппуАдресРегистрации()
	Элементы.АдресРегистрацииЗаПределамиРФ.Видимость = ЗначениеЗаполнено(Объект.АдресРегистрацииЗаПределамиРФ)
		Или (Объект.КодСтраныГражданства <> "643" И Не ЗначениеЗаполнено(Объект.АдресРегистрации));
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыШапки()
	Элементы.НомерЛН.Видимость = ЭтоЛН;
	Элементы.Ребенок.Видимость = (ЭтоПособиеПриРождении Или ЭтоОтпускПоУходу) И СЭДОФСС.ВидимостьПоляРодственник();
	Если Объект.Исправление Тогда
		Элементы.Примечание.Видимость = Ложь;
	Иначе
		Элементы.Примечание.Видимость = Истина;
		Элементы.Примечание.Высота = ?(Объект.Примечание = "", 1, Мин(Окр(СтрЧислоСтрок(Объект.Примечание) * 0.7), 4));
	КонецЕсли;
	Элементы.КодСтатусаНалогоплательщика.ТолькоПросмотр = Не Объект.СтатусНалогоплательщика.Пустая();
	ПриоритетУДанныхВходящегоЗапросаЧислом = Объект.ПриоритетУДанныхВходящегоЗапроса;
	Элементы.ПриоритетУДанныхВходящегоЗапросаЧислом.Видимость = ЗначениеЗаполнено(Объект.ВходящийЗапрос)
		И ЗначениеЗаполнено(Объект.ПервичныйДокумент);
	Элементы.ПриоритетУДанныхВходящегоЗапросаЧислом.Шрифт = ?(ЭтотОбъект["ПриоритетУДанныхВходящегоЗапросаФикс"],
		ЭтотОбъект.ПараметрыФиксацииВторичныхДанных["ЖирныйШрифт"],
		ЭтотОбъект.ПараметрыФиксацииВторичныхДанных["НеЖирныйШрифт"])
КонецПроцедуры

#КонецОбласти

#Область Организация

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
	Иначе
		Объект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Страхователь);
	КонецЕсли;
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Организация");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Организация");
	УстановитьФункциональныеОпцииФормы();
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыСтрахователь(Видимость, Представление)
	Представления = Новый Массив;
	
	Элементы.РегистрационныйНомерСФР.Видимость = Особенности.Версия_2_41
		И (ЗначениеЗаполнено(Объект.РегистрационныйНомерСФР)
			Или ЗначениеЗаполнено(Объект.ИнаяОрганизацияРегистрационныйНомерСФР)
			Или ЗарплатаКадры.ИспользованиеРегистрационногоНомераСФР(Объект.ДатаОтправки));
	
	Если Элементы.РегистрационныйНомерСФР.Видимость Тогда
		Если ЗначениеЗаполнено(Объект.РегистрационныйНомерСФР) Тогда
			Представления.Добавить(НСтр("ru = 'регномер СФР';
										|en = 'registration number in the Social Insurance Fund of Russia'") + " " + Объект.РегистрационныйНомерСФР);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.НомерСтрахователяФСС) Тогда
			Представления.Добавить(НСтр("ru = 'регномер ОСС';
										|en = 'CSI registration number'") + " " + Объект.НомерСтрахователяФСС);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.НомерСтрахователяФСС) Тогда
			Представления.Добавить(НСтр("ru = 'регистрационный номер';
										|en = 'registration number'") + " " + Объект.НомерСтрахователяФСС);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		Представления.Добавить(НСтр("ru = 'код подчиненности';
									|en = 'subordination code'") + " " + Объект.КодПодчиненностиФСС);
	КонецЕсли;
	Если Представления.Количество() = 0 И ЗначениеЗаполнено(Объект.Страхователь) Тогда
		Представления.Добавить(Строка(Объект.Страхователь));
	КонецЕсли;
	
	Представление = СтрСоединить(Представления, ", ");
КонецПроцедуры

#КонецОбласти

#Область Сотрудник

&НаСервере
Процедура СотрудникПриИзмененииНаСервере(ИмяСобытия)
	Если ИмяСобытия = "СотрудникПриИзменении" Тогда
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			Объект.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо");
		Иначе
			Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Сотрудник");
	КонецЕсли;
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Сотрудник");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ФизическоеЛицо");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Банк");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура СотрудникГражданствоПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "СотрудникГражданство");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("СотрудникГражданство");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ПредставлениеЗастрахованногоЛица()
	Представления = Новый Массив;
	Представление = СокрЛП(Объект.СотрудникФамилия + " " + Объект.СотрудникИмя + " " + Объект.СотрудникОтчество);
	Если ЗначениеЗаполнено(Представление) Тогда
		Представления.Добавить(Представление);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СотрудникДатаРождения) Тогда
		Представления.Добавить(НСтр("ru = 'Дата рождения';
									|en = 'Date of birth'") + " " + Формат(Объект.СотрудникДатаРождения, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СотрудникСНИЛС) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС: %1';
												|en = 'SNILS: %1'"), Объект.СотрудникСНИЛС));
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыГруппыРазрешениеНаПроживание(Группа, Представление, Заполнена, Развернута, Видимость)
	Видимость = СЭДОФСС.ПоказыватьРазрешениеНаПроживание(Объект.КодСтраныГражданства);
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представление = СЭДОФСС.ПредставлениеУдостоверенияЛичности(
		Объект.РазрешениеНаПроживаниеВид,
		Объект.РазрешениеНаПроживаниеСерия,
		Объект.РазрешениеНаПроживаниеНомер,
		Объект.РазрешениеНаПроживаниеДатаВыдачи);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыВидДоговора(Видимость, Представление)
	Видимость = ЭтоОбычныйБольничный Или ЭтоБольничныйПоБиР Или Особенности.Версия_2_36;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Массив = Новый Массив;
	Если Объект.ВидДоговораТрудовой Тогда
		Массив.Добавить(НСтр("ru = 'Трудовой';
							|en = 'Employment contract'"));
	КонецЕсли;
	Если Объект.ВидДоговораГПХ Тогда
		Массив.Добавить(НСтр("ru = 'ГПХ';
							|en = 'Civil law contract'"));
	КонецЕсли;
	Представление = СтрСоединить(Массив, ", ");
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыСрочныйТрудовойДоговор(Группа, Видимость, Представление)
	Если Особенности.Версия_2_41 Тогда
		Видимость = Истина;
		Группа.Заголовок = НСтр("ru = 'Срочный трудовой договор/Срок договора ГПХ';
								|en = 'Fixed-term employment contract/Civil law contract duration'");
	Иначе
		Видимость = ЭтоОбычныйБольничный Или ЭтоНСПЗ Или ЭтоПособиеПриРождении;
		Группа.Заголовок = НСтр("ru = 'Срочный трудовой договор';
								|en = 'Fixed-term employment contract'");
	КонецЕсли;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ТрудовойДоговорДатаНачала)
		И ЗначениеЗаполнено(Объект.ТрудовойДоговорДатаОкончания) Тогда
		Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Объект.ТрудовойДоговорДатаНачала, Объект.ТрудовойДоговорДатаОкончания);
	ИначеЕсли ЗначениеЗаполнено(Объект.ТрудовойДоговорДатаНачала) Тогда
		Представление = СтрШаблон(НСтр("ru = 'с %1';
										|en = 'from %1'"), Формат(Объект.ТрудовойДоговорДатаНачала, "ДЛФ=D"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыЛьготы(Видимость, Представление)
	Видимость = ЭтоЛН Или ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Элементы.ВидОсобойЗоны.Видимость = ЭтоОтпускПоУходу;
	Представление = Строка(Объект.ПричинаПредоставленияЛьготы);
	Если ЭтоОтпускПоУходу Тогда
		Представление = Представление + ?(Представление = "", "", ", ") + Строка(Объект.ВидОсобойЗоны);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПредставлениеАдреса(Префикс, ЕстьПолеЗаПределамиРФ)
	Если ЕстьПолеЗаПределамиРФ И ЗначениеЗаполнено(Объект[Префикс + "ЗаПределамиРФ"]) Тогда
		Возврат Объект[Префикс + "ЗаПределамиРФ"];
	КонецЕсли;
	
	ЗначениеАдреса = Объект[Префикс];
	Дом            = Объект[Префикс + "Дом"];
	Корпус         = Объект[Префикс + "Корпус"];
	Квартира       = Объект[Префикс + "Квартира"];
	ФИАСДом        = Объект[Префикс + "ФИАСДом"];
	ФИАСРО         = Объект[Префикс + "ФИАСРО"];
	Представление  = "";
	
	// Поиск адреса был осуществлен при загрузке входящего запроса - по сведениям о застрахованном лице.
	Если ЗначениеЗаполнено(ЗначениеАдреса) Тогда
		Представление = СЭДОФСС.КраткоеПредставлениеАдреса(ЗначениеАдреса);
	КонецЕсли;
	
	// Поиск адреса по идентификатору дома.
	Если Не ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(ФИАСДом) Тогда
		Попытка
			ПараметрыПолученияАдреса = Новый Структура;
			ПараметрыПолученияАдреса.Вставить("АдресВJSON", Истина);
			ЗначениеАдреса = РаботаСАдресами.АдресПоИдентификатору(ФИАСДом, ПараметрыПолученияАдреса);
		Исключение
			ЗначениеАдреса = "";
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при поиске адреса %1 по идентификатору %2: %3';
						|en = 'An error occurred when searching %1 address by %2 ID: %3'");
			Текст = СтрШаблон(Текст, Префикс, ФИАСДом, Ошибка);
			СообщенияБЗК.СообщитьОПроблеме(Текст);
		КонецПопытки;
		Если ЗначениеЗаполнено(ЗначениеАдреса) Тогда
			Представление = СЭДОФСС.КраткоеПредставлениеАдреса(ЗначениеАдреса);
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Квартира) Тогда
				Представление = Представление + ", " + Квартира;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Поиск адреса по идентификатору родительского объекта.
	Если Не ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(ФИАСРО) Тогда
		Попытка
			ПараметрыПолученияАдреса = Новый Структура;
			ПараметрыПолученияАдреса.Вставить("АдресВJSON", Истина);
			ЗначениеАдреса = РаботаСАдресами.АдресПоИдентификатору(ФИАСРО, ПараметрыПолученияАдреса);
		Исключение
			ЗначениеАдреса = "";
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при поиске адреса %1 по идентификатору %2: %3';
						|en = 'An error occurred when searching %1 address by %2 ID: %3'");
			Текст = СтрШаблон(Текст, Префикс, ФИАСРО, Ошибка);
			СообщенияБЗК.СообщитьОПроблеме(Текст);
		КонецПопытки;
		Если ЗначениеЗаполнено(ЗначениеАдреса) Тогда
			Представление = СЭДОФСС.КраткоеПредставлениеАдреса(ЗначениеАдреса);
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Дом) Тогда
				Представление = Представление + ", " + Дом;
			КонецЕсли;
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Корпус) Тогда
				Представление = Представление + ", " + Корпус;
			КонецЕсли;
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Квартира) Тогда
				Представление = Представление + ", " + Квартира;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

&НаСервере
Процедура СтатусНалогоплательщикаПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "СтатусНалогоплательщика");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("СтатусНалогоплательщика");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ДанныеДляРасчета

&НаСервере
Процедура ОбновитьЭлементыГруппыУсловияИсчисления(Видимость, Представление)
	Видимость = ЭтоЛН;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представления = Новый Массив;
	Если ЗначениеЗаполнено(Объект.УсловияИсчисленияКод1) Тогда
		Представления.Добавить(Объект.УсловияИсчисленияКод1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УсловияИсчисленияКод2) Тогда
		Представления.Добавить(Объект.УсловияИсчисленияКод2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УсловияИсчисленияКод3) Тогда
		Представления.Добавить(Объект.УсловияИсчисленияКод3);
	КонецЕсли;
	Представление = СтрСоединить(Представления, ", ");
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыДанныеДляРасчета(Видимость, Представление)
	Видимость = Не Объект.ОтказВНазначенииПособия;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.РасчетныйПериодГруппа.Видимость            = ВидимостьРасчетногоПериода();
	Элементы.СтажГруппа.Видимость                       = ВидимостьСтажа();
	Элементы.ДоляВремени.Видимость                      = ВидимостьДолиВремени();
	Элементы.КалендарныхДнейРасчетногоПериода.Видимость = ЭтоЛН Или ЭтоОтпускПоУходу;
	Элементы.ПериодОплатыЗаСчетФССГруппа.Видимость      = ВидимостьПериодаОплатыЗаСчетФСС();
	Элементы.ПервыйРасчетныйГодВидЗаработка.Видимость   = Особенности.Версия_2_34;
	Элементы.ВторойРасчетныйГодВидЗаработка.Видимость   = Особенности.Версия_2_34;
	
	Представление = ПредставлениеГруппыДанныеДляРасчета();
КонецПроцедуры

&НаСервере
Функция ПредставлениеГруппыДанныеДляРасчета()
	Представления = Новый Массив;
	
	Если ВидимостьРасчетногоПериода() Тогда
		Годы = Новый Массив;
		Если ЗначениеЗаполнено(Объект.ПервыйРасчетныйГод) Тогда
			Годы.Добавить(Формат(Объект.ПервыйРасчетныйГод, "ЧГ="));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ВторойРасчетныйГод) Тогда
			Годы.Добавить(Формат(Объект.ВторойРасчетныйГод, "ЧГ="));
		КонецЕсли;
		Если Годы.Количество() > 0 Тогда
			Представления.Добавить(СтрШаблон(НСтр("ru = 'Расчетные годы: %1';
													|en = 'Payroll years: %1'"), СтрСоединить(Годы, ", ")));
		КонецЕсли;
	КонецЕсли;
	
	Если ВидимостьСтажа() Тогда
		Если ЗначениеЗаполнено(Объект.СтраховойСтажЛет) Или ЗначениеЗаполнено(Объект.СтраховойСтажМесяцев) Тогда
			Представления.Добавить(СтрШаблон(
				НСтр("ru = 'Страховой стаж: %1';
					|en = 'Pensionable service: %1'"),
				ЗарплатаКадрыКлиентСервер.ПредставлениеВозраста(Объект.СтраховойСтажЛет, Объект.СтраховойСтажМесяцев)));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.НестраховойСтажЛет) Или ЗначениеЗаполнено(Объект.НестраховойСтажМесяцев) Тогда
			Представления.Добавить(СтрШаблон(
				НСтр("ru = 'Нестраховой стаж: %1';
					|en = 'Non-pensionable service: %1'"),
				ЗарплатаКадрыКлиентСервер.ПредставлениеВозраста(Объект.НестраховойСтажЛет, Объект.НестраховойСтажМесяцев)));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РайонныйКоэффициент) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'РК: %1';
												|en = 'RK: %1'"), Объект.РайонныйКоэффициент));
	КонецЕсли;
	Если ВидимостьДолиВремени() И ЗначениеЗаполнено(Объект.ДоляВремени) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'Ставок: %1';
												|en = 'Rates: %1'"), Объект.ДоляВремени));
	КонецЕсли;
	
	Если ВидимостьПериодаОплатыЗаСчетФСС()
		И ЗначениеЗаполнено(Объект.ОплатаФССДатаНачала)
		И ЗначениеЗаполнено(Объект.ОплатаФССДатаОкончания) Тогда
		Представления.Добавить(СтрШаблон(
			НСтр("ru = 'Оплата за счет ФСС: %1';
				|en = 'Payment out of SSF fund: %1'"),
			ОбщегоНазначенияБЗК.НаименованиеПериода(Объект.ОплатаФССДатаНачала, Объект.ОплатаФССДатаОкончания)));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Функция ВидимостьРасчетногоПериода()
	Возврат ЭтоЛН Или ЭтоОтпускПоУходу;
КонецФункции

&НаСервере
Функция ВидимостьСтажа()
	Возврат ЭтоЛН Или ЭтоОтпускПоУходу;
КонецФункции

&НаСервере
Функция ВидимостьДолиВремени()
	Возврат ЭтоЛН Или ЭтоОтпускПоУходу;
КонецФункции

&НаСервере
Функция ВидимостьПериодаОплатыЗаСчетФСС()
	Возврат ЭтоОбычныйБольничный Или ЭтоНСПЗ;
КонецФункции

#КонецОбласти

#Область ПараметрыНазначения

&НаСервере
Процедура ОбновитьЭлементыГруппыПараметрыНазначения(Группа, Представление, Заполнена, Развернута, Видимость)
	Видимость = Особенности.Версия_2_34 И Не Объект.Перерасчет;
	Если Не Видимость  Тогда
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив;
	
	Элементы.ЧислитсяУНесколькихСтрахователей.Видимость = ЭтоОбычныйБольничный Или ЭтоБольничныйПоБиР
		Или ЭтоОтпускПоУходу;
	Если Элементы.ЧислитсяУНесколькихСтрахователей.Видимость Тогда
		Если Объект.ЧислитсяУНесколькихСтрахователей Тогда
			Массив.Добавить(НСтр("ru = 'Числится у нескольких страхователей';
								|en = 'Registered with multiple insurants'"));
		Иначе
			Массив.Добавить(НСтр("ru = 'Числится у одного страхователя';
								|en = 'Registered with one insurant'"));
		КонецЕсли;
	КонецЕсли;
	
	СоставЗаполнен = ЗначениеЗаполнено(Объект.СоставСтрахователейЗаДваГода);
	ВидимостьСостава = ЭтоОбычныйБольничный Или ЭтоБольничныйПоБиР Или (Особенности.Версия_2_36 И ЭтоОтпускПоУходу);
	Элементы.СоставСтрахователейЗаДваГодаГруппа.Видимость = ВидимостьСостава;
	Если ВидимостьСостава И СоставЗаполнен Тогда
		МенеджерПеречисления = Перечисления.ВариантыИзмененияСоставаСтрахователейСФР;
		ПредставлениеЗаголовка = Элементы.СоставСтрахователейЗаДваГодаЗаголовок.Заголовок;
		ПредставлениеЗаголовка = Лев(ПредставлениеЗаголовка, СтрДлина(ПредставлениеЗаголовка) - 1);
		Если Объект.СоставСтрахователейЗаДваГода = МенеджерПеречисления.НеМенялся Тогда
			ПредставлениеЗначения = Элементы.СоставСтрахователейЗаДваГодаНеМенялся.СписокВыбора[0].Представление;
		ИначеЕсли Объект.СоставСтрахователейЗаДваГода = МенеджерПеречисления.ИзменилсяПолностью Тогда
			ПредставлениеЗначения = Элементы.СоставСтрахователейЗаДваГодаИзменилсяПолностью.СписокВыбора[0].Представление;
		ИначеЕсли Объект.СоставСтрахователейЗаДваГода = МенеджерПеречисления.ИзменилсяЧастично Тогда
			ПредставлениеЗначения = Элементы.СоставСтрахователейЗаДваГодаИзменилсяЧастично.СписокВыбора[0].Представление;
		Иначе
			ПредставлениеЗначения = Строка(Объект.СоставСтрахователейЗаДваГода);
		КонецЕсли;
		Массив.Добавить(ПредставлениеЗаголовка + " " + НРег(ПредставлениеЗначения));
	КонецЕсли;
	ВидимостьПустого = ВидимостьСостава И Не СоставЗаполнен;
	Элементы.СоставСтрахователейНеопределен.Видимость  = ВидимостьПустого;
	Элементы.СоставСтрахователейНеопределен2.Видимость = ВидимостьПустого;
	
	Если ЗначениеЗаполнено(Объект.МетодНазначенияИВыплатыПособия) Тогда
		ПредставлениеЗначения = Строка(Объект.МетодНазначенияИВыплатыПособия);
		Массив.Добавить(НСтр("ru = 'Назначить пособие';
							|en = 'Grant allowance'") + " " + НРег(ПредставлениеЗначения));
	КонецЕсли;
	
	Если ЭтоОбычныйБольничный Или ЭтоБольничныйПоБиР Или ЭтоОтпускПоУходу Тогда
		Элементы.ВыборПодтвержденЗастрахованнымЛицом.Видимость = Истина;
		Если Объект.ВыборПодтвержденЗастрахованнымЛицом Тогда
			Массив.Добавить(НСтр("ru = 'Выбор подтвержден застрахованным лицом';
								|en = 'Choice is confirmed by insured person'"));
		Иначе
			Массив.Добавить(НСтр("ru = 'Выбор НЕ подтвержден застрахованным лицом';
								|en = 'Choice is NOT confirmed by insured person'"));
		КонецЕсли;
	Иначе
		Элементы.ВыборПодтвержденЗастрахованнымЛицом.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоНСПЗ И Особенности.Версия_2_36 Тогда
		Элементы.ДоговорГПХОблагаетсяВзносамиНС.Видимость = Истина;
		Если Объект.ДоговорГПХОблагаетсяВзносамиНС Тогда
			Массив.Добавить(НСтр("ru = 'Договор ГПХ облагается взносами НС';
								|en = 'Civil law contract is subject to industrial accident contributions'"));
		Иначе
			Массив.Добавить(НСтр("ru = 'Договор ГПХ НЕ облагается взносами НС';
								|en = 'Civil law contract is NOT subject to industrial accident contributions'"));
		КонецЕсли;
	Иначе
		Элементы.ДоговорГПХОблагаетсяВзносамиНС.Видимость = Ложь;
	КонецЕсли;
	
	Представление = СтрСоединить(Массив, "; ");
КонецПроцедуры

#КонецОбласти

#Область Ребенок

&НаСервере
Процедура ОбновитьЭлементыГруппыОтпускПоУходу(Видимость, Представление)
	Видимость = ЭтоБольничныйПоБиР Или ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоБольничныйПоБиР Тогда
		Элементы.ОтпускПоУходуГруппа.Заголовок = НСтр("ru = 'Отпуск по беременности и родам';
														|en = 'Maternity leave'");
	Иначе
		Элементы.ОтпускПоУходуГруппа.Заголовок = НСтр("ru = 'Отпуск по уходу за ребенком';
														|en = 'Child care leave'");
	КонецЕсли;
	Представление = ПредставлениеОтпускаПоУходу();
КонецПроцедуры

&НаСервере
Функция ПредставлениеОтпускаПоУходу()
	Представления = Новый Массив;
	
	НомерДата = ПредставлениеНомераИДаты(Объект.ОтпускПоУходуНомер, Объект.ОтпускПоУходуДата);
	Если НомерДата <> "" Тогда
		Представления.Добавить(НомерДата);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОтпускПоУходуДатаНачала)
		И ЗначениеЗаполнено(Объект.ОтпускПоУходуДатаОкончания) Тогда
		Представления.Добавить(ОбщегоНазначенияБЗК.НаименованиеПериода(
			Объект.ОтпускПоУходуДатаНачала,
			Объект.ОтпускПоУходуДатаОкончания));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыГруппыЗаменаПослеродовогоОтпуска(Видимость, Представление)
	Видимость = ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представление = ПредставлениеНомераИДаты(Объект.ЗаменаПослеродовогоОтпускаНомер, Объект.ЗаменаПослеродовогоОтпускаДата);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыДокументОРождении(Видимость, Представление)
	Видимость = ЭтоПособиеПриРождении Или ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представления = Новый Массив;
	
	// Свидетельство о рождении.
	ОдноПолеСерияНомер = ЭтоПособиеПриРождении
		И ЗначениеЗаполнено(Объект.СвидетельствоОРожденииСерияНомер)
		И Не ЗначениеЗаполнено(Объект.СвидетельствоОРожденииСерия)
		И Не ЗначениеЗаполнено(Объект.СвидетельствоОРожденииНомер);
	Элементы.СвидетельствоОРожденииСерияНомер.Видимость = ОдноПолеСерияНомер;
	Элементы.СвидетельствоОРожденииСерия.Видимость      = Не ОдноПолеСерияНомер;
	Элементы.СвидетельствоОРожденииНомер.Видимость      = Не ОдноПолеСерияНомер;
	Если ОдноПолеСерияНомер Тогда
		СерияНомер = Объект.СвидетельствоОРожденииСерияНомер;
	Иначе
		СерияНомер = СокрЛП(Объект.СвидетельствоОРожденииСерия + " " + Объект.СвидетельствоОРожденииНомер);
	КонецЕсли;
	НомерДата = ПредставлениеНомераИДаты(СерияНомер, Объект.СвидетельствоОРожденииДатаВыдачи);
	Если НомерДата <> "" Тогда
		Текст = Элементы.СвидетельствоОРожденииЗаголовок.Заголовок;
		Представления.Добавить(Лев(Текст, СтрДлина(Текст) - 1));
		Представления.Добавить(НомерДата);
	КонецЕсли;
	
	// Справка о рождении.
	Элементы.СправкаОРожденииГруппа.Видимость = ЭтоПособиеПриРождении;
	Если Элементы.СправкаОРожденииГруппа.Видимость Тогда
		НомерДата = ПредставлениеНомераИДаты(Объект.СправкаОРожденииНомер, Объект.СправкаОРожденииДатаВыдачи);
		Если НомерДата <> "" Тогда
			Текст = Элементы.СправкаОРожденииЗаголовок.Заголовок;
			Представления.Добавить(Лев(Текст, СтрДлина(Текст) - 1));
			Представления.Добавить(НомерДата);
			Если ЗначениеЗаполнено(Объект.СправкаОРожденииФорма) Тогда
				Представления.Добавить(Объект.СправкаОРожденииФорма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Иной документ.
	ОдноПолеСерияНомер = ЭтоПособиеПриРождении
		И ЗначениеЗаполнено(Объект.ИнойДокументОРожденииСерияНомер)
		И Не ЗначениеЗаполнено(Объект.ИнойДокументОРожденииСерия)
		И Не ЗначениеЗаполнено(Объект.ИнойДокументОРожденииНомер);
	Элементы.ИнойДокументОРожденииСерияНомер.Видимость = ОдноПолеСерияНомер;
	СерияНомер = СокрЛП(Объект.ИнойДокументОРожденииСерия + " " + Объект.ИнойДокументОРожденииНомер);
	НомерДата = ПредставлениеНомераИДаты(СерияНомер, Объект.ИнойДокументОРожденииДатаВыдачи);
	Если НомерДата <> "" Тогда
		Текст = Элементы.ИнойДокументОРожденииЗаголовок.Заголовок;
		Представления.Добавить(Лев(Текст, СтрДлина(Текст) - 1));
		Представления.Добавить(НомерДата);
	КонецЕсли;
	
	// Актовая запись ЗАГС.
	НомерДата = ПредставлениеНомераИДаты(Объект.АктоваяЗаписьОРожденииНомер, Объект.АктоваяЗаписьОРожденииДата);
	Если НомерДата <> "" Тогда
		Текст = Элементы.АктоваяЗаписьОРожденииЗаголовок.Заголовок;
		Представления.Добавить(Лев(Текст, СтрДлина(Текст) - 1));
		Представления.Добавить(НомерДата);
	КонецЕсли;
	
	Представление = СтрСоединить(Представления, " ");
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыРебенок(Видимость, Представление)
	Видимость = ЭтоПособиеПриРождении Или ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.РебенокОчередностьГруппа.Видимость = ЭтоОтпускПоУходу;
	Элементы.НаличиеДокументовНаПредыдущихДетейГруппа.Видимость = Объект.РебенокОчередность > 1;
	Элементы.УходЗаНесколькимиДетьмиГруппа.Видимость = ЭтоОтпускПоУходу;
	Элементы.НаличиеРешенияСудаОЛишенииПрав.Видимость = ЭтоОтпускПоУходу;
	Элементы.СреднемесячныйЗаработок.Видимость = Объект.УходЗаНесколькимиДетьми;
	
	Представление = ПредставлениеГруппыРебенок();
КонецПроцедуры

&НаСервере
Функция ПредставлениеГруппыРебенок()
	Представления = Новый Массив;
	Представление = СокрЛП(Объект.РебенокФамилия + " " + Объект.РебенокИмя + " " + Объект.РебенокОтчество);
	Если ЗначениеЗаполнено(Представление) Тогда
		Представления.Добавить(Представление);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокДатаРождения) Тогда
		Представления.Добавить(НСтр("ru = 'Дата рождения';
									|en = 'Date of birth'") + " " + Формат(Объект.РебенокДатаРождения, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокСНИЛС) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС: %1';
												|en = 'SNILS: %1'"), Объект.РебенокСНИЛС));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокКодСвязи) Тогда
		ЭлементСписка = Элементы.РебенокКодСвязи.СписокВыбора.НайтиПоЗначению(Объект.РебенокКодСвязи);
		Если ЭлементСписка = Неопределено Тогда
			Представление = Объект.РебенокКодСвязи;
		Иначе
			Представление = ЭлементСписка.Представление;
		КонецЕсли;
		Представления.Добавить(СтрШаблон(НСтр("ru = 'код связи: %1';
												|en = 'relationship code: %1'"), Представление));
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыГруппыСправкаОтДругогоРодителя(Видимость, Представление)
	Видимость = ЭтоПособиеПриРождении;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представление = ПредставлениеНомераИДаты(Объект.СправкаОтДругогоРодителяНомер, Объект.СправкаОтДругогоРодителяДата);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыУсыновлениеОпека(Видимость, Представление)
	Видимость = ЭтоПособиеПриРождении Или ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Если Объект.УсыновлениеОпекаТип = "1" Тогда
		Элементы.УсыновлениеОпекаГруппа.Заголовок = НСтр("ru = 'Решение об усыновлении';
														|en = 'Adoption order'");
	ИначеЕсли Объект.УсыновлениеОпекаТип = "2" Тогда
		Элементы.УсыновлениеОпекаГруппа.Заголовок = НСтр("ru = 'Решение об установлении опеки над ребенком';
														|en = 'Decision on child custody establishment'");
	Иначе
		Элементы.УсыновлениеОпекаГруппа.Заголовок = НСтр("ru = 'Решение об усыновлении / опеке';
														|en = 'Adoption order / custody decision'");
	КонецЕсли;
	Представление = ПредставлениеНомераИДаты(Объект.УсыновлениеОпекаНомер, Объект.УсыновлениеОпекаДата);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыПередачаНаВоспитание(Видимость, Представление)
	Видимость = ЭтоПособиеПриРождении;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представление = ПредставлениеНомераИДаты(Объект.ПередачаНаВоспитаниеНомер, Объект.ПередачаНаВоспитаниеДата);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыСправкаОНеполученииПособия(Видимость, Представление)
	Видимость = ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представление = ПредставлениеГруппыСправкаОНеполученииПособия();
	
	Элементы.СправкаОНеполученииПособияОтМатериГруппа.Видимость = (
		ЗначениеЗаполнено(Объект.СправкаОНеполученииПособияОтМатериНомер)
		Или ЗначениеЗаполнено(Объект.СправкаОНеполученииПособияОтМатериДатаВыдачи)
		Или Объект.РебенокКодСвязи <> "38"); // 38 - мать.
	Элементы.СправкаОНеполученииПособияОтОтцаГруппа.Видимость = (
		ЗначениеЗаполнено(Объект.СправкаОНеполученииПособияОтОтцаНомер)
		Или ЗначениеЗаполнено(Объект.СправкаОНеполученииПособияОтОтцаДатаВыдачи)
		Или Объект.РебенокКодСвязи <> "39"); // 39 - отец.
КонецПроцедуры

&НаСервере
Функция ПредставлениеГруппыСправкаОНеполученииПособия()
	Представления = Новый Массив;
	
	НомерДата = СЭДОФСС.ПредставлениеНомераИДаты(
		Объект.СправкаОНеполученииПособияОтМатериНомер,
		Объект.СправкаОНеполученииПособияОтМатериДатаВыдачи);
	Если НомерДата <> "" Тогда
		Представления.Добавить(НСтр("ru = 'От матери:';
									|en = 'From mother:'"));
		Представления.Добавить(НомерДата);
	КонецЕсли;
	
	НомерДата = СЭДОФСС.ПредставлениеНомераИДаты(
		Объект.СправкаОНеполученииПособияОтОтцаНомер,
		Объект.СправкаОНеполученииПособияОтОтцаДатаВыдачи);
	Если НомерДата <> "" Тогда
		Представления.Добавить(НСтр("ru = 'От отца:';
									|en = 'From father:'"));
		Представления.Добавить(НомерДата);
	КонецЕсли;
	
	НомерДата = СЭДОФСС.ПредставлениеНомераИДаты(
		Объект.СправкаОНеполученииПособияПоДругомуМестуРаботыНомер,
		Объект.СправкаОНеполученииПособияПоДругомуМестуРаботыДатаВыдачи);
	Если НомерДата <> "" Тогда
		Представления.Добавить(НСтр("ru = 'По другому месту работы:';
									|en = 'At another place of employment:'"));
		Представления.Добавить(НомерДата);
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаКлиенте
Процедура СправкаОНеполученииПособияПредставлениеЗавершениеВыбора(Текст, ПустойПараметр) Экспорт
	СправкаОНеполученииПособияПредставлениеПриИзменении(Элементы.СправкаОНеполученииПособияПредставление);
КонецПроцедуры

#КонецОбласти

#Область ИсключаемыеПериоды

&НаСервере
Функция ПредставлениеИсключаемыхПериодов()
	Представления = Новый Массив;
	Для Каждого Период Из Объект.ИсключаемыеПериоды Цикл
		Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Период.ДатаНачала, Период.ДатаОкончания);
		Если ЗначениеЗаполнено(Период.Причина) Тогда
			Представление = Представление + " (" + Строка(Период.Причина) + ")";
		КонецЕсли;
		Представления.Добавить(Представление);
	КонецЦикла;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

#КонецОбласти

#Область ПериодыПростоя

&НаСервере
Процедура ОбновитьЭлементыГруппыПериодыПростоя(Группа, Представление, Заполнена, Развернута, Видимость)
	Видимость = ЭтоОбычныйБольничный Или ?(Особенности.Версия_2_34, Ложь, ЭтоНСПЗ);
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Заполнена = Объект.ПериодыПростоя.Количество() > 0;
	Если Заполнена И Не Развернута Тогда
		Представление = ПредставлениеПериодовПростоя();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПредставлениеПериодовПростоя()
	Представления = Новый Массив;
	Для Каждого Период Из Объект.ПериодыПростоя Цикл
		Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Период.ДатаНачала, Период.ДатаОкончания);
		Если ЗначениеЗаполнено(Период.СреднийЗаработок) Тогда
			Представление = Представление + " (" + Строка(Период.СреднийЗаработок) + ")";
		КонецЕсли;
		Представления.Добавить(Представление);
	КонецЦикла;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

#КонецОбласти

#Область ПриостановленияТрудовыхДоговоров

&НаСервере
Функция ПредставлениеПриостановленийТрудовыхДоговоров()
	Представления = Новый Массив;
	Для Каждого Период Из Объект.ПриостановленияТрудовыхДоговоров Цикл
		Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Период.ДатаНачала, Период.ДатаОкончания);
		Представление = Представление + " - " + Строка(Период.ОснованиеНПА);
		Представления.Добавить(Представление);
	КонецЦикла;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

#КонецОбласти

#Область СпособВыплаты

&НаСервере
Процедура ОбновитьЭлементыГруппыСпособВыплаты(Видимость, Представление, Развернута)
	Видимость = Не Объект.ОтказВНазначенииПособия;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	СпособВыплаты = Объект.СпособВыплатыПособия;
	// Список выбора.
	СписокВыбора = Элементы.СпособВыплатыПособия.СписокВыбора;
	СЭДОФСС.СписокВыбораСпособовВыплаты(СписокВыбора, СпособВыплаты, Объект.СотрудникКатегория);
	// Страница способа выплаты.
	Если СпособВыплаты = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьНаКартуМИР);
	ИначеЕсли СпособВыплаты = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьЧерезБанк);
	ИначеЕсли СпособВыплаты = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьПочтовымПереводом);
	ИначеЕсли СпособВыплаты = Перечисления.СпособыВыплатыПособия.ИнаяОрганизация Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьИнаяОрганизация);
	Иначе
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Неопределено);
	КонецЕсли;
	Если Развернута Тогда
		Если СпособВыплаты = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
			// Результат проверки номера счета.
			РезультатПроверки = ПроверкиБЗК.РезультатПроверкиНомераСчета(
				Объект.НомерСчета,
				Объект.БанкБИК,
				Объект.БанкКоррСчет);
			Элементы.РезультатПроверкиНомераСчета.Заголовок = РезультатПроверки.Пояснение;
			Если РезультатПроверки.Успех Тогда
				Элементы.РезультатПроверкиНомераСчета.ЦветФона = ЦветаСтиля.ЦветФонаУспешнойОперацииБЗК;
			Иначе
				Элементы.РезультатПроверкиНомераСчета.ЦветФона = ЦветаСтиля.ЦветФонаПредупрежденияБЗК;
			КонецЕсли;
		ИначеЕсли СпособВыплаты = Перечисления.СпособыВыплатыПособия.ИнаяОрганизация Тогда
			Элементы.ИнаяОрганизацияРегистрационныйНомерСФР.Видимость = Элементы.РегистрационныйНомерСФР.Видимость;
		КонецЕсли;
	Иначе
		Если Объект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
			Представление = ПредставлениеАдреса("АдресПроживания", Ложь);
		Иначе
			Представление = СЭДОФСС.ПредставлениеСпособаВыплаты(Объект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиСпособаВыплатыПособия()
	// Цвет гиперссылки "Изменить способ выплаты пособия".
	Если ЭтотОбъект["СпособВыплатыПособияФикс"]
		Или ЭтотОбъект["БанкФикс"]
		Или ЭтотОбъект["АдресПроживанияВидФикс"] Тогда
		Элементы.ИзменитьСпособВыплатыПособий.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	Иначе
		Элементы.ИзменитьСпособВыплатыПособий.ЦветТекста = Новый Цвет;
	КонецЕсли;
	// Видимость кнопки "Отменить изменения способа выплаты пособия".
	Элементы.ОтменитьИзмененияСпособаВыплатыПособия.Видимость = (
		ЭтотОбъект["СпособВыплатыПособияФикс"]
		Или ЭтотОбъект["КартаМИРФикс"]
		Или ЭтотОбъект["БанкФикс"]
		Или ЭтотОбъект["БанкБИКФикс"]
		Или ЭтотОбъект["БанкКоррСчетФикс"]
		Или ЭтотОбъект["БанкНаименованиеФикс"]
		Или ЭтотОбъект["НомерСчетаФикс"]
		Или ЭтотОбъект["АдресПроживанияВидФикс"]
		Или ЭтотОбъект["АдресПроживанияФикс"]
		Или ЭтотОбъект["АдресПроживанияФИАСДомФикс"]
		Или ЭтотОбъект["АдресПроживанияФИАСРОФикс"]);
КонецПроцедуры

&НаСервере
Процедура ОтменитьИзмененияСпособаВыплатыПособияНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоИмениГруппы(
		ЭтотОбъект,
		"СпособВыплатыПособия");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура СпособВыплатыПособияПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "СпособВыплатыПособия");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("СпособВыплатыПособия");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура БанкПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Банк");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Банк");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура АдресПроживанияВидПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "АдресПроживанияВид");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("АдресПроживанияВид");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ИнаяОрганизацияБИКПриИзмененииНаСервере()
	ЗаполнитьИнаяОрганизацияБанк();
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнаяОрганизацияБанк()
	Если Объект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ИнаяОрганизация Тогда
		ИнаяОрганизацияБанк = СЭДОФСС.НайтиБанкПоБИК(Объект.ИнаяОрганизацияБИК);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнаяОрганизацияБанкПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(ИнаяОрганизацияБанк) Тогда
		Объект.ИнаяОрганизацияБИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИнаяОрганизацияБанк, "Код");
	Иначе
		Объект.ИнаяОрганизацияБИК = "";
	КонецЕсли;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ИнаяОрганизацияБИК");
КонецПроцедуры

#КонецОбласти

#Область Составитель

&НаСервере
Процедура ОбновитьЭлементыГруппыСоставитель(Группа, Представление, Заполнена, Развернута, Видимость)
	Видимость = Особенности.Версия_2_34;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Массив = Новый Массив;
	Если ЗначениеЗаполнено(Объект.СоставительФИО) Тогда
		Массив.Добавить(Объект.СоставительФИО);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СоставительТелефон) Тогда
		Массив.Добавить(Объект.СоставительТелефон);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СоставительЭлектроннаяПочта) Тогда
		Массив.Добавить(Объект.СоставительЭлектроннаяПочта);
	КонецЕсли;
	Если Массив.Количество() > 0 Тогда
		Представление = СтрСоединить(Массив, ", ");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область Исправление

&НаСервере
Процедура ОбновитьЭлементыГруппыИсправление(Видимость, Представление, Развернута)
	Представление = ПредставлениеГруппыИсправления();
	Если Развернута Тогда
		Элементы.ИсправлениеОписаниеПричиныГруппа.Видимость = Объект.Исправление Или Объект.Перерасчет;
		Элементы.ИсправлениеКодПричины.Доступность          = Объект.Исправление Или Объект.Перерасчет;
		Элементы.ИсправлениеКодПричины.Подсказка            = НаименованиеПричиныИсправления();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НаименованиеПричиныИсправления()
	Если Не ЗначениеЗаполнено(Объект.ИсправлениеКодПричины) Тогда
		Возврат "";
	КонецЕсли;
	ЭлементСписка = Элементы.ИсправлениеКодПричины.СписокВыбора.НайтиПоЗначению(Объект.ИсправлениеКодПричины);
	Если ЭлементСписка = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Если КодСимвола(ЭлементСписка.Представление, 3) = КодСимвола(".") Тогда
		Возврат СокрЛП(Сред(ЭлементСписка.Представление, 4));
	Иначе
		Возврат СокрЛП(ЭлементСписка.Представление)
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ИсправлениеПриИзмененииСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Исправление");
	СЭДОФСС.ОбновитьСвертываемуюГруппу(ЭтотОбъект, Элементы.ИсправлениеГруппа);
КонецПроцедуры

&НаСервере
Процедура ИсправлениеКодПричиныПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ИсправлениеКодПричины");
	НаименованиеПричиныИсправления = НаименованиеПричиныИсправления();
	Если Не ЗначениеЗаполнено(НаименованиеПричиныИсправления) Тогда
		Объект.ИсправлениеКодПричины = "";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Примечание)
		Или Лев(Объект.Примечание, 108) = Лев(Элементы.ИсправлениеКодПричины.Подсказка, 108) Тогда
		Если Объект.ИсправлениеКодПричины = "06" Тогда
			Объект.Примечание = "";
		Иначе
			Объект.Примечание = НаименованиеПричиныИсправления;
		КонецЕсли;
	КонецЕсли;
	СЭДОФСС.ОбновитьСвертываемуюГруппу(ЭтотОбъект, Элементы.ИсправлениеГруппа);
КонецПроцедуры

&НаСервере
Функция ПредставлениеГруппыИсправления()
	Если Объект.Исправление Или Объект.Перерасчет Тогда
		ЭлементСписка = Элементы.ИсправлениеКодПричины.СписокВыбора.НайтиПоЗначению(Объект.ИсправлениеКодПричины);
		Если ЭлементСписка = Неопределено Тогда
			Возврат НСтр("ru = '<Причина не указана>';
						|en = '<Reason not specified>'");
		КонецЕсли;
		Возврат ЭлементСписка.Представление;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область Примечание

&НаКлиенте
Процедура ПримечаниеЗавершениеВыбора(Текст, ПустойПараметр) Экспорт
	ПримечаниеПриИзменении(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ПервичныйДокумент

&НаСервере
Процедура ПервичныйДокументПриИзмененииНаСервере()
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ПервичныйДокумент");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ПервичныйДокумент");
	Если ЗначениеЗаполнено(Объект.ПервичныйДокумент) Тогда
		ДокуменОбъект = РеквизитФормыВЗначение("Объект");
		ДокуменОбъект.Заполнить(Объект.ПервичныйДокумент);
		ЗначениеВРеквизитФормы(ДокуменОбъект, "Объект");
	КонецЕсли;
	ПриПолученииДанныхНаСервере("Объект");
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ВходящийЗапрос

&НаСервере
Процедура ВходящийЗапросПриИзмененииНаСервере()
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("*");
	Если ЗначениеЗаполнено(Объект.ВходящийЗапрос) Тогда
		ДокуменОбъект = РеквизитФормыВЗначение("Объект");
		ДокуменОбъект.Заполнить(Объект.ВходящийЗапрос);
		ЗначениеВРеквизитФормы(ДокуменОбъект, "Объект");
	КонецЕсли;
	ПриПолученииДанныхНаСервере("Объект");
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриоритетУДанныхВходящегоЗапросаЧисломПриИзмененииНаСервере()
	Объект.ПриоритетУДанныхВходящегоЗапроса = ПриоритетУДанныхВходящегоЗапросаЧислом;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ПриоритетУДанныхВходящегоЗапроса");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ДокументыНСПЗ

&НаСервере
Процедура ОбновитьЭлементыГруппыДокументыНСПЗ(Видимость, Представление)
	Видимость = (ЭтоОбычныйБольничный Или ЭтоНСПЗ) И Не Объект.ОтказВНазначенииПособия;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представления = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ПризнаниеСлучаяСтраховым) Тогда
		ПредставлениеЗначения = Строка(Объект.ПризнаниеСлучаяСтраховым);
		Представления.Добавить(НСтр("ru = 'Страховой случай';
									|en = 'Insured event'"));
		Представления.Добавить(НРег(Лев(ПредставлениеЗначения, 1)) + Сред(ПредставлениеЗначения, 2));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.АктН1ДатаВыдачи) Или ЗначениеЗаполнено(Объект.АктН1Номер) Тогда
		Представления.Добавить(НСтр("ru = 'Акт формы Н-1';
									|en = 'Certificate N-1'"));
		Представления.Добавить(ПредставлениеНомераИДаты(Объект.АктН1Номер, Объект.АктН1ДатаВыдачи));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.АктПЗДатаВыдачи) Тогда
		Представления.Добавить(Элементы.АктПЗДатаВыдачи.Заголовок);
		Представления.Добавить(Формат(Объект.АктПЗДатаВыдачи, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.АктВПроизвольнойФормеДатаВыдачи) Или ЗначениеЗаполнено(Объект.АктВПроизвольнойФормеНомер) Тогда
		Представления.Добавить(НСтр("ru = 'Акт в произвольной форме';
									|en = 'Certificate in an arbitrary form'"));
		Представления.Добавить(ПредставлениеНомераИДаты(Объект.АктВПроизвольнойФормеНомер, Объект.АктВПроизвольнойФормеДатаВыдачи));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РешениеСудаДатаВыдачи) Или ЗначениеЗаполнено(Объект.РешениеСудаНомер) Тогда
		Представления.Добавить(НСтр("ru = 'Решение суда';
									|en = 'Court decision'"));
		Представления.Добавить(ПредставлениеНомераИДаты(Объект.РешениеСудаНомер, Объект.РешениеСудаДатаВыдачи));
	КонецЕсли;
	УстановленаУтратаТрудоспобности = (Объект.УтратаТрудоспобности
		= Элементы.УтратаТрудоспобности.СписокВыбора[0].Значение);
	УтратаТрудоспобностиВидимость = ЗначениеЗаполнено(Объект.УтратаТрудоспобности)
		Или (СобытиеПосле(УчетПособийСоциальногоСтрахования.НачалоДействияПорядкаНСПЗ_2022())
			И (ЭтоОбычныйБольничный Или ЭтоНСПЗ));
	Элементы.УстановленаУтратаТрудоспобности.Видимость = УтратаТрудоспобностиВидимость;
	Если УтратаТрудоспобностиВидимость И ЗначениеЗаполнено(Объект.УтратаТрудоспобности) Тогда
		ЭлементСписка = Элементы.УтратаТрудоспобности.СписокВыбора.НайтиПоЗначению(Объект.УтратаТрудоспобности);
		Если ЭлементСписка = Неопределено Тогда
			Представления.Добавить(НСтр("ru = 'Утрата проф. трудоспобности';
										|en = 'Occupational disability'"));
			Представления.Добавить(Объект.УтратаТрудоспобности);
			Элементы.УтратаТрудоспобности.Видимость = Истина;
			Элементы.УтратаТрудоспобности.РежимВыбораИзСписка = Ложь;
		Иначе
			Представления.Добавить(ЭлементСписка.Представление);
		КонецЕсли;
	КонецЕсли;
	Представление = СтрСоединить(Представления, " ");
КонецПроцедуры

#КонецОбласти

#Область ИзвещениеФСС

&НаСервере
Процедура ОбновитьЭлементыГруппыИзвещениеФСС(Видимость, Представление)
	Видимость = Не Объект.ОтказВНазначенииПособия;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представление = ПредставлениеНомераИДаты(Объект.ИзвещениеФССНомер, Объект.ИзвещениеФССДата);
КонецПроцедуры

#КонецОбласти

#Область ОтказВНазначенииПособия

&НаСервере
Функция ПредставлениеОтказаВНазначенииПособияГруппа()
	Если Объект.ОтказВНазначенииПособия Тогда
		Если ЗначениеЗаполнено(Объект.ОтказВНазначенииПособияПричина) Тогда
			Возврат НСтр("ru = 'По причине: ';
						|en = 'Reason: '") + Объект.ОтказВНазначенииПособияПричина;
		Иначе
			Возврат НСтр("ru = 'Отказать в назначении пособия без уточнения причины';
						|en = 'Refuse to grant benefits without specifying the reason'");
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОтказВНазначенииПособияПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ОтказВНазначенииПособия");
	ОбновитьЭлементыФормы();
КонецПроцедуры

#КонецОбласти

#Область Перерасчет

&НаСервере
Функция ПредставлениеПерерасчета()
	Элементы.ПерерасчетИдентификаторСтрокиРеестра.Видимость = Объект.Перерасчет;
	Если Не Объект.Перерасчет Тогда
		Возврат "";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ПерерасчетИдентификаторСтрокиРеестра) Тогда
		Возврат НСтр("ru = 'Да, но не заполнен идентификатор строки реестра';
					|en = 'Yes, but the registry line ID is not filled'");
	КонецЕсли;
	МассивСтрок = СтрРазделить(Объект.ПерерасчетИдентификаторСтрокиРеестра, "_:", Ложь);
	Если МассивСтрок.Количество() >= 7 Тогда
		ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
		Год          = ОписаниеТиповЧисло.ПривестиЗначение(МассивСтрок[2]);
		Месяц        = ОписаниеТиповЧисло.ПривестиЗначение(МассивСтрок[3]);
		День         = ОписаниеТиповЧисло.ПривестиЗначение(МассивСтрок[4]);
		НомерРеестра = ОписаниеТиповЧисло.ПривестиЗначение(МассивСтрок[5]);
		НомерСтроки  = ОписаниеТиповЧисло.ПривестиЗначение(МассивСтрок[6]);
		Если Год > 2000 И Месяц > 0 И День > 0 И НомерРеестра > 0 И НомерСтроки > 0 Тогда
			Возврат СтрШаблон(
				НСтр("ru = 'Да, по реестру от %1 № %2, строка № %3';
					|en = 'Yes, according to registry No. %2 dated %1, line #%3'"),
				Формат(Дата(Год, Месяц, День), "ДЛФ=D"),
				Формат(НомерРеестра, "ЧГ="),
				Формат(НомерСтроки, "ЧГ="));
		КонецЕсли;
	КонецЕсли;
	Возврат СтрШаблон(
		НСтр("ru = 'Да, по идентификатору строки реестра %1';
			|en = 'Yes, by registry line ID %1'"),
		Объект.ПерерасчетИдентификаторСтрокиРеестра);
КонецФункции

#КонецОбласти

#Область Составитель

&НаСервере
Процедура СоставительПриИзмененииНаСервере()
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Составитель");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Составитель");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницу(Страницы, ТекущаяСтраница)
	Для Каждого Страница Из Страницы.ПодчиненныеЭлементы Цикл
		Страница.Видимость = (Страница = ТекущаяСтраница);
	КонецЦикла;
	Если ТекущаяСтраница <> Неопределено Тогда
		Страницы.ТекущаяСтраница = ТекущаяСтраница;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНомераИДаты(Номер, Дата)
	Если ЗначениеЗаполнено(Номер) Или ЗначениеЗаполнено(Дата) Тогда
		Возврат СтрШаблон(НСтр("ru = '№ %1 от %2';
								|en = 'No. %1 from %2'"), Номер, Формат(Дата, "ДЛФ=D"));
	КонецЕсли;
	Возврат "";
КонецФункции

// Открывает форму редактирования многострочного комментария.
//
// Параметры:
//  Элемент            - Строка    - Произвольный текст, который необходимо отредактировать.
//                     - ПолеФормы - Поле ввода, содержащее произвольный текст, который необходимо отредактировать.
//  ФормаИлиОбработчик - ФормаКлиентскогоПриложения - форма, в поле которой выполняется ввод комментария.
//                     - ОписаниеОповещения         - Описание оповещения формы, вызываемое после ввода комментария.
//  ПолноеИмяРеквизита - Строка - имя реквизита формы, в который будет помещен введенный пользователем комментарий.
//                                По умолчанию - "Объект.Комментарий".
//  ЗаголовокРеквизита - Строка - текст, который необходимо отобразить в заголовке формы.
//                                По умолчанию - "Комментарий".
//
// Пример:
//  ПоказатьФормуРедактированияКомментария(Элемент, ЭтотОбъект, "Объект.Комментарий");
//
&НаКлиенте
Процедура ПоказатьФормуРедактированияКомментария(Элемент, ФормаИлиОбработчик, ПолноеИмяРеквизита = "Объект.Комментарий", ЗаголовокРеквизита = Неопределено)
	
	Контекст = Новый Структура("Форма, ПолноеИмяРеквизита, Обработчик");
	Контекст.ПолноеИмяРеквизита = ПолноеИмяРеквизита;
	Если ТипЗнч(ФормаИлиОбработчик) = Тип("ОписаниеОповещения") Тогда
		Контекст.Обработчик = ФормаИлиОбработчик;
		Контекст.Форма      = ФормаИлиОбработчик.Модуль;
	Иначе
		Контекст.Форма = ФормаИлиОбработчик;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", ЭтотОбъект, Контекст);
	
	Текст = ?(ТипЗнч(Элемент) = Тип("ПолеФормы"), Элемент.ТекстРедактирования, Элемент);
	
	ЗаголовокФормы = ЗаголовокРеквизита;
	Если ЗаголовокФормы = Неопределено Тогда
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") И ЗначениеЗаполнено(Элемент.Заголовок) Тогда
			ЗаголовокФормы = Элемент.Заголовок;
		Иначе
			ЗаголовокФормы = НСтр("ru = 'Комментарий';
									|en = 'Comment'");
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Обработчик, Текст, ЗаголовокФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач Контекст) Экспорт
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Контекст.Форма,
		Контекст.ПолноеИмяРеквизита,
		ВведенныйТекст);
	
	Контекст.Форма.Модифицированность = Истина;
	
	Если ТипЗнч(Контекст.Обработчик) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Контекст.Обработчик, ВведенныйТекст);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СобытиеПосле(Дата)
	Возврат Не ЗначениеЗаполнено(Объект.ДатаНачалаСобытия)
		Или Объект.ДатаНачалаСобытия >= Дата;
КонецФункции

#КонецОбласти

#Область Команды

&НаСервере
Процедура ВключитьВозможностьРедактированияНаСервере()
	ВозможностьРедактирования = Не Элементы.ВключитьВозможностьРедактирования.Пометка;
	Элементы.ВключитьВозможностьРедактирования.Пометка = ВозможностьРедактирования;
	Элементы.СлужебныеПоляГруппа.ТолькоПросмотр        = Не ВозможностьРедактирования;
	Если ТолькоПросмотр И ВозможностьРедактирования Тогда
		ТолькоПросмотр = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Поддержка

&НаСервере
Функция ПодготовитьВопросВПоддержку()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Вложения = Новый Массив;
	Возврат СЭДОФСС.ПодготовитьВопросВПоддержку(ДокументОбъект, Вложения);
КонецФункции

#КонецОбласти

#КонецОбласти
