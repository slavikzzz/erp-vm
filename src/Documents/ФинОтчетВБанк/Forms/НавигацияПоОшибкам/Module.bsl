
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.ФинОтчет.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Не задан фин.отчет для открываемой формы навигации по ошибкам';
								|en = 'Financial report for the opened form of navigation by errors is not specified'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.АдресРезультата)
	 Или Не ЭтоАдресВременногоХранилища(Параметры.АдресРезультата) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ПредставленияСтрокОтчетов) Тогда
		// Должна быть структура из двух соответствий Отчеты и Субъекты, где ключ = КлючСтрокиОтчета.
		ВызватьИсключение НСтр("ru = 'Не заданы представления ключей строк для открываемой формы навигации по ошибкам';
								|en = 'Presentations of line keys for the opened form of navigation by errors are not specified'");
	КонецЕсли;
	
	// Получим информацию из пакета фин.отчетности.
	ИнформацияПакета = ПолучитьИзВременногоХранилища(Параметры.АдресРезультата);
	Если ИнформацияПакета = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ОтчетностьПоКлючамСтрок = ИнформацияПакета.ОтчетностьПоКлючамСтрок;
	СтрокиБезОшибок = ОтчетностьПоКлючамСтрок.НайтиСтроки(Новый Структура("ОписаниеОшибки", ""));
	Для каждого Отчет Из СтрокиБезОшибок Цикл
		ОтчетностьПоКлючамСтрок.Удалить(Отчет);
	КонецЦикла;
	КлючиСтрокОтчета = Новый Массив;
	Для каждого Отчет Из ОтчетностьПоКлючамСтрок Цикл
		Если ЗначениеЗаполнено(Отчет.КлючСтрокиОтчета) Тогда
			КлючиСтрокОтчета.Добавить(Отчет.КлючСтрокиОтчета);
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФинОтчет", Параметры.ФинОтчет);
	Запрос.УстановитьПараметр("КлючиСтрокОтчета", КлючиСтрокОтчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФинОтчетВБанкОтчетность.КлючСтрокиОтчета КАК КлючСтрокиОтчета,
	|	ФинОтчетВБанкОтчетность.КлючСтрокиСубъекта КАК КлючСтрокиСубъекта
	|ИЗ
	|	Документ.ФинОтчетВБанк.Отчетность КАК ФинОтчетВБанкОтчетность
	|ГДЕ
	|	ФинОтчетВБанкОтчетность.Ссылка = &ФинОтчет
	|	И ФинОтчетВБанкОтчетность.КлючСтрокиОтчета В(&КлючиСтрокОтчета)";
	КлючиСтрокОтчета = Запрос.Выполнить().Выгрузить();
	КлючиСтрокОтчета.Индексы.Добавить("КлючСтрокиОтчета");
	
	ТаблицаСообщенийДерево = РеквизитФормыВЗначение("ТаблицаСообщений");
	СообщенияРегОтчетовДерево = РеквизитФормыВЗначение("СообщенияРегОтчетов");
	
	СубъектыНаФорме = Новый Соответствие;
	НезаполненныеРеквизитыНаФорме = Новый Соответствие;
	
	// Разворачиваем таблицу-входящий параметр в дерево.
	УровеньОтчет = Неопределено;
	ПредставленияСтрокОтчетов = Параметры.ПредставленияСтрокОтчетов;
	
	НеобязательныеОтчеты = ПредставленияСтрокОтчетов.НеобязательныеОтчеты;
	
	ЕстьНеобязательныеОтчеты = НеобязательныеОтчеты.Количество() > 0;
	
	Если ИнформацияПакета.Свойство("ЕстьОшибкиВРеквизитахСубъектов") Тогда
		
		РеквизитыСубъектов = ИнформацияПакета.РеквизитыСубъектов;
		
		Для каждого РеквизитыСубъекта Из РеквизитыСубъектов Цикл
			КлючСтрокиСубъекта = РеквизитыСубъекта.КлючСтрокиСубъекта;
			
			Если ЗначениеЗаполнено(РеквизитыСубъекта.ОписаниеОшибки) Тогда
				СубъектыНаФорме.Вставить(КлючСтрокиСубъекта, РеквизитыСубъекта.Ссылка); 
				НезаполненныеРеквизитыНаФорме.Вставить(КлючСтрокиСубъекта, РеквизитыСубъекта.НезаполненныеРеквизиты);
				
				УровеньСубъект = ТаблицаСообщенийДерево.Строки.Найти(КлючСтрокиСубъекта);
				Если УровеньСубъект = Неопределено Тогда
					
					УровеньСубъект = ТаблицаСообщенийДерево.Строки.Добавить();
					УровеньСубъект.КлючСтроки     = КлючСтрокиСубъекта;
					ПредставлениеСубъекта  = ПредставленияСтрокОтчетов.Субъекты[КлючСтрокиСубъекта];
					
					Если ПредставлениеСубъекта = Неопределено Тогда
						УровеньСубъект.Представление  = РеквизитыСубъекта.Наименование;
					Иначе
						УровеньСубъект.Представление  = ПредставлениеСубъекта;
					КонецЕсли;
					
					ВторойУровень = УровеньСубъект.Строки.Добавить();
					ВторойУровень.КлючСтроки     = КлючОшибкиВРеквизитах();
					ВторойУровень.Представление  = РеквизитыСубъекта.ОписаниеОшибки;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СубъектыСНезаполненнымиРеквизитами = Новый ФиксированноеСоответствие(СубъектыНаФорме);
	НезаполненныеРеквизиты = Новый ФиксированноеСоответствие(НезаполненныеРеквизитыНаФорме);
	
	ОтборПоКлючу = Новый Структура("КлючСтрокиОтчета");
	Для каждого Отчет Из ОтчетностьПоКлючамСтрок Цикл
		
		НеобязательныйОтчет = (НеобязательныеОтчеты[Отчет.КлючСтрокиОтчета] = Истина);
		
		СоответствиеКлючей = КлючиСтрокОтчета.Найти(Отчет.КлючСтрокиОтчета, "КлючСтрокиОтчета");
		Если СоответствиеКлючей = Неопределено Тогда
			// Ошибка относится в целом ко всему пакету отчетности.
			УровеньСубъект = ТаблицаСообщенийДерево.Строки.Добавить();
			УровеньСубъект.КлючСтроки     = КлючОшибкиВЦеломПоПакету();
			УровеньСубъект.Представление  = Отчет.Представление;
			УровеньСубъект.ОписаниеОшибки = Отчет.ОписаниеОшибки;
			Продолжить;
			
		КонецЕсли;
		
		УровеньСубъект = ТаблицаСообщенийДерево.Строки.Найти(СоответствиеКлючей.КлючСтрокиСубъекта);
		Если УровеньСубъект = Неопределено Тогда
			
			УровеньСубъект = ТаблицаСообщенийДерево.Строки.Добавить();
			УровеньСубъект.КлючСтроки     = СоответствиеКлючей.КлючСтрокиСубъекта;
			УровеньСубъект.Представление  = ПредставленияСтрокОтчетов.Субъекты[СоответствиеКлючей.КлючСтрокиСубъекта];
			
		КонецЕсли;
		
		Если ЕстьНеобязательныеОтчеты Тогда

			Если НеобязательныйОтчет Тогда 
				
				Если УровеньСубъект.Строки.Количество() = 0 Тогда
					
					ВторойУровень = УровеньСубъект.Строки.Добавить();
					
				Иначе
					
					ВторойУровень = УровеньСубъект.Строки.Найти(НеобязательныеОтчетыПредставление(), "Представление");
				
					Если ВторойУровень = Неопределено Тогда 
					
						ВторойУровень = УровеньСубъект.Строки.Добавить(); // необязательные отчеты размещаем в конце
						
					КонецЕсли;
					
				КонецЕсли;
					
				ВторойУровень.КлючСтроки     = КлючГруппыНеобязательныхОтчетов();
				ВторойУровень.Представление  = НеобязательныеОтчетыПредставление();

			Иначе
				
				Если УровеньСубъект.Строки.Количество() = 0 Тогда
					
					ВторойУровень = УровеньСубъект.Строки.Добавить();
					
				Иначе
					
					ВторойУровень = УровеньСубъект.Строки.Найти(ОбязательныеОтчетыПредставление(), "Представление");
				
					Если ВторойУровень = Неопределено Тогда 
					
						ВторойУровень = УровеньСубъект.Строки.Вставить(0); // обязательные отчеты размещаем в начале
						
					КонецЕсли;
					
				КонецЕсли;
				
				ВторойУровень.КлючСтроки     = КлючГруппыОбязательныхОтчетов();
				ВторойУровень.Представление  = ОбязательныеОтчетыПредставление();
					
			КонецЕсли;
			
		Иначе
			
			ВторойУровень = УровеньСубъект;
		
		КонецЕсли;
			
		
		Если УровеньОтчет = Неопределено
		 Или УровеньОтчет.КлючСтроки <> Отчет.КлючСтрокиОтчета Тогда

			УровеньОтчет = ВторойУровень.Строки.Добавить();
			УровеньОтчет.КлючСтроки     = Отчет.КлючСтрокиОтчета;
			УровеньОтчет.Представление  = ПредставленияСтрокОтчетов.Отчеты[Отчет.КлючСтрокиОтчета];
			УровеньОтчет.ОписаниеОшибки = Отчет.ОписаниеОшибки;

		КонецЕсли;
		
		КлючСтрокиРегОтчета = 0;
		Для Каждого РегОтчет Из Отчет.ДетализацияОшибок Цикл
			
			КлючСтрокиРегОтчета = КлючСтрокиРегОтчета + 1;
			
			УровеньРегОтчет = УровеньОтчет.Строки.Добавить();
			УровеньРегОтчет.КлючСтроки     = КлючСтрокиРегОтчета;
			УровеньРегОтчет.Представление  = ?(ПустаяСтрока(РегОтчет.Отчет), Отчет.Представление, РегОтчет.Отчет);
			УровеньРегОтчет.ОписаниеОшибки = РегОтчет.Описание;
			
			СообщениеРегОтчет = СообщенияРегОтчетовДерево.Строки.Найти(РегОтчет.ОтчетДок, "ОтчетДок");
			Если СообщениеРегОтчет = Неопределено Тогда
				
				СообщениеРегОтчет = СообщенияРегОтчетовДерево.Строки.Добавить();
				СообщениеРегОтчет.Отчет            = РегОтчет.Отчет;
				СообщениеРегОтчет.ОтчетДок         = РегОтчет.ОтчетДок;
				СообщениеРегОтчет.КлючСтрокиОтчета = Отчет.КлючСтрокиОтчета;
				
			КонецЕсли;
			
			СообщениеРегОтчет = СообщениеРегОтчет.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СообщениеРегОтчет, РегОтчет);
			СообщениеРегОтчет.КлючСтрокиОтчета = КлючСтрокиРегОтчета;
			
		КонецЦикла;
	
	КонецЦикла; 
	УдалитьИзВременногоХранилища(Параметры.АдресРезультата);
	
	КоличествоОшибок = 0;
	КоличествоОтчетов = 0;
	Для каждого УровеньСубъект Из ТаблицаСообщенийДерево.Строки Цикл
		
		КоличествоОшибокВСубъекте = 0;
		
		Для каждого ВторойУровень Из УровеньСубъект.Строки Цикл
			
			Если ВторойУровень.КлючСтроки = КлючОшибкиВРеквизитах() Тогда
			
				Продолжить;	
			
			КонецЕсли;
			
			Если ЕстьНеобязательныеОтчеты Тогда
				
				КоличествоОшибокВСубъекте = КоличествоОшибокВСубъекте + ВторойУровень.Строки.Количество();
				
				Для каждого УровеньОтчет Из ВторойУровень.Строки Цикл
					
					ОбработатьСтрокуДерева(УровеньОтчет, КоличествоОтчетов, КоличествоОшибок)
					
				КонецЦикла;
				
				ВторойУровень.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Строк с ошибками: %1';
																|en = 'Lines with errors: %1'"),
					ВторойУровень.Строки.Количество());
				
			Иначе
				
				КоличествоОшибокВСубъекте = КоличествоОшибокВСубъекте + 1;
				ОбработатьСтрокуДерева(ВторойУровень, КоличествоОтчетов, КоличествоОшибок);
				
			КонецЕсли;
			
		КонецЦикла;
		
		УровеньСубъект.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Строк отчетности с ошибками: %1';
														|en = 'Reporting lines with errors: %1'"),
			КоличествоОшибокВСубъекте);
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(СообщенияРегОтчетовДерево, "СообщенияРегОтчетов");
	ЗначениеВРеквизитФормы(ТаблицаСообщенийДерево, "ТаблицаСообщений");
	
	НадписьВсегоОшибок = СтрШаблон(НСтр("ru = '%1 в %2';
										|en = '%1 in %2'"),
		СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';Обнаружена %1 ошибка;;Обнаружено %1 ошибки;Обнаружено %1 ошибки; Обнаружено %1 ошибки';
				|en = ';%1 error detected;;;;%1 errors detected'"), КоличествоОшибок),
		СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 отчете;;%1 отчетах;%1 отчетах; %1 отчетах';
				|en = ';%1 report;;;;%1 reports'"), КоличествоОтчетов));
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЕстьНеобязательныеОтчеты Тогда
		Для каждого СтрокаДерева Из ТаблицаСообщений.ПолучитьЭлементы() Цикл
			СвернутьНеобязательные(СтрокаДерева);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьСтрокуДерева(УровеньОтчет, КоличествоОтчетов, КоличествоОшибок)
	
	КоличествоОтчетов = КоличествоОтчетов + 1;
	
	КоличествоРегОшибок = УровеньОтчет.Строки.Количество();
	Если КоличествоРегОшибок = 0 Тогда
		
		КоличествоОшибок = КоличествоОшибок + 1;
		
	Иначе
		
		КоличествоОшибок = КоличествоОшибок + КоличествоРегОшибок;
		УровеньОтчет.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибок в отчете: %1';
													|en = 'Errors in the report: %1'"), КоличествоРегОшибок);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытьФормуНавигацииПоОшибкамФинОтчетности"
	   И Источник = Параметры.ФинОтчет Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьНеобязательные(СтрокаДерева)
	
	Для каждого Потомок Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если Потомок.КлючСтроки = КлючГруппыНеобязательныхОтчетов() Тогда
			
			Элементы.ТаблицаСообщений.Свернуть(Потомок.ПолучитьИдентификатор());
			
		ИначеЕсли Потомок.КлючСтроки = КлючГруппыОбязательныхОтчетов() Тогда
			
			Элементы.ТаблицаСообщений.Развернуть(Потомок.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТаблицаСообщенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекРодитель = ТекДанные.ПолучитьРодителя();
	Если ТекРодитель = Неопределено
		ИЛИ ТекДанные.КлючСтроки = КлючГруппыОбязательныхОтчетов()
		ИЛИ ТекДанные.КлючСтроки = КлючГруппыНеобязательныхОтчетов() Тогда
		// Верхний уровень не расшифровываем.
		Возврат;

	КонецЕсли;

	Если ТекРодитель.ПолучитьРодителя() = Неопределено ИЛИ ТекРодитель.КлючСтроки >= МинимальныйКлючОсобогоНазначения() Тогда // переходим к строке пакета отчетности
		
		АктивизироватьСтрокуОтчетности(ТекДанные);
		
	Иначе // переходим к ячейке регламентированного отчета
		
		СтандартнаяОбработка = Ложь;
		ОткрываемыйОтчет = Неопределено;
		Для каждого СообщениеРегОтчет Из СообщенияРегОтчетов.ПолучитьЭлементы() Цикл
			Если СообщениеРегОтчет.КлючСтрокиОтчета = ТекРодитель.КлючСтроки Тогда
				ОткрываемыйОтчет = СообщениеРегОтчет;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ОткрываемыйОтчет = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ОткрываемаяЯчейка = Неопределено;
		Для каждого СообщениеРегОтчет Из ОткрываемыйОтчет.ПолучитьЭлементы() Цикл
			Если СообщениеРегОтчет.КлючСтрокиОтчета = ТекДанные.КлючСтроки Тогда
				ОткрываемаяЯчейка = СообщениеРегОтчет;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ОткрываемаяЯчейка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		АктивизироватьЯчейкуРегламентированногоОтчета(ОткрываемаяЯчейка);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьСтрокуОтчетности(ВыбраннаяСтрока)
	
	Отчет = Новый Структура;
	Отчет.Вставить("КлючСтрокиОтчета",   ВыбраннаяСтрока.КлючСтроки);
	
	Если ВыбраннаяСтрока.КлючСтроки = КлючОшибкиВРеквизитах() Тогда
		КлючСтрокиСубъекта = ВыбраннаяСтрока.ПолучитьРодителя().КлючСтроки;
		Субъект = СубъектыСНезаполненнымиРеквизитами[КлючСтрокиСубъекта];
		НезаполненныеРеквизитыСубъекта = НезаполненныеРеквизиты[КлючСтрокиСубъекта];
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Субъект);
		СубъектКонтрагент = Ложь;
		Если ТипЗнч(Субъект) = Тип("СправочникСсылка.Организации") Тогда
			Форма = ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		ИначеЕсли ТипЗнч(Субъект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Форма = ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
			СубъектКонтрагент = Истина;
		Иначе
			Возврат;
		КонецЕсли;
		
		Для каждого НезаполненныйРеквизитСубъекта Из НезаполненныеРеквизитыСубъекта Цикл
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru = 'Поле %1 не заполнено';
											|en = '%1 field is not filled'"), НезаполненныйРеквизитСубъекта);
			Сообщение.ИдентификаторНазначения = Форма.УникальныйИдентификатор;
			Если НезаполненныйРеквизитСубъекта = "ОГРН" И СубъектКонтрагент Тогда
				Сообщение.Поле = "РегистрационныйНомер";
			Иначе
				Сообщение.Поле = НезаполненныйРеквизитСубъекта;
			КонецЕсли;
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Если ЕстьНеобязательныеОтчеты Тогда
		Отчет.Вставить("КлючСтрокиСубъекта", ВыбраннаяСтрока.ПолучитьРодителя().ПолучитьРодителя().КлючСтроки);
	Иначе
		Отчет.Вставить("КлючСтрокиСубъекта", ВыбраннаяСтрока.ПолучитьРодителя().КлючСтроки);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", Параметры.ФинОтчет);
	
	ФормаОтчетности = ОткрытьФорму("Документ.ФинОтчетВБанк.Форма.ФормаДокумента", ПараметрыФормы);
	
	ФормаОтчетности.АктивизироватьЯчейку(Отчет);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейкуРегламентированногоОтчета(ВыбраннаяСтрока)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекДок = ВыбраннаяСтрока.ОтчетДок;
	Если ТекДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ячейка = Новый Структура;
	Ячейка.Вставить("Раздел", ВыбраннаяСтрока.Раздел);
	Ячейка.Вставить("Страница", ВыбраннаяСтрока.Страница);
	Ячейка.Вставить("Строка", ВыбраннаяСтрока.Строка);
	Ячейка.Вставить("Графа", ВыбраннаяСтрока.Графа);
	Ячейка.Вставить("СтрокаПП", ВыбраннаяСтрока.СтрокаПП);
	Ячейка.Вставить("ИмяЯчейки", ВыбраннаяСтрока.ИмяЯчейки);
	Ячейка.Вставить("Описание", ВыбраннаяСтрока.Описание);
	
	Попытка
	    // Использован код, взятый из ФормаНавигацииПоОшибкам у документа ВыгрузкаРегламентированныхОтчетов.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета");
		ПараметрыФормы.Вставить("мСохраненныйДок");
		ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета");
		ПараметрыФормы.Вставить("Организация");
		ПараметрыФормы.Вставить("мВыбраннаяФорма");
		ПараметрыФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417",
								РегламентированнаяОтчетностьКлиент.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417());
		
		ФормаРеглОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьСсылкуНаФормуРеглОтчета(ТекДок, ПараметрыФормы);
		Если СтрНайти(ФормаРеглОтчета, "РегламентированныйОтчетСтатистикаПрочиеФормы") > 0 Тогда
			ФормаРеглОтчета = ?(СтрНайти(ФормаРеглОтчета, "_") = 0, ФормаРеглОтчета, Лев(ФормаРеглОтчета, СтрНайти(ФормаРеглОтчета, "_") - 1));
		КонецЕсли;
		
		Если СтрЧислоВхождений(ФормаРеглОтчета, "ОтчетМенеджер") > 0 Тогда
			
			ФормаРеглОтчета = СтрЗаменить(ФормаРеглОтчета, "ОтчетМенеджер.", "");
			ФормаРеглОтчета = ОткрытьФорму("Отчет." + ФормаРеглОтчета, ПараметрыФормы, , ПараметрыФормы.мСохраненныйДок);
			
		ИначеЕсли СтрЧислоВхождений(ФормаРеглОтчета, "ВнешнийОтчетОбъект") > 0 Тогда
			
			ФормаРеглОтчета = СтрЗаменить(ФормаРеглОтчета, "ВнешнийОтчетОбъект.", "");
			ФормаРеглОтчета = ОткрытьФорму("ВнешнийОтчет." + ФормаРеглОтчета, ПараметрыФормы, , ПараметрыФормы.мСохраненныйДок);
			
		КонецЕсли;
		
		ФормаРеглОтчета.АктивизироватьЯчейку(Ячейка);
	
	Исключение
		// Регистрируем ошибку в журнале регистрации.
		ЗаписьИсключенияВЖурналРегистрации(Параметры.ФинОтчет, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписьИсключенияВЖурналРегистрации(Знач ФинОтчет, Знач Комментарий)
	
	ИмяСобытия = УниверсальныйОбменСБанкамиОбщегоНазначения.СобытиеЖурналаРегистрации(
		Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность,
		НСтр("ru = 'Переход к ячейке с ошибкой';
			|en = 'Migration to the error cell'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ЗаписьЖурналаРегистрации(
		ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ФинОтчетВБанк, ФинОтчет, Комментарий);

КонецПроцедуры
		
#КонецОбласти

#Область ВспомогательныеФункции

&НаКлиентеНаСервереБезКонтекста
Функция МинимальныйКлючОсобогоНазначения()
	
	Возврат 99990;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючГруппыОбязательныхОтчетов()
	
	Возврат 99997;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючГруппыНеобязательныхОтчетов()
	
	Возврат 99998;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючОшибкиВЦеломПоПакету()
	
	Возврат 99999;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючОшибкиВРеквизитах()
	
	Возврат 99990;

КонецФункции

&НаСервереБезКонтекста
Функция НеобязательныеОтчетыПредставление()

	Возврат НСтр("ru = 'Необязательные отчеты';
				|en = 'Optional reports'");

КонецФункции

&НаСервереБезКонтекста
Функция ОбязательныеОтчетыПредставление()

	Возврат НСтр("ru = 'Обязательные отчеты';
				|en = 'Required reports'");

КонецФункции

#КонецОбласти
