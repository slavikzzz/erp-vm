
#Область ОписаниеПеременных

&НаКлиенте
Перем СтатусПроверкиАрхива;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();

	// В текщей форме обновление данных сервиса не запускаем, т.к. считаем, что текущая форма открывается из формы списка,
	// которая в свою очередь уже запускала обновление из сервиса.
	
	Если Параметры.Ключ.Пустая() Тогда
		Если ЗначениеЗаполнено(Параметры.Правило) Тогда
			ЗаполнитьЭкономическиеСубъектыПоПравилу(Параметры.Правило);
		Иначе
			// При создании нового комплекта отчетности заполняем список отчетов
			// по требования банка здесь, а в ОбработкаЗаполнения(),
			// чтобы дважды не считывать настройки комплекта из данных сервиса.
			ЗаполнитьСоставОтчетностиПоУмолчанию();
		КонецЕсли;
		
		Если Параметры.ЗначенияЗаполнения.Свойство("АвтозаполнениеОтчетовПриОткрытии") 
			И Параметры.ЗначенияЗаполнения.АвтозаполнениеОтчетовПриОткрытии = Истина Тогда
		
			АвтозаполнениеОтчетовПриОткрытии = Истина;	
		
		КонецЕсли;
		
		НастройкиКомплекта = НастройкиКомплекта();
		Если НастройкиКомплекта <> Неопределено Тогда
			
			Объект.НачалоПериода = РассчитатьНачалоПериода(Объект.Дата, НастройкиКомплекта.Периодичность, НастройкиКомплекта.СНачалаГода);
			
		КонецЕсли;
	
	КонецЕсли;

	// Отображаем дерево для экономического субъекта из первой строки.
	Если Объект.ЭкономическиеСубъекты.Количество() > 0 Тогда
		ЗаполнитьДеревоОтчетов(Объект.ЭкономическиеСубъекты[0]);
	КонецЕсли;
	
	СформироватьЗаголовок();
	
	ОбновитьОтображениеСостоянияОтчета();
	
	ЗаполнитьДобавленныеКолонкиЭкономическиеСубъекты(ЭтотОбъект);
	
	// Кнопку Подписать оставим одну на форме в зависимости от того, чьи подписи требуются банку.
	ДостаточноПодписиОсновнойОрганизации = ДостаточноПодписиОсновнойОрганизации();
	Если ДостаточноПодписиОсновнойОрганизации Тогда
		Элементы.ДеревоОтчетовПодписать.Видимость = Ложь;
		Элементы.Подписать.Видимость              = НЕ ТолькоПросмотр;
	Иначе
		Элементы.Подписать.Видимость              = Ложь;
		Элементы.ДеревоОтчетовПодписать.Видимость = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	// Скроем команды, которые не доступны, если нельзя редактировать.
	Элементы.ЗаполнитьВсе.Видимость          = НЕ ТолькоПросмотр;
	Элементы.ЗаполнитьТекущий.Видимость      = НЕ ТолькоПросмотр;
	Элементы.ЗаполнитьТекущийОтчет.Видимость = НЕ ТолькоПросмотр;

	Элементы.ОтправитьВБанк.Видимость         = НЕ ТолькоПросмотр;
	
	Элементы.Загрузить.Видимость = НЕ ТолькоПросмотр;
	
	Элементы.ЭкономическиеСубъектыПодменюДобавить.Видимость               = НЕ ТолькоПросмотр;
	Элементы.ЭкономическиеСубъектыКонтекстноеМенюГруппаДобавить.Видимость = НЕ ТолькоПросмотр;
	
	Элементы.ДеревоОтчетовГруппаДобавить.Видимость                        = НЕ ТолькоПросмотр;
	
	// Сохраним в реквизит формы настройку разворачивания дерева
	НастройкиКомплекта = НастройкиКомплекта();
	Если НастройкиКомплекта <> Неопределено Тогда
		РазворачиватьДерево = НастройкиКомплекта.РазворачиватьДерево;
	КонецЕсли;
	
	Если НЕ РазворачиватьДерево Тогда
		ОтобразитьДополнениеНаименованияГруппНаСервере(ДеревоОтчетов.ПолучитьЭлементы());
	КонецЕсли;
	
	ПоказатьСкрытьБаннер();
	
	СтандартныйПакет = Не Объект.ПроизвольныйПакет;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда

		Если ЗначениеЗаполнено(Источник) Тогда
			ОбработкаОповещенияИзменениеПрисоединенногоФайла(Источник);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_РегламентированныйОтчет" Тогда
		
		Если Не ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "Ссылка")) Тогда
			Возврат;
		КонецЕсли;
		АктуальнаяВерсияДанных = АктуальнаяВерсияДанныхОтчета(Параметр.Ссылка);
		
		// Обновим отображаемые данные.
		Если ТекущийСубъект = Параметр.Организация Тогда
			
			СтрокиДерева = Новый Массив;
			ЗаполнитьПодчиненныеСтрокиИзДереваРекурсивно(СтрокиДерева, ДеревоОтчетов.ПолучитьЭлементы());
			
			Для каждого СтрокаДерева Из СтрокиДерева Цикл
				
				Если СтрокаДерева.ОтчетСсылка <> Параметр.Ссылка Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ВерсияДанныхОтчета	  = "";
				СтрокаДерева.ФайлОтчета           = Неопределено;
				СтрокаДерева.ФайлОтчетаСодержитЭП = Ложь;
				СтрокаДерева.ПодписанЭП           = Ложь;
				СтрокаДерева.ВерсияДанныхОтчетаАктуальная = АктуальнаяВерсияДанных;
				
				// Обновим также представления для гиперссылок с доступными действиям над отчетом.
				СформироватьДоступныеДействия(ЭтотОбъект, СтрокаДерева);
				
			КонецЦикла;

		КонецЕсли;
		
		// Обновим данные других субъектов пакета.
		Для каждого СтрокаДерева Из Объект.Отчетность Цикл
			
			Если СтрокаДерева.ОтчетСсылка <> Параметр.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева.ВерсияДанныхОтчета	  = "";
			СтрокаДерева.ФайлОтчета           = Неопределено;
			СтрокаДерева.ФайлОтчетаСодержитЭП = Ложь;
			
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = БухгалтерскиеОтчетыКлиентСервер.ИмяСобытияВыгрузкаРезультатаОтчета()	Тогда
		
		Если ТипЗнч(Источник) = Тип("Структура")
		   И Источник.ИдентификаторФормыВладельца = УникальныйИдентификатор Тогда
		    ПослеЗакрытияОтчета(Параметр, Источник);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
    Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
         МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
         МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    КонецЕсли;
    // Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ДеревоОтчетовИзменено Тогда
		СтрокаСубъекта = Документы.ФинОтчетВБанк.НайтиСтрокуПоКлючу(
			ТекущийОбъект.ЭкономическиеСубъекты, "КлючСтрокиСубъекта", ТекущийКлючСтрокиСубъекта);
		Если СтрокаСубъекта <> Неопределено Тогда
			СохранитьДеревоОтчетов(ТекущийОбъект, СтрокаСубъекта); 
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("СинхронизироватьПрисоединенныеФайлы") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СинхронизироватьПрисоединенныеФайлы", ПараметрыЗаписи.СинхронизироватьПрисоединенныеФайлы);
	КонецЕсли;
	
	// Обновим наименование отчета в списке по данным из настроек банка (они могли быть изменены в сервисе).
	НастройкиКомплекта = НастройкиКомплекта();
	Если НастройкиКомплекта <> Неопределено Тогда
		ТекущийОбъект.КраткоеПредставлениеКомплекта = НастройкиКомплекта.КраткоеПредставление;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("Запись_ФинОтчетВБанк", ПараметрыЗаписи, Объект.Ссылка);
	
	ЗаполнитьДобавленныеКолонкиЭкономическиеСубъекты(ЭтотОбъект);
	
КонецПроцедуры

// Вызывается из формы НавигацияПоОшибкам, чтобы спозиционироваться на опреленной строке.
//
// Параметры:
//  Отчет        - Структура - ключи строки, которую нужно сделать текущей: КлючСтрокиОтчета и КлючСтрокиСубъекта.
//
&НаКлиенте
Процедура АктивизироватьЯчейку(Отчет) Экспорт
	
	ЦелеваяСтрока = Неопределено;
	Для Каждого СтрокаОтчетности Из Объект.ЭкономическиеСубъекты Цикл
		Если СтрокаОтчетности.КлючСтрокиСубъекта = Отчет.КлючСтрокиСубъекта Тогда
			ЦелеваяСтрока = СтрокаОтчетности;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЦелеваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.ЭкономическиеСубъекты.ТекущаяСтрока = ЦелеваяСтрока.ПолучитьИдентификатор();
	Подключаемый_ЭкономическиеСубъектыПриАктивизацииСтроки();
	
	ЦелеваяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		ДеревоОтчетов.ПолучитьЭлементы(), "КлючСтрокиОтчета", Отчет.КлючСтрокиОтчета);
	Если ЦелеваяСтрока <> Неопределено Тогда
		Элементы.ДеревоОтчетов.ТекущаяСтрока = ЦелеваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если АвтозаполнениеОтчетовПриОткрытии Тогда
		
		ПодключитьОбработчикОжиданияЗаполнитьПоДаннымУчетаПоВсемОрганизациям();
		
	КонецЕсли;
	
	ОтобразитьРежимКомплекта();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияЭтапыОтправкиНажатие(Элемент)
	
	Если СтатусОтчета = ПредопределенноеЗначение("Перечисление.СтатусыОтправкиФинОтчетностиВБанки.НеОтправлено") Тогда
		Возврат;
	КонецЕсли;
	
	ФинОтчетностьВБанкиКлиент.ПоказатьФормуСостоянияДокументооборота(Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияГиперссылкаПротоколНажатие(Элемент)
	
	ФинОтчетностьВБанкиКлиент.ОткрытьПротокол(Объект.Ссылка, , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныйПакетПриИзменении(Элемент)
	Объект.ПроизвольныйПакет = Не СтандартныйПакет;
	ОтобразитьРежимКомплекта();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭкономическиеСубъекты

&НаКлиенте
Процедура ЭкономическиеСубъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// После добавления организации или контрагента не позволяем их изменять,
	// чтобы не получалось, что отчеты сформированы по одному субъекту, потом его перевыбрали,
	// а отчеты остались от предыдущего.
	// Поэтому просто открываем форму выбранной организации или контрагента.
	
	ТекущиеДанные = Элементы.ЭкономическиеСубъекты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Субъект) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Субъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭкономическиеСубъектыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжиданияОбновленияДереваОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономическиеСубъектыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Вместо стандартного окна покажем сначала выбор типа субъекта.
	Отказ = Истина;
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("Организация", НСтр("ru = 'Организация';
												|en = 'Company'"));
	СписокВариантов.Добавить("Контрагент",  НСтр("ru = 'Контрагент';
												|en = 'Counterparty'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭкономическиеСубъектыПередНачаломДобавленияЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВариантов);

КонецПроцедуры

&НаКлиенте
Процедура ЭкономическиеСубъектыПередНачаломДобавленияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "Организация" Тогда
		НачатьДобавлениеОрганизации();
	Иначе
		НачатьДобавлениеКонтрагента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭкономическиеСубъектыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;

	Подстроки = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.ЭкономическиеСубъекты.ВыделенныеСтроки Цикл
		СтрокаСубъекта = Объект.ЭкономическиеСубъекты.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Подстроки.Добавить(СтрокаСубъекта.Наименование);
	КонецЦикла;
	
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Удалить отчеты %1 из комплекта отчетности?';
									|en = 'Delete %1 reports from the reporting set?'"), СтрСоединить(Подстроки, ", "));
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭкономическиеСубъектыПередУдалениемПослеВопроса", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЭкономическиеСубъектыПередУдалениемПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	УдалитьСтрокиПоСубъектам(Элементы.ЭкономическиеСубъекты.ВыделенныеСтроки);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтчетность

&НаКлиенте
Процедура ДеревоОтчетовПриИзменении(Элемент)
	
	ДеревоОтчетовИзменено = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ДеревоОтчетовОписание
		ИЛИ Поле = Элементы.ДеревоОтчетовДействиеСОтчетом
		ИЛИ Поле = Элементы.ДеревоОтчетовДействиеПодписать
		ИЛИ Поле = Элементы.ДеревоОтчетовДействиеОчистить Тогда
		
		// Обработаем нажатие на гиперссылке с действием над отчетом.
		ТекущиеДанные = Элементы.ДеревоОтчетов.ТекущиеДанные;
		
		Если Поле = Элементы.ДеревоОтчетовОписание Тогда
			ИмяДействия = ДействиеОписание();
		ИначеЕсли Поле = Элементы.ДеревоОтчетовДействиеСОтчетом Тогда
			ИмяДействия = ТекущиеДанные.ДействиеСОтчетом;
		ИначеЕсли Поле = Элементы.ДеревоОтчетовДействиеПодписать Тогда
			ИмяДействия = ТекущиеДанные.ДействиеПодписать;
		ИначеЕсли Поле = Элементы.ДеревоОтчетовДействиеОчистить Тогда
			ИмяДействия = ДействиеОчистить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяДействия) Тогда
			СтандартнаяОбработка = Ложь; 
			ОбработатьДействиеСОтчетом(ТекущиеДанные, ИмяДействия);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПриАктивизацииСтроки(Элемент)

	// Настроим видимость пунктов меню в зависимости от текущей строки дерева.
	СтрокаДереваОтветов = Элементы.ДеревоОтчетов.ТекущиеДанные;
	Если СтрокаДереваОтветов = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Контекстное меню в дереве.
	Элементы.ДеревоОтчетовКонтекстноеМенюОткрытьМЧД.Видимость = ЗначениеЗаполнено(СтрокаДереваОтветов.Доверенность);
	Элементы.ДеревоОтчетовКонтекстноеМенюОткрытьКарточкуФайла.Видимость = ЗначениеЗаполнено(СтрокаДереваОтветов.ФайлОтчета);
	Элементы.ДеревоОтчетовКонтекстноеМенюОткрытьКарточкуФайлаXML.Видимость = ЗначениеЗаполнено(СтрокаДереваОтветов.ФайлОтчетаXML);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Добавление доступно только через подменю "Добавить отчет" над деревом.
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	// Проверим, чтобы текущая строка и любая из вложенных в нее не содержали признака обязательности заполнения.
	ПодчиненныеСтроки  = Новый Массив;
	ОбязательныеСтроки = Новый Массив;
	
	Для каждого ВыделеннаяСтрока Из Элементы.ДеревоОтчетов.ВыделенныеСтроки Цикл
		
		СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ПорядокПроверкиЗаполнения  = СтрокаДереваОтчетов.ПроверкаЗаполнения;
		
		Если ЗначениеЗаполнено(СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта) Тогда
			ОбязательныеСтроки.Добавить(СтрокаДереваОтчетов);
		КонецЕсли;

		// Ищем также среди подчиненных строк.
		ПодчиненныеСтроки.Очистить();
		ЗаполнитьПодчиненныеСтрокиИзДереваРекурсивно(ПодчиненныеСтроки, СтрокаДереваОтчетов.ПолучитьЭлементы());
		
		Для каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			Если ЗначениеЗаполнено(ПодчиненнаяСтрока.ИдентификаторСтрокиКомплекта) Тогда
				ОбязательныеСтроки.Добавить(ПодчиненнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОбязательныеСтроки.Количество() > 0 Тогда
		Если ОбязательныеСтроки.Количество() = 1 Тогда
			НачалоТекстаПредупреждения = СтрШаблон(
				НСтр("ru = 'Отчет ""%1"" удалить из списка невозможно.';
					|en = 'Cannot delete the ""%1"" report from the list.'"),
				ПолноеПредставлениеОтчета(ОбязательныеСтроки[0]));
		ИначеЕсли ОбязательныеСтроки.Количество() = 2 Тогда
			НачалоТекстаПредупреждения = СтрШаблон(
				НСтр("ru = 'Отчеты ""%1"" и ""%2"" удалить из списка невозможно.';
					|en = 'Cannot delete the ""%1"" and ""%2"" reports from the list.'"),
				ПолноеПредставлениеОтчета(ОбязательныеСтроки[0]),
				ПолноеПредставлениеОтчета(ОбязательныеСтроки[1]));
		Иначе
		
			СтрокаПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 отчет;;%1 отчета;%1 отчета;%1 отчетов';
					|en = ';%1 report;;;;%1 reports'"), 
				ОбязательныеСтроки.Количество() - 1,, "ЧГ=");
		
			НачалоТекстаПредупреждения = СтрШаблон(
				НСтр("ru = 'Отчет ""%1"" и еще %2 удалить из списка невозможно.';
					|en = 'Cannot delete the ""%1"" report and %2 from the list.'"),
				ПолноеПредставлениеОтчета(ОбязательныеСтроки[0]),
				СтрокаПрописью);
		КонецЕсли;
		
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = '%1
						|Удалять можно только строки, добавленные вручную.
						|
						|В тех случаях, когда запрашиваемые отчеты неприменимы для %2, необходимо убрать отметку к отправке в начале строки.';
						|en = '%1
						|You can delete only manually added lines.
						|
						|If reports to request are inapplicable to %2, clear the sending mark in the beginning of the line.'"),
			НачалоТекстаПредупреждения,
			ТекущийСубъект);
		// Для сохранения символов переноса строк в веб-клиенте передаем как форматированную строку.
		ПоказатьПредупреждение(, СтроковыеФункцииКлиент.ФорматированнаяСтрока(ТекстПредупреждения));
		Возврат;
	КонецЕсли;
	
	УдалитьСтрокиДереваРекурсивно(Элементы.ДеревоОтчетов.ВыделенныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(Строка);
	СтрокаДереваОтчетов.ПредставлениеОтчета = СтрокаДереваОтчетов.ОсноваПредставления;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПередСворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(Строка);
	Если СтрокаДереваОтчетов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьПредставлениеСвернутойГруппы(СтрокаДереваОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)

	// Проверим, что есть хотя бы одна организация в списке экономических субъектов.
	Если Объект.ЭкономическиеСубъекты.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Сначала необходимо составить список компаний, по которым требуется подготовить отчетность';
								|en = 'Create a list of companies which need reporting first'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЕстьОрганизация = Ложь;
	Для каждого СтрокаСубъекта Из Объект.ЭкономическиеСубъекты Цикл
		Если ТипЗнч(СтрокаСубъекта.Субъект) = Тип("СправочникСсылка.Организации") Тогда
			ЕстьОрганизация = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОрганизация Тогда
		ТекстыСообщений = Новый Массив;
		ТекстыСообщений.Добавить(НСтр("ru = 'Автоматическое заполнение отчетов доступно только для организаций и индивидуальных предпринимателей, учет деятельности которых ведется в программе.';
										|en = 'Automatic report filling is available only for companies and individual entrepreneurs whose activity is accounted for in the application.'"));
		ТекстыСообщений.Добавить(НСтр("ru = 'Отчетность других контрагентов необходимо выгрузить из их учетных систем и загрузить в виде файлов.';
										|en = 'Export other counterparty reporting from their accounting systems and import it as files.'"));
		
		// Для сохранения символов переноса строк в веб-клиенте передаем как форматированную строку.
		ПоказатьПредупреждение(, СтроковыеФункцииКлиент.ФорматированнаяСтрока(СтрСоединить(ТекстыСообщений, Символы.ПС)));
		Возврат;
	КонецЕсли;
	
	// Проверим, что есть хотя бы один автозаполняемый отчет.
	Если НЕ ЕстьАвтозаполняемыеОтчеты(Неопределено) Тогда
		ТекстСообщения = НСтр("ru = 'В списке нет ни одного отчета, для которого доступно автоматическое заполнение';
								|en = 'The list does not contain any report with automatic filling available'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиСубъекта", 0); // Если не указан конкретный, то по всем.
	ДополнительныеПараметры.Вставить("КлючиСтрокОтчетов",  Неопределено); // Если не указаны конкретные, то по всем.

	ВыполнитьМассовуюОперацию("Заполнить", ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТекущемуСубъекту(Команда)

	Если НЕ ДоступноАвтозаполнениеОтчетовПоТекущемуСубъекту() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСубъекта = Элементы.ЭкономическиеСубъекты.ТекущиеДанные;

	// Проверим, что есть хотя бы один автозаполняемый отчет.
	Если НЕ ЕстьАвтозаполняемыеОтчеты(СтрокаСубъекта.КлючСтрокиСубъекта) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'В списке нет ни одного отчета по %1, для которого доступно автоматическое заполнение';
										|en = 'The list does not contain any %1 reports with automatic filling available'"), СтрокаСубъекта.Субъект);
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиСубъекта", СтрокаСубъекта.КлючСтрокиСубъекта);
	ДополнительныеПараметры.Вставить("КлючиСтрокОтчетов",  Неопределено); // Если не указаны конкретные, то по всем.

	ВыполнитьМассовуюОперацию("Заполнить", ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущийОтчет(Команда)

	Если НЕ ДоступноАвтозаполнениеОтчетовПоТекущемуСубъекту() Тогда
		Возврат;
	КонецЕсли;

	Если Элементы.ДеревоОтчетов.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Выделите один или несколько отчетов, которые необходимо заполнить';
								|en = 'Select one or several reports to fill in'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;

	КлючиСтрокАвтозаполняемыхОтчетов = Новый Массив;
	
	ПодчиненныеСтроки = Новый Массив;

	Для каждого ИдентификаторСтрокиДерева Из Элементы.ДеревоОтчетов.ВыделенныеСтроки Цикл
		СтрокаДерева = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);

		Если ЭтоАвтозаполняемыйОтчет(СтрокаДерева.ВидОтчета)
			И ЗначениеЗаполнено(СтрокаДерева.КлючСтрокиОтчета)
			И КлючиСтрокАвтозаполняемыхОтчетов.Найти(СтрокаДерева.КлючСтрокиОтчета) = Неопределено Тогда
			КлючиСтрокАвтозаполняемыхОтчетов.Добавить(СтрокаДерева.КлючСтрокиОтчета);
		КонецЕсли;
		
		// Добавми все подчиненные строки.
		ПодчиненныеСтроки.Очистить();
		ЗаполнитьПодчиненныеСтрокиИзДереваРекурсивно(ПодчиненныеСтроки, СтрокаДерева.ПолучитьЭлементы());
		Для каждого ПодчиненнаяСтрокаДерева Из ПодчиненныеСтроки Цикл

			Если ЭтоАвтозаполняемыйОтчет(ПодчиненнаяСтрокаДерева.ВидОтчета)
				И ЗначениеЗаполнено(ПодчиненнаяСтрокаДерева.КлючСтрокиОтчета)
				И КлючиСтрокАвтозаполняемыхОтчетов.Найти(ПодчиненнаяСтрокаДерева.КлючСтрокиОтчета) = Неопределено Тогда
				КлючиСтрокАвтозаполняемыхОтчетов.Добавить(ПодчиненнаяСтрокаДерева.КлючСтрокиОтчета);
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;

	Если КлючиСтрокАвтозаполняемыхОтчетов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Среди выделенных отчетов нет ни одного, для которого доступно автоматическое заполнение';
								|en = 'There are no reports with automatic filling available among the selected ones'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиСубъекта", 0);
	ДополнительныеПараметры.Вставить("КлючиСтрокОтчетов",  КлючиСтрокАвтозаполняемыхОтчетов);
	
	ВыполнитьМассовуюОперацию("Заполнить", ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	Если Не ЗаписатьПриНеобходимости() Тогда	
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверки = ПараметрыПодписания();
	
	ДлительнаяОперация = ГотовностьКОтправке(ПараметрыПроверки);

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	ОжидатьЗавершениеСПрогрессомВыполнения(
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		НСтр("ru = 'Проверка готовности пакета к отправке';
			|en = 'Check if the batch is ready for sending'"),
		0,
		100);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)

	Если Не ЗаписатьПриНеобходимости() Тогда	
		Возврат;
	КонецЕсли;
	
	ВыполнитьМассовуюОперацию("Подписать");

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВБанк(Команда)
	
	Если Объект.ЭкономическиеСубъекты.Количество() = 0 Тогда
	   
		ПоказатьПредупреждение(, НСтр("ru = 'Сначала необходимо добавить компании и заполнить по ним отчетность';
										|en = 'Add companies and fill in their reporting first'"));
		Возврат;

	КонецЕсли;

	Если Не ЗаписатьПриНеобходимости() Тогда	
		Возврат;
	КонецЕсли;
	
	ВыполнитьМассовуюОперацию("Отправить");
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)

	Если Объект.ЭкономическиеСубъекты.Количество() = 0 Тогда
	   
		ПоказатьПредупреждение(, НСтр("ru = 'Сначала необходимо добавить компании и заполнить по ним отчетность';
										|en = 'Add companies and fill in their reporting first'"));
		Возврат;

	КонецЕсли;

	ВыполнитьМассовуюОперацию("Выгрузить");

КонецПроцедуры

&НаКлиенте
Процедура НачатьВыгрузкуНаКлиенте_ПослеЗаписи()
	
	// Анализируем, можно ли сразу выгружать.
	СделатьПередВыгрузкой = СостояниеПередВыгрузкой();
	
	Если СделатьПередВыгрузкой.Состояние = "Предупредить" Тогда
		
		ОтветНаВопрос = Новый ОписаниеОповещения("ВыгрузитьОтветНаВопрос", ЭтотОбъект, СделатьПередВыгрузкой.КраткоеПредставление);
		
		// Для сохранения символов переноса строк в веб-клиенте передаем как форматированную строку.
		ПоказатьВопрос(ОтветНаВопрос,
			СтроковыеФункцииКлиент.ФорматированнаяСтрока(СделатьПередВыгрузкой.ТекстСообщения),
			РежимДиалогаВопрос.ОКОтмена, , ,
			НСтр("ru = 'Выгрузка отчетов в файл';
				|en = 'Export reports to file'"));
		
	ИначеЕсли СделатьПередВыгрузкой.Состояние = "Ошибка" Тогда
		
		Если Не ПустаяСтрока(СделатьПередВыгрузкой.ТекстСообщения) Тогда
			
			ФинОтчетностьВБанкиКлиент.ПоказатьОшибку(СделатьПередВыгрузкой.ТекстСообщения, ЭтотОбъект);

		КонецЕсли;
		
	Иначе
	
		ВыгрузитьФинОтчет(СделатьПередВыгрузкой.КраткоеПредставление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтветНаВопрос(РезультатВопроса, КраткоеПредставление) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ВыгрузитьФинОтчет(КраткоеПредставление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)

	ВыполнитьМассовуюОперацию("Загрузить");	

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьМассовуюОперацию(ИмяОперации, ДополнительныеПараметры = Неопределено)
	
	// Сначала необходимо записать данные.
	Если Не ЗаписатьНовыйОбъект() Тогда	
		Возврат;
	КонецЕсли;

	Если Модифицированность Или ДеревоОтчетовИзменено Тогда

		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = ИмяОперации;
		Иначе
			ДополнительныеПараметры.Вставить("ИмяОперации", ИмяОперации);
		КонецЕсли;
			
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыполнитьМассовуюОперацию_ПослеВопросаОСохранении", ЭтотОбъект, ДополнительныеПараметры);
		
		// Для сохранения символов переноса строк в веб-клиенте передаем как форматированную строку.
		ТекстВопроса = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
							НСтр("ru = 'Перед выполнением действия будут сохранены отчеты с текущими данными.
								  |
								  |Продолжить?';
								  |en = 'Reports with current data will be saved before the action.
								  |
								  |Continue?'"));
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;

	ВыполнитьМассовуюОперацию_ПослеЗаписи(ИмяОперации, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьМассовуюОперацию_ПослеВопросаОСохранении(РезультатВопроса, ИмяОперации) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать(Новый Структура("СинхронизироватьПрисоединенныеФайлы", Ложь)) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяОперации) = Тип("Строка") Тогда // нет параметров
		
		ВыполнитьМассовуюОперацию_ПослеЗаписи(ИмяОперации, Неопределено);
		
	Иначе
		
		ДополнительныеПараметры = ИмяОперации;
		ИмяОперации = ДополнительныеПараметры.ИмяОперации;
		ДополнительныеПараметры.Удалить("ИмяОперации");
		
		ВыполнитьМассовуюОперацию_ПослеЗаписи(ИмяОперации, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьМассовуюОперацию_ПослеЗаписи(ИмяОперации, ДополнительныеПараметры)
	
	Если ИмяОперации = "Заполнить" Тогда
		
		НачатьЗаполнениеНаКлиенте_ПослеЗаписи(
			ДополнительныеПараметры.КлючСтрокиСубъекта, ДополнительныеПараметры.КлючиСтрокОтчетов);
		
	ИначеЕсли ИмяОперации = "Подписать" Тогда
		
		Если ДополнительныеПараметры = Неопределено Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДействиеПослеПодписания", "");
			ДополнительныеПараметры.Вставить("КлючСтрокиОтчета");
			
		КонецЕсли;
		
		ПодписатьФинОтчет(ДополнительныеПараметры);
		
	ИначеЕсли ИмяОперации = "Отправить" Тогда
		
		НачатьОтправкуНаКлиенте_ПослеЗаписи();
		
	ИначеЕсли ИмяОперации = "Выгрузить" Тогда
		
		НачатьВыгрузкуНаКлиенте_ПослеЗаписи();
		
	ИначеЕсли ИмяОперации = "Загрузить" Тогда
		
		НачатьЗагрузкуНаКлиенте_ПослеЗаписи();
		
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Выполнение операции ""%1"" не поддерживается';
										|en = '""%1"" operation is not supported'"), ИмяОперации);
	КонецЕсли;             
	
КонецПроцедуры

#Область ЭкономическиеСубъекты

&НаКлиенте
Процедура ДобавитьОрганизацию(Команда)
	
	НачатьДобавлениеОрганизации();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтрагента(Команда)
	
	НачатьДобавлениеКонтрагента();

КонецПроцедуры

#КонецОбласти

#Область Отчетность

&НаКлиенте
Процедура ДобавитьОтчетФайлСДиска(Команда)
	
	Если Элементы.ЭкономическиеСубъекты.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите компанию, для которой необходимо добавить отчет';
										|en = 'Select a company to add the report'"));
		Возврат;
	КонецЕсли;

	ОткрытьДиалогВыбораФайлаСДиска();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтчетПрисоединенныйФайл(Команда)

	Если Элементы.ЭкономическиеСубъекты.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите компанию, для которой необходимо добавить отчет';
										|en = 'Select a company to add the report'"));
		Возврат;
	КонецЕсли;

	ОткрытьДиалогВыбораПрисоединенногоФайла();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайла(Команда)
	
	СтрокаДереваОтчетов = Элементы.ДеревоОтчетов.ТекущиеДанные;
	Если СтрокаДереваОтчетов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДереваОтчетов.ФайлОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФормуФайла(СтрокаДереваОтчетов.ФайлОтчета);

КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	СвернутьСтрокиДереваРекурсивно(ДеревоОтчетов.ПолучитьЭлементы());

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	РазвернутьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайлаXML(Команда)
	
	СтрокаДереваОтчетов = Элементы.ДеревоОтчетов.ТекущиеДанные;
	Если СтрокаДереваОтчетов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДереваОтчетов.ФайлОтчетаXML) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФормуФайла(СтрокаДереваОтчетов.ФайлОтчетаXML);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМЧД(Команда)
	
	СтрокаДереваОтчетов = Элементы.ДеревоОтчетов.ТекущиеДанные;
	Если СтрокаДереваОтчетов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДереваОтчетов.Доверенность) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение( , СтрокаДереваОтчетов.Доверенность);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменАрхивами

&НаКлиенте
Процедура НачатьЗагрузкуНаКлиенте_ПослеЗаписи()
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузки.Интерактивно       = Истина;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = НСтр("ru = 'Загрузить пакет отчетности';
									|en = 'Import reporting batch'");
	ДиалогВыбора.Фильтр = "Архив ZIP|*.zip|Все файлы|*.*";
	ДиалогВыбора.ИндексФильтра = 0;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбора.Расширение = "zip";
	ПараметрыЗагрузки.Диалог = ДиалогВыбора;
	
	СтатусПроверкиАрхива = ПараметрыПроверкиАрхива();
	
	ОбработкаПроверкиФайла = Новый ОписаниеОповещения("ЗагрузитьПроверка", ЭтотОбъект);
	ПараметрыЗагрузки.ДействиеПередНачаломПомещенияФайлов = ОбработкаПроверкиФайла;
	
	ОбработкаЗагрузкиФайла = Новый ОписаниеОповещения("ЗагрузитьЗавершение", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОбработкаЗагрузкиФайла, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПроверка(ПомещаемыеФайлы, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	
	// Можно свериться с протоколом в архиве, только разархивировав на сервере.
	Если ПомещаемыеФайлы.Файл = Неопределено Тогда
		Возврат;
	Иначе
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	КонецЕсли;

	// Можно разархивировать протокол на клиенте и пока что отправить на сервер для проверки только его.
	// Если будут ошибки, то не нужно ждать, пока весь архив переместится на сервер.
	СтатусПроверкиАрхива.НаКлиенте = Истина;
	СтатусПроверкиАрхива.ПутьКАрхиву = ПомещаемыеФайлы.Файл.ПолноеИмя;

	ПутьКПротоколу = "";
	#Если Не ВебКлиент Тогда
	ИзвлечениеПротокола = Новый ЧтениеZipФайла(СтатусПроверкиАрхива.ПутьКАрхиву);	
	Для каждого Элемент Из ИзвлечениеПротокола.Элементы Цикл
		Если Элемент.Имя <> "Reports.xml" Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКПротоколу = ПолучитьИмяВременногоФайла();
		ИзвлечениеПротокола.Извлечь(Элемент, ПутьКПротоколу, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);

		Прервать;
	
	КонецЦикла;
	ИзвлечениеПротокола.Закрыть();
	#КонецЕсли
	Если ПустаяСтрока(ПутьКПротоколу) Тогда
		
		ПоказатьПредупреждение( , НСтр("ru = 'В архиве отсутствует файл Reports.xml';
										|en = 'The archive does not contain the Reports.xml file'"));
		ОтказОтПомещенияФайла = Истина;
		Возврат;

	КонецЕсли;

	ДанныеПротокола = Новый ДвоичныеДанные(ПутьКПротоколу + ПолучитьРазделительПути() + "Reports.xml");
	АдресПротокола = ПоместитьВоВременноеХранилище(ДанныеПротокола);
	ПроверкаПротоколаНаКлиенте(АдресПротокола, ОтказОтПомещенияФайла);
	
	НачатьУдалениеФайлов(, ПутьКПротоколу);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРазрешениеОтПользователя(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		
		Если Не СтатусПроверкиАрхива.НаКлиенте Тогда
			УдалитьВременныеФайлыАрхива(СтатусПроверкиАрхива);
		КонецЕсли;
		Возврат;

	КонецЕсли;
	СтатусПроверкиАрхива.Выполнена = Истина;
	
	Если СтатусПроверкиАрхива.НаКлиенте Тогда // теперь передадим на сервер сам архив для загрузки из него в ИБ
		
		ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
		ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
		ПараметрыЗагрузки.Интерактивно       = Ложь;
		
		ОбработкаЗагрузкиФайла = Новый ОписаниеОповещения("ЗагрузитьЗавершение", ЭтотОбъект);
		ФайловаяСистемаКлиент.ЗагрузитьФайл(ОбработкаЗагрузкиФайла, ПараметрыЗагрузки, СтатусПроверкиАрхива.ПутьКАрхиву);
		
	Иначе // архив уже на сервере, остается только загрузить в ИБ
		
		ЗагрузитьФинОтчет();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗавершение(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	
	Если СтатусПроверкиАрхива.Выполнена Тогда
		// Уже пройдены проверки. Загружаем.
		СтатусПроверкиАрхива.Хранение = ПомещенныйФайл.Хранение;
		
		ЗагрузитьФинОтчет();
		
	ИначеЕсли ПомещенныйФайл <> Неопределено Тогда // сначала проверим, что можно загружать
		
		ПроверкаПротоколаНаКлиенте(ПомещенныйФайл.Хранение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВнешнийВид

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// ДействиеСОтчетом - выделяем красным цветом гиперссылку действия с отчетом, если отчет не заполнен или файл не приложен.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоОтчетовДействиеСОтчетом");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоОтчетов.КлючСтрокиОтчета", ВидСравненияКомпоновкиДанных.Заполнено); // Это отчет.
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоОтчетов.ОтчетЗаполнен", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);


	// Гиперссылка Подписать

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоОтчетовДействиеПодписать");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоОтчетов.ДействиеПодписать", ВидСравненияКомпоновкиДанных.Равно, ДействиеПодписать());

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	

	// Картинка очистить для строки отчета.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоОтчетовДействиеОчистить");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоОтчетов.ДоступноДействиеОчистить", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	
	// Обязательный-необязательный отчет.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоОтчетовВыгружать");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПроизвольныйПакет", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоОтчетов.ОбязательныйПункт", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	
	// Убрать гиперссылку у неотмеченных.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоОтчетовДействиеСОтчетом");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоОтчетовДействиеПодписать");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоОтчетовДействиеОчистить");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоОтчетовИндексКартинки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоОтчетов.Выгружать", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);


КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовок()

	Заголовок = СтрШаблон(НСтр("ru = 'Отчет для %1 за %2 (%3)';
								|en = 'Report for %1 for %2 (%3)'"),
		Объект.Банк,
		РегламентированнаяОтчетностьВызовСервера.ПредставлениеФинансовогоПериода(Объект.НачалоПериода, КонецМесяца(Объект.Дата)),
		Объект.Организация);

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияОбновленияДереваОтчетов()

	ОтключитьОбработчикОжидания("Подключаемый_ЭкономическиеСубъектыПриАктивизацииСтроки");
	ПодключитьОбработчикОжидания("Подключаемый_ЭкономическиеСубъектыПриАктивизацииСтроки", 0.5, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭкономическиеСубъектыПриАктивизацииСтроки()

	ТекущиеДанные = Элементы.ЭкономическиеСубъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.КлючСтрокиСубъекта <> ТекущийКлючСтрокиСубъекта Тогда
		ОбновитьДеревоОтчетов(ТекущиеДанные.КлючСтрокиСубъекта);
	КонецЕсли;

	// По умолчанию сразу разворачиваем все дерево отчетов,
	// если это предусмотрено настройкой комплекта.
	Если РазворачиватьДерево Тогда
		РазвернутьДерево();
	КонецЕсли;
	
	ОтобразитьДополнениеНаименованияГруппНаКлиенте(ДеревоОтчетов.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСостоянияОтчета()
	
	// Определим актуальный статус отправки текущего отчета.
	СтатусОтчета = ФинОтчетностьВБанки.СтатусОтчета(Объект.Ссылка);
	
	// Отображаем соответствующие статусу элементы на форме.
	Элементы.ДекорацияСтатусОтчета.Заголовок = СтатусОтчета;
	Элементы.БлокСостоянияОтправки.ЦветФона  = ФинОтчетностьВБанки.ЦветФонаСтатусаОтчета(СтатусОтчета);

	Элементы.ДекорацияГиперссылкаПротокол.Видимость = 
		СтатусОтчета = ФинОтчетностьВБанкиКлиентСервер.СтатусСдано()
		ИЛИ СтатусОтчета = ФинОтчетностьВБанкиКлиентСервер.СтатусОтклонено();
		
	Элементы.ДекорацияЭтапыОтправки.Видимость =
		СтатусОтчета <> ФинОтчетностьВБанкиКлиентСервер.СтатусНеОтправлено();
		
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияЗаполнитьПоДаннымУчетаПоВсемОрганизациям()

	ОтключитьОбработчикОжидания("Подключаемый_ЗаполнитьПоДаннымУчетаПоВсемОрганизациям");
	ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьПоДаннымУчетаПоВсемОрганизациям", 0.5, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияЗаполнитьПоДаннымУчетаПоСтроке()

	ОтключитьОбработчикОжидания("Подключаемый_ЗаполнитьПоДаннымУчетаПоСтроке");
	ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьПоДаннымУчетаПоСтроке", 0.5, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьПоДаннымУчетаПоВсемОрганизациям()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиСубъекта", 0); // Если не указан конкретный, то по всем.
	ДополнительныеПараметры.Вставить("КлючиСтрокОтчетов",  Неопределено); // Если не указаны конкретные, то по всем.

	ВыполнитьМассовуюОперацию("Заполнить", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьПоДаннымУчетаПоСтроке()
	
	СтрокаСубъекта = Элементы.ЭкономическиеСубъекты.ТекущиеДанные;

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиСубъекта", СтрокаСубъекта.КлючСтрокиСубъекта);
	ДополнительныеПараметры.Вставить("КлючиСтрокОтчетов",  Неопределено); // Если не указаны конкретные, то по всем.

	ВыполнитьМассовуюОперацию("Заполнить", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРежимКомплекта()
	
	Если Не Объект.ПроизвольныйПакет Тогда
		Для каждого СтрокаДереваВерхнегоУровня Из ДеревоОтчетов.ПолучитьЭлементы() Цикл
			
			ПроставитьПометкиВниз(СтрокаДереваВерхнегоУровня, Объект.ПроизвольныйПакет);
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуПоКлючу(ИсходнаяТаблица, ИмяПоля, КлючСтроки)

	// Чтобы можно можно использовать с разными коллекциями (ТабличнаяЧасть, ТаблицаЗначений, ДанныеФормыКоллекция),
	// всегда используем поиск через НайтиСтроки().

	Отбор = Новый Структура(ИмяПоля, КлючСтроки);
	
	НайденныеСтроки = ИсходнаяТаблица.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 1 Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Функция РезультатФоновогоЗадания(Результат, СохранитьАдресРезультата = Ложь)
	Перем АдресРезультата, АдресДополнительногоРезультата;
	
	Если ТипЗнч(Результат) <> Тип("Структура") // неверный вызов обработчика
	 Или Результат.Свойство("Выполнено")       // прямой вызов обработчика не через фоновое задание
	 Или Не Результат.Свойство("Статус") Тогда // это не результат вызова фонового задания из БСП
		Возврат Неопределено;
	КонецЕсли;
	   
	Если Результат.Статус <> "Выполнено"
	 Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		// Если проблема возникла на уровне фонового задания, то выводим форму, похожую на платформенную.
		Если Результат.Статус <> "Ошибка" Или ПустаяСтрока(Результат.ПодробноеПредставлениеОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ФинОтчетностьВБанкиКлиент.ПоказатьОшибку(Результат.ПодробноеПредставлениеОшибки, ЭтотОбъект);
		Возврат Неопределено;
		
	КонецЕсли;
	
	Результат.Свойство("АдресРезультата", АдресРезультата);
	Результат.Свойство("АдресДополнительногоРезультата", АдресДополнительногоРезультата);
	
	// Передаем результат подписания и отправки из фонового задания.
	РезультатДляКлиента = РезультатФоновогоЗаданияНаСервере(Результат);
	Если Результат = Неопределено Тогда
		Если Не СохранитьАдресРезультата Тогда
			УдалитьИзВременногоХранилища(АдресРезультата);
		КонецЕсли;		
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не РезультатДляКлиента.Выполнено Тогда
		// Если проблема возникла на уровне бизнес-логики, то выводим форму, позволяющую перемещаться к местам проблем.
		Оповестить("ЗакрытьФормуНавигацииПоОшибкамФинОтчетности", , Объект.Ссылка);

		Если РезультатДляКлиента.ОтчетностьПоКлючамСтрок.Количество() = 0 
			И Не РезультатДляКлиента.Свойство("ЕстьОшибкиВРеквизитахСубъектов") Тогда
			
			// Ошибка относится в целом к пакету отчетности.
			Если РезультатДляКлиента.Свойство("ОписаниеОшибки") Тогда
				ФинОтчетностьВБанкиКлиент.ПоказатьОшибку(РезультатДляКлиента.ОписаниеОшибки, ЭтотОбъект);
			КонецЕсли;
			Возврат Неопределено;
			
		КонецЕсли;

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФинОтчет",                  Объект.Ссылка);
		ПараметрыФормы.Вставить("АдресРезультата",           АдресРезультата);
		ПараметрыФормы.Вставить("ПредставленияСтрокОтчетов", РезультатДляКлиента.ПредставленияСтрокОтчетов);
		
		ОткрытьФорму("Документ.ФинОтчетВБанк.Форма.НавигацияПоОшибкам", ПараметрыФормы, ЭтотОбъект);

		Возврат Неопределено;
		
	КонецЕсли;
	
	Если СохранитьАдресРезультата Тогда
		РезультатДляКлиента.Вставить("АдресРезультата", АдресРезультата);
	Иначе
		УдалитьИзВременногоХранилища(АдресРезультата);
	КонецЕсли;
	Если Не ПустаяСтрока(АдресДополнительногоРезультата) Тогда
		РезультатДляКлиента.Вставить("АдресДополнительногоРезультата", АдресДополнительногоРезультата);
	КонецЕсли;
	
	Возврат РезультатДляКлиента;

КонецФункции


&НаСервере
Функция РезультатФоновогоЗаданияНаСервере(Знач Результат)
	
	Результат = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если ТипЗнч(Результат) <> Тип("Структура") Или Не Результат.Свойство("Выполнено") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатДляКлиента = Новый Структура;
	РезультатДляКлиента.Вставить("Выполнено", Результат.Выполнено);
	РезультатДляКлиента.Вставить("ИмяАрхива", Результат.ИмяАрхива);
	ОтчетностьПоКлючамСтрок = Новый Соответствие;
	РезультатДляКлиента.Вставить("ОтчетностьПоКлючамСтрок", ОтчетностьПоКлючамСтрок);

	Если РезультатДляКлиента.Выполнено Тогда
		
		// Получаем список ключей строк, над которыми совершено действие.
		Для Каждого Отчет Из Результат.ОтчетностьПоКлючамСтрок Цикл
			
			Если ЗначениеЗаполнено(Отчет.КлючСтрокиОтчета) Тогда
				ОтчетностьПоКлючамСтрок.Вставить(Отчет.КлючСтрокиОтчета, Отчет.Представление);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// Получаем список ключей строк, по которым есть ошибки.
		ОписаниеОшибки = "";
		Для Каждого Ошибка Из Результат.ОтчетностьПоКлючамСтрок Цикл
			
			Если ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
				Продолжить;
			КонецЕсли;
				
			ОписаниеОшибки = Ошибка.ОписаниеОшибки;
		    Если ЗначениеЗаполнено(Ошибка.КлючСтрокиОтчета)
			   И ОтчетностьПоКлючамСтрок[Ошибка.КлючСтрокиОтчета] = Неопределено Тогда

				Если Не ЗначениеЗаполнено(Ошибка.Представление) Тогда
					РезультатДействия = НСтр("ru = 'Ошибка пакета отчетности';
											|en = 'Reporting batch error'");
				Иначе
					РезультатДействия = Ошибка.Представление;
				КонецЕсли;
				ОтчетностьПоКлючамСтрок.Вставить(Ошибка.КлючСтрокиОтчета, РезультатДействия);

			КонецЕсли;
			
		КонецЦикла;

		Если ОтчетностьПоКлючамСтрок.Количество() = 0 Тогда
			
			Если Результат.Свойство("ЕстьОшибкиВРеквизитахСубъектов") Тогда
			
				РезультатДляКлиента.Вставить("ЕстьОшибкиВРеквизитахСубъектов", Истина);
				
			Иначе
				// Операция неуспешна, но не привязана к конкретной строке отчетности.
				РезультатДляКлиента.Вставить("ОписаниеОшибки",
					?(ПустаяСтрока(ОписаниеОшибки), НСтр("ru = 'Операция неуспешна';
														|en = 'The operation failed'"), ОписаниеОшибки));
				Возврат РезультатДляКлиента;
			КонецЕсли;

		КонецЕсли;
		
		// Получаем информацию для заполнения представлений.
		ПредставленияСтрокОтчетов = ПредставленияОтчетности(ОтчетностьПоКлючамСтрок);
		РезультатДляКлиента.Вставить("ПредставленияСтрокОтчетов", ПредставленияСтрокОтчетов);
		
	КонецЕсли;
	
	Возврат РезультатДляКлиента;
	
КонецФункции

// Подготавливает представления отчетов и субъектов по строкам, в которых обнаружены ошибки.
//
// Параметры:
//  КлючиСтрокОтчетов - Соответствие - для каких строк нужно найти представления:
//                                     * ключ - Число - КлючСтрокиОтчета;
//                                     * значение - Строка, Булево - произвольное непустое значение.
//
// Возвращаемое значение:
//   Структура   - представления для "Отчеты" и "Субъекты", где ключ соответствия = число, значение = представление.
//
&НаСервере
Функция ПредставленияОтчетности(КлючиСтрокОтчетов)
	Перем ОписаниеВидовОтчетов;
	
	КлючиОтчеты = Новый Соответствие;
	КлючиСубъекты = Новый Соответствие;
	
	НеобязательныеОтчеты = Новый Соответствие;
	
	ПредставленияСтрокОтчетов = Новый Структура;
	ПредставленияСтрокОтчетов.Вставить("Отчеты", КлючиОтчеты);
	ПредставленияСтрокОтчетов.Вставить("Субъекты", КлючиСубъекты);
	ПредставленияСтрокОтчетов.Вставить("НеобязательныеОтчеты", НеобязательныеОтчеты);
	
	НастройкиКомплекта = НастройкиКомплекта();
	
	ОтборПоКлючуСубъекта = Новый Структура("КлючСтрокиСубъекта");
	Для каждого Отчет Из Объект.Отчетность Цикл
		
		Если КлючиСтрокОтчетов[Отчет.КлючСтрокиОтчета] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если КлючиСубъекты[Отчет.КлючСтрокиСубъекта] = Неопределено Тогда
			
			ОтборПоКлючуСубъекта.КлючСтрокиСубъекта = Отчет.КлючСтрокиСубъекта;
			НайденныеСубъекты = Объект.ЭкономическиеСубъекты.НайтиСтроки(ОтборПоКлючуСубъекта);
			Если НайденныеСубъекты.Количество() = 0 Тогда
				
				КлючиСубъекты.Вставить(Отчет.КлючСтрокиСубъекта,
					СтрШаблон(НСтр("ru = 'Экономический субъект %1';
									|en = 'Business entity %1'"), Отчет.КлючСтрокиСубъекта));
				
			Иначе
			
				ЭкономическийСубъект = НайденныеСубъекты[0];
				КлючиСубъекты.Вставить(Отчет.КлючСтрокиСубъекта,
					?(ЭкономическийСубъект.ВключатьОбособленныеПодразделения,
						СтрШаблон(НСтр("ru = '%1 с обособленными подразделениями';
										|en = '%1 with branch offices'"), Строка(ЭкономическийСубъект.Субъект)),
						Строка(ЭкономическийСубъект.Субъект)));
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаНастройки = НайтиСтрокуКомплекта(Отчет.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
		ЭтоОтчетПоФормеБанка = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетПоФормеБанка(Отчет.ВидОтчета);
		
		ОсобоеПредставление = Документы.ФинОтчетВБанк.НайтиСтрокуКомплекта(Отчет.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
		Если ОсобоеПредставление = Неопределено Или ПустаяСтрока(ОсобоеПредставление.КраткоеПредставление) Тогда
			ПредставлениеОтчета = Документы.ФинОтчетВБанк.ПредставлениеСтрокиОтчетности(Отчет, ОписаниеВидовОтчетов);
		ИначеЕсли ЭтоОтчетПоФормеБанка Тогда
			ПредставлениеОтчета = ЗаполнениеФинОтчетностиВБанки.ЗаголовокОтчета(Отчет, СтрокаНастройки);
		Иначе
			ПредставлениеОтчета = ОсобоеПредставление.КраткоеПредставление;
		КонецЕсли;
		КлючиОтчеты.Вставить(Отчет.КлючСтрокиОтчета, ПредставлениеОтчета);
		
		Если Не Объект.ПроизвольныйПакет Тогда
			
			ПроверкаЗаполненияОтчета = "";
			
			Если СтрокаНастройки <> Неопределено Тогда
				ПроверкаЗаполненияОтчета = СтрокаНастройки.ПроверкаЗаполнения;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПроверкаЗаполненияОтчета) 
				И ЗначениеЗаполнено(Отчет.ИдентификаторСтрокиКомплекта)
				И НастройкиКомплекта <> Неопределено Тогда
				// Если не указан порядок заполнения для конкретной строки и при этом строка была в составе требований банка (не добавленный отчет),
				// то учитываем в целом для комплекта.
				ПроверкаЗаполненияОтчета = НастройкиКомплекта.ОсновнойПорядокПроверкиЗаполнения;
			КонецЕсли;
			
			Если Не ПроверкаЗаполненияОтчета = "ВыдаватьОшибку" Тогда
				НеобязательныеОтчеты.Вставить(Отчет.КлючСтрокиОтчета, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ПредставленияСтрокОтчетов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьНачалоПериода(КонецПериода, Периодичность, СНачалаГода)
	
	Если Периодичность = "Год" ИЛИ СНачалаГода Тогда
		НачалоПериода = НачалоГода(КонецПериода);
	ИначеЕсли Периодичность = "Квартал" Тогда
		НачалоПериода = НачалоКвартала(КонецПериода);
	Иначе
		НачалоПериода = НачалоМесяца(КонецПериода);
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции

&НаСервере
Функция ВыгружаемыйПункт(СтрокаДереваОтчетов)
	
	Если Объект.ПроизвольныйПакет Тогда
		ВыгружаемыйПункт = Не СтрокаДереваОтчетов.ДанныеОтсутствуют;
	Иначе
		ВыгружаемыйПункт = СтрокаДереваОтчетов.ОбязательныйПункт 
		ИЛИ Не СтрокаДереваОтчетов.ДанныеОтсутствуют;
	КонецЕсли;
	
	Возврат ВыгружаемыйПункт;
	
КонецФункции
	
&НаКлиенте
Функция ЗаписатьПриНеобходимости()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Или ДеревоОтчетовИзменено Тогда
		Возврат Записать();
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЗаписатьНовыйОбъект()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Записать();
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации(ТекстПояснения, ИдентификаторЗадания = Неопределено)

	Если ТипЗнч(ФормаДлительнойОперации) = Тип("ФормаКлиентскогоПриложения")
		И ФормаДлительнойОперации.Открыта() Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТекстПояснения",                ТекстПояснения);
	ПараметрыФормы.Вставить("ИдентификаторЗадания",          ИдентификаторЗадания);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ФормаДлительнойОперации = ОткрытьФорму(
		"Документ.ФинОтчетВБанк.Форма.ДлительнаяОперация",
		ПараметрыФормы,
		ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации()

	Если ТипЗнч(ФормаДлительнойОперации) = Тип("ФормаКлиентскогоПриложения")
		И ФормаДлительнойОперации.Открыта() Тогда
		ФормаДлительнойОперации.Закрыть();
	КонецЕсли;

	ФормаДлительнойОперации = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура СообщитьПрогресс(Процент, Текст, ИдентификаторЗадания = Неопределено)

	Если ТипЗнч(ФормаДлительнойОперации) <> Тип("ФормаКлиентскогоПриложения")
		ИЛИ НЕ ФормаДлительнойОперации.Открыта() Тогда
		ОткрытьФормуДлительнойОперации(Текст, ИдентификаторЗадания);
	КонецЕсли;
	
	Прогресс = Новый Структура();
	Прогресс.Вставить("Процент",              Процент);
	Прогресс.Вставить("Текст",                Текст);
	Прогресс.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	Оповестить("ФинОтчетВБанк_Прогресс", Прогресс, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеСПрогрессомВыполнения(ДлительнаяОперация, ОповещениеОЗавершении, ТекстСообщения, НачальныйПроцент, КонечныйПроцент)

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения                 = ТекстСообщения;
	ПараметрыОжидания.ВыводитьОкноОжидания           = Ложь; // Выводим собственное окно с общий прогрессом.
	ПараметрыОжидания.ВыводитьПрогрессВыполнения     = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = НовоеОповещениеОПрогрессе(НачальныйПроцент, КонечныйПроцент);

	СообщитьПрогресс(НачальныйПроцент, ТекстСообщения, ДлительнаяОперация.ИдентификаторЗадания);

	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Функция НовоеОповещениеОПрогрессе(НачальныйПроцент, КонечныйПроцент)

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("НачальныйПроцент", НачальныйПроцент);
	ДополнительныеПараметры.Вставить("КонечныйПроцент",  КонечныйПроцент);

	Возврат Новый ОписаниеОповещения("ОбработкаОповещенияОПрогрессе", ЭтотОбъект, ДополнительныеПараметры);

КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияОПрогрессе(СообщениеПрогресса, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(СообщениеПрогресса) <> Тип("Структура")
		ИЛИ НЕ СообщениеПрогресса.Свойство("Прогресс")
		ИЛИ ТипЗнч(СообщениеПрогресса.Прогресс) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтатусДлительнойОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СообщениеПрогресса, "Статус");
	Если СтатусДлительнойОперации = "Ошибка" ИЛИ СтатусДлительнойОперации = "Отменено" Тогда
		// Что-то пошло не так, закроем форму с прогрессором, если открыта.
		ЗакрытьФормуДлительнойОперации();
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗадания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СообщениеПрогресса.Прогресс, "ИдентификаторЗадания");
	Процент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СообщениеПрогресса.Прогресс, "Процент");
	Текст   = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СообщениеПрогресса.Прогресс, "Текст");
	
	Если ТипЗнч(Процент) <> Тип("Число") Тогда
		Возврат;
	КонецЕсли;

	// Каждое фоновое задание сообщает процент от 0 до 100 по себе.
	// Пересчитаем этот процент в общий процент выполнения всей цепочки операций.
	Диапазон     = ДополнительныеПараметры.КонечныйПроцент - ДополнительныеПараметры.НачальныйПроцент;
	ОбщийПроцент = ДополнительныеПараметры.НачальныйПроцент + Цел(Процент / 100 * Диапазон);
	
	СообщитьПрогресс(ОбщийПроцент, Текст, ИдентификаторЗадания);

КонецПроцедуры

#КонецОбласти 

#Область НастройкиОтчетов

&НаСервере
Функция НастройкиКомплекта()

	Результат = Неопределено;

	Если ЭтоАдресВременногоХранилища(АдресНастроекКомплекта) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресНастроекКомплекта);
	Иначе
		Результат = ЗаполнениеФинОтчетностиВБанки.НастройкиКомплектаОтчетности(Объект.Банк, Объект.ИдентификаторКомплекта);
		// Закешируем настройки во временное хранилище, чтобы постоянно не считывать.
		// Не кешируем в реквизитах формы, т.к. настройки могут содержать недопустимые на клиенте типы.
		АдресНастроекКомплекта = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	КонецЕсли;
	
	// Настройки могут быть не определены,
	// если отчет был создан без выбора конкретного комплекта отчетности из требований банка.
	Возврат Результат;

КонецФункции

&НаСервере
Функция ДостаточноПодписиОсновнойОрганизации()

	НастройкиКомплекта = НастройкиКомплекта();
	
	Если НастройкиКомплекта = Неопределено Тогда
		// По умолчанию считаем, что подписи основной организации будет достаточно.
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиКомплекта.ОсновнойПорядокПодписания) 
		И НастройкиКомплекта.ОсновнойПорядокПодписания <> "ОсновнаяОрганизация" Тогда
		Возврат Ложь;
	КонецЕсли;

	Для каждого Отчет Из НастройкиКомплекта.Отчеты Цикл
		Если ЗначениеЗаполнено(Отчет.ПорядокПодписания) И Отчет.ПорядокПодписания <> "ОсновнаяОрганизация" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

&НаСервере
Функция ПараметрыОтбораКриптографии(ПараметрыПодписания)

	ПараметрыОтбора = ФинОтчетностьВБанкиКлиентСервер.ПараметрыОтбораСертификата();
	ПараметрыОтбора.Сервис = ПараметрыПодписания.Сервис;
	ПараметрыОтбора.Организация = ПараметрыПодписания.Организация;
						
	СубъектОтбора = ПараметрыОтбора.Организация;
	Если ПараметрыПодписания.ДействиеПослеПодписания <> "Отправить"
	   И Не ДостаточноПодписиОсновнойОрганизации Тогда

		СубъектОтбора = ТекущийСубъект;
		Если ТипЗнч(ТекущийСубъект) = Тип("СправочникСсылка.Организации") Тогда
			ПараметрыОтбора.Организация = ТекущийСубъект;
		КонецЕсли;

	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СубъектОтбора) Тогда
		Возврат ПараметрыОтбора;
	КонецЕсли;
	
	РеквизитыСубъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СубъектОтбора, "Наименование,ИНН,ЮридическоеФизическоеЛицо", Истина);
	ПараметрыОтбора.ЮридическоеФизическоеЛицо = РеквизитыСубъекта.ЮридическоеФизическоеЛицо;
	ПараметрыОтбора.ИНН = РеквизитыСубъекта.ИНН;
	ФинОтчетностьВБанкиКлиентСервер.ЗаполнитьПредставлениеОтбораСертификата(ПараметрыОтбора, РеквизитыСубъекта.Наименование);
		
	Возврат ПараметрыОтбора;
	
КонецФункции

&НаСервере
Функция НайтиСтрокуКомплекта(ИдентификаторСтрокиКомплекта, НастройкиКомплекта = Неопределено)

	Если НЕ ЗначениеЗаполнено(ИдентификаторСтрокиКомплекта) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если НастройкиКомплекта = Неопределено Тогда
		НастройкиКомплекта = НастройкиКомплекта();
	КонецЕсли;
	
	Возврат Документы.ФинОтчетВБанк.НайтиСтрокуКомплекта(
		ИдентификаторСтрокиКомплекта, НастройкиКомплекта);

КонецФункции

&НаСервереБезКонтекста
Функция НайтиОписаниеПоВидуОтчета(ВидОтчета, ОписаниеВидовОтчетов)

	Если НЕ ЗначениеЗаполнено(ВидОтчета) ИЛИ НЕ ЗначениеЗаполнено(ОписаниеВидовОтчетов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеВидовОтчетов.Найти(ВидОтчета, "ВидОтчета");

КонецФункции

&НаСервере
Функция ПараметрыФормыВыбораРегламентированногоОтчета(ИдентификаторСтрокиДерева)

	СтрокаДереваОтчетов = ПолучитьСтрокуДереваОтчетов(ИдентификаторСтрокиДерева);

	Результат = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ПараметрыФормыВыбораРегламентированногоОтчета();

	Результат.Организация     = ТекущийСубъект;
	Результат.ДатаНачала      = СтрокаДереваОтчетов.ДатаНачала;
	Результат.ДатаОкончания   = СтрокаДереваОтчетов.ДатаОкончания;
	Результат.Заголовок       = ПолноеПредставлениеОтчета(СтрокаДереваОтчетов, Ложь);
	Результат.ВыделенныйОтчет = СтрокаДереваОтчетов.ОтчетСсылка;
	Результат.РегистрацияВНалоговомОргане = НайтиЗначениеПараметраОтчета(
		ЭтотОбъект, СтрокаДереваОтчетов.КлючСтрокиОтчета, "РегистрацияВНалоговомОргане");

	Если ЗначениеЗаполнено(СтрокаДереваОтчетов.ВидОтчета) Тогда

		ОписаниеВидовОтчетов = ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов();
		
		СтрокаВидаОтчета = НайтиОписаниеПоВидуОтчета(СтрокаДереваОтчетов.ВидОтчета, ОписаниеВидовОтчетов);
		Если СтрокаВидаОтчета <> Неопределено Тогда
			Результат.ИсточникОтчета = СтрокаВидаОтчета.ИсточникОтчетаБРО;
		КонецЕсли;
	
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Результат.ИсточникОтчета) Тогда
		// В тех случаях, когда источник отчета БРО однозначно не определено,
		// используем вид отчета, форма выбора по нему подберет подходящие.
		Результат.ИсточникОтчета = СтрокаДереваОтчетов.ВидОтчета;
	КонецЕсли;

	СтрокаКомплекта = Документы.ФинОтчетВБанк.НайтиСтрокуКомплекта(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта());
	Если СтрокаКомплекта <> Неопределено Тогда
		Результат.ТребуетсяОтметкаОПриемеОтчетности = СтрокаКомплекта.ТребуетсяОтметкаОПриемеОтчетности;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
Функция ПараметрыВыбораФайла(ИдентификаторСтрокиДерева)

	Результат = Неопределено;

	Если ИдентификаторСтрокиДерева <> -1 Тогда
		СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	КонецЕсли;

	// Определяем параметры выбора по настройкам из сервиса.
	НастройкиКомплекта = НастройкиКомплекта();

	Если НастройкиКомплекта <> Неопределено Тогда
	
		Если СтрокаДереваОтчетов <> Неопределено И ЗначениеЗаполнено(СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта) Тогда
			СтрокаНастройки = НайтиСтрокуКомплекта(СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
			Если СтрокаНастройки <> Неопределено И СтрокаНастройки.ПараметрыВыбораФайла <> Неопределено Тогда
				Результат = СтрокаНастройки.ПараметрыВыбораФайла;
			КонецЕсли;
		КонецЕсли;

		Если Результат = Неопределено Тогда
			// Если не заданы настройки для конкретного отчета, то используем общие настройки для всего комплекта.
			Результат = НастройкиКомплекта.ОсновныеПараметрыВыбораФайла;
		КонецЕсли;
		
	КонецЕсли;

	Если Результат = Неопределено Тогда
		// Вообще никаких настроек не нашли. Используем значения по-умолчанию.
		Результат = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыДиалогаВыбораФайла();
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиЗначениеПараметраОтчета(Форма, КлючСтрокиОтчета, ИмяПараметра)

	Отбор = Новый Структура();
	Отбор.Вставить("КлючСтрокиОтчета", КлючСтрокиОтчета);
	Отбор.Вставить("Имя",              ИмяПараметра);
	
	НайденныеСтроки = Форма.Объект.ПараметрыОтчетов.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ЭкономическиеСубъекты

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОрганизация(ЭкономическийСубъект)

	Возврат ЗначениеЗаполнено(ЭкономическийСубъект) 
		И ТипЗнч(ЭкономическийСубъект) = Тип("СправочникСсылка.Организации");

КонецФункции

&НаКлиенте
Процедура НачатьДобавлениеОрганизации()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьДобавлениеОрганизации", ЭтотОбъект);
	ОткрытьФорму("Документ.ФинОтчетВБанк.Форма.ФормаВыборОрганизации", , ЭтотОбъект, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДобавлениеОрганизации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоСубъекту = Новый Структура();
	ОтборПоСубъекту.Вставить("Субъект",                           РезультатЗакрытия.Организация);
	ОтборПоСубъекту.Вставить("ВключатьОбособленныеПодразделения", РезультатЗакрытия.ВключатьОбособленныеПодразделения);
	
	АвтозаполнениеОтчетов = РезультатЗакрытия.АвтозаполнениеОтчетов;
	
	НайденныеСтроки = Объект.ЭкономическиеСубъекты.НайтиСтроки(ОтборПоСубъекту);
	Если НайденныеСтроки.Количество() > 0 Тогда
		// Выделим найденную строку.
		Элементы.ЭкономическиеСубъекты.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		ПодключитьОбработчикОжиданияОбновленияДереваОтчетов();
	Иначе
		// Добавляем нового контрагента и заполняем для него список отчетов по умолчанию.
		ИдентификаторСтроки = ДобавитьСубъектИЗаполнитьСоставОтчетности(
			РезультатЗакрытия.Организация, РезультатЗакрытия.ВключатьОбособленныеПодразделения);

		Элементы.ЭкономическиеСубъекты.ТекущаяСтрока = ИдентификаторСтроки;
		
		Модифицированность = Истина;
		
		Если Не ЗаписатьПриНеобходимости() Тогда	
			Возврат;
		КонецЕсли;
		
		Если АвтозаполнениеОтчетов Тогда
			
			ПодключитьОбработчикОжиданияЗаполнитьПоДаннымУчетаПоСтроке();
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьДобавлениеКонтрагента()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьДобавлениеКонтрагента", ЭтотОбъект);

	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", , ЭтотОбъект, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДобавлениеКонтрагента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоСубъекту = Новый Структура("Субъект", РезультатЗакрытия);
	НайденныеСтроки = Объект.ЭкономическиеСубъекты.НайтиСтроки(ОтборПоСубъекту);
	Если НайденныеСтроки.Количество() > 0 Тогда
		// Выделим найденную строку.
		Элементы.ЭкономическиеСубъекты.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		ПодключитьОбработчикОжиданияОбновленияДереваОтчетов();
	Иначе
		// Добавляем нового контрагента и заполняем для него список отчетов по умолчанию.
		ИдентификаторСтроки = ДобавитьСубъектИЗаполнитьСоставОтчетности(РезультатЗакрытия, Ложь);
		
		Элементы.ЭкономическиеСубъекты.ТекущаяСтрока = ИдентификаторСтроки;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиЭкономическиеСубъекты(Форма)

	Объект = Форма.Объект;
	
	Для каждого СтрокаТаблицы Из Объект.ЭкономическиеСубъекты Цикл
		СтрокаТаблицы.Наименование = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.СформироватьНаименованиеСубъекта(
			СтрокаТаблицы.Субъект, СтрокаТаблицы.ВключатьОбособленныеПодразделения);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуСубъектаПоКлючуОтчета(Форма, КлючСтрокиОтчета)

	Если НЕ ЗначениеЗаполнено(КлючСтрокиОтчета) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Объект = Форма.Объект;

	// Сначала ищем в дереве, т.к. там более актуальные данные (дерево еще может быть не сохранено в табличную часть).
	СтрокаОтчета = НайтиОтчетВДеревеНаФорме(КлючСтрокиОтчета, Форма.ДеревоОтчетов.ПолучитьЭлементы());
	Если СтрокаОтчета <> Неопределено Тогда
		// Субъектом является текущий выделенный субъект.
		КлючСтрокиСубъекта = СтрокаОтчета.КлючСтрокиСубъекта;
	Иначе
		// Ищем в табличной части документа.
		СтрокаОтчета = НайтиСтрокуПоКлючу(Объект.Отчетность, "КлючСтрокиОтчета", КлючСтрокиОтчета);
		Если СтрокаОтчета <> Неопределено Тогда
			КлючСтрокиСубъекта = СтрокаОтчета.КлючСтрокиСубъекта;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КлючСтрокиСубъекта) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НайтиСтрокуПоКлючу(Объект.ЭкономическиеСубъекты, "КлючСтрокиСубъекта", КлючСтрокиСубъекта);

КонецФункции

&НаСервере
Процедура ЗаполнитьЭкономическиеСубъектыПоПравилу(Правило)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Правило);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаФинОтчетностиЭкономическиеСубъекты.Субъект КАК Субъект,
	|	ПравилаФинОтчетностиЭкономическиеСубъекты.ВключатьОбособленныеПодразделения КАК ВключатьОбособленныеПодразделения
	|ИЗ
	|	Справочник.ПравилаФинОтчетности.ЭкономическиеСубъекты КАК ПравилаФинОтчетностиЭкономическиеСубъекты
	|ГДЕ
	|	ПравилаФинОтчетностиЭкономическиеСубъекты.Ссылка = &Ссылка";
	ЭкономическиеСубъекты = Запрос.Выполнить().Выгрузить();
	
	Для каждого Субъект Из ЭкономическиеСубъекты Цикл
		ДобавитьНовыйЭкономическийСубъект(Субъект.Субъект,
			Субъект.ВключатьОбособленныеПодразделения);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Отчетность

&НаСервере
Процедура ЗаполнитьСоставОтчетностиПоУмолчанию()
	
	// По умолчанию считаем, что в банк предоставляет отчетность по всем организации вместе с обособленными подразделениями.
	ВключатьОбособленныеПодразделения = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Объект.Организация).Количество() > 1;
	
	ОтборПоСубъекту = Новый Структура();
	ОтборПоСубъекту.Вставить("Субъект",                           Объект.Организация);
	ОтборПоСубъекту.Вставить("ВключатьОбособленныеПодразделения", ВключатьОбособленныеПодразделения);
	
	НайденныеСтроки = Объект.ЭкономическиеСубъекты.НайтиСтроки(ОтборПоСубъекту);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗаполнитьСоставОтчетностиПоСубъекту(НайденныеСтроки[0]);
	Иначе
		ДобавитьНовыйЭкономическийСубъект(Объект.Организация, ВключатьОбособленныеПодразделения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНовыйЭкономическийСубъект(Субъект, ВключатьОбособленныеПодразделения)

	// Добавляем организацию как экономический субъект, который сдает отчетность в банк.
	КлючСтрокиСубъекта = Документы.ФинОтчетВБанк.МаксимальныйКлючСтроки(Объект.ЭкономическиеСубъекты, "КлючСтрокиСубъекта") + 1;
	НоваяСтрока                    = Объект.ЭкономическиеСубъекты.Добавить();
	НоваяСтрока.КлючСтрокиСубъекта = КлючСтрокиСубъекта;
	НоваяСтрока.Субъект            = Субъект;
	НоваяСтрока.ВключатьОбособленныеПодразделения = ВключатьОбособленныеПодразделения;
	НоваяСтрока.Наименование       = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.СформироватьНаименованиеСубъекта(Субъект,
		ВключатьОбособленныеПодразделения);
	
	ЗаполнитьСоставОтчетностиПоСубъекту(НоваяСтрока);
	
	Возврат НоваяСтрока.ПолучитьИдентификатор();

КонецФункции

&НаСервере
Процедура ЗаполнитьСоставОтчетностиПоСубъекту(СтрокаСубъекта)

	Если СтрокаСубъекта = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаСубъекта.Субъект) Тогда
		Возврат;
	КонецЕсли;

	НастройкиКомплекта = НастройкиКомплекта();
	
	Если НастройкиКомплекта = Неопределено Тогда
		// Настройки не известны, заполнять нечего.
		Возврат;
	КонецЕсли;

	ПараметрыЗаполнения = Документы.ФинОтчетВБанк.НовыеПараметрыСоставОтчетности();
	ПараметрыЗаполнения.Дата         = Объект.Дата;
	ПараметрыЗаполнения.ДатаСоздания = Объект.ДатаСоздания;
	ПараметрыЗаполнения.Организация  = Объект.Организация;
	ПараметрыЗаполнения.Банк         = Объект.Банк;
	ПараметрыЗаполнения.Субъект      = СтрокаСубъекта.Субъект;
	ПараметрыЗаполнения.ВключатьОбособленныеПодразделения = СтрокаСубъекта.ВключатьОбособленныеПодразделения;
	ПараметрыЗаполнения.КлючСтрокиСубъекта = СтрокаСубъекта.КлючСтрокиСубъекта;
	ПараметрыЗаполнения.КлючСтрокиОтчета   = Документы.ФинОтчетВБанк.МаксимальныйКлючСтроки(Объект.Отчетность, "КлючСтрокиОтчета");
	ПараметрыЗаполнения.НастройкиКомплекта = НастройкиКомплекта;
	
	СоставОтчетности = Документы.ФинОтчетВБанк.СоставОтчетностиПоСубъекту(ПараметрыЗаполнения);
	
	// Переносим в табличные части объекта.
	Для каждого СтрокаОтчетности Из СоставОтчетности.Отчетность Цикл
		НоваяСтрока = Объект.Отчетность.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтчетности);
	КонецЦикла;
	
	Для каждого СтрокаПараметров Из СоставОтчетности.ПараметрыОтчетов Цикл
		НоваяСтрока = Объект.ПараметрыОтчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПараметров);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДобавитьСубъектИЗаполнитьСоставОтчетности(Субъект, ВключатьОбособленныеПодразделения)

	ИдентификаторСтроки = ДобавитьНовыйЭкономическийСубъект(Субъект, ВключатьОбособленныеПодразделения);
	
	СтрокаСубъекта = Объект.ЭкономическиеСубъекты.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ОбновитьДеревоОтчетов(СтрокаСубъекта.КлючСтрокиСубъекта);
	
	Возврат ИдентификаторСтроки;

КонецФункции

&НаСервере
Процедура УдалитьСтрокиПоСубъектам(Знач ИдентификаторыСтрокСубъектов)

	Для каждого ИдентификаторСтрокиСубъекта Из ИдентификаторыСтрокСубъектов Цикл
		СтрокаСубъекта = Объект.ЭкономическиеСубъекты.НайтиПоИдентификатору(ИдентификаторСтрокиСубъекта);

		УдалитьЗависимыеСтрокиПоСубъекту(СтрокаСубъекта.КлючСтрокиСубъекта);
		
		// Удаляем сам экономический субъект из документа.
		Объект.ЭкономическиеСубъекты.Удалить(СтрокаСубъекта);
	КонецЦикла;

	// Удаляем неактуальные строки из настроек СНО, если они там есть по удаленным экономическим субъектам.
	Документы.ФинОтчетВБанк.УдалитьНеактуальныеСтроки(
		Объект.ЭкономическиеСубъекты, Объект.НастройкиСистемыНалогообложения, "КлючСтрокиСубъекта");

	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура УдалитьЗависимыеСтрокиПоСубъекту(КлючСтрокиСубъекта)

	ОтборПоСубъекту = Новый Структура();
	ОтборПоСубъекту.Вставить("КлючСтрокиСубъекта", КлючСтрокиСубъекта);
	
	// Удаляем строки из табличной части Отчетность и подчиненных ей.
	СтрокиОтчетов = Объект.Отчетность.НайтиСтроки(ОтборПоСубъекту);

	Для каждого СтрокаОтчета Из СтрокиОтчетов Цикл
		Документы.ФинОтчетВБанк.УдалитьСтрокиОтчетаИзПодчиненныхТабличныхЧастей(Объект, СтрокаОтчета.КлючСтрокиОтчета);
		Объект.Отчетность.Удалить(СтрокаОтчета);
	КонецЦикла;
	
	СтрокиНастроекСНО = Объект.НастройкиСистемыНалогообложения.НайтиСтроки(ОтборПоСубъекту);
	Для каждого СтрокаНастройкиСНО Из СтрокиНастроекСНО Цикл
		Объект.НастройкиСистемыНалогообложения.Удалить(СтрокаНастройкиСНО);
	КонецЦикла;
	
	Если КлючСтрокиСубъекта = ТекущийКлючСтрокиСубъекта Тогда
		// Удалим строки из самого дерева на форме.
		ДеревоОтчетов.ПолучитьЭлементы().Очистить();
		ДеревоОтчетовИзменено = Ложь; // Дополнительное сохранение данных из дерева не требуется.
	КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область ДеревоОтчетов

&НаСервере
Процедура ОбновитьДеревоОтчетов(КлючСтрокиСубъекта)

	СтрокаСубъекта = Документы.ФинОтчетВБанк.НайтиСтрокуПоКлючу(
		Объект.ЭкономическиеСубъекты, "КлючСтрокиСубъекта", КлючСтрокиСубъекта);
		
	Если СтрокаСубъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДеревоОтчетовИзменено Тогда
		// Сохраним изменения в дереве по предыдущему субъекту, если они были.
		СтараяСтрокаСубъекта = Документы.ФинОтчетВБанк.НайтиСтрокуПоКлючу(
			Объект.ЭкономическиеСубъекты, "КлючСтрокиСубъекта", ТекущийКлючСтрокиСубъекта);
		Если СтараяСтрокаСубъекта <> Неопределено Тогда
			СохранитьДеревоОтчетов(Объект, СтараяСтрокаСубъекта);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДеревоОтчетов(СтрокаСубъекта);

КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоОтчетов(ОбъектДляСохранения, СтрокаСубъекта)

	// Переносим данные из дерева отчетов на форме в табличную часть Отчетность документа.
	
	// Удалим все ранее существующие строки отчетов по выбранному субъекту.
	ОтборПоСубъекту = Новый Структура();
	ОтборПоСубъекту.Вставить("КлючСтрокиСубъекта", СтрокаСубъекта.КлючСтрокиСубъекта);
	
	СтрокиКУдалению = ОбъектДляСохранения.Отчетность.НайтиСтроки(ОтборПоСубъекту);
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ОбъектДляСохранения.Отчетность.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	// Рекурсивно переносим новые строки из дерева на форме в документ.
	СохранитьСтрокиДереваОтчетов(ОбъектДляСохранения, СтрокаСубъекта, ДеревоОтчетов.ПолучитьЭлементы());
	
	ДеревоОтчетовИзменено = Ложь;

КонецПроцедуры

&НаСервере
Процедура СохранитьСтрокиДереваОтчетов(ОбъектДляСохранения, СтрокаСубъекта, СтрокиДереваОтчетов)

	Для каждого СтрокаДереваОтчетов Из СтрокиДереваОтчетов Цикл
	
		Если ЗначениеЗаполнено(СтрокаДереваОтчетов.КлючСтрокиОтчета) Тогда
			// Это детальная строка отчета (не группы отчетов), записываем ее в документ.
			НоваяСтрока = ОбъектДляСохранения.Отчетность.Добавить();
			
			Если Не (СтрокаДереваОтчетов.Выгружать) Тогда
				Если ЗначениеЗаполнено(СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта) Тогда
					ОчиститьДанныеСтрокиДерева(СтрокаДереваОтчетов, Истина);
				Иначе
					СтрокаДереваОтчетов.ДанныеОтсутствуют = Истина;
				КонецЕсли;
			Иначе
				СтрокаДереваОтчетов.ДанныеОтсутствуют = Ложь;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДереваОтчетов);
			НоваяСтрока.КлючСтрокиСубъекта = СтрокаСубъекта.КлючСтрокиСубъекта;
			
		КонецЕсли;
	
		// Сохраняем подчиненные строки.
		СохранитьСтрокиДереваОтчетов(ОбъектДляСохранения, СтрокаСубъекта, СтрокаДереваОтчетов.ПолучитьЭлементы());
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОтчетов(СтрокаСубъекта)

	// Строим дерево отчетов следующей структуры:
	//
	//	1. Группа отчетов
	//		2. Вид отчета
	//			3. Идентификатор строки комплекта (наименование отчета, как он называется в требованиях банка - для произвольных отчетов/файлов)
	//				4. Уточнение наименования отчета (дополнительная аналитика, в разрезе которой формируется несколько экземпляров отчета)
	//					5. Период
	//
	// Если на любом уровне иерархии среди подчиненных строк есть только одна,
	// то эта подчиненная строка выводится вместо родительской, чтобы сократить количество уровней.

	ДеревоОтчетов.ПолучитьЭлементы().Очистить();

	// Актуализируем максимальный ключ строки отчета для возможного добавления новых строк при работе с деревом.
	МаксКлючСтрокиОтчета      = Документы.ФинОтчетВБанк.МаксимальныйКлючСтроки(Объект.Отчетность, "КлючСтрокиОтчета"); 
	ДеревоОтчетовИзменено     = Ложь;
	ТекущийКлючСтрокиСубъекта = 0;
	ТекущийСубъект            = Неопределено;
	
	Если СтрокаСубъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКомплекта        = НастройкиКомплекта();
	ТекущийКлючСтрокиСубъекта = СтрокаСубъекта.КлючСтрокиСубъекта;
	ТекущийСубъект            = СтрокаСубъекта.Субъект;
	
	// Чтобы сохранить порядок следования отчетов, сначала добавим в таблицу описания видов отчетов
	// ссылки на фактически отчеты из табличной части, а потом превратим их в дерево.
	ОписаниеВидовОтчетов = ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов();
	ОписаниеВидовОтчетов.Колонки.Добавить("ПодготовленныеОтчеты", Новый ОписаниеТипов("Массив")); 
	
	ОтборПоСубъекту = Новый Структура();
	ОтборПоСубъекту.Вставить("КлючСтрокиСубъекта", СтрокаСубъекта.КлючСтрокиСубъекта);
	
	СтрокиОтчета = Объект.Отчетность.НайтиСтроки(ОтборПоСубъекту);
	
	Для каждого СтрокаОтчета Из СтрокиОтчета Цикл
	
		ОписаниеОтчета = ОписаниеВидовОтчетов.Найти(СтрокаОтчета.ВидОтчета, "ВидОтчета");
		Если ОписаниеОтчета = Неопределено Тогда
			// Обнаружен неизвестный вид отчета, добавляем его в конец последней группы.
			ОписаниеОтчета             = ОписаниеВидовОтчетов.Добавить();
			ОписаниеОтчета.ВидОтчета   = СтрокаОтчета.ВидОтчета;
			ОписаниеОтчета.НомерГруппы = ОписаниеВидовОтчетов[ОписаниеВидовОтчетов.Количество() - 2].НомерГруппы; // Таблица всегда возвращается заполненной.
		КонецЕсли;
		
		// Добавляем строку отчетности в список отчетов соответствующего вида.
		ОписаниеОтчета.ПодготовленныеОтчеты.Добавить(СтрокаОтчета);
	
	КонецЦикла;

	// Сначала строим полное дерево, потом перед выводом на форму удалим из него избыточные уровни.

	ПолноеДеревоОтчетов = РеквизитФормыВЗначение("ДеревоОтчетов");
	
	ГруппаОтчета     = Неопределено;
	ГруппаВидаОтчета = Неопределено;
	
	ЕстьОбязательные = Ложь;

	// Составляем линейный список детальных строк дерева, чтобы в следующих процедурах не делать рекурсию.
	ЛистьяДерева = Новый Массив;
	
	КэшОбязательныеПункты = Новый Соответствие;
	КэшВыгружать = Новый Соответствие;
	КэшАвтозаполнение = Новый Соответствие;
	
	Для каждого СтрокаВидаОтчетов Из ОписаниеВидовОтчетов Цикл
	
		Если СтрокаВидаОтчетов.ПодготовленныеОтчеты.Количество() = 0 Тогда
			// Банку отчеты такого вида не требуются.
			Продолжить;
		КонецЕсли;
	
		// Для регламентированных отчетов из БРО в настройках банка может быть задано условие их предоставления.
		// В этом случае такие описание выводим в строке с группой соответствующих отчетов за разные периоды,
		// чтобы не дублировать возле каждого отчета.
		ЕстьОписаниеОтчета = Ложь;
		Если ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетБРО(СтрокаВидаОтчетов.ВидОтчета)
			И НастройкиКомплекта <> Неопределено Тогда
			СтрокаНастройки = НастройкиКомплекта.Отчеты.Найти(СтрокаВидаОтчетов.ВидОтчета, "ВидОтчета");
			Если СтрокаНастройки <> Неопределено Тогда
				ЕстьОписаниеОтчета = ЗначениеЗаполнено(СтрокаНастройки.ПодробноеПредставление);
			КонецЕсли;
		КонецЕсли;

		// 1. Группа отчетов
		Если ГруппаОтчета = Неопределено ИЛИ СтрокаВидаОтчетов.НомерГруппы <> ГруппаОтчета.НомерГруппы Тогда
			// Создаем строку дерева для новой группы, если у нее есть собственное представление, отличное от вида отчета.
			Если ЗначениеЗаполнено(СтрокаВидаОтчетов.ПредставлениеГруппы) Тогда
				ГруппаОтчета = ПолноеДеревоОтчетов.Строки.Добавить();
				ГруппаОтчета.КлючСтрокиСубъекта  = ТекущийКлючСтрокиСубъекта;
				ГруппаОтчета.ПредставлениеОтчета = СтрокаВидаОтчетов.ПредставлениеГруппы;
				ГруппаОтчета.НомерГруппы         = СтрокаВидаОтчетов.НомерГруппы;
				ГруппаОтчета.Описание            = 
					?(ЕстьОписаниеОтчета И СтрокаВидаОтчетов.ВидОтчета = "БухгалтерскаяОтчетность",	ДействиеОписание(), "");
			Иначе
				ГруппаОтчета = Неопределено;
			КонецЕсли;
		КонецЕсли;

		// 2. Вид отчета
		// Создаем строку дерева для нового вида отчетов.
		Если ГруппаОтчета <> Неопределено Тогда
			РодительГруппыВидаОтчета = ГруппаОтчета;
		Иначе
			РодительГруппыВидаОтчета = ПолноеДеревоОтчетов;
		КонецЕсли;
		
		Если СтрокаВидаОтчетов.НеГруппироватьПоВиду Тогда
			ГруппаВидаОтчета = РодительГруппыВидаОтчета;
		Иначе
			ГруппаВидаОтчета = РодительГруппыВидаОтчета.Строки.Добавить();
			
			ГруппаВидаОтчета.КлючСтрокиСубъекта  = ТекущийКлючСтрокиСубъекта;
			ГруппаВидаОтчета.ПредставлениеОтчета = СтрокаВидаОтчетов.ПредставлениеОтчетаМнЧисло;
			ГруппаВидаОтчета.ВидОтчета           = СтрокаВидаОтчетов.ВидОтчета;
			ГруппаВидаОтчета.НомерГруппы         = СтрокаВидаОтчетов.НомерГруппы;
			ГруппаВидаОтчета.Описание            = ?(ЕстьОписаниеОтчета, ДействиеОписание(), "");
		КонецЕсли;
		
		ГруппаПоИдентификаторуНастройки = Неопределено;

		ЭтоПроизвольныйОтчет = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоВнешнийФайл(СтрокаВидаОтчетов.ВидОтчета);
		ЭтоОтчетПоФормеБанка = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетПоФормеБанка(СтрокаВидаОтчетов.ВидОтчета);
		
		Для каждого СтрокаОтчета Из СтрокаВидаОтчетов.ПодготовленныеОтчеты Цикл

			СтрокаНастройки = НайтиСтрокуКомплекта(СтрокаОтчета.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
		
			// 3. Идентификатор строки комплекта (наименование отчета, как он называется в требованиях банка - для произвольных отчетов/файлов)
			Если ЭтоПроизвольныйОтчет Тогда
				ИдентификаторСтрокиГруппы = СтрокаОтчета.ИдентификаторСтрокиКомплекта;
			ИначеЕсли ЭтоОтчетПоФормеБанка И СтрокаНастройки <> Неопределено Тогда
				ИдентификаторСтрокиГруппы = СтрокаНастройки.ИдентификаторНастройкиОтчета;
			Иначе
				ИдентификаторСтрокиГруппы = Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИдентификаторСтрокиГруппы) Тогда
				Если ГруппаПоИдентификаторуНастройки = Неопределено
					ИЛИ ГруппаПоИдентификаторуНастройки.ИдентификаторСтрокиКомплекта <> ИдентификаторСтрокиГруппы Тогда
					ГруппаПоИдентификаторуНастройки = ГруппаВидаОтчета.Строки.Найти(
						ИдентификаторСтрокиГруппы, "ИдентификаторСтрокиКомплекта");
				КонецЕсли;
				
				Если ГруппаПоИдентификаторуНастройки = Неопределено Тогда
					// Для такой настройки группу в дереве еще не создавали.
					ГруппаПоИдентификаторуНастройки = ГруппаВидаОтчета.Строки.Добавить();
					
					Если СтрокаНастройки <> Неопределено Тогда

						Если ЗначениеЗаполнено(СтрокаНастройки.КраткоеПредставлениеМнЧисло) Тогда
							// Для группы используем название отчета во множественном числе, если оно задано.
							ГруппаПоИдентификаторуНастройки.ПредставлениеОтчета = СтрокаНастройки.КраткоеПредставлениеМнЧисло;
						ИначеЕсли ЗначениеЗаполнено(СтрокаНастройки.КраткоеПредставление) Тогда
							ГруппаПоИдентификаторуНастройки.ПредставлениеОтчета = СтрокаНастройки.КраткоеПредставление;
						КонецЕсли;

						Если ЗначениеЗаполнено(СтрокаНастройки.ПодробноеПредставление) Тогда
							// Запомним, что у отчета есть описание с порядком заполнения.
							ГруппаПоИдентификаторуНастройки.Описание = ДействиеОписание();
						КонецЕсли;

					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ГруппаПоИдентификаторуНастройки.ПредставлениеОтчета) Тогда
						// В требованиях банка не указано явное название для отчета, называем его по виду отчета.
						ГруппаПоИдентификаторуНастройки.ПредставлениеОтчета = СтрокаВидаОтчетов.ПредставлениеОтчета;
					КонецЕсли;

					ГруппаПоИдентификаторуНастройки.КлючСтрокиСубъекта           = ТекущийКлючСтрокиСубъекта;
					ГруппаПоИдентификаторуНастройки.НомерГруппы                  = СтрокаВидаОтчетов.НомерГруппы;
					ГруппаПоИдентификаторуНастройки.ВидОтчета                    = СтрокаВидаОтчетов.ВидОтчета;
					ГруппаПоИдентификаторуНастройки.ИдентификаторСтрокиКомплекта = ИдентификаторСтрокиГруппы;
				
				КонецЕсли;
			Иначе
				ГруппаПоИдентификаторуНастройки = ГруппаВидаОтчета;
			КонецЕсли;
		
			
			// 4. Уточнение наименования отчета (дополнительная аналитика, в разрезе которой формируется несколько экземпляров отчета).
			Если ЗначениеЗаполнено(СтрокаОтчета.УточнениеНаименования) Тогда
				ГруппаПоУточнениюНаименования = ГруппаПоИдентификаторуНастройки.Строки.Найти(
					СтрокаОтчета.УточнениеНаименования, "УточнениеНаименования");

				Если ГруппаПоУточнениюНаименования = Неопределено Тогда
					ГруппаПоУточнениюНаименования = ГруппаПоИдентификаторуНастройки.Строки.Добавить();
					ГруппаПоУточнениюНаименования.КлючСтрокиСубъекта           = ТекущийКлючСтрокиСубъекта;
					ГруппаПоУточнениюНаименования.ПредставлениеОтчета          = СтрокаОтчета.УточнениеНаименования;
					ГруппаПоУточнениюНаименования.НомерГруппы                  = СтрокаВидаОтчетов.НомерГруппы;
					ГруппаПоУточнениюНаименования.ВидОтчета                    = СтрокаВидаОтчетов.ВидОтчета;
					ГруппаПоУточнениюНаименования.ИдентификаторСтрокиКомплекта = СтрокаОтчета.ИдентификаторСтрокиКомплекта;
					ГруппаПоУточнениюНаименования.УточнениеНаименования        = СтрокаОтчета.УточнениеНаименования;
				КонецЕсли;
			Иначе
				ГруппаПоУточнениюНаименования = ГруппаПоИдентификаторуНастройки;
			КонецЕсли;
			
			// 5. Период (самый нижний уровень)
			СтрокаДереваОтчетов = ГруппаПоУточнениюНаименования.Строки.Добавить();
			ЛистьяДерева.Добавить(СтрокаДереваОтчетов);
			
			ЗаполнитьЗначенияСвойств(СтрокаДереваОтчетов, СтрокаОтчета);
			СтрокаДереваОтчетов.НомерГруппы   = СтрокаВидаОтчетов.НомерГруппы;
			СтрокаДереваОтчетов.ОтчетЗаполнен = ОтчетЗаполнен(СтрокаДереваОтчетов);
			СтрокаДереваОтчетов.ПредставлениеОтчета = ""; // Представление будет сформировано позднее с учетом иерархии дерева.
			
			// Определим порядок заполнения отчета.
			Если СтрокаНастройки <> Неопределено Тогда
				СтрокаДереваОтчетов.ПроверкаЗаполнения = СтрокаНастройки.ПроверкаЗаполнения;
				Если ЗначениеЗаполнено(СтрокаНастройки.ПодробноеПредставление) Тогда
					// Запомним, что у отчета есть описание с порядком заполнения для справки пользователю.
					СтрокаДереваОтчетов.Описание = ДействиеОписание();
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаДереваОтчетов.ПроверкаЗаполнения) 
				И ЗначениеЗаполнено(СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта)
				И НастройкиКомплекта <> Неопределено Тогда
				// Если не указан порядок заполнения для конкретной строки и при этом строка была в составе требований банка (не добавленный отчет),
				// то учитываем в целом для комплекта.
				СтрокаДереваОтчетов.ПроверкаЗаполнения = НастройкиКомплекта.ОсновнойПорядокПроверкиЗаполнения;
			КонецЕсли;
			
			Если СтрокаДереваОтчетов.ПроверкаЗаполнения = "ВыдаватьОшибку" Тогда
				СтрокаДереваОтчетов.ОбязательныйПункт = Истина;
				ЕстьОбязательные = Истина;
			Иначе
				СтрокаДереваОтчетов.ОбязательныйПункт = Ложь;
			КонецЕсли;
			
			УстановитьРеквизитРодителя(СтрокаДереваОтчетов, "ОбязательныйПункт", КэшОбязательныеПункты, Ложь);
			
			Если ВыгружаемыйПункт(СтрокаДереваОтчетов) Тогда
				СтрокаДереваОтчетов.Выгружать = 1;
			Иначе
				СтрокаДереваОтчетов.Выгружать = 0;
			КонецЕсли;
			
			УстановитьРеквизитРодителя(СтрокаДереваОтчетов, "Выгружать", КэшВыгружать, 2);
			
			СтрокаДереваОтчетов.Автозаполнение = ЭтоАвтозаполняемыйОтчет(СтрокаВидаОтчетов.ВидОтчета);
			УстановитьРеквизитРодителя(СтрокаДереваОтчетов, "Автозаполнение", КэшАвтозаполнение, Ложь);
			
		КонецЦикла;
	
	КонецЦикла;
	КэшОбязательныеПункты = Неопределено;
	КэшВыгружать = Неопределено;
	КэшАвтозаполнение = Неопределено;
	
	Элементы.ГруппаПереключательРежима.Видимость = ЕстьОбязательные;	

	// Определим отчеты, которые уже подписаны.
	ПроверитьНаличиеПодписей(ЛистьяДерева);

	// Считываем из базы наименования присоединенных файлов отчетов, чтобы их показыать.
	ЗаполнитьНаименованияФайловОтчетов(ЛистьяДерева);

	// Сортируем однотипные отчеты по хронологии.
	СортироватьОтчетыПоПериодам(ПолноеДеревоОтчетов.Строки);
	
	// Удалим групповые строки дерева на первом уровне,
	// в которых фактически получилась одна подчиненная строка, перестив ее на уровень выше.
	ПеренестиВДеревоОтчетовНаФорме(ПолноеДеревоОтчетов.Строки, Неопределено);
	
	// Обновим представление отчетов, сократив их, чтобы не дублировать текст в наименовании самого отчета и его группы.
	ОбновитьПредставленияОтчетов(ДеревоОтчетов.ПолучитьЭлементы(), НастройкиКомплекта, ОписаниеВидовОтчетов);

КонецПроцедуры

&НаСервере
Процедура ОтобразитьДополнениеНаименованияГруппНаСервере(ЭлементыДереваОтчетов)
	
	Для каждого СтрокаДереваОтчетов Из ЭлементыДереваОтчетов Цикл
		Если ЗначениеЗаполнено(СтрокаДереваОтчетов.КлючСтрокиОтчета) Тогда
			Продолжить; // Это отчет, а не группа.
		КонецЕсли;
		
		СформироватьПредставлениеСвернутойГруппы(СтрокаДереваОтчетов);
		
		// Точно так же обработаем вложенные группы.
		ОтобразитьДополнениеНаименованияГруппНаСервере(СтрокаДереваОтчетов.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДополнениеНаименованияГруппНаКлиенте(ЭлементыДереваОтчетов)
	
	Для каждого СтрокаДереваОтчетов Из ЭлементыДереваОтчетов Цикл
		Если ЗначениеЗаполнено(СтрокаДереваОтчетов.КлючСтрокиОтчета) Тогда
			Продолжить; // Это отчет, а не группа.
		КонецЕсли;
		
		ГруппаРазвернута = Элементы.ДеревоОтчетов.Развернут(СтрокаДереваОтчетов.ПолучитьИдентификатор());
		Если ГруппаРазвернута = Ложь Тогда
			СформироватьПредставлениеСвернутойГруппы(СтрокаДереваОтчетов);
		КонецЕсли;
		
		// Точно так же обработаем вложенные группы.
		ОтобразитьДополнениеНаименованияГруппНаКлиенте(СтрокаДереваОтчетов.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьОтчетыПоПериодам(СтрокиПолногоДерева)

	// Сортируем нижние строки (листы дерева) таким образом, чтобы сначала были 
	// в хронологическом порядке выведены отчеты с периодом в 1 месяц, потом - с периодом 1 квартал и т.п.

	Для каждого СтрокаПолногоДерева Из СтрокиПолногоДерева Цикл

		Если СтрокаПолногоДерева.Строки.Количество() > 0 Тогда
			// Спускаемся на следующий уровень.
			СортироватьОтчетыПоПериодам(СтрокаПолногоДерева.Строки);
			Продолжить;
		КонецЕсли;

		// У текущей строки нет подчиненных строк, т.е. она на самом нижнем уровне.
		Родитель = СтрокаПолногоДерева.Родитель;
		Если Родитель = Неопределено Тогда
			// При этом у нее нет и родителя, т.е. она на верхнем уровне,
			// такую не сортируем.
			Продолжить;
		КонецЕсли;
	
		Если Родитель.Строки.Количество() = 1 Тогда
			// Текущая нижнеуровневая строка единственная у своего родителя, ее сортировать не с кем.
			Продолжить;
		КонецЕсли;

		// Проверяем совпадение у всех "братских" строк ключевых реквизитов.
		// При этом ИдентификаторСтрокиКомплекта в их число не входит, т.к. несколько отчетов одного вида могут
		// быть созданы на основании разных строк из комплекта требований банка, например, с разной настройкой периодов.
		ОтчетовСовпадают             = Истина;
		ТекущийВидОтчета             = СтрокаПолногоДерева.ВидОтчета;
		ТекущееУточнениеНаименования = СтрокаПолногоДерева.УточнениеНаименования;
		
		Для каждого БратскаяСтрокаДерева Из Родитель.Строки Цикл
			Если БратскаяСтрокаДерева.ВидОтчета <> СтрокаПолногоДерева.ВидОтчета
				ИЛИ БратскаяСтрокаДерева.УточнениеНаименования <> СтрокаПолногоДерева.УточнениеНаименования Тогда
				ОтчетовСовпадают = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ОтчетовСовпадают Тогда
			Продолжить;
		КонецЕсли;
		
		Родитель.Строки.Сортировать("ДатаНачала, ДатаОкончания", Ложь, Новый СравнениеЗначений);
		
		// Отсортировали все строки на том же уровне, что и текущая, больше сортировать нечего.
		Прервать;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПеренестиВДеревоОтчетовНаФорме(СтрокиПолногоДерева, РодительскаяСтрокаДереваНаФорме)

	Для каждого СтрокаПолногоДерева Из СтрокиПолногоДерева Цикл
		
		Если СтрокаПолногоДерева.Строки.Количество() = 1 Тогда
			СтрокаДереваНаФорме = РодительскаяСтрокаДереваНаФорме;
		Иначе
			// Если группировка более, чем из одной строки, или уже дошли до листьев дерева (самого вложенного уровня),
			// тогда переносим в дерево отчетов на форме.
			Если РодительскаяСтрокаДереваНаФорме = Неопределено Тогда
				СтрокаДереваНаФорме = ДеревоОтчетов.ПолучитьЭлементы().Добавить();
			Иначе
				СтрокаДереваНаФорме = РодительскаяСтрокаДереваНаФорме.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаДереваНаФорме, СтрокаПолногоДерева);
			
			Если СтрокаПолногоДерева.РучнаяКорректировка
			 Или СтрокаПолногоДерева.РучнаяНастройка Тогда
				СтрокаДереваНаФорме.ИндексКартинки = ИндексКартинкиКорректировка();
			Иначе
				СтрокаДереваНаФорме.ИндексКартинки = ИндексКартинкиПусто();
			КонецЕсли;
			
		КонецЕсли;
		
		ПеренестиВДеревоОтчетовНаФорме(СтрокаПолногоДерева.Строки, СтрокаДереваНаФорме);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияОтчетов(СтрокиДереваОтчетов, НастройкиКомплекта, ОписаниеВидовОтчетов)

	Для каждого СтрокаДереваОтчетов Из СтрокиДереваОтчетов Цикл
		// Сначала сформируем представления для подчиненных строк, т.к. при этом можем доуточнить данные родительской строки,
		// чтобы их можно было использовать при формировании представления самой родительской строки.
		ОбновитьПредставленияОтчетов(СтрокаДереваОтчетов.ПолучитьЭлементы(), НастройкиКомплекта, ОписаниеВидовОтчетов);
		СформироватьПредставлениеОтчета(СтрокаДереваОтчетов, НастройкиКомплекта, ОписаниеВидовОтчетов);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеПодписей(СтрокиДерева)

	ФайлыОтчетов = Новый Массив;
	СтрокиДереваСФайлами = Новый Массив; // Составляем список строк, в которых есть файлы с отчетами.
	
	Для каждого СтрокаДереваОтчетов Из СтрокиДерева Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДереваОтчетов.КлючСтрокиОтчета) Тогда
			// Это не строка отчета, а строка группы, созданной для улучшения визуального представления списка.
			Продолжить;
		КонецЕсли;
		
		ПроверитьСостояниеСдачиЧерез1СОтчетность(СтрокаДереваОтчетов);
		
		Если ЗначениеЗаполнено(СтрокаДереваОтчетов.ФайлОтчета) Тогда
			Если НЕ СтрокаДереваОтчетов.ФайлОтчетаСодержитЭП Тогда
				// Запоминаем файл отчета для проверки наличия у него подписи.
				ФайлыОтчетов.Добавить(СтрокаДереваОтчетов.ФайлОтчета);
				СтрокиДереваСФайлами.Добавить(СтрокаДереваОтчетов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФайлыОтчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Перенесем в строки дерева признаки наличия подписей у отчетов.
	НаличиеПодписей = ЗаполнениеФинОтчетностиВБанки.ПроверитьНаличиеПодписей(ФайлыОтчетов);
	
	Для каждого СтрокаДереваОтчетов Из СтрокиДереваСФайлами Цикл
		СтрокаДереваОтчетов.ПодписанЭП = НаличиеПодписей[СтрокаДереваОтчетов.ФайлОтчета];
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ВсеОтчетыПодписаны(ЭлементыДереваОтчетов)
	
	Для каждого ЭлементДерева Из ЭлементыДереваОтчетов Цикл
		Если ЗначениеЗаполнено(ЭлементДерева.КлючСтрокиОтчета) Тогда // Это отчет
			Если ЭлементДерева.Выгружать = 0 Тогда
				Продолжить; // Подписывать нечего
			КонецЕсли;
			
			Если ОтчетПодписан(ЭлементДерева) Тогда
				Продолжить;
			КонецЕсли;
			
			Возврат Ложь; // Отчет не подписан
		Иначе // Это группа
			ЭлементыГруппы = ЭлементДерева.ПолучитьЭлементы();
			Если НЕ ВсеОтчетыПодписаны(ЭлементыГруппы) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолеУказаноВРодительскойСтроке(СтрокаДереваОтчетов, ИмяПоля, ЗначениеПоля)

	РодительскаяСтрока = СтрокаДереваОтчетов.ПолучитьРодителя();

	Пока РодительскаяСтрока <> Неопределено Цикл
		Если РодительскаяСтрока[ИмяПоля] = ЗначениеПоля Тогда
			Возврат Истина;
		КонецЕсли;
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

&НаСервере
Процедура СформироватьПредставлениеОтчета(СтрокаДереваОтчетов, НастройкиКомплекта, ОписаниеВидовОтчетов)

	ЭтоГруппа = НЕ ЗначениеЗаполнено(СтрокаДереваОтчетов.КлючСтрокиОтчета);
	ЭтоПроизвольныйФайл = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоПроизвольныйФайл(СтрокаДереваОтчетов.ВидОтчета);
	ЭтоВнешнийФайл = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоВнешнийФайл(СтрокаДереваОтчетов.ВидОтчета);
	СтрокаВидаОтчета = НайтиОписаниеПоВидуОтчета(СтрокаДереваОтчетов.ВидОтчета, ОписаниеВидовОтчетов);
	ЭтоОтчетПоФормеБанка = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетПоФормеБанка(СтрокаДереваОтчетов.ВидОтчета);
	
	Подстроки = Новый Массив;
	
	// Для регламентированных отчетов пользовательское описание к отчету выводим только на самом верхнем уровне,
	// чтобы меньше дублировать.
	Если ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетБРО(СтрокаДереваОтчетов.ВидОтчета) Тогда
		Если ПолеУказаноВРодительскойСтроке(СтрокаДереваОтчетов, "ВидОтчета", СтрокаДереваОтчетов.ВидОтчета) Тогда
			СтрокаДереваОтчетов.Описание = "";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаНастройки = Неопределено;
	
	// Если для вышестоящих родителей ИдентификаторСтрокиКомплекта используется, то выводим наименование из настроек в текущую строку.
	Если ЗначениеЗаполнено(СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта) Тогда
		СтрокаНастройки = НайтиСтрокуКомплекта(СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
		
		ПредставлениеЗаданоВРодительскойСтроке = (ЭтоОтчетПоФормеБанка
			И СтрокаНастройки <> Неопределено
			И ПолеУказаноВРодительскойСтроке(СтрокаДереваОтчетов, "ИдентификаторСтрокиКомплекта", СтрокаНастройки.ИдентификаторНастройкиОтчета))
			ИЛИ ПолеУказаноВРодительскойСтроке(СтрокаДереваОтчетов, "ИдентификаторСтрокиКомплекта", СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта);
			
		Если ПредставлениеЗаданоВРодительскойСтроке Тогда
			// Описания для отчетов выводим только один раз в родительской строке, чтобы не дублировать лишний раз.
			СтрокаДереваОтчетов.Описание = "";
		Иначе
			Если СтрокаНастройки <> Неопределено Тогда
				Если ЭтоГруппа И ЗначениеЗаполнено(СтрокаНастройки.КраткоеПредставлениеМнЧисло) Тогда
					// Для названия группы используем множественное число, если оно задано.
					Подстроки.Добавить(СтрокаНастройки.КраткоеПредставлениеМнЧисло);
				ИначеЕсли ЗначениеЗаполнено(СтрокаНастройки.КраткоеПредставление) Тогда
					Подстроки.Добавить(СтрокаНастройки.КраткоеПредставление);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Подстроки.Количество() = 0 Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДереваОтчетов.ВидОтчета) 
			ИЛИ ЭтоГруппа И ЭтоОтчетПоФормеБанка Тогда
			// Это верхнеуровневая группа из разных видов отчетов или это группа отчетов по форме банка,
			// их представление уже сформировано, оставляем как есть.
			СтрокаДереваОтчетов.ОсноваПредставления = СтрокаДереваОтчетов.ПредставлениеОтчета;
			СформироватьДоступныеДействия(ЭтотОбъект, СтрокаДереваОтчетов);
			Возврат;
		КонецЕсли;
		
		Если ЭтоГруппа ИЛИ НЕ ЭтоПроизвольныйФайл Тогда
			// Название отчета в требования банка не указано, формируем его по виду отчета.
			// Для произвольных файлов выводим имя файла, поэтому слово "Дополнительный файл" для них не выводим.
			Если НЕ ПолеУказаноВРодительскойСтроке(СтрокаДереваОтчетов, "ВидОтчета", СтрокаДереваОтчетов.ВидОтчета) Тогда
				Если СтрокаВидаОтчета <> Неопределено Тогда
					Если ЭтоГруппа Тогда
						// Это группа отчетов конкретного вида
						Подстроки.Добавить(СтрокаВидаОтчета.ПредставлениеОтчетаМнЧисло);
					Иначе
						Подстроки.Добавить(СтрокаВидаОтчета.ПредставлениеОтчета);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УточнениеНаименования = "";
	Если ЗначениеЗаполнено(СтрокаДереваОтчетов.УточнениеНаименования) 
		И НЕ ПолеУказаноВРодительскойСтроке(СтрокаДереваОтчетов, "УточнениеНаименования", СтрокаДереваОтчетов.УточнениеНаименования) Тогда
		УточнениеНаименования = СтрокаДереваОтчетов.УточнениеНаименования;
		Подстроки.Добавить(УточнениеНаименования);
	КонецЕсли;
	
	// Период
	ЕстьПериод = Ложь;
	Если ЗначениеЗаполнено(СтрокаДереваОтчетов.ДатаНачала) И ЗначениеЗаполнено(СтрокаДереваОтчетов.ДатаОкончания) Тогда
		// Если у всех строк дерева, расположенных на том же уровне, что и у текущей строки ("братья"/"сестры"), даты совпадают,
		// то считаем, что достаточно вывести период у родительской строки и у каждой дочерней не выводить.
		ПериодыОтчетовСовпадают = Истина;
		РодительскаяСтрока = СтрокаДереваОтчетов.ПолучитьРодителя();
		Если РодительскаяСтрока <> Неопределено Тогда
			Для каждого ДочерняяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
				Если ДочерняяСтрока.ВидОтчета <> СтрокаДереваОтчетов.ВидОтчета
					ИЛИ ДочерняяСтрока.ИдентификаторСтрокиКомплекта <> СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта
					ИЛИ ДочерняяСтрока.ДатаНачала <> СтрокаДереваОтчетов.ДатаНачала
					ИЛИ КонецДня(ДочерняяСтрока.ДатаОкончания) <> КонецДня(СтрокаДереваОтчетов.ДатаОкончания) Тогда
					ПериодыОтчетовСовпадают = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПериодыОтчетовСовпадают И РодительскаяСтрока <> Неопределено Тогда 
			// Установим для родительской строки даты начала и окончания как всех дочерних, чтобы их использовать для представления родительской строки.
			РодительскаяСтрока.ДатаНачала    = СтрокаДереваОтчетов.ДатаНачала;
			РодительскаяСтрока.ДатаОкончания = СтрокаДереваОтчетов.ДатаОкончания;
		Иначе
			ЕстьПериод = Истина;
			
			ПредставлениеПериодаОтчетнаяДата = СтрШаблон(НСтр("ru = 'на %1';
																|en = 'by %1'"),
				Формат(СтрокаДереваОтчетов.ДатаОкончания, "ДФ=dd.MM.yyyy"));
			ПредставлениеПериодаПериод = СтрШаблон(НСтр("ru = 'за %1';
														|en = 'for %1'"),
				ПредставлениеПериода(СтрокаДереваОтчетов.ДатаНачала, КонецДня(СтрокаДереваОтчетов.ДатаОкончания), "ФП=Истина"));
			
			Если ЭтоВнешнийФайл ИЛИ ЭтоОтчетПоФормеБанка Тогда
				НайденаНастройка = Ложь;
				Если ЗначениеЗаполнено(СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта) Тогда
					Если СтрокаНастройки <> Неопределено Тогда
						НайденаНастройка = Истина;
						Если НЕ ЗначениеЗаполнено(СтрокаНастройки.ВыводПериодаВЗаголовке) 
							ИЛИ СтрокаНастройки.ВыводПериодаВЗаголовке = "Период" Тогда
							Подстроки.Добавить(ПредставлениеПериодаПериод);
						ИначеЕсли СтрокаНастройки.ВыводПериодаВЗаголовке = "ОтчетнаяДата" Тогда
							Подстроки.Добавить(ПредставлениеПериодаОтчетнаяДата);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если НЕ НайденаНастройка Тогда
					Подстроки.Добавить(ПредставлениеПериодаПериод);
				КонецЕсли;
			Иначе // Это не внешний файл.
				Если СтрокаВидаОтчета <> Неопределено И СтрокаВидаОтчета.ОтчетНаДату Тогда
					Подстроки.Добавить(ПредставлениеПериодаОтчетнаяДата);
				Иначе
					Подстроки.Добавить(ПредставлениеПериодаПериод);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Отчет представлен в виде произвольного файла, которые приложил пользователь.
	Если ЭтоПроизвольныйФайл ИЛИ ЭтоОтчетПоФормеБанка Тогда
		
		// Если требуется приложить несколько файлов одного содержания (например, несколько договоров с крупнейшими контрагентами),
		// то пронумеруем такие строки файлов.
		РодительскаяСтрока = СтрокаДереваОтчетов.ПолучитьРодителя();
		Если РодительскаяСтрока <> Неопределено И СтрокаДереваОтчетов.ПолучитьЭлементы().Количество() = 0 Тогда

			Если ЭтоГруппаОднотипныхОтчетов(СтрокаДереваОтчетов, РодительскаяСтрока) Тогда
				НомерФайла = РодительскаяСтрока.ПолучитьЭлементы().Индекс(СтрокаДереваОтчетов) + 1;
				
				Если НомерФайла > 0 Тогда
					Подстроки.Добавить(СтрШаблон(НСтр("ru = '%1.';
														|en = '%1.'"), Формат(НомерФайла, "ЧГ=")));
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		// Если установлено имя произвольного файла, то выводим его тоже.
		Если ЗначениеЗаполнено(СтрокаДереваОтчетов.ФайлОтчетаНаименование) Тогда

			Если ЕстьПериод ИЛИ ЗначениеЗаполнено(УточнениеНаименования) Тогда
				// Добавим дефис в качестве разделителя
				Подстроки.Добавить(НСтр("ru = ' - ';
										|en = ' - '"));
			КонецЕсли;

			Подстроки.Добавить(СтрокаДереваОтчетов.ФайлОтчетаНаименование);

		КонецЕсли;

	КонецЕсли;

	Если Подстроки.Количество() > 0 Тогда
		СтрокаДереваОтчетов.ПредставлениеОтчета = СтрСоединить(Подстроки, " ");
	Иначе
		СтрокаДереваОтчетов.ПредставлениеОтчета = "";
	КонецЕсли;

	// Для групп основа представления будет дополняться информацией о количестве отчетов.
	Если ЭтоГруппа Тогда
		СтрокаДереваОтчетов.ОсноваПредставления = СтрокаДереваОтчетов.ПредставлениеОтчета;
	КонецЕсли;
	
	// Обновим также представления для гиперссылок с доступными действиям над отчетом.
	СформироватьДоступныеДействия(ЭтотОбъект, СтрокаДереваОтчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтчетЗаполнен(СтрокаДереваОтчетов)

	Возврат	ЗначениеЗаполнено(СтрокаДереваОтчетов.ОтчетСсылка) // Указан регламентированный отчет.
			ИЛИ ЗначениеЗаполнено(СтрокаДереваОтчетов.ФайлОтчета) // Указан присоединенный файл.
			;

КонецФункции

&НаСервере
Процедура ПроверитьУстановитьРучнаяКорректировкаОтчета(СтрокаДереваОтчетов)
	
	Если Не ЗначениеЗаполнено(СтрокаДереваОтчетов.ФайлОтчета) Тогда // Не указан присоединенный файл.
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваОтчетов.РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ДатыФайла = ДатыСозданияМодификацииФайла(СтрокаДереваОтчетов.ФайлОтчета);
	
	СтрокаДереваОтчетов.РучнаяКорректировка = ДатыФайла.ДатаСоздания <> ДатыФайла.ДатаМодификацииУниверсальная;
	Если СтрокаДереваОтчетов.РучнаяКорректировка Тогда
		СтрокаДереваОтчетов.ИндексКартинки = ИндексКартинкиКорректировка();
	КонецЕсли;
	
	Если СтрокаДереваОтчетов.РучнаяКорректировка Тогда
		Модифицированность = Истина;
		ДеревоОтчетовИзменено = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатыСозданияМодификацииФайла(ФайлОтчета)
	
	ДатыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлОтчета, "ДатаСоздания, ДатаМодификацииУниверсальная");
	
	// ДатаМодификации приведена в универсальном времени, приведем ее к местному
	ДатыФайла.ДатаМодификацииУниверсальная = МестноеВремя(ДатыФайла.ДатаМодификацииУниверсальная);
	
	Возврат ДатыФайла;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолноеПредставлениеОтчета(СтрокаДереваОтчетов, ВключатьГруппыОтчетов = Истина)

	// Соберем полное наименование для отчета.
	Подстроки = Новый Массив;
	Подстроки.Вставить(0, СтрокаДереваОтчетов.ПредставлениеОтчета);
	РодительскаяСтрока = СтрокаДереваОтчетов.ПолучитьРодителя();
	Пока РодительскаяСтрока <> Неопределено Цикл

		МожноДобавлятьСтроку = Истина;
		Если НЕ ЗначениеЗаполнено(РодительскаяСтрока.ВидОтчета) И НЕ ВключатьГруппыОтчетов Тогда
			МожноДобавлятьСтроку = Ложь;
		КонецЕсли;

		Если МожноДобавлятьСтроку Тогда 
			// Вставляем название родительской строки в начало.
			Подстроки.Вставить(0, РодительскаяСтрока.ПредставлениеОтчета);
		КонецЕсли;
		
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат СтрСоединить(Подстроки, " ");

КонецФункции

&НаКлиенте
Процедура РазвернутьДерево()

	Для каждого СтрокаПервогоУровня Из ДеревоОтчетов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОтчетов.Развернуть(СтрокаПервогоУровня.ПолучитьИдентификатор(), Истина);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПодчиненныеСтрокиИзДереваРекурсивно(МассивСтрок, СтрокиДереваОтчетов)

	// Рекурсивно обходим все дерево и заносим его строки в массив.
	Для каждого СтрокаДереваОтчетов Из СтрокиДереваОтчетов Цикл
		МассивСтрок.Добавить(СтрокаДереваОтчетов);
		Если ТипЗнч(СтрокаДереваОтчетов) = Тип("ДанныеФормыЭлементДерева") Тогда
			// Обходится дерево на формы.
			ЗаполнитьПодчиненныеСтрокиИзДереваРекурсивно(МассивСтрок, СтрокаДереваОтчетов.ПолучитьЭлементы());
		Иначе
			// Обходится дерево значений в памяти.
			ЗаполнитьПодчиненныеСтрокиИзДереваРекурсивно(МассивСтрок, СтрокаДереваОтчетов.Строки);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиДереваРекурсивно(Знач ИдентификаторыСтрокДерева)

	СтрокиОтчетов = Новый Массив;

	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрокДерева Цикл
		СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		СтрокиОтчетов.Добавить(СтрокаДереваОтчетов);
		ЗаполнитьПодчиненныеСтрокиИзДереваРекурсивно(СтрокиОтчетов, СтрокаДереваОтчетов.ПолучитьЭлементы());
	КонецЦикла;

	ОтборПоОтчету = Новый Структура("КлючСтрокиОтчета");
	
	Для каждого СтрокаОтчета Из СтрокиОтчетов Цикл
		Документы.ФинОтчетВБанк.УдалитьСтрокиОтчетаИзПодчиненныхТабличныхЧастей(Объект, СтрокаОтчета.КлючСтрокиОтчета);
	КонецЦикла;
	
	ИдентификаторыРодительскихСтрок = Новый Массив;

	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрокДерева Цикл
		СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);

		Если СтрокаДереваОтчетов = Неопределено Тогда
			// Проверяем, т.к. могли удалить на предыдущих шагах цикла вместе с родительской строкой.
			Продолжить;
		КонецЕсли;
		
		РодительскаяСтрока  = СтрокаДереваОтчетов.ПолучитьРодителя();
		Если РодительскаяСтрока = Неопределено Тогда
			// Удаляем строку на самом верхнем уровне.
			РодительскаяСтрока = ДеревоОтчетов;
		КонецЕсли;
		
		РодительскаяСтрока.ПолучитьЭлементы().Удалить(СтрокаДереваОтчетов);
		
		// Обновляем саму родительскую строку, т.к. из-за удаления ее подчиненных строк, 
		Если РодительскаяСтрока <> ДеревоОтчетов 
			И ИдентификаторыРодительскихСтрок.Найти(РодительскаяСтрока.ПолучитьИдентификатор()) = Неопределено Тогда
			ИдентификаторыРодительскихСтрок.Добавить(РодительскаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЦикла;

	// Из-за удаления подчиненных строк некоторые их родительские строки могут выродиться в листья дерева.
	СтрокиКОбновлению = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыРодительскихСтрок Цикл
		
		СтараяСтрокаДерева = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтараяСтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДочерниеСтроки = СтараяСтрокаДерева.ПолучитьЭлементы();
		Если ДочерниеСтроки.Количество() > 1 Тогда
			//  У строки остались подчиненные строки, перестроение дерева не требуется,
			// но, возможно, необходима перенумерация строк однотипных отчетов.
			ЗаполнитьПодчиненныеСтрокиИзДереваРекурсивно(СтрокиКОбновлению, ДочерниеСтроки);
			Продолжить;
		КонецЕсли;
		
		// У строки остался один подчиненный элемент, поэтому поднимем его на уровень текущей строки,
		// а саму текущую строку удалим.
		// Для этого создаем новую ветку на одном уровне с текущей строкой и копируем в нее элементы.
		РодительскаяСтрока = СтараяСтрокаДерева.ПолучитьРодителя();
		Если РодительскаяСтрока = Неопределено Тогда
			РодительскаяСтрока = ДеревоОтчетов;
		КонецЕсли;
		ИндексВставки = РодительскаяСтрока.ПолучитьЭлементы().Индекс(СтараяСтрокаДерева);
		СкопироватьСтрокиДереваРекурсивно(СтараяСтрокаДерева, РодительскаяСтрока, ИндексВставки, СтрокиКОбновлению);
		
		// Удаляем старую строку.
		РодительскаяСтрока.ПолучитьЭлементы().Удалить(СтараяСтрокаДерева);
		
	КонецЦикла;
	
	// Обновляем представления для поднятых строк.
	ОписаниеВидовОтчетов = ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов();
	ОбновитьПредставленияОтчетов(СтрокиКОбновлению, НастройкиКомплекта(), ОписаниеВидовОтчетов);
	
	ДеревоОтчетовИзменено = Истина;
	Модифицированность   = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиОтчетВДеревеНаФорме(КлючСтрокиОтчета, СтрокиДереваОтчетов)

	Результат = Неопределено;

	Для каждого СтрокаДереваОтчетов Из СтрокиДереваОтчетов Цикл
		Если СтрокаДереваОтчетов.КлючСтрокиОтчета = КлючСтрокиОтчета Тогда
			Результат = СтрокаДереваОтчетов;
		Иначе
			// Спускаемся на уровень ниже.
			Результат = НайтиОтчетВДеревеНаФорме(КлючСтрокиОтчета, СтрокаДереваОтчетов.ПолучитьЭлементы());
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ПроверитьСостояниеСдачиЧерез1СОтчетность(ИдентификаторИлиСтрокаДереваОтчетов)

	Перем РеквизитыОтчета;
	
	СтрокаДереваОтчетов = ПолучитьСтрокуДереваОтчетов(ИдентификаторИлиСтрокаДереваОтчетов);

	Если Не ЗначениеЗаполнено(СтрокаДереваОтчетов.ОтчетСсылка)
	 Или Не ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетБРО(СтрокаДереваОтчетов.ВидОтчета) Тогда
		// Не может сдаваться через 1С-Отчетность.
		СтрокаДереваОтчетов.СданЧерез1СОтчетность = Ложь;
		Возврат;
	КонецЕсли;

	СтрокаДереваОтчетов.СданЧерез1СОтчетность = Истина;

	Если Не ЗначениеЗаполнено(СтрокаДереваОтчетов.ФайлОтчета) Тогда
		
		// Нужно еще добавить к архиву и подписать файл в пользовательском представлении.
		Если СтрокаДереваОтчетов.ВидОтчета = "БухгалтерскаяОтчетность" Тогда
			
			СтрокаДереваОтчетов.СданЧерез1СОтчетность = Ложь;
			
		Иначе
			РеквизитыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДереваОтчетов.ОтчетСсылка, "ИсточникОтчета, ВыбраннаяФорма, ВерсияДанных");
			Если РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(
				РеквизитыОтчета.ИсточникОтчета, РеквизитыОтчета.ВыбраннаяФорма).ПечатьБезШтрихкодаPDF417НаСервере Тогда

				СтрокаДереваОтчетов.СданЧерез1СОтчетность = Ложь;

			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если СтрокаДереваОтчетов.СданЧерез1СОтчетность Тогда
		
		СостояниеРеглОтчета = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(СтрокаДереваОтчетов.ОтчетСсылка);
		Если Не СостояниеРеглОтчета.Отправлено Или Не СостояниеРеглОтчета.Сдано Тогда
			// Сдача отчета не подтверждена гос.органом.
			СтрокаДереваОтчетов.СданЧерез1СОтчетность = Ложь;

		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитыОтчета = Неопределено Тогда
		СтрокаДереваОтчетов.ВерсияДанныхОтчетаАктуальная = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтрокаДереваОтчетов.ОтчетСсылка, "ВерсияДанных", Истина);
	Иначе
		СтрокаДереваОтчетов.ВерсияДанныхОтчетаАктуальная = РеквизитыОтчета.ВерсияДанных;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеСтрокиДерева(ИдентификаторИлиСтрокаДереваОтчетов, ДанныеОтсутствуют)

	СтрокаДереваОтчетов = ПолучитьСтрокуДереваОтчетов(ИдентификаторИлиСтрокаДереваОтчетов);

	СтрокаДереваОтчетов.ОтчетСсылка            = Неопределено;
	СтрокаДереваОтчетов.ВерсияДанныхОтчета     = "";
	СтрокаДереваОтчетов.СданЧерез1СОтчетность  = Ложь;
	СтрокаДереваОтчетов.ФайлОтчета             = Неопределено;
	СтрокаДереваОтчетов.ФайлОтчетаXML          = Неопределено;
	СтрокаДереваОтчетов.ФайлОтчетаНаименование = "";
	СтрокаДереваОтчетов.ФайлОтчетаСодержитЭП   = Ложь;
	СтрокаДереваОтчетов.ПодписанЭП             = Ложь;
	СтрокаДереваОтчетов.Доверенность           = Неопределено;
	СтрокаДереваОтчетов.ДанныеОтсутствуют      = ДанныеОтсутствуют;
	СтрокаДереваОтчетов.ОтчетЗаполнен          = ОтчетЗаполнен(СтрокаДереваОтчетов);

	ЗаполнитьЗначенияСвойств(СтрокаДереваОтчетов, НаборПризнаковМодифицированности());
	СтрокаДереваОтчетов.ИндексКартинки = ИндексКартинкиПусто();
	
	ОписаниеВидовОтчетов = ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов();
	СформироватьПредставлениеОтчета(СтрокаДереваОтчетов, НастройкиКомплекта(), ОписаниеВидовОтчетов);
	
	// Запомним, что есть данные для записи.
	ДеревоОтчетовИзменено = Истина;
	Модифицированность   = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованияФайловОтчетов(СтрокиДерева)

	// Составляем список произвольных файлов.
	МассивФайлов = Новый Массив;
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если НЕ ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоПроизвольныйФайл(СтрокаДерева.ВидОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.ФайлОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивФайлов.Добавить(СтрокаДерева.ФайлОтчета);
	КонецЦикла;

	// Читаем информацию из базы и запоминаем в колонках строки дерева.
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивФайлов, "Наименование, Расширение");
	УстановитьПривилегированныйРежим(Ложь);
	ЧастиИмени = Новый Массив;
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокаДерева.ФайлОтчетаНаименование = "";
	
		Если НЕ ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоПроизвольныйФайл(СтрокаДерева.ВидОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.ФайлОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыФайла = РеквизитыФайлов[СтрокаДерева.ФайлОтчета];
		Если РеквизитыФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ЧастиИмени.Очистить();
		ЧастиИмени.Добавить(РеквизитыФайла.Наименование);
		Если ЗначениеЗаполнено(РеквизитыФайла.Расширение) Тогда
			ЧастиИмени.Добавить(РеквизитыФайла.Расширение);
		КонецЕсли;

		СтрокаДерева.ФайлОтчетаНаименование = СтрСоединить(ЧастиИмени, ".");
	
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина, если переданная строка дерева является одним из множества однотипных отчетов в пределах своего родителя.
// "Однотипность" отчетов проверяется по совпадению вида отчета, идентификатора строки настройки и периода.
//
&НаСервере
Функция ЭтоГруппаОднотипныхОтчетов(СтрокаДереваОтчетов, РодительскаяСтрока)

	Если РодительскаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяемыеПоля = Новый Массив;
	ПроверяемыеПоля.Добавить("ВидОтчета");
	ПроверяемыеПоля.Добавить("ИдентификаторСтрокиКомплекта");
	ПроверяемыеПоля.Добавить("ДатаНачала");
	ПроверяемыеПоля.Добавить("ДатаОкончания");
	
	// Проверим родительскую строку.
	Для каждого Поле Из ПроверяемыеПоля Цикл
		Если СтрокаДереваОтчетов[Поле] <> РодительскаяСтрока[Поле] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	// Проверяем соседние строки.
	Для каждого ПодчиненнаяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл

		Если ПодчиненнаяСтрока = СтрокаДереваОтчетов Тогда
			// Саму с собой не сравниваем.
			Продолжить;
		КонецЕсли;
		
		Для каждого Поле Из ПроверяемыеПоля Цикл
			Если СтрокаДереваОтчетов[Поле] <> ПодчиненнаяСтрока[Поле] Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура СкопироватьСтрокиДереваРекурсивно(СтрокаДереваИсточник, СтрокаДереваПриемник, ИндексВставки, СтрокиКОбновлению)

	ДочерниеСтрокиИсточника = СтрокаДереваИсточник.ПолучитьЭлементы();

	Для каждого ДочерняяСтрокаИсточника Из ДочерниеСтрокиИсточника Цикл

		Если ИндексВставки <> Неопределено Тогда
			НоваяСтрокаПриемника = СтрокаДереваПриемник.ПолучитьЭлементы().Вставить(ИндексВставки);
		Иначе
			НоваяСтрокаПриемника = СтрокаДереваПриемник.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		
		СтрокиКОбновлению.Добавить(НоваяСтрокаПриемника);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемника, ДочерняяСтрокаИсточника);
		// Копируем все подчиненные строки в те же позиции, как они расположены в старой строке.
		СкопироватьСтрокиДереваРекурсивно(ДочерняяСтрокаИсточника, НоваяСтрокаПриемника, Неопределено, СтрокиКОбновлению);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуДереваОтчетов(ИдентификаторИлиСтрокаДереваОтчетов)

	Если ТипЗнч(ИдентификаторИлиСтрокаДереваОтчетов) = Тип("Число") Тогда
		Результат = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторИлиСтрокаДереваОтчетов);
	ИначеЕсли ТипЗнч(ИдентификаторИлиСтрокаДереваОтчетов) = Тип("СтрокаДереваЗначений") Тогда
		// Строка дерева значений в памяти.
		Результат = ИдентификаторИлиСтрокаДереваОтчетов;
	ИначеЕсли ТипЗнч(ИдентификаторИлиСтрокаДереваОтчетов) = Тип("ДанныеФормыЭлементДерева") Тогда
		// Строка дерева значений на форме.
		Результат = ИдентификаторИлиСтрокаДереваОтчетов;
	Иначе
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'ПолучитьСтрокуДереваОтчетов(): неизвестный тип параметра ИдентификаторИлиСтрокаДереваОтчетов = %1';
				|en = 'ПолучитьСтрокуДереваОтчетов(): unknown ИдентификаторИлиСтрокаДереваОтчетов = %1 parameter type'"),
			ТипЗнч(ИдентификаторИлиСтрокаДереваОтчетов));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ДобавитьПроизвольныйОтчет()

	// Добавляем новую строку дерева для произвольного файла.
	СтрокаДереваОтчетов = Неопределено;
	РодительскаяСтрока  = Неопределено;
	
	ОписаниеВидовОтчетов = ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов();
	
	СтрокаВидаОтчетов = ОписаниеВидовОтчетов.Найти("ПроизвольныйФайл", "ВидОтчета"); // Строка существует всегда.

	// Создадим группу "Прочее" в дереве, если ее еще нет.
	РодительскаяСтрока = Неопределено;
	Для каждого СтрокаДерева Из ДеревоОтчетов.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.НомерГруппы = СтрокаВидаОтчетов.НомерГруппы И НЕ ЗначениеЗаполнено(СтрокаДерева.КлючСтрокиОтчета) Тогда
			РодительскаяСтрока = СтрокаДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Если не нашли группу Прочее, то добавляем ее.
	Если РодительскаяСтрока = Неопределено Тогда
		РодительскаяСтрока = ДеревоОтчетов.ПолучитьЭлементы().Добавить();
		РодительскаяСтрока.КлючСтрокиСубъекта  = ТекущийКлючСтрокиСубъекта;
		РодительскаяСтрока.ПредставлениеОтчета = СтрокаВидаОтчетов.ПредставлениеГруппы;
		РодительскаяСтрока.ОсноваПредставления = СтрокаВидаОтчетов.ПредставлениеГруппы;
		РодительскаяСтрока.НомерГруппы         = СтрокаВидаОтчетов.НомерГруппы;
	КонецЕсли;
	
	// Добавляем собственно саму новую строку дерева.
	МаксКлючСтрокиОтчета = МаксКлючСтрокиОтчета + 1;

	СтрокаДереваОтчетов = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
	СтрокаДереваОтчетов.КлючСтрокиСубъекта 	= ТекущийКлючСтрокиСубъекта;
	СтрокаДереваОтчетов.КлючСтрокиОтчета   	= МаксКлючСтрокиОтчета;
	СтрокаДереваОтчетов.ВидОтчета         	= СтрокаВидаОтчетов.ВидОтчета;
	СтрокаДереваОтчетов.НомерГруппы        	= СтрокаВидаОтчетов.НомерГруппы;

	СтрокаДереваОтчетов.Выгружать = 1;
	
	ПроставитьПометкиВверх(СтрокаДереваОтчетов);
	
	ДеревоОтчетовИзменено = Истина;
	Модифицированность    = Истина;
	
	Возврат СтрокаДереваОтчетов.ПолучитьИдентификатор();

КонецФункции

&НаКлиенте
Процедура СвернутьСтрокиДереваРекурсивно(СтрокиДерева)

	Для каждого СтрокаДерева Из СтрокиДерева Цикл

		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		
		Если ПодчиненныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СвернутьСтрокиДереваРекурсивно(ПодчиненныеСтроки);
		
		Элементы.ДеревоОтчетов.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеСвернутойГруппы(СтрокаДереваОтчетов)
	
	КоличествоОтчетов = КоличествоОтчетовВГруппе(СтрокаДереваОтчетов.ПолучитьЭлементы());
	
	ДополнениеПредставления = СтрШаблон(НСтр("ru = '(заполнено %1 из %2)';
											|en = '(filled in %1 out of %2)'"),
		КоличествоОтчетов.Заполнено, КоличествоОтчетов.Всего);
	
	СтрокаДереваОтчетов.ПредставлениеОтчета = СтрШаблон("%1 %2",
		СтрокаДереваОтчетов.ОсноваПредставления,
		ДополнениеПредставления);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоОтчетовВГруппе(ЭлементыДереваОтчетов)
	
	Результат = Новый Структура;
	Результат.Вставить("Всего", 0);
	Результат.Вставить("Заполнено", 0);
	
	Для каждого ЭлементДерева Из ЭлементыДереваОтчетов Цикл
		Если ЗначениеЗаполнено(ЭлементДерева.КлючСтрокиОтчета) Тогда
			// Это отчет
			Результат.Всего = Результат.Всего + 1;
			
			Если ЭлементДерева.ОтчетЗаполнен Тогда
				Результат.Заполнено = Результат.Заполнено + 1;
			КонецЕсли;
		Иначе
			// Это группа - надо проверить вложенные отчеты
			ЭлементыГруппы = ЭлементДерева.ПолучитьЭлементы();
			РезультатПоГруппе = КоличествоОтчетовВГруппе(ЭлементыГруппы);
			Результат.Всего = Результат.Всего + РезультатПоГруппе.Всего;
			Результат.Заполнено = Результат.Заполнено + РезультатПоГруппе.Заполнено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьРеквизитРодителя(СтрокаДереваОтчетов, ИмяПункта, КэшРодителей, ЗначениеПоУмолчанию);
	
	Если СтрокаДереваОтчетов.Родитель = Неопределено Тогда
		
		Возврат;
	
	КонецЕсли;
	
	ЗначениеРодителя = КэшРодителей[СтрокаДереваОтчетов.Родитель];
	
	Если ЗначениеРодителя = Неопределено Тогда
		
		ЗначениеРодителя = СтрокаДереваОтчетов[ИмяПункта];
		
	ИначеЕсли ЗначениеРодителя <> ЗначениеПоУмолчанию 
		И ЗначениеРодителя <> СтрокаДереваОтчетов[ИмяПункта] Тогда
		
		ЗначениеРодителя = ЗначениеПоУмолчанию;
		
	Иначе
		
		//значение реквизита родителя не изменяется
		Возврат;
		
	КонецЕсли;

	СтрокаДереваОтчетов.Родитель[ИмяПункта] = ЗначениеРодителя;
	
	КэшРодителей.Вставить(СтрокаДереваОтчетов.Родитель, ЗначениеРодителя);
	
	УстановитьРеквизитРодителя(СтрокаДереваОтчетов.Родитель, ИмяПункта, КэшРодителей, ЗначениеПоУмолчанию);
	
КонецПроцедуры

#КонецОбласти

#Область ДействияСОтчетом

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеОписание()
	Возврат НСтр("ru = 'Описание';
				|en = 'Details'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеОткрыть()
	Возврат НСтр("ru = 'Открыть';
				|en = 'Open'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеОчистить()
	Возврат НСтр("ru = 'Очистить';
				|en = 'Clear'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеЗаполнить()
	Возврат НСтр("ru = 'Заполнить';
				|en = 'Fill in'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеВыбрать()
	Возврат НСтр("ru = 'Выбрать';
				|en = 'Select'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеПодписано()
	Возврат НСтр("ru = 'Подписано';
				|en = 'Signed'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеПодписать()
	Возврат НСтр("ru = 'Подписать';
				|en = 'Sign'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДоступныеДействия(Форма, СтрокаДереваОтчетов)

	Если НЕ ЗначениеЗаполнено(СтрокаДереваОтчетов.КлючСтрокиОтчета) Тогда
		// Это группа отчетов.
		СтрокаДереваОтчетов.ДействиеСОтчетом         = ?(СтрокаДереваОтчетов.Автозаполнение, ДействиеЗаполнить(), "");
		СтрокаДереваОтчетов.ДействиеПодписать        = "";
		СтрокаДереваОтчетов.ДоступноДействиеОчистить = Ложь;

	ИначеЕсли СтрокаДереваОтчетов.ОтчетЗаполнен Тогда
		СтрокаДереваОтчетов.ДействиеСОтчетом         = ДействиеОткрыть();
		СтрокаДереваОтчетов.ДоступноДействиеОчистить = НЕ Форма.ТолькоПросмотр;

		СтрокаДереваОтчетов.ДействиеПодписать = ?(ОтчетПодписан(СтрокаДереваОтчетов),
			ДействиеПодписано(), ДействиеПодписать());

	ИначеЕсли НЕ Форма.ТолькоПросмотр Тогда

		Если НЕ ЭтоОрганизация(Форма.ТекущийСубъект) Тогда
			// Все виды отчетов по контрагенту могут быть только выбраны из файлов.
			СтрокаДереваОтчетов.ДействиеСОтчетом = ДействиеВыбрать();

		ИначеЕсли ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоВнешнийФайл(СтрокаДереваОтчетов.ВидОтчета)
			ИЛИ ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетБРО(СтрокаДереваОтчетов.ВидОтчета) Тогда
			
			// Отчеты БРО и внешние файлы выбираем из других объектов.
			СтрокаДереваОтчетов.ДействиеСОтчетом = ДействиеВыбрать();
	
		Иначе
			// Остальные отчеты по организации могут быть заполнены по данным учета.
			СтрокаДереваОтчетов.ДействиеСОтчетом = ДействиеЗаполнить();
		КонецЕсли;
		
		// Для незаполненных отчетов доступно только одно действие, чтобы его заполнить.
		СтрокаДереваОтчетов.ДействиеПодписать        = "";
		СтрокаДереваОтчетов.ДоступноДействиеОчистить = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтчетПодписан(СтрокаДереваОтчетов)
	
	Если ЗначениеЗаполнено(СтрокаДереваОтчетов.ОтчетСсылка) Тогда
		Результат = СтрокаДереваОтчетов.СданЧерез1СОтчетность // Регламентированный отчет сдан с помощью 1С-Отчетности, есть отметка ФНС о приеме.
			Или ЗначениеЗаполнено(СтрокаДереваОтчетов.ВерсияДанныхОтчета) // ранее он подписывался
				И (СтрокаДереваОтчетов.ФайлОтчетаСодержитЭП // В присоединенном ФайлеОтчета содержится архив, внутри которого есть, в том числе, файлы подписи.
					Или СтрокаДереваОтчетов.ПодписанЭП) // Электронная подпись прикреплена к присоединенному ФайлуОтчета в регистре БСП ЭлектронныеПодписи.
				И СтрокаДереваОтчетов.ВерсияДанныхОтчетаАктуальная = СтрокаДереваОтчетов.ВерсияДанныхОтчета;
	Иначе
	 	Результат = СтрокаДереваОтчетов.ФайлОтчетаСодержитЭП // В присоединенном ФайлеОтчета содержится архив, внутри которого есть, в том числе, файлы подписи.
			Или СтрокаДереваОтчетов.ПодписанЭП; // Электронная подпись прикреплена к присоединенному ФайлуОтчета в регистре БСП ЭлектронныеПодписи.
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДействиеСОтчетом(СтрокаДереваОтчетов, ИмяДействия)

	Если ИмяДействия = ДействиеОписание() Тогда
		ОбработатьДействиеОписание(СтрокаДереваОтчетов);
		
	ИначеЕсли СтрокаДереваОтчетов.Выгружать = 0 Тогда
		
		Возврат;

	ИначеЕсли ИмяДействия = ДействиеОткрыть() Тогда
	
		Если ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетБРО(СтрокаДереваОтчетов.ВидОтчета)
			И ЗначениеЗаполнено(СтрокаДереваОтчетов.ОтчетСсылка) Тогда
			// Открываем форму БРО.
			ПоказатьЗначение(, СтрокаДереваОтчетов.ОтчетСсылка);
		
		ИначеЕсли ЗначениеЗаполнено(СтрокаДереваОтчетов.ФайлОтчета) Тогда
			// Предпросмотр файла.
			ОткрытьФайлНаПросмотр(СтрокаДереваОтчетов);
		
		КонецЕсли;
	
	ИначеЕсли ИмяДействия = ДействиеОчистить() Тогда
		// Очищаем данные в строке дерева.
		ОбработатьДействиеОчистить(СтрокаДереваОтчетов);

	ИначеЕсли ИмяДействия = ДействиеЗаполнить()
		И НЕ ЗначениеЗаполнено(СтрокаДереваОтчетов.КлючСтрокиОтчета) Тогда
		// Это группа
		
		ОбработатьДействиеЗаполнитьГруппу(СтрокаДереваОтчетов);
		
	ИначеЕсли ИмяДействия = ДействиеЗаполнить()
		ИЛИ ИмяДействия = ДействиеВыбрать()	Тогда
	
	    // В зависимости от вида отчета и типа субъекта выполняем разные действия.
	    Если (ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоСтандартныйОтчет(СтрокаДереваОтчетов.ВидОтчета)
			ИЛИ ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетПоФормеБанка(СтрокаДереваОтчетов.ВидОтчета))
			И ЭтоОрганизация(ТекущийСубъект) Тогда

	    	ОбработатьДействиеЗаполнитьСтандартныйОтчет(СтрокаДереваОтчетов);
	    
	    ИначеЕсли ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетБРО(СтрокаДереваОтчетов.ВидОтчета)
			И ЭтоОрганизация(ТекущийСубъект) Тогда
			
			ОбработатьДействиеВыбратьОтчетБРО(СтрокаДереваОтчетов);
			
		Иначе
			ОбработатьДействиеВыбратьФайл(СтрокаДереваОтчетов);
		КонецЕсли;
	
	ИначеЕсли ИмяДействия = ДействиеПодписано()
		ИЛИ ИмяДействия = ДействиеПодписать() Тогда
		
		ОбработатьДействиеСПодписью(СтрокаДереваОтчетов);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеЗаполнитьГруппу(СтрокаДереваОтчетов)

	// Составим список возможных вариантов для выбора.
	СписокВариантов = Новый СписокЗначений;
	Если ТипЗнч(ТекущийСубъект) = Тип("СправочникСсылка.Организации")
		И ЕстьАвтозаполняемыеОтчетыВГруппе(СтрокаДереваОтчетов.ПолучитьЭлементы()) Тогда
		СписокВариантов.Добавить("ПоДаннымУчета",     НСтр("ru = 'По данным учета';
															|en = 'By accounting data'"));
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДействиеЗаполнитьГруппу_ПослеВыбораВарианта", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВариантов); 

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеЗаполнитьГруппу_ПослеВыбораВарианта(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если ВыбранныйЭлемент.Значение = "ПоДаннымУчета" Тогда
		
		СтрокаСубъекта = Элементы.ЭкономическиеСубъекты.ТекущиеДанные;
		КлючиСтрокОтчетов = КлючиСтрокОтчетовВГруппе(СтрокаДереваОтчетов.ПолучитьЭлементы());
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("КлючСтрокиСубъекта", СтрокаСубъекта.КлючСтрокиСубъекта);
		ДополнительныеПараметры.Вставить("КлючиСтрокОтчетов",  КлючиСтрокОтчетов);
		
		ВыполнитьМассовуюОперацию("Заполнить", ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#Область Очистка

&НаКлиенте
Процедура ОбработатьДействиеОчистить(СтрокаДереваОтчетов)

	Если НЕ СтрокаДереваОтчетов.ДоступноДействиеОчистить Тогда
		// Очистка недоступна, ничего не делаем.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта) Тогда
		СтрокаДереваОтчетов.Выгружать = 0;
		ПроставитьПометкиВверх(СтрокаДереваОтчетов);
		Возврат;
	КонецЕсли;

	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'Очистить признак заполнения отчета в строке
					|""%1""?';
					|en = 'Clear the report filling flag in line ""%1""
					|?'"),
		ПолноеПредставлениеОтчета(СтрокаДереваОтчетов));
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДействиеОчистить_ПослеВопроса", ЭтотОбъект, ДополнительныеПараметры);
		
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеОчистить_ПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьДанныеСтрокиДерева(ДополнительныеПараметры.ИдентификаторСтроки, Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОписаниеОтчета

&НаКлиенте
Процедура ОбработатьДействиеОписание(СтрокаДереваОтчетов)

	ПараметрыФормы = ПараметрыФормыОписания(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	УниверсальныйОбменСБанкамиФормыКлиент.ОткрытьОписаниеПрисоединенногоФайла(ЭтотОбъект, ПараметрыФормы);

КонецПроцедуры

&НаСервере
Функция ПараметрыФормыОписания(ИдентификаторСтроки)

	ПараметрыФормы = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыФормыОписания();
	ПараметрыФормы.Сервис = Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность;
	ПараметрыФормы.Характеристика = Перечисления.ХарактеристикиСервисаФинансовойОтчетности.ШаблоныФайлов;
	ПараметрыФормы.Банки.Добавить(Объект.Банк);

	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);

	НастройкиКомплекта = НастройкиКомплекта();
	
	СтрокаНастройки = НайтиСтрокуКомплекта(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
		
	Если СтрокаНастройки = Неопределено 
		И НастройкиКомплекта <> Неопределено
		И ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетБРО(СтрокаДереваОтчетов.ВидОтчета) Тогда
		// Для регламентированных отчетов ищем также описание по виду отчета в целом.
		СтрокаНастройки = НастройкиКомплекта.Отчеты.Найти(СтрокаДереваОтчетов.ВидОтчета, "ВидОтчета");
	КонецЕсли;
	
	Если СтрокаНастройки <> Неопределено Тогда
		ПараметрыФормы.Заголовок         = СтрокаНастройки.КраткоеПредставление;
		ПараметрыФормы.ПодробноеОписание = СтрокаНастройки.ПодробноеПредставление;
		ПараметрыФормы.ИмяФайлаШаблона   = СтрокаНастройки.ИмяФайлаШаблона;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыФормы.Заголовок) И ЗначениеЗаполнено(СтрокаДереваОтчетов.ВидОтчета) Тогда
		ОписаниеВидовОтчетов = ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов();
		СтрокаВидаОтчета = НайтиОписаниеПоВидуОтчета(СтрокаДереваОтчетов.ВидОтчета, ОписаниеВидовОтчетов);
		Если СтрокаВидаОтчета <> Неопределено Тогда
			ПараметрыФормы.Заголовок = СтрокаВидаОтчета.ПредставлениеОтчета;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыФормы;

КонецФункции

#КонецОбласти

#Область ОтчетыБРО

&НаКлиенте
Процедура ОбработатьДействиеВыбратьОтчетБРО(СтрокаДереваОтчетов)

	// Составим список возможных вариантов для выбора.
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("1СОтчетность",      НСтр("ru = 'Из 1С-Отчетности...';
														|en = 'From 1C:Reporting...'"));
	СписокВариантов.Добавить("ФайлСДиска",        НСтр("ru = 'Файл с диска...';
														|en = 'File from hard drive…'"));

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДействиеВыбратьОтчетБРО_ПослеВыбораВарианта", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВариантов); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеВыбратьОтчетБРО_ПослеВыбораВарианта(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);

	Если ВыбранныйЭлемент.Значение = "1СОтчетность" Тогда
	
		ОткрытьФормуВыбораРегламентированногоОтчета(СтрокаДереваОтчетов);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "ФайлСДиска" Тогда

		ОткрытьДиалогВыбораФайлаСДиска(СтрокаДереваОтчетов);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораРегламентированногоОтчета(СтрокаДереваОтчетов)

	ИдентификаторСтроки = СтрокаДереваОтчетов.ПолучитьИдентификатор();

	ПараметрыФормы = ПараметрыФормыВыбораРегламентированногоОтчета(ИдентификаторСтроки);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыборРегламентированногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ЗаполнениеФинОтчетностиВБанкиКлиент.ОткрытьФормуВыбораРегламентированногоОтчета(
		ПараметрыФормы, ЭтотОбъект, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыборРегламентированногоОтчетаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		// Пользователь отказался от выбора.
		Возврат;
	КонецЕсли;
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);

	ОчиститьДанныеСтрокиДерева(ДополнительныеПараметры.ИдентификаторСтроки, Ложь);

	СтрокаДереваОтчетов.ОтчетСсылка   = РезультатЗакрытия.РегламентированныйОтчет;
	СтрокаДереваОтчетов.ОтчетЗаполнен = ОтчетЗаполнен(СтрокаДереваОтчетов);
	
	// Получим из 1С-Отчетности информацию о состоянии сдачи отчета.
	ПроверитьСостояниеСдачиЧерез1СОтчетность(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	СформироватьДоступныеДействия(ЭтотОбъект, СтрокаДереваОтчетов);
	
	ДеревоОтчетовИзменено = Истина;
	Модифицированность   = Истина;

КонецПроцедуры

#КонецОбласти

#Область СтандартныеОтчеты

&НаКлиенте
Процедура ОбработатьДействиеЗаполнитьСтандартныйОтчет(СтрокаДереваОтчетов)

	// Составим список возможных вариантов для выбора.
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("ПоДаннымУчета",     НСтр("ru = 'По данным учета...';
														|en = 'By accounting data...'"));
	СписокВариантов.Добавить("ФайлСДиска",        НСтр("ru = 'Файл с диска...';
														|en = 'File from hard drive…'"));
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДействиеЗаполнитьСтандартныйОтчет_ПослеВыбораВарианта", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВариантов); 

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеЗаполнитьСтандартныйОтчет_ПослеВыбораВарианта(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если ВыбранныйЭлемент.Значение = "ПоДаннымУчета" Тогда
		
		ОткрытьОтчетПоДаннымУчета(СтрокаДереваОтчетов);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "ФайлСДиска" Тогда
		
		ОткрытьДиалогВыбораФайлаСДиска(СтрокаДереваОтчетов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДанныеОтсутствуютОбработкаОтвета(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СнятьФлажкиВГруппе(ДополнительныеПараметры.ИдентификаторыОтчетов);
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		НеПредлагатьУстановкуДанныеОтсутствуютДляАналогичныхОтчетов = Истина;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоДаннымУчета(СтрокаДереваОтчетов)
	
	Если СтрокаДереваОтчетов.ВидОтчета = "АнализСчета" Тогда
		
		ОткрытьОтчетАнализСчета(СтрокаДереваОтчетов);
		
	ИначеЕсли СтрокаДереваОтчетов.ВидОтчета = "ОборотноСальдоваяВедомость" Тогда
		
		ОткрытьОтчетОСВ(СтрокаДереваОтчетов);
		
	ИначеЕсли СтрокаДереваОтчетов.ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету" Тогда
		
		ОткрытьОтчетОСВПоСчету(СтрокаДереваОтчетов);
		
	ИначеЕсли СтрокаДереваОтчетов.ВидОтчета = "ОборотыСчета" Тогда
		
		ОткрытьОтчетОборотыСчета(СтрокаДереваОтчетов);
		
	ИначеЕсли СтрокаДереваОтчетов.ВидОтчета = "КарточкаСчета" Тогда
		
		ОткрытьОтчетКарточкаСчета(СтрокаДереваОтчетов);
		
	ИначеЕсли СтрокаДереваОтчетов.ВидОтчета = "КассоваяКнига" Тогда
		
		ОткрытьОтчетКассоваяКнига(СтрокаДереваОтчетов);
		
	ИначеЕсли СтрокаДереваОтчетов.ВидОтчета = "ВаловаяПрибыль" Тогда
		
		ОткрытьОтчетВаловаяПрибыль(СтрокаДереваОтчетов);
		
	ИначеЕсли СтрокаДереваОтчетов.ВидОтчета = "ВедомостьАмортизацииОС" Тогда
		
		ОткрытьОтчетВедомостьАмортизацииОС(СтрокаДереваОтчетов);

	ИначеЕсли СтрокаДереваОтчетов.ВидОтчета = "ОстаткиТоваровПоСрокамХранения" Тогда
		
		ОткрытьОтчетОстаткиТоваровПоСрокамХранения(СтрокаДереваОтчетов);
		
	ИначеЕсли СтрокаДереваОтчетов.ВидОтчета = "РасшифровкаЗадолженности" Тогда
		
		ОткрытьОтчетРасшифровкаЗадолженности(СтрокаДереваОтчетов);
		
	ИначеЕсли СтрокаДереваОтчетов.ВидОтчета = "КнигаУчетаДоходовПатент" Тогда
		
		ОткрытьОтчетКнигаУчетаДоходовПатент(СтрокаДереваОтчетов);
		
	ИначеЕсли СтрокаДереваОтчетов.ВидОтчета = "КнигаУчетаДоходовИРасходов" Тогда
		
		ОткрытьОтчетКнигаУчетаДоходовИРасходов(СтрокаДереваОтчетов);
		
	ИначеЕсли СтрокаДереваОтчетов.ВидОтчета = "КнигаУчетаДоходовИРасходовПредпринимателя" Тогда
		
		ОткрытьОтчетКнигаУчетаДоходовИРасходовПредпринимателя(СтрокаДереваОтчетов);
		
	ИначеЕсли СтрокаДереваОтчетов.ВидОтчета = "ОтчетПоФормеБанка" Тогда
		
		ОткрытьОтчетОтчетПоФормеБанка(СтрокаДереваОтчетов);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов)
	
	ОтборПоСубъекту = Новый Структура();
	ОтборПоСубъекту.Вставить("КлючСтрокиСубъекта", ТекущийКлючСтрокиСубъекта);
	НайденныеСтроки = Объект.ЭкономическиеСубъекты.НайтиСтроки(ОтборПоСубъекту);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета.ПараметрыРежимаВыгрузки.ИдентификаторФормыВладельца = УникальныйИдентификатор;
	ПараметрыОтчета.ПараметрыРежимаВыгрузки.КлючСтрокиОтчета = СтрокаДереваОтчетов.КлючСтрокиОтчета;
	
	ПараметрыОтчета.Организация   = НайденныеСтроки[0].Субъект;
	
	Если ПараметрыОтчета.Свойство("Период") Тогда
		// Отчет формируется "на дату", укажем в периоде дату окончания
		ПараметрыОтчета.Период        = СтрокаДереваОтчетов.ДатаОкончания;
	Иначе
		ПараметрыОтчета.НачалоПериода = СтрокаДереваОтчетов.ДатаНачала;
		ПараметрыОтчета.КонецПериода  = СтрокаДереваОтчетов.ДатаОкончания;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ВключатьОбособленныеПодразделения") Тогда
		ПараметрыОтчета.ВключатьОбособленныеПодразделения = НайденныеСтроки[0].ВключатьОбособленныеПодразделения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НесоотвествияОтчета(РезультатЗакрытия, СтрокаОтчета)
	
	Если СтрокаОтчета = Неопределено Тогда
		// Совсем удалили строку отчета, некуда сохранять результат.
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверим, чтобы сохраняемый отчет относился к тому же экономическому субъекту, периоду и счету.
	СтрокаСубъекта = НайтиСтрокуПоКлючу(Объект.ЭкономическиеСубъекты, "КлючСтрокиСубъекта", СтрокаОтчета.КлючСтрокиСубъекта);
	Если СтрокаСубъекта = Неопределено Тогда
		// В обычной ситуации не должны сюда попасть, т.к. данные табличных частей синхронизируются между собой.
		Возврат Неопределено;
	КонецЕсли;
	
	Если БухгалтерскиеОтчетыКлиентСервер.ОтчетПоддерживаетУниверсальныеНастройки(СтрокаОтчета.ВидОтчета) Тогда
		ОписаниеНесоответствий = НесоотвествияСтандартногоОтчета(РезультатЗакрытия, СтрокаОтчета, СтрокаСубъекта);
	Иначе
		ОписаниеНесоответствий = НесоответствияДляВсехОтчетов(РезультатЗакрытия, СтрокаОтчета, СтрокаСубъекта);
	КонецЕсли;
	
	Если ОписаниеНесоответствий.Количество() > 0 Тогда
		// Начало текста.
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Отчет не может быть включен в состав отчетов, т.к. его настройки отличаются от требований %1:';
				|en = 'Cannot include the report in the reports as its settings differ from %1 requirements:'"),
			Объект.Банк);
		ОписаниеНесоответствий.Вставить(0, ТекстСообщения);
	КонецЕсли;
	
	Возврат ОписаниеНесоответствий;
	
КонецФункции

&НаКлиенте
Функция НесоответствияДляВсехОтчетов(РезультатЗакрытия, СтрокаОтчета, СтрокаСубъекта)
	
	ОписаниеНесоответствий = Новый Массив;
	
	ЕстьОрганизация = РезультатЗакрытия.Свойство("Организация");
	ЕстьОбособленные = РезультатЗакрытия.Свойство("ВключатьОбособленныеПодразделения");
	ОбособленныеИзменились = ЕстьОбособленные
		И СтрокаСубъекта.ВключатьОбособленныеПодразделения <> РезультатЗакрытия.ВключатьОбособленныеПодразделения;
	ВключатьОбособленныеПодразделения = ЕстьОбособленные И РезультатЗакрытия.ВключатьОбособленныеПодразделения;
	
	ЕстьПериод = РезультатЗакрытия.Свойство("Период");
	ЕстьНачалоПериода = РезультатЗакрытия.Свойство("НачалоПериода");
	ЕстьКонецПериода = РезультатЗакрытия.Свойство("КонецПериода");
	
	// Проверка организации.
	НесовпадениеОрганизации = ЕстьОрганизация;
	Если НесовпадениеОрганизации И Не ОбособленныеИзменились Тогда
		
		НесовпадениеОрганизации = СтрокаСубъекта.Субъект <> РезультатЗакрытия.Организация
			И СтрокаОтчета.УточнениеНаименования <> Строка(РезультатЗакрытия.Организация);
		
	КонецЕсли;
	Если НесовпадениеОрганизации Тогда
		ТекстСообщения = НСтр("ru = ' - отчет сформирован по %1, требуется сформировать отчет по %2.';
								|en = ' - the report is generated for %1. Generate the report for %2.'");
		
		Если ВключатьОбособленныеПодразделения Тогда
			ТекстИзОтчета = СтрШаблон(НСтр("ru = '%1 с обособленными подразделениями';
											|en = '%1 with branch offices'"), РезультатЗакрытия.Организация);
		Иначе
			ТекстИзОтчета = РезультатЗакрытия.Организация;
		КонецЕсли;
		
		Если ВключатьОбособленныеПодразделения Тогда
			ТекстТребованияБанка = СтрШаблон(НСтр("ru = '%1 с обособленными подразделениями';
													|en = '%1 with branch offices'"), СтрокаСубъекта.Субъект);
		Иначе
			ТекстТребованияБанка = СтрокаСубъекта.Субъект;
		КонецЕсли;
		
		ОписаниеНесоответствий.Добавить(СтрШаблон(ТекстСообщения, ТекстИзОтчета, ТекстТребованияБанка));
	КонецЕсли;
	
	// Проверка периода.
	Если ЗначениеЗаполнено(СтрокаОтчета.ДатаНачала) И ЗначениеЗаполнено(СтрокаОтчета.ДатаОкончания) Тогда
		Если ЕстьПериод Тогда
			Если КонецДня(СтрокаОтчета.ДатаОкончания) <> КонецДня(РезультатЗакрытия.Период) Тогда
				
				ТекстСообщения = НСтр("ru = ' - отчет сформирован на дату %1, требуется сформировать отчет на дату %2.';
										|en = ' - the report is generated for %1. Generate the report for %2.'");
				
				ТекстИзОтчета        = Формат(РезультатЗакрытия.Период,   "ДФ=dd.MM.yyyy");
				ТекстТребованияБанка = Формат(СтрокаОтчета.ДатаОкончания, "ДФ=dd.MM.yyyy");
				
				ОписаниеНесоответствий.Добавить(СтрШаблон(ТекстСообщения, ТекстИзОтчета, ТекстТребованияБанка));
				
			КонецЕсли;
		ИначеЕсли ЕстьНачалоПериода И ЕстьКонецПериода Тогда
			Если НачалоДня(СтрокаОтчета.ДатаНачала) <> НачалоДня(РезультатЗакрытия.НачалоПериода)
				ИЛИ КонецДня(СтрокаОтчета.ДатаОкончания) <> КонецДня(РезультатЗакрытия.КонецПериода) Тогда
				
				ТекстСообщения = НСтр("ru = ' - отчет сформирован за %1, требуется сформировать отчет за %2.';
										|en = ' - the report is generated for %1. Generate the report for %2.'");
				
				ТекстИзОтчета = ПредставлениеПериода(
					НачалоДня(РезультатЗакрытия.НачалоПериода),
					КонецДня(РезультатЗакрытия.КонецПериода),
					НСтр("ru = 'ФП=Истина';
						|en = 'FP=True'"));
				
				ТекстТребованияБанка = ПредставлениеПериода(
					НачалоДня(СтрокаОтчета.ДатаНачала),
					КонецДня(СтрокаОтчета.ДатаОкончания),
					НСтр("ru = 'ФП=Истина';
						|en = 'FP=True'"));
				
				ОписаниеНесоответствий.Добавить(СтрШаблон(ТекстСообщения, ТекстИзОтчета, ТекстТребованияБанка));
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеНесоответствий;
	
КонецФункции

&НаКлиенте
Функция НесоотвествияСтандартногоОтчета(РезультатЗакрытия, СтрокаОтчета, СтрокаСубъекта)
	
	ОписаниеНесоответствий = НесоответствияДляВсехОтчетов(РезультатЗакрытия, СтрокаОтчета, СтрокаСубъекта);
	
	// Проверка счета.
	Если РезультатЗакрытия.Свойство("Счет") И ЗначениеЗаполнено(СтрокаОтчета.УточнениеНаименования) Тогда
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(РезультатЗакрытия.Счет);
		
		Если СтрокаОтчета.УточнениеНаименования <> СвойстваСчета.Код Тогда
			ТекстСообщения = НСтр("ru = ' - отчет сформирован по счету %1, требуется сформировать отчет по счету %2.';
									|en = ' - the %1 account report is generated. Generate the %2 account report.'");
			ОписаниеНесоответствий.Добавить(СтрШаблон(ТекстСообщения, СвойстваСчета.Код, СтрокаОтчета.УточнениеНаименования));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеНесоответствий;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаборПризнаковМодифицированности()
	
	ПризнакиМодифицированности = Новый Структура;
	
	// Признаки, вызывающие появление в строке картинки с карандашом.
	ПризнакиМодифицированности.Вставить("РучнаяКорректировка",      Ложь);
	ПризнакиМодифицированности.Вставить("РучнаяНастройка",          Ложь);
	
	// Не вызывает появление картинки с карандашом, но как и другие отражается в файле-описи.
	ПризнакиМодифицированности.Вставить("ЗагруженоИзВнешнегоФайла", Ложь);
	
	Возврат ПризнакиМодифицированности;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры)
	
	// Найдем отчет, для которого вызывали формирование.
	// Т.к. форма отчета при открытии не блокирует форму с отчетностью в банк,
	// то пользователь может перейти на другую строку отчета, по сравнению с той, на которой он изначально открывал форму отчета.
	// Поэтому ищем по ключу отчета во всей табличной части документа.
	
	// Возможно отчет находится только в дереве, еще не был сохранен в табличную часть документа,
	// поэтому сначала ищем в дереве.
	СтрокаОтчета = НайтиОтчетВДеревеНаФорме(ДополнительныеПараметры.КлючСтрокиОтчета, ДеревоОтчетов.ПолучитьЭлементы());
	Если СтрокаОтчета = Неопределено Тогда
		СтрокаОтчета = НайтиСтрокуПоКлючу(Объект.Отчетность, "КлючСтрокиОтчета", ДополнительныеПараметры.КлючСтрокиОтчета);
	КонецЕсли;
	
	ОписаниеНесоответствий = НесоотвествияОтчета(РезультатЗакрытия, СтрокаОтчета);
	Если ОписаниеНесоответствий = Неопределено Тогда // до поиска несоответствий дело не дошло, не нашли отчет
		Возврат;
	ИначеЕсли ОписаниеНесоответствий.Количество() > 0 Тогда
		// Для сохранения символов переноса строк в веб-клиенте передаем как форматированную строку.
		ПоказатьПредупреждение(, СтроковыеФункцииКлиент.ФорматированнаяСтрока(СтрСоединить(ОписаниеНесоответствий, Символы.ПС)));
		Возврат;
	КонецЕсли;

	// Запишем документ, чтобы была ссылка.
	Если Не ЗаписатьНовыйОбъект() Тогда	
		Возврат;
	КонецЕсли;
	
	ПризнакиМодифицированности = НаборПризнаковМодифицированности();
	ЗаполнитьЗначенияСвойств(ПризнакиМодифицированности, РезультатЗакрытия);
	
	ЗаписатьОтчетИСохранитьРезультатВПрисоединенныеФайлы(
		РезультатЗакрытия.Результат, СтрокаОтчета.КлючСтрокиОтчета, ПризнакиМодифицированности);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОтчетИСохранитьРезультатВПрисоединенныеФайлы(Результат, КлючСтрокиОтчета, ПризнакиМодифицированности)
	
	// Сначала ищем в дереве, так там более актуальные данные.
	СтрокаОтчета = НайтиОтчетВДеревеНаФорме(КлючСтрокиОтчета, ДеревоОтчетов.ПолучитьЭлементы());
	Если СтрокаОтчета = Неопределено Тогда
		// Отчета нет среди отчетов выделенного субъекта отчетности, ищем среди отчетов других субъектов.
		СтрокаОтчета = НайтиСтрокуПоКлючу(Объект.Отчетность, "КлючСтрокиОтчета", КлючСтрокиОтчета);
	КонецЕсли;
	
	Если СтрокаОтчета = Неопределено Тогда
		// Ничего не смогли найти.
		Возврат;
	КонецЕсли;

	СтрокаСубъекта = НайтиСтрокуСубъектаПоКлючуОтчета(ЭтотОбъект, КлючСтрокиОтчета);
	Если СтрокаСубъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКомплекта = НастройкиКомплекта(); 
	
	ОписаниеВидовОтчетов = ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов();
	
	СтрокаНастройки = НайтиСтрокуКомплекта(СтрокаОтчета.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
		
	СтрокаВидаОтчетов = ОписаниеВидовОтчетов.Найти(СтрокаОтчета.ВидОтчета, "ВидОтчета");
	Если СтрокаВидаОтчетов = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не указано описание для вида отчета %1';
										|en = 'Details for the %1 report kind are not specified'"), СтрокаВидаОтчетов.ВидОтчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаНастройки) И ЗначениеЗаполнено(СтрокаНастройки.ШаблонИмениФайла) Тогда
		ШаблонИмениФайла = СтрокаНастройки.ШаблонИмениФайла;
		ИмяФайлаИзНСИ    = Истина;
	Иначе
		ШаблонИмениФайла = СтрокаВидаОтчетов.ШаблонИмениФайла;
		ИмяФайлаИзНСИ    = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ШаблонИмениФайла) Тогда
		// Ошибка настройки видов отчетов.
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не указан ШаблонИмениФайла для вида отчета %1';
										|en = 'ШаблонИмениФайл is not specified for the %1 report kind'"), СтрокаВидаОтчетов.ВидОтчета);
	КонецЕсли;

	АдресХранилища = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	
	// Подготовим параметры для создания присоединенного файла.
	РеквизитыСубъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаСубъекта.Субъект, "ИНН, КПП");
	
	ПараметрыФайлаОтчета = УниверсальныйОбменСБанкамиОбщегоНазначения.НовыеПараметрыИмениФайлаОтчета();
	ПараметрыФайлаОтчета.ИНН 					= РеквизитыСубъекта.ИНН;
	ПараметрыФайлаОтчета.КПП					= РеквизитыСубъекта.КПП;
	ПараметрыФайлаОтчета.УточнениеНаименования	= СтрокаОтчета.УточнениеНаименования;
	ПараметрыФайлаОтчета.ДатаНачала				= СтрокаОтчета.ДатаНачала;
	ПараметрыФайлаОтчета.ДатаОкончания			= СтрокаОтчета.ДатаОкончания;
	ПараметрыФайлаОтчета.ШаблонИмениФайла		= ШаблонИмениФайла;
	ПараметрыФайлаОтчета.ИмяФайлаИзНСИ	    	= ИмяФайлаИзНСИ;
	
	Если НастройкиКомплекта <> Неопределено Тогда
		ПараметрыФайлаОтчета.ПрефиксФайла			= НастройкиКомплекта.ПрефиксФайла;
		ПараметрыФайлаОтчета.ФорматИменованияФайлов	= НастройкиКомплекта.ФорматИменованияФайлов;
	КонецЕсли;
					
	ИмяФайлаБезРасширения = УниверсальныйОбменСБанкамиОбщегоНазначения.ПолучитьИмяФайлаОтчета(ПараметрыФайлаОтчета);

	РасширениеФайлаБезТочки = Документы.ФинОтчетВБанк.РасширениеФайлаБезТочки(
		СтрокаОтчета.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
		
	ИмяФайла = СтрШаблон("%1.%2", ИмяФайлаБезРасширения, РасширениеФайлаБезТочки);

	ЭтоСобственныйФайл = Ложь;
	Если ЗначениеЗаполнено(СтрокаОтчета.ФайлОтчета) Тогда
		РеквизитыФайла     = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаОтчета.ФайлОтчета, "ВладелецФайла");
		ЭтоСобственныйФайл = РеквизитыФайла.ВладелецФайла = Объект.Ссылка;
	КонецЕсли;

	НовыйФайлОтчета = Документы.ФинОтчетВБанк.ДобавитьОбновитьФайлОтчета(
		Объект.Ссылка,
		СтрокаОтчета.ФайлОтчета,
		Истина,
		ИмяФайла,
		ПолучитьИзВременногоХранилища(АдресХранилища));
		
	ФорматСохраненияОтчета = Документы.ФинОтчетВБанк.ФорматСохраненияОтчета(СтрокаОтчета.ИдентификаторСтрокиКомплекта, 
		НастройкиКомплекта);	
	ЕстьФорматXML = Документы.ФинОтчетВБанк.ЕстьФорматXML(ФорматСохраненияОтчета);
		
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаОтчета.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);

	Если ЗначениеЗаполнено(НастройкиОтчета.Счет) Тогда
		СчетОтчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду(НастройкиОтчета.Счет);
	Иначе
		СчетОтчета = Неопределено;
	КонецЕсли;
	
	ФайлОтчетаXML = Неопределено;
	ПараметрыВыгрузкиXML = Документы.ФинОтчетВБанк.ПараметрыВыгрузкиОтчетаПоВиду(СтрокаВидаОтчетов.ВидОтчета, СчетОтчета);
		
	Если ЕстьФорматXML И ПараметрыВыгрузкиXML <> Неопределено Тогда
	
		ИмяФайлаСРасширениемXML = СтрШаблон("%1.%2", ИмяФайлаБезРасширения, "xml");
		ИмяФайлаСРасширениемZIP = СтрШаблон("%1.%2", ИмяФайлаБезРасширения, "zip");
		
		ПараметрыВыгрузкиXML.ИдФайла       = ИмяФайлаСРасширениемXML;
		ПараметрыВыгрузкиXML.ДатаВыгрузки  = ТекущаяДатаСеанса();
		ПараметрыВыгрузкиXML.Организация   = СтрокаСубъекта.Субъект;
		ПараметрыВыгрузкиXML.Организации   = Новый Массив;
		ПараметрыВыгрузкиXML.Организации.Добавить(ПараметрыВыгрузкиXML.Организация);
		ПараметрыВыгрузкиXML.НачалоПериода = НачалоДня(СтрокаОтчета.ДатаНачала);
		ПараметрыВыгрузкиXML.КонецПериода  = КонецДня(СтрокаОтчета.ДатаОкончания);
		ПараметрыВыгрузкиXML.ПоместитьВАрхивZIP  = Истина;
		
		Если ЗначениеЗаполнено(СчетОтчета) Тогда
			ПараметрыВыгрузкиXML.Счет = СчетОтчета;
		КонецЕсли;
		
		ДанныеФайлаXMLZIP = Документы.ФинОтчетВБанк.ВыгрузкаОтчетаПоВиду(СтрокаВидаОтчетов.ВидОтчета, ПараметрыВыгрузкиXML);
		
		Если ДанныеФайлаXMLZIP <> Неопределено Тогда
			ФайлОтчетаXML = Документы.ФинОтчетВБанк.ДобавитьОбновитьФайлОтчета(
				Объект.Ссылка,
				СтрокаОтчета.ФайлОтчетаXML,
				Истина,
				ИмяФайлаСРасширениемZIP,
				ДанныеФайлаXMLZIP);
		КонецЕсли;
		
	КонецЕсли;
	
	ОчиститьДанныеСтрокиДерева(СтрокаОтчета, Ложь);
	
	// Обновляем данные в документе.
	СтрокаОтчета.ФайлОтчета  = НовыйФайлОтчета;
	СтрокаОтчета.ФайлОтчетаXML  = ФайлОтчетаXML;
	
	СтрокаОтчета.ИндексКартинки = ИндексКартинкиПусто();
	Для Каждого Признак Из ПризнакиМодифицированности Цикл
		СтрокаОтчета[Признак.Ключ] = Признак.Значение;
		Если Признак.Значение Тогда
			СтрокаОтчета.ИндексКартинки = ИндексКартинкиКорректировка();
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	Если ТипЗнч(СтрокаОтчета) = Тип("ДанныеФормыЭлементДерева") Тогда
		ДеревоОтчетовИзменено = Истина;
		СтрокаОтчета.ОтчетЗаполнен = ОтчетЗаполнен(СтрокаОтчета);
		СформироватьДоступныеДействия(ЭтотОбъект, СтрокаОтчета);
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(АдресХранилища);
	
КонецПроцедуры

#Область АнализСчета

&НаКлиенте
Процедура ОткрытьОтчетАнализСчета(СтрокаДереваОтчетов)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиОтчета", СтрокаДереваОтчетов.КлючСтрокиОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияАнализСчета", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = ПараметрыФормыАнализСчета(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ОткрытьФорму("Отчет.АнализСчета.Форма.ФормаОтчета",
		ПараметрыФормы, ЭтотОбъект, Истина, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияАнализСчета(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыАнализСчета(ИдентификаторСтроки)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта());
	
	Если НастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаАнализСчета(НастройкиОтчета);
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов);

	Возврат ЗаполнениеФинОтчетностиВБанки.ПараметрыФормыОтчета(ПараметрыОтчета);
	
КонецФункции

#КонецОбласти

#Область ОСВ

&НаКлиенте
Процедура ОткрытьОтчетОСВ(СтрокаДереваОтчетов)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиОтчета", СтрокаДереваОтчетов.КлючСтрокиОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияОСВ", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = ПараметрыФормыОСВ(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ОткрытьФорму("Отчет.ОборотноСальдоваяВедомость.Форма.ФормаОтчета",
		ПараметрыФормы, ЭтотОбъект, Истина, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОСВ(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыОСВ(ИдентификаторСтроки)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта());
	
	Если НастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаОСВ(НастройкиОтчета);
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов);
	
	Возврат ЗаполнениеФинОтчетностиВБанки.ПараметрыФормыОтчета(ПараметрыОтчета);
	
КонецФункции

#КонецОбласти

#Область ОСВпоСчету

&НаКлиенте
Процедура ОткрытьОтчетОСВПоСчету(СтрокаДереваОтчетов)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиОтчета", СтрокаДереваОтчетов.КлючСтрокиОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияОСВПоСчету", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = ПараметрыФормыОСВПоСчету(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ОткрытьФорму("Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета",
		ПараметрыФормы, ЭтотОбъект, Истина, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОСВПоСчету(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыОСВПоСчету(ИдентификаторСтроки)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта());
	
	Если НастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаОСВПоСчету(НастройкиОтчета);
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов);
	
	Возврат ЗаполнениеФинОтчетностиВБанки.ПараметрыФормыОтчета(ПараметрыОтчета);
	
КонецФункции

#КонецОбласти

#Область КарточкаСчета

&НаКлиенте
Процедура ОткрытьОтчетКарточкаСчета(СтрокаДереваОтчетов)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиОтчета", СтрокаДереваОтчетов.КлючСтрокиОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияКарточкиСчета", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = ПараметрыФормыКарточкаСчета(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ОткрытьФорму("Отчет.КарточкаСчета.Форма.ФормаОтчета",
		ПараметрыФормы, ЭтотОбъект, Истина, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКарточкиСчета(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыКарточкаСчета(ИдентификаторСтроки)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта());
	
	Если НастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаКарточкаСчета(НастройкиОтчета);
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов);
	
	Возврат ЗаполнениеФинОтчетностиВБанки.ПараметрыФормыОтчета(ПараметрыОтчета);
	
КонецФункции

#КонецОбласти

#Область ОборотыСчета

&НаКлиенте
Процедура ОткрытьОтчетОборотыСчета(СтрокаДереваОтчетов)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиОтчета", СтрокаДереваОтчетов.КлючСтрокиОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияОборотыСчета", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = ПараметрыФормыОборотыСчета(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ОткрытьФорму("Отчет.ОборотыСчета.Форма.ФормаОтчета",
		ПараметрыФормы, ЭтотОбъект, Истина, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОборотыСчета(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыОборотыСчета(ИдентификаторСтроки)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта());
	
	Если НастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаОборотыСчета(НастройкиОтчета);
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов);
	
	Возврат ЗаполнениеФинОтчетностиВБанки.ПараметрыФормыОтчета(ПараметрыОтчета);
	
КонецФункции

#КонецОбласти

#Область ВаловаяПрибыль

&НаКлиенте
Процедура ОткрытьОтчетВаловаяПрибыль(СтрокаДереваОтчетов)
	
	ПараметрыФормы = ПараметрыФормыВаловаяПрибыль(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ЗаполнениеФинОтчетностиВБанкиКлиентПереопределяемый.ОткрытьОтчетВаловаяПрибыль(ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВаловаяПрибыль(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВаловаяПрибыль(ИдентификаторСтроки)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта());
	
	Если НастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаВаловаяПрибыль(НастройкиОтчета);
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов);
	
	Возврат ЗаполнениеФинОтчетностиВБанки.ПараметрыФормыОтчета(ПараметрыОтчета);
	
КонецФункции

#КонецОбласти

#Область ВедомостьАмортизацииОС

&НаКлиенте
Процедура ОткрытьОтчетВедомостьАмортизацииОС(СтрокаДереваОтчетов)
	
	ПараметрыФормы = ПараметрыФормыВедомостьАмортизацииОС(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ЗаполнениеФинОтчетностиВБанкиКлиентПереопределяемый.ОткрытьОтчетВедомостьАмортизацииОС(ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВедомостьАмортизацииОС(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВедомостьАмортизацииОС(ИдентификаторСтроки)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта());
	
	Если НастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаВедомостьАмортизацииОС(НастройкиОтчета);
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов);
	
	Возврат ЗаполнениеФинОтчетностиВБанки.ПараметрыФормыОтчета(ПараметрыОтчета);
	
КонецФункции

#КонецОбласти

#Область РасшифровкаЗадолженности

&НаКлиенте
Процедура ОткрытьОтчетРасшифровкаЗадолженности(СтрокаДереваОтчетов)
	
	ПараметрыФормы = ПараметрыФормыРасшифровкаЗадолженности(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ЗаполнениеФинОтчетностиВБанкиКлиентПереопределяемый.ОткрытьОтчетРасшифровкаЗадолженности(ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияРасшифровкаЗадолженности(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыРасшифровкаЗадолженности(ИдентификаторСтроки)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НастройкиКомплекта = НастройкиКомплекта();
	
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаРасшифровкаЗадолженности(НастройкиОтчета);
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов);
	
	Возврат ЗаполнениеФинОтчетностиВБанки.ПараметрыФормыОтчета(ПараметрыОтчета);
	
КонецФункции

#КонецОбласти

#Область КассоваяКнига

&НаКлиенте
Процедура ОткрытьОтчетКассоваяКнига(СтрокаДереваОтчетов)
	
	ПараметрыФормы = ПараметрыФормыКассоваяКнига(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ЗаполнениеФинОтчетностиВБанкиКлиентПереопределяемый.ОткрытьОтчетКассоваяКнига(ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКассоваяКнига(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыКассоваяКнига(ИдентификаторСтроки)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта());
	
	Если НастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаКассоваяКнига(НастройкиОтчета);
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов);
	
	ПараметрыОтчета.СформироватьОбложку = Истина;
	
	Документы.ФинОтчетВБанк.ЗаполнитьПараметрыПоКлючу(
		Объект.ПараметрыОтчетов, ПараметрыОтчета, СтрокаДереваОтчетов.КлючСтрокиОтчета);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область КнигаУчетаДоходовПатент

&НаКлиенте
Процедура ОткрытьОтчетКнигаУчетаДоходовПатент(СтрокаДереваОтчетов)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиОтчета", СтрокаДереваОтчетов.КлючСтрокиОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияКнигаУчетаДоходовПатент", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = ПараметрыФормыКнигаУчетаДоходовПатент(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ОткрытьФорму("Отчет.КнигаУчетаДоходовПатент.Форма.ФормаОтчета",
		ПараметрыФормы, ЭтотОбъект, Истина, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКнигаУчетаДоходовПатент(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыКнигаУчетаДоходовПатент(ИдентификаторСтроки)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НастройкиКомплекта = НастройкиКомплекта();
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаКнигаУчетаДоходовПатент(НастройкиОтчета);
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов);
	Документы.ФинОтчетВБанк.ЗаполнитьПараметрыПоКлючу(
		Объект.ПараметрыОтчетов, ПараметрыОтчета, СтрокаДереваОтчетов.КлючСтрокиОтчета);
	
	ПараметрыОтчета = Отчеты.КнигаУчетаДоходовПатент.ЗаполнитьПараметрыОтчета(ПараметрыОтчета);
	Документы.ФинОтчетВБанк.ПроверитьУстановитьРасширение(
		ПараметрыОтчета, СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область КнигаУчетаДоходовИРасходов

&НаКлиенте
Процедура ОткрытьОтчетКнигаУчетаДоходовИРасходов(СтрокаДереваОтчетов)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиОтчета", СтрокаДереваОтчетов.КлючСтрокиОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияКнигаУчетаДоходовИРасходов",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = ПараметрыФормыКнигаУчетаДоходовИРасходов(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ОткрытьФорму("Отчет.КнигаУчетаДоходовИРасходов.Форма.ФормаОтчета",
		ПараметрыФормы, ЭтотОбъект, Истина, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКнигаУчетаДоходовИРасходов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыКнигаУчетаДоходовИРасходов(ИдентификаторСтроки)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НастройкиКомплекта = НастройкиКомплекта();
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчетаОсновные = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаКнигаУчетаДоходовИРасходов(НастройкиОтчета);
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчетаОсновные, СтрокаДереваОтчетов);
	
	ПараметрыОтчета = Отчеты.КнигаУчетаДоходовИРасходов.ЗаполнитьПараметрыОтчета(ПараметрыОтчетаОсновные);
	Документы.ФинОтчетВБанк.ПроверитьУстановитьРасширение(
		ПараметрыОтчета, СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область КнигаУчетаДоходовИРасходовПредпринимателя

&НаКлиенте
Процедура ОткрытьОтчетКнигаУчетаДоходовИРасходовПредпринимателя(СтрокаДереваОтчетов)
	
	ПараметрыФормы = ПараметрыФормыКнигаУчетаДоходовИРасходовПредпринимателя(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ЗаполнениеФинОтчетностиВБанкиКлиентПереопределяемый.ОткрытьОтчетКнигаУчетаДоходовИРасходовПредпринимателя(ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКнигаУчетаДоходовИРасходовПредпринимателя(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыКнигаУчетаДоходовИРасходовПредпринимателя(ИдентификаторСтроки)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НастройкиКомплекта = НастройкиКомплекта();
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаКнигаУчетаДоходовИРасходовПредпринимателя(
		НастройкиОтчета);
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов);
	
	Документы.ФинОтчетВБанк.ЗаполнитьПараметрыПоКлючу(
		Объект.ПараметрыОтчетов, ПараметрыОтчета, СтрокаДереваОтчетов.КлючСтрокиОтчета);
		
	ЗаполнениеФинОтчетностиВБанкиПереопределяемый.ЗаполнитьПараметрыОтчетаКнигаУчетаДоходовИРасходовПредпринимателя(ПараметрыОтчета);
		
	Документы.ФинОтчетВБанк.ПроверитьУстановитьРасширение(
		ПараметрыОтчета, СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПоказатьВопросДляАналогичныхОтчетов(СтрокаДереваОтчетов)
	
	ИдентификаторыАналогичныхОтчетов = ИдентификаторыАналогичныхОтчетовПоПериоду(
		ДеревоОтчетов.ПолучитьЭлементы(), СтрокаДереваОтчетов.ДатаНачала, СтрокаДереваОтчетов.ДатаОкончания);
	
	Если ИдентификаторыАналогичныхОтчетов.Количество() > 1 Тогда
		ДополнительныеПараметрыВопроса = Новый Структура;
		ДополнительныеПараметрыВопроса.Вставить("СтрокаДереваОтчетов", СтрокаДереваОтчетов);
		ДополнительныеПараметрыВопроса.Вставить("ИдентификаторыОтчетов", ИдентификаторыАналогичныхОтчетов);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УстановитьДанныеОтсутствуютОбработкаОтвета", ЭтотОбъект, ДополнительныеПараметрыВопроса);
		
		ПредставлениеПериода = ПредставлениеПериода(
			НачалоДня(СтрокаДереваОтчетов.ДатаНачала),
			КонецДня(СтрокаДереваОтчетов.ДатаОкончания),
			НСтр("ru = 'ФП=Истина';
				|en = 'FP=True'"));
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять флажок для всех отчетов
			|за %1?';
			|en = 'Clear the check box for all the reports
			|for %1?'"), ПредставлениеПериода);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиВГруппе(ИдентификаторыОтчетов)
	
	Для каждого ИдентификаторОтчета Из ИдентификаторыОтчетов Цикл
		
		СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторОтчета);
		
		Если Не СтрокаДереваОтчетов.ОбязательныйПункт ИЛИ Объект.ПроизвольныйПакет Тогда
		
			СтрокаДереваОтчетов.Выгружать = 0;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ДеревоОтчетов.Развернуть(Элементы.ДеревоОтчетов.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти


#Область ПрисоединенныеФайлы

&НаКлиенте
Процедура ОбработатьДействиеВыбратьФайл(СтрокаДереваОтчетов)

	// Составим список возможных вариантов для выбора.
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("ФайлСДиска",         НСтр("ru = 'Файл с диска...';
														|en = 'File from hard drive…'"));
	СписокВариантов.Добавить("ПрисоединенныйФайл", НСтр("ru = 'Присоединенный файл...';
														|en = 'Attachment...'"));
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьДействиеВыбратьФайл_ПослеВыбораВарианта", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВариантов); 

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеВыбратьФайл_ПослеВыбораВарианта(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);

	Если ВыбранныйЭлемент.Значение = "ПрисоединенныйФайл" Тогда
	
		ОткрытьДиалогВыбораПрисоединенногоФайла(СтрокаДереваОтчетов);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "ФайлСДиска" Тогда

		ОткрытьДиалогВыбораФайлаСДиска(СтрокаДереваОтчетов);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогВыбораФайлаСДиска(СтрокаДереваОтчетов = Неопределено)

	// Запишем документ, чтобы к нему можно было прикреплять файлы.
	Если Не ЗаписатьНовыйОбъект() Тогда	
		Возврат;
	КонецЕсли;

	Если СтрокаДереваОтчетов <> Неопределено Тогда
		ИдентификаторСтроки = СтрокаДереваОтчетов.ПолучитьИдентификатор();
		ЗаголовокДиалога    = ПолноеПредставлениеОтчета(СтрокаДереваОтчетов);
	Иначе
		ИдентификаторСтроки = -1; // Признак того, что необходимо добавить новую строку в дерево после выбора файла.
		ЗаголовокДиалога    = НСтр("ru = 'Выберите файл';
									|en = 'Select file'");
	КонецЕсли;

	ПараметрыВыбораФайла = ПараметрыВыбораФайла(ИдентификаторСтроки);

	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок  = ЗаголовокДиалога;
	ДиалогВыбора.Фильтр     = ПараметрыВыбораФайла.ФильтрДиалогаВыбора;
	ДиалогВыбора.Расширение = ПараметрыВыбораФайла.Расширение;

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаСДискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ПараметрыДобавления = Новый Структура();
	// Максимальный размер в настройках банка хранится в Кб, в БСП требуется передавать в Мб.
	ПараметрыДобавления.Вставить("МаксимальныйРазмер",  ПараметрыВыбораФайла.МаксимальныйРазмер / 1024);
	ПараметрыДобавления.Вставить("ФильтрДиалогаВыбора", ПараметрыВыбораФайла.ФильтрДиалогаВыбора);
	ПараметрыДобавления.Вставить("НеОткрыватьКарточку", Истина);

	РаботаСФайламиКлиент.ДобавитьФайл(ОписаниеОповещения,
		Объект.Ссылка,
		ЭтотОбъект,
		2, // Режим создания - с диска (из файловой системы клиента)
		ПараметрыДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаСДискаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		// Пользователь отказался от выбора.
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Результат.ФайлСсылка) Тогда
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ПоказатьПредупреждение(, Результат.ТекстОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИдентификаторСтроки = -1 Тогда
		// Добавляется новая строка.
		ИдентификаторСтроки = ДобавитьПроизвольныйОтчет();
		
		// Встанем на нее.
		Элементы.ДеревоОтчетов.ТекущаяСтрока = ИдентификаторСтроки;
	Иначе
		ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	
	ВыборФайлаСДискаЗавершениеНаСервере(ИдентификаторСтроки, Результат.ФайлСсылка);

КонецПроцедуры

&НаСервере
Процедура ВыборФайлаСДискаЗавершениеНаСервере(ИдентификаторСтроки, ФайлСсылка)

	СтрокаДереваОтчетов = ПолучитьСтрокуДереваОтчетов(ИдентификаторСтроки);
	
	// Пометим на удаление старые присоединенные файлы.
	ОчиститьДанныеСтрокиДерева(СтрокаДереваОтчетов, Ложь);
	
	СтрокаДереваОтчетов.ФайлОтчета               = ФайлСсылка;
	СтрокаДереваОтчетов.ФайлОтчетаXML            = Неопределено;
	СтрокаДереваОтчетов.Доверенность             = Неопределено;
	ЗаполнитьЗначенияСвойств(СтрокаДереваОтчетов, НаборПризнаковМодифицированности()); // очищаем признаки
	СтрокаДереваОтчетов.ЗагруженоИзВнешнегоФайла = Истина;
	СтрокаДереваОтчетов.ОтчетЗаполнен            = ОтчетЗаполнен(СтрокаДереваОтчетов);
	СтрокаДереваОтчетов.ФайлОтчетаСодержитЭП     = ЗаполнениеФинОтчетностиВБанки.ЕстьПодписьВнутриАрхива(ФайлСсылка);
	
	// Заполним вспомогательные колонки дерева на форме, чтобы представление строки отчета сформировать.
	СтрокиДерева = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаДереваОтчетов);
	ЗаполнитьНаименованияФайловОтчетов(СтрокиДерева);
	
	ОписаниеВидовОтчетов = ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов();
	СформироватьПредставлениеОтчета(СтрокаДереваОтчетов, НастройкиКомплекта(), ОписаниеВидовОтчетов);
	
	// Запоминаем, что были изменения на форме.
	ДеревоОтчетовИзменено = Истина;
	Модифицированность   = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлНаПросмотр(СтрокаДереваОтчетов)

	Если НЕ ЗначениеЗаполнено(СтрокаДереваОтчетов.ФайлОтчета) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
	
	ДанныеФайла = ДанныеФайла(СтрокаДереваОтчетов.ФайлОтчета, ПараметрыДанныхФайла);
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФайла(ПрисоединенныйФайл, ПараметрыДанныхФайла)

	Возврат РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ПараметрыДанныхФайла);

КонецФункции

&НаКлиенте
Процедура ОткрытьДиалогВыбораПрисоединенногоФайла(СтрокаДереваОтчетов = Неопределено)
	
	// Запишем документ, чтобы к нему можно было прикреплять файлы.
	Если Не ЗаписатьНовыйОбъект() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДиалогаВыбора = УниверсальныйОбменСБанкамиФормыКлиентСервер.ПараметрыДиалогаВыбораФайла();
	ПараметрыДиалогаВыбора.МножественныйВыбор = Истина;
	
	// Признак того, что необходимо добавить новую строку в дерево после выбора файла.
	ИдентификаторСтроки = -1;
		
	Если СтрокаДереваОтчетов <> Неопределено Тогда
		
		ИдентификаторСтроки = СтрокаДереваОтчетов.ПолучитьИдентификатор();
		ПараметрыДиалогаВыбора.Заголовок = ПолноеПредставлениеОтчета(СтрокаДереваОтчетов);
		
	КонецЕсли;

	ПараметрыВыбораФайла = ПараметрыВыбораФайла(ИдентификаторСтроки);
	ПараметрыДиалогаВыбора.МаксимальныйРазмер = ПараметрыВыбораФайла.МаксимальныйРазмер;
	ПараметрыДиалогаВыбора.ФильтрДиалогаВыбора = ПараметрыВыбораФайла.ФильтрДиалогаВыбора;

	ДополнительныеПараметры = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	ОповещениеОВыборе = Новый ОписаниеОповещения("ВыборПрисоединенногоФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ВыборПрисоединенногоФайла", ПараметрыВыбораФайла, ЭтотОбъект, ,,, ОповещениеОВыборе);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПрисоединенногоФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		// Пользователь отказался от выбора.
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		ВыбранныеФайлы = Результат;
	Иначе
		ВыбранныеФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИдентификаторСтроки = -1 Тогда
		// Добавляется новая строка.
		ИдентификаторСтроки = ДобавитьПроизвольныйОтчет();
		
		// Встанем на нее.
		Элементы.ДеревоОтчетов.ТекущаяСтрока = ИдентификаторСтроки;
		
		ЭтоДобавленнаяСтрока = Истина;
	Иначе
		ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		ЭтоДобавленнаяСтрока = Ложь;
	КонецЕсли;
	
	ИдентификаторыИзмененныхСтрок = ОбработатьВыборПрисоединенныхФайлов(ИдентификаторСтроки, ВыбранныеФайлы, ЭтоДобавленнаяСтрока);
	
	// Раскроем измененные строки.
	Для каждого ИдентификаторИзмененнойСтроки Из ИдентификаторыИзмененныхСтрок Цикл
		Элементы.ДеревоОтчетов.Развернуть(ИдентификаторИзмененнойСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыборПрисоединенныхФайлов(ИдентификаторСтроки, ВыбранныеФайлы, ЭтоДобавленнаяСтрока)

	// Если выбран один файл, то заменяем ссылку на него в переданной строке отчета.
	// Если выбрано несколько файлов, то создаем группу однотипных файлов.
	//
	// Причем если текущий отчеов уже является такип однотипным отчетов, то добавляем новые файлы как его "братьев".
	// Иначе создаем из текущей строки группу.
	ИсходнаяСтрокаДерева = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ИзмененныеСтрокиДерева    = Новый Массив; // Строки дерева, которые были изменены и для них требуется обновить представление.
	НезаполненныеСтрокиДерева = Новый Массив; // Строки дерева, которые находятся на том же уровне, что и текущая строка и их можно заполнить выбранными файлами.
	
	РодительскаяСтрока  = ИсходнаяСтрокаДерева.ПолучитьРодителя();

	Если ЭтоДобавленнаяСтрока Тогда
		// Строка была только что добавлена, несколько присоединенных файлов будут добавлены в соседние строки.
	    НезаполненныеСтрокиДерева.Добавить(ИсходнаяСтрокаДерева);

	ИначеЕсли ЭтоГруппаОднотипныхОтчетов(ИсходнаяСтрокаДерева, РодительскаяСтрока) Тогда
		НезаполненныеСтрокиДерева.Добавить(ИсходнаяСтрокаДерева);
		// Найдем пустых соседей текущей строки.
		Для каждого ДочерняяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
			Если НЕ ЗначениеЗаполнено(ДочерняяСтрока.ФайлОтчета) Тогда
				НезаполненныеСтрокиДерева.Добавить(ДочерняяСтрока);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Настройки родительской строки отличаются от настроек текущей, поэтому надо создать еще одну группу.
		РодительскаяСтрока = ИсходнаяСтрокаДерева;
	КонецЕсли;
	
	// Если ранее в строке уже были выбраны файлы, то пометим их на удаление, если они принадлежат текущему пакет отчетности.
	Если ВыбранныеФайлы.Количество() > 1 И НЕ ЭтоДобавленнаяСтрока Тогда
		ОчиститьДанныеСтрокиДерева(ИсходнаяСтрокаДерева, Ложь);
		ИсходнаяСтрокаДерева.КлючСтрокиОтчета  = 0; // Т.к. ранее существовавшая строка отчета становится группой, то очистим у нее ключ строки.
		
		ИзмененныеСтрокиДерева.Добавить(ИсходнаяСтрокаДерева);
		
		// Т.к. текущая строка станет группой, то ее нельзя больше использовать.
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НезаполненныеСтрокиДерева, ИсходнаяСтрокаДерева);
	КонецЕсли;
	
	// Запоминаем выбранные файлы.
	Для каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
	
		Если ВыбранныеФайлы.Количество() > 1 Тогда
			
			Если НезаполненныеСтрокиДерева.Количество() > 0 Тогда
				// Берем очередную незаполненную строку, пока они не закончатся.
				НоваяСтрокаДерева = НезаполненныеСтрокиДерева[0];
				НезаполненныеСтрокиДерева.Удалить(0);
			Иначе
				НоваяСтрокаДерева = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, ИсходнаяСтрокаДерева);

			// Назначаем ключ строки новому отчету.
			МаксКлючСтрокиОтчета               = МаксКлючСтрокиОтчета + 1;
			НоваяСтрокаДерева.КлючСтрокиОтчета = МаксКлючСтрокиОтчета;
		Иначе
			// Меняем непосредственно в текущей строке дерева.
			НоваяСтрокаДерева = ИсходнаяСтрокаДерева;
		КонецЕсли;
		
		НоваяСтрокаДерева.ДанныеОтсутствуют        = Ложь;
		НоваяСтрокаДерева.ФайлОтчета               = ВыбранныйФайл;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, НаборПризнаковМодифицированности()); // очищаем признаки
		НоваяСтрокаДерева.ЗагруженоИзВнешнегоФайла = Истина;
		НоваяСтрокаДерева.ОтчетЗаполнен            = ОтчетЗаполнен(НоваяСтрокаДерева);
		НоваяСтрокаДерева.ФайлОтчетаСодержитЭП     = ЗаполнениеФинОтчетностиВБанки.ЕстьПодписьВнутриАрхива(ВыбранныйФайл);
		
		Если ИзмененныеСтрокиДерева.Найти(НоваяСтрокаДерева) = Неопределено Тогда
			ИзмененныеСтрокиДерева.Добавить(НоваяСтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
	// Переформируем представления для отчетов.
	НастройкиКомплекта   = НастройкиКомплекта();
	ОписаниеВидовОтчетов = ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов();
	
	ЗаполнитьНаименованияФайловОтчетов(ИзмененныеСтрокиДерева);
	
	ПроверитьНаличиеПодписей(ИзмененныеСтрокиДерева);
	
	ИдентификаторыИзмененныхСтрок = Новый Массив;
	
	Для каждого ИзмененнаяСтрокаДерева Из ИзмененныеСтрокиДерева Цикл
		СформироватьПредставлениеОтчета(ИзмененнаяСтрокаДерева, НастройкиКомплекта, ОписаниеВидовОтчетов);
		ИдентификаторыИзмененныхСтрок.Добавить(ИзмененнаяСтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
	// Запоминаем, что были изменения на форме.
	ДеревоОтчетовИзменено = Истина;
	Модифицированность   = Истина;

	Возврат ИдентификаторыИзмененныхСтрок;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияИзменениеПрисоединенногоФайла(ИзмененныйФайл)

	// Найдем, есть ли строка с таким присоединенным файлов в дереве отчетов.
	СтрокиДерева = Новый Массив;
	ЗаполнитьПодчиненныеСтрокиИзДереваРекурсивно(СтрокиДерева, ДеревоОтчетов.ПолучитьЭлементы());
	
	НайденнаяСтрока = Неопределено;
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ФайлОтчета = ИзмененныйФайл ИЛИ СтрокаДерева.ФайлОтчетаXML = ИзмененныйФайл Тогда
			НайденнаяСтрока = СтрокаДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обновляем строку дерева.
	ИзмененныеСтроки = Новый Массив;
	ИзмененныеСтроки.Добавить(НайденнаяСтрока);
	
	ПроверитьУстановитьРучнаяКорректировкаОтчета(НайденнаяСтрока);
	
	ЗаполнитьНаименованияФайловОтчетов(ИзмененныеСтроки);
	ПроверитьНаличиеПодписей(ИзмененныеСтроки);
	
	СформироватьПредставлениеОтчета(НайденнаяСтрока, НастройкиКомплекта(), ЗаполнениеФинОтчетностиВБанки.ОписаниеВидовОтчетов());

КонецПроцедуры

&НаСервереБезКонтекста
Функция АктуальнаяВерсияДанныхОтчета(ОтчетСсылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетСсылка, "ВерсияДанных", Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИндексКартинкиПусто() 
	
	Возврат 1;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИндексКартинкиКорректировка() 
	
	Возврат 0;
	
КонецФункции

#КонецОбласти

#Область Подпись

&НаКлиенте
Процедура ОбработатьДействиеСПодписью(СтрокаДереваОтчетов)

	// Составим список возможных вариантов для выбора.
	СписокВариантов = Новый СписокЗначений;
	Если СтрокаДереваОтчетов.ДействиеПодписать = ДействиеПодписано() Тогда

		ОписаниеВарианта = ВариантПросмотраПодписи(СтрокаДереваОтчетов.ПолучитьИдентификатор());
		Если ОписаниеВарианта.Вариант = "ОтчетБРО" Тогда
			
			ПоказатьЗначение(, ОписаниеВарианта.Ссылка);
			
		ИначеЕсли ОписаниеВарианта.Вариант = "Архив" Тогда
			
			РаботаСФайламиКлиент.ОткрытьФайл(ОписаниеВарианта.Данные, Ложь);

		ИначеЕсли ОписаниеВарианта.Вариант = "Файл" Тогда
			
			Если ОписаниеВарианта.Подписи.Количество() = 0 Тогда
				ПоказатьПредупреждение( , НСтр("ru = 'Отчет не подписан';
												|en = 'The report is not signed'"));
			ИначеЕсли ОписаниеВарианта.Подписи.Количество() = 1 Тогда
				ЭлектроннаяПодписьКлиент.ОткрытьПодпись(ОписаниеВарианта.Подписи[0]);
			Иначе
				
				СписокВариантов = Новый СписокЗначений;
				Для каждого Подпись Из ОписаниеВарианта.Подписи Цикл
					СписокВариантов.Добавить(Подпись, Подпись.КомуВыданСертификат);
				КонецЦикла;
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДействиеСВыбраннойПодписью", ЭтотОбъект);
				ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВариантов);
				
			КонецЕсли;
			
		КонецЕсли;

	Иначе

		// Отображаем форму для подписания текущей строки.
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДействиеПослеПодписания", "");
		ДополнительныеПараметры.Вставить("КлючСтрокиОтчета", СтрокаДереваОтчетов.КлючСтрокиОтчета);
		
		ВыполнитьМассовуюОперацию("Подписать", ДополнительныеПараметры);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВариантПросмотраПодписи(ИдентификаторСтроки)
	
	ОписаниеВарианта = Новый Структура("Вариант");
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(СтрокаДереваОтчетов.ОтчетСсылка)
	   И СтрокаДереваОтчетов.СданЧерез1СОтчетность Тогда
		// Подпись внутри регламентированного отчета. Открываем средствами БРО.
		ОписаниеВарианта.Вариант = "ОтчетБРО";
		
		ОписаниеВарианта.Вставить("Ссылка", СтрокаДереваОтчетов.ОтчетСсылка);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаДереваОтчетов.ФайлОтчета)
	   И СтрокаДереваОтчетов.ФайлОтчетаСодержитЭП Тогда
		// Подписи внутри архива. Открываем средствами операционной системы.
		ОписаниеВарианта.Вариант = "Архив";
		
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
		ОписаниеВарианта.Вставить("Данные", РаботаСФайлами.ДанныеФайла(СтрокаДереваОтчетов.ФайлОтчета, ПараметрыДанныхФайла));
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаДереваОтчетов.ФайлОтчета)
	   И СтрокаДереваОтчетов.ПодписанЭП Тогда
		// Подпись присоединенного файла. Открываем средствами БСП.
		ОписаниеВарианта.Вариант = "Файл";
		
		Подписи = ЭлектроннаяПодпись.УстановленныеПодписи(СтрокаДереваОтчетов.ФайлОтчета);
		ИндексПодписи = 0;
		КоличествоПодписей = Подписи.Количество();
		Пока ИндексПодписи < КоличествоПодписей Цикл
			
			ТекущаяПодпись = Подписи[ИндексПодписи];
			Если ТекущаяПодпись.ПодписьВерна Тогда
				
				ТекущаяПодпись.Вставить("АдресПодписи",
					ПоместитьВоВременноеХранилище(ТекущаяПодпись.Подпись, УникальныйИдентификатор));
				ТекущаяПодпись.Удалить("Подпись");
				ТекущаяПодпись.Вставить("АдресСертификата",
					ПоместитьВоВременноеХранилище(ТекущаяПодпись.Сертификат.Получить(), УникальныйИдентификатор));
				ТекущаяПодпись.Удалить("Сертификат");
				ТекущаяПодпись.Вставить("Статус", НСтр("ru = 'Верна';
														|en = 'Valid'"));
				ИндексПодписи = ИндексПодписи + 1;
				
			Иначе
				
				Подписи.Удалить(ИндексПодписи);
				КоличествоПодписей = КоличествоПодписей - 1;
				
			КонецЕсли;
		КонецЦикла;
		ОписаниеВарианта.Вставить("Подписи", Подписи);	
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Отчет не подписан';
								|en = 'The report is not signed'");
	КонецЕсли;
		
	Возврат ОписаниеВарианта;		
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДействиеСВыбраннойПодписью(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭлектроннаяПодписьКлиент.ОткрытьПодпись(ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Подписание

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Результат, ПараметрыПроверки) Экспорт
	
	ЗакрытьФормуДлительнойОперации();

	ОписаниеРезультата = РезультатФоновогоЗадания(Результат, Ложь);
	Если ОписаниеРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение( , НСтр("ru = 'Отчетность готова к отправке';
									|en = 'Reporting is ready for submission'"), , НСтр("ru = 'Успешно';
																					|en = 'Done'"));
	
КонецПроцедуры

// Подписываем файлы пакета, прикрепляя подписи к присоединяемым файлам или в табличную часть отчета.
//
// Параметры:
//  ДополнительныеПараметры - Структура - в рамках какого действия вызывается подписание:
//           * ДействиеПослеПодписания - Строка - что сделать с пакетом после подписания
//             ** "" = никаких действий;
//             ** "Отправить" = послать в банк.
//           * КлючСтрокиОтчета - Число, Неопределено - подписать только файл из строки с данным ключом.
//
&НаКлиенте
Процедура ПодписатьФинОтчет(ДополнительныеПараметры)

	// Сначала инициализируем механизмы криптоопераций (подписания и шифрования).
	// Если будет выбран облачный ключ, то мы все сделаем в одном фоновом задании.
	// Если ключ будет локальным, то в фоновом задании подготовим данные, вернёмся на клиент и снова уйдем в фоновое
	// задание для подписания (и, возможно, отправки).
	
	// Параметры, зависящие от организации пакета.
	ПараметрыПодписания = ПараметрыПодписания();
	ПараметрыПодписания.ДействиеПослеПодписания = ДополнительныеПараметры.ДействиеПослеПодписания;
	Если ЗначениеЗаполнено(ДополнительныеПараметры.КлючСтрокиОтчета) Тогда
		ПараметрыПодписания.ОтборПоКлючамСтрок.Добавить(ДополнительныеПараметры.КлючСтрокиОтчета);
	КонецЕсли;
	
	// Параметры, зависящие от текущего субъекта.
	ПараметрыОтбора = ПараметрыОтбораКриптографии(ПараметрыПодписания);
	Если Не ЗначениеЗаполнено(ПараметрыОтбора.Организация) Тогда
		ФинОтчетностьВБанкиКлиент.ПоказатьОшибку(НСтр("ru = 'Субъект, подписывающий отчетность, не определен';
														|en = 'Subject for signing the reporting is not defined'"), ЭтотОбъект);
		Возврат;
	КонецЕсли;

	// Параметры, используемые при выборе доверенности и сертификата.
	ДополнительныеПараметрыКриптографии = УниверсальныйОбменСБанкамиКлиентСервер.НовыеДополнительныеПараметрыКриптографии();
	ДополнительныеПараметрыКриптографии.Сервис          = ПараметрыОтбора.Сервис;
	ДополнительныеПараметрыКриптографии.Организация     = ПараметрыОтбора.Организация;
	ДополнительныеПараметрыКриптографии.Доверенность    = ПараметрыПодписания.Доверенность;
	ДополнительныеПараметрыКриптографии.ОтпечатокСертификата = ПараметрыПодписания.ОтпечатокСертификата;
	ДополнительныеПараметрыКриптографии.ПараметрыОтбора = ПараметрыОтбора;
	ДополнительныеПараметрыКриптографии.Заголовок       = СтрШаблон(НСтр("ru = 'Сертификат для %1';
																		|en = 'Certificate for %1'"), ПараметрыОтбора.ПредставлениеОтбора);
	ДополнительныеПараметрыКриптографии.ДобавитьМеткуДоверенногоВремени = ПараметрыПодписания.ДобавитьМеткуДоверенногоВремени;
	
	Если ПараметрыПодписания.ПроверкаСертификата.Сертификат Тогда
		Если ПараметрыПодписания.ПроверкаСертификата.МЧДB2G Или ПараметрыПодписания.ПроверкаСертификата.МЧДB2B Тогда
			
			ДополнительныеПараметрыКриптографии.КлючНазначенияИспользования = "СертификатСДоверенностью";
			ДополнительныеПараметрыКриптографии.РазрешенныеВидыМЧД.РазрешеныМЧДB2G = ПараметрыПодписания.ПроверкаСертификата.МЧДB2G;
			ДополнительныеПараметрыКриптографии.РазрешенныеВидыМЧД.РазрешеныМЧДB2B = ПараметрыПодписания.ПроверкаСертификата.МЧДB2B;
			
		Иначе
			ДополнительныеПараметрыКриптографии.КлючНазначенияИспользования = "СертификатБезДоверенности";
		КонецЕсли;
	Иначе
		ДополнительныеПараметрыКриптографии.КлючНазначенияИспользования = "БезОтборов";
	КонецЕсли;
	
	ОповещениеОВыбореСертификата = Новый ОписаниеОповещения("ПодписатьФинОтчетВыборСертификата", ЭтотОбъект, ПараметрыПодписания);
	УниверсальныйОбменСБанкамиКлиент.ПараметрыКриптографии(ОповещениеОВыбореСертификата, ДополнительныеПараметрыКриптографии);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФинОтчетВыборСертификата(РезультатПолученияПараметров, ПараметрыПодписания) Экспорт
	
	Если РезультатПолученияПараметров.ОтмененоПользователем Или Не РезультатПолученияПараметров.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписания.ОтпечатокСертификата = РезультатПолученияПараметров.ОтпечатокСертификата;
	Если ЗначениеЗаполнено(РезультатПолученияПараметров.ОтпечатокСертификата) Тогда
		// кеширование на время работы с документом
		ПоследнийИспользованныйСертификат = РезультатПолученияПараметров.ОтпечатокСертификата;
	КонецЕсли;
	ПараметрыПодписания.Доверенность                    = РезультатПолученияПараметров.Доверенность;
	ПараметрыПодписания.ДобавитьМеткуДоверенногоВремени = РезультатПолученияПараметров.ДобавитьМеткуДоверенногоВремени;
	
	Если РезультатПолученияПараметров.ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда // подписываем в фоновом задании на сервере
		
		ОповещениеОСертификате = Новый ОписаниеОповещения("ПодписатьФинОтчетИнициализацияКриптографии", ЭтотОбъект, ПараметрыПодписания);
		УниверсальныйОбменСБанкамиКлиент.ИнициализироватьСервисКриптографии(
			ПараметрыПодписания.ОтпечатокСертификата, ОповещениеОСертификате);
		
	Иначе // подписываем файлы на клиенте

  		ОповещениеОСертификате = Новый ОписаниеОповещения("ПодписатьФинОтчетПоискСертификата", ЭтотОбъект, ПараметрыПодписания);
		УниверсальныйОбменСБанкамиКлиент.НайтиСертификатПоОтпечатку(
			ОповещениеОСертификате, ПараметрыПодписания.ОтпечатокСертификата);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФинОтчетПоискСертификата(Результат, ПараметрыПодписания) Экспорт
	
	Если Не Результат.СертификатНайден Тогда
		
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки, , НСтр("ru = 'Ошибка сертификата в подписи';
																	|en = 'Certificate error in the signature'"));
		Возврат;
		
	КонецЕсли;
	
	// Сертификат нужен при сохранении электронных подписей к присоединенным файлам.
	ОповещениеОВыгрузке = Новый ОписаниеОповещения("ПодписатьФинОтчетВыгрузкаСертификата", ЭтотОбъект, ПараметрыПодписания);
	Результат.Сертификат.НачатьВыгрузку(ОповещениеОВыгрузке);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФинОтчетВыгрузкаСертификата(ВыгруженныеДанные, ПараметрыПодписания) Экспорт
	
	ПараметрыПодписания.Вставить("Сертификат", ВыгруженныеДанные);
	
	// По-одиночке подписываем файлы на клиенте.
	ДлительнаяОперация = НачатьПодготовкуФайловДляПодписи(УникальныйИдентификатор, ПараметрыПодписания);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьФинОтчетЗавершитьПодготовку", ЭтотОбъект, ПараметрыПодписания);

	// Подписание состоит из нескольких фоновых и клиентских процедур, поэтому показываем по нему общее окно ожидания.
	// Поэтому и время текущей операции в общем времени выполнения тоже будет различно.
	Если ПараметрыПодписания.ДействиеПослеПодписания = "Отправить" Тогда
		НачальныйПроцент = 0;
		КонечныйПроцент  = 20;
	Иначе
		НачальныйПроцент = 0;
		КонечныйПроцент  = 60;
	КонецЕсли;
	
	ОжидатьЗавершениеСПрогрессомВыполнения(
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		НСтр("ru = 'Выгрузка отчетов';
			|en = 'Export reports'"),
		НачальныйПроцент,
		КонечныйПроцент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФинОтчетИнициализацияКриптографии(Результат, ПараметрыПодписания) Экспорт
	
	Если Не Результат.Выполнено Тогда
		
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки, , НСтр("ru = 'Инициализация криптографии';
																	|en = 'Cryptography initialization'"));
		Возврат;
		
	КонецЕсли;
	
	ДлительнаяОперация = НачатьПодписаниеНаСервере(УникальныйИдентификатор, ПараметрыПодписания);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьФинОтчетЗавершение", ЭтотОбъект, ПараметрыПодписания);
	
	ОжидатьЗавершениеСПрогрессомВыполнения(
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		НСтр("ru = 'Подписание отчетов';
			|en = 'Sign reports'"),
		0,
		100);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФинОтчетЗавершитьПодготовку(Результат, ПараметрыПодписания) Экспорт
	
	РезультатПодготовки = РезультатФоновогоЗадания(Результат, Истина);
	Если РезультатПодготовки = Неопределено
	 Или РезультатПодготовки.ОтчетностьПоКлючамСтрок.Количество() = 0 Тогда
	 	ЗакрытьФормуДлительнойОперации();
		Возврат;
	КонецЕсли;
	
	// При отправке пакета будет три этапа:
	// 1) извлекаем файлы из информационной базы и сохраняем их в буферном регистре;
	// 2) те отчеты, которые ещё не были подписаны, подписываются и сохраняются как в документ, так и в буфер;
	// Если файлы-отчеты являются zip-архивами, то они требуют отдельного этапа, когда файлы извлекаются из архива
	// отдельно подписываются и заново пакутся в архив вместе с файлами-подписями.
	// 3) файлы шифруются и отправляются.
	// Если для подписания используется облачный ключ, то все этапы будут внутри одного фонового задания. Если клиентский,
	// то один этап - одно фоновое задание.
	// Решаем, нужен ли этап 2, который сформирует подписи для помещения внутрь архивов и присоединения к файлам.
	ИдентификаторВременногоХранилища = ?(ПараметрыПодписания.ДействиеПослеПодписания = "Отправить",
		ИдентификаторПодписанияАрхивов(РезультатПодготовки.АдресРезультата), "");
	
	Если ЗначениеЗаполнено(ИдентификаторВременногоХранилища) Тогда
		
		Если ПараметрыПодписания.Свойство("АдресРезультатаПодготовки") Тогда // предварительная транзакция уже вызывалась ранее
			ВызватьИсключение НСтр("ru = 'Повторный вызов предварительной транзакции';
									|en = 'Repeated call of preliminary transaction'");
		КонецЕсли;
		ТребуетсяПодписаниеАрхивов = Истина;

	Иначе
		
		ТребуетсяПодписаниеАрхивов = Ложь;
		ИдентификаторВременногоХранилища = ПараметрыПодписания.Идентификатор;
		
	КонецЕсли;
	ПараметрыПодписания.Вставить("АдресРезультатаПодготовки", РезультатПодготовки.АдресРезультата);		
	
	ОповещениеОПодписании = Новый ОписаниеОповещения(
		?(ТребуетсяПодписаниеАрхивов, "ПодписатьАрхивыНаКлиенте", "ПодписатьФинОтчетНаКлиенте"),
		ЭтотОбъект, ПараметрыПодписания);
		
	Если ПараметрыПодписания.ДействиеПослеПодписания = "Отправить" Тогда
		Если ТребуетсяПодписаниеАрхивов Тогда
			НачальныйПроцент = 20;
			КонечныйПроцент  = 30;
		Иначе
			НачальныйПроцент = 40;
			КонечныйПроцент  = 50;
		КонецЕсли;
	Иначе
		НачальныйПроцент = 60;
		КонечныйПроцент  = 80;
	КонецЕсли;
	
	ПараметрыТранзакции = УниверсальныйОбменСБанкамиКлиент.ПараметрыПодготовкиТранзакции();
	ПараметрыТранзакции.Сервис                           = ПараметрыПодписания.Сервис;
	ПараметрыТранзакции.Предмет                          = ПараметрыПодписания.Предмет;
	ПараметрыТранзакции.Форма                            = ЭтотОбъект;
	ПараметрыТранзакции.Организация                      = ПараметрыПодписания.Организация;
	ПараметрыТранзакции.СертификатПодписи                = ПараметрыПодписания.ОтпечатокСертификата;
	ПараметрыТранзакции.ИдентификаторВременногоХранилища = ИдентификаторВременногоХранилища;
	ПараметрыТранзакции.ОповещениеОПрогрессеВыполнения   = НовоеОповещениеОПрогрессе(НачальныйПроцент, КонечныйПроцент);
	ПараметрыТранзакции.ДобавитьМеткуДоверенногоВремени  = ПараметрыПодписания.ДобавитьМеткуДоверенногоВремени;
	
	УниверсальныйОбменСБанкамиКлиент.ПодготовитьТранзакцию(ОповещениеОПодписании, ПараметрыТранзакции);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторПодписанияАрхивов(Знач АдресРезультата)
	Перем ИдентификаторПодписания;
	
	РезультатПодготовки = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(РезультатПодготовки) = Тип("Структура") Тогда
		РезультатПодготовки.Свойство("ИдентификаторПодписанияАрхивов", ИдентификаторПодписания);
	КонецЕсли;
	Возврат ИдентификаторПодписания;
			
КонецФункции

&НаКлиенте
Процедура ПодписатьАрхивыНаКлиенте(Результат, ПараметрыПодписания) Экспорт

	Если Результат.Выполнено И Не Результат.ПользовательОтменилПодготовкуТранзакции Тогда
		// Подписали на клиенте файлы, которые будут сгруппированы в архивы.
		ДлительнаяОперация = НачатьПодготовкуФайловДляПодписи(УникальныйИдентификатор, ПараметрыПодписания);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьФинОтчетЗавершитьПодготовку", ЭтотОбъект, ПараметрыПодписания);
		
		// Сюда можем зайти только в случае, если подписание происходит одновременно с отправкой.
		НачальныйПроцент = 30;
		КонечныйПроцент  = 40;
		
		ОжидатьЗавершениеСПрогрессомВыполнения(
			ДлительнаяОперация,
			ОповещениеОЗавершении,
			НСтр("ru = 'Выгрузка отчетов';
				|en = 'Export reports'"),
			НачальныйПроцент,
			КонечныйПроцент);
		
	Иначе
		
		ЗакрытьФормуДлительнойОперации();
	
		Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			ПоказатьПредупреждение(, Результат.ОписаниеОшибки, , НСтр("ru = 'Ошибка подписания';
																		|en = 'Signing error'"));
		КонецЕсли;
		
		УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(ПараметрыПодписания.Идентификатор);
		ИдентификаторВременногоХранилища = ИдентификаторПодписанияАрхивов(ПараметрыПодписания.АдресРезультатаПодготовки);
		УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(ИдентификаторВременногоХранилища);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФинОтчетНаКлиенте(Результат, ПараметрыПодписания) Экспорт

	Если Результат.Выполнено И Не Результат.ПользовательОтменилПодготовкуТранзакции Тогда
		
		Если ПараметрыПодписания.ДействиеПослеПодписания = "Отправить" Тогда
			ДлительнаяОперация = НачатьОтправкуВБанк(УникальныйИдентификатор, ПараметрыПодписания);
			НачальныйПроцент = 50;
			КонечныйПроцент  = 100;
		Иначе
			ДлительнаяОперация = НачатьПрикреплениеПодписей(УникальныйИдентификатор, ПараметрыПодписания);
			НачальныйПроцент = 80;
			КонечныйПроцент  = 100;
		КонецЕсли;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьФинОтчетЗавершение", ЭтотОбъект, ПараметрыПодписания);
		
		// Для оптимизации потребления памяти.
		ПараметрыПодписания.Сертификат = Неопределено;
		
		ОжидатьЗавершениеСПрогрессомВыполнения(
			ДлительнаяОперация,
			ОповещениеОЗавершении,
			НСтр("ru = 'Сохранение подписей';
				|en = 'Save signatures'"),
			НачальныйПроцент,
			КонечныйПроцент);
		
	Иначе
	
		ЗакрытьФормуДлительнойОперации();
		
		Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			ПоказатьПредупреждение(, Результат.ОписаниеОшибки, , НСтр("ru = 'Ошибка подписания';
																		|en = 'Signing error'"));
		КонецЕсли;
		
		УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(ПараметрыПодписания.Идентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьПодготовкуФайловДляПодписи(Знач УникальныйИдентификатор, Знач ПараметрыПодписания)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Если ПараметрыПодписания.Свойство("АдресРезультатаПодготовки") Тогда
		// Завершилась предварительная транзакция, когда подписывались файлы для помещения внутрь архивов.
		// Она следовала за фоновым задание по проверке готовности к отправке, поэтому ждать сейчас не нужно.
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		ПараметрыПодписания.Вставить("РезультатПодготовки",
			ПолучитьИзВременногоХранилища(ПараметрыПодписания.АдресРезультатаПодготовки));
		ПараметрыПодписания.Удалить("АдресРезультатаПодготовки");
		
	Иначе
		// На случай, если ранее было некорректно очищено.
		УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(ПараметрыПодписания.Идентификатор);
		
	КонецЕсли;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = ?(ПараметрыПодписания.ДействиеПослеПодписания = "Отправить",
		НСтр("ru = 'Проверка готовности пакета к отправке';
			|en = 'Checking if the batch is ready for sending'"), НСтр("ru = 'Подготовка подписываемых отчетов';
																	|en = 'Prepare signed reports'"));
		
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ФинОтчетВБанк.ПодготовитьПодписываемыеОтчетыВФоне",
		ПараметрыПодписания,
		ПараметрыВыполнения);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервереБезКонтекста
Функция НачатьПрикреплениеПодписей(Знач УникальныйИдентификатор, Знач ПараметрыПодписания)
	
	РезультатВыгрузки = ПолучитьИзВременногоХранилища(ПараметрыПодписания.АдресРезультатаПодготовки);
	ПараметрыПодписания.ОтборПоКлючамСтрок = РезультатВыгрузки.ОтчетностьПоКлючамСтрок;
	ПараметрыПодписания.ОтборПоКлючамСтрок.Индексы.Добавить("КлючСтрокиОтчета");
	ПараметрыПодписания.Вставить("ИменаАрхивовПоКлючамСтрок", РезультатВыгрузки.ИменаАрхивовПоКлючамСтрок);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подписание файлов пакета';
															|en = 'Sign batch files'");
		
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ФинОтчетВБанк.ПрикрепитьПодписиВФоне",
		ПараметрыПодписания,
		ПараметрыВыполнения);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервере
Функция НачатьПодписаниеНаСервере(Знач УникальныйИдентификатор, Знач ПараметрыПодписания)
	
	// Если ранее было некорректно очищено.
	УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(ПараметрыПодписания.Идентификатор);
	
	ПараметрыПодписания.Вставить("Маркеры", УниверсальныйОбменСБанками.МаркерыБезопасностиСервисаКриптографии());
	
	Если ПараметрыПодписания.ДействиеПослеПодписания = "Отправить" Тогда
		НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка пакета';
											|en = 'Sending package'");
		ИмяПроцедуры = "Документы.ФинОтчетВБанк.ПодписатьИОтправитьВБанкВФоне";
	Иначе
		НаименованиеФоновогоЗадания = НСтр("ru = 'Подписание файлов пакета';
											|en = 'Sign batch files'");
		ИмяПроцедуры = "Документы.ФинОтчетВБанк.ПодписатьОтчетыВФоне";
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		ИмяПроцедуры, ПараметрыПодписания, ПараметрыВыполнения);
		
	ПараметрыПодписания.Удалить("Маркеры");
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервереБезКонтекста
Функция НачатьОтправкуВБанк(Знач УникальныйИдентификатор, Знач ПараметрыПодписания)
	
	ПараметрыПодписания.Вставить("РезультатПодготовки",
		ПолучитьИзВременногоХранилища(ПараметрыПодписания.АдресРезультатаПодготовки));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка пакета отчетности';
															|en = 'Send reporting batch'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ФинОтчетВБанк.ОтправитьВБанкВФоне",
		ПараметрыПодписания,
		ПараметрыВыполнения);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(Знач Идентификатор)
	
	УниверсальныйОбменСБанками.УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФинОтчетЗавершение(Результат, ПараметрыПодписания) Экспорт

	ЗакрытьФормуДлительнойОперации();
	
	Результат = РезультатФоновогоЗадания(Результат);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДеревоОтчетовПослеПодписания(ТекущийКлючСтрокиСубъекта);
	
	Если РазворачиватьДерево Тогда
		РазвернутьДерево();
	КонецЕсли;
	
	ОтобразитьДополнениеНаименованияГруппНаКлиенте(ДеревоОтчетов.ПолучитьЭлементы());
	
	// Встанем на строку, которая была выделена перед запуском.
	Для Каждого КлючСтрокиОтчета Из ПараметрыПодписания.ОтборПоКлючамСтрок Цикл
		
		СтрокаДереваОтчетов = НайтиОтчетВДеревеНаФорме(КлючСтрокиОтчета, ДеревоОтчетов.ПолучитьЭлементы());
		Если СтрокаДереваОтчетов <> Неопределено Тогда
			Элементы.ДеревоОтчетов.ТекущаяСтрока = СтрокаДереваОтчетов.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыПодписания.ДействиеПослеПодписания = "Отправить" Тогда
		
		Оповестить("ФинОтчетВБанк_Отправка", , Объект.Ссылка);

		Если Результат.Выполнено Тогда
			
			ФинОтчетностьВБанкиКлиент.
				ОткрытьФормуДлительнойОперацииОтправки(Объект.Организация, Объект.Ссылка,, Истина);

 		КонецЕсли;
			
		// Отобразим на форме статус отправки отчета.
		ОбновитьОтображениеСостоянияОтчета();

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоОтчетовПослеПодписания(КлючСтрокиСубъекта)
	
	Прочитать();
	ЗаполнитьДобавленныеКолонкиЭкономическиеСубъекты(ЭтотОбъект);

	СтрокаСубъекта = Документы.ФинОтчетВБанк.НайтиСтрокуПоКлючу(
		Объект.ЭкономическиеСубъекты, "КлючСтрокиСубъекта", КлючСтрокиСубъекта);
		
	Если СтрокаСубъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоОтчетов(СтрокаСубъекта);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыПодписания()
	
	Если ДостаточноПодписиОсновнойОрганизации Тогда
		КлючСтрокиСубъекта = 0;
	Иначе
		КлючСтрокиСубъекта = ТекущийКлючСтрокиСубъекта;
	КонецЕсли;

	ПараметрыПроцессаПодписания = Документы.ФинОтчетВБанк.ПараметрыПодписания(Объект, КлючСтрокиСубъекта, НастройкиКомплекта());
	
	// Если во время работы с документом выполняли подписание, то по-умолчанию предложим этот сертификат.
	// Если ранее этот пользователь для этой организации уже выполнял подписания, то сертификат будет получен
	// из регистра сведений СертификатыОрганизацийДляОбменаСБанками при открытии общей формы ВводПараметровКриптографииОбменаСБанками.
	// Иначе при открытии будет предпринята попытка подобрать сертификат и доверенность из доступных на компьютере пользователя.
	ПараметрыПроцессаПодписания.ОтпечатокСертификата = ПоследнийИспользованныйСертификат;
	 
	Возврат ПараметрыПроцессаПодписания;
	
КонецФункции

#КонецОбласти

#Область ОбменАрхивами

&НаКлиенте
Процедура НачатьОтправкуНаКлиенте_ПослеЗаписи()
	
	Если СтатусОтчета = ФинОтчетностьВБанкиКлиентСервер.СтатусСдано() Тогда
		ТекстВопроса = НСтр("ru = 'Отчет уже отправлен и успешно сдан.
                             |Вы действительно хотите отправить отчет повторно?';
                             |en = 'The report is already sent and successfully submitted.
                             |Are you sure you want to send the report again?'");
	ИначеЕсли СтатусОтчета <> ФинОтчетностьВБанкиКлиентСервер.СтатусНеОтправлено() Тогда
		ТекстВопроса = НСтр("ru = 'Отчет уже отправлен.
                             |Вы действительно хотите отправить отчет повторно?';
                             |en = 'The report is already sent.
                             |Do you want to send it again?'");
	Иначе
		ТекстВопроса = "";
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстВопроса) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОтправкуНаКлиенте_ПослеЗапросаПодтверждения", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	НачатьОтправкуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуНаКлиенте_ПослеЗапросаПодтверждения(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НачатьОтправкуНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуНаКлиенте(ИнтернетПоддержкаПодключена = Ложь)
	
	Если Не ИнтернетПоддержкаПодключена
	   И Не ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОтправкуНаКлиенте_ПослеПодключенияИнтернетПоддержки", ЭтотОбъект);	
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДействиеПослеПодписания", "Отправить");
	ДополнительныеПараметры.Вставить("КлючСтрокиОтчета");
	
	ПодписатьФинОтчет(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуНаКлиенте_ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		// Пользователь отказался от подключения, либо у него не хватило прав.
		ПоказатьПредупреждение(, НСтр("ru = 'Для отправки отчетности необходимо подключение Интернет-поддержки';
										|en = 'To send the reporting, enable Online support'"));
		Возврат;

	КонецЕсли;
	
	НачатьОтправкуНаКлиенте(Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки()
	
	Возврат ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
КонецФункции

// Анализирует, допустима ли выгрузка и сообщает, какие действия нужно проделать перед ней.
//
// Возвращаемое значение:
//   Структура   - информация о ситуации перед выгрузкой:
//               * Состояние - что нужно сделать
//                  ** Безусловно - можно выгружать, замечаний нет;
//					** Ошибка - выгрузка невозможна;
//                  ** Подписать - перед выгрузкой нужно предложить пользователю подписать файлы;
//                  ** Предупредить - перед выгрузкой пользователь должен подтвердить это действие.
//               * ТекстСообщения - комментарий к состоянию.
//
&НаСервере
Функция СостояниеПередВыгрузкой()
	
	СделатьПередВыгрузкой = Новый Структура;
	СделатьПередВыгрузкой.Вставить("Состояние",            "Ошибка"); // какое действие сделать по результатам анализа
	СделатьПередВыгрузкой.Вставить("ТекстСообщения",       "");       // текст предупреждения или ошибки
	СделатьПередВыгрузкой.Вставить("КраткоеПредставление", "<настройки не найдены>"); // для контроля при выгрузке
	
	Если Объект.ЭкономическиеСубъекты.Количество() = 0
	 Или Объект.ЭкономическиеСубъекты.Количество() = 1 И Не ЗначениеЗаполнено(Объект.ЭкономическиеСубъекты[0].Субъект) Тогда
		
		СделатьПередВыгрузкой.ТекстСообщения = НСтр("ru = 'Не добавлено ни одной компании';
													|en = 'No company is added'");
		Возврат СделатьПередВыгрузкой;
		
	КонецЕсли;
	
	НастройкиКомплекта = НастройкиКомплекта();
	Если НастройкиКомплекта <> Неопределено Тогда
		СделатьПередВыгрузкой.КраткоеПредставление = НастройкиКомплекта.КраткоеПредставление;
	КонецЕсли;
	
	ПорядкиПодписания = Документы.ФинОтчетВБанк.ПорядкиПодписанияОтчетов(НастройкиКомплекта);
	ОсновнойПорядокПодписания = ПорядкиПодписания["ЗначениеПоУмолчанию"];
	Если Не ЗначениеЗаполнено(ОсновнойПорядокПодписания) Тогда

		СделатьПередВыгрузкой.ТекстСообщения = НСтр("ru = 'Не задан основной порядок подписания комплекта';
													|en = 'The main set signing procedure is not specified'");
		Возврат СделатьПередВыгрузкой;

	КонецЕсли;
	ПорядкиПодписания.Удалить("ЗначениеПоУмолчанию");

	КоличествоПредставленийВПредупреждении = 3;
	
	ОтсутствующиеОтчеты = Новый Соответствие;
	Для каждого Отчет Из Объект.Отчетность Цикл
	
		Если Не ЗначениеЗаполнено(Отчет.ОтчетСсылка)
		   И Не ЗначениеЗаполнено(Отчет.ФайлОтчета) Тогда
			ОтсутствующиеОтчеты.Вставить(Отчет.КлючСтрокиОтчета, Истина);
		КонецЕсли;
	
	КонецЦикла;
	КоличествоОтсутствующих = ОтсутствующиеОтчеты.Количество();
	Если КоличествоОтсутствующих > 0 Тогда
		
		ОтсутствующиеОтчетыПредставления = ПредставленияОтчетности(ОтсутствующиеОтчеты).Отчеты;
		ОтсутствующиеОтчеты = Новый Массив;
		инд = 0;
		Для каждого Отчет Из ОтсутствующиеОтчетыПредставления Цикл
			
			инд = инд + 1;
			Если инд > КоличествоПредставленийВПредупреждении Тогда
				КоличествоОтсутствующихСтрока = УниверсальныйОбменСБанкамиКлиентСервер.ЧислоИПредметИсчисления(
					КоличествоОтсутствующих - КоличествоПредставленийВПредупреждении, "отчет", "отчета", "отчетов", "м");
				ОтсутствующиеОтчеты.Добавить(
					СтрШаблон(НСтр("ru = '	и ещё %1';
									|en = '	and %1'"), КоличествоОтсутствующихСтрока));
				Прервать;
			КонецЕсли;
			ОтсутствующиеОтчеты.Добавить(Символы.Таб + Отчет.Значение);
			
		КонецЦикла;

		СделатьПередВыгрузкой.Состояние = "Предупредить";
		
	КонецЕсли;
	
	ПорядокПодписания = "ОсновнаяОрганизация";
	Для Каждого ПорядокПодписанияОтчета Из ПорядкиПодписания Цикл

		Если ПорядокПодписанияОтчета.Значение = "СубъектОтчетности"
		 Или ОсновнойПорядокПодписания = "СубъектОтчетности"
			И ПорядокПодписанияОтчета.Значение <> "ОсновнаяОрганизация" Тогда
			ПорядокПодписания = "СубъектОтчетности";
			Прервать;
		КонецЕсли;

	КонецЦикла;
	Если ПорядокПодписания = "ОсновнаяОрганизация" Тогда
		// Подписывать и отправлять в банк будет основной заемщик, а мы сейчас только выгружаем для него.
		Если СделатьПередВыгрузкой.Состояние = "Предупредить" Тогда
			СделатьПередВыгрузкой.ТекстСообщения =
				СтрШаблон(НСтр("ru = 'Имеются незаполненные отчеты:
                            |%1
                            |
                            |Выгрузить только имеющиеся?';
                            |en = 'There are unfilled reports:
                            |%1
                            |
                            |Export only available ones?'"),
						СтрСоединить(ОтсутствующиеОтчеты, Символы.ПС));
		Иначе
			СделатьПередВыгрузкой.Состояние = "Безусловно"; // можно начинать выгрузку
		КонецЕсли;
		Возврат СделатьПередВыгрузкой;

	КонецЕсли;
	
	// Анализируем, имеются ли неподписанные файлы.
	ВерсииДанныхРегОтчетов = Новый ТаблицаЗначений;
	ВерсииДанныхРегОтчетов.Колонки.Добавить("КлючСтрокиОтчета", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
	ВерсииДанныхРегОтчетов.Колонки.Добавить("ОтчетСсылка", Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет"));
	ВерсииДанныхРегОтчетов.Колонки.Добавить("ВерсияДанныхОтчета", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	ОтсутствующиеПодписи = Новый Соответствие;
	Для каждого Отчет Из Объект.Отчетность Цикл
	
		Если Отчет.ДанныеОтсутствуют Тогда // нечего подписывать
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(Отчет.ОтчетСсылка)
		   И (Не ЗначениеЗаполнено(Отчет.ФайлОтчета) // строка уже учтена как незаполненная
			Или Отчет.ФайлОтчетаСодержитЭП) Тогда    // архив содержит подписи внутри себя
			Продолжить;
		КонецЕсли;
		
		ПорядокПодписанияОтчета = ПорядкиПодписания[Отчет.ИдентификаторСтрокиКомплекта];
		Если ПорядокПодписанияОтчета = Неопределено Тогда
			Продолжить; // нет требований о наличии этого отчета; неважно, подписан ли он
		КонецЕсли;

		Если ПорядокПодписанияОтчета = "ОсновнаяОрганизация"
		 Или ПорядокПодписанияОтчета <> "СубъектОтчетности"
			И ОсновнойПорядокПодписания <> "СубъектОтчетности" Тогда
			Продолжить; // можно просто выгрузить без подписи
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Отчет.ОтчетСсылка) И ЗначениеЗаполнено(Отчет.ФайлОтчета) Тогда
			// Регламентированный отчет ранее подписывался. Нужно проверить, не изменялся ли он с тех пор.
			// Далее для оптимизации сделаем проверку для всех таких строк одновременно.
			ОтчетДляАнализа = ВерсииДанныхРегОтчетов.Добавить();
			ОтчетДляАнализа.КлючСтрокиОтчета   = Отчет.КлючСтрокиОтчета;
			ОтчетДляАнализа.ОтчетСсылка        = Отчет.ОтчетСсылка;
			ОтчетДляАнализа.ВерсияДанныхОтчета = Отчет.ВерсияДанныхОтчета;
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Отчет.ОтчетСсылка) Тогда

			Если ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетБРО(Отчет.ВидОтчета) Тогда
				
				СостояниеРеглОтчета = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(Отчет.ОтчетСсылка);
				Если СостояниеРеглОтчета.Отправлено И СостояниеРеглОтчета.Сдано Тогда
					Продолжить; // при выгрузке будет подпись от гос.органа
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		Если ЗначениеЗаполнено(Отчет.ФайлОтчета) Тогда

			ЕстьВерныеПодписи = Ложь;
			Подписи = ЭлектроннаяПодпись.УстановленныеПодписи(Отчет.ФайлОтчета);
			Для каждого Подпись Из Подписи Цикл
				Если Подпись.ПодписьВерна Тогда
					ЕстьВерныеПодписи = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьВерныеПодписи Тогда
				Продолжить; // подписан присоединенный файл через БСП
			КонецЕсли;
			
		КонецЕсли;
		
		ОтсутствующиеПодписи.Вставить(Отчет.КлючСтрокиОтчета, Истина);
		
	КонецЦикла;
	Если ВерсииДанныхРегОтчетов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ВерсииДанныхРегОтчетов.ОтчетСсылка КАК Документ.РегламентированныйОтчет) КАК ОтчетСсылка,
		|	ВерсииДанныхРегОтчетов.ВерсияДанныхОтчета КАК ВерсияДанныхОтчета,
		|	ВерсииДанныхРегОтчетов.КлючСтрокиОтчета КАК КлючСтрокиОтчета
		|ПОМЕСТИТЬ ВерсииДанныхРегОтчетов
		|ИЗ
		|	&ВерсииДанныхРегОтчетов КАК ВерсииДанныхРегОтчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВерсииДанныхРегОтчетов.КлючСтрокиОтчета КАК КлючСтрокиОтчета,
		|	ВерсииДанныхРегОтчетов.ОтчетСсылка.ВерсияДанных КАК ВерсияДанныхСсылка,
		|	ВерсииДанныхРегОтчетов.ВерсияДанныхОтчета КАК ВерсияДанныхОтчетность
		|ИЗ
		|	ВерсииДанныхРегОтчетов КАК ВерсииДанныхРегОтчетов");
		Запрос.УстановитьПараметр("ВерсииДанныхРегОтчетов", ВерсииДанныхРегОтчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ВерсияДанныхСсылка <> Выборка.ВерсияДанныхОтчетность Тогда
				ОтсутствующиеПодписи.Вставить(Выборка.КлючСтрокиОтчета, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Если ОтсутствующиеПодписи.Количество() = 0 Тогда
		// Все нужные (ПорядокПодписанияОтчета = "СубъектОтчетности") файлы субъектов подписаны.
		Если СделатьПередВыгрузкой.Состояние = "Предупредить" Тогда
			СделатьПередВыгрузкой.ТекстСообщения =
				СтрШаблон(НСтр("ru = 'Имеются незаполненные отчеты:
                            |%1
                            |
                            |Выгрузить только имеющиеся?';
                            |en = 'There are unfilled reports:
                            |%1
                            |
                            |Export only available ones?'"),
						СтрСоединить(ОтсутствующиеОтчеты, Символы.ПС));
		Иначе
			СделатьПередВыгрузкой.Состояние = "Безусловно"; // можно начинать выгрузку
		КонецЕсли;
		Возврат СделатьПередВыгрузкой;

	КонецЕсли;
	Если КоличествоОтсутствующих > КоличествоПредставленийВПредупреждении Тогда
		ОтсутствующиеОтчеты.Удалить(ОтсутствующиеОтчеты.ВГраница());
	КонецЕсли;
	
	ОтсутствующиеПодписиПредставления = ПредставленияОтчетности(ОтсутствующиеПодписи).Отчеты;
	Если КоличествоОтсутствующих = 0 Тогда
		ОтсутствующиеОтчеты = Новый Массив;
	КонецЕсли;
	инд = КоличествоОтсутствующих;
	Для каждого Отчет Из ОтсутствующиеПодписиПредставления Цикл
		
		инд = инд + 1;
		Если инд > КоличествоПредставленийВПредупреждении Тогда
			КоличествоОтсутствующихСтрока = УниверсальныйОбменСБанкамиКлиентСервер.ЧислоИПредметИсчисления(
				КоличествоОтсутствующих + ОтсутствующиеПодписи.Количество() - КоличествоПредставленийВПредупреждении,
				"отчет", "отчета", "отчетов", "м");
			ОтсутствующиеОтчеты.Добавить(
				СтрШаблон(НСтр("ru = '	и ещё %1';
								|en = '	and %1'"), КоличествоОтсутствующихСтрока));
			Прервать;
		КонецЕсли;
		ОтсутствующиеОтчеты.Добавить(Символы.Таб + Отчет.Значение);
		
	КонецЦикла;

	СделатьПередВыгрузкой.Состояние = "Предупредить";
	СделатьПередВыгрузкой.ТекстСообщения = 
		СтрШаблон(НСтр("ru = 'Имеются %1 отчеты:
                        |%2
                        |
                        |Выгрузить без подписи?';
                        |en = 'There are the %1 reports:
                        |%2
                        |
                        |Export without signature?'"),
					?(КоличествоОтсутствующих > 0, НСтр("ru = 'незаполненные или неподписанные';
														|en = 'not filled and not signed'"), НСтр("ru = 'неподписанные';
																										|en = 'not signed'")),
					СтрСоединить(ОтсутствующиеОтчеты, Символы.ПС));

	Возврат СделатьПередВыгрузкой;
	
КонецФункции

// Вызывает фоновое задание для проверки готовности отчета к отправке.
//
// Параметры:
//	ПараметрыПроверки - Структура - см. ПараметрыПодписания().
//		В структуру параметров серверная процедура может добавить дополнительные ключи, типы которых не доступны на клиенте.
//		Поэтому используем для этой структуры передачу по значению.
//
&НаСервере
Функция ГотовностьКОтправке(Знач ПараметрыПроверки)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка готовности пакета к отправке';
															|en = 'Checking if the batch is ready for sending'");
		
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ФинОтчетВБанк.ПроверитьГотовностьКОтправкеВФоне",
		ПараметрыПроверки,
		ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Выгружает файлы пакета в архив и записывает архив на клиенте.
//
// Параметры:
//  КраткоеПредставление - Строка - см. ЗаполнениеФинОтчетностиВБанки.НастройкиКомплектаОтчетности() 
//
&НаКлиенте
Процедура ВыгрузитьФинОтчет(КраткоеПредставление)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = НачатьВыгрузкуВАрхив(УникальныйИдентификатор);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыгрузитьФинОтчетЗавершение", ЭтотОбъект);
	
	ОжидатьЗавершениеСПрогрессомВыполнения(
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		НСтр("ru = 'Выгрузка отчетов';
			|en = 'Export reports'"),
		0,
		100);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФинОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗакрытьФормуДлительнойОперации();

	Результат = РезультатФоновогоЗадания(Результат);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Диалог.Заголовок = НСтр("ru = 'Сохранить пакет отчетности';
												|en = 'Save the reporting batch'");
	ПараметрыСохранения.Диалог.Фильтр = "Архив ZIP|*.zip";
	
	ИнтерактивноеОповещение = Новый ОписаниеОповещения("ВыгрузитьФинОтчетОповещение", ЭтотОбъект);
	АдресАрхива = Результат.АдресДополнительногоРезультата;
	ФайловаяСистемаКлиент.СохранитьФайл(ИнтерактивноеОповещение, АдресАрхива, Результат.ИмяАрхива, ПараметрыСохранения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФинОтчетОповещение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Или ПолученныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПутьКФайлу = ПолученныеФайлы[0].ПолноеИмя;
	ОткрытиеКаталога = Новый ОписаниеОповещения("ВыгрузитьФинОтчетОткрытьКаталог", ЭтотОбъект, ПутьКФайлу);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Архив успешно сохранен';
										|en = 'Archive is saved successfully'"), ОткрытиеКаталога, ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФинОтчетОткрытьКаталог(ПутьКФайлу) Экспорт
	
	ПутьКФайлу = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлу).Путь;
	ФайловаяСистемаКлиент.ОткрытьПроводник(ПутьКФайлу);
	
КонецПроцедуры

&НаСервере
Функция НачатьВыгрузкуВАрхив(Знач УникальныйИдентификаторФормы)
	
	ПараметрыВыгрузки = Документы.ФинОтчетВБанк.ПараметрыПодписания(Объект, Неопределено, НастройкиКомплекта());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подготовка выгружаемых файлов пакета';
															|en = 'Prepare the batch files to export'");
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ФинОтчетВБанк.ПодготовитьАрхивВФоне",
		ПараметрыВыгрузки,
		ПараметрыВыполнения);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Функция ПараметрыПроверкиАрхива()
	
	СтатусПроверкиАрхива = Новый Структура;
	СтатусПроверкиАрхива.Вставить("НаКлиенте",   Ложь); // возможна работа с архивом на клиенте
	СтатусПроверкиАрхива.Вставить("Выполнена",   Ложь); // проверка успешно пройдена
	СтатусПроверкиАрхива.Вставить("ПутьКАрхиву", "");   // местонахождение загружаемых данных
	СтатусПроверкиАрхива.Вставить("Хранение",    "");   // адрес временного хранилища
	
	Возврат СтатусПроверкиАрхива;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаПротоколаНаКлиенте(АдресФайла, ОтказОтПомещенияФайла = Ложь)
	
	РезультатПроверки = ПроверкаПротокола(Объект.Ссылка, АдресФайла, СтатусПроверкиАрхива);
	
	Если РезультатПроверки.ПроверкаУспешна = Неопределено Тогда // спросить пользователя
		
		ОтказОтПомещенияФайла = Истина;
		
		КоличествоСтрок = СтрЧислоСтрок(РезультатПроверки.ТекстСообщения);
		Если КоличествоСтрок > 3 Тогда
			
			РезультатПроверки.ТекстСообщения = Лев(РезультатПроверки.ТекстСообщения,
				СтрНайти(РезультатПроверки.ТекстСообщения, Символы.ПС, , , 3) - 1)
				+ СтрШаблон(НСтр("ru = 'и ещё %1 отчетов';
								|en = 'and %1 reports'"), КоличествоСтрок - 3);
			
		КонецЕсли;
		
		РазрешениеОтПользователя = Новый ОписаниеОповещения("ЗагрузитьРазрешениеОтПользователя", ЭтотОбъект);
		ПоказатьВопрос(РазрешениеОтПользователя,
			РезультатПроверки.ТекстСообщения + Символы.ПС + НСтр("ru = 'Загрузить пакет отчетности?';
																|en = 'Import reporting batch?'"),
			РежимДиалогаВопрос.ОКОтмена, ,
			КодВозвратаДиалога.ОК, НСтр("ru = 'Разрешить загрузку';
										|en = 'Allow importing'"));
		
	ИначеЕсли РезультатПроверки.ПроверкаУспешна = Истина Тогда
		
		СтатусПроверкиАрхива.Выполнена = Истина;
		
	Иначе
		
		ОтказОтПомещенияФайла = Истина;
		Если Не ПустаяСтрока(РезультатПроверки.ТекстСообщения) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПроверки.ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СтатусПроверкиАрхива.НаКлиенте И СтатусПроверкиАрхива.Выполнена Тогда
		// Выполняем явный вызов перехода к фоновому заданию. Для варианта "НаКлиенте=Истина" процедура ЗагрузитьЗавершение()
		// вызывается как следствие вызова ФайловаяСистемаКлиент.ЗагрузитьФайл()
		ЗагрузитьФинОтчет();
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаПротокола(Знач ФинОтчет, Знач АдресФайла, СтатусПроверкиАрхива)

	Если СтатусПроверкиАрхива.НаКлиенте Тогда
		
		ДанныеПротокола = Новый ЧтениеДанных(ПолучитьИзВременногоХранилища(АдресФайла));
		
		РезультатПроверки = Документы.ФинОтчетВБанк.ПроверитьПротокол(ФинОтчет, ДанныеПротокола.ИсходныйПоток());
		
	Иначе
		
		СтатусПроверкиАрхива.Хранение = АдресФайла;
		ИзвлечениеПротокола = Новый ЧтениеZipФайла(ПолучитьИзВременногоХранилища(АдресФайла).ОткрытьПотокДляЧтения());
		
		ПутьКПротоколу = "";
		Для каждого Элемент Из ИзвлечениеПротокола.Элементы Цикл
			Если Элемент.Имя <> "Reports.xml" Тогда
				Продолжить;
			КонецЕсли;
			
			ПутьКПротоколу = ПолучитьИмяВременногоФайла();
			ИзвлечениеПротокола.Извлечь(Элемент, ПутьКПротоколу, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			Прервать;
		
		КонецЦикла;
		ИзвлечениеПротокола.Закрыть();
		Если ПустаяСтрока(ПутьКПротоколу) Тогда
			
			РезультатПроверки = Новый Структура;
			РезультатПроверки.Вставить("ПроверкаУспешна", Ложь);
			РезультатПроверки.Вставить("ТекстСообщения", НСтр("ru = 'В архиве отсутствует файл Reports.xml';
																|en = 'The archive does not contain the Reports.xml file'"));
			
		Иначе
			
			РезультатПроверки = Документы.ФинОтчетВБанк.ПроверитьПротокол(ФинОтчет,
									ПутьКПротоколу + ПолучитьРазделительПути() + "Reports.xml");

		КонецЕсли;

		// Путь к архиву на клиенте нам уже не нужен, т.к. архив передан на сервер.
		// Путь к протоколу запоминаем, чтобы в дальнейщем удалить временный файл.
		СтатусПроверкиАрхива.ПутьКАрхиву = ПутьКПротоколу;
		
		Если РезультатПроверки.ПроверкаУспешна = Ложь Тогда

			УдалитьВременныеФайлыАрхива(СтатусПроверкиАрхива);		
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьВременныеФайлыАрхива(СтатусПроверкиАрхива)
	
	Если Не ПустаяСтрока(СтатусПроверкиАрхива.ПутьКАрхиву) Тогда
		УдалитьФайлы(СтатусПроверкиАрхива.ПутьКАрхиву);
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(СтатусПроверкиАрхива.Хранение) Тогда
		УдалитьИзВременногоХранилища(СтатусПроверкиАрхива.Хранение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФинОтчет()
	
	СтатусПроверкиАрхива.Вставить("ФинОтчет", Объект.Ссылка);

	ДлительнаяОперация = НачатьЗагрузкуНаСервере(СтатусПроверкиАрхива, УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеЗагрузки", ЭтотОбъект, СтатусПроверкиАрхива);
	
	ОжидатьЗавершениеСПрогрессомВыполнения(
		ДлительнаяОперация,
		ОписаниеОповещения,
		НСтр("ru = 'Загрузка отчетов';
			|en = 'Import reports'"),
		0,
		100);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьЗагрузкуНаСервере(Знач ПараметрыАрхива, Знач ИдентификаторФормы)

	АдресАрхива = ПараметрыАрхива.Хранение;
	ПараметрыАрхива.Хранение = ПолучитьИзВременногоХранилища(АдресАрхива);
	УдалитьИзВременногоХранилища(АдресАрхива);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = "ФинОтчетВБанк.ЗагрузитьОтчетыВФоне";

	Возврат ДлительныеОперации.ВыполнитьВФоне("Документы.ФинОтчетВБанк.ЗагрузитьОтчетыВФоне",
		ПараметрыАрхива, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура ЗавершениеЗагрузки(Результат, ПараметрыАрхива) Экспорт

	ЗакрытьФормуДлительнойОперации();

	Результат = РезультатФоновогоЗадания(Результат, Истина);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСтрокиПоРезультатуЗагрузки(Результат);
	
	// По умолчанию сразу разворачиваем все дерево отчетов,
	// если это предусмотрено настройкой комплекта.
	Если РазворачиватьДерево Тогда
		РазвернутьДерево();
	КонецЕсли;
	
	ОтобразитьДополнениеНаименованияГруппНаКлиенте(ДеревоОтчетов.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокиПоРезультатуЗагрузки(Знач РезультатЗагрузки)

	АдресРезультата = РезультатЗагрузки.АдресРезультата;
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатЗагрузки.Отчетность.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючиСтрокСубъектов = ОбщегоНазначения.ВыгрузитьКолонку(РезультатЗагрузки.Отчетность, "КлючСтрокиСубъекта", Истина);
	ЕстьНовыеСубъекты = Ложь;

	Для каждого КлючСтрокиСубъекта Из КлючиСтрокСубъектов Цикл

		СтрокаСубъекта = НайтиСтрокуПоКлючу(Объект.ЭкономическиеСубъекты, "КлючСтрокиСубъекта", КлючСтрокиСубъекта);

		Если СтрокаСубъекта = Неопределено Тогда
			// Добавим новый субъект.
			ЕстьНовыеСубъекты = Истина;
			СтрокаСубъекта = РезультатЗагрузки.Отчетность.Найти(КлючСтрокиСубъекта, "КлючСтрокиСубъекта");

			НоваяСтрока = Объект.ЭкономическиеСубъекты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСубъекта);
		Иначе
			// Удалим старые отчеты и настройки налогообложения по субъекту.
			УдалитьЗависимыеСтрокиПоСубъекту(КлючСтрокиСубъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	// Загружаем в документ новые отчеты.
	Для каждого Отчет Из РезультатЗагрузки.Отчетность Цикл
		НоваяСтрока = Объект.Отчетность.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Отчет);
	КонецЦикла;
	
	// Загружаем переданные настройки налогообложения.
	Для каждого НастройкаСНО Из РезультатЗагрузки.НастройкиСистемыНалогообложения Цикл
		НоваяСтрока = Объект.НастройкиСистемыНалогообложения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НастройкаСНО);
	КонецЦикла;
	
	// Встанем на первый загруженный субъект и обновим дерево отчетов.
	СтрокаСубъекта = НайтиСтрокуПоКлючу(Объект.ЭкономическиеСубъекты, "КлючСтрокиСубъекта", КлючиСтрокСубъектов[0]);
	Элементы.ЭкономическиеСубъекты.ТекущаяСтрока = СтрокаСубъекта.ПолучитьИдентификатор();
	
	Если ЕстьНовыеСубъекты Тогда
		ЗаполнитьДобавленныеКолонкиЭкономическиеСубъекты(ЭтотОбъект);
	КонецЕсли;
	
	ОбновитьДеревоОтчетов(СтрокаСубъекта.КлючСтрокиСубъекта);
	
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОстаткиТоваровПоСрокамХранения

&НаКлиенте
Процедура ОткрытьОтчетОстаткиТоваровПоСрокамХранения(СтрокаДереваОтчетов)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиОтчета", СтрокаДереваОтчетов.КлючСтрокиОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияОстаткиТоваровПоСрокамХранения",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = ПараметрыФормыОстаткиТоваровПоСрокамХранения(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	
	ОткрытьФорму("Отчет.ОстаткиТоваровПоСрокамХранения.Форма.ФормаОтчета",
		ПараметрыФормы, ЭтотОбъект, Истина, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОстаткиТоваровПоСрокамХранения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыОстаткиТоваровПоСрокамХранения(ИдентификаторСтроки)
	
	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НастройкиКомплекта = НастройкиКомплекта();
	
	НастройкиОтчета = Документы.ФинОтчетВБанк.НайтиНастройкиОтчета(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта, НастройкиКомплекта);
	
	Если НастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПараметрыОтчетаОстаткиТоваровПоСрокамХранения(НастройкиОтчета);
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов);
	
	Возврат ЗаполнениеФинОтчетностиВБанки.ПараметрыФормыОтчета(ПараметрыОтчета);
	
КонецФункции

#КонецОбласти

#Область РаботаСФлажкамиДерева

&НаКлиенте
Процедура ДеревоОтчетовВыгружатьПриИзменении(Элемент)
	
	СтрокаДерева = Элементы.ДеревоОтчетов.ТекущиеДанные;
	
	// Флажок с тремя значениями, при клике меняются, по умолчанию, в следующем порядке: 
	//		0(отключено) -> 1(включено) -> 2(неопределено) -> 0 и т.д.
	// Нам же нужно менять 0 -> 1 -> 0 и т.д.,
	// значение 0 может программно преобразоваться в 2, если в группе есть неотключаемые пункты.
	// Простое решение - значение по модулю 2: Выгружать = Выгружать % 2.
	// В чистом виде тоже не подходит, потому что неправильно ведет себя в следующей ситуации: 
	// если у нас было значение 2 (серое, в группе часть отчетов выбрана), оно переключается на следующее значение - 0, 
	// которое программно преобразуется в 2. 
	// Т.е. пользователь не сможет изменить значение флажка группы, хотя он хочет, например,
	// установить все пункты в группе.
	
	Если СтрокаДерева.Выгружать = 0 Тогда  
		// Если в колонке было значение 2, то при клике будет 0, 
		// скорее всего пользователь хочет установить все отчеты в группе, изменим значение на 1.
		СтрокаДерева.Выгружать = 1;
	Иначе
		// В других случаях сработает значение по модулю 2. 
		// Если получится 0, то он сам в дальнейшем преобразуется в 2, если необходимо.
		СтрокаДерева.Выгружать = СтрокаДерева.Выгружать % 2;
	КонецЕсли;
	
	Модифицированность = Истина;
	ДеревоОтчетовИзменено = Истина;

	ПроставитьПометкиВниз(СтрокаДерева, Объект.ПроизвольныйПакет);
	
	ПроставитьПометкиВверх(СтрокаДерева);
	
	Если СтрокаДерева.Выгружать = 0 
		И НеПредлагатьУстановкуДанныеОтсутствуютДляАналогичныхОтчетов = Ложь 
		И ЗначениеЗаполнено(СтрокаДерева.КлючСтрокиОтчета)
		И ЗначениеЗаполнено(СтрокаДерева.ДатаНачала)
		И ЗначениеЗаполнено(СтрокаДерева.ДатаОкончания) Тогда
	
		ПоказатьВопросДляАналогичныхОтчетов(СтрокаДерева);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставитьПометкиВниз(СтрокаДерева, ПроизвольныйПакет)
	
	Если Не ПроизвольныйПакет И СтрокаДерева.ОбязательныйПункт Тогда
		
		СтрокаДерева.Выгружать = 1;
		
	КонецЕсли;
	
	Потомки = СтрокаДерева.ПолучитьЭлементы();
	
	Если Потомки.Количество() = 0 Тогда
		
		Возврат;
	
	КонецЕсли;
	
	ЗначениеФлажка = СтрокаДерева.Выгружать;
	
	ВсеИстина = Истина;
	ВсеЛожь = Истина;
	
	Для каждого Потомок из Потомки Цикл
		
		Если ЗначениеФлажка <> 2 Тогда
			Потомок.Выгружать = ЗначениеФлажка;
		КонецЕсли;
		
		ПроставитьПометкиВниз(Потомок, ПроизвольныйПакет);
				
		ВсеИстина = ВсеИстина И Потомок.Выгружать = 1;
		ВсеЛожь = ВсеЛожь И Потомок.Выгружать = 0;
		
	КонецЦикла;
	
	Если ВсеИстина Тогда
	
		СтрокаДерева.Выгружать = 1;
	
	ИначеЕсли ВсеЛожь Тогда
	
		СтрокаДерева.Выгружать = 0;
		
	Иначе
	
		СтрокаДерева.Выгружать = 2;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставитьПометкиВверх(СтрокаДерева)
	
	Родитель = СтрокаДерева.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВсеИстина = Истина;
	ВсеЛожь = Истина;
	
	Потомки = Родитель.ПолучитьЭлементы();
	Для каждого Потомок из Потомки Цикл
		
		ВсеИстина = ВсеИстина И Потомок.Выгружать = 1;
		ВсеЛожь = ВсеЛожь И Потомок.Выгружать = 0;
		
		Если ВсеИстина = Ложь И ВсеЛожь = Ложь Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВсеИстина Тогда
		
		Родитель.Выгружать = 1;
		
	ИначеЕсли ВсеЛожь Тогда
		
		Родитель.Выгружать = 0;
		
	Иначе
		
		Родитель.Выгружать = 2;
		
	КонецЕсли;
	
	ПроставитьПометкиВверх(Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеФлажки(Команда)
	
	ДеревоОтчетовИзменено = Истина;
	
	Для каждого СтрокаДереваВерхнегоУровня Из ДеревоОтчетов.ПолучитьЭлементы() Цикл
		
		СтрокаДереваВерхнегоУровня.Выгружать = 1;
		ПроставитьПометкиВниз(СтрокаДереваВерхнегоУровня, Объект.ПроизвольныйПакет)	
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеФлажки(Команда)
	
	ДеревоОтчетовИзменено = Истина;
	
	Для каждого СтрокаДереваВерхнегоУровня Из ДеревоОтчетов.ПолучитьЭлементы() Цикл
		
		СтрокаДереваВерхнегоУровня.Выгружать = 0;
		ПроставитьПометкиВниз(СтрокаДереваВерхнегоУровня, Объект.ПроизвольныйПакет)	
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБаннером

&НаСервере
Процедура ПоказатьСкрытьБаннер()
	
	ПоказыватьБаннер = ЗаполнениеФинОтчетностиВБанки.ПолучитьПараметрПоказыватьБаннерПодсказку();
	
	Если Не ПоказыватьБаннер Тогда
		
		Элементы.БаннерСФоном.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ТекстБаннераСтрока = НСтр("ru = 'Для отмены отправки отчета в банк необходимо убрать отметку в начале строки.';
								|en = 'To cancel sending the report to the bank, clear the mark in the beginning of the line.'");
	
	Если ЕстьОбязательные Тогда
		ТекстБаннераСтрока = ТекстБаннераСтрока + НСтр("ru = '
			|У обязательных отчетов снятие отметки возможно в режиме ""Произвольный пакет"" по согласованию с банком.';
			|en = '
			|You can clear the mark for required reports in the ""Arbitrary package"" mode with the bank approval.'");
	КонецЕсли;
	
	ТекстБаннера = Новый ФорматированнаяСтрока(ТекстБаннераСтрока, ШрифтыСтиля.ШрифтТекстаБаннера);
	
	Элементы.КартинкаБаннера.Картинка = ЗаполнениеФинОтчетностиВБанки.КартинкаБаннерПояснениеНовогоИнтерфейса();
	
	Элементы.БаннерСФоном.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗакрытьБаннерНажатие(Элемент)
	
	Элементы.БаннерСФоном.Видимость = Ложь;
	СохранитьПараметрПоказыватьБаннерПодсказку(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрПоказыватьБаннерПодсказку(ЗначениеПараметра)
	
	ЗаполнениеФинОтчетностиВБанки.СохранитьПараметрПоказыватьБаннерПодсказку(ЗначениеПараметра);
	
КонецПроцедуры


#КонецОбласти

#Область АвтозаполнениеОтчетовПриОткрытии

&НаКлиенте
Функция ЕстьАвтозаполняемыеОтчеты(КлючСтрокиСубъекта)

	Если ЗначениеЗаполнено(КлючСтрокиСубъекта) Тогда
		// Выберем отчеты, которые представляются указанным субъектом.
		Если КлючСтрокиСубъекта = ТекущийКлючСтрокиСубъекта Тогда
			// Актуальные отчеты находятся в дереве на форме, т.к. его данные могут быть еще не записаны в табличную часть.
			СтрокиОтчетов = Новый Массив;
			ЗаполнитьПодчиненныеСтрокиИзДереваРекурсивно(СтрокиОтчетов, ДеревоОтчетов.ПолучитьЭлементы());
		Иначе
			Отбор = Новый Структура();
			Отбор.Вставить("КлючСтрокиСубъекта", КлючСтрокиСубъекта);
			СтрокиОтчетов = Объект.Отчетность.НайтиСтроки(Отбор);
		КонецЕсли; 
	Иначе
		// Составляем полный список отчетов из табличной части и из дерева на форме.
		СтрокиОтчетов = Новый Массив;
		Для каждого СтрокаОтчета Из Объект.Отчетность Цикл
			Если СтрокаОтчета.КлючСтрокиСубъекта <> ТекущийКлючСтрокиСубъекта Тогда
				СтрокиОтчетов.Добавить(СтрокаОтчета);
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьПодчиненныеСтрокиИзДереваРекурсивно(СтрокиОтчетов, ДеревоОтчетов.ПолучитьЭлементы());
	КонецЕсли;

	Для каждого СтрокаОтчета Из СтрокиОтчетов Цикл
		Если ЭтоАвтозаполняемыйОтчет(СтрокаОтчета.ВидОтчета) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьАвтозаполняемыеОтчетыВГруппе(ЭлементыДереваОтчетов)
	
	Для каждого ЭлементДерева Из ЭлементыДереваОтчетов Цикл
		Если ЗначениеЗаполнено(ЭлементДерева.КлючСтрокиОтчета) Тогда
			Если ЭтоАвтозаполняемыйОтчет(ЭлементДерева.ВидОтчета) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе // Это группа
			Если ЕстьАвтозаполняемыеОтчетыВГруппе(ЭлементДерева.ПолучитьЭлементы()) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоАвтозаполняемыйОтчет(ВидОтчета)

	Возврат ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетБРО(ВидОтчета)
		ИЛИ ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоСтандартныйОтчет(ВидОтчета)
		ИЛИ ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ЭтоОтчетПоФормеБанка(ВидОтчета);

КонецФункции

&НаКлиенте
Функция ДоступноАвтозаполнениеОтчетовПоТекущемуСубъекту()

	СтрокаСубъекта = Элементы.ЭкономическиеСубъекты.ТекущиеДанные;
	Если СтрокаСубъекта = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выделите компанию, по которой требуется заполнить отчеты';
								|en = 'Select a company to fill in reports'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаСубъекта.Субъект) <> Тип("СправочникСсылка.Организации") Тогда
		ТекстыСообщений = Новый Массив;
		ТекстыСообщений.Добавить(СтрШаблон(НСтр("ru = '%1 является контрагентом.';
												|en = '%1 is a counterparty.'"), СтрокаСубъекта.Субъект));
		ТекстыСообщений.Добавить(НСтр("ru = 'Автоматическое заполнение отчетов доступно только для организаций и индивидуальных предпринимателей, учет деятельности которых ведется в программе.';
										|en = 'Automatic report filling is available only for companies and individual entrepreneurs whose activity is accounted for in the application.'"));
		ТекстыСообщений.Добавить(НСтр("ru = 'Отчетность других контрагентов необходимо выгрузить из их учетных систем и загрузить в виде файлов.';
										|en = 'Export other counterparty reporting from their accounting systems and import it as files.'"));
		
		// Для сохранения символов переноса строк в веб-клиенте передаем как форматированную строку.
		ПоказатьПредупреждение(, СтроковыеФункцииКлиент.ФорматированнаяСтрока(СтрСоединить(ТекстыСообщений, Символы.ПС)));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура НачатьЗаполнениеНаКлиенте_ПослеЗаписи(КлючСтрокиСубъекта, КлючиСтрокОтчетов)

	ТекстСообщенияОжидания = НСтр("ru = 'Заполнение отчетов';
									|en = 'Report filling'");

	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ТекущаяСсылка",      Объект.Ссылка);
	ПараметрыЗаполнения.Вставить("КлючСтрокиСубъекта", КлючСтрокиСубъекта); // Если не указан, то по всем субъектам.
	ПараметрыЗаполнения.Вставить("КлючиСтрокОтчетов",  КлючиСтрокОтчетов); // Если не указан, то все отчеты.
	
	Если ЗначениеЗаполнено(КлючСтрокиСубъекта) Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("КлючСтрокиСубъекта", КлючСтрокиСубъекта);
		НайденныеСтроки = Объект.ЭкономическиеСубъекты.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекстСообщенияОжидания = СтрШаблон(НСтр("ru = '%1 по %2';
													|en = '%1 for %2'"), ТекстСообщенияОжидания, НайденныеСтроки[0].Наименование);
		КонецЕсли;
	КонецЕсли;

	ДлительнаяОперация = НачатьЗаполнениеНаСервере(ПараметрыЗаполнения, УникальныйИдентификатор);
	
	// Запомним выделенный отчет, чтобы после перерисовки дерева снова встать на него.
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТекущийКлючСтрокиОтчета", 0);
	ДополнительныеПараметры.Вставить("КлючиСтрокОтчетов", КлючиСтрокОтчетов);
	
	Если ЗначениеЗаполнено(КлючиСтрокОтчетов) Тогда
		ДополнительныеПараметры.ТекущийКлючСтрокиОтчета = КлючиСтрокОтчетов[0];
	Иначе
		ТекущиеДанные = Элементы.ДеревоОтчетов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ДополнительныеПараметры.ТекущийКлючСтрокиОтчета = ТекущиеДанные.КлючСтрокиОтчета;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеЗаполнения", ЭтотОбъект, ДополнительныеПараметры);
	
	ОжидатьЗавершениеСПрогрессомВыполнения(
		ДлительнаяОперация,
		ОписаниеОповещения,
		ТекстСообщенияОжидания,
		0,
		100);

КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьЗаполнениеНаСервере(Знач ПараметрыЗаполнения, Знач ИдентификаторФормы)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = "ФинОтчетВБанк.ЗаполнитьОтчетыВФоне";

	Возврат ДлительныеОперации.ВыполнитьВФоне("Документы.ФинОтчетВБанк.ЗаполнитьОтчетыВФоне",
		ПараметрыЗаполнения, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура ЗавершениеЗаполнения(Результат, ДополнительныеПараметры) Экспорт

	ЗакрытьФормуДлительнойОперации();

	РезультатЗагрузки = РезультатФоновогоЗадания(Результат, Истина);
	Если РезультатЗагрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем в строках документа и дереве на форме ссылки на файлы со сформированными отчетами.
	ОбновитьСтрокиПоРезультатуЗаполнения(РезультатЗагрузки);

	Если ДополнительныеПараметры.КлючиСтрокОтчетов = Неопределено // Это заполнение по всем отчетам
		И РазворачиватьДерево Тогда
		РазвернутьДерево();
	КонецЕсли;
	
	ОтобразитьДополнениеНаименованияГруппНаКлиенте(ДеревоОтчетов.ПолучитьЭлементы());
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ТекущийКлючСтрокиОтчета) Тогда
		// Встанем на строку, которая была выделена перед запуском.
		СтрокаДереваОтчетов = НайтиОтчетВДеревеНаФорме(ДополнительныеПараметры.ТекущийКлючСтрокиОтчета, ДеревоОтчетов.ПолучитьЭлементы());
		Если СтрокаДереваОтчетов <> Неопределено Тогда
			Элементы.ДеревоОтчетов.ТекущаяСтрока = СтрокаДереваОтчетов.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	// Если ошибок не возникло, то покажем затухающее сообщение, чтобы пользователь знал, что все готово.
	// Если ошибки есть, то будут сообщения по ним.
	КоличествоОтчетов = РезультатЗагрузки.ОтчетностьПоКлючамСтрок.Количество();
	Если КоличествоОтчетов = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Отчет заполнен';
								|en = 'Report is filled in'");
	ИначеЕсли КоличествоОтчетов > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Отчеты заполнены';
								|en = 'Reports are filled in'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет автозаполняемых отчетов';
								|en = 'No reports to automatically fill in'");
	КонецЕсли;
	ПоказатьОповещениеПользователя(ТекстСообщения);

КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокиПоРезультатуЗаполнения(Знач РезультатЗаполнения)
	
	АдресРезультата = РезультатЗаполнения.АдресРезультата;
	РезультатЗаполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	ОтборПоСубъекту = Новый Структура("КлючСтрокиСубъекта");
	ОтборПоОтчету = Новый Структура("КлючСтрокиОтчета");
	
	ВспомогательноеДерево  = РеквизитФормыВЗначение("ДеревоОтчетов"); // Для возможности поиска используем дерево значений.
	ЕстьИзмененияВДереве   = Ложь;
	ИзмененныеСтрокиДерева = Новый Массив; // запоминаем строки текущего субъекта, которые были обновлены
	
	Для каждого СтрокаРезультата Из РезультатЗаполнения.Отчетность Цикл
		
		ЭтоТекущийСубъект = (СтрокаРезультата.КлючСтрокиСубъекта = ТекущийКлючСтрокиСубъекта);
		
		ОтборПоОтчету.КлючСтрокиОтчета = СтрокаРезультата.КлючСтрокиОтчета;
		Если ЭтоТекущийСубъект Тогда
			// Нужно заменить в дереве, т.к. оно сейчас является актуальным хранилищем данных.
			НайденныеСтроки = ВспомогательноеДерево.Строки.НайтиСтроки(ОтборПоОтчету, Истина);
		Иначе
			// Заменяем в табличной части документа.
			НайденныеСтроки = Объект.Отчетность.НайтиСтроки(ОтборПоОтчету);
		КонецЕсли;

		Если НайденныеСтроки.Количество() = 0 Тогда
			// В обычной ситуации сюда не должны зайти,
			// т.к. заполняем только существующие в документе строки, новых не создаем.
			Продолжить;
		КонецЕсли;
			
		// Заменяем данные в существующей строке
		НайденнаяСтрока = НайденныеСтроки[0];
		Если ЭтоТекущийСубъект Тогда
			ИзмененныеСтрокиДерева.Добавить(НайденнаяСтрока);
		КонецЕсли;

		НайденнаяСтрока.ДанныеОтсутствуют = СтрокаРезультата.ДанныеОтсутствуют;
		
		Если СтрокаРезультата.ДанныеОтсутствуют Тогда
			// Явно очистим ссылки на отчеты, если указано, что данных нет.
			НайденнаяСтрока.ОтчетСсылка   = Неопределено;
			НайденнаяСтрока.ФайлОтчета    = Неопределено;
			НайденнаяСтрока.ФайлОтчетаXML = Неопределено;
			НайденнаяСтрока.Доверенность  = Неопределено;
			НайденнаяСтрока.ФайлОтчетаСодержитЭП = Ложь;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаРезультата.ОтчетСсылка) Тогда
			// При заполнении была подобрана ссылка на регламентированный отчет, запоминаем ее.
			НайденнаяСтрока.ОтчетСсылка   = СтрокаРезультата.ОтчетСсылка;
			НайденнаяСтрока.ФайлОтчета    = Неопределено;
			НайденнаяСтрока.ФайлОтчетаXML = Неопределено;
			НайденнаяСтрока.Доверенность  = Неопределено;
			НайденнаяСтрока.ФайлОтчетаСодержитЭП = Ложь;
			Если ЭтоТекущийСубъект Тогда
				ПроверитьСостояниеСдачиЧерез1СОтчетность(НайденнаяСтрока);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаРезультата.ФайлОтчета) Тогда
			
			НайденнаяСтрока.ОтчетСсылка   = Неопределено;
			НайденнаяСтрока.ФайлОтчета    = СтрокаРезультата.ФайлОтчета;
			НайденнаяСтрока.ФайлОтчетаXML = СтрокаРезультата.ФайлОтчетаXML;
			НайденнаяСтрока.Доверенность  = Неопределено;
			НайденнаяСтрока.ФайлОтчетаСодержитЭП = СтрокаРезультата.ФайлОтчетаСодержитЭП;
			Если ЭтоТекущийСубъект Тогда
				НайденнаяСтрока.ПодписанЭП = ЭлектроннаяПодпись.УстановленныеПодписи(НайденнаяСтрока.ФайлОтчета).Количество() > 0;
			КонецЕсли;
			
		КонецЕсли;
		
		// После автоматического заполнения снимаем флаги ручного редактирования.
		ЗаполнитьЗначенияСвойств(НайденнаяСтрока, НаборПризнаковМодифицированности());

		Если ЭтоТекущийСубъект Тогда
			// Обновим доступные действия со строкой дерева.
			ЕстьИзмененияВДереве          = Истина;
			НайденнаяСтрока.ОтчетЗаполнен = ОтчетЗаполнен(НайденнаяСтрока);
			НайденнаяСтрока.ИндексКартинки = ИндексКартинкиПусто();
			СформироватьДоступныеДействия(ЭтотОбъект, НайденнаяСтрока);

		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьИзмененияВДереве Тогда

		ЗаполнитьНаименованияФайловОтчетов(ИзмененныеСтрокиДерева);
	 	ПроверитьНаличиеПодписей(ИзмененныеСтрокиДерева);
		ЗначениеВРеквизитФормы(ВспомогательноеДерево, "ДеревоОтчетов");
		ДеревоОтчетовИзменено = Истина;
		
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция КлючиСтрокОтчетовВГруппе(ЭлементыДереваОтчетов)
	
	Результат = Новый Массив;
	
	Для каждого ЭлементДерева Из ЭлементыДереваОтчетов Цикл
		Если ЗначениеЗаполнено(ЭлементДерева.КлючСтрокиОтчета) Тогда
			Если ЭлементДерева.Выгружать = 1 Тогда
				// Это отчет
				Результат.Добавить(ЭлементДерева.КлючСтрокиОтчета);
			КонецЕсли;
		Иначе
			// Это группа - надо собрать вложенные отчеты
			ЭлементыГруппы = ЭлементДерева.ПолучитьЭлементы();
			РезультатПоГруппе = КлючиСтрокОтчетовВГруппе(ЭлементыГруппы);
			Для каждого ЭлементРезультата Из РезультатПоГруппе Цикл
				Результат.Добавить(ЭлементРезультата);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ИдентификаторыОтчетовВГруппе(ЭлементыДереваОтчетов)
	
	Результат = Новый Массив;
	
	Для каждого ЭлементДерева Из ЭлементыДереваОтчетов Цикл
		Если ЗначениеЗаполнено(ЭлементДерева.КлючСтрокиОтчета) Тогда
			// Это отчет
			Результат.Добавить(ЭлементДерева.ПолучитьИдентификатор());
		Иначе
			// Это группа - надо собрать вложенные отчеты
			ЭлементыГруппы = ЭлементДерева.ПолучитьЭлементы();
			РезультатПоГруппе = ИдентификаторыОтчетовВГруппе(ЭлементыГруппы);
			Для каждого ЭлементРезультата Из РезультатПоГруппе Цикл
				Результат.Добавить(ЭлементРезультата);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ИдентификаторыАналогичныхОтчетовПоПериоду(ЭлементыДереваОтчетов, ДатаНачала, ДатаОкончания)
	
	Результат = Новый Массив;
	
	Для каждого ЭлементДерева Из ЭлементыДереваОтчетов Цикл
		Если ЗначениеЗаполнено(ЭлементДерева.КлючСтрокиОтчета) Тогда
			// Это отчет
			Если ЭлементДерева.Выгружать
				И ЭлементДерева.ДатаНачала >= ДатаНачала
				И ЭлементДерева.ДатаОкончания <= ДатаОкончания Тогда
				Результат.Добавить(ЭлементДерева.ПолучитьИдентификатор());
			КонецЕсли;
		Иначе
			// Это группа - надо собрать вложенные отчеты
			ЭлементыГруппы = ЭлементДерева.ПолучитьЭлементы();
			РезультатПоГруппе = ИдентификаторыАналогичныхОтчетовПоПериоду(ЭлементыГруппы, ДатаНачала, ДатаОкончания);
			Для каждого ЭлементРезультата Из РезультатПоГруппе Цикл
				Результат.Добавить(ЭлементРезультата);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОтчетыПоФормеБанка

&НаКлиенте
Процедура ОткрытьОтчетОтчетПоФормеБанка(СтрокаДереваОтчетов)
	
	// Запишем документ, чтобы к нему можно было прикреплять файлы.
	Если Не ЗаписатьНовыйОбъект() Тогда	
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ПараметрыФормыОтчетаПоФормеБанка(СтрокаДереваОтчетов.ПолучитьИдентификатор());
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.ИмяМакетаОтчета) Тогда
		ВызватьИсключение НСтр("ru = 'Не найден файл макета отчета';
								|en = 'Report template file is not found'");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючСтрокиОтчета", СтрокаДереваОтчетов.КлючСтрокиОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияОтчетаПоФормеБанка", ЭтотОбъект, ДополнительныеПараметры);
	
	
	ОткрытьФорму("Документ.ФинОтчетВБанк.Форма.ОтчетПоФормеБанка",
		ПараметрыФормы, ЭтотОбъект, Истина, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОтчетаПоФормеБанка(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияОтчета(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыОтчетаПоФормеБанка(ИдентификаторСтроки)

	СтрокаДереваОтчетов = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокаНастройки = НайтиСтрокуКомплекта(
		СтрокаДереваОтчетов.ИдентификаторСтрокиКомплекта,
		НастройкиКомплекта());

	Если СтрокаНастройки = Неопределено Тогда
		// Нет данных о настройках по умолчанию.
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнениеФинОтчетностиВБанки.ПустыеПараметрыОтчетаПоФормеБанка();
	
	ЗаполнитьОбщиеПараметрыОтчета(ПараметрыОтчета, СтрокаДереваОтчетов);
	
	ПараметрыОтчета.ТекущийКлючСтрокиОтчета = СтрокаДереваОтчетов.КлючСтрокиОтчета;
	ПараметрыОтчета.ТекущийФинОтчетВБанк    = Объект.Ссылка;
	ПараметрыОтчета.ИмяМакетаОтчета         = СтрокаНастройки.ИмяМакетаОтчета;
	ПараметрыОтчета.ЗаголовокОтчета         = ЗаполнениеФинОтчетностиВБанки.ЗаголовокОтчета(СтрокаДереваОтчетов,
		СтрокаНастройки);
	
	Возврат ПараметрыОтчета;

КонецФункции

#КонецОбласти
