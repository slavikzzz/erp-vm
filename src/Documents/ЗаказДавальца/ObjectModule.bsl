#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Рассчитывает сумму и дату поступления неотмененных строк поставки сырья.
//
// Возвращаемое значение:
//  Структура - структура с полями "Сумма", "ДатаПоступления".
//
Функция ЗалоговыеДанныеЗаказа() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Номенклатура 	КАК Номенклатура,
	|	Товары.Сумма 			КАК Сумма,
	|	Товары.ДатаПоступления 	КАК ДатаПоступления
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.Сумма), 0) КАК Сумма,
	|	ЕСТЬNULL(МАКСИМУМ(Товары.ДатаПоступления), ДАТАВРЕМЯ(1,1,1)) КАК ДатаПоступления
	|ИЗ
	|	Товары КАК Товары");
	
	Запрос.УстановитьПараметр("Товары", Материалы.Выгрузить(,"Номенклатура, Сумма, ДатаПоступления"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Новый Структура("Сумма, ДатаПоступления", Выборка.Сумма, Выборка.ДатаПоступления);
	
КонецФункции

// Рассчитывает количество неотмененных строк заявки
//
// Возвращаемое значение:
//  Число - количество неотмененных строк.
//
Функция КоличествоЗаказанныхСтрок() Экспорт
	
	Возврат Продукция.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество();
	
КонецФункции

// Рассчитывает сумму неотмененных строк заказа
//
// Возвращаемое значение:
//  Число - сумма неотмененных строк.
//
Функция СуммаЗаказанныхСтрок() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СуммаСНДС 	КАК СуммаСНДС,
	|	Товары.Отменено 	КАК Отменено
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.СуммаСНДС), 0) КАК СуммаСНДС
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено");
	
	Запрос.УстановитьПараметр("Товары", Продукция.Выгрузить(,"Номенклатура,СуммаСНДС,Отменено"));
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СуммаЗаказанныхСтрок = Выгрузка[0].СуммаСНДС;
	Возврат СуммаЗаказанныхСтрок;
	
КонецФункции

// Заполняет условия продаж в заказе поставщику
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения.
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Валюта) Тогда
		Валюта = УсловияПродаж.Валюта;
	КонецЕсли;
	
	НаправлениеДеятельности = УсловияПродаж.НаправлениеДеятельности;
	
	ИзмененаОрганизация = Ложь;
	ИзмененаФормаОплаты = ЗначениеЗаполнено(УсловияПродаж.ФормаОплаты) И УсловияПродаж.ФормаОплаты <> ФормаОплаты;
	
	ФормаОплаты = УсловияПродаж.ФормаОплаты;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ИзмененаОрганизация = ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация <> Организация;
		Если ИзмененаОрганизация Тогда
			Организация = УсловияПродаж.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Если ИзмененаОрганизация Или ИзмененаФормаОплаты Тогда
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Организация;
		СтруктураПараметров.ФормаОплаты			 	= ФормаОплаты;
		СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс") Тогда
			СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
			СтруктураПараметров.Организация    			= Организация;
			СтруктураПараметров.ФормаОплаты			 	= ФормаОплаты;
			СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;

			Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Склад) Тогда
		Склад = УсловияПродаж.Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) Тогда
		Контрагент = УсловияПродаж.Контрагент;
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		
		Если ЗначениеЗаполнено(УсловияПродаж.КонтактноеЛицо) И Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо = УсловияПродаж.КонтактноеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
			ПараметрыОбъектаССоглашением(),
			ХозяйственнаяОперация,
			Валюта);
	
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет, БанковскийСчетКонтрагента);
	
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности,  , Договор);
		КонецЕсли;
		
	КонецЕсли;
	
	ЦенаВключаетНДС    = УсловияПродаж.ЦенаВключаетНДС;
	ОплатаВВалюте      = УсловияПродаж.ОплатаВВалюте;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияПродаж.ГруппаФинансовогоУчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) Тогда
		
		ДатаОтгрузкиВСтроке = Дата(1,1,1);
		
		ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
		ДатаОтгрузкиВСтроке = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
			ДатаДокумента,
			Перечисления.Периодичность.День,
			УсловияПродаж.СрокПоставки) + 1;
		
		Если НеОтгружатьЧастями Тогда
			ДатаОтгрузки = ДатаОтгрузкиВСтроке;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из Продукция Цикл
			
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузкиВСтроке;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по торговому соглашению с клиентом
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		ПараметрыОтбора = Новый Структура("УчитыватьГруппыСкладов", Истина);
		ПараметрыОтбора.Вставить("ХозяйственныеОперации", ХозяйственнаяОперация);
		
		УсловияЗакупокПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Партнер, ПараметрыОтбора);
		Если УсловияЗакупокПоУмолчанию <> Неопределено Тогда
			ЗаполнитьУсловияПродаж(УсловияЗакупокПоУмолчанию);
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
КонецПроцедуры

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовДавальцев[НовыйСтатус];
	
	Если Согласован
	   И ЗначениеНовогоСтатуса <> Перечисления.СтатусыЗаказовДавальцев.Согласован
	   И ЗначениеНовогоСтатуса <> Перечисления.СтатусыЗаказовДавальцев.КПроизводству
	   И ЗначениеНовогоСтатуса <> Перечисления.СтатусыЗаказовДавальцев.КОтгрузке
	   И ЗначениеНовогоСтатуса <> Перечисления.СтатусыЗаказовДавальцев.Закрыт Тогда
	
		Согласован = Ложь;
	
	КонецЕсли;
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовДавальцев.Согласован
	 Или ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовДавальцев.КПроизводству
	 Или ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовДавальцев.КОтгрузке
	 Или ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовДавальцев.Закрыт Тогда
		
		// Статус изменился
		Если Статус <> Перечисления.СтатусыЗаказовДавальцев.Согласован
		   И Статус <> Перечисления.СтатусыЗаказовДавальцев.КПроизводству
		   И Статус <> Перечисления.СтатусыЗаказовДавальцев.КОтгрузке
		   И Статус <> Перечисления.СтатусыЗаказовДавальцев.Закрыт Тогда
			
			МассивСтрок = Материалы.НайтиСтроки(Новый Структура("ДатаПоступления", Дата(1, 1, 1)));
			Если МассивСтрок.Количество() > 0 Тогда
				
				ЖелаемаяДатаАктуальна = ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления >= Дата;
				
				Если ПоступлениеОднойДатой Тогда
					
					ДатаПоступления = ?(ЖелаемаяДатаАктуальна, ЖелаемаяДатаПоступления, Неопределено);
					
					Для Каждого СтрокаТЧ Из Материалы Цикл
						СтрокаТЧ.ДатаПоступления = ДатаПоступления;
					КонецЦикла;
					
				ИначеЕсли ЖелаемаяДатаАктуальна Тогда
					
					Для Каждого СтрокаТЧ Из МассивСтрок Цикл
						СтрокаТЧ.ДатаПоступления = ЖелаемаяДатаПоступления;
					КонецЦикла;
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Корректирует строки, по которым не была оформлено поступление или складские ордера или имеются расхождения по мерным товарам.
//
// Параметры:
// 		СтруктураПараметров - Структура - Структура параметров корректировки, конструктор: ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа().
//
// Возвращаемое значение:
// 		Структура
// 		*	КоличествоСтрок - Количество отмененных/скорректированных строк
// 		*	СуммаОтклонения - Сумма увеличения заказа из-за превышения отгрузки мерных товаров.
//
Функция СкорректироватьСтрокиЗаказа(СтруктураПараметров) Экспорт
	
	Если Не СтруктураПараметров.ОтменитьНеотработанныеСтроки
		И Не (СтруктураПараметров.СкорректироватьМерныеТовары Или СтруктураПараметров.СкорректироватьМерныеТоварыПоПриемке) Тогда
		Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(Неопределено)
	КонецЕсли;
	
	КоличествоСкорректированныхСтрок = 0;
	
	КорректироватьПродукцию = (СтруктураПараметров.ОтменитьНеотработанныеСтроки Или СтруктураПараметров.СкорректироватьМерныеТовары)
		И (СтруктураПараметров.ИмяТабличнойЧасти = "Товары" Или СтруктураПараметров.ИмяТабличнойЧасти = "Продукция");
	КорректироватьМатериалы = СтруктураПараметров.ОтменитьНеотработанныеСтроки Или СтруктураПараметров.СкорректироватьМерныеТоварыПоПриемке
		И (СтруктураПараметров.ИмяТабличнойЧасти = "Товары" Или СтруктураПараметров.ИмяТабличнойЧасти = "Материалы");
	
	Если Не СтруктураПараметров.ПроверятьОстатки Тогда
		
		СвойстваОтмененнойСтроки = Новый Структура("Отменено, СтатусУказанияСерий, ПричинаОтмены",
			Истина, 0, СтруктураПараметров.ПричинаОтмены);
		
		Если КорректироватьПродукцию Тогда
			
			Для каждого СтрокаТовары Из Продукция Цикл
				Если Не СтрокаТовары.Отменено Тогда
					
					ЗаполнитьЗначенияСвойств(СтрокаТовары, СвойстваОтмененнойСтроки);
					КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок + 1;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если КорректироватьМатериалы Тогда
			
			КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок + Материалы.Количество();
			Материалы.Очистить();
			
		КонецЕсли;
		
		Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(КоличествоСкорректированныхСтрок);
	КонецЕсли;
	
	Если КорректироватьПродукцию Тогда
		
		ПараметрыЗаполнения = ЗаказыСервер.ПараметрыЗаполненияДляОтменыСтрок();
		ПараметрыЗаполнения.МенеджерРегистра  = РегистрыНакопления.ЗаказыКлиентов;
		ПараметрыЗаполнения.ИмяТабличнойЧасти = "Продукция";
		ПараметрыЗаполнения.ПутиКДанным.Вставить("Назначение", "Назначение");
		
		ПараметрыОтмены = ЗаказыСервер.ПараметрыОтменыСтрокЗаказов();
		ПараметрыОтмены.ПричинаОтмены = ?(СтруктураПараметров.ОтменитьНеотработанныеСтроки,
			СтруктураПараметров.ПричинаОтмены, Справочники.ПричиныОтменыЗаказовКлиентов.ОтклонениеПриОтгрузкеМерныхТоваров);
		ПараметрыОтмены.КорректироватьСумму = Истина;
		ПараметрыОтмены.ОтменятьТолькоМерныеТовары = НЕ СтруктураПараметров.ОтменитьНеотработанныеСтроки
			И СтруктураПараметров.СкорректироватьМерныеТовары;
		ПараметрыОтмены.СкорректироватьМерныеТовары = СтруктураПараметров.СкорректироватьМерныеТовары;
		
		КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок
			+ ЗаказыСервер.ОтменитьНеотработанныеСтрокиПоОтгрузке(ЭтотОбъект, ПараметрыЗаполнения, ПараметрыОтмены).КоличествоСтрок;
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказДавальца));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если КорректироватьМатериалы Тогда
		
		ПараметрыЗаполнения = ЗаказыСервер.ПараметрыЗаполненияДляОтменыСтрок();
		ПараметрыЗаполнения.МенеджерРегистра  = РегистрыНакопления.ЗаказыПоставщикам;
		ПараметрыЗаполнения.ИмяТабличнойЧасти = "Материалы";
		
		ПараметрыОтмены = ЗаказыСервер.ПараметрыОтменыСтрокЗаказов();
		ПараметрыОтмены.УдалятьСтроки       = Истина;
		ПараметрыОтмены.КорректироватьСумму = Истина;
		ПараметрыОтмены.ОтменятьТолькоМерныеТовары = НЕ СтруктураПараметров.ОтменитьНеотработанныеСтроки
			И СтруктураПараметров.СкорректироватьМерныеТоварыПоПриемке;
		ПараметрыОтмены.СкорректироватьМерныеТовары = СтруктураПараметров.СкорректироватьМерныеТоварыПоПриемке;
		
		КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок
			+ ЗаказыСервер.ОтменитьНеотработанныеСтрокиПоПриемке(ЭтотОбъект, ПараметрыЗаполнения, ПараметрыОтмены).КоличествоСтрок;
		
	КонецЕсли;
	
	Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(КоличествоСкорректированныхСтрок);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ПустаяДата = '00010101';
	
	МатериалыМаксимальныйКодСтроки			= 0;
	ПродукцияМаксимальныйКодСтроки			= 0;
	Статус									= Перечисления.СтатусыЗаказовДавальцев.НеСогласован;
	ЖелаемаяДатаПоступления					= ПустаяДата;
	ДатаОтгрузки							= ПустаяДата;
	ДатаПоступления							= ПустаяДата;
	Согласован								= Ложь;
	НомерПоДаннымПартнера					= "";
	ДатаПоДаннымПартнера					= ПустаяДата;
	Назначение								= Неопределено;
	НазначениеМатериалы						= Неопределено;
	ИдентификаторПлатежа 					= Неопределено;
	СостояниеЗаполненияМногооборотнойТары	= Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	ДоговорНеОбязателен						= Ложь;
	
	Для Каждого СтрокаТЧ Из Продукция Цикл
		
		СтрокаТЧ.КодСтроки    = 0;
		СтрокаТЧ.ДатаОтгрузки = ПустаяДата;
		СтрокаТЧ.Отменено = Ложь;
		СтрокаТЧ.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка();
		
	КонецЦикла;
	
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	Для Каждого СтрокаТЧ Из Материалы Цикл
		
		СтрокаТЧ.КодСтроки       = 0;
		СтрокаТЧ.ДатаПоступления = ПустаяДата;
		СтрокаТЧ.Назначение      = ПустоеНазначение;
		
	КонецЦикла;
	
	ИнициализироватьДокумент();
	
	ВзаиморасчетыСервер.ПриКопировании(ЭтотОбъект);
	
	ЗаказДавальцаЛокализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);

	Автор = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Автор = Пользователи.ТекущийПользователь();
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		ЗаполнитьДокументПоСделке(ДанныеЗаполнения);
	КонецЕсли;
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(ЭтотОбъект, Ложь);
	
	ЗаказДавальцаЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	ВзаиморасчетыСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения);
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь",   Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	#Область Округление
	
	ПараметрыОкругления = Документы.ЗаказДавальца.ПараметрыТЧДляОкругления();
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления["Продукция"]);
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления["Материалы"]);
	
	#КонецОбласти
		
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Продукция", "ПродукцияМаксимальныйКодСтроки");
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Материалы", "МатериалыМаксимальныйКодСтроки");
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	Иначе
		ИдентификаторПлатежа = Неопределено;
	КонецЕсли; 
	
	ВзаиморасчетыСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	
	ГрафикИсполненияВДоговоре = Ложь;
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ЗначениеЗаполнено(Договор) Тогда
		ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ЗаданГрафикИсполнения");
	КонецЕсли;
	
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		Или ГрафикИсполненияВДоговоре Тогда
		
		СуммаАвансаДоОбеспечения = 0;
		СуммаПредоплатыДоОтгрузки = 0;
		
	Иначе

		ПродажиСервер.ЗаполнитьСуммыАвансаПредоплаты(ЭтотОбъект);
		
	КонецЕсли;
	
	Если Не НеОтгружатьЧастями Тогда
		
		НоваяДатаОтгрузки = Дата(1,1,1);
		
		Если Продукция.Количество() > 0 Тогда
			
			Если Статус = Перечисления.СтатусыЗаказовДавальцев.Согласован
			 Или Статус = Перечисления.СтатусыЗаказовДавальцев.КПроизводству Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Отменено", Ложь);
				СтрокиКОбеспечению = Продукция.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиКОбеспечению.Количество() > 0 Тогда
					
					ТаблицаСтрокКОбеспечению = Продукция.Выгрузить(СтрокиКОбеспечению, "ДатаОтгрузки");
					ТаблицаСтрокКОбеспечению.Сортировать("ДатаОтгрузки Возр");
					НоваяДатаОтгрузки = ТаблицаСтрокКОбеспечению[0].ДатаОтгрузки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДатаОтгрузки = НоваяДатаОтгрузки;
		
	Иначе
		ОбеспечениеВДокументахСервер.ЗаполнитьДатыОтгрузкиВТаблице(ДатаОтгрузки, Продукция, "ДатаОтгрузки");
	КонецЕсли;
	
	СтруктураЗалоговыхДанных = ЗалоговыеДанныеЗаказа();
	
	СуммаДокумента = СуммаЗаказанныхСтрок();
	СуммаЗалоговая = СтруктураЗалоговыхДанных.Сумма;
	
	НоваяДатаПоступления = Дата(1,1,1);
	
	Если Материалы.Количество() > 0 Тогда
		
		Если Статус = Перечисления.СтатусыЗаказовДавальцев.Согласован
			ИЛИ Статус = Перечисления.СтатусыЗаказовДавальцев.КПроизводству
			ИЛИ Статус = Перечисления.СтатусыЗаказовДавальцев.КОтгрузке
			ИЛИ Статус = Перечисления.СтатусыЗаказовДавальцев.Закрыт Тогда
			
			ТаблицаСтрок = Материалы.Выгрузить(, "ДатаПоступления");
			ТаблицаСтрок.Сортировать("ДатаПоступления Возр");
			НоваяДатаПоступления = ТаблицаСтрок[0].ДатаПоступления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи,
		Перечисления.СтатусыЗаказовДавальцев.НеСогласован);
	
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить("Касса");
		ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, МассивРеквизитов, Новый Массив);
	КонецЕсли;
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказДавальца));
	
	#Область ЗаполнениеНазначений
	
	ШаблонНазначения          = Документы.ЗаказДавальца.ШаблонНазначения(ЭтотОбъект);
	РеквизитыПроверки         = "НаправлениеДеятельности,Партнер,Договор";
	
	Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(Назначение, ШаблонНазначения, ЭтотОбъект, РеквизитыПроверки, Отказ);
	
	// Назначение материалов проверяется только после проверки заполнения документа,
	// так как до проверки не гарантируется заполнение всех ключевых реквизитов,
	// влияющих на подбор назначений.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ШаблонНазначенияМатериалы = Документы.ЗаказДавальца.ШаблонНазначенияМатериалы(ЭтотОбъект);
		
		Если Справочники.Назначения.ШаблоныРавны(ШаблонНазначения, ШаблонНазначенияМатериалы) Тогда
			НазначениеМатериалы = Назначение;
		Иначе
			Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(НазначениеМатериалы, ШаблонНазначенияМатериалы, ЭтотОбъект,
				РеквизитыПроверки, Отказ);
		КонецЕсли;
		
		ЗаполнитьПустыеНазначенияМатериалы();
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, 
			Метаданные.Документы.ЗаказДавальца.ТабличныеЧасти.Продукция.Имя);
	КонецЕсли;
	
	ЗаказДавальцаЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);

	Если Не ЗначениеЗаполнено(Автор) И ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	ШаблонНазначения          = Документы.ЗаказДавальца.ШаблонНазначения(ЭтотОбъект);
	ШаблонНазначенияМатериалы = Документы.ЗаказДавальца.ШаблонНазначенияМатериалы(ЭтотОбъект);
	ВидДеятельностиНДС = УчетНДСУП.ВидДеятельностиПоНалогообложениюНДС(НалогообложениеНДС, Организация, Дата);
	Справочники.Назначения.ПриЗаписиДокумента(Назначение, ШаблонНазначения, ЭтотОбъект, Партнер, ВидДеятельностиНДС);
	Справочники.Назначения.ПриЗаписиДокумента(НазначениеМатериалы, ШаблонНазначенияМатериалы, ЭтотОбъект, Партнер, ВидДеятельностиНДС);
	
	ЗаказДавальцаЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	///////////////////////////////////////////////////////////////////////////
	// Вспомогательные переменные
	
	СтатусДокументаСогласованИВыше = Ложь
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.Согласован
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.КПроизводству
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.КОтгрузке
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.Закрыт;
	
	СтатусДокументаКПроизводствуИВыше = Ложь
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.КПроизводству
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.КОтгрузке
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.Закрыт;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	///////////////////////////////////////////////////////////////////////////
	// Проверка реквизитов

#Область Док_Характеристики
	ПроверятьХарактеристику = Ложь;
	
	Если Не Номенклатура.Пустая() Тогда
		
		МассивВариантов = Новый Массив;
		МассивВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
		МассивВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры);
		МассивВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
		
		ПроверятьХарактеристику = Не (МассивВариантов.Найти(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользованиеХарактеристик")) = Неопределено);
		
	КонецЕсли;
	
	Если Не ПроверятьХарактеристику Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	КонецЕсли;
#КонецОбласти

#Область Тч__ХарактеристикиКоличество
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "Продукция";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	ПараметрыПроверки.ИмяТЧ = "Материалы";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверкиКоличества = Документы.ЗаказДавальца.ПараметрыТЧДляОкругления();
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(
		ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверкиКоличества["Продукция"]);
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(
		ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверкиКоличества["Материалы"]);
#КонецОбласти

#Область Тч__Серии
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
	                                            НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказДавальца),
	                                            Отказ,
	                                            МассивНепроверяемыхРеквизитов);
#КонецОбласти

#Область Док_Желаемаядатапоступления
	
	// Желамемая дата поступления
	Если Материалы.Количество() > 0 И ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru = 'Дата поступления должна быть не меньше даты документа %Дата%';
							|en = 'Date of receipt cannot be before the document date: %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ЖелаемаяДатаПоступления", , Отказ);
		
	КонецЕсли;
#КонецОбласти

#Область ПродукцияДатаОтгрузкиСклад
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.ДатаОтгрузки");
	
	ПараметрыВстраивания = Документы.ЗаказДавальца.ДоступныеОстаткиПараметрыВстраивания();
	ТаблицаОшибок = ОбеспечениеВДокументахСервер.ТаблицаОшибокЗаполнения(ЭтотОбъект, ПараметрыВстраивания);
	
	ЗаказНаГруппуСкладов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ЭтоГруппа");
	
	ДатаОтгрузкиОбязательна  = Ложь;
	СкладОбязателен          = Ложь;
	ШаблонТекстаДатаОтгрузки = НСтр("ru = 'Не заполнена колонка ""Дата отгрузки"" в строке %НомерСтроки% списка ""Выпускаемая продукция""';
									|en = 'Column ""Shipment date"" in line %НомерСтроки% of the ""Released products"" list is not filled in'");
	ШаблонТекстаСклад        = НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %НомерСтроки% списка ""Выпускаемая продукция""';
									|en = 'Column ""Warehouse"" in line %НомерСтроки% of the ""Released products"" list is not filled in'");
	
	Для ТекИндекс = 0 По ТаблицаОшибок.Количество() - 1 Цикл
		
		СтрокаОшибки = ТаблицаОшибок[ТекИндекс];
		
		Если СтрокаОшибки.ДатаОтгрузкиОбязательна И Не НеОтгружатьЧастями И СтрокаОшибки.ДатаОтгрузкиНеЗаполнена Тогда
			
			ТекстОшибки   = СтрЗаменить(ШаблонТекстаДатаОтгрузки, "%НомерСтроки%", СтрокаОшибки.НомерСтроки);
			ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", СтрокаОшибки.НомерСтроки, "ДатаОтгрузки");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТабЧасти, , Отказ);
			
		КонецЕсли;
		
		Если СтрокаОшибки.СкладОбязателен И ЗначениеЗаполнено(Склад) И ЗаказНаГруппуСкладов И СтрокаОшибки.СкладНеЗаполнен Тогда
			
			ТекстОшибки   = СтрЗаменить(ШаблонТекстаСклад, "%НомерСтроки%", СтрокаОшибки.НомерСтроки);
			ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", СтрокаОшибки.НомерСтроки, "Склад");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТабЧасти, , Отказ);
			
		КонецЕсли;
		СкладОбязателен = СкладОбязателен Или СтрокаОшибки.СкладОбязателен;
		ДатаОтгрузкиОбязательна = ДатаОтгрузкиОбязательна Или СтрокаОшибки.ДатаОтгрузкиОбязательна;
		
	КонецЦикла;
	
#КонецОбласти

#Область Тч__ПричинаотменыЦенаИСумма
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Цена");
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Сумма");
	
	Для ТекИндекс = 0 По Продукция.Количество() - 1 Цикл
		
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Товары""';
								|en = 'in line %НомерСтроки% of the ""Goods"" list'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Продукция[ТекИндекс].НомерСтроки);
		
		ТекСтрока = Продукция[ТекИндекс];
		АдресОшибки = СтрШаблон(
			НСтр("ru = 'в строке %1 списка ""Выпускаемая продукция"".';
				|en = 'in line %1 of the ""Released products"" list.'"),
			ТекСтрока.НомерСтроки);
			
		// Дата отгрузки в тч Продукция должна быть не меньше даты документа
		Если Не НеОтгружатьЧастями
			И ЗначениеЗаполнено(ТекСтрока.ДатаОтгрузки)
			И ТекСтрока.ДатаОтгрузки < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата отгрузки %1 должна быть не меньше даты документа %2';
								|en = 'Shipping date %1 must be not less than document date %2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, АдресОшибки, Формат(Дата,"ДЛФ=DD"));
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", ТекСтрока.НомерСтроки, "ДатаОтгрузки");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Причина отмены обязательна для заполнения в строках с признаком Отменено
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов")
			И ТекСтрока.Отменено
			И Не ЗначениеЗаполнено(ТекСтрока.ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru = 'Необходимо указать причину отмены %1';
								|en = '%1 cancellation reason is required'");
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", ТекСтрока.НомерСтроки, "ПричинаОтмены");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстОшибки, АдресОшибки), ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Цена
		Если ТекСтрока.Цена = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'Необходимо указать цену услуг по переработке %1';
								|en = 'Specify price for processing services %1'");
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", ТекСтрока.НомерСтроки, "Цена");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстОшибки, АдресОшибки), ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Сумма
		Если ТекСтрока.Сумма = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'Необходимо указать стоимость услуг по переработке %1';
								|en = 'Specify the %1 processing service cost'");
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", ТекСтрока.НомерСтроки, "Сумма");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстОшибки, АдресОшибки), ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
#КонецОбласти

#Область Тч__ПричинаотменыИДатапоступления
	МассивНепроверяемыхРеквизитов.Добавить("Материалы.ДатаПоступления");
	
	Для ТекИндекс = 0 По Материалы.Количество()-1 Цикл
		
		ТекСтрока = Материалы[ТекИндекс];
		
		АдресОшибки = СтрШаблон(
			НСтр("ru = 'в строке %1 списка ""Сырье и материалы для производства"".';
				|en = 'in line %1 of the ""Raw and consumable materials for production"" list.'"),
			ТекСтрока.НомерСтроки);
		
		// Дата поступления в тч Материалы обязательна к заполнению только для заказов в статусах Согласован и выше
		Если СтатусДокументаСогласованИВыше
			И Не ПоступлениеОднойДатой 
			И Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Дата поступления"" %1';
								|en = 'The ""Date of receipt"" column is not filled in%1'");
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", ТекСтрока.НомерСтроки, "ДатаПоступления");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстОшибки, АдресОшибки), ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Дата поступления в тч Товары должна быть не меньше даты документа
		Если Не НеОтгружатьЧастями 
			И ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) 
			И ТекСтрока.ДатаПоступления < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата поступления должна быть не меньше даты документа %1 %2';
								|en = 'Date of receipt cannot be less than document date %1 %2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Формат(Дата, "ДЛФ=DD"), АдресОшибки);
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", ТекСтрока.НомерСтроки, "ДатаПоступления");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
#КонецОбласти

#Область Док_Датапоступления
	
	Если Не ПоступлениеОднойДатой
	 Или Не СтатусДокументаСогласованИВыше Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПоступления");
		
	КонецЕсли;
	
	Если ПоступлениеОднойДатой
		И ЗначениеЗаполнено(ДатаПоступления)
		И ДатаПоступления < НачалоДня(Дата) И Материалы.Количество() > 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Дата поступления должна быть не меньше даты документа %Дата%';
							|en = 'Date of receipt cannot be before the document date: %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаПоступления", , Отказ);
		
	КонецЕсли;
#КонецОбласти

#Область Док_ДатаОтгрузки
	
	ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "Продукция", "Отменено");
	
	Если НеОтгружатьЧастями
		И ЗначениеЗаполнено(ДатаОтгрузки)
		И ДатаОтгрузки < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru = 'Дата отгрузки должна быть не меньше даты документа %Дата%';
							|en = 'Shipment date cannot be less than document date%Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаОтгрузки", , Отказ);
		
	КонецЕсли;

	Если Не ДатаОтгрузкиОбязательна Или Не НеОтгружатьЧастями Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");
	КонецЕсли;
	
	Если Не НеОтгружатьЧастями Или ВсеСтрокиОтменены Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
#КонецОбласти

#Область СкладПродукции
	
	Если Не СкладОбязателен Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
#КонецОбласти

#Область Док_ДатаОтгрузкиИПоступления
	
	МинимальнаяДатаПоступления = ДатаОтгрузки;
	
	Если ПоступлениеОднойДатой И ЗначениеЗаполнено(ДатаПоступления) И ДатаПоступления > МинимальнаяДатаПоступления Тогда
		МинимальнаяДатаПоступления = ДатаПоступления;
	Иначе
		Для Каждого СтрокаМатериалов Из Материалы Цикл
			Если ЗначениеЗаполнено(СтрокаМатериалов.ДатаПоступления) И СтрокаМатериалов.ДатаПоступления > МинимальнаяДатаПоступления Тогда
				МинимальнаяДатаПоступления = СтрокаМатериалов.ДатаПоступления;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МинимальнаяДатаПоступления) И ЗначениеЗаполнено(ДатаОтгрузки) И МинимальнаяДатаПоступления > ДатаОтгрузки Тогда
		
		ТекстОшибки = НСтр("ru = 'Дата отгрузки должна быть не меньше даты поступления материалов';
							|en = 'Shipment date should not be earlier than the date of material receipt'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаОтгрузки", , Отказ);
		
	КонецЕсли;
	
	Если ПоступлениеОднойДатой Тогда
		
		ПроверяемаяДата = ДатаПоступления;
		
		Если НеОтгружатьЧастями Тогда
			КонтрольнаяДата = ДатаОтгрузки;
		Иначе
			
			КонтрольнаяДата = Дата(3999,1,1);
			Для Каждого СтрокаПродукции Из Продукция Цикл
				КонтрольнаяДата = Мин(СтрокаПродукции.ДатаОтгрузки, КонтрольнаяДата);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПроверяемаяДата) И ЗначениеЗаполнено(КонтрольнаяДата) И ПроверяемаяДата > КонтрольнаяДата Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата поступления материалов должна быть меньше даты отгрузки продукции';
								|en = 'Date of material receipt must be less than shipment date'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаПоступления", , Отказ);
			
		КонецЕсли;
		
	Иначе
		
		ДатыОтгрузкиПродукции 		= Новый Соответствие;
		ОтборСпецификации			= Новый Структура("Спецификация");
		
		Если НеОтгружатьЧастями Тогда
			КонтрольнаяДата = ДатаОтгрузки;
		Иначе
			КонтрольнаяДата = Дата(1,1,1);
		КонецЕсли;
		
		Для Каждого СтрокаМатериалов Из Материалы Цикл
			
			ПроверяемаяДата = СтрокаМатериалов.ДатаПоступления;
			
			Если Не НеОтгружатьЧастями Тогда
				
				Если ДатыОтгрузкиПродукции[СтрокаМатериалов.Спецификация] = Неопределено Тогда
					
					ОтборСпецификации.Спецификация = СтрокаМатериалов.Спецификация;
					
					ОтобранныеСтроки = Продукция.НайтиСтроки(ОтборСпецификации);
					Для Каждого ОтобраннаяСтрока Из ОтобранныеСтроки Цикл
						КонтрольнаяДата = Макс(КонтрольнаяДата, ОтобраннаяСтрока.ДатаОтгрузки);
					КонецЦикла;
					
					ДатыОтгрузкиПродукции.Вставить(СтрокаМатериалов.Спецификация, КонтрольнаяДата);
					
				Иначе
					КонтрольнаяДата = ДатыОтгрузкиПродукции[СтрокаМатериалов.Спецификация];
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПроверяемаяДата) И ЗначениеЗаполнено(КонтрольнаяДата) И ПроверяемаяДата > КонтрольнаяДата Тогда
				
				ТекстОшибки = НСтр("ru = 'Дата поступления материалов должна быть меньше даты отгрузки продукции в строке %1 списка Сырье и материалы';
									|en = 'The materials receipt date must be less than the manufactured products shipment date in line %1 of the Raw and consumable materials list'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаМатериалов.НомерСтроки);
				ПутьКТЧ 	= ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", СтрокаМатериалов.НомерСтроки, "ДатаПоступления");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
					
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти

#Область Док_Подразделение
	МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	
	Если Статус <> Перечисления.СтатусыЗаказовДавальцев.НеСогласован
		И Статус <> Перечисления.СтатусыЗаказовДавальцев.Согласован
		И Не ЗначениеЗаполнено(Подразделение) Тогда 
		
		ТекстОшибки = НСтр("ru = 'Необходимо указать подразделение';
							|en = 'Specify business unit'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Подразделение", , Отказ);
		
	КонецЕсли;
#КонецОбласти

#Область Доставка
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
#КонецОбласти

#Область МногооборотнаяТара
	
	МассивНепроверяемыхРеквизитов.Добавить("Материалы.Цена");
	МассивНепроверяемыхРеквизитов.Добавить("Материалы.Сумма");
	
	Если Не ВернутьМногооборотнуюТару И ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		
		ТипыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Материалы.ВыгрузитьКолонку("Номенклатура"), "ТипНоменклатуры");
		
		Для Каждого Строка Из Материалы Цикл
			Если ТипыНоменклатуры[Строка.Номенклатура].ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.Цена) Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Цена"" в строке %НомерСтроки% списка ""Товары""';
									|en = '""Price"" in line %НомерСтроки% of the ""Goods"" list is not filled in'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Строка.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", Строка.НомерСтроки, "Цена"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.Сумма) Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Сумма"" в строке %НомерСтроки% списка ""Товары""';
									|en = '""Amount"" in line %НомерСтроки% of the ""Goods"" list is not filled in'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Строка.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", Строка.НомерСтроки, "Сумма"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти

#Область Договор

	Если ДоговорНеОбязателен Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	
#КонецОбласти

	///////////////////////////////////////////////////////////////////////////
	// Исключим проверенные реквизиты из дальнейшей проверки
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	///////////////////////////////////////////////////////////////////////////
	// Проверка остальных реквизитов
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	СтруктураЗалоговыхДанных = ЗалоговыеДанныеЗаказа();
	
	СуммаДокумента = СуммаЗаказанныхСтрок();
	СуммаЗалоговая = СтруктураЗалоговыхДанных.Сумма;
	
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект, Отказ);
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект, Отказ);
	
	Если СтатусДокументаКПроизводствуИВыше Тогда
		ПродажиСервер.ПроверитьЗапретОтгрузки(Партнер, Отказ);
	КонецЕсли;
	
	ЗаказДавальцаЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(Ссылка, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);
	
	ЗаказДавальцаЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(Ссылка, Отказ, Истина);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ, Истина);
	
	ЗаказДавальцаЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Валюта                = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	Организация           = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад                 = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	СкладПоступления      = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(СкладПоступления);
	Если Не ЗначениеЗаполнено(Менеджер) Тогда
		Менеджер = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Организация;
	СтруктураПараметров.БанковскийСчет			= БанковскийСчет;
	
	БанковскийСчет        = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    	= Организация;
	СтруктураПараметров.ФормаОплаты		= ФормаОплаты;
	СтруктураПараметров.Касса			= Касса;
	
	Касса                 = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
	Приоритет             = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
		
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовДавальцев") Тогда
		Статус = Перечисления.СтатусыЗаказовДавальцев.Закрыт;
	Иначе
		Статус = Перечисления.СтатусыЗаказовДавальцев.НеСогласован;
	КонецЕсли;
	
	ОбеспечениеВДокументахСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(Продукция, Истина);
	
	// Очистка назначения при копировании.
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	Для Каждого СтрокаТаблицы Из Материалы Цикл
		СтрокаТаблицы.Назначение = ПустоеНазначение;
	КонецЦикла;
	
	ПараметрыЗаполнения = Документы.ЗаказДавальца.ПараметрыЗаполненияНалогообложенияНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения);
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий.Вставить("СкорректироватьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЭтотОбъект));
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ЭтотОбъект, СтруктураДействий, КэшированныеЗначения);
	
	Если КэшированныеЗначения.ОбработанныеСтроки.Количество() Тогда
		
		ТаблицаПродукция = Продукция.Выгрузить();
		ТаблицаПродукция.Колонки.Добавить("СтавкаНДС");
		ТаблицаПродукция.ЗаполнитьЗначения(СтавкаНДС, "СтавкаНДС");
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ЭтотОбъект);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТаблицаПродукция, СтруктураДействий, Неопределено);
		
		Продукция.Загрузить(ТаблицаПродукция);
		
	КонецЕсли;
	
	УправлениеПроизводством2_2 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	
	ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоСделке(ДанныеЗаполнения)
	
	Сделка = ДанныеЗаполнения;
	Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Партнер");
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПараметрыОбъектаССоглашением(ИменаРеквизитов = "")
	
	Если ПустаяСтрока(ИменаРеквизитов) Тогда
		ИменаРеквизитов = "Партнер, Договор, Контрагент, Организация, ПорядокРасчетов";
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
	
	ПараметрыОбъекта.Вставить("Соглашение", Справочники.СоглашенияСКлиентами.ПустаяСсылка());
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

Процедура ЗаполнитьПустыеНазначенияМатериалы()
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Для Счетчик = 1 По Материалы.Количество() Цикл
		
		Строка = Материалы[Счетчик - 1];
		
		Если Не ЗначениеЗаполнено(Строка.Назначение) Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Индекс = Счетчик - 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Индекс       КАК Индекс,
		|	Таблица.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|//////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Индекс КАК Индекс
		|ИЗ
		|	ВтТовары КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО СпрНоменклатура.Ссылка = Таблица.Номенклатура
		|ГДЕ
		|	СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)";
		
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Материалы[Выборка.Индекс].Назначение = НазначениеМатериалы;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
