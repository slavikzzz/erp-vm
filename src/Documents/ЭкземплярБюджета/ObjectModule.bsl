#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПланов[НовыйСтатус];
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	//++ НЕ УТКА
	ПроверитьНаличиеБюджетнойЗадачи(Отказ);
	//-- НЕ УТКА
	ПроверитьДействиеМоделиБюджетирования(РежимЗаписи, Отказ);
	
	ПараметрыОпции = Новый Структура("МодельБюджетирования", МодельБюджетирования);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУтверждениеБюджетов", ПараметрыОпции) Тогда
		Статус = Перечисления.СтатусыПланов.Утвержден;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("ОтложенноеПроведение",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "ПроводитьЭкземплярыБюджетовОтложено"));
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	Если ДополнительныеСвойства.ОтложенноеПроведение Тогда
		БюджетированиеСервер.ПоставитьДокументВОчередьПроведения(Ссылка);
		БюджетированиеСервер.ЗапуститьОтложенноеПроведениеФоновымЗаданием(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	СтруктураПараметров = Новый Структура("МодельБюджетирования", МодельБюджетирования);
	
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоОрганизациям", СтруктураПараметров) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Организация");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоПодразделениям", СтруктураПараметров) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	КонецЕсли;
	
	ИспользоватьУтверждениеБюджетов = ПолучитьФункциональнуюОпцию("ИспользоватьУтверждениеБюджетов", СтруктураПараметров);
	СтатусСохраненногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Статус");

	Если ИспользоватьУтверждениеБюджетов 
		И Не Пользователи.РолиДоступны("УтверждениеЭкземпляровБюджетов",, Ложь) Тогда
			ЕстьОшибкаДоступа = Истина;
			
			Если Статус = Перечисления.СтатусыПланов.Утвержден Тогда
				ТекстОшибки = НСтр("ru = 'Нет доступа на утверждение экземпляров бюджетов.';
									|en = 'No access to approve Budget entry forms.'");
			ИначеЕсли СтатусСохраненногоДокумента = Перечисления.СтатусыПланов.Утвержден Тогда
				ТекстОшибки = НСтр("ru = 'Нет доступа на изменение утвержденных экземпляров бюджетов.';
									|en = 'No access to change the confirmed Budget entry forms.'");
			Иначе
				ЕстьОшибкаДоступа = Ложь;
			КонецЕсли;
			
			Если ЕстьОшибкаДоступа Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					, // Поле
					, // ПутьКДанным
					Отказ);
			КонецЕсли;
	КонецЕсли;
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("НачалоПериода") Тогда
		НачалоПериода = ДанныеЗаполнения.НачалоПериода;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ОкончаниеПериода") Тогда
		ОкончаниеПериода = ДанныеЗаполнения.ОкончаниеПериода;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ВидБюджета") Тогда
		ВидБюджета = ДанныеЗаполнения.ВидБюджета;
		МодельБюджетирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "Владелец");
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Сч = 1;
		Пока Сч <= МаксимальноеКоличествоАналитик Цикл
			Если ДанныеЗаполнения.Свойство("Аналитика" + Сч) Тогда
				ЭтотОбъект["Аналитика" + Сч] = ДанныеЗаполнения["Аналитика" + Сч];
			КонецЕсли;
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(НачалоПериода) ИЛИ Не ЗначениеЗаполнено(ОкончаниеПериода) Тогда
		
		ТекущаяДата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
			НачалоПериода = ТекущаяДата;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОкончаниеПериода) Тогда
			ОкончаниеПериода = ТекущаяДата;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидБюджета) Тогда
			Справочники.ВидыБюджетов.ВыровнятьДатыПоПериодичностиБюджета(ВидБюджета, НачалоПериода, ОкончаниеПериода);
		КонецЕсли;
		
	КонецЕсли;
	
	ГраницаФактДанных = Справочники.ВидыБюджетов.ГраницаФактическихДанныхПоВидуБюджета(ВидБюджета, НачалоПериода);
	
	Если Не ЗначениеЗаполнено(МодельБюджетирования) Тогда
		МодельБюджетирования = Справочники.МоделиБюджетирования.МодельБюджетированияПоУмолчанию();
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ПроверитьНаличиеБюджетнойЗадачи(Отказ)
	
	Если ДополнительныеСвойства.Свойство("БюджетнаяЗадача") И ЗначениеЗаполнено(ДополнительныеСвойства.БюджетнаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("МодельБюджетирования", МодельБюджетирования);

	ИспользоватьБюджетныйПроцесс = ПолучитьФункциональнуюОпцию("ИспользоватьБюджетныйПроцесс", СтруктураПараметров);

	Если ИспользоватьБюджетныйПроцесс И НЕ Пользователи.РолиДоступны("РедактированиеДанныхБюджетированияВнеПроцессов")
		И НЕ Пользователи.ЭтоПолноправныйПользователь(, , Истина) Тогда
		
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			ТекстОшибки = НСтр("ru = 'Создание документа возможно только из бюджетной задачи.';
								|en = 'Document can be created only from the budget task.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				, // Поле
				, // ПутьКДанным
				Отказ);
		Иначе	
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	БюджетнаяЗадачаСписокДокументов.Ссылка КАК Ссылка
			|ИЗ
			|	Задача.БюджетнаяЗадача.СписокДокументов КАК БюджетнаяЗадачаСписокДокументов
			|ГДЕ
			|	БюджетнаяЗадачаСписокДокументов.Документ = &Документ
			|	И НЕ БюджетнаяЗадачаСписокДокументов.Ссылка.Выполнена
			|	И НЕ БюджетнаяЗадачаСписокДокументов.Ссылка.ПометкаУдаления
			|	И БюджетнаяЗадачаСписокДокументов.Ссылка.Исполнитель = &Исполнитель
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	БюджетнаяЗадачаУтверждаемыеДокументы.Ссылка
			|ИЗ
			|	Задача.БюджетнаяЗадача.УтверждаемыеДокументы КАК БюджетнаяЗадачаУтверждаемыеДокументы
			|ГДЕ
			|	БюджетнаяЗадачаУтверждаемыеДокументы.Документ = &Документ
			|	И НЕ БюджетнаяЗадачаУтверждаемыеДокументы.Ссылка.Выполнена
			|	И НЕ БюджетнаяЗадачаУтверждаемыеДокументы.Ссылка.ПометкаУдаления
			|	И БюджетнаяЗадачаУтверждаемыеДокументы.Ссылка.Исполнитель = &Исполнитель";
			
			Запрос.УстановитьПараметр("Документ", Ссылка);
			Запрос.УстановитьПараметр("Исполнитель", Пользователи.ТекущийПользователь());
			
			Если Запрос.Выполнить().Пустой() Тогда
				ТекстОшибки = НСтр("ru = 'Изменения запрещены, т.к. нет активной бюджетной задачи.';
									|en = 'Changes are prohibited as there is no active budget task.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					, // Поле
					, // ПутьКДанным
					Отказ);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
//-- НЕ УТКА

Процедура ПроверитьДействиеМоделиБюджетирования(РежимЗаписи, Отказ)
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Действует = Справочники.МоделиБюджетирования.МодельБюджетированияДействует(МодельБюджетирования);
		Если НЕ Действует Тогда
			ТекстОшибки = НСтр("ru = 'Проведение документа запрещено, модель бюджетирования не действует.';
								|en = 'Cannot post the document, budgeting model is invalid.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,,,
					Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли
