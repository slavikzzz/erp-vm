#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс
// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "УведомлениеОПредоставленииПолномочийПредставителю";
	КомандаПечати.Представление = НСтр("ru = 'Печать';
										|en = 'Печать'");

КонецПроцедуры

Функция ДанныеИзФайлаОбмена(
	ВходящиеДанные,
	ОбновлятьСуществующийИлиСсылкаИлиРежим = Ложь,
	Организация = Неопределено) Экспорт
	
	ДанныеУведомления = Новый Структура;
	
	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;
	ДокументОбработки = ПодготовитьДокументDOM(ТекущиеДанные);
	
	Если ЭтоФайл Тогда
		ТекущиеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	ДанныеУведомления.Вставить("ДанныеВыгрузки", ТекущиеДанные);
	
	СведенияУведомления = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/ЭДПФР/УПУП/ДокументПодтверждающийПолномочия");
	Если СведенияУведомления.Количество() = 1 Тогда
		ЭлементВыборки = СведенияУведомления[0];
		ДанныеУведомления.Вставить("НаименованиеДокумента", ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:Наименование"));
		ДанныеУведомления.Вставить("НомерДокумента", ПолучитьЗначениеДокумента(ЭлементВыборки, "Номер"));
		ДанныеУведомления.Вставить("КемВыдан", ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:КемВыдан"));
		ДанныеУведомления.Вставить("ДатаНачалаДействия",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "ДатаНачалаДействия", '00010101'));
		ДанныеУведомления.Вставить("ДатаОкончанияДействия",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "ДатаОкончанияДействия", '00010101'));
	КонецЕсли;
	
	ДанныеУведомления.Вставить("ФИО", Новый Массив);
	ДанныеУведомления.Вставить("КонтактнаяИнформация", Новый Массив);
	ДанныеУведомления.Вставить("РеквизитыСубъектов", Новый Массив);
	ДанныеУведомления.Вставить("ТипОрганизации", "");
	
	СведенияСтраховательЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
		"/ЭДПФР/УПУП/Страхователь/ЮЛ");
	СведенияСтраховательФЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
		"/ЭДПФР/УПУП/Страхователь/ИП");
	
	Если СведенияСтраховательЮЛ.Количество() = 1 Тогда
		ДанныеУведомления.ТипОрганизации = "ЮЛ";
		СведенияСтрахователя = СведенияСтраховательЮЛ;
		
	ИначеЕсли СведенияСтраховательФЛ.Количество() = 1 Тогда
		ДанныеУведомления.ТипОрганизации = "ФЛ";
		СведенияСтрахователя = СведенияСтраховательФЛ;
		
	КонецЕсли;
	
	РеквизитыПоискаОрганизации = Новый Соответствие;
	
	Если СведенияСтрахователя.Количество() = 1 Тогда
		ЭлементВыборки = СведенияСтрахователя[0];
		Если ДанныеУведомления.ТипОрганизации = "ЮЛ" Тогда
			
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СтраховательЮЛ"));
			НоваяСтрока.Вставить("Наименование",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:Наименование"));
			НоваяСтрока.Вставить("НаименованиеКраткое",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:НаименованиеКраткое"));
			НоваяСтрока.Вставить("РегистрационныйНомерПФР",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:РегНомер"));
			НоваяСтрока.Вставить("ИНН",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:ИНН"));
			НоваяСтрока.Вставить("КПП",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:КПП"));
			ДанныеУведомления.РеквизитыСубъектов.Добавить(НоваяСтрока);
			ДанныеУведомления.Вставить("Страхователь_Наименование", НоваяСтрока.Наименование);
			
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СтраховательЮЛ"));
			НоваяСтрока.Вставить("АдресЭлПочты",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:АдресЭлПочты"));
			НоваяСтрока.Вставить("Телефон",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:Телефон"));
			ДанныеУведомления.КонтактнаяИнформация.Добавить(НоваяСтрока);
				
			РеквизитыПоискаОрганизации.Вставить("ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:ИНН"));
			ДанныеУведомления.Вставить("РегНомерПФР", ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:РегНомер"));
			
		ИначеЕсли ДанныеУведомления.ТипОрганизации = "ФЛ" Тогда
			
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СтраховательФЛ"));
			НоваяСтрока.Вставить("РегистрационныйНомерПФР",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:РегНомер"));
			НоваяСтрока.Вставить("ИНН",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:ИНН"));
			НоваяСтрока.Вставить("СНИЛС",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:СНИЛС"));
			ДанныеУведомления.РеквизитыСубъектов.Добавить(НоваяСтрока);
			
			НоваяСтрока = Новый Структура;
			СведенияСтрахователяФизЛицоФИО = ПолучитьВыборкуЭлементовDOM(
				ДокументОбработки,
				"/ЭДПФР/УПУП/Страхователь/ИП/УТ2:ФИО");
			ЭлементВыборкиФИО = СведенияСтрахователяФизЛицоФИО[0];
			
			НоваяСтрока.Вставить("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СтраховательФЛ"));
			НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(ЭлементВыборкиФИО, "УТ2:Фамилия"));
			НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(ЭлементВыборкиФИО, "УТ2:Имя"));
			НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(ЭлементВыборкиФИО, "УТ2:Отчество"));
			ДанныеУведомления.ФИО.Добавить(НоваяСтрока);
			ДанныеУведомления.Вставить("Страхователь_Наименование",
				НоваяСтрока.Фамилия + " " + НоваяСтрока.Имя + " " + НоваяСтрока.Отчество);
			
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СтраховательФЛ"));
			НоваяСтрока.Вставить("АдресЭлПочты",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:АдресЭлПочты"));
			НоваяСтрока.Вставить("Телефон",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:Телефон"));
			ДанныеУведомления.КонтактнаяИнформация.Добавить(НоваяСтрока);
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:ИНН"));
			ДанныеУведомления.Вставить("РегНомерПФР", ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:РегНомер"));
			
		КонецЕсли;
	КонецЕсли;
	
	СведенияПредставителяФизЛицо = ПолучитьВыборкуЭлементовDOM(
		ДокументОбработки, "/ЭДПФР/УПУП/УполномоченныйПредставитель/ПредставительФизЛицо");
	СведенияПредставителяЮЛ = ПолучитьВыборкуЭлементовDOM(
		ДокументОбработки, "/ЭДПФР/УПУП/УполномоченныйПредставитель/ПредставительЮЛ");
	СведенияПредставителяИП = ПолучитьВыборкуЭлементовDOM(
		ДокументОбработки, "/ЭДПФР/УПУП/УполномоченныйПредставитель/ПредставительИП");
	
	Если СведенияПредставителяФизЛицо.Количество() = 1 Тогда
		ЭлементВыборки = СведенияПредставителяФизЛицо[0];
		
		СведенияПредставителяФизЛицоФИО = ПолучитьВыборкуЭлементовDOM(
			ДокументОбработки,
			"/ЭДПФР/УПУП/УполномоченныйПредставитель/ПредставительФизЛицо/УТ2:ФИО");
		ЭлементВыборкиФИО = СведенияПредставителяФизЛицоФИО[0];
		
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СотрудникПредставителя"));
		НоваяСтрока.Вставить("СНИЛС",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:СНИЛС"));
		ДанныеУведомления.РеквизитыСубъектов.Добавить(НоваяСтрока);
		
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СотрудникПредставителя"));
		НоваяСтрока.Вставить("Фамилия",
			ПолучитьЗначениеДокумента(ЭлементВыборкиФИО, "УТ2:Фамилия"));
		НоваяСтрока.Вставить("Имя",
			ПолучитьЗначениеДокумента(ЭлементВыборкиФИО, "УТ2:Имя"));
		НоваяСтрока.Вставить("Отчество",
			ПолучитьЗначениеДокумента(ЭлементВыборкиФИО, "УТ2:Отчество"));
		НоваяСтрока.Вставить("Должность",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "Должность"));
		ДанныеУведомления.ФИО.Добавить(НоваяСтрока);
		
		НаименованиеФизЛица = НоваяСтрока.Фамилия + " " + НоваяСтрока.Имя + " " + НоваяСтрока.Отчество;
		ДанныеУведомления.Вставить("Представитель", НаименованиеФизЛица);
		ДанныеУведомления.Вставить("ПредставительСотрудник", НаименованиеФизЛица);
		
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СотрудникПредставителя"));
		НоваяСтрока.Вставить("АдресЭлПочты",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:АдресЭлПочты"));
		НоваяСтрока.Вставить("Телефон",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:Телефон"));
		ДанныеУведомления.КонтактнаяИнформация.Добавить(НоваяСтрока);
	КонецЕсли;
	
	Если СведенияПредставителяЮЛ.Количество() = 1 Тогда
		ЭлементВыборки = СведенияПредставителяЮЛ[0];
		
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.ПредставительЮЛ"));
		НоваяСтрока.Вставить("Наименование",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:Наименование"));
		НоваяСтрока.Вставить("НаименованиеКраткое",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:НаименованиеКраткое"));
		НоваяСтрока.Вставить("РегистрационныйНомерПФР",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:РегНомер"));
		НоваяСтрока.Вставить("ИНН",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:ИНН"));
		НоваяСтрока.Вставить("КПП",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:КПП"));
		ДанныеУведомления.РеквизитыСубъектов.Добавить(НоваяСтрока);
		
		ДанныеУведомления.Вставить("Представитель", ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:Наименование"));
		
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.ПредставительЮЛ"));
		НоваяСтрока.Вставить("АдресЭлПочты",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:АдресЭлПочты"));
		НоваяСтрока.Вставить("Телефон",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:Телефон"));
		ДанныеУведомления.КонтактнаяИнформация.Добавить(НоваяСтрока);
		
	ИначеЕсли СведенияПредставителяИП.Количество() = 1 Тогда
		ЭлементВыборки = СведенияПредставителяИП[0];
		
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.ПредставительФЛ"));
		НоваяСтрока.Вставить("РегистрационныйНомерПФР",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:РегНомер"));
		НоваяСтрока.Вставить("ИНН",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:ИНН"));
		НоваяСтрока.Вставить("СНИЛС",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:СНИЛС"));
		ДанныеУведомления.РеквизитыСубъектов.Добавить(НоваяСтрока);
		
		НоваяСтрока = Новый Структура;
		СведенияПредставителяФизЛицоФИО = ПолучитьВыборкуЭлементовDOM(
			ДокументОбработки,
			"/ЭДПФР/УПУП/УполномоченныйПредставитель/ПредставительИП/УТ2:ФИО");
		ЭлементВыборкиФИО = СведенияПредставителяФизЛицоФИО[0];
		
		НоваяСтрока.Вставить("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.ПредставительФЛ"));
		НоваяСтрока.Вставить("Фамилия",
			ПолучитьЗначениеДокумента(ЭлементВыборкиФИО, "УТ2:Фамилия"));
		НоваяСтрока.Вставить("Имя",
			ПолучитьЗначениеДокумента(ЭлементВыборкиФИО, "УТ2:Имя"));
		НоваяСтрока.Вставить("Отчество",
			ПолучитьЗначениеДокумента(ЭлементВыборкиФИО, "УТ2:Отчество"));
		ДанныеУведомления.ФИО.Добавить(НоваяСтрока);
		
		НаименованиеФизЛица = НоваяСтрока.Фамилия + " " + НоваяСтрока.Имя + " " + НоваяСтрока.Отчество;
		ДанныеУведомления.Вставить("Представитель", НаименованиеФизЛица);
		
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.ПредставительФЛ"));
		НоваяСтрока.Вставить("АдресЭлПочты",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:АдресЭлПочты"));
		НоваяСтрока.Вставить("Телефон",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:Телефон"));
		ДанныеУведомления.КонтактнаяИнформация.Добавить(НоваяСтрока);
		
	КонецЕсли;
	
	СведенияПредставителяСотрудника = ПолучитьВыборкуЭлементовDOM(
		ДокументОбработки, "/ЭДПФР/УПУП/ПредставительСотрудник");
	
	Если СведенияПредставителяСотрудника.Количество() = 1 Тогда
		ЭлементВыборки = СведенияПредставителяСотрудника[0];
		
		НоваяСтрока = Новый Структура;
		СведенияПредставителяСотрудникаФИО = ПолучитьВыборкуЭлементовDOM(
			ДокументОбработки, "/ЭДПФР/УПУП/ПредставительСотрудник/УТ2:ФИО");
		ЭлементВыборкиФИО = СведенияПредставителяСотрудникаФИО[0];
		
		НоваяСтрока.Вставить("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СотрудникСтрахователя"));
		НоваяСтрока.Вставить("Фамилия",
			ПолучитьЗначениеДокумента(ЭлементВыборкиФИО, "УТ2:Фамилия"));
		НоваяСтрока.Вставить("Имя",
			ПолучитьЗначениеДокумента(ЭлементВыборкиФИО, "УТ2:Имя"));
		НоваяСтрока.Вставить("Отчество",
			ПолучитьЗначениеДокумента(ЭлементВыборкиФИО, "УТ2:Отчество"));
		НоваяСтрока.Вставить("Должность",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "УТ2:Должность"));
		ДанныеУведомления.ФИО.Добавить(НоваяСтрока);
		
		НаименованиеФизЛица = НоваяСтрока.Фамилия + " " + НоваяСтрока.Имя + " " + НоваяСтрока.Отчество;
		ДанныеУведомления.Вставить("СтраховательСотрудник", НаименованиеФизЛица);
		
	КонецЕсли;
	
	ДанныеУведомления.Вставить("Страхователь",
	НайтиДокументИБ(Справочники.Организации.ПустаяСсылка(), РеквизитыПоискаОрганизации));
	Если НЕ ЗначениеЗаполнено(ДанныеУведомления.Страхователь) И ДанныеУведомления.Свойство("Страхователь_Наименование")
		И ЗначениеЗаполнено(ДанныеУведомления.Страхователь_Наименование) Тогда
		ДанныеУведомления.Страхователь = ДанныеУведомления.Страхователь_Наименование;
	КонецЕсли;
	
	ДанныеУведомления.Вставить("Организация", ?(ЗначениеЗаполнено(Организация), Организация, ДанныеУведомления.Страхователь));
	ДанныеУведомления.Вставить("Дата", ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(ДанныеУведомления.Организация) Тогда
		Если ТипЗнч(ДанныеУведомления.Организация) = Тип("Строка")
			И СтрДлина(СокрЛП(ДанныеУведомления.РегНомерПФР)) <> 10 Тогда
			КодОрганаПФР = Лев(ДанныеУведомления.РегНомерПФР, 7);
			ОрганПФР = Справочники.ОрганыПФР.НайтиПоКоду(КодОрганаПФР);
		Иначе
			КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
			ОрганПФР = КонтекстЭДОСервер.ОпределитьОрганПФРОрганизации(ДанныеУведомления.Организация);
		КонецЕсли;
		
		ДанныеУведомления.Вставить("Получатель", ОрганПФР);
	КонецЕсли;
	
	Возврат ДанныеУведомления;
	
КонецФункции

Функция ВыгрузитьУведомление(Уведомление) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат КонтекстЭДОСервер.ВыгрузитьУведомлениеОПредоставленииПолномочийПредставителю(Уведомление);
	
КонецФункции

Функция ЗагрузитьДокументИзФайлаОбмена(
		ВходящиеДанные,
		ОбновлятьСуществующийИлиСсылкаИлиРежим = Ложь,
		Подпись = Неопределено,
		Организация = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", 		Ложь);
	Результат.Вставить("Ссылка", 			Неопределено);
	Результат.Вставить("НомерДокумента",	"");
	Результат.Вставить("Ошибка", 			"");
	
	ДанныеПодготовленны = 0;
	КлючевыеРеквизиты = "";
	ТекстОшибки = "";
	Успешно = Истина;
	
	Попытка
		ДанныеУведомления = ДанныеИзФайлаОбмена(ВходящиеДанные, ОбновлятьСуществующийИлиСсылкаИлиРежим);
	Исключение
		Результат.Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Успешно = Ложь;
	КонецПопытки;
	
	Если Успешно Тогда
		КлючевыеРеквизиты = "Страхователь, Представитель";
		
		КлючевыеРеквизиты = Новый Структура(КлючевыеРеквизиты);
		
		Для каждого СтрокаКлюча Из КлючевыеРеквизиты Цикл
			Если ДанныеУведомления.Свойство(СтрокаКлюча.Ключ) 
				И ЗначениеЗаполнено(ДанныеУведомления[СтрокаКлюча.Ключ]) Тогда
				ДанныеПодготовленны = ДанныеПодготовленны + 1;
			ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнены реквизиты справочника';
									|en = 'Не заполнены реквизиты справочника'") + ":  " + СтрокаКлюча.Ключ;
			Иначе
				ТекстОшибки = ТекстОшибки + ", " + СтрокаКлюча.Ключ;
			КонецЕсли;
		КонецЦикла;
		
		Если КлючевыеРеквизиты.Количество() = ДанныеПодготовленны Тогда
			ТекущийЭлемент = ЗаписатьДокумент(ДанныеУведомления, ОбновлятьСуществующийИлиСсылкаИлиРежим);
			Если ТекущийЭлемент = "ЗапрещеноОбновлятьСуществующий" Тогда
				Результат.Выполнено = Истина;
				Результат.Ошибка 	= "ЗапрещеноОбновлятьСуществующий";
			ИначеЕсли ЗначениеЗаполнено(ТекущийЭлемент) Тогда
				Результат.Выполнено = Истина;
				Результат.Ссылка 	= ТекущийЭлемент;
			Иначе
				Результат.Ошибка 	= НСтр("ru = 'Не удалось запись документ. Подробности в журнале регистрации';
											|en = 'Не удалось запись документ. Подробности в журнале регистрации'");
			КонецЕсли;
		Иначе
			Результат.Ошибка = ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучательУведомления(Организация) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Именно так определяется код ПФ при отправке заявления и отчетов в СФР
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ОпределитьОрганПФРОрганизации(Организация);
	
КонецФункции

Функция ПечатнаяФорма(Уведомление) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	КонтекстЭДОСервер		= ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ДействуетФорматАФ245д	= КонтекстЭДОСервер.ДействуетФорматАФ245д();
	
	Если ДействуетФорматАФ245д Тогда
		Бланк = Документы.УведомлениеОПредоставленииПолномочийПредставителю.ПолучитьМакет("УПУПАФ_2_45д");
	КонецЕсли;
	
	ЗаполнитьШапку(Уведомление, ТабДокумент, Бланк);
	ЗаполнитьСтрахователя(Уведомление, ТабДокумент, Бланк);
	ЗаполнитьОтступ(Уведомление, ТабДокумент, Бланк);
	ЗаполнитьПодвалСтр1(Уведомление, ТабДокумент, Бланк);
	ЗаполнитьШапкуСтр2(Уведомление, ТабДокумент, Бланк);
	ЗаполнитьПредставителя(Уведомление, ТабДокумент, Бланк, ДействуетФорматАФ245д);
	ЗаполнитьСведенияОДокументе(Уведомление, ТабДокумент, Бланк, ДействуетФорматАФ245д);
	ЗаполнитьОтступ(Уведомление, ТабДокумент, Бланк);
	ЗаполнитьПодвал(Уведомление, ТабДокумент, Бланк);
	
	ЗаполнитьПодпись(Уведомление, ТабДокумент);
	
	ТабДокумент.МасштабПечати = 100;
	Возврат ТабДокумент;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Для каждого СтрокаМассиваОбъектов Из МассивОбъектов Цикл
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"УведомлениеОПредоставленииПолномочийПредставителю",
			НСтр("ru = 'Уведомление о предоставлении полномочий представителю';
				|en = 'Уведомление о предоставлении полномочий представителю'"),
			ПечатнаяФорма(СтрокаМассиваОбъектов));
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьВозможностьВыгрузки(ОбъектИлиСсылка) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектИлиСсылка) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю") Тогда
		Уведомление = ОбъектИлиСсылка.ПолучитьОбъект();
	Иначе
		Уведомление = ОбъектИлиСсылка;
	КонецЕсли;
	
	// основные
	
	Если ЗначениеЗаполнено(Уведомление.НомерДокумента)
		ИЛИ ЗначениеЗаполнено(Уведомление.НаименованиеДокумента)
		ИЛИ ЗначениеЗаполнено(Уведомление.КемВыдан)
		ИЛИ ЗначениеЗаполнено(Уведомление.ДатаНачалаДействия) Тогда
		
		Если НЕ ЗначениеЗаполнено(Уведомление.НомерДокумента) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан номер документа';
					|en = 'Не задан номер документа'"), "НомерДокумента"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Уведомление.НаименованиеДокумента) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано наименование документа';
					|en = 'Не задано наименование документа'"), "НаименованиеДокумента"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Уведомление.КемВыдан) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не указано кем выдан документ';
					|en = 'Не указано кем выдан документ'"), "КемВыдан"));
		КонецЕсли;
		
		ДатаСеанса = ТекущаяДатаСеанса();
		ГодДатыСеанса = Год(ДатаСеанса);
		МинимальнаяДата = Дата(1900, 1, 1);
		ГодМаксимальнойДаты = Цел((ГодДатыСеанса + 50) / 100) * 100 + 99;
		МаксимальнаяДата = Дата(ГодМаксимальнойДаты, 1, 1);
		МаксимальнаяДата = КонецГода(МаксимальнаяДата);
		
		Если НЕ ЗначениеЗаполнено(Уведомление.ДатаНачалаДействия) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана дата начала действия';
					|en = 'Не задана дата начала действия'"), "ДатаНачалаДействия"));
		ИначеЕсли Уведомление.ДатаНачалаДействия < МинимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата начала действия не может быль раньше %1';
						|en = 'Дата начала действия не может быль раньше %1'"),
					Формат(МинимальнаяДата, "ДЛФ=Д")),
					"ДатаНачалаДействия"));
		ИначеЕсли Уведомление.ДатаНачалаДействия > МаксимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата начала действия не может быль позднее %1';
						|en = 'Дата начала действия не может быль позднее %1'"),
					Формат(МаксимальнаяДата, "ДЛФ=Д")),
					"ДатаНачалаДействия"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Уведомление.ДатаОкончанияДействия)
		И Уведомление.ДатаОкончанияДействия < МинимальнаяДата Тогда
		
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата окончания действия не может быль раньше %1';
					|en = 'Дата окончания действия не может быль раньше %1'"),
				Формат(МинимальнаяДата, "ДЛФ=Д")),
				"ДатаОкончания"));
	ИначеЕсли ЗначениеЗаполнено(Уведомление.ДатаОкончанияДействия)
		И Уведомление.ДатаОкончанияДействия > МаксимальнаяДата Тогда
		
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата окончания действия не может быль позднее %1';
					|en = 'Дата окончания действия не может быль позднее %1'"),
				Формат(МаксимальнаяДата, "ДЛФ=Д")),
				"ДатаОкончания"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Уведомление.ДатаНачалаДействия) И ЗначениеЗаполнено(Уведомление.ДатаОкончанияДействия)
		И Уведомление.ДатаНачалаДействия > Уведомление.ДатаОкончанияДействия Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Дата начала действия документа не может быть больше даты окончания действия';
					|en = 'Дата начала действия документа не может быть больше даты окончания действия'"), "ДатаОкончания"));
	КонецЕсли;
	
	// страхователь
	РеквизитыСтрахователя = Неопределено;
	Страхователь_ЮридическоеЛицо = Ложь;
	
	СтраховательЮЛ = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СтраховательЮЛ");
	РеквизитыСтрахователяЮЛ = Уведомление.РеквизитыСубъектов.НайтиСтроки(Новый Структура("Владелец", СтраховательЮЛ));
	Если ЗначениеЗаполнено(РеквизитыСтрахователяЮЛ) Тогда
		РеквизитыСтрахователя = РеквизитыСтрахователяЮЛ[0];
		Страхователь_ЮридическоеЛицо = Истина;
	КонецЕсли;
	
	СтраховательФЛ = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СтраховательФЛ");
	РеквизитыСтрахователяФЛ = Уведомление.РеквизитыСубъектов.НайтиСтроки(Новый Структура("Владелец", СтраховательФЛ));
	Если ЗначениеЗаполнено(РеквизитыСтрахователяФЛ) Тогда
		РеквизитыСтрахователя = РеквизитыСтрахователяФЛ[0];
	КонецЕсли;
	
	КонтактнаяИнформацияСтрахователяЮЛ = Уведомление.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Владелец",
		?(Страхователь_ЮридическоеЛицо,
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СтраховательЮЛ"),
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СтраховательФЛ"))));
	
	Если НЕ ЗначениеЗаполнено(Уведомление.Страхователь) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан страхователь';
				|en = 'Не задан страхователь'"), "Страхователь"));
	ИначеЕсли Страхователь_ЮридическоеЛицо Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыСтрахователя.РегистрационныйНомерПФР) Тогда
			ТекстСообщенияПользователю = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(
				НСтр("ru = 'Не задан регистрационный номер СФР страхователя';
					|en = 'Не задан регистрационный номер СФР страхователя'"), Истина);
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле", ТекстСообщенияПользователю));
		ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьРегистрационныйНомерПФР(
			РеквизитыСтрахователя.РегистрационныйНомерПФР, Истина, Истина) Тогда
			ТекстСообщенияПользователю = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(
				НСтр("ru = 'Регистрационный номер СФР должен состоять из 10 цифр (ХХХХХХХХХХ) или 12 цифр (ХХХ-ХХХ-ХХХХХХ)';
					|en = 'Регистрационный номер СФР должен состоять из 10 цифр (ХХХХХХХХХХ) или 12 цифр (ХХХ-ХХХ-ХХХХХХ)'"), Истина);
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле", ТекстСообщенияПользователю));
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(РеквизитыСтрахователя.Наименование) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано наименование страхователя';
					|en = 'Не задано наименование страхователя'")));
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(РеквизитыСтрахователя.НаименованиеКраткое) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано краткое наименование страхователя';
					|en = 'Не задано краткое наименование страхователя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыСтрахователя.ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН страхователя';
					|en = 'Не задан ИНН страхователя'")));
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			РеквизитыСтрахователя.ИНН, Ложь) Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН страхователя';
					|en = 'Указан некорректный ИНН страхователя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыСтрахователя.КПП) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан КПП организации страхователя';
					|en = 'Не задан КПП организации страхователя'")));
		ИначеЕсли СтрДлина(РеквизитыСтрахователя.КПП) <> 9 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный КПП страхователя';
					|en = 'Указан некорректный КПП страхователя'")));
		КонецЕсли;
	Иначе
		Фамилия = "";
		Имя = "";
		
		ФИОСтрахователяФЛ = Уведомление.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СтраховательФЛ")));
		Если ЗначениеЗаполнено(ФИОСтрахователяФЛ) Тогда
			Фамилия = ФИОСтрахователяФЛ[0].Фамилия;
			Имя = ФИОСтрахователяФЛ[0].Имя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Фамилия) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана фамилия страхователя';
					|en = 'Не задана фамилия страхователя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Имя) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано имя страхователя';
					|en = 'Не задано имя страхователя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыСтрахователя.ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН страхователя';
					|en = 'Не задан ИНН страхователя'")));
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			РеквизитыСтрахователя.ИНН, Истина) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН страхователя';
					|en = 'Указан некорректный ИНН страхователя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыСтрахователя.СНИЛС) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан СНИЛС страхователя';
					|en = 'Не задан СНИЛС страхователя'")));
		ИначеЕсли СтрДлина(РеквизитыСтрахователя.СНИЛС) <> 14 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный СНИЛС страхователя';
					|en = 'Указан некорректный СНИЛС страхователя'")));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Уведомление.СтраховательСотрудник) Тогда
		ДолжностьСотрудникаСтрахователя = Уведомление.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СотрудникСтрахователя")));
		Если ЗначениеЗаполнено(ДолжностьСотрудникаСтрахователя) Тогда
			Если НЕ ЗначениеЗаполнено(ДолжностьСотрудникаСтрахователя[0].Должность) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не указана должность представителя страхователя';
						|en = 'Не указана должность представителя страхователя'")));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Телефон = "";
	АдресЭлектроннойПочты = "";
	Если ЗначениеЗаполнено(КонтактнаяИнформацияСтрахователяЮЛ) Тогда
		Телефон					= КонтактнаяИнформацияСтрахователяЮЛ[0].Телефон;
		АдресЭлектроннойПочты	= КонтактнаяИнформацияСтрахователяЮЛ[0].АдресЭлПочты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Телефон) ИЛИ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		Если НЕ ЗначениеЗаполнено(Телефон) И НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан телефон страхователя';
					|en = 'Не задан телефон страхователя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) И НЕ ЗначениеЗаполнено(Телефон) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан адрес электронной почты страхователя';
					|en = 'Не задан адрес электронной почты страхователя'")));
		ИначеЕсли ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
			ТекстОшибки = "";
			ЭлектроннаяПочта = СокрЛП(АдресЭлектроннойПочты);
			Если ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
				ЭлектроннаяПочта,
				НСтр("ru = 'Адрес электронной почты ';
					|en = 'Адрес электронной почты '"),
				"АдресЭлектроннойПочты",
				Истина,
				ТекстОшибки) Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				ТекстОшибки));
				
			ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта) Тогда
				
				Если НЕ СтрНайти(ЭлектроннаяПочта, "@") Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Некорректно указана электронная почта страхователя. Отсутствует символ @';
							|en = 'Некорректно указана электронная почта страхователя. Отсутствует символ @'")));
				Иначе
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Электронная почта страхователя содержит некорректные сочетания символов';
							|en = 'Электронная почта страхователя содержит некорректные сочетания символов'")));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Необходимо задать хотя бы один вид контактной информации страхователя';
				|en = 'Необходимо задать хотя бы один вид контактной информации страхователя'")));
	КонецЕсли;
	
	// представитель
	РеквизитыПредставителя = Неопределено;
	Представитель_ЮридическоеЛицо = Ложь;
	
	ПредставительЮЛ = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.ПредставительЮЛ");
	РеквизитыПредставителяЮЛ = Уведомление.РеквизитыСубъектов.НайтиСтроки(Новый Структура("Владелец", ПредставительЮЛ));
	Если ЗначениеЗаполнено(РеквизитыПредставителяЮЛ) Тогда
		РеквизитыПредставителя = РеквизитыПредставителяЮЛ[0];
		Представитель_ЮридическоеЛицо = Истина;
	КонецЕсли;
	
	ПредставительФЛ = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.ПредставительФЛ");
	РеквизитыПредставителяФЛ = Уведомление.РеквизитыСубъектов.НайтиСтроки(Новый Структура("Владелец", ПредставительФЛ));
	Если ЗначениеЗаполнено(РеквизитыПредставителяФЛ) Тогда
		РеквизитыПредставителя = РеквизитыПредставителяФЛ[0];
	КонецЕсли;
	
	ПредставительСотрудникПредставителя = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СотрудникПредставителя");
	РеквизитыСотрудникаПредставителя = Уведомление.РеквизитыСубъектов.НайтиСтроки(Новый Структура("Владелец", ПредставительСотрудникПредставителя));
	Если ЗначениеЗаполнено(РеквизитыСотрудникаПредставителя) Тогда
		РеквизитыСотрудникПредставителя = РеквизитыСотрудникаПредставителя[0];
	КонецЕсли;
	
	КонтактнаяИнформацияПредставителя = Уведомление.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Владелец",
		?(Представитель_ЮридическоеЛицо,
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.ПредставительЮЛ"),
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.ПредставительФЛ"))));
	
	Если НЕ ЗначениеЗаполнено(Уведомление.Представитель) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан представитель';
				|en = 'Не задан представитель'"), "Представитель"));
	ИначеЕсли Представитель_ЮридическоеЛицо Тогда
		Если НЕ ЗначениеЗаполнено(РеквизитыПредставителя.РегистрационныйНомерПФР) Тогда
			ТекстСообщенияПользователю = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(
				НСтр("ru = 'Не задан регистрационный номер СФР представителя';
					|en = 'Не задан регистрационный номер СФР представителя'"), Истина);
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле", ТекстСообщенияПользователю));
		ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьРегистрационныйНомерПФР(
			РеквизитыПредставителя.РегистрационныйНомерПФР, Истина, Истина) Тогда
			ТекстСообщенияПользователю = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(
				НСтр("ru = 'Регистрационный номер СФР должен состоять из 10 цифр (ХХХХХХХХХХ) или 12 цифр (ХХХ-ХХХ-ХХХХХХ)';
					|en = 'Регистрационный номер СФР должен состоять из 10 цифр (ХХХХХХХХХХ) или 12 цифр (ХХХ-ХХХ-ХХХХХХ)'"), Истина);
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле", ТекстСообщенияПользователю));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыПредставителя.Наименование) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано наименование представителя';
					|en = 'Не задано наименование представителя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыПредставителя.НаименованиеКраткое) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано краткое наименование представителя';
					|en = 'Не задано краткое наименование представителя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыПредставителя.ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН представителя';
					|en = 'Не задан ИНН представителя'"), ""));
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			РеквизитыПредставителя.ИНН, Ложь) Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН представителя';
					|en = 'Указан некорректный ИНН представителя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыПредставителя.КПП) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан КПП организации представителя';
					|en = 'Не задан КПП организации представителя'")));
		ИначеЕсли СтрДлина(РеквизитыПредставителя.КПП) <> 9 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный КПП представителя';
					|en = 'Указан некорректный КПП представителя'")));
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(РеквизитыСотрудникаПредставителя) Тогда
		Фамилия = "";
		Имя = "";
		
		ФИОПредставителяФЛ = Уведомление.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.ПредставительФЛ")));
		Если ЗначениеЗаполнено(ФИОПредставителяФЛ) Тогда
			ФИОПредставителяФЛ = ФИОПредставителяФЛ[0];
				
			Фамилия = ФИОПредставителяФЛ.Фамилия;
			Имя = ФИОПредставителяФЛ.Имя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Фамилия) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана фамилия представителя';
					|en = 'Не задана фамилия представителя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Имя) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано имя представителя';
					|en = 'Не задано имя представителя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыПредставителя.ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН представителя';
					|en = 'Не задан ИНН представителя'")));
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			РеквизитыПредставителя.ИНН, Истина) Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН представителя';
					|en = 'Указан некорректный ИНН представителя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыПредставителя.СНИЛС) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан СНИЛС представителя';
					|en = 'Не задан СНИЛС представителя'")));
		ИначеЕсли СтрДлина(РеквизитыПредставителя.СНИЛС) <> 14 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный СНИЛС представителя';
					|en = 'Указан некорректный СНИЛС представителя'")));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Уведомление.Представитель) 
		И (Представитель_ЮридическоеЛицо ИЛИ НЕ ЗначениеЗаполнено(РеквизитыСотрудникаПредставителя)) Тогда
		Телефон = "";
		АдресЭлектроннойПочты = "";
		Если ЗначениеЗаполнено(КонтактнаяИнформацияПредставителя) Тогда
			Телефон					= КонтактнаяИнформацияПредставителя[0].Телефон;
			АдресЭлектроннойПочты	= КонтактнаяИнформацияПредставителя[0].АдресЭлПочты;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Телефон) ИЛИ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
			Если НЕ ЗначениеЗаполнено(Телефон) И НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан телефон представителя';
						|en = 'Не задан телефон представителя'")));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) И НЕ ЗначениеЗаполнено(Телефон) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан адрес электронной почты представителя';
						|en = 'Не задан адрес электронной почты представителя'")));
			ИначеЕсли ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
				ТекстОшибки = "";
				ЭлектроннаяПочта = СокрЛП(АдресЭлектроннойПочты);
				Если ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
					ЭлектроннаяПочта,
					НСтр("ru = 'Адрес электронной почты ';
						|en = 'Адрес электронной почты '"),
					"АдресЭлектроннойПочты",
					Истина,
					ТекстОшибки) Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						ТекстОшибки));
					
				ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта) Тогда
					
					Если НЕ СтрНайти(ЭлектроннаяПочта, "@") Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Некорректно указана электронная почта представителя. Отсутствует символ @';
								|en = 'Некорректно указана электронная почта представителя. Отсутствует символ @'")));
					Иначе
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Электронная почта представителя содержит некорректные сочетания символов';
								|en = 'Электронная почта представителя содержит некорректные сочетания символов'")));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Необходимо задать хотя бы один вид контактной информации представителя';
					|en = 'Необходимо задать хотя бы один вид контактной информации представителя'")));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыСотрудникаПредставителя) Тогда
		Фамилия = "";
		Имя = "";
		
		КонтактнаяИнформацияПредставителя = Уведомление.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СотрудникПредставителя")));
		
		ФИОСтрахователяФЛ = Уведомление.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СотрудникПредставителя")));
		Если ЗначениеЗаполнено(ФИОСтрахователяФЛ) Тогда
			ФИОСтрахователяФЛ = ФИОСтрахователяФЛ[0];
			
			Фамилия = ФИОСтрахователяФЛ.Фамилия;
			Имя = ФИОСтрахователяФЛ.Имя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Фамилия) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана фамилия сотрудника представителя';
				|en = 'Не задана фамилия сотрудника представителя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Имя) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задано имя сотрудника представителя';
				|en = 'Не задано имя сотрудника представителя'")));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыСотрудникПредставителя.СНИЛС) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан СНИЛС физического лица';
					|en = 'Не задан СНИЛС физического лица'")));
		ИначеЕсли СтрДлина(РеквизитыСотрудникПредставителя.СНИЛС) <> 14 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный СНИЛС физического лица';
					|en = 'Указан некорректный СНИЛС физического лица'")));
		КонецЕсли;
		
		Телефон = "";
		АдресЭлектроннойПочты = "";
		Если ЗначениеЗаполнено(КонтактнаяИнформацияПредставителя) Тогда
			Телефон					= КонтактнаяИнформацияПредставителя[0].Телефон;
			АдресЭлектроннойПочты	= КонтактнаяИнформацияПредставителя[0].АдресЭлПочты;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Телефон) ИЛИ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
			Если НЕ ЗначениеЗаполнено(Телефон) И НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан телефон представителя';
						|en = 'Не задан телефон представителя'")));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) И НЕ ЗначениеЗаполнено(Телефон) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан адрес электронной почты представителя';
						|en = 'Не задан адрес электронной почты представителя'")));
			ИначеЕсли ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
				ТекстОшибки = "";
				ЭлектроннаяПочта = СокрЛП(АдресЭлектроннойПочты);
				Если ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
					ЭлектроннаяПочта,
					НСтр("ru = 'Адрес электронной почты ';
						|en = 'Адрес электронной почты '"),
					"АдресЭлектроннойПочты",
					Истина,
					ТекстОшибки) Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки));
					
				ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта) Тогда
					
					Если НЕ СтрНайти(ЭлектроннаяПочта, "@") Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Некорректно указана электронная почта представителя. Отсутствует символ @';
								|en = 'Некорректно указана электронная почта представителя. Отсутствует символ @'")));
					Иначе
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Электронная почта представителя содержит некорректные сочетания символов';
								|en = 'Электронная почта представителя содержит некорректные сочетания символов'")));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Необходимо задать хотя бы один вид контактной информации представителя';
					|en = 'Необходимо задать хотя бы один вид контактной информации представителя'")));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	// инициализируем контекст ЭДО - модуль обработки
	ТекстСообщения = "";
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщения);
	Если КонтекстЭДО = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КонтекстЭДО.ОбработкаПолученияФормы("Документ", "УведомлениеОПредоставленииПолномочийПредставителю", ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьШапку(Уведомление, ТабДокумент, Бланк)
	
	ОбластьШапка = Бланк.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Уведомление о предоставлении полномочий представителю';
											|en = 'Уведомление о предоставлении полномочий представителю'");
	
	ТабДокумент.Вывести(ОбластьШапка);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуСтр2(Уведомление, ТабДокумент, Бланк)
	
	ОбластьШапка = Бланк.ПолучитьОбласть("ШапкаСтр2");
	ТабДокумент.Вывести(ОбластьШапка);
	
КонецПроцедуры

Процедура ЗаполнитьОтступ(Уведомление, ТабДокумент, Бланк)
	
	ОбластьОтступ = Бланк.ПолучитьОбласть("Отступ");
	
	Для К = 0 по 1 Цикл
		ТабДокумент.Вывести(ОбластьОтступ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрахователя(Уведомление, ТабДокумент, Бланк)
	
	ОбластьОрганизация	= Бланк.ПолучитьОбласть("Организация");
	ОбластьИП			= Бланк.ПолучитьОбласть("ИП");
	
	СтраховательЮЛ = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СтраховательЮЛ");
	РеквизитыСтрахователя = Уведомление.РеквизитыСубъектов.НайтиСтроки(Новый Структура("Владелец", СтраховательЮЛ));
	Если ЗначениеЗаполнено(РеквизитыСтрахователя) Тогда
		ОбластьОрганизация.Параметры.Заполнить(РеквизитыСтрахователя[0]);
		
		КонтактнаяИнформацияСтрахователя = Уведомление.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Владелец", СтраховательЮЛ));
		Если ЗначениеЗаполнено(КонтактнаяИнформацияСтрахователя) Тогда
			ОбластьОрганизация.Параметры.Заполнить(КонтактнаяИнформацияСтрахователя[0]);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	СтраховательФЛ = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СтраховательФЛ");
	РеквизитыСтрахователя = Уведомление.РеквизитыСубъектов.НайтиСтроки(Новый Структура("Владелец", СтраховательФЛ));
	Если ЗначениеЗаполнено(РеквизитыСтрахователя) Тогда
		ОбластьИП.Параметры.Заполнить(РеквизитыСтрахователя[0]);
		
		КонтактнаяИнформацияСтрахователя = Уведомление.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Владелец", СтраховательФЛ));
		Если ЗначениеЗаполнено(КонтактнаяИнформацияСтрахователя) Тогда
			ОбластьИП.Параметры.Заполнить(КонтактнаяИнформацияСтрахователя[0]);
		КонецЕсли;
		
		ФИОСтрахователя = Уведомление.ФИО.НайтиСтроки(Новый Структура("Владелец", СтраховательФЛ));
		Если ЗначениеЗаполнено(ФИОСтрахователя) Тогда
			ОбластьИП.Параметры.Заполнить(ФИОСтрахователя[0]);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьИП);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредставителя(Уведомление, ТабДокумент, Бланк, ДействуетФорматАФ245д)
	
	ЭтоСотрудник		= Истина;
	ОбластьОрганизация	= Бланк.ПолучитьОбласть("Организация");
	ОбластьИП			= Бланк.ПолучитьОбласть("ИП");
	ОбластьФЛ			= Бланк.ПолучитьОбласть("ФЛ");
	
	СотрудникПредставителя = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СотрудникПредставителя");
	РеквизитыСотрудникПредставителя = Уведомление.РеквизитыСубъектов.НайтиСтроки(Новый Структура("Владелец", СотрудникПредставителя));
	Если ЗначениеЗаполнено(РеквизитыСотрудникПредставителя) Тогда
		ОбластьФЛ.Параметры.Заполнить(РеквизитыСотрудникПредставителя[0]);
		
		КонтактнаяИнформацияПредставителя = Уведомление.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Владелец", СотрудникПредставителя));
		Если ЗначениеЗаполнено(КонтактнаяИнформацияПредставителя) Тогда
			ОбластьФЛ.Параметры.Заполнить(КонтактнаяИнформацияПредставителя[0]);
		КонецЕсли;
		
		ФИОСотрудникПредставителя = Уведомление.ФИО.НайтиСтроки(Новый Структура("Владелец", СотрудникПредставителя));
		Если ЗначениеЗаполнено(ФИОСотрудникПредставителя) Тогда
			ОбластьФЛ.Параметры.Заполнить(ФИОСотрудникПредставителя[0]);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьФЛ);
	КонецЕсли;
	
	ПредставительЮЛ = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.ПредставительЮЛ");
	РеквизитыПредставителя = Уведомление.РеквизитыСубъектов.НайтиСтроки(Новый Структура("Владелец", ПредставительЮЛ));
	Если ЗначениеЗаполнено(РеквизитыПредставителя) Тогда
		ОбластьОрганизация.Параметры.Заполнить(РеквизитыПредставителя[0]);
		
		КонтактнаяИнформацияПредставителя = Уведомление.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Владелец", ПредставительЮЛ));
		Если ЗначениеЗаполнено(КонтактнаяИнформацияПредставителя) Тогда
			ОбластьОрганизация.Параметры.Заполнить(КонтактнаяИнформацияПредставителя[0]);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	ПредставительФЛ = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.ПредставительФЛ");
	РеквизитыПредставителя = Уведомление.РеквизитыСубъектов.НайтиСтроки(Новый Структура("Владелец", ПредставительФЛ));
	Если ЗначениеЗаполнено(РеквизитыПредставителя) Тогда
		ОбластьИП.Параметры.Заполнить(РеквизитыПредставителя[0]);
		
		КонтактнаяИнформацияПредставителя = Уведомление.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Владелец", ПредставительФЛ));
		Если ЗначениеЗаполнено(КонтактнаяИнформацияПредставителя) Тогда
			ОбластьИП.Параметры.Заполнить(КонтактнаяИнформацияПредставителя[0]);
		КонецЕсли;
		
		ФИОПредставителя = Уведомление.ФИО.НайтиСтроки(Новый Структура("Владелец", ПредставительФЛ));
		Если ЗначениеЗаполнено(ФИОПредставителя) Тогда
			ОбластьИП.Параметры.Заполнить(ФИОПредставителя[0]);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьИП);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОДокументе(Уведомление, ТабДокумент, Бланк, ДействуетФорматАФ245д)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если ДействуетФорматАФ245д Тогда
	
		ОбластьСведенияОДокументе = Бланк.ПолучитьОбласть("СведенияОДокументе");
		ОбластьСведенияОДокументе.Параметры.Заполнить(Уведомление);
		ТабДокумент.Вывести(ОбластьСведенияОДокументе);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПодвал(Уведомление, ТабДокумент, Бланк)
	
	ОбластьПодвал = Бланк.ПолучитьОбласть("Подвал");
	
	Если ЗначениеЗаполнено(Уведомление.СтраховательСотрудник) Тогда
		
		СубъектДоверенности = 
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиСтрахователя.СотрудникСтрахователя");
		
		СтрокиФИО = Уведомление.ФИО.НайтиСтроки(Новый Структура("Владелец", СубъектДоверенности));
		КоличествоСтрокФИО = СтрокиФИО.Количество();
		Если КоличествоСтрокФИО = 0 Тогда
			СтрокаФИО = Новый Структура("Владелец, Фамилия, Имя, Отчество, Должность");
			СтрокаФИО.Владелец = СубъектДоверенности;
		Иначе
			СтрокаФИО = СтрокиФИО[0];
		КонецЕсли;
		
		ФИОСтруктура = Новый Структура();
		ФИОСтруктура.Вставить("Фамилия", 	СтрокаФИО.Фамилия);
		ФИОСтруктура.Вставить("Имя", 		СтрокаФИО.Имя);
		ФИОСтруктура.Вставить("Отчество", 	СтрокаФИО.Отчество);
		
		Руководитель = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИОСтруктура);
		
		ОбластьПодвал.Параметры.Должность = СтрокаФИО.Должность;
		ОбластьПодвал.Параметры.ФИО = Руководитель;
	КонецЕсли;
	
	ОбластьПодвал.Параметры.Дата = Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЗаполнитьПодвалСтр1(Уведомление, ТабДокумент, Бланк)
	
	ОбластьПодвал = Бланк.ПолучитьОбласть("ПодвалСтр1");
	ТабДокумент.Вывести(ОбластьПодвал);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
КонецПроцедуры

Процедура ЗаполнитьПодпись(Уведомление, ТабДокумент)
	
	ТипыСообщений = Новый Массив;
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР);
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР);
	
	//"ПротоколПФР" - Уведомления о результате рассмотрения,
	//"ПодтверждениеПолученияОтчетностиПФР" - Уведомления о доставке,
	//"УведомлениеОбОшибкеПФР"
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ДобавитьШтампПодписиПодДокументом(
		Уведомление,
		ТипыСообщений,
		ТабДокумент,
		2,
		Ложь);
	
КонецПроцедуры

Функция ПодготовитьДокументDOM(ВходящиеДанные)
	
	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Если ТипЗнч(ТекущиеДанные) = Тип("ДвоичныеДанные") Тогда
		БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ТекущиеДанные);
		ЧтениеXML.ОткрытьПоток(Новый ПотокВПамяти(БуферДанных));
	ИначеЕсли ЭтоФайл Тогда
		ЧтениеXML.ОткрытьФайл(ТекущиеДанные);
	Иначе	
		ЧтениеXML.УстановитьСтроку(ТекущиеДанные);
	КонецЕсли;
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Возврат ДокументDOM;
	
КонецФункции

Функция ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска)
	
	Результат = Новый Массив;
	
	ДокументИлиУзелВладелец = УзелВладелец;
	
	ИменаУзлов = СтрРазделить(ТекстПоиска, "/");
	КоличествоУзлов = ИменаУзлов.Количество();
	Для ИндексУзла = 0 По КоличествоУзлов - 1 Цикл
		ИмяУзла = ИменаУзлов[ИндексУзла];
		Если ИндексУзла = 0 И ИмяУзла = "" Тогда
			ДокументИлиУзелВладелец = УзелВладелец.ДокументВладелец;
		Иначе
			МассивУзлов = ДокументИлиУзелВладелец.ПолучитьЭлементыПоИмени(ИмяУзла);
			Если МассивУзлов.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если ИндексУзла = КоличествоУзлов - 1 Тогда
				Результат = МассивУзлов;
			Иначе
				ДокументИлиУзелВладелец = МассивУзлов[0];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Находит элемент документа DOM, проверяет что оно одно и пытается получить значение и привести тип.
//
Функция ПолучитьЗначениеДокумента(УзелВладелец, ТекстПоиска, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	
	ВыборкаЭлементов = ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска);
	
	Если ВыборкаЭлементов.Количество() = 1 Тогда
		
		ЭлементВыборки = ВыборкаЭлементов[0];
		Если ТипЗнч(ЭлементВыборки) = Тип("АтрибутDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.Значение;
		ИначеЕсли ТипЗнч(ЭлементВыборки) = Тип("ЭлементDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.ТекстовоеСодержимое;
		Иначе
			ПредставлениеЗначения = ЭлементВыборки.ЗначениеУзла;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Дата") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеДаты(ПредставлениеЗначения);
		КонецЕсли;
		
		Если ЗначениеПоУмолчанию <> Неопределено Тогда
			МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЗначениеПоУмолчанию));
			ТекущийТип = Новый ОписаниеТипов(МассивТипов);
			Результат = ТекущийТип.ПривестиЗначение(ПредставлениеЗначения);
		Иначе
			Результат = ПредставлениеЗначения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеДаты(ПредставлениеДаты)
	
	Результат = ПредставлениеДаты;
	
	МассивСтроки = СтрРазделить(ПредставлениеДаты, ".", Ложь);
	
	Если МассивСтроки.Количество() = 3 И СтрДлина(МассивСтроки[2]) = 4 Тогда
		Результат = МассивСтроки[2] + МассивСтроки[1] + МассивСтроки[0];
	Иначе
		МассивСтроки = СтрРазделить(ПредставлениеДаты, "-", Ложь);
		Если МассивСтроки.Количество() = 3 И СтрДлина(МассивСтроки[0]) = 4 Тогда
			Результат = МассивСтроки[0] + МассивСтроки[1] + МассивСтроки[2];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиДокументИБ(ЗначениеПоУмолчанию, ФильтрыПоиска)
	
	Результат = ЗначениеПоУмолчанию;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектПоиска.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОПредоставленииПолномочийПредставителю КАК ОбъектПоиска
	|ГДЕ
	|	НЕ ОбъектПоиска.ПометкаУдаления
	|{ГДЕ
	|	ОбъектПоиска.Ссылка.*}";
	
	МетаданныеОбъекта = ЗначениеПоУмолчанию.Метаданные();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.УведомлениеОПредоставленииПолномочийПредставителю", МетаданныеОбъекта.ПолноеИмя());
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст = ТекстЗапроса;
	Построитель.ЗаполнитьНастройки();
	
	Для каждого СтрокаКлюча Из ФильтрыПоиска Цикл
		НовыйОтбор = Построитель.Отбор.Добавить("Ссылка." + СтрокаКлюча.Ключ);
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
		НовыйОтбор.Значение = СтрокаКлюча.Значение;
	КонецЦикла;
	
	Запрос = Построитель.ПолучитьЗапрос();
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() И Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьДокумент(ДанныеУведомления, ОбновлятьСуществующийИлиСсылкаИлиРежим)
	
	Результат = Неопределено;
	НашлиДокумент = Неопределено;
	
	Если ТипЗнч(ОбновлятьСуществующийИлиСсылкаИлиРежим) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю") Тогда
		НашлиДокумент = ОбновлятьСуществующийИлиСсылкаИлиРежим;
		
	Иначе
		Если ОбновлятьСуществующийИлиСсылкаИлиРежим = Истина
			ИЛИ ОбновлятьСуществующийИлиСсылкаИлиРежим = "ЗапрещеноОбновлятьСуществующий" Тогда
			
			СтрокаПоиска = Новый Структура;
			СтрокаПоиска.Вставить("НомерДокумента", 	ДанныеУведомления.НомерДокумента);
			СтрокаПоиска.Вставить("Организация", 		ДанныеУведомления.Организация);
			НашлиДокумент = НайтиДокументИБ(Документы.УведомлениеОПредоставленииПолномочийПредставителю.ПустаяСсылка(), СтрокаПоиска);
			
			Если ЗначениеЗаполнено(НашлиДокумент)
				И ОбновлятьСуществующийИлиСсылкаИлиРежим = "ЗапрещеноОбновлятьСуществующий" Тогда
				
				Возврат "ЗапрещеноОбновлятьСуществующий";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НашлиДокумент) Тогда
		ОбъектДокумента = Документы.УведомлениеОПредоставленииПолномочийПредставителю.СоздатьДокумент();
	Иначе
		ОбъектДокумента = НашлиДокумент.ПолучитьОбъект();
		Для каждого СтрокаРеквизита Из ОбъектДокумента.Метаданные().Реквизиты Цикл
			ОбъектДокумента[СтрокаРеквизита.Имя] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	// здесь переносим значения реквизитов
	ЗаполнитьЗначенияСвойств(ОбъектДокумента, ДанныеУведомления);
	
	ТабличныеЧасти = Новый Структура;
	ТабличныеЧасти.Вставить("ФИО", ДанныеУведомления.ФИО);
	ТабличныеЧасти.Вставить("КонтактнаяИнформация", ДанныеУведомления.КонтактнаяИнформация);
	ТабличныеЧасти.Вставить("РеквизитыСубъектов", ДанныеУведомления.РеквизитыСубъектов);
	
	Для каждого СтрокаТЧ Из ТабличныеЧасти Цикл
		ТекущаяТЧ = ОбъектДокумента[СтрокаТЧ.Ключ];
		ТекущаяТЧ.Очистить();
		Для каждого НоваяСтрока Из СтрокаТЧ.Значение Цикл
			ДобавленнаяСтрока = ТекущаяТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НоваяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеУведомления.Свойство("ДанныеВыгрузки") И ДанныеУведомления.ДанныеВыгрузки <> Неопределено Тогда
		ОбъектДокумента.ФайлВыгрузки = Новый ХранилищеЗначения(ДанныеУведомления.ДанныеВыгрузки, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Удачно = Ложь;
	
	Если ОбъектДокумента.ПроверитьЗаполнение() Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.УведомлениеОПредоставленииПолномочийПредставителю");
		Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектДокумента.Ссылка);
		КонецЕсли;
		
		Удачно = Истина;
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка.Заблокировать();
			ОбъектДокумента.Записать();
			
		Исключение
			ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Ошибка изменения УПУП СФР.';
								|en = 'Электронный документооборот с контролирующими органами. Ошибка изменения УПУП СФР.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,,,
				ДанныеОшибки);
			Удачно = Ложь;
		КонецПопытки;
		
		Если Удачно Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Удачно Тогда
		Результат = ОбъектДокумента.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
