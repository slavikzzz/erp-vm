
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Параметры.СтруктураДанных;
	
	Если СтруктураДанных.Свойство("ЮЛ") Тогда
		
		Элементы.ГруппаЮЛ.Видимость = Истина;
		Элементы.ГруппаФЛ.Видимость = Ложь;
		ВидОрганизации = "0";
		
		Если СтруктураДанных.Свойство("ТолькоПросмотрФормы") И СтруктураДанных.ТолькоПросмотрФормы Тогда
			Элементы.Наименование.ТолькоПросмотр				= Истина;
			Элементы.НаименованиеКраткое.ТолькоПросмотр			= Истина;
			Элементы.РегистрационныйНомерПФР.ТолькоПросмотр		= Истина;
			Элементы.ИНН.ТолькоПросмотр							= Истина;
			Элементы.КПП.ТолькоПросмотр							= Истина;
			Элементы.Телефон.ТолькоПросмотр						= Истина;
			Элементы.АдресЭлектроннойПочты.ТолькоПросмотр		= Истина;
			Элементы.ВидОрганизации.Доступность					= Ложь;
			
			Элементы.ФормаКнопкаСохранить.Доступность			= Ложь;
		КонецЕсли;
		
		Если СтруктураДанных <> Неопределено И СтруктураДанных.Свойство("Наименование") Тогда
			Наименование				= СтруктураДанных.Наименование;
			НаименованиеКраткое			= СтруктураДанных.НаименованиеКраткое;
			РегистрационныйНомерПФР		= СтруктураДанных.РегистрационныйНомерПФР;
			ИНН 						= СтруктураДанных.ИНН;
			КПП 						= СтруктураДанных.КПП;
			Телефон 					= СтруктураДанных.Телефон;
			АдресЭлектроннойПочты		= СтруктураДанных.АдресЭлектроннойПочты;
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаЮЛ.Видимость = Ложь;
		Элементы.ГруппаФЛ.Видимость = Истина;
		ВидОрганизации = "1";
		
		Если СтруктураДанных.Свойство("ТолькоПросмотрФормы") И СтруктураДанных.ТолькоПросмотрФормы Тогда
			Элементы.ФИО.ТолькоПросмотр							= Истина;
			Элементы.РегистрационныйНомерПФРФЛ.ТолькоПросмотр	= Истина;
			Элементы.ИННФЛ.ТолькоПросмотр						= Истина;
			Элементы.СНИЛС.ТолькоПросмотр						= Истина;
			Элементы.ТелефонФЛ.ТолькоПросмотр					= Истина;
			Элементы.АдресЭлектроннойПочтыФЛ.ТолькоПросмотр		= Истина;
			
			Элементы.ФормаКнопкаСохранить.Доступность			= Ложь;
		КонецЕсли;
		
		Если СтруктураДанных <> Неопределено И СтруктураДанных.Свойство("ФИО") Тогда
			ФИО							= СтруктураДанных.ФИО;
			РегистрационныйНомерПФР		= СтруктураДанных.РегистрационныйНомерПФР;
			ИННФЛ 						= СтруктураДанных.ИНН;
			СНИЛС 						= СтруктураДанных.СНИЛС;
			Телефон 					= СтруктураДанных.Телефон;
			АдресЭлектроннойПочты		= СтруктураДанных.АдресЭлектроннойПочты;
		КонецЕсли;
		
	КонецЕсли;
	
	Заголовок = СтруктураДанных.Заголовок;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	Если НЕ СохранениеВозможно() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОрганизации = "0" Тогда
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Наименование",			Наименование);
		СтруктураДанных.Вставить("НаименованиеКраткое",		НаименованиеКраткое);
		СтруктураДанных.Вставить("РегистрационныйНомерПФР",	РегистрационныйНомерПФР);
		СтруктураДанных.Вставить("ИНН",						ИНН);
		СтруктураДанных.Вставить("КПП",						КПП);
		СтруктураДанных.Вставить("Телефон",					Телефон);
		СтруктураДанных.Вставить("АдресЭлектроннойПочты",	АдресЭлектроннойПочты);
		СтруктураДанных.Вставить("ЭтоЮридическоеЛицо",		Истина);
	Иначе
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ФИО",						ФИО);
		СтруктураДанных.Вставить("Фамилия",					Фамилия);
		СтруктураДанных.Вставить("Имя",						Имя);
		СтруктураДанных.Вставить("Отчество",				Отчество);
		СтруктураДанных.Вставить("Наименование",			ФИО);
		СтруктураДанных.Вставить("РегистрационныйНомерПФР",	РегистрационныйНомерПФР);
		СтруктураДанных.Вставить("ИНН",						ИННФЛ);
		СтруктураДанных.Вставить("СНИЛС",					СНИЛС);
		СтруктураДанных.Вставить("Телефон",					Телефон);
		СтруктураДанных.Вставить("АдресЭлектроннойПочты",	АдресЭлектроннойПочты);
		СтруктураДанных.Вставить("ЭтоЮридическоеЛицо",		Ложь);
	КонецЕсли;
	
	Закрыть(СтруктураДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОрганизацииПриИзменении(Элемент)
	
	Элементы.ГруппаЮЛ.Видимость = ?(ВидОрганизации = "0", Истина, Ложь);
	Элементы.ГруппаФЛ.Видимость = ?(ВидОрганизации = "0", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ФормаВводаФИО = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВводаФИО");
	
	ФормаВводаФИО.Фамилия 	= Фамилия;
	ФормаВводаФИО.Имя 		= Имя;
	ФормаВводаФИО.Отчество 	= Отчество;
	
	ФормаВводаФИО.ОписаниеОповещенияОЗакрытии =
		Новый ОписаниеОповещения("ФИОНачалоВыбораЗавершение", ЭтотОбъект);
	ФормаВводаФИО.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВводаФИО.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ФИООчистка(Элемент, СтандартнаяОбработка)
	
	Фамилия 	= "";
	Имя 		= "";
	Отчество 	= "";
	
	ФИО = "";
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция СохранениеВозможно()
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если ВидОрганизации = "0" Тогда
		
		Если НЕ ЗначениеЗаполнено(Наименование) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не задано наименование организации.';
															|en = 'Не задано наименование организации.'"),,
				"Наименование",, Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НаименованиеКраткое) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не задано краткое наименование организации.';
															|en = 'Не задано краткое наименование организации.'"),,
				"НаименованиеКраткое",, Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИНН) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не задан ИНН организации.';
															|en = 'Не задан ИНН организации.'"),,
				"ИНН",, Отказ);
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			ИНН, Ложь) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Указан некорректный ИНН организации.';
															|en = 'Указан некорректный ИНН организации.'"),,
				"ИНН",, Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не задан КПП организации.';
															|en = 'Не задан КПП организации.'"),,
				"КПП",, Отказ);
		ИначеЕсли СтрДлина(КПП) <> 9 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Указан некорректный КПП организации.';
															|en = 'Указан некорректный КПП организации.'"),,
				"КПП",, Отказ);
		КонецЕсли;
		
		Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьРегистрационныйНомерПФР(
			РегистрационныйНомерПФР, Истина, Истина) Тогда
			ТекстСообщенияПользователю = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(
				НСтр("ru = 'Регистрационный номер СФР должен состоять из 10 цифр (ХХХХХХХХХХ) или 12 цифр (ХХХ-ХХХ-ХХХХХХ)';
					|en = 'Регистрационный номер СФР должен состоять из 10 цифр (ХХХХХХХХХХ) или 12 цифр (ХХХ-ХХХ-ХХХХХХ)'"), Истина);
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщенияПользователю,,
				"РегистрационныйНомерПФР",, Отказ);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Телефон) ИЛИ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
			Если НЕ ЗначениеЗаполнено(Телефон) И НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не задан телефон организации.';
																|en = 'Не задан телефон организации.'"),,
					"Телефон",, Отказ);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) И НЕ ЗначениеЗаполнено(Телефон) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не задан адрес электронной почты организации.';
																|en = 'Не задан адрес электронной почты организации.'"),,
					"АдресЭлектроннойПочты",, Отказ);
			ИначеЕсли ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
				ТекстОшибки = "";
				ЭлектроннаяПочта = СокрЛП(АдресЭлектроннойПочты);
				Если ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
					ЭлектроннаяПочта,
					НСтр("ru = 'Адрес электронной почты ';
						|en = 'Адрес электронной почты '"),
					"АдресЭлектроннойПочты",
					Истина,
					ТекстОшибки) Тогда
					
					ОбщегоНазначенияКлиент.СообщитьПользователю((ТекстОшибки),,
						"АдресЭлектроннойПочты",, Отказ);
					
				ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта) Тогда
					
					Если НЕ СтрНайти(ЭлектроннаяПочта, "@") Тогда
						ОбщегоНазначенияКлиент.СообщитьПользователю(
							НСтр("ru = 'Некорректно указана электронная почта. Отсутствует символ @';
								|en = 'Некорректно указана электронная почта. Отсутствует символ @'"),,
							"АдресЭлектроннойПочты",, Отказ);
					Иначе
						ОбщегоНазначенияКлиент.СообщитьПользователю(
							НСтр("ru = 'Электронная почта содержит некорректные сочетания символов';
								|en = 'Электронная почта содержит некорректные сочетания символов'"),,
							"АдресЭлектроннойПочты",, Отказ);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Необходимо задать хотя бы один вид контактной информации.';
					|en = 'Необходимо задать хотя бы один вид контактной информации.'"),,
				,, Отказ);
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ФИО) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не задано ФИО индивидуального предпринимателя.';
															|en = 'Не задано ФИО индивидуального предпринимателя.'"),,
				"ФИО",, Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИННФЛ) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не задан ИНН индивидуального предпринимателя.';
															|en = 'Не задан ИНН индивидуального предпринимателя.'"),,
				"ИННФЛ",, Отказ);
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			ИННФЛ, Истина) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Указан некорректный ИНН индивидуального предпринимателя.';
					|en = 'Указан некорректный ИНН индивидуального предпринимателя.'"),,
				"ИННФЛ",, Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СНИЛС) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не задан СНИЛС индивидуального предпринимателя.';
															|en = 'Не задан СНИЛС индивидуального предпринимателя.'"),,
				"СНИЛС",, Отказ);
		ИначеЕсли СтрДлина(СНИЛС) <> 14 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Указан некорректный СНИЛС индивидуального предпринимателя.';
					|en = 'Указан некорректный СНИЛС индивидуального предпринимателя.'"),,
				"СНИЛС",, Отказ);
		КонецЕсли;
		
		Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьРегистрационныйНомерПФР(
			РегистрационныйНомерПФР, Истина, Истина) Тогда
			ТекстСообщенияПользователю = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(
				НСтр("ru = 'Регистрационный номер СФР должен состоять из 10 цифр (ХХХХХХХХХХ) или 12 цифр (ХХХ-ХХХ-ХХХХХХ)';
					|en = 'Регистрационный номер СФР должен состоять из 10 цифр (ХХХХХХХХХХ) или 12 цифр (ХХХ-ХХХ-ХХХХХХ)'"), Истина);
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщенияПользователю,,
				"РегистрационныйНомерПФР",, Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Телефон) ИЛИ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
			Если НЕ ЗначениеЗаполнено(Телефон) И НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не задан телефон индивидуального предпринимателя.';
																|en = 'Не задан телефон индивидуального предпринимателя.'"),,
					"Телефон",, Отказ);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) И НЕ ЗначениеЗаполнено(Телефон) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Не задан адрес электронной почты индивидуального предпринимателя.';
						|en = 'Не задан адрес электронной почты индивидуального предпринимателя.'"),,
					"АдресЭлектроннойПочты",, Отказ);
			ИначеЕсли ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
				ТекстОшибки = "";
				ЭлектроннаяПочта = СокрЛП(АдресЭлектроннойПочты);
				Если ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
					ЭлектроннаяПочта,
					НСтр("ru = 'Адрес электронной почты ';
						|en = 'Адрес электронной почты '"),
					"АдресЭлектроннойПочты",
					Истина,
					ТекстОшибки) Тогда
					
					ОбщегоНазначенияКлиент.СообщитьПользователю((ТекстОшибки),,
						"АдресЭлектроннойПочты",, Отказ);
					
				ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта) Тогда
					
					Если НЕ СтрНайти(ЭлектроннаяПочта, "@") Тогда
						ОбщегоНазначенияКлиент.СообщитьПользователю(
							НСтр("ru = 'Некорректно указана электронная почта. Отсутствует символ @';
								|en = 'Некорректно указана электронная почта. Отсутствует символ @'"),,
							"АдресЭлектроннойПочты",, Отказ);
					Иначе
						ОбщегоНазначенияКлиент.СообщитьПользователю(
							НСтр("ru = 'Электронная почта содержит некорректные сочетания символов';
								|en = 'Электронная почта содержит некорректные сочетания символов'"),,
							"АдресЭлектроннойПочты",, Отказ);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Необходимо задать хотя бы один вид контактной информации.';
					|en = 'Необходимо задать хотя бы один вид контактной информации.'"),,
				,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ФИОНачалоВыбораЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатРедактирования) Тогда
		Возврат;
	КонецЕсли;
	
	Фамилия 	= РезультатРедактирования.Фамилия;
	Имя 		= РезультатРедактирования.Имя;
	Отчество 	= РезультатРедактирования.Отчество;
	
	ФИО = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(РезультатРедактирования);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти
