
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Организация", Организация);
	Параметры.Свойство("ПериодРегистрации", ПериодРегистрации);
	Параметры.Свойство("Сотрудник", Сотрудник);
	Параметры.Свойство("СуммарнаяДоляСтоПроцентов", СуммарнаяДоляСтоПроцентов);
	Параметры.Свойство("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников);
	
	ЗаполнениеРаспределения = Параметры.Свойство("ЗаполнениеРаспределения");
	
	ЕстьПодразделениеУчетаЗатрат = Ложь;
	Если Параметры.Свойство("РаспределениеЗаработка") И Параметры.РаспределениеЗаработка <> Неопределено Тогда
		Для каждого СтрокаРаспределения Из Параметры.РаспределениеЗаработка Цикл
			ЗаполнитьЗначенияСвойств(РаспределениеЗаработка.Добавить(), СтрокаРаспределения);
			ЕстьПодразделениеУчетаЗатрат = ЕстьПодразделениеУчетаЗатрат Или ЗначениеЗаполнено(СтрокаРаспределения.ПодразделениеУчетаЗатрат);
		КонецЦикла;
	КонецЕсли;
	
	ИтогРаспределения = РаспределениеЗаработка.Итог("ДоляРаспределения");

	ПараметрыФО = Новый Структура("Организация, Период", Организация, НачалоДня(ПериодРегистрации));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
	УстановитьВидимостьАналитикиПодробно(Элементы, ЕстьПодразделениеУчетаЗатрат);
	УстановитьУсловноеОформление();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Сотрудник",
		"Видимость",
		Не ЗаполнениеРаспределения);

КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗаработкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ИтогРаспределения = РаспределениеЗаработка.Итог("ДоляРаспределения");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АналитикаПодробно(Команда)
	
	ВидимостьПолейАналитикаПодробно = Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
		Элементы,
		"РаспределениеЗаработкаАналитикаПодробно",
		"Пометка");
		
	УстановитьВидимостьАналитикиПодробно(Элементы, ВидимостьПолейАналитикаПодробно);
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ЗавершитьРедактированиеСтрокиДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьАналитикиПодробно(Элементы, ВидимостьПолейАналитикаПодробно)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РаспределениеЗаработкаАналитикаПодробно",
		"Пометка",
		ВидимостьПолейАналитикаПодробно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РаспределениеЗаработкаПодразделениеУчетаЗатрат",
		"Видимость",
		ВидимостьПолейАналитикаПодробно);	

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеСтрокиДокумента()
	
	Отказ = Ложь;
	
	Если Модифицированность Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		Иначе
			РезультатРаспределения = РезультатРаспределения();
			Модифицированность = Ложь;
		КонецЕсли;
		
	Иначе
		РезультатРаспределения = Неопределено;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Закрыть(РезультатРаспределения);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция РезультатРаспределения()
	
	ДанныеРаспределения   = РаспределениеЗаработка.Выгрузить();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьТаблицуРаспределенияКодомСтатьиФинансирования(ДанныеРаспределения);
	КонецЕсли;
	
	Описание = Новый Структура;
	Описание.Вставить("Сотрудник", Сотрудник);
	Описание.Вставить("РаспределениеЗаработка", ЗарплатаКадрыРасширенный.ТаблицаЗначенийВСтруктуру(ДанныеРаспределения));
	
	Возврат Описание;

КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗаполнениеРаспределения Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудник");
	КонецЕсли;
	
	// проверка дублей строк распределения
	Отбор = Новый Структура("СтатьяФинансирования,СпособОтраженияЗарплатыВБухучете,ОблагаетсяЕНВД,ПодразделениеУчетаЗатрат");
	НомерСтроки = 0;
	Для каждого СтрокаТЗ Из РаспределениеЗаработка Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		Если РаспределениеЗаработка.НайтиСтроки(Отбор).Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Не уникальные значения настройки в строке';
									|en = 'Non-unique setting values in the line'");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				,
				"РаспределениеЗаработка[" + НомерСтроки + "].СпособОтраженияЗарплатыВБухучете",
				,
				Отказ);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ИмяКолонки = "ДоляРаспределения";
	РеквизитыТаблицы = ПолучитьРеквизиты("РаспределениеЗаработка");
	ЗаголовокКолонки = "";
	Для каждого РеквизитТаблицы Из РеквизитыТаблицы Цикл
		Если РеквизитТаблицы.Имя = ИмяКолонки Тогда
			ЗаголовокКолонки = РеквизитТаблицы.Заголовок;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НомерСтроки = 0;
	Для каждого СтрокаРаспределения Из РаспределениеЗаработка Цикл
		
		Если СтрокаРаспределения.ДоляРаспределения = 0 Тогда
			
			ШаблонСообщения = НСтр("ru = 'Поле ""%1"" не заполнено';
									|en = 'Field %1 is required'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗаголовокКолонки);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				,
				"РаспределениеЗаработка[" + НомерСтроки + "].ДоляРаспределения",
				,
				Отказ);
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Если СуммарнаяДоляСтоПроцентов И РаспределениеЗаработка.Итог("ДоляРаспределения") <> 100 Тогда
		
		НомерСтроки = НомерСтроки-1;
		
		ТекстСообщения = НСтр("ru = 'Суммарная доля распределения не равна 100%';
								|en = 'Total allocation share is not equal to 100%'");
			ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			,
			"РаспределениеЗаработка[" + НомерСтроки + "].ДоляРаспределения",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	ТекстПустогоЗначения = НСтр("ru = '<подбирается автоматически>';
								|en = '<picked automatically>'");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстПустогоЗначения);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспределениеЗаработка.ПодразделениеУчетаЗатрат");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("РаспределениеЗаработкаПодразделениеУчетаЗатрат");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстПустогоЗначения);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспределениеЗаработка.СтатьяФинансирования");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("РаспределениеЗаработкаСтатьяФинансирования");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстПустогоЗначения);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспределениеЗаработка.СпособОтраженияЗарплатыВБухучете");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("РаспределениеЗаработкаСпособОтраженияЗарплатыВБухучете");

КонецПроцедуры


#КонецОбласти


