#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "РаспределениеЗаработка.СтатьяФинансирования");
	КонецЕсли;
	
	КонтейнерОшибок = Неопределено;
	ПроверитьСтрокиРаспределенияОсновногоЗаработка(КонтейнерОшибок);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(КонтейнерОшибок, Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения, , Истина)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	ДанныеОРаспределении = ДанныеДляПроведения.ДанныеОРаспределении;
	
	Для Каждого Строка Из ДанныеОРаспределении Цикл
		Движения.БухучетРаспределениеОсновногоЗаработка.Записывать = Истина;
		НоваяСтрока = Движения.БухучетРаспределениеОсновногоЗаработка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает данные для формирования движений.
// Возвращает таблицу значений - данные, необходимые для формирования плановых начислений по договорам.
//
Функция ДанныеДляПроведения()
	
	ДанныеДляПроведения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	СтрокиРаспределения.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	СтрокиРаспределения.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СтрокиРаспределения.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	СтрокиРаспределения.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	СтрокиРаспределения.ДоляРаспределения КАК ДоляРаспределения
	|ИЗ
	|	Документ.РаспределениеОсновногоЗаработка.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РаспределениеОсновногоЗаработка.РаспределениеЗаработка КАК СтрокиРаспределения
	|		ПО Сотрудники.ИдентификаторСтрокиСотрудника = СтрокиРаспределения.ИдентификаторСтрокиСотрудника
	|			И Сотрудники.Ссылка = СтрокиРаспределения.Ссылка
	|ГДЕ
	|	Сотрудники.Ссылка = &Регистратор";
	
	ДанныеОРаспределении = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеОРаспределении", ДанныеОРаспределении);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция ПроверитьСтрокиРаспределенияОсновногоЗаработка(КонтейнерОшибок)

	Отбор = Новый Структура("ИдентификаторСтрокиСотрудника");
	НомераСтрок = Новый Соответствие;
	Для каждого СтрокаТЧ Из Сотрудники Цикл
		
		Отбор.ИдентификаторСтрокиСотрудника = СтрокаТЧ.ИдентификаторСтрокиСотрудника;
		СтрокиРаспределения = РаспределениеЗаработка.НайтиСтроки(Отбор);
		Если СтрокиРаспределения.Количество() = 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'В строке %1 не задано распределение.';
									|en = 'Allocation is not specified in line %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					СтрокаТЧ.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Сотрудники[%1].Сотрудник", ТекстСообщения, "", СтрокаТЧ.НомерСтроки,,СтрокаТЧ.НомерСтроки-1);
			
		ИначеЕсли СуммарнаяДоляСтоПроцентов Тогда
			
			СуммарнаяДоля = 0;
			Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				СуммарнаяДоля = СуммарнаяДоля + СтрокаРаспределения.ДоляРаспределения;
			КонецЦикла;
			
			Если СуммарнаяДоля <> 100 Тогда
				
				ТекстСообщения = НСтр("ru = 'В строке %1 доля распределения не равна 100.';
										|en = 'Allocation share is not equal to 100 in line %1.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					СтрокаТЧ.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Сотрудники[%1].Сотрудник", ТекстСообщения, "", СтрокаТЧ.НомерСтроки,,СтрокаТЧ.НомерСтроки-1);
				
			КонецЕсли;
			
		КонецЕсли;
		
		НомераСтрок.Вставить(СтрокаТЧ.Сотрудник, СтрокаТЧ.НомерСтроки);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БухучетРаспределениеОсновногоЗаработка.Регистратор КАК Регистратор,
	|	БухучетРаспределениеОсновногоЗаработка.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.БухучетРаспределениеОсновногоЗаработка КАК БухучетРаспределениеОсновногоЗаработка
	|ГДЕ
	|	БухучетРаспределениеОсновногоЗаработка.Сотрудник В(&Сотрудники)
	|	И БухучетРаспределениеОсновногоЗаработка.ПериодРегистрации = &ПериодРегистрации
	|	И БухучетРаспределениеОсновногоЗаработка.Организация = &Организация
	|	И БухучетРаспределениеОсновногоЗаработка.Регистратор <> &Регистратор";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'По сотруднику %1 распределение заработка уже зарегистрировано документом %2.';
								|en = 'Earning allocation of the %1 employee is already registered in the %2 document.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					Выборка.Сотрудник, Выборка.Регистратор);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Сотрудники[%1].Сотрудник", ТекстСообщения, "", НомераСтрок[Выборка.Сотрудник],,НомераСтрок[Выборка.Сотрудник]-1);
		
	КонецЦикла;
	
КонецФункции


#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли