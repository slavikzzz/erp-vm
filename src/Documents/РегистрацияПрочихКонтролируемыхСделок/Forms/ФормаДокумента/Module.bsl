#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Для Каждого СтрокаСделки Из Объект.Сделки Цикл
		РассчитатьЗначенияДополнительныхКолонок(ЭтотОбъект, СтрокаСделки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УведомлениеПриИзменении(Элемент)
	
	НовыеЗначенияРеквизитов = НовыеЗначенияРеквизитовПриИзмененииУведомления(Объект.УведомлениеОКонтролируемойСделке);
	ЗаполнитьЗначенияСвойств(Объект, НовыеЗначенияРеквизитов);
	ОтчетныйГод = НовыеЗначенияРеквизитов.ОтчетныйГод;
	
	НастроитьЭлементыЕНВД(ЭтотОбъект, НовыеЗначенияРеквизитов.ДатаОтказаОтЕНВД);
	
	АктуализироватьСтавкуНДСВТЧСделки();
	
	НастроитьЭлементыКомиссионера(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ИзменениеДоговораСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаСовершенаЧерезКомиссионераПриИзменении(Элемент)
	
	Если Не Объект.СделкаСовершенаЧерезКомиссионера Тогда
		Объект.Комиссионер = Неопределено;
	КонецЕсли;
	
	НастроитьЭлементыКомиссионера(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСделки

&НаКлиенте
Процедура СделкиДатаСовершенияСделкиПриИзменении(Элемент)
	
	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		СтрокаСделки = Элементы.Сделки.ТекущиеДанные;
		ДанныеОбменаССервером = Новый Структура("ДатаСовершенияСделки, ДоговорКонтрагента, СуммаБезНДСВРублях, СуммаБезНДСВВалютеРасчетов,
			|СуммаНДСВРублях, СуммаНДСВВалютеРасчетов, СтавкаНДС, ВалютаДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаСделки);
		ДанныеОбменаССервером.ВалютаДокумента = Объект.ВалютаДокумента;
		ПересчитатьСуммыСтроки(ДанныеОбменаССервером, "ДатаСовершенияСделки");
		ЗаполнитьЗначенияСвойств(СтрокаСделки, ДанныеОбменаССервером);
		РассчитатьЗначенияДополнительныхКолонок(ЭтотОбъект, СтрокаСделки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкиСуммаБезНДСВРубляхПриИзменении(Элемент)
	
	СтрокаСделки = Элементы.Сделки.ТекущиеДанные;
	ДанныеОбменаССервером = Новый Структура("СуммаБезНДСВРублях, СуммаНДСВРублях, СтавкаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаСделки);
	ПересчитатьСуммыСтроки(ДанныеОбменаССервером, "СуммаБезНДСВРублях");
	ЗаполнитьЗначенияСвойств(СтрокаСделки, ДанныеОбменаССервером);
	РассчитатьЗначенияДополнительныхКолонок(ЭтотОбъект, СтрокаСделки);

КонецПроцедуры

&НаКлиенте
Процедура СделкиСуммаБезНДСВВалютеРасчетовПриИзменении(Элемент)
	
	СтрокаСделки = Элементы.Сделки.ТекущиеДанные;
	ДанныеОбменаССервером = Новый Структура("ДоговорКонтрагента, ДатаСовершенияСделки,
		|СуммаБезНДСВРублях, СуммаБезНДСВВалютеРасчетов, СуммаНДСВРублях, СуммаНДСВВалютеРасчетов, СтавкаНДС, ВалютаДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаСделки);
	ДанныеОбменаССервером.ВалютаДокумента = Объект.ВалютаДокумента;
	ПересчитатьСуммыСтроки(ДанныеОбменаССервером, "СуммаБезНДСВВалютеРасчетов");
	ЗаполнитьЗначенияСвойств(СтрокаСделки, ДанныеОбменаССервером);
	РассчитатьЗначенияДополнительныхКолонок(ЭтотОбъект, СтрокаСделки);

КонецПроцедуры

&НаКлиенте
Процедура СделкиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаСделки = Элементы.Сделки.ТекущиеДанные;
	ДанныеОбменаССервером = Новый Структура("ДатаСовершенияСделки,
		|СуммаБезНДСВРублях, СуммаБезНДСВВалютеРасчетов, СуммаНДСВРублях, СуммаНДСВВалютеРасчетов, СтавкаНДС, ВалютаДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаСделки);
	ДанныеОбменаССервером.ВалютаДокумента = Объект.ВалютаДокумента;
	ПересчитатьСуммыСтроки(ДанныеОбменаССервером, "СтавкаНДС");
	ЗаполнитьЗначенияСвойств(СтрокаСделки, ДанныеОбменаССервером);
	РассчитатьЗначенияДополнительныхКолонок(ЭтотОбъект, СтрокаСделки);

КонецПроцедуры

&НаКлиенте
Процедура СделкиСуммаНДСВРубляхПриИзменении(Элемент)
	
	СтрокаСделки = Элементы.Сделки.ТекущиеДанные;
	РассчитатьЗначенияДополнительныхКолонок(ЭтотОбъект, СтрокаСделки);
	
КонецПроцедуры

&НаКлиенте
Процедура СделкиСуммаНДСВВалютеРасчетовПриИзменении(Элемент)
	
	СтрокаСделки = Элементы.Сделки.ТекущиеДанные;
	РассчитатьЗначенияДополнительныхКолонок(ЭтотОбъект, СтрокаСделки);

КонецПроцедуры

&НаКлиенте
Процедура СделкиПредметСделкиПриИзменении(Элемент)
	
	СтрокаСделки = Элементы.Сделки.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаСделки.ПредметСделки) Тогда
		ДанныеОбменаССервером = Новый Структура("ПредметСделки");
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаСделки);
		ЗаполнитьЗначенияСвойств(СтрокаСделки, ИзменениеПредметаСделкиСервер(ДанныеОбменаССервером));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаСделки = Элементы.Сделки.ТекущиеДанные;
		РассчитатьЗначенияДополнительныхКолонок(ЭтотОбъект, СтрокаСделки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыЕНВД(Форма, ДатаОтказаОтЕНВД)
	
	Форма.Элементы.СделкиОперацияОблагаетсяЕНВД.Видимость = Форма.ОтчетныйГод < ДатаОтказаОтЕНВД;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыКомиссионера(Форма)
	
	ЭлементыКомиссионераВидимы = Форма.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018();
	
	Форма.Элементы.Комиссионер.Видимость = ЭлементыКомиссионераВидимы;
	Форма.Элементы.СделкаСовершенаЧерезКомиссионера.Видимость = ЭлементыКомиссионераВидимы;
	Форма.Элементы.Комиссионер.Доступность = Форма.Объект.СделкаСовершенаЧерезКомиссионера И ЭлементыКомиссионераВидимы;
	Форма.Элементы.Комиссионер.АвтоОтметкаНезаполненного = Форма.Объект.СделкаСовершенаЧерезКомиссионера И ЭлементыКомиссионераВидимы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	// СделкиСуммаБезНДСВВалютеРасчетов, СделкиСуммаНДСВВалютеРасчетов, СделкиВсегоВВалютеРасчетов.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СделкиСуммаБезНДСВВалютеРасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СделкиСуммаНДСВВалютеРасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СделкиВсегоВВалютеРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВалютаДокумента", ВидСравненияКомпоновкиДанных.Равно, Новый ПолеКомпоновкиДанных("ВалютаРегламентированногоУчета"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СделкиГрузоотправитель

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СделкиГрузоотправитель");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Сделки.ТипПредметаСделки", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ТипыПредметовКонтролируемыхСделок.Товар);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не требуется>';
																	|en = '<Not needed>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	
	// СделкиПроцентнаяСтавка

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СделкиПроцентнаяСтавка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СделкиДатаПроцентнойСтавки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Сделки.ТипПредметаСделки", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ТипыПредметовКонтролируемыхСделок.ДолговоеОбязательство);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не требуется>';
																	|en = '<Not needed>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// Дата процентной ставки
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СделкиДатаПроцентнойСтавки");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Сделки.ТипПредметаСделки", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ТипыПредметовКонтролируемыхСделок.ДолговоеОбязательство);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// СделкиСтранаПроисхожденияПредметаСделки
	
	ТипыПредметовСделок = Новый СписокЗначений;
	ТипыПредметовСделок.Добавить(Перечисления.ТипыПредметовКонтролируемыхСделок.РаботаУслуга);
	ТипыПредметовСделок.Добавить(Перечисления.ТипыПредметовКонтролируемыхСделок.ДолговоеОбязательство);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СделкиСтранаПроисхожденияПредметаСделки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Сделки.ТипПредметаСделки", ВидСравненияКомпоновкиДанных.ВСписке, ТипыПредметовСделок);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не требуется>';
																	|en = '<Not needed>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ЗначениеЗаполнено(Объект.УведомлениеОКонтролируемойСделке) Тогда
		РеквизитыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.УведомлениеОКонтролируемойСделке, "ВерсияУведомления,ОтчетныйГод");
		ВерсияУведомления = РеквизитыУведомления.ВерсияУведомления;
		ОтчетныйГод = РеквизитыУведомления.ОтчетныйГод;
	КонецЕсли;
	
	НастроитьЭлементыЕНВД(ЭтотОбъект, КонтролируемыеСделкиКлиентСервер.ДатаОтказаОтЕНВД());
	
	НастроитьЭлементыКомиссионера(ЭтотОбъект);
	
	Для Каждого СтрокаСделки Из Объект.Сделки Цикл
		РассчитатьЗначенияДополнительныхКолонок(ЭтотОбъект, СтрокаСделки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеДоговораСервер()
	
	ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	Если ВалютаВзаиморасчетов <> Объект.ВалютаДокумента Тогда
		Объект.ВалютаДокумента = ВалютаВзаиморасчетов;
		Для Каждого Сделка Из Объект.Сделки Цикл
			СтруктураКурсаДокумента = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Сделка.ДатаСовершенияСделки);
			Сделка.СуммаБезНДСВРублях = Сделка.СуммаБезНДСВВалютеРасчетов 
				* СтруктураКурсаДокумента.Курс / ?(СтруктураКурсаДокумента.Кратность = 0, 1, СтруктураКурсаДокумента.Кратность);
			Сделка.СуммаНДСВРублях = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(Сделка.СуммаБезНДСВРублях,
														УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(Сделка.СтавкаНДС),
														Ложь);
			РассчитатьЗначенияДополнительныхКолонок(ЭтотОбъект, Сделка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеПредметаСделкиСервер(ДанныеДляЗаполнения)
	
	ИзмененныеДанные = Новый Структура();
	
	Если ТипЗнч(ДанныеДляЗаполнения.ПредметСделки) = Тип("СправочникСсылка.Номенклатура") Тогда
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеДляЗаполнения.ПредметСделки, 
			"НаименованиеПолное, ТипНоменклатуры, ЕдиницаИзмерения");
		ИзмененныеДанные.Вставить("НаименованиеПредметаСделки", РеквизитыНоменклатуры.НаименованиеПолное);
		ИзмененныеДанные.Вставить("ТипПредметаСделки", ?(РеквизитыНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
														ИЛИ РеквизитыНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга, 
														Перечисления.ТипыПредметовКонтролируемыхСделок.РаботаУслуга, 
														Перечисления.ТипыПредметовКонтролируемыхСделок.Товар));
		ИзмененныеДанные.Вставить("ЕдиницаИзмерения", РеквизитыНоменклатуры.ЕдиницаИзмерения);
	ИначеЕсли ДанныеДляЗаполнения.ПредметСделки <> Неопределено Тогда
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеДляЗаполнения.ПредметСделки, 
			"Наименование");
		ИзмененныеДанные.Вставить("НаименованиеПредметаСделки", РеквизитыНоменклатуры.Наименование);
		ИзмененныеДанные.Вставить("ТипПредметаСделки", Перечисления.ТипыПредметовКонтролируемыхСделок.ИнойОбъектГражданскихПрав);
	КонецЕсли;
		
	Возврат ИзмененныеДанные;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьЗначенияДополнительныхКолонок(Форма, СтрокаСделки)
	
	СтрокаСделки.ВсегоВРублях = СтрокаСделки.СуммаБезНДСВРублях + СтрокаСделки.СуммаНДСВРублях;
	СтрокаСделки.ВсегоВВалютеРасчетов = СтрокаСделки.СуммаБезНДСВВалютеРасчетов + СтрокаСделки.СуммаНДСВВалютеРасчетов;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммуНДС(СуммаБезНДС, СтавкаНДС)
	
	Возврат УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СуммаБезНДС, УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС), Ложь);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПересчитатьСуммыСтроки(ДанныеСтроки, ИзмененноеПоле)
	
	Если ИзмененноеПоле = "ДатаСовершенияСделки" Тогда
		СтруктураКурсаДокумента = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ДанныеСтроки.ВалютаДокумента, ДанныеСтроки.ДатаСовершенияСделки);
		ДанныеСтроки.СуммаБезНДСВРублях = ДанныеСтроки.СуммаБезНДСВВалютеРасчетов 
			* СтруктураКурсаДокумента.Курс / ?(СтруктураКурсаДокумента.Кратность = 0, 1, СтруктураКурсаДокумента.Кратность);
		ПересчитатьСуммыСтроки(ДанныеСтроки, "СуммаБезНДСВРублях");
	ИначеЕсли ИзмененноеПоле = "СуммаБезНДСВРублях" Тогда
		ДанныеСтроки.СуммаНДСВРублях = РассчитатьСуммуНДС(ДанныеСтроки.СуммаБезНДСВРублях, ДанныеСтроки.СтавкаНДС);
	ИначеЕсли ИзмененноеПоле = "СуммаБезНДСВВалютеРасчетов" Тогда
		СтруктураКурсаДокумента = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ДанныеСтроки.ВалютаДокумента, ДанныеСтроки.ДатаСовершенияСделки);
		ДанныеСтроки.СуммаНДСВВалютеРасчетов = РассчитатьСуммуНДС(ДанныеСтроки.СуммаБезНДСВВалютеРасчетов, ДанныеСтроки.СтавкаНДС);
		ДанныеСтроки.СуммаБезНДСВРублях = ДанныеСтроки.СуммаБезНДСВВалютеРасчетов 
			* СтруктураКурсаДокумента.Курс / ?(СтруктураКурсаДокумента.Кратность = 0, 1, СтруктураКурсаДокумента.Кратность);
		ПересчитатьСуммыСтроки(ДанныеСтроки, "СуммаБезНДСВРублях");
	ИначеЕсли ИзмененноеПоле = "СтавкаНДС" Тогда
		ДанныеСтроки.СуммаНДСВВалютеРасчетов = РассчитатьСуммуНДС(ДанныеСтроки.СуммаБезНДСВВалютеРасчетов, ДанныеСтроки.СтавкаНДС);
		ДанныеСтроки.СуммаНДСВРублях = РассчитатьСуммуНДС(ДанныеСтроки.СуммаБезНДСВРублях, ДанныеСтроки.СтавкаНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыеЗначенияРеквизитовПриИзмененииУведомления(Уведомление)
	
	ЗначенияРеквизитов = Новый Структура();
	ЗначенияРеквизитов.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ЗначенияРеквизитов.Вставить("ДатаОтказаОтЕНВД", КонтролируемыеСделкиКлиентСервер.ДатаОтказаОтЕНВД());
	ЗначенияРеквизитов.Вставить("ОтчетныйГод", '00010101');
	ЗначенияРеквизитов.Вставить("Дата", '00010101');
	
	Если ЗначениеЗаполнено(Уведомление) Тогда 
		РеквизитыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Уведомление,
			"Организация,Дата,ВерсияУведомления,ОтчетныйГод");
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, РеквизитыУведомления);
	КонецЕсли;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

&НаСервере
Процедура АктуализироватьСтавкуНДСВТЧСделки()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Сделки, СтруктураДействий, Неопределено);
	
	Для каждого Строка Из Объект.Сделки Цикл
		ПересчитатьСуммыСтроки(Строка, "СтавкаНДС");
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти
