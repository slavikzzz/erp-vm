#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Рассчитывает резервы под обесценение запасов.
// Параметры:
// 	Период - Дата - период распределения расходов.
//	Организации - Массив - список организаций, по которым необходимо выполнить распределение.
Процедура РассчитатьРезервы(Период, Организации) Экспорт
	
	КлючеваяОперация = "ЗакрытиеМесяца.РасчетРезервовПодОбесценениеЗапасов";
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	КоличествоОбработанныхДанных = 0;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьКлючиАналитикиПоПартнерам(Организации, Период);
	ОчиститьДвиженияПоДокументамРезервов(Период, Организации, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстЗапросаПравил();
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("УправленческийУчетОрганизаций", РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций(Период));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22", РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(Период));
	
	Результат = Запрос.Выполнить();
	ВыборкаПоОрганизациям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		Регистратор = ВыборкаПоОрганизациям.Регистратор;
		Если Регистратор = Неопределено Тогда
			
			ДокументРезерва = Документы.РасчетРезервовПодОбесценениеЗапасов.СоздатьДокумент();
			ДокументРезерва.Организация = ВыборкаПоОрганизациям.Организация;
			ДокументРезерва.Дата = Период;
			ДокументРезерва.Записать(РежимЗаписиДокумента.Проведение);
			
			Регистратор = ДокументРезерва.Ссылка;
			
		КонецЕсли;
		
		Выборка = ВыборкаПоОрганизациям.Выбрать();
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КоличествоВременныхТаблиц = 
			Справочники.ПравилаФормированияРезервовПодОбесценениеЗапасов.СоздатьВременныеТаблицыОстатковПоПравилам(
				Выборка, 
				Новый Граница(Период, ВидГраницы.Включая), 
				МенеджерВременныхТаблиц,
				Истина);
					
		НачатьТранзакцию();
		Попытка
			
				
			Если КоличествоВременныхТаблиц <> 0 Тогда
							
				ПараметрыПомещения = Новый Структура;
				ПараметрыПомещения.Вставить("ИмяВременнойТаблицы", "ТаблицаОстатковПоПравилу");
				ПараметрыПомещения.Вставить("НомерВременнойТаблицы", КоличествоВременныхТаблиц);
					
				Данные = СформироватьИтоговуюТаблицуРезервов(МенеджерВременныхТаблиц, ПараметрыПомещения);
				КоличествоОбработанныхДанных = Данные.Количество();
				
				ОбщегоНазначенияУТ.ДобавитьИдентификаторыВТаблицуЗначений(Данные);	
			
				НаборЗаписей = РегистрыНакопления.СебестоимостьТоваров.СоздатьНаборЗаписей();
				НаборЗаписей.ДополнительныеСвойства.Вставить(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта());
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				НаборЗаписей.Записывать = Истина;
				НаборЗаписей.Загрузить(Данные);
				НаборЗаписей.Записать();
				
				Данные.Колонки.Удалить(Данные.Колонки.Найти("РезервПодОбесценениеРегл"));
				Данные.Колонки.Удалить(Данные.Колонки.Найти("РезервПодОбесценениеУпр"));
				Данные.Колонки.Найти("РезервПодОбесценениеРеглВыручка").Имя = "РезервПодОбесценениеРегл";
				Данные.Колонки.Найти("РезервПодОбесценениеУпрВыручка").Имя = "РезервПодОбесценениеУпр";
				
				НаборЗаписей = РегистрыНакопления.ВыручкаИСебестоимостьПродаж.СоздатьНаборЗаписей();
				НаборЗаписей.ДополнительныеСвойства.Вставить(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта());
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				НаборЗаписей.Записывать = Истина;
				НаборЗаписей.Загрузить(Данные);
				НаборЗаписей.Записать();
				
			Иначе
				
				НаборЗаписей = РегистрыНакопления.СебестоимостьТоваров.СоздатьНаборЗаписей();
				НаборЗаписей.ДополнительныеСвойства.Вставить(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта());
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				НаборЗаписей.Записывать = Истина;
				НаборЗаписей.Записать();
				
				НаборЗаписей = РегистрыНакопления.ВыручкаИСебестоимостьПродаж.СоздатьНаборЗаписей();
				НаборЗаписей.ДополнительныеСвойства.Вставить(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта());
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				НаборЗаписей.Записывать = Истина;
				НаборЗаписей.Записать();
			
			КонецЕсли;
						
			//++ НЕ УТКА
			ДокументыКОтражению = СформироватьТаблицуДокументовКОтражению(Регистратор, ВыборкаПоОрганизациям.Организация, Период);
			МеждународныйУчетПроведениеСервер.ВернутьДокументыКОтражению(ДокументыКОтражению);
			//-- НЕ УТКА
			
			РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(
				ДобавитьМесяц(НачалоМесяца(Период), 1),
				Регистратор, 
				ВыборкаПоОрганизациям.Организация);
			
			Если ВыборкаПоОрганизациям.Регистратор <> Неопределено Тогда
				РасчетРезервовПодОбесценениеЗапасовЛокализация.ЗарегистрироватьОтражениеДокумента(Регистратор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось рассчитать резервы по организации ""%1"" по причине: %2';
									|en = 'Cannot calculate provisions of ""%1"" company. Reason: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ВыборкаПоОрганизациям.Организация, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
				Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПодОбесценениеЗапасов,
				ВыборкаПоОрганизациям.Организация,
				Период);
			
			ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыРегистрации,
				НСтр("ru = 'При расчете резервов под обесценение диагностированы ошибки.';
					|en = 'Errors were detected when calculating provisions for impairment.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				"",
				ТекстСообщения,
				Выборка.Регистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоОбработанныхДанных / 1000);
	
КонецПроцедуры

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
	РасчетРезервовПодОбесценениеЗапасовЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
// 	см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.РасчетРезервовПодОбесценениеЗапасов") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаОтражениеДокументовВМеждународномУчете(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		
		РасчетРезервовПодОбесценениеЗапасовЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область РегламентированныйУчет

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//   Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат РасчетРезервовПодОбесценениеЗапасовЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//   Строка - Текст запроса временной таблицы.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат РасчетРезервовПодОбесценениеЗапасовЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ФормированиеРезервовПодОбесценениеЗапасов

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - идентификатор группы.
//
Процедура ДобавитьЭтап_ФормированиеРезервовПодОбесценениеЗапасов(ТаблицаЭтапов, ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПодОбесценениеЗапасов);
	ПредшествующиеЭтапы = НоваяСтрока.ПредшествующиеЭтапы; // Массив
	ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Сформировать';
										|en = 'Generate'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"Документы.РасчетРезервовПодОбесценениеЗапасов.Использование_ФормированиеРезервовПодОбесценениеЗапасов");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"Документы.РасчетРезервовПодОбесценениеЗапасов.Выполнить_ФормированиеРезервовПодОбесценениеЗапасов");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РасчетРезервовПодОбесценениеЗапасов.Формы.ФормаСписка.ПолноеИмя());
	 	
КонецПроцедуры

// Обработчики этапа.

Процедура Использование_ФормированиеРезервовПодОбесценениеЗапасов(ПараметрыОбработчика) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ФормироватьРезервыПодОбесценениеЗапасов") Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Формирование резервов под обесценение запасов не используется.';
				|en = 'Generation of provisions for impairment of inventory is not used.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Правила.Ссылка КАК Правило
	|ИЗ
	|	Справочник.ПравилаФормированияРезервовПодОбесценениеЗапасов КАК Правила
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И НАЧАЛОПЕРИОДА(Правила.НачалоДействия, МЕСЯЦ) <= &НачалоПериода
	|	И (КОНЕЦПЕРИОДА(Правила.КонецДействия, МЕСЯЦ) >= &КонецПериода
	|		ИЛИ Правила.КонецДействия = ДАТАВРЕМЯ(1,1,1))
	|	И (Правила.РегламентированныйУчет
	|		ИЛИ Правила.УправленческийУчет)
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(Метаданные.Отчеты.СправкаРасчетДвиженияРезервовПодОбесценение.ПолноеИмя() + ".Форма", Истина);
	ДействиеПодробнее.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ДействиеПодробнее.ПараметрыФормы.Вставить("ВсеОрганизации", ПараметрыОбработчика.ПараметрыРасчета.ВсеОрганизации);
	ЕстьЗаданиеКРасчету = ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина,,, ДействиеПодробнее);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не требуется формирование резервов под обесценение запасов на конец периода %1';
					|en = 'Generation of provisions for impairment of inventory at the end of period %1 is not required'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)));
		
	ИначеЕсли ЕстьЗаданиеКРасчету Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Требуется сформировать резервы под обесценение запасов на конец периода %1.';
					|en = 'Generate provisions for impairment of inventory at the end of period %1.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ФормированиеРезервовПодОбесценениеЗапасов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоПериода = НачалоМесяца(ПараметрыРасчета.ПериодРегистрации);
	КонецПериода  = КонецМесяца(ПараметрыРасчета.ПериодРегистрации);
	
	НомерЗаданияДоРасчета = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций, ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ДанныеКРаспределению = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(
			НачалоПериода,
			КонецПериода,
			НомерЗаданияДоРасчета,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
				|%2';
				|en = 'An error occurred when calculating for the %1 period:
				|%2'"),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ТекстОшибки,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		
	КонецПопытки;
	
	РассчитанныеОрганизации = Новый Массив;
	Для Каждого ТекущаяОрганизация Из ПараметрыРасчета.МассивОрганизаций Цикл
		
		Попытка
			
			Документы.РасчетРезервовПодОбесценениеЗапасов.РассчитатьРезервы(
				КонецПериода, 
				ТекущаяОрганизация);
				
			Если Не ДанныеКРаспределению.Организация.Найти(ТекущаяОрганизация) = Неопределено
				И РассчитанныеОрганизации.Найти(ТекущаяОрганизация) = Неопределено Тогда
				РассчитанныеОрганизации.Добавить(ТекущаяОрганизация);
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Формирование резервов под обесценение запасов на конец периода %1 завершилось с ошибкой:
					|%2';
					|en = 'An error:
					|%2 occurred when generating provisions for impairment of inventory at the end of period %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ТекущаяОрганизация);
			
		КонецПопытки;
			
	КонецЦикла;
	
	Если РассчитанныеОрганизации.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
				НомерЗаданияДоРасчета,
				РассчитанныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(
				ДобавитьМесяц(НачалоПериода, 1),
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРаспределению.ВременныеТаблицы);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'"),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				РассчитанныеОрганизации,
				ПараметрыРасчета.ПериодРегистрации);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	РасчетРезервовПодОбесценениеЗапасовЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.СправкаРасчетДвиженияРезервовПодОбесценение.ДобавитьКомандуОтчета(КомандыОтчетов);
	Отчеты.СправкаРасчетРезервовПодОбесценениеЗапасов.ДобавитьКомандуОтчета(КомандыОтчетов);
	РасчетРезервовПодОбесценениеЗапасовЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт

	РасчетРезервовПодОбесценениеЗапасовЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Расчет себестоимости товаров".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
// 
// Возвращаемое значение:
//  Неопределено 
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт

	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.РасчетРезервовПодОбесценениеЗапасов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",
								ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.РасчетРезервовПодОбесценениеЗапасов")));
								
	Запрос.УстановитьПараметр("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	Запрос.УстановитьПараметр("ХозОперацияДляРеестра", Перечисления.ХозяйственныеОперации.РасчетРезервовПодОбесценениеЗапасов);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОтражениеДокументовВМеждународномУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВМеждународномУчете";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период 	 				 КАК Период,
	|	&Организация 				 КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&ХозОперацияДляРеестра КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК МестоХранения,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	&Период КАК ДатаДокументаИБ,
	|	&Ссылка КАК Ссылка,
	|	&Номер КАК НомерДокументаИБ,
	|	НЕОПРЕДЕЛЕНО КАК Статус,
	|	НЕОПРЕДЕЛЕНО КАК Ответственный,
	|	НЕОПРЕДЕЛЕНО КАК Автор,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	НЕОПРЕДЕЛЕНО КАК Дополнительно,
	|	&Комментарий КАК Комментарий,
	|	&Проведен КАК Проведен,
	|	&ПометкаУдаления КАК ПометкаУдаления,
	|	&Период КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать КАК НомерПервичногоДокумента,
	|	0 КАК Сумма,
	|	НЕОПРЕДЕЛЕНО КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ЛОЖЬ КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК ИсправляемыйДокумент,
	|	&Период КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.РасчетРезервовПодОбесценениеЗапасов";
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.РасчетРезервовПодОбесценениеЗапасов"));
	ЗначенияПараметров.Вставить("ХозОперацияДляРеестра", Перечисления.ХозяйственныеОперации.РасчетРезервовПодОбесценениеЗапасов);
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента, Ложь);
	Иначе
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента);
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РасчетРезервов

Процедура СоздатьКлючиАналитикиПоПартнерам(Организации, Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Остатки.Организация КАК Организация,
		|	ЕСТЬNULL(Остатки.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,
		|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности
		|ПОМЕСТИТЬ ВтАналитикиОстатков
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров.Остатки(&Период, Организация В (&Организации)) КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	НаправлениеДеятельности
		|;
		|ВЫБРАТЬ
		|	Остатки.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	Остатки.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	ВтАналитикиОстатков КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПартнера
		|		ПО (АналитикаПартнера.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|		И (АналитикаПартнера.Организация = Остатки.Организация)
		|		И (АналитикаПартнера.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|		И (АналитикаПартнера.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
		|		И (АналитикаПартнера.НаправлениеДеятельности = Остатки.НаправлениеДеятельности)
		|ГДЕ
		|	АналитикаПартнера.КлючАналитики ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("Период", Новый Граница(Период, ВидГраницы.Включая));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаПоПартнерам.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьДвиженияПоДокументамРезервов(Период, Организации, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Резервы.Ссылка КАК Регистратор,
		|	Организации.Ссылка КАК Организация
		|ПОМЕСТИТЬ ДокументыРезервов
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасчетРезервовПодОбесценениеЗапасов КАК Резервы
		|		ПО Организации.Ссылка = Резервы.Организация
		|			И Резервы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|			И Резервы.Проведен
		|ГДЕ
		|	Организации.Ссылка В (&Организации)
		|;
		|
		|ВЫБРАТЬ
		|	Т.Регистратор
		|ИЗ
		|	ДокументыРезервов КАК Т";
		
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организации", Организации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.СебестоимостьТоваров.НаборЗаписей");
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ВыручкаИСебестоимостьПродаж.НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.СебестоимостьТоваров.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать();
		
			НаборЗаписей = РегистрыНакопления.ВыручкаИСебестоимостьПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось очистить движения по регистрам ""Себестоимость товаров"" и ""Выручка и себестоимость продаж"" документа ""%1"" по причине: %2';
									|en = 'Cannot clear records of registers ""Inventory cost"" and ""Revenue and cost of goods sold"" of the ""%1"" document. Reason: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Регистратор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Расчет резервов под обесценение.';
					|en = 'Calculate provisions for impairment.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Выборка.Регистратор,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА
Функция СформироватьТаблицуДокументовКОтражению(Документ, Организация, Период)

	ДокументыКОтражению = Новый ТаблицаЗначений;
	ДокументыКОтражению.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.РасчетРезервовПодОбесценениеЗапасов"));
	ДокументыКОтражению.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДокументыКОтражению.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ДокументыКОтражению.Колонки.Добавить("ДатаОтражения", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = ДокументыКОтражению.Добавить();
	
	НоваяСтрока.Документ = Документ;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период = Период;
	НоваяСтрока.ДатаОтражения = Период;
	
	Возврат ДокументыКОтражению;
	
КонецФункции
//-- НЕ УТКА

Функция СформироватьИтоговуюТаблицуРезервов(МенеджерВременныхТаблиц, ПараметрыПомещения)
	
	ЗапросИтоговойВременнойТаблицы = СформироватьИтоговыйЗапросРезервов(ПараметрыПомещения);
	ЗапросИтоговойВременнойТаблицы.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТаблицаРезервов = ЗапросИтоговойВременнойТаблицы.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезервов;
	
КонецФункции

Функция СформироватьИтоговыйЗапросРезервов(ПараметрыПомещения)
	
	ИтоговыйЗапрос = Новый Запрос;
	Схема = Новый СхемаЗапроса;
	ТекстЗапроса = ТекстИтоговогоЗапроса();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаОстатков", ПараметрыПомещения.ИмяВременнойТаблицы);
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Справочники.ПравилаФормированияРезервовПодОбесценениеЗапасов.СформироватьОператорыОбъединенияВременныхТаблиц(Схема, ПараметрыПомещения.ИмяВременнойТаблицы, ПараметрыПомещения.НомерВременнойТаблицы); 
	
	ИтоговыйЗапрос.Текст = Схема.ПолучитьТекстЗапроса();
	
	Возврат ИтоговыйЗапрос;
	
КонецФункции

Функция ТекстИтоговогоЗапроса()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Период КАК Период,
	|	ТаблицаОстатков.Правило КАК Правило,
	|	ТаблицаОстатков.Приоритет КАК Приоритет,
	|	ТаблицаОстатков.РегламентированныйУчет КАК РегламентированныйУчет,
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаОстатков.Склад КАК Склад,
	|	ТаблицаОстатков.РазделУчета КАК РазделУчета,
	|	ТаблицаОстатков.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаОстатков.ТипЗапасов КАК ТипЗапасов,
	|	ТаблицаОстатков.Организация КАК Организация,
	|	ТаблицаОстатков.Партия КАК Партия,
	|	ТаблицаОстатков.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ТаблицаОстатков.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
	|	ТаблицаОстатков.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ТаблицаОстатков.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаОстатков.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаОстатков.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации,
	|	ТаблицаОстатков.РасчетСебестоимости КАК РасчетСебестоимости,
	|	ТаблицаОстатков.РезервПодОбесценениеРегл КАК РезервПодОбесценениеРегл,
	|	ТаблицаОстатков.РезервПодОбесценениеУпр КАК РезервПодОбесценениеУпр,
	|	ТаблицаОстатков.РезервПодОбесценениеРеглВыручка КАК РезервПодОбесценениеРеглВыручка,
	|	ТаблицаОстатков.РезервПодОбесценениеУпрВыручка КАК РезервПодОбесценениеУпрВыручка,
	|	ТаблицаОстатков.ВидДвижения КАК ВидДвижения
	|ПОМЕСТИТЬ ВременнаяТаблицаОстатков
	|ИЗ
	|	&ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	МИНИМУМ(ТаблицаОстатков.Приоритет) КАК Приоритет,
	|	ТаблицаОстатков.РазделУчета КАК РазделУчета,
	|	ТаблицаОстатков.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаОстатков.ТипЗапасов КАК ТипЗапасов,
	|	ТаблицаОстатков.Организация КАК Организация,
	|	ТаблицаОстатков.Партия КАК Партия,
	|	ТаблицаОстатков.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ТаблицаОстатков.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
	|	ТаблицаОстатков.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ИСТИНА КАК РегламентированныйУчет,
	|	ЛОЖЬ КАК УправленческийУчет
	|ПОМЕСТИТЬ ПриоритетПравил
	|ИЗ
	|	ВременнаяТаблицаОстатков КАК ТаблицаОстатков
	|ГДЕ
	|	ВЫРАЗИТЬ(ТаблицаОстатков.Правило КАК
	|		Справочник.ПравилаФормированияРезервовПодОбесценениеЗапасов).РегламентированныйУчет
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры,
	|	ТаблицаОстатков.РазделУчета,
	|	ТаблицаОстатков.ВидЗапасов,
	|	ТаблицаОстатков.ТипЗапасов,
	|	ТаблицаОстатков.Организация,
	|	ТаблицаОстатков.Партия,
	|	ТаблицаОстатков.АналитикаУчетаПартий,
	|	ТаблицаОстатков.АналитикаФинансовогоУчета,
	|	ТаблицаОстатков.ВидДеятельностиНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	МИНИМУМ(ТаблицаОстатков.Приоритет) КАК Приоритет,
	|	ТаблицаОстатков.РазделУчета КАК РазделУчета,
	|	ТаблицаОстатков.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаОстатков.ТипЗапасов КАК ТипЗапасов,
	|	ТаблицаОстатков.Организация КАК Организация,
	|	ТаблицаОстатков.Партия КАК Партия,
	|	ТаблицаОстатков.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ТаблицаОстатков.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
	|	ТаблицаОстатков.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ЛОЖЬ КАК РегламентированныйУчет,
	|	ИСТИНА КАК УправленческийУчет
	|ИЗ
	|	ВременнаяТаблицаОстатков КАК ТаблицаОстатков
	|ГДЕ
	|	ВЫРАЗИТЬ(ТаблицаОстатков.Правило КАК Справочник.ПравилаФормированияРезервовПодОбесценениеЗапасов).УправленческийУчет
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры,
	|	ТаблицаОстатков.РазделУчета,
	|	ТаблицаОстатков.ВидЗапасов,
	|	ТаблицаОстатков.ТипЗапасов,
	|	ТаблицаОстатков.Организация,
	|	ТаблицаОстатков.Партия,
	|	ТаблицаОстатков.АналитикаУчетаПартий,
	|	ТаблицаОстатков.АналитикаФинансовогоУчета,
	|	ТаблицаОстатков.ВидДеятельностиНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	Приоритет,
	|	РазделУчета,
	|	ВидЗапасов,
	|	ТипЗапасов,
	|	Организация,
	|	Партия,
	|	АналитикаУчетаПартий,
	|	АналитикаФинансовогоУчета,
	|	ВидДеятельностиНДС,
	|	РегламентированныйУчет,
	|	УправленческийУчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Период КАК Период,
	|	ТаблицаОстатков.Правило КАК Правило,
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаОстатков.Склад КАК Склад,
	|	ТаблицаОстатков.РазделУчета КАК РазделУчета,
	|	ТаблицаОстатков.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаОстатков.ТипЗапасов КАК ТипЗапасов,
	|	ТаблицаОстатков.Организация КАК Организация,
	|	ТаблицаОстатков.Партия КАК Партия,
	|	ТаблицаОстатков.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ТаблицаОстатков.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
	|	ТаблицаОстатков.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ТаблицаОстатков.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаОстатков.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаОстатков.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации,
	|	ТаблицаОстатков.РасчетСебестоимости КАК РасчетСебестоимости,
	|	ТаблицаОстатков.РезервПодОбесценениеРегл КАК РезервПодОбесценениеРегл,
	|	0 КАК РезервПодОбесценениеУпр,
	|	ТаблицаОстатков.РезервПодОбесценениеРеглВыручка КАК РезервПодОбесценениеРеглВыручка,
	|	0 КАК РезервПодОбесценениеУпрВыручка,
	|	ТаблицаОстатков.ВидДвижения КАК ВидДвижения
	|ИЗ
	|	ВременнаяТаблицаОстатков КАК ТаблицаОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриоритетПравил КАК ПриоритетПравил
	|		ПО ТаблицаОстатков.АналитикаУчетаНоменклатуры = ПриоритетПравил.АналитикаУчетаНоменклатуры
	|		И ТаблицаОстатков.РазделУчета = ПриоритетПравил.РазделУчета
	|		И ТаблицаОстатков.ВидЗапасов = ПриоритетПравил.ВидЗапасов
	|		И ТаблицаОстатков.Организация = ПриоритетПравил.Организация
	|		И ТаблицаОстатков.Партия = ПриоритетПравил.Партия
	|		И ТаблицаОстатков.АналитикаУчетаПартий = ПриоритетПравил.АналитикаУчетаПартий
	|		И ТаблицаОстатков.АналитикаФинансовогоУчета = ПриоритетПравил.АналитикаФинансовогоУчета
	|		И ТаблицаОстатков.ВидДеятельностиНДС = ПриоритетПравил.ВидДеятельностиНДС
	|		И ТаблицаОстатков.Приоритет = ПриоритетПравил.Приоритет
	|ГДЕ
	|	ПриоритетПравил.РегламентированныйУчет
	|	И ТаблицаОстатков.РегламентированныйУчет
	|	И ТаблицаОстатков.РезервПодОбесценениеРегл <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Период КАК Период,
	|	ТаблицаОстатков.Правило КАК Правило,
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаОстатков.Склад КАК Склад,
	|	ТаблицаОстатков.РазделУчета КАК РазделУчета,
	|	ТаблицаОстатков.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаОстатков.ТипЗапасов КАК ТипЗапасов,
	|	ТаблицаОстатков.Организация КАК Организация,
	|	ТаблицаОстатков.Партия КАК Партия,
	|	ТаблицаОстатков.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ТаблицаОстатков.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
	|	ТаблицаОстатков.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ТаблицаОстатков.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаОстатков.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаОстатков.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации,
	|	ТаблицаОстатков.РасчетСебестоимости КАК РасчетСебестоимости,
	|	0 КАК РезервПодОбесценениеРегл,
	|	ТаблицаОстатков.РезервПодОбесценениеУпр КАК РезервПодОбесценениеУпр,
	|	0 КАК РезервПодОбесценениеРеглВыручка,
	|	ТаблицаОстатков.РезервПодОбесценениеУпрВыручка КАК РезервПодОбесценениеУпрВыручка,
	|	ТаблицаОстатков.ВидДвижения КАК ВидДвижения
	|ИЗ
	|	ВременнаяТаблицаОстатков КАК ТаблицаОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриоритетПравил КАК ПриоритетПравил
	|		ПО ТаблицаОстатков.АналитикаУчетаНоменклатуры = ПриоритетПравил.АналитикаУчетаНоменклатуры
	|		И ТаблицаОстатков.РазделУчета = ПриоритетПравил.РазделУчета
	|		И ТаблицаОстатков.ВидЗапасов = ПриоритетПравил.ВидЗапасов
	|		И ТаблицаОстатков.Организация = ПриоритетПравил.Организация
	|		И ТаблицаОстатков.Партия = ПриоритетПравил.Партия
	|		И ТаблицаОстатков.АналитикаУчетаПартий = ПриоритетПравил.АналитикаУчетаПартий
	|		И ТаблицаОстатков.АналитикаФинансовогоУчета = ПриоритетПравил.АналитикаФинансовогоУчета
	|		И ТаблицаОстатков.ВидДеятельностиНДС = ПриоритетПравил.ВидДеятельностиНДС
	|		И ТаблицаОстатков.Приоритет = ПриоритетПравил.Приоритет
	|ГДЕ
	|	ПриоритетПравил.УправленческийУчет
	|	И НЕ ТаблицаОстатков.РегламентированныйУчет
	|	И ТаблицаОстатков.РезервПодОбесценениеУпр <> 0";
	
	Возврат ТекстЗапроса
				
КонецФункции

Функция ТекстЗапросаПравил();
	
	ТекстЗапроса =
	
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ДокументыРезервов.Регистратор, НЕОПРЕДЕЛЕНО) КАК Регистратор,
	|	Правила.Ссылка КАК Правило,
	|	Правила.Владелец КАК Организация,
	|	Правила.ВидЦены КАК ВидЦены,
	|	Правила.ХранилищеНастроекКомпоновкиДанных КАК НастройкиКомпоновкиДанных,
	|	Правила.РегламентированныйУчет КАК РегламентированныйУчет,
	|	(ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА Правила.УправленческийУчет
	|		ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК УправленческийУчет
	|ИЗ
	|	Справочник.ПравилаФормированияРезервовПодОбесценениеЗапасов КАК Правила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыРезервов КАК ДокументыРезервов
	|		ПО Правила.Владелец = ДокументыРезервов.Организация
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И НАЧАЛОПЕРИОДА(Правила.НачалоДействия, МЕСЯЦ) <= &Период
	|	И (КОНЕЦПЕРИОДА(Правила.КонецДействия, МЕСЯЦ) >= &Период
	|		ИЛИ Правила.КонецДействия = ДАТАВРЕМЯ(1,1,1))
	|	И НЕ Правила.ПометкаУдаления
	|	И Правила.Владелец В(&Организации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Правила.Приоритет
	|ИТОГИ
	|	МАКСИМУМ(Регистратор)
	|ПО
	|	Организация";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
