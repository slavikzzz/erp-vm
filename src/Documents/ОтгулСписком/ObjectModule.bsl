#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// В качестве данных заполнения может принимать структуру с полями.
//		Ссылка
//		Действие
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Исправить" Тогда
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, ДанныеЗаполнения.Ссылка,
				, 
				"Начисления,
				|НачисленияПерерасчет,
				|НачисленияПерерасчетНулевыеСторно,
				|РаспределениеРезультатовНачислений");
				
			ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
		ИначеЕсли ДанныеЗаполнения.Свойство("Сотрудник") Тогда
			ЗаполнитьЗначенияСвойств(Сотрудники.Добавить(), ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Документы.ОтгулСписком.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
		
		Если Не ЗначениеЗаполнено(ВидРасчета) 
			И Не ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияОтгул") Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				Документы.Отгул.ТекстСообщенияНеЗаполненВидРасчета(Ложь),
			Ссылка,
			,
			,
			Отказ);
		КонецЕсли;
		
		Если ПерерасчетВыполнен Тогда 
			
			// Проверка корректности распределения по источникам финансирования
			ИменаТаблицРаспределяемыхПоСтатьямФинансирования = "Начисления,НачисленияПерерасчет";
			
			ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержанийОбъекта(
				ЭтотОбъект, ИменаТаблицРаспределяемыхПоСтатьямФинансирования, Отказ);
			
			// Проверка корректности распределения по территориям и условиям труда
			ИменаТаблицРаспределенияПоТерриториямУсловиямТруда = "Начисления,НачисленияПерерасчет";
			
			РасчетЗарплатыРасширенный.ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(
				ЭтотОбъект, ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, Отказ);
			
			ПроверитьПериодДействияНачислений(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПериодыОтгуловСотрудников = Новый Соответствие;
	Для Каждого СтрокаСотрудника Из Сотрудники Цикл
		Если Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаНачала) Или Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаОкончания) Тогда 
			Продолжить;
		КонецЕсли;
		Если СтрокаСотрудника.ДатаНачала > СтрокаСотрудника.ДатаОкончания Тогда 
			ТекстСообщения = НСтр("ru = 'Сотрудник %1: дата начала не может быть больше даты окончания';
									|en = 'Employee %1: start date cannot be greater than end date'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСотрудника.Сотрудник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"Сотрудники[" + Формат(Сотрудники.Индекс(СтрокаСотрудника), "ЧН=0; ЧГ=0") + "].Сотрудник", "Объект", Отказ);
			Продолжить;
		КонецЕсли;
		ДанныеОтгула = Новый Структура("ДатаНачала, ДатаОкончания, НомерСтроки, ИндексСтроки");
		ЗаполнитьЗначенияСвойств(ДанныеОтгула, СтрокаСотрудника);
		ДанныеОтгула.ИндексСтроки = Сотрудники.Индекс(СтрокаСотрудника);
		ПериодыОтгулов = ПериодыОтгуловСотрудников[СтрокаСотрудника.Сотрудник];
		Если ПериодыОтгулов = Неопределено Тогда 
			ПериодыОтгулов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеОтгула);
			ПериодыОтгуловСотрудников.Вставить(СтрокаСотрудника.Сотрудник, ПериодыОтгулов);
		Иначе 
			Для Каждого ПериодОтгула Из ПериодыОтгулов Цикл
				Если Не (ДанныеОтгула.ДатаНачала > ПериодОтгула.ДатаОкончания Или ДанныеОтгула.ДатаОкончания < ПериодОтгула.ДатаНачала) Тогда
					ТекстСообщения = НСтр("ru = 'Пересекаются периоды отгулов сотрудника %1 (строки %2 и %3)';
											|en = 'Periods of days off for employee %1 overlap (lines %2 and %3)'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСотрудника.Сотрудник, ПериодОтгула.НомерСтроки, ДанныеОтгула.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"Сотрудники[" + Формат(ДанныеОтгула.ИндексСтроки, "ЧН=0; ЧГ=0") + "].Сотрудник", "Объект", Отказ);
				КонецЕсли;
			КонецЦикла;
			ПериодыОтгулов.Добавить(ДанныеОтгула);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ДополнительныеСвойства.Свойство("ПроверкаПересеченияПериодовВыполнена") Тогда
		ПроверитьПересечениеПериодовОтсутствия(Отказ);
	КонецЕсли;
	
	КадровыйЭДО.ПроверитьВозможностьСохраненияИзмененийДокументаСПечатнымиФормами(
		ЭтотОбъект, Метаданные.Роли.ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.ЗаполнитьИсходныйДокумент(ЭтотОбъект);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РасчетЗарплатыРасширенный.ЗаполнитьИсходныйДокументПриКопировании(ЭтотОбъект, ОбъектКопирования.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьПериодДействияНачислений(Отказ)
	
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("НачисленияПерерасчет", НСтр("ru = 'Перерасчет прошлого периода';
																																	|en = 'Recalculation of the last period'")));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ЭтотОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
	
КонецПроцедуры

Процедура ПроверитьПересечениеПериодовОтсутствия(Отказ)
	
	РезультатПроверки = РезультатПроверкиПересеченийПериодовОтсутствия();
	
	Отказ = Отказ Или РезультатПроверки.Отказ;
	
	Для Каждого СтрокаСотрудника Из Сотрудники Цикл
		
		ДанныеСотрудника = РезультатПроверки.ДанныеСотрудников.Получить(СтрокаСотрудника.Сотрудник);
		Если ДанныеСотрудника = Неопределено Тогда
			Продолжить;
		Иначе
			
			ТекстСообщения = НСтр("ru = 'На период %1 сотруднику %2 уже зарегистрировано отсутствие документом %3.';
									|en = 'Absence has already been registered for the %2 employee on period %1 by the %3 document.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
				ДанныеСотрудника.ПредставлениеПериода, СтрокаСотрудника.Сотрудник, ДанныеСотрудника.Регистратор);
			
			ИндексСтроки = Сотрудники.Индекс(СтрокаСотрудника);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.Сотрудники[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].Сотрудник", , Отказ);

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатПроверкиПересеченийПериодовОтсутствия() Экспорт
	
	ИсходныеДанные = СостоянияСотрудников.ПустаяТаблицаДанныхСостоянийСотрудника();
	
	Для Каждого СтрокаСотрудника Из Сотрудники Цикл
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Сотрудник = СтрокаСотрудника.Сотрудник;
		НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.ДополнительныеВыходныеДниНеОплачиваемые;
		НоваяСтрока.Начало = СтрокаСотрудника.ДатаНачала;
		НоваяСтрока.Окончание = СтрокаСотрудника.ДатаОкончания;
		
	КонецЦикла;
	
	Возврат СостоянияСотрудников.ПроверитьПересечениеПериодовОтсутствия(ИсходныеДанные, Ссылка, ИсправленныйДокумент);
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли