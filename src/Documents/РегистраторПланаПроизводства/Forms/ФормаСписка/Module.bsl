
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Регистраторы = Строки.ПолучитьКлючи();
	
	Если Регистраторы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПланПроизводства = Строки[Регистраторы[0]].Оформление.Получить("КоличествоПланыПроизводства") <> Неопределено;
	ЕстьПланВыпускаИзделий = Строки[Регистраторы[0]].Оформление.Получить("КоличествоПланыВыпускаИзделий") <> Неопределено;
	ЕстьПланПотребленияМатериалов = Строки[Регистраторы[0]].Оформление.Получить("КоличествоПланыПотребленияМатериалов") <> Неопределено;
//++ НЕ УТКА
	ЕстьПланЗанятостиВидовРабочихЦентров = Строки[Регистраторы[0]].Оформление.Получить("КоличествоПланыЗанятостиВидовРабочихЦентров") <> Неопределено;
//-- НЕ УТКА
	ЕстьПланЗанятостиТрудовыхРесурсов = Строки[Регистраторы[0]].Оформление.Получить("КоличествоПланыЗанятостиТрудовыхРесурсов") <> Неопределено;
	
	Если Не ( ЕстьПланПроизводства
		ИЛИ ЕстьПланВыпускаИзделий
		ИЛИ ЕстьПланПотребленияМатериалов
//++ НЕ УТКА
		ИЛИ ЕстьПланЗанятостиВидовРабочихЦентров
//-- НЕ УТКА
		ИЛИ ЕстьПланЗанятостиТрудовыхРесурсов ) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Обороты.Регистратор КАК Ссылка,
	|	СУММА(Обороты.КоличествоПланыПроизводства) КАК КоличествоПланыПроизводства,
	|	СУММА(Обороты.КоличествоПланыВыпускаИзделий) КАК КоличествоПланыВыпускаИзделий,
	|	СУММА(Обороты.КоличествоПланыПотребленияМатериалов) КАК КоличествоПланыПотребленияМатериалов,
//++ НЕ УТКА
	|	СУММА(Обороты.КоличествоПланыЗанятостиВидовРабочихЦентров) КАК КоличествоПланыЗанятостиВидовРабочихЦентров,
//-- НЕ УТКА
	|	СУММА(Обороты.КоличествоПланыЗанятостиТрудовыхРесурсов) КАК КоличествоПланыЗанятостиТрудовыхРесурсов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Регистратор КАК Регистратор,
	|		КОЛИЧЕСТВО(Таблица.НомерСтроки) КАК КоличествоПланыПроизводства,
	|		0 КАК КоличествоПланыВыпускаИзделий,
	|		0 КАК КоличествоПланыПотребленияМатериалов,
	|		0 КАК КоличествоПланыЗанятостиВидовРабочихЦентров,
	|		0 КАК КоличествоПланыЗанятостиТрудовыхРесурсов
	|	ИЗ
	|		РегистрНакопления.ПланыПроизводства КАК Таблица
	|	ГДЕ
	|		Таблица.Регистратор В(&Регистраторы)
	|		И &ЕстьПланПроизводства
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Таблица.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Регистратор,
	|		0,
	|		КОЛИЧЕСТВО(Таблица.НомерСтроки),
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ПланыВыпускаИзделий КАК Таблица
	|	ГДЕ
	|		Таблица.Регистратор В(&Регистраторы)
	|		И &ЕстьПланВыпускаИзделий
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Таблица.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Регистратор,
	|		0,
	|		0,
	|		КОЛИЧЕСТВО(Таблица.НомерСтроки),
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ПланыПотребленияМатериалов КАК Таблица
	|	ГДЕ
	|		Таблица.Регистратор В(&Регистраторы)
	|		И &ЕстьПланПотребленияМатериалов
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Таблица.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
//++ НЕ УТКА
	|	ВЫБРАТЬ
	|		Таблица.Регистратор,
	|		0,
	|		0,
	|		0,
	|		КОЛИЧЕСТВО(Таблица.НомерСтроки),
	|		0
	|	ИЗ
	|		РегистрНакопления.ПланыЗанятостиВидовРабочихЦентров КАК Таблица
	|	ГДЕ
	|		Таблица.Регистратор В(&Регистраторы)
	|		И &ЕстьПланЗанятостиВидовРабочихЦентров
//-- НЕ УТКА
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Таблица.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Регистратор,
	|		0,
	|		0,
	|		0,
	|		0,
	|		КОЛИЧЕСТВО(Таблица.НомерСтроки)
	|	ИЗ
	|		РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов КАК Таблица
	|	ГДЕ
	|		Таблица.Регистратор В(&Регистраторы)
	|		И &ЕстьПланЗанятостиТрудовыхРесурсов
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Таблица.Регистратор) КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.Регистратор");
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	Запрос.УстановитьПараметр("ЕстьПланПроизводства", ЕстьПланПроизводства);
	Запрос.УстановитьПараметр("ЕстьПланВыпускаИзделий", ЕстьПланВыпускаИзделий);
	Запрос.УстановитьПараметр("ЕстьПланПотребленияМатериалов", ЕстьПланПотребленияМатериалов);
//++ НЕ УТКА
	Запрос.УстановитьПараметр("ЕстьПланЗанятостиВидовРабочихЦентров", ЕстьПланЗанятостиВидовРабочихЦентров);
//-- НЕ УТКА
	Запрос.УстановитьПараметр("ЕстьПланЗанятостиТрудовыхРесурсов", ЕстьПланЗанятостиТрудовыхРесурсов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаСписка = Строки[Выборка.Ссылка];
		ЗаполнитьЗначенияСвойств(СтрокаСписка.Данные, Выборка,, "Ссылка")
	КонецЦикла;
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти
