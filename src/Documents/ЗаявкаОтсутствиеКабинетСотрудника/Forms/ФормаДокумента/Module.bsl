
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ЗаявкиСотрудниковФормы.ПриСозданииНаСервере(ЭтотОбъект, ОписаниеДокумента(ЭтаФорма));
	ИнициализацияФормы();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанных(ТекущийОбъект);
	ЗаявкиСотрудниковФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, ОписаниеДокумента(ЭтаФорма));
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, ПараметрОповещения, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, ПараметрОповещения) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаявкиСотрудниковФормыКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, ПараметрОповещения, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_УдалитьДокументПоЗаявке(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ЗаявкиСотрудниковФормыКлиент.УдалитьДокументПоЗаявке(ЭтаФорма, Элемент);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиПодключаемыхКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ЗаявкаВыполнена(Команда)
	
	РезультатВыполненияЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена");
	ВыполнитьЗаявкуНаКлиенте(РезультатВыполненияЗаявки);

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаОтклонена(Команда)
	
	РезультатВыполненияЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена");
	ВыполнитьЗаявкуНаКлиенте(РезультатВыполненияЗаявки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТиповойОтвет(Команда)
	
	ЗаявкиСотрудниковФормыКлиент.ВыбратьТиповойОтвет(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокумент(Команда)
	
	ЗаявкиСотрудниковФормыКлиент.СоздатьНовыйДокументПоОтсутствию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	ЗначенияДляВыбораДокумента = ЗаявкиСотрудниковФормыКлиент.ЗначенияДляВыбораДокументаПоОтсутствию(ЭтаФорма);
	ЗаявкиСотрудниковФормыКлиент.ВыполнитьКомандуВыбратьДокумент(ЭтаФорма, ЗначенияДляВыбораДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокИсполнения(Команда)
	
	ЗаявкиСотрудниковФормыКлиент.ИзменитьСрокИсполнения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиПодсистем

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ЗавершениеЗаявки

&НаКлиенте
Процедура ВыполнитьЗаявкуНаКлиенте(РезультатВыполненияЗаявки)

	Если ЗаявкиСотрудниковФормыКлиент.ЗаявкаГотоваКВыполнению(ЭтаФорма, РезультатВыполненияЗаявки, ОписаниеДокумента(ЭтаФорма)) Тогда
		ЗаявкиСотрудниковФормыКлиент.НачатьВыполнениеКомандыЗаявкаВыполнена(ЭтаФорма, РезультатВыполненияЗаявки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция РезультатЗаписиВыполненияЗаявки(РезультатВыполненияЗаявки) Экспорт

	Возврат РезультатЗаписиВыполненияЗаявкиНаСервере(РезультатВыполненияЗаявки);

КонецФункции

&НаСервере
Функция РезультатЗаписиВыполненияЗаявкиНаСервере(РезультатВыполненияЗаявки) Экспорт
	
	Возврат ЗаявкиСотрудников.РезультатЗаписиВыполненияЗаявки(ЭтаФорма, РезультатВыполненияЗаявки, ОписаниеДокумента(ЭтаФорма));
	
КонецФункции

&НаКлиенте
Процедура ОбработчикЗавершенияЗаписиВыполненияЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаявкиСотрудниковФормыКлиент.ОбработчикЗавершенияЗаписиВыполненияЗаявки(Результат, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область ОбработатьЗаписьСвязаннойЗаявки

&НаКлиенте
Процедура ОбработатьЗаписьСвязаннойЗаявки() Экспорт

	ОбработатьЗаписьСвязаннойЗаявкиНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьСвязаннойЗаявкиНаСервере()
	
	ОписаниеДокумента = ОписаниеДокумента(ЭтаФорма);
	ЗаявкиСотрудниковФормы.ПрочитатьВывестиСвязанныеЗаявки(ЭтаФорма, Объект, ОписаниеДокумента);
	ЗаявкиСотрудниковФормы.УстановитьДоступностьВыполненияПоСвязаннымЗаявкам(ЭтаФорма,ОписаниеДокумента);

КонецПроцедуры

#КонецОбласти

#Область ВыводДокументовИзТаблицыДокументовЗаявки

&НаКлиенте
Процедура ВывестиДокументыИзТаблицыДокументовЗаявки() Экспорт
	
	ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере()
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере()
	
	ЗаявкиСотрудниковФормы.ВывестиДокументыИзТаблицыДокументовЗаявки(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработатьИзменениеТЧДокументыПоЗаявке

&НаКлиенте
Процедура ОбработатьИзменениеДокументыПоЗаявке() Экспорт

	ОбработатьИзменениеДокументыПоЗаявкеНаСервере();
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДокументыПоЗаявкеНаСервере()
	
	ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере();

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриПолученииДанных(ТекущийОбъект)
	
	ДокументыПоЗаявкеСоздаются =  Не (Объект.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ЛичныеДела
		Или Объект.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Опоздание);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормы()
	
	УстановитьТекстПоясненияПорядкаВыполнения();
	
	ПоказыватьДатуНачала 		= Истина;
	ПоказыватьДатуОкончания 	= Истина;
	ПоказыватьВремяНачала 		= Ложь;
	ПоказыватьВремяОкончания 	= Ложь;
	Если Объект.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ЛичныеДела Тогда
		ПоказыватьВремяНачала 		= Не Объект.ОтсутствиеВесьДень;
		ПоказыватьВремяОкончания 	= Не Объект.ОтсутствиеВесьДень;
		Если НачалоДня(Объект.ДатаНачала) = НачалоДня(Объект.ДатаОкончания) Тогда
			ЗаголовокПричинаОтсутствия = НСтр("ru = 'Отсутствие по личным обстоятельствам';
												|en = 'Отсутствие по личным обстоятельствам'");
			ПоказыватьДатуОкончания = Ложь;
		Иначе
			ЗаголовокПричинаОтсутствия = НСтр("ru = 'Отсутствие по личным обстоятельствам с';
												|en = 'Отсутствие по личным обстоятельствам с'");
		КонецЕсли;
	ИначеЕсли Объект.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Опоздание Тогда
		ПоказыватьДатуНачала 		= Ложь;
		ПоказыватьВремяОкончания 	= Не Объект.ОтсутствиеВесьДень;
		ЗаголовокПричинаОтсутствия = НСтр("ru = 'Опоздание';
											|en = 'Опоздание'");
	ИначеЕсли Объект.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Болезнь Тогда
		ЗаголовокПричинаОтсутствия = НСтр("ru = 'Отсутствие по болезни с';
											|en = 'Отсутствие по болезни с'");
	ИначеЕсли Объект.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам Тогда
		ЗаголовокПричинаОтсутствия = НСтр("ru = 'Отпуск по беременности и родам с';
											|en = 'Отпуск по беременности и родам с'");
	ИначеЕсли Объект.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоУходуЗаРебенком Тогда
		ЗаголовокПричинаОтсутствия = НСтр("ru = 'Отпуск по уходу за ребенком с';
											|en = 'Отпуск по уходу за ребенком с'");
	ИначеЕсли Объект.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Отгул Тогда
		Если (НачалоДня(Объект.ДатаНачала) = НачалоДня(Объект.ДатаОкончания)) Тогда
			ЗаголовокПричинаОтсутствия = НСтр("ru = 'Отгул на';
												|en = 'Отгул на'");
			ПоказыватьДатуОкончания = Ложь;
		Иначе
			ЗаголовокПричинаОтсутствия = НСтр("ru = 'Отгул с';
												|en = 'Отгул с'");
		КонецЕсли;
	ИначеЕсли Объект.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Командировка Тогда
		ЗаголовокПричинаОтсутствия = НСтр("ru = 'Командировка с';
											|en = 'Командировка с'");
	ИначеЕсли Объект.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ДниУходаЗаДетьмиИнвалидами Тогда
		Если (НачалоДня(Объект.ДатаНачала) = НачалоДня(Объект.ДатаОкончания)) Тогда
			ЗаголовокПричинаОтсутствия = НСтр("ru = 'Доп. выходной день для ухода за детьми инвалидами на';
												|en = 'Доп. выходной день для ухода за детьми инвалидами на'");
			ПоказыватьДатуОкончания = Ложь;
		Иначе
			ЗаголовокПричинаОтсутствия = НСтр("ru = 'Доп. выходные дни для ухода за детьми инвалидами с';
												|en = 'Доп. выходные дни для ухода за детьми инвалидами с'");
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказыватьДатуНачала Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаНачала", "Заголовок", ЗаголовокПричинаОтсутствия);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаОкончания", "Заголовок", ЗаголовокПричинаОтсутствия);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаНачала", 		"Видимость", ПоказыватьДатуНачала);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаОкончания", 	"Видимость", ПоказыватьДатуОкончания);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВремяНачала", 		"Видимость", ПоказыватьВремяНачала);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВремяОкончания", 	"Видимость", ПоказыватьВремяОкончания);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДокументыПоЗаявкеГлавная", 	"Видимость", ДокументыПоЗаявкеСоздаются);
	
КонецПроцедуры

&НаСервере
Функция УстановитьТекстПоясненияПорядкаВыполнения()
	
	Если Не ДокументыПоЗаявкеСоздаются Тогда
		ТекстПояснения = НСтр("ru = 'По заявке не предусмотрено автоматического создания документов. Если требуется отразить в учете факт отсутствия сотрудника, создайте соответствующий документ вручную.';
								|en = 'По заявке не предусмотрено автоматического создания документов. Если требуется отразить в учете факт отсутствия сотрудника, создайте соответствующий документ вручную.'");
	Иначе
		Строка1 = НСтр("ru = 'Для выполнения заявки надо создать новый документ или выбрать уже существующий,';
						|en = 'Для выполнения заявки надо создать новый документ или выбрать уже существующий,'");
		Строка2 = НСтр("ru = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".';
						|en = 'после этого заявку можно отметить как выполненную. Для отклонения заявки необходимо указать причину в ""Сообщении сотруднику"".'");
		ТекстПояснения = СтрШаблон("%1 %2", Строка1, Строка2);
	КонецЕсли;
	
	Элементы.ДекорацияВыполнениеПояснение.Заголовок = ТекстПояснения;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)

	Описание = ЗаявкиСотрудниковКлиентСервер.НовоеОписаниеДокументаЗаявки();
	Описание.ПроверятьСвязанныеЗаявки = ЗначениеЗаполнено(Форма.Объект.ИдентификаторЭлектронногоДокумента);
	Если Форма.ДокументыПоЗаявкеСоздаются Тогда
		Описание.ДокументыПоЗаявкеИмя 			= "ДокументыПоЗаявке";
		Описание.ДокументыПоЗаявкеДокументИмя 	= "ДокументСсылка";
		Описание.ВыводитьДокументыЗаявки 		= Истина;
	КонецЕсли;
	
	Возврат Описание;

КонецФункции

#КонецОбласти