
#Область ОписаниеПеременных

#Область Переменные

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем КэшОбъектаКалькуляции;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	СобытиеЖурналаРегистрацииОшибкаРасчета = РегистрыСведений.МножителиПартийИПолуфабрикатов.СобытиеЖурналаРегистрацииОшибкаРасчета();
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриСозданииЧтенииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КэшОбъектаКалькуляции = Объект.ОбъектКалькуляции;
	КонтрольРасчетаПотребностей();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("Запись_ПлановаяКалькуляция2_2", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	Если Объект.Проведен Тогда
		
		КонтрольРасчетаПотребностей();
		ПодключитьОбработчикОжидания("КонтрольРасчетаПотребностей", 3);
		
	Иначе
		
		Элементы.РасчетПотребностиВМатериалах.ТекущаяСтраница = Элементы.СтраницаНеРассчитана;
		Элементы.ТекстИспользованиеФормул.Видимость = Ложь;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	Если Объект.ОбъектКалькуляции = ПредопределенноеЗначение("Перечисление.ОбъектыКалькуляции.ЗаказНаПроизводство") Тогда
		ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаВыбора", ПараметрыФормы, Элементы.ОбъектыКалькуляции);
	ИначеЕсли Объект.ОбъектКалькуляции = ПредопределенноеЗначение("Перечисление.ОбъектыКалькуляции.РесурснаяСпецификация") Тогда
		ОткрытьФорму("Справочник.РесурсныеСпецификации.ФормаВыбора", ПараметрыФормы, Элементы.ОбъектыКалькуляции);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапки

&НаКлиенте
Процедура ОбъектКалькуляцииПриИзменении(Элемент)
	
	Если Не Объект.ОбъектКалькуляции = КэшОбъектаКалькуляции
		И Объект.ОбъектыКалькуляции.Количество() > 0 Тогда
		
		ПараметрыОбъектаКалькуляции = ПараметрыОбъектаКалькуляции(КэшОбъектаКалькуляции);
		ТекстВопроса = НСтр("ru = 'Табличная часть %1 будет очищена. Продолжить?';
							|en = 'The %1 table will be cleared. Do you want to continue?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбъектКалькуляцииПриИзмененииЗавершение", ЭтотОбъект), 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПараметрыОбъектаКалькуляции.ЗаголовокСтраницы), 
			РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	ИзменитьСтраницуОбъектыКалькуляции(ЭтаФорма);
	КэшОбъектаКалькуляции = Объект.ОбъектКалькуляции;
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребностьНеРассчитанаЕстьОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Данные", Объект.Ссылка);
		ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", СобытиеЖурналаРегистрацииОшибкаРасчета);
		
		ОтборПоУровню = Новый СписокЗначений;
		ОтборПоУровню.Добавить("Ошибка", "Ошибка");
		
		ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
		
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыФормы);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПотребностьРассчитанаСОшибкамиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		
		ПараметрыФормы = Новый Структура("КлючВарианта, КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
		ПараметрыФормы.Вставить("КлючНазначенияИспользования",		Неопределено);
		ПараметрыФормы.Вставить("Отбор",							Новый Структура("Калькуляция", Объект.Ссылка));
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",			Истина);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",	Ложь);
		
		ОткрытьФорму("Отчет.ОшибкиРасчетаКалькуляцииПродукции.Форма", ПараметрыФормы);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийОбъектыКалькуляции

&НаКлиенте
Процедура ОбъектыКалькуляцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекстОшибки = ДобавитьОбъектыКалькуляции(ВыбранноеЗначение);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКалькуляцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(Объект.ОбъектКалькуляции) Тогда
		
		ТекстСообщения = НСтр("ru = 'Перед добавлением требуется выбрать объект калькуляции.';
								|en = 'It is required to select a cost object before adding.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОбъектКалькуляции");
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКалькуляцииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не НоваяСтрока Или НоваяСтрока И Не ОтменаРедактирования Тогда
		
		ТекущиеДанные = Элементы.ОбъектыКалькуляции.ТекущиеДанные;
		
		ОтборДублей = Новый Структура("Номенклатура, Характеристика, Назначение, Объект");
		ЗаполнитьЗначенияСвойств(ОтборДублей, ТекущиеДанные);
		
		Если Объект.ОбъектыКалькуляции.НайтиСтроки(ОтборДублей).Количество() > 1 Тогда
			
			ТекстОшибки = НСтр("ru = 'В списке уже существует строка с таким же набором значений.';
								|en = 'Line with the same set of values already exists in the list.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКалькуляцииПродукцияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОбъектыКалькуляции.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если НЕ КалькуляцияЗаказа Тогда
		СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
			Объект, ТекущаяСтрока, ПараметрыВыбораСпецификаций,,Новый Структура("ИмяРеквизитаСпецификация", "Объект"));
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКалькуляцииХарактеристикаПриИзменении(Элемент)

	Если КалькуляцияЗаказа Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ОбъектыКалькуляции.ТекущиеДанные;
	
	СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
		Объект, ТекущаяСтрока, ПараметрыВыбораСпецификаций,,Новый Структура("ИмяРеквизитаСпецификация", "Объект"));
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКалькуляцииУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОбъектыКалькуляции.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКалькуляцииКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОбъектыКалькуляции.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбъектКалькуляцииПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.ОбъектыКалькуляции.Очистить();
		ИзменитьСтраницуОбъектыКалькуляции(ЭтаФорма);
		
		КэшОбъектаКалькуляции = Объект.ОбъектКалькуляции;
		
	Иначе
		
		Объект.ОбъектКалькуляции = КэшОбъектаКалькуляции;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ОбъектыКалькуляцииХарактеристика",
																		     "Объект.ОбъектыКалькуляции.ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
		"ОбъектыКалькуляцииЕдиницаИзмерения", 
		"Объект.ОбъектыКалькуляции.Упаковка");
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ИзменитьСтраницуОбъектыКалькуляции(ЭтаФорма);
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ОбъектыКалькуляции, СтруктураДействий);
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Документы.ПлановаяКалькуляция2_2);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.ОбъектыКалькуляцииОбъект, ПараметрыВыбораСпецификаций);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьОбъектыКалькуляции(ВыбранноеЗначение)
	
	КэшированныеЗначения = Неопределено;
	НазначениеВШапке = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РесурсныеСпецификации")
		Или ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		ИсточникВыходныхИзделий = "ВыходныеИзделия";
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЗаказНаПроизводство2_2") Тогда
		
		ИсточникВыходныхИзделий = "Продукция";
		НазначениеВШапке = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, 
				"ТипПроизводственногоПроцесса") = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций;
		
	КонецЕсли;	
	
	ОтборДублей = Новый Структура("Номенклатура, Характеристика, Объект");
	КоличествоДублей = 0;
	
	Для Каждого СтрокаПродукции Из ВыбранноеЗначение[ИсточникВыходныхИзделий] Цикл
		
		ОтборДублей.Номенклатура = СтрокаПродукции.Номенклатура;
		ОтборДублей.Характеристика = СтрокаПродукции.Характеристика;
		ОтборДублей.Объект = ВыбранноеЗначение;
		
		Если Объект.ОбъектыКалькуляции.НайтиСтроки(ОтборДублей).Количество() > 0 Тогда
			
			КоличествоДублей = КоличествоДублей + 1;
			Продолжить;
			
		КонецЕсли;
		
		НовыйОбъектКалькуляции = Объект.ОбъектыКалькуляции.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйОбъектКалькуляции, СтрокаПродукции);
		НовыйОбъектКалькуляции.Объект = ВыбранноеЗначение;
		
		Если НазначениеВШапке Тогда
			НовыйОбъектКалькуляции.Назначение = ВыбранноеЗначение.НазначениеПродукция;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", НовыйОбъектКалькуляции.Характеристика);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НовыйОбъектКалькуляции, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ТекстОшибки = "";
	Если КоличествоДублей = ВыбранноеЗначение[ИсточникВыходныхИзделий].Количество() Тогда
		ТекстОшибки = НСтр("ru = 'Текущий объект уже подобран в документ.';
							|en = 'Current object is already picked for the document.'");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Изменяет заголовки: страницы СтраницаОбъектыКалькуляции, колонки ОбъектыКалькуляцииОбъект.
// Приводит тип колонки под выбранный объект калькуляции.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, в которую вносятся изменения.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьСтраницуОбъектыКалькуляции(Форма)
	
	Объект = Форма.Объект;
	
	Параметры = ПараметрыОбъектаКалькуляции(Объект.ОбъектКалькуляции);
	
	Форма.Элементы.ОбъектыКалькуляцииОбъект.ОграничениеТипа = Параметры.ОписаниеТипов;
	Форма.Элементы.СтраницаОбъектыКалькуляции.Заголовок = Параметры.ЗаголовокСтраницы;
	Форма.Элементы.ОбъектыКалькуляцииОбъект.Заголовок = Параметры.ЗаголовокКолонки;
	
	Форма.КалькуляцияЗаказа = Параметры.КалькуляцияЗаказа;
	
	Форма.Элементы.ОбъектыКалькуляцииНазначение.Видимость = Форма.КалькуляцияЗаказа;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОбъектаКалькуляции(ОбъектКалькуляции)
	
	Параметры = Новый Структура;
	Параметры.Вставить("КалькуляцияЗаказа", Ложь);
	
	Если ОбъектКалькуляции = ПредопределенноеЗначение("Перечисление.ОбъектыКалькуляции.ЗаказНаПроизводство") Тогда
		
		Параметры.Вставить("ЗаголовокСтраницы", НСтр("ru = 'Заказы на производство';
													|en = 'Production orders'"));
		Параметры.Вставить("ЗаголовокКолонки", НСтр("ru = 'Заказ на производство';
													|en = 'Production order'"));
		Параметры.Вставить("ОписаниеТипов", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
		Параметры.КалькуляцияЗаказа = Истина;
		
	ИначеЕсли ОбъектКалькуляции = ПредопределенноеЗначение("Перечисление.ОбъектыКалькуляции.РесурснаяСпецификация") Тогда
		
		Параметры.Вставить("ЗаголовокСтраницы", НСтр("ru = 'Ресурсные спецификации';
													|en = 'Bills of materials'"));
		Параметры.Вставить("ЗаголовокКолонки", НСтр("ru = 'Ресурсная спецификация';
													|en = 'Bill of materials'"));
		Параметры.Вставить("ОписаниеТипов", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
		
	Иначе
		
		ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2, ДокументСсылка.ЗаказНаПроизводство2_2, СправочникСсылка.РесурсныеСпецификации");
		Параметры.Вставить("ЗаголовокСтраницы", НСтр("ru = 'Объекты калькуляции';
													|en = 'Cost objects'"));
		Параметры.Вставить("ЗаголовокКолонки", НСтр("ru = 'Объект калькуляции';
													|en = 'Cost object'"));
		Параметры.Вставить("ОписаниеТипов", ОписаниеТипов);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

&НаКлиенте
Процедура ОбъектыКалькуляцииОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОбъектыКалькуляции.ТекущиеДанные;
	Если Не КалькуляцияЗаказа Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ПараметрыФормы.Вставить("Назначение", ТекущиеДанные.Назначение);
	ПараметрыФормы.Вставить("Подразделение", Объект.ПодразделениеДиспетчер);
	
	ОткрытьФорму("Документ.ПлановаяКалькуляция2_2.Форма.ФормыВыбораЗаказовНаПроизводство", ПараметрыФормы, Элементы.ОбъектыКалькуляцииОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольРасчетаПотребностей()
	
	Если Не Объект.Проведен Тогда
		
		Элементы.РасчетПотребностиВМатериалах.ТекущаяСтраница = Элементы.СтраницаНеРассчитана;
		Элементы.ТекстИспользованиеФормул.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	РезультатРасчета = РезультатРасчетаКалькуляции(Объект.Ссылка);
	Элементы.ТекстИспользованиеФормул.Видимость = РезультатРасчета.ЕстьФормулы;
	
	Если РезультатРасчета.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияРасчетаПлановойКалькуляции.ОшибкаРасчета") Тогда
		
		Элементы.РасчетПотребностиВМатериалах.ТекущаяСтраница = Элементы.СтраницаНеРассчитанаЕстьОшибки;
		ОтключитьОбработчикОжидания("КонтрольРасчетаПотребностей");
		
	ИначеЕсли РезультатРасчета.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияРасчетаПлановойКалькуляции.Рассчитана") Тогда
		
		Элементы.РасчетПотребностиВМатериалах.ТекущаяСтраница = Элементы.СтраницаРассчитана;
		ОтключитьОбработчикОжидания("КонтрольРасчетаПотребностей");
		
	ИначеЕсли РезультатРасчета.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияРасчетаПлановойКалькуляции.РассчитанаСОшибками") Тогда
		
		Элементы.РасчетПотребностиВМатериалах.ТекущаяСтраница = Элементы.СтраницаРассчитанаСОшибками;		
		ОтключитьОбработчикОжидания("КонтрольРасчетаПотребностей");
		
	Иначе
		Элементы.РасчетПотребностиВМатериалах.ТекущаяСтраница = Элементы.СтраницаРассчитывается;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатРасчетаКалькуляции(Калькуляция)
	
	РезультатРасчета = Новый Структура("Состояние, ЕстьФормулы", "", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияПлановыхКалькуляций.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияПлановыхКалькуляций КАК СостоянияПлановыхКалькуляций
		|ГДЕ
		|	СостоянияПлановыхКалькуляций.Калькуляция = &Калькуляция";
	
	Запрос.УстановитьПараметр("Калькуляция", Калькуляция);
	
	Если Запрос.Выполнить().Пустой() Тогда
		
		РезультатРасчета.Состояние = Перечисления.СостоянияРасчетаПлановойКалькуляции.НеРассчитана;
		Возврат РезультатРасчета;
		
	КонецЕсли;
	
	РезультатРасчета.Состояние =  Запрос.Выполнить().Выгрузить()[0].Состояние;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВложенныйЗапрос.Спецификация КАК Спецификация
		|ИЗ
		|	(ВЫБРАТЬ
		|		МножителиПартийИПолуфабрикатов.ПартияСпецификацияПродукции КАК Спецификация
		|	ИЗ
		|		РегистрСведений.МножителиПартийИПолуфабрикатов КАК МножителиПартийИПолуфабрикатов
		|	ГДЕ
		|		МножителиПартийИПолуфабрикатов.Калькуляция = &Калькуляция
		|		И ТИПЗНАЧЕНИЯ(МножителиПартийИПолуфабрикатов.ПартияСпецификацияПродукции) = ТИП(Справочник.РесурсныеСпецификации)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МножителиПартийИПолуфабрикатов.ПартияСпецификацияПолуфабриката
		|	ИЗ
		|		РегистрСведений.МножителиПартийИПолуфабрикатов КАК МножителиПартийИПолуфабрикатов
		|	ГДЕ
		|		МножителиПартийИПолуфабрикатов.Калькуляция = &Калькуляция
		|		И ТИПЗНАЧЕНИЯ(МножителиПартийИПолуфабрикатов.ПартияСпецификацияПолуфабриката) = ТИП(Справочник.РесурсныеСпецификации)) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|		ПО ВложенныйЗапрос.Спецификация = РесурсныеСпецификации.Ссылка
		|ГДЕ
		|	РесурсныеСпецификации.ЕстьПараметризацияРесурсов";
	
	Запрос.УстановитьПараметр("Калькуляция", Калькуляция);
	
	РезультатРасчета.ЕстьФормулы = Не Запрос.Выполнить().Пустой();
	
	Возврат РезультатРасчета;
	
КонецФункции

#КонецОбласти
