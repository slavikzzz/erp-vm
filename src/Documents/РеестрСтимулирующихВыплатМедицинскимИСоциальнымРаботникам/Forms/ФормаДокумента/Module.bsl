#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, МесяцРасчета", "Объект.Организация", "Объект.Ответственный","Объект.МесяцНачисления");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		Если Не ЗначениеЗаполнено(Объект.МесяцНачисления) И ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.МесяцНачисления = НачалоМесяца(Объект.Дата);
		КонецЕсли;
		Объект.НачалоПериода 	= НачалоМесяца(Объект.МесяцНачисления);
		Объект.ОкончаниеПериода = КонецМесяца(Объект.МесяцНачисления);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		ПриПолученииДанныхНаСервере("Объект");
	КонецЕсли;
	
	// РегламентированнаяОтчетность
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "ФСС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	// Конец РегламентированнаяОтчетность
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Не Модифицированность Тогда
		Если ИмяСобытия = "Запись_ОтправкиФСС"
			Или ИмяСобытия = "Редактирование_ОтправкиФСС"
			Или ИмяСобытия = "Успешная отправка"
			Или ИмяСобытия = "Завершение отправки в контролирующий орган" Тогда
			Прочитать();
		КонецЕсли;
	КонецЕсли;
		
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбработатьСообщенияПользователю(ДокументОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ФиксацияЗаполнитьИдентификаторыФиксТЧ(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
	
	// Перед записью переадресуем сообщения с полей объекта на поля формы
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	Для Каждого Сообщение Из Сообщения Цикл
		Если Найти(Сообщение.Поле, "].Больничный") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоНомераСтроки = Найти(Сообщение.Поле, "[");
		ОкончаниеНомераСтроки = Найти(Сообщение.Поле, "]");
		Если НачалоНомераСтроки > 0
			И ОкончаниеНомераСтроки > 0 Тогда
			НачалоНомераСтроки = НачалоНомераСтроки + 1;
			НомерСтроки = Сред(Сообщение.Поле, НачалоНомераСтроки, ОкончаниеНомераСтроки - НачалоНомераСтроки);
			Больничный = Объект.Сотрудники[Число(НомерСтроки)].Больничный;
			Если ЗначениеЗаполнено(Больничный) Тогда
				Сообщение.КлючДанных = Больничный;
				Сообщение.Поле = Прав(Сообщение.Поле, СтрДлина(Сообщение.Поле) - (ОкончаниеНомераСтроки + 1));
				Сообщение.ПутьКДанным = "Объект";
			Иначе
				Сообщение.Поле = Лев(Сообщение.Поле, Найти(Сообщение.Поле, "]")) + ".Больничный";
			КонецЕсли;
		КонецЕсли;
		Отказ = Истина;
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ФиксацияЗаполнитьРеквизитыФормыФикс(ТекущийОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтотОбъект);
	ФиксацияОбновитьФиксациюВФорме();
	
	ОбновитьВидимостьДоступность();
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПраздничныхДнейПриИзменении(Элемент)
	
	ОплатаПраздничныхДнейПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура СостояниеРеестраОчистка(Элемент, СтандартнаяОбработка)
	Если Объект.Проведен И Не Объект.ПометкаУдаления Тогда
		Объект.СостояниеРеестра = ПредопределенноеЗначение("Перечисление.СостоянияРеестровФСС.Подготовлен");
	Иначе
		Объект.СостояниеРеестра = ПредопределенноеЗначение("Перечисление.СостоянияРеестровФСС.ВРаботе");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СостояниеРеестраПриИзменении(Элемент)
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Тогда
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Если Не Записать(ПараметрыЗаписи) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.КомментарийНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка)
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиПриАктивизацииСтроки(Элемент)
	ИдентификаторСтроки = Элементы.Сотрудники.ТекущаяСтрока;
	СотрудникиПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки);
	УстановитьДоступностьИсправлений(ЭтотОбъект);
	УстановитьЭлементыВыплатыПособий(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)	
	ИдентификаторСтроки = Элементы.Сотрудники.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда // В этом случае не срабатывает событие "ПриАктивизацииСтроки".
		СотрудникиПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки);
	КонецЕсли;
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторСтроки = Элементы.Сотрудники.ТекущаяСтрока;
	СотрудникиПриОкончанииРедактированияНаСервере(ИдентификаторСтроки);
	СотрудникиПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СпособВыплатыПособияПриИзменении(Элемент)
	УстановитьЭлементыВыплатыПособий(ЭтотОбъект);
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "СпособВыплатыПособия", Элементы.Сотрудники.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.СотрудникиСотрудник, 
		Объект.Организация,
		,
		Объект.НачалоПериода,
		Объект.ОкончаниеПериода,
		ЛОЖЬ,
		АдресСпискаПодобранныхСотрудников());
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиИсправлениеПриИзменении(Элемент)
	УстановитьДоступностьИсправлений(ЭтотОбъект);
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Исправление", Элементы.Сотрудники.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
	УстановитьЭлементыВыплатыПособий(ЭтотОбъект);
	УстановитьДоступностьИсправлений(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	ИдентификаторСтроки = Элементы.Сотрудники.ТекущаяСтрока;
	ДолжностьПриИзмененииНаСервере(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	ИдентификаторСтроки = Элементы.Сотрудники.ТекущаяСтрока;
	БанкПриИзмененииНаСервере(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура НомерПервичногоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокПервичныхДокументов(Элементы.Сотрудники.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Заполнить(Команда)
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана организация.';
														|en = 'Company is not selected.'"), , "Объект.Организация");
		Возврат;
	КонецЕсли;
	ЗаполнитьТаблицуСотрудников();
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники, 
		Объект.Организация,
		,
		Объект.НачалоПериода,
		Объект.ОкончаниеПериода,
		,
		АдресСпискаПодобранныхСотрудников());

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеИсправления(Команда)
	ОтменитьВсеИсправленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлРеестра(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗаписатьФайлРеестраПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФайлРеестра(Команда)
	Обработчик = Новый ОписаниеОповещения("ПоказатьФайлРеестраПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с формой.

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	ФиксацияВторичныхДанныхВДокументахФормы.ИнициализироватьМеханизмФиксацииРеквизитов(ЭтотОбъект, ТекущийОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.ПодключитьОбработчикиФиксацииИзмененийРеквизитов(ЭтотОбъект, ФиксацияБыстрыйПоискРеквизитов());
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	
	ОбновитьВторичныеДанныеНаСервере();
	ФиксацияОбновитьФиксациюВФорме();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание элементов шапки.

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, "Организация");
	ОбновитьВторичныеДанныеНаСервере();
	ФиксацияОбновитьФиксациюВФорме();
	// РегламентированнаяОтчетность
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "ФСС");
	// Конец РегламентированнаяОтчетность
КонецПроцедуры

&НаСервере
Процедура СотрудникиПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки)
	
	СтрокаСведений = ?(ИдентификаторСтроки = Неопределено, Неопределено, Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки));
	// надо вариативно настроить видимость элементов формы (например карта мир и т.д.)
	ОтключитьПредупреждения = СтрокаСведений = Неопределено;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьОтображениеПредупрежденийТЧ(
		ЭтотОбъект,
		"Сотрудники",
		ИдентификаторСтроки,
		ОтключитьПредупреждения);
		
	ОбновитьНомерСтрокиРеестра(СтрокаСведений);
	
КонецПроцедуры

&НаСервере
Функция СписокПервичныхДокументов(ИдентификаторСтроки)
	
	СписокПервичныхДокументов = Новый СписокЗначений;
	
	СтрокаСотрудника = ?(ИдентификаторСтроки = Неопределено, Неопределено, Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки));
	
	Если СтрокаСотрудника = Неопределено Тогда
		Возврат СписокПервичныхДокументов;
	ИначеЕсли НЕ СтрокаСотрудника.Исправление Тогда
		Возврат СписокПервичныхДокументов;
	КонецЕсли;
	
	ДанныеОтправленныхРеестров = Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.ДанныеОтправленныхРеестров(Объект.Организация,Объект.ВидПособия,СтрокаСотрудника.Сотрудник,Объект.НачалоПериода,Объект.ОкончаниеПериода, Объект.СоциальныеВыплатыОтдельнымКатегориямМедРаботников, Объект.Ссылка);
	СтруктураОтбора = Новый Структура("Должность,КатегорияПолучателя",СтрокаСотрудника.Должность,СтрокаСотрудника.КатегорияПолучателя);
	СтрокиПоОтбору = ДанныеОтправленныхРеестров.НайтиСтроки(СтруктураОтбора);
	Если СтрокиПоОтбору.Количество() > 0 Тогда
		ДанныеОтправленныхРеестров = ДанныеОтправленныхРеестров.Скопировать(СтрокиПоОтбору);
	КонецЕсли;
	
	ИмяСсылкиРеестра = "Ссылка";
	ИмяНомерСтрокиРеестра = "НомерСтроки";
	Если Объект.ОплатаПраздничныхДней Тогда
		ИмяСсылкиРеестра = "СсылкаРеестрПраздничных";
		ИмяНомерСтрокиРеестра = "НомерСтрокиРеестрПраздничных";
	КонецЕсли;
	
	Для Каждого Стр Из ДанныеОтправленныхРеестров Цикл
		Если НЕ ЗначениеЗаполнено(Стр[ИмяСсылкиРеестра])
			ИЛИ НЕ ЗначениеЗаполнено(Стр[ИмяНомерСтрокиРеестра]) Тогда
			Продолжить;
		КонецЕсли;
		НачалоНомераСтроки = Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.ИдентификаторФСС(Стр[ИмяСсылкиРеестра]) + ":";
		НомерПервичногоДокумента = НачалоНомераСтроки + Формат(Стр[ИмяНомерСтрокиРеестра], "ЧЦ=10; ЧГ=");
		СписокПервичныхДокументов.Добавить(НомерПервичногоДокумента, Стр[ИмяСсылкиРеестра]);
	КонецЦикла;
	
	Возврат СписокПервичныхДокументов;
КонецФункции

&НаСервере
Процедура ОбновитьНомерСтрокиРеестра(СтрокаРеестра)
	
	Если СтрокаРеестра = Неопределено Тогда
		НомерСтрокиРеестра = "";
		Возврат;
	КонецЕсли;
	
	НачалоНомераСтроки = Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.ИдентификаторФСС(Объект) + ":";
	НомерСтрокиРеестра = НачалоНомераСтроки + Формат(СтрокаРеестра.НомерСтроки, "ЧЦ=10; ЧГ=");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	ОбработатьИзменениеМесяцНачисленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПраздничныхДнейПриИзмененииНаСервере()
	ОбновитьВидимостьДоступность();
	
	Если Объект.ВидПособия = ПредопределенноеЗначение("Перечисление.ПолучательСтимулирующихВыплатФСС.МедицинскаяОрганизация")
		И НЕ Объект.ОплатаПраздничныхДней Тогда
		Объект.НачалоПериода 	= НачалоМесяца(Объект.МесяцНачисления);
		Объект.ОкончаниеПериода = КонецМесяца(Объект.МесяцНачисления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	Объект.НачалоПериода 	= НачалоМесяца(Объект.МесяцНачисления);
	Объект.ОкончаниеПериода = КонецМесяца(Объект.МесяцНачисления);
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, "Организация");
	ОбновитьВторичныеДанныеНаСервере();
	ФиксацияОбновитьФиксациюВФорме();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание команд.
&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	Возврат ПоместитьВоВременноеХранилище(ОбщегоНазначения.ВыгрузитьКолонку(Объект.Сотрудники, "Сотрудник"), УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ОтправитьРеестрВКонтролирующийОрган(Команда)
	Обработчик = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	// РегламентированнаяОтчетность
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ФСС");
	// Конец РегламентированнаяОтчетность
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	Обработчик = Новый ОписаниеОповещения("ПроверитьВИнтернетеПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	// РегламентированнаяОтчетность
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект, "ФСС");
	// Конец РегламентированнаяОтчетность
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаСервере
Функция ФайлРеестра()
	// Регистрационный номер ФСС организации (страхователя).
	Если Не ЗначениеЗаполнено(Объект.РегистрационныйНомерФСС) Тогда
		Текст = НСтр("ru = 'У организации не заполнен регистрационный номер ФСС';
					|en = 'Company SSF registration number is required'");
		ОбщегоНазначения.СообщитьПользователю(Текст, , "РегистрационныйНомерФСС", "Объект");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.ФайлРеестра(Объект.Ссылка, УникальныйИдентификатор)
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЭлементыВыплатыПособий(Форма)
	Элементы = Форма.Элементы;
	ТекущиеДанныеСотрудника = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанныеСотрудника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпособВыплатыПособия = ТекущиеДанныеСотрудника.СпособВыплатыПособия;
	НаКартуМир = СпособВыплатыПособия = ПредопределенноеЗначение("Перечисление.СпособыВыплатыПособия.НаКартуМИР");
	Элементы.КартаМИР.Видимость = НаКартуМир;
	
	Элементы.Банк.Видимость = НЕ НаКартуМир;
	Элементы.НомерЛицевогоСчета.Видимость = НЕ НаКартуМир;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьИсправлений(Форма)
	Элементы = Форма.Элементы;
	ТекущиеДанныеСотрудника = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанныеСотрудника = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ЭтоИсправление = ТекущиеДанныеСотрудника.Исправление;
	Элементы.КодПричиныИсправления.Доступность = ЭтоИсправление;
	Элементы.НомерПервичногоДокумента.Доступность = ЭтоИсправление;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДоступность()
	
	РеестрПоСоциальнымРаботникам = (Объект.ВидПособия = Перечисления.ПолучательСтимулирующихВыплатФСС.ОрганизацияСоциальногоОбслуживания);
	
	РеестрПроведен = (Объект.Проведен И Не Объект.ПометкаУдаления);

	РеестрПринят = (РеестрПроведен И Объект.СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ПринятФСС);
	РеестрНеПринят = (РеестрПроведен И Объект.СостояниеРеестра = Перечисления.СостоянияРеестровФСС.НеПринятФСС);
	РеестрЧастичноПринят = (РеестрПроведен И Объект.СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ЧастичноПринятФСС);
	РеестрОтправлен = (РеестрПринят Или РеестрНеПринят Или РеестрЧастичноПринят);
	ОплатаПраздничных = Объект.ОплатаПраздничныхДней;
	СоциальныеВыплатыОтдельнымКатегориямМедРаботников = Объект.СоциальныеВыплатыОтдельнымКатегориямМедРаботников;
	
	Элементы.Организация.ТолькоПросмотр             = РеестрОтправлен;
	Элементы.ГруппаМесяцНачисленияОплатаПраздничных.ТолькоПросмотр  = РеестрОтправлен;
	Элементы.ПериодНачисления.ТолькоПросмотр        = РеестрОтправлен;
	Элементы.РегистрационныйНомерФСС.ТолькоПросмотр = РеестрОтправлен;
	Элементы.АдресОрганизации.ТолькоПросмотр 		= РеестрОтправлен;
	Элементы.ШапкаКолонка2.ТолькоПросмотр           = РеестрОтправлен;
	Элементы.ГруппаОтветственныеЛица.ТолькоПросмотр = РеестрОтправлен;
	Если РеестрПринят ИЛИ РеестрЧастичноПринят Тогда
		Элементы.Сотрудники.ТолькоПросмотр = Истина;
		Элементы.ГруппаДанныеСтрокиСведения.ТолькоПросмотр = Истина;
		Элементы.ГруппаСведенияОСтрахователе.ТолькоПросмотр = Истина;
	Иначе
		Элементы.Сотрудники.ТолькоПросмотр = Ложь;
		Элементы.Сотрудники.КоманднаяПанель.ТолькоПросмотр              = РеестрОтправлен;
		Элементы.СотрудникиСотрудник.ТолькоПросмотр                     = РеестрОтправлен;
		Элементы.СотрудникиПринятФСС.ТолькоПросмотр                     = РеестрПринят Или РеестрНеПринят;
	КонецЕсли;
	Элементы.СотрудникиЗаполнить.Доступность           = Не РеестрОтправлен;
	Элементы.СотрудникиСтандартныеКоманды.Доступность  = Не РеестрОтправлен;
	Элементы.СотрудникиПринятФСС.Видимость             = РеестрОтправлен;
	Элементы.СостояниеРеестра.ТолькоПросмотр           = Не РеестрПроведен И Не РеестрОтправлен;
	Элементы.ОтправитьВКонтролирующийОрган.Доступность = РеестрПроведен И (РеестрНеПринят ИЛИ НЕ РеестрОтправлен);
	Элементы.ПодменюВыгрузить.Доступность              = РеестрПроведен;
	Элементы.ФормаОбновитьВторичныеДанные.Видимость    = Не РеестрОтправлен;
	Элементы.ФормаОтменитьВсеИсправления.Видимость     = Не РеестрОтправлен;
	Элементы.ГруппаСоздатьЕщеОдинРеестр.Видимость      = РеестрЧастичноПринят;
	
	Элементы.ВОрганизацииВыявленКоронавирус.Видимость = РеестрПоСоциальнымРаботникам;
	Элементы.ДнейКОплате.Видимость 	= РеестрПоСоциальнымРаботникам;
	Элементы.СотрудникиДнейКОплате.Видимость = РеестрПоСоциальнымРаботникам;
	
	Элементы.ВидЗанятости.Видимость = НЕ РеестрПоСоциальнымРаботникам;
	Элементы.МесяцНачисленияСтрокой.Видимость = НЕ РеестрПоСоциальнымРаботникам;
	Элементы.ПериодНачисления.Видимость = РеестрПоСоциальнымРаботникам ИЛИ ОплатаПраздничных;
	
	Элементы.ВидПособия.Видимость = НЕ СоциальныеВыплатыОтдельнымКатегориямМедРаботников;
	Элементы.СоциальныеВыплатыОтдельнымКатегориямМедРаботниковТекст.Видимость = СоциальныеВыплатыОтдельнымКатегориямМедРаботников;
	Элементы.АдресОрганизации.Видимость = СоциальныеВыплатыОтдельнымКатегориямМедРаботников;
	Элементы.ГруппаРКПовышающийКоэффициент.Видимость = НЕ СоциальныеВыплатыОтдельнымКатегориямМедРаботников;
	Элементы.ГруппаДнейЧасовКОплате.Видимость = НЕ СоциальныеВыплатыОтдельнымКатегориямМедРаботников;
	Элементы.ГруппаЧасовНормативноОтработано.Видимость = СоциальныеВыплатыОтдельнымКатегориямМедРаботников;
	Элементы.ОплатаПраздничныхДней.Видимость = НЕ СоциальныеВыплатыОтдельнымКатегориямМедРаботников;
	Элементы.СотрудникиГруппаДнейЧасовКОплате.Видимость = НЕ СоциальныеВыплатыОтдельнымКатегориямМедРаботников;
	Элементы.СотрудникиГруппаЧасовНормативноОтработано.Видимость = СоциальныеВыплатыОтдельнымКатегориямМедРаботников;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлРеестраПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	ОписаниеФайла = ФайлРеестра();
	СохранитьФайлXML(ОписаниеФайла);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлXML(ОписаниеФайла)
	Если ОписаниеФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок      = НСтр("ru = 'Укажите файл';
								|en = 'Select file'");
	Диалог.Фильтр         = НСтр("ru = 'Файлы XML (*.xml)|*.xml';
								|en = 'Files XML (*.xml)|*.xml'");
	Диалог.ПолноеИмяФайла = ОписаниеФайла.ИмяФайлаБезРасширения;
	Диалог.МножественныйВыбор = Ложь;
	
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Диалог = Диалог;
	
	ФайловаяСистемаКлиент.СохранитьФайл(
		Неопределено, ОписаниеФайла.АдресДвоичныхДанных, ОписаниеФайла.ИмяФайлаБезРасширения, ПараметрыСохранения);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФайлРеестраПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	РезультатВыгрузки = ФайлРеестра();
	Если РезультатВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(РезультатВыгрузки.ТекстXML);
	ТекстовыйДокумент.Показать(, РезультатВыгрузки.ИмяФайлаБезРасширения + ".xml");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение документа.

&НаСервере
Процедура ЗаполнитьТаблицуСотрудников()
	Если ОбъектЗафиксирован() Тогда
		Возврат;
	КонецЕсли;
	Объект.Сотрудники.Очистить();
	Сотрудники = Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.СотрудникиПолучателиСтимулирующихВыплатФСС(Объект.Организация, Объект.НачалоПериода, Объект.ОкончаниеПериода, Объект.СоциальныеВыплатыОтдельнымКатегориямМедРаботников);
	ОбработкаПодбораНаСервере(Сотрудники, Истина);
	ОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание табличной части Сотрудники.

&НаСервере
Процедура СотрудникиПриОкончанииРедактированияНаСервере(ИдентификаторСтроки)
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДолжностьПриИзмененииНаСервере(ИдентификаторСтроки)

	СтрокаСотрудника = ?(ИдентификаторСтроки = Неопределено, Неопределено, Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки));
	
	Если ЗначениеЗаполнено(СтрокаСотрудника.Должность) Тогда
		КатегорииДолжностей = РегистрыСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС.КатегорииДолжностей(СтрокаСотрудника.Должность);
		КатегорияПолучателя = КатегорииДолжностей[СтрокаСотрудника.Должность];
		Если ЗначениеЗаполнено(КатегорияПолучателя) Тогда
			СтрокаСотрудника.КатегорияПолучателя = ?(Объект.СоциальныеВыплатыОтдельнымКатегориямМедРаботников,КатегорияПолучателя.ОтдельнаяКатегорияМедицинскихРаботников, КатегорияПолучателя.КатегорияПолучателяСтимулирующихВыплатФСС);
		КонецЕсли;
	КонецЕсли;
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Должность", ИдентификаторСтроки);
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "КатегорияПолучателя", ИдентификаторСтроки);
КонецПроцедуры

&НаСервере
Процедура БанкПриИзмененииНаСервере(ИдентификаторСтроки)

	СтрокаСотрудника = ?(ИдентификаторСтроки = Неопределено, Неопределено, Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки));
	
	Если ЗначениеЗаполнено(СтрокаСотрудника.Банк) Тогда
		
		СтрокаСотрудника.НомерЛицевогоСчета = Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.ПолучитьСчетСотрудникаВБанке(СтрокаСотрудника.Сотрудник, Объект.Организация, СтрокаСотрудника.Банк)
		
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// Заполнение документа.

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.Сотрудник) Тогда 
			ОбработкаПодбораНаСервере(ДанныеТекущейСтроки.Сотрудник);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНаСервере(ДобавляемыеСотрудники, Автозаполнение = Ложь)
	
	РедактированиеСтроки = Ложь;
	Если ТипЗнч(ДобавляемыеСотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		РедактированиеСтроки = Истина;
	КонецЕсли;
	ИдентификаторТекущейСтроки = Элементы.Сотрудники.ТекущаяСтрока;
	ДанныеПоСотрудникам = Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.СведенияПоСотрудникамНаСервере(Объект.Организация, Объект.НачалоПериода, Объект.ОкончаниеПериода, ДобавляемыеСотрудники,Объект.СоциальныеВыплатыОтдельнымКатегориямМедРаботников, Автозаполнение);
	Если Объект.СоциальныеВыплатыОтдельнымКатегориямМедРаботников Тогда
		РабочееВремяСотрудников = Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.ОтработаноИНормаЧасовСотрудников(Объект.Организация, Объект.НачалоПериода,Объект.ОкончаниеПериода, ДобавляемыеСотрудники, Объект.Ссылка, Объект.Дата);
	Иначе
		РабочееВремяСотрудников = Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.СменыРаботСотрудниковСКоронавирусом(Объект.Организация, Объект.НачалоПериода,Объект.ОкончаниеПериода, Объект.ВидПособия, ДобавляемыеСотрудники, Объект.ОплатаПраздничныхДней, Объект.Ссылка, Объект.Дата);
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Сотрудник, Должность, КатегорияПолучателя");
	Для каждого СтрокаКадровыхДанных Из ДанныеПоСотрудникам Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКадровыхДанных);
		РабочееВремяСотрудника = РабочееВремяСотрудников.НайтиСтроки(СтруктураПоиска);
		Если Автозаполнение Тогда
			Если РабочееВремяСотрудника.Количество() = 0 Тогда
				Продолжить;
			ИначеЕсли НЕ Объект.СоциальныеВыплатыОтдельнымКатегориямМедРаботников
				И РабочееВремяСотрудника[0].ДнейКОплате = 0
				И РабочееВремяСотрудника[0].СменКОплате = 0 Тогда
				Продолжить;
			ИначеЕсли Объект.СоциальныеВыплатыОтдельнымКатегориямМедРаботников
				И РабочееВремяСотрудника[0].ФактЧасов = 0
				И РабочееВремяСотрудника[0].НормаЧасов = 0 Тогда
				Продолжить;
			ИначеЕсли РабочееВремяСотрудника[0].ОплаченоРанее Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтрокиСотрудника = Объект.Сотрудники.НайтиСтроки(СтруктураПоиска);
		Если РедактированиеСтроки Тогда
			СтрокаТаблицы = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
		ИначеЕсли СтрокиСотрудника.Количество()>0 Тогда
			СтрокаТаблицы = СтрокиСотрудника[0];
		Иначе
			СтрокаТаблицы = Объект.Сотрудники.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаКадровыхДанных);
		
		Если РабочееВремяСотрудника.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, РабочееВремяСотрудника[0]);
		КонецЕсли;
		
		ИдентификаторТекущейСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
		
	КонецЦикла;
		
	Элементы.Сотрудники.ТекущаяСтрока = ИдентификаторТекущейСтроки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверка заполнения

&НаСервере
Процедура ОбработатьСообщенияПользователю(ДокументОбъект, Сообщения = Неопределено)
	Если Сообщения = Неопределено Тогда
		Сообщения = ПолучитьСообщенияПользователю(Ложь);
	КонецЕсли;
	// В сообщениях есть следующие поля:
	//   ИдентификаторНазначения - Идентификатор формы, в которой необходимо вывести сообщение.
	//   КлючДанных - Ссылка объекта, который необходимо открыть для обработки сообщения.
	//   Поле - Путь от объекта к ошибочному полю.
	//   ПутьКДанным - Путь от формы к объекту.
	//   Текст - Текст сообщения.
	// Как правило, на сервере заполняются только "Поле" и "Текст".
	// Задача процедуры в том, чтобы заполнить "ПутьКДанным" и адаптировать "Поле" к специфике формы.
	
	Для Каждого Сообщение Из Сообщения Цикл
		// Привязка сообщений к объекту.
		Если Не ЗначениеЗаполнено(Сообщение.КлючДанных)
			И Не ЗначениеЗаполнено(Сообщение.ПутьКДанным)
			И Не СтрНачинаетсяС(Сообщение.Поле, "Объект.") Тогда
			Сообщение.ПутьКДанным = "Объект";
		КонецЕсли;
		// Адаптация к специфике редактирования данных в форме.
		НачалоСкобки = СтрНайти(Сообщение.Поле, "[");
		Если НачалоСкобки = 0 Тогда
			Продолжить;
		КонецЕсли;
		ОкончаниеСкобки = СтрНайти(Сообщение.Поле, "].");
		Если НачалоСкобки > ОкончаниеСкобки Тогда
			Продолжить;
		КонецЕсли;
		ИмяТаблицы   = Лев(Сообщение.Поле, НачалоСкобки - 1);
		ИндексСтроки = Сред(Сообщение.Поле, НачалоСкобки + 1, ОкончаниеСкобки - НачалоСкобки - 1);
		ИмяРеквизита = Сред(Сообщение.Поле, ОкончаниеСкобки + 2);
		Если ИмяТаблицы = "Сотрудники"
			И ИмяРеквизита <> "Больничный"
			И ИмяРеквизита <> "НомерЛисткаНетрудоспособности"
			И ИмяРеквизита <> "Сотрудник" Тогда
			Сообщение.Поле = ИмяТаблицы + "[" + ИндексСтроки + "].НомерЛисткаНетрудоспособности";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИПроверитьПоРегламентуФСС(ОбработчикЗавершения, РежимЗаписи)
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписи);
	Если Не Записать(ПараметрыЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьЗаполнениеПоРегламентуФСС();
	
	Если РезультатПроверки.Успех Тогда
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Ложь);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ПроверитьПослеОтветаНаВопрос", ЭтотОбъект, ОбработчикЗавершения);
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'В документе обнаружены ошибки (%1).
				|Продолжить (не рекомендуется)?';
				|en = 'Errors were found in the document (%1).
				|Continue (not recommended)?'"),
			РезультатПроверки.КоличествоОшибок);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, НСтр("ru = 'Предупреждение';
																										|en = 'Warning'"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеПоРегламентуФСС()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Успех = ДокументОбъект.ПроверитьЗаполнениеПоРегламентуФСС();
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	ОбработатьСообщенияПользователю(ДокументОбъект, Сообщения);
	Возврат Новый Структура("Успех, КоличествоОшибок", Успех, Сообщения.Количество());
КонецФункции

&НаКлиенте
Процедура ПроверитьПослеОтветаНаВопрос(Ответ, ОбработчикЗавершения) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Истина);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интеграция с другими подсистемами.

#Область КлючевыеРеквизитыЗаполненияФормы

// ЗарплатаКадрыПодсистемы
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	// Возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
	Массив = Новый Массив;
	Массив.Добавить("Объект.Сотрудники");
	Возврат Массив
КонецФункции

&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	// Возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", НСтр("ru = 'организации';
																						|en = 'companies'")));
	Возврат Массив
КонецФункции
// Конец ЗарплатаКадрыПодсистемы

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Свойства

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ПодписиДокументов

// ЗарплатаКадрыПодсистемы.ПодписиДокументов
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	Возврат РеквизитФормыВЗначение("Объект").ОбъектЗафиксирован();
КонецФункции

&НаСервере
Процедура ОбновитьВторичныеДанныеНаСервере(ФиксироватьОтличия = Ложь)
	Если ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) Тогда
		ОбновитьВидимостьДоступность();
		Возврат;
	КонецЕсли;
	
	ФиксацияЗаполнитьИдентификаторыФиксТЧ(ЭтотОбъект);
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ДокументОбъект);
	
	ПараметрыФиксации = ЭтотОбъект["ПараметрыФиксацииВторичныхДанных"];
	ПараметрыФиксации.ФиксироватьОтличия = ФиксироватьОтличия;
	ДокументИзменен = ДокументОбъект.ОбновитьВторичныеДанные(ПараметрыФиксации);
	ПараметрыФиксации.ФиксироватьОтличия = Ложь;
	
	Если ДокументИзменен Тогда
		Если Не ДокументОбъект.ЭтоНовый() Тогда
			ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Истина);
		КонецЕсли;
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		ФиксацияЗаполнитьРеквизитыФормыФикс(Объект);
	КонецЕсли;
	
	ОбновитьВидимостьДоступность();
	
	ПодписиДокументовКлиентСервер.УстановитьПредставлениеПодписей(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ФиксацияОписаниеФормы(ПараметрыФиксацииВторичныхДанных) Экспорт
	ОписаниеФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеФормы();
	
	ОписаниеЭлементовФормы = Новый Соответствие();
	ОписаниеЭлементаФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ОписаниеЭлементаФормы.ПрефиксПути = "Объект";
	ОписаниеЭлементаФормы.ПрефиксПутиТекущиеДанные = "Элементы.Сотрудники.ТекущиеДанные";
	Для Каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов Цикл
		ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеЭлементаФормы);
	КонецЦикла;
	ОписаниеФормы.Вставить("ОписаниеЭлементовФормы", ОписаниеЭлементовФормы);
	
	ОписаниеФормы.Вставить("ФормаРедактируетсяПослеФиксации", Ложь);
	Возврат ОписаниеФормы;
КонецФункции

&НаСервере
Функция ФиксацияБыстрыйПоискРеквизитов()
	БыстрыйПоискРеквизитов = Новый Соответствие; // Ключ - имя элемента, значение - имя реквизита.
	
	ПараметрыФиксации = ЭтотОбъект["ПараметрыФиксацииВторичныхДанных"];
	Для Каждого КлючИЗначение Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ИмяРеквизита = КлючИЗначение.Значение.ИмяРеквизита;
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
			БыстрыйПоискРеквизитов.Вставить(ИмяРеквизита, ИмяРеквизита);
		ИначеЕсли Элементы.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			БыстрыйПоискРеквизитов.Вставить(КлючИЗначение.Ключ, ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Возврат БыстрыйПоискРеквизитов;
КонецФункции

&НаСервере
Процедура ФиксацияОбновитьФиксациюВФорме()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ФиксацияЗаполнитьРеквизитыФормыФикс(ТекущийОбъект)
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ФиксацияЗаполнитьИдентификаторыФиксТЧ(Форма)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗаполнитьИдентификаторыСтрок(Форма);
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеИсправленияНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОчиститьФиксациюИзменений(ЭтотОбъект, Объект);
	ФиксацияЗаполнитьРеквизитыФормыФикс(Объект);
	ОбновитьВторичныеДанныеНаСервере();
	ФиксацияОбновитьФиксациюВФорме();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	ИдентификаторСтроки = Элементы.Сотрудники.ТекущаяСтрока;
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(ЭтотОбъект, Элемент, ОписаниеЭлементов, ИдентификаторСтроки);
КонецПроцедуры



#КонецОбласти

#КонецОбласти
