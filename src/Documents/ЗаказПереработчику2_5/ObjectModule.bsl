#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статус

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПереработчикам[НовыйСтатус];
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПереработчикам.КИсполнению
		Или ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПереработчикам.Закрыт Тогда
		// Новый статус документа "К исполнению" или "Закрыт"
		Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления)
			И Статус <> Перечисления.СтатусыЗаказовПереработчикам.Закрыт
			И Статус <> Перечисления.СтатусыЗаказовПереработчикам.КИсполнению Тогда
			Для Каждого СтрокаТЧ Из ВыходныеИзделия Цикл
				Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
					СтрокаТЧ.ДатаПоступления = ЖелаемаяДатаПоступления;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказПереработчику2_5);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Корректирует строки, по которым не была оформлено поступление или складские ордера или имеются расхождения по мерным товарам.
// 
// Параметры:
// 	СтруктураПараметров - см. ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа
// Возвращаемое значение:
// 	см. ЗаказыСервер.РезультатОтменыНеотработанныхСтрок
//
Функция СкорректироватьСтрокиЗаказа(СтруктураПараметров) Экспорт
	Возврат Документы.ЗаказПереработчику2_5.СкорректироватьСтрокиЗаказа(ЭтотОбъект, СтруктураПараметров);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокументПередЗаполнением();
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("СправочникСсылка.Партнеры") Тогда
		ЗаполнитьДокументНаОснованииПартнера(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Основание") Тогда
			
			ТипОснования = ТипЗнч(ДанныеЗаполнения.Основание);
			Если ТипОснования = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				ЗаполнитьДокументНаОснованииЗаказаКлиента(ДанныеЗаполнения);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
				ЗаполнитьДокументНаОснованииЗаказаНаПеремещение(ДанныеЗаполнения);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Товары") Тогда //Заполнение из обработки "Обеспечение потребностей".
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			СкладПродукции = ДанныеЗаполнения.Склад;
			
			ВыходныеИзделия.Загрузить(ДанныеЗаполнения.Товары);
			
			Если ОбособлениеМатериаловПоНазначениюПродукции Тогда
				ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукцииИНазначениям;
			Иначе
				ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;
			КонецЕсли;
			
			ИнициализироватьДокументПослеДобавленияПродукции();
			
		//++ НЕ УТКА
		ИначеЕсли ДанныеЗаполнения.Свойство("Распоряжения") Тогда
			
			ПереработкаПоЗаказу = Истина;
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
			Документы.ЗаказПереработчику2_5.ЗаполнитьПоЭтапамПроизводства(ДанныеЗаполнения.Распоряжения, ЭтотОбъект);
		//-- НЕ УТКА
		КонецЕсли;

	//++ НЕ УТКА
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		ЗаполнитьДокументНаОснованииЭтапаПроизводства(ДанныеЗаполнения);
	//-- НЕ УТКА
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		ЗаполнитьДокументНаОснованииСделки(ДанныеЗаполнения);
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказПереработчику2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ИнициализироватьДокумент();
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь",   Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(ЭтотОбъект, Ложь);
	
	Если НЕ ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Менеджер) Тогда
		Менеджер = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособРаспределенияЗатратНаВыходныеИзделия)
		И (ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям
			Или ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациямИНазначениям
			Или ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки) Тогда
		СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	КонецЕсли;
	
	ВзаиморасчетыСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ПустаяДата = Дата(1,1,1);
	
	МатериалыМаксимальныйКодСтроки = 0;
	ИзделияМаксимальныйКодСтроки   = 0;
	Статус                         = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован;
	ЖелаемаяДатаПоступления        = ПустаяДата;
	ДатаОтгрузки                   = ПустаяДата;
	ДатаПоступления                = ПустаяДата;
	ДатаСогласования               = ПустаяДата;
	ДатаВыполнения                 = ПустаяДата;
	Назначение                     = Неопределено;
	НазначениеПередачи             = Неопределено;
	ДокументОснование              = Неопределено;
	МаксимальныйНомерГруппыЗатрат  = 0;
	ВариантПриемкиТоваров          = Неопределено;
	
	ПараметрыИнициализации = Новый Структура("ЗаполнитьХозОперацию, ХозяйственнаяОперация", Истина, ОбъектКопирования.ХозяйственнаяОперация);
	ИнициализироватьДокументПередЗаполнением(ПараметрыИнициализации);
	
	// Реквизиты производства
	Для Каждого СтрокаТЧ Из ВыходныеИзделия Цикл
		СтрокаТЧ.КодСтроки       = 0;
		СтрокаТЧ.ДатаПоступления = ПустаяДата;
		СтрокаТЧ.Отменено        = Ложь;
		СтрокаТЧ.ПричинаОтмены   = Справочники.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка();
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ПобочныеИзделия Цикл
		СтрокаТЧ.КодСтроки       = 0;
		СтрокаТЧ.ДатаПоступления = ПустаяДата;
		СтрокаТЧ.Отменено        = Ложь;
		СтрокаТЧ.ПричинаОтмены   = Справочники.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка();
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ОбеспечениеМатериаламиИРаботами Цикл
		СтрокаТЧ.КодСтроки     = 0;
		СтрокаТЧ.ДатаОтгрузки  = ПустаяДата;
		СтрокаТЧ.Отменено      = Ложь;
		СтрокаТЧ.Назначение    = Справочники.Назначения.ПустаяСсылка();
	КонецЦикла;
	ОбеспечениеВДокументахСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(ОбеспечениеМатериаламиИРаботами);
	
	Для Каждого СтрокаТЧ Из Услуги Цикл
		СтрокаТЧ.КодСтроки     = 0;
		СтрокаТЧ.ИдентификаторСтроки = Неопределено;
		СтрокаТЧ.ДатаВыполнения = ДатаВыполнения;
		СтрокаТЧ.Отменено       = Ложь;
		СтрокаТЧ.ПричинаОтмены  = Неопределено;
	КонецЦикла;
	
	ИнициализироватьДокумент();
	
	ВзаиморасчетыСервер.ПриКопировании(ЭтотОбъект);
	
	Для Каждого СтрокаТЧ Из ЭтапыГрафикаОплаты Цикл
		СтрокаТЧ.ДатаПлатежа = ПустаяДата;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СтатусДокументаВышеНеСогласованного =
		Не Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован;
	МаксимальноВозможнаяДатаОтгрузкиМатериалов = МаксимальноВозможнаяДатаОтгрузкиМатериалов();
	ДатыПоступления = МаксимальныеДатыПроизводстваГруппЗатрат();
	
	ЗатратыСервер.ПроверитьИспользованиеПартионногоУчета22(ЭтотОбъект, Дата, Отказ);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
		Или ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукцииИНазначениям Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособРаспределенияЗатратНаВыходныеИзделия");
	КонецЕсли;
	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки
		Или ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
		Или ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукцииИНазначениям Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Спецификация");
	КонецЕсли;
	
	#Область ОбщиеПроверки
	
	#Область СоответствиеОтчетовПереработчикаЗаказуПереработчику
	
	ПереработкаНаСтороне.ПроверитьСоответствиеОтчетовПереработчикаЗаказуПереработчику(ЭтотОбъект, Отказ);
	
	#КонецОбласти
	
	#Область ГруппыЗатрат
	
	ПроверитьЗаполнениеГруппЗатрат(Отказ, МассивНепроверяемыхРеквизитов);
	
	#КонецОбласти
	
	#Область ТЧ_Серии
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказПереработчику2_5);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(
		ЭтотОбъект,
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами,
		Отказ,
		МассивНепроверяемыхРеквизитов);
	
	#КонецОбласти
	
	#Область ТЧ_Количество
	
	ПараметрыОкругления = Документы.ЗаказПереработчику2_5.ПараметрыТЧДляОкругления();
	
	НоменклатураСервер.ПроверитьОкруглениеКоличества(ЭтотОбъект, Отказ, ПараметрыОкругления.ВыходныеИзделия);
	НоменклатураСервер.ПроверитьОкруглениеКоличества(ЭтотОбъект, Отказ, ПараметрыОкругления.ПобочныеИзделия);
	НоменклатураСервер.ПроверитьОкруглениеКоличества(ЭтотОбъект, Отказ, ПараметрыОкругления.ОбеспечениеМатериаламиИРаботами);
	
	#КонецОбласти
	
	#Область ТЧ_Услуги
	
	Если УслугиПоПереработке = Перечисления.ВариантыОформленияУслугДокументовПереработки.ОформляютсяОтдельно Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВыполнения");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги");
	КонецЕсли;
	
	// Обязательность заполнения даты поступления в шапке
	ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "Услуги", "Отменено");
	Если Не ВыполнениеРаботОднойДатой
		Или (ВыполнениеРаботОднойДатой И Не СтатусДокументаВышеНеСогласованного)
		Или (ВыполнениеРаботОднойДатой И ВсеСтрокиОтменены) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВыполнения");
	КонецЕсли;
	
	Если Не СтатусДокументаВышеНеСогласованного Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.ДатаВыполнения");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Услуги.ПричинаОтмены");
	
	// Дата выполнения работ в шапке должна быть не меньше даты документа
	Если ВыполнениеРаботОднойДатой
		И ЗначениеЗаполнено(ДатаВыполнения)
		И Не УслугиПоПереработке = Перечисления.ВариантыОформленияУслугДокументовПереработки.ОформляютсяОтдельно
		И ДатаВыполнения < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru = 'Дата выполнения работ должна быть не меньше даты документа %Дата%';
							|en = 'Work execution date must be not earlier than the document date: %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=D"));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаВыполнения", , Отказ);
		
	КонецЕсли;
	
	// Месяц даты выполнения работ должен быть не больше месяца последнего выпуска
	Если ВыполнениеРаботОднойДатой
		И ЗначениеЗаполнено(ДатаВыполнения)
		И ЗначениеЗаполнено(НачалоМесяца(МаксимальноВозможнаяДатаОтгрузкиМатериалов))
		И Не УслугиПоПереработке = Перечисления.ВариантыОформленияУслугДокументовПереработки.ОформляютсяОтдельно
		И ДатаВыполнения > МаксимальноВозможнаяДатаОтгрузкиМатериалов Тогда
	
		ТекстОшибки = НСтр("ru = 'Месяц выполнения работ должен быть не больше месяца поступления продукции и возвратных отходов (%Дата%)';
							|en = 'Work execution month must be not later than the month of products and recyclable waste receipt (%Дата%)'");
		ТекстОшибки =
			СтрЗаменить(
				ТекстОшибки,
				"%Дата%",
				Формат(МаксимальноВозможнаяДатаОтгрузкиМатериалов, "ДФ='ММММ гггг'"));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаВыполнения", , Отказ);
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Услуги Цикл
		
		// Дата выполнения работ в тч Услуги должна быть не меньше даты документа
		Если Не ВыполнениеРаботОднойДатой
			И ЗначениеЗаполнено(ТекСтрока.ДатаВыполнения)
			И ТекСтрока.ДатаВыполнения < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата выполнения работ должна быть не меньше даты документа %Дата% в строке %НомерСтроки% списка ""Услуги""';
								|en = 'Work execution date must be not earlier than document date %Дата% in line %НомерСтроки% of the ""Services"" list'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=D"));
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Услуги", ТекСтрока.НомерСтроки, "ДатаВыполнения");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Месяц выполнения работ должен быть не больше месяца поступления продукции и возвратных отходов.
		ДатаПоступленияГруппы = ДатыПоступления.Получить(ТекСтрока.НомерГруппыЗатрат);
		Если Не ВыполнениеРаботОднойДатой
			И ЗначениеЗаполнено(НачалоМесяца(ДатаПоступленияГруппы))
			И ТекСтрока.ДатаВыполнения > ДатаПоступленияГруппы Тогда
			
			ТекстОшибки = НСтр("ru = 'Месяц выполнения работ должен быть не больше месяца поступления выходных изделий (%Дата%)';
								|en = 'Work execution month must be not later than the month of finished product receipt (%Дата%)'");
			ТекстОшибки =
				СтрЗаменить(
					ТекстОшибки,
					"%Дата%",
					Формат(ДатаПоступленияГруппы, "ДФ='ММММ гггг'"));
			ПутьКТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Услуги", ТекСтрока.НомерСтроки, "ДатаВыполнения");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ,, Отказ);
			
		КонецЕсли;
		
		// Причина отмены обязательна для заполнения в отмененных строках
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам")
			И ТекСтрока.Отменено
			И Не ЗначениеЗаполнено(ТекСтрока.ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru = 'Необходимо указать причину отмены в строке %НомерСтроки% списка ""Услуги""';
								|en = 'Specify a cancellation reason in line %НомерСтроки% of the Services list'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Услуги", ТекСтрока.НомерСтроки, "ПричинаОтмены");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если УслугиПоПереработке = Перечисления.ВариантыОформленияУслугДокументовПереработки.УказываютсяВЗаказеОтчете Тогда
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "Услуги";
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Доставка
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	#КонецОбласти
	
	#Область УчетНДС
	
	ПараметрыПроверки = УчетНДСУП.ПараметрыПроверкиЗаполнениеДокументаПоНалогообложениюНДСЗакупки();
	ПараметрыПроверки.ИмяТабличнойЧасти						= "ВыходныеИзделия";
	ПараметрыПроверки.ИмяРеквизитаСтатьяРасходов			= "СтатьяРасходов";
	ПараметрыПроверки.ИмяРеквизитаАналитикаРасходов			= "АналитикаРасходов";
	
	УчетНДСУП.ПроверитьЗаполнениеДокументаЗакупкиПоНалогообложениюНДС(
		ЭтотОбъект,
		НалогообложениеНДС,
		ПараметрыПроверки,
		Отказ);
	
	ПараметрыПроверки.ИмяТабличнойЧасти = "ПобочныеИзделия";
	
	УчетНДСУП.ПроверитьЗаполнениеДокументаЗакупкиПоНалогообложениюНДС(
		ЭтотОбъект,
		НалогообложениеНДС,
		ПараметрыПроверки,
		Отказ);
	
	ПараметрыПроверки = УчетНДСУП.ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС();
	ПараметрыПроверки.ИмяТабличнойЧасти						= "ВыходныеИзделия";
	ПараметрыПроверки.ИмяРеквизитаСтатьяРасходов			= "СтатьяРасходов";
	ПараметрыПроверки.ИмяРеквизитаАналитикаРасходов			= "АналитикаРасходов";
	ПараметрыПроверки.ИмяРеквизитаСтатьяАктивовПассивов		= "СтатьяРасходов";
	ПараметрыПроверки.ИмяРеквизитаАналитикаАктивовПассивов	= "АналитикаАктивовПассивов";
	
	УчетНДСУП.ПроверитьЗаполнениеДокументаПоВидуДеятельностиНДС(
		ЭтотОбъект,
		ЗакупкаПодДеятельность,
		ПараметрыПроверки,
		Отказ);
	
	ПараметрыПроверки.ИмяТабличнойЧасти = "ПобочныеИзделия";
	
	УчетНДСУП.ПроверитьЗаполнениеДокументаПоВидуДеятельностиНДС(
		ЭтотОбъект,
		ЗакупкаПодДеятельность,
		ПараметрыПроверки,
		Отказ);
	
	#КонецОбласти
	
	#Область Взаиморасчеты
	// Срок действия заказа должен быть не меньше даты документа
	Если Не Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован И
		ЗначениеЗаполнено(ДатаСогласования) И ДатаСогласования < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru = 'Дата согласования должна быть не меньше даты документа %Дата%';
							|en = 'Date of approval cannot be before the document creation: %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата, "ДЛФ=DD"));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаСогласования",, Отказ);
		
	КонецЕсли;
	#КонецОбласти
	
	#КонецОбласти
	
	//++ НЕ УТКА
	Если Не ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
	//-- НЕ УТКА
		
		#Область ПроверкаЗаказаБезРаспоряжений
		
		#Область СкладПродукции
		Если ОставитьИзделияУПереработчика Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СкладПродукции");
		КонецЕсли;
		#КонецОбласти
		
		#Область ДатаВШапке
		
		// Обязательность заполнения даты поступления в шапке
		ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "ВыходныеИзделия", "Отменено");
		Если Не ПоступлениеОднойДатой
			Или (ПоступлениеОднойДатой И Не СтатусДокументаВышеНеСогласованного)
			Или (ПоступлениеОднойДатой И ВсеСтрокиОтменены) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ДатаПоступления");
		КонецЕсли;
		
		// Дата поступления в шапке должна быть не меньше даты документа
		Если ПоступлениеОднойДатой
			И ЗначениеЗаполнено(ДатаПоступления)
			И ДатаПоступления < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата поступления должна быть не меньше даты документа %Дата%';
								|en = 'Date of receipt cannot be less than document date %Дата%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=D"));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаПоступления", , Отказ);
			
		КонецЕсли;
		
		// Дата отгрузки в шапке должна быть не меньше даты документа
		Если НеОтгружатьЧастями
			И ЗначениеЗаполнено(ДатаОтгрузки)
			И ДатаОтгрузки < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата отгрузки должна быть не меньше даты документа %Дата%';
								|en = 'Shipment date cannot be less than document date%Дата%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=D"));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаОтгрузки", , Отказ);
			
		КонецЕсли;
		
		// Месяц даты отгрузки должен быть не больше месяца последнего выпуска
		Если НеОтгружатьЧастями
			И ЗначениеЗаполнено(ДатаОтгрузки)
			И ЗначениеЗаполнено(НачалоМесяца(МаксимальноВозможнаяДатаОтгрузкиМатериалов))
			И ДатаОтгрузки > МаксимальноВозможнаяДатаОтгрузкиМатериалов Тогда
		
			ТекстОшибки = НСтр("ru = 'Месяц отгрузки должен быть не больше месяца поступления продукции и возвратных отходов (%Дата%)';
								|en = 'Shipment month cannot be later than the month of products and recyclable waste receipt (%Дата%)'");
			ТекстОшибки =
				СтрЗаменить(
					ТекстОшибки,
					"%Дата%",
					Формат(МаксимальноВозможнаяДатаОтгрузкиМатериалов, "ДФ='ММММ гггг'"));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаОтгрузки", , Отказ);
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Шапка_ЖелаемаяДатаПоступления
		
		// Желаемая дата поступления в шапке должна быть не меньше даты документа
		Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления)
			И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата поступления должна быть не меньше даты документа %Дата%';
								|en = 'Date of receipt cannot be less than document date %Дата%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=D"));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ЖелаемаяДатаПоступления", , Отказ);
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Шапка_Подразделение
		
		// Проверка заполнения подразделения для заказа в статусе "КОбеспечению" и выше.
		Если НЕ СтатусДокументаВышеНеСогласованного
			И НЕ ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда 
			МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ТЧ_Характеристики
		
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		
		ПараметрыПроверки.ИмяТЧ = "ВыходныеИзделия";
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		ПараметрыПроверки.ИмяТЧ = "ПобочныеИзделия";
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		ПараметрыПроверки.ИмяТЧ = "ОбеспечениеМатериаламиИРаботами";
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		#КонецОбласти
		
		#Область ТЧ_СтатьяКалькуляции
		
		Если Не СтатусДокументаВышеНеСогласованного Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.СтатьяКалькуляции");
			МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции");
			МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтатьяКалькуляции");
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ТЧ_ВыходныеИзделия
		
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Назначение");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Получатель");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ДатаПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ПричинаОтмены");
		
		Для ТекИндекс = 0 По ВыходныеИзделия.Количество() - 1 Цикл
			
			ТекСтрока = ВыходныеИзделия[ТекИндекс];
			
			// Дата поступления обязательна к заполнению только для заказов в 
			// статусах КОбеспечению, КИсполнению, Закрыт.
			Если СтатусДокументаВышеНеСогласованного
				И Не ТекСтрока.Отменено
				И Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Дата поступления"" в строке %НомерСтроки% списка ""Выходные изделия""';
									|en = 'The ""Date of receipt"" column in line %НомерСтроки% of the ""Finished products"" list is not filled in'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
				ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", ТекСтрока.НомерСтроки, "ДатаПоступления");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
				
			КонецЕсли;
			
			// Дата поступления в тч ВыходныеИзделия должна быть не меньше даты документа
			Если Не ПоступлениеОднойДатой
				И ЗначениеЗаполнено(ТекСтрока.ДатаПоступления)
				И ТекСтрока.ДатаПоступления < НачалоДня(Дата) Тогда
				
				ТекстОшибки = НСтр("ru = 'Дата поступления должна быть не меньше даты документа %Дата% в строке %НомерСтроки% списка ""Выходные изделия""';
									|en = 'Receipt date cannot be less than document date ""%Дата%"" in line %НомерСтроки% of the ""Finished products"" list'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=D"));
				ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", ТекСтрока.НомерСтроки, "ДатаПоступления");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
				
			КонецЕсли;
			
			// Причина отмены обязательна для заполнения в отмененных строках
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам")
				И ТекСтрока.Отменено
				И Не ЗначениеЗаполнено(ТекСтрока.ПричинаОтмены) Тогда
				
				ТекстОшибки = НСтр("ru = 'Необходимо указать причину отмены в строке %НомерСтроки% списка ""Выходные изделия""';
									|en = 'Cancellation reason is required in line %НомерСтроки% of the ""Finished products"" list'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
				ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", ТекСтрока.НомерСтроки, "ПричинаОтмены");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПроизводствоСервер.ПроверитьЗаполнениеДолейСтоимостиВТабличнойЧасти(
			ЭтотОбъект, "ВыходныеИзделия", МассивНепроверяемыхРеквизитов, Отказ);
		
		Если СтатусДокументаВышеНеСогласованного Тогда
			ПроизводствоСервер.ПроверитьЗаполнениеПолучателяВТабличнойЧасти(ЭтотОбъект, "ВыходныеИзделия", Отказ);
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ТЧ_ПобочныеИзделия
		
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия");
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Получатель");
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.ДатаПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.ПричинаОтмены");
		
		Для ТекИндекс = 0 По ПобочныеИзделия.Количество() - 1 Цикл
			
			ТекСтрока = ПобочныеИзделия[ТекИндекс];
			
			// Дата поступления обязательна к заполнению только для заказов в 
			// статусах КОбеспечению, КИсполнению, Закрыт.
			Если СтатусДокументаВышеНеСогласованного
				И Не ТекСтрока.Отменено
				И Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Дата поступления"" в строке %НомерСтроки% списка ""Побочные изделия""';
									|en = 'The ""Date of receipt"" column in line %НомерСтроки% of the ""By-products"" list is not filled in'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
				ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПобочныеИзделия", ТекСтрока.НомерСтроки, "ДатаПоступления");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
				
			КонецЕсли;
			
			// Дата поступления в тч ПобочныеИзделия должна быть не меньше даты документа
			Если Не ПоступлениеОднойДатой
				И ЗначениеЗаполнено(ТекСтрока.ДатаПоступления)
				И ТекСтрока.ДатаПоступления < НачалоДня(Дата) Тогда
				
				ТекстОшибки = НСтр("ru = 'Дата поступления должна быть не меньше даты документа %Дата% в строке %НомерСтроки% списка ""Побочные изделия""';
									|en = 'Receipt date cannot be less than document date ""%Дата%"" in line %НомерСтроки% of the ""By-products"" list'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=D"));
				ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПобочныеИзделия", ТекСтрока.НомерСтроки, "ДатаПоступления");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
				
			КонецЕсли;
			
			// Причина отмены обязательна для заполнения в отмененных строках
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам")
				И ТекСтрока.Отменено
				И Не ЗначениеЗаполнено(ТекСтрока.ПричинаОтмены) Тогда
				
				ТекстОшибки = НСтр("ru = 'Необходимо указать причину отмены в строке %НомерСтроки% списка ""Побочные изделия""';
									|en = 'Cancellation reason is required in line %НомерСтроки% of the ""By-products"" list'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
				ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПобочныеИзделия", ТекСтрока.НомерСтроки, "ПричинаОтмены");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтатусДокументаВышеНеСогласованного Тогда
			ПроизводствоСервер.ПроверитьЗаполнениеПолучателяВТабличнойЧасти(ЭтотОбъект, "ПобочныеИзделия", Отказ);
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ТЧ_ОбеспечениеМатериаламиИРаботами
		
		МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.ДатаОтгрузки");
		МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Склад");
		
		ПараметрыВстраивания = Документы.ЗаказПереработчику2_5.ДоступныеОстаткиПараметрыВстраивания();
		ТаблицаОшибок = ОбеспечениеВДокументахСервер.ТаблицаОшибокЗаполнения(ЭтотОбъект, ПараметрыВстраивания);
		
		ДатаОтгрузкиОбязательна = Ложь;
		ШаблонТекстаДатаОтгрузки = НСтр("ru = 'Не заполнена колонка ""Дата отгрузки"" в строке %НомерСтроки% списка ""Материалы и работы"".';
										|en = 'Column ""Shipment date"" in line %НомерСтроки% of the ""Materials and works"" list is not filled in.'");
		ШаблонТекстаСклад        = НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %НомерСтроки% списка ""Материалы и работы"".';
										|en = 'The ""Warehouse"" column in line %НомерСтроки% of the ""Materials and works"" list is not filled in.'");
		
		Для ТекИндекс = 0 По ТаблицаОшибок.Количество() - 1 Цикл
			
			СтрокаОшибки = ТаблицаОшибок[ТекИндекс];
			
			Если Не НеОтгружатьЧастями
				И СтрокаОшибки.ДатаОтгрузкиОбязательна
				И СтрокаОшибки.ДатаОтгрузкиНеЗаполнена Тогда
				
				ТекстОшибки   = СтрЗаменить(ШаблонТекстаДатаОтгрузки, "%НомерСтроки%", СтрокаОшибки.НомерСтроки);
				ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОбеспечениеМатериаламиИРаботами", СтрокаОшибки.НомерСтроки, "ДатаОтгрузки");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТабЧасти, , Отказ);
				
			КонецЕсли;
			
			Если СтрокаОшибки.СкладОбязателен
				И СтрокаОшибки.СкладНеЗаполнен Тогда
				
				ТекстОшибки   = СтрЗаменить(ШаблонТекстаСклад, "%НомерСтроки%", СтрокаОшибки.НомерСтроки);
				ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОбеспечениеМатериаламиИРаботами", СтрокаОшибки.НомерСтроки, "Склад");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТабЧасти, , Отказ);
				
			КонецЕсли;
			ДатаОтгрузкиОбязательна = ДатаОтгрузкиОбязательна Или СтрокаОшибки.ДатаОтгрузкиОбязательна;
			
		КонецЦикла;
		
		Для ТекИндекс = 0 По ОбеспечениеМатериаламиИРаботами.Количество()-1 Цикл
			
			ТекСтрока = ОбеспечениеМатериаламиИРаботами[ТекИндекс];
			
			Если ЗначениеЗаполнено(ТекСтрока.ДатаОтгрузки) Тогда
				
				// Дата отгрузки в тч ОбеспечениеМатериаламиИРаботами должна быть не меньше даты документа
				Если Не НеОтгружатьЧастями
					И ТекСтрока.ДатаОтгрузки < НачалоДня(Дата) Тогда
					
					ТекстОшибки = НСтр("ru = 'Дата отгрузки должна быть не меньше даты документа ""%Дата%"" в строке %НомерСтроки% списка ""Материалы и работы"".';
										|en = 'Shipment date cannot be less than document date ""%Дата%"" in line %НомерСтроки% of the ""Materials and works"" list.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата, "ДЛФ=D"));
					ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОбеспечениеМатериаламиИРаботами", ТекСтрока.НомерСтроки, "ДатаОтгрузки");
					
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
					
				КонецЕсли;
				
				// Месяц отгрузки должен быть не больше месяца поступления продукции и возвратных отходов.
				ДатаПоступленияГруппы = ДатыПоступления.Получить(ТекСтрока.НомерГруппыЗатрат);
				Если Не НеОтгружатьЧастями
					И ЗначениеЗаполнено(НачалоМесяца(ДатаПоступленияГруппы))
					И ТекСтрока.ДатаОтгрузки > ДатаПоступленияГруппы Тогда
					
					ТекстОшибки = НСтр("ru = 'Месяц отгрузки должен быть не больше месяца поступления выходных изделий (%Дата%)';
										|en = 'Shipment month cannot be greater than the month of finished product receipt (%Дата%)'");
					ТекстОшибки =
						СтрЗаменить(
							ТекстОшибки,
							"%Дата%",
							Формат(
								ДатаПоступленияГруппы,
								НСтр("ru = 'ДФ=''ММММ г""""г.""""'';';
									|en = 'DF=''MMMM y'';'")));
					ПутьКТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОбеспечениеМатериаламиИРаботами", ТекСтрока.НомерСтроки, "ДатаОтгрузки");
					
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ,, Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ДатаОтгрузкиОбязательна
			Или Не НеОтгружатьЧастями Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");
		КонецЕсли;
		
		#КонецОбласти
		
		ПараметрыВыбораСтатейИАналитик = Документы.ЗаказПереработчику2_5.ПараметрыВыбораСтатейИАналитик();
		ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
		
		#КонецОбласти
		
	//++ НЕ УТКА
	Иначе
	
	#Область ОтключениеПроверокЗаказаПоРаспоряжениям
		
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВыполнения");
		МассивНепроверяемыхРеквизитов.Добавить("СкладПродукции");
		МассивНепроверяемыхРеквизитов.Добавить("СкладМатериалов");
		МассивНепроверяемыхРеквизитов.Добавить("СпособРаспределенияЗатратНаВыходныеИзделия");
		
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Спецификация");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Назначение");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ДоляСтоимости");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ДатаПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.КоличествоУпаковок");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Получатель");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.СтатьяРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.АналитикаРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ПричинаОтмены");
		
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия");
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.ДатаПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.КоличествоУпаковок");
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Получатель");
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.СтатьяРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.АналитикаРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.СтатьяКалькуляции");
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.ПричинаОтмены");
		
		МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами");
		МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения");
		МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Склад");
		МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.ДатаОтгрузки");
		МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок");
		МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции");
		
	#КонецОбласти
	
	КонецЕсли;
	//-- НЕ УТКА
	
	//++ НЕ УТКА
	#Область ПроверкаНазначенийДавальца
	
	ПараметрыПроверкиНазначения = ДавальческаяСхема.ПараметрыПроверкиВыбораНазначенияДавальца();
	ПараметрыПроверкиНазначения.ИмяТЧМатериалыИРаботы = Метаданные().ТабличныеЧасти.ОбеспечениеМатериаламиИРаботами.Имя;
	ПараметрыПроверкиНазначения.ДавальческиеГруппировкиЗатрат.Добавить(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства);
	
	ДавальческаяСхема.ПроверитьКорректностьВыбораНазначенияДавальца(ЭтотОбъект, ПараметрыПроверкиНазначения, Отказ);
	
	#КонецОбласти
	//-- НЕ УТКА
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	//++ НЕ УТКА
	Если НЕ ЭтоНовый() Тогда
		РеквизитыДоИзменения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ГруппировкаЗатрат");
		ГруппировкаЗатратДоИзменения = РеквизитыДоИзменения.ГруппировкаЗатрат;
	Иначе
		ГруппировкаЗатратДоИзменения = ГруппировкаЗатрат;
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ГруппировкаЗатратДоИзменения", ГруппировкаЗатратДоИзменения);
	ДополнительныеСвойства.Вставить("РежимЗаписи",                  РежимЗаписи);
	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		ВыходныеИзделия.Очистить();
		ПобочныеИзделия.Очистить();
		ОбеспечениеМатериаламиИРаботами.Очистить();
		ПроверитьВозможностьСвязиСРаспоряжениями(Отказ);
	КонецЕсли;
	
	Если Не ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
	//-- НЕ УТКА
		
		ПараметрыОкругления = Документы.ЗаказПереработчику2_5.ПараметрыТЧДляОкругления();
		
		НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(
			ЭтотОбъект, РежимЗаписи, ПараметрыОкругления["ВыходныеИзделия"]);
		
		НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(
			ЭтотОбъект, РежимЗаписи, ПараметрыОкругления["ПобочныеИзделия"]);
		
		НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(
			ЭтотОбъект, РежимЗаписи, ПараметрыОкругления["ОбеспечениеМатериаламиИРаботами"]);
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "ВыходныеИзделия",  "ИзделияМаксимальныйКодСтроки");
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "ПобочныеИзделия",  "ИзделияМаксимальныйКодСтроки");
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "ОбеспечениеМатериаламиИРаботами", "МатериалыМаксимальныйКодСтроки");
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Услуги",           "ИзделияМаксимальныйКодСтроки");
	
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказПереработчику2_5);
		НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
		
		НоваяДатаПоступления = Дата(1,1,1);
		
		Если ВыходныеИзделия.Количество() > 0 Тогда
			
			Если Статус = Перечисления.СтатусыЗаказовПереработчикам.КИсполнению Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Отменено", Ложь);
				ПодтвержденныеСтроки = ВыходныеИзделия.НайтиСтроки(ПараметрыОтбора);
				
				Если ПодтвержденныеСтроки.Количество() > 0 Тогда
					
					ТаблицаПодтвержденныхСтрок = ВыходныеИзделия.Выгрузить(ПодтвержденныеСтроки, "ДатаПоступления");
					ТаблицаПодтвержденныхСтрок.Сортировать("ДатаПоступления Возр");
					НоваяДатаПоступления = ТаблицаПодтвержденныхСтрок[0].ДатаПоступления;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДатаПервогоПоступления = НоваяДатаПоступления;
		
		СтруктураЗалоговыхДанных = ПолучитьЗалоговуюСуммуСДатойОтгрузки();
		СуммаЗалоговая = СтруктураЗалоговыхДанных.Сумма;
		
		Если НеОтгружатьЧастями Тогда
			ОбеспечениеВДокументахСервер.ЗаполнитьДатыОтгрузкиВТаблице(ДатаОтгрузки, ОбеспечениеМатериаламиИРаботами, "ДатаОтгрузки");
		Иначе
			ДатаОтгрузки = Дата(1,1,1);
		КонецЕсли;
		
	//++ НЕ УТКА
	Иначе
		ОбновитьМаксимальныеКодыСтрокПоРаспоряжениям();
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Услуги", "ИзделияМаксимальныйКодСтроки");
	КонецЕсли;
	//-- НЕ УТКА
	
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСогласования)
		И Не Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован Тогда
		ДатаСогласования = ТекущаяДатаСеанса();
		ВзаиморасчетыСервер.ПриИзмененииДатыСогласования(ЭтотОбъект);
	ИначеЕсли Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован Тогда
		ДатаСогласования = Неопределено;
		ВзаиморасчетыСервер.ПриИзмененииДатыСогласования(ЭтотОбъект);
	КонецЕсли;
	
	ВзаиморасчетыСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	
	СуммыДокумента = СуммыДокумента();
	СуммаДокумента = СуммыДокумента.СуммаСНДС;
	
	ТаблицаЭтапов = ЭтапыГрафикаОплаты.Выгрузить(, "ВариантОплаты, СуммаПлатежа, СуммаЗалогаЗаТару");
	ТаблицаЭтапов.Свернуть("ВариантОплаты", "СуммаПлатежа, СуммаЗалогаЗаТару");
	
	СтрокаАвансаДоПодтверждения = ТаблицаЭтапов.Найти(Перечисления.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения,"ВариантОплаты");
	
	Если СтрокаАвансаДоПодтверждения = Неопределено Тогда
		СуммаАвансаДоПодтверждения = 0;
	Иначе
		СуммаАвансаДоПодтверждения = СтрокаАвансаДоПодтверждения.СуммаПлатежа + СтрокаАвансаДоПодтверждения.СуммаЗалогаЗаТару;
	КонецЕсли;
	
	СтрокаПредоплатыДоПоступления = ТаблицаЭтапов.Найти(Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления,"ВариантОплаты");
	
	Если СтрокаПредоплатыДоПоступления = Неопределено Тогда
		СуммаПредоплатыДоПоступления = 0;
	Иначе
		СуммаПредоплатыДоПоступления = СтрокаПредоплатыДоПоступления.СуммаПлатежа + СтрокаПредоплатыДоПоступления.СуммаЗалогаЗаТару;
	КонецЕсли;
	
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить("Касса");
		ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, МассивРеквизитов, Новый Массив);
	КонецЕсли;
	
	ШаблонНазначенияПередачи = Документы.ЗаказПереработчику2_5.ШаблонНазначенияПередачи(ЭтотОбъект);
	
	ПерегенерацияНазначения =
		Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(
			НазначениеПередачи,
			ШаблонНазначенияПередачи,
			ЭтотОбъект,
			"НаправлениеДеятельности,ГруппировкаЗатрат",
			Отказ);
	
	Если ПерегенерацияНазначения Тогда
		ПередачаПереработчикуПоНазначениюЗаказа =
			Константы.ВариантОбособленияУПереработчика2_5.Получить() =
				Перечисления.ВариантыОбособленияПриПередачеВПереработку.ЗаказПереработчику;
	КонецЕсли;
	
	ШаблонНазначения = Документы.ЗаказПереработчику2_5.ШаблонНазначения(ЭтотОбъект);
	Если Справочники.Назначения.ШаблоныРавны(ШаблонНазначения, ШаблонНазначенияПередачи) Тогда
		Назначение = НазначениеПередачи;
	Иначе
		
		Если Назначение = НазначениеПередачи Тогда
			Назначение = Неопределено;
		КонецЕсли;
		
		ПерегенерацияНазначения =
			Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(
				Назначение,
				ШаблонНазначения,
				ЭтотОбъект,
				"НаправлениеДеятельности,Партнер,Договор,ГруппировкаЗатрат",
				Отказ);
		
		Если ПерегенерацияНазначения Тогда
			ОбособлениеМатериаловПоНазначениюПродукции =
				Константы.ВариантОбособленияВПередачеПереработчику2_5.Получить() =
					Перечисления.ВариантыОбособленияПриПередачеВПереработку.НазначениеПродукции;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказПереработчику2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПередЗаписью(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	Если Не ЗначениеЗаполнено(Автор) И ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, "Услуги");
	КонецЕсли;
	
	ЗаполнитьНазначенияВМатериалах();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	ШаблонНазначенияПередачи = Документы.ЗаказПереработчику2_5.ШаблонНазначенияПередачи(ЭтотОбъект);
	Справочники.Назначения.ПриЗаписиДокумента(НазначениеПередачи, ШаблонНазначенияПередачи, ЭтотОбъект, Партнер, ЗакупкаПодДеятельность);
	
	ШаблонНазначения = Документы.ЗаказПереработчику2_5.ШаблонНазначения(ЭтотОбъект);
	Если Не Справочники.Назначения.ШаблоныРавны(ШаблонНазначения, ШаблонНазначенияПередачи) Тогда
		Справочники.Назначения.ПриЗаписиДокумента(Назначение, ШаблонНазначения, ЭтотОбъект, Партнер, ЗакупкаПодДеятельность);
	КонецЕсли;
	
	//++ НЕ УТКА
	Если Не Проведен
		И (ГруппировкаЗатрат =
					Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства
			Или ДополнительныеСвойства.ГруппировкаЗатратДоИзменения =
					Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
		И Не Отказ Тогда
		
		Если НЕ ПометкаУдаления Тогда
			ОбновитьРаспоряженияСвязанныеСЗаказом(Отказ);
		Иначе
			УбратьСвязьРаспоряженияСЗаказом(Отказ);
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	//++ НЕ УТКА

	// При проведении этапов для распределения запасов нужны данные из реестра документов по заказу переработчику.
	// Поэтому сначала записывается и проводится заказ переработчику, а потом этапы.
	Если (ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства
			Или ДополнительныеСвойства.ГруппировкаЗатратДоИзменения =
					Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
		И Не Отказ Тогда
		
		Если НЕ ПометкаУдаления Тогда
			ОбновитьРаспоряженияСвязанныеСЗаказом(Отказ);
		Иначе
			УбратьСвязьРаспоряженияСЗаказом(Отказ);
		КонецЕсли;
		
		// Обновим записи реестра документов после записи этапов
		Если Не Отказ Тогда
			Документы.ЗаказПереработчику2_5.ОбновитьЗаписиРеестраДокументов(Ссылка, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Если Не Отказ Тогда
		ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);
		ПереработкаНаСтороне.ВыполнитьКонтрольЗаказаПослеПроведения(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументНаОснованииПартнера(Знач Основание)
	
	РеквизитыПартнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Поставщик, Клиент");
	
	Если РеквизитыПартнера.Поставщик И РеквизитыПартнера.Клиент Тогда
		Партнер = Основание;
	Иначе
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			ВызватьИсключение НСтр("ru = 'Контрагент должен являться одновременно и ""поставщиком"" и ""клиентом"".';
									|en = 'Counterparty must be both a vendor and a customer.'");
		Иначе
			ВызватьИсключение НСтр("ru = 'Партнер должен являться одновременно и ""поставщиком"" и ""клиентом"".';
									|en = 'Partner must be both a vendor and a customer.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииСделки(СделкаСКлиентом)
	
	Если Документы.ЗаказКлиента.ЕстьОбособленныеЗаказыПоСделке(СделкаСКлиентом) Тогда
		ЗаполнитьДокументНаОснованииСделкиПоОбособленнымЗаказам(СделкаСКлиентом);
	Иначе
		ЗаполнитьДокументНаОснованииСделкиСводно(СделкаСКлиентом);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииЗаказаКлиента(ДанныеЗаполнения)
	
	ЗаказКлиента = ДанныеЗаполнения.Основание;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказКлиента.Приоритет КАК Приоритет,
		|	ЗаказКлиента.Организация КАК Организация,
		|	ЗаказКлиента.Сделка КАК Сделка,
		|	ЗаказКлиента.Склад КАК СкладПродукции,
		|	ЕСТЬNULL(ЗаказКлиента.Склад.ЭтоГруппа, ЛОЖЬ) КАК ЭтоГруппа,
		|	ЗаказКлиента.НалогообложениеНДС КАК ЗакупкаПодДеятельность,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат
		|				ИЛИ ЗаказКлиента.НаправлениеДеятельности.УчетРасчетовСПоставщиками
		|			ТОГДА ЗаказКлиента.НаправлениеДеятельности
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &ЗаказКлиента");
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	// Заполнение шапки
	Организация             = Реквизиты.Организация;
	СкладПродукции          = Реквизиты.СкладПродукции;
	Сделка                  = Реквизиты.Сделка;
	Приоритет               = Реквизиты.Приоритет;
	ЗакупкаПодДеятельность  = Реквизиты.ЗакупкаПодДеятельность;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДокументОснование       = ЗаказКлиента;
	
	СкладПродукции = ДанныеЗаполнения.Склад;
	Если Не ЗначениеЗаполнено(СкладПродукции)
			И Реквизиты.ЭтоГруппа
			И ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки") Тогда
		
		СкладПродукции = Реквизиты.СкладПродукции;
		
	КонецЕсли;
	
	// Заполнение табличной части.
	ВыходныеИзделия.Загрузить(ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары));
	УдалитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары);
	
	Если ОбособлениеМатериаловПоНазначениюПродукции Тогда
		ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукцииИНазначениям;
	Иначе
		ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;
	КонецЕсли;
	
	ИнициализироватьДокументПослеДобавленияПродукции();
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииЗаказаНаПеремещение(ДанныеЗаполнения)

	Распоряжение = ДанныеЗаполнения.Основание;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Распоряжения.Организация КАК Организация,
		|	Распоряжения.Сделка КАК Сделка,
		|	Распоряжения.ПеремещениеПодДеятельность КАК ЗакупкаПодДеятельность,
		|	ВЫБОР
		|		КОГДА Распоряжения.НаправлениеДеятельности.УчетЗатрат
		|				ИЛИ Распоряжения.НаправлениеДеятельности.УчетРасчетовСПоставщиками
		|			ТОГДА Распоряжения.НаправлениеДеятельности
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК Распоряжения
		|ГДЕ
		|	Распоряжения.Ссылка = &Распоряжение");
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Реквизиты = Запрос.Выполнить().Выбрать();
	
	// Заполнение шапки
	ДокументОснование = Распоряжение;
	Если Реквизиты.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
	КонецЕсли;
	
	СкладПродукции = ДанныеЗаполнения.Склад;
	
	// Заполнение табличной части.
	ВыходныеИзделия.Загрузить(ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары));
	УдалитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары);
	
	Если ОбособлениеМатериаловПоНазначениюПродукции Тогда
		ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукцииИНазначениям;
	Иначе
		ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;
	КонецЕсли;
	
	ИнициализироватьДокументПослеДобавленияПродукции();
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииСделкиПоОбособленнымЗаказам(Знач СправочникОснование)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ссылка КАК ЗаказКлиента
	|
	|ПОМЕСТИТЬ ВтЗаказыПоСделке
	|
	|ИЗ
	|	Документ.ЗаказКлиента КАК Т
	|ГДЕ
	|	Т.Сделка = &Сделка
	|	И Т.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке))
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура          КАК Номенклатура,
	|	Т.Характеристика        КАК Характеристика,
	|	Т.Склад                 КАК Склад,
	|	Т.Назначение            КАК Назначение,
	|	МАКСИМУМ(Т.НомерСтроки) КАК НомерСтроки,
	|	МИНИМУМ(Т.ДатаЗаказа)   КАК ДатаЗаказа,
	|	СУММА(Т.Заказано)       КАК Заказано
	|	
	|ПОМЕСТИТЬ НоменклатураЗаказа
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		Заказы.ЗаказКлиента.Дата КАК ДатаЗаказа,
	|		Заказы.Номенклатура      КАК Номенклатура,
	|		Заказы.Характеристика    КАК Характеристика,
	|		Заказы.Склад             КАК Склад,
	|		ВЫБОР
	|			КОГДА НЕ ТоварыЗаказа.Ссылка ЕСТЬ NULL
	|				ТОГДА ТоварыЗаказа.НомерСтроки
	|			ИНАЧЕ ТоварыЗаявки.НомерСтроки
	|		КОНЕЦ                    КАК НомерСтроки,
	|		Заказы.ЗаказаноОстаток   КАК Заказано,
	|		ВЫБОР
	|			КОГДА НЕ ТоварыЗаказа.Ссылка ЕСТЬ NULL
	|				ТОГДА ТоварыЗаказа.Ссылка.Назначение
	|			ИНАЧЕ ТоварыЗаявки.Ссылка.Назначение
	|		КОНЕЦ                    КАК Назначение
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(,
	|				ЗаказКлиента В(
	|				ВЫБРАТЬ
	|					Т.ЗаказКлиента
	|				ИЗ
	|					ВтЗаказыПоСделке КАК Т)
	|		) КАК Заказы
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ТоварыЗаказа
	|		ПО Заказы.ЗаказКлиента      = ТоварыЗаказа.Ссылка
	|		И Заказы.Номенклатура   = ТоварыЗаказа.Номенклатура
	|		И Заказы.Характеристика = ТоварыЗаказа.Характеристика
	|		И Заказы.КодСтроки      = ТоварыЗаказа.КодСтроки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТоварыЗаявки
	|		ПО Заказы.ЗаказКлиента      = ТоварыЗаявки.Ссылка
	|		И Заказы.Номенклатура   = ТоварыЗаявки.Номенклатура
	|		И Заказы.Характеристика = ТоварыЗаявки.Характеристика
	|		И Заказы.КодСтроки      = ТоварыЗаявки.КодСтроки
	|		И ТоварыЗаказа.Ссылка ЕСТЬ NULL
	|	ГДЕ
	|		ВЫБОР
	|			КОГДА НЕ ТоварыЗаказа.Ссылка ЕСТЬ NULL ТОГДА
	|				ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления)
	|					И ТоварыЗаказа.Обособленно
	|			ИНАЧЕ
	|				ТоварыЗаявки.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления)
	|					И ТоварыЗаявки.Обособленно
	|			КОНЕЦ
	|		И Заказы.ЗаказаноОстаток > 0) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Склад,
	|	Т.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеЗапасов.Номенклатура        КАК Номенклатура,
	|	РаспределениеЗапасов.Характеристика      КАК Характеристика,
	|	РаспределениеЗапасов.Склад               КАК Склад,
	|	РаспределениеЗапасов.Назначение          КАК Назначение,
	|	СУММА(РаспределениеЗапасов.НеОбеспечено) КАК КЗаказу
	|ПОМЕСТИТЬ Потребность
	|
	|ИЗ
	|	НоменклатураЗаказа КАК Фильтр
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	|		ПО РаспределениеЗапасов.Номенклатура   = Фильтр.Номенклатура
	|		 И РаспределениеЗапасов.Характеристика = Фильтр.Характеристика
	|		 И РаспределениеЗапасов.Склад          = Фильтр.Склад
	|		 И РаспределениеЗапасов.Назначение     = Фильтр.Назначение
	|		 И РаспределениеЗапасов.Номенклатура.ТипНоменклатуры В(
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|ГДЕ
	|	РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеЗапасов.Характеристика,
	|	РаспределениеЗапасов.Номенклатура,
	|	РаспределениеЗапасов.Склад,
	|	РаспределениеЗапасов.Назначение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение,
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыЗаказов.ДатаЗаказа     КАК ДатаЗаказа,
	|	ВтТоварыЗаказов.НомерСтроки    КАК НомерСтроки,
	|	ВтТоварыЗаказов.Номенклатура   КАК Номенклатура,
	|	ВтТоварыЗаказов.Характеристика КАК Характеристика,
	|	ВтТоварыЗаказов.Склад          КАК Склад,
	|	ВтТоварыЗаказов.Назначение     КАК Назначение,
	|	ВЫБОР
	|		КОГДА ВтТоварыЗаказов.Заказано > ВтКЗаказу.КЗаказу
	|			ТОГДА ВтКЗаказу.КЗаказу
	|		ИНАЧЕ ВтТоварыЗаказов.Заказано
	|	КОНЕЦ                          КАК Количество
	|
	|ПОМЕСТИТЬ НоменклатураКЗаказу
	|
	|ИЗ
	|	НоменклатураЗаказа КАК ВтТоварыЗаказов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Потребность КАК ВтКЗаказу
	|	ПО ВтТоварыЗаказов.Номенклатура  = ВтКЗаказу.Номенклатура
	|	И ВтТоварыЗаказов.Характеристика = ВтКЗаказу.Характеристика
	|	И ВтТоварыЗаказов.Склад          = ВтКЗаказу.Склад
	|	И ВтТоварыЗаказов.Назначение     = ВтКЗаказу.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура           КАК Номенклатура,
	|	Т.Характеристика         КАК Характеристика,
	|	Т.Склад                  КАК Получатель,
	|	Т.Назначение             КАК Назначение,
	|	Т.Количество             КАК Количество,
	|	Т.Количество             КАК КоличествоУпаковок,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости
	|ИЗ
	|	НоменклатураКЗаказу КАК Т
	|ГДЕ
	|	Т.Склад В (ВЫБРАТЬ Таб.Склад ИЗ ВТСклады КАК Таб)
	|
	|УПОРЯДОЧИТЬ ПО Т.Назначение, Т.НомерСтроки
	|");
	
	Запрос.УстановитьПараметр("Сделка", СправочникОснование);
	Сделка = СправочникОснование;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаТовары.Количество() > 0 Тогда 
		ВыходныеИзделия.Загрузить(ТаблицаТовары);
	КонецЕсли;
	
	Если ОбособлениеМатериаловПоНазначениюПродукции Тогда
		ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукцииИНазначениям;
	Иначе
		ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;
	КонецЕсли;
	
	ИнициализироватьДокументПослеДобавленияПродукции();
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииСделкиСводно(Знач СправочникОснование)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СделкиСКлиентами.Ссылка КАК Сделка
	|ИЗ
	|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	|ГДЕ
	|	СделкиСКлиентами.Ссылка = &Сделка
	|	И СделкиСКлиентами.ОбособленныйУчетТоваровПоСделке
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентов.Номенклатура КАК Номенклатура,
	|	ЗаказыКлиентов.Характеристика КАК Характеристика,
	|	ЗаказыКлиентов.ЗаказаноОстаток КАК Количество
	|
	|ПОМЕСТИТЬ ЗаказыКлиентов
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(,
	|		ЗаказКлиента.Сделка = &Сделка
	|		И ЗаказКлиента.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
	|			)
	|	) КАК ЗаказыКлиентов
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикам.Характеристика КАК Характеристика,
	|	ЗаказыПоставщикам.ЗаказаноПриход КАК Количество
	|
	|ПОМЕСТИТЬ ЗаказыПоставщикам
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Обороты(,, Период,
	|		ЗаказПоставщику.Сделка = &Сделка
	|	) КАК ЗаказыПоставщикам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентов.Номенклатура                                           КАК Номенклатура,
	|	ЗаказыКлиентов.Характеристика                                         КАК Характеристика,
	|	ЗаказыКлиентов.Количество - ЕСТЬNULL(ЗаказыПоставщикам.Количество, 0) КАК Количество,
	|	ЗаказыКлиентов.Количество - ЕСТЬNULL(ЗаказыПоставщикам.Количество, 0) КАК КоличествоУпаковок,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается)    КАК ТипСтоимости
	|ИЗ
	|	ЗаказыКлиентов КАК ЗаказыКлиентов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|	ПО ЗаказыКлиентов.Номенклатура = ЗаказыПоставщикам.Номенклатура
	|	И ЗаказыКлиентов.Характеристика = ЗаказыПоставщикам.Характеристика
	|
	|ГДЕ
	|	(ЗаказыКлиентов.Количество - ЕСТЬNULL(ЗаказыПоставщикам.Количество, 0)) > 0
	|");
	
	Запрос.УстановитьПараметр("Сделка", СправочникОснование);

	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаПоСделке = МассивРезультатов[0].Выбрать();
	ВыборкаПоТоварам = МассивРезультатов[3].Выбрать();
	
	Если ВыборкаПоСделке.Следующий() Тогда
		Сделка = ВыборкаПоСделке.Сделка;
	КонецЕсли;
	
	Пока ВыборкаПоТоварам.Следующий() Цикл
		НоваяСтрока = ВыходныеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
	КонецЦикла;
	
	Если ОбособлениеМатериаловПоНазначениюПродукции Тогда
		ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукцииИНазначениям;
	Иначе
		ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;
	КонецЕсли;
	
	ИнициализироватьДокументПослеДобавленияПродукции();
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ЗаполнитьДокументНаОснованииЭтапаПроизводства(Основание)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Этап.Партнер КАК Партнер,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ВыпускПодДеятельность КАК ЗакупкаПодДеятельность,
	|	ДанныеДокумента.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
	|	ДанныеДокумента.ОставитьИзделияУПереработчика КАК ОставитьИзделияУПереработчика
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Основание";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Основание", Основание);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
	ПереработкаПоЗаказу = Истина;
	ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства;
	
	МассивРаспоряжений = Новый Массив;
	МассивРаспоряжений.Добавить(Основание);
	
	Документы.ЗаказПереработчику2_5.ЗаполнитьПоЭтапамПроизводства(МассивРаспоряжений, ЭтотОбъект);
	
КонецПроцедуры

//-- НЕ УТКА

Процедура ИнициализироватьДокументПередЗаполнением(ПараметрыИнициализации = Неопределено)
	
	Если ПараметрыИнициализации <> Неопределено
		И ПараметрыИнициализации.Свойство("ЗаполнитьХозОперацию")
		И ПараметрыИнициализации.ЗаполнитьХозОперацию Тогда 
		ХозяйственнаяОперация = ПараметрыИнициализации.ХозяйственнаяОперация;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика2_5;
	КонецЕсли;
	Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	УслугиПоПереработке =
		?(ЗначениеЗаполнено(УслугиПоПереработке),
			УслугиПоПереработке,
			Перечисления.ВариантыОформленияУслугДокументовПереработки.УказываютсяВЗаказеОтчете);
	
	ВыполнениеРаботОднойДатой = Истина;
	ДатаВыполнения = Дата;
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	
	ОтборВидаЦены = Новый Структура;
	ОтборВидаЦены.Вставить("ЦенаВключаетНДС",                 ЦенаВключаетНДС);
	ОтборВидаЦены.Вставить("ИспользоватьПриВыпускеПродукции", Истина);
	ВидЦены = Справочники.ВидыЦен.ВидЦеныПоУмолчанию(ВидЦены, ОтборВидаЦены);
	
	Автор = Пользователи.ТекущийПользователь();
	
	ОбособлениеМатериаловПоНазначениюПродукции =
		Константы.ВариантОбособленияВПередачеПереработчику2_5.Получить() =
			Перечисления.ВариантыОбособленияПриПередачеВПереработку.НазначениеПродукции;
	
	ПередачаПереработчикуПоНазначениюЗаказа =
			Константы.ВариантОбособленияУПереработчика2_5.Получить() =
				Перечисления.ВариантыОбособленияПриПередачеВПереработку.ЗаказПереработчику;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент()
	
	ГруппировкаЗатрат =
		?(ЗначениеЗаполнено(ГруппировкаЗатрат),
			ГруппировкаЗатрат,
			?(ОбособлениеМатериаловПоНазначениюПродукции,
				Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукцииИНазначениям,
				Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки));
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
		
		ПараметрыОбъекта = Новый Структура("Партнер, Договор, Контрагент, Организация");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
		ПараметрыОбъекта.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
		
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = Валюта;
		
		Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
				И ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") Тогда
			ДопПараметры.НаправлениеДеятельности = НаправлениеДеятельности;
		КонецЕсли;	
		
		Договор =
			ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
				ПараметрыОбъекта,
				ХозяйственнаяОперация,
				ДопПараметры);
		
		Если ЗначениеЗаполнено(Договор)
			И (ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") 
				Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетРасчетовСПоставщикамиПоНаправлениямДеятельности"))
			И Не ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
			И Не ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности,, Договор);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗаполнения = Документы.ЗаказПереработчику2_5.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ЗакупкаПодДеятельность, ПараметрыЗаполнения);
	
	ПараметрыЗаполнения = Документы.ЗаказПереработчику2_5.ПараметрыЗаполненияНалогообложенияНДСЗакупки(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(НалогообложениеНДС, ПараметрыЗаполнения);
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
	//++ НЕ УТКА
	Если Не ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
	//-- НЕ УТКА
		СкладМатериалов = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(СкладМатериалов, Истина, Истина);
		СкладПродукции = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(СкладПродукции, Истина, Истина);
	//++ НЕ УТКА
	КонецЕсли;
	//-- НЕ УТКА
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.БанковскийСчет = БанковскийСчет;
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ФормаОплаты = ФормаОплаты;
	СтруктураПараметров.Касса = Касса;
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПереработчикам2_5")
		И НЕ ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		Статус = Перечисления.СтатусыЗаказовПереработчикам.Закрыт;
	Иначе
		Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован;
	КонецЕсли;
	
	Если Не ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.ПустаяСсылка());
		
		Строки =
			ОбеспечениеМатериаламиИРаботами.НайтиСтроки(
				СтруктураОтбора);
		
		ОбеспечениеВДокументахСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(Строки);
		
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ЭтотОбъект);
	СтруктураЗаполненияСтавкиНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЭтотОбъект);
	СтруктураЗаполненияСтавкиНДС.ИнициализацияВходящегоДокумента = Истина;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("СкорректироватьСтавкуНДС", СтруктураЗаполненияСтавкиНДС);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Услуги, СтруктураДействий, КэшированныеЗначения);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(КэшированныеЗначения.ОбработанныеСтроки, СтруктураДействий, Неопределено);
	
	Если Не ЗначениеЗаполнено(ВариантПриемкиТоваров) Тогда
		ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокументПослеДобавленияПродукции()
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(ЭтотОбъект, Документы.ЗаказПереработчику2_5);
	
	ДанныеОбИзделиях = Новый Массив;
	Для каждого СтрокаВыходныеИзделия Из ВыходныеИзделия Цикл
		
		МаксимальныйНомерГруппыЗатрат = МаксимальныйНомерГруппыЗатрат + 1;
		СтрокаВыходныеИзделия.НомерГруппыЗатрат = МаксимальныйНомерГруппыЗатрат;
		
		ДанныеОбИзделии =
			УправлениеДаннымиОбИзделияхКлиентСервер.СобратьДанныеОбИзделииДляВыбораСпецификации(
				ЭтотОбъект,
				СтрокаВыходныеИзделия,
				ПараметрыВыбораСпецификаций.ВыходныеИзделия);
		
		ДанныеОбИзделии.Вставить("ТекущаяСпецификация", СтрокаВыходныеИзделия.Спецификация);
			
		ДанныеОбИзделиях.Добавить(ДанныеОбИзделии);
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(
		ВыходныеИзделия,
		ДанныеОбИзделиях,
		ПараметрыВыбораСпецификаций.ВыходныеИзделия);
	
	Документы.ЗаказПереработчику2_5.ЗаполнитьПобочныеИзделияМатериалыУслугиПоСпецификации(ВыходныеИзделия, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПроверитьЗаполнениеГруппЗатрат(Отказ, МассивНепроверяемыхРеквизитов)
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.НомерГруппыЗатрат");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.НомерГруппыЗатрат");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.НомерГруппыЗатрат");
	МассивНепроверяемыхРеквизитов.Добавить("Услуги.НомерГруппыЗатрат");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Назначение");
	
	//++ НЕ УТКА
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия");
	КонецЕсли;
	//-- НЕ УТКА
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами");
	МассивНепроверяемыхРеквизитов.Добавить("Услуги");
	
	Запрос = Новый Запрос;
	Если ОбщегоНазначенияУТ.РежимОтладки() Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВыходныеИзделия",     ВыходныеИзделия.Выгрузить());
	Запрос.УстановитьПараметр("ПобочныеИзделия",     ПобочныеИзделия.Выгрузить());
	Запрос.УстановитьПараметр("ОбеспечениеМатериаламиИРаботами", ОбеспечениеМатериаламиИРаботами.Выгрузить());
	Запрос.УстановитьПараметр("Услуги",              Услуги.Выгрузить());
	Запрос.УстановитьПараметр("Распоряжения",        Распоряжения.Выгрузить());
	Запрос.УстановитьПараметр("ГруппировкаЗатрат",   ГруппировкаЗатрат);
	Запрос.УстановитьПараметр("УслугиПоПереработке", УслугиПоПереработке);
	
	ТабличныеЧасти = Метаданные.Документы.ЗаказПереработчику2_5.ТабличныеЧасти;
	Запрос.УстановитьПараметр("ИмяТаблицыВыходныеИзделия",  ТабличныеЧасти.ВыходныеИзделия.Имя);
	Запрос.УстановитьПараметр("ИмяТаблицыПобочныеИзделия",  ТабличныеЧасти.ПобочныеИзделия.Имя);
	Запрос.УстановитьПараметр("ИмяТаблицыОбеспечениеМатериаламиИРаботами", ТабличныеЧасти.ОбеспечениеМатериаламиИРаботами.Имя);
	Запрос.УстановитьПараметр("ИмяТаблицыУслуги",           ТабличныеЧасти.Услуги.Имя);
	Запрос.УстановитьПараметр("ИмяТаблицыРаспоряжения",     ТабличныеЧасти.Распоряжения.Имя);
	
	Запрос.УстановитьПараметр("СинонимТЧВыходныеИзделия",  ТабличныеЧасти.ВыходныеИзделия.Синоним);
	Запрос.УстановитьПараметр("СинонимТЧПобочныеИзделия",  ТабличныеЧасти.ПобочныеИзделия.Синоним);
	Запрос.УстановитьПараметр("СинонимТЧОбеспечениеМатериаламиИРаботами", ТабличныеЧасти.ОбеспечениеМатериаламиИРаботами.Синоним);
	Запрос.УстановитьПараметр("СинонимТЧУслуги",           ТабличныеЧасти.Услуги.Синоним);
	Запрос.УстановитьПараметр("СинонимТЧРаспоряжения",     ТабличныеЧасти.Распоряжения.Синоним);
	
	ТекстыЗапроса = Новый Массив;
	
	//++ НЕ УТКА
	ТекстыЗапроса.Добавить(ОбщегоНазначенияУТ.ТекстЗапросаДанныеТЧОбъекта(Ссылка, "Распоряжения", Ложь, "НомерГруппыЗатрат"));
	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства
		И Не Документы.ЗаказПереработчику2_5.ИнтерактивноеРедактирование(ЭтотОбъект) Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаТЧРаспоряженияДокумента("ВыходныеИзделия"));
		ТекстыЗапроса.Добавить(ТекстЗапросаТЧРаспоряженияДокумента("ПобочныеИзделия"));
		ТекстыЗапроса.Добавить(ТекстЗапросаТЧРаспоряженияДокумента("ОбеспечениеМатериаламиИРаботами"));
	Иначе
	//-- НЕ УТКА
		ТекстыЗапроса.Добавить(ОбщегоНазначенияУТ.ТекстЗапросаДанныеТЧОбъекта(Ссылка, "ВыходныеИзделия", Ложь, "НомерГруппыЗатрат"));
		ТекстыЗапроса.Добавить(ОбщегоНазначенияУТ.ТекстЗапросаДанныеТЧОбъекта(Ссылка, "ПобочныеИзделия", Ложь, "НомерГруппыЗатрат"));
		ТекстыЗапроса.Добавить(ОбщегоНазначенияУТ.ТекстЗапросаДанныеТЧОбъекта(Ссылка, "ОбеспечениеМатериаламиИРаботами", Ложь, "НомерГруппыЗатрат"));
	//++ НЕ УТКА
	КонецЕсли;
	//-- НЕ УТКА
	
	ТекстыЗапроса.Добавить(ОбщегоНазначенияУТ.ТекстЗапросаДанныеТЧОбъекта(Ссылка, "Услуги", Ложь, "НомерГруппыЗатрат"));
	ТекстыЗапроса.Добавить(Документы.ЗаказПереработчику2_5.ТекстЗапросаГруппыЗатратДокумента());
	
	ТекстыЗапросаПроверок = Новый Массив;
	// Группа затрат не заполнена
	ТекстыЗапросаПроверок.Добавить(
		ПереработкаНаСтороне.ТекстПроверкиНеЗаполненаГруппыЗатратТЧДокумента(
			"ВыходныеИзделия",
			"ИмяТаблицыВыходныеИзделия",
			"СинонимТЧВыходныеИзделия"));
	
	ТекстыЗапросаПроверок.Добавить(
		ПереработкаНаСтороне.ТекстПроверкиНеЗаполненаГруппыЗатратТЧДокумента(
			"ПобочныеИзделия",
			"ИмяТаблицыПобочныеИзделия",
			"СинонимТЧПобочныеИзделия"));
	
	ТекстыЗапросаПроверок.Добавить(
		ПереработкаНаСтороне.ТекстПроверкиНеЗаполненаГруппыЗатратТЧДокумента(
			"ОбеспечениеМатериаламиИРаботами",
			"ИмяТаблицыОбеспечениеМатериаламиИРаботами",
			"СинонимТЧОбеспечениеМатериаламиИРаботами"));
	
	ТекстыЗапросаПроверок.Добавить(
		ПереработкаНаСтороне.ТекстПроверкиНеЗаполненаГруппыЗатратТЧДокумента(
			"Услуги",
			"ИмяТаблицыУслуги",
			"СинонимТЧУслуги"));
	
	// Указана несуществующая группа затрат
	ТекстыЗапросаПроверок.Добавить(
		ПереработкаНаСтороне.ТекстПроверкиНесуществующаяГруппаЗатратТЧДокумента(
			"ВыходныеИзделия",
			"ИмяТаблицыВыходныеИзделия",
			"СинонимТЧВыходныеИзделия"));
	
	ТекстыЗапросаПроверок.Добавить(
		ПереработкаНаСтороне.ТекстПроверкиНесуществующаяГруппаЗатратТЧДокумента(
			"ПобочныеИзделия",
			"ИмяТаблицыПобочныеИзделия",
			"СинонимТЧПобочныеИзделия"));
	
	ТекстыЗапросаПроверок.Добавить(
		ПереработкаНаСтороне.ТекстПроверкиНесуществующаяГруппаЗатратТЧДокумента(
			"ОбеспечениеМатериаламиИРаботами",
			"ИмяТаблицыОбеспечениеМатериаламиИРаботами",
			"СинонимТЧОбеспечениеМатериаламиИРаботами"));
	
	ТекстыЗапросаПроверок.Добавить(
		ПереработкаНаСтороне.ТекстПроверкиНесуществующаяГруппаЗатратТЧДокумента(
			"Услуги",
			"ИмяТаблицыУслуги",
			"СинонимТЧУслуги"));
	
	// Не указано назначение
	ТекстыЗапросаПроверок.Добавить(ПереработкаНаСтороне.ТекстПроверкиНеУказаноНазначение());
	
	// Не указаны материалы
	ТекстыЗапросаПроверок.Добавить(
		ПереработкаНаСтороне.ТекстПроверкиНеУказаныМатериалы(
			"ОбеспечениеМатериаламиИРаботами",
			"ИмяТаблицыОбеспечениеМатериаламиИРаботами",
			"СинонимТЧОбеспечениеМатериаламиИРаботами"));
	
	// Не указана услуга
	ТекстыЗапросаПроверок.Добавить(ПереработкаНаСтороне.ТекстПроверкиНеУказаныУслуги());
	
	//++ НЕ УТКА

	// Не указаны изделия
	ТекстыЗапросаПроверок.Добавить(ПереработкаНаСтороне.ТекстПроверкиНеУказаныИзделия());
	
	// Неправильный тип стоимости
	ТекстыЗапросаПроверок.Добавить(
	"ВЫБРАТЬ
	|	&ИмяТаблицыВыходныеИзделия       КАК ИмяТаблицы,
	|	&СинонимТЧВыходныеИзделия        КАК СинонимТЧ,
	|	ТабличнаяЧасть.НомерСтроки       КАК НомерСтроки,
	|	ТабличнаяЧасть.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	""НеправильныйТипСтоимости""     КАК ТипПроверки
	|ИЗ
	|	ВыходныеИзделия КАК ТабличнаяЧасть
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Распоряжения КАК Распоряжения
	|	ПО Распоряжения.НомерГруппыЗатрат = ТабличнаяЧасть.НомерГруппыЗатрат
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(Распоряжения.Распоряжение КАК Документ.ЭтапПроизводства2_2).НомерСледующегоЭтапа = 0
	|");
	//-- НЕ УТКА
	
	ТекстыЗапроса.Добавить(СтрСоединить(ТекстыЗапросаПроверок, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()));
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Количество() = 0 Тогда
		
		ПредставлениеГруппЗатрат = Новый Соответствие;
		
		ГруппыЗатрат = Документы.ЗаказПереработчику2_5.ТаблицаГруппыЗатрат();
		Документы.ЗаказПереработчику2_5.ОбновитьГруппыЗатрат(ЭтотОбъект, ГруппыЗатрат, 0);
		
		Для Каждого ТекГруппа Из ГруппыЗатрат Цикл
			ПредставлениеГруппЗатрат.Вставить(
				ТекГруппа.НомерГруппыЗатрат,
				ПереработкаНаСторонеКлиентСервер.ПредставлениеГруппыЗатрат(
					ТекГруппа,
					ПереработкаНаСторонеКлиентСервер.ПереченьПолейГруппыЗатратЗаказаПереработчику(ГруппировкаЗатрат)));
		КонецЦикла;
		
		ПереработкаНаСтороне.СообщитьОшибкиЗаполненияГруппЗатрат(Выборка, ПредставлениеГруппЗатрат, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

// Текст запроса распоряжений документа.
// 
// Параметры:
//  ИмяТЧ - Строка - Имя ТЧ
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаТЧРаспоряженияДокумента(ИмяТЧ) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Распоряжения.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	&ПоляВыборки
	|ПОМЕСТИТЬ ИмяТЧ
	|ИЗ
	|	Распоряжения КАК Распоряжения
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ИмяТЧ КАК ТабличнаяЧасть
	|	ПО ТабличнаяЧасть.Ссылка = Распоряжения.Распоряжение
	|
	|ГДЕ
	|	НЕ ТабличнаяЧасть.Отменено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерГруппыЗатрат
	|";
	
	ПоляВыборки = Новый Массив;
	ПоляВыборки.Добавить("ТабличнаяЧасть.НомерСтроки КАК НомерСтроки");
	
	ШаблонПоля = "ТабличнаяЧасть.%1 КАК %2";
	Для Каждого ТекРеквизит Из Метаданные.Документы.ЭтапПроизводства2_2.ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
		ПоляВыборки.Добавить(СтрШаблон(ШаблонПоля, ТекРеквизит.Имя, ТекРеквизит.Имя));
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТЧ", ИмяТЧ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", СтрСоединить(ПоляВыборки, "," + Символы.ПС));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОбновитьРаспоряженияСвязанныеСЗаказом(Отказ)

	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.УстановитьЗначение("ЗаказПереработчику", Ссылка);
	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.ИсточникДанных = Распоряжения;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Распоряжение");
	КонецЕсли;
	
	Попытка
		Блокировка.Заблокировать(); 
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать этапы производства по причине: %Причина%';
								|en = 'Cannot lock production stages. Reason: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		Возврат;
	КонецПопытки;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Распоряжения.Ссылка                          КАК Ссылка,
	|	МАКСИМУМ(Распоряжения.РаспоряжениеИсключено) КАК РаспоряжениеИсключено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЭтапПроизводства2_2.Ссылка КАК Ссылка,
	|		ИСТИНА                     КАК РаспоряжениеИсключено
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|	ГДЕ
	|		ЭтапПроизводства2_2.ЗаказПереработчику = &Ссылка
	|		И НЕ ЭтапПроизводства2_2.Ссылка В (&СписокРаспоряжений)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЭтапПроизводства2_2.Ссылка КАК Ссылка,
	|		ЛОЖЬ                       КАК РаспоряжениеИсключено
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|	ГДЕ
	|		ЭтапПроизводства2_2.Ссылка В (&СписокРаспоряжений)
	|	) КАК Распоряжения
	|
	|СГРУППИРОВАТЬ ПО
	|	Распоряжения.Ссылка
	|";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокРаспоряжений", Распоряжения.ВыгрузитьКолонку("Распоряжение"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеРаспоряжений = Неопределено;
	ДополнительныеСвойства.Свойство("ДанныеРаспоряжений", ДанныеРаспоряжений);
	
	ЕстьКонтрольЗакрытияЗаказа = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПереработчикамБезПолнойОтработки2_5");
	
	Пока Выборка.Следующий() Цикл
	
		РаспоряжениеОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.ЭтапПроизводства2_2
		
		Если Выборка.РаспоряжениеИсключено Тогда
			
			// Распоряжение удалили из заказа
			РаспоряжениеОбъект.ЗаказПереработчику = Неопределено;
			РаспоряжениеОбъект.ПроизводствоНаСтороне2_5 = Ложь;
			
			Если РаспоряжениеОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат
				ИЛИ РаспоряжениеОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
				РаспоряжениеОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению;
				УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(РаспоряжениеОбъект, РаспоряжениеОбъект.Статус);
			КонецЕсли;
			
		Иначе
			
			ДобавитьРаспоряжение = Не РаспоряжениеОбъект.ЗаказПереработчику = Ссылка;
			СтатусДоИзменения = РаспоряжениеОбъект.Статус;
			
			РаспоряжениеОбъект.ЗаказПереработчику = Ссылка;
			РаспоряжениеОбъект.ПроизводствоНаСтороне2_5 = Истина;
			
			Если ДобавитьРаспоряжение
				Или Не ДанныеРаспоряжений = Неопределено Тогда
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НовоеРаспоряжение", ДобавитьРаспоряжение);
				СтруктураПараметров.Вставить("ОтборСтрок", Новый Структура("Ссылка", Выборка.Ссылка));
				СтруктураПараметров.Вставить("ИмяТЧ");
				
				СтруктураПараметров.ИмяТЧ = "ВыходныеИзделия";
				ЗаполнитьКодСтрокиВТабличнойЧастиРаспоряжения(
					РаспоряжениеОбъект,
					ДанныеРаспоряжений,
					ИзделияМаксимальныйКодСтроки,
					СтруктураПараметров);
					
				СтруктураПараметров.ИмяТЧ = "ПобочныеИзделия";
				ЗаполнитьКодСтрокиВТабличнойЧастиРаспоряжения(
					РаспоряжениеОбъект,
					ДанныеРаспоряжений,
					ИзделияМаксимальныйКодСтроки,
					СтруктураПараметров);
					
				СтруктураПараметров.ИмяТЧ = "ОбеспечениеМатериаламиИРаботами";
				ЗаполнитьКодСтрокиВТабличнойЧастиРаспоряжения(
					РаспоряжениеОбъект,
					ДанныеРаспоряжений,
					МатериалыМаксимальныйКодСтроки,
					СтруктураПараметров);
				
			КонецЕсли;
			
			Если Не ДанныеРаспоряжений = Неопределено Тогда
				Документы.ЗаказПереработчику2_5.ПеренестиИзмененияВРаспоряжение(
					РаспоряжениеОбъект,
					ДанныеРаспоряжений);
			КонецЕсли; 
			
			РаспоряжениеОбъект.МаксимальныйКодСтрокиИзделия = ИзделияМаксимальныйКодСтроки;
			РаспоряжениеОбъект.МаксимальныйКодСтрокиОбеспечение = МатериалыМаксимальныйКодСтроки;
			
			Если ЕстьКонтрольЗакрытияЗаказа
				И Статус = Перечисления.СтатусыЗаказовПереработчикам.Закрыт
				И Не РаспоряжениеОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
				РаспоряжениеОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
				УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(РаспоряжениеОбъект, СтатусДоИзменения);
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			
			ИнтерактивноеРедактирование = Документы.ЗаказПереработчику2_5.ИнтерактивноеРедактирование(ЭтотОбъект);
			
			Если (ИнтерактивноеРедактирование
					И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
					Или Не ИнтерактивноеРедактирование)
				И РаспоряжениеОбъект.Проведен Тогда
				Если Не РаспоряжениеОбъект.ПроверитьЗаполнение() Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
				Или ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
					И РаспоряжениеОбъект.Проведен Тогда
				РаспоряжениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				РаспоряжениеОбъект.Записать();
			КонецЕсли;
			
		Исключение
			
			ТекстСообщения =
				НСтр("ru = 'Не удалось записать изменения в этапе %1 по причине:
					|%2';
					|en = 'Cannot save changes for the %1 stage due to:
					|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РаспоряжениеОбъект.Ссылка, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, РаспоряжениеОбъект.Ссылка,,, Отказ);
			
			Возврат;
			
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура УбратьСвязьРаспоряженияСЗаказом(Отказ)

	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.УстановитьЗначение("ЗаказПереработчику", Ссылка);
	
	Попытка
		Блокировка.Заблокировать(); 
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать этапы производства по причине: %Причина%';
								|en = 'Cannot lock production stages. Reason: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		Возврат;
	КонецПопытки;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.ЗаказПереработчику = &Ссылка";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		РаспоряжениеОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.ЭтапПроизводства2_2
		
		РаспоряжениеОбъект.ЗаказПереработчику = Неопределено;
		РаспоряжениеОбъект.ПроизводствоНаСтороне2_5 = Ложь;
		
		СтатусДоИзменения = РаспоряжениеОбъект.Статус;
		Если СтатусДоИзменения = Перечисления.СтатусыЭтаповПроизводства2_2.Начат
			ИЛИ СтатусДоИзменения = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
			РаспоряжениеОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению;
			УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(РаспоряжениеОбъект, СтатусДоИзменения);
		КонецЕсли; 
		
		Если РаспоряжениеОбъект.Проведен Тогда
			РаспоряжениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			РаспоряжениеОбъект.Записать();
		КонецЕсли;
	
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверитьВозможностьСвязиСРаспоряжениями(Отказ)

	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.ИсточникДанных = Распоряжения;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Распоряжение");
		Блокировка.Заблокировать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать этапы производства по причине: %Причина%';
								|en = 'Cannot lock production stages. Reason: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		Возврат;
	КонецПопытки;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Ссылка,
	|	ИСТИНА КАК ВключенВДругойЗаказ,
	|	ЛОЖЬ КАК СобственноеПроизводство,
	|	ЛОЖЬ КАК ВПроцессеОтгрузки,
	|	ЛОЖЬ КАК ВПроцессеОтгрузкиОтменаПроведения
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.Ссылка В(&СписокЭтапов)
	|	И НЕ ЭтапПроизводства2_2.ЗаказПереработчику = &Ссылка
	|	И НЕ ЭтапПроизводства2_2.ЗаказПереработчику = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Ссылка,
	|	ЛОЖЬ КАК ВключенВДругойЗаказ,
	|	ИСТИНА КАК СобственноеПроизводство,
	|	ЛОЖЬ КАК ВПроцессеОтгрузки,
	|	ЛОЖЬ КАК ВПроцессеОтгрузкиОтменаПроведения
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.Ссылка В(&СписокЭтапов)
	|	И НЕ ЭтапПроизводства2_2.ПроизводствоНаСтороне
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МатериалыИРаботы.Ссылка,
	|	ЛОЖЬ КАК ВключенВДругойЗаказ,
	|	ЛОЖЬ КАК СобственноеПроизводство,
	|	ИСТИНА КАК ВПроцессеОтгрузки,
	|	ЛОЖЬ КАК ВПроцессеОтгрузкиОтменаПроведения
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК МатериалыИРаботы
	|ГДЕ
	|	&ПометкаУдаления
	|	И МатериалыИРаботы.Ссылка В(&СписокЭтапов)
	|	И НЕ МатериалыИРаботы.Ссылка.ПометкаУдаления
	|	И МатериалыИРаботы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыИРаботы.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МатериалыИРаботы.Ссылка,
	|	ЛОЖЬ КАК ВключенВДругойЗаказ,
	|	ЛОЖЬ КАК СобственноеПроизводство,
	|	ЛОЖЬ КАК ВПроцессеОтгрузки,
	|	ИСТИНА КАК ВПроцессеОтгрузкиОтменаПроведения
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК МатериалыИРаботы
	|ГДЕ
	|	&ОтменаПроведения
	|	И НЕ &ПометкаУдаления
	|	И МатериалыИРаботы.Ссылка В(&СписокЭтапов)
	|	И НЕ МатериалыИРаботы.Ссылка.ПометкаУдаления
	|	И МатериалыИРаботы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыИРаботы.Ссылка
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокЭтапов", Распоряжения.ВыгрузитьКолонку("Распоряжение"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.УстановитьПараметр("ОтменаПроведения", ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВключенВДругойЗаказ Тогда
			ТекстСообщения = НСтр("ru = '%1 включен в другой заказ переработчику. Не допускается включать один этап в разные заказы переработчику.';
									|en = '%1 is included in another subcontracting purchase order. Cannot include one stage in different subcontracting purchase orders.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка);
		ИначеЕсли Выборка.СобственноеПроизводство Тогда
			ТекстСообщения = НСтр("ru = '%1 относится к собственному производству. Не допускается включать в заказ переработчику этапы собственного производства.';
									|en = '%1 belongs to in-house production. Cannot include in-house production stages in subcontracting purchase order.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка);
		ИначеЕсли Выборка.ВПроцессеОтгрузки Тогда
			ТекстСообщения = НСтр("ru = '%1 находится в процессе отгрузки. Пометка на удаление заказа переработчику не допускается.';
									|en = '%1 is being shipped. Cannot mark ""Subcontracting purchase order"" for deletion.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка);
		ИначеЕсли Выборка.ВПроцессеОтгрузкиОтменаПроведения Тогда
			ТекстСообщения = НСтр("ru = '%1 находится в процессе отгрузки. Отмена проведения заказа переработчику не допускается.';
									|en = '%1 is being shipped. You cannot unpost the subcontracting purchase order.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка);
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,, Отказ); 
		
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьМаксимальныеКодыСтрокПоРаспоряжениям()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(МаксимальныеКодыСтрок.ИзделияМаксимальныйКодСтроки), 0)   КАК ИзделияМаксимальныйКодСтроки,
	|	ЕСТЬNULL(МАКСИМУМ(МаксимальныеКодыСтрок.МатериалыМаксимальныйКодСтроки), 0) КАК МатериалыМаксимальныйКодСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПереработчику.ИзделияМаксимальныйКодСтроки   КАК ИзделияМаксимальныйКодСтроки,
	|		ЗаказыПереработчику.МатериалыМаксимальныйКодСтроки КАК МатериалыМаксимальныйКодСтроки
	|	ИЗ
	|		Документ.ЗаказПереработчику2_5 КАК ЗаказыПереработчику
	|	ГДЕ
	|		ЗаказыПереработчику.Ссылка = &ЗаказПереработчику
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЭтапыПроизводства.МаксимальныйКодСтрокиИзделия     КАК ИзделияМаксимальныйКодСтроки,
	|		ЭтапыПроизводства.МаксимальныйКодСтрокиОбеспечение КАК МатериалыМаксимальныйКодСтроки
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК ЭтапыПроизводства
	|	ГДЕ
	|		ЭтапыПроизводства.Ссылка В (&Распоряжения)
	|	) КАК МаксимальныеКодыСтрок
	|";
	Запрос.УстановитьПараметр("ЗаказПереработчику", Ссылка);
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения.ВыгрузитьКолонку("Распоряжение"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодСтрокиВТабличнойЧастиРаспоряжения(Распоряжение, ДанныеРаспоряжений, МаксимальныйКодСтроки, СтруктураПараметров)
	
	ИмяТЧ = СтруктураПараметров.ИмяТЧ;
	
	КоллекцияСтрокТЧ =
		?(Не ДанныеРаспоряжений = Неопределено,
			ДанныеРаспоряжений[ИмяТЧ].НайтиСтроки(СтруктураПараметров.ОтборСтрок),
			Распоряжение[ИмяТЧ]);
	
	Документы.ЗаказПереработчику2_5.ЗаполнитьКодСтрокиВТабличнойЧасти(
		КоллекцияСтрокТЧ,
		СтруктураПараметров.НовоеРаспоряжение,
		МаксимальныйКодСтроки);
	
КонецПроцедуры	

//-- НЕ УТКА

Функция ТребуетсяОбновитьНазначение()
	
	//++ НЕ УТКА
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		Возврат Ложь;
	КонецЕсли;
	//-- НЕ УТКА
	
	ТребуетсяОбновить = Ложь;
	ТребуетсяПроверитьИзменениеРеквизитов = Ложь;
	
	Для Каждого СтрокаМатериалов Из ОбеспечениеМатериаламиИРаботами Цикл
		Если СтрокаМатериалов.Обособленно Тогда
			Если Не ЗначениеЗаполнено(СтрокаМатериалов.Назначение) Тогда
				ТребуетсяОбновить = Истина;
				Прервать;
			ИначеЕсли Не ТребуетсяПроверитьИзменениеРеквизитов Тогда
				ТребуетсяПроверитьИзменениеРеквизитов = Истина;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаМатериалов.Назначение) Тогда
			ТребуетсяОбновить = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТребуетсяОбновить И Не ЭтоНовый() И ТребуетсяПроверитьИзменениеРеквизитов Тогда
		СоставПроверяемыхРеквизитов = "Организация,Партнер,Договор,ГруппировкаЗатрат,НаправлениеДеятельности,Дата,Проведен";
		РеквизитыДоЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СоставПроверяемыхРеквизитов);
		ТребуетсяОбновить = Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(РеквизитыДоЗаписи, ЭтотОбъект, СоставПроверяемыхРеквизитов);
	КонецЕсли;
	
	Возврат ТребуетсяОбновить;
	
КонецФункции

Процедура ЗаполнитьНазначенияВМатериалах()
	
	Если Не ТребуетсяОбновитьНазначение() Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ЗаказПереработчику2_5.ЗаполнитьНазначенияВМатериалах(ЭтотОбъект);
	
КонецПроцедуры

Функция МаксимальноВозможнаяДатаОтгрузкиМатериалов()
	
	Если ПоступлениеОднойДатой Тогда
		Возврат КонецМесяца(ДатаПоступления);
	КонецЕсли;
	
	// Когда дата производства указывается в табличных частях продукции и возвратных отходов
	// отгрузка всех материалов не может быть больше минимальной даты из максимальных дат производства каждой группировки.
	Результат = Дата(2999, 1, 1, 0, 0, 0);
	МаксимальныеДаты = МаксимальныеДатыПроизводстваГруппЗатрат();
	Для Каждого КлючИЗначение Из МаксимальныеДаты Цикл
		Результат = Мин(КлючИЗначение.Значение, Результат);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция МаксимальныеДатыПроизводстваГруппЗатрат()
	
	Результат = Новый Соответствие;
	
	Для Каждого Строка Из ВыходныеИзделия Цикл
		ДатаГруппыЗатрат = Результат.Получить(Строка.НомерГруппыЗатрат);
		Если ДатаГруппыЗатрат = Неопределено Тогда
			Результат.Вставить(Строка.НомерГруппыЗатрат, КонецМесяца(Строка.ДатаПоступления));
		Иначе
			Результат.Вставить(Строка.НомерГруппыЗатрат, Макс(КонецМесяца(Строка.ДатаПоступления), ДатаГруппыЗатрат));
		КонецЕсли;
	КонецЦикла;
	
	//++ НЕ УТКА
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		
		ДанныеРаспоряжений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Распоряжения.ВыгрузитьКолонку("Распоряжение"), "НомерСледующегоЭтапа");
		
		Для Каждого ТекущиеДанные Из Распоряжения Цикл
			
			ДанныеРаспоряжения = ДанныеРаспоряжений.Получить(ТекущиеДанные.Распоряжение);
			
			Если Не УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(ДанныеРаспоряжения) Тогда
				
				Отбор = Новый Структура("НомерГруппыЗатрат", ТекущиеДанные.НомерГруппыЗатрат);
				Для Каждого Строка Из ПобочныеИзделия.НайтиСтроки(Отбор) Цикл
					
					ДатаГруппыЗатрат = Результат.Получить(Строка.НомерГруппыЗатрат);
					
					Если ДатаГруппыЗатрат = Неопределено Тогда
						Результат.Вставить(Строка.НомерГруппыЗатрат, КонецМесяца(Строка.ДатаПоступления));
					Иначе
						Результат.Вставить(Строка.НомерГруппыЗатрат, Макс(КонецМесяца(Строка.ДатаПоступления), ДатаГруппыЗатрат));
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает сумму неотмененных строк поставки сырья
//
// Возвращаемое значение:
// 	Структура - описание:
// 	* Сумма - Число - Залоговая сумма
// 	* Дата - Дата - Дата отгрузки.
//
Функция ПолучитьЗалоговуюСуммуСДатойОтгрузки()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Сумма КАК Сумма,
	|	Товары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Товары.Отменено КАК Отменено
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.Сумма), 0) КАК Сумма,
	|	ЕСТЬNULL(МИНИМУМ(Товары.ДатаОтгрузки), ДАТАВРЕМЯ(1,1,1)) КАК ДатаОтгрузки
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено");
	
	Запрос.УстановитьПараметр("Товары", ОбеспечениеМатериаламиИРаботами.Выгрузить(,"Номенклатура, Сумма, ДатаОтгрузки, Отменено"));
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Структура;
	Результат.Вставить("Сумма", Выгрузка[0].Сумма);
	Результат.Вставить("ДатаОтгрузки", Выгрузка[0].ДатаОтгрузки);
	
	Возврат Результат;
	
КонецФункции

Функция СуммыДокумента()
	
	Результат = Новый Структура("СуммаНДС, СуммаСНДС", 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Услуги.СуммаСНДС КАК СуммаСНДС
	|ПОМЕСТИТЬ ВтСуммыДокумента
	|ИЗ
	|	&Услуги КАК Услуги
	|ГДЕ
	|	НЕ Услуги.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(СуммыДокумента.СуммаСНДС) КАК СуммаСНДС
	|ИЗ
	|	ВтСуммыДокумента КАК СуммыДокумента
	|";
	Запрос.УстановитьПараметр("Услуги", Услуги.Выгрузить(, "Отменено, СуммаСНДС"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
