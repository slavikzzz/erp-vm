
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	//++ НЕ УТКА
	УстановитьУсловноеОформление();
	//-- НЕ УТКА
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьПриСозданииНаСервере();
	
	//++ НЕ УТКА
	
	ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить("ЗаказПереработчику2_5РабочееМесто", "ПараметрыОтбора");
	Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОтбора);
	КонецЕсли;
	
	// Отработаем открытие формы из формы "Текущие дела"
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Менеджер") Тогда
			ОтборМенеджер = Параметры.СтруктураБыстрогоОтбора.Менеджер;
		КонецЕсли;
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Приоритет") Тогда
			ОтборПриоритет = Параметры.СтруктураБыстрогоОтбора.Приоритет;
		КонецЕсли;
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапросаСписокКОформлению();
	Если ТекстЗапроса <> "" Тогда
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ОсновнаяТаблица = "";
		СвойстваСписка.ДинамическоеСчитываниеДанных = Ложь;
		СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокКОформлению, СвойстваСписка);
		УстановитьПараметрыСпискаКОформлению();
		
	КонецЕсли;
	ПриУстановкеТекстаЗапроса();
	
	УстановитьТекущуюСтраницу();
	
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПереработчикам2_5");
	
	#Область СтандартныеПроцедуры
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	#КонецОбласти

	//-- НЕ УТКА
	
	#Область СтандартныеПроцедуры
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокКоманднаяПанель);
	// Конец ИнтеграцияС1СДокументооборотом

	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложения.ПриСозданииПодсказокФормы(ЭтотОбъект, Элементы.ПодсказкиБизнесСеть);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//++ НЕ УТКА
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	//-- НЕ УТКА
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложенияКлиент.ОбновитьПодсказкуФормы(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	//++ НЕ УТКА
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ЗакрытиеЗаказов" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ИмяСобытия = "Запись_ЗаказПереработчику2_5"
		Или ИмяСобытия = "Запись_ЭтапыПроизводства"
		Тогда
		ПриЗаписиРаспоряжений();
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Менеджер",
		ОтборМенеджер,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборМенеджер));
		
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриоритетПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Приоритет",
		ОтборПриоритет,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборПриоритет));
		
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженийПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПереработчикПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЖурналПродажиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ОткрытьЖурнал(ПараметрыЖурнала());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ИменаДокументов = Новый Массив();
	ИменаДокументов.Добавить("Документ.ЗаказПереработчику2_5");
	//++ НЕ УТКА
	ИменаДокументов.Добавить("Документ.ЭтапПроизводства2_2");
	//-- НЕ УТКА
	
	ОбеспечениеВДокументахКлиент.СписокПриИзменении(ЭтотОбъект, СтрСоединить(ИменаДокументов, ","));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКОформлению

&НаКлиенте
Процедура СписокКОформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокКОформлению.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные.Распоряжение); 
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтгрузитьЗаказ(Команда)
	
	ОчиститьСообщения();
	
	ВсеЗаказы = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	РезультатВыполненияДействий = ВыполнитьДействиеВСпискеЗаказов(ВсеЗаказы, УникальныйИдентификатор);
	
	Если ОбеспечениеВДокументахКлиент.РезультатВыполненияДействийНуженВопрос(РезультатВыполненияДействий) Тогда
		
		КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ";
		ПараметрыПроцедуры = Новый Структура();
		ПараметрыПроцедуры.Вставить("Заказы", ВсеЗаказы);
		ПараметрыПроцедуры.Вставить("КодДействия", КодДействия);
		ПараметрыПроцедуры.Вставить("Форма", ЭтотОбъект);
		ПараметрыПроцедуры.Вставить("ПараметрыВстраивания", Неопределено);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаВСпискеЗаказов", ЭтотОбъект, ПараметрыПроцедуры);
		
		ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойДляСпискаЗаказов(
			ВсеЗаказы,
			КодДействия,
			РезультатВыполненияДействий,
			ЭтотОбъект,
			ОписаниеОповещения);
			
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ДополнительныеПараметры = Новый Структура("Форма,Заказы",
			ЭтотОбъект, ВсеЗаказы);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполненияДействий,
			Новый ОписаниеОповещения("ПослеВопросаВСпискеЗаказовЗавершение", ОбеспечениеВДокументахКлиент, ДополнительныеПараметры),
			ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезервироватьЗаказ(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЗаказПереработчику2_5.ПустаяСсылка"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КОбеспечениюЗаказ(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЗаказПереработчику2_5.ПустаяСсылка"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РезервироватьПоМереПоступленияЗаказ(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬПОМЕРЕПОСТУПЛЕНИЯ",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЗаказПереработчику2_5.ПустаяСсылка"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НеОбеспечиватьЗаказ(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЗаказПереработчику2_5.ПустаяСсылка"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданРанее(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_ПЕРЕДАНРАНЕЕ",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЗаказПереработчику2_5.ПустаяСсылка"),
		ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьСтатусНеСогласован(Команда)
	
	//++ НЕ УТКА
	
	УстановитьСтатусЗаказа("НеСогласован", НСтр("ru = 'Не согласован';
												|en = 'Not approved'"));
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКИсполнению(Команда)
	
	//++ НЕ УТКА
	
	УстановитьСтатусЗаказа("КИсполнению", НСтр("ru = 'К исполнению';
												|en = 'Accept'"));
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрыт(Команда)
	
	//++ НЕ УТКА
	
	ВыделенныеСсылки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗаказов = Новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения(ВыделенныеСсылки);
	
	СтруктураЗакрытия = Новый Структура;
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказов);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказПереработчику(Команда)
	
	//++ НЕ УТКА
	ИдентификаторыСтрок = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокКОформлению);
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СписокСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ДанныеСтроки = Элементы.СписокКОформлению.ДанныеСтроки(ИдентификаторСтроки);
		СписокСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ДанныеЗаполнения = ПереработкаНаСторонеКлиент.ДанныеДляФормированияЗаказовПереработчикам2_5(СписокСтрок);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
		ОткрытьФорму("Документ.ЗаказПереработчику2_5.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли; 
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#Область ПодключаемыеКоманды

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

// ЭлектронноеВзаимодействие.ТорговыеПредложения
&НаКлиенте
Процедура Подключаемый_ПодсказкиБизнесСетьНажатие(Команда)
	
	ТорговыеПредложенияКлиент.ОткрытьФормуПодсказок(ЭтаФорма);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам()
	ОбеспечениеВДокументахКлиент.ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВидимостьДоступность

&НаСервере
Процедура УстановитьВидимостьПриСозданииНаСервере()
	
	ЕстьДоступНаИзменение = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказПереработчику2_5);
	ПравоДоступаДобавление = ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПереработчику2_5);
	ИспользоватьРасширенноеОбеспечениеПотребностей = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	
	ЭлементыФормыНевидимые = Новый Массив;
	ЭлементыФормыПоПравам  = Новый Массив;
	ЭлементыФормыПоПравам.Добавить("СписокСкопировать");
	ЭлементыФормыПоПравам.Добавить("СписокКонтекстноеМенюСкопировать");
	ЭлементыФормыПоПравам.Добавить("СтраницаРаспоряженияНаОформление");
	
	Если ИспользоватьРасширенноеОбеспечениеПотребностей Тогда
		
		ЭлементыФормыПоПравам.Добавить("СписокГруппаСоздатьНовый");
		ЭлементыФормыПоПравам.Добавить("ФормированиеЗаказовПереработчикамПоПотребностям");
		
		ЭлементыФормыНевидимые.Добавить("СписокСоздать");
		ЭлементыФормыНевидимые.Добавить("СписокКонтекстноеМенюСоздать");
		
	Иначе
		
		ЭлементыФормыПоПравам.Добавить("СписокСоздать");
		ЭлементыФормыПоПравам.Добавить("СписокКонтекстноеМенюСоздать");
		
		ЭлементыФормыНевидимые.Добавить("СписокГруппаСоздатьНовый");
		ЭлементыФормыНевидимые.Добавить("ФормированиеЗаказовПереработчикамПоПотребностям");
		
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из ЭлементыФормыНевидимые Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ТекЭлемент, "Видимость", Ложь);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из ЭлементыФормыПоПравам Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ТекЭлемент,
			"Видимость",
			ПравоДоступаДобавление);
	КонецЦикла;
	
	Элементы.Страницы.ОтображениеСтраниц =
		?(ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство")
			И ПравоДоступаДобавление,
		ОтображениеСтраницФормы.ЗакладкиСверху,
		ОтображениеСтраницФормы.Нет);
	
	Элементы.СписокОтгрузитьЗаказ.Видимость = ЕстьДоступНаИзменение;
	Элементы.СписокРезервироватьЗаказ.Видимость = ЕстьДоступНаИзменение;
	Элементы.СписокКОбеспечениюЗаказ.Видимость = ЕстьДоступНаИзменение;
	Элементы.СписокРезервироватьПоМереПоступленияЗаказ.Видимость = ЕстьДоступНаИзменение;
	Элементы.СписокНеОбеспечиватьЗаказ.Видимость = ЕстьДоступНаИзменение;
	Элементы.СписокПереданРанее.Видимость = ЕстьДоступНаИзменение;
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПереработчику2_5.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Элементы.Список.ТекущаяСтрока = Ссылка;
		ПоказатьЗначение(,МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаДействий

&НаКлиенте
Процедура ВыполнитьДействиеВСпискеЗаказовРазныхТиповЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
		
	Иначе
		
		ЗаказыДляПроверкиЗаданияРаспределенияЗапасов.ЗагрузитьЗначения(ДополнительныеПараметры.Заказы);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам", 1, Истина);
		РезультатВыполненияДействий = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ОбеспечениеВДокументахКлиент.СообщитьОРезультатахВыполненияДействийВСпискеЗаказов(РезультатВыполненияДействий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьДействиеВСпискеЗаказов(ВсеЗаказы, УникальныйИдентификатор)
	
	ПараметрыВстраивания = Документы.ЗаказПереработчику2_5.ДоступныеОстаткиПараметрыВстраивания();
	НуженВопрос = ОбеспечениеВДокументахСервер.НуженВопросОбОтгрузкеОднойДатой(ПараметрыВстраивания, ВсеЗаказы);
	
	ПараметрыЗаполнения = Неопределено;
	
	Результат = Новый Структура();
	Результат.Вставить("НуженВопрос", НуженВопрос);
	ДатаОтгрузкиНовыхСтрок = НачалоДня(ТекущаяДатаСеанса());
	Результат.Вставить("ДатаОтгрузкиНовыхСтрок", ДатаОтгрузкиНовыхСтрок);
	
	Если Не Результат.НуженВопрос Тогда
		
		ПараметрыПроцедуры = Новый Структура();
		ПараметрыПроцедуры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		ПараметрыПроцедуры.Вставить("Заказы", ВсеЗаказы);
		ПараметрыПроцедуры.Вставить("КодДействия", "ДЕЙСТВИЕ_ОТГРУЗИТЬ");
		ПараметрыПроцедуры.Вставить("ПараметрыВстраивания", Неопределено);
		Результат = ВыполнитьДействиеДляЗаказовПослеВопросаФоновымЗаданием(ПараметрыПроцедуры, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьДействиеДляЗаказовПослеВопросаФоновымЗаданием(ПараметрыПроцедуры, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение действия обеспечения в списке заказов';
															|en = 'Executing a provisioning action on the order list'");
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"Документы.ЗаказПереработчику2_5.ВыполнитьДействиеДляЗаказовПослеВопроса",
		ПараметрыПроцедуры);
	
КонецФункции

&НаКлиенте
Процедура ПослеВопросаВСпискеЗаказов(Ответ, ПараметрыДляКопирования) Экспорт
	
	ПараметрыПроцедуры = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыДляКопирования);
	Форма = ПараметрыДляКопирования.Форма;
	ПараметрыПроцедуры.Удалить("Форма");
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("СнятьФлагОтгружатьОднойДатой", Ответ = "КодВозвратаДиалога_Да");
	ПараметрыЗаполнения.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой", Ответ = "КодВозвратаДиалога_Нет");
	ПараметрыПроцедуры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	РезультатВыполненияДействий = ВыполнитьДействиеДляЗаказовПослеВопросаФоновымЗаданием(
		ПараметрыПроцедуры, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ДополнительныеПараметры = Новый Структура("Форма,Заказы",
		Форма, ПараметрыПроцедуры.Заказы);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполненияДействий,
		Новый ОписаниеОповещения("ПослеВопросаВСпискеЗаказовЗавершение", ОбеспечениеВДокументахКлиент, ДополнительныеПараметры),
		ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

//++ НЕ УТКА

&НаСервере
Процедура УстановитьУсловноеОформление()

	Документы.ЗаказПереработчику2_5.УстановитьУсловноеОформлениеСписка(Список);
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, 
		"СписокКОформлениюХарактеристика",
		"СписокКОформлению.ХарактеристикиИспользуются");
																			 
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "Список.Дата", Элементы.СписокДата.Имя);
		
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "СписокКОформлению.ДатаРаспоряжения", Элементы.СписокКОформлениюДатаРаспоряжения.Имя);
	
	// Переработчик не указан
	#Область СписокКОформлению_Партнер
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКОформлениюПартнер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКОформлению.Партнер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
	// Дата начала просрочена
	#Область СписокКОформлению_Начало
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКОформлениюНачало.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКОформлению.ДатаЗапускаПросрочена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтборов()
	
	ПриУстановкеТекстаЗапроса();
	УстановитьПараметрыСпискаКОформлению();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиРаспоряжений()
	
	УстановитьОтборыСпискаКОформлению();
	УстановитьПараметрыСпискаКОформлению();
	Элементы.СписокКОформлению.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПриУстановкеТекстаЗапроса()
	
	СохранитьПараметрыОтбора();
	УстановитьОтборыСписка();
	УстановитьОтборыСпискаКОформлению();
	
КонецПроцедуры

&НаСервере
Функция ЕстьОтборПоРаспоряжению()
	
	ЕстьОтборПоРаспоряжению = Ложь;
	
	Для каждого ЭлементКоллекции Из СписокРаспоряжений Цикл
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			ЕстьОтборПоРаспоряжению = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОтборПоРаспоряжению;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаСписокКОформлению()
	
	ТекстЗапроса = "";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		
		ТекстыЗапросов = Новый Массив();
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПереработкаПоГрафикуПереопределяемый.Организация КАК Организация,
			|	ПереработкаПоГрафикуПереопределяемый.Ссылка КАК Распоряжение,
			|	ПереработкаПоГрафикуПереопределяемый.Распоряжение КАК ЗаказНаПроизводство,
			|	ТИПЗНАЧЕНИЯ(ПереработкаПоГрафикуПереопределяемый.Ссылка) КАК ТипРаспоряжения,
			|	ПереработкаПоГрафикуПереопределяемый.Номер КАК НомерРаспоряжения,
			|	ПереработкаПоГрафикуПереопределяемый.Дата КАК ДатаРаспоряжения,
			|	ПереработкаПоГрафикуПереопределяемый.Подразделение КАК Подразделение,
			|	ПереработкаПоГрафикуПереопределяемый.Этап.Партнер КАК Партнер,
			|	ПереработкаПоГрафикуПереопределяемый.ВыпускПодДеятельность КАК ЗакупкаПодДеятельность,
			|	ВЫБОР
			|		КОГДА &ПланируетсяГрафикПроизводства
			|				И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
			|			ТОГДА ГрафикПроизводства.НачалоЭтапа
			|		КОГДА НормативныйГрафикСтруктурыЗаказа.Начало ЕСТЬ НЕ NULL
			|			ТОГДА НормативныйГрафикСтруктурыЗаказа.Начало
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ПереработкаПоГрафикуПереопределяемый.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0))
			|	КОНЕЦ КАК Начало,
			|	ВЫБОР
			|		КОГДА &ПланируетсяГрафикПроизводства
			|				И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
			|			ТОГДА ГрафикПроизводства.НачалоЭтапа < &ТекущаяДата
			|		КОГДА НормативныйГрафикСтруктурыЗаказа.Начало ЕСТЬ НЕ NULL
			|			ТОГДА НормативныйГрафикСтруктурыЗаказа.Начало < &ТекущаяДата
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ПереработкаПоГрафикуПереопределяемый.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0)) < &ТекущаяДата
			|	КОНЕЦ ДатаЗапускаПросрочена,
			|	ПереработкаПоГрафикуПереопределяемый.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ПереработкаПоГрафикуПереопределяемый.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
			|	ПереработкаПоГрафикуПереопределяемый.ДинамическаяСтруктура КАК ДинамическаяСтруктура
			|ПОМЕСТИТЬ ВТРаспоряжения
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ПереработкаПоГрафикуПереопределяемый
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
			|		ПО (ГрафикПроизводства.ЭтапПроизводства = ПереработкаПоГрафикуПереопределяемый.Ссылка)
			|			И (ГрафикПроизводства.СтатусГрафика = &СтатусРабочийГрафик)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикПроизводства
			|		ПО ПереработкаПоГрафикуПереопределяемый.Ссылка = НормативныйГрафикПроизводства.ЭтапПроизводства
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК НормативныйГрафикСтруктурыЗаказа
			|		ПО ПереработкаПоГрафикуПереопределяемый.Ссылка = НормативныйГрафикСтруктурыЗаказа.Этап
			|ГДЕ
			|	ПереработкаПоГрафикуПереопределяемый.Проведен
			|	И ПереработкаПоГрафикуПереопределяемый.ПроизводствоНаСтороне
			|	И НЕ ПереработкаПоГрафикуПереопределяемый.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован))
			|	И ПереработкаПоГрафикуПереопределяемый.ЗаказПереработчику = НЕОПРЕДЕЛЕНО
			|	И (&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ ВЫБОР
			|					КОГДА &ПланируетсяГрафикПроизводства
			|							И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
			|						ТОГДА ГрафикПроизводства.НачалоЭтапа
			|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ПереработкаПоГрафикуПереопределяемый.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0))
			|				КОНЕЦ >= &ДатаНачала)
			|	И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ ВЫБОР
			|					КОГДА &ПланируетсяГрафикПроизводства
			|							И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
			|						ТОГДА ГрафикПроизводства.НачалоЭтапа
			|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ПереработкаПоГрафикуПереопределяемый.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0))
			|				КОНЕЦ <= &ДатаОкончания)
			|";
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		ИмяРегистраДанныеОНоменклатуреВПроизводстве = "РегистрНакопления.ЗапасыИПотребности";
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	НоменклатураВПроизводстве.Регистратор КАК Этап,
			|	МИНИМУМ(НоменклатураВПроизводстве.НомерСтроки) КАК НомерСтроки
			|ПОМЕСТИТЬ ВТНоменклатураВПроизводствеНомераСтрок
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности КАК НоменклатураВПроизводстве
			|ГДЕ
			|	НоменклатураВПроизводстве.Регистратор В
			|			(ВЫБРАТЬ
			|				ВТРаспоряжения.Распоряжение КАК Регистратор
			|			ИЗ
			|				ВТРаспоряжения)
			|	И НоменклатураВПроизводстве.Активность 
			|		И (НоменклатураВПроизводстве.Поступит > 0 Или НоменклатураВПроизводстве.Заказано > 0)
			|
			|СГРУППИРОВАТЬ ПО
			|	НоменклатураВПроизводстве.Регистратор
			|"; 
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВТРаспоряжения.Организация КАК Организация,
			|	ВТРаспоряжения.Распоряжение КАК Распоряжение,
			|	ВТРаспоряжения.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
			|	ВТРаспоряжения.ТипРаспоряжения КАК ТипРаспоряжения,
			|	ВТРаспоряжения.НомерРаспоряжения КАК НомерРаспоряжения,
			|	ВТРаспоряжения.ДатаРаспоряжения КАК ДатаРаспоряжения,
			|	ВТРаспоряжения.Подразделение КАК Подразделение,
			|	ВТРаспоряжения.Партнер КАК Партнер,
			|	ВТРаспоряжения.ЗакупкаПодДеятельность КАК ЗакупкаПодДеятельность,
			|	НоменклатураВПроизводстве.Номенклатура КАК Номенклатура,
			|	НоменклатураВПроизводстве.Характеристика КАК Характеристика,
			|	НоменклатураВПроизводстве.Склад КАК Склад,
			|	ВТРаспоряжения.Начало КАК Начало,
			|	ВЫБОР
			|		КОГДА НоменклатураВПроизводстве.Номенклатура.ИспользованиеХарактеристик В
			|			(
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
			|			)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ХарактеристикиИспользуются,
			|	ВТРаспоряжения.ДатаЗапускаПросрочена КАК ДатаЗапускаПросрочена,
			|	ВТРаспоряжения.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ВТРаспоряжения.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
			|	ВТРаспоряжения.ДинамическаяСтруктура КАК ДинамическаяСтруктура
			|ИЗ
			|	ВТРаспоряжения КАК ВТРаспоряжения
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНоменклатураВПроизводствеНомераСтрок КАК ВТНоменклатураВПроизводствеНомераСтрок
			|		ПО ВТРаспоряжения.Распоряжение = ВТНоменклатураВПроизводствеНомераСтрок.Этап
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ИмяРегистраДанныеОНоменклатуреВПроизводстве КАК НоменклатураВПроизводстве
			|		ПО ВТНоменклатураВПроизводствеНомераСтрок.Этап = НоменклатураВПроизводстве.Регистратор
			|			И ВТНоменклатураВПроизводствеНомераСтрок.НомерСтроки = НоменклатураВПроизводстве.НомерСтроки
			|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяРегистраДанныеОНоменклатуреВПроизводстве", ИмяРегистраДанныеОНоменклатуреВПроизводстве);
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборыСписка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Подразделение",  ОтборПодразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборПодразделение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Приоритет", ОтборПриоритет, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборПриоритет));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Менеджер", ОтборМенеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборМенеджер));
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыСпискаКОформлению()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокКОформлению,
		"Партнер",
		ОтборПереработчик,,, 
		ЗначениеЗаполнено(ОтборПереработчик));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокКОформлению,
		"Подразделение",
		ОтборПодразделение,,,
		ЗначениеЗаполнено(ОтборПодразделение));
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаКОформлению()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"СписокРаспоряжений",
		СписокРаспоряжений.ВыгрузитьЗначения());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ТекущаяДата",
		ТекущаяДатаСеанса());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ДатаНачала",
		ОтборПериод.ДатаНачала);
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ДатаОкончания",
		ОтборПериод.ДатаОкончания);
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ОтборПоРаспоряжению",
		ЕстьОтборПоРаспоряжению());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"СтатусРабочийГрафик",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ПланируетсяГрафикПроизводства",
		УправлениеПроизводством.ИспользуетсяГрафикПроизводства());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказа(НовыйСтатус, ИмяСтатуса)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке заказов будет установлен статус ""%ИмяСтатуса%"". Продолжить?';
						|en = 'Status ""%ИмяСтатуса%"" will be set for the orders selected in the list. Continue?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяСтатуса%", ИмяСтатуса);
	ДопПараметры = Новый Структура("ВыделенныеСтроки, ИмяСтатуса, НовыйСтатус", ВыделенныеСтроки, ИмяСтатуса, НовыйСтатус);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусЗаказаЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ИмяСтатуса = ДополнительныеПараметры.ИмяСтатуса;
    НовыйСтатус = ДополнительныеПараметры.НовыйСтатус;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, НовыйСтатус);
    
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
		    Элементы.Список,
		    КоличествоОбработанных,
		    ВыделенныеСтроки.Количество(),
		    ИмяСтатуса);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтбора()

	ПараметрыОтбора = Новый Структура("ОтборПереработчик,ОтборМенеджер,ОтборПериод,ОтборПодразделение,ОтборПриоритет");

	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтаФорма);
	ХранилищеНастроекДанныхФорм.Сохранить("ЗаказПереработчику2_5РабочееМесто", "ПараметрыОтбора", ПараметрыОтбора);

КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Функция ПараметрыЖурнала()
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Подразделение",	ОтборПодразделение);
	СтруктураБыстрогоОтбора.Вставить("Менеджер",		ОтборМенеджер);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("СтруктураБыстрогоОтбора",	СтруктураБыстрогоОтбора);
	ПараметрыЖурнала.Вставить("ИмяРабочегоМеста",			"ЖурналДокументовПередачиВПереработку2_5");
	ПараметрыЖурнала.Вставить("КлючНазначенияФормы",		"ДокументыПередачиВПереработку");
	ПараметрыЖурнала.Вставить("СинонимЖурнала",				НСтр("ru = 'Документы передачи в переработку';
																	|en = 'External subcontracting — All documents'"));
	
	Возврат ПараметрыЖурнала;
	
КонецФункции

#КонецОбласти

#КонецОбласти
