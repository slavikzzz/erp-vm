///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(ДокументОснование)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(ДокументОснование)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "");
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СЭДО

Функция НайтиПоИдентификаторуСообщения(Страхователь, ИдентификаторСообщения, РезультатБРО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистрация.Ссылка КАК Ссылка,
	|	Регистрация.Страхователь КАК Страхователь,
	|	Регистрация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Регистрация.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.РегистрацияСведенийОЗастрахованномЛицеФСС КАК Регистрация
	|ГДЕ
	|	Регистрация.ДоставкаИдентификатор = &ИдентификаторСообщения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрация.Ссылка,
	|	Регистрация.Страхователь,
	|	Регистрация.ГоловнаяОрганизация,
	|	Регистрация.ДокументОснование
	|ИЗ
	|	Документ.РегистрацияСведенийОЗастрахованномЛицеФСС КАК Регистрация
	|ГДЕ
	|	Регистрация.РегистрацияИдентификатор = &ИдентификаторСообщения";
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Таблица = Запрос.Выполнить().Выгрузить();
	Найденные = Таблица.Скопировать(Новый Структура("Страхователь", Страхователь));
	Если Найденные.Количество() = 0 Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
		Найденные = Таблица.Скопировать(Новый Структура("ГоловнаяОрганизация", ГоловнаяОрганизация));
		Если Найденные.Количество() = 0 Тогда
			Найденные = Таблица;
		КонецЕсли;
	КонецЕсли;
	Если Найденные.Количество() = 0 Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'По страхователю ""%1"" не найдены %2 с идентификатором сообщения ""%3""';
				|en = 'No %2 with message ID ""%3"" were found for insurant ""%1""'"),
			Страхователь,
			Метаданные.Документы.РегистрацияСведенийОЗастрахованномЛицеФСС.ПредставлениеСписка,
			ИдентификаторСообщения);
		СЭДОФСС.ОшибкаОбработки(РезультатБРО, ТекстОшибки);
	КонецЕсли;
	Возврат Найденные;
КонецФункции

// Загружает ошибку логического контроля регистрации сведений о застрахованном лице.
Процедура ЗагрузитьОшибкуСообщения86(Страхователь, ИдентификаторСообщения, ТекстОшибки, Результат) Экспорт
	ТекстОшибки = СокрЛП(ТекстОшибки);
	Таблица = НайтиПоИдентификаторуСообщения(Страхователь, ИдентификаторСообщения, Результат);
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Объект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		Если СтрНайти(Объект.ОшибкиЛогическогоКонтроля, ТекстОшибки) = 0 Тогда
			Если ПустаяСтрока(Объект.ОшибкиЛогическогоКонтроля) Тогда
				Объект.ОшибкиЛогическогоКонтроля = ТекстОшибки;
			Иначе
				Объект.ОшибкиЛогическогоКонтроля = Объект.ОшибкиЛогическогоКонтроля + Символы.ПС + Символы.ПС + ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		Объект.ЕстьОшибкиЛогическогоКонтроля = Истина;
		СЭДОФСС.ЗаписатьДокумент(Объект, Истина, "БЗК", РежимЗаписиДокумента.ОтменаПроведения);
		// Отметка для БРО и других потребителей что сообщение обработано.
		Результат.Обработано = Истина;
	КонецЦикла;
КонецПроцедуры

// Загружает результат регистрации сведений о застрахованном лице в базу данных.
Процедура ЗагрузитьСообщение87(Страхователь, ИдентификаторСообщения, ТекстXML, Результат, Кэш) Экспорт
	// Примера нет, ожидаемые поля: snils, status(enumeration), protocol[item[mnemonic,level,text,description]].
	// Поиск корневого узла.
	ОбъектXDTO = ОбъектXDTOПоСНИЛС(ТекстXML, Результат, ИдентификаторСообщения);
	Если ОбъектXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Чтение реквизитов.
	ДатаСообщения   = СЭДОФСС.ДатаСообщения(ИдентификаторСообщения, Кэш);
	СНИЛС           = СЭДОФСС.СНИЛСИзXML(ОбщегоНазначенияБЗК.ЗначениеСвойства(ОбъектXDTO, "snils"));
	Статус          = СериализацияБЗК.СтроковыйРеквизитОбъекта(ОбъектXDTO, "status");
	Протокол        = СериализацияБЗК.СписокXDTO(ОбъектXDTO, "protocol.item");
	ПредставлениеПротокола = ПредставлениеПротокола(Протокол);
	СведенияОСтатусе       = СведенияОСтатусеРегистрации(Статус);
	
	Если ЗначениеЗаполнено(Статус) И СведенияОСтатусе.Расшифровка = "" Тогда
		Текст = СтрШаблон(НСтр("ru = 'Неизвестный статус: ""%1"".';
								|en = 'Unknown status: ""%1"".'"), Статус);
		ПредставлениеПротокола = Текст + Символы.ПС + ПредставлениеПротокола;
	КонецЕсли;
	
	ДоставкаИдентификатор = СериализацияБЗК.СтроковыйРеквизитОбъекта(ОбъектXDTO, "responseOn");
	
	// Поиск и создание документа.
	ТекстОшибки = "";
	Объект = СоздатьДокументПоСообщению(СНИЛС, Страхователь, ТекстОшибки, ДоставкаИдентификатор, ДатаСообщения, "Регистрация", ИдентификаторСообщения);
	Если Объект = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			СЭДОФСС.ОшибкаОбработки(Результат, ТекстОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РегистрацияСтатус) Тогда
		СведенияОСтатусеОбъекта = СведенияОСтатусеРегистрации(Объект.РегистрацияСтатус);
		Если СведенияОСтатусе.Приоритет < СведенияОСтатусеОбъекта.Приоритет Тогда
			Возврат; // Неактуальный (старый) статус.
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение документа.
	Объект.Зарегистрирован          = СведенияОСтатусе.Зарегистрирован;
	Объект.РегистрацияДата          = ДатаСообщения;
	Объект.РегистрацияСтатус        = Статус;
	Объект.РегистрацияПротокол      = ПредставлениеПротокола;
	Объект.РегистрацияИдентификатор = ИдентификаторСообщения;
	Если Объект.Зарегистрирован Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	СЭДОФСС.ЗаписатьДокумент(Объект, Истина, "БЗК", РежимЗаписи);
	
	Результат.Обработано = Истина;
КонецПроцедуры

// Находит корневой узел по имени вложенного узла "snils".
Функция ОбъектXDTOПоСНИЛС(ТекстXML, Результат, ИдентификаторСообщения)
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	ЭлементDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'snils']/..");
	Если ЭлементDOM = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуПоискаУзла(Результат, "snils");
		Возврат Неопределено;
	КонецЕсли;
	ФрагментXML = СериализацияБЗК.ОбъектDOMВСтрокуXML(ЭлементDOM);
	ОбъектXDTO  = СериализацияБЗК.ОбъектXDTOИзСтрокиXML(ФрагментXML);
	Возврат ОбъектXDTO;
КонецФункции

Функция ПредставлениеПротокола(Протокол)
	// Для сообщения 87 ожидаемые поля: mnemonic,level,text,description.
	// Для сообщения 88 ожидаемые поля: code,message,description.
	Если Протокол = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	МассивСтрок = Новый Массив;
	Для Каждого ЗаписьПротокола Из Протокол Цикл
		Тип         = СериализацияБЗК.СтроковыйРеквизитОбъекта(ЗаписьПротокола, "mnemonic");
		Код         = СериализацияБЗК.СтроковыйРеквизитОбъекта(ЗаписьПротокола, "code");
		УровеньАнгл = СериализацияБЗК.СтроковыйРеквизитОбъекта(ЗаписьПротокола, "level");
		Текст       = СериализацияБЗК.СтроковыйРеквизитОбъекта(ЗаписьПротокола, "text");
		Сообщение   = СериализацияБЗК.СтроковыйРеквизитОбъекта(ЗаписьПротокола, "message");
		Подробности = СериализацияБЗК.СтроковыйРеквизитОбъекта(ЗаписьПротокола, "description");
		// Все данные будут записываться в переменную Текст.
		Если ЗначениеЗаполнено(Текст) Тогда
			Массив = СтрРазделить(Текст, Символы.ПС + Символы.ВК, Ложь);
			Текст = СтрСоединить(Массив, Символы.ПС + "  ");
		КонецЕсли;
		Если ЗначениеЗаполнено(Сообщение) Тогда
			Массив = СтрРазделить(Сообщение, Символы.ПС + Символы.ВК, Ложь);
			Сообщение = СтрСоединить(Массив, Символы.ПС + "  ");
			Текст = ?(ЗначениеЗаполнено(Текст), Текст + Символы.ПС + "  " + Сообщение, Сообщение);
		КонецЕсли;
		Если ЗначениеЗаполнено(Подробности) Тогда
			Массив = СтрРазделить(Подробности, Символы.ПС + Символы.ВК, Ложь);
			Подробности = СтрСоединить(Массив, Символы.ПС + "    ");
			Текст = ?(ЗначениеЗаполнено(Текст), Текст + Символы.ПС + "    " + Подробности, Подробности);
		КонецЕсли;
		Если ЗначениеЗаполнено(Тип) Тогда
			Текст = СокрП(Тип + ": " + Текст);
		КонецЕсли;
		Если ЗначениеЗаполнено(Код) Тогда
			Текст = СокрП(Код + ": " + Текст);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Текст) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(УровеньАнгл) Тогда
			Если СтрСравнить(УровеньАнгл, "INFO") = 0 Тогда
				Уровень = Строка(УровеньЖурналаРегистрации.Информация);
			ИначеЕсли СтрСравнить(УровеньАнгл, "WARN") = 0 Тогда
				Уровень = Строка(УровеньЖурналаРегистрации.Предупреждение);
			ИначеЕсли СтрСравнить(УровеньАнгл, "ERR") = 0 Тогда
				Уровень = Строка(УровеньЖурналаРегистрации.Ошибка);
			Иначе
				Уровень = УровеньАнгл;
			КонецЕсли;
			Текст = "[" + Уровень + "] " + Текст;
		КонецЕсли;
		МассивСтрок.Добавить(Текст);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции

Функция СведенияОСтатусеРегистрации(Статус)
	Результат = Новый Структура("Приоритет, Зарегистрирован, Расшифровка");
	
	СтатусВРег = ВРег(СокрЛП(Статус));
	
	// Статусы из актуальной спецификации.
	Если СтатусВРег = "RECEIVED" Тогда
		Результат.Приоритет       = 1;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = НСтр("ru = 'Началась регистрация карточки застрахованного лица';
										|en = 'Insured person card registration has started'");
		
	ИначеЕсли СтатусВРег = "ERROR" Тогда
		Результат.Приоритет       = 2;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = НСтр("ru = 'Регистрация отклонена, выявлены ошибки не позволяющие зарегистрировать карточку застрахованного лица';
										|en = 'Cannot register the insured person card due to detected errors'");
		
	ИначеЕсли СтатусВРег = "PROCESSED" Тогда
		Результат.Приоритет       = 3;
		Результат.Зарегистрирован = Истина;
		Результат.Расшифровка     = НСтр("ru = 'Карточка застрахованного лица успешно зарегистрирована';
										|en = 'Insured person card is registered'");
	
	// Статусы из первых версий спецификации.
	ИначеЕсли СтатусВРег = "INVALIDATE" Тогда
		Результат.Приоритет       = 2;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = НСтр("ru = 'Карточка застрахованного лица не актуальна';
										|en = 'Insured person card is not relevant'");
		
	ИначеЕсли СтатусВРег = "REGISTRED" Тогда
		Результат.Приоритет       = 3;
		Результат.Зарегистрирован = Истина;
		Результат.Расшифровка     = НСтр("ru = 'Карточка застрахованного лица принята';
										|en = 'Insured person card is accepted'");
		
	Иначе
		Результат.Приоритет       = 0;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = "";
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция СоздатьДокументПоСообщению(СНИЛС, Страхователь, ТекстОшибки, ДоставкаИдентификатор, ДатаСообщения, ПрефиксПоля, Идентификатор)
	// Проверка СНИЛС.
	Если Не ЗначениеЗаполнено(СНИЛС) Тогда
		ТекстОшибки = НСтр("ru = 'В xml-документе пустой узел ""snils"".';
							|en = 'The empty ""snils"" node is in the XML document.'");
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск документа по идентификатору или физическому лицу.
	Объект = Неопределено;
	Ссылка = НайтиПоРеквизиту(ПрефиксПоля + "Идентификатор", Идентификатор);
	Если Не ЗначениеЗаполнено(Ссылка) И ЗначениеЗаполнено(ДоставкаИдентификатор) Тогда
		Ссылка = НайтиПоРеквизиту("ДоставкаИдентификатор", ДоставкаИдентификатор);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		// Поиск последней регистрации по данным регистра сведени.
		Регистр = СведенияОРегистрацииИзРегистра(СНИЛС, Страхователь);
		Если ЗначениеЗаполнено(Регистр.РегистрацияСведений)
			И Не ЗначениеЗаполнено(Регистр[ПрефиксПоля + "Идентификатор"]) Тогда
			Ссылка = Регистр.РегистрацияСведений;
		КонецЕсли;
		// Проверка результата и сбор информации для регистрации ошибки.
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			Условия = Новый Массив;
			Условия.Добавить(СтрШаблон("""%1"" = ""%2""", ПрефиксПоля + "Идентификатор", Идентификатор));
			Если ЗначениеЗаполнено(ДоставкаИдентификатор) Тогда
				Условия.Добавить(СтрШаблон("""%1"" = ""%2""", "ДоставкаИдентификатор", ДоставкаИдентификатор));
			КонецЕсли;
			Условие = НСтр("ru = '""СНИЛС"" = ""%1"" и ""Страхователь"" = ""%2""';
							|en = '""SNILS"" = ""%1"" and ""Insurant"" = ""%2""'");
			Условия.Добавить(СтрШаблон(Условие, СНИЛС, Страхователь));
			ТекстУсловий = "  * " + СтрСоединить(Условия, ";" + Символы.ПС + "  * ");
			ТекстОшибки = НСтр("ru = 'Не найдена регистрация сведений о застрахованном лице по условиям %1.';
								|en = 'Registration of the insured person details by conditions %1 is not found.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Символы.ПС + ТекстУсловий);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение документа.
	Объект = Ссылка.ПолучитьОбъект();
	
	// Если идентификатор доставки совпадает, то проверки дат не требуются.
	Если ЗначениеЗаполнено(ДоставкаИдентификатор)
		И Объект.ДоставкаИдентификатор = ДоставкаИдентификатор Тогда
		Возврат Объект;
	КонецЕсли;
	
	// Исключение затирания ранними сообщениями актуальной информации.
	Если ЗначениеЗаполнено(Объект[ПрефиксПоля + "Идентификатор"])
		И Объект[ПрефиксПоля + "Идентификатор"] <> Идентификатор
		И Объект[ПрефиксПоля + "Дата"] > ДатаСообщения Тогда
		ТекстЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сообщение СЭДО %1 от %2 не повлияло на учет отправленных сведений, поскольку в программу уже загружено более позднее сообщение %3 от %4. СНИЛС физического лица: %5, Страхователь: %6.';
				|en = 'EDI message %1 from %2 did not affect recording of the sent information as a later message %3 from %4 is already imported to the application. Individual''s SNILS: %5, Insurant: %6.'"),
			Идентификатор,
			ДатаСообщения,
			Объект[ПрефиксПоля + "Идентификатор"],
			Объект[ПрефиксПоля + "Дата"],
			СНИЛС,
			Страхователь);
		ЗаписьЖурналаРегистрации(
			СЭДОФСС.ИмяСобытияЖурнала(),
			УровеньЖурналаРегистрации.Предупреждение,
			Объект.Метаданные(),
			Ссылка,
			ТекстЖурнала);
		Возврат Неопределено;
	КонецЕсли;
	Если НачалоДня(Объект.ДатаОтправки) > ДатаСообщения Тогда
		ТекстЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сообщение СЭДО %1 от %2 не повлияло на учет отправленных сведений, поскольку из программы позже (%3) отправлены новые сведения. СНИЛС физического лица: %4, Страхователь: %5.';
				|en = 'EDI message %1 from %2 did not affect recording of the sent information as new information was sent from the application later (%3). Individual''s SNILS: %4, Insurant: %5.'"),
			Идентификатор,
			ДатаСообщения,
			Объект.ДатаОтправки,
			СНИЛС,
			Страхователь);
		ЗаписьЖурналаРегистрации(
			СЭДОФСС.ИмяСобытияЖурнала(),
			УровеньЖурналаРегистрации.Предупреждение,
			Объект.Метаданные(),
			Ссылка,
			ТекстЖурнала);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Объект;
КонецФункции

Функция СведенияОРегистрацииИзРегистра(СНИЛС, Страхователь)
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗастрахованныеЛицаСЭДО.РегистрацияСведений КАК РегистрацияСведений,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.ДоставкаИдентификатор КАК ДоставкаИдентификатор,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.РегистрацияИдентификатор КАК РегистрацияИдентификатор,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.НесоответствиеИдентификатор КАК НесоответствиеИдентификатор,
	|	ЗастрахованныеЛицаСЭДО.ОтправленныеСведения КАК ОтправленныеСведения
	|ИЗ
	|	РегистрСведений.ЗастрахованныеЛицаСЭДО КАК ЗастрахованныеЛицаСЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСведенийОЗастрахованномЛицеФСС КАК РегистрацияСведенийОЗастрахованномЛицеФСС
	|		ПО ЗастрахованныеЛицаСЭДО.РегистрацияСведений = РегистрацияСведенийОЗастрахованномЛицеФСС.Ссылка
	|ГДЕ
	|	ЗастрахованныеЛицаСЭДО.СНИЛС = &СНИЛС
	|	И ЗастрахованныеЛицаСЭДО.Страхователь = &Страхователь";
	Запрос.УстановитьПараметр("СНИЛС", СНИЛС);
	Запрос.УстановитьПараметр("Страхователь", Страхователь);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 0 Тогда
		Таблица.Добавить();
	КонецЕсли;
	Возврат Таблица[0];
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли