#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма);
	
	Если Параметры.Ключ = Документы.ВыплатыПоДоговорамОпеки.ПустаяСсылка() Тогда
				
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", "Объект.Организация", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			КадровыйУчетРасширенный.УстановитьРольДоговорникСотруднику(Объект.Сотрудник);
		КонецЕсли;
		ЗаполнитьДанныеФормыПоОрганизации();
		УстановитьФункциональныеОпцииФормы();
		// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
		ЭлектронныеТрудовыеКнижки.ЗаполнитьНаименованиеДокумента(Объект, "ВыплатыПоДоговорамОпеки", НСтр("ru = 'Договор опеки';
																										|en = 'Guardianship contract'"));
		// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
		УстановитьОтображениеПолейВводаДанныхОТрудовойДеятельности(ЭтотОбъект);
		
	КонецЕсли;
	
	ВыплатыПоДоговорамОпеки.ЗаполнитьВсеПоляПредставленийВыплаты(Объект);

	УстановитьСвойстваПоДатеНачалаПФР();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВыплатыОграниченияПоВозрастуПредставление",
		"Видимость",
		ПолучитьФункциональнуюОпцию("УчитыватьВозрастРебенкаПриВыплатахПоДоговорамОпеки"));
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьОтображениеПолейВводаДанныхОТрудовойДеятельности(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	ВыплатыПоДоговорамОпеки.ЗаполнитьВсеПоляПредставленийВыплаты(Объект);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоФизическимЛицам(ТекущийОбъект);
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоСотрудникам(ТекущийОбъект);
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	ВыплатыПоДоговорамОпеки.ЗаполнитьВсеПоляПредставленийВыплаты(Объект);
	УстановитьОтображениеПолейВводаДанныхОТрудовойДеятельности(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплатаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплатаКлиент.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СтруктураПараметровОповещения = Новый Структура;
	СтруктураПараметровОповещения.Вставить("Проведен",          Объект.Проведен);
	СтруктураПараметровОповещения.Вставить("ПомеченНаУдаление", Объект.ПометкаУдаления);
	СтруктураПараметровОповещения.Вставить("Результат",         Объект.Ссылка);
	СтруктураПараметровОповещения.Вставить("Ответственный",     Объект.Ответственный);
	СтруктураПараметровОповещения.Вставить("ДатаДокумента",     Объект.Дата);
	СтруктураПараметровОповещения.Вставить("НомерДокумента",    Объект.Номер);
	СтруктураПараметровОповещения.Вставить("Сотрудник",         Объект.Сотрудник);
	Оповестить("ДокументВыплатыПоДоговорамОпекиПослеЗаписи", СтруктураПараметровОповещения, ЭтаФорма);
	Оповестить("Запись_ВыплатыПоДоговорамОпеки", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ОбработатьИзменениеОрганизацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОбработатьИзменениеДатыДокументаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	УстановитьОтображениеПолейВводаДанныхОТрудовойДеятельности(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьТрудовуюДеятельностьПриИзменении(Элемент)
	УстановитьОтображениеПолейВводаДанныхОТрудовойДеятельности(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаПриИзменении(Элемент)
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаПриИзменении(Объект.Организация, "ВыплатыПоДоговорамОпеки", Объект.НаименованиеДокумента);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		Объект.НаименованиеДокумента, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	НовыеНастройкиСотрудника = Неопределено;
	СотрудникПриИзмененииНаСервере(Объект.Сотрудник, НовыеНастройкиСотрудника);
	ЗаполнитьЗначенияСвойств(Объект, НовыеНастройкиСотрудника);
	СотрудникПрежний = Объект.Сотрудник;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	СпособРасчетаКоэффициентНаПрожиточныйМинимум = ПредопределенноеЗначение("Перечисление.СпособыРасчетаВыплатПоДоговорамОпеки.КоэффициентНаПрожиточныйМинимум");
	СпособРасчетаКоэффициентНаМРОТ = ПредопределенноеЗначение("Перечисление.СпособыРасчетаВыплатПоДоговорамОпеки.КоэффициентНаМРОТ");
	ДатаРасчета = Объект.ДатаНачала;
	Для Каждого ДанныеВыплаты Из Объект.Выплаты Цикл 
		Если ДанныеВыплаты.СпособРасчета=СпособРасчетаКоэффициентНаПрожиточныйМинимум Тогда
			ДанныеВыплаты.Размер = ПрожиточныйМинимумНаДату(ДанныеВыплаты.ПрожиточныйМинимум, ДатаРасчета);
		ИначеЕсли ДанныеВыплаты.СпособРасчета=СпособРасчетаКоэффициентНаМРОТ Тогда
			ДанныеВыплаты.Размер = МинимальныйРазмерОплатыТрудаРФ(ДатаРасчета);
		КонецЕсли;
		УстановитьСуммуВыплаты(ДанныеВыплаты, ДатаРасчета);
	КонецЦикла;
КонецПроцедуры                   

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыплаты

&НаКлиенте
Процедура ВыплатыРебенокПодОпекойПриИзменении(Элемент)
	ТекДанные = Элементы.Выплаты.ТекущиеДанные;
	УстановитьСуммуВыплаты(ТекДанные, Объект.ДатаНачала);
	Если ЗначениеЗаполнено(ТекДанные.Ребенок) Тогда 
		Если (ЗначениеЗаполнено(ТекДанные.ВыплачиваетсяПриВозрастеОт) 
				Или ЗначениеЗаполнено(ТекДанные.ВыплачиваетсяПриВозрастеДо)) 
				И Не ДатаРожденияРебенкаУказана(ТекДанные.Ребенок) Тогда 
			ТекстОшибки = НСтр("ru = 'Необходимо указать дату рождения ребенка, так как выплата имеет ограничения по возрасту ребенка.';
								|en = 'Specify the child date of birth, since the payment has restrictions on the child age.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.Выплаты[%1].Ребенок", ТекДанные.НомерСтроки-1));
			Элементы.ВыплатыРебенокПодОпекой.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекДанные.ВыплачиваетсяПриВозрастеОт) Или ЗначениеЗаполнено(ТекДанные.ВыплачиваетсяПриВозрастеДо) Тогда
		ТекстОшибки = НСтр("ru = 'Необходимо указать ребенка с заданной датой рождения, так как выплата имеет ограничения по возрасту ребенка.';
							|en = 'Specify a child with a given date of birth, since the payment has restrictions on the child age.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.Выплаты[%1].Ребенок", ТекДанные.НомерСтроки-1));
		Элементы.ВыплатыРебенокПодОпекой.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыОграниченияПоВозрастуПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Выплаты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Ребенок) Тогда 
		Если ДатаРожденияРебенкаУказана(ТекДанные.Ребенок) Тогда 
			ПараметрыОграничений = ВыплатыПоДоговорамОпекиКлиент.ПараметрыОграниченийПоВозрасту();
			ПараметрыОграничений.ВозрастОт = ТекДанные.ВыплачиваетсяПриВозрастеОт;
			ПараметрыОграничений.ВозрастДо = ТекДанные.ВыплачиваетсяПриВозрастеДо;
			ПараметрыОграничений.ИсключаяДатуОт = ТекДанные.ИсключаяДатуОт;
			ПараметрыОграничений.ВключаяДатуДо = ТекДанные.ВключаяДатуДо;
			ВыплатыПоДоговорамОпекиКлиент.ВводОграниченийПоВозрасту(ПараметрыОграничений, 
				Элементы.ВыплатыОграниченияПоВозрастуПредставление);
		Иначе 
			ТекстОшибки = НСтр("ru = 'При вводе ограничений по возрасту необходимо указать дату рождения ребенка.';
								|en = 'Specify the child date of birth when entering age restrictions.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.Выплаты[%1].Ребенок", ТекДанные.НомерСтроки-1));
			Элементы.ВыплатыРебенокПодОпекой.ОтметкаНезаполненного = Ложь;
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	Иначе 
		ТекстОшибки = НСтр("ru = 'При вводе ограничений по возрасту необходимо указать ребенка с заданной датой рождения.';
							|en = 'Specify the child with the given date of birth when entering age restrictions.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.Выплаты[%1].Ребенок", ТекДанные.НомерСтроки-1));
		Элементы.ВыплатыРебенокПодОпекой.ОтметкаНезаполненного = Ложь;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыОграниченияПоВозрастуПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Структура") Тогда
		РезультатВыбора = Новый ФиксированнаяСтруктура(ВыбранноеЗначение);
		ТекДанные = Элементы.Выплаты.ТекущиеДанные;
		ТекДанные.ВыплачиваетсяПриВозрастеОт = РезультатВыбора.ВозрастОт;
		ТекДанные.ВыплачиваетсяПриВозрастеДо = РезультатВыбора.ВозрастДо;
		ТекДанные.ИсключаяДатуОт = РезультатВыбора.ИсключаяДатуОт;
		ТекДанные.ВключаяДатуДо = РезультатВыбора.ВключаяДатуДо;
		УстановитьСуммуВыплаты(ТекДанные, Объект.ДатаНачала);
		ВыбранноеЗначение = ВыплатыПоДоговорамОпекиКлиентСервер.ОграниченияПоВозрастуПредставление(
			ТекДанные.ВыплачиваетсяПриВозрастеОт, ТекДанные.ВыплачиваетсяПриВозрастеДо, 
			ТекДанные.ИсключаяДатуОт, ТекДанные.ВключаяДатуДо);
		ТекРебенок = ТекДанные.Ребенок;
		Если ЗначениеЗаполнено(ТекРебенок) Тогда 
			ТекИдентификатор = ТекДанные.ПолучитьИдентификатор();
			Для Каждого СтрокаВыплаты Из Объект.Выплаты Цикл 
				Если СтрокаВыплаты.ПолучитьИдентификатор()<>ТекИдентификатор И СтрокаВыплаты.Ребенок=ТекРебенок Тогда 
					Если (СтрокаВыплаты.ВыплачиваетсяПриВозрастеДо=ТекДанные.ВыплачиваетсяПриВозрастеОт И СтрокаВыплаты.ВключаяДатуДо И Не ТекДанные.ИсключаяДатуОт) Тогда 
						ТекстОшибки = СтрШаблон(НСтр("ru = 'День начала выплаты номер %1 накладывается на день окончания выплаты номер %2.';
													|en = 'Payment start day number %1 overlaps with the payment end day number %2.'"), 
							ТекДанные.НомерСтроки, СтрокаВыплаты.НомерСтроки);
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , 
							СтрШаблон("Объект.Выплаты[%1].ОграниченияПоВозрастуПредставление", ТекДанные.НомерСтроки-1));
					КонецЕсли;
					Если (СтрокаВыплаты.ВыплачиваетсяПриВозрастеОт=ТекДанные.ВыплачиваетсяПриВозрастеДо И Не СтрокаВыплаты.ИсключаяДатуОт И ТекДанные.ВключаяДатуДо) Тогда 
						ТекстОшибки = СтрШаблон(НСтр("ru = 'День окончания выплаты номер %1 накладывается на день начала выплаты номер %2.';
													|en = 'Payment end day number %1 overlaps with the payment start day number %2.'"), 
							ТекДанные.НомерСтроки, СтрокаВыплаты.НомерСтроки);
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , 
							СтрШаблон("Объект.Выплаты[%1].ОграниченияПоВозрастуПредставление", ТекДанные.НомерСтроки-1));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыРасчетРазмераВыплатыПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Выплаты.ТекущиеДанные;
	ПараметрыРасчетаРазмераВыплаты = Новый Структура;
	ПараметрыРасчетаРазмераВыплаты.Вставить("СпособРасчета", ТекДанные.СпособРасчета);
	ПараметрыРасчетаРазмераВыплаты.Вставить("ПрожиточныйМинимум", ТекДанные.ПрожиточныйМинимум);
	ПараметрыРасчетаРазмераВыплаты.Вставить("Размер", ТекДанные.Размер);
	ПараметрыРасчетаРазмераВыплаты.Вставить("Коэффициент", ТекДанные.Коэффициент);
	ВыплатыПоДоговорамОпекиКлиент.ВводДанныхДляРасчетаРазмераВыплаты(ПараметрыРасчетаРазмераВыплаты, Элементы.ВыплатыРасчетРазмераВыплатыПредставление);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыРасчетРазмераВыплатыПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Структура") Тогда
		СпособРасчетаФиксированныйРазмер             = ПредопределенноеЗначение("Перечисление.СпособыРасчетаВыплатПоДоговорамОпеки.ФиксированныйРазмер");
		СпособРасчетаКоэффициентНаПрожиточныйМинимум = ПредопределенноеЗначение("Перечисление.СпособыРасчетаВыплатПоДоговорамОпеки.КоэффициентНаПрожиточныйМинимум");
		СпособРасчетаКоэффициентНаМРОТ               = ПредопределенноеЗначение("Перечисление.СпособыРасчетаВыплатПоДоговорамОпеки.КоэффициентНаМРОТ");
		ДатаРасчета = Объект.ДатаНачала;
		РезультатВыбора = Новый ФиксированнаяСтруктура(ВыбранноеЗначение);
		ТекДанные = Элементы.Выплаты.ТекущиеДанные;
		ТекДанные.СпособРасчета = РезультатВыбора.СпособРасчета;
		Если ТекДанные.СпособРасчета=СпособРасчетаФиксированныйРазмер Тогда 
			ТекДанные.ПрожиточныйМинимум = Неопределено;
			ТекДанные.Размер = РезультатВыбора.Размер;
			ТекДанные.Коэффициент = 1;
		ИначеЕсли ТекДанные.СпособРасчета=СпособРасчетаКоэффициентНаПрожиточныйМинимум Тогда
			ТекДанные.ПрожиточныйМинимум = РезультатВыбора.ПрожиточныйМинимум;
			ТекДанные.Размер = ПрожиточныйМинимумНаДату(ТекДанные.ПрожиточныйМинимум, ДатаРасчета);
			ТекДанные.Коэффициент = РезультатВыбора.Коэффициент;
		ИначеЕсли ТекДанные.СпособРасчета=СпособРасчетаКоэффициентНаМРОТ Тогда
			ТекДанные.ПрожиточныйМинимум = Неопределено;
			ТекДанные.Размер = МинимальныйРазмерОплатыТрудаРФ(ДатаРасчета);
			ТекДанные.Коэффициент = РезультатВыбора.Коэффициент;
		Иначе 
			ТекДанные.ПрожиточныйМинимум = Неопределено;
			ТекДанные.Размер = 0;
			ТекДанные.Коэффициент = 1;
		КонецЕсли;
		УстановитьСуммуВыплаты(ТекДанные, Объект.ДатаНачала);
		ВыбранноеЗначение = ВыплатыПоДоговорамОпекиКлиентСервер.РасчетРазмераВыплатыПредставление(ТекДанные.СпособРасчета, 
			ТекДанные.ПрожиточныйМинимум, ТекДанные.Размер, ТекДанные.Коэффициент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = Элементы.Выплаты.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекДанные.ИдентификаторВыплаты = Новый УникальныйИдентификатор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыРебенокПодОпекойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		СообщитьПользователюНеобходимоУказатьСотрудника();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыРебенокПодОпекойСоздание(Элемент, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		СообщитьПользователюНеобходимоУказатьСотрудника();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыПриИзменении(Элемент)
	ТекДанные = Элементы.Выплаты.ТекущиеДанные;
	Если ТекДанные<>Неопределено Тогда 
		ТекДанные.ОграниченияПоВозрастуПредставление = ВыплатыПоДоговорамОпекиКлиентСервер.ОграниченияПоВозрастуПредставление(
			ТекДанные.ВыплачиваетсяПриВозрастеОт, ТекДанные.ВыплачиваетсяПриВозрастеДо, 
			ТекДанные.ИсключаяДатуОт, ТекДанные.ВключаяДатуДо);
		ТекДанные.РасчетРазмераВыплатыПредставление = ВыплатыПоДоговорамОпекиКлиентСервер.РасчетРазмераВыплатыПредставление(
			ТекДанные.СпособРасчета, ТекДанные.ПрожиточныйМинимум, ТекДанные.Размер, ТекДанные.Коэффициент);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьВыплатыПоШаблону(Команда)
	Если Не ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		СообщитьПользователюНеобходимоУказатьСотрудника();
		Возврат;
	КонецЕсли;
	ПараметрыВыбораШаблона = Новый Структура("РежимВыбора,ФизическоеЛицо", Истина, Объект.ФизическоеЛицо);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавитьВыплатыПоШаблонуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныВыплатПоДоговорамОпеки.Форма.ВыборШаблонаВыплатНаРебенка", 
		ПараметрыВыбораШаблона, ЭтотОбъект, , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьСуммуВыплаты(Объект, ДатаРасчета)
	Объект.Сумма = 
		ВыплатыПоДоговорамОпекиКлиент.СуммаВыплатыНаДатуРасчета(
			Объект.Размер, 
			Объект.Коэффициент, 
			Объект.ВыплачиваетсяПриВозрастеОт, 
			Объект.ВыплачиваетсяПриВозрастеДо, 
			ВозрастРебенкаНаДатуРасчета(Объект.Ребенок, ДатаРасчета));
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ВозрастРебенкаНаДатуРасчета(Ребенок, ДатаРасчета)
	
	Возврат ВыплатыПоДоговорамОпеки.ВозрастРебенкаНаДатуРасчета(Ребенок, ДатаРасчета);
	
КонецФункции	
	
&НаСервереБезКонтекста
Функция МинимальныйРазмерОплатыТрудаРФ(ДатаРасчета)
	
	Возврат ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(ДатаРасчета);
	
КонецФункции	
	
&НаСервереБезКонтекста
Функция ПрожиточныйМинимумНаДату(ПрожиточныйМинимум, ДатаРасчета)
	
	Возврат ВыплатыПоДоговорамОпеки.ПрожиточныйМинимумНаДату(ПрожиточныйМинимум, ДатаРасчета);
	
КонецФункции	
	
&НаСервереБезКонтекста
Функция ДатаРожденияРебенкаУказана(Ребенок)
	Возврат ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ребенок, "ДатаРождения"));
КонецФункции

&НаКлиенте
Процедура СообщитьПользователюНеобходимоУказатьСотрудника()
	ТекстОшибки = НСтр("ru = 'Необходимо указать сотрудника.';
						|en = 'Specify an employee.'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "Сотрудник");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СотрудникПриИзмененииНаСервере(Сотрудник, НастройкиСотрудника)
	КадровыйУчетРасширенный.УстановитьРольДоговорникСотруднику(Сотрудник);
	
	НастройкиСотрудника = Новый Структура("Подразделение, Территория, СтатьяФинансирования, СтатьяРасходов, СпособОтраженияЗарплатыВБухучете, ФизическоеЛицо");
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ТекущееПодразделение, ТекущаяТерритория");
	Если КадровыеДанные.Количество()>0 Тогда
		НастройкиСотрудника.Подразделение 	= КадровыеДанные[0].ТекущееПодразделение;
		НастройкиСотрудника.Территория    	= КадровыеДанные[0].ТекущаяТерритория;
		НастройкиСотрудника.ФизическоеЛицо	= КадровыеДанные[0].ФизическоеЛицо;
	КонецЕсли;
	БухучетСотрудника = ОтражениеЗарплатыВБухучетеРасширенный.НастройкаБухучетаЗарплатыСотрудника(Сотрудник, ТекущаяДатаСеанса());
	ЗаполнитьЗначенияСвойств(НастройкиСотрудника, БухучетСотрудника);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыплатыПоШаблонуЗавершение(РезультатВыбораШаблонаВыплат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбораШаблонаВыплат)=Тип("Структура") Тогда
		
		СпособРасчетаФиксированныйРазмер             = ПредопределенноеЗначение("Перечисление.СпособыРасчетаВыплатПоДоговорамОпеки.ФиксированныйРазмер");
		СпособРасчетаКоэффициентНаПрожиточныйМинимум = ПредопределенноеЗначение("Перечисление.СпособыРасчетаВыплатПоДоговорамОпеки.КоэффициентНаПрожиточныйМинимум");
		СпособРасчетаКоэффициентНаМРОТ               = ПредопределенноеЗначение("Перечисление.СпособыРасчетаВыплатПоДоговорамОпеки.КоэффициентНаМРОТ");
	
		ВыплатыПоШаблону = ВыплатыПоШаблону(РезультатВыбораШаблонаВыплат);
		
		Для Каждого ОписаниеВыплаты Из ВыплатыПоШаблону.СтрокиШаблона Цикл 
			НоваяВыплата = Объект.Выплаты.Добавить();

			НоваяВыплата.ИдентификаторВыплаты = Новый УникальныйИдентификатор;
			НоваяВыплата.Ребенок = РезультатВыбораШаблонаВыплат.Ребенок;
			НоваяВыплата.Наименование = ОписаниеВыплаты.Наименование;
			НоваяВыплата.ВыплачиваетсяПриВозрастеОт = ОписаниеВыплаты.ВыплачиваетсяПриВозрастеОт;
			НоваяВыплата.ВыплачиваетсяПриВозрастеДо = ОписаниеВыплаты.ВыплачиваетсяПриВозрастеДо;
			НоваяВыплата.ИсключаяДатуОт = ОписаниеВыплаты.ИсключаяДатуОт;
			НоваяВыплата.ВключаяДатуДо = ОписаниеВыплаты.ВключаяДатуДо;
			
			ДатаРасчета = Объект.ДатаНачала;
			ВозрастНаДатуРасчета = ВыплатыПоДоговорамОпекиКлиентСервер.ВозрастНаДатуРасчета(
				ВыплатыПоШаблону.ДатаРождения, ДатаРасчета);
			
			НоваяВыплата.СпособРасчета = ОписаниеВыплаты.СпособРасчета;
			Если НоваяВыплата.СпособРасчета=СпособРасчетаФиксированныйРазмер Тогда 
				НоваяВыплата.ПрожиточныйМинимум = Неопределено;
				НоваяВыплата.Размер = ОписаниеВыплаты.Размер;
				НоваяВыплата.Коэффициент = 1;
			ИначеЕсли НоваяВыплата.СпособРасчета=СпособРасчетаКоэффициентНаПрожиточныйМинимум Тогда
				НоваяВыплата.ПрожиточныйМинимум = ОписаниеВыплаты.ПрожиточныйМинимум;
				НоваяВыплата.Размер = ПрожиточныйМинимумНаДату(НоваяВыплата.ПрожиточныйМинимум, ДатаРасчета);
				НоваяВыплата.Коэффициент = ОписаниеВыплаты.Коэффициент;
			ИначеЕсли НоваяВыплата.СпособРасчета=СпособРасчетаКоэффициентНаМРОТ Тогда
				НоваяВыплата.ПрожиточныйМинимум = Неопределено;
				НоваяВыплата.Размер = МинимальныйРазмерОплатыТрудаРФ(ДатаРасчета);
				НоваяВыплата.Коэффициент = ОписаниеВыплаты.Коэффициент;
			Иначе 
				НоваяВыплата.ПрожиточныйМинимум = Неопределено;
				НоваяВыплата.Размер = 0;
				НоваяВыплата.Коэффициент = 1;
			КонецЕсли;
			НоваяВыплата.Сумма = ВыплатыПоДоговорамОпекиКлиент.СуммаВыплатыНаДатуРасчета(
				НоваяВыплата.Размер, НоваяВыплата.Коэффициент, ОписаниеВыплаты.ВыплачиваетсяПриВозрастеОт, 
				ОписаниеВыплаты.ВыплачиваетсяПриВозрастеДо, ВозрастНаДатуРасчета);
			
			НоваяВыплата.ОграниченияПоВозрастуПредставление = 
				ВыплатыПоДоговорамОпекиКлиентСервер.ОграниченияПоВозрастуПредставление(
					НоваяВыплата.ВыплачиваетсяПриВозрастеОт, НоваяВыплата.ВыплачиваетсяПриВозрастеДо, 
					НоваяВыплата.ИсключаяДатуОт, НоваяВыплата.ВключаяДатуДо);
			НоваяВыплата.РасчетРазмераВыплатыПредставление = 
				ВыплатыПоДоговорамОпекиКлиентСервер.РасчетРазмераВыплатыПредставление(
					НоваяВыплата.СпособРасчета, НоваяВыплата.ПрожиточныйМинимум, 
					НоваяВыплата.Размер, НоваяВыплата.Коэффициент);

			Модифицированность = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыплатыПоШаблону(ШаблонВыплатНаРебенка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныВыплатПоДоговорамОпекиВыплаты.Наименование КАК Наименование,
		|	ШаблоныВыплатПоДоговорамОпекиВыплаты.ВыплачиваетсяПриВозрастеОт КАК ВыплачиваетсяПриВозрастеОт,
		|	ШаблоныВыплатПоДоговорамОпекиВыплаты.ИсключаяДатуОт КАК ИсключаяДатуОт,
		|	ШаблоныВыплатПоДоговорамОпекиВыплаты.ВыплачиваетсяПриВозрастеДо КАК ВыплачиваетсяПриВозрастеДо,
		|	ШаблоныВыплатПоДоговорамОпекиВыплаты.ВключаяДатуДо КАК ВключаяДатуДо,
		|	ШаблоныВыплатПоДоговорамОпекиВыплаты.СпособРасчета КАК СпособРасчета,
		|	ШаблоныВыплатПоДоговорамОпекиВыплаты.ПрожиточныйМинимум КАК ПрожиточныйМинимум,
		|	ШаблоныВыплатПоДоговорамОпекиВыплаты.Размер КАК Размер,
		|	ШаблоныВыплатПоДоговорамОпекиВыплаты.Коэффициент КАК Коэффициент
		|ИЗ
		|	Справочник.ШаблоныВыплатПоДоговорамОпеки.Выплаты КАК ШаблоныВыплатПоДоговорамОпекиВыплаты
		|ГДЕ
		|	ШаблоныВыплатПоДоговорамОпекиВыплаты.Ссылка = &ШаблонСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШаблоныВыплатПоДоговорамОпекиВыплаты.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РодственникиФизическихЛиц.ДатаРождения КАК ДатаРождения
		|ИЗ
		|	Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
		|ГДЕ
		|	РодственникиФизическихЛиц.Ссылка = &РодственникСсылка";
	
	Запрос.УстановитьПараметр("ШаблонСсылка", ШаблонВыплатНаРебенка.Шаблон);
	Запрос.УстановитьПараметр("РодственникСсылка", ШаблонВыплатНаРебенка.Ребенок);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаДатаРождения = РезультатЗапроса[1].Выбрать();
	Если ВыборкаДатаРождения.Следующий() Тогда 
		ДатаРождения = ВыборкаДатаРождения.ДатаРождения;
	Иначе 
		ДатаРождения = Дата('00010101'); 
	КонецЕсли;
	Возврат Новый Структура("СтрокиШаблона,ДатаРождения", ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса[0].Выгрузить()), ДатаРождения);
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплатаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплатаКлиент.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплатаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплатаКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплатаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплатаКлиент.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// ЗарплатаКадрыПодсистемы.ПодписиДокументов
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()
	ЗаполнитьДанныеФормыПоОрганизации();
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДатыДокументаНаСервере()
	ЗаполнитьДанныеФормыПоОрганизации();
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, НачалоДня(Объект.Дата));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПоДатеНачалаПФР()
	
	ДатаНачалаПФРЗаполнена = ЗначениеЗаполнено(Объект.ДатаНачалаПФР);
	
	Если ДатаНачалаПФРЗаполнена Тогда
		Шаблон = НСтр("ru = 'Дата начала движений ПФР - %1';
						|en = 'PF register records start date - %1'");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НачалоДвиженийПФРКартинкаРасширеннаяПодсказка",
			"Заголовок",
			СтрШаблон(Шаблон, ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Объект.ДатаНачалаПФР)));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачалоДвиженийПФРГруппа",
		"Видимость",
		ДатаНачалаПФРЗаполнена);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПолейВводаДанныхОТрудовойДеятельности(УправляемаяФорма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ОтражениеТрудовойДеятельностиГруппа",
		"Видимость",
		Не ЗначениеЗаполнено(УправляемаяФорма.Объект.ДатаОкончания)
			Или УправляемаяФорма.Объект.ДатаОкончания >= ЗарплатаКадрыВызовСервера.ДатаВступленияВСилуНА("ДатаНачалаПриемаЕФС1"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ОтражениеТрудовойДеятельностиДеталиГруппа",
		"Доступность",
		УправляемаяФорма.Объект.ОтразитьТрудовуюДеятельность);
	
КонецПроцедуры

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.Выплаты");
	Возврат Массив
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", НСтр("ru = 'организации';
																						|en = 'companies'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Сотрудник", НСтр("ru = 'сотрудника';
																					|en = 'of employee'")));
	Возврат Массив
КонецФункции

#КонецОбласти

#КонецОбласти
