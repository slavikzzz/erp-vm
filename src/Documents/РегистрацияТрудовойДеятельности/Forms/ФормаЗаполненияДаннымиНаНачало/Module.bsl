#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "СсылкаНаОбъект,Организация");
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если РазмерПорции = 0 Тогда
		РазмерПорции = 100;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаполнятьПорциямиПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьАвтоматическиПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьПоСотрудникамПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого Сотрудник Из ВыбранноеЗначение Цикл
		НоваяСтрока = Сотрудники.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если ДобавлятьАвтоматически = 0 Тогда
		Закрыть(АдресДанныхЗаполнения());
	Иначе
		
		Если Сотрудники.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного сотрудника';
											|en = 'No employee is selected'"));
		Иначе
			Закрыть(АдресДанныхЗаполнения());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники, Организация, , '20200101', Истина, АдресСпискаПодобранных());
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовФормы(УправляемаяФорма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"РазмерПорции",
		"Доступность",
		УправляемаяФорма.ЗаполнятьПорциями);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ЗаполнятьПорциямиГруппа",
		"Доступность",
		УправляемаяФорма.ДобавлятьАвтоматически = 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"Сотрудники",
		"Доступность",
		УправляемаяФорма.ДобавлятьАвтоматически = 1);
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхЗаполнения()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗаполнитьРанееПодобранных();
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ЭлектронныеТрудовыеКнижки.ДатаНачалаУчета());
	
	Если ДобавлятьАвтоматически = 0 Тогда
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолучения.Организация = Организация;
		ПараметрыПолучения.НачалоПериода = ЭлектронныеТрудовыеКнижки.ДатаНачалаУчета() - 1;
		ПараметрыПолучения.ОкончаниеПериода = ПараметрыПолучения.НачалоПериода;
		ПараметрыПолучения.КадровыеДанные = ЭлектронныеТрудовыеКнижки.ИменаКадровыхДанныхСотрудниковДляНачалаУчета();
		
		ЭлектронныеТрудовыеКнижки.УстановитьОтборПараметровПолученияСотрудниковОрганизации(ПараметрыПолучения);
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолучения, "ВТСотрудникиНаДатуДоНачала");
		
	Иначе
		
		КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц, Истина, Сотрудники.Выгрузить().ВыгрузитьКолонку("Сотрудник"),
			ЭлектронныеТрудовыеКнижки.ИменаКадровыхДанныхСотрудниковДляНачалаУчета(), '20191231',
			, , "ВТСотрудникиНаДатуДоНачала");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РанееПодобранные", РанееПодобранные);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиОрганизации.Сотрудник КАК СотрудникЗаписи,
		|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СотрудникиОрганизации.Подразделение КАК Подразделение,
		|	СотрудникиОрганизации.Должность КАК Должность,
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЯвляетсяСовместителем,
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизации.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Прием)
		|		КОГДА СотрудникиОрганизации.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Перевод)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.ПустаяСсылка)
		|	КОНЕЦ КАК ВидМероприятия,
		|	СотрудникиОрганизации.РабочееМестоПериодРегистрации КАК ДатаМероприятия,
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизации.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение))
		|			ТОГДА СотрудникиОрганизации.РабочееМестоРегистратор.Дата
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаДокументаОснования,
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизации.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение))
		|			ТОГДА СотрудникиОрганизации.РабочееМестоРегистратор.Номер
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК НомерДокументаОснования,
		|	СотрудникиОрганизации.РабочееМестоРегистратор.НомерПриказа КАК НомерПриказа,
		|	&РазрядКатегория КАК РазрядКатегория
		|ИЗ
		|	ВТСотрудникиНаДатуДоНачала КАК СотрудникиОрганизации
		|ГДЕ
		|	НЕ СотрудникиОрганизации.Сотрудник В (&РанееПодобранные)
		|	И СотрудникиОрганизации.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И СотрудникиОрганизации.ДатаПриема < &ДатаНачалаУчета
		|	И (СотрудникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ СотрудникиОрганизации.ДатаУвольнения >= &ДатаНачалаУчета)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникиОрганизации.ФИОПолные,
		|	ЯвляетсяСовместителем";
	
	Если ЗаполнятьПорциями Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ="));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "");
	КонецЕсли;
	
	ЭлектронныеТрудовыеКнижки.УточнитьЗапросПолученияДанныхНаНачалоУчета(Запрос);
	
	ДанныеЗаполнения = Новый Массив;
	ДанныеСотрудниковБезМероприятий = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеСотрудника = ЭлектронныеТрудовыеКнижки.ПустаяСтруктураЗаписиОТрудовойДеятельности();
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, Выборка);
		ДанныеСотрудника.НомерДокументаОснования = ЗарплатаКадрыОтчеты.НомерНаПечать(
			Выборка.НомерДокументаОснования, Выборка.НомерПриказа);
		
		Если ДанныеСотрудника.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Прием Тогда
			ДанныеСотрудника.НаименованиеДокументаОснования = ЭлектронныеТрудовыеКнижки.НаименованиеДокументаПоВидуДокументаСобытия(Организация, "ПриемНаРаботу");
		ИначеЕсли ДанныеСотрудника.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Перевод Тогда
			ДанныеСотрудника.НаименованиеДокументаОснования = ЭлектронныеТрудовыеКнижки.НаименованиеДокументаПоВидуДокументаСобытия(Организация, "КадровыйПеревод");
		КонецЕсли;
		
		ДанныеЗаполнения.Добавить(ДанныеСотрудника);
		
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.ВидМероприятия) Тогда
			ДанныеСотрудниковБезМероприятий.Добавить(ДанныеСотрудника);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеЗаполнения.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ДанныеСотрудниковБезМероприятий.Количество() > 0 Тогда
		ЭлектронныеТрудовыеКнижки.ДополнитьМероприятияЭТКДаннымиРеестраКадровыхПриказов(ДанныеСотрудниковБезМероприятий);
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеЗаполнения, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРанееПодобранных()
	
	Если РанееПодобранные = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ДатаНачалаУчета", ЭлектронныеТрудовыеКнижки.ДатаНачалаУчета());
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", СсылкаНаОбъект);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Мероприятия.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудникиСМероприятиями
			|ИЗ
			|	РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
			|ГДЕ
			|	Мероприятия.Организация = &Организация
			|	И Мероприятия.ДатаМероприятия < &ДатаНачалаУчета
			|	И НЕ Мероприятия.Регистратор В (&ИсключаемыйРегистратор)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	МероприятияПрочие.Сотрудник
			|ИЗ
			|	РегистрСведений.МероприятияТрудовойДеятельностиПрочие КАК МероприятияПрочие
			|ГДЕ
			|	МероприятияПрочие.Организация = &Организация
			|	И МероприятияПрочие.ДатаМероприятия = &ДатаНачалаУчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиСМероприятиями.Сотрудник КАК Сотрудник
			|ИЗ
			|	ВТСотрудникиСМероприятиями КАК СотрудникиСМероприятиями";
		
		РанееПодобранные = Новый ФиксированныйМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранных()
	
	СписокПодобранных = Сотрудники.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	ЗаполнитьРанееПодобранных();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокПодобранных, РанееПодобранные);
	
	Возврат ПоместитьВоВременноеХранилище(СписокПодобранных, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти
