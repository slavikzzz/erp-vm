#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры,
		"СсылкаНаОбъект,Организация,ДатаДокументаОснования,ДатаПереименования,НаименованиеДокументаОснования,НомерДокументаОснования,Сведения,СерияДокументаОснования");
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПереименования) Тогда
		ДатаПереименования = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеДокументаОснования) Тогда
		НаименованиеДокументаОснования = ЭлектронныеТрудовыеКнижкиВызовСервера.НаименованиеДокумента(Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если РазмерПорции = 0 Тогда
		РазмерПорции = 100;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаполнятьПорциямиПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаОснованияПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаПриИзменении(Организация, "Переименование", НаименованиеДокументаОснования);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаОснованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаОснованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		НаименованиеДокументаОснования, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДокументаОснованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаПриИзменении(Организация, "Переименование", НаименованиеВторогоДокументаОснования);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		НаименованиеВторогоДокументаОснования, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВторогоДокументаОснованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Отказ = Ложь;
	ПроверкаДостаточностиЗаполнения(Отказ);
	Если Не Отказ Тогда
		Закрыть(АдресДанныхЗаполнения());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрироватьВторойДокументОснования(Команда)
	
	РегистрироватьВторойДокументОснования = Не РегистрироватьВторойДокументОснования;
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПроверкаДостаточностиЗаполнения(Отказ)
	
	Если Не ЗначениеЗаполнено(Сведения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Сведения"".';
														|en = '""Info"" is required.'"), , "Сведения", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеДокументаОснования) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Наименование документа"".';
														|en = 'The ""Document name"" field is not filled in.'"), , "НаименованиеДокументаОснования", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаДокументаОснования) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Дата документа"".';
														|en = 'The ""Document date"" field is not filled in.'"), , "ДатаДокументаОснования", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерДокументаОснования) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Номер документа"".';
														|en = 'The ""Document number"" field is not filled in.'"), , "НомерДокументаОснования", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПереименования) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Дата мероприятия"".';
														|en = 'The ""Event date"" field is not filled in.'"), , "ДатаПереименования", , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеВторогоДокументаОснования)
			Или ЗначениеЗаполнено(ДатаВторогоДокументаОснования)
			Или ЗначениеЗаполнено(СерияВторогоДокументаОснования)
			Или ЗначениеЗаполнено(НомерВторогоДокументаОснования) Тогда
		
		Если Не ЗначениеЗаполнено(НаименованиеВторогоДокументаОснования) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Наименование второго документа"".';
															|en = 'The ""Second document name"" field is not filled in.'"), , "НаименованиеВторогоДокументаОснования", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаВторогоДокументаОснования) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Дата второго документа"".';
															|en = 'The ""Second document date"" field is not filled in.'"), , "ДатаВторогоДокументаОснования", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НомерВторогоДокументаОснования) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Номер второго документа"".';
															|en = 'The ""Second document number"" field is not filled in.'"), , "НомерВторогоДокументаОснования", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовФормы(УправляемаяФорма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"РазмерПорции",
		"Доступность",
		УправляемаяФорма.ЗаполнятьПорциями);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ВторойДокументОснованиеГруппа",
		"Видимость",
		УправляемаяФорма.РегистрироватьВторойДокументОснования
			Или ЗначениеЗаполнено(УправляемаяФорма.НаименованиеВторогоДокументаОснования)
			Или ЗначениеЗаполнено(УправляемаяФорма.ДатаВторогоДокументаОснования)
			Или ЗначениеЗаполнено(УправляемаяФорма.СерияВторогоДокументаОснования)
			Или ЗначениеЗаполнено(УправляемаяФорма.НомерВторогоДокументаОснования));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ФормаРегистрироватьВторойДокументОснования",
		"Видимость",
		Не (УправляемаяФорма.РегистрироватьВторойДокументОснования
			Или ЗначениеЗаполнено(УправляемаяФорма.НаименованиеВторогоДокументаОснования)
			Или ЗначениеЗаполнено(УправляемаяФорма.ДатаВторогоДокументаОснования)
			Или ЗначениеЗаполнено(УправляемаяФорма.СерияВторогоДокументаОснования)
			Или ЗначениеЗаполнено(УправляемаяФорма.НомерВторогоДокументаОснования)));
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхЗаполнения()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаМероприятия", ДатаПереименования);
	Запрос.УстановитьПараметр("Регистратор", СсылкаНаОбъект);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Мероприятия.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
		|ГДЕ
		|	Мероприятия.Организация = &Организация
		|	И Мероприятия.ВидМероприятия = ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Переименование)
		|	И Мероприятия.ДатаМероприятия = &ДатаМероприятия
		|	И НЕ Мероприятия.Регистратор В (&Регистратор)";
	
	РанееПодобранные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.Организация = Организация;
	ПараметрыПолучения.НачалоПериода = ДатаПереименования;
	ПараметрыПолучения.ОкончаниеПериода = ПараметрыПолучения.НачалоПериода;
	ПараметрыПолучения.КадровыеДанные = "ВидЗанятости,ФИОПолные";
	ПараметрыПолучения.РаботникиПоДоговорамГПХ = Истина;
	
	ДополнительныеИменаКадровыхДанных = Новый Массив;
	ДополнительныеИменаКадровыхДанных.Добавить("СотрудникиОрганизации.ВидЗанятости КАК ВидЗанятости");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.КонтрактыДоговорыСотрудников") Тогда
		ПараметрыПолучения.КадровыеДанные = ПараметрыПолучения.КадровыеДанные + ",ТрудовойДоговорДатаНачала,ТрудовойДоговорДатаОкончания";
		ДополнительныеИменаКадровыхДанных.Добавить("СотрудникиОрганизации.ТрудовойДоговорДатаНачала КАК ТрудовойДоговорДатаНачала");
		ДополнительныеИменаКадровыхДанных.Добавить("СотрудникиОрганизации.ТрудовойДоговорДатаОкончания КАК ТрудовойДоговорДатаОкончания");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.УчетРабочегоВремениРасширенная") Тогда
		ПараметрыПолучения.КадровыеДанные = ПараметрыПолучения.КадровыеДанные + ",ГрафикРаботы";
		ДополнительныеИменаКадровыхДанных.Добавить("СотрудникиОрганизации.ГрафикРаботы КАК ГрафикРаботы");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота") Тогда
		ПараметрыПолучения.КадровыеДанные = ПараметрыПолучения.КадровыеДанные + ",РаботаетДистанционно";
		ДополнительныеИменаКадровыхДанных.Добавить("СотрудникиОрганизации.РаботаетДистанционно КАК РаботаетДистанционно");
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолучения);
	
	Запрос.УстановитьПараметр("РанееПодобранные", РанееПодобранные);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиОрганизации.Период КАК Период,
		|	СотрудникиОрганизации.Период КАК ДатаМероприятия,
		|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизации.Сотрудник КАК СотрудникЗаписи,
		|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СотрудникиОрганизации.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)) = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЯвляетсяСовместителем,
		|	СотрудникиОрганизации.ВидЗанятости КАК ВидЗанятости
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|ГДЕ
		|	НЕ СотрудникиОрганизации.Сотрудник В (&РанееПодобранные)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникиОрганизации.ФИОПолные,
		|	ЯвляетсяСовместителем";
	
	Если ЗаполнятьПорциями Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ="));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиОрганизации.ВидЗанятости КАК ВидЗанятости",
		СтрСоединить(ДополнительныеИменаКадровыхДанных, "," + Символы.ПС));
	
	КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	СвойстваДоговоров = ЭлектронныеТрудовыеКнижки.СвойстваДоговоровСотрудников(КадровыеДанныеСотрудников);
	
	ДанныеЗаполненияДоговрниковГПХ = Новый Соответствие;
	ДанныеЗаполнения = Новый Массив;
	Для Каждого ВыборкаСотрудника Из КадровыеДанныеСотрудников Цикл
		
		ДанныеСотрудника = ЭлектронныеТрудовыеКнижки.ПустаяСтруктураЗаписиОТрудовойДеятельности();
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ВыборкаСотрудника);
		ДанныеСотрудника.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Переименование;
		
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ЭтотОбъект,
			"Сведения,НаименованиеДокументаОснования,ДатаДокументаОснования,СерияДокументаОснования,НомерДокументаОснования,"
			+ "НаименованиеВторогоДокументаОснования,ДатаВторогоДокументаОснования,СерияВторогоДокументаОснования,"
			+ "НомерВторогоДокументаОснования");
		
		ДанныеПериодовСотрудника = СвойстваДоговоров.Получить(ДанныеСотрудника.Сотрудник);
		Если ДанныеПериодовСотрудника <> Неопределено Тогда
			СвойстваДоговора = ДанныеПериодовСотрудника.Получить(ДанныеСотрудника.ДатаМероприятия);
			Если СвойстваДоговора <> Неопределено Тогда
				ЭлектронныеТрудовыеКнижки.ЗаполнитьДанныеДоговора(ДанныеСотрудника, СвойстваДоговора);
			КонецЕсли;
		КонецЕсли;
		ДанныеЗаполнения.Добавить(ДанныеСотрудника);
		Если Не ЗначениеЗаполнено(ВыборкаСотрудника.ВидЗанятости) Тогда
			ДанныеЗаполненияДоговрниковГПХ.Вставить(ДанныеСотрудника.Сотрудник, ДанныеСотрудника);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеЗаполненияДоговрниковГПХ) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаПереименования", ДатаПереименования);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ДоговрникиГПХ", ОбщегоНазначения.ВыгрузитьКолонку(ДанныеЗаполненияДоговрниковГПХ, "Ключ"));
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МероприятияТрудовойДеятельности.Сотрудник КАК Сотрудник,
			|	МАКСИМУМ(МероприятияТрудовойДеятельности.ДатаМероприятия) КАК ДатаМероприятия,
			|	МероприятияТрудовойДеятельности.Организация КАК Организация
			|ПОМЕСТИТЬ ВТДатыПоследнихМероприятий
			|ИЗ
			|	РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияТрудовойДеятельности
			|ГДЕ
			|	МероприятияТрудовойДеятельности.Организация = &Организация
			|	И МероприятияТрудовойДеятельности.Сотрудник В(&ДоговрникиГПХ)
			|	И МероприятияТрудовойДеятельности.ДатаМероприятия <= &ДатаПереименования
			|
			|СГРУППИРОВАТЬ ПО
			|	МероприятияТрудовойДеятельности.Сотрудник,
			|	МероприятияТрудовойДеятельности.Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДатыПоследнихМероприятий.Сотрудник КАК Сотрудник,
			|	МероприятияТрудовойДеятельности.ТрудоваяФункция КАК ТрудоваяФункция
			|ИЗ
			|	ВТДатыПоследнихМероприятий КАК ДатыПоследнихМероприятий
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияТрудовойДеятельности
			|		ПО ДатыПоследнихМероприятий.Организация = МероприятияТрудовойДеятельности.Организация
			|			И ДатыПоследнихМероприятий.Сотрудник = МероприятияТрудовойДеятельности.Сотрудник
			|			И ДатыПоследнихМероприятий.ДатаМероприятия = МероприятияТрудовойДеятельности.ДатаМероприятия";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеСотрудника = ДанныеЗаполненияДоговрниковГПХ.Получить(Выборка.Сотрудник);
			Если ДанныеСотрудника <> Неопределено Тогда
				ДанныеСотрудника.ТрудоваяФункция = Выборка.ТрудоваяФункция;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеЗаполнения, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти
