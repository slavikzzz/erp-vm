
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриСозданииНаСервереФормыОбъекта(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец БлокировкаИзмененияОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначенияПервоначальногоЗаполнения());
		Если Параметры.Свойство("ОтменяемыеМероприятия") Тогда
			
			ИдентификаторыОтменяемыхМероприятий = ОбщегоНазначения.ВыгрузитьКолонку(
				Параметры.ОтменяемыеМероприятия, "ИдМероприятия", Истина);
			
			Если ИдентификаторыОтменяемыхМероприятий.Количество() > 0 Тогда
				ДобавитьМероприятияИдентификаторов(ИдентификаторыОтменяемыхМероприятий, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	ИспользоватьЗамещение = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПерсонифицированныйУчетРасширенная") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПерсонифицированныйУчетРасширенный");
		ИспользоватьЗамещение = Модуль.ИспользоватьЗамещениеГосударственныхМуниципальныхДолжностей();
	КонецЕсли;
	
	Если Не ИспользоватьЗамещение Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "МероприятияКодПоРееструДолжностей", "Видимость", Ложь);
	КонецЕсли;
	
	ЭлектронныеТрудовыеКнижки.УстановитьУсловноеОформлениеТаблицыМероприятий(ЭтотОбъект, Объект.Организация, Истина, , Объект.Дата);
	УстановитьУсловноеОформлениеТаблицыРедактированияМероприятий();
	
	ЭлектронныеТрудовыеКнижки.ЗаполнитьТипыОснованийУвольненияДляРегистрацииМероприятийТрудовойДеятельности(ТипыОснованийУвольнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Для Каждого ДанныеМероприятия Из ВыбранноеЗначение Цикл
		СтрокаМероприятия = Объект.Мероприятия.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаМероприятия, ДанныеМероприятия);
	КонецЦикла;
	
	Элементы.Мероприятия.ТекущаяСтрока = СтрокаМероприятия.ПолучитьИдентификатор();
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеТаблицыМероприятия(ЭтотОбъект, Объект.Организация, Объект.Мероприятия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	ЭлектронныеТрудовыеКнижки.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет.ЭлектронныеТрудовыеКнижки
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриЧтенииНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект,
		ПравоДоступа("Изменение", Метаданные.Документы.РегистрацияТрудовойДеятельности));
	// Конец БлокировкаИзмененияОбъектов
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец БлокировкаИзмененияОбъектов
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМероприятия

&НаКлиенте
Процедура МероприятияПриАктивизацииСтроки(Элемент)
	
	ПоказыватьКнопкуВыбора = Ложь;
	
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказыватьКнопкуВыбора = Не ЗначениеЗаполнено(ТекущиеДанные.ИдМероприятия);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"МероприятияИдентификатор",
		"КнопкаВыбора",
		ПоказыватьКнопкуВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияСотрудникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
			ТекущиеДанные.СотрудникЗаписи = Неопределено;
		Иначе
			
			Если ЗначениеЗаполнено(ТекущиеДанные.СотрудникЗаписи) Тогда
				
				Если ТекущиеДанные.Сотрудник <> ФизическоеЛицоСотрудника(ТекущиеДанные.СотрудникЗаписи) Тогда
					ТекущиеДанные.СотрудникЗаписи = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекущиеДанные.СотрудникЗаписи) Тогда
				ЗаполнитьСотрудникаЗаписи();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияЯвляетсяСовместителемПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.СотрудникЗаписи = Неопределено;
		ЗаполнитьСотрудникаЗаписи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияВидМероприятияПриИзменении(Элемент)
	
	Если Элементы.Мероприятия.ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
		Если ЗначениеЗаполнено(ВидМероприятияДоРедактирования) Тогда
			
			ИменаДоступныхПолей = ЭлектронныеТрудовыеКнижкиКлиентСервер.ИменаДоступныхПолейВидовМероприятий();
			
			ДоступныеПоляПрежние = ИменаДоступныхПолей.Получить(ВидМероприятияДоРедактирования);
			ДоступныеПоля = ИменаДоступныхПолей.Получить(ТекущиеДанные.ВидМероприятия);
			
			Для Каждого ИмяПоля Из СтрРазделить(ДоступныеПоляПрежние, ",") Цикл
				
				Если СтрНайти(ДоступныеПоля, ИмяПоля) = 0 Тогда
					ТекущиеДанные[ИмяПоля] = Неопределено;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТекущиеДанные.ВидМероприятия <> ПредопределенноеЗначение("Перечисление.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии") Тогда
			ТекущиеДанные.ОписаниеДолжности = "";
		КонецЕсли;
		
		ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеТаблицыМероприятия(ЭтотОбъект, Объект.Организация, Объект.Мероприятия,
			?(ЗначениеЗаполнено(ТекущиеДанные.ДатаМероприятия), ТекущиеДанные.ДатаМероприятия, Объект.Дата));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияДатаОтменыПриИзменении(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеТаблицыМероприятия(ЭтотОбъект, Объект.Организация, Объект.Мероприятия);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияИдентификаторПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И Не ПустаяСтрока(ТекущиеДанные.Идентификатор) Тогда
		
		Попытка
			ТекущиеДанные.ИдМероприятия = Новый УникальныйИдентификатор(ТекущиеДанные.Идентификатор);
		Исключение
			
			ОчиститьСообщения();
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Идентификатор не соответствует формату';
					|en = 'ID does not match the format'"), , "Мероприятия[" + (ТекущиеДанные.НомерСТроки - 1) + "].Идентификатор", "Объект");
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияОснованиеУвольненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ОснованиеУвольнения) Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, СвойстваОснованияУвольнения(ТекущиеДанные.ОснованиеУвольнения));
		Иначе
			ТекущиеДанные.ОснованиеУвольненияТекстОснования = "";
			ТекущиеДанные.ОснованиеУвольненияСтатья = "";
			ТекущиеДанные.ОснованиеУвольненияЧасть = "";
			ТекущиеДанные.ОснованиеУвольненияПункт = "";
			ТекущиеДанные.ОснованиеУвольненияПодпункт = "";
			ТекущиеДанные.ОснованиеУвольненияАбзац = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияОснованиеУвольненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачальноеЗначений = Неопределено;
	Если Элементы.Мероприятия.ТекущиеДанные <> Неопределено Тогда
		НачальноеЗначений = ТипыОснованийУвольнения.НайтиПоЗначению(ТипЗнч(Элементы.Мероприятия.ТекущиеДанные.ОснованиеУвольнения));
	КонецЕсли;
	
	Если ТипыОснованийУвольнения.Количество() = 1 Тогда
		ПриВыбореТипаОснованияУвольнения(ТипыОснованийУвольнения[0]);
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПриВыбореТипаОснованияУвольнения", ЭтотОбъект);
		ПоказатьВыборИзСписка(Оповещение, ТипыОснованийУвольнения, Элемент, НачальноеЗначений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореТипаОснованияУвольнения(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("МножественныйВыбор", Ложь);
		ПараметрыОткрытия.Вставить("ТипОснования", Новый ОписаниеТипов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат.Значение)));
		
		Если Элементы.Мероприятия.ТекущиеДанные <> Неопределено Тогда
			ПараметрыОткрытия.Вставить("ТекущаяСтрока", Элементы.Мероприятия.ТекущиеДанные.ОснованиеУвольнения);
		КонецЕсли;
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораОснованияУвольнения", ПараметрыОткрытия,
			Элементы.МероприятияОснованиеУвольнения, Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияНаименованиеДокументаОснованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияНаименованиеДокументаОснованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		Элементы.Мероприятия.ТекущиеДанные.НаименованиеДокументаОснования, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияНаименованиеДокументаОснованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияНаименованиеВторогоДокументаОснованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияНаименованиеВторогоДокументаОснованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаОбработкаВыбора(
		Элементы.Мероприятия.ТекущиеДанные.НаименованиеВторогоДокументаОснования, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияНаименованиеВторогоДокументаОснованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЭлектронныеТрудовыеКнижкиКлиент.НаименованиеДокументаАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияПодразделениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Подразделение) Тогда
			ТекущиеДанные.ПредставлениеПодразделения = ПредставлениеПодразделения(ТекущиеДанные.Подразделение);
		Иначе
			ТекущиеДанные.ПредставлениеПодразделения = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияДолжностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Должность) Тогда
			СвойстваДолжности = СвойстваДолжности(ТекущиеДанные.Должность);
			ТекущиеДанные.ПредставлениеДолжности = СвойстваДолжности.Представление;
			ТекущиеДанные.КодПоРееструДолжностей = СвойстваДолжности.КодПоРееструДолжностей;
		Иначе
			ТекущиеДанные.ПредставлениеДолжности = "";
			ТекущиеДанные.КодПоРееструДолжностей = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение[0]) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыбранныхСотрудников(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СведенияСтроки = "";
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если НоваяСтрока Тогда
		
		Если Копирование Тогда
			
			ТекущиеДанные.Идентификатор = "";
			ТекущиеДанные.ФиксСтрока = Ложь;
			ТекущиеДанные.ИдМероприятия = Неопределено;
			
		Иначе
			ТекущиеДанные.НаименованиеДокументаОснования = ЭлектронныеТрудовыеКнижкиВызовСервера.НаименованиеДокумента(Объект.Организация);
		КонецЕсли;
		
	Иначе
		
		Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.ВидМероприятия = ПредопределенноеЗначение("Перечисление.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии") Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.РазрядКатегория) Тогда
				СведенияСтроки =
					ОписаниеДолжности(
						ТекущиеДанные.ДатаМероприятия,
						ТекущиеДанные.СотрудникЗаписи,
						ТекущиеДанные.РазрядКатегория);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ИдМероприятия) Тогда
			ТекущиеДанные.Идентификатор = Строка(ТекущиеДанные.ИдМероприятия);
		КонецЕсли;
		
	КонецЕсли;
	
	ВидМероприятияДоРедактирования = ТекущиеДанные.ВидМероприятия;
	Если ТекущиеДанные.ОснованиеУвольнения = Неопределено Тогда
		Если ТипыОснованийУвольнения.Количество() = 1 Тогда
			ТекущиеДанные.ОснованиеУвольнения = ПредопределенноеЗначение("Справочник.ОснованияУвольнения.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьСотрудникаЗаписи();
	
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ВидМероприятия = ПредопределенноеЗначение("Перечисление.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии") Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.РазрядКатегория) Тогда
			НовыеСведенияСтроки = ОписаниеДолжности(
				ТекущиеДанные.ДатаМероприятия,
				ТекущиеДанные.СотрудникЗаписи,
				ТекущиеДанные.РазрядКатегория);
			Если СтрНайти(ТекущиеДанные.Сведения, СведенияСтроки) > 0 Тогда
				ТекущиеДанные.Сведения = СтрЗаменить(
					ТекущиеДанные.Сведения,
					СведенияСтроки,
					НовыеСведенияСтроки);
			ИначеЕсли СтрДлина(ТекущиеДанные.Сведения) = 0 Тогда
				ТекущиеДанные.Сведения = НовыеСведенияСтроки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияПослеУдаления(Элемент)
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеТаблицыМероприятия(ЭтотОбъект, Объект.Организация, Объект.Мероприятия);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияИдентификаторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// БлокировкаИзмененияОбъектов

&НаКлиенте
Процедура Подключаемый_РазблокироватьФормуОбъекта(Команда)
	
	БлокировкаИзмененияОбъектовКлиент.РазблокироватьФормуОбъекта(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

// Конец БлокировкаИзмененияОбъектов

&НаКлиенте
Процедура Подбор(Команда)
	
	СтруктураОтбора = Новый Структура;
	
	КадровыйУчетКлиент.ВыбратьФизическихЛицОрганизации(
		Элементы.Мероприятия,
		Объект.Организация,
		Истина,
		,
		АдресСпискаПодобранныхФизическихЛиц());
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	ДополнительныеПараметры = Новый Структура("Изменение", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПереданногоМероприятияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ЭлектронныеТрудовыеКнижкиКлиент.ОткрытьФормуВыбораОтправленныхСобытийФизическогоЛицаОрганизации(
		Элементы.Мероприятия, Неопределено, Объект.Организация, Объект.Дата, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ДополнительныеПараметры = Новый Структура("Изменение", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПереданногоМероприятияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ЭлектронныеТрудовыеКнижкиКлиент.ОткрытьФормуВыбораОтправленныхСобытийФизическогоЛицаОрганизации(
		Элементы.Мероприятия, Неопределено, Объект.Организация, Объект.Дата, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Переименование(Команда)
	
	ДополнительныеПараметры = Новый Структура("Изменение", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеМероприятиямиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытия = Новый Структура(
		"ДатаПереименования,
		|Сведения,
		|НаименованиеДокументаОснования,
		|ДатаДокументаОснования,
		|СерияДокументаОснования,
		|НомерДокументаОснования,
		|НаименованиеВторогоДокументаОснования,
		|ДатаВторогоДокументаОснования,
		|СерияВторогоДокументаОснования,
		|НомерВторогоДокументаОснования");
	
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ВидМероприятия = ПредопределенноеЗначение("Перечисление.ВидыМероприятийТрудовойДеятельности.Переименование") Тогда
		
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ТекущиеДанные);
	Иначе
		ПараметрыОткрытия.ДатаДокументаОснования = Объект.Дата;
		ПараметрыОткрытия.ДатаПереименования = Объект.Дата;
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("СсылкаНаОбъект", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	
	ОткрытьФорму("Документ.РегистрацияТрудовойДеятельности.Форма.ФормаПереименования",
		ПараметрыОткрытия, Элементы.Мероприятия, Истина, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДо2020Года(Команда)
	
	ДополнительныеПараметры = Новый Структура("Изменение", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеМероприятиямиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СсылкаНаОбъект", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	
	ОткрытьФорму("Документ.РегистрацияТрудовойДеятельности.Форма.ФормаЗаполненияДаннымиНаНачало",
		ПараметрыОткрытия, Элементы.Мероприятия, Истина, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоСотруднику(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	
	ОткрытьФорму("Документ.РегистрацияТрудовойДеятельности.Форма.ФормаПодбораМероприятийПоСотрудникам",
		ПараметрыОткрытия, ЭтотОбъект, Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрироватьВторойДокументОснования(Команда)
	
	РегистрироватьВторойДокументОснования = Не РегистрироватьВторойДокументОснования;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"МероприятияРегистрироватьВторойДокументОснования",
		"Пометка",
		РегистрироватьВторойДокументОснования);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервереБезКонтекста
Функция ЗапрашиваемыеЗначенияПервоначальногоЗаполнения()
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	ЗапрашиваемыеЗначения.Вставить("Ответственный", "Объект.Ответственный");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции

&НаСервере
Функция АдресСпискаПодобранныхФизическихЛиц()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Мероприятия.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьВыбранныхСотрудников(ВыбранныеФизическиеЛица)
	
	ДобавленныеСтроки = Новый Массив;
	СотрудникиЗаписи = Новый Массив;
	Для Каждого ФизическоеЛицо Из ВыбранныеФизическиеЛица Цикл
		
		СтрокаСотрудника = Объект.Мероприятия.Добавить();
		СтрокаСотрудника.Сотрудник = ФизическоеЛицо;
		ДобавленныеСтроки.Добавить(СтрокаСотрудника);
		
		СтрокаСотрудника.СотрудникЗаписи = СотрудникФизическогоЛица(
			СтрокаСотрудника.Сотрудник, Объект.Организация, Объект.Дата, Ложь);
		
		СотрудникиЗаписи.Добавить(СтрокаСотрудника.СотрудникЗаписи);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СотрудникиЗаписи) Тогда
		КадровыеДаннные = ДанныеСотрудников(СотрудникиЗаписи, НачалоДня(Объект.Дата));
		Для Каждого СтрокаСотрудника Из ДобавленныеСтроки Цикл
			КадровыеДаннныеПериодовСотрудника = КадровыеДаннные.Получить(СтрокаСотрудника.СотрудникЗаписи);
			Если КадровыеДаннныеПериодовСотрудника <> Неопределено Тогда
				КадровыеДаннныеСотрудника = КадровыеДаннныеПериодовСотрудника.Получить(НачалоДня(Объект.Дата));
				Если КадровыеДаннныеСотрудника <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаСотрудника, КадровыеДаннныеСотрудника);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеТаблицыМероприятия(ЭтотОбъект, Объект.Организация, Объект.Мероприятия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПереданногоМероприятияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДобавитьПереданныеМероприятия(Результат, ДополнительныеПараметры.Изменение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеМероприятиямиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Объект.Мероприятия.Очистить();
		
		ДанныеЗаполнения = ПолучитьИзВременногоХранилища(Результат);
		Для Каждого ДанныеЗаполненияСотрудника Из ДанныеЗаполнения Цикл
			СтрокаМероприятия = Объект.Мероприятия.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМероприятия, ДанныеЗаполненияСотрудника);
			СтрокаМероприятия.Сотрудник = ДанныеЗаполненияСотрудника.ФизическоеЛицо;
		КонецЦикла;
		
		ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеТаблицыМероприятия(
			ЭтотОбъект, Объект.Организация, Объект.Мероприятия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПереданныеМероприятия(ВыбранноеЗначение, Изменение)
	
	ДобавляемыеИдентификаторы = Новый Массив;
	Для Каждого КлючЗаписи Из ВыбранноеЗначение Цикл
		
		Если Объект.Мероприятия.НайтиСтроки(Новый Структура("ИдМероприятия", КлючЗаписи.ИдМероприятия)).Количество() = 0 Тогда
			ДобавляемыеИдентификаторы.Добавить(КлючЗаписи.ИдМероприятия);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавляемыеИдентификаторы.Количество() > 0 Тогда
		
		ДобавитьМероприятияИдентификаторов(ДобавляемыеИдентификаторы, Изменение);
		
		ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеТаблицыМероприятия(
			ЭтотОбъект, Объект.Организация, Объект.Мероприятия, Объект.Дата);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьМероприятияИдентификаторов(ИдентификаторыМероприятий, Изменение)
	
	ДанныеМероприятий = ЭлектронныеТрудовыеКнижки.МероприятияПоСпискуИдентификаторов(
		Объект.Организация, ИдентификаторыМероприятий);
	
	МероприятияПереводов = Новый Соответствие;
	Для Каждого ДанныеМероприятия Из ДанныеМероприятий Цикл
		
		Если Не ДанныеМероприятия.Отменено Тогда
			
			СтрокаМероприятия = Объект.Мероприятия.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМероприятия, ДанныеМероприятия);
			СтрокаМероприятия.Сотрудник = ДанныеМероприятия.ФизическоеЛицо;
			СтрокаМероприятия.ДатаОтмены = Объект.Дата;
			СтрокаМероприятия.ФиксСтрока = Истина;
			
			Если Изменение Тогда
				СтрокаМероприятия = Объект.Мероприятия.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаМероприятия, ДанныеМероприятия);
				СтрокаМероприятия.Сотрудник = ДанныеМероприятия.ФизическоеЛицо;
				СтрокаМероприятия.ИдМероприятия = Неопределено;
			КонецЕсли;
			
			Если ДанныеМероприятия.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Перевод Тогда
				МероприятияПереводов.Вставить(ДанныеМероприятия.ИдМероприятия, СтрокаМероприятия);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МероприятияПереводов.Количество() > 0 Тогда
		ЭлектронныеТрудовыеКнижки.ЗаполнитьИдентификаторыИсправляемыхПереводов(МероприятияПереводов, Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	РазрядКатегорияВидимость = ЭлектронныеТрудовыеКнижки.РазрядКатегорияВидимость();
	КодПоРееструДолжностейВидимость = ЭлектронныеТрудовыеКнижки.КодПоРееструДолжностейВидимость();
	
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеТаблицыМероприятия(ЭтотОбъект, Объект.Организация, Объект.Мероприятия, Объект.Дата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементов(УправляемаяФорма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"Мероприятия",
		"Доступность",
		ЗначениеЗаполнено(УправляемаяФорма.Объект.Организация));
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеТаблицыМероприятия(
		УправляемаяФорма, УправляемаяФорма.Объект.Организация, УправляемаяФорма.Объект.Мероприятия, УправляемаяФорма.Объект.Дата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СотрудникФизическогоЛица(ФизическоеЛицо, Организация, ДатаСведений, ЯвляетсяСовместителем)
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.Организация = Организация;
	ПараметрыПолучения.НачалоПериода = Макс(ДатаСведений, ЭлектронныеТрудовыеКнижки.ДатаНачалаУчета());
	ПараметрыПолучения.ОкончаниеПериода = ПараметрыПолучения.НачалоПериода;
	ПараметрыПолучения.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ПараметрыПолучения.КадровыеДанные = "ВидЗанятости";
	
	ДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
	
	СтрокаОсновногоСотрудника = Неопределено;
	СтрокаСовместителя = Неопределено;
	
	Для Каждого СтрокаДанныеСотрудников Из ДанныеСотрудников Цикл
		
		Если СтрокаДанныеСотрудников.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
			
			Если СтрокаОсновногоСотрудника = Неопределено Тогда
				СтрокаОсновногоСотрудника = СтрокаДанныеСотрудников;
			КонецЕсли;
			
		ИначеЕсли СтрокаДанныеСотрудников.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда
			
			Если СтрокаОсновногоСотрудника = Неопределено Тогда
				СтрокаОсновногоСотрудника = СтрокаДанныеСотрудников;
			КонецЕсли;
			
			Если СтрокаСовместителя = Неопределено Тогда
				СтрокаСовместителя = СтрокаДанныеСотрудников;
			КонецЕсли;
			
		ИначеЕсли СтрокаДанныеСотрудников.ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда
			
			Если СтрокаСовместителя = Неопределено Тогда
				СтрокаСовместителя = СтрокаДанныеСотрудников;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаОсновногоСотрудника <> Неопределено И СтрокаСовместителя <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаСовместителя <> Неопределено
		И (ЯвляетсяСовместителем Или СтрокаОсновногоСотрудника = Неопределено) Тогда
		
		Возврат СтрокаСовместителя.Сотрудник;
		
	КонецЕсли;
	
	Если СтрокаОсновногоСотрудника = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаОсновногоСотрудника.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда
		ЯвляетсяСовместителем = Истина;
	КонецЕсли;
	
	Возврат СтрокаОсновногоСотрудника.Сотрудник;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеСотрудников(Сотрудники, ПериодКадровыхДанных)
	
	ИменаКадровыхДанных = ЭлектронныеТрудовыеКнижки.ИменаКадровыхДанныхДляФормированияМероприятий();
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, ИменаКадровыхДанных, ПериодКадровыхДанных);
	
	Возврат ЭлектронныеТрудовыеКнижки.СвойстваДоговоровСотрудников(КадровыеДанныеСотрудников);
	
КонецФункции

&НаСервереБезКонтекста
Функция ФизическоеЛицоСотрудника(Сотрудник)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеТаблицыРедактированияМероприятий()
	
	// Вывод представления должности в поле ввода должности
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Объект.Мероприятия.ПредставлениеДолжности");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Мероприятия.ПредставлениеДолжности"));
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияДолжность");
	ОформляемоеПоле.Использование = Истина;
	
	// Вывод представления подразделения в поле ввода подразделения
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Объект.Мероприятия.ПредставлениеПодразделения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Мероприятия.ПредставлениеПодразделения"));
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияПодразделение");
	ОформляемоеПоле.Использование = Истина;
	
	// Сокрытие должности при установлении профессии
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Объект.Мероприятия.ВидМероприятия");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Перечисления.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияДолжность");
	ОформляемоеПоле.Использование = Истина;
	
	// Сокрытие описание должности для всех мероприятий кроме установлении профессии
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Объект.Мероприятия.ВидМероприятия");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение	= Перечисления.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияОписаниеДолжности");
	ОформляемоеПоле.Использование = Истина;
	
	// Редактирование ДатаОтмены только у отменяемых строк
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Объект.Мероприятия.ФиксСтрока");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияДатаОтмены");
	ОформляемоеПоле.Использование = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваДолжности(Должность)
	
	Возврат ЭлектронныеТрудовыеКнижкиПовтИсп.СвойстваДолжности(Должность);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеПодразделения(Подразделение)
	
	Возврат ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеПодразделения(Подразделение);
	
КонецФункции

&НаСервере
Функция СвойстваОснованияУвольнения(ОснованиеУвольнения)
	
	Возврат ЭлектронныеТрудовыеКнижкиПовтИсп.СвойстваОснованияУвольнения(ОснованиеУвольнения);
	
КонецФункции

&НаКлиенте
Функция МероприятияФизическогоЛица(ФизическоеЛицо) Экспорт
	
	ДанныеМероприятий = Новый Массив;
	
	Для Каждого СтрокаМероприятия Из Объект.Мероприятия Цикл
		
		Если СтрокаМероприятия.Сотрудник = ФизическоеЛицо Тогда
			ДанныеМероприятия = Новый Структура("СотрудникЗаписи,ВидМероприятия,ДатаМероприятия");
			ЗаполнитьЗначенияСвойств(ДанныеМероприятия, СтрокаМероприятия);
			ДанныеМероприятий.Добавить(ДанныеМероприятия);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеМероприятий;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСотрудникаЗаписи()
	
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
			ТекущиеДанные.СотрудникЗаписи = Неопределено;
		ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.СотрудникЗаписи) Тогда
			
			ПериодКадровыхДанных = ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаМероприятия), ТекущиеДанные.ДатаМероприятия, Объект.Дата);
			ТекущиеДанные.СотрудникЗаписи = СотрудникФизическогоЛица(
				ТекущиеДанные.Сотрудник, Объект.Организация,
				ПериодКадровыхДанных,
				ТекущиеДанные.ЯвляетсяСовместителем);
			
			КадровыеДаннные = ДанныеСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.СотрудникЗаписи), ПериодКадровыхДанных);
			КадровыеДаннныеПериодовСотрудника = КадровыеДаннные.Получить(ТекущиеДанные.СотрудникЗаписи);
			Если КадровыеДаннныеПериодовСотрудника <> Неопределено Тогда
				КадровыеДаннныеСотрудника = КадровыеДаннныеПериодовСотрудника.Получить(ПериодКадровыхДанных);
				Если КадровыеДаннныеСотрудника <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ТекущиеДанные, КадровыеДаннныеСотрудника);
					Если ТекущиеДанные.ДатаМероприятия < ПерсонифицированныйУчетКлиентСервер.ДатаПостановленияЕФС1_2023() Тогда
						Если ТекущиеДанные.ЯвляетсяСовместителем Тогда
							Если КадровыеДаннныеСотрудника.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.БессрочныйТрудовойДоговор")
								Или КадровыеДаннныеСотрудника.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорДо6Месяцев")
								Или КадровыеДаннныеСотрудника.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорБолее6Месяцев") Тогда
								
								Если КадровыеДаннныеСотрудника.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.БессрочныйТрудовойДоговор") Тогда
									ТекущиеДанные.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.БессрочныйТрудовойДоговорПоСовместительству");
								ИначеЕсли КадровыеДаннныеСотрудника.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорДо6Месяцев") Тогда
									ТекущиеДанные.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорПоСовместительствуДо6Месяцев");
								ИначеЕсли КадровыеДаннныеСотрудника.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорБолее6Месяцев") Тогда
									ТекущиеДанные.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорПоСовместительствуБолее6Месяцев");
								КонецЕсли;
							КонецЕсли;
						Иначе
							Если КадровыеДаннныеСотрудника.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.БессрочныйТрудовойДоговорПоСовместительству")
								Или КадровыеДаннныеСотрудника.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорПоСовместительствуДо6Месяцев")
								Или КадровыеДаннныеСотрудника.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорПоСовместительствуБолее6Месяцев") Тогда
								
								Если КадровыеДаннныеСотрудника.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.БессрочныйТрудовойДоговорПоСовместительству") Тогда
									ТекущиеДанные.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.БессрочныйТрудовойДоговор");
								ИначеЕсли КадровыеДаннныеСотрудника.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорПоСовместительствуДо6Месяцев") Тогда
									ТекущиеДанные.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорДо6Месяцев");
								ИначеЕсли КадровыеДаннныеСотрудника.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорПоСовместительствуБолее6Месяцев") Тогда
									ТекущиеДанные.СрочностьТрудовогоДоговора = ПредопределенноеЗначение("Перечисление.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорБолее6Месяцев");
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеДолжности(ДатаСобытия, Сотрудник, РазрядКатегория)
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(Истина, Сотрудник, "Должность", ДатаСобытия);
		СвойстваДолжности = ЭлектронныеТрудовыеКнижкиПовтИсп.СвойстваДолжности(КадровыеДанные.Должность);
		ПредставлениеДолжности = СвойстваДолжности.Представление;
	Иначе
		ПредставлениеДолжности = "";
	КонецЕсли;
	
	Возврат ЭлектронныеТрудовыеКнижки.СтрокаСведенийПриПрисвоенииРазрядаКатегории(РазрядКатегория, ПредставлениеДолжности);
	
КонецФункции

#КонецОбласти
