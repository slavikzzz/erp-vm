#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

&НаКлиенте
Перем СтрокаДоРедактирования; // см. НовыйСтрокаДоРедактирования 

&НаКлиенте
Перем ФормаМодифицирована; // используется для отработки события изменения модифицированности формы

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыВстраивания = Документы.ЗаказНаРемонт.ДоступныеОстаткиПараметрыВстраивания();
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриСозданииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказНаРемонт) Тогда
		Элементы.ЗакрытьЗаказ.Видимость = Ложь;
		Элементы.МатериалыИРаботыПодобратьТовары.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	АдресДанныеДляПодбораМатериаловПоВидамРемонтов = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	#Область СтандартныеПодсистемы
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);

	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ГиперссылкаФайлов = РаботаСФайлами.ГиперссылкаФайлов();
	ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПараметрыВстраивания = Документы.ЗаказНаРемонт.ДоступныеОстаткиПараметрыВстраивания();
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	
	ПриЧтенииСозданииНаСервере();
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СопоставитьКлючиРемонтовВТабличнойЧасти(ТекущийОбъект.МатериалыИРаботы);
	ТекущийОбъект.СопоставитьКлючиРемонтовВТабличнойЧасти(ТекущийОбъект.Трудозатраты);

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
		ЭтотОбъект,
		ТекущийОбъект,
		ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ОбеспечениеВДокументахСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	УстановитьВидимостьОбеспечения();
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьДанныеИнформацииТаблицыРабочихЦентров();
	ОбновитьСпискиВыбораРемонта();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаРемонт.Форма.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспеченияЗаказов.Форма.Форма" Тогда
		
		
		АдресТаблицыДвижений = ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(
			ВыбранноеЗначение.КодДействия,
			ВыбранноеЗначение.АдресАналитик,
			ВыбранноеЗначение.ПараметрыЗаполнения);
			
		// Возврат управления в форму обработки состояния обеспечения.
		ВыполнитьОбработкуОповещения(ВыбранноеЗначение.ВыполняемоеОповещение, АдресТаблицыДвижений);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВыполняемаяОперация", ВыполняемаяОперация) Тогда
		
		Если ВРег(ВыполняемаяОперация) = ВРег("ПодборРемонтов") Тогда
			
			ОбработкаПодбораРемонтов(ВыбранноеЗначение.Таблицы);
			
		КонецЕсли;
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия" Тогда
		
		РезультатОтмены = СкорректироватьСтрокиЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена неотработанных строк';
											|en = 'Cancel unfulfilled lines'"), , РезультатОтмены.Оповещение);
		
	КонецЕсли;
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.МатериалыИРаботы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗаказНаРемонт", ПараметрыЗаписи, Объект.Ссылка);
	ОбщегоНазначенияУТКлиент.ОповеститьОЗаписиДокументаВЖурнал();
	
	ФормаМодифицирована = Неопределено;
	Подключаемый_ПриИзмененииМодифицированностиФормы();
	ОбеспечениеВДокументахКлиент.ПослеЗаписи(ЭтотОбъект, "Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов");
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("СозданиеКорректировки") Тогда
		
		ДополнительныеПараметры = ПараметрыЗаписи.СозданиеКорректировки;
		
		Если Объект.Проведен Тогда
			
			// Если документ записан впервые, в ОбъектыОснований находится пустая ссылка, нужно актуализировать.
			ОбъектыОснований = Новый Массив();
			ОбъектыОснований.Добавить(Объект.Ссылка);
			
			ДополнительныеПараметры.ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
			ДополнительныеПараметры.ОписаниеКоманды.Вставить("Форма", ЭтотОбъект);
			
			ОбеспечениеВДокументахКлиент.ОткрытьЗаполнениеКорректировкиНазначения(
				ДополнительныеПараметры.Резервирование,
				Объект.Ссылка,
				ДополнительныеПараметры.ОписаниеКоманды);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииМодифицированностиФормы", 1);
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкодыНоменклатуры(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкодыНоменклатуры(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СкрытьПоказатьСтроки(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	АктуализироватьПотреблениеДляДеятельности();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	ХозяйственнаяОперацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектЭксплуатацииПриИзменении(Элемент)
	ОбъектЭксплуатацииПриИзмененииНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	СтатусПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииНаСервере()
	Если Объект.Статус = Перечисления.СтатусыЗаказовНаРемонт.Выполняется
		И Не ЗначениеЗаполнено(Объект.ДатаНачалаФактическая) Тогда
		
		Объект.ДатаНачалаФактическая = ТекущаяДатаСеанса();
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаказовНаРемонт.Закрыт
		И Не ЗначениеЗаполнено(Объект.ДатаЗавершенияФактическая)Тогда
		
		Объект.ДатаЗавершенияФактическая = ТекущаяДатаСеанса();
		
	КонецЕсли;
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТребуетсяОбновитьСпискиВыбораРемонта Тогда
		ОбновитьСпискиВыбораРемонта();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
			И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПотреблениеДляДеятельностиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияПроблемаНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияОтгружаетсяНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонты

&НаКлиенте
Процедура РемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТребуетсяОбновитьСпискиВыбораРемонта = Истина;
		
		Если Копирование Тогда
			ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
			ТекущиеДанные.КодРемонта = 0;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РемонтыПослеУдаления(Элемент)
	
	ТребуетсяОбновитьСпискиВыбораРемонта = Истина;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Ремонты");
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыУзелПриИзменении(Элемент)
	РемонтыУзелПриИзмененииНаСервере(Элементы.Ремонты.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыВидРемонтаПриИзменении(Элемент)
	
	РемонтыВидРемонтаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИРаботы

&НаКлиенте
Процедура МатериалыИРаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЗаказНаРемонт.Форма.ФормаДокумента.Элемент.МатериалыИРаботы.Выбор");
	
	Если Элемент.ТекущийЭлемент = Элементы.МатериалыИРаботыДоступно И Не ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(Неопределено);
		
		Если ПараметрыФормы <> Неопределено Тогда
			ОткрытьФорму("Обработка.ЗапросКоличестваИСерий.Форма", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.МатериалыИРаботы, ЭтотОбъект);
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		
	КонецЕсли;
	
	Если Копирование Тогда
		СтруктураДействий = Новый Структура;
		ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ВариантОбеспечения,Доступно,СкладОбязателен,ДатаОтгрузкиОбязательна");
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.МатериалыИРаботы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "МатериалыИРаботы"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСкладПоНастройкамПередачиМатериалов();
	
	СтруктураДействий = Новый Структура;
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ВариантОбеспечения,ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.МатериалыИРаботы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ВариантОбеспечения,ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "МатериалыИРаботы"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСкладПоНастройкамПередачиМатериалов();
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.МатериалыИРаботы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыКодРемонтаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	МатериалыПриИзмененииКодаРемонта(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.МатериалыИРаботы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.МатериалыИРаботы.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.МатериалыИРаботы.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.МатериалыИРаботы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыКодРемонтаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КодРемонта) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КодРемонта", ТекущиеДанные.КодРемонта);
	СписокСтрок = Объект.Ремонты.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() <> 0 И ЗначениеЗаполнено(СписокСтрок[0].ВидРемонта) Тогда
		ПоказатьЗначение(, СписокСтрок[0].ВидРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыВариантОбеспеченияПриИзменении(Элемент)
	
	Перем ПараметрыФормы;
	Если ОбеспечениеВДокументахКлиент.ОткрытьФормуВыбораСкладаИСерий(ЭтотОбъект) Тогда
		ВариантПолученияПараметров = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия();
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ВариантПолученияПараметров); // вызов сервера
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		ПараметрыФормы,
		"ОбработатьВыборСкладаИСерии",
		Ложь,
		"МатериалыИРаботыВариантОбеспеченияПриИзмененииНаКлиенте");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыВариантОбеспеченияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыВариантОбеспеченияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияОбработкаВыбора(
		ЭтотОбъект,
		Элементы.МатериалыИРаботы.ТекущиеДанные,
		ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыОбособленноПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.МатериалыИРаботы.ТекущиеДанные;
	ОбеспечениеВДокументахКлиент.ОбособленноПриИзменении(СтрокаТаблицы);
	СтруктураДействий = Новый Структура();
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, Неопределено);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимПодборСкладов());
	
	Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыПослеУдаления(Элемент)
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.МатериалыИРаботы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыКодРемонтаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.КодРемонта) Тогда
		СтруктураРемонта = СтруктураРемонта(ТекущиеДанные.КодРемонта, ЭтотОбъект);
		Если СтруктураРемонта = Неопределено Тогда
			СтруктураРемонта = Новый Структура("КодРемонта, ПредставлениеРемонта", 0, "");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочиеЦентры

&НаКлиенте
Процедура РабочиеЦентрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.РабочиеЦентры.ТекущиеДанные;
	
	СтрокаДоРедактирования = НовыйСтрокаДоРедактирования();
	ЗаполнитьЗначенияСвойств(СтрокаДоРедактирования, ТекущиеДанные);
	
	Если НоваяСтрока Тогда
		// При добавлении строки заполнить реквизиты "Дата начала" и "Дата завершения" по данным шапки документа.
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект, "ДатаНачала, ДатаЗавершения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеЦентрыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.РабочиеЦентры.ТекущиеДанные;
	Если Не ОтменаРедактирования
		И Не (СтрокаДоРедактирования.РабочийЦентр = ТекущиеДанные.РабочийЦентр
				И СтрокаДоРедактирования.ДатаНачала = ТекущиеДанные.ДатаНачала
				И СтрокаДоРедактирования.ДатаЗавершения = ТекущиеДанные.ДатаЗавершения) Тогда
		
		ЗаполнитьДанныеИнформацииТаблицыРабочихЦентров(Элементы.РабочиеЦентры.ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеЦентрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранныеДанные = Объект.РабочиеЦентры.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "РабочиеЦентрыКартинкаДоступности"
		И ЗначениеЗаполнено(ВыбранныеДанные.РабочийЦентр) Тогда
		
		Если ВыбранныеДанные.КартинкаДоступности = 1 Тогда
			ТекстПредупреждения = НСтр("ru = 'Для рабочего центра ""%РЦ%"" на указанный период указана доступность.
			|Необходимо согласовать ремонтные работы с графиком доступности рабочего центра';
			|en = 'Availability is specified for the ""%РЦ%"" work center for the given period.
			|Reconcile R&M activities with the work center availability schedule'");
		ИначеЕсли ВыбранныеДанные.КартинкаДоступности = 2 Тогда
			ТекстПредупреждения = НСтр("ru = 'Для рабочего центра ""%РЦ%"" на указанный период запланированы работы.
			|Необходимо согласовать ремонтные работы с графиком производства';
			|en = 'Works are scheduled for the ""%РЦ%"" work center for the specified period.
			|Reconcile R&M activities with the production schedule'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Рабочий центр ""%РЦ%"" на указанный период доступен для ремонтных работ';
										|en = 'Work center ""%РЦ%"" is available for R&M activities within the specified period'");
		КонецЕсли;
		
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%РЦ%", ВыбранныеДанные.РабочийЦентр);
		
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Шапка

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказ(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьЗаказЗавершение", ЭтотОбъект),
			НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?';
				|en = 'To proceed, you need to post the document. Do you want to post the document?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗакрытьЗаказФрагмент();
	
КонецПроцедуры

#КонецОбласти

#Область Ремонты

&НаКлиенте
Процедура РемонтыПодобрать(Команда)
	
	ПараметрыФормы = ПараметрыФормыПодбораРемонтов();
	
	ОткрытьФорму("Документ.ЗаказНаРемонт.Форма.ФормаПодбораРемонтов", 
		ПараметрыФормы, 
		ЭтаФорма,,,, 
		Неопределено, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Ремонты_ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("Ремонты_ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);

КонецПроцедуры

#КонецОбласти

#Область МатериалыИРаботы

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТареРаботе(Ложь)));
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки", Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены", Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Подбор материалов и работ';
												|en = 'Pick materials and works'"));
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Назначение", Объект.Назначение);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения", Истина);
	ПараметрыФормы.Вставить("ДоступныеОстаткиПараметрыДокумента", Неопределено);
	ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам", Истина);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_ЗаполнитьПоРемонтам(Команда)
	
	ПодготовитьДанныеДляПодбораМатериаловПоВидамРемонтов();

	ОписаниеОповещения = Новый ОписаниеОповещения("ПодборМатериаловПоВидамРемонтовЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресДанныеЗаказа", АдресДанныеДляПодбораМатериаловПоВидамРемонтов);	
	ОткрытьФорму("Документ.ЗаказНаРемонт.Форма.ПодборМатериаловПоВидамРемонтов", 
		ПараметрыФормы,, УникальныйИдентификатор,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.МатериалыИРаботы;
	ДанныеТаблицы = Объект.МатериалыИРаботы;
	
	Оповещение = Новый ОписаниеОповещения("МатериалыИРаботыРазбитьСтрокуЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_ОтменитьВыделенныеСтроки(Команда)
	
	ОтменитьВыделенныеСтрокиСтрокиСервер();
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.МатериалыИРаботы, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_ОтменитьНеотработанные(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаРемонт.Форма.ФормаДокумента.Команда.МатериалыИРаботыОтменитьНеотработанные");
	
	РезультатОтмены = ОтменитьНеотработанныеСервер();
	ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена неотработанных строк';
										|en = 'Cancel unfulfilled lines'"), , РезультатОтмены.Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_ЗаполнитьСкладПоНастройке(Команда)
	
	ЗаполнитьСкладПоНастройкамПередачиМатериалов();
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_ЗаполнитьСклад(Команда)

	ВыделенныеСтроки = Элементы.МатериалыИРаботы.ВыделенныеСтроки;
	
	Если СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(Объект, Объект.МатериалыИРаботы, НСтр("ru = 'Материалы и работы';
																												|en = 'Materials and works'"), ВыделенныеСтроки) Тогда
		
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		СтруктураОтбора = Новый Структура("ВыборГруппы, ЭтоГруппа", МассивОтбора, Ложь);
		СтруктураПараметров = Новый Структура("Отбор", СтруктураОтбора);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Материалы_ЗаполнитьСкладЗавершение",
			ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки));
		
		ОткрытьФорму("Справочник.Склады.ФормаВыбора", 
			СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_СкрыватьОтмененныеСтроки(Команда)
	
	СкрытьПоказатьСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаРемонт.ФормаДокумента.Команда.Материалы_ЗагрузитьДанныеИзТСД");
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("Материалы_ЗагрузитьДанныеИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("Материалы_ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура Материалы_ЗаполнитьВидРемонта(Команда)
	
	Если Элементы.МатериалыИРаботы.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать строки в списке, для которых нужно заполнить вид ремонта';
										|en = 'Select the lines in the list that require the R&M work to be filled in'"));
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений();
	
	Для Каждого ДанныеСтроки Из Объект.Ремонты Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ВидРемонта)
			И СписокВыбора.НайтиПоЗначению(ДанныеСтроки.КодРемонта) = Неопределено Тогда
			СписокВыбора.Добавить(ДанныеСтроки.КодРемонта, Строка(ДанныеСтроки.ВидРемонта));
		КонецЕсли;
	КонецЦикла;

	Если СписокВыбора.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо в списке ""Ремонты"" заполнить вид ремонта';
										|en = 'Fill in R&M work in the ""R&M"" list'"));
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("Материалы_ЗаполнитьВидРемонтаЗавершение", ЭтотОбъект);
	СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вид ремонта';
																|en = 'Select R&M work'"));
	
КонецПроцедуры

#КонецОбласти

#Область РабочиеЦентры

&НаКлиенте
Процедура РабочиеЦентрыЗаполнить(Команда)
	
	Если Объект.РабочиеЦентры.Количество() = 0 Тогда
		
		РабочиеЦентрыЗаполнитьНаСервере();
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'В табличной части имеются заполненные строки';
							|en = 'Filled rows are found in the table'");
		ВариантыОтветов = Новый СписокЗначений;
		ВариантыОтветов.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Перезаполнить таблицу';
															|en = 'Refill table'"));
		ВариантыОтветов.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отменить';
																|en = 'Cancel'"));
		
		ПоказатьВопрос(Новый ОписаниеОповещения("РабочиеЦентрыЗаполнитьЗавершение", ЭтотОбъект), ТекстВопроса, ВариантыОтветов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Трудозатраты

&НаКлиенте
Процедура ТрудозатратыЗаполнитьПоРемонтам(Команда)
	
	Если Объект.Трудозатраты.Количество() = 0 Тогда
		
		ЗаполнитьТрудозатратыПоРемонтам();
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'В табличной части имеются заполненные строки';
							|en = 'Filled rows are found in the table'");
		ВариантыОтветов = Новый СписокЗначений;
		ВариантыОтветов.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Перезаполнить таблицу';
															|en = 'Refill table'"));
		ВариантыОтветов.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отменить';
																|en = 'Cancel'"));
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ТрудозатратыЗаполнитьПоРемонтамЗавершение", ЭтотОбъект), ТекстВопроса, ВариантыОтветов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОтменитьВыделенныеСтроки(Команда)
	
	СтруктураОтмененнойСтроки = Новый Структура("Отменено", Истина);
	
	Для Каждого ИдентификаторСтроки Из Элементы.Трудозатраты.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Трудозатраты.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураОтмененнойСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОтменитьНевыполненныеСтроки(Команда)
	
	ПроверятьОстатки = Истина;
	
	Если Не Объект.Проведен Тогда
		
		ТекстВопроса = НСтр("ru = 'Заказ не проведен, оформление работ сотрудников по заказу не запланировано.
							|Будут отменены все строки. Продолжить?';
							|en = 'The order has not been posted, employees'' works have not been scheduled.
							|All lines will be canceled. Continue?'");
							
		ОписаниеОповещения = Новый ОписаниеОповещения("ТрудозатратыОтменитьНевыполненныеСтрокиПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        
        Возврат;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.Создан") Тогда
		
		ТекстВопроса = НСтр("ru = 'Заказ проведен в статусе %Статус%, оформление работ сотрудников по заказу не запланировано.
							|Будут отменены все строки. Продолжить?';
							|en = 'The order is posted with status %Статус%, works for employees have not been planned for this order.
							|All lines will be canceled. Continue?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Статус%", Объект.Статус);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТрудозатратыОтменитьНевыполненныеСтрокиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
        Возврат;
		
	КонецЕсли;
	
	ТрудозатратыОтменитьНевыполненныеСтрокиФрагмент(ПроверятьОстатки);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаКлиенте
Процедура Материалы_ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.МатериалыИРаботы.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.МатериалыИРаботы.Количество() - КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_СкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.МатериалыИРаботы) Тогда
		СкопироватьСтрокиНаСервере();
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.МатериалыИРаботы.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Обеспечение

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.Создан") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.КВыполнению");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Истина, Строка(МинимальныйСтатус));
	ИначеЕсли Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Истина);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru = 'Для резервирования под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?';
							|en = 'To reserve for assignment, it is required to post the document first. Post the document and continue?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ОписаниеКоманды.Вставить("Форма", ЭтотОбъект);
		ОбеспечениеВДокументахКлиент.ОткрытьЗаполнениеКорректировкиНазначения(
			Истина,
			Объект.Ссылка,
			ОписаниеКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.Создан") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.КВыполнению");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Ложь, Строка(МинимальныйСтатус));
	ИначеЕсли Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Ложь);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru = 'Для снятия резерва под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?';
							|en = 'To remove the reserve for assignment, post the document first. Post the document and continue?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ОписаниеКоманды.Вставить("Форма", ЭтотОбъект);
		ОбеспечениеВДокументахКлиент.ОткрытьЗаполнениеКорректировкиНазначения(
			Ложь,
			Объект.Ссылка,
			ОписаниеКоманды);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура МатериалыИРаботыВключитьОбособленноеОбеспечение(Команда)
	
	ОбеспечениеУстановитьДействие("ФЛАГ_ОБОСОБЛЕННО");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыВыключитьОбособленноеОбеспечение(Команда)
	
	ОбеспечениеУстановитьДействие("ФЛАГ_НЕОБОСОБЛЕННО");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыКОбеспечению(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыРезервироватьПоМереПоступления(Команда)
	
	ОбеспечениеУстановитьДействие("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬПОМЕРЕПОСТУПЛЕНИЯ");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыНеОбеспечивать(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыОтгрузить(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_ОТГРУЗИТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыРезервировать(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ");
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
		Команда,
		ЭтотОбъект,
		Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обеспечение

&НаКлиенте
Процедура МатериалыИРаботыВариантОбеспеченияПриИзмененииНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	МатериалыИРаботыВариантОбеспеченияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов()
	
	Ошибка = Ложь;
	Если ОбеспечениеВДокументахКлиент.НужноОбновитьДоступностьПослеЗаписи(ЭтотОбъект,
		"Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов", Ошибка) Тогда
		ОбеспечениеВДокументахКлиент.НастроитьГиперссылкиСостояниеОбеспеченияПослеЗаписи(ЭтотОбъект, Ошибка);
		ОбновлятьКолонку = ОбеспечениеВДокументахКлиент.ОбновлятьКолонкуДоступноПослеРаспределенияЗапасов(ЭтотОбъект);
		Если ОбновлятьКолонку Тогда
			ОбновитьКолонкуДоступноПослеРаспределенияЗапасов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонкуДоступноПослеРаспределенияЗапасов()
	ОбеспечениеВДокументахСервер.ОбновитьДоступностьПослеЗаписи(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораОбеспечения(Режим)
	
	ПараметрыФормы = ОбеспечениеВДокументахСервер.ПараметрыВыбораОбеспечения(
		ЭтотОбъект,
		Элементы.МатериалыИРаботы.ТекущаяСтрока,
		Режим);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий(Режим)
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("МатериалыИРаботы",
			НСтр("ru = 'Материалы и работы';
				|en = 'Materials and works'"));
	ПараметрыПроверки.Поля.Удалить("Склад");
	
	Если Не ОбеспечениеКлиент.ПроверитьЗаполнение(
				Объект,
				Объект.МатериалыИРаботы,
				Элементы.МатериалыИРаботы.ТекущаяСтрока,
				ПараметрыПроверки,
				Неопределено,
				Режим) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения(Режим);
	ПараметрыФормы.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ОчиститьСообщения();	
		Записать(Новый Структура("РежимЗаписи,СозданиеКорректировки", РежимЗаписиДокумента.Проведение, ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыИРаботыВариантОбеспеченияПриИзмененииНаСервере()
	
	Изменения = ОбеспечениеВДокументахСервер.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		Элементы.МатериалыИРаботы.ТекущаяСтрока);
		
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействияНепосредственно();
	ПослеЗаполненияОбеспечения(Изменения, Режим, Неопределено);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(КодДействия, АдресАналитик, ПараметрыЗаполнения)
	
	Модифицированность = Истина;
	Изменения = ОбеспечениеВДокументахСервер.ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(
		КодДействия,
		АдресАналитик,
		ЭтотОбъект);
	
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимСостоянияОбеспечения();
	ПослеЗаполненияОбеспечения(Изменения, Режим, ПараметрыЗаполнения);
	АдресТаблицыДвижений = АдресТаблицыДвиженийВХранилище();
	Возврат АдресТаблицыДвижений;
	
КонецФункции

&НаСервере
Функция АдресТаблицыДвиженийВХранилище()
	
	Возврат ОбеспечениеВДокументахСервер.АдресТаблицыДвиженийВХранилище(ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборСкладаИСерии(ВыбранноеЗначение, ПараметрыФормы) Экспорт
	
	Если Не ОбеспечениеВДокументахКлиент.ЕстьПодобранныеТовары(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = ОбработатьВыборСкладаИСерииНаСервере(ВыбранноеЗначение, ПараметрыФормы);
	ТекстОповещения = ОбеспечениеВДокументахКлиент.ТекстОповещенияОбработкиВыборСкладаИСерии(ПараметрыФормы.Режим);
	ПоказатьОповещениеПользователя(ТекстОповещения, , Оповещение);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыборСкладаИСерииНаСервере(ВыбранноеЗначение, ПараметрыФормы)
	
	Модифицированность = Истина;
	Изменения = ОбеспечениеВДокументахСервер.ПриВыбореСклада(
		ВыбранноеЗначение,
		ЭтотОбъект,
		Элементы.МатериалыИРаботы.ТекущаяСтрока,
		ПараметрыФормы.ЗаполняемыеПоля);
		
	ПослеЗаполненияОбеспечения(Изменения, ПараметрыФормы.Режим);
	ТекстОбработаноСтрок = ОбеспечениеВДокументахСервер.ТекстОбработаноСтрок(Изменения.Количество());
	Возврат ТекстОбработаноСтрок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыДокументаДляДействийОбеспечения(Форма)
	
	ПараметрыДокумента = Новый Структура();
	ПараметрыДокумента.Вставить("Форма",                              Форма);
	ПараметрыДокумента.Вставить("Коллекция",                          Форма.Объект.МатериалыИРаботы);
	ПараметрыДокумента.Вставить("ВариантОбеспеченияИФлагОбособленно", Неопределено);
	
	Возврат ПараметрыДокумента;
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияНажатиеОбщий()
	
	ПараметрыФормы = ОбеспечениеВДокументахКлиент.ГиперссылкаСостояниеОбеспеченияНажатие(ЭтотОбъект);
	
	Если ПараметрыФормы.КонтекстИспользования = "ТАБЛИЦА" Тогда
		
		ПараметрыФормы.АдресТаблицыДвижений = АдресТаблицыДвиженийВХранилище();
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.СостояниеОбеспеченияЗаказов.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, ПоляСтрокой)
	
	ПараметрыДокумента = ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект);
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, ПоляСтрокой)
	
	ПараметрыДокумента = ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект);
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыФормыДокумента()
	
	ПараметрыДокумента = ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект);
	ОбеспечениеВДокументахСервер.ЗаполнитьСлужебныеРеквизитыФормыДокумента(ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Функция ОбеспечениеУстановитьДействие(КодДействия)
	
	Результат = ОбеспечениеВДокументахСервер.ОбеспечениеУстановитьДействиеСтруктураРезультата();
	
	Если КодДействия = "ФЛАГ_ОБОСОБЛЕННО" Или КодДействия = "ФЛАГ_НЕОБОСОБЛЕННО" Тогда
		
		Изменения = ОбеспечениеВДокументахСервер.УстановитьДействиеОбособленно(
			КодДействия,
			ЭтотОбъект,
			Элементы.МатериалыИРаботы.ВыделенныеСтроки);
			
		ОбновитьКолонкуДоступноСервер();
		
	Иначе
		
		Изменения = ОбеспечениеВДокументахСервер.УстановитьДействие(
			КодДействия,
			ЭтотОбъект,
			Элементы.МатериалыИРаботы.ВыделенныеСтроки);
			
		ЗаполнитьЗначенияСвойств(Результат, Изменения);
		
		Если Изменения.ТаблицаИзменений <> Неопределено Тогда
			ПослеЗаполненияОбеспечения(
				Изменения.ТаблицаИзменений,
				ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
				Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбеспечениеУстановитьДействиеСВопросом(КодДействия)
	
	Результат = ОбеспечениеУстановитьДействие(КодДействия);
	
	ВопросЗадан = ОбеспечениеВДокументахКлиент.ПоказатьВопросЗаполнятьОбеспечениеЦелымиУпаковками(
		ЭтотОбъект,
		Объект.МатериалыИРаботы,
		Результат,
		"ПослеВопросаЗаполнятьОбеспечениеЦелымиУпаковками");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаполнятьОбеспечениеЦелымиУпаковками(Ответ, Результат) Экспорт
	
	ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат)
	
	СтруктураРезультата = ОбеспечениеВДокументахСервер.УстановитьДействиеПослеВопроса(Ответ, Результат, ЭтотОбъект);
	ПослеЗаполненияОбеспечения(
		СтруктураРезультата.ТаблицаИзменений,
		ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
		СтруктураРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииМодифицированностиФормы()
	
	Если ФормаМодифицирована <> Модифицированность Тогда
		
		ФормаМодифицирована = Модифицированность;
		ОбеспечениеВДокументахКлиент.НастроитьГиперссылкиСостояниеОбеспечения(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияОбеспечения(Изменения, Режим = Неопределено, ПараметрыЗаполнения = Неопределено)
	
	Документы.ЗаказНаРемонт.ПослеЗаполненияОбеспечения(Объект, Изменения, Режим, ПараметрыЗаполнения);
	
	СтруктураДействий = Новый Структура();
	ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Для Каждого Изменение Из Изменения Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Изменение.Строка, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонкуДоступноСервер()
	
	ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект.МатериалыИРаботы, Элементы.МатериалыИРаботы.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	
	Колонки = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок";
	
	ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, Колонки);
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавленныеСтроки = Новый Массив;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.МатериалыИРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		ДобавленныеСтроки.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	ПослеИзмененияМатериаловИРабот(ДобавленныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("Материалы_ВставитьСтроки");
	МассивЭлементов.Добавить("МатериалыИРаботыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность",
		РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("Материалы_ВставитьСтроки");
	МассивЭлементов.Добавить("МатериалыИРаботыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимПодборСерий());
	Если ПараметрыФормы <> Неопределено Тогда
		
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура Материалы_ЗагрузитьДанныеИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкодыНоменклатуры(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыУзлов(ДанныеШтрихкодов)
	
	Если НЕ ОбработатьШтрихкодыУзловНаСервере(ДанныеШтрихкодов) Тогда
		УправлениеРемонтамиКлиент.СообщитьЧтоНеУдалосьНайтиУзлыПоШтрихкоду();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьШтрихкодыУзловНаСервере(Знач ДанныеШтрихкодов)
	
	ОбъектЭксплуатацииНеЗаполнен = НЕ ЗначениеЗаполнено(Объект.ОбъектЭксплуатации);
	
	ДобавленныеСтроки = УправлениеРемонтами.ДобавитьУзлыПоШтрихкоду(
		ДанныеШтрихкодов, Объект, Объект.Ремонты, "Узел", Объект.ОбъектЭксплуатации);
	
	Если ДобавленныеСтроки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого НоваяСтрока Из ДобавленныеСтроки Цикл
		РемонтыУзелПриИзмененииНаСервере(НоваяСтрока.ПолучитьИдентификатор());
	КонецЦикла;

	Если ОбъектЭксплуатацииНеЗаполнен И ЗначениеЗаполнено(Объект.ОбъектЭксплуатации) Тогда
		ОбъектЭксплуатацииПриИзмененииНаСервере();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкодыНоменклатуры(ДанныеШтрихкодов)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
		
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками);
	
	ПараметрыОбработкиШтрихкодов = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	ПараметрыОбработкиШтрихкодов.Штрихкоды = ДанныеШтрихкодов;
	ПараметрыОбработкиШтрихкодов.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	ПараметрыОбработкиШтрихкодов.СтруктураДействийСИзмененнымиСтроками = СтруктураДействийСИзмененнымиСтроками;
	ПараметрыОбработкиШтрихкодов.ПараметрыУказанияСерий = Неопределено;
	ПараметрыОбработкиШтрихкодов.ТолькоТовары= Истина;
	ПараметрыОбработкиШтрихкодов.ИмяТЧ = "МатериалыИРаботы";
	
	ОбработатьШтрихкодыСервер(ПараметрыОбработкиШтрихкодов, КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(ПараметрыОбработкиШтрихкодов, КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(ПараметрыОбработкиШтрихкодов) Тогда
		
		ТекущиеДанныеИдентификатор = ПараметрыОбработкиШтрихкодов.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры", 0.1, Истина);
			
	КонецЕсли;

	Если ПараметрыОбработкиШтрихкодов.ТекущаяСтрока <> Неопределено Тогда
		Элементы.МатериалыИРаботы.ТекущаяСтрока = ПараметрыОбработкиШтрихкодов.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	
	ДобавитьДействияОбеспеченияНаСервере(
		СтруктураПараметровДействия.СтруктураДействийСДобавленнымиСтроками,
		"ВариантОбеспечения,СкладОбязателен,ДатаОтгрузкиОбязательна");

	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтотОбъект, Объект, СтруктураПараметровДействия, КэшированныеЗначения);
	
	ОбеспечениеВДокументахКлиентСервер.УдалитьДействияОбеспечения(СтруктураПараметровДействия.СтруктураДействийСДобавленнымиСтроками);
	
	ПослеИзмененияМатериаловИРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.МатериалыИРаботы.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура Ремонты_ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкодыУзлов(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкодыНоменклатуры(ДанныхШтрихкода);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если Не ЗначениеЗаполнено(ЕстьПравоДоступаТрудозатраты) Тогда
		ЕстьПравоДоступаТрудозатраты = ЕстьПравоДоступаТрудозатраты();
	КонецЕсли;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ПредставлениеПроизвольногоРемонта = НСтр("ru = '<произвольный ремонт>';
											|en = '<any R&M>'");
	
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьПараметрыОтображения();
	УстановитьВидимость();
	
	ЗаполнитьДанныеИнформацииТаблицыРабочихЦентров();
	
	ТребуетсяОбновитьСпискиВыбораРемонта = Истина;
	ОбновитьСпискиВыбораРемонта();
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаРемонт));
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтотОбъект);
	
	АктуализироватьПотреблениеДляДеятельности(Ложь);
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.МатериалыИРаботы);
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "МатериалыИРаботыСклад", "Объект.МатериалыИРаботы.Склад", "Объект.МатериалыИРаботы.СкладОбязателен");
	
	#Область ПериодВыполненияРемонта
	
	// Незаполненая дата начала ремонта.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачала.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.КВыполнению);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаНачала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Заполненная дата начала ремонта.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачала.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаНачала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачала.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовНаРемонт.Создан;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Незаполненая дата завершения ремонта.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаЗавершения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.КВыполнению);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаЗавершения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Заполненная дата начала ремонта.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаЗавершения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаЗавершения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаЗавершения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовНаРемонт.Создан;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти

	#Область ФактическийПериодВыполненияРемонта
	
	// Незаполненая дата начала ремонта фактическая.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачалаФактическая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаНачалаФактическая");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Заполненная дата начала ремонта фактическая.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачалаФактическая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаНачалаФактическая");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Незаполненная дата завершения ремонта.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаЗавершенияФактическая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовНаРемонт.Закрыт;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаЗавершенияФактическая");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Заполненная дата завершения ремонта.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаЗавершенияФактическая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаЗавершенияФактическая");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	#Область ТабличнаяЧастьРемонты
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыУзел.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВозможнаДетализацияПоУзлам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыУзел.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Ремонты.Узел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Объект.ОбъектЭксплуатации);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыВидРемонта.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Ремонты.ВидРемонта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПредставлениеПроизвольногоРемонта);
	
	#КонецОбласти
	
	#Область ТабличнаяЧастьМатериалыИРаботы
	
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиДобавитьОформлениеКолонкиДоступно(ЭтотОбъект);
	
	ОбеспечениеВДокументахСервер.УстановитьУсловноеОформлениеОбособленно(
		УсловноеОформление,
		Элементы.МатериалыИРаботыОбособленно,
		"Объект.МатериалыИРаботы.ВариантОбеспечения",
		"Объект.МатериалыИРаботы.ТипНоменклатуры");
		
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>';
																|en = '<variants are not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтаФорма,
		"МатериалыИРаботыНоменклатураЕдиницаИзмерения",
		"Объект.МатериалыИРаботы.Упаковка");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыНомерСтроки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыНоменклатура.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыХарактеристика.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыКоличествоУпаковок.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыУпаковка.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыНоменклатураЕдиницаИзмерения.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыВариантОбеспечения.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыКодРемонта.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыКодРемонта.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.КодРемонта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.ПредставлениеРемонта"));
	
	#КонецОбласти
	
	#Область ТабличнаяЧастьТрудозатраты
	
	Если Не ЗначениеЗаполнено(ЕстьПравоДоступаТрудозатраты) Тогда
		ЕстьПравоДоступаТрудозатраты = ЕстьПравоДоступаТрудозатраты();
	КонецЕсли;
	
	Если ЕстьПравоДоступаТрудозатраты Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыБригада.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Создан);
		СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.КВыполнению);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыНомерСтроки.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыБригада.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыВидРабот.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыЕдиницаИзмерения.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыКоличество.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыКодРемонта.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.Отменено");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыКодРемонта.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.КодРемонта");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.ПредставлениеРемонта"));
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Серии
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтаФорма,
		"СерииВсегдаВТЧТовары",
		"МатериалыИРаботыСерия",
		"Объект.МатериалыИРаботы.СтатусУказанияСерий",
		"Объект.МатериалыИРаботы.ТипНоменклатуры");
	
	#КонецОбласти
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПриоритета(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ЗаказНаРемонт.ИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	УстановитьВидимостьОбеспечения();
	
	Элементы.Трудозатраты.Видимость = ЕстьПравоДоступаТрудозатраты;
	
	Если Не Объект.ДоступныТрудозатраты И Объект.Трудозатраты.Количество() = 0 Тогда
		Элементы.Трудозатраты.Видимость = Ложь;
		Элементы.РемонтыСпособОтраженияЗарплаты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОбеспечения()
	
	ЕстьПраво = ОбеспечениеВДокументахСервер.ЕстьПравоПросмотраГиперссылкиСостоянияОбеспечения();
	Элементы.СтраницыГиперссылкаСостояниеОбеспечения.Видимость = ЕстьПраво;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Элементы.СоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
		Элементы.СоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;
	ОбеспечениеВДокументахСервер.НастроитьГиперссылкиСостояниеОбеспечения(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОтображения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектЭксплуатации", Объект.ОбъектЭксплуатации);
	Запрос.Текст=
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Узлы.Ссылка
	|ИЗ
	|	Справочник.УзлыОбъектовЭксплуатации КАК Узлы
	|ГДЕ
	|	Узлы.Владелец = &ОбъектЭксплуатации";
	
	ИспользоватьУзлыОбъектовЭксплуатации = ПолучитьФункциональнуюОпцию("ИспользоватьУзлыОбъектовЭксплуатации");
	
	ВозможнаДетализацияПоУзлам =
		ИспользоватьУзлыОбъектовЭксплуатации
		И ЗначениеЗаполнено(Объект.ОбъектЭксплуатации)
		И Не Запрос.Выполнить().Пустой()
	
КонецПроцедуры

// Обновляет списки выбора ремонта в табличных частях материалов/работ и трудозатрат
// 		по данным табличной части ремонтов.
//
&НаСервере
Процедура ОбновитьСпискиВыбораРемонта()
	
	ШаблонПредставленияРемонта = НСтр("ru = '%НомерСтроки%. %ВидРемонта%';
										|en = '%НомерСтроки%. %ВидРемонта%'");
	Если ВозможнаДетализацияПоУзлам Тогда
		ШаблонПредставленияРемонта = НСтр("ru = '%НомерСтроки%. %ОбъектИлиУзел%, %ВидРемонта%';
											|en = '%НомерСтроки%. %ОбъектИлиУзел%, %ВидРемонта%'");
	КонецЕсли;
	
	СоответствиеРемонтов = Новый Соответствие;
	Элементы.МатериалыИРаботыКодРемонта.СписокВыбора.Очистить();
	Элементы.ТрудозатратыКодРемонта.СписокВыбора.Очистить();
	Для Каждого СтрокаРемонта Из Объект.Ремонты Цикл
		
		Если СтрокаРемонта.КодРемонта = 0 Тогда
			Объект.МаксимальныйКодРемонта = Объект.МаксимальныйКодРемонта + 1;
			СтрокаРемонта.КодРемонта = Объект.МаксимальныйКодРемонта;
		КонецЕсли;
		
		СтруктураРемонта = Новый Структура("ПредставлениеРемонта");
		СтруктураРемонта.ПредставлениеРемонта = СтрЗаменить(ШаблонПредставленияРемонта, "%НомерСтроки%", СтрокаРемонта.НомерСтроки);
		СтруктураРемонта.ПредставлениеРемонта = СтрЗаменить(СтруктураРемонта.ПредставлениеРемонта, "%ОбъектИлиУзел%", ?(ЗначениеЗаполнено(СтрокаРемонта.Узел),СтрокаРемонта.Узел, Объект.ОбъектЭксплуатации));
		СтруктураРемонта.ПредставлениеРемонта = СтрЗаменить(СтруктураРемонта.ПредставлениеРемонта, "%ВидРемонта%", ?(ЗначениеЗаполнено(СтрокаРемонта.ВидРемонта),СтрокаРемонта.ВидРемонта, ПредставлениеПроизвольногоРемонта));
		СоответствиеРемонтов.Вставить(СтрокаРемонта.КодРемонта, СтруктураРемонта);
		
		Элементы.МатериалыИРаботыКодРемонта.СписокВыбора.Добавить(СтрокаРемонта.КодРемонта, СтруктураРемонта.ПредставлениеРемонта);
		Элементы.ТрудозатратыКодРемонта.СписокВыбора.Добавить(СтрокаРемонта.КодРемонта, СтруктураРемонта.ПредставлениеРемонта);
	КонецЦикла;
	
	Ремонты = Новый ФиксированноеСоответствие(СоответствиеРемонтов);
	
	ЗаполнитьПредставленияРемонтовВТабличнойЧасти("МатериалыИРаботы");
	ЗаполнитьПредставленияРемонтовВТабличнойЧасти("Трудозатраты");
	
	ТребуетсяОбновитьСпискиВыбораРемонта = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыделенныеСтрокиСтрокиСервер()
	
	СтруктураОтмененнойСтроки = Новый Структура("Отменено", Истина);
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = Неопределено;
	ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
	Для Каждого ИдентификаторСтроки Из Элементы.МатериалыИРаботы.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.МатериалыИРаботы.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураОтмененнойСтроки);
			
		КонецЕсли;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Функция ОтменитьНевыполненныеСтрокиТрудозатратСервер(Знач ПроверятьОстатки = Ложь)
	
	КоличествоОтмененныхСтрок = Документы.ЗаказНаРемонт.ОтменитьНевыполненныеСтрокиТрудозатрат(Объект, ПроверятьОстатки);
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСкладПоНастройкамПередачиМатериалов()
	
	МассивСтрок = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы.МатериалыИРаботы.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.МатериалыИРаботы.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	
	Документы.ЗаказНаРемонт.ЗаполнитьСкладПоНастройкамПередачиМатериалов(Объект, МассивСтрок);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеИнформацииТаблицыРабочихЦентров(ИдентификаторСтроки=Неопределено)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	(ВЫРАЗИТЬ(ДанныеЗаполнения.НомерСтроки КАК ЧИСЛО)) - 1 КАК ИндексСтроки,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.РабочийЦентр КАК Справочник.РабочиеЦентры) КАК РабочийЦентр,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.ДатаНачала КАК ДАТА) КАК ДатаНачала,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.ДатаЗавершения КАК ДАТА) КАК ДатаЗавершения
		|ПОМЕСТИТЬ РабочиеЦентры
		|ИЗ
		|	&ДанныеЗаполнения КАК ДанныеЗаполнения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РабочиеЦентры.ИндексСтроки КАК ИндексСтроки,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ ДоступностьВидовРабочихЦентров.ЭтоДвижениеВводаДоступности
		|				ТОГДА 2
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КартинкаДоступности
		|ИЗ
		|	РабочиеЦентры КАК РабочиеЦентры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ДоступностьВидовРабочихЦентров
		|		ПО РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра = ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра
		|			И (ДоступностьВидовРабочихЦентров.ДатаИнтервала МЕЖДУ ВЫБОР
		|				КОГДА РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
		|					ТОГДА НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаНачала, ДЕНЬ)
		|				КОГДА РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
		|					ТОГДА НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаНачала, НЕДЕЛЯ)
		|				КОГДА РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
		|					ТОГДА НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаНачала, МЕСЯЦ)
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаНачала, ЧАС)
		|			КОНЕЦ И ВЫБОР
		|				КОГДА РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
		|					ТОГДА НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаЗавершения, ДЕНЬ)
		|				КОГДА РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
		|					ТОГДА НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаЗавершения, НЕДЕЛЯ)
		|				КОГДА РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
		|					ТОГДА НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаЗавершения, МЕСЯЦ)
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаЗавершения, ЧАС)
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочиеЦентры.ИндексСтроки");
	
	МассивСтрок = Неопределено;
	Если ИдентификаторСтроки <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Объект.РабочиеЦентры.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДанныеЗаполнения", Объект.РабочиеЦентры.Выгрузить(МассивСтрок));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = Объект.РабочиеЦентры[Выборка.ИндексСтроки];
		СтрокаТаблицы.КартинкаДоступности = Выборка.КартинкаДоступности;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыПодбораРемонтов()
	
	Если ТребуетсяОбновитьСпискиВыбораРемонта Тогда
		ОбновитьСпискиВыбораРемонта();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектЭксплуатации", Объект.ОбъектЭксплуатации);
	ПараметрыФормы.Вставить("Таблицы", Новый Структура);
	
	ПараметрыФормы.Таблицы.Вставить("Ремонты", ПоместитьВоВременноеХранилище(Объект.Ремонты.Выгрузить(), ЭтаФорма.УникальныйИдентификатор));
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораРемонтов(СтруктураТаблиц)
	
	РемонтыИзПодбора = ПолучитьИзВременногоХранилища(СтруктураТаблиц.Ремонты);
	
	Объект.Ремонты.Загрузить(РемонтыИзПодбора);
	
	ЗаполнитьСтатьюЗатрат(Новый Структура("КодРемонта", 0));
	
	ТребуетсяОбновитьСпискиВыбораРемонта = Истина;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Ремонты");
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеДляПодбораМатериаловПоВидамРемонтов()

	ДанныеЗаказа = Новый Структура;
	ДанныеЗаказа.Вставить("Ремонты", Объект.Ремонты.Выгрузить());
	ДанныеЗаказа.Вставить("МатериалыИРаботы", Объект.МатериалыИРаботы.Выгрузить());

	ПоместитьВоВременноеХранилище(ДанныеЗаказа, АдресДанныеДляПодбораМатериаловПоВидамРемонтов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборМатериаловПоВидамРемонтовЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено
		И ЭтоАдресВременногоХранилища(РезультатЗакрытия) Тогда
		ЗаполнитьМатериалыРаботыПоРемонтам(РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыРаботыПоРемонтам(Знач АдресВыбора)
	
	ТаблицаВыбранныхМатериалов = ПолучитьИзВременногоХранилища(АдресВыбора);
	
	ДобавленныеСтроки = Новый Массив;
	СтрокиКУдалению = Новый Массив;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Упаковка,КодРемонта");
	
	Для Каждого ДанныеСтроки Из ТаблицаВыбранныхМатериалов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
		СписокСтрок = Объект.МатериалыИРаботы.НайтиСтроки(СтруктураПоиска);
		
		Если СписокСтрок.Количество() = 0 Тогда
			
			// Это новые материалы
			
			СтрокаМатериалы = Объект.МатериалыИРаботы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМатериалы, СтруктураПоиска);
			
			СтрокаМатериалы.Количество = ДанныеСтроки.Количество;
			СтрокаМатериалы.КоличествоУпаковок = ДанныеСтроки.КоличествоУпаковок;
		
			ДобавленныеСтроки.Добавить(СтрокаМатериалы);
			
		Иначе
		
			// Материалы есть в заказе
			
			Если ДанныеСтроки.Количество > 0 Тогда
				
				// Пользователь указал нужное количество, нужно в заказе оставить материалы ровно на это количество
				
				НовоеКоличествоУпаковок = ДанныеСтроки.КоличествоУпаковок;
				НовоеКоличество = ДанныеСтроки.Количество;
				
				Для Каждого СтрокаМатериалы Из СписокСтрок Цикл
					
					Если НовоеКоличествоУпаковок <= 0 Тогда
						СтрокиКУдалению.Добавить(СтрокаМатериалы);
						Продолжить
					КонецЕсли;
					
					Если СтрокаМатериалы.КоличествоУпаковок > НовоеКоличествоУпаковок Тогда
						
						СтрокаМатериалы.КоличествоУпаковок = НовоеКоличествоУпаковок;
						СтрокаМатериалы.Количество = НовоеКоличество;
						
						НовоеКоличествоУпаковок = 0;
						НовоеКоличество = 0;
						
					Иначе
						НовоеКоличествоУпаковок = НовоеКоличествоУпаковок - СтрокаМатериалы.КоличествоУпаковок;
						НовоеКоличество = НовоеКоличество - СтрокаМатериалы.Количество;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НовоеКоличествоУпаковок > 0 Тогда
					
					СтрокаМатериалы = Объект.МатериалыИРаботы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаМатериалы, СтруктураПоиска);
					
					СтрокаМатериалы.Количество = НовоеКоличество;
					СтрокаМатериалы.КоличествоУпаковок = НовоеКоличествоУпаковок;
					
					ДобавленныеСтроки.Добавить(СтрокаМатериалы);
					
				КонецЕсли;
			
			Иначе
				
				// Пользователь решил удалить материалы
				
				Для Каждого СтрокаМатериалы Из СписокСтрок Цикл
					СтрокиКУдалению.Добавить(СтрокаМатериалы);
				КонецЦикла;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаМатериалы Из СтрокиКУдалению Цикл
		Объект.МатериалыИРаботы.Удалить(СтрокаМатериалы);
	КонецЦикла;
	
	ЗаполнитьПредставленияРемонтовВТабличнойЧасти("МатериалыИРаботы");
	
	Документы.ЗаказНаРемонт.ЗаполнитьСкладПоНастройкамПередачиМатериалов(Объект);
	
	ПослеИзмененияМатериаловИРабот(ДобавленныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТрудозатратыПоРемонтам()
	
	Объект.Трудозатраты.Очистить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.ВидРемонта КАК Справочник.ВидыРемонтов) КАК ВидРемонта,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.КодРемонта КАК ЧИСЛО) КАК КодРемонта
		|ПОМЕСТИТЬ ДанныеЗаполнения
		|ИЗ
		|	&ДанныеЗаполнения КАК ДанныеЗаполнения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыРемонтовТрудозатраты.ВидРабот,
		|	ВидыРемонтовТрудозатраты.Количество,
		|	ДанныеЗаполнения.КодРемонта КАК КодРемонта
		|ИЗ
		|	ДанныеЗаполнения КАК ДанныеЗаполнения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРемонтов.Трудозатраты КАК ВидыРемонтовТрудозатраты
		|		ПО ДанныеЗаполнения.ВидРемонта = ВидыРемонтовТрудозатраты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеЗаполнения.НомерСтроки");
	
	Запрос.УстановитьПараметр("ДанныеЗаполнения", Объект.Ремонты.Выгрузить( ,"НомерСтроки, ВидРемонта, КодРемонта"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Трудозатраты.Загрузить(Результат.Выгрузить());
	
	ЗаполнитьПредставленияРемонтовВТабличнойЧасти("Трудозатраты");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставленияРемонтовВТабличнойЧасти(ИмяТабличнойЧасти)
	
	СтруктураНеУказанногоРемонта = Новый Структура("КодРемонта, ПредставлениеРемонта", 0, "");
	
	Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
		Если ЗначениеЗаполнено(Строка.КодРемонта) Тогда
			
			СтруктураРемонта = СтруктураРемонта(Строка.КодРемонта, ЭтотОбъект);
			Если СтруктураРемонта = Неопределено Тогда
				СтруктураРемонта = СтруктураНеУказанногоРемонта;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Строка, СтруктураРемонта);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РемонтыВидРемонтаПриИзмененииНаСервере()

	ТребуетсяОбновитьСпискиВыбораРемонта = Истина;

	ЗаполнитьСтатьюЗатрат(Элементы.Ремонты.ТекущаяСтрока);

	НастроитьЗависимыеЭлементыФормыНаСервере("Ремонты");
	
КонецПроцедуры

&НаСервере
Процедура РемонтыУзелПриИзмененииНаСервере(Знач ОтборСтрок = Неопределено)
	
	ЗаполнитьСтатьюЗатрат(ОтборСтрок);
	
КонецПроцедуры

// Заполняет статью затрат табличной части "Ремонты" по настройкам отражения расходов.
//
// Параметры:
// 		ОтборСтрок - Число, Структура - Числовой идентификатор строки к заполнению или структура, по которой должны быть отобраны строки к заполнению.
//
&НаСервере
Процедура ЗаполнитьСтатьюЗатрат(Знач ОтборСтрок = Неопределено)
	
	Если ОтборСтрок <> Неопределено
		И ТипЗнч(ОтборСтрок) = Тип("Число") Тогда
		
		ИдентификаторСтроки = ОтборСтрок;
		
		ОтборСтрок = Новый Массив;
		ОтборСтрок.Добавить(Объект.Ремонты.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДанныеЗаполнения.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(&ОбъектЭксплуатации КАК Справочник.ОбъектыЭксплуатации) КАК ОбъектЭксплуатации,
	|	ВЫРАЗИТЬ(ДанныеЗаполнения.Узел КАК Справочник.УзлыОбъектовЭксплуатации) КАК Узел,
	|	ВЫРАЗИТЬ(ДанныеЗаполнения.ВидРемонта КАК Справочник.ВидыРемонтов) КАК ВидРемонта
	|ПОМЕСТИТЬ ДанныеЗаполнения
	|ИЗ
	|	&ДанныеЗаполнения КАК ДанныеЗаполнения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаполнения.НомерСтроки - 1 КАК ИндексСтроки,
	|	СтатьиРасходов.Ссылка КАК СтатьяРасходов
	|ИЗ
	|	ДанныеЗаполнения КАК ДанныеЗаполнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбщиеВидыРемонтов КАК ОбщиеВидыРемонтов
	|		ПО ДанныеЗаполнения.ВидРемонта.ОбщийВидРемонта = ОбщиеВидыРемонтов.Ссылка
	|			И (ОбщиеВидыРемонтов.ЗаданаСтатьяРасходов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УзлыОбъектовЭксплуатации КАК Узлы
	|		ПО ДанныеЗаполнения.Узел = Узлы.Ссылка
	|			И (Узлы.СтатьяРасходов <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО (СтатьиРасходов.Ссылка = ЕСТЬNULL(ОбщиеВидыРемонтов.СтатьяРасходов, ЕСТЬNULL(Узлы.СтатьяРасходов, ДанныеЗаполнения.ОбъектЭксплуатации.СтатьяРасходов)))
	|ГДЕ
	|	СтатьиРасходов.РасходыНаЗаказыНаРемонт
	|		ИЛИ СтатьиРасходов.РасходыНаОбъектыЭксплуатации";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДанныеЗаполнения", Объект.Ремонты.Выгрузить(ОтборСтрок));
	Запрос.УстановитьПараметр("ОбъектЭксплуатации", Объект.ОбъектЭксплуатации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.Ремонты[Выборка.ИндексСтроки], Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РабочиеЦентрыЗаполнитьНаСервере()
	
	Объект.РабочиеЦентры.Очистить();
	
	Если Объект.Ремонты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРемонтыОбъектаЭксплуатации = Объект.Ремонты.НайтиСтроки(Новый Структура("Узел", Справочники.УзлыОбъектовЭксплуатации.ПустаяСсылка())).Количество()<>0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УзлыОбъектовЭксплуатации.Владелец КАК ОбъектЭксплуатации
		|ПОМЕСТИТЬ ОбъектПоУзлам
		|ИЗ
		|	Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
		|ГДЕ
		|	УзлыОбъектовЭксплуатации.Ссылка В(&МассивУзлов)
		|	И УзлыОбъектовЭксплуатации.ВлияетНаДоступностьРЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РабочиеЦентры.РабочийЦентр,
		|	&ДатаНачала КАК ДатаНачала,
		|	&ДатаЗавершения КАК ДатаЗавершения
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации.РабочиеЦентры КАК РабочиеЦентры
		|ГДЕ
		|	(РабочиеЦентры.Ссылка = &ОбъектЭксплуатации
		|				И &ЕстьРемонтыОбъектаЭксплуатации
		|			ИЛИ РабочиеЦентры.Ссылка В
		|				(ВЫБРАТЬ
		|					ОбъектПоУзлам.ОбъектЭксплуатации
		|				ИЗ
		|					ОбъектПоУзлам КАК ОбъектПоУзлам))");
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаЗавершения", Объект.ДатаЗавершения);
	
	Запрос.УстановитьПараметр("ОбъектЭксплуатации", Объект.ОбъектЭксплуатации);
	Запрос.УстановитьПараметр("МассивУзлов", ?(ЕстьРемонтыОбъектаЭксплуатации, Новый Массив, Объект.Ремонты.Выгрузить(, "Узел").ВыгрузитьКолонку("Узел")));
	Запрос.УстановитьПараметр("ЕстьРемонтыОбъектаЭксплуатации", ЕстьРемонтыОбъектаЭксплуатации);
	
	Объект.РабочиеЦентры.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ЗаполнитьДанныеИнформацииТаблицыРабочихЦентров();
	
КонецПроцедуры

// Дополняет структуру действиями при изменении количества упаковок
//
&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПравоДоступаТрудозатраты()
	
	Возврат (
		ПравоДоступа("Чтение", Метаданные.Справочники.Бригады)
		И ПравоДоступа("Чтение", Метаданные.Справочники.ВидыРаботСотрудников));
	
КонецФункции

&НаСервере
Функция ОтменитьНеотработанныеСервер()
	
	СтруктураКорректировкиСтрокЗаказа = ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа();
	СтруктураКорректировкиСтрокЗаказа.ОтменитьНеотработанныеСтроки = Истина;
	СтруктураКорректировкиСтрокЗаказа.ИмяТабличнойЧасти = "МатериалыИРаботы";
	
	Возврат СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
	
КонецФункции

&НаСервере
Функция СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров)
	
	ЗаказОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураДополнительныхПараметров.ПроверятьОстатки = ЗаказОбъект.Статус <> Перечисления.СтатусыЗаказовНаРемонт.Создан;
	
	СтруктураРезультата = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров);
	
	Если СтруктураДополнительныхПараметров.ЗакрыватьЗаказы Тогда
		ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовНаРемонт.Закрыт;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ЗаказОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьПредставленияРемонтовВТабличнойЧасти("МатериалыИРаботы");
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	ОбновитьКолонкуДоступноСервер();
	
	Модифицированность = Истина;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Ремонты")
		ИЛИ ОбновитьВсе Тогда
		
		СписокВидовРемонтов = Новый Массив;
		Для каждого ДанныеСтроки Из Объект.Ремонты Цикл
			Если ЗначениеЗаполнено(ДанныеСтроки.ВидРемонта)
				И СписокВидовРемонтов.Найти(ДанныеСтроки.ВидРемонта) = Неопределено Тогда
				СписокВидовРемонтов.Добавить(ДанныеСтроки.ВидРемонта);
			КонецЕсли; 
		КонецЦикла;
		
		Если СписокВидовРемонтов.Количество() <> 0 Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВидыРемонтов.ОбщийВидРемонта КАК ОбщийВидРемонта
			|ИЗ
			|	Справочник.ВидыРемонтов КАК ВидыРемонтов
			|ГДЕ
			|	ВидыРемонтов.Ссылка В (&СписокВидовРемонтов)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидыРемонтов.ОбщийВидРемонта.Наименование";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("СписокВидовРемонтов", СписокВидовРемонтов);
			
			ДоступныеОбщиеВидыРемонтов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбщийВидРемонта");
			Элементы.ОбщийВидРемонта.СписокВыбора.ЗагрузитьЗначения(ДоступныеОбщиеВидыРемонтов);
			Элементы.ОбщийВидРемонта.РежимВыбораИзСписка = Истина;
			
			Если НЕ ОбновитьВсе
				И ДоступныеОбщиеВидыРемонтов.Найти(Объект.ОбщийВидРемонта) = Неопределено Тогда
				Если ДоступныеОбщиеВидыРемонтов.Количество() = 1 Тогда
					Объект.ОбщийВидРемонта = ДоступныеОбщиеВидыРемонтов[0];
				Иначе
					Объект.ОбщийВидРемонта = Неопределено;
				КонецЕсли;
			КонецЕсли; 
			
		Иначе
			Элементы.ОбщийВидРемонта.СписокВыбора.Очистить();
			Элементы.ОбщийВидРемонта.РежимВыбораИзСписка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",            Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",                    Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.МатериалыИРаботы, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииНаСервере()
	
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельности(ЭтотОбъект);
	ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);
	АктуализироватьПотреблениеДляДеятельности();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	АктуализироватьПотреблениеДляДеятельности();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьПодчиненныеРеквизитыОбъекта(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	ДобавленныеСтроки = Новый Массив;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.МатериалыИРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара,
			"Номенклатура,Характеристика,ХарактеристикиИспользуются,Упаковка,КоличествоУпаковок,Склад,
			|ВариантОбеспечения,Обособленно,Серия");
		ДобавленныеСтроки.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	ПослеИзмененияМатериаловИРабот(ДобавленныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияМатериаловИРабот(ДобавленныеСтроки = Неопределено)

	Если ДобавленныеСтроки <> Неопределено Тогда
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
		ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
		
		Для Каждого ТекущаяСтрока Из ДобавленныеСтроки Цикл
			
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВариантОбеспечения) Тогда
				ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "ВариантОбеспечения");
			КонецЕсли;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЦикла;
	
	КонецЕсли;

	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьПотреблениеДляДеятельности(Заполнить = Истина)
	
	ПараметрыЗаполнения = Документы.ЗаказНаРемонт.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ПотреблениеДляДеятельности, 
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ПотреблениеДляДеятельности,
		Объект.ПотреблениеДляДеятельности,
		ПараметрыЗаполнения, 
		УчетНДСКэшированныеЗначенияПараметров);
		
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЗаполнитьПоРемонтамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ЗаполнитьТрудозатратыПоРемонтам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОтменитьНевыполненныеСтрокиПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    ПроверятьОстатки = Ложь;
    
    Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ТрудозатратыОтменитьНевыполненныеСтрокиФрагмент(ПроверятьОстатки);

КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОтменитьНевыполненныеСтрокиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    ПроверятьОстатки = Ложь;
    
    Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ТрудозатратыОтменитьНевыполненныеСтрокиФрагмент(ПроверятьОстатки);

КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОтменитьНевыполненныеСтрокиФрагмент(Знач ПроверятьОстатки)
    
    Перем КоличествоСтрокОтменено;
    
    КоличествоСтрокОтменено = ОтменитьНевыполненныеСтрокиТрудозатратСервер(ПроверятьОстатки);
    
    Если КоличествоСтрокОтменено = 0 Тогда
        
        ПоказатьОповещениеПользователя(
        НСтр("ru = 'Строки не отменены';
			|en = 'Lines were not canceled'"),
        ,
        НСтр("ru = 'По всем строкам оформлены документы. Строки не могут быть отменены';
			|en = 'The documents are registered for all rows. Rows cannot be canceled'"),
        БиблиотекаКартинок.Информация32);
        
    Иначе
        
        Если ПроверятьОстатки Тогда
            
            ПоказатьОповещениеПользователя(
            НСтр("ru = 'Строки отменены';
				|en = 'Lines were canceled'"),
            ,
            НСтр("ru = 'Все неоформленные строки отменены';
				|en = 'All pending lines are canceled'"),
            БиблиотекаКартинок.Информация32);
            
        Иначе
            
            ПоказатьОповещениеПользователя(
            НСтр("ru = 'Строки отменены';
				|en = 'Lines were canceled'"),
            ,
            НСтр("ru = 'Все строки отменены.';
				|en = 'All items are canceled.'"),
            БиблиотекаКартинок.Информация32);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РабочиеЦентрыЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		РабочиеЦентрыЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыРазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
			
	НоваяСтрока.КодСтроки = 0;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий,"ОбновитьКэшНоменклатура");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказФрагмент()
	
	СписокЗаказовКЗакрытию = Новый СписокЗначений;
	СписокЗаказовКЗакрытию.Добавить(Объект.Ссылка);
	
	СтруктураЗакрытия = Новый Структура;
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказовКЗакрытию);
	СтруктураЗакрытия.Вставить("ДокументИнициатор",            Объект.Ссылка);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьЗаказФрагмент();
	
КонецПроцедуры

// 
// Возвращаемое значение:
// 	Структура - Описание:
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// * ДатаНачала - Дата -
// * ДатаЗавершения - Дата -
&НаКлиенте
Функция НовыйСтрокаДоРедактирования()
	Возврат Новый Структура("РабочийЦентр, ДатаНачала, ДатаЗавершения");
КонецФункции

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииНаСервере()
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура ОбъектЭксплуатацииПриИзмененииНаСервере()
	
	Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОбъектЭксплуатации, "РемонтирующееПодразделение");
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Объект.Подразделение = Подразделение;
	КонецЕсли;
	
	ЗаполнитьПараметрыОтображения();
	ОбновитьСпискиВыбораРемонта();
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_ЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если НЕ ЗначениеЗаполнено(Результат) Тогда
    	Возврат;
	КонецЕсли;
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
 	ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, Результат);
    СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(Результат, ЗаполненоСтрок, ВыделенныеСтроки.Количество());

КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Знач Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.МатериалыИРаботы, МассивВыделенныхСтрок, Склад);
	
	Если ЗаполненоСтрок > 0 Тогда
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	КонецЕсли;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьПоказатьСтроки(Форма)
	
	Элементы = Форма.Элементы;
	Форма.СкрыватьОтмененныеСтроки = Не Форма.СкрыватьОтмененныеСтроки;
	
	Если Форма.СкрыватьОтмененныеСтроки Тогда
		Элементы.МатериалыИРаботы.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.МатериалыИРаботы.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.Материалы_СкрыватьОтмененныеСтроки.Пометка = Форма.СкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_ЗаполнитьВидРемонтаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Элементы.МатериалыИРаботы.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Объект.МатериалыИРаботы.НайтиПоИдентификатору(ТекущаяСтрока);
		ТекущиеДанные.КодРемонта = ВыбранныйЭлемент.Значение;
		МатериалыПриИзмененииКодаРемонта(ТекущиеДанные);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриИзмененииКодаРемонта(ТекущиеДанные)

	Если ЗначениеЗаполнено(ТекущиеДанные.КодРемонта) Тогда
		СтруктураРемонта = СтруктураРемонта(ТекущиеДанные.КодРемонта, ЭтотОбъект);
		Если СтруктураРемонта = Неопределено Тогда
			СтруктураРемонта = Новый Структура("КодРемонта, ПредставлениеРемонта", 0, "");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураРемонта(КодРемонта, Форма)
	
	РемонтыСоответствие = Форма.Ремонты; // ФиксированноеСоответствие
	
	СтруктураРемонта = РемонтыСоответствие.Получить(КодРемонта); // Структура
	
	Возврат СтруктураРемонта;
	
КонецФункции

#КонецОбласти

#КонецОбласти
