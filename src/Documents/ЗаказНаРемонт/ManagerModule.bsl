#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Формирует представление объекта метаданных на основном языке.
// Возвращаемое значение:
// Строка - Представление объекта метаданных на основном языке.
//
Функция ПредставлениеОбъектаНаОсновномЯзыке() Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
	ПредставлениеОбъекта = НСтр(
		"ru = 'Заказ на ремонт';
		|en = 'R&M order'",
		КодОсновногоЯзыка);
		
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - Структура - описание реквизитов, для которых необходимо получить значения по статистике
//
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов,
		"Организация, Подразделение", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Организация, Подразделение";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "Ответственный", Параметры);
	
КонецПроцедуры

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ВнутреннееТовародвижение");
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("Производство");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("УправлениеРемонтами");
	МеханизмыДокумента.Добавить("АдресныйСклад");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура:
//     * Ключ - Строка - Имя таблицы.
//     * Значение - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаказНаРемонт") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		ТекстЗапросаТаблицаЗаказыНаВнутреннееПотребление(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПланРемонтов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПериодыАктуальностиОбъектовЭксплуатации(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРемонтыРабочихЦентров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);
	
	ТаблицыДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
	Возврат ТаблицыДвижений;
	
КонецФункции

#КонецОбласти

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = Документы.ВыработкаСотрудников.ДобавитьКомандуСоздатьНаОснованииСозданиеВыработкиСотрудников(КомандыСозданияНаОсновании);
	Если Не Команда = Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ДоступныТрудозатраты", Истина, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Документы.ВнутреннееПотребление.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании);
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.ЗаказНаПроизводство2_2.ДобавитьКомандуСоздатьОбеспечивающийЗаказ(КомандыСозданияНаОсновании);
	Обработки.ФормированиеЗаказовНаПередачуВПроизводствоНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСозданияНаОсновании);
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ЗаказНаРемонтЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

// Добавляет команду создания документа "Заказ на ремонт".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная команда
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт

	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаРемонт) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаказНаРемонт.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаказНаРемонт);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеРемонтами";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КомандаОтчет = Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуСостояниеВыполненияВнутреннихРаспоряжений(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает реквизиты, зависимые от хозяйственной операции документа.
//
// Параметры:
//  ХозяйственнаяОперация	 - ПеречислениеСсылка.ХозяйственныеОперации	 - Ссылка на текущую операцию
//  МассивВсехРеквизитов	 - Массив									 - Массив реквизитов документа
//  МассивРеквизитовОперации - Массив									 - Массив реквизитов операции.
//
// Возвращаемое значение:
//  Массив - Массив реквизитов хозяйственной операции.
//
Функция ИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Ремонты.СтатьяРасходов");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.Ремонт Тогда
		
		МассивРеквизитовОперации.Добавить("Ремонты.СтатьяРасходов");
		
	КонецЕсли;
	
	Возврат МассивРеквизитовОперации;
	
КонецФункции

// Отменяет все строки, по которым не было документальное оформленение работ сотрудников.
//
// Параметры:
// 		Документ - ДокументОбъект.ЗаказНаРемонт, ДанныеФормыСтруктура - документ, в котором необходимо отменить непоставленные материалы и невыполненные работы
// 		ПроверятьОстатки  - Булево - признак, указывающий на необходимость запроса для проверки остатков.
//
// Возвращаемое значение:
// 		Число - Количество отмененных строк.
//
Функция ОтменитьНевыполненныеСтрокиТрудозатрат(Документ, Знач ПроверятьОстатки = Истина) Экспорт
	
	КоличествоОтмененныхСтрок = 0;
	Таблица = Документ.Трудозатраты;
	
	СвойстваОтмененнойСтроки = Новый Структура(
		"Отменено",
		Истина);
	
	Если Не ПроверятьОстатки Тогда
		Для н = 0 По Таблица.Количество() - 1 Цикл
			Если Не Таблица[н].Отменено Тогда
				ЗаполнитьЗначенияСвойств(Таблица[н], СвойстваОтмененнойСтроки);
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказыОстатки.ВидРабот КАК ВидРабот,
	|	ЗаказыОстатки.Исполнитель КАК Бригада,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(, Распоряжение = &ЗаказНаРемонт) КАК ЗаказыОстатки
	|ГДЕ
	|	ЗаказыОстатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ВидРабот,
	|	ЗаказыОстатки.Исполнитель");
	
	Запрос.УстановитьПараметр("ЗаказНаРемонт", Документ.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Пустой() Тогда
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	Остатки = Результат.Выгрузить();
	
	СчетСтрок = 0;
	СтруктураПоискаПоОстаткам = Новый Структура("ВидРабот, Бригада");
	Пока СчетСтрок < Таблица.Количество() Цикл
		
		Строка = Таблица[СчетСтрок];
		
		Если Строка.Отменено Тогда
			СчетСтрок = СчетСтрок + 1;
			Продолжить;
		КонецЕсли;
		
		Остаток = 0;
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоОстаткам, Строка);
		НайденныеОстатки = Остатки.НайтиСтроки(СтруктураПоискаПоОстаткам);
		Если НайденныеОстатки.Количество() <> 0 Тогда
			Остаток = НайденныеОстатки[0].КоличествоОстаток;
		КонецЕсли;
		
		Если Остаток > 0 Тогда
			
			Если Остаток >= Строка.Количество Тогда
				Остаток = Остаток - Строка.Количество;
				ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
			Иначе
				НоваяСтрока = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваОтмененнойСтроки);
				
				Строка.Количество = Строка.Количество - Остаток;
				
				НоваяСтрока.Количество = Остаток;
				
				Остаток = 0;
			КонецЕсли;
			
			КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			
			НайденныеОстатки[0].КоличествоОстаток = Остаток;
			
		КонецЕсли;
		
		СчетСтрок = СчетСтрок + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

// Заполняет поле "Склад" в табличной части материалов и работ по данным настройки передачи материалов.
//
// Параметры:
// 		Документ - ДанныеФормыКоллекция, ДокументОбъект.ЗаказНаРемонт - Документ, в котором необходимо заполнить колонку склад табличной части материалов и работ
// 		Строки - Массив - Массив строк табличной части, в которых необходимо заполнить колонку "Склад".
//
Процедура ЗаполнитьСкладПоНастройкамПередачиМатериалов(Документ, Строки=Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	(ВЫРАЗИТЬ(ДанныеЗаполнения.НомерСтроки КАК ЧИСЛО)) - 1 КАК ИндексСтроки,
	|	ВЫРАЗИТЬ(ДанныеЗаполнения.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ДанныеЗаполнения.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика
	|ПОМЕСТИТЬ ДанныеЗаполнения
	|ИЗ
	|	&ДанныеЗаполнения КАК ДанныеЗаполнения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаполнения.ИндексСтроки,
	|	ВЫБОР
	//++ Устарело_Производство21
	|		КОГДА &ТекстПолеОснование = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
	|			ТОГДА &ТекстПоляСкладМатериалов
	|		КОГДА ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	//-- Устарело_Производство21
	|		КОГДА ИСТИНА
	|			ТОГДА &ТекстПоляСкладМатериалов
	|	КОНЕЦ КАК Склад
	|ИЗ
	|	ДанныеЗаполнения КАК ДанныеЗаполнения
	|		,ТекстСоединенияНастройкиПередачиМатериалов";
		
	ТекстЗапросаДляПолученияСклада = ОбеспечениеПроизводства.ТекстЗапросаНастройкиПередачиМатериалов(
										"ДанныеЗаполнения", 
										"&Подразделение",
										ОбеспечениеПроизводства.ВариантЗаполненияОбеспеченияПоВерсииПроизводства());
										
	ТекстЗапроса = СтрЗаменить(
						ТекстЗапроса, 
						",ТекстСоединенияНастройкиПередачиМатериалов",
						ТекстЗапросаДляПолученияСклада.ТекстСоединения);
						
	ТекстЗапроса = СтрЗаменить(
						ТекстЗапроса, 
						"&ТекстПоляСкладМатериалов",
						ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
	
	//++ Устарело_Производство21	
	ТекстЗапроса = СтрЗаменить(
						ТекстЗапроса, 
						"&ТекстПолеОснование",
						ТекстЗапросаДляПолученияСклада.ТекстПолеОснование);
	//-- Устарело_Производство21					
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДанныеЗаполнения", Документ.МатериалыИРаботы.Выгрузить(Строки));
	Запрос.УстановитьПараметр("Подразделение", Документ.Подразделение);
	Запрос.УстановитьПараметр("СкладПоУмолчанию", Справочники.Склады.СкладПоУмолчанию());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Документ.МатериалыИРаботы[Выборка.ИндексСтроки], Выборка);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Дата";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
// 		Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
// Возвращаемое значение:
// 		Структура - Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЗаказНаРемонт";
	ПараметрыУказанияСерий.ИмяТЧСерии = "МатериалыИРаботы";
		
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура());
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура());
		
	ПараметрыУказанияСерий.ИмяТЧТовары = "МатериалыИРаботы";
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды);
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	ПараметрыУказанияСерий.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//	ЗначенияПолейДляОпределенияРаспоряжения - Структура - состав полей определяется значением
//		поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа.
//
// Возвращаемое значение:
// 		ДокументСсылка.ЗаказНаРемонт - Ссылка на заказ.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	
	Возврат ЗначенияПолейДляОпределенияРаспоряжения.Ссылка;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
// 		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
// Возвращаемое значение:
// 		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.Отменено,
	|	Товары.ВариантОбеспечения,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает таблицу для товаров документа для механизма создания на основании обеспечивающиего заказа.
//
// Параметры:
//  Ссылка - ДокументСсылка.ЗаказНаРемонт - документ, по которому нужно получить товары
//  ПараметрыСоздания - см. ОбеспечениеВДокументахСервер.ПараметрыОтбораТоваровДляСозданияОбеспечивающиегоЗаказа
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц в котором будет создана таблица с колонками:
//   * НомерСтроки - Число - номер строки
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика
//   * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка
//   * Склад - СправочникСсылка.Склады - склад
//   * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение
//   * Назначение - СправочникСсылка.Назначения - назначение
//   * ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - вариант обеспечения
//   * Обособленно - Булево - обособленно
//   * КоличествоЕдиниц - Число - количество единиц
//   * КоличествоПоДокументу - Число - количество упаковок
Процедура ТоварыДокументаДляСозданияОбеспечивающегоЗаказа(Ссылка, ПараметрыСоздания, МенеджерВременныхТаблиц) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Статус,Проведен");
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	
	ЕстьОшибкиСтатус = Истина;
	Для Каждого Элемент Из МассивДопустимыхСтатусов Цикл
		Если Реквизиты.Статус = Элемент Тогда
			ЕстьОшибкиСтатус = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Ссылка,
		Реквизиты.Статус,
		Не Реквизиты.Проведен,
		ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипыНоменклатуры", ПараметрыСоздания.ТипыНоменклатуры);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.Склад КАК Склад,
		|	Товары.Ссылка.Подразделение КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Товары.Обособленно
		|			ТОГДА Товары.Ссылка.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ КАК Назначение,
		|	Товары.ВариантОбеспечения КАК ВариантОбеспечения,
		|	Товары.Обособленно КАК Обособленно,
		|	Товары.Ссылка.ДатаНачала КАК ДатаОтгрузки,
		|	Товары.Количество КАК КоличествоЕдиницПоДокументу,
		|	Товары.КоличествоУпаковок КАК КоличествоПоДокументу
		|ПОМЕСТИТЬ ТоварыДокумента
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|		И НЕ Товары.Отменено
		|		И Товары.Номенклатура.ТипНоменклатуры В(&ТипыНоменклатуры)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРОК ПРИ СМЕНЕ СТАТУСА

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
// 		МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
// 		НовыйСтатус - Строка - Имя нового статуса
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
// 		Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовНаРемонт[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Остатки.ЗаказНаВнутреннееПотребление КАК Заказ
		|ПОМЕСТИТЬ втОстаткиПоНоменклатуре
		|ИЗ
		|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(, ЗаказНаВнутреннееПотребление В (&МассивДокументов)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.ЗаказНаВнутреннееПотребление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Распоряжение КАК Заказ
		|ПОМЕСТИТЬ втОстаткиПоТрудозатратам
		|ИЗ
		|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(, Распоряжение В (&МассивДокументов)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Распоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		|	ВЫБОР
		|		КОГДА втОстаткиПоНоменклатуре.Заказ ЕСТЬ NULL 
		|				И втОстаткиПоТрудозатратам.Заказ ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаказНаРемонт КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоНоменклатуре КАК втОстаткиПоНоменклатуре
		|		ПО ТаблицаДокументов.Ссылка = втОстаткиПоНоменклатуре.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоТрудозатратам КАК втОстаткиПоТрудозатратам
		|		ПО ТаблицаДокументов.Ссылка = втОстаткиПоТрудозатратам.Заказ
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаказНаРемонт КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//  ВыборкаПроверки			 - ВыборкаИзРезультатаЗапроса	 - Текущая строка выборки
//  НовыйСтатус				 - ПеречислениеСсылка.СтатусыЗаказовНаРемонт - Новый статус
//  ДополнительныеПараметры	 - Структура					 - Структура дополнительных параметров
//  ШаблонСообщения			 - Строка						 - Сообщение, которое нужно показать.
//
// Возвращаемое значение:
//  Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры, ШаблонСообщения = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		Если ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
			
			Если ШаблонСообщения = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ выполен не полностью';
									|en = 'Status ""%Статус%"" of document ""%Документ%"" is not set, because the order is not fulfilled completely'");
			Иначе
				ТекстОшибки = ШаблонСообщения;
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа
//
// Возвращаемое значение:
// 		Структура - Структура состояния выполнения.
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	СтруктураСостояние.Вставить("ВыводитьТаблицыОбеспечение", 1);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка",    2);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоОтгрузка", 3);
	СтруктураСостояние.Вставить("ИмяТЧТоварыОтгрузка", "МатериалыИРаботы");
	СтруктураСостояние.Вставить("ИмяПоляДатаОтгрузки", "Ссылка.ДатаНачала");
	СтруктураСостояние.Вставить("ЭтоЗаказ", Истина);
	СтруктураСостояние.Вставить("ИмяРегистраОтгрузкаУслуг", "ЗаказыНаВнутреннееПотребление");
 	
	Возврат СтруктураСостояние;
	
КонецФункции

// Формирует массив допустимых статусов на основании настроек программы
//
// Параметры:
//	ИмяДокумента - Строка - Имя вводимого документа.
//
// Возвращаемое значение:
//	Массив - массив допустимых статусов.
//
Функция ДопустимыеСтатусыВводаНаОсновании(ИмяДокумента) Экспорт
	
	ДопустимыеСтатусы = Новый Массив;
	Если ИмяДокумента = "ВнутреннееПотребление" Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаРемонт.КВыполнению);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	ИначеЕсли ИмяДокумента = "ВыработкаСотрудников" Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	КонецЕсли;
	
	Возврат ДопустимыеСтатусы;
	
КонецФункции

// Формирует структуру параметров документа для встраивания документа в механимы обеспечения.
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗаказНаРемонт - документ
// Возвращаемое значение:
//  см. ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания
//
Функция ДоступныеОстаткиПараметрыВстраивания(ДокументОбъект = Неопределено) Экспорт
	
	ПараметрыВстраивания = ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания();
	ПараметрыВстраивания.ОчищаемыеРеквизиты = "КодСтроки";
	
	// Обновление колонки "Доступно".
	ПараметрыВстраивания.ИмяТаблицыФормы = "МатериалыИРаботы";
	
	// Условное оформление.
	ЭлементыФормы = ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы;
	ЭлементыФормы.ВариантОбеспечения = "МатериалыИРаботыВариантОбеспечения";
	ЭлементыФормы.Доступно           = "МатериалыИРаботыДоступно";
	ЭлементыФормы.Серия              = "МатериалыИРаботыСерия";
	ЭлементыФормы.Обособленно        = "МатериалыИРаботыОбособленно";
	ЭлементыФормы.Склад              = "МатериалыИРаботыСклад";
	
	ПутиКДанным = ПараметрыВстраивания.УсловноеОформление.ПутиКДанным;
	ПутиКДанным.ПерераспределятьЗапасы = "Объект.МатериалыИРаботы.ПерераспределятьЗапасы";
	ПутиКДанным.ЗапретРедактирования = "Объект.МатериалыИРаботы.Отменено";
	ПутиКДанным.ТипНоменклатуры = "Объект.МатериалыИРаботы.ТипНоменклатуры";
	
	// Выбор варианта обеспечения.
	Связи = ПараметрыВстраивания.СвязиПараметровВыбораВариантаОбеспечения;
	Связи.Доступно              = "Элементы.МатериалыИРаботы.ТекущиеДанные.Доступно";
	Связи.КоличествоУпаковок    = "Элементы.МатериалыИРаботы.ТекущиеДанные.КоличествоУпаковок";
	Связи.Количество            = "Элементы.МатериалыИРаботы.ТекущиеДанные.Количество";
	Связи.ОтгружатьЕслиДоступно = "Элементы.МатериалыИРаботы.ТекущиеДанные.ОтгружатьЕслиДоступно";
	Связи.Обособленно           = "Элементы.МатериалыИРаботы.ТекущиеДанные.Обособленно";
	Связи.ТипНоменклатуры       = "Элементы.МатериалыИРаботы.ТекущиеДанные.ТипНоменклатуры";
	Связи.Упаковка              = "Элементы.МатериалыИРаботы.ТекущиеДанные.Упаковка";
	Связи.Номенклатура          = "Элементы.МатериалыИРаботы.ТекущиеДанные.Номенклатура";
	Связи.ВариантОбеспечения    = "Элементы.МатериалыИРаботы.ТекущиеДанные.ВариантОбеспечения";
	Связи.Склад                 = "Элементы.МатериалыИРаботы.ТекущиеДанные.Склад";
	Связи.НесколькоСкладов      = Истина;
	
	// Имя регистра оформления отгрузки.
	ПараметрыВстраивания.ИмяРегистраОформленияОтгрузки = "ЗаказыНаВнутреннееПотребление";
	
	// Временная таблица данных документа.
	ПараметрыВстраивания.ИмяОбъекта = "Документ.ЗаказНаРемонт";
	ПараметрыВстраивания.ИмяТаблицы = "Документ.ЗаказНаРемонт.МатериалыИРаботы";
	
	ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента =
		"ВЫБРАТЬ
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	Реквизиты.Подразделение КАК Подразделение,
		|	ТабЧасть.Склад КАК Склад,
		|	Реквизиты.Назначение КАК Назначение,
		|	Реквизиты.Ссылка КАК ЗаказНаОтгрузку,
		|	ТабЧасть.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ТабЧасть.Обособленно КАК Обособленно,
		|	ТабЧасть.Количество КАК Количество,
		|	ТабЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТабЧасть.Упаковка КАК Упаковка,
		|	Реквизиты.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт)
		|		) КАК ГотовКОбеспечению,
		|	Реквизиты.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт)
		|		) КАК ГотовКОтгрузке,
		|	НАЧАЛОПЕРИОДА(ВЫБОР
		|		КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			Реквизиты.ДатаЗавершения
		|		ИНАЧЕ Реквизиты.ДатаНачала
		|	КОНЕЦ, ДЕНЬ) КАК ЖелаемаяДатаОтгрузки,
		|	ТабЧасть.Серия КАК Серия,
		|	ТабЧасть.КодСтроки КАК КодСтроки,
		|	
		|	ТабЧасть.Отменено КАК Отменено,
		|	
		|	ТабЧасть.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК ДатаДокумента,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаСкладов,
		|	Реквизиты.Приоритет КАК Приоритет,
		|	НАЧАЛОПЕРИОДА(Реквизиты.ДатаНачала, ДЕНЬ) КАК ДатаОтгрузкиВсехСтрокОднойДатой
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныхДокумента
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТабЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт КАК Реквизиты
		|		ПО ИСТИНА";
	
	// Шаблон сериализации данных формы.
	МатериалыИРаботы = Новый Структура();
	МатериалыИРаботы.Вставить("НомерСтроки",        Новый ОписаниеТипов("Число"));
	МатериалыИРаботы.Вставить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	МатериалыИРаботы.Вставить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	МатериалыИРаботы.Вставить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	МатериалыИРаботы.Вставить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	МатериалыИРаботы.Вставить("Обособленно",        Новый ОписаниеТипов("Булево"));
	МатериалыИРаботы.Вставить("Количество",         Новый ОписаниеТипов("Число"));
	МатериалыИРаботы.Вставить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	МатериалыИРаботы.Вставить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	МатериалыИРаботы.Вставить("Серия",              Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	МатериалыИРаботы.Вставить("Отменено",           Новый ОписаниеТипов("Булево"));
	МатериалыИРаботы.Вставить("КодСтроки",          Новый ОписаниеТипов("Число"));
	
	Объект = Новый Структура();
	Объект.Вставить("Подразделение",      Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Объект.Вставить("Назначение",         Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Объект.Вставить("Ссылка",             Новый ОписаниеТипов("ДокументСсылка.ЗаказНаРемонт"));
	Объект.Вставить("Статус",             Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗаказовНаРемонт"));
	Объект.Вставить("ДатаНачала",         Новый ОписаниеТипов("Дата"));
	Объект.Вставить("ДатаЗавершения",     Новый ОписаниеТипов("Дата"));
	Объект.Вставить("Дата",               Новый ОписаниеТипов("Дата"));
	Объект.Вставить("Приоритет",          Новый ОписаниеТипов("СправочникСсылка.Приоритеты"));
	Объект.Вставить("МатериалыИРаботы",   МатериалыИРаботы);
	
	ПараметрыВстраивания.ШаблонСериализацииДанныхФормы.Вставить("Объект", Объект);
	
	ПараметрыВстраивания.ВыражениеДляВопросаПриВыполненииДействияВСпискеЗаказов ="НЕОПРЕДЕЛЕНО";
	
	Возврат ПараметрыВстраивания;
	
КонецФункции

#Область УчетНДС

// Инициализирует параметры заполнения вида деятельности НДС
//
// Параметры:
//  Объект		- ДокументОбъект.ЗаказНаРемонт, ДанныеФормыСтруктура	- документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  См. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС
//
Функция ПараметрыЗаполненияВидаДеятельностиНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ПараметрыЗаполнения.Организация = Объект.Организация;
	ПараметрыЗаполнения.Дата = Объект.Дата;
	ПараметрыЗаполнения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	ПараметрыЗаполнения.СписаниеТоваровИРаботНаСтатьи = Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Инициализирует параметры проверки заполнения документа по виду деятельности НДС
//
// Параметры:
//  Объект		- ДокументОбъект.ЗаказНаРемонт, ДанныеФормыСтруктура	- документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - структура параметров, см. УчетНДСУП.ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС.
//
Функция ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУП.ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС();
	ПараметрыЗаполнения.ИмяТабличнойЧасти = "Ремонты";
	ПараметрыЗаполнения.ИмяРеквизитаСтатьяРасходов = "СтатьяРасходов";
	ПараметрыЗаполнения.ИмяРеквизитаАналитикаРасходов = "Ссылка";
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Обеспечение

Функция ПараметрыДокументаДляДействийОбеспечения(Объект) Экспорт
	
	ПараметрыДокумента = Новый Структура();
	ПараметрыДокумента.Вставить("ПараметрыВстраивания",               ДоступныеОстаткиПараметрыВстраивания());
	ПараметрыДокумента.Вставить("Объект",                             Объект);
	ПараметрыДокумента.Вставить("ВариантОбеспеченияИФлагОбособленно", Неопределено);
	
	ОбеспечениеВДокументахСервер.ЗаполнитьСлужебныеПараметрыВстраивания(ПараметрыДокумента);
	Возврат ПараметрыДокумента;
	
КонецФункции

// Выпоняет дополнительные действия связанные с заполнением обеспечения в документе.
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект.ЗаказНаРемонт - Документ, в котором заполнили обеспечение.
//  Изменения - ТаблицаЗначений - Таблица изменений документа после заполнения обеспечения.
//  Режим - Строка - Режим, определяющий контест заполнения обеспечения.
//  ПараметрыЗаполнения - Структура - Параметры заполнения.
Процедура ПослеЗаполненияОбеспечения(Объект, Изменения, Режим, ПараметрыЗаполнения) Экспорт
	
	Если ОбеспечениеВДокументахКлиентСервер.НужноПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(Режим) Тогда
		
		Ссылки = Объект.МатериалыИРаботы.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
		Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Или Не ЗначениеЗаполнено(Объект.ДатаЗавершения) Тогда
			
			ТипыНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Ссылки, "ТипНоменклатуры");
			НоваяДатаНачала = '00010101';
			НоваяДатаЗавершения = '00010101';
			
			Для Каждого Изменение Из Изменения Цикл
				Строка = Изменение.Строка;
				
				ЭтоРабота = ТипыНоменклатуры[Строка.Номенклатура] = Перечисления.ТипыНоменклатуры.Работа;
				Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
						Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
						
					Если ЭтоРабота Тогда
						НоваяДатаЗавершения = ТекущаяДатаСеанса();
					Иначе
						НоваяДатаНачала = ТекущаяДатаСеанса();
					КонецЕсли;
					
				КонецЕсли;
				Если НоваяДатаНачала <> '00010101' И НоваяДатаЗавершения <> '00010101' Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(Объект.ДатаНачала) И Не ЗначениеЗаполнено(Объект.ДатаЗавершения) Тогда
				Объект.ДатаНачала = НоваяДатаНачала;
				Объект.ДатаЗавершения = НоваяДатаЗавершения;
			Иначе
				Если Не ЗначениеЗаполнено(Объект.ДатаНачала) И НоваяДатаНачала <= Объект.ДатаЗавершения Тогда
					Объект.ДатаНачала = НоваяДатаНачала;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Объект.ДатаЗавершения) И НоваяДатаЗавершения >= Объект.ДатаНачала Тогда
					Объект.ДатаЗавершения = НоваяДатаЗавершения;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбеспечениеВДокументахСервер.ПересчитатьКоличествоЕдиниц(Изменения);
	ПараметрыУказанияСерий = ПараметрыУказанияСерий(Объект);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);

КонецПроцедуры

#КонецОбласти

#Область НаправленияДеятельности

// 
// Возвращаемое значение:
//  См. НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности
Функция ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности(Форма) Экспорт
	
	ПорядокОбработкиДокумента = НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности();
	ПорядокОбработкиДокумента.ЗаполнятьНазначениеВШапке = Истина;
	
	Возврат ПорядокОбработкиДокумента;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.ЗаказНаРемонт";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	ПереопределениеРасчетаПараметров.Вставить("ДвиженияПоСкладскимРегистрам",
		"ЕСТЬNULL(ТаблицаТовары.Ссылка.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "ЗаказыНаВнутреннееПотребление" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаВнутреннееПотребление(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТрудозатратыКОформлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ЗаказНаРемонтТрудозатраты";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеШапки.Ссылка             КАК Ссылка,
		|	ДанныеШапки.Дата               КАК Период,
		|	ДанныеШапки.Номер              КАК Номер,
		|	ДанныеШапки.ДатаНачала         КАК ДатаНачала,
		|	ДанныеШапки.ДатаЗавершения     КАК ДатаЗавершения,
		|	ДанныеШапки.Подразделение      КАК Подразделение,
		|	ДанныеШапки.Организация        КАК Организация,
		|	ДанныеШапки.Статус             КАК Статус,
		|	ДанныеШапки.Ответственный      КАК Ответственный,
		|	ДанныеШапки.Автор              КАК Автор,
		|	ДанныеШапки.Комментарий        КАК Комментарий,
		|	ДанныеШапки.Проведен           КАК Проведен,
		|	ДанныеШапки.ПометкаУдаления    КАК ПометкаУдаления,
		|	ДанныеШапки.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ДанныеШапки.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
		|	ДанныеШапки.Назначение         КАК Назначение,
		|	ДанныеШапки.Приоритет          КАК Приоритет,
		|	ЕСТЬNULL(ДанныеШапки.Назначение.ДвиженияПоСкладскимРегистрам,ЛОЖЬ) КАК ДвиженияПоСкладскимРегистрам,
		|	ДанныеШапки.ОбъектЭксплуатации КАК ОбъектЭксплуатации,
		|	ДанныеШапки.ЭтоЗаказНаВнутреннееПотреблениеРабот КАК ЭтоЗаказНаВнутреннееПотреблениеРабот
		|ИЗ
		|	Документ.ЗаказНаРемонт КАК ДанныеШапки
		|ГДЕ
		|	ДанныеШапки.Ссылка = &Ссылка
		|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 

КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ЗаказНаРемонт"));
	ЗначенияПараметровПроведения.Вставить("ИспользоватьУзлы", ПолучитьФункциональнуюОпцию("ИспользоватьУзлыОбъектовЭксплуатации"));

	Если Реквизиты <> Неопределено Тогда
		
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыНаВнутреннееПотребление(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыНаВнутреннееПотребление";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)           КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ТаблицаТовары.Ссылка                   КАК ЗаказНаВнутреннееПотребление,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ТаблицаТовары.Серия                    КАК Серия,
		|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
		|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|				ТОГДА ТаблицаТовары.Склад
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		КОНЕЦ КАК Склад,
		|	ТаблицаТовары.Количество               КАК Заказано,
		|	0 КАК КОформлению
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И (НЕ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|		ИЛИ &ЭтоЗаказНаВнутреннееПотреблениеРабот)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		ТОГДА ВЫРАЗИТЬ(&ДатаНачала КАК ДАТА)
		|		ИНАЧЕ ВЫРАЗИТЬ(&ДатаЗавершения КАК ДАТА)
		|	КОНЕЦ,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия,
		|	ТаблицаТовары.КодСтроки,
		|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|				ТОГДА ТаблицаТовары.Склад
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		КОНЕЦ КАК Склад,
		|	0,
		|	ТаблицаТовары.Количество
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))
		|	И (НЕ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|		ИЛИ &ЭтоЗаказНаВнутреннееПотреблениеРабот)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия,
		|	ТаблицаТовары.КодСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			ТОГДА ТаблицаТовары.Склад
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ,
		|	-ТаблицаТовары.Количество,
		|	0
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Отменено
		|	И (НЕ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|		ИЛИ &ЭтоЗаказНаВнутреннееПотреблениеРабот)
		|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПланРемонтов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ПланРемонтов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ДатаЗавершения КАК Период,
		|	ЕСТЬNULL(УзлыОбъектовЭксплуатации.Ссылка, &ОбъектЭксплуатации) КАК ОбъектЭксплуатации,
		|	Ремонты.ВидРемонта КАК ВидРемонта,
		|	Ремонты.РемонтныйЦикл КАК РемонтныйЦикл
		|ИЗ
		|	Документ.ЗаказНаРемонт.Ремонты КАК Ремонты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
		|		ПО Ремонты.Узел = УзлыОбъектовЭксплуатации.Ссылка И &ИспользоватьУзлы
		|ГДЕ
		|	Ремонты.Ссылка = &Ссылка
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаРемонтыРабочихЦентров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "РемонтыРабочихЦентров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказНаРемонтРабочиеЦентры.Ссылка КАК ЗаказНаРемонт,
		|	ЗаказНаРемонтРабочиеЦентры.РабочийЦентр КАК РабочийЦентр,
		|	ЗаказНаРемонтРабочиеЦентры.НомерСтроки КАК НомерСтроки,
		|	ЗаказНаРемонтРабочиеЦентры.ДатаНачала КАК ДатаНачала,
		|	ЗаказНаРемонтРабочиеЦентры.ДатаЗавершения КАК ДатаЗавершения
		|ИЗ
		|	Документ.ЗаказНаРемонт.РабочиеЦентры КАК ЗаказНаРемонтРабочиеЦентры
		|ГДЕ
		|	ЗаказНаРемонтРабочиеЦентры.Ссылка = &Ссылка
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТрудозатратыКОформлению";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ДатаНачала КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&Организация КАК Организация,
		|	ЗаказНаРемонтТрудозатраты.Ссылка КАК Распоряжение,
		|	ЗаказНаРемонтТрудозатраты.ВидРабот КАК ВидРабот,
		|	ЗаказНаРемонтТрудозатраты.Бригада КАК Исполнитель,
		|	&Подразделение КАК Подразделение,
		|	ЗаказНаРемонтТрудозатраты.Количество КАК Количество,
		|	ЗаказНаРемонтТрудозатраты.КодСтроки КАК КодСтрокиРаспоряжения
		|ИЗ
		|	Документ.ЗаказНаРемонт.Трудозатраты КАК ЗаказНаРемонтТрудозатраты
		|ГДЕ
		|	ЗаказНаРемонтТрудозатраты.Ссылка = &Ссылка
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))
		|	И НЕ ЗаказНаРемонтТрудозатраты.Отменено";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаПериодыАктуальностиОбъектовЭксплуатации(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ПериодыАктуальностиОбъектовЭксплуатации";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА Документ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))
		|			ТОГДА Документ.ДатаЗавершенияФактическая
		|		ИНАЧЕ Документ.ДатаЗавершения
		|	КОНЕЦ КАК Период,
		|	Документ.ОбъектЭксплуатации КАК ОбъектЭксплуатации
		|ИЗ
		|	Документ.ЗаказНаРемонт КАК Документ
		|ГДЕ
		|	Документ.Ссылка = &Ссылка
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Процедура ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка                   КАК Ссылка,
	|	ВЫБОР КОГДА ДанныеШапки.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|				ДанныеШапки.ДатаНачала
	|			ИНАЧЕ
	|				ДанныеШапки.Дата
	|		КОНЕЦ                              КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК Заказ,
	|	НЕОПРЕДЕЛЕНО                           КАК Накладная,
	|	ЛОЖЬ                                   КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                           КАК ИсправляемыйДокумент,
	|	ДанныеШапки.Подразделение              КАК Получатель,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Обособленно
	|			ТОГДА ДанныеШапки.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.СтатусУказанияСерий	   КАК СтатусУказанияСерий,
	|	ТаблицаТовары.Количество               КАК Количество,
	|	ЛОЖЬ                                   КАК СверхЗаказа,
	|	ТаблицаТовары.Отменено                 КАК Отменено,
	|	ЛОЖЬ								   КАК ЭтоНакладная,
	|	ИСТИНА								   КАК ОтгрузкаПоЗаказу
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт КАК ДанныеШапки
	|		ПО ДанныеШапки.Ссылка = ТаблицаТовары.Ссылка
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&Ссылка)
	|	И ТаблицаТовары.Количество <> 0
	|	И ДанныеШапки.Статус В(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)";
	
	СкладыСервер.ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры, ТекстЗапроса);
	
КонецПроцедуры

Процедура ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка                   КАК Ссылка,
	|	ДанныеШапки.ДатаНачала                 КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК Заказ,
	|	НЕОПРЕДЕЛЕНО                           КАК Накладная,
	|	ЛОЖЬ                                   КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                           КАК ИсправляемыйДокумент,
	|	ДанныеШапки.Подразделение              КАК Получатель,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Обособленно
	|			ТОГДА ДанныеШапки.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.СтатусУказанияСерий      КАК СтатусУказанияСерий,
	|	ТаблицаТовары.Количество               КАК Количество,
	|	ЛОЖЬ                                   КАК СверхЗаказа,
	|	ТаблицаТовары.Отменено                 КАК Отменено,
	|	ЛОЖЬ                                   КАК ЭтоНакладная,
	|	ИСТИНА                                 КАК ОтгрузкаПоЗаказу
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт КАК ДанныеШапки
	|		ПО ДанныеШапки.Ссылка = ТаблицаТовары.Ссылка
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (&Ссылка)
	|	И ТаблицаТовары.Количество <> 0
	|
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))
	|
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)";
	
	СкладыСервер.ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры, ТекстЗапроса);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Период КАК ДатаДокументаИБ,
	|	&Номер КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация КАК Организация,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&Подразделение КАК МестоХранения,
	|	&Подразделение КАК Подразделение,
	|	&Ответственный КАК Ответственный,
	|	&Автор КАК Автор,
	|	&Комментарий КАК Комментарий,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	0 КАК Сумма,
	|	&Статус КАК Статус,
	|	&Проведен КАК Проведен,
	|	&ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	"""" КАК Дополнительно,
	|	&Период КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать КАК НомерПервичногоДокумента,
	|	ЛОЖЬ КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК ИсправляемыйДокумент,
	|	&Период    КАК ДатаОтраженияВУчете,
	|	&Приоритет КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка         КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата    КАК Период,
		|	ТабЧасть.Номенклатура   КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			ТабЧасть.Ссылка.Подразделение
		|		ИНАЧЕ
		|			ТабЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Обособленно ТОГДА
		|				
		|				ТабЧасть.Ссылка.Назначение
		|				
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабЧасть.Количество     КАК Количество,
		|	ТабЧасть.Ссылка         КАК ЗапланированныйРасходРаспределенногоЗапаса,
		|	ИСТИНА                  КАК КонтрольСвободногоОстатка
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТабЧасть
		|ГДЕ
		|	НЕ ТабЧасть.Отменено
		|		И ТабЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))
		|		И ТабЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|		И (ТабЧасть.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ИЛИ ТабЧасть.Ссылка.ЭтоЗаказНаВнутреннееПотреблениеРабот)";
	
	РаспределениеЗапасовДвижения.РасходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка             КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата        КАК Период,
		|	ТабЧасть.Номенклатура       КАК Номенклатура,
		|	ТабЧасть.Характеристика     КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			ТабЧасть.Ссылка.Подразделение
		|		ИНАЧЕ
		|			ТабЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Обособленно ТОГДА
		|				
		|				ТабЧасть.Ссылка.Назначение
		|				
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабЧасть.Количество         КАК Количество,
		|	ТабЧасть.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ТабЧасть.Ссылка             КАК Заказ,
		|	
		|	НАЧАЛОПЕРИОДА(
		|		ВЫБОР КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|					ТабЧасть.Ссылка.ДатаЗавершения
		|				ИНАЧЕ
		|					ТабЧасть.Ссылка.ДатаНачала
		|			КОНЕЦ,
		|		ДЕНЬ) КАК ЖелаемаяДатаОтгрузки,
		|	ЛОЖЬ КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО КАК РаспоряжениеВГрафике,
		|	0 КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТабЧасть
		|ГДЕ
		|	НЕ ТабЧасть.Отменено
		|	И ТабЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))
		|		И ТабЧасть.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)";
	
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаТабЧасть);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурналеДокументовВнутреннегоТовародвижения

Функция ЕстьЗаказыВРаботе(Параметры)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаказНаРемонт.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаРемонт КАК ЗаказНаРемонт
		|ГДЕ
		|	ЗаказНаРемонт.Проведен
		|	И ЗаказНаРемонт.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт)");
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Не (ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаРемонт)
			И ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстГиперссылки = НСтр("ru = 'Заказы на ремонт';
							|en = 'R&M orders'");
	ТекстСсылки = "Документ.ЗаказНаРемонт.Форма.ФормаСпискаДокументов";
	
	Если ЕстьЗаказыВРаботе(Параметры) Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,, ТекстСсылки);
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,, ЦветаСтиля.НезаполненноеПолеТаблицы,, ТекстСсылки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ТекстЗапросаТоварыДокумента(Отбор) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка                       КАК ЗаказНаВнутреннееПотребление,
	|	Таблица.Номенклатура                 КАК Номенклатура,
	|	Таблица.Характеристика               КАК Характеристика,
	|	ВЫБОР КОГДА Таблица.Обособленно ТОГДА
	|			Таблица.Ссылка.Назначение
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                КАК Назначение,
	|	Таблица.КодСтроки                    КАК КодСтроки,
	|	Таблица.Серия                        КАК Серия,
	|	Таблица.Количество                   КАК Количество,
	|	Таблица.Упаковка                     КАК Упаковка,
	|	NULL                                 КАК ДатаОтгрузки,
	|	ТаблицаРемонты.СтатьяРасходов        КАК СтатьяРасходов,
	|	ВЫБОР 
	|		КОГДА ТаблицаРемонты.СтатьяРасходов.РасходыНаОбъектыЭксплуатации
	|			ТОГДА Таблица.Ссылка.ОбъектЭксплуатации
	|		КОГДА ТаблицаРемонты.СтатьяРасходов.РасходыНаЗаказыНаРемонт
	|			ТОГДА Таблица.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                КАК АналитикаРасходов,
	|	NULL                                 КАК ГруппаПродукции,
	|	Таблица.Склад                        КАК Склад,
	|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
	|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)             КАК ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Справочник.КатегорииЭксплуатации.ПустаяСсылка)      КАК КатегорияЭксплуатации
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК Таблица
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт.Ремонты КАК ТаблицаРемонты
	|		ПО Таблица.Ссылка = ТаблицаРемонты.Ссылка
	|			И Таблица.КодРемонта = ТаблицаРемонты.КодРемонта
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
	|		ПО Таблица.Ссылка = ДанныеУчета.ЗаказНаВнутреннееПотребление
	|			И Таблица.КодСтроки = ДанныеУчета.КодСтроки
	|ГДЕ
	|	НЕ ДанныеУчета.ЗаказНаВнутреннееПотребление ЕСТЬ NULL";
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		ТекстОтбора = "";
		
		Для Каждого КлючЗначение Из Отбор Цикл
			
			Ключ = КлючЗначение.Ключ;
			
			Если Ключ = "Ссылка" Тогда
				Ключ = "Таблица.Ссылка";
			ИначеЕсли Ключ = "Склад" Тогда
				Ключ = "Таблица.Склад";
			КонецЕсли;
			
			ТекстОтбора = 
				ТекстОтбора
				+ " "
				+ "И"
				+ " "
				+ Ключ
				+ " "
				+ "В(&"
				+ КлючЗначение.Значение
				+ ")";
			
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ТекстОтбора;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

// Возвращает таблицу допустимых отклонений мерных товаров по списку распоряжений.
//
//	Параметры:
//		СписокРаспоряжений - СписокЗначений, ДокументСсылка.ЗаказНаВнутреннееПотребление - список заказов для определения допустимых отклонений
//		ТипДвиженияЗапасов - ПеречислениеСсылка.ТипыДвиженияЗапасов -
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица допустимых отклонений:
//		* Заказ                - ДокументСсылка.ЗаказНаВнутреннееПотребление
//		* Номенклатура         - СправочникСсылка.Номенклатура
//		* Характеристика       - СправочникСсылка.ХарактеристикиНоменклатуры
//		* Серия                - СправочникСсылка.СерииНоменклатуры
//		* ДопустимоеОтклонение - Число
//
Функция ДопустимыеОтклоненияМерныхТоваров(СписокРаспоряжений, ТипДвиженияЗапасов) Экспорт
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если Не ЗначениеЗаполнено(СписокРаспоряжений) Или ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Заказ");
		Таблица.Колонки.Добавить("Номенклатура");
		Таблица.Колонки.Добавить("Характеристика");
		Таблица.Колонки.Добавить("Серия");
		Таблица.Колонки.Добавить("ДопустимоеОтклонение");
		Возврат Таблица;
	КонецЕсли;
	
	Если ТипЗнч(СписокРаспоряжений) = Тип("ДокументСсылка.ЗаказНаРемонт") Тогда
		МассивРаспоряжений = Новый Массив();
		МассивРаспоряжений.Добавить(СписокРаспоряжений);
	Иначе
		МассивРаспоряжений = СписокРаспоряжений;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТоварыКПоступлению.ЗаказНаВнутреннееПотребление КАК Заказ,
		|	ТоварыКПоступлению.Номенклатура                 КАК Номенклатура,
		|	ТоварыКПоступлению.Характеристика               КАК Характеристика,
		|	ТоварыКПоступлению.Серия                        КАК Серия,
		|	СУММА(ТоварыКПоступлению.КОформлениюПриход
		|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
		|ИЗ
		|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Обороты(&НачПериод,&КонПериод,, 
		|		ЗаказНаВнутреннееПотребление В (&МассивРаспоряжений)) КАК ТоварыКПоступлению
		|ГДЕ
		|	ТоварыКПоступлению.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКПоступлению.ЗаказНаВнутреннееПотребление,
		|	ТоварыКПоступлению.Номенклатура,
		|	ТоварыКПоступлению.Характеристика,
		|	ТоварыКПоступлению.Серия");
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыНаВнутреннееПотребление",
		"ЗаказНаВнутреннееПотребление В (&МассивРаспоряжений)", Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериод", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериод", ГраницыОборотов.МаксимальнаяДата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область Назначения

// Возвращает шаблон для генерации назначения товаров в документе.
//
// Параметры:
// 		Объект - ДокументОбъект.ЗаказНаРемонт, ДанныеФормыСтруктура - заказ на ремонт, по которому необходимо получить шаблон назначения.
//
// Возвращаемое значение:
// 		См. Справочники.Назначения.ШаблонНового
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	ВариантОбособления = Константы.ВариантОбособленияМатериаловВРемонтах.Получить();
	
	Если ВариантОбособления <> Перечисления.ВариантыОбособленияМатериаловВРемонтах.НаправлениеДеятельности
		Или Не ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности) Тогда
		
		ШаблонНазначения.Заказ = Объект.Ссылка;
		
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
