///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = '%1 загружаются в автоматическом режиме';
				|en = '%1 are imported automatically'"),
			РеквизитФормыВЗначение("Объект").Метаданные().ПредставлениеСписка);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИсторияИзменений",
		"Видимость",
		СЭДОФСС.ЕстьПравоПросмотраЖурнала());
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_БольничныйЛист"
		Или ИмяСобытия = "Запись_ОтпускПоУходуЗаРебенком"
		Или ИмяСобытия = "Запись_Отпуск"
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеОтправкиПодтвержденияПолучения() Тогда
		Если Модифицированность Тогда
			ОбновитьВторичныеДанныеИВидимостьДоступность();
		Иначе
			Прочитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ФиксацияЗаполнитьИдентификаторыФиксТЧ(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ФиксацияЗаполнитьРеквизитыФормыФикс(ТекущийОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтотОбъект);
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ИзвещениеФСС", ПараметрыЗаписи, Объект.Ссылка);
	СЭДОФССКлиент.ОповеститьОНеобходимостиОбновитьТекущиеДела();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	ОбновитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	ФизическоеЛицоПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КартинкаОшибкаПриПоискеСотрудникаНажатие(Элемент)
	ОшибкаПриПоискеФизическогоЛицаНадписьНажатие(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаПриПоискеФизическогоЛицаНадписьНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Информация = ИнформацияОбОшибкеПриПоискеФизическогоЛица();
	ИнформированиеПользователяКлиент.Предупредить(
		Информация.Кратко,
		Информация.Подробно,
		ОшибкаПриПоискеФизическогоЛицаНадпись);
КонецПроцедуры

&НаКлиенте
Процедура ВходящийЗапросПриИзменении(Элемент)
	ВходящийЗапросПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВходящийОтветНаЗапросПриИзменении(Элемент)
	ВходящийОтветНаЗапросПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВходящийРеестрПриИзменении(Элемент)
	ВходящийРеестрПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВходящееЗаявлениеПриИзменении(Элемент)
	ВходящееЗаявлениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВходящийПервичныйДокументПриИзменении(Элемент)
	ВходящийПервичныйДокументПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОпределятьАвтоматическиПриИзменении(Элемент)
	ОпределятьАвтоматическиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсходящийПервичныйДокументПриИзменении(Элемент)
	ИсходящийПервичныйДокументПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсходящееЗаявлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда
		// Событие было вызвано для формирования списка быстрого выбора.
		СписокДляПодбора = СписокЗаявленийДляПодбора(
			Объект.ФизическоеЛицо,
			Объект.ИсходящийПервичныйДокумент,
			Объект.ВходящееЗаявление);
		Если СписокДляПодбора.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = СписокДляПодбора;
		КонецЕсли;
	Иначе
		// Событие было вызвано при вводе текста.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсходящееЗаявлениеПриИзменении(Элемент)
	ИсходящееЗаявлениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсходящийРеестрАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда
		// Событие было вызвано для формирования списка быстрого выбора.
		СписокДляПодбора = СписокРеестровДляПодбора(
			Объект.ИсходящийПервичныйДокумент,
			Объект.ИсходящееЗаявление,
			Объект.ВходящееЗаявление);
		Если СписокДляПодбора.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = СписокДляПодбора;
		КонецЕсли;
	Иначе
		// Событие было вызвано при вводе текста.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсходящийРеестрПриИзменении(Элемент)
	ИсходящийРеестрПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НадписьТребуетсяПодтверждениеОбработкаНавигационнойСсылки(Элемент, Адрес, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Объект.Ссылка);
	СЭДОФССКлиент.ОтправитьПодтверждениеПолучения(МассивСсылок);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСтрокиРеестров

&НаКлиенте
Процедура СтрокиРеестровОбработаноПриИзменении(Элемент)
	Для Каждого СтрокаРеестра Из Объект.СтрокиРеестров Цикл
		Если Не СтрокаРеестра.Обработано Тогда
			Объект.Обработано = Ложь;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	Объект.Обработано = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтрокиРеестровВыбор(ТаблицаФормы, ИдентификаторСтроки, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.СтрокиРеестровОбработано Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	СтрокаТаблицы = ТаблицаФормы.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Поле = Элементы.СтрокиРеестровФизическоеЛицо Тогда
		ОткрываемоеЗначение = СтрокаТаблицы.ФизическоеЛицо;
	ИначеЕсли Поле = Элементы.СтрокиРеестровВходящийПервичныйДокумент Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВходящийПервичныйДокумент) Тогда
			ОткрываемоеЗначение = СтрокаТаблицы.ВходящийПервичныйДокумент;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ВходящееЗаявление) Тогда
			ОткрываемоеЗначение = СтрокаТаблицы.ВходящееЗаявление;
		Иначе
			ОткрываемоеЗначение = Объект.ВходящийРеестр;
		КонецЕсли;
	ИначеЕсли Поле = Элементы.СтрокиРеестровВходящееЗаявление Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВходящееЗаявление) Тогда
			ОткрываемоеЗначение = СтрокаТаблицы.ВходящееЗаявление;
		Иначе
			ОткрываемоеЗначение = Объект.ВходящийРеестр;
		КонецЕсли;
	Иначе
		ОткрываемоеЗначение = Объект.ВходящийРеестр;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОткрываемоеЗначение) Тогда
		ПоказатьЗначение(, ОткрываемоеЗначение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьИзФСС(Команда)
	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	СЭДОФССКлиент.ПолучитьСообщенияИзФСС(Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если Записать() Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВозможностьРедактирования(Команда)
	ВключитьВозможностьРедактированияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправления(Команда)
	ОтменитьВсеИсправленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВопросВПоддержку(Команда)
	
	ВопросВПоддержку = ПодготовитьВопросВПоддержку();
	
	//   *КодОшибки - Строка - идентификатор ошибки при отправки:
	//   *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
	//   *URLСтраницы - Строка - URL страницы отправки сообщения.
	Если Не ЗначениеЗаполнено(ВопросВПоддержку.КодОшибки) Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаголовокОкна", НСтр("ru = 'Отправка сообщения в службу технической поддержки';
														|en = 'Send message to technical support.'"));
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницуСДополнительнымиПараметрами(
			ВопросВПоддержку.URLСтраницы,
			ПараметрыОткрытия);
	Иначе
		ИнформированиеПользователяКлиент.ПоказатьПодробности(ВопросВПоддержку.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Форма

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	ЕстьФилиалыНеСтрахователи = СЭДОФСС.УСтрахователяЕстьФилиалыВзаимодействующиеОтЕгоИмени(Объект.Страхователь);
	ФиксацияВторичныхДанныхВДокументахФормы.ИнициализироватьМеханизмФиксацииРеквизитов(ЭтотОбъект, ТекущийОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.ПодключитьОбработчикиФиксацииИзмененийРеквизитов(ЭтотОбъект, ФиксацияБыстрыйПоискРеквизитов());
	ОбновитьВторичныеДанныеИВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДоступность()
	
	// Кнопки командной панели.
	Если ПравоДоступа("Изменение", Метаданные.Документы.ИзвещениеФСС) Тогда
		Если Объект.Загружено Тогда
			Элементы.ФормаПровестиИЗакрыть.КнопкаПоУмолчанию = Истина;
		Иначе
			Элементы.ФормаПровестиИЗакрыть.КнопкаПоУмолчанию = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Документы.ИзвещениеФСС.Команды.ПовторноПолучитьИзФСС) Тогда
		Если Объект.Загружено Тогда
			Элементы.ФормаПовторноПолучитьИзФСС.Заголовок = "";
			Элементы.ФормаПовторноПолучитьИзФСС.ТолькоВоВсехДействиях = Истина;
		Иначе
			Элементы.ФормаПовторноПолучитьИзФСС.Заголовок = НСтр("ru = 'Получить из ФСС';
																|en = 'Receive from SSF'");
			Элементы.ФормаПовторноПолучитьИзФСС.КнопкаПоУмолчанию = Истина;
			Элементы.ФормаПовторноПолучитьИзФСС.ТолькоВоВсехДействиях = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Документы.ИзвещениеФСС.Команды.ПодтвердитьПолучение) Тогда
		Элементы.ФормаПодтвердитьПолучение.ТолькоВоВсехДействиях = Не Объект.Загружено
			Или ЗначениеЗаполнено(Объект.ДатаОтправкиПодтверждения);
	КонецЕсли;
	
	// Входящий документ доступен после загрузки.
	Если ЗначениеЗаполнено(Объект.ВходящийФайл) Тогда
		Элементы.ГруппаВходящийДокумент.Доступность = Истина;
	Иначе
		Элементы.ГруппаВходящийДокумент.Доступность = Ложь;
	КонецЕсли;
	
	// Предупреждение по результатам анализа текста извещения ФСС.
	ОбновитьРеквизитыОшибкаПриПоискеСотрудника();
	Если ОшибкаПриПоискеФизическогоЛицаНадпись = "" Тогда
		Элементы.ОшибкаПриПоискеФизическогоЛицаГруппа.Видимость = Ложь;
	Иначе
		Элементы.ОшибкаПриПоискеФизическогоЛицаГруппа.Видимость = Истина;
	КонецЕсли;
	
	// Подтверждение получения.
	Если Не Объект.Загружено Тогда
		ТекущаяСтраница = Элементы.ГруппаНетПодтвержденияПолучения;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаОтправкиПодтверждения) Тогда
		Если Объект.ПодтверждениеПолученоФСС Тогда
			ТекущаяСтраница = Элементы.ГруппаПодтверждениеОтправленоИПолученоФСС;
			Элементы.НадписьПодтверждениеОтправленоИПолученоФСС.Заголовок = СтрШаблон(
				НСтр("ru = 'Подтверждение получения отправлено %1
					|и получено ФСС.';
					|en = 'Receipt confirmation has been sent on %1
					|and received by SSF.'"),
				Формат(Объект.ДатаОтправкиПодтверждения, "ДЛФ=D"));
			НадписьОсталосьДней = Элементы.НадписьОсталосьДней2;
		Иначе
			ТекущаяСтраница = Элементы.ГруппаПодтверждениеОтправленоНоНеПолученоФСС;
			Элементы.НадписьПодтверждениеОтправленоНоНеПолученоФСС.Заголовок = СтрШаблон(
				НСтр("ru = 'Подтверждение получения отправлено %1,
					|однако, нет информации что оно получено ФСС.';
					|en = 'Receipt confirmation has been sent on %1, 
					|however, there is no information that it has been received by SSF.'"),
				Формат(Объект.ДатаОтправкиПодтверждения, "ДЛФ=D"));
			НадписьОсталосьДней = Элементы.НадписьОсталосьДней1;
		КонецЕсли;
		Если Объект.Обработано Тогда
			НадписьОсталосьДней.Заголовок  = "";
			НадписьОсталосьДней.ЦветТекста = Новый Цвет;
		Иначе
			ОсталосьДней = ОбщегоНазначенияБЗК.КоличествоДнейДоДаты(Объект.МаксимальнаяДатаОтправкиРеестра);
			Если ОсталосьДней <= 1 Тогда
				НадписьОсталосьДней.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
					НСтр("ru = 'Необходимо <b>сегодня</b> отправить недостающие сведения в ФСС';
						|en = 'It is required to send missing information to SSF <b>today</b>'"));
				НадписьОсталосьДней.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			Иначе
				НадписьОсталосьДней.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
					СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = ';Остался <b>%1 день</b> для отправки недостающих сведений в ФСС;;Осталось <b>%1 дня</b> для отправки недостающих сведений в ФСС;Осталось %1 дней для отправки недостающих сведений в ФСС;';
							|en = ';<b>%1 day</b> remaining to send the missing information to SSF;;<b>%1 days</b> remaining to send the missing information to SSF;%1 days remaining to send the missing information to SSF;'"),
						ОсталосьДней));
				НадписьОсталосьДней.ЦветТекста = Новый Цвет;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.МаксимальнаяДатаПодтверждения) И Не Объект.Обработано Тогда
			ОсталосьДней = ОбщегоНазначенияБЗК.КоличествоДнейДоДаты(Объект.МаксимальнаяДатаПодтверждения);
			Если ОсталосьДней <= 1 Тогда
				Когда = НСтр("ru = '<b>сегодня</b>';
							|en = '<b>today</b>'");
				ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			Иначе
				Когда = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';в течение %1 дня;;в течение %1 дней;в течение %1 дней;';
						|en = ';within %1 day;;within %1 days;within %1 days;'"),
					ОсталосьДней);
				ЦветТекста = Новый Цвет;
			КонецЕсли;
			ТекущаяСтраница = Элементы.ГруппаТребуетсяПодтверждение;
			ЗаголовокНадписи = СтрШаблон(
				НСтр("ru = 'Необходимо %1 <a href=""1"">подтвердить получение</a> Извещения, после чего отправить реестр с недостающими сведениями в течении <b>5 рабочих дней</b>.';
					|en = 'It is required to %1 <a href=""1"">confirm the receipt</a> of the Notification and send the register with the missing data within <b>5 workdays</b>.'"),
				Когда);
			Элементы.НадписьТребуетсяПодтверждение.Заголовок  = СтроковыеФункции.ФорматированнаяСтрока(ЗаголовокНадписи);
			Элементы.НадписьТребуетсяПодтверждение.ЦветТекста = ЦветТекста;
		Иначе
			ТекущаяСтраница = Элементы.ГруппаНетПодтвержденияПолучения;
		КонецЕсли;
	КонецЕсли;
	Элементы.СтраницыПодтвержденияПолучения.ТекущаяСтраница = ТекущаяСтраница;
	
	// Поддержка филиалов, взаимодействующих от имени страхователей.
	Элементы.Страхователь.Видимость = ЕстьФилиалыНеСтрахователи Или (Объект.Организация <> Объект.Страхователь);
	
	ЭтоИзвещение = ЭтоИзвещениеОПредставленииНедостающихСведений();
	ЕстьПВСО     = ЗначениеЗаполнено(Объект.ВходящийРеестр) Или ЗначениеЗаполнено(Объект.ВходящееЗаявление);
	ЕстьПроактив = ЗначениеЗаполнено(Объект.ВходящийЗапрос) Или ЗначениеЗаполнено(Объект.ВходящийОтветНаЗапрос);
	Если ЭтоИзвещение Тогда
		ВидимостьПВСО      = ЕстьПВСО Или (Не ЕстьПроактив И Объект.ВходящаяДата < СЭДОФСС.ДатаОтменыРеестровПВСО());
		ВидимостьПроактива = ЕстьПроактив Или (Не ЕстьПВСО И Объект.ВходящаяДата > СЭДОФСС.ДатаНачалаПроактивныхВыплат());
	Иначе
		ВидимостьПВСО      = Ложь;
		ВидимостьПроактива = Ложь;
	КонецЕсли;
	МногострочныйРежим = Объект.СтрокиРеестров.Количество() > 1 И ВидимостьПВСО;
	ОднострочныйРежим  = Не МногострочныйРежим;
	ЭтоИзвещениеИлиРешениеОбОтказе = (
		ЭтоИзвещение
		Или Объект.ВидИзвещенияФСС = Перечисления.ВидыИзвещенийФСС.РешениеОбОтказеВНазначенииИВыплатеПособия
		Или Объект.ВидИзвещенияФСС = Перечисления.ВидыИзвещенийФСС.РешениеОбОтказеВРассмотренииДокументов);
	
	Элементы.СотрудникГруппа.Видимость = ЭтоИзвещениеИлиРешениеОбОтказе
		И (ЗначениеЗаполнено(Объект.Сотрудник) Или (Не ЗначениеЗаполнено(Объект.ФизическоеЛицо) И ОднострочныйРежим));
	Элементы.ФизическоеЛицо.Видимость = ЭтоИзвещениеИлиРешениеОбОтказе
		И (ЗначениеЗаполнено(Объект.ФизическоеЛицо) Или (Не ЗначениеЗаполнено(Объект.Сотрудник) И ОднострочныйРежим));
	
	Элементы.ОбработаноВШапке.Видимость = Не ЭтоИзвещение Или МногострочныйРежим;
	
	Если ЭтоИзвещение И ОднострочныйРежим Тогда
		Элементы.ГруппаРанееОтправленныеСведения.Видимость = Истина;
		Элементы.ГруппаНовыеСведения.Видимость             = Истина;
		
		ЕстьУчетныйДокумент = ЗначениеЗаполнено(Объект.ВходящийПервичныйДокумент);
		Элементы.ВходящийЗапрос.Видимость                 = ВидимостьПроактива;
		Элементы.ГруппаВходящийОтветНаЗапрос.Видимость    = ВидимостьПроактива;
		Элементы.ГруппаВходящийРеестр.Видимость           = ВидимостьПВСО;
		Элементы.ВходящееЗаявление.Видимость              = ВидимостьПВСО;
		Элементы.ГруппаИсходящееЗаявлениеРеестр.Видимость = ВидимостьПВСО;
		Элементы.ОпределятьАвтоматически.Видимость        = ЕстьПВСО Или ЕстьПроактив Или ЕстьУчетныйДокумент;
		
		Если ВидимостьПроактива Тогда
			СЭДОФСС.НастроитьПолеВводаПервичногоДокумента(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВходящийОтветНаЗапрос, "ВидПособия"),
				Объект.Сотрудник,
				Элементы.ВходящийПервичныйДокумент,
				Объект.ВходящийПервичныйДокумент);
		Иначе
			Документы.ЗаявлениеСотрудникаНаВыплатуПособия.НастроитьПолеВводаПервичногоДокумента(
				Объект.Сотрудник,
				?(ЗначениеЗаполнено(Объект.ВходящееЗаявление), Объект.ВходящееЗаявление, Объект.ИсходящееЗаявление),
				Элементы.ВходящийПервичныйДокумент,
				Объект.ВходящийПервичныйДокумент);
		КонецЕсли;
		
		Если ВидимостьПВСО тогда
			Документы.ЗаявлениеСотрудникаНаВыплатуПособия.НастроитьПолеВводаПервичногоДокумента(
				Объект.Сотрудник,
				?(ЗначениеЗаполнено(Объект.ИсходящееЗаявление), Объект.ИсходящееЗаявление, Объект.ВходящееЗаявление),
				Элементы.ИсходящийПервичныйДокумент,
				Объект.ИсходящийПервичныйДокумент);
				
			Элементы.ИсходящийРеестр.Видимость = (
				ЗначениеЗаполнено(Объект.ИсходящийРеестр)
				Или Элементы.ИсходящийРеестр.Вид = ВидПоляФормы.ПолеВвода);
				
			Элементы.ГруппаВходящийРеестр.Видимость = (
				ЗначениеЗаполнено(Объект.ВходящийИдентификаторРеестра)
				Или Не Элементы.ВходящийРеестр.ТолькоПросмотр);
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаРанееОтправленныеСведения.Видимость = Ложь;
		Элементы.ГруппаНовыеСведения.Видимость             = Ложь;
	КонецЕсли;
	
	Если ЭтоИзвещение И МногострочныйРежим Тогда
		Элементы.ГруппаМногострочныйРежим.Видимость = Истина;
		Элементы.ГруппаВходящийРеестрМногострочныйРежим.Видимость = (
			ЗначениеЗаполнено(Объект.ВходящийИдентификаторРеестра)
			Или Не Элементы.ВходящийРеестр.ТолькоПросмотр);
		КоличествоСтрок = Объект.СтрокиРеестров.Количество();
		Если КоличествоСтрок <= 8 Тогда
			Элементы.СтрокиРеестров.РастягиватьПоВертикали = Ложь;
			Элементы.СтрокиРеестров.ВысотаВСтрокахТаблицы  = КоличествоСтрок + 2;
			Элементы.СтрокиРеестров.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
		Иначе
			Элементы.СтрокиРеестров.РастягиватьПоВертикали = Истина;
			Элементы.СтрокиРеестров.ВысотаВСтрокахТаблицы  = 0;
			Элементы.СтрокиРеестров.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьАвтоматически;
		КонецЕсли;
	Иначе
		Элементы.ГруппаМногострочныйРежим.Видимость = Ложь;
	КонецЕсли;
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	
	Элементы.Страхователь.Видимость = СЭДОФСС.ВидимостьПоляСтрахователь(Объект.Организация, Объект.Страхователь);
	
КонецПроцедуры

&НаСервере
Функция ЭтоИзвещениеОПредставленииНедостающихСведений()
	Возврат Объект.ВидИзвещенияФСС = Перечисления.ВидыИзвещенийФСС.ИзвещениеОПредставленииНедостающихСведений;
КонецФункции

&НаСервере
Процедура ОбновитьРеквизитыОшибкаПриПоискеСотрудника()
	ОшибкаПриПоискеФизическогоЛицаНадпись = "";
	Если Объект.СтрокиРеестров.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РезультатАнализа = ОшибкаПриПоискеФизическогоЛицаРезультатАнализаТекста();
		Если РезультатАнализа <> Неопределено Тогда
			КоличествоСНИЛС         = РезультатАнализа.СНИЛС.Количество();
			КоличествоФИО           = РезультатАнализа.ФИО.Количество();
			КоличествоФизическихЛиц = РезультатАнализа.ФизическиеЛица.Количество();
			
			Если КоличествоФизическихЛиц > 1 Тогда
				ОшибкаПриПоискеФизическогоЛицаНадпись = СтрШаблон(
					НСтр("ru = 'В извещении более одного физического лица (в программе найдено %1)';
						|en = 'There is more than one individual in the notification (%1 found in the application)'"),
					КоличествоФизическихЛиц);
			ИначеЕсли КоличествоСНИЛС > 1 Тогда
				ОшибкаПриПоискеФизическогоЛицаНадпись = СтрШаблон(
					НСтр("ru = 'В извещении более одного СНИЛС (найдено %1)';
						|en = 'More than one SNILS in the notification (found %1)'"),
					КоличествоСНИЛС);
			ИначеЕсли КоличествоФизическихЛиц = 0 Тогда
				Если КоличествоСНИЛС = 1 Тогда
					ОшибкаПриПоискеФизическогоЛицаНадпись = СтрШаблон(
						НСтр("ru = 'Не найден сотрудник со СНИЛС %1';
							|en = 'Cannot find employee with SNILS %1'"),
						РезультатАнализа.СНИЛС[0]);
				ИначеЕсли КоличествоФИО = 1 Тогда
					ОшибкаПриПоискеФизическогоЛицаНадпись = СтрШаблон(
						НСтр("ru = 'Не найден сотрудник с ФИО %1';
							|en = 'Cannot find employee with full name %1'"),
						РезультатАнализа.ФИО[0]);
				ИначеЕсли КоличествоФИО > 1 Тогда
					ОшибкаПриПоискеФизическогоЛицаНадпись = СтрШаблон(
						НСтр("ru = 'В тексте извещения найдено %1 ФИО, но соответствующие сотрудники не найдены.';
							|en = '%1 full name was found in the notification text, but no matching employees were found.'"),
						КоличествоФИО);
				Иначе
					ОшибкаПриПоискеФизическогоЛицаНадпись = 
						НСтр("ru = 'В тексте извещения не найдено ни одного СНИЛС или ФИО.';
							|en = 'No SNILS or full name was found in the notification text.'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		СообщенияБЗК.СообщитьОПроблеме(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ОшибкаПриПоискеФизическогоЛицаРезультатАнализаТекста()
	Если Не Объект.Обработано
		И Не ЗначениеЗаполнено(Объект.ФизическоеЛицо)
		И ЗначениеЗаполнено(Объект.ВходящийФайл) Тогда
		РезультатАнализа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВходящийФайл, "РезультатАнализаТекста");
		Возврат РезультатАнализа.Получить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ИнформацияОбОшибкеПриПоискеФизическогоЛица()
	Результат = Новый Структура("Кратко, Подробно", "", "");
	
	РезультатАнализа = ОшибкаПриПоискеФизическогоЛицаРезультатАнализаТекста();
	Если РезультатАнализа <> Неопределено Тогда
		КоличествоСНИЛС         = РезультатАнализа.СНИЛС.Количество();
		КоличествоФИО           = РезультатАнализа.ФИО.Количество();
		КоличествоФизическихЛиц = РезультатАнализа.ФизическиеЛица.Количество();
		
		ПрефиксПункта = "  • ";
		
		МассивКратко = Новый Массив;
		МассивКратко.Добавить(НСтр("ru = 'Результаты анализа текста извещения ФСС:';
									|en = 'SSF notification text analysis results:'"));
		
		Если КоличествоСНИЛС = 0 Тогда
			Текст = НСтр("ru = 'Не найдено ни одного СНИЛС';
						|en = 'No SNILSs found'");
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';Найден %1 СНИЛС: [Представление];;Найдено %1 СНИЛС: [Представление];Найдено %1 СНИЛС: [Представление];';
					|en = ';%1 SNILS found: [Представление];;%1 SNILSs found: [Представление];%1 SNILSs found: [Представление];'"),
				КоличествоСНИЛС);
			Текст = СтрЗаменить(Текст, "[Представление]", СтрСоединить(РезультатАнализа.СНИЛС, ", "));
		КонецЕсли;
		МассивКратко.Добавить(ПрефиксПункта + Текст + ";");
		
		Если КоличествоФИО = 0 Тогда
			Текст = НСтр("ru = 'Не найдено ни одного ФИО';
						|en = 'No full names found'");
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';Найдено %1 ФИО: [Представление];;Найдено %1 ФИО: [Представление];Найдено %1 ФИО: [Представление];';
					|en = ';%1 full name found: [Представление];;%1 full names found: [Представление];%1 full names found: [Представление];'"),
				КоличествоФИО);
			Текст = СтрЗаменить(Текст, "[Представление]", СтрСоединить(РезультатАнализа.ФИО, ", "));
		КонецЕсли;
		МассивКратко.Добавить(ПрефиксПункта + Текст + ";");
		
		Если КоличествоСНИЛС > 0 Или КоличествоФИО > 0 Тогда
			Если КоличествоФизическихЛиц = 0 Тогда
				Текст = НСтр("ru = 'По указанным сведениям физическое лицо не найдено';
							|en = 'No individual was found based on the information specified'");
			Иначе
				Текст = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';По указанным сведениям найдено %1 физическое лицо: [Представление];;По указанным сведениям найдено %1 физических лица: [Представление];По указанным сведениям найдено %1 физических лиц: [Представление];';
						|en = ';%1 individual was found based on the information specified: [Представление];;%1 individuals were found based on the information specified: [Представление];%1 individuals were found based on the information specified: [Представление];'"),
					КоличествоФизическихЛиц);
				Текст = СтрЗаменить(Текст, "[Представление]", СтрСоединить(РезультатАнализа.ФизическиеЛица, ", "));
			КонецЕсли;
			МассивКратко.Добавить(ПрефиксПункта + Текст + ".");
		КонецЕсли;
		
		Если КоличествоСНИЛС > 1 Или КоличествоФизическихЛиц > 1 Тогда
			МассивКратко.Добавить(НСтр(
				"ru = 'Внимание. При наличии в документе более 1 СНИЛС или более 1 физического лица
				|    заполнение физического лица в шапке документа отключается ввиду неоднозначности.
				|  В этом случае предполагается ручная обработка документа
				|    и ручное включение флажка ""Извещение обработано, работа с документом завершена""
				|    после отправки всех недостающих сведений.
				|  Физическое лицо при этом заполнять необязательно.';
				|en = 'Attention. If there is more than 1 SNILS or more than 1 individual in the document
				|    filling in the individual in the document header is disabled due to ambiguity.
				| In this case, manual processing of the document is implied
				|    and the ""Notification processed, work with document completed"" checkbox is expected to be enabled manually
				|    after sending all the missing information.
				| It is not necessary to fill in an individual.'"));
		КонецЕсли;
		
		Результат.Кратко = СтрСоединить(МассивКратко, Символы.ПС);
		Результат.Подробно = (
			Результат.Кратко
			+ Символы.ПС
			+ Символы.ПС
			+ НСтр("ru = 'Подробный журнал:';
					|en = 'Detailed log:'")
			+ Символы.ПС
			+ Символы.ПС
			+ СтрСоединить(РезультатАнализа.ПодробныйЖурнал, Символы.ПС + Символы.ПС));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область Команды

&НаСервере
Процедура ВключитьВозможностьРедактированияНаСервере()
	// Пользовательские поля.
	Элементы.Организация.ТолькоПросмотр = Ложь;
	Элементы.Дата.ТолькоПросмотр = Ложь;
	Элементы.Номер.ТолькоПросмотр = Ложь;
	Элементы.ВходящийНомер.ТолькоПросмотр = Ложь;
	Элементы.ВходящаяДата.ТолькоПросмотр = Ложь;
	Элементы.ВходящийРеестр.ТолькоПросмотр = Ложь;
	Элементы.ВходящийИдентификаторРеестра.ТолькоПросмотр = Ложь;
	Элементы.ИсходящийРеестр.Вид       = ВидПоляФормы.ПолеВвода;
	Элементы.ИсходящийРеестр.Заголовок = НСтр("ru = 'Реестр';
												|en = 'Registry'");
	Элементы.ИсходящийРеестр.УстановитьДействие("АвтоПодбор", "Подключаемый_ИсходящийРеестрАвтоПодбор");
	// Служебные поля.
	Элементы.Загружено.ТолькоПросмотр = Ложь;
	Элементы.ДатаОтправкиПодтверждения.ТолькоПросмотр = Ложь;
	Элементы.ПодтверждениеПолученоФСС.ТолькоПросмотр = Ложь;
	Элементы.ТребуетсяПодтверждение.ТолькоПросмотр = Ложь;
	Элементы.МаксимальнаяДатаПодтверждения.ТолькоПросмотр = Ложь;
	Элементы.МаксимальнаяДатаОтправкиРеестра.ТолькоПросмотр = Ложь;
	
	ОбновитьВидимостьДоступность();
КонецПроцедуры

#КонецОбласти

#Область ЭлементыШапки

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ЗафиксироватьИзменениеРеквизита("Организация");
	ОбновитьВторичныеДанныеИВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ФизическоеЛицоПриИзмененииНаСервере()
	ЗафиксироватьИзменениеРеквизита("ФизическоеЛицо");
	ЗафиксироватьИзменениеРеквизита("Сотрудник");
	Объект.Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(
		Объект.ФизическоеЛицо,
		Объект.Организация,
		НачалоДня(Объект.ВходящаяДата));
	ОбновитьВторичныеДанныеИВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	ЗафиксироватьИзменениеРеквизита("ФизическоеЛицо");
	ЗафиксироватьИзменениеРеквизита("Сотрудник");
	ФиксацияВторичныхДанныхВДокументах.ЗаполнитьФизическоеЛицо(Объект);
	ОбновитьВторичныеДанныеИВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ВходящийЗапросПриИзмененииНаСервере()
	ЗафиксироватьИзменениеРеквизита("ВходящийЗапрос");
	ОбновитьВторичныеДанныеИВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ВходящийОтветНаЗапросПриИзмененииНаСервере()
	ЗафиксироватьИзменениеРеквизита("ВходящийОтветНаЗапрос");
	ОбновитьВторичныеДанныеИВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ВходящийРеестрПриИзмененииНаСервере()
	ЗафиксироватьИзменениеРеквизита("ВходящийРеестр");
	ОбновитьВторичныеДанныеИВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ВходящееЗаявлениеПриИзмененииНаСервере()
	ЗафиксироватьИзменениеРеквизита("ВходящееЗаявление");
	Объект.ВходящийПервичныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВходящееЗаявление, "ДокументОснование");
	ВходящийПервичныйДокументПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВходящийПервичныйДокументПриИзмененииНаСервере()
	ЗафиксироватьИзменениеРеквизита("ВходящийПервичныйДокумент");
	ОбновитьВторичныеДанныеИВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеИВидимостьДоступность()
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ОпределятьАвтоматическиПриИзмененииНаСервере()
	Если Объект.ОпределятьАвтоматически Тогда
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(
			ЭтотОбъект,
			"ВходящийПервичныйДокумент");
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(
			ЭтотОбъект,
			"ИсходящийПервичныйДокумент");
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(
			ЭтотОбъект,
			"ИсходящееЗаявление");
	КонецЕсли;
	ЗафиксироватьИзменениеРеквизита("ОпределятьАвтоматически");
	ОбновитьВторичныеДанныеИВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ИсходящийПервичныйДокументПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.ИсходящийПервичныйДокумент) Тогда
		Объект.ОпределятьАвтоматически = Ложь;
	КонецЕсли;
	ЗафиксироватьИзменениеРеквизита("ИсходящийПервичныйДокумент");
	ОбновитьВторичныеДанныеИВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ИсходящееЗаявлениеПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.ИсходящееЗаявление) Тогда
		Объект.ОпределятьАвтоматически = Ложь;
	КонецЕсли;
	ЗафиксироватьИзменениеРеквизита("ИсходящееЗаявление");
	ОбновитьВторичныеДанныеИВидимостьДоступность();
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокЗаявленийДляПодбора(ФизическоеЛицо, ПервичныйДокумент, ИсключаемоеЗаявление)
	Возврат Документы.ИзвещениеФСС.СписокВыбораЗаявлений(
		ФизическоеЛицо,
		ПервичныйДокумент,
		ИсключаемоеЗаявление,
		10);
КонецФункции

&НаСервереБезКонтекста
Функция СписокРеестровДляПодбора(ПервичныйДокумент, Заявление, ИсключаемоеЗаявление)
	СписокРеестров = Новый СписокЗначений;
	Реестры = Документы.ИзвещениеФСС.РеестрыПоЗаявлению(Заявление, ПервичныйДокумент, ИсключаемоеЗаявление, 10);
	Если Реестры <> Неопределено Тогда
		СписокРеестров.ЗагрузитьЗначения(Реестры.ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	Возврат СписокРеестров;
КонецФункции

&НаСервере
Процедура ИсходящийРеестрПриИзмененииНаСервере()
	Объект.ОпределятьАвтоматически = Ложь;
	ЗафиксироватьИзменениеРеквизита("ИсходящийРеестр");
	ОбновитьВторичныеДанныеИВидимостьДоступность();
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Свойства

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	Возврат РеквизитФормыВЗначение("Объект").ОбъектЗафиксирован();
КонецФункции

&НаСервере
Процедура ОбновитьВторичныеДанныеНаСервере()
	Если ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ФиксацияЗаполнитьИдентификаторыФиксТЧ(ЭтотОбъект);
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ДокументОбъект);
	
	ПараметрыФиксации = ЭтотОбъект["ПараметрыФиксацииВторичныхДанных"];
	ДокументИзменен = ДокументОбъект.ОбновитьВторичныеДанные(ПараметрыФиксации);
	
	Если ДокументИзменен Тогда
		Если ТолькоПросмотр Или Не ПравоДоступа("Изменение", ДокументОбъект.Метаданные()) Тогда
			ФиксацияВторичныхДанныхВДокументахФормы.ВывестиПредупреждениеОНаличииИзмененийВИсходныхДанныхКоторыеНельзяПрименить(
				ЭтотОбъект);
		Иначе
			Если Не ДокументОбъект.ЭтоНовый() Тогда
				ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Истина);
			КонецЕсли;
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			ФиксацияЗаполнитьРеквизитыФормыФикс(Объект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФиксацияОписаниеФормы(ПараметрыФиксацииВторичныхДанных) Экспорт
	ОписаниеФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеФормы();
	
	ОписаниеЭлементовФормы = Новый Соответствие();
	ОписаниеЭлементаФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ОписаниеЭлементаФормы.ПрефиксПути = "Объект";
	Для Каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов Цикл
		ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеЭлементаФормы);
	КонецЦикла;
	ОписаниеФормы.Вставить("ОписаниеЭлементовФормы", ОписаниеЭлементовФормы);
	
	ОписаниеФормы.Вставить("ФормаРедактируетсяПослеФиксации", Ложь);
	Возврат ОписаниеФормы;
КонецФункции

&НаСервере
Функция ФиксацияБыстрыйПоискРеквизитов()
	БыстрыйПоискРеквизитов = Новый Соответствие; // Ключ - имя элемента, значение - имя реквизита.
	
	ПараметрыФиксации = ЭтотОбъект["ПараметрыФиксацииВторичныхДанных"];
	Для Каждого КлючИЗначение Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ИмяРеквизита = КлючИЗначение.Значение.ИмяРеквизита;
		//Если Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
		//	БыстрыйПоискРеквизитов.Вставить(ИмяРеквизита, ИмяРеквизита);
		//ИначеЕсли Элементы.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
		//	БыстрыйПоискРеквизитов.Вставить(КлючИЗначение.Ключ, ИмяРеквизита);
		//КонецЕсли;
		Если Элементы.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			БыстрыйПоискРеквизитов.Вставить(КлючИЗначение.Ключ, КлючИЗначение);
		ИначеЕсли Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
			БыстрыйПоискРеквизитов.Вставить(ИмяРеквизита, КлючИЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат БыстрыйПоискРеквизитов;
КонецФункции

&НаСервере
Процедура ФиксацияЗаполнитьРеквизитыФормыФикс(ТекущийОбъект)
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ФиксацияЗаполнитьИдентификаторыФиксТЧ(Форма)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗаполнитьИдентификаторыСтрок(Форма);
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеИсправленияНаСервере()
	Объект.ОпределятьАвтоматически = Истина;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОчиститьФиксациюИзменений(ЭтотОбъект, Объект);
	ФиксацияЗаполнитьРеквизитыФормыФикс(Объект);
	ОбновитьВторичныеДанныеИВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(ЭтотОбъект, Элемент, ОписаниеЭлементов);
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьИзменениеРеквизита(Имя)
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(
		ЭтотОбъект,
		Элементы[Имя],
		ОписаниеЭлементов);
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(
		ЭтотОбъект,
		Имя);
КонецПроцедуры

#КонецОбласти

#Область Поддержка

&НаСервере
Функция ПодготовитьВопросВПоддержку()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Вложения = Новый Массив;
	Возврат СЭДОФСС.ПодготовитьВопросВПоддержку(ДокументОбъект, Вложения);
КонецФункции

#КонецОбласти

#КонецОбласти
