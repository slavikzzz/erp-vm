///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(ФизическиеЛица.ФизическоеЛицо, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ИзвещениеФСС;
	Если Не СЭДОФСС.ДоступенОбменЧерезСЭДО()
		Или Не ПравоДоступа("Изменение", МетаданныеДокумента) Тогда
		Возврат; // Нет прав.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(МетаданныеДокумента.ПолноеИмя());
	Если Разделы.Количество() = 0 Тогда
		Возврат; // Некорректное внедрение.
	КонецЕсли;
	
	Требования = ТребованияПоОтправке();
	ВРаботе                  = Требования.Количество();
	ТребуетсяЗагрузить       = Требования.НайтиСтроки(Новый Структура("ТребуетсяЗагрузить", Истина)).Количество();
	ТребуетсяОтветитьВсего   = Требования.НайтиСтроки(Новый Структура("ТребуетсяОтветить", Истина)).Количество();
	ТребуетсяОтветитьСегодня = Требования.НайтиСтроки(Новый Структура("ТребуетсяОтветитьСегодня", Истина)).Количество();
	ТребуетсяОтветитьЗавтра  = ТребуетсяОтветитьВсего - ТребуетсяОтветитьСегодня;
	ТребуетсяПодтвердить     = Требования.НайтиСтроки(Новый Структура("ТребуетсяПодтвердить", Истина)).Количество();
	ИмяДокумента             = МетаданныеДокумента.Имя;
	ПредставлениеСписка      = МетаданныеДокумента.ПредставлениеСписка;
	
	Для Каждого Раздел Из Разделы Цикл
		
		ПолноеИмяРаздела = СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_ВРаботе_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ВРаботе > 0);
		Дело.Важное         = (ТребуетсяОтветитьСегодня > 0);
		Дело.Владелец       = Раздел;
		Дело.Представление  = ПредставлениеСписка;
		Дело.Количество     = ВРаботе;
		Дело.Подсказка      = НСтр("ru = 'Извещения о представлении недостающих документов для выплаты пособий СФР.';
									|en = 'Notifications about submission of the necessary documents to receive benefits from the Social Insurance Fund of Russia.'");
		Дело.ПараметрыФормы = Новый Структура("ТолькоВРаботе", Истина);
		Дело.Форма          = "Документ.ИзвещениеФСС.ФормаСписка";
		
		ИдентификаторРодителя = Дело.Идентификатор;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_Загрузить_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ТребуетсяЗагрузить > 0);
		Дело.Важное         = Истина;
		Дело.Владелец       = ИдентификаторРодителя;
		Дело.Представление  = НСтр("ru = 'Получить новые извещения из СФР';
									|en = 'Get new notifications from the Social Insurance Fund of Russia'");
		Дело.Количество     = ТребуетсяЗагрузить;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_ОтветитьСегодня_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ТребуетсяОтветитьСегодня > 0);
		Дело.Важное         = Истина;
		Дело.Владелец       = ИдентификаторРодителя;
		Дело.Представление  = НСтр("ru = 'Отправить недостающие сведения сегодня';
									|en = 'Send the missing information today'");
		Дело.Количество     = ТребуетсяОтветитьСегодня;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_Ответить_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ТребуетсяОтветитьЗавтра > 0);
		Дело.Важное         = Ложь;
		Дело.Владелец       = ИдентификаторРодителя;
		Дело.Представление  = НСтр("ru = 'Отправить недостающие сведения';
									|en = 'Send the missing information'");
		Дело.Количество     = ТребуетсяОтветитьЗавтра;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_Подтвердить_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ТребуетсяПодтвердить > 0);
		Дело.Важное         = Ложь;
		Дело.Владелец       = ИдентификаторРодителя;
		Дело.Представление  = НСтр("ru = 'Подтвердить получение';
									|en = 'Confirm receipt'");
		Дело.Количество     = ТребуетсяПодтвердить;
		
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ТекущиеДела

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область СЭДО

Функция ТипСообщения() Экспорт
	Возврат 10;
КонецФункции

Процедура ЗаполнитьКонтекстПолученияДанныхВложения(Результат) Экспорт
	
	ИменаРеквизитов = "ВходящийФайл, ДатаОтправкиПодтверждения, Обработано, ПодтверждениеПолученоФСС, МаксимальнаяДатаПодтверждения";
	РеквизитыИзвещения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Результат.Ссылка, ИменаРеквизитов);
	
	Результат.СсылкаФайла = РеквизитыИзвещения.ВходящийФайл;
	
	ПодтверждениеОтправлено = ЗначениеЗаполнено(РеквизитыИзвещения.ДатаОтправкиПодтверждения)
		Или РеквизитыИзвещения.ПодтверждениеПолученоФСС;
	ПодтверждениеТребуетсяОтправлять = ЗначениеЗаполнено(РеквизитыИзвещения.МаксимальнаяДатаПодтверждения);
	
	Если РеквизитыИзвещения.Обработано
		Или ПодтверждениеОтправлено
		Или Не ПодтверждениеТребуетсяОтправлять
		Или Не ПравоДоступа("Изменение", Результат.Ссылка.Метаданные())
		Или Не Результат.ПравоСохранения Тогда
		Результат.ОтветНаВопрос = 2; // Открыть документ без лишних вопросов.
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет виды извещений ФСС.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьВидИзвещений(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзвещениеФСС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИзвещениеФСС КАК ИзвещениеФСС
	|ГДЕ
	|	ИзвещениеФСС.ВидИзвещенияФСС = ЗНАЧЕНИЕ(Перечисление.ВидыИзвещенийФСС.ПустаяСсылка)
	|	И ИзвещениеФСС.ВходящийФайл <> ЗНАЧЕНИЕ(Справочник.ИзвещениеФССПрисоединенныеФайлы.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидИзвещенияФСС = Перечисления.ВидыИзвещенийФСС.ИзвещениеОПредставленииНедостающихСведений;
		СЭДОФСС.ЗаписатьДокумент(ДокументОбъект);
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

// Заполняет таблицу ФизическиеЛица.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьТаблицуФизическихЛицИзвещений(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзвещениеФСС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИзвещениеФСС КАК ИзвещениеФСС
	|ГДЕ
	|	ИзвещениеФСС.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ЗаполнитьТаблицуФизическихЛиц();
		СЭДОФСС.ЗаписатьДокумент(ДокументОбъект);
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "Сотрудник");
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ФиксируемыеРеквизиты = ФиксируемыеРеквизиты();
	ФиксируемыеТаблицы = Новый Структура("СтрокиРеестров", СтрРазделить("НомерСтрокиРеестра", ",", Ложь));
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты, ФиксируемыеТаблицы);
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеРеквизиты()
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	// При помощи механизмов фиксации описываются только механизмы обновления вторичных данных.
	// Механизмы заполнения первичных данных при этом могут существенно отличаться.
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "ПодтверждениеПолучения";
	Шаблон.ОснованиеЗаполнения = "ИдентификаторСообщения";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ТребуетсяПодтверждение");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаОтправкиПодтверждения");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПодтверждениеПолученоФСС");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "МаксимальнаяДатаПодтверждения";
	Шаблон.ОснованиеЗаполнения = "ВходящаяДата";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "МаксимальнаяДатаПодтверждения");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "МаксимальнаяДатаОтправкиРеестра";
	Шаблон.ОснованиеЗаполнения = "ДатаОтправкиПодтверждения";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "МаксимальнаяДатаОтправкиРеестра");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "ВходящиеДокументы";
	Шаблон.ОснованиеЗаполнения = "ВходящийИдентификаторРеестра";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВходящийРеестр");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВходящийЗапрос");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВходящийОтветНаЗапрос");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "КадровыеДанные";
	Шаблон.ОснованиеЗаполнения = "ВходящийИдентификаторРеестра";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ФизическоеЛицо");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Сотрудник");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Организация");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы                = "ВходящееЗаявлениеПервичныйДокумент";
	Шаблон.ОснованиеЗаполнения      = "ВходящийРеестр";
	Шаблон.ФиксацияГруппы           = Истина;
	Шаблон.ОтображатьПредупреждение = Ложь;
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВходящееЗаявление");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВходящийПервичныйДокумент");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы                = "ВходящийПервичныйДокумент";
	Шаблон.ОснованиеЗаполнения      = "ВходящийПервичныйДокумент";
	Шаблон.ОтображатьПредупреждение = Ложь;
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИсходящийПервичныйДокумент");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы                = "ИсходящийПервичныйДокумент";
	Шаблон.ОснованиеЗаполнения      = "ИсходящийПервичныйДокумент";
	Шаблон.ОтображатьПредупреждение = Ложь;
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИсходящееЗаявление");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы                = "ИсходящееЗаявление";
	Шаблон.ОснованиеЗаполнения      = "ИсходящееЗаявление";
	Шаблон.ОтображатьПредупреждение = Ложь;
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИсходящийРеестр");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Обработано", Ложь);
	
	// Реквизиты табличной части "СтрокиРеестров".
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.Путь           = "СтрокиРеестров";
	Шаблон.РеквизитСтроки = Истина;
	
	Шаблон.ИмяГруппы           = "КадровыеДанныеВТаблице";
	Шаблон.ОснованиеЗаполнения = "НомерСтрокиРеестра";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ФизическоеЛицо");
	
	Шаблон.ИмяГруппы           = "ВходящиеДокументыВТаблице";
	Шаблон.ОснованиеЗаполнения = "НомерСтрокиРеестра";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВходящееЗаявление");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВходящийПервичныйДокумент");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Обработано", Ложь);
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

#КонецОбласти

#Область СЭДО

Процедура ЗагрузитьУведомлениеОНаличииСообщения10(Страхователь, ИдентификаторСообщения, ТребуетсяПодтверждение) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		// Поиск документа по идентификатору сообщения.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИзвещениеФСС.Ссылка КАК Ссылка,
		|	ИзвещениеФСС.Дата КАК Дата,
		|	ИзвещениеФСС.ПометкаУдаления КАК ПометкаУдаления,
		|	ИзвещениеФСС.Организация КАК Организация,
		|	ИзвещениеФСС.Страхователь КАК Страхователь,
		|	ИзвещениеФСС.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение
		|ИЗ
		|	Документ.ИзвещениеФСС КАК ИзвещениеФСС
		|ГДЕ
		|	ИзвещениеФСС.ИдентификаторСообщения = &ИдентификаторСообщения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПометкаУдаления,
		|	Дата УБЫВ";
		Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Страхователь = Страхователь
				И Не Выборка.ПометкаУдаления
				И ТребуетсяПодтверждение = Выборка.ТребуетсяПодтверждение Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			ДокументОбъект = Документы.ИзвещениеФСС.СоздатьДокумент();
		КонецЕсли;
		
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			ДокументОбъект.Организация = Страхователь;
		КонецЕсли;
		ДокументОбъект.Страхователь           = Страхователь;
		ДокументОбъект.ИдентификаторСообщения = ИдентификаторСообщения;
		ДокументОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
		ДокументОбъект.ЗаполнитьДату();
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке уведомления об извещении ФСС %1 возникла ошибка: %2';
				|en = 'An error occurred while importing a notification of %1 SSF notification: %2'"),
			ИдентификаторСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьСообщение10(Страхователь, ИдентификаторСообщения, ТекстXML, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	// Пример XML сообщения:
	// <ns3:notice xmlns:ns2="http://www.fss.ru/integration/types/commonUq/v01" xmlns:ns3="http://www.fss.ru/integration/types/pvso/notice/v01">
	//     <tofCode>9000</tofCode>
	//     <regNum>9999502919</regNum>
	//     <date>2020-06-18+03:00</date>
	//     <number>3</number>
	//     <batchNum>E_2707411305_2018_08_03_04</batchNum>
	//     <registrRowNums>
	//         <rowNumber>5</rowNumber>
	//         <rowNumber>15</rowNumber>
	//     </registrRowNums>
	//     <ns2:attachment>
	//         <content>UEsDBB...AAA==</content>
	//         <ext>docx</ext>
	//         <size>7400</size>
	//     </ns2:attachment>
	//     <ns2:file>
	//         <content>PD...z4=</content>
	//         <ext>xml</ext>
	//         <size>1700</size>
	//     </ns2:file>
	// </ns3:notice>
	
	// Пример XML тега file:
	// <ns2:noticeInfo xmlns:ns2="http://www.fss.ru/integration/types/pvso/notice/xmlatach/v01">
	//     <responseNumber>3</responseNumber>
	//     <responseSentDate>2020-06-18+03:00</responseSentDate>
	//     <noticeState>2</noticeState>
	//     <noticeStateName>Отправлено</noticeStateName>
	//     <insurerName>ООО "РОМАШКА"</insurerName>
	//     <insurerRegNumber>9999502919</insurerRegNumber>
	//     <insurerCodeSubcode>9000</insurerCodeSubcode>
	//     <insurerInn>1234567890</insurerInn>
	//     <insurerKpp>123456789</insurerKpp>
	//     <officePostindex>123456</officePostindex>
	//     <officeAddress>ГОРОД МОСКВА, ...</officeAddress>
	//     <responceDate>2020-06-18+03:00</responceDate>
	//     <fundName>Филиал ... Фонда ... Российской Федерации</fundName>
	//     <fundAddress>123456, г. Москва, ...., телефон ...</fundAddress>
	//     <registrNumber>E_2707411305_2018_08_03_04</registrNumber>
	//     <personaInfoList/>
	//     <ceoPost>Начальник отдела ... Фонда ...</ceoPost>
	//     <ceoName>Иванов И.И.</ceoName>
	//     <noticeType>1</noticeType>
	//     <noticeTypeName>извещение</noticeTypeName>
	// </ns2:noticeInfo>
	
	// Поиск нужного узла.
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	ЭлементDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'notice']/..");
	Если ЭлементDOM = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуПоискаУзла(Результат, "notice");
		Возврат;
	КонецЕсли;
	
	// Чтение реквизитов узла.
	ФрагментXML = СериализацияБЗК.ОбъектDOMВСтрокуXML(ЭлементDOM);
	ОбъектXDTO = СериализацияБЗК.ОбъектXDTOИзСтрокиXML(ФрагментXML);
	РеквизитыИзвещения = ОбщегоНазначенияБЗК.ЗначенияСвойств(ОбъектXDTO, "tofCode, regNum, regNumSFR, date, number, batchNum, attachment");
	РеквизитыВложения = ОбщегоНазначенияБЗК.ЗначенияСвойств(РеквизитыИзвещения.attachment, "content, ext, size");
	Если РеквизитыВложения.content = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуЗаполненностиУзла(Результат, "notice.attachment.content", ФрагментXML);
		Возврат;
	КонецЕсли;
	
	НовыеНомераСтрок = Новый Массив;
	RowNumbers = СериализацияБЗК.СписокXDTO(ОбъектXDTO, "registrRowNums.rowNumber");
	Для Каждого RowNumber Из RowNumbers Цикл
		НомерСтрокиРеестра = СериализацияБЗК.ЗначениеXML(RowNumber, Тип("Число"));
		Если ТипЗнч(НомерСтрокиРеестра) = Тип("Число") Тогда
			НовыеНомераСтрок.Добавить(НомерСтрокиРеестра);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из РеквизитыИзвещения Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Строка") Тогда
			РеквизитыИзвещения.Вставить(КлючИЗначение.Ключ, СокрЛП(КлючИЗначение.Значение));
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючИЗначение Из РеквизитыВложения Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Строка") Тогда
			РеквизитыВложения.Вставить(КлючИЗначение.Ключ, СокрЛП(КлючИЗначение.Значение));
		КонецЕсли;
	КонецЦикла;
	
	// Новые значения реквизитов документа.
	ИменаПолей = "Загружено,Страхователь,ИдентификаторСообщения,ВходящийИдентификаторРеестра,ВходящийНомер,ВходящаяДата";
	НовыеЗначения = Новый Структура(ИменаПолей);
	НовыеЗначения.Загружено                    = Истина;
	НовыеЗначения.Страхователь                 = Страхователь;
	НовыеЗначения.ИдентификаторСообщения       = ИдентификаторСообщения;
	НовыеЗначения.ВходящийИдентификаторРеестра = РеквизитыИзвещения.batchNum;
	НовыеЗначения.ВходящийНомер = СериализацияБЗК.ЗначениеXML(РеквизитыИзвещения.number, Тип("Число"));
	НовыеЗначения.ВходящаяДата  = СериализацияБЗК.ЗначениеXML(РеквизитыИзвещения.date,   Тип("Дата"));
	
	// Новые значения реквизитов присоединенного файла.
	ДвоичныеДанныеФайла = СериализацияБЗК.ЗначениеXML(РеквизитыВложения.content, Тип("ДвоичныеДанные"));
	
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Идентификатор, Кодировка");
	ПараметрыФайла.РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(РеквизитыВложения.ext);
	ПараметрыФайла.Служебный          = Истина;
	ПараметрыФайла.Идентификатор      = ИдентификаторСообщения;
	
	// Поиск документа по идентификатору сообщения.
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИзвещениеФСС.Ссылка КАК Ссылка,
		|	ИзвещениеФСС.Дата КАК Дата,
		|	ИзвещениеФСС.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Документ.ИзвещениеФСС КАК ИзвещениеФСС
		|ГДЕ
		|	ИзвещениеФСС.ИдентификаторСообщения = &ИдентификаторСообщения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПометкаУдаления,
		|	Дата УБЫВ";
		Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
		
		ЕстьИзменения = Ложь;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			ДокументОбъект = Документы.ИзвещениеФСС.СоздатьДокумент();
		КонецЕсли;
		
		// Обновление реквизитов документа.
		Если Не ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			ЕстьИзменения = Истина;
			ДокументОбъект.Организация = Страхователь;
		КонецЕсли;
		
		СтарыеЗначения = Новый Структура(ИменаПолей);
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ДокументОбъект, ИменаПолей);
		Если Не ОбщегоНазначенияБЗК.ЗначенияСовпадают(СтарыеЗначения, НовыеЗначения) Тогда
			ЕстьИзменения = Истина;
			ЗаполнитьЗначенияСвойств(ДокументОбъект, НовыеЗначения, ИменаПолей);
			ДокументОбъект.ЗаполнитьДату();
		КонецЕсли;
		
		ДокументОбъект.ЗаполнитьВходящийРеестр(ЕстьИзменения);
		ДокументОбъект.ОбновитьНомераСтрок(НовыеНомераСтрок, ЕстьИзменения);
		ДокументОбъект.ЗаполнитьСтрокиРеестров(ЕстьИзменения);
		ДокументОбъект.ЗаполнитьВходящийЗапросИОтвет(ЕстьИзменения);
		
		Если ЕстьИзменения Тогда
			ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		// Обновление присоединенного файла.
		ПараметрыФайла.ВладелецФайлов   = ДокументОбъект.Ссылка;
		ПараметрыФайла.ИмяБезРасширения = ПредставлениеДокумента(ДокументОбъект);
		ВходящийФайл = ОбновитьФайл(ДвоичныеДанныеФайла, ПараметрыФайла);
		
		// Запись ссылки на файл в реквизиты документа.
		ДокументОбъект.Прочитать();
		Если ДокументОбъект.ВходящийФайл <> ВходящийФайл Тогда
			Если Не ЗначениеЗаполнено(ДокументОбъект.ВидИзвещенияФСС) Тогда
				ДокументОбъект.ВидИзвещенияФСС = Перечисления.ВидыИзвещенийФСС.ИзвещениеОПредставленииНедостающихСведений;
			КонецЕсли;
			ДокументОбъект.ВходящийФайл = ВходящийФайл;
			ДокументОбъект.ОбновитьВторичныеДанные();
			ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СЭДОФСС.ОшибкаОбработки(Результат, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Результат.Обработано = Истина;
КонецПроцедуры

Функция ОбновитьФайл(ДвоичныеДанныеФайла, ПараметрыФайла)
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	&ИсточникДанных КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ПрисоединенныеФайлы.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("ВладелецФайла", ПараметрыФайла.ВладелецФайлов);
	Запрос.УстановитьПараметр("Идентификатор", ПараметрыФайла.Идентификатор);
	
	ИмяОбъекта = ПараметрыФайла.ВладелецФайлов.Метаданные().Имя;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсточникДанных", "Справочник." + ИмяОбъекта + "ПрисоединенныеФайлы"); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	Если Выборка.Следующий() Тогда 
		СсылкаФайла = Выборка.Ссылка;
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресДвоичныхДанных);
		ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", "");
		РаботаСФайлами.ОбновитьФайл(СсылкаФайла, ПараметрыФайла);
	Иначе
		СсылкаФайла = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресДвоичныхДанных);
	КонецЕсли;
	
	Возврат СсылкаФайла;
КонецФункции

Функция ПредставлениеДокумента(РеквизитыДокумента)
	Если ЗначениеЗаполнено(РеквизитыДокумента.ВходящийНомер)
		И ЗначениеЗаполнено(РеквизитыДокумента.ВходящаяДата) Тогда
		Номер = РеквизитыДокумента.ВходящийНомер;
		Дата  = РеквизитыДокумента.ВходящаяДата;
	Иначе
		Номер = РеквизитыДокумента.Номер;
		Дата  = РеквизитыДокумента.Дата;
	КонецЕсли;
	
	ФИО = Строка(РеквизитыДокумента.ФизическоеЛицо);
	Если ЗначениеЗаполнено(ФИО) Тогда
		Шаблон = НСтр("ru = 'Извещение ФСС %1 от %2 (%3)';
						|en = 'SSF notification %1 dated %2 (%3)'");
	Иначе
		Шаблон = НСтр("ru = 'Извещение ФСС %1 от %2';
						|en = 'SSF notification %1 dated %2'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Номер, Формат(Дата, "ДЛФ=D"), ФИО);
КонецФункции

#КонецОбласти

#Область Регламенты

Функция МаксимальнаяДатаПодтвержденияПолучения(Объект) Экспорт
	Возврат СЭДОФСС.СледующийРабочийДень(Объект.ВходящаяДата, РабочихДнейНаПодтверждениеПолучения());
КонецФункции

Функция МаксимальнаяДатаОтправкиРеестра(Объект) Экспорт
	Если ЗначениеЗаполнено(Объект.ДатаОтправкиПодтверждения)
		И Объект.ДатаОтправкиПодтверждения < Объект.МаксимальнаяДатаПодтверждения Тогда
		ДатаОтсчета = Объект.ДатаОтправкиПодтверждения;
	Иначе
		ДатаОтсчета = Объект.МаксимальнаяДатаПодтверждения;
	КонецЕсли;
	Возврат СЭДОФСС.СледующийРабочийДень(ДатаОтсчета, РабочихДнейНаОтправкуРеестра());
КонецФункции

// См. п.7 Положения № 1 утвержденного Постановлением Правительства РФ от 21.04.2011 N 294.
Функция РабочихДнейНаПодтверждениеПолучения()
	Возврат 1;
КонецФункции

// См. п.7 Положения № 1 утвержденного Постановлением Правительства РФ от 21.04.2011 N 294.
Функция РабочихДнейНаОтправкуРеестра()
	Возврат 5;
КонецФункции

#КонецОбласти

#Область ТекущиеДела

Функция ТребованияПоОтправке()
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	НачалоРабочегоДня = НачалоДня(СЭДОФСС.БлижайшийРабочийДень(НачалоТекущегоДня));
	// Бумагу отправляют через 2-3 дня, а на подтверждение получения дается 1 день.
	НачалоТекущегоДняМинусДваДня = НачалоТекущегоДня - 86400 * 2;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИзвещениеФСС.Ссылка КАК Ссылка,
	|	НЕ ИзвещениеФСС.Загружено КАК ТребуетсяЗагрузить,
	|	ИзвещениеФСС.Загружено КАК ТребуетсяОтветить,
	|	ВЫБОР
	|		КОГДА ИзвещениеФСС.Загружено
	|				И ИзвещениеФСС.МаксимальнаяДатаОтправкиРеестра <= &НачалоРабочегоДня
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяОтветитьСегодня,
	|	ВЫБОР
	|		КОГДА ИзвещениеФСС.Загружено
	|				И НЕ ИзвещениеФСС.ПодтверждениеПолученоФСС
	|				И ИзвещениеФСС.ДатаОтправкиПодтверждения = &ПустаяДата
	|				И ИзвещениеФСС.МаксимальнаяДатаПодтверждения >= &НачалоТекущегоДняМинусДваДня
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяПодтвердить
	|ИЗ
	|	Документ.ИзвещениеФСС КАК ИзвещениеФСС
	|ГДЕ
	|	НЕ ИзвещениеФСС.Обработано
	|	И НЕ ИзвещениеФСС.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("НачалоРабочегоДня", НачалоРабочегоДня);
	Запрос.УстановитьПараметр("НачалоТекущегоДняМинусДваДня", НачалоТекущегоДняМинусДваДня);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#Область Заполнение

Процедура ПриЗаписиПервичногоДокумента(ПервичныйДокументОбъект, Отказ) Экспорт
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	// АПК:96-выкл Ключевое слово ОБЪЕДИНИТЬ использовано по назначению.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзвещениеФСС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИзвещениеФСС КАК ИзвещениеФСС
	|ГДЕ
	|	ИзвещениеФСС.ИсходящийПервичныйДокумент В (&Ссылка, &ИсправленныйДокумент)
	|	И ИзвещениеФСС.ОпределятьАвтоматически
	|	И НЕ ИзвещениеФСС.Обработано
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзвещениеФСС.Ссылка
	|ИЗ
	|	Документ.ИзвещениеФСС КАК ИзвещениеФСС
	|ГДЕ
	|	ИзвещениеФСС.ВходящийПервичныйДокумент В (&Ссылка, &ИсправленныйДокумент)
	|	И ИзвещениеФСС.ОпределятьАвтоматически
	|	И НЕ ИзвещениеФСС.Обработано";
	// АПК:96-вкл
	ИсправленныйДокумент = ОбщегоНазначенияБЗК.ЗначениеСвойства(ПервичныйДокументОбъект, "ИсправленныйДокумент");
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.УстановитьПараметр("Ссылка",               ПервичныйДокументОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ОбновитьВторичныеДанные();
			ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось обновить извещение ""%1"": %2';
					|en = 'Cannot update notification ""%1"": %2'"),
				Выборка.Ссылка,
				Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписиЗаявленияНаВыплатуПособия(ЗаявлениеОбъект, Отказ) Экспорт
	
	// АПК:96-выкл Ключевое слово ОБЪЕДИНИТЬ использовано по назначению.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзвещениеФСС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИзвещениеФСС КАК ИзвещениеФСС
	|ГДЕ
	|	ИзвещениеФСС.ИсходящийПервичныйДокумент = &ПервичныйДокумент
	|	И ИзвещениеФСС.ОпределятьАвтоматически
	|	И НЕ ИзвещениеФСС.Обработано
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзвещениеФСС.Ссылка
	|ИЗ
	|	Документ.ИзвещениеФСС КАК ИзвещениеФСС
	|ГДЕ
	|	ИзвещениеФСС.ВходящийПервичныйДокумент = &ПервичныйДокумент
	|	И ИзвещениеФСС.ОпределятьАвтоматически
	|	И НЕ ИзвещениеФСС.Обработано";
	Запрос.УстановитьПараметр("ПервичныйДокумент", ЗаявлениеОбъект.ДокументОснование);
	// АПК:96-вкл
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ОбновитьВторичныеДанные();
			ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось обновить извещение ""%1"": %2';
					|en = 'Cannot update notification ""%1"": %2'"),
				Выборка.Ссылка,
				Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция СписокВыбораЗаявлений(ФизическоеЛицо, ПервичныйДокумент, ИсключаемоеЗаявление, Количество) Экспорт
	Результат = Новый СписокЗначений;
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Результат;
	КонецЕсли;
	// Если первичный документ заполнен - получить последнее заявление по документу.
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
		Отбор.Вставить("ДокументОснование", ПервичныйДокумент);
	Иначе
		Отбор.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	КонецЕсли;
	Поля = "Ссылка, Дата";
	Сортировки = "Дата Убыв, Ссылка Убыв";
	Запрос = Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗапросПоДокументу(Отбор, Поля, Количество, Сортировки);
	Таблица = Запрос.Выполнить().Выгрузить();
	Результат.ЗагрузитьЗначения(Таблица.ВыгрузитьКолонку("Ссылка"));
	Если ЗначениеЗаполнено(ИсключаемоеЗаявление) Тогда
		ЭлементСписка = Результат.НайтиПоЗначению(ИсключаемоеЗаявление);
		Если ЭлементСписка <> Неопределено Тогда
			Результат.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция РеестрыПоЗаявлению(Заявление, ПервичныйДокумент, ИсключаемоеЗаявление, Количество) Экспорт
	Если Не ЗначениеЗаполнено(Заявление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Реестр.Ссылка КАК Ссылка,
	|	Реестр.СтатусДокумента КАК СтатусДокумента,
	|	Реестр.Номер КАК Номер,
	|	Реестр.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПринятФСС)
	|			ТОГДА 6
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПереданВФСС)
	|			ТОГДА 5
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.Подготовлен)
	|			ТОГДА 4
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.НеПринятФСС)
	|			ТОГДА 3
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.Аннулирован)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ВесСостояния,
	|	Реестр.ПометкаУдаления КАК ПометкаУдаления,
	|	Реестр.Проведен КАК Проведен
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК ТаблицаСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК Реестр
	|		ПО ТаблицаСведений.Ссылка = Реестр.Ссылка
	|ГДЕ
	|	&Условия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления,
	|	Проведен УБЫВ,
	|	ВесСостояния УБЫВ,
	|	Дата УБЫВ";
	
	Если Количество = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "");
	ИначеЕсли Количество > 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + Формат(Количество, "ЧГ="));
	КонецЕсли;
	
	Условия = Новый Массив;
	Условия.Добавить("ТаблицаСведений.Заявление = &Заявление");
	Запрос.УстановитьПараметр("Заявление", Заявление);
	Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
		Условия.Добавить("ТаблицаСведений.ПервичныйДокумент = &ПервичныйДокумент");
		Запрос.УстановитьПараметр("ПервичныйДокумент", ПервичныйДокумент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсключаемоеЗаявление) Тогда
		Условия.Добавить("ТаблицаСведений.Заявление <> &ИсключаемоеЗаявление");
		Запрос.УстановитьПараметр("ИсключаемоеЗаявление", ИсключаемоеЗаявление);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условия", СтрСоединить(Условия, " И "));
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#Область ФизическиеЛица

Процедура ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС) Экспорт
	Возврат; // В сообщениях 10 Фонд явно не указывает СНИЛС. Он ссылается на строки реестров.
КонецПроцедуры

#КонецОбласти

Процедура ЗаписатьДокумент(ДокументОбъект, РежимЗаписи) Экспорт
	ДокументОбъект.ДействияПередЗаписью();
	СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, Ложь, РежимЗаписи);
	ДокументОбъект.ДействияПриЗаписи();
КонецПроцедуры

#КонецОбласти

#КонецЕсли