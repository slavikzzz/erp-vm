#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	ДействияПередЗаписью();
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	ДействияПриЗаписи();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПервичноеЗаполнение

Процедура ЗаполнитьДату() Экспорт
	ТекущаяДата = ТекущаяДатаСеанса();
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящиеСообщенияСЭДОФСС.ДатаЗагрузки КАК ДатаЗагрузки,
	|	ВходящиеСообщенияСЭДОФСС.ДатаСоздания КАК ДатаСоздания,
	|	ВходящиеСообщенияСЭДОФСС.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор = &ИдентификаторСообщения";
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачалоТекущегоДня = НачалоДня(ТекущаяДата);
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Дата)
			И Выборка.Дата < НачалоТекущегоДня
			И Выборка.Дата < Дата Тогда
			Дата = Выборка.Дата;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ДатаСоздания)
			И Выборка.ДатаСоздания < НачалоТекущегоДня
			И Выборка.ДатаСоздания < Дата Тогда
			Дата = Выборка.ДатаСоздания;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ДатаЗагрузки)
			И Выборка.ДатаЗагрузки < НачалоТекущегоДня
			И Выборка.ДатаЗагрузки < Дата Тогда
			Дата = Выборка.ДатаЗагрузки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВходящийРеестр(ЕстьИзменения) Экспорт
	Если Не ЗначениеЗаполнено(ВходящийИдентификаторРеестра) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Реестр.ИдентификаторФСС КАК ИдентификаторФСС,
	|	Реестр.Ссылка КАК Ссылка,
	|	Реестр.Номер КАК Номер,
	|	Реестр.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПринятФСС)
	|			ТОГДА 6
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПереданВФСС)
	|			ТОГДА 5
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.Подготовлен)
	|			ТОГДА 4
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.НеПринятФСС)
	|			ТОГДА 3
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.Аннулирован)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ВесСостояния,
	|	Реестр.ПометкаУдаления КАК ПометкаУдаления,
	|	Реестр.Проведен КАК Проведен
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК Реестр
	|ГДЕ
	|	Реестр.ИдентификаторФСС = &ВходящийИдентификаторРеестра
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления,
	|	Проведен УБЫВ,
	|	ВесСостояния УБЫВ,
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("ВходящийИдентификаторРеестра", ВходящийИдентификаторРеестра);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗначениеПоля(ВходящийРеестр, Выборка.Ссылка, ЕстьИзменения);
КонецПроцедуры

// Обновляет состав табличной части СтрокиРеестров, добавляет недостающие строки.
Процедура ОбновитьНомераСтрок(НовыеНомераСтрок, ЕстьИзменения) Экспорт
	
	// Удаление отсутствующих номеров.
	ОбратныйИндекс = СтрокиРеестров.Количество();
	Пока ОбратныйИндекс > 0 Цикл
		ОбратныйИндекс = ОбратныйИндекс - 1;
		СтрокаРеестра = СтрокиРеестров[ОбратныйИндекс];
		Если НовыеНомераСтрок.Найти(СтрокаРеестра.НомерСтрокиРеестра) = Неопределено Тогда
			СтрокиРеестров.Удалить(СтрокаРеестра);
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление новых номеров.
	Для Каждого НомерСтрокиРеестра Из НовыеНомераСтрок Цикл
		Если СтрокиРеестров.Найти(НомерСтрокиРеестра, "НомерСтрокиРеестра") = Неопределено Тогда
			СтрокиРеестров.Добавить().НомерСтрокиРеестра = НомерСтрокиРеестра;
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обновляет вторичные данные табличной части СтрокиРеестров, заполняет сотрудника и документы.
Процедура ЗаполнитьСтрокиРеестров(ЕстьИзменения) Экспорт
	Если Не ЗначениеЗаполнено(ВходящийРеестр) Или СтрокиРеестров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление реквизитов Таблицы.
	ПоляТаблицы = СтрРазделить("ФизическоеЛицо, ВходящееЗаявление, ВходящийПервичныйДокумент", ", ", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияИзРеестра.НомерСтроки КАК НомерСтрокиРеестра,
	|	СведенияИзРеестра.Заявление КАК ВходящееЗаявление,
	|	СведенияИзРеестра.ПервичныйДокумент КАК ВходящийПервичныйДокумент,
	|	ЕСТЬNULL(СведенияИзЗаявления.СНИЛСПолучателя, """") КАК СНИЛС,
	|	ЕСТЬNULL(ФизическиеЛица.Ссылка, СведенияИзРеестра.ФизическоеЛицо) КАК ФизическоеЛицо
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК СведенияИзРеестра
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК СведенияИзЗаявления
	|		ПО СведенияИзРеестра.Заявление = СведенияИзЗаявления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (СведенияИзЗаявления.СНИЛСПолучателя = ФизическиеЛица.СтраховойНомерПФР)
	|ГДЕ
	|	СведенияИзРеестра.Ссылка = &ВходящийРеестр
	|	И СведенияИзРеестра.НомерСтроки В(&НомераСтрок)";
	Запрос.УстановитьПараметр("ВходящийРеестр", ВходящийРеестр);
	Запрос.УстановитьПараметр("НомераСтрок", СтрокиРеестров.ВыгрузитьКолонку("НомерСтрокиРеестра"));
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРеестра Из Таблица Цикл
		СтрокаИзвещения = СтрокиРеестров.Найти(СтрокаРеестра.НомерСтрокиРеестра, "НомерСтрокиРеестра");
		Если СтрокаИзвещения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ИмяПоля Из ПоляТаблицы Цикл
			ОбновитьЗначениеПоля(СтрокаИзвещения[ИмяПоля], СтрокаРеестра[ИмяПоля], ЕстьИзменения);
		КонецЦикла;
	КонецЦикла;
	
	// Сортировка строк в соответствии с порядком строк в реестре.
	СтрокиРеестров.Сортировать("НомерСтрокиРеестра");
	
	// Обновление реквизитов шапки.
	ПоляШапки = Новый Структура;
	ПоляШапки.Вставить("ФизическоеЛицо",            Справочники.ФизическиеЛица.ПустаяСсылка());
	ПоляШапки.Вставить("ВходящееЗаявление",         Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ПустаяСсылка());
	ПоляШапки.Вставить("ВходящийПервичныйДокумент", Неопределено);
	
	Для Каждого КлючИЗначение Из ПоляШапки Цикл
		ИмяПоля = КлючИЗначение.Ключ;
		Массив = КоллекцииБЗК.УникальныеЗначенияКолонки(СтрокиРеестров, ИмяПоля);
		КоллекцииБЗК.УдалитьПустыеЗначенияМассива(Массив);
		Если Массив.Количество() = 1 Тогда
			Значение = Массив[0];
		ИначеЕсли Массив.Количество() > 0 И ИмяПоля = "ФизическоеЛицо" Тогда
			Значение = Массив[0];
		Иначе
			Значение = КлючИЗначение.Значение;
		КонецЕсли;
		ОбновитьЗначениеПоля(ЭтотОбъект[ИмяПоля], Значение, ЕстьИзменения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВходящийЗапросИОтвет(ЕстьИзменения) Экспорт
	Если Не ЗначениеЗаполнено(ВходящийИдентификаторРеестра) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтветНаЗапрос.ВходящийЗапрос КАК ВходящийЗапрос,
	|	РегистрацииОтветов.ИсходящийДокумент КАК ВходящийОтветНаЗапрос,
	|	ОтветНаЗапрос.ПервичныйДокумент КАК ВходящийПервичныйДокумент,
	|	ОтветНаЗапрос.СотрудникСНИЛС КАК СНИЛС,
	|	ЕСТЬNULL(ФизическиеЛица.Ссылка, ОтветНаЗапрос.ФизическоеЛицо) КАК ФизическоеЛицо,
	|	ОтветНаЗапрос.НомерЛН КАК НомерЛН,
	|	РегистрацииОтветов.ДатаОтправки КАК ДатаОтправки,
	|	ВЫБОР
	|		КОГДА РегистрацииОтветов.ДатаОтправки < &ДатаИзвещения
	|			ТОГДА 1
	|		КОГДА РегистрацииОтветов.ДатаОтправки = &ДатаИзвещения
	|			ТОГДА 2
	|		КОГДА РегистрацииОтветов.ДатаОтправкиОператору <= &ДатаИзвещения
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК ПриоритетОтправки,
	|	ВЫБОР
	|		КОГДА РегистрацииОтветов.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
	|				И РегистрацииОтветов.Зарегистрирован
	|			ТОГДА 1
	|		КОГДА РегистрацииОтветов.ДатаОтправкиОператору > ДАТАВРЕМЯ(1, 1, 1)
	|				И РегистрацииОтветов.Зарегистрирован
	|			ТОГДА 2
	|		КОГДА РегистрацииОтветов.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК ПриоритетПринятия
	|ИЗ
	|	РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК РегистрацииОтветов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтветНаЗапросФССДляРасчетаПособия КАК ОтветНаЗапрос
	|		ПО РегистрацииОтветов.ИсходящийДокумент = ОтветНаЗапрос.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ОтветНаЗапрос.СотрудникСНИЛС = ФизическиеЛица.СтраховойНомерПФР)
	|ГДЕ
	|	РегистрацииОтветов.РегистрацияНомерРеестра = &ВходящийИдентификаторРеестра
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетОтправки,
	|	ПриоритетПринятия,
	|	ДатаОтправки УБЫВ,
	|	РегистрацииОтветов.ДатаОтправкиОператору УБЫВ";
	Запрос.УстановитьПараметр("ВходящийИдентификаторРеестра", ВходящийИдентификаторРеестра);
	Запрос.УстановитьПараметр("ДатаИзвещения", ВходящаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Выборка.ВходящийЗапрос) И Не ЗначениеЗаполнено(Выборка.ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗначениеПоля(ВходящийЗапрос, Выборка.ВходящийЗапрос, ЕстьИзменения);
	ОбновитьЗначениеПоля(ВходящийОтветНаЗапрос, Выборка.ВходящийОтветНаЗапрос, ЕстьИзменения);
	ОбновитьЗначениеПоля(ВходящийПервичныйДокумент, Выборка.ВходящийПервичныйДокумент, ЕстьИзменения);
	ОбновитьЗначениеПоля(ФизическоеЛицо, Выборка.ФизическоеЛицо, ЕстьИзменения);
	ОбновитьЗначениеПоля(НомерЛН, Выборка.НомерЛН, ЕстьИзменения);
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) И Не ЗначениеЗаполнено(ВходящийРеестр) И СтрокиРеестров.Количество() = 1 Тогда
		Для Каждого СтрокаРеестра Из СтрокиРеестров Цикл
			СтрокаРеестра.ФизическоеЛицо            = ФизическоеЛицо;
			СтрокаРеестра.ВходящийПервичныйДокумент = ВходящийПервичныйДокумент;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьЗначениеПоля(ТекущееЗначение, НовоеЗначение, ЕстьИзменения)
	Если ТекущееЗначение <> НовоеЗначение Тогда
		ЕстьИзменения   = Истина;
		ТекущееЗначение = НовоеЗначение;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ОбновитьВторичныеДанные(ПараметрыФиксации = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Модифицирован = Ложь;
	
	Если ОбъектЗафиксирован() Тогда
		Возврат Модифицирован;
	КонецЕсли;
	
	Если ПараметрыФиксации = Неопределено Тогда
		ПараметрыФиксации = Документы.ИзвещениеФСС.ПараметрыФиксацииВторичныхДанных();
	КонецЕсли;
	
	Если ЗаполнитьПодтверждениеПолучения(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьМаксимальнуюДатуПодтвержденияПолучения(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьМаксимальнуюДатуОтправкиРеестра(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьВходящиеДокументы(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьИсходящийПервичныйДокумент(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьИсходящееЗаявление(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьИсходящийРеестрИФлажокОбработано(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Возврат Модифицирован;
КонецФункции

Функция ОбъектЗафиксирован() Экспорт
	Возврат Обработано;
КонецФункции

Функция ЗаполнитьПодтверждениеПолучения(ПараметрыФиксации)
	Если Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Структура("ТребуетсяПодтверждение, ДатаОтправкиПодтверждения, ПодтверждениеПолученоФСС");
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор КАК Идентификатор,
	|	ВходящиеСообщенияСЭДОФСС.Организация КАК Организация,
	|	ВходящиеСообщенияСЭДОФСС.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	ВходящиеСообщенияСЭДОФСС.ДатаОтправкиПодтверждения КАК ДатаОтправкиПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ДатаПолученияИзвещенияОПолученииПодтверждения КАК ДатаПолученияИзвещенияОПолученииПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ОшибкаПодтверждения КАК ОшибкаПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ДатаПолученияОшибкиПодтверждения КАК ДатаПолученияОшибкиПодтверждения
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторСообщения);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 1 Тогда
		Найденные = Таблица.НайтиСтроки(Новый Структура("Организация", Страхователь));
		Если Найденные.Количество() > 0 Тогда
			СтрокаТаблицы = Найденные[0];
		Иначе
			СтрокаТаблицы = Таблица[0];
		КонецЕсли
	ИначеЕсли Таблица.Количество() = 1 Тогда
		СтрокаТаблицы = Таблица[0];
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты.ТребуетсяПодтверждение    = СтрокаТаблицы.ТребуетсяПодтверждение;
	Реквизиты.ДатаОтправкиПодтверждения = СтрокаТаблицы.ДатаОтправкиПодтверждения;
	Реквизиты.ПодтверждениеПолученоФСС  = ЗначениеЗаполнено(СтрокаТаблицы.ДатаПолученияИзвещенияОПолученииПодтверждения);
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьМаксимальнуюДатуПодтвержденияПолучения(ПараметрыФиксации)
	Если Не ЗначениеЗаполнено(ВходящаяДата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Структура("МаксимальнаяДатаПодтверждения");
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты.МаксимальнаяДатаПодтверждения = Документы.ИзвещениеФСС.МаксимальнаяДатаПодтвержденияПолучения(ЭтотОбъект);
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьМаксимальнуюДатуОтправкиРеестра(ПараметрыФиксации)
	Если Не ЗначениеЗаполнено(ВходящаяДата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Структура("МаксимальнаяДатаОтправкиРеестра");
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты.МаксимальнаяДатаОтправкиРеестра = Документы.ИзвещениеФСС.МаксимальнаяДатаОтправкиРеестра(ЭтотОбъект);
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьВходящиеДокументы(ПараметрыФиксации)
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Структура("Организация, Сотрудник, ВходящееЗаявление, ВходящийПервичныйДокумент");
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДатаНачалаСобытия = НачалоДня(ВходящаяДата);
	
	// Заполнение по данным исходного реестра.
	Если ЗначениеЗаполнено(ВходящийРеестр) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеестрПрямыхВыплат.Организация КАК Организация,
		|	ТаблицаСведений.Сотрудник КАК Сотрудник,
		|	ТаблицаСведений.Заявление КАК ВходящееЗаявление,
		|	ТаблицаСведений.ПервичныйДокумент КАК ВходящийПервичныйДокумент
		|ИЗ
		|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК ТаблицаСведений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК РеестрПрямыхВыплат
		|		ПО (РеестрПрямыхВыплат.Ссылка = &Реестр)
		|			И (ТаблицаСведений.Ссылка = &Реестр)
		|			И (ТаблицаСведений.ФизическоеЛицо = &ФизическоеЛицо)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаСведений.НомерСтроки";
		Запрос.УстановитьПараметр("Реестр", ВходящийРеестр);
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Таблица = Запрос.Выполнить().Выгрузить();
		Количество = Таблица.Количество();
		Если Количество = 1 Тогда
			ЗаполнитьЗначенияСвойств(Реквизиты, Таблица[0]);
		ИначеЕсли Количество > 1 Тогда
			Найденные = Таблица.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
			Если Найденные.Количество() = 1 Тогда
				ЗаполнитьЗначенияСвойств(Реквизиты, Найденные[0]);
			Иначе
				Таблица.Свернуть("Организация, Сотрудник");
				Если Таблица.Количество() = 1 Тогда
					ЗаполнитьЗначенияСвойств(Реквизиты, Таблица[0]);
				Иначе
					ЗаполнитьЗначенияСвойств(Реквизиты, Таблица[0], "Организация");
					Реквизиты.Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(
						ФизическоеЛицо,
						Реквизиты.Организация,
						ДатаНачалаСобытия);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение по кадровым данным.
	Если Не ЗначениеЗаполнено(Реквизиты.Сотрудник) Тогда
		ТекстОшибки = "";
		КадровыеДанные = КадровыйУчет.КадровыеДанныеОсновногоСотрудникаФизическогоЛица(
			Страхователь,
			ФизическоеЛицо,
			"Организация",
			ДатаНачалаСобытия,
			Ложь,
			ТекстОшибки);
		Если КадровыеДанные <> Неопределено Тогда
			Реквизиты.Организация = КадровыеДанные.Организация;
			Реквизиты.Сотрудник   = КадровыеДанные.Сотрудник;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Реквизиты.Организация) Тогда
		Реквизиты.Организация = Страхователь;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьИсходящийПервичныйДокумент(ПараметрыФиксации)
	Если Не ОпределятьАвтоматически Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Структура("ИсходящийПервичныйДокумент");
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВходящийПервичныйДокумент) Тогда
		Документ = СЭДОФСС.ПоследнийДокументЦепочкиИсправлений(ВходящийПервичныйДокумент);
		Если ЗначениеЗаполнено(Документ) Тогда
			Реквизиты.ИсходящийПервичныйДокумент = Документ;
		ИначеЕсли ТипЗнч(ВходящийПервичныйДокумент) = Тип("ДокументСсылка.БольничныйЛист") Тогда
			НомерЛН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВходящийПервичныйДокумент, "НомерЛисткаНетрудоспособности");
			ЗначенияРеквизитов = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(
				НомерЛН,
				ЗарплатаКадры.ГоловнаяОрганизация(Организация));
			Если ЗначенияРеквизитов <> Неопределено Тогда
				Реквизиты.ИсходящийПервичныйДокумент = ЗначенияРеквизитов.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьИсходящееЗаявление(ПараметрыФиксации)
	Если Не ОпределятьАвтоматически Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Структура("ИсходящееЗаявление");
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсходящийПервичныйДокумент) Тогда
		СписокЗаявлений = Документы.ИзвещениеФСС.СписокВыбораЗаявлений(
			ФизическоеЛицо,
			ИсходящийПервичныйДокумент,
			ВходящееЗаявление,
			2);
		Если СписокЗаявлений.Количество() = 1 Тогда
			Реквизиты.ИсходящееЗаявление = СписокЗаявлений[0].Значение;
		ИначеЕсли СписокЗаявлений.Количество() > 1 Тогда
			Реквизиты.ИсходящееЗаявление = СЭДОФСС.ПоследнийДокументЦепочкиИсправлений(СписокЗаявлений[0].Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьИсходящийРеестрИФлажокОбработано(ПараметрыФиксации)
	Реквизиты = Новый Структура("ИсходящийРеестр, Обработано");
	Реквизиты.Обработано = Ложь;
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реестры = Документы.ИзвещениеФСС.РеестрыПоЗаявлению(
		ИсходящееЗаявление,
		ИсходящийПервичныйДокумент,
		ВходящееЗаявление,
		1);
	Если Реестры <> Неопределено И Реестры.Количество() > 0 Тогда
		Реестр = Реестры[0];
		Реквизиты.ИсходящийРеестр = Реестр.Ссылка;
		Реквизиты.Обработано = РеестрОтправлен(Реестр);
	ИначеЕсли ВидИзвещенияФСС <> Перечисления.ВидыИзвещенийФСС.ИзвещениеОПредставленииНедостающихСведений Тогда
		Реквизиты.Обработано = Ложь;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция РеестрОтправлен(Реестр)
	Возврат Реестр.СтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПереданВФСС
		Или Реестр.СтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПринятФСС;
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

Процедура ЗаполнитьТаблицуФизическихЛиц() Экспорт
	
	ФизическиеЛица.Очистить();
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Строка = ФизическиеЛица.Добавить();
		Строка.ФизическоеЛицо = ФизическоеЛицо;
	КонецЕсли;
	
	Для Каждого СтрокаРеестра Из СтрокиРеестров Цикл
		Если ЗначениеЗаполнено(СтрокаРеестра.ФизическоеЛицо)
			И ФизическиеЛица.Найти(СтрокаРеестра.ФизическоеЛицо, "ФизическоеЛицо") = Неопределено Тогда
			Строка = ФизическиеЛица.Добавить();
			Строка.ФизическоеЛицо = СтрокаРеестра.ФизическоеЛицо;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПередЗаписью

Процедура ДействияПередЗаписью() Экспорт
	Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДата(); // АПК:143 Для фильтрации событий в журнале регистрации требуется дата сервера.
	КонецЕсли;
	
	// Физлицо заполняется безусловно, т.к. определяет права.
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;
	
	ЗаполнитьТаблицуФизическихЛиц();
КонецПроцедуры

#КонецОбласти

#Область ПриЗаписи

Процедура ДействияПриЗаписи() Экспорт
	Возврат; // Действия не требуются.
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли