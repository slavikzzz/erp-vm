
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаФорма.Заголовок = НСтр("ru = 'Ответ СФР:';
								|en = 'Ответ СФР:'") + " " + Объект.Заголовок;
	
	ПолучательТекстом = НСтр("ru = 'СФР';
							|en = 'СФР'");
	ОтправительТекстом = Строка(Объект.Организация);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ЭтаФорма.Заголовок = НСтр("ru = 'Ответ СФР:';
								|en = 'Ответ СФР:'") + " " + Объект.Заголовок;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбновитьПредставленияФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИндексФайла = Число(НавигационнаяСсылкаФорматированнойСтроки);
	ОбработатьВложениеНавигационнойСсылки(ИндексФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИмяСобытияПолучения = ЭлектронныйДокументооборотСФССКлиент.ИмяСобытияОповещенияЗавершенияПолученияСообщенийИзСЭДО();
	ИмяСобытияОтправки = ЭлектронныйДокументооборотСФССКлиент.ИмяСобытияОповещенияЗавершенияОтправкиСообщенийВСЭДО();
	
	Если ИмяСобытия = ИмяСобытияПолучения
		ИЛИ ИмяСобытия = ИмяСобытияОтправки Тогда
		
		УправлениеЭлементамиФормы();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура Отправить(Команда)
	
	ЕстьОшибки = Ложь;
	Для каждого Вложение Из Объект.Вложения Цикл
		Если Вложение.Содержимое.Пустая() Тогда
			ИмяКолонки = НСтр("ru = 'Имя файла';
								|en = 'Имя файла'");
			Текст = НСтр("ru = 'Не выбран файл документа';
						|en = 'Не выбран файл документа'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", ИмяКолонки,
					Вложение.НомерСтроки, "Вложения",
					Текст);
					
			РеквизитФормы = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Вложения", Вложение.НомерСтроки, "Содержимое");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , РеквизитФормы);
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(Объект.Заголовок) Тогда
		ИмяПоля = НСтр("ru = 'Тема';
						|en = 'Тема'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", ИмяПоля);
				
		РеквизитФормы = "Наименование";
		ПутьКДанным = "Объект.Заголовок";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , РеквизитФормы);
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Объект.ТекстОтвета) Тогда
		ИмяПоля = НСтр("ru = 'Содержание';
						|en = 'Содержание'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", ИмяПоля);
				
		РеквизитФормы = "Содержание";
		ПутьКДанным = "Объект.ТекстОтвета";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , РеквизитФормы, ПутьКДанным);
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(Объект.ТекстОтвета) > 2000 Тогда
		ИмяПоля = НСтр("ru = 'Содержание';
						|en = 'Содержание'");
		Детали = НСтр("ru = 'Превышен максимальный размер тела ответа 2000 символов';
						|en = 'Превышен максимальный размер тела ответа 2000 символов'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", ИмяПоля, , , Детали);
				
		РеквизитФормы = "Содержание";
		ПутьКДанным = "Объект.ТекстОтвета";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , РеквизитФормы, ПутьКДанным);
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Если Объект.Основание.Пустая() Тогда
		ИмяПоля = НСтр("ru = 'Основание';
						|en = 'Основание'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", ИмяПоля);
				
		РеквизитФормы = "Основание";
		ПутьКДанным = "Объект.Основание";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , РеквизитФормы);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	ОшибкиПриПроверке = ПроверитьФайлы();
	Если НЕ ПустаяСтрока(ОшибкиПриПроверке) Тогда
		ЗаголовокПредупреждения = НСтр("ru = 'Проверка вложений';
										|en = 'Проверка вложений'");
		ПоказатьПредупреждение(, ОшибкиПриПроверке, , ЗаголовокПредупреждения);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Если НЕ Ждать ЗадатьВопросОСохранении() Тогда
			Возврат;
		КонецЕсли;
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		Если НЕ Ждать ЗадатьВопросОПовторнойОтправкеОтвета() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьОтветНаОбращениеСФРПослеОтправки",
		ЭтотОбъект);
		
	ОтправитьОтветНаОбращениеСФР(ОписаниеОповещения, Объект.Ссылка, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаВложений

&НаКлиенте
Процедура ТаблицаВложенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если Объект.Вложения.Количество() >= 10 Тогда
		ТекстСообщения = НСтр("ru = 'Допускается не более 10 вложений.';
								|en = 'Допускается не более 10 вложений.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДобавитьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВложенийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ТаблицаВложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьВложение(ТекущиеДанные.Содержимое);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВложенийПередУдалением(Элемент, Отказ)

	ТекущиеДанные = Элементы.ТаблицаВложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьФайл(ТекущиеДанные.Содержимое);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВложенийПослеУдаления(Элемент)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьВложение(Файл)
	
	ДанныеФайла = ДанныеФайла(Файл, ЭтотОбъект.УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФайла(СсылкаНаФайл, Идентификатор)
	
	ПараметрыФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыФайла.ИдентификаторФормы = Идентификатор;
	Возврат РаботаСФайлами.ДанныеФайла(СсылкаНаФайл, ПараметрыФайла);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВложение()
	
	РезультатЗаписи = Записать();
	Если НЕ РезультатЗаписи Тогда
		Возврат;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ДобавитьВложениеИзФайлаПослеВыбораФайла",
		ЭтотОбъект);
	ОткрытьВыборФайла(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзФайлаПослеВыбораФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Если ТипЗнч(Результат) = Тип("Массив") Тогда
			Файл = Результат[0];
		Иначе
			Файл = Результат;
		КонецЕсли;
		
		Строка = Объект.Вложения.Добавить();
		Строка.Содержимое = Файл;
		РеквизитыФайла = РеквизитыФайла(Файл);
		Строка.ИмяФайла = РеквизитыФайла.Наименование + "." + РеквизитыФайла.Расширение;
		Строка.Размер = РеквизитыФайла.Размер;
		
		УправлениеЭлементамиФормы();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьФайлы(Файл = Неопределено)
	
	// Максимальный размер пакета 5 Мб.
	// С учетом того, что размер при перекодировани увеличивается в 2.5 раза
	// это соответствует 2 Мб двоичных данных.
	БайтВКилоБайте = 1024;
	МаксимальныйРазмерВМегабайтах = 2;
	МаксимальныйРазмер = МаксимальныйРазмерВМегабайтах * БайтВКилоБайте * БайтВКилоБайте;
	ФайлУказан = НЕ Файл = Неопределено;
	Если ФайлУказан Тогда
		РазмерФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "Размер");
		РазмерВМегабайтах = РазмерФайла / БайтВКилоБайте / БайтВКилоБайте;
	Иначе
		РазмерФайла = 0;
		РазмерВМегабайтах = 0;
	КонецЕсли;
	
	РазмерВложений = 0;
	Для каждого Вложение Из Объект.Вложения Цикл
		РазмерВложения = Вложение.Размер;
		РазмерВложений = РазмерВложений + РазмерВложения;
	КонецЦикла;
	
	РазмерВложений = РазмерВложений + РазмерФайла;
	РазмерВложенийВМегабайтах = РазмерВложений / БайтВКилоБайте / БайтВКилоБайте;
	ПредставлениеРазмера = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(РазмерВложений);
	
	Если РазмерВложенийВМегабайтах > МаксимальныйРазмерВМегабайтах  Тогда
		Превышение = РазмерВложений - МаксимальныйРазмер;
		ПредставлениеПревышения = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(Превышение);
		Если ФайлУказан Тогда
			Шаблон = НСтр("ru = 'Общий размер файлов %1 превышает максимально допустимый размер %2 МБ. Выберите файл меньшего размера.';
							|en = 'Общий размер файлов %1 превышает максимально допустимый размер %2 МБ. Выберите файл меньшего размера.'");
			ТекстОшибки = СтрШаблон(Шаблон, ПредставлениеРазмера, МаксимальныйРазмерВМегабайтах);
			УдалитьФайл(Файл);
		Иначе
			Шаблон = НСтр("ru = 'Размер вложений превышен на %1. Разрешено: %2 МБ.';
							|en = 'Размер вложений превышен на %1. Разрешено: %2 МБ.'");
			ТекстОшибки = СтрШаблон(Шаблон, ПредставлениеПревышения, МаксимальныйРазмерВМегабайтах);
		КонецЕсли;
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьФайл(Файл)
	
	// Очищаем данные файла.
	Данные = ПолучитьДвоичныеДанныеИзСтроки("");
	АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(Данные);
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресДвоичныхДанных); 
	ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", "");
	РаботаСФайлами.ОбновитьФайл(Файл, ПараметрыФайла);
	
	Файл.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборФайла(Оповещение)
	
	ДопустимыеРасширения = ДопустимыеРасширения();
	ТипыФильтра = Новый Массив;
	Для каждого Тип Из ДопустимыеРасширения Цикл
		ТипыФильтра.Добавить("*." + Тип);
	КонецЦикла;
	СтрокаРасширений = СтрСоединить(ТипыФильтра, ";");
	ФильтрШаблон = НСтр("ru = 'Все разрешенные типы (%1)|%1';
						|en = 'Все разрешенные типы (%1)|%1'");
	Фильтр = СтрШаблон(ФильтрШаблон, СтрокаРасширений);
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка,
		УникальныйИдентификатор,
		Фильтр, , Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаОбращениеСФРПослеОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Выполнено Тогда
		СохранитьРезультатОтправки(Результат);
		ИмяСобытия = "Ответ страхователя на обращение, отправлен";
		Оповестить(ИмяСобытия, Объект.Ссылка);
		ЗаголовокПредупреждения = НСтр("ru = 'Отправка ответа в ФСС';
										|en = 'Отправка ответа в ФСС'");
		ЗаголовокПредупреждения = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(ЗаголовокПредупреждения, Истина);
		ТекстОбОтправке = НСтр("ru = 'Ответ на обращение был успешно отправлен в ФСС.';
								|en = 'Ответ на обращение был успешно отправлен в ФСС.'");
		ТекстОбОтправке = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(ТекстОбОтправке, Истина);
		ПоказатьПредупреждение( , ТекстОбОтправке, , ЗаголовокПредупреждения);
	Иначе
		ЗаголовокПредупреждения = НСтр("ru = 'Ошибка при отправке ответа на обращение в ФСС';
										|en = 'Ошибка при отправке ответа на обращение в ФСС'");
		ЗаголовокПредупреждения = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(ЗаголовокПредупреждения, Истина);
		ПоказатьПредупреждение( ,Результат.ОписаниеОшибки, , ЗаголовокПредупреждения);
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатОтправки(РезультатОтправки)
	
	ОбменЧерезОператора = РезультатОтправки.ОбменЧерезОператора;
	
	ДатаОтправки = ТекущаяДатаСеанса();
	ОбъектОснование = Объект.Основание.ПолучитьОбъект();
	ОбъектОснование.ДатаОтправкиОтвета = ДатаОтправки;
	ОбъектОснование.Статус = Перечисления.СтатусыОтправки.Отправлен;
	ОбъектОснование.Записать();
	
	ИдентификаторСообщенияОтвета = РезультатОтправки.ИдентификаторЗапроса;
	Объект.ОбменЧерезОператора = ОбменЧерезОператора;
	Объект.ДатаОтправки = ДатаОтправки;
	Объект.ИдентификаторОтвета = ИдентификаторСообщенияОтвета;
	Объект.Статус = Перечисления.СтатусыОтправки.Отправлен;
	Записать();
	
	ЭлектронныйДокументооборотСФСС.ДобавитьОтправкуФССПоСЭДО(
		Объект.Ссылка,
		Объект.ИдентификаторОтвета,
		Объект.Организация,
		Объект.ДатаОтправки,
		ОбменЧерезОператора);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтправкиФСС.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ОтправкиФСС КАК ОтправкиФСС
	               |ГДЕ
	               |	ОтправкиФСС.ОтчетСсылка = &Обращение
	               |	И ОтправкиФСС.ПометкаУдаления = ЛОЖЬ
	               |	И ОтправкиФСС.Организация = &Организация";

	Запрос.УстановитьПараметр("Обращение", ОбъектОснование.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	ОтправкиОбращения = Запрос.Выполнить().Выгрузить();
	Если ОтправкиОбращения.Количество() = 0 Тогда
		ЭлектронныйДокументооборотСФСС.ДобавитьОтправкуФССПоСЭДО(
			ОбъектОснование.Ссылка,
			Объект.ИдентификаторОтвета,
			Объект.Организация,
			Объект.ДатаОтправки,
			ОбменЧерезОператора);
	Иначе
		Отправка = ОтправкиОбращения[0].Ссылка.ПолучитьОбъект();
		Отправка.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен;
		Отправка.ОбменЧерезОператора = ОбменЧерезОператора;
		Отправка.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Функция ЗадатьВопросОПовторнойОтправкеОтвета()
	
	Шаблон = НСтр("ru = 'Ответ на требование был отправлен %1. Отправить повторно?';
					|en = 'Ответ на требование был отправлен %1. Отправить повторно?'");
	ТекстВопроса = СтрШаблон(Шаблон, Объект.ДатаОтправки);
	Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
	
	Возврат Ответ = КодВозвратаДиалога.ОК;
	
КонецФункции

&НаКлиенте
Асинх Функция ЗадатьВопросОСохранении()
	
	ТекстВопроса = НСтр("ru = 'Перед отправкой ответа необходимо сохранить документ. Продолжить?';
						|en = 'Перед отправкой ответа необходимо сохранить документ. Продолжить?'");
	Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
	
	Возврат Ответ = КодВозвратаДиалога.ОК;;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьОтветНаОбращениеСФР(
		ОповещениеОбратногоВызова,
		ДокументОтвета,
		ЗадаватьВопросОТестовомСервере = Истина) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова",		ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("ДокументОтвета",					ДокументОтвета);
	ДополнительныеПараметры.Вставить("ЗадаватьВопросОТестовомСервере",	ЗадаватьВопросОТестовомСервере);
	ДополнительныеПараметры.Вставить("НомерОтправленнойСтрокиОтвета",	0);
	ДополнительныеПараметры.Вставить("ИдентификаторыСообщенияОтвета",	Новый Соответствие);
	ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент",				Неопределено);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьОтветНаОбращениеСФРПослеПолученияКонтекста",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаОбращениеСФРПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова 		= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	ДокументОтвета 					= ДополнительныеПараметры.ДокументОтвета;
	
	КонтекстЭДОКлиент 						= Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО 	= Результат.ТекстОшибки;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.КонтекстЭДОКлиент = КонтекстЭДОКлиент;
	СброситьБезПолучения = Истина;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.СвойстваОбменаПоСЭДОЧерезОператора(Объект.Организация,
		СброситьБезПолучения);
	СвойстваОбменаПоСЭДОЧерезОператора =
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.СвойстваОбменаПоСЭДОЧерезОператора(Объект.Организация);
	ДополнительныеПараметры.Вставить("СвойстваОбменаПоСЭДОЧерезОператора", СвойстваОбменаПоСЭДОЧерезОператора);

	ПараметрыОтправкиСообщения = КонтекстЭДОКлиент.ПараметрыОтправитьСообщениеСЭДОФСС();
	ПараметрыОтправкиСообщения.Вставить("РегистрационныйНомерФСС", "");
	ПараметрыОтправкиСообщения.Вставить("ТипВзаимодействия", 		Неопределено);
	ПараметрыОтправкиСообщения.Вставить("СвойстваДляОбмена", 		Неопределено);
	ПараметрыОтправкиСообщения.Вставить("НастройкиЗаписиОтправки", 	Неопределено);
	
	ЗаполнитьПараметрыОтправкиПоДокументу(ПараметрыОтправкиСообщения, ДокументОтвета);
	
	ПараметрыОтправкиСообщения.ОповещениеОбратногоВызова = ОповещениеОбратногоВызова;
	ПараметрыОтправкиСообщения.ОписаниеОшибки =
		НСтр("ru = 'Не удалось отправить ответ.';
			|en = 'Не удалось отправить ответ.'")
		+ Символы.ПС + "%1";
	
	КонтекстЭДОКлиент.ОтправитьСообщениеСЭДОФСС(
		ПараметрыОтправкиСообщения,
		Истина, , ,
		СвойстваОбменаПоСЭДОЧерезОператора);
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтправкиПоДокументу(ПараметрыОтправкаСообщения, ДокументОтвета)
	
	ТипыСообщений = ДокументооборотСФССКлиентСервер.ТипыСообщенийСЭДО(Истина);
	
	ДанныеШапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументОтвета, "Организация");
	ПараметрыОтправкаСообщения.ТипСообщения = ТипыСообщений.ТипСообщенияОтветНаОбращениеСФРКСтрахователю;
	ПараметрыОтправкаСообщения.Организация = ДанныеШапки.Организация;
	ПараметрыОтправкаСообщения.СодержимоеСообщения =
		СодержимоеСообщенияПоДокументуОтвета(ДокументОтвета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СодержимоеСообщенияПоДокументуОтвета(ДокументОтвета)
	
	// <v01:sedoAppealResponse xmlns:v01="http://www.fss.ru/integration/types/sedo/arm/v01">
	//  <appealUuid>string</appealUuid>
	//  <appealTitle>string</appealTitle>
	//  <appealBody>string</appealBody>
	//  <!--0 to 10 repetitions:-->
	//  <appealFile>
	//    <content>string</content>
	//    <fileName>string</fileName>
	//  </appealFile>
	// </v01:sedoAppealResponse>
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтветСтрахователяНаОбращениеСФР.Организация КАК Организация,
	               |	ОтветСтрахователяНаОбращениеСФР.Заголовок КАК Заголовок,
	               |	ОтветСтрахователяНаОбращениеСФР.ТекстОтвета КАК ТекстОтвета,
	               |	ОтветСтрахователяНаОбращениеСФР.Основание.Идентификатор КАК ОснованиеИдентификаторСообщения
	               |ИЗ
	               |	Документ.ОтветСтрахователяНаОбращениеСФР КАК ОтветСтрахователяНаОбращениеСФР
	               |ГДЕ
	               |	ОтветСтрахователяНаОбращениеСФР.Ссылка = &ДокументОтвета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Вложения.Ссылка КАК Ссылка,
	               |	Вложения.НомерСтроки КАК НомерСтроки,
	               |	Вложения.ИмяФайла КАК ИмяФайла,
	               |	Вложения.Содержимое КАК Содержимое
	               |ИЗ
	               |	Документ.ОтветСтрахователяНаОбращениеСФР.Вложения КАК Вложения
	               |ГДЕ
	               |	Вложения.Ссылка = &ДокументОтвета";
	
	Запрос.УстановитьПараметр("ДокументОтвета", ДокументОтвета);
	РезультатПакета = Запрос.ВыполнитьПакет();
	ДанныеШапки = РезультатПакета[0].Выгрузить()[0];
	Вложения = РезультатПакета[1].Выгрузить();
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	// создаем XML-дерево извещения
	ДеревоОтвета = КонтекстЭДО.СоздатьДеревоXML();
	
	ИмяКорневогоЭлемента = "v01:sedoAppealResponse";
	ПространствоИмен = "http://www.fss.ru/integration/types/sedo/arm/v01";

	КонтекстЭДО.ДобавитьУзелXML(ДеревоОтвета, "appealUuid", Ложь, ДанныеШапки.ОснованиеИдентификаторСообщения);
	КонтекстЭДО.ДобавитьУзелXML(ДеревоОтвета, "appealTitle", Ложь, ДанныеШапки.Заголовок);
	КонтекстЭДО.ДобавитьУзелXML(ДеревоОтвета, "appealBody", Ложь, ДанныеШапки.ТекстОтвета);
	
	Для каждого СтрокаДокумента Из Вложения Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Содержимое) Тогда
			Продолжить;
		КонецЕсли;
		Вложение = КонтекстЭДО.ДобавитьУзелXML(ДеревоОтвета, "appealFile", Ложь);
		ДанныеФайла = ПолучитьДанныеФайлаБСП(СтрокаДокумента.Содержимое);
		ДвоичныеДанныеПриложения =
			ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Контент = Base64Строка(ДвоичныеДанныеПриложения);
		Контент = СтрЗаменить(Контент, Символы.ВК, "");
		Контент = СтрЗаменить(Контент, Символы.ПС, "");
		Если ОтправлятьОписаниеДанных() Тогда
			Файл = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СтрокаДокумента.ИмяФайла);
			Расширение = СтрЗаменить(Файл.Расширение, ".", "");
			Шаблон = "data:%1;base64,%2";
			MIMEТип = MIMEТипПоСтроке(Расширение);
			Контент = СтрШаблон(Шаблон, MIMEТип, Контент);
		КонецЕсли;
		КонтекстЭДО.ДобавитьУзелXML(Вложение, "content", Ложь,
			Контент);
		КонтекстЭДО.ДобавитьУзелXML(Вложение, "fileName",
			Ложь, СтрокаДокумента.ИмяФайла);
	КонецЦикла;
	
	Текст = ВыгрузитьДеревоВXML(ДеревоОтвета, ИмяКорневогоЭлемента, ПространствоИмен);
	Возврат Текст;
	
КонецФункции

&НаСервереБезКонтекста
Функция MIMEТипПоСтроке(СтрТипСодержимогоИлиРасширение)
	
	СтрокаТипаВНижнемРегистре = нрег(СтрТипСодержимогоИлиРасширение);
	Если СтрокаТипаВНижнемРегистре = "txt" ИЛИ СтрокаТипаВНижнемРегистре = "plain866"
		ИЛИ СтрокаТипаВНижнемРегистре = "текст1251" ИЛИ СтрокаТипаВНижнемРегистре = "plain1251" Тогда
		Возврат "text/plain";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "xml" Тогда
		Возврат "application/xml";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "htm" ИЛИ СтрокаТипаВНижнемРегистре = "html" Тогда
		Возврат "text/html";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "pdf" Тогда
		Возврат "application/pdf";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "rtf" Тогда
		Возврат "application/rtf";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "tif" ИЛИ СтрокаТипаВНижнемРегистре = "tiff" Тогда
		Возврат "image/tiff";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "jpg" ИЛИ СтрокаТипаВНижнемРегистре = "jpeg" Тогда
		Возврат "image/jpeg";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "png" Тогда
		Возврат "image/png";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "gif" Тогда
		Возврат "image/gif";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "bmp" Тогда
		Возврат "image/bmp";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "doc" Тогда
		Возврат "application/msword";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "xls" Тогда
		Возврат "application/vnd.ms-excel";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "odt" Тогда
		Возврат "application/vnd.oasis.opendocument.text";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "ods" Тогда
		Возврат "application/vnd.oasis.opendocument.spreadsheet";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "docx" Тогда
		Возврат "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "xlsx" Тогда
		Возврат "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
	ИначеЕсли СтрокаТипаВНижнемРегистре = "sgn" Тогда
		Возврат "application/x-pkcs7-signature";
	Иначе // "unknown"
		Возврат "application/octet-stream";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтправлятьОписаниеДанных()
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ИмяКорневогоЭлемента = Неопределено, ПространствоИмен = "")
	
	ПотокXML = СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ИмяКорневогоЭлемента, ПространствоИмен);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ИмяКорневогоЭлемента, ПространствоИмен = "")
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьНачалоЭлемента(ИмяКорневогоЭлемента);
			ПотокXML.ЗаписатьАтрибут("xmlns:v01", ПространствоИмен);
		КонецЕсли;
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ИмяКорневогоЭлемента);
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист Из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ИмяКорневогоЭлемента);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаБСП(Знач ПрисоединенныйФайл,
			Знач ИдентификаторФормы = Неопределено,
			Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл,
		ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
	Возврат ДанныеФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНовыйПотокXML()
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

&НаКлиенте
Функция ДопустимыеРасширения() 
	
	ДопустимыеРасширения = Новый Массив;
	ДопустимыеРасширения.Добавить("pdf");
	ДопустимыеРасширения.Добавить("doc");
	ДопустимыеРасширения.Добавить("docx");
	ДопустимыеРасширения.Добавить("xls");
	ДопустимыеРасширения.Добавить("xlsx");
	ДопустимыеРасширения.Добавить("txt");
	ДопустимыеРасширения.Добавить("*");
	
	Возврат ДопустимыеРасширения;
	
КонецФункции

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ОтветОтправлен = ЗначениеЗаполнено(Объект.ДатаОтправки);
	
	Элементы.УведомлениеОПриеме.Видимость = Ложь;
	Элементы.БлокСостоянияОтправки.Видимость = ОтветОтправлен;
	Элементы.КнопкаОтправить.Видимость = НЕ ОтветОтправлен;
	Элементы.КнопкаЗаписать.Видимость = НЕ ОтветОтправлен;

	ТолькоПросмотр = ОтветОтправлен;
	ЭтотОбъект.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ТаблицаВложений.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.Содержание.ТолькоПросмотр = ТолькоПросмотр;
	
	Элементы.БлокОшибокИИзвещений.Видимость = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтправкиФСС.Ссылка КАК Ссылка,
	               |	ОтправкиФСС.СтатусОтправки КАК СтатусОтправки
	               |ИЗ
	               |	Справочник.ОтправкиФСС КАК ОтправкиФСС
	               |ГДЕ
	               |	ОтправкиФСС.ОтчетСсылка = &ОтветНаОбращение
	               |	И ОтправкиФСС.ПометкаУдаления = ЛОЖЬ
	               |	И ОтправкиФСС.Организация = &Организация";

	Запрос.УстановитьПараметр("ОтветНаОбращение", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	ОтправкиОтвета = Запрос.Выполнить().Выгрузить();
	Если ОтправкиОтвета.Количество() = 0 Тогда
		Статус = Объект.Статус;
	Иначе
		Статус = ОтправкиОтвета[0].СтатусОтправки;
	КонецЕсли;
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(
		Объект.Ссылка, Объект.Организация, Перечисления.ТипыКонтролирующихОрганов.ФСС);
	НаименованиеЭтапа = ПараметрыПрорисовкиПанелиОтправки.ТекущийЭтапОтправки.ТекстСтатуса;
	Если Статус = Перечисления.СтатусыОтправки.НеПринят Тогда
		Элементы.БлокСостоянияОтправки.ЦветФона = ЦветаСтиля.ЦветФонаОшибкиОтправки;
	ИначеЕсли Статус = Перечисления.СтатусыОтправки.Сдан Тогда
		Элементы.БлокСостоянияОтправки.ЦветФона = ЦветаСтиля.ЦветФонаУдачнойОтправки;
	ИначеЕсли Статус = Перечисления.СтатусыОтправки.Отправлен Тогда
		Элементы.БлокСостоянияОтправки.ЦветФона = ЦветаСтиля.ЦветФонаТекущейОтправки;
	Иначе
		Элементы.БлокСостоянияОтправки.ЦветФона = ЦветаСтиля.БазовыйЦветФонаЭтапаОтправки;
	КонецЕсли;
	Элементы.ЗаголовокСтатуса.Заголовок = НаименованиеЭтапа;
	
	ОбновитьПредставленияФайлов();
	
	ОтветОтправлен = ЗначениеЗаполнено(Объект.ДатаОтправки);
	
	Элементы.ГруппаВложения.Видимость = Не ОтветОтправлен;
	Элементы.Вложения.Видимость = ОтветОтправлен И Объект.Вложения.Количество() > 0;
	Элементы.ЗаголовокВложения.Видимость = ОтветОтправлен И Объект.Вложения.Количество() > 0;
	
	ТекстОшибки = ПроверитьФайлы();
	Элементы.ДекорацияПустая.Заголовок = ТекстОшибки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияФайлов()
	
	СписокИменФайлов = Новый Массив;
	ИндексФайла = 0;
	Для каждого Вложение Из Объект.Вложения Цикл
		ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вложение.Содержимое, "ПометкаУдаления");
		Если ЗначениеЗаполнено(Вложение.Содержимое)
			И НЕ ПометкаУдаления Тогда
			ДанныеФайла = Новый Структура("ИмяФайла,Размер,Ссылка",
				Вложение.ИмяФайла, Вложение.Размер, Строка(ИндексФайла));
			СписокИменФайлов.Добавить(ДанныеФайла);
			ИндексФайла = ИндексФайла + 1;
		КонецЕсли;
		Размер = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(Вложение.Размер);
		Шаблон = НСтр("ru = '%1 (%2)';
						|en = '%1 (%2)'");
		Вложение.ИмяФайлаПредставление = СтрШаблон(Шаблон, Вложение.ИмяФайла, Размер);
	КонецЦикла;
	
	Элементы.Вложения.Заголовок = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ФорматированноеПредставлениеСпискаВложений(
		СписокИменФайлов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыФайла(Файл)
	
	РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл,
		"Наименование, Расширение, Размер");
	
	Возврат РеквизитыФайла;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВложениеНавигационнойСсылки(ИндексФайла)
	
	Файл = Объект.Вложения[ИндексФайла];
	ДанныеФайла = ДанныеФайла(Файл.Содержимое, ЭтотОбъект.УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры

#КонецОбласти