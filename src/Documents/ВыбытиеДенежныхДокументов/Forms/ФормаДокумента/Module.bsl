#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Объект.Исправление Тогда
		Элементы.ДенежныеДокументыПодборПоОстаткам.Видимость = Ложь;
	КонецЕсли;
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ВыбытиеДенежныхДокументов.ПараметрыВыбораСтатейИАналитик(Объект.ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);

	// Настройка счетов учета.
	ПараметрыНастройки = Документы.ВыбытиеДенежныхДокументов.ПараметрыНастройкиСчетовУчета(Объект.ХозяйственнаяОперация);
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		Если Объект.СтатьяРасходов = Неопределено Тогда
			Объект.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаПоДокументу.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	УстановитьЗаголовокСтатьяДоходовРасходов();
	УстановитьВидимость();
	ВзаиморасчетыСервер.ФормаПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ПериодАвансовогоОтчета = "Через неделю" Тогда
			Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()) + 7 * 24 * 3600;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьОбщихКоманд();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ВыбытиеДенежныхДокументов.Форма.ФормаПодбораДенежныхДокументов" Тогда
		ОбработкаПодбораОстатковДД(РезультатВыбора.АдресДДВХранилище);
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ВыбытиеДенежныхДокументов.ПараметрыВыбораСтатейИАналитик(Объект.ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);

	ПараметрыНастройки = Документы.ВыбытиеДенежныхДокументов.ПараметрыНастройкиСчетовУчета(Объект.ХозяйственнаяОперация);
	НастройкаСчетовУчетаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриЧтенииСозданииНаСервере();
	
	ВзаиморасчетыСервер.ФормаПриЧтенииНаСервере(ЭтаФорма);
	
	// Устанавливается видимость ГФУ для расчетов по договору
	УстановитьВидимость();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВыбытиеДенежныхДокументов", ПараметрыЗаписи, Объект.Ссылка);
	ВзаиморасчетыКлиент.ФормаПослеЗаписи(ЭтаФорма);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИсправлениеДокументовКлиент.ПослеЗаписи(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	НастроитьОтображениеЭлементовПоИтогамРасхождений(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	НастройкаСчетовУчетаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	ВзаиморасчетыСервер.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьВидимость();
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	УстановитьЗаголовокПоХозОперации();
	
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);

	НастройкаСчетовУчетаСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	ВзаиморасчетыСервер.ФормаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект.ДополнительныеСвойства);
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияУсловийЗакупокПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	ПриИзмененииСоглашенияСервер();
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияУсловийЗакупок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	ПриИзмененииСтатьиРасходовСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	
	ПриИзмененииСтатьиРасходовСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовВозвратаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтраженияВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ЗаданВопросОбОчистке = ПроверитьДенежныеДокументыПоВалюте();
	Если Не ЗаданВопросОбОчистке Тогда
		ВалютаДокумента = Объект.Валюта;
		РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
		УстановитьПараметрыВыбораДД();
	КонецЕсли;
	
	ПриИзмененииВалютыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшенДолгСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ПроверятьРаспроведенность = Ложь;
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Организация",           НСтр("ru = 'Организация';
																					|en = 'Company'"));
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Партнер",               НСтр("ru = 'Поставщик';
																					|en = 'Supplier'"));
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Контрагент",            НСтр("ru = 'Контрагент';
																					|en = 'Counterparty'"));
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("ХозяйственнаяОперация", НСтр("ru = 'Операция';
																					|en = 'Operation'"));
	Оповещение = Новый ОписаниеОповещения("УменьшенДолгСтрокойНажатиеПослеПроверки", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшенДолгСтрокойНажатиеПослеПроверки(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("УменьшенДолгСтрокойНажатиеЗавершение", ЭтотОбъект);
	ПоместитьРасшифровкуПлатежаВоВременноеХранилище();
	ВзаиморасчетыКлиент.ВзаиморасчетыПоВозвратуТоваров(ЭтаФорма, Элементы.УменьшенДолгСтрокой, Оповещение);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьРасшифровкуПлатежаВоВременноеХранилище()
	ВзаиморасчетыСервер.ПоместитьРасшифровкуПлатежаВоВременноеХранилище(ЭтаФорма, "УменьшенДолгСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура УменьшенДолгСтрокойНажатиеЗавершение(АдресПлатежейВХранилище, ДополнительныеПараметры) Экспорт
	
	Если АдресПлатежейВХранилище <> Неопределено Тогда
		Модифицированность = Истина;
		ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище);
		РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвансовогоОтчетаПриИзменении(Элемент)
	
	ПересчитатьДатуАвансовогоОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвансовогоОтчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "ДоДаты" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтотОбъект);
		
		ПоясняющийТекст = НСтр("ru = 'Выберите дату отчета по выдаваемому авансу';
								|en = 'Select a report date for the issued advance'") + " ";
		ОткрытьФорму(
			"ОбщаяФорма.ВыборДаты",
			Новый Структура("ПоясняющийТекст, НачальноеЗначение", ПоясняющийТекст),
			,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) <> Тип("Дата") Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
		
		Элемент.ОграничениеТипа = ОписаниеТиповДата;
		
		Элемент.КнопкаВыбора = Ложь;
		Элемент.РедактированиеТекста = Ложь;
	КонецЕсли;
	
	Элементы.ДатаАвансовогоОтчета.Видимость = (ТипЗнч(ВыбранноеЗначение) <> Тип("Дата") И ВыбранноеЗначение <> "ДоДаты");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораДаты(ВыбраннаяДата, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		Если ВыбраннаяДата < Объект.Дата Тогда
			ВыбраннаяДата = Объект.Дата;
		КонецЕсли;
		
		Объект.ДатаАвансовогоОтчета = ВыбраннаяДата;
		ПериодАвансовогоОтчета = ВыбраннаяДата;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Дата"));
		ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
		
		Элементы.ПериодАвансовогоОтчета.ОграничениеТипа = ОписаниеТиповДата;
		
		Элементы.ПериодАвансовогоОтчета.КнопкаВыбора = Истина;
		Элементы.ПериодАвансовогоОтчета.РедактированиеТекста = Истина;
	Иначе
		
		Если ТипЗнч(ПериодАвансовогоОтчета) = Тип("Дата") Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.ДатаАвансовогоОтчета = ТекущаяДата() + 7 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через неделю";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ТекущаяДата() + 14 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через две недели";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ТекущаяДата() + 30 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через месяц";
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДатаАвансовогоОтчета.Видимость = (ТипЗнч(ПериодАвансовогоОтчета) <> Тип("Дата"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПересчитатьДатуАвансовогоОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ДоговорПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособКомпенсацииПриИзменении(Элемент)
	СпособКомпенсацииПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ДенежныеДокументыПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеДокументыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеДокументыДенежныйДокументПриИзменении(Элемент)
	
	ПриИзмененииДенежногоДокументаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеДокументыЦенаВозвратаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДенежныеДокументы.ТекущиеДанные;
	ТекДанные.СуммаВозврата = ТекДанные.ЦенаВозврата * ТекДанные.Количество;
	
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеДокументыЦенаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДенежныеДокументы.ТекущиеДанные;
	ТекДанные.Сумма = ТекДанные.Цена * ТекДанные.Количество;
	
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеДокументыКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДенежныеДокументы.ТекущиеДанные;
	ТекДанные.Сумма = ТекДанные.Цена * ТекДанные.Количество;
	ТекДанные.СуммаВозврата = ТекДанные.ЦенаВозврата * ТекДанные.Количество;
	
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеДокументыСуммаПриИзменении(Элемент)
	
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеДокументыСуммаВозвратаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДенежныеДокументы.ТекущиеДанные;
	ТекДанные.ЦенаВозврата = ?(ТекДанные.Количество = 0, 0, ТекДанные.СуммаВозврата / ТекДанные.Количество);
	
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	МассивДД = Новый Массив;
	Для Каждого ТекДанные Из Объект.ДенежныеДокументы Цикл
		ДД = ТекДанные.ДенежныйДокумент;
		Если ЗначениеЗаполнено(ДД) И МассивДД.Найти(ДД) = Неопределено Тогда
			МассивДД.Добавить(ДД);
		КонецЕсли;
	КонецЦикла;
	
	ЭтоВозврат = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхДокументовПоставщику"));
	
	ПарамОткрытия = Новый Структура;
	ПарамОткрытия.Вставить("Подразделение",	Объект.Подразделение);
	ПарамОткрытия.Вставить("ВыбытиеДД",		Объект.Ссылка);
	ПарамОткрытия.Вставить("Ссылка",		Объект.Ссылка);
	ПарамОткрытия.Вставить("МОЛ",			Объект.МОЛОтправитель);
	ПарамОткрытия.Вставить("Валюта",		?(ЭтоВозврат, Объект.Валюта, Неопределено));
	ПарамОткрытия.Вставить("МассивДД",		МассивДД);
	ПарамОткрытия.Вставить("Организация",	Объект.Организация);
	
	ОткрытьФорму("Документ.ВыбытиеДенежныхДокументов.Форма.ФормаПодбораДенежныхДокументов", ПарамОткрытия, ЭтаФорма);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьПодчиненныеРеквизитыОбъекта(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииСтатьиРасходовСервер(ИмяЭлемента)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элементы[ИмяЭлемента]);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(
		Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	УстановитьВидимость();
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Организация");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	ДокументЗакупки = РеквизитФормыВЗначение("Объект");
	ДокументЗакупки.ЗаполнитьУсловияЗакупокПоУмолчанию();
	ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
	
	УстановитьДоступностьСоглашений();
	ЗакупкиСервер.УстановитьДоступностьДоговора(
		Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Партнер");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер()
	
	УстановитьВидимость();
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(
		Объект,
		Элементы.Договор.Доступность,
		Элементы.Договор.Видимость,
		Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(
		Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументЗакупки = РеквизитФормыВЗначение("Объект");
	ДокументЗакупки.ЗаполнитьУсловияЗакупокПоСоглашению();
	ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Соглашение");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДенежногоДокументаСервер()
	
	ТекСтрока = Элементы.ДенежныеДокументы.ТекущаяСтрока;
	ТекДанные = Объект.ДенежныеДокументы.НайтиПоИдентификатору(ТекСтрока);
	
	РеквизитыДД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекДанные.ДенежныйДокумент, "Валюта, Цена");
	
	ТекДанные.Валюта		= РеквизитыДД.Валюта;
	ТекДанные.Цена			= РеквизитыДД.Цена;
	ТекДанные.ЦенаВозврата	= РеквизитыДД.Цена;
	ТекДанные.Сумма			= ТекДанные.Цена * ТекДанные.Количество;
	ТекДанные.СуммаВозврата	= ТекДанные.ЦенаВозврата * ТекДанные.Количество;
	
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		РеквизитыДоговора =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "ОплатаВВалюте, НаправлениеДеятельности");
		Объект.ОплатаВВалюте = РеквизитыДоговора.ОплатаВВалюте;
		Объект.НаправлениеДеятельности = РеквизитыДоговора.НаправлениеДеятельности;
	КонецЕсли;
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Договор");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер()
	
	Объект.ОплатаВВалюте = ВзаиморасчетыСервер.ПолучитьОплатуВВалютеПоУмолчанию();
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Валюта");
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаКлиенте
Процедура УстановитьВидимостьОбщихКоманд()
	
	ХозОперации = Новый Массив;
	ХозОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхДокументовПоставщику"));
	
	КнопкиСоздать = Новый Структура;
	КнопкиСоздать.Вставить("ФормаДокументПоступлениеБезналичныхДенежныхСредствСоздатьНаОсновании", ХозОперации);
	КнопкиСоздать.Вставить("ФормаДокументПриходныйКассовыйОрдерСоздатьНаОсновании", ХозОперации);
	
	ХозОперации = Новый Массив;
	ХозОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхДокументовПоставщику"));
	ХозОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхДокументовПодотчетнику"));
	ХозОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеДенежныхДокументов"));
	
	КнопкиСоздать.Вставить("ФормаРегистрБухгалтерииХозрасчетныйПроводкиРеглУчета", ХозОперации);
	
	Для Каждого КнопкаСоздать Из КнопкиСоздать Цикл
		
		Если КнопкаСоздать.Значение.Найти(Объект.ХозяйственнаяОперация) = Неопределено Тогда
			КнопкаЭлемент = Элементы.Найти(КнопкаСоздать.Ключ);
			Если КнопкаЭлемент <> Неопределено Тогда
				КнопкаЭлемент.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеЭлементовПоИтогамРасхождений(Форма)
	
	ДД = Форма.Объект.ДенежныеДокументы;
	
	ОбщаяРазница = ДД.Итог("СуммаВозврата") - ДД.Итог("Сумма");
	
	ЕстьДоход  = ОбщаяРазница > 0;
	Форма.Элементы.СуммаНаПрочиеДоходы.Доступность			= ЕстьДоход;
	Форма.Элементы.ВалютаНаПрочиеДоходы.Доступность			= ЕстьДоход;
	Форма.Элементы.СтатьяДоходовВозврата.Доступность		= ЕстьДоход;
	Форма.Элементы.АналитикаДоходовВозврата.Доступность		= ЕстьДоход;
	
	ЕстьРасход = ОбщаяРазница < 0;
	Форма.Элементы.СуммаНаПрочиеРасходы.Доступность			= ЕстьРасход;
	Форма.Элементы.ВалютаНаПрочиеРасходы.Доступность		= ЕстьРасход;
	Форма.Элементы.СтатьяРасходовВозврата.Доступность		= ЕстьРасход;
	Форма.Элементы.АналитикаРасходовВозврата.Доступность	= ЕстьРасход;
	
	Форма.СуммаНаПрочиеДоходы  = ?(ОбщаяРазница > 0,  ОбщаяРазница, 0);
	Форма.СуммаНаПрочиеРасходы = ?(ОбщаяРазница < 0, -ОбщаяРазница, 0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ВыбытиеДенежныхДокументов.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ЭтоПеремещение = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеДенежныхДокументов;
	ЭтоВозврат = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхДокументовПоставщику;
	ЭтоСписание = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеДенежныхДокументов;
	
	Элементы.МОЛОтправитель.Заголовок = ?(ЭтоПеремещение, НСтр("ru = 'МОЛ (отправитель)';
																|en = 'Inventory custodian (sender)'"), НСтр("ru = 'МОЛ';
																								|en = 'Responsible employee'"));
	Элементы.Подразделение.Заголовок = ?(ЭтоПеремещение, НСтр("ru = 'Подразделение (отправитель)';
																|en = 'Business unit (payer)'"), НСтр("ru = 'Подразделение';
																											|en = 'Business unit'"));
	
	Если ЭтоВозврат Тогда
		Элементы.ДенежныеДокументыВалюта.Видимость = Ложь;
		Элементы.СтатьяРасходов.Видимость = Ложь;
		Элементы.АналитикаРасходов.Видимость = Ложь;
	Иначе
		Элементы.СтатьяРасходовВозврата.Видимость = Ложь;
		Элементы.АналитикаРасходовВозврата.Видимость = Ложь;
		Элементы.СтатьяДоходовВозврата.Видимость = Ложь;
		Элементы.АналитикаДоходовВозврата.Видимость = Ложь;
	КонецЕсли;
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СуммаНаПрочиеРасходы");
	МассивИменЭлементов.Добавить("ВалютаНаПрочиеРасходы");
	МассивИменЭлементов.Добавить("ОтступНаПрочиеРасходы");
	МассивИменЭлементов.Добавить("ДекорацияОтступ1");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивИменЭлементов,
		"Видимость",
		Элементы.СтатьяРасходовВозврата.Видимость);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СуммаНаПрочиеДоходы");
	МассивИменЭлементов.Добавить("ВалютаНаПрочиеДоходы");
	МассивИменЭлементов.Добавить("ОтступНаПрочиеДоходы");
	МассивИменЭлементов.Добавить("ДекорацияОтступ2");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивИменЭлементов,
		"Видимость",
		Элементы.СтатьяДоходовВозврата.Видимость);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ГруппаКомпенсация");
	МассивИменЭлементов.Добавить("УменьшенДолгСтрокой");
	МассивИменЭлементов.Добавить("СуммаКомпенсации");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивИменЭлементов,
		"Видимость",
		Элементы.СпособКомпенсации.Видимость);
	
	Элементы.ПериодАвансовогоОтчета.Видимость = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхДокументовПодотчетнику);
	Элементы.ДатаАвансовогоОтчета.Видимость = (Элементы.ПериодАвансовогоОтчета.Видимость И ТипЗнч(ПериодАвансовогоОтчета) <> Тип("Дата"));
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОбработкаПодбораОстатковДД(АдресДДВХранилище)
	
	ТаблицаДД = ПолучитьИзВременногоХранилища(АдресДДВХранилище);
	
	СтруктураПоиска = Новый Структура("ДенежныйДокумент");
	
	Для Каждого ДанныеДД Из ТаблицаДД Цикл
		
		СтруктураПоиска.ДенежныйДокумент = ДанныеДД.ДенежныйДокумент;
		МассивСтрокТЧ = Объект.ДенежныеДокументы.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.ДенежныеДокументы.Добавить();
			
		ИначеЕсли МассивСтрокТЧ.Количество() = 1 Тогда
			
			СтрокаТЧ = МассивСтрокТЧ[0];
			
		ИначеЕсли МассивСтрокТЧ.Количество() > 1 Тогда
			
			Для Каждого СтрокаКУдалению Из МассивСтрокТЧ Цикл
				Объект.ДенежныеДокументы.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			СтрокаТЧ = Объект.ДенежныеДокументы.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеДД);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьДоступностьСоглашений();
	
	ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(
		Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	
	ЗаполнитьСписокВыбораПериодов();
	Элементы.ПериодАвансовогоОтчета.ТолькоПросмотр = ТолькоПросмотр;
	
	РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
	
	УстановитьЗаголовокПоХозОперации();
	УстановитьПараметрыВыбораДД();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокПоХозОперации()
	
	ХозОперация = Объект.ХозяйственнаяОперация;
	ХозОперации = Перечисления.ХозяйственныеОперации;
	
	Заголовок = "";
	
	Если ХозОперация = ХозОперации.ВыдачаДенежныхДокументовПодотчетнику Тогда
		Заголовок = НСтр("ru = 'Выдача денежных документов подотчетному лицу';
						|en = 'Monetary document issue to advance holder'");
	ИначеЕсли ХозОперация = ХозОперации.СписаниеДенежныхДокументов Тогда
		Заголовок = НСтр("ru = 'Списание денежных документов на расходы / активы';
						|en = 'Write off financial documents as expenses/assets'");
	ИначеЕсли ХозОперация = ХозОперации.ВозвратДенежныхДокументовПоставщику Тогда
		Заголовок = НСтр("ru = 'Возврат денежных документов поставщику';
						|en = 'Return of cash equivalents to vendor'");
	ИначеЕсли ХозОперация = ХозОперации.ПеремещениеДенежныхДокументов Тогда
		Заголовок = НСтр("ru = 'Перемещение денежных документов между МОЛ';
						|en = 'Transfer of financial documents between inventory custodians'");
	КонецЕсли;
	
	НомерДата = ?(Объект.Ссылка.Пустая(), " " + НСтр("ru = '(создание)';
													|en = '(create)'"), " " + Объект.Номер + " " + НСтр("ru = 'от';
																											|en = 'dated'") + " " + Объект.Дата);
	Заголовок = Заголовок + НомерДата;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДД()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхДокументовПоставщику
		И ЗначениеЗаполнено(Объект.Валюта) Тогда
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Валюта", Объект.Валюта));
		Элементы.ДенежныеДокументыДенежныйДокумент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДенежныеДокументыПоВалюте()
	
	ВозвратДД = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхДокументовПоставщику");
	
	Если Объект.ХозяйственнаяОперация = ВозвратДД Тогда
		
		КУдалениюДД = ДенежныеДокументыВИнойВалюте();
		
		Если КУдалениюДД.Количество() <> 0 Тогда
			
			// Кнопки вопроса
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Удалить строки';
												|en = 'Remove lines'"));
			КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Отменить изменение валюты';
												|en = 'Cancel currency change '"));
			
			// Описание оповещения
			ДопПараметры = Новый Структура("КУдалению, СтараяВалюта", КУдалениюДД, ВалютаДокумента);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВычиститьДенежныеДокументыПоВалюте",
				ЭтаФорма,
				ДопПараметры);
			
			// Текст вопроса
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В таблице ""Денежные документы"" выбраны документы с валютой, отличной от ""%1"".
					|Удалить из таблицы такие документы или отменить изменение валюты?';
					|en = 'Documents with currency different from ""%1"" are selected in the ""Financial documents"" table.
					|Delete such documents from the table or cancel the currency change?'"),
				Объект.Валюта);
			
			// Сам вопрос
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса);
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ДенежныеДокументыВИнойВалюте()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.ДенежныйДокумент,
	|	Т.НомерСтроки
	|ПОМЕСТИТЬ ДенежныеДокументы
	|ИЗ
	|	&ДенежныеДокументы КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.ДенежныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.НомерСтроки - 1 КАК Индекс
	|ИЗ
	|	ДенежныеДокументы КАК ТЧ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДенежныеДокументы КАК Спр
	|		ПО (Спр.Ссылка = ТЧ.ДенежныйДокумент)
	|ГДЕ
	|	Спр.Валюта <> &Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧ.НомерСтроки УБЫВ");
	
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("ДенежныеДокументы", Объект.ДенежныеДокументы.Выгрузить(, "НомерСтроки, ДенежныйДокумент"));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Индекс");
	
КонецФункции

&НаСервере
Функция ВычиститьДенежныеДокументыПоВалюте(УдалитьСтроки, ДопПараметры) Экспорт
	
	Если УдалитьСтроки = Истина Тогда
		
		Для Каждого СтрНаУдаление Из ДопПараметры.КУдалению Цикл
			Объект.ДенежныеДокументы.Удалить(СтрНаУдаление);
		КонецЦикла;
		
		ВалютаДокумента = Объект.Валюта;
		РассчитатьИтоговыеПоказателиВыбытия(ЭтаФорма);
		УстановитьПараметрыВыбораДД();
		
	Иначе
		
		Объект.Валюта = ДопПараметры.СтараяВалюта;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(Объект, ХозяйственнаяОперацияДоговора);
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСоглашений()
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		
		КолвоСоглашений = ЗакупкиВызовСервера.ПолучитьКоличествоСоглашенийСПоставщиком(Объект.Партнер);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Соглашение",
			"Видимость",
			КолвоСоглашений > 0);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиВыбытия(Форма)
	
	НастроитьОтображениеЭлементовПоИтогамРасхождений(Форма);
	
	ТЧ = Форма.Объект.ДенежныеДокументы;
	ВозвратПоставщику = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхДокументовПоставщику");
	ВозвратПоставщику = Форма.Объект.ХозяйственнаяОперация = ВозвратПоставщику;
	
	// Табличная часть пустая
	Если ТЧ.Количество() = 0 Тогда
		
		Форма.ВалютаДокумента = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		Форма.СуммаДокумента = СуммаДокумента(0);
		
	Иначе
		
		ВалютаДокумента = ?(ВозвратПоставщику, Форма.Объект.Валюта, ТЧ[0].Валюта);
		
		Если Не ВозвратПоставщику И Не ТЧ.НайтиСтроки(Новый Структура("Валюта", ВалютаДокумента)).Количество() = ТЧ.Количество() Тогда
			
			// В табличной части указаны разные валюты
			Форма.ВалютаДокумента = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
			Форма.СуммаДокумента = НСтр("ru = 'Разные валюты';
										|en = 'Different currencies'");
			
		Иначе
			
			ИмяКолокниСуммы = ?(ВозвратПоставщику, "СуммаВозврата", "Сумма");
			
			Форма.ВалютаДокумента = ВалютаДокумента;
			Форма.СуммаДокумента = СуммаДокумента(ТЧ.Итог(ИмяКолокниСуммы));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВозвратПоставщику Тогда
		
		// Информация о взаиморасчетах.
		СуммаУменьшенДолг = 0;
		Для Каждого СтрокаРасшифровкаПлатежа Из Форма.Объект.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.ОбъектРасчетов) 
				И СтрокаРасшифровкаПлатежа.ОбъектРасчетов <> Форма.Объект.ОбъектРасчетов Тогда
				СуммаУменьшенДолг = СуммаУменьшенДолг + СтрокаРасшифровкаПлатежа.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		Форма.СуммаКомпенсации = Форма.СуммаДокумента - СуммаУменьшенДолг;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СпособКомпенсации",
			"Доступность",
			Форма.СуммаКомпенсации <> 0);
		
		Форма.УменьшенДолгСтрокой = НСтр("ru = 'Уменьшен долг перед поставщиком:';
										|en = 'Debt owed to vendor is reduced:'") + " " + Формат(СуммаУменьшенДолг, "ЧДЦ=2; ЧН=0,00")
			+ " " + Форма.Объект.Валюта;
			
		Если ТЧ.Итог("СуммаВозврата") <> Форма.Объект.РасшифровкаПлатежа.Итог("Сумма") Тогда
			Форма.Объект.РасшифровкаПлатежа.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СуммаДокумента(ЗнСумма)
	
	Возврат Формат(ЗнСумма, "ЧДЦ=2; ЧН=");
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)

	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);

КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура АналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовВозвратаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовВозвратаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовВозвратаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПериодов()
	
	СписокВыбораПериода = Элементы.ПериодАвансовогоОтчета.СписокВыбора;
	
	СписокВыбораПериода.Добавить("Через неделю",     НСтр("ru = 'Через неделю';
															|en = 'In a week'"));
	СписокВыбораПериода.Добавить("Через две недели", НСтр("ru = 'Через две недели';
															|en = 'In two weeks'"));
	СписокВыбораПериода.Добавить("Через месяц",      НСтр("ru = 'Через месяц';
															|en = 'In a month'"));
	СписокВыбораПериода.Добавить("ДоДаты",           НСтр("ru = 'До даты...';
															|en = 'To date ...'"));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Объект.ДатаАвансовогоОтчета) Тогда
		
		ПериодАвансовогоОтчета = "Через неделю";
		
	Иначе
		Если Объект.ДатаАвансовогоОтчета = НачалоДня(Объект.Дата) + 7 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через неделю";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = НачалоДня(Объект.Дата) + 14 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через две недели";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = НачалоДня(Объект.Дата) + 30 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через месяц";
		Иначе
			ПериодАвансовогоОтчета = Объект.ДатаАвансовогоОтчета;
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("Дата"));
			ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
			
			Элементы.ПериодАвансовогоОтчета.ОграничениеТипа = ОписаниеТиповДата;
			
			Элементы.ПериодАвансовогоОтчета.КнопкаВыбора = Истина;
			Элементы.ПериодАвансовогоОтчета.РедактированиеТекста = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДатуАвансовогоОтчета()
	
	Если ПериодАвансовогоОтчета = "Через неделю" Тогда
		Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()) + 7 * 24 * 3600;
		
	ИначеЕсли ПериодАвансовогоОтчета = "Через две недели" Тогда
		Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()) + 14 * 24 * 3600;
		
	ИначеЕсли ПериодАвансовогоОтчета = "Через месяц" Тогда
		Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()) + 30 * 24 * 3600;
		
	ИначеЕсли ПериодАвансовогоОтчета = "ДоДаты" Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтаФорма, );
		ПоказатьВводДаты(Оповещение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), НСтр("ru = 'Дата отчета по выдаваемому авансу';
																										|en = 'Date of the report on issued advance'"), ЧастиДаты.Дата);
		Возврат;
		
	ИначеЕсли ТипЗнч(ПериодАвансовогоОтчета) = Тип("Дата") Тогда
		Если ПериодАвансовогоОтчета < Объект.Дата Тогда
			ПериодАвансовогоОтчета = Объект.Дата;
		КонецЕсли;
		
		Объект.ДатаАвансовогоОтчета = ПериодАвансовогоОтчета;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтатьяДоходовРасходов()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.СтатьяРасходовВозврата.Заголовок = НСтр("ru = 'Статья расходов';
														|en = 'Expense item'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СпособКомпенсацииПриИзмененииСервер()
	ВзаиморасчетыСервер.ПриИзмененииПараметровМеханизма(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
