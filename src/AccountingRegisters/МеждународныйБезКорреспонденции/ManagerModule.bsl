#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает сторнирующие проводки документа(ов).
//
// Параметры:
//  Регистраторы - ДокументСсылка - документы (массив документов) для которых необходимо получить сторнирующие проводки.
//  ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - План счетов, по которому надо получить таблицу сторно.
//  ПериодПланаСчетов - Дата - период обращения к настройке плана счетов организации, если не используется ПериодРегистратора
//  ПериодРегистратора - Булево - признак заполнения даты проводки датой сторнируемого документа если не указан, то дата
//                                не заполнена.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица проводок переданных регистраторов с обратным знаком сумм и типом проводки "Сторно" или "Реверс".
//
Функция ПроводкиСторно(Регистраторы, ПланСчетов, ПериодПланаСчетов, ПериодРегистратора = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПроводокСторно();
	Запрос.УстановитьПараметр("СписокДокументов", Регистраторы);
	Запрос.УстановитьПараметр("Ссылка", Документы.ОперацияМеждународный.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("ПериодРегистратора", ПериодРегистратора);
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	Запрос.УстановитьПараметр("ПериодПланаСчетов", ПериодПланаСчетов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ОписаниеПолей = ОписаниеПолейРегистра();
	ИнвертируемыеПоля = ИнвертируемыеПоля(ОписаниеПолей);
	ИнвертируемыеРесурсы = ИнвертируемыеРесурсы(ОписаниеПолей);
	
	Для Каждого Проводка Из Результат Цикл
		Если Проводка.ЗаменитьСторноРеверсом Тогда
			ИнвертироватьПроводку(Проводка, ИнвертируемыеПоля, ИнвертируемыеРесурсы, ОписаниеПолей.КоличествоСубконто);
			Проводка.ТипПроводки = Перечисления.ТипыПроводокМеждународныйУчет.Реверс;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОписаниеПолейРегистра() Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	
	ОписаниеПолей = Новый Структура();
	ОписаниеПолей.Вставить("КоличествоСубконто",    МетаданныеРегистра.ПланСчетов.МаксКоличествоСубконто);
	ОписаниеПолей.Вставить("БалансовыеИзмерения",   Новый Массив());
	ОписаниеПолей.Вставить("НебалансовыеИзмерения", Новый Массив());
	ОписаниеПолей.Вставить("БалансовыеРесурсы",     Новый Массив());
	ОписаниеПолей.Вставить("НебалансовыеРесурсы",   Новый Массив());
	ОписаниеПолей.Вставить("Реквизиты",             Новый Массив());
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ИмяИзмерения = Измерение.Имя;
		Если СтрНачинаетсяС(ИмяИзмерения, "Удалить") Тогда
		ИначеЕсли Измерение.Балансовый Тогда
			ОписаниеПолей.БалансовыеИзмерения.Добавить(ИмяИзмерения);
		Иначе
			ОписаниеПолей.НебалансовыеИзмерения.Добавить(ИмяИзмерения);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		ИмяРесурса = Ресурс.Имя;
		Если СтрНачинаетсяС(ИмяРесурса, "Удалить") Тогда
		ИначеЕсли Ресурс.Балансовый Тогда
			ОписаниеПолей.БалансовыеРесурсы.Добавить(ИмяРесурса);
		Иначе
			ОписаниеПолей.НебалансовыеРесурсы.Добавить(ИмяРесурса);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		Если СтрНачинаетсяС(ИмяРеквизита, "Удалить") Тогда
		ИначеЕсли ИмяРеквизита = "ИдентификаторФинЗаписи" Тогда
		Иначе
			ОписаниеПолей.Реквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ИнвертируемыеПоля(ОписаниеПолейРегистра) Экспорт
	
	ИнвертируемыеПоля = Новый Массив();
	
	Возврат ИнвертируемыеПоля;
	
КонецФункции

Функция ИнвертируемыеРесурсы(ОписаниеПолейРегистра) Экспорт
	
	ИнвертируемыеРесурсы = ОбщегоНазначения.СкопироватьРекурсивно(ОписаниеПолейРегистра.БалансовыеРесурсы);
	
	Для Каждого ИмяРесурса Из ОписаниеПолейРегистра.НебалансовыеРесурсы Цикл
		ИнвертируемыеРесурсы.Добавить(ИмяРесурса);
	КонецЦикла;
	
	Возврат ИнвертируемыеРесурсы;
	
КонецФункции

Процедура ИнвертироватьПроводку(Проводка, ИнвертируемыеПоля, ИнвертируемыеРесурсы, КоличествоСубконто) Экспорт
	
	Если Проводка.ВидДвижения = ВидДвиженияБухгалтерии.Дебет Тогда
		Проводка.ВидДвижения = ВидДвиженияБухгалтерии.Кредит;
	ИначеЕсли Проводка.ВидДвижения = ВидДвиженияБухгалтерии.Кредит Тогда
		Проводка.ВидДвижения = ВидДвиженияБухгалтерии.Дебет;
	Иначе
		ВызватьИсключение НСтр("ru = 'Не заполнен вид движения. Невозможно инвертировать проводку';
								|en = 'Register record kind is not filled. Cannot invert the entry'");
	КонецЕсли;
	
	Для Каждого ИмяРесурса Из ИнвертируемыеРесурсы Цикл
		Если ЗначениеЗаполнено(Проводка[ИмяРесурса]) Тогда
			Проводка[ИмяРесурса] = -Проводка[ИмяРесурса];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаПроводокСторно()
	
	Возврат
	"ВЫБРАТЬ
	|	Проводки.ВидДвижения КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА &ПериодРегистратора
	|			ТОГДА Проводки.Период
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
	|			ТОГДА Проводки.Регистратор
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК Регистратор,
	|	Проводки.Организация,
	|	Проводки.Счет,
	|	Проводки.Подразделение,
	|	Проводки.НаправлениеДеятельности,
	|	Проводки.ВидСубконто1 КАК ВидСубконто1,
	|	Проводки.Субконто1,
	|	Проводки.ВидСубконто2 КАК ВидСубконто2,
	|	Проводки.Субконто2,
	|	Проводки.ВидСубконто3 КАК ВидСубконто3,
	|	Проводки.Субконто3,
	|	Проводки.Валюта,
	|	-Проводки.ВалютнаяСумма КАК ВалютнаяСумма,
	|	-Проводки.Количество КАК Количество,
	|	-Проводки.Сумма КАК Сумма,
	|	-Проводки.СуммаПредставления КАК СуммаПредставления,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПроводокМеждународныйУчет.Сторно) КАК ТипПроводки,
	|	Проводки.Содержание КАК Содержание,
	|	Проводки.СоответствиеСчета КАК СоответствиеСчета,
	|	ВЫБОР
	|		КОГДА ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок.СпособАннулированияПроводок
	|			= ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаменитьСторноРеверсом
	|ИЗ
	|	РегистрБухгалтерии.МеждународныйБезКорреспонденции.ДвиженияССубконто(, , ПланСчетов = &ПланСчетов И Регистратор В (&СписокДокументов), , ) КАК Проводки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|		ПО Проводки.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|		 И Проводки.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ПланыСчетовМеждународногоУчетаОрганизаций.Период ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПланыСчетовМеждународногоУчетаОрганизаций.Период В
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ПланыСчетовОрганизаций.Период)
	|			ИЗ
	|				РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовОрганизаций
	|			ГДЕ
	|				ПланыСчетовОрганизаций.ПланСчетов = Проводки.ПланСчетов
	|				И ПланыСчетовОрганизаций.Организация = Проводки.Организация
	|				И ПланыСчетовОрганизаций.Период <= ВЫБОР
	|					КОГДА &ПериодРегистратора
	|						ТОГДА Проводки.Период
	|					ИНАЧЕ &ПериодПланаСчетов
	|				КОНЕЦ
	|			)
	|	КОНЕЦ
	|";
	
КонецФункции

#КонецОбласти

#КонецЕсли
