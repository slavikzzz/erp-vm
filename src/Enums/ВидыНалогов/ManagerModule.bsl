#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список доступных значений перечисления с учетом отбора
//
// Параметры:
//  Отбор            - Структура, произвольна, исходя из логики отбора
//  ЕстьНедоступные  - Булево, в нем возвращается признак наличия недоступных значений
//
// Возвращаемое значение:
//   СписокЗначений  - список доступных значений перечисления.
//
Функция ПолучитьСписокДоступныхЗначений(Отбор, ЕстьНедоступные = Ложь) Экспорт
	
	СтруктураДоступныхЗначений = ПолучитьДоступныеЗначения(Отбор, Неопределено);
	
	ЕстьНедоступные = СтруктураДоступныхЗначений.ЕстьНедоступные;
	
	Возврат СтруктураДоступныхЗначений.ДоступныеЗначения;
	
КонецФункции

// Определяет значения перечисления, соответствующие налогу на прибыль, уплачиваемому организацией.
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыНалогов
//
Функция НалоговыеПлатежиНалогНаПрибыль() Экспорт
	
	ВидыНалогов = Новый Массив;
	
	ВидыНалогов.Добавить(НалогНаПрибыль_РегиональныйБюджет);
	ВидыНалогов.Добавить(НалогНаПрибыль_ФедеральныйБюджет);
	
	Возврат ВидыНалогов;
	
КонецФункции

// Определяет значения перечисления, соответствующие налогу на прибыль, удерживаемому с учредителей (акционеров).
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыНалогов
//
Функция НалоговыеПлатежиНалогНаПрибыльДивидендов() Экспорт
	
	ВидыНалогов = Новый Массив;
	
	ВидыНалогов.Добавить(НалогНаПрибыль_НалоговыйАгент);
	
	Возврат ВидыНалогов;
	
КонецФункции

// Определяет значения перечисления, соответствующие обязательным страховым взносам, уплачиваемым с заработной платы.
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыНалогов
//
Функция НалоговыеПлатежиСтраховыеВзносыОплатыТруда() Экспорт
	
	ВидыНалогов = Новый Массив;
	ВидыНалогов.Добавить(ДополнительныеВзносы_ПФР_ВредныеУсловия);
	ВидыНалогов.Добавить(ДополнительныеВзносы_ПФР_ЛетныеЭкипажи);
	ВидыНалогов.Добавить(ДополнительныеВзносы_ПФР_ТяжелыеУсловия);
	ВидыНалогов.Добавить(ДополнительныеВзносы_ПФР_Шахтеры);
	ВидыНалогов.Добавить(СтраховыеВзносы_ПФР_Добровольные);
	ВидыНалогов.Добавить(СтраховыеВзносы_ПФР_СтраховаяЧасть);
	ВидыНалогов.Добавить(СтраховыеВзносы_ФСС);
	ВидыНалогов.Добавить(СтраховыеВзносы_ФСС_НСиПЗ);
	ВидыНалогов.Добавить(СтраховыеВзносы_ФФОМС);
	ВидыНалогов.Добавить(ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	ВидыНалогов.Добавить(ФиксированныеВзносы_ФСС);
	ВидыНалогов.Добавить(ФиксированныеВзносы_ФФОМС);
	ВидыНалогов.Добавить(ФиксированныеВзносы_ПФР_Добровольные);
	ВидыНалогов.Добавить(СтраховыеВзносыЕдиныйТариф);
	ВидыНалогов.Добавить(ФиксированныеВзносы_СтраховыеВзносыЕдиныйТариф);
	ВидыНалогов.Добавить(ФиксированныеВзносы_СвышеПредела);
	ВидыНалогов.Добавить(СтраховыеВзносы_ОПС_ИностранныеРаботники);
	ВидыНалогов.Добавить(СтраховыеВзносы_ОМС_ИностранныеРаботники);
	ВидыНалогов.Добавить(СтраховыеВзносы_ОСС_ИностранныеРаботники);
	Возврат ВидыНалогов;
	
КонецФункции


#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДоступныеЗначения(Параметры.Отбор, Параметры.СтрокаПоиска).ДоступныеЗначения;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("Отбор") Тогда
		Параметры.Вставить("Отбор", Новый Структура);
	КонецЕсли;
	
	ДанныеВыбора = ПолучитьДоступныеЗначения(Параметры.Отбор, Неопределено).ДоступныеЗначения;
	Параметры.Отбор.Очистить();
	Параметры.Отбор.Вставить("Ссылка", ДанныеВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция выполняет заполнение списка значений 
// данных выбора с учетом настроек параметров учета.
// Поддерживается параметр отбора.
// Обрабатывается также строка поиска.
//
Функция ПолучитьДоступныеЗначения(Отбор, СтрокаПоиска)
	
	ДоступныеЗначения = Новый СписокЗначений;
	ЕстьНедоступные   = Ложь;
	
	Если ТипЗнч(Отбор) <> Тип("ПеречислениеСсылка.ВидыНалогов")
		И ТипЗнч(Отбор) <> Тип("ФиксированныйМассив")
		И ТипЗнч(Отбор) = Тип("Структура") Тогда
		ИспользуемыйОтбор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Ссылка", Неопределено);
	Иначе
		ИспользуемыйОтбор = Отбор;
	КонецЕсли;
	
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыНалогов.ЗначенияПеречисления Цикл
		
		Если ТипЗнч(СтрокаПоиска) = Тип("Строка")
			И Не ПустаяСтрока(СтрокаПоиска)
			И СтрНайти(НРег(ЗначениеПеречисления.Синоним), НРег(СтрокаПоиска)) <> 1 Тогда
			Продолжить;
		КонецЕсли;
		Ссылка = Перечисления.ВидыНалогов[ЗначениеПеречисления.Имя];
		Если ТипЗнч(ИспользуемыйОтбор) = Тип("ПеречислениеСсылка.ВидыНалогов")
			И ИспользуемыйОтбор <> Ссылка Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(ИспользуемыйОтбор) = Тип("ФиксированныйМассив")
			И ИспользуемыйОтбор.Найти(Ссылка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДоступныеЗначения.Добавить(Ссылка, ЗначениеПеречисления.Синоним);
		
	КонецЦикла;
	
	ДанныеВыбора = Новый Структура("ДоступныеЗначения, ЕстьНедоступные", ДоступныеЗначения, ЕстьНедоступные);
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьДоступныеЗначенияВидовНалогов(Отбор, СтрокаПоиска, ДанныеВыбора);
	
	Возврат ДанныеВыбора;
	
КонецФункции

#КонецОбласти

#КонецЕсли