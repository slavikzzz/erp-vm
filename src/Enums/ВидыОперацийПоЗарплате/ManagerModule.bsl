#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает значения перечисления, соответствующие начислениям.
//
// Возвращаемое значение:
// 	Массив - элементы массива - ПеречислениеСсылка.ВидыОперацийПоЗарплате. 
//
Функция Начисления() Экспорт

	ВидыОпераций = Новый Массив;
	
	ВидыОпераций.Добавить(НачисленоДоход);
	ВидыОпераций.Добавить(НачисленоСдельноДоход);
	ВидыОпераций.Добавить(НатуральныйДоход);
	ВидыОпераций.Добавить(КомпенсацияЗаЗадержкуЗарплаты);  
	ВидыОпераций.Добавить(ЕжегодныйОтпуск);
	ВидыОпераций.Добавить(ЕжегодныйОтпускАвансом);
	ВидыОпераций.Добавить(ЕжегодныйОтпускОценочныеОбязательства);
	ВидыОпераций.Добавить(ЕжегодныйОтпускОценочныеОбязательстваИРезервы);
	ВидыОпераций.Добавить(ЕжегодныйОтпускРезервы);
	ВидыОпераций.Добавить(КомпенсацияЕжегодногоОтпускаОценочныеОбязательства);
	ВидыОпераций.Добавить(КомпенсацияЕжегодногоОтпуска);
	
	// Договоры подряда
	ВидыОпераций.Добавить(ДоговорАвторскогоЗаказа);
	ВидыОпераций.Добавить(ДоговорРаботыУслуги);
	// Пособия
	ВидыОпераций.Добавить(РасходыПоСтрахованиюРаботодатель);
	ВидыОпераций.Добавить(РасходыПоСтрахованиюФСС);
	ВидыОпераций.Добавить(ПособиеНаПогребение);
	ВидыОпераций.Добавить(РасходыПоСтрахованиюФССНС);
	ВидыОпераций.Добавить(РасходыПоСтрахованиюБюджет);
	// Прочее
	ВидыОпераций.Добавить(ВыплатыБывшимСотрудникам);
	ВидыОпераций.Добавить(Дивиденды);
	ВидыОпераций.Добавить(ДивидендыСотрудников);
	ВидыОпераций.Добавить(ДоходыКонтрагентов);
	ВидыОпераций.Добавить(ПрочиеРасчетыСПерсоналом);
	ВидыОпераций.Добавить(МатериальнаяПомощь);
	
	Возврат ВидыОпераций;

КонецФункции

// Возвращает значения перечисления, соответствующие дивидендам.
//
// Возвращаемое значение:
// 	Массив - элементы массива - ПеречислениеСсылка.ВидыОперацийПоЗарплате. 
//
Функция Дивиденды() Экспорт

	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Дивиденды);
	ВидыОпераций.Добавить(ДивидендыСотрудников);
	
	Возврат ВидыОпераций;

КонецФункции

// Возвращает значения перечисления, соответствующие депонированию.
//
// Возвращаемое значение:
// 	Массив - элементы массива - ПеречислениеСсылка.ВидыОперацийПоЗарплате. 
//
Функция Депонирование() Экспорт

	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Депонирование);
	ВидыОпераций.Добавить(СписаниеДепонента);
	
	Возврат ВидыОпераций;

КонецФункции

// Возвращает значения перечисления, соответствующие обязательствам по отпускам.
//
// Возвращаемое значение:
// 	Массив - элементы массива - ПеречислениеСсылка.ВидыОперацийПоЗарплате. 
//
Функция ЕжегодныеОтпускаОценочныеОбязательстваИРезервы() Экспорт
	
	ВидыОпераций = Новый Массив;
	
	ВидыОпераций.Добавить(ЕжегодныйОтпускОценочныеОбязательства);
	ВидыОпераций.Добавить(ЕжегодныйОтпускОценочныеОбязательстваИРезервы);
	ВидыОпераций.Добавить(ЕжегодныйОтпускРезервы);
	ВидыОпераций.Добавить(КомпенсацияЕжегодногоОтпускаОценочныеОбязательства);
	
	Возврат ВидыОпераций;
	
КонецФункции

// Возвращает значения перечисления, которые могу оплачиваться за счет резервов по оплате труда.
//
// Возвращаемое значение:
// 	Массив - элементы массива - ПеречислениеСсылка.ВидыОперацийПоЗарплате. 
//
Функция НачисленияРезервыПоОплатеТруда() Экспорт
	
	ВидыОпераций = ЕжегодныеОтпускаОценочныеОбязательстваИРезервы();
	
	ИспользоватьРезервыПоОплатеТруда = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РезервыПоОплатеТруда");
		ИспользоватьРезервыПоОплатеТруда = Модуль.ИспользоватьРезервыПоОплатеТруда();
	КонецЕсли;
	
	Если ИспользоватьРезервыПоОплатеТруда Тогда
		ВидыОпераций.Добавить(НачисленоДоход);
		ВидыОпераций.Добавить(НачисленоСдельноДоход);
		ВидыОпераций.Добавить(КомпенсацияЗаЗадержкуЗарплаты);  
		ВидыОпераций.Добавить(ЕжегодныйОтпуск);
		ВидыОпераций.Добавить(ЕжегодныйОтпускАвансом);
		ВидыОпераций.Добавить(КомпенсацияЕжегодногоОтпуска);
	КонецЕсли;
	
	Возврат ВидыОпераций;
	
КонецФункции

// Возвращает значения перечисления, соответствующие страховым взносам.
//
// Возвращаемое значение:
// 	Массив - элементы массива - ПеречислениеСсылка.ВидыОперацийПоЗарплате. 
//
Функция Взносы() Экспорт
	
	ВидыОпераций = Новый Массив;
	
	ВидыОпераций.Добавить(ПФРДополнительныйТарифЛЭ);
	ВидыОпераций.Добавить(ПФРДополнительныйТарифШахтеры);
	ВидыОпераций.Добавить(ПФРЗаЗанятыхНаПодземныхИВредныхРаботах);
	ВидыОпераций.Добавить(ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах);
	ВидыОпераций.Добавить(ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки);
	ВидыОпераций.Добавить(ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки);
	ВидыОпераций.Добавить(ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка);
	ВидыОпераций.Добавить(ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка);
	ВидыОпераций.Добавить(ПФРНакопительнаяЧасть);
	ВидыОпераций.Добавить(ПФРПоСуммарномуТарифу);  
	ВидыОпераций.Добавить(ПФРСПревышения);
	ВидыОпераций.Добавить(ПФРДоПредельнойВеличины);
	ВидыОпераций.Добавить(ПФРСтраховаяЧасть);
	ВидыОпераций.Добавить(ТФОМС);
	ВидыОпераций.Добавить(ФСС);
	ВидыОпераций.Добавить(ФССНС);
	ВидыОпераций.Добавить(ФФОМС);
	ВидыОпераций.Добавить(ВзносыПоЕдиномуТарифу);
	
	Возврат ВидыОпераций;
	
КонецФункции

// Возвращает значения перечисления, соответствующие НДФЛ.
//
// Возвращаемое значение:
// 	Массив - элементы массива - ПеречислениеСсылка.ВидыОперацийПоЗарплате. 
//
Функция НДФЛ(Параметры) Экспорт
	
	ИспользоватьНДФЛСПревышения = Истина;
	Период = Неопределено;
	Если Параметры.Свойство("Период", Период) И ЗначениеЗаполнено(Период) Тогда
		ИспользоватьНДФЛСПревышения = (Период < УчетНДФЛ.ДатаЗакона176ФЗ());
	КонецЕсли;
	
	ВидыОпераций = Новый Массив;
	
	ВидыОпераций.Добавить(НДФЛ);
	Если ИспользоватьНДФЛСПревышения Тогда
		ВидыОпераций.Добавить(НДФЛСПревышения);
	КонецЕсли;
	ВидыОпераций.Добавить(НДФЛДоначисленныйПоРезультатамПроверки);
	ВидыОпераций.Добавить(НДФЛДоходыКонтрагентов);
	ВидыОпераций.Добавить(НДФЛПередачаЗадолженностиВНалоговыйОрган);
	ВидыОпераций.Добавить(НДФЛПрочиеРасчетыСПерсоналом);
	ВидыОпераций.Добавить(НДФЛРасчетыСБывшимиСотрудниками);
	ВидыОпераций.Добавить(НФДЛДивиденды);
	ВидыОпераций.Добавить(НФДЛДивидендыСотрудникам);
	
	Возврат ВидыОпераций;

КонецФункции

// Возвращает значения перечисления, соответствующие удержаниям.
//
// Возвращаемое значение:
// 	Массив - элементы массива - ПеречислениеСсылка.ВидыОперацийПоЗарплате. 
//
Функция Удержания() Экспорт

	ВидыОпераций = Новый Массив;
	
	ВидыОпераций.Добавить(АлиментыПрочиеИсполнительныеЛисты);
	ВидыОпераций.Добавить(ВозвратИзлишнеВыплаченныхСуммВследствиеСчетныхОшибок);
	ВидыОпераций.Добавить(ВозмещениеУщерба);
	ВидыОпераций.Добавить(ВознаграждениеПлатежногоАгента);
	ВидыОпераций.Добавить(ДобровольныеВзносыВНПФ);
	ВидыОпераций.Добавить(ДСВ);
	ВидыОпераций.Добавить(Профвзносы);
	ВидыОпераций.Добавить(ПрочиеУдержания);
	ВидыОпераций.Добавить(УдержаниеЗаОтпуск);
	ВидыОпераций.Добавить(УдержаниеНеизрасходованныхПодотчетныхСумм);
	ВидыОпераций.Добавить(УдержаниеПоПрочимОперациямСРаботниками);
	// Займы
	ВидыОпераций.Добавить(НачисленоПроцентовПоЗайму);
	ВидыОпераций.Добавить(ПогашениеЗаймов);
	ВидыОпераций.Добавить(ПроцентыПоЗайму);
	// удержания с доходов контрагентов
	ВидыОпераций.Добавить(АлиментыПрочиеИсполнительныеЛистыКонтрагенты);
	ВидыОпераций.Добавить(ВознаграждениеПлатежногоАгентаКонтрагенты);
	
	Возврат ВидыОпераций;

КонецФункции

// Возвращает значения перечисления, соответствующие удержаниям для финансового учета.
//
// Возвращаемое значение:
// 	Массив - элементы массива - ПеречислениеСсылка.ВидыОперацийПоЗарплате. 
//
Функция УдержанияФинансовыйУчет() Экспорт

	ВидыОпераций = Новый Массив;
	
	ВидыОпераций.Добавить(ВозвратИзлишнеВыплаченныхСуммВследствиеСчетныхОшибок);
	ВидыОпераций.Добавить(ВозмещениеУщерба);
	ВидыОпераций.Добавить(УдержаниеЗаОтпуск);
	ВидыОпераций.Добавить(УдержаниеНеизрасходованныхПодотчетныхСумм);
	ВидыОпераций.Добавить(УдержаниеПоПрочимОперациямСРаботниками);// ОбязательстваПоУченическомуДоговору
	// Займы
	ВидыОпераций.Добавить(ПогашениеЗаймов);
	ВидыОпераций.Добавить(ПроцентыПоЗайму);
	
	Возврат ВидыОпераций;

КонецФункции

#КонецОбласти
	
#Область ОбработчикиСобытий

// Поддерживается параметр отбора ГруппаОпераций, в качестве значения которого может быть указана 
// группа видов операций по зарплате в виде строки, например, "Начисления" или "Удержания".
// Полный список поддерживаемых групп операций см. ВидыОперацийПоГруппам.
// В качестве значения может быть указано несколько групп операций в виде фиксированного массива.
// Обрабатывается также строка поиска.
//
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ЗарплатаКадрыПереопределяемый.ВидыОперацийПоЗарплатеОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка И Параметры.Свойство("Отбор") И Параметры.Отбор <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаОпераций.Ссылка,
		|	ТаблицаОпераций.Синоним,
		|	ТаблицаОпераций.Порядок
		|ПОМЕСТИТЬ ВТТаблицаОпераций
		|ИЗ
		|	&ТаблицаОпераций КАК ТаблицаОпераций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОпераций.Ссылка,
		|	ТаблицаОпераций.Порядок КАК Порядок
		|ИЗ
		|	ВТТаблицаОпераций КАК ТаблицаОпераций
		|ГДЕ
		|	(ТаблицаОпераций.Ссылка В (&ВидыОпераций)
		|			ИЛИ &ПоВсемВидамОпераций)
		|	И НЕ ТаблицаОпераций.Ссылка В (&НеиспользуемыеВидыОпераций) // ERP
		|	И ТаблицаОпераций.Синоним ПОДОБНО &СтрокаПоиска
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Если Параметры.СтрокаПоиска = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ТаблицаОпераций.Синоним ПОДОБНО &СтрокаПоиска", "");
		КонецЕсли;
		
		// Составляем таблицу операций.
		ТаблицаОпераций = Новый ТаблицаЗначений;
		ТаблицаОпераций.Колонки.Добавить("Ссылка",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
		ТаблицаОпераций.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(256)));
		ТаблицаОпераций.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
		
		ВидыОпераций = Неопределено;
		Если Параметры.Отбор.Свойство("ГруппаОпераций") Тогда
			ВидыОпераций = ВидыОперацийПоГруппам(Параметры.Отбор.ГруппаОпераций, Параметры);
		КонецЕсли;
		
		Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыОперацийПоЗарплате.ЗначенияПеречисления Цикл
			НоваяСтрока = ТаблицаОпераций.Добавить();
			НоваяСтрока.Ссылка = Перечисления.ВидыОперацийПоЗарплате[ЗначениеПеречисления.Имя];
			НоваяСтрока.Синоним = ЗначениеПеречисления.Синоним;
			// Расставляем заданный порядок.
			Если ВидыОпераций <> Неопределено Тогда
				НоваяСтрока.Порядок = ВидыОпераций.Найти(НоваяСтрока.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		// Отбор только по действующим категориям с учетом введенной строки.
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ВидыОпераций",        ВидыОпераций);
		Запрос.УстановитьПараметр("ПоВсемВидамОпераций", ВидыОпераций = Неопределено);
		Запрос.УстановитьПараметр("НеиспользуемыеВидыОпераций", НеиспользуемыеВидыОпераций(Параметры)); // ERP
		
		Запрос.УстановитьПараметр("ТаблицаОпераций", ТаблицаОпераций);
		Запрос.УстановитьПараметр("СтрокаПоиска",    Строка(Параметры.СтрокаПоиска) + "%");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формируется массив видов операций по зарплате с учетом отбора по группе операций.
// При добавлении вида операций, его нужно упомянуть в одной из групп.
//
Функция ВидыОперацийПоГруппам(ГруппаОпераций, Параметры)
	
	// Формируем массив групп операций, по которым осуществляется отбор.
	ГруппыОпераций = Новый Массив;
	Если ТипЗнч(ГруппаОпераций) = Тип("ФиксированныйМассив") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГруппыОпераций, ГруппаОпераций);
	Иначе
		ГруппыОпераций.Добавить(ГруппаОпераций);
	КонецЕсли;
	
	ВидыОпераций = Новый Массив;
	
	Если ГруппыОпераций.Найти("Начисления") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыОпераций, Начисления());
	КонецЕсли;
	
	Если ГруппыОпераций.Найти("Дивиденды") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыОпераций, Начисления(), Истина);
	КонецЕсли;
	
	Если ГруппыОпераций.Найти("Депонирование") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыОпераций, Депонирование(), Истина);
	КонецЕсли;
	
	Если ГруппыОпераций.Найти("ЕжегодныеОтпускаОценочныеОбязательстваИРезервы") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыОпераций, ЕжегодныеОтпускаОценочныеОбязательстваИРезервы(), Истина);
	КонецЕсли;
	
	Если ГруппыОпераций.Найти("НачисленияРезервыПоОплатеТруда") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыОпераций, НачисленияРезервыПоОплатеТруда(), Истина);
	КонецЕсли;
	
	Если ГруппыОпераций.Найти("Взносы") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыОпераций, Взносы(), Истина);
	КонецЕсли;
	
	Если ГруппыОпераций.Найти("НДФЛ") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыОпераций, НДФЛ(Параметры), Истина);
	КонецЕсли;
	
	Если ГруппыОпераций.Найти("Удержания") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыОпераций, Удержания(), Истина);
	КонецЕсли;
	
	ИмяОпции = "РаботаВБюджетномУчреждении";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	
	Если Не ФункциональнаяОпцияИспользуется Или Не ПолучитьФункциональнуюОпцию(ИмяОпции) Тогда
		ИндексЭлемента = ВидыОпераций.Найти(ЕжегодныйОтпускАвансом);
		Если ИндексЭлемента <> Неопределено Тогда
			ВидыОпераций.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Если ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции) Тогда
		ИндексЭлемента = ВидыОпераций.Найти(ЕжегодныйОтпускОценочныеОбязательстваИРезервы);
		Если ИндексЭлемента <> Неопределено Тогда
			ВидыОпераций.Удалить(ИндексЭлемента);
		КонецЕсли;
		ИндексЭлемента = ВидыОпераций.Найти(ЕжегодныйОтпускРезервы);
		Если ИндексЭлемента <> Неопределено Тогда
			ВидыОпераций.Удалить(ИндексЭлемента);
		КонецЕсли;
		ИндексЭлемента = ВидыОпераций.Найти(Дивиденды);
		Если ИндексЭлемента <> Неопределено Тогда
			ВидыОпераций.Удалить(ИндексЭлемента);
		КонецЕсли;
		ИндексЭлемента = ВидыОпераций.Найти(ДивидендыСотрудников);
		Если ИндексЭлемента <> Неопределено Тогда
			ВидыОпераций.Удалить(ИндексЭлемента);
		КонецЕсли;
		ИндексЭлемента = ВидыОпераций.Найти(НФДЛДивиденды);
		Если ИндексЭлемента <> Неопределено Тогда
			ВидыОпераций.Удалить(ИндексЭлемента);
		КонецЕсли;
		ИндексЭлемента = ВидыОпераций.Найти(НФДЛДивидендыСотрудникам);
		Если ИндексЭлемента <> Неопределено Тогда
			ВидыОпераций.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидыОпераций;
	
КонецФункции

// Устанавливает соответствие значений перечисления
//
// Возвращаемое значение:
// 	Соответствие:
// 	 	* Ключ     - ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний
// 	 	* Значение - ПеречислениеСсылка.ВидыОперацийПоЗарплате
// 
Функция СоответствиеВидУдержанияВидОперацииНДФЛ() Экспорт 
	
	НачисленияУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний;
	ВидыОпераций 		= Перечисления.ВидыОперацийПоЗарплате;
	
	ВидУдержанияВидОперации = Новый Соответствие;
	ВидУдержанияВидОперации.Вставить(НачисленияУдержания.НДФЛ, 						ВидыОпераций.НДФЛ);
	ВидУдержанияВидОперации.Вставить(НачисленияУдержания.НДФЛСПревышения, 			ВидыОпераций.НДФЛСПревышения);
	ВидУдержанияВидОперации.Вставить(НачисленияУдержания.НДФЛСПревышенияПоСтавке18, ВидыОпераций.НДФЛСПревышенияПоСтавке18);
	ВидУдержанияВидОперации.Вставить(НачисленияУдержания.НДФЛСПревышенияПоСтавке20, ВидыОпераций.НДФЛСПревышенияПоСтавке20);
	ВидУдержанияВидОперации.Вставить(НачисленияУдержания.НДФЛСПревышенияПоСтавке22, ВидыОпераций.НДФЛСПревышенияПоСтавке22);
	
	Возврат ВидУдержанияВидОперации;
	
КонецФункции 

// ERP Настройка состава операций

Функция НеиспользуемыеВидыОпераций(Параметры)
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Депонирование);
	ВидыОпераций.Добавить(СписаниеДепонента);
	ВидыОпераций.Добавить(РасходыПоСтрахованиюБюджет);
	ВидыОпераций.Добавить(Дивиденды);
	ВидыОпераций.Добавить(ДивидендыСотрудников);
	ВидыОпераций.Добавить(ЕжегодныйОтпускОценочныеОбязательстваИРезервыБУ);
	ВидыОпераций.Добавить(ЕжегодныйОтпускОценочныеОбязательстваИРезервыНУ);
	ВидыОпераций.Добавить(НачисленоПроцентовПоЗайму);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		И Параметры.Свойство("Организация") И Параметры.Свойство("Период") Тогда
		
		НастройкиРезервовОтпусков = РезервОтпусков.НастройкиРезервовОтпусков(Параметры.Организация, Параметры.Период);
		
		Если Не НастройкиРезервовОтпусков.ФормироватьРезервБУ Тогда
			//не ведутся ни в БУ ни в НУ
			ВидыОпераций.Добавить(ЕжегодныйОтпускОценочныеОбязательстваИРезервы);
			ВидыОпераций.Добавить(ЕжегодныйОтпускОценочныеОбязательства);
			ВидыОпераций.Добавить(ЕжегодныйОтпускРезервы);
			ВидыОпераций.Добавить(КомпенсацияЕжегодногоОтпускаОценочныеОбязательства);
		ИначеЕсли Не НастройкиРезервовОтпусков.ФормироватьРезервНУ Тогда
			//ведутся только в БУ
			//операции начисления за счет резерва в НУ не нужны
			ВидыОпераций.Добавить(ЕжегодныйОтпускРезервы);
			ВидыОпераций.Добавить(ЕжегодныйОтпускОценочныеОбязательстваИРезервы);
		Иначе
			//ведутся в БУ и НУ
			//операция начисления за счет резерва только в БУ не нужна
			ВидыОпераций.Добавить(ЕжегодныйОтпускОценочныеОбязательства);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидыОпераций;
	
КонецФункции

// Конец ERP

#КонецОбласти

#КонецЕсли

