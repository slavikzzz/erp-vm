#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает соответствие объектов финансового учета и источников их данных - имен балансовых регистров накопления.
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.ОбъектыФинансовогоУчета
//  * Значение - Строка - имя балансового регистра накопления
//
Функция ИсточникиДанныхОбъектовФинансовогоУчета() Экспорт
	
	ИсточникиДанныхОбъектовУчета = Новый Соответствие();
	РегистрыНакопленияМетаданные = Метаданные.РегистрыНакопления;
	
	ИсточникиДанныхОбъектовУчета.Вставить(АвансВыкупнойСтоимостиПоАренде, РегистрыНакопленияМетаданные.РасчетыПоФинансовымИнструментам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(АвансыВыданныеПоставщикам, РегистрыНакопленияМетаданные.РасчетыСПоставщикамиПоСрокам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(АвансыПолученныеОтКлиентов, РегистрыНакопленияМетаданные.РасчетыСКлиентамиПоСрокам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(АмортизацияНМА, РегистрыНакопленияМетаданные.АмортизацияНМА.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(АмортизацияОС, РегистрыНакопленияМетаданные.АмортизацияОС.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(АрендныеОбязательства, РегистрыНакопленияМетаданные.РасчетыПоФинансовымИнструментам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(АрендныеПлатежи, РегистрыНакопленияМетаданные.ИнвестицииВАренду.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(БилетыИБронирование, РегистрыНакопленияМетаданные.РасчетыСПоставщикамиПоСрокам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ВнутрихозяйственныеРасчеты, РегистрыНакопленияМетаданные.ДвиженияПоПрочимАктивамПассивам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ВнутрихозяйственныеРасчетыПоВыделенномуИмуществу, РегистрыНакопленияМетаданные.ДвиженияПоПрочимАктивамПассивам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ВходящийНДС, РегистрыНакопленияМетаданные.НДСПредъявленный.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ВыкупнаяСтоимостьПоАренде, РегистрыНакопленияМетаданные.РасчетыПоФинансовымИнструментам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ВыручкаОтПродаж, РегистрыНакопленияМетаданные.ВыручкаИСебестоимостьПродаж.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ВыручкаОтПродажБезНДС, РегистрыНакопленияМетаданные.ВыручкаИСебестоимостьПродаж.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ДенежныеСредстваВКассах, РегистрыНакопленияМетаданные.ДенежныеСредстваНаличные.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ДенежныеСредстваВКассахККМ, РегистрыНакопленияМетаданные.ДенежныеСредстваВКассахККМ.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ДенежныеСредстваВПути, РегистрыНакопленияМетаданные.ДенежныеСредстваВПути.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ДенежныеСредстваНаСчетах, РегистрыНакопленияМетаданные.ДенежныеСредстваБезналичные.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ЗадолженностьКлиентов, РегистрыНакопленияМетаданные.РасчетыСКлиентамиПоСрокам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ЗадолженностьПередПоставщиками, РегистрыНакопленияМетаданные.РасчетыСПоставщикамиПоСрокам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ЗакрытиеДоходовОтПродолжающихсяОпераций, РегистрыНакопленияМетаданные.ДвиженияПоПрочимАктивамПассивам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ЗакрытиеРасходовОтПродолжающихсяОпераций, РегистрыНакопленияМетаданные.ДвиженияПоПрочимАктивамПассивам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(КредитыИЗаймыВыданныеДолг, РегистрыНакопленияМетаданные.РасчетыПоФинансовымИнструментам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(КредитыИЗаймыВыданныеКомиссия, РегистрыНакопленияМетаданные.РасчетыПоФинансовымИнструментам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(КредитыИЗаймыВыданныеПроценты, РегистрыНакопленияМетаданные.РасчетыПоФинансовымИнструментам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(КредитыИЗаймыПолученныеДолг, РегистрыНакопленияМетаданные.РасчетыПоФинансовымИнструментам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(КредитыИЗаймыПолученныеКомиссия, РегистрыНакопленияМетаданные.РасчетыПоФинансовымИнструментам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(КредитыИЗаймыПолученныеПроценты, РегистрыНакопленияМетаданные.РасчетыПоФинансовымИнструментам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(МатериалыИРаботыВНезавершенномПроизводстве, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НДСПоАренде, РегистрыНакопленияМетаданные.РасчетыПоФинансовымИнструментам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НДСПоОтгрузкамБезПереходаПраваСобственности, РегистрыНакопленияМетаданные.ДвиженияПоПрочимАктивамПассивам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НДССАвансовВыданных, РегистрыНакопленияМетаданные.НДСАвансыВыданные.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НДССАвансовПолученных, РегистрыНакопленияМетаданные.НДСАвансыПолученные.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НДССПродаж, РегистрыНакопленияМетаданные.ВыручкаИСебестоимостьПродаж.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НДССПрочихДоходов, РегистрыНакопленияМетаданные.ПрочаяВыручка.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НегарантированнаяЛиквидационнаяСтоимость, РегистрыНакопленияМетаданные.ИнвестицииВАренду.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураВПути, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураВЦеховойКладовой, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураНаСкладе, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураОтгруженная, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПереданнаяВПереработку, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПереданнаяНаКомиссию, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПереданнаяНаСубкомиссию, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПереданнаяНаХранение, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПринятаяВПереработкуВПроизводстве, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПринятаяВПереработкуВЦеховойКладовой, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПринятаяВПереработкуКСписанию, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПринятаяВПереработкуНаСкладе, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПринятаяВПереработкуПереданнаяПартнерам, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПринятаяНаКомиссию, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПринятаяНаХранениеВПроизводстве, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПринятаяНаХранениеВЦеховойКладовой, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПринятаяНаХранениеКСписанию, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПринятаяНаХранениеНаСкладе, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(НоменклатураПринятаяНаХранениеПереданнаяПартнерам, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ОбеспечительныйПлатежПоАренде, РегистрыНакопленияМетаданные.РасчетыПоФинансовымИнструментам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ОбесценениеНМА, РегистрыНакопленияМетаданные.ОбесценениеВНА.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ОбесценениеОС, РегистрыНакопленияМетаданные.ОбесценениеВНА.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ОбязательстваПередКомитентомПоЗакупкам, РегистрыНакопленияМетаданные.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ОбязательстваПередКомитентомПоРеализованнымТоварам, РегистрыНакопленияМетаданные.ТоварыКОформлениюОтчетовКомитенту.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ОбязательстваПередПринципаломПоРеализованнымУслугам, РегистрыНакопленияМетаданные.УслугиКОформлениюОтчетовПринципалу.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ОбязательстваПоНеотфактурованнымПоставкам, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ПереданнаяВозвратнаяТара, РегистрыНакопленияМетаданные.ПереданнаяВозвратнаяТара.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ПереданныеОС, РегистрыНакопленияМетаданные.ДвиженияПоПрочимАктивамПассивам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ПодарочныеСертификаты, РегистрыНакопленияМетаданные.ПодарочныеСертификаты.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ПостатейныеЗатратыВНезавершенномПроизводстве, РегистрыНакопленияМетаданные.ПрочиеРасходыНезавершенногоПроизводства.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ПринятаяВозвратнаяТара, РегистрыНакопленияМетаданные.ПринятаяВозвратнаяТара.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ПроцентныеРасходыДисконтирования, РегистрыНакопленияМетаданные.ПроцентныеРасходыДисконтирования.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ПроцентыДисконтированияАрендныхПлатежей, РегистрыНакопленияМетаданные.ИнвестицииВАренду.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ПроцентыДисконтированияРезервов, РегистрыНакопленияМетаданные.РезервыПредстоящихРасходов.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ПроцентыПоАренде, РегистрыНакопленияМетаданные.РасчетыПоФинансовымИнструментам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ПрочаяВыручка, РегистрыНакопленияМетаданные.ПрочаяВыручка.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ПрочаяВыручкаБезНДС, РегистрыНакопленияМетаданные.ПрочаяВыручка.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ПрочиеАктивыПассивы, РегистрыНакопленияМетаданные.ДвиженияПоПрочимАктивамПассивам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ПрочиеДоходы, РегистрыНакопленияМетаданные.ПрочиеДоходы.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(Расходы, РегистрыНакопленияМетаданные.ПрочиеРасходы.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(РасчетыПоЗаймамСотрудникам, РегистрыНакопленияМетаданные.ДвиженияПоПрочимАктивамПассивам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(РасчетыПоЗаработнойПлате, РегистрыНакопленияМетаданные.ДвиженияПоПрочимАктивамПассивам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(РасчетыПоНалогамИВзносам, РегистрыНакопленияМетаданные.ДвиженияПоПрочимАктивамПассивам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(РасчетыПоНДС, РегистрыНакопленияМетаданные.ДвиженияПоНДС.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(РасчетыСПодотчетнымиЛицами, РегистрыНакопленияМетаданные.ДенежныеСредстваУПодотчетныхЛиц.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(РезервПереоценкиСтоимостиНМА, РегистрыНакопленияМетаданные.СтоимостьНМА.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(РезервПереоценкиСтоимостиОС, РегистрыНакопленияМетаданные.СтоимостьОС.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(РезервыОценочныеОбязательства, РегистрыНакопленияМетаданные.РезервыПредстоящихРасходов.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(РезервыПодОбесценениеЗапасов, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(РезервыПодОбесценениеЗапасовВЦеховойКладовой, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(РезервыПодОбесценениеЗапасовПереданных, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(РезервыПодОбесценениеНезавершенногоПроизводства, РегистрыНакопленияМетаданные.СебестоимостьТоваров.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(РезервыПоСомнительнымДолгам, РегистрыНакопленияМетаданные.РезервыПоСомнительнымДолгам.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(СебестоимостьПродаж, РегистрыНакопленияМетаданные.ВыручкаИСебестоимостьПродаж.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(СтоимостьНМА, РегистрыНакопленияМетаданные.СтоимостьНМА.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(СтоимостьОС, РегистрыНакопленияМетаданные.СтоимостьОС.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(ТрудозатратыВНезавершенномПроизводстве, РегистрыНакопленияМетаданные.ТрудозатратыНезавершенногоПроизводства.Имя);
	ИсточникиДанныхОбъектовУчета.Вставить(УслугиПоАренде, РегистрыНакопленияМетаданные.РасчетыПоФинансовымИнструментам.Имя);
	
	МеждународныйУчетПоДаннымФинансовыхРегистровЛокализация.ДополнитьИсточникиДанныхОбъектовФинансовогоУчета(ИсточникиДанныхОбъектовУчета);
	
	Возврат ИсточникиДанныхОбъектовУчета;
	
КонецФункции

// Возвращает таблицу описания объектов финансового учета.
// Если какой-либо параметр является выражением языка запросов, то описания полей в нем должны содержать
// псевдоним источника данных, полученный через функцию ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию().
// Если параметр является только именем поля,в том числе разъименованным через точку, его можно указывать без псевдонима источника данных.
// Допускается использовать параметры запроса из функции МеждународныйУчетПоДаннымФинансовыхРегистров.ЗапросДанныхФинансовыхРегистров().
// Допускается использовать строковые шаблоны из функции МеждународныйУчетПоДаннымФинансовыхРегистров.ТекстыЗапросовЗаписейРегистров().
// 
// Параметры:
//  НастройкиПроводок - см. Справочники.НастройкиФормированияПроводокМеждународногоУчета.НастройкиФормированияПроводок
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание колонок:
//  * ОбъектУчета - ПеречислениеСсылка.ОбъектыФинансовогоУчета - Ссылка объекта финансового учета
//  * ФункциональныеОпции - Строка, Массив, СписокЗначений - имена функциональных опций, управляющих ведением учета по объекту фин.учета. Значения в Списке умножаются по "И", в Массиве складываются по "ИЛИ"
//  * ИсточникДанных - Строка - Имя регистра накопления, в котором ведется учет по объекту фин.учета
//  * ОтборДанных - Соответствие, Массив - Отбор данных регистра по объекту фин.учета. Условия отбора в Соответствии умножаются по "И", в Массиве складываются по "ИЛИ"
//  * ВыражениеЭтоДебет - Строка - Выражение языка запросов для отнесения движений регистра к дебету. Должно возвращать значение типа Булево. Указывается в случае отличия от правил отнесения движений в регистре или их отсутствия
//  * ВыражениеЭтоКредит - Строка - Выражение языка запросов для отнесения движений регистра к кредиту. Должно возвращать значение типа Булево. Указывается в случае отличия от правил отнесения движений в регистре или их отсутствия
//  * ПутьКДаннымОбъектНастройки - Строка - Путь выборки данных регистра, соответствующих объектам настроек, в разрезе которых указываются счета учета. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутьКДаннымНаправлениеДеятельности - Строка - Путь выборки значения направления деятельности из данных регистра. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутьКДаннымИдентификаторФинЗаписи - Строка - Путь выборки значения идентификатора записи регистра. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутьКДаннымНастройкаХозОперации - Строка - Путь выборки значения настройки хозяйственной операции. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутьКДаннымИдентификаторСтроки - Строка - Путь выборки значения идентификатора строки регистра. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутиКДаннымСубконто - Соответствие Из КлючИЗначение - Уточнение путей выборки субконто. Указывается в случае некорректного результата подбора значения субконто по источникам субконто регистра
//  	* Ключ - ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные - Вид субконто
//  	* Значение - Строка - Путь выборки значения субконто
//  * РесурсыУпр - Массив - Массив строк с именами ресурсов, хранящих сумму операции в валюте управленческого учета. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * РесурсыРегл - Массив - Массив строк с именами ресурсов, хранящих сумму операции в валюте регламентированного учета. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * РесурсыВал - Массив - Массив строк с именами ресурсов, хранящих валютную сумму операции. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * РесурсыКоличество - Массив - Массив строк с именами ресурсов, хранящих количество операции. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * КорИсточникиДанных - Массив - Массив строк с именами регистров накопления, в которых ведется учет корреспондирующих объектов учета. Применяется для регистра Выручка.
//  * ВыделениеДолгосрочныхАктивовОбязательств - Булево - Данные объекта учета делятся на краткосрочные и долгосрочные, признак транслируется из источника данных.
//  * НесобственныеЦенности - Булево - Признак учета в объекте несобственных подконтрольных ценностей
//  * УчетНДС - Булево - Признак учета в объекте сумм НДС
//  * УчетСНДС - Булево - Признак учета в объекте сумм с НДС
//  * ПризнакиУчетаКорреспонденций - ТаблицаЗначений - Описание корреспонденций текущего объекта фин.учета с другими объектами, возможных при выполнении определенных условий.
//  	* ОбъектУчета - ПеречислениеСсылка.ОбъектыФинансовогоУчета - Корреспондирующий объект финансового учета
//  	* ПризнакУчета - Строка - Наименование признака учета, управляющего корреспонденцией объектов фин.учета
//  	* Значение - Булево - Значение признака учета, при котором возможна корреспонденция объектов фин.учета
// 
Функция ОписаниеОбъектовФинансовогоУчета(НастройкиПроводок = Неопределено) Экспорт
	
	Если НастройкиПроводок = Неопределено Тогда
		НастройкиПроводок = Справочники.НастройкиФормированияПроводокМеждународногоУчета.НастройкиФормированияПроводок();
	КонецЕсли;
	
	ОбъектыФинансовогоУчета = Новый ТаблицаЗначений();
	ОбъектыФинансовогоУчета.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыФинансовогоУчета"));
	ОбъектыФинансовогоУчета.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов(ОбщегоНазначения.ОписаниеТипаСтрока(150), "Массив,СписокЗначений"));
	ОбъектыФинансовогоУчета.Колонки.Добавить("ИсточникДанных", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ОбъектыФинансовогоУчета.Колонки.Добавить("ОтборДанных", Новый ОписаниеТипов("Соответствие,Массив"));
	ОбъектыФинансовогоУчета.Колонки.Добавить("ВыражениеЭтоДебет", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ОбъектыФинансовогоУчета.Колонки.Добавить("ВыражениеЭтоКредит", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ОбъектыФинансовогоУчета.Колонки.Добавить("ПутьКДаннымОбъектНастройки", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ОбъектыФинансовогоУчета.Колонки.Добавить("ПутьКДаннымНаправлениеДеятельности", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ОбъектыФинансовогоУчета.Колонки.Добавить("ПутьКДаннымИдентификаторФинЗаписи", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ОбъектыФинансовогоУчета.Колонки.Добавить("ПутьКДаннымНастройкаХозОперации", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ОбъектыФинансовогоУчета.Колонки.Добавить("ПутьКДаннымИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ОбъектыФинансовогоУчета.Колонки.Добавить("ПутиКДаннымСубконто", Новый ОписаниеТипов("Соответствие"));
	ОбъектыФинансовогоУчета.Колонки.Добавить("РесурсыУпр", Новый ОписаниеТипов("Массив"));
	ОбъектыФинансовогоУчета.Колонки.Добавить("РесурсыРегл", Новый ОписаниеТипов("Массив"));
	ОбъектыФинансовогоУчета.Колонки.Добавить("РесурсыВал", Новый ОписаниеТипов("Массив"));
	ОбъектыФинансовогоУчета.Колонки.Добавить("РесурсыКоличество", Новый ОписаниеТипов("Массив"));
	ОбъектыФинансовогоУчета.Колонки.Добавить("КорИсточникиДанных", Новый ОписаниеТипов("Массив"));
	ОбъектыФинансовогоУчета.Колонки.Добавить("ВыделениеДолгосрочныхАктивовОбязательств", Новый ОписаниеТипов("Булево"));
	ОбъектыФинансовогоУчета.Колонки.Добавить("НесобственныеЦенности", Новый ОписаниеТипов("Булево"));
	ОбъектыФинансовогоУчета.Колонки.Добавить("УчетНДС", Новый ОписаниеТипов("Булево"));
	ОбъектыФинансовогоУчета.Колонки.Добавить("УчетСНДС", Новый ОписаниеТипов("Булево"));
	ОбъектыФинансовогоУчета.Колонки.Добавить("ПризнакиУчетаКорреспонденций", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ЗаполнитьОбъектыУчетаДенежныеСредства(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаНоменклатура(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаОсновныеСредства(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаНематериальныеАктивы(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаРасчетыСКлиентами(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаРасчетыСПоставщиками(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаКредитыИЗаймыВыданные(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаКредитыИЗаймыПолученные(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаРасчетыССотрудниками(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаРасходнаяАренда(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаДоходнаяАренда(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаНезавершенноеПроизводство(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаДоходыИРасходы(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаНДС(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаРезервыПодОбесценение(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаРезервыПоСомнительнымДолгам(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаРезервыПредстоящихРасходов(ОбъектыФинансовогоУчета, НастройкиПроводок);
	ЗаполнитьОбъектыУчетаПрочиеАктивыИОбязательства(ОбъектыФинансовогоУчета, НастройкиПроводок);
	
	МеждународныйУчетПоДаннымФинансовыхРегистровЛокализация.ДополнитьОписаниеОбъектовФинансовогоУчета(ОбъектыФинансовогоУчета, НастройкиПроводок);
	
	ЗаполнитьИсточникиДанныхОбъектовУчета(ОбъектыФинансовогоУчета);
	
	Если НастройкиПроводок.ВыделениеДолгосрочныхАктивовОбязательств = Истина
	 ИЛИ НастройкиПроводок.ВыделениеДолгосрочныхАктивовОбязательств = Неопределено Тогда
		ЗаполнитьВыделениеДолгосрочныхАктивовОбязательств(ОбъектыФинансовогоУчета);
	КонецЕсли;
	
	ОбъектыФинансовогоУчета.Индексы.Добавить("ИсточникДанных");
	ОбъектыФинансовогоУчета.Индексы.Добавить("ОбъектУчета");
	
	Возврат ОбъектыФинансовогоУчета;
	
КонецФункции

// Возвращает структуру описания объекта финансового учета.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//  * ОбъектУчета - ПеречислениеСсылка.ОбъектыФинансовогоУчета - Ссылка объекта финансового учета
//  * ФункциональныеОпции - Строка, Массив, СписокЗначений - имена функциональных опций, управляющих ведением учета по объекту фин.учета. Значения в Списке умножаются по "И", в Массиве складываются по "ИЛИ"
//  * ИсточникДанных - Строка - Имя регистра накопления, в котором ведется учет по объекту фин.учета
//  * ОтборДанных - Соответствие, Массив - Отбор данных регистра по объекту фин.учета. Условия отбора в Соответствии умножаются по "И", в Массиве складываются по "ИЛИ"
//  * ВыражениеЭтоДебет - Строка - Выражение языка запросов для отнесения движений регистра к дебету. Должно возвращать значение типа Булево. Указывается в случае отличия от правил отнесения движений в регистре или их отсутствия
//  * ВыражениеЭтоКредит - Строка - Выражение языка запросов для отнесения движений регистра к кредиту. Должно возвращать значение типа Булево. Указывается в случае отличия от правил отнесения движений в регистре или их отсутствия
//  * ПутьКДаннымОбъектНастройки - Строка - Путь выборки данных регистра, соответствующих объектам настроек, в разрезе которых указываются счета учета. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутьКДаннымНаправлениеДеятельности - Строка - Путь выборки значения направления деятельности из данных регистра. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутьКДаннымИдентификаторФинЗаписи - Строка - Путь выборки значения идентификатора записи регистра. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутьКДаннымНастройкаХозОперации - Строка - Путь выборки значения настройки хозяйственной операции. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутьКДаннымИдентификаторСтроки - Строка - Путь выборки значения идентификатора строки регистра. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутиКДаннымСубконто - Соответствие Из КлючИЗначение - Уточнение путей выборки субконто. Указывается в случае некорректного результата подбора значения субконто по источникам субконто регистра
//  	* Ключ - ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные - Вид субконто
//  	* Значение - Строка - Путь выборки значения субконто
//  * РесурсыУпр - Массив - Массив строк с именами ресурсов, хранящих сумму операции в валюте управленческого учета. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * РесурсыРегл - Массив - Массив строк с именами ресурсов, хранящих сумму операции в валюте регламентированного учета. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * РесурсыВал - Массив - Массив строк с именами ресурсов, хранящих валютную сумму операции. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * РесурсыКоличество - Массив - Массив строк с именами ресурсов, хранящих количество операции. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * КорИсточникиДанных - Массив - Массив строк с именами регистров накопления, в которых ведется учет корреспондирующих объектов учета. Применяется для регистра Выручка.
//  * ВыделениеДолгосрочныхАктивовОбязательств - Булево - Данные объекта учета делятся на краткосрочные и долгосрочные, признак транслируется из источника данных.
//  * НесобственныеЦенности - Булево - Признак учета в объекте несобственных подконтрольных ценностей
//  * УчетНДС - Булево - Признак учета в объекте сумм НДС
//  * УчетСНДС - Булево - Признак учета в объекте сумм с НДС
//  * ПризнакиУчетаКорреспонденций - ТаблицаЗначений - Описание корреспонденций текущего объекта фин.учета с другими объектами, возможных при выполнении определенных условий.
//  	* ОбъектУчета - ПеречислениеСсылка.ОбъектыФинансовогоУчета - Корреспондирующий объект финансового учета
//  	* ПризнакУчета - Строка - Наименование признака учета, управляющего корреспонденцией объектов фин.учета
//  	* Значение - Булево - Значение признака учета, при котором возможна корреспонденция объектов фин.учета
// 
Функция ОписаниеОбъектаФинансовогоУчета(ОбъектУчета, РасширенноеОписание = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если РасширенноеОписание Тогда
		ОписаниеОбъектовУчета = РасширенноеОписаниеОбъектовУчетаДляНастройки();
	Иначе
		ОписаниеОбъектовУчета = ОписаниеОбъектовФинансовогоУчета();
	КонецЕсли;
	
	Результат = Новый Структура;
	Для каждого Колонка Из ОписаниеОбъектовУчета.Колонки Цикл
		Если НЕ Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
			Результат.Вставить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеОбъекаУчета = ОписаниеОбъектовУчета.Найти(ОбъектУчета, "ОбъектУчета");
	
	Если ОписаниеОбъекаУчета = Неопределено И РасширенноеОписание Тогда
		ОписаниеОбъектовУчета = ОписаниеОбъектовФинансовогоУчета();
		ДобавитьКолонкиРасширенногоОписанияОбъектовУчета(ОписаниеОбъектовУчета);
		ОписаниеОбъекаУчета = ОписаниеОбъектовУчета.Найти(ОбъектУчета, "ОбъектУчета");
	КонецЕсли;
	
	Если ОписаниеОбъекаУчета = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Отсутствует описание объекта учета ""%1""';
										|en = 'No details for the ""%1"" accounting object'"), ОбъектУчета);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, ОписаниеОбъекаУчета);
	
	Возврат Результат;
	
КонецФункции

// Возвращает расширенную таблицу описания объектов финансового учета. Таблица содержит описание группировки объектов учета, типов объектов настройки и т.д.
// 
// Параметры:
//  НастройкиПроводок - см. Справочники.НастройкиФормированияПроводокМеждународногоУчета.НастройкиФормированияПроводок
// 
// Возвращаемое значение:
// 	Структура - Описание:
//  * ОбъектУчета - ПеречислениеСсылка.ОбъектыФинансовогоУчета - Ссылка объекта финансового учета
//  * ФункциональныеОпции - Строка, Массив, СписокЗначений - имена функциональных опций, управляющих ведением учета по объекту фин.учета. Значения в Списке умножаются по "И", в Массиве складываются по "ИЛИ"
//  * ИсточникДанных - Строка - Имя регистра накопления, в котором ведется учет по объекту фин.учета
//  * ОтборДанных - Соответствие, Массив - Отбор данных регистра по объекту фин.учета. Условия отбора в Соответствии умножаются по "И", в Массиве складываются по "ИЛИ"
//  * ВыражениеЭтоДебет - Строка - Выражение языка запросов для отнесения движений регистра к дебету. Должно возвращать значение типа Булево. Указывается в случае отличия от правил отнесения движений в регистре или их отсутствия
//  * ВыражениеЭтоКредит - Строка - Выражение языка запросов для отнесения движений регистра к кредиту. Должно возвращать значение типа Булево. Указывается в случае отличия от правил отнесения движений в регистре или их отсутствия
//  * ПутьКДаннымОбъектНастройки - Строка - Путь выборки данных регистра, соответствующих объектам настроек, в разрезе которых указываются счета учета. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутьКДаннымНаправлениеДеятельности - Строка - Путь выборки значения направления деятельности из данных регистра. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутьКДаннымИдентификаторФинЗаписи - Строка - Путь выборки значения идентификатора записи регистра. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутьКДаннымНастройкаХозОперации - Строка - Путь выборки значения настройки хозяйственной операции. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутьКДаннымИдентификаторСтроки - Строка - Путь выборки значения идентификатора строки регистра. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * ПутиКДаннымСубконто - Соответствие Из КлючИЗначение - Уточнение путей выборки субконто. Указывается в случае некорректного результата подбора значения субконто по источникам субконто регистра
//  	* Ключ - ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные - Вид субконто
//  	* Значение - Строка - Путь выборки значения субконто
//  * РесурсыУпр - Массив - Массив строк с именами ресурсов, хранящих сумму операции в валюте управленческого учета. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * РесурсыРегл - Массив - Массив строк с именами ресурсов, хранящих сумму операции в валюте регламентированного учета. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * РесурсыВал - Массив - Массив строк с именами ресурсов, хранящих валютную сумму операции. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * РесурсыКоличество - Массив - Массив строк с именами ресурсов, хранящих количество операции. Указывается в случае отличия от аналогичого параметра регистра накопления
//  * КорИсточникиДанных - Массив - Массив строк с именами регистров накопления, в которых ведется учет корреспондирующих объектов учета. Применяется для регистра Выручка.
//  * ВыделениеДолгосрочныхАктивовОбязательств - Булево - Данные объекта учета делятся на краткосрочные и долгосрочные, признак транслируется из источника данных.
//  * НесобственныеЦенности - Булево - Признак учета в объекте несобственных подконтрольных ценностей
//  * УчетНДС - Булево - Признак учета в объекте сумм НДС
//  * УчетСНДС - Булево - Признак учета в объекте сумм с НДС
//  * ПризнакиУчетаКорреспонденций - ТаблицаЗначений - Описание корреспонденций текущего объекта фин.учета с другими объектами, возможных при выполнении определенных условий.
//  	* ОбъектУчета - ПеречислениеСсылка.ОбъектыФинансовогоУчета - Корреспондирующий объект финансового учета
//  	* ПризнакУчета - Строка - Наименование признака учета, управляющего корреспонденцией объектов фин.учета
//  	* Значение - Булево - Значение признака учета, при котором возможна корреспонденция объектов фин.учета
//  * Группа - Строка - Группа объектов учета
//  * Представление - Строка - Представление объекта при отображении в группе
//  * ОписаниеТиповОбъектНастройки - ОписаниеТипов - Описание типов объекта настройки. Если только общая настройка, то описание не содержит типов.
//  * ОтборОбъектовНастройки - Структура, Массив - Отбор объектов настройки, в случае массива условия складываются по "ИЛИ":
//  	* Ключ - Строка - Имя реквизита отбора
//  	* Значение - Произвольный - Значение отбора
//  * ОписаниеТиповМестоУчета - ОписаниеТипов - Описание типов места учета для настройки исключение. Если настройка исключений по местам учета не предусмотрена, то описание не содержит типов.
//  * ЗаголовокТаблицыНастройкиСчетов - Строка - Заголовок таблицы настройки счетов по объекту учета
Функция РасширенноеОписаниеОбъектовУчетаДляНастройки(НастройкиПроводок = Неопределено) Экспорт
	
	Если НастройкиПроводок = Неопределено Тогда
		НастройкиПроводок = Справочники.НастройкиФормированияПроводокМеждународногоУчета.НастройкиФормированияПроводок();
	КонецЕсли;
	
	ОбъектыФинансовогоУчета = ОписаниеОбъектовФинансовогоУчета(НастройкиПроводок);
	ДобавитьКолонкиРасширенногоОписанияОбъектовУчета(ОбъектыФинансовогоУчета);
	
	ГруппыОбъектовУчета = ГруппыОбъектовУчета(НастройкиПроводок);
	ОписаниеОбъектовУчетаДляНастройкиФорм = Новый Соответствие();
	
	#Область ОписаниеОбъектовУчета
	
	#Область ДенежныеСредства
	
	ИмяРеквизитаТипДенежныхСредств = Метаданные.Справочники.ГруппыФинансовогоУчетаДенежныхСредств.Реквизиты.ТипДенежныхСредств.Имя;
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДережныеСредства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'В кассах предприятия';
												|en = 'On the cash accounts'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета денежных средств в кассах предприятия';
																|en = 'Ledger account of cash in cash accounts'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаДенежныхСредств");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = Новый Структура(ИмяРеквизитаТипДенежныхСредств, Перечисления.ТипыДенежныхСредств.Наличные);
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ДенежныеСредстваВКассах, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДережныеСредства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'В кассах ККМ';
												|en = 'In cash registers'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета денежных средств в рознице';
																|en = 'Ledger account of retail cash'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаДенежныхСредств");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = Новый Структура(ИмяРеквизитаТипДенежныхСредств, Перечисления.ТипыДенежныхСредств.ВКассахККМ);
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ДенежныеСредстваВКассахККМ, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДережныеСредства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'На банковских счетах';
												|en = 'On bank accounts'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета денежных средств на банковских счетах';
																|en = 'Ledger accounts of cash in bank accounts'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаДенежныхСредств");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = Новый Структура(ИмяРеквизитаТипДенежныхСредств, Перечисления.ТипыДенежныхСредств.Безналичные);
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ДенежныеСредстваНаСчетах, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДережныеСредства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'В пути';
												|en = 'In transit'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета денежных средств в пути';
																|en = 'Cash-in-transit ledger accounts'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПереводовДенежныхСредств");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ДенежныеСредстваВПути, ОписаниеОбъектаУчета);
	
	#КонецОбласти
	
	#Область Номенклатура
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.Номенклатура;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'На складе';
												|en = 'In warehouse'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета товаров на складах';
																|en = 'Ledger accounts of goods in warehouses'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов("СправочникСсылка.Склады");
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураНаСкладе, ОписаниеОбъектаУчета);

	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.Номенклатура;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'В пути';
												|en = 'In transit'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета собственных товаров в пути';
																|en = 'Ledger accounts of own goods in transit'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураВПути, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.Номенклатура;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'В цеховой кладовой';
												|en = 'In shop floor stockrooms'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета материалов в цеховых кладовых';
																|en = 'Ledger accounts of materials in shop floor stockrooms'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов("СправочникСсылка.Склады");
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураВЦеховойКладовой, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.Номенклатура;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Отгруженная';
												|en = 'Shipped'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета товаров отгруженных покупателю';
																|en = 'Ledger accounts of goods shipped to customer'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураОтгруженная, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.Номенклатура;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Переданная в переработку';
												|en = 'Transferred to subcontracting'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета материалов переданных переработчику';
																|en = 'Ledger accounts of materials transferred to subcontractor'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПереданнаяВПереработку, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.Номенклатура;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Переданная на хранение с правом продажи';
												|en = 'Transferred to safekeeping with the right of sale'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета товаров переданных на хранение';
																|en = 'Ledger accounts of goods transferred to safekeeping'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПереданнаяНаХранение, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.Номенклатура;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Переданная на комиссию';
												|en = 'Transferred to consignee'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета товаров переданных комиссионеру';
																|en = 'Ledger accounts of consignment sales stock'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПереданнаяНаКомиссию, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.Номенклатура;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Переданная возвратная тара';
												|en = 'Transferred returnable packaging'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета переданной возвратной тары';
																|en = 'Ledger accounts of transferred returnable packaging'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ПереданнаяВозвратнаяТара, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.Номенклатура;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Принятая возвратная тара';
												|en = 'Received returnable packaging'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета принятой возвратной тары';
																|en = 'Ledger accounts of received returnable packaging'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ПринятаяВозвратнаяТара, ОписаниеОбъектаУчета);
	
	#КонецОбласти
	
	#Область НоменклатураПринятая
	
	Если НастройкиПроводок.СпособУчетаНесобственныхЦенностей <> Перечисления.СпособыУчетаНесобственныхПодконтрольныхЦенностей.НеОтражаютсяНаСчетах
	   И НастройкиПроводок.СпособУчетаНесобственныхЦенностей <> Перечисления.СпособыУчетаНесобственныхПодконтрольныхЦенностей.ПустаяСсылка() Тогда
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НоменклатураПринятая;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'На хранение, на складе';
													|en = 'To store, at a warehouse'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета товаров принятых на хранение на складе';
																	|en = 'Ledger accounts of vendor-managed inventory'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяНаХранениеНаСкладе, ОписаниеОбъектаУчета);
		
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НоменклатураПринятая;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'На хранение, в цеховой кладовой';
													|en = 'To store, in a shop floor stockroom'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета товаров принятых на хранение в цеховой кладовой';
																	|en = 'Ledger accounts of goods received to store in a shop floor stockroom'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяНаХранениеВЦеховойКладовой, ОписаниеОбъектаУчета);
		
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НоменклатураПринятая;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'На хранение, переданная партнерам';
													|en = 'To store, transferred to partners'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета товаров принятых на хранение и переданных партнерам';
																	|en = 'Ledger accounts of vendor-managed inventory transferred to partners'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяНаХранениеПереданнаяПартнерам, ОписаниеОбъектаУчета);
		
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НоменклатураПринятая;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'На хранение, к списанию';
													|en = 'To store, to write off'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета товаров принятых на хранение к оформлению списания';
																	|en = 'Ledger accounts of vendor-managed inventory to register write-off'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяНаХранениеКСписанию, ОписаниеОбъектаУчета);
		
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НоменклатураПринятая;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'В переработку, на складе';
													|en = 'To subcontract, at a warehouse'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета материалов принятых в переработку на складе';
																	|en = 'Ledger accounts of materials for subcontracting at a warehouse'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяВПереработкуНаСкладе, ОписаниеОбъектаУчета);
		
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НоменклатураПринятая;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'В переработку, в цеховой кладовой';
													|en = 'To subcontract, in a shop floor stockroom'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета материалов принятых в переработку в цеховой кладовой';
																	|en = 'Ledger accounts of materials for subcontracting in a shop floor stockroom'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяВПереработкуВЦеховойКладовой, ОписаниеОбъектаУчета);
		
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НоменклатураПринятая;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'В переработку, переданная партнерам';
													|en = 'To subcontract, transferred to partners'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета материалов принятых в переработку и переданных партнерам';
																	|en = 'Ledger accounts of materials received for subcontracting and transferred to partners'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяВПереработкуПереданнаяПартнерам, ОписаниеОбъектаУчета);
		
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НоменклатураПринятая;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'В переработку, к списанию';
													|en = 'To subcontract, to write off'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета материалов принятых в переработку к оформлению списания';
																	|en = 'Ledger accounts of materials received for subcontracting to register write-off'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяВПереработкуКСписанию, ОписаниеОбъектаУчета);
		
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НоменклатураПринятая;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'На комиссию';
													|en = 'To consignment'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета товаров принятых на комиссию';
																	|en = 'Ledger accounts of consignment stock received'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяНаКомиссию, ОписаниеОбъектаУчета);
		
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НоменклатураПринятая;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Переданная на субкомиссию';
													|en = 'Handed over to sub-consignment'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета товаров переданных на субкомиссию';
																	|en = 'Ledger accounts of goods handed over to sub-consignment'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПереданнаяНаСубкомиссию, ОписаниеОбъектаУчета);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОсновныеСредства
	
	РеквизитВидАктива = Метаданные.Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.Реквизиты.ВидАктива.Имя;
	МассивВидовАктивов = Новый Массив;
	МассивВидовАктивов.Добавить(Перечисления.ВидыВнеоборотныхАктивов.ОсновноеСредство);
	МассивВидовАктивов.Добавить(Перечисления.ВидыВнеоборотныхАктивов.ИнвестиционноеИмущество);
	ОтборГруппФинансовогоУчетаОС = Новый Структура(РеквизитВидАктива, МассивВидовАктивов);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ОсновныеСредства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Стоимость ОС';
												|en = 'Fixed assets cost'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета стоимости ОС';
																|en = 'Ledger accounts of fixed assets cost'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаОС;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.СтоимостьОС, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ОсновныеСредства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Амортизация ОС';
												|en = 'Fixed assets — Depreciation charge'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета амортизации ОС';
																|en = 'Ledger accounts of fixed asset depreciation'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаОС;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.АмортизацияОС, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ОсновныеСредства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Резерв переоценки стоимости ОС';
												|en = 'Revaluation reserve of fixed assets cost'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета резерва переоценки стоимости ОС';
																|en = 'Ledger accounts of revaluation reserve of fixed assets cost'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаОС;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РезервПереоценкиСтоимостиОС, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ОсновныеСредства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Обесценение ОС';
												|en = 'Fixed asset impairment'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета обесценения ОС';
																|en = 'Fixed asset impairment ledger account'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаОС;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ОбесценениеОС, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ОсновныеСредства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Переданные ОС';
												|en = 'Fixed assets provided'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета переданных ОС';
																|en = 'Ledger accounts of fixed assets provided'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов();
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ПереданныеОС, ОписаниеОбъектаУчета);

	#КонецОбласти
	
	#Область НематериальныеАктивы
	
	РеквизитВидАктива = Метаданные.Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.Реквизиты.ВидАктива.Имя;
	МассивВидовАктивов = Новый Массив;
	МассивВидовАктивов.Добавить(Перечисления.ВидыВнеоборотныхАктивов.НМА);
	МассивВидовАктивов.Добавить(Перечисления.ВидыВнеоборотныхАктивов.НИОКР);
	ОтборГруппФинансовогоУчетаНМА = Новый Структура(РеквизитВидАктива, МассивВидовАктивов);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НематериальныеАктивы;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Стоимость НМА';
												|en = 'Intangible assets cost'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета стоимости НМА';
																|en = 'Ledger accounts of intangible assets cost'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаНМА;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.СтоимостьНМА, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НематериальныеАктивы;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Амортизация НМА';
												|en = 'Intangible assets — Amortization charge'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета амортизации НМА';
																|en = 'Ledger accounts of intangible asset amortization'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаНМА;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.АмортизацияНМА, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НематериальныеАктивы;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Резерв переоценки стоимости НМА';
												|en = 'Revaluation reserve of intangible assets cost'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета резерва переоценки стоимости НМА';
																|en = 'Ledger accounts of revaluation reserve of intangible assets cost'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаНМА;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РезервПереоценкиСтоимостиНМА, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НематериальныеАктивы;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Обесценение НМА';
												|en = 'Intangible asset impairment'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета обесценения НМА';
																|en = 'Intangible asset impairment ledger account'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаНМА;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ОбесценениеНМА, ОписаниеОбъектаУчета);
	
	#КонецОбласти

	#Область РасчетыСКлиентами
	
	РеквизитыГФУРасчетов = Метаданные.Справочники.ГруппыФинансовогоУчетаРасчетов.Реквизиты;
	ОтборГруппФинансовогоУчетаРасчетовСКлиентами = Новый Массив();
	ОтборГруппФинансовогоУчетаРасчетовСКлиентами.Добавить(Новый Структура(РеквизитыГФУРасчетов.РасчетыСКлиентами.Имя, Истина));
	ОтборГруппФинансовогоУчетаРасчетовСКлиентами.Добавить(Новый Структура(РеквизитыГФУРасчетов.РасчетыСКомиссионерами.Имя, Истина));
	ОтборГруппФинансовогоУчетаРасчетовСКлиентами.Добавить(Новый Структура(РеквизитыГФУРасчетов.РасчетыСКомитентамиПоЗакупке.Имя, Истина));
	ОтборГруппФинансовогоУчетаРасчетовСКлиентами.Добавить(Новый Структура(РеквизитыГФУРасчетов.РасчетыСКомитентами.Имя, Истина));
	ОтборГруппФинансовогоУчетаРасчетовСКлиентами.Добавить(Новый Структура(РеквизитыГФУРасчетов.РасчетыСПереработчиками.Имя, Истина));
	ОтборГруппФинансовогоУчетаРасчетовСКлиентами.Добавить(Новый Структура(РеквизитыГФУРасчетов.РасчетыСДавальцами.Имя, Истина));
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыСКлиентами;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Аванс';
												|en = 'Advance payment'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета авансов, полученных от клиентов';
																|en = 'Ledger accounts of prepayments from customers'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетовСКлиентами;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.АвансыПолученныеОтКлиентов, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыСКлиентами;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Задолженность';
												|en = 'Debt'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета задолженности клиентов';
																|en = 'Ledger accounts of customer receivables'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетовСКлиентами;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыСКлиентами;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Подарочные сертификаты';
												|en = 'Gift cards'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета подарочных сертификатов';
																|en = 'Ledger accounts of gift cards'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ПодарочныеСертификаты, ОписаниеОбъектаУчета);
	
	Если НастройкиПроводок.ВариантФормированияПроводок = Неопределено
	 ИЛИ НастройкиПроводок.ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.СКорреспонденцией Тогда
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыСКлиентами;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Расчеты с розничными покупателями';
													|en = 'AR/AP accounting for retail customers'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов с розничными покупателями';
																	|en = 'Ledger accounts of AR/AP accounting for retail customers'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РасчетыСРозничнымиПокупателями, ОписаниеОбъектаУчета);
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыСКлиентами;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Обязательства перед комитентом по закупкам';
												|en = 'Liabilities to vendor for purchasing'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета обязательств перед комитентом по закупкам';
																|en = 'Ledger accounts of liabilities to vendor for purchasing'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ОбязательстваПередКомитентомПоЗакупкам, ОписаниеОбъектаУчета);
	
	#КонецОбласти
	
	#Область РасчетыСПоставщиками
	
	РеквизитыГФУРасчетов = Метаданные.Справочники.ГруппыФинансовогоУчетаРасчетов.Реквизиты;
	ОтборГруппФинансовогоУчетаРасчетовСПоставщиками = Новый Массив();
	ОтборГруппФинансовогоУчетаРасчетовСПоставщиками.Добавить(Новый Структура(РеквизитыГФУРасчетов.РасчетыСПоставщиками.Имя, Истина));
	ОтборГруппФинансовогоУчетаРасчетовСПоставщиками.Добавить(Новый Структура(РеквизитыГФУРасчетов.РасчетыСКомитентами.Имя, Истина));
	ОтборГруппФинансовогоУчетаРасчетовСПоставщиками.Добавить(Новый Структура(РеквизитыГФУРасчетов.РасчетыСКомиссионерами.Имя, Истина));
	ОтборГруппФинансовогоУчетаРасчетовСПоставщиками.Добавить(Новый Структура(РеквизитыГФУРасчетов.РасчетыСПереработчиками.Имя, Истина));
	ОтборГруппФинансовогоУчетаРасчетовСПоставщиками.Добавить(Новый Структура(РеквизитыГФУРасчетов.РасчетыСДавальцами.Имя, Истина));
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыСПоставщиками;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Аванс';
												|en = 'Advance payment'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета авансов, выплаченных поставщикам';
																|en = 'Ledger accounts of prepayments to vendors'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетовСПоставщиками;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыСПоставщиками;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Долг';
												|en = 'Debt'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета задолженности перед поставщиками';
																|en = 'Ledger accounts of vendor payables'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетовСПоставщиками;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыСПоставщиками;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Билеты и бронирование';
												|en = 'Tickets and booking'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета задолженности по билетам и бронированию';
																|en = 'Ledger accounts of payables by tickets and booking'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = Новый Структура(РеквизитыГФУРасчетов.РасчетыПоБронированию.Имя, Истина);
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.БилетыИБронирование, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыСПоставщиками;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Проценты дисконтирования расчетов';
												|en = 'AR/AP discounting interest'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета процентов дисконтирования расчетов';
																|en = 'Ledger accounts of AR/AP discounting interest'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетовСПоставщиками;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ПроцентныеРасходыДисконтирования, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыСПоставщиками;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Обязательства перед комитентом по реализованным товарам';
												|en = 'Liabilities to vendor for goods sold'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета обязательств перед комитентом по реализованным товарам';
																|en = 'Ledger accounts of liabilities to vendor for goods sold'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ОбязательстваПередКомитентомПоРеализованнымТоварам, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыСПоставщиками;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Обязательства перед принципалом по реализованным услугам';
												|en = 'Liabilities to principal for services provided'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета обязательств перед принципалом по реализованным услугам';
																|en = 'Ledger accounts of liabilities to principal for services sold'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ОбязательстваПередПринципаломПоРеализованнымУслугам, ОписаниеОбъектаУчета);
	
	#КонецОбласти
	
	#Область КредитыИЗаймыВыданные
	
	РеквизитРасчетыСДебиторами = Метаданные.Справочники.ГруппыФинансовогоУчетаРасчетов.Реквизиты.РасчетыСДебиторами.Имя;
	ОтборГруппФинансовогоУчетаРасчетыСДебиторами = Новый Структура(РеквизитРасчетыСДебиторами, Истина);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.КредитыИЗаймыВыданные;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Основной долг';
												|en = 'Principal debt'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета основного долга по кредитам и займам выданным';
																|en = 'Ledger accounts of principal debt on issued credits and loans'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетыСДебиторами;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.КредитыИЗаймыВыданныеДолг, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.КредитыИЗаймыВыданные;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Задолженность по комиссии';
												|en = 'Commission debt'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета комиссии по кредитам и займам выданным';
																|en = 'Ledger accounts of commission on issued credits and loans'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетыСДебиторами;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.КредитыИЗаймыВыданныеКомиссия, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.КредитыИЗаймыВыданные;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Процентная задолженность';
												|en = 'Interest on debt'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета начисленных процентов  по кредитам и займам выданным';
																|en = 'Ledger accounts of charged interest on issued credits and loans'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетыСДебиторами;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.КредитыИЗаймыВыданныеПроценты, ОписаниеОбъектаУчета);
	
	#КонецОбласти
	
	#Область КредитыИЗаймыПолученные
	
	РеквизитРасчетыСКредиторами = Метаданные.Справочники.ГруппыФинансовогоУчетаРасчетов.Реквизиты.РасчетыСКредиторами.Имя;
	ОтборГруппФинансовогоУчетаРасчетыСКредиторами = Новый Структура(РеквизитРасчетыСКредиторами, Истина);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.КредитыИЗаймыПолученные;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Основной долг';
												|en = 'Principal debt'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета основного долга по по кредитам и займам полученным';
																|en = 'Ledger accounts of principal debt on received credits and loans'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетыСКредиторами;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.КредитыИЗаймыПолученныеДолг, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.КредитыИЗаймыПолученные;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Задолженность по комиссии';
												|en = 'Commission debt'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета комиссии по кредитам и займам полученным';
																|en = 'Ledger accounts of commission on received credits and loans'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетыСКредиторами;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.КредитыИЗаймыПолученныеКомиссия, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.КредитыИЗаймыПолученные;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Процентная задолженность';
												|en = 'Interest on debt'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета начисленных процентов  по кредитам и займам полученным';
																|en = 'Ledger accounts of accrued interest on received credits and loans'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетыСКредиторами;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.КредитыИЗаймыПолученныеПроценты, ОписаниеОбъектаУчета);
	
	#КонецОбласти
	
	#Область РасчетыССотрудниками
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыССотрудниками;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'По заработной плате';
												|en = 'Payroll'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов с сотрудниками по зарплате';
																|en = 'Ledger accounts of employee AR/AP for payroll'");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РасчетыПоЗаработнойПлате, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыССотрудниками;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'С подотчетниками';
												|en = 'With advance holders'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов с подотчетными лицами';
																|en = 'Ledger accounts of AR/AP accounting for advance holders'");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РасчетыСПодотчетнымиЛицами, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасчетыССотрудниками;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Расчеты по выданным займам';
												|en = 'AR/AP accounting for loans issued'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов с сотрудниками по займам';
																|en = 'Ledger accounts of employee AR/AP for loans'");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РасчетыПоЗаймамСотрудникам, ОписаниеОбъектаУчета);
	
	#КонецОбласти
	
	#Область РасходнаяАренда
	
	РеквизитРасчетыСАрендодателями = Метаданные.Справочники.ГруппыФинансовогоУчетаРасчетов.Реквизиты.РасчетыСАрендодателями.Имя;
	ОтборГруппФинансовогоУчетаРасчетыСАрендодателями = Новый Структура(РеквизитРасчетыСАрендодателями, Истина);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасходнаяАренда;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Обеспечительный платеж';
												|en = 'Security deposit'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов по обеспечительным платежам';
																|en = 'Ledger accounts of AR/AP accounting for security deposits'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетыСАрендодателями;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ОбеспечительныйПлатежПоАренде, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасходнаяАренда;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Услуги по аренде';
												|en = 'Rental services'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов по услугам аренды';
																|en = 'Ledger accounts of AR/AP accounting for rental services'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетыСАрендодателями;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.УслугиПоАренде, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасходнаяАренда;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Арендные обязательства';
												|en = 'Rental obligations'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов  по арендным  обязательствам';
																|en = 'Ledger accounts of AR/AP accounting for rental obligations'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетыСАрендодателями;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.АрендныеОбязательства, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасходнаяАренда;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Выкуп предмета аренды';
												|en = 'Rental object redemption'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов по выкупу предмета аренды';
																|en = 'Ledger accounts of rental buyback AR/AP'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетыСАрендодателями;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ВыкупнаяСтоимостьПоАренде, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасходнаяАренда;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Аванс за выкуп предмета аренды';
												|en = 'Prepayment for rental object redemption'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов по авансам за выкуп предмета аренды';
																|en = 'Ledger accounts of AR/AP for rental buyback prepayments'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетыСАрендодателями;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.АвансВыкупнойСтоимостиПоАренде, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасходнаяАренда;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Проценты по аренде';
												|en = 'Rental interest'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов по процентам по аренде';
																|en = 'Ledger accounts of AR/AP accounting for rental interest'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетыСАрендодателями;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ПроцентыПоАренде, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РасходнаяАренда;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'НДС по аренде';
												|en = 'Rental VAT'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов по НДС по аренде';
																|en = 'Ledger accounts of AR/AP accounting for rental VAT'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = ОтборГруппФинансовогоУчетаРасчетыСАрендодателями;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НДСПоАренде, ОписаниеОбъектаУчета);
	
	#КонецОбласти

	#Область ДоходнаяАренда
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДоходнаяАренда;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Арендные платежи';
												|en = 'Rental payments'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета арендных платежей по финансовой аренде';
																|en = 'Ledger accounts of rental payments for financial lease'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.АрендныеПлатежи, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДоходнаяАренда;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Негарантированная ликвидационная стоимость';
												|en = 'Non-guaranteed residual value'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета негарантированной ликвидационной стоимости';
																|en = 'Ledger accounts of non-guaranteed residual value'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НегарантированнаяЛиквидационнаяСтоимость, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДоходнаяАренда;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Проценты дисконтирования платежей';
												|en = 'Payment discounting interest'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета процентов дисконтирования арендных платежей';
																|en = 'Ledger accounts of rental payment discounting interest'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ПроцентыДисконтированияАрендныхПлатежей, ОписаниеОбъектаУчета);
	
	#КонецОбласти

	#Область НезавершенноеПроизводство
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НезавершенноеПроизводство;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Материальные затраты и работы';
												|en = 'Material costs and works'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета материалов и работ в незавершенном производстве';
																|en = 'Ledger accounts of materials and works in work-in-progress'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.МатериалыИРаботыВНезавершенномПроизводстве, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НезавершенноеПроизводство;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Трудозатраты';
												|en = 'Labor costs'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета трудозатрат в незавершенном производстве';
																|en = 'Ledger accounts of WIP labor costs'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ТрудозатратыВНезавершенномПроизводстве, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НезавершенноеПроизводство;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Прочие затраты';
												|en = 'Other expenses'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета прочих затрат в незавершенном производстве';
																|en = 'Ledger accounts of other expenses in work-in-progress'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ПостатейныеЗатратыВНезавершенномПроизводстве, ОписаниеОбъектаУчета);
	
	Если НастройкиПроводок.СпособУчетаНесобственныхЦенностей <> Перечисления.СпособыУчетаНесобственныхПодконтрольныхЦенностей.НеОтражаютсяНаСчетах
	   И НастройкиПроводок.СпособУчетаНесобственныхЦенностей <> Перечисления.СпособыУчетаНесобственныхПодконтрольныхЦенностей.ПустаяСсылка() Тогда
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НезавершенноеПроизводство;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Материалы принятые в переработку';
													|en = 'Materials received for subcontracting'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета материалов принятых в переработку в незавершенном производстве';
																	|en = 'Ledger accounts of materials for subcontracting in work-in-progress'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяВПереработкуВПроизводстве, ОписаниеОбъектаУчета);
		
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НезавершенноеПроизводство;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Товары принятые на хранение';
													|en = 'Vendor-managed inventory'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета товаров принятых на хранение в незавершенном производстве';
																	|en = 'Ledger accounts of vendor-managed inventory in work-in-progress'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяНаХранениеВПроизводстве, ОписаниеОбъектаУчета);
	КонецЕсли;
	
	#КонецОбласти

	#Область ДоходыИРасходы
	
	Если НастройкиПроводок.ВыручкаБезНДС = Ложь
	 ИЛИ НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДоходыИРасходы;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Выручка с НДС от продаж товаров и услуг';
													|en = 'Goods and service sales revenue including VAT'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета выручки от продаж товаров и услуг';
																	|en = 'Ledger accounts of revenue from sales of goods and services'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ВыручкаОтПродаж, ОписаниеОбъектаУчета);
	КонецЕсли;
	
	Если НастройкиПроводок.ВыручкаБезНДС = Истина
	 ИЛИ НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДоходыИРасходы;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Выручка от продаж товаров и услуг';
													|en = 'Revenue from sales of goods and services'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета выручки от продаж товаров и услуг';
																	|en = 'Ledger accounts of revenue from sales of goods and services'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ВыручкаОтПродажБезНДС, ОписаниеОбъектаУчета);
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДоходыИРасходы;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Себестоимость продаж товаров и услуг';
												|en = 'Cost of goods and services sold'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета себестоимости продаж товаров и услуг';
																|en = 'Ledger accounts of cost of goods and services sold'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.СебестоимостьПродаж, ОписаниеОбъектаУчета);
	
	Если НастройкиПроводок.ВыручкаБезНДС = Ложь
	 ИЛИ НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДоходыИРасходы;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Прочая выручка с НДС';
													|en = 'Other revenue including VAT'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета прочей выручки';
																	|en = 'Ledger accounts of other revenue'");
		ОписаниеОбъектаУчета.ОтборОбъектовНастройки = Новый Структура("Доходы", Истина);
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ПрочаяВыручка, ОписаниеОбъектаУчета);
	КонецЕсли;
	
	Если НастройкиПроводок.ВыручкаБезНДС = Истина
	 ИЛИ НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДоходыИРасходы;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Прочая выручка';
													|en = 'Revenue — Services and Assets'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета прочей выручки';
																	|en = 'Ledger accounts of other revenue'");
		ОписаниеОбъектаУчета.ОтборОбъектовНастройки = Новый Структура("Доходы", Истина);
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ПрочаяВыручкаБезНДС, ОписаниеОбъектаУчета);
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДоходыИРасходы;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Прочие расходы';
												|en = 'Other expenses'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета прочих расходов';
																|en = 'Ledger accounts of other expenses'");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = Новый Структура("Расходы", Истина);
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.Расходы, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДоходыИРасходы;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Прочие доходы';
												|en = 'Income'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета прочих доходов';
																|en = 'Ledger accounts of income'");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = Новый Структура("Доходы", Истина);
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ПрочиеДоходы, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДоходыИРасходы;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Закрытие доходов';
												|en = 'Close income'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета закрытия доходов от продолжающихся операций';
																|en = 'Ledger accounts of continuing operation income closing'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ЗакрытиеДоходовОтПродолжающихсяОпераций, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ДоходыИРасходы;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Закрытие расходов';
												|en = 'Close expenses'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета закрытия расходов от продолжающихся операций';
																|en = 'Ledger accounts of continuing operation expense closing'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ЗакрытиеРасходовОтПродолжающихсяОпераций, ОписаниеОбъектаУчета);
	
	#КонецОбласти
	
	#Область НДС
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НДС;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Входящий НДС';
												|en = 'Input VAT'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета входящего НДС';
																|en = 'Ledger accounts of input VAT'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогообложенияНДС");
	ОписаниеОбъектаУчета.ОтборОбъектовНастройки = Новый Структура("Ссылка", УчетНДСУП.ВидыДеятельностиНДС());
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"); 
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ВходящийНДС, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НДС;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Расчеты по НДС';
												|en = 'VAT AR/AP accounting'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов по НДС';
																|en = 'Ledger accounts of VAT AR/AP accounting'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов(); 
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РасчетыПоНДС, ОписаниеОбъектаУчета);
	
	Если НастройкиПроводок.ВыручкаБезНДС = Ложь
	 ИЛИ НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НДС;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'НДС с продаж товаров и услуг';
													|en = 'VAT on sales of goods and services'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета НДС с продаж товаров и услуг';
																	|en = 'Ledger accounts of VAT on sales of goods and services'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НДССПродаж, ОписаниеОбъектаУчета);
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НДС;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'НДС по отгузкам без перехода права собственности';
												|en = 'VAT on shipment without transfer of title to goods'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета НДС по отгрузкам без перехода права собственности';
																|en = 'Ledger accounts of VAT on shipment without transfer of title to goods'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НДСПоОтгрузкамБезПереходаПраваСобственности, ОписаниеОбъектаУчета);
	
	Если НастройкиПроводок.ВыручкаБезНДС = Ложь
	 ИЛИ НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НДС;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'НДС с прочих продаж';
													|en = 'VAT on other sales'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета НДС с прочих продаж';
																	|en = 'Ledger accounts of VAT on other sales'");
		ОписаниеОбъектаУчета.ОтборОбъектовНастройки = Новый Структура("Доходы", Истина);
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов");
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НДССПрочихДоходов, ОписаниеОбъектаУчета);
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НДС;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'НДС с полученных авансов';
												|en = 'VAT on prepayments from customer'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета НДС с полученных авансов';
																|en = 'Ledger accounts of VAT on prepayments from customer'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов(); 
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НДССАвансовПолученных, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.НДС;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'НДС с выплаченных авансов';
												|en = 'VAT on prepayments to vendor'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета НДС с выплаченных авансов';
																|en = 'Ledger accounts of VAT on prepayments to vendor'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов(); 
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.НДССАвансовВыданных, ОписаниеОбъектаУчета);

	#КонецОбласти

	#Область РезервыПодОбесценение
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РезервыПодОбесценение;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Запасов';
												|en = 'Inventory'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета резервов под обесценение материальных ценностей';
																|en = 'Ledger accounts of provisions for impairment of tangible assets'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РезервыПодОбесценениеЗапасов, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РезервыПодОбесценение;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Запасов переданных';
												|en = 'Transferred inventory'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета резервов под обесценение переданных материальных ценностей';
																|en = 'Ledger accounts of provisions for impairment of transferred tangible assets'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РезервыПодОбесценениеЗапасовПереданных, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РезервыПодОбесценение;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Запасов в цеховой кладовой';
												|en = 'Inventory in shop floor stockrooms'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета резервов под обесценение материальных ценностей в цеховых кладовых';
																|en = 'Ledger accounts of provisions for impairment of tangible assets in shop floor stockrooms'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РезервыПодОбесценениеЗапасовВЦеховойКладовой, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РезервыПодОбесценение;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Незавершенного производства';
												|en = 'Work-in-progress'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета резервов под обесценение материальных ценностей в незавершенном производстве';
																|en = 'Ledger accounts of provisions for impairment of tangible assets in work-in-progress'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РезервыПодОбесценениеНезавершенногоПроизводства, ОписаниеОбъектаУчета);
	
	#КонецОбласти

	#Область РезервыПоСомнительнымДолгам
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РезервыПоСомнительнымДолгам;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Резервы по сомнительным долгам';
												|en = 'Loss allowance'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета резервов по сомнительным долгам';
																|en = 'Ledger accounts of loss allowance'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РезервыПоСомнительнымДолгам, ОписаниеОбъектаУчета);
	
	#КонецОбласти

	#Область РезервыПредстоящихРасходов
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РезервыПредстоящихРасходов;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Резервы по предстоящим расходам';
												|en = 'Provisions'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета резервов по предстоящим расходам';
																|en = 'Ledger accounts of provisions'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.Резервы");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РезервыОценочныеОбязательства, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.РезервыПредстоящихРасходов;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Проценты дисконтирования резервов';
												|en = 'Provision discounting interest'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета процентов дисконтирования резервов';
																|en = 'Ledger accounts of provision discounting interest'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("СправочникСсылка.Резервы");
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ПроцентыДисконтированияРезервов, ОписаниеОбъектаУчета);
	
	#КонецОбласти

	#Область ПрочиеАктивыИОбязательства
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ПрочиеАктивыИОбязательства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Налоги и взносы';
												|en = 'Taxes and contributions'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов по налогам и взносам';
																|en = 'Ledger accounts of AR/AP accounting for taxes and contributions'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогов"); 
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов(); 
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РасчетыПоНалогамИВзносам, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ПрочиеАктивыИОбязательства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Внутрихозяйственные расчеты (расчеты с филиалами)';
												|en = 'Interbranch AR/AP (AR/AP accounting for branch offices)'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета внутрихозяйственных расчетов';
																|en = 'Ledger accounts of interbranch AR/AP'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ВнутрихозяйственныеРасчеты, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ПрочиеАктивыИОбязательства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Внутрихозяйственные расчеты по выделенному имуществу';
												|en = 'Interbranch AR/AP for allocated property'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета внутрихозяйственных расчетов по выделенному имуществу';
																|en = 'Ledger accounts of interbranch AR/AP for allocated property'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ВнутрихозяйственныеРасчетыПоВыделенномуИмуществу, ОписаниеОбъектаУчета);
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ПрочиеАктивыИОбязательства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Обязательства по неотфактурованным поставкам';
												|en = 'Liabilities for goods received not invoiced'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета обязательств по неотфактурованным поставкам';
																|en = 'Ledger accounts of liabilities for goods received not invoiced'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ОбязательстваПоНеотфактурованнымПоставкам, ОписаниеОбъектаУчета);
	
	Если НастройкиПроводок.ВариантФормированияПроводок = Неопределено
	 ИЛИ НастройкиПроводок.ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.СКорреспонденцией Тогда
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
		ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ПрочиеАктивыИОбязательства;
		ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Расчеты по взаимозачетам задолженности';
													|en = 'AR/AP accounting for AR/AP offset'");
		ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Счета учета расчетов по взаимозачетам задолженности';
																	|en = 'Ledger accounts of AR/AP accounting for AR/AP offset'");
		ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
		ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
		ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.РасчетыПоВзаимозачетамЗадолженности, ОписаниеОбъектаУчета);
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДляНастройкиФорм();
	ОписаниеОбъектаУчета.Группа = ГруппыОбъектовУчета.ПрочиеАктивыИОбязательства;
	ОписаниеОбъектаУчета.Представление = НСтр("ru = 'Ввод остатков';
												|en = 'Balance entry'");
	ОписаниеОбъектаУчета.ЗаголовокТаблицыНастройкиСчетов = НСтр("ru = 'Вспомогательные счета для ввода остатков';
																|en = 'Subaccounts for entering balance'");
	ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки = Неопределено;
	ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета = Новый ОписаниеТипов();
	ОписаниеОбъектовУчетаДляНастройкиФорм.Вставить(Перечисления.ОбъектыФинансовогоУчета.ВводОстатков, ОписаниеОбъектаУчета);

	#КонецОбласти
	
	МеждународныйУчетПоДаннымФинансовыхРегистровЛокализация.ДополнитьРасширенноеОписаниеОбъектовУчетаДляНастройки(
		ОписаниеОбъектовУчетаДляНастройкиФорм, ГруппыОбъектовУчета, НастройкиПроводок);
	
	#КонецОбласти
	
	КоличествоОбъектов = ОбъектыФинансовогоУчета.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоОбъектов Цикл
		ТекущийИндекс = КоличествоОбъектов - ОбратныйИндекс;
		СтрокаОбъектаУчета = ОбъектыФинансовогоУчета[ТекущийИндекс];
		
		РасширенноеОписаниеОбъекта = ОписаниеОбъектовУчетаДляНастройкиФорм[СтрокаОбъектаУчета.ОбъектУчета];
		
		Если РасширенноеОписаниеОбъекта <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаОбъектаУчета, РасширенноеОписаниеОбъекта);
		Иначе
			ОбъектыФинансовогоУчета.Удалить(СтрокаОбъектаУчета);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектыФинансовогоУчета.Индексы.Добавить("ОбъектУчета");
	
	Возврат ОбъектыФинансовогоУчета;
	
КонецФункции

// Возвращает представление объекта учета с группой. 
// Например, "Расчеты с клиентами - Долг".
//
// Параметры:
// 	ОбъектУчета - ПеречислениеСсылка.ОбъектыФинансовогоУчета - Объект, для которого надо получить расширенное представление
// 	РасширенноеОписаниеОбъектовУчета - см. РасширенноеОписаниеОбъектовУчетаДляНастройки
//
// Возвращаемое значение:
// 	Строка - 
Функция ПредставлениеОбъектаУчетаСГруппой(ОбъектУчета, РасширенноеОписаниеОбъектовУчета = Неопределено) Экспорт
	
	Если РасширенноеОписаниеОбъектовУчета = Неопределено Тогда
		РасширенноеОписаниеОбъектовУчета = РасширенноеОписаниеОбъектовУчетаДляНастройки();
	КонецЕсли;
	
	РасширенноеОписанияОбъектаУчета = РасширенноеОписаниеОбъектовУчета.Найти(ОбъектУчета, "ОбъектУчета");
	Если РасширенноеОписанияОбъектаУчета <> Неопределено Тогда
		Результат = РасширенноеОписанияОбъектаУчета.Группа + " - " + РасширенноеОписанияОбъектаУчета.Представление;
	Иначе
		Результат = Строка(ОбъектУчета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает дерево объектов финансового учета для представления формах.
// 
// Параметры:
//  НастройкиПроводок - см. Справочники.НастройкиФормированияПроводокМеждународногоУчета.НастройкиФормированияПроводок
//  ТолькоСНастройкой - Булево - управляет составом объектов учета. Истина - только объекты учета с настройкой счетов, Ложь - все
// 
// Возвращаемое значение:
// 	ДеревоЗначений - Описание:
// * ОбъектУчета - ПеречислениеСсылка.ОбъектыФинансовогоУчета -
// * Представление - Строка -
// * ИсточникДанных - Строка -
// * НесобственныеЦенности - Булево -
// * ЗаголовокТаблицыНастройкиСчетов - Строка -
// * ОписаниеТиповОбъектНастройки - ОписаниеТипов -
// * ОписаниеТиповМестоУчета - ОписаниеТипов -
// * ЭтоГруппа - Булево -
//
Функция ДеревоОбъектовУчета(НастройкиПроводок, ТолькоСНастройкой = Истина) Экспорт
	
	ДеревоОбъектовУчета = Новый ДеревоЗначений();
	ДеревоОбъектовУчета.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ДеревоОбъектовУчета.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыФинансовогоУчета"));
	ДеревоОбъектовУчета.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ДеревоОбъектовУчета.Колонки.Добавить("ИсточникДанных", Новый ОписаниеТипов("Строка"));
	ДеревоОбъектовУчета.Колонки.Добавить("НесобственныеЦенности", Новый ОписаниеТипов("Булево"));
	ДеревоОбъектовУчета.Колонки.Добавить("ЗаголовокТаблицыНастройкиСчетов", Новый ОписаниеТипов("Строка"));
	ДеревоОбъектовУчета.Колонки.Добавить("ОписаниеТиповОбъектНастройки", Новый ОписаниеТипов("ОписаниеТипов"));
	ДеревоОбъектовУчета.Колонки.Добавить("ОписаниеТиповМестоУчета", Новый ОписаниеТипов("ОписаниеТипов"));
	ДеревоОбъектовУчета.Колонки.Добавить("ОтборОбъектовНастройки", Новый ОписаниеТипов("Структура,ФиксированныйМассив"));
	ДеревоОбъектовУчета.Колонки.Добавить("ВыделениеДолгосрочныхАктивовОбязательств", Новый ОписаниеТипов("Булево"));
	
	Если НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
		НастройкиПроводок.ВыручкаБезНДС = Истина;
	КонецЕсли;
	
	ОписаниеОбъектовУчета = РасширенноеОписаниеОбъектовУчетаДляНастройки(НастройкиПроводок);
	ОписаниеОбъектовУчета.Индексы.Добавить("Группа");
	
	Если НЕ ТолькоСНастройкой Тогда
		ДобавитьОписаниеОбъектовБезНастройки(ОписаниеОбъектовУчета, НастройкиПроводок);
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ГруппыОбъектовУчета(НастройкиПроводок) Цикл
		
		НоваяГруппа = ДеревоОбъектовУчета.Строки.Добавить();
		НоваяГруппа.ЭтоГруппа = Истина;
		НоваяГруппа.Представление = КлючИЗначение.Значение;
		НоваяГруппа.НесобственныеЦенности = Истина;
		
		РезультатОтбора = ОписаниеОбъектовУчета.НайтиСтроки(Новый Структура("Группа", КлючИЗначение.Значение));
		ДобавленныеОбъектыУчета = Новый Соответствие();
		Для каждого СтрокаТаблицы Из РезультатОтбора Цикл
			Если ДобавленныеОбъектыУчета[СтрокаТаблицы.ОбъектУчета] = Неопределено
				И ОбъектУчетаДоступенПоФункциональнымОпциям(СтрокаТаблицы) Тогда
				НоваяСтрокаДерева = НоваяГруппа.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаТаблицы);
				НоваяГруппа.НесобственныеЦенности = НоваяГруппа.НесобственныеЦенности И СтрокаТаблицы.НесобственныеЦенности;
				Если ТипЗнч(СтрокаТаблицы.ОтборОбъектовНастройки) = Тип("Массив") Тогда
					НоваяСтрокаДерева.ОтборОбъектовНастройки = Новый ФиксированныйМассив(СтрокаТаблицы.ОтборОбъектовНастройки);
				КонецЕсли;
				ДобавленныеОбъектыУчета.Вставить(НоваяСтрокаДерева.ОбъектУчета, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СтрокиДереваКУдалению = Новый Массив;
	Для каждого СтрокаДерева Из ДеревоОбъектовУчета.Строки Цикл
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
			СтрокиДереваКУдалению.Добавить(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаДерева Из СтрокиДереваКУдалению Цикл
		ДеревоОбъектовУчета.Строки.Удалить(СтрокаДерева);
	КонецЦикла;
	
	Возврат ДеревоОбъектовУчета;
	
КонецФункции

Функция ОбъектУчетаДоступенПоФункциональнымОпциям(ОписаниеОбъектаУчета) Экспорт
	
	Возврат РазделУчетаДоступенПоФункциональнойОпции(ОписаниеОбъектаУчета.ФункциональныеОпции);
	
КонецФункции

Функция ЗаголовокОбъектаНастройкиПоОписаниюТипов(ОписаниеТиповОбъектНастройки) Экспорт
	
	ПредставленияОбъектовНастройки = Новый Массив;
	Для каждого Тип Из ОписаниеТиповОбъектНастройки.Типы() Цикл
		МетаданныеОбъектаНастройки =  Метаданные.НайтиПоТипу(Тип); 
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъектаНастройки) И МетаданныеОбъектаНастройки.ПредставлениеОбъекта <> "" Тогда
			ПредставленияОбъектовНастройки.Добавить(МетаданныеОбъектаНастройки.ПредставлениеОбъекта);
		ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеОбъектаНастройки) И МетаданныеОбъектаНастройки.ПредставлениеОбъекта <> "" Тогда
			ПредставленияОбъектовНастройки.Добавить(МетаданныеОбъектаНастройки.ПредставлениеОбъекта);
		Иначе
			ПредставленияОбъектовНастройки.Добавить(МетаданныеОбъектаНастройки.Представление());
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ПредставленияОбъектовНастройки, ",");
	
КонецФункции

Функция ПараметрыВыбораОбъектаНастрйки(ОтборОбъектовНастройки) Экспорт
	
	Если ЗначениеЗаполнено(ОтборОбъектовНастройки)
	И ТипЗнч(ОтборОбъектовНастройки) = Тип("Структура") Тогда
		МассивПараметровВыбораОбъектаНастройки = Новый Массив;
		Для каждого КлючИЗначение Из ОтборОбъектовНастройки Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
				МассивЗначения = КлючИЗначение.Значение;
			Иначе
				МассивЗначения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючИЗначение.Значение);
			КонецЕсли;
			МассивПараметровВыбораОбъектаНастройки.Добавить(
				Новый ПараметрВыбора("Отбор." + КлючИЗначение.Ключ, Новый ФиксированныйМассив(МассивЗначения)));
		КонецЦикла;
		ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораОбъектаНастройки);
	Иначе
		ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	Возврат ПараметрыВыбора;
	
КонецФункции

Функция ЗаголовокМестаУчета(ОписаниеТиповМестоУчета) Экспорт
	
	ПредставленияМестаУчета = Новый Массив;
	Для каждого Тип Из ОписаниеТиповМестоУчета.Типы() Цикл
		МетаданныеМестаУчета =  Метаданные.НайтиПоТипу(Тип);
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеМестаУчета) И МетаданныеМестаУчета.ПредставлениеОбъекта <> "" Тогда
			ПредставленияМестаУчета.Добавить(МетаданныеМестаУчета.ПредставлениеОбъекта);
		ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеМестаУчета) И МетаданныеМестаУчета.ПредставлениеОбъекта <> "" Тогда
			ПредставленияМестаУчета.Добавить(МетаданныеМестаУчета.ПредставлениеОбъекта);
		Иначе
			ПредставленияМестаУчета.Добавить(МетаданныеМестаУчета.Представление());
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ПредставленияМестаУчета, ",");
	
КонецФункции

Функция ОписаниеОбъектаУчетаДляНастройкиФорм() Экспорт
	
	ОписаниеОбъекта = Новый Структура;
	
	ОписаниеОбъекта.Вставить("Группа", "");
	ОписаниеОбъекта.Вставить("Представление", "");
	ОписаниеОбъекта.Вставить("ЗаголовокТаблицыНастройкиСчетов", "");
	ОписаниеОбъекта.Вставить("ОписаниеТиповОбъектНастройки", Новый ОписаниеТипов());
	ОписаниеОбъекта.Вставить("ОтборОбъектовНастройки", Новый Структура);
	ОписаниеОбъекта.Вставить("ОписаниеТиповМестоУчета", Новый ОписаниеТипов());
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

Функция ГруппыОбъектовУчета(НастройкиПроводок) Экспорт
	
	ГруппыОбъектовУчета = Новый Структура;
	ГруппыОбъектовУчета.Вставить("ДережныеСредства", НСтр("ru = 'Денежные средства';
															|en = 'Cash'"));
	Если НастройкиПроводок.СпособУчетаНесобственныхЦенностей <> Перечисления.СпособыУчетаНесобственныхПодконтрольныхЦенностей.НеОтражаютсяНаСчетах
	   И НастройкиПроводок.СпособУчетаНесобственныхЦенностей <> Перечисления.СпособыУчетаНесобственныхПодконтрольныхЦенностей.ПустаяСсылка() Тогда
		ГруппыОбъектовУчета.Вставить("Номенклатура", НСтр("ru = 'Номенклатура собственная';
															|en = 'Own item'"));
		ГруппыОбъектовУчета.Вставить("НоменклатураПринятая", НСтр("ru = 'Номенклатура принятая';
																	|en = 'Received item'"));
	Иначе
		ГруппыОбъектовУчета.Вставить("Номенклатура", НСтр("ru = 'Номенклатура';
															|en = 'Items'"));
	КонецЕсли;
	ГруппыОбъектовУчета.Вставить("ОсновныеСредства", НСтр("ru = 'Основные средства';
															|en = 'Fixed assets'"));
	ГруппыОбъектовУчета.Вставить("НематериальныеАктивы", НСтр("ru = 'Нематериальные активы';
																|en = 'Intangible assets'"));
	ГруппыОбъектовУчета.Вставить("РасчетыСКлиентами", НСтр("ru = 'Расчеты с клиентами';
															|en = 'Customer AR/AP'"));
	ГруппыОбъектовУчета.Вставить("РасчетыСПоставщиками", НСтр("ru = 'Расчеты с поставщиками';
																|en = 'Vendor AR/AP'"));
	ГруппыОбъектовУчета.Вставить("КредитыИЗаймыВыданные", НСтр("ru = 'Депозиты, кредиты и займы выданные';
																|en = 'Deposits, credits and loans issued'"));
	ГруппыОбъектовУчета.Вставить("КредитыИЗаймыПолученные", НСтр("ru = 'Кредиты и займы полученные';
																|en = 'Received credits and loans'"));
	ГруппыОбъектовУчета.Вставить("РасчетыССотрудниками", НСтр("ru = 'Расчеты с сотрудниками';
																|en = 'AR/AP accounting for employees'"));
	ГруппыОбъектовУчета.Вставить("РасходнаяАренда", НСтр("ru = 'Получение в аренду';
														|en = 'Receive on lease'"));
	ГруппыОбъектовУчета.Вставить("ДоходнаяАренда", НСтр("ru = 'Передача в финансовую аренду';
														|en = 'Financial lease'"));
	ГруппыОбъектовУчета.Вставить("НезавершенноеПроизводство", НСтр("ru = 'Незавершенное производство';
																	|en = 'Work-in-progress'"));
	ГруппыОбъектовУчета.Вставить("ДоходыИРасходы", НСтр("ru = 'Доходы и расходы';
														|en = 'Income and expenses'"));
	ГруппыОбъектовУчета.Вставить("НДС", НСтр("ru = 'НДС';
											|en = 'VAT'"));
	ГруппыОбъектовУчета.Вставить("РезервыПодОбесценение", НСтр("ru = 'Резервы под обесценение';
																|en = 'Provisions for impairment'"));
	ГруппыОбъектовУчета.Вставить("РезервыПоОплатеТруда", НСтр("ru = 'Резервы по оплате труда';
																|en = 'Payroll funds'"));
	ГруппыОбъектовУчета.Вставить("РезервыПоСомнительнымДолгам", НСтр("ru = 'Резервы по сомнительным долгам';
																	|en = 'Loss allowance'"));
	ГруппыОбъектовУчета.Вставить("РезервыПредстоящихРасходов", НСтр("ru = 'Резервы предстоящих расходов';
																	|en = 'Provisions and contingent liabilities'"));
	ГруппыОбъектовУчета.Вставить("ПрочиеАктивыИОбязательства", НСтр("ru = 'Прочие активы и обязательства';
																	|en = 'Other assets and liabilities'"));
	
	Возврат ГруппыОбъектовУчета;
	
КонецФункции

Функция СтатьиАктивовПассивовСНастройками() Экспорт
	
	СтатьиАктивовПассивов = Новый Массив();
	
	Если ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбъектыФинансовогоУчета = ОписаниеОбъектовФинансовогоУчета();
		УстановитьПривилегированныйРежим(Ложь);
		
		СтруктураПоиска = Новый Структура("ИсточникДанных", Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя);
		ПрочиеАктивыИОбязательства = ОбъектыФинансовогоУчета.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаОбъектаУчета Из ПрочиеАктивыИОбязательства Цикл
			ЗаполнитьСтатьиИзНастроекОтбора(СтатьиАктивовПассивов, СтрокаОбъектаУчета.ОтборДанных);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтатьиАктивовПассивов;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивИсключаемыхЗначений = Новый Массив;
	
	ОбъектыФинансовогоУчета = ОписаниеОбъектовФинансовогоУчета();
	Для каждого СтрокаТаблицы Из ОбъектыФинансовогоУчета Цикл
		Если Не ОбъектУчетаДоступенПоФункциональнымОпциям(СтрокаТаблицы) Тогда
			МассивИсключаемыхЗначений.Добавить(СтрокаТаблицы.ОбъектУчета);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияУТ.ДоступныеДляВыбораЗначенияПеречисления(
		ПустаяСсылка().Метаданные().Имя,
		ДанныеВыбора,
		Параметры,
		МассивИсключаемыхЗначений);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазделУчетаДоступенПоФункциональнойОпции(ФункциональнаяОпция)
	
	ТипЗначенияФО = ТипЗнч(ФункциональнаяОпция);
	
	Если ТипЗначенияФО = Тип("Строка") Тогда
		РазделДоступенПоФО = ПолучитьФункциональнуюОпцию(ФункциональнаяОпция);
	ИначеЕсли ТипЗначенияФО = Тип("Массив") Тогда
		РазделДоступенПоФО = Ложь;
		Для Каждого ЭлементМассива Из ФункциональнаяОпция Цикл
			Если РазделУчетаДоступенПоФункциональнойОпции(ЭлементМассива) Тогда
				РазделДоступенПоФО = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗначенияФО = Тип("СписокЗначений") Тогда
		РазделДоступенПоФО = Истина;
		Для Каждого ЭлементСписка Из ФункциональнаяОпция Цикл
			Если НЕ РазделУчетаДоступенПоФункциональнойОпции(ЭлементСписка.Значение) Тогда
				РазделДоступенПоФО = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		РазделДоступенПоФО = Истина;
	КонецЕсли;
	
	Возврат РазделДоступенПоФО;
	
КонецФункции

Процедура ДобавитьКолонкиРасширенногоОписанияОбъектовУчета(ОбъектыФинансовогоУчета)
	
	Для каждого КлючИЗначение Из ОписаниеОбъектаУчетаДляНастройкиФорм() Цикл
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(КлючИЗначение.Значение));
		Если КлючИЗначение.Ключ = "ОтборОбъектовНастройки" Тогда
			МассивТипов.Добавить(Тип("Массив"));
		КонецЕсли;
		ОбъектыФинансовогоУчета.Колонки.Добавить(КлючИЗначение.Ключ, Новый ОписаниеТипов(МассивТипов));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОписаниеОбъектовБезНастройки(ОписаниеОбъектовУчета, НастройкиПроводок)
	
	ГруппыОбъектовУчета = ГруппыОбъектовУчета(НастройкиПроводок);
	ОбъектыФинансовогоУчета = ОписаниеОбъектовФинансовогоУчета(НастройкиПроводок);
	
	#Область ПрочиеАктивыИОбязательства
	
	ОбъектФинансовогоУчета = ОбъектыФинансовогоУчета.Найти(Перечисления.ОбъектыФинансовогоУчета.ПрочиеАктивыПассивы, "ОбъектУчета");
	Если ОбъектФинансовогоУчета <> Неопределено Тогда
		ОписаниеОбъекаУчета = ОписаниеОбъектовУчета.Добавить();
		ЗаполнитьЗначенияСвойств(ОписаниеОбъекаУчета, ОбъектФинансовогоУчета);
		ОписаниеОбъекаУчета.Группа = ГруппыОбъектовУчета.ПрочиеАктивыИОбязательства;
		ОписаниеОбъекаУчета.Представление = НСтр("ru = 'Прочие активы и пассивы';
												|en = 'Other assets and liabilities'");
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#Область ЗаполнениеСвойствОбъектовФинансовогоУчета

Процедура ЗаполнитьОбъектыУчетаДенежныеСредства(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаДенежныеСредстваВКассах = ОбъектыФинансовогоУчета.Добавить();
	СтрокаДенежныеСредстваВКассах.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ДенежныеСредстваВКассах;
	
	СтрокаДенежныеСредстваВКассахККМ = ОбъектыФинансовогоУчета.Добавить();
	СтрокаДенежныеСредстваВКассахККМ.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ДенежныеСредстваВКассахККМ;
	СтрокаДенежныеСредстваВКассахККМ.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьРозничныеПродажи.Имя;
	
	СтрокаДенежныеСредстваНаСчетах = ОбъектыФинансовогоУчета.Добавить();
	СтрокаДенежныеСредстваНаСчетах.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ДенежныеСредстваНаСчетах;
	
	СтрокаДенежныеСредстваВПути = ОбъектыФинансовогоУчета.Добавить();
	СтрокаДенежныеСредстваВПути.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ДенежныеСредстваВПути;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаНоменклатура(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	ПолеВыборкиГФУНоменклатуры = МеждународныйУчетПоДаннымФинансовыхРегистров.ПолеВыборкиГФУНоменклатуры();
	
	СтрокаНоменклатураНаСкладе = ОбъектыФинансовогоУчета.Добавить();
	СтрокаНоменклатураНаСкладе.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураНаСкладе;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах);
	СтрокаНоменклатураНаСкладе.ОтборДанных = ОтборДанных;
	СтрокаНоменклатураНаСкладе.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
	СтрокаНоменклатураНаСкладе.РесурсыУпр = РесурсыУчетаСобственнойНоменклатурыУпр();
	СтрокаНоменклатураНаСкладе.РесурсыРегл = РесурсыУчетаСобственнойНоменклатурыРегл();
	
	СтрокаНоменклатураВПути = ОбъектыФинансовогоУчета.Добавить();
	СтрокаНоменклатураВПути.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураВПути;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути);
	СтрокаНоменклатураВПути.ОтборДанных = ОтборДанных;
	СтрокаНоменклатураВПути.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
	СтрокаНоменклатураВПути.РесурсыУпр = РесурсыУчетаСобственнойНоменклатурыУпр();
	СтрокаНоменклатураВПути.РесурсыРегл = РесурсыУчетаСобственнойНоменклатурыРегл();
	
	СтрокаНоменклатураВЦеховойКладовой = ОбъектыФинансовогоУчета.Добавить();
	СтрокаНоменклатураВЦеховойКладовой.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураВЦеховойКладовой;
	СтрокаНоменклатураВЦеховойКладовой.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьПроизводство.Имя;
	ОтборДанных = Новый Соответствие();
	РазделыУчета = Новый Массив();
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранениеПереданныеПартнерам);
	ОтборДанных.Вставить("РазделУчета", РазделыУчета);
	ОтборДанных.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", Перечисления.ТипыМестХранения.Склад);
	СтрокаНоменклатураВЦеховойКладовой.ОтборДанных = ОтборДанных;
	СтрокаНоменклатураВЦеховойКладовой.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
	СтрокаНоменклатураВЦеховойКладовой.РесурсыУпр = РесурсыУчетаСобственнойНоменклатурыУпр();
	СтрокаНоменклатураВЦеховойКладовой.РесурсыРегл = РесурсыУчетаСобственнойНоменклатурыРегл();
	
	СтрокаНоменклатураОтгруженная = ОбъектыФинансовогоУчета.Добавить();
	СтрокаНоменклатураОтгруженная.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураОтгруженная;
	ОтборДанных = Новый Соответствие();
	РазделыУчета = Новый Массив();
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыВПути);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссиюВПути);
	ОтборДанных.Вставить("РазделУчета", РазделыУчета);
	СтрокаНоменклатураОтгруженная.ОтборДанных = ОтборДанных;
	СтрокаНоменклатураОтгруженная.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
	СтрокаНоменклатураОтгруженная.РесурсыУпр = РесурсыУчетаСобственнойНоменклатурыУпр();
	СтрокаНоменклатураОтгруженная.РесурсыРегл = РесурсыУчетаСобственнойНоменклатурыРегл();
	ПутиКДаннымСубконто = Новый Соответствие();
	ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "АналитикаУчетаНоменклатуры.Контрагент");
	СтрокаНоменклатураОтгруженная.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
	
	СтрокаНоменклатураПереданнаяВПереработку = ОбъектыФинансовогоУчета.Добавить();
	СтрокаНоменклатураПереданнаяВПереработку.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПереданнаяВПереработку;
	ФункциональныеОпции = Новый Массив();
	//++ Устарело_Переработка24
	ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоНаСтороне.Имя);
	//-- Устарело_Переработка24
	ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоНаСтороне2_5.Имя);
	СтрокаНоменклатураПереданнаяВПереработку.ФункциональныеОпции = ФункциональныеОпции;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеПереработчику);
	СтрокаНоменклатураПереданнаяВПереработку.ОтборДанных = ОтборДанных;
	СтрокаНоменклатураПереданнаяВПереработку.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
	СтрокаНоменклатураПереданнаяВПереработку.РесурсыУпр = РесурсыУчетаСобственнойНоменклатурыУпр();
	СтрокаНоменклатураПереданнаяВПереработку.РесурсыРегл = РесурсыУчетаСобственнойНоменклатурыРегл();
	
	СтрокаНоменклатураПереданнаяНаХранение = ОбъектыФинансовогоУчета.Добавить();
	СтрокаНоменклатураПереданнаяНаХранение.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПереданнаяНаХранение;
	СтрокаНоменклатураПереданнаяНаХранение.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи.Имя;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыПереданныеПартнерам);
	СтрокаНоменклатураПереданнаяНаХранение.ОтборДанных = ОтборДанных;
	СтрокаНоменклатураПереданнаяНаХранение.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
	СтрокаНоменклатураПереданнаяНаХранение.РесурсыУпр = РесурсыУчетаСобственнойНоменклатурыУпр();
	СтрокаНоменклатураПереданнаяНаХранение.РесурсыРегл = РесурсыУчетаСобственнойНоменклатурыРегл();
	
	СтрокаНоменклатураПереданнаяНаКомиссию = ОбъектыФинансовогоУчета.Добавить();
	СтрокаНоменклатураПереданнаяНаКомиссию.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПереданнаяНаКомиссию;
	СтрокаНоменклатураПереданнаяНаКомиссию.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьКомиссиюПриПродажах.Имя;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию);
	СтрокаНоменклатураПереданнаяНаКомиссию.ОтборДанных = ОтборДанных;
	СтрокаНоменклатураПереданнаяНаКомиссию.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
	СтрокаНоменклатураПереданнаяНаКомиссию.РесурсыУпр = РесурсыУчетаСобственнойНоменклатурыУпр();
	СтрокаНоменклатураПереданнаяНаКомиссию.РесурсыРегл = РесурсыУчетаСобственнойНоменклатурыРегл();
	ПутиКДаннымСубконто = Новый Соответствие();
	ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "АналитикаУчетаНоменклатуры.Контрагент");
	СтрокаНоменклатураПереданнаяНаКомиссию.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
	
	// Прочие разделы учета себестоимости, не описанные в отборах объектов учета, не должны считываться
	ПодавитьДанныеБезОтбораПоСоставуРесурсов(ОбъектыФинансовогоУчета,
		Неопределено,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя,
		РесурсыУчетаСобственнойНоменклатурыУпр(),
		РесурсыУчетаСобственнойНоменклатурыРегл());
	
	Если НастройкиПроводок.СпособУчетаНесобственныхЦенностей <> Перечисления.СпособыУчетаНесобственныхПодконтрольныхЦенностей.НеОтражаютсяНаСчетах
	   И НастройкиПроводок.СпособУчетаНесобственныхЦенностей <> Перечисления.СпособыУчетаНесобственныхПодконтрольныхЦенностей.ПустаяСсылка() Тогда
		СтрокаНоменклатураПринятаяВПереработкуНаСкладе = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНоменклатураПринятаяВПереработкуНаСкладе.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяВПереработкуНаСкладе;
		ФункциональныеОпции = Новый Массив();
		//++ Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья.Имя);
		//-- Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья2_5.Имя);
		СтрокаНоменклатураПринятаяВПереработкуНаСкладе.ФункциональныеОпции = ФункциональныеОпции;
		ОтборДанных = Новый Соответствие();
		ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку);
		ОтборДанных.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", Перечисления.ТипыМестХранения.Склад);
		ОтборДанных.Вставить(СтрЗаменить(
			"ВЫРАЗИТЬ(ПсевдонимИсточникаДанных.АналитикаУчетаНоменклатуры.МестоХранения КАК Справочник.Склады).ЦеховаяКладовая",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию()),
			Ложь);
		СтрокаНоменклатураПринятаяВПереработкуНаСкладе.ОтборДанных = ОтборДанных;
		СтрокаНоменклатураПринятаяВПереработкуНаСкладе.НесобственныеЦенности = Истина;
		СтрокаНоменклатураПринятаяВПереработкуНаСкладе.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
		СтрокаНоменклатураПринятаяВПереработкуНаСкладе.РесурсыУпр = РесурсыУчетаПринятойНоменклатурыУпр();
		СтрокаНоменклатураПринятаяВПереработкуНаСкладе.РесурсыРегл = РесурсыУчетаПринятойНоменклатурыРегл();
		ПутиКДаннымСубконто = Новый Соответствие();
		ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "ВидЗапасов.Контрагент");
		СтрокаНоменклатураПринятаяВПереработкуНаСкладе.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
		
		СтрокаНоменклатураПринятаяВПереработкуВКладовой = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНоменклатураПринятаяВПереработкуВКладовой.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяВПереработкуВЦеховойКладовой;
		ФункциональныеОпции = Новый Массив();
		//++ Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья.Имя);
		//-- Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья2_5.Имя);
		СтрокаНоменклатураПринятаяВПереработкуВКладовой.ФункциональныеОпции = ФункциональныеОпции;
		ОтборДанных = Новый Соответствие();
		ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку);
		ОтборДанных.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", Перечисления.ТипыМестХранения.Склад);
		ОтборДанных.Вставить(СтрЗаменить(
			"ВЫРАЗИТЬ(ПсевдонимИсточникаДанных.АналитикаУчетаНоменклатуры.МестоХранения КАК Справочник.Склады).ЦеховаяКладовая",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию()),
			Истина);
		СтрокаНоменклатураПринятаяВПереработкуВКладовой.ОтборДанных = ОтборДанных;
		СтрокаНоменклатураПринятаяВПереработкуВКладовой.НесобственныеЦенности = Истина;
		СтрокаНоменклатураПринятаяВПереработкуВКладовой.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
		СтрокаНоменклатураПринятаяВПереработкуВКладовой.РесурсыУпр = РесурсыУчетаПринятойНоменклатурыУпр();
		СтрокаНоменклатураПринятаяВПереработкуВКладовой.РесурсыРегл = РесурсыУчетаПринятойНоменклатурыРегл();
		ПутиКДаннымСубконто = Новый Соответствие();
		ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "ВидЗапасов.Контрагент");
		СтрокаНоменклатураПринятаяВПереработкуВКладовой.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
		
		СтрокаНоменклатураПринятаяВПереработкуУПартнеров = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНоменклатураПринятаяВПереработкуУПартнеров.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяВПереработкуПереданнаяПартнерам;
		ФункциональныеОпции = Новый Массив();
		//++ Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья.Имя);
		//-- Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья2_5.Имя);
		СтрокаНоменклатураПринятаяВПереработкуУПартнеров.ФункциональныеОпции = ФункциональныеОпции;
		ОтборДанных = Новый Соответствие();
		ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработкуПереданныеПартнерам);
		СтрокаНоменклатураПринятаяВПереработкуУПартнеров.ОтборДанных = ОтборДанных;
		СтрокаНоменклатураПринятаяВПереработкуУПартнеров.НесобственныеЦенности = Истина;
		СтрокаНоменклатураПринятаяВПереработкуУПартнеров.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
		СтрокаНоменклатураПринятаяВПереработкуУПартнеров.РесурсыУпр = РесурсыУчетаПринятойНоменклатурыУпр();
		СтрокаНоменклатураПринятаяВПереработкуУПартнеров.РесурсыРегл = РесурсыУчетаПринятойНоменклатурыРегл();
		ПутиКДаннымСубконто = Новый Соответствие();
		ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "ВидЗапасов.Контрагент");
		СтрокаНоменклатураПринятаяВПереработкуУПартнеров.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
		
		СтрокаНоменклатураПринятаяВПереработкуКСписанию = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНоменклатураПринятаяВПереработкуКСписанию.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяВПереработкуКСписанию;
		ФункциональныеОпции = Новый Массив();
		//++ Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья.Имя);
		//-- Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья2_5.Имя);
		СтрокаНоменклатураПринятаяВПереработкуКСписанию.ФункциональныеОпции = ФункциональныеОпции;
		ОтборДанных = Новый Соответствие();
		ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработкуКОформлениюСписания);
		СтрокаНоменклатураПринятаяВПереработкуКСписанию.ОтборДанных = ОтборДанных;
		СтрокаНоменклатураПринятаяВПереработкуКСписанию.НесобственныеЦенности = Истина;
		СтрокаНоменклатураПринятаяВПереработкуКСписанию.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
		СтрокаНоменклатураПринятаяВПереработкуКСписанию.РесурсыУпр = РесурсыУчетаПринятойНоменклатурыУпр();
		СтрокаНоменклатураПринятаяВПереработкуКСписанию.РесурсыРегл = РесурсыУчетаПринятойНоменклатурыРегл();
		ПутиКДаннымСубконто = Новый Соответствие();
		ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "ВидЗапасов.Контрагент");
		СтрокаНоменклатураПринятаяВПереработкуКСписанию.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
		
		СтрокаНоменклатураПринятаяНаХранениеНаСкладе = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНоменклатураПринятаяНаХранениеНаСкладе.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяНаХранениеНаСкладе;
		ФункциональныеОпции = Новый Массив();
		//++ Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья.Имя);
		//-- Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья2_5.Имя);
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьОтветственноеХранениеВПроцессеЗакупки.Имя);
		СтрокаНоменклатураПринятаяНаХранениеНаСкладе.ФункциональныеОпции = ФункциональныеОпции;
		ОтборДанных = Новый Соответствие();
		РазделыУчета = Новый Массив();
		РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение);
		РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи);
		ОтборДанных.Вставить("РазделУчета", РазделыУчета);
		ОтборДанных.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", Перечисления.ТипыМестХранения.Склад);
		ОтборДанных.Вставить(СтрЗаменить(
			"ВЫРАЗИТЬ(ПсевдонимИсточникаДанных.АналитикаУчетаНоменклатуры.МестоХранения КАК Справочник.Склады).ЦеховаяКладовая",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию()),
			Ложь);
		СтрокаНоменклатураПринятаяНаХранениеНаСкладе.ОтборДанных = ОтборДанных;
		СтрокаНоменклатураПринятаяНаХранениеНаСкладе.НесобственныеЦенности = Истина;
		СтрокаНоменклатураПринятаяНаХранениеНаСкладе.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
		СтрокаНоменклатураПринятаяНаХранениеНаСкладе.РесурсыУпр = РесурсыУчетаПринятойНоменклатурыУпр();
		СтрокаНоменклатураПринятаяНаХранениеНаСкладе.РесурсыРегл = РесурсыУчетаПринятойНоменклатурыРегл();
		ПутиКДаннымСубконто = Новый Соответствие();
		ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "ВидЗапасов.Контрагент");
		СтрокаНоменклатураПринятаяНаХранениеНаСкладе.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
		
		СтрокаНоменклатураПринятаяНаХранениеВКладовой = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНоменклатураПринятаяНаХранениеВКладовой.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяНаХранениеВЦеховойКладовой;
		ФункциональныеОпции = Новый Массив();
		//++ Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья.Имя);
		//-- Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья2_5.Имя);
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьОтветственноеХранениеВПроцессеЗакупки.Имя);
		СтрокаНоменклатураПринятаяНаХранениеВКладовой.ФункциональныеОпции = ФункциональныеОпции;
		ОтборДанных = Новый Соответствие();
		РазделыУчета = Новый Массив();
		РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение);
		РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи);
		ОтборДанных.Вставить("РазделУчета", РазделыУчета);
		ОтборДанных.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", Перечисления.ТипыМестХранения.Склад);
		ОтборДанных.Вставить(СтрЗаменить(
			"ВЫРАЗИТЬ(ПсевдонимИсточникаДанных.АналитикаУчетаНоменклатуры.МестоХранения КАК Справочник.Склады).ЦеховаяКладовая",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию()),
			Истина);
		СтрокаНоменклатураПринятаяНаХранениеВКладовой.ОтборДанных = ОтборДанных;
		СтрокаНоменклатураПринятаяНаХранениеВКладовой.НесобственныеЦенности = Истина;
		СтрокаНоменклатураПринятаяНаХранениеВКладовой.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
		СтрокаНоменклатураПринятаяНаХранениеВКладовой.РесурсыУпр = РесурсыУчетаПринятойНоменклатурыУпр();
		СтрокаНоменклатураПринятаяНаХранениеВКладовой.РесурсыРегл = РесурсыУчетаПринятойНоменклатурыРегл();
		ПутиКДаннымСубконто = Новый Соответствие();
		ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "ВидЗапасов.Контрагент");
		СтрокаНоменклатураПринятаяНаХранениеВКладовой.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
		
		СтрокаНоменклатураПринятаяНаХранениеУПартнеров = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНоменклатураПринятаяНаХранениеУПартнеров.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяНаХранениеПереданнаяПартнерам;
		ФункциональныеОпции = Новый Массив();
		//++ Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья.Имя);
		//-- Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья2_5.Имя);
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьОтветственноеХранениеВПроцессеЗакупки.Имя);
		СтрокаНоменклатураПринятаяНаХранениеУПартнеров.ФункциональныеОпции = ФункциональныеОпции;
		ОтборДанных = Новый Соответствие();
		РазделыУчета = Новый Массив();
		РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранениеПереданныеПартнерам);
		РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажиПереданныеПартнерам);
		ОтборДанных.Вставить("РазделУчета", РазделыУчета);
		СтрокаНоменклатураПринятаяНаХранениеУПартнеров.ОтборДанных = ОтборДанных;
		СтрокаНоменклатураПринятаяНаХранениеУПартнеров.НесобственныеЦенности = Истина;
		СтрокаНоменклатураПринятаяНаХранениеУПартнеров.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
		СтрокаНоменклатураПринятаяНаХранениеУПартнеров.РесурсыУпр = РесурсыУчетаПринятойНоменклатурыУпр();
		СтрокаНоменклатураПринятаяНаХранениеУПартнеров.РесурсыРегл = РесурсыУчетаПринятойНоменклатурыРегл();
		ПутиКДаннымСубконто = Новый Соответствие();
		ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "ВидЗапасов.Контрагент");
		СтрокаНоменклатураПринятаяНаХранениеУПартнеров.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
		
		СтрокаНоменклатураПринятаяНаХранениеКСписанию = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНоменклатураПринятаяНаХранениеКСписанию.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяНаХранениеКСписанию;
		ФункциональныеОпции = Новый Массив();
		//++ Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья.Имя);
		//-- Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья2_5.Имя);
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьОтветственноеХранениеВПроцессеЗакупки.Имя);
		СтрокаНоменклатураПринятаяНаХранениеКСписанию.ФункциональныеОпции = ФункциональныеОпции;
		ОтборДанных = Новый Соответствие();
		РазделыУчета = Новый Массив();
		РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранениеКОформлениюСписания);
		РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажиКОформлениюСписания);
		ОтборДанных.Вставить("РазделУчета", РазделыУчета);
		СтрокаНоменклатураПринятаяНаХранениеКСписанию.ОтборДанных = ОтборДанных;
		СтрокаНоменклатураПринятаяНаХранениеКСписанию.НесобственныеЦенности = Истина;
		СтрокаНоменклатураПринятаяНаХранениеКСписанию.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
		СтрокаНоменклатураПринятаяНаХранениеКСписанию.РесурсыУпр = РесурсыУчетаПринятойНоменклатурыУпр();
		СтрокаНоменклатураПринятаяНаХранениеКСписанию.РесурсыРегл = РесурсыУчетаПринятойНоменклатурыРегл();
		ПутиКДаннымСубконто = Новый Соответствие();
		ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "ВидЗапасов.Контрагент");
		СтрокаНоменклатураПринятаяНаХранениеКСписанию.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
		
		СтрокаНоменклатураПринятаяНаКомиссию = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНоменклатураПринятаяНаКомиссию.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяНаКомиссию;
		СтрокаНоменклатураПринятаяНаКомиссию.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьКомиссиюПриПродажах.Имя;
		ОтборДанных = Новый Соответствие();
		ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию);
		ОтборДанных.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", Перечисления.ТипыМестХранения.Склад);
		СтрокаНоменклатураПринятаяНаКомиссию.ОтборДанных = ОтборДанных;
		СтрокаНоменклатураПринятаяНаКомиссию.НесобственныеЦенности = Истина;
		СтрокаНоменклатураПринятаяНаКомиссию.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
		СтрокаНоменклатураПринятаяНаКомиссию.РесурсыУпр = РесурсыУчетаПринятойНоменклатурыУпр();
		СтрокаНоменклатураПринятаяНаКомиссию.РесурсыРегл = РесурсыУчетаПринятойНоменклатурыРегл();
		
		СтрокаНоменклатураПереданнаяНаСубкомиссию = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНоменклатураПереданнаяНаСубкомиссию.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПереданнаяНаСубкомиссию;
		СтрокаНоменклатураПереданнаяНаСубкомиссию.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьКомиссиюПриПродажах.Имя;
		ОтборДанных = Новый Соответствие();
		ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию);
		МестаХраненияНоменклатурыНаСубкомиссии = Новый Массив();
		МестаХраненияНоменклатурыНаСубкомиссии.Добавить(Перечисления.ТипыМестХранения.Партнер);
		МестаХраненияНоменклатурыНаСубкомиссии.Добавить(Перечисления.ТипыМестХранения.Организация);
		ОтборДанных.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", МестаХраненияНоменклатурыНаСубкомиссии);
		СтрокаНоменклатураПереданнаяНаСубкомиссию.ОтборДанных = ОтборДанных;
		СтрокаНоменклатураПереданнаяНаСубкомиссию.НесобственныеЦенности = Истина;
		СтрокаНоменклатураПереданнаяНаСубкомиссию.ПутьКДаннымОбъектНастройки = ПолеВыборкиГФУНоменклатуры;
		СтрокаНоменклатураПереданнаяНаСубкомиссию.РесурсыУпр = РесурсыУчетаПринятойНоменклатурыУпр();
		СтрокаНоменклатураПереданнаяНаСубкомиссию.РесурсыРегл = РесурсыУчетаПринятойНоменклатурыРегл();
		ПутиКДаннымСубконто = Новый Соответствие();
		ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "АналитикаУчетаНоменклатуры.МестоХранения");
		СтрокаНоменклатураПереданнаяНаСубкомиссию.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
	
		// Прочие разделы учета себестоимости, не описанные в отборах объектов учета, не должны считываться
		ФункциональныеОпцииНесобственныхЦенностей = Новый Массив();
		//++ Устарело_Переработка24
		ФункциональныеОпцииНесобственныхЦенностей.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья.Имя);
		//-- Устарело_Переработка24
		ФункциональныеОпцииНесобственныхЦенностей.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья2_5.Имя);
		ФункциональныеОпцииНесобственныхЦенностей.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьОтветственноеХранениеВПроцессеЗакупки.Имя);
		ФункциональныеОпцииНесобственныхЦенностей.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьКомиссиюПриПродажах.Имя);
		
		ПодавитьДанныеБезОтбораПоСоставуРесурсов(ОбъектыФинансовогоУчета,
			ФункциональныеОпцииНесобственныхЦенностей,
			Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя,
			РесурсыУчетаПринятойНоменклатурыУпр(),
			РесурсыУчетаПринятойНоменклатурыРегл());
	КонецЕсли;
	
	СтрокаПереданнаяВозвратнаяТара = ОбъектыФинансовогоУчета.Добавить();
	СтрокаПереданнаяВозвратнаяТара.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПереданнаяВозвратнаяТара;
	
	СтрокаПринятаяВозвратнаяТара = ОбъектыФинансовогоУчета.Добавить();
	СтрокаПринятаяВозвратнаяТара.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПринятаяВозвратнаяТара;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаОсновныеСредства(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаСтоимостьОС = ОбъектыФинансовогоУчета.Добавить();
	СтрокаСтоимостьОС.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.СтоимостьОС;
	СтрокаСтоимостьОС.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьВнеоборотныеАктивы2_4.Имя;
	СтрокаСтоимостьОС.РесурсыУпр.Добавить("Стоимость");
	СтрокаСтоимостьОС.РесурсыРегл.Добавить("СтоимостьРегл");
	СтрокаСтоимостьОС.РесурсыРегл.Добавить("СтоимостьЦФ");
	
	СтрокаАмортизацияОС = ОбъектыФинансовогоУчета.Добавить();
	СтрокаАмортизацияОС.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.АмортизацияОС;
	СтрокаАмортизацияОС.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьВнеоборотныеАктивы2_4.Имя;
	СтрокаАмортизацияОС.РесурсыРегл.Добавить("АмортизацияРегл");
	СтрокаАмортизацияОС.РесурсыРегл.Добавить("АмортизацияЦФ");
	
	СтрокаРезервПереоценкиСтоимостиОС = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРезервПереоценкиСтоимостиОС.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РезервПереоценкиСтоимостиОС;
	СтрокаРезервПереоценкиСтоимостиОС.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьВнеоборотныеАктивы2_4.Имя;
	СтрокаРезервПереоценкиСтоимостиОС.РесурсыУпр.Добавить("ПриростСтоимости");
	СтрокаРезервПереоценкиСтоимостиОС.РесурсыРегл.Добавить("ПриростСтоимостиРегл");
	
	СтрокаОбесценениеОС = ОбъектыФинансовогоУчета.Добавить();
	СтрокаОбесценениеОС.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ОбесценениеОС;
	СтрокаОбесценениеОС.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьОбесценениеВНА.Имя;
	ВидыВНА = Новый Массив();
	ВидыВНА.Добавить(Перечисления.ВидыВнеоборотныхАктивов.ОсновноеСредство);
	ВидыВНА.Добавить(Перечисления.ВидыВнеоборотныхАктивов.ИнвестиционноеИмущество);
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("ГруппаФинансовогоУчета.ВидАктива", ВидыВНА);
	СтрокаОбесценениеОС.ОтборДанных = ОтборДанных;
	
	СтрокаПереданныеОС = ОбъектыФинансовогоУчета.Добавить();
	СтрокаПереданныеОС.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПереданныеОС;
	СтрокаПереданныеОС.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьВнеоборотныеАктивы2_4.Имя;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.РеализацияОСБезПереходаПраваСобственности);
	СтрокаПереданныеОС.ОтборДанных = ОтборДанных;
	ПутиКДаннымСубконто = Новый Соответствие();
	ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ОсновныеСредства, "Аналитика");
	СтрокаПереданныеОС.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаНематериальныеАктивы(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаСтоимостьНМА = ОбъектыФинансовогоУчета.Добавить();
	СтрокаСтоимостьНМА.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.СтоимостьНМА;
	СтрокаСтоимостьНМА.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьВнеоборотныеАктивы2_4.Имя;
	СтрокаСтоимостьНМА.РесурсыУпр.Добавить("Стоимость");
	СтрокаСтоимостьНМА.РесурсыРегл.Добавить("СтоимостьРегл");
	СтрокаСтоимостьНМА.РесурсыРегл.Добавить("СтоимостьЦФ");
	
	СтрокаАмортизацияНМА = ОбъектыФинансовогоУчета.Добавить();
	СтрокаАмортизацияНМА.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.АмортизацияНМА;
	СтрокаАмортизацияНМА.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьВнеоборотныеАктивы2_4.Имя;
	СтрокаАмортизацияНМА.РесурсыРегл.Добавить("АмортизацияРегл");
	СтрокаАмортизацияНМА.РесурсыРегл.Добавить("АмортизацияЦФ");
	
	СтрокаРезеврПереоценкиСтоимостиНМА = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРезеврПереоценкиСтоимостиНМА.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РезервПереоценкиСтоимостиНМА;
	СтрокаРезеврПереоценкиСтоимостиНМА.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьВнеоборотныеАктивы2_4.Имя;
	СтрокаРезеврПереоценкиСтоимостиНМА.РесурсыУпр.Добавить("ПриростСтоимости");
	СтрокаРезеврПереоценкиСтоимостиНМА.РесурсыРегл.Добавить("ПриростСтоимостиРегл");
	
	СтрокаОбесценениеНМА = ОбъектыФинансовогоУчета.Добавить();
	СтрокаОбесценениеНМА.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ОбесценениеНМА;
	СтрокаОбесценениеНМА.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьОбесценениеВНА.Имя;
	ВидыВНА = Новый Массив();
	ВидыВНА.Добавить(Перечисления.ВидыВнеоборотныхАктивов.НМА);
	ВидыВНА.Добавить(Перечисления.ВидыВнеоборотныхАктивов.НИОКР);
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("ГруппаФинансовогоУчета.ВидАктива", ВидыВНА);
	СтрокаОбесценениеНМА.ОтборДанных = ОтборДанных;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаРасчетыСКлиентами(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаАвансыПолученныеОтКлиентов = ОбъектыФинансовогоУчета.Добавить();
	СтрокаАвансыПолученныеОтКлиентов.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.АвансыПолученныеОтКлиентов;
	СтрокаАвансыПолученныеОтКлиентов.РесурсыУпр.Добавить("ПредоплатаУпр");
	СтрокаАвансыПолученныеОтКлиентов.РесурсыРегл.Добавить("ПредоплатаРегл");
	СтрокаАвансыПолученныеОтКлиентов.РесурсыВал.Добавить("Предоплата");
	
	СтрокаЗадолженностьКлиентов = ОбъектыФинансовогоУчета.Добавить();
	СтрокаЗадолженностьКлиентов.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов;
	СтрокаЗадолженностьКлиентов.РесурсыУпр.Добавить("ДолгУпр");
	СтрокаЗадолженностьКлиентов.РесурсыРегл.Добавить("ДолгРегл");
	СтрокаЗадолженностьКлиентов.РесурсыВал.Добавить("Долг");
	
	СтрокаПодарочныеСертификаты = ОбъектыФинансовогоУчета.Добавить();
	СтрокаПодарочныеСертификаты.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПодарочныеСертификаты;
	
	Если НастройкиПроводок.ВариантФормированияПроводок = Неопределено
	 ИЛИ НастройкиПроводок.ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.СКорреспонденцией Тогда
		СтрокаРасчетыСРозничнымиПокупателями = ОбъектыФинансовогоУчета.Добавить();
		СтрокаРасчетыСРозничнымиПокупателями.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РасчетыСРозничнымиПокупателями;
	КонецЕсли;
	
	СтрокаОбязательстваПередКомитентомПоЗакупкам = ОбъектыФинансовогоУчета.Добавить();
	СтрокаОбязательстваПередКомитентомПоЗакупкам.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ОбязательстваПередКомитентомПоЗакупкам;
	СтрокаОбязательстваПередКомитентомПоЗакупкам.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьОказаниеАгентскихУслугПриЗакупке.Имя;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаРасчетыСПоставщиками(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаАвансыВыданныеПоставщикам = ОбъектыФинансовогоУчета.Добавить();
	СтрокаАвансыВыданныеПоставщикам.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам;
	СтрокаАвансыВыданныеПоставщикам.РесурсыУпр.Добавить("ПредоплатаУпр");
	СтрокаАвансыВыданныеПоставщикам.РесурсыРегл.Добавить("ПредоплатаРегл");
	СтрокаАвансыВыданныеПоставщикам.РесурсыВал.Добавить("Предоплата");
	
	СтрокаЗадолженностьПередПоставщиками = ОбъектыФинансовогоУчета.Добавить();
	СтрокаЗадолженностьПередПоставщиками.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками;
	СтрокаЗадолженностьПередПоставщиками.РесурсыУпр.Добавить("ДолгУпр");
	СтрокаЗадолженностьПередПоставщиками.РесурсыРегл.Добавить("ДолгРегл");
	СтрокаЗадолженностьПередПоставщиками.РесурсыВал.Добавить("Долг");
	
	СтрокаБилетыИБронирование = ОбъектыФинансовогоУчета.Добавить();
	СтрокаБилетыИБронирование.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.БилетыИБронирование;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("ОбъектРасчетов.ГруппаФинансовогоУчета.РасчетыПоБронированию", Истина);
	СтрокаБилетыИБронирование.ОтборДанных = ОтборДанных;
	СтрокаБилетыИБронирование.РесурсыУпр.Добавить("ПредоплатаУпр");
	СтрокаБилетыИБронирование.РесурсыРегл.Добавить("ПредоплатаРегл");
	СтрокаБилетыИБронирование.РесурсыВал.Добавить("Предоплата");
	
	СтрокаБилетыИБронирование = ОбъектыФинансовогоУчета.Добавить();
	СтрокаБилетыИБронирование.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.БилетыИБронирование;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("ОбъектРасчетов.ГруппаФинансовогоУчета.РасчетыПоБронированию", Истина);
	СтрокаБилетыИБронирование.ОтборДанных = ОтборДанных;
	СтрокаБилетыИБронирование.РесурсыУпр.Добавить("ДолгУпр");
	СтрокаБилетыИБронирование.РесурсыРегл.Добавить("ДолгРегл");
	СтрокаБилетыИБронирование.РесурсыВал.Добавить("Долг");
	
	СтрокаРасходыДисконтирования = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРасходыДисконтирования.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПроцентныеРасходыДисконтирования;
	
	СтрокаОбязательстваПередКомитентомПоРеализованнымТоварам = ОбъектыФинансовогоУчета.Добавить();
	СтрокаОбязательстваПередКомитентомПоРеализованнымТоварам.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ОбязательстваПередКомитентомПоРеализованнымТоварам;
	СтрокаОбязательстваПередКомитентомПоРеализованнымТоварам.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьКомиссиюПриЗакупках.Имя;
	ПутиКДаннымСубконто = Новый Соответствие();
	ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "ВидЗапасов.Контрагент");
	СтрокаОбязательстваПередКомитентомПоРеализованнымТоварам.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
	
	СтрокаОбязательстваПередПринципаломПоРеализованнымУслугам = ОбъектыФинансовогоУчета.Добавить();
	СтрокаОбязательстваПередПринципаломПоРеализованнымУслугам.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ОбязательстваПередПринципаломПоРеализованнымУслугам;
	СтрокаОбязательстваПередПринципаломПоРеализованнымУслугам.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьПродажуАгентскихУслуг.Имя;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаКредитыИЗаймыВыданные(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	ХарактерыДоговоров = Новый Массив();
	ХарактерыДоговоров.Добавить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный);
	ХарактерыДоговоров.Добавить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Депозит);
	
	СтрокаКредитыИЗаймыВыданныеДолг = ОбъектыФинансовогоУчета.Добавить();
	СтрокаКредитыИЗаймыВыданныеДолг.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.КредитыИЗаймыВыданныеДолг;
	СтрокаКредитыИЗаймыВыданныеДолг.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьДоговорыКредитовИДепозитов.Имя;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Договор.ХарактерДоговора", ХарактерыДоговоров);
	ОтборДанных.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг);
	СтрокаКредитыИЗаймыВыданныеДолг.ОтборДанных = ОтборДанных;
	
	СтрокаКредитыИЗаймыВыданныеКомиссия = ОбъектыФинансовогоУчета.Добавить();
	СтрокаКредитыИЗаймыВыданныеКомиссия.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.КредитыИЗаймыВыданныеКомиссия;
	СтрокаКредитыИЗаймыВыданныеКомиссия.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьДоговорыКредитовИДепозитов.Имя;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Договор.ХарактерДоговора", ХарактерыДоговоров);
	ОтборДанных.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Комиссия);
	СтрокаКредитыИЗаймыВыданныеКомиссия.ОтборДанных = ОтборДанных;
	
	СтрокаКредитыИЗаймыВыданныеПроценты = ОбъектыФинансовогоУчета.Добавить();
	СтрокаКредитыИЗаймыВыданныеПроценты.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.КредитыИЗаймыВыданныеПроценты;
	СтрокаКредитыИЗаймыВыданныеПроценты.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьДоговорыКредитовИДепозитов.Имя;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Договор.ХарактерДоговора", ХарактерыДоговоров);
	ОтборДанных.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты);
	СтрокаКредитыИЗаймыВыданныеПроценты.ОтборДанных = ОтборДанных;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаКредитыИЗаймыПолученные(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаКредитыИЗаймыПолученныеДолг = ОбъектыФинансовогоУчета.Добавить();
	СтрокаКредитыИЗаймыПолученныеДолг.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.КредитыИЗаймыПолученныеДолг;
	СтрокаКредитыИЗаймыПолученныеДолг.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьДоговорыКредитовИДепозитов.Имя;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Договор.ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм);
	ОтборДанных.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг);
	СтрокаКредитыИЗаймыПолученныеДолг.ОтборДанных = ОтборДанных;
	
	СтрокаКредитыИЗаймыПолученныеКомиссия = ОбъектыФинансовогоУчета.Добавить();
	СтрокаКредитыИЗаймыПолученныеКомиссия.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.КредитыИЗаймыПолученныеКомиссия;
	СтрокаКредитыИЗаймыПолученныеКомиссия.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьДоговорыКредитовИДепозитов.Имя;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Договор.ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм);
	ОтборДанных.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Комиссия);
	СтрокаКредитыИЗаймыПолученныеКомиссия.ОтборДанных = ОтборДанных;
	
	СтрокаКредитыИЗаймыПолученныеПроценты = ОбъектыФинансовогоУчета.Добавить();
	СтрокаКредитыИЗаймыПолученныеПроценты.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.КредитыИЗаймыПолученныеПроценты;
	СтрокаКредитыИЗаймыПолученныеПроценты.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьДоговорыКредитовИДепозитов.Имя;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Договор.ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм);
	ОтборДанных.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты);
	СтрокаКредитыИЗаймыПолученныеПроценты.ОтборДанных = ОтборДанных;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаРасчетыССотрудниками(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаРасчетыПоЗаработнойПлате = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРасчетыПоЗаработнойПлате.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РасчетыПоЗаработнойПлате;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда);
	СтрокаРасчетыПоЗаработнойПлате.ОтборДанных = ОтборДанных;
	
	СтрокаРасчетыСПодотчетнымиЛицами = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРасчетыСПодотчетнымиЛицами.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РасчетыСПодотчетнымиЛицами;
	
	СтрокаРасчетыПоЗаймамСотрудникам = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРасчетыПоЗаймамСотрудникам.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РасчетыПоЗаймамСотрудникам;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗаймыВыданные);
	СтрокаРасчетыПоЗаймамСотрудникам.ОтборДанных = ОтборДанных;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаРасходнаяАренда(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаОбеспечительныйПлатежПоАренде = ОбъектыФинансовогоУчета.Добавить();
	СтрокаОбеспечительныйПлатежПоАренде.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ОбеспечительныйПлатежПоАренде;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Договор.ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Аренда);
	ОтборДанных.Вставить("ТипСуммы", Перечисления.ТипыПлатежейПоАренде.ОбеспечительныйПлатеж);
	СтрокаОбеспечительныйПлатежПоАренде.ОтборДанных = ОтборДанных;
	
	СтрокаУслугиПоАренде = ОбъектыФинансовогоУчета.Добавить();
	СтрокаУслугиПоАренде.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.УслугиПоАренде;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Договор.ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Аренда);
	ОтборДанных.Вставить("ТипСуммы", Перечисления.ТипыПлатежейПоАренде.УслугаПоАренде);
	СтрокаУслугиПоАренде.ОтборДанных = ОтборДанных;
	
	СтрокаАрендныеОбязательства = ОбъектыФинансовогоУчета.Добавить();
	СтрокаАрендныеОбязательства.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.АрендныеОбязательства;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Договор.ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Аренда);
	ОтборДанных.Вставить("ТипСуммы", Перечисления.ТипыПлатежейПоАренде.АрендныеОбязательства);
	СтрокаАрендныеОбязательства.ОтборДанных = ОтборДанных;
	
	СтрокаВыкупнаяСтоимостьПоАренде = ОбъектыФинансовогоУчета.Добавить();
	СтрокаВыкупнаяСтоимостьПоАренде.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ВыкупнаяСтоимостьПоАренде;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Договор.ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Аренда);
	ОтборДанных.Вставить("ТипСуммы", Перечисления.ТипыПлатежейПоАренде.ВыкупнаяСтоимость);
	СтрокаВыкупнаяСтоимостьПоАренде.ОтборДанных = ОтборДанных;
	
	СтрокаАвансВыкупнойСтоимостиПоАренде = ОбъектыФинансовогоУчета.Добавить();
	СтрокаАвансВыкупнойСтоимостиПоАренде.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.АвансВыкупнойСтоимостиПоАренде;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Договор.ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Аренда);
	ОтборДанных.Вставить("ТипСуммы", Перечисления.ТипыПлатежейПоАренде.ВыкупнаяСтоимостьАванс);
	СтрокаАвансВыкупнойСтоимостиПоАренде.ОтборДанных = ОтборДанных;
	
	СтрокаПроцентыПоАренде = ОбъектыФинансовогоУчета.Добавить();
	СтрокаПроцентыПоАренде.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПроцентыПоАренде;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Договор.ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Аренда);
	ОтборДанных.Вставить("ТипСуммы", Перечисления.ТипыПлатежейПоАренде.Проценты);
	СтрокаПроцентыПоАренде.ОтборДанных = ОтборДанных;
	
	СтрокаНДСПоАренде = ОбъектыФинансовогоУчета.Добавить();
	СтрокаНДСПоАренде.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НДСПоАренде;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Договор.ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Аренда);
	ОтборДанных.Вставить("ТипСуммы", Перечисления.ТипыПлатежейПоАренде.НДС);
	СтрокаНДСПоАренде.ОтборДанных = ОтборДанных;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаДоходнаяАренда(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаАрендныеПлатежи = ОбъектыФинансовогоУчета.Добавить();
	СтрокаАрендныеПлатежи.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.АрендныеПлатежи;
	СтрокаАрендныеПлатежи.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользуетсяПередачаВАрендуСубарендуПоФСБУ25.Имя;
	СтрокаАрендныеПлатежи.РесурсыУпр.Добавить("АрендныеПлатежиУпр");
	СтрокаАрендныеПлатежи.РесурсыРегл.Добавить("АрендныеПлатежиРегл");
	СтрокаАрендныеПлатежи.РесурсыВал.Добавить("АрендныеПлатежи");
	ПутиКДаннымСубконто = Новый Соответствие();
	ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "Договор.Контрагент");
	СтрокаАрендныеПлатежи.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
	
	СтрокаНегарантированнаяЛиквидационнаяСтоимость = ОбъектыФинансовогоУчета.Добавить();
	СтрокаНегарантированнаяЛиквидационнаяСтоимость.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НегарантированнаяЛиквидационнаяСтоимость;
	СтрокаНегарантированнаяЛиквидационнаяСтоимость.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользуетсяПередачаВАрендуСубарендуПоФСБУ25.Имя;
	СтрокаНегарантированнаяЛиквидационнаяСтоимость.РесурсыУпр.Добавить("НГЛСУпр");
	СтрокаНегарантированнаяЛиквидационнаяСтоимость.РесурсыРегл.Добавить("НГЛСРегл");
	СтрокаНегарантированнаяЛиквидационнаяСтоимость.РесурсыВал.Добавить("0");
	ПутиКДаннымСубконто = Новый Соответствие();
	ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "Договор.Контрагент");
	СтрокаНегарантированнаяЛиквидационнаяСтоимость.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
	
	СтрокаПроцентыДисконтированияАрендныхПлатежей = ОбъектыФинансовогоУчета.Добавить();
	СтрокаПроцентыДисконтированияАрендныхПлатежей.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПроцентыДисконтированияАрендныхПлатежей;
	СтрокаПроцентыДисконтированияАрендныхПлатежей.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользуетсяПередачаВАрендуСубарендуПоФСБУ25.Имя;
	СтрокаПроцентыДисконтированияАрендныхПлатежей.РесурсыУпр.Добавить("ПроцентныйДисконтУпр");
	СтрокаПроцентыДисконтированияАрендныхПлатежей.РесурсыРегл.Добавить("ПроцентныйДисконтРегл");
	СтрокаПроцентыДисконтированияАрендныхПлатежей.РесурсыВал.Добавить("ПроцентныйДисконт");
	ПутиКДаннымСубконто = Новый Соответствие();
	ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "Договор.Контрагент");
	СтрокаПроцентыДисконтированияАрендныхПлатежей.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаНезавершенноеПроизводство(ОбъектыФинансовогоУчета, НастройкиПроводок)

	МестаХраненияПроизводственныхЗатрат = Новый Массив();
	МестаХраненияПроизводственныхЗатрат.Добавить(Перечисления.ТипыМестХранения.ДоговорКонтрагента);
	МестаХраненияПроизводственныхЗатрат.Добавить(Перечисления.ТипыМестХранения.Организация);
	МестаХраненияПроизводственныхЗатрат.Добавить(Перечисления.ТипыМестХранения.Партнер);
	МестаХраненияПроизводственныхЗатрат.Добавить(Перечисления.ТипыМестХранения.Подразделение);
	
	СтрокаМатериалыВНезавершенномПроизводстве = ОбъектыФинансовогоУчета.Добавить();
	СтрокаМатериалыВНезавершенномПроизводстве.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.МатериалыИРаботыВНезавершенномПроизводстве;
	СтрокаМатериалыВНезавершенномПроизводстве.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьПроизводство.Имя;
	ГруппаОтборов = Новый Массив();
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство);
	ГруппаОтборов.Добавить(ОтборДанных);
	ОтборДанных = Новый Соответствие();
	РазделыУчета = Новый Массив();
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранениеПереданныеПартнерам);
	ОтборДанных.Вставить("РазделУчета", РазделыУчета);
	ОтборДанных.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", МестаХраненияПроизводственныхЗатрат);
	ГруппаОтборов.Добавить(ОтборДанных);
	СтрокаМатериалыВНезавершенномПроизводстве.ОтборДанных = ГруппаОтборов;
	СтрокаМатериалыВНезавершенномПроизводстве.ПутьКДаннымОбъектНастройки = "АналитикаФинансовогоУчета";
	СтрокаМатериалыВНезавершенномПроизводстве.РесурсыУпр = РесурсыУчетаСобственнойНоменклатурыУпр();
	СтрокаМатериалыВНезавершенномПроизводстве.РесурсыРегл = РесурсыУчетаСобственнойНоменклатурыРегл();
	
	СтрокаТрудозатратыВНезавершенномПроизводстве = ОбъектыФинансовогоУчета.Добавить();
	СтрокаТрудозатратыВНезавершенномПроизводстве.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ТрудозатратыВНезавершенномПроизводстве;
	СтрокаТрудозатратыВНезавершенномПроизводстве.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьПроизводство.Имя;
	
	СтрокаПостатейныеЗатратыВНезавершенномПроизводстве = ОбъектыФинансовогоУчета.Добавить();
	СтрокаПостатейныеЗатратыВНезавершенномПроизводстве.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПостатейныеЗатратыВНезавершенномПроизводстве;
	СтрокаПостатейныеЗатратыВНезавершенномПроизводстве.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьПроизводство.Имя;
	
	Если НастройкиПроводок.СпособУчетаНесобственныхЦенностей <> Перечисления.СпособыУчетаНесобственныхПодконтрольныхЦенностей.НеОтражаютсяНаСчетах
	   И НастройкиПроводок.СпособУчетаНесобственныхЦенностей <> Перечисления.СпособыУчетаНесобственныхПодконтрольныхЦенностей.ПустаяСсылка() Тогда
		СтрокаНоменклатураПринятаяВПереработку = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНоменклатураПринятаяВПереработку.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяВПереработкуВПроизводстве;
		ФункциональныеОпции = Новый Массив;
		//++ Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья.Имя);
		//-- Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья2_5.Имя);
		СтрокаНоменклатураПринятаяВПереработку.ФункциональныеОпции = ФункциональныеОпции;
		ОтборДанных = Новый Соответствие();
		ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку);
		ОтборДанных.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", МестаХраненияПроизводственныхЗатрат);
		СтрокаНоменклатураПринятаяВПереработку.ОтборДанных = ОтборДанных;
		СтрокаНоменклатураПринятаяВПереработку.НесобственныеЦенности = Истина;
		СтрокаНоменклатураПринятаяВПереработку.ПутьКДаннымОбъектНастройки = "АналитикаФинансовогоУчета";
		СтрокаНоменклатураПринятаяВПереработку.РесурсыУпр = РесурсыУчетаПринятойНоменклатурыУпр();
		СтрокаНоменклатураПринятаяВПереработку.РесурсыРегл = РесурсыУчетаПринятойНоменклатурыРегл();
		ПутиКДаннымСубконто = Новый Соответствие();
		ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "ВидЗапасов.Контрагент");
		СтрокаНоменклатураПринятаяВПереработку.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
		
		СтрокаНоменклатураПринятаяНаХранение = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНоменклатураПринятаяНаХранение.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НоменклатураПринятаяНаХранениеВПроизводстве;
		ФункциональныеОпции = Новый Массив();
		//++ Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья.Имя);
		//-- Устарело_Переработка24
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоИзДавальческогоСырья2_5.Имя);
		ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьОтветственноеХранениеВПроцессеЗакупки.Имя);
		СтрокаНоменклатураПринятаяНаХранение.ФункциональныеОпции = ФункциональныеОпции;
		ОтборДанных = Новый Соответствие();
		РазделыУчета = Новый Массив();
		РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение);
		РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи);
		ОтборДанных.Вставить("РазделУчета", РазделыУчета);
		ОтборДанных.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", МестаХраненияПроизводственныхЗатрат);
		СтрокаНоменклатураПринятаяНаХранение.НесобственныеЦенности = Истина;
		СтрокаНоменклатураПринятаяНаХранение.ОтборДанных = ОтборДанных;
		СтрокаНоменклатураПринятаяНаХранение.ПутьКДаннымОбъектНастройки = "АналитикаФинансовогоУчета";
		СтрокаНоменклатураПринятаяНаХранение.РесурсыУпр = РесурсыУчетаПринятойНоменклатурыУпр();
		СтрокаНоменклатураПринятаяНаХранение.РесурсыРегл = РесурсыУчетаПринятойНоменклатурыРегл();
		ПутиКДаннымСубконто = Новый Соответствие();
		ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "ВидЗапасов.Контрагент");
		СтрокаНоменклатураПринятаяНаХранение.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаДоходыИРасходы(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	Если НастройкиПроводок.ВыручкаБезНДС = Ложь
	 ИЛИ НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
		СтрокаВыручкаОтПродаж = ОбъектыФинансовогоУчета.Добавить();
		СтрокаВыручкаОтПродаж.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ВыручкаОтПродаж;
		СтрокаВыручкаОтПродаж.ВыражениеЭтоДебет = "&ЭтоСторно";
		СтрокаВыручкаОтПродаж.ВыражениеЭтоКредит = "НЕ &ЭтоСторно";
		СтрокаВыручкаОтПродаж.ПутьКДаннымИдентификаторФинЗаписи = СтрЗаменить(
			"ВЫБОР
			|		КОГДА ПсевдонимИсточникаДанных.ИсточникГФУРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
			|			ТОГДА ПсевдонимИсточникаДанных.ИсточникГФУРасчетов.УникальныйИдентификатор
			|		ИНАЧЕ ПсевдонимИсточникаДанных.ИдентификаторФинЗаписи
			|	КОНЕЦ",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию());
		СтрокаВыручкаОтПродаж.ПутьКДаннымИдентификаторСтроки = "ИдентификаторФинЗаписи";
		СтрокаВыручкаОтПродаж.РесурсыУпр.Добавить("СуммаВыручки");
		СтрокаВыручкаОтПродаж.РесурсыРегл.Добавить("СуммаВыручкиСНДСРегл");
		СтрокаВыручкаОтПродаж.УчетСНДС = Истина;
		СтрокаВыручкаОтПродаж.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя);
		Если НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
			ЗаполнитьПризнакиУчетаКорреспонденций(СтрокаВыручкаОтПродаж, "ВыручкаБезНДС", Ложь);
		КонецЕсли;
		
		СтрокаПрочаяВыручка = ОбъектыФинансовогоУчета.Добавить();
		СтрокаПрочаяВыручка.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПрочаяВыручка;
		СтрокаПрочаяВыручка.ВыражениеЭтоДебет = "&ЭтоСторно";
		СтрокаПрочаяВыручка.ВыражениеЭтоКредит = "НЕ &ЭтоСторно";
		СтрокаПрочаяВыручка.ПутьКДаннымИдентификаторФинЗаписи = СтрЗаменить(
			"ВЫБОР
			|		КОГДА ПсевдонимИсточникаДанных.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
			|			ТОГДА ПсевдонимИсточникаДанных.ОбъектРасчетов.УникальныйИдентификатор
			|		ИНАЧЕ ПсевдонимИсточникаДанных.ИдентификаторФинЗаписи
			|	КОНЕЦ",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию());
		СтрокаПрочаяВыручка.ПутьКДаннымИдентификаторСтроки = "ИдентификаторФинЗаписи";
		СтрокаПрочаяВыручка.УчетСНДС = Истина;
		СтрокаПрочаяВыручка.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя);
		СтрокаПрочаяВыручка.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам.Имя);
		СтрокаПрочаяВыручка.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя);
		Если НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
			ЗаполнитьПризнакиУчетаКорреспонденций(СтрокаПрочаяВыручка, "ВыручкаБезНДС", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиПроводок.ВыручкаБезНДС = Истина
	 ИЛИ НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
		СтрокаВыручкаОтПродажБезНДС = ОбъектыФинансовогоУчета.Добавить();
		СтрокаВыручкаОтПродажБезНДС.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ВыручкаОтПродажБезНДС;
		СтрокаВыручкаОтПродажБезНДС.ВыражениеЭтоДебет = "&ЭтоСторно";
		СтрокаВыручкаОтПродажБезНДС.ВыражениеЭтоКредит = "НЕ &ЭтоСторно";
		СтрокаВыручкаОтПродажБезНДС.ПутьКДаннымИдентификаторФинЗаписи = СтрЗаменить(
			"ВЫБОР
			|		КОГДА ПсевдонимИсточникаДанных.ИсточникГФУРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
			|			ТОГДА ПсевдонимИсточникаДанных.ИсточникГФУРасчетов.УникальныйИдентификатор
			|		ИНАЧЕ ПсевдонимИсточникаДанных.ИдентификаторФинЗаписи
			|	КОНЕЦ",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию());
		СтрокаВыручкаОтПродажБезНДС.ПутьКДаннымИдентификаторСтроки = "ИдентификаторФинЗаписи";
		СтрокаВыручкаОтПродажБезНДС.РесурсыУпр.Добавить("СуммаВыручкиБезНДС");
		СтрокаВыручкаОтПродажБезНДС.РесурсыРегл.Добавить("СуммаВыручкиРегл");
		СтрокаВыручкаОтПродажБезНДС.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя);
		Если НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
			ЗаполнитьПризнакиУчетаКорреспонденций(СтрокаВыручкаОтПродажБезНДС, "ВыручкаБезНДС", Истина);
		КонецЕсли;
		
		СтрокаПрочаяВыручкаБезНДС = ОбъектыФинансовогоУчета.Добавить();
		СтрокаПрочаяВыручкаБезНДС.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПрочаяВыручкаБезНДС;
		СтрокаПрочаяВыручкаБезНДС.ВыражениеЭтоДебет = "&ЭтоСторно";
		СтрокаПрочаяВыручкаБезНДС.ВыражениеЭтоКредит = "НЕ &ЭтоСторно";
		СтрокаПрочаяВыручкаБезНДС.ПутьКДаннымИдентификаторФинЗаписи = СтрЗаменить(
			"ВЫБОР
			|		КОГДА ПсевдонимИсточникаДанных.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
			|			ТОГДА ПсевдонимИсточникаДанных.ОбъектРасчетов.УникальныйИдентификатор
			|		ИНАЧЕ ПсевдонимИсточникаДанных.ИдентификаторФинЗаписи
			|	КОНЕЦ",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию());
		СтрокаПрочаяВыручкаБезНДС.ПутьКДаннымИдентификаторСтроки = "ИдентификаторФинЗаписи";
		СтрокаПрочаяВыручкаБезНДС.РесурсыУпр.Добавить("ВыручкаБезНДСУпр");
		СтрокаПрочаяВыручкаБезНДС.РесурсыРегл.Добавить("ВыручкаБезНДСРегл");
		СтрокаПрочаяВыручкаБезНДС.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя);
		СтрокаПрочаяВыручкаБезНДС.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам.Имя);
		СтрокаПрочаяВыручкаБезНДС.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя);
		Если НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
			ЗаполнитьПризнакиУчетаКорреспонденций(СтрокаПрочаяВыручкаБезНДС, "ВыручкаБезНДС", Истина);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаСебестоимостьПродаж = ОбъектыФинансовогоУчета.Добавить();
	СтрокаСебестоимостьПродаж.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.СебестоимостьПродаж;
	СтрокаСебестоимостьПродаж.ВыражениеЭтоДебет = "НЕ &ЭтоСторно";
	СтрокаСебестоимостьПродаж.ВыражениеЭтоКредит = "&ЭтоСторно";
	СтрокаСебестоимостьПродаж.РесурсыУпр.Добавить("СтоимостьУпр");
	СтрокаСебестоимостьПродаж.РесурсыУпр.Добавить("ДопРасходыУпр");
	СтрокаСебестоимостьПродаж.РесурсыУпр.Добавить("ТрудозатратыУпр");
	СтрокаСебестоимостьПродаж.РесурсыУпр.Добавить("ПостатейныеПостоянныеУпр");
	СтрокаСебестоимостьПродаж.РесурсыУпр.Добавить("ПостатейныеПеременныеУпр");
	СтрокаСебестоимостьПродаж.РесурсыУпр.Добавить("РасходыНаПродажуУпр");
	СтрокаСебестоимостьПродаж.РесурсыУпр.Добавить("РезервПодОбесценениеУпр");
	СтрокаСебестоимостьПродаж.РесурсыРегл.Добавить("СтоимостьРегл");
	СтрокаСебестоимостьПродаж.РесурсыРегл.Добавить("ДопРасходыРегл");
	СтрокаСебестоимостьПродаж.РесурсыРегл.Добавить("ТрудозатратыРегл");
	СтрокаСебестоимостьПродаж.РесурсыРегл.Добавить("ПостатейныеПостоянныеРегл");
	СтрокаСебестоимостьПродаж.РесурсыРегл.Добавить("ПостатейныеПеременныеРегл");
	СтрокаСебестоимостьПродаж.РесурсыРегл.Добавить("РасходыНаПродажуРегл");
	СтрокаСебестоимостьПродаж.РесурсыРегл.Добавить("РезервПодОбесценениеРегл");
	СтрокаСебестоимостьПродаж.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
	СтрокаСебестоимостьПродаж.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.Имя);
	СтрокаСебестоимостьПродаж.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя);
	СтрокаСебестоимостьПродаж.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.НДСПредъявленный.Имя);
	
	СтрокаРасходы = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРасходы.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.Расходы;
	
	СтрокаПрочиеДоходы = ОбъектыФинансовогоУчета.Добавить();
	СтрокаПрочиеДоходы.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПрочиеДоходы;
	
	СтрокаЗакрытиеДоходов = ОбъектыФинансовогоУчета.Добавить();
	СтрокаЗакрытиеДоходов.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ЗакрытиеДоходовОтПродолжающихсяОпераций;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки);
	ОтборДанных.Вставить("ДебетКредит", Перечисления.ВидыДвиженийПрочихАктивовПассивов.Кредит);
	СтрокаЗакрытиеДоходов.ОтборДанных = ОтборДанных;
	
	СтрокаЗакрытиеРасходов = ОбъектыФинансовогоУчета.Добавить();
	СтрокаЗакрытиеРасходов.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ЗакрытиеРасходовОтПродолжающихсяОпераций;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки);
	ОтборДанных.Вставить("ДебетКредит", Перечисления.ВидыДвиженийПрочихАктивовПассивов.Дебет);
	СтрокаЗакрытиеРасходов.ОтборДанных = ОтборДанных;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаНДС(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаВходящийНДС = ОбъектыФинансовогоУчета.Добавить();
	СтрокаВходящийНДС.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ВходящийНДС;
	СтрокаВходящийНДС.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьУчетНДС.Имя;
	СтрокаВходящийНДС.УчетНДС = Истина;
	
	СтрокаРасчетыПоНДС = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРасчетыПоНДС.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РасчетыПоНДС;
	СтрокаРасчетыПоНДС.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьУчетНДС.Имя;
	Если НастройкиПроводок.ВыручкаБезНДС = Истина Тогда
		СтрокаРасчетыПоНДС.ПутьКДаннымИдентификаторФинЗаписи = СтрЗаменить(
			"ВЫБОР
			|		КОГДА ПсевдонимИсточникаДанных.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
			|			ТОГДА ПсевдонимИсточникаДанных.ОбъектРасчетов.УникальныйИдентификатор
			|		ИНАЧЕ ПсевдонимИсточникаДанных.ИдентификаторФинЗаписи
			|	КОНЕЦ",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию());
		СтрокаРасчетыПоНДС.ПутьКДаннымИдентификаторСтроки = "ИдентификаторФинЗаписи";
	КонецЕсли;
	СтрокаРасчетыПоНДС.УчетНДС = Истина;
	
	СтрокаНДСОтгрузокБезПереходаПрава = ОбъектыФинансовогоУчета.Добавить();
	СтрокаНДСОтгрузокБезПереходаПрава.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НДСПоОтгрузкамБезПереходаПраваСобственности;
	СтрокаНДСОтгрузокБезПереходаПрава.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьУчетНДС.Имя;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.НДСПоОтгрузкамБезПереходаПраваСобственности);
	СтрокаНДСОтгрузокБезПереходаПрава.ОтборДанных = ОтборДанных;
	Если НастройкиПроводок.ВыручкаБезНДС = Истина Тогда
		СтрокаНДСОтгрузокБезПереходаПрава.ПутьКДаннымИдентификаторФинЗаписи = СтрЗаменить(
			"ВЫБОР
			|		КОГДА ПсевдонимИсточникаДанных.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
			|			ТОГДА ПсевдонимИсточникаДанных.ОбъектРасчетов.УникальныйИдентификатор
			|		ИНАЧЕ ПсевдонимИсточникаДанных.ИдентификаторФинЗаписи
			|	КОНЕЦ",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию());
		СтрокаНДСОтгрузокБезПереходаПрава.ПутьКДаннымНастройкаХозОперации = СтрЗаменить(
			"ВЫБОР
			|		КОГДА ПсевдонимИсточникаДанных.ДебетКредит = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет)
			|			ТОГДА ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
			|		КОГДА ТИПЗНАЧЕНИЯ(ПсевдонимИсточникаДанных.Регистратор) = ТИП(Документ.РеализацияУслугПрочихАктивов)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеНДСпоОтгрузкеТоваровВПути)
			|		ИНАЧЕ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
			|	КОНЕЦ",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию());
	КонецЕсли;
	СтрокаНДСОтгрузокБезПереходаПрава.УчетНДС = Истина;
	ПутиКДаннымСубконто = Новый Соответствие();
	ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "Аналитика");
	СтрокаНДСОтгрузокБезПереходаПрава.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
	
	Если НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
		СтрокаРасчетыПоНДС = ОбъектыФинансовогоУчета.Добавить();
		СтрокаРасчетыПоНДС.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РасчетыПоНДС;
		СтрокаРасчетыПоНДС.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьУчетНДС.Имя;
		СтрокаРасчетыПоНДС.ПутьКДаннымИдентификаторФинЗаписи = СтрЗаменить(
			"ВЫБОР
			|		КОГДА ПсевдонимИсточникаДанных.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
			|			ТОГДА ПсевдонимИсточникаДанных.ОбъектРасчетов.УникальныйИдентификатор
			|		КОГДА ТИПЗНАЧЕНИЯ(ПсевдонимИсточникаДанных.Регистратор) В (&ТипыДокументовРозничныхПродаж)
			|		  ИЛИ ТИПЗНАЧЕНИЯ(ПсевдонимИсточникаДанных.Регистратор) В (&ТипыДокументовРозничныхВозвратов)
			|			ТОГДА ПОДСТРОКА(ПсевдонимИсточникаДанных.ИдентификаторФинЗаписи, 29, 8) +
			|				  ПОДСТРОКА(ПсевдонимИсточникаДанных.ИдентификаторФинЗаписи, 9, 20) +
			|				  ПОДСТРОКА(ПсевдонимИсточникаДанных.ИдентификаторФинЗаписи, 1, 8)
			|		ИНАЧЕ &ИдентификаторНеиспользуемойФинЗаписи
			|	КОНЕЦ",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию());
		СтрокаРасчетыПоНДС.ПутьКДаннымИдентификаторСтроки = "ИдентификаторФинЗаписи";
		СтрокаРасчетыПоНДС.РесурсыКоличество.Добавить("0");
		СтрокаРасчетыПоНДС.УчетНДС = Истина;
		ЗаполнитьПризнакиУчетаКорреспонденций(СтрокаРасчетыПоНДС, "ВыручкаБезНДС", Истина);
		
		СтрокаНДСОтгрузокБезПереходаПрава = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНДСОтгрузокБезПереходаПрава.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НДСПоОтгрузкамБезПереходаПраваСобственности;
		СтрокаНДСОтгрузокБезПереходаПрава.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьУчетНДС.Имя;
		ОтборДанных = Новый Соответствие();
		ОтборДанных.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.НДСПоОтгрузкамБезПереходаПраваСобственности);
		СтрокаНДСОтгрузокБезПереходаПрава.ОтборДанных = ОтборДанных;
		СтрокаНДСОтгрузокБезПереходаПрава.ПутьКДаннымИдентификаторФинЗаписи = СтрЗаменить(
			"ВЫБОР
			|		КОГДА ПсевдонимИсточникаДанных.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
			|			ТОГДА ПсевдонимИсточникаДанных.ОбъектРасчетов.УникальныйИдентификатор
			|		ИНАЧЕ &ИдентификаторНеиспользуемойФинЗаписи
			|	КОНЕЦ",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию());
		СтрокаНДСОтгрузокБезПереходаПрава.ПутьКДаннымНастройкаХозОперации = СтрЗаменить(
			"ВЫБОР
			|		КОГДА ПсевдонимИсточникаДанных.ДебетКредит = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет)
			|			ТОГДА ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
			|		КОГДА ТИПЗНАЧЕНИЯ(ПсевдонимИсточникаДанных.Регистратор) = ТИП(Документ.РеализацияУслугПрочихАктивов)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеНДСпоОтгрузкеТоваровВПути)
			|		ИНАЧЕ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
			|	КОНЕЦ",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию());
		СтрокаНДСОтгрузокБезПереходаПрава.РесурсыКоличество.Добавить("0");
		СтрокаНДСОтгрузокБезПереходаПрава.УчетНДС = Истина;
		ПутиКДаннымСубконто = Новый Соответствие();
		ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "Аналитика");
		СтрокаНДСОтгрузокБезПереходаПрава.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
		ЗаполнитьПризнакиУчетаКорреспонденций(СтрокаНДСОтгрузокБезПереходаПрава, "ВыручкаБезНДС", Истина);
		
		ПодавитьДанныеБезОтбораПоСоставуРесурсов(ОбъектыФинансовогоУчета,
			Метаданные.ФункциональныеОпции.ИспользоватьУчетНДС.Имя,
			Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя,,, "0");
	КонецЕсли;
	
	Если НастройкиПроводок.ВыручкаБезНДС = Ложь
	 ИЛИ НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
		СтрокаНДССПродаж = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНДССПродаж.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НДССПродаж;
		СтрокаНДССПродаж.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьУчетНДС.Имя;
		СтрокаНДССПродаж.ВыражениеЭтоДебет = "НЕ &ЭтоСторно";
		СтрокаНДССПродаж.ВыражениеЭтоКредит = "&ЭтоСторно";
		СтрокаНДССПродаж.ПутьКДаннымОбъектНастройки = "АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета";
		СтрокаНДССПродаж.РесурсыУпр.Добавить("СуммаВыручки");
		СтрокаНДССПродаж.РесурсыУпр.Добавить("-СуммаВыручкиБезНДС");
		СтрокаНДССПродаж.РесурсыРегл.Добавить("СуммаВыручкиСНДСРегл");
		СтрокаНДССПродаж.РесурсыРегл.Добавить("-СуммаВыручкиРегл");
		СтрокаНДССПродаж.РесурсыКоличество.Добавить("0");
		СтрокаНДССПродаж.УчетНДС = Истина;
		СтрокаНДССПродаж.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.ДвиженияПоНДС.Имя);
		СтрокаНДССПродаж.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя);
		Если УчетНДСУП.НастройкиУчета().ДатаОтраженияВозвратовКорректировочнымиСФ > '00010101' Тогда
			СтрокаНДССПродаж.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.НДСПредъявленный.Имя);
		КонецЕсли;
		Если НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
			ЗаполнитьПризнакиУчетаКорреспонденций(СтрокаНДССПродаж, "ВыручкаБезНДС", Ложь);
		КонецЕсли;
		
		СтрокаНДССПрочихДоходов = ОбъектыФинансовогоУчета.Добавить();
		СтрокаНДССПрочихДоходов.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НДССПрочихДоходов;
		СтрокаНДССПрочихДоходов.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьУчетНДС.Имя;
		СтрокаНДССПрочихДоходов.ВыражениеЭтоДебет = "НЕ &ЭтоСторно";
		СтрокаНДССПрочихДоходов.ВыражениеЭтоКредит = "&ЭтоСторно";
		СтрокаНДССПрочихДоходов.ПутьКДаннымОбъектНастройки = "СтатьяДоходов.ГруппаФинансовогоУчета";
		СтрокаНДССПрочихДоходов.РесурсыУпр.Добавить("НДСУпр");
		СтрокаНДССПрочихДоходов.РесурсыРегл.Добавить("НДСРегл");
		СтрокаНДССПрочихДоходов.РесурсыКоличество.Добавить("0");
		СтрокаНДССПрочихДоходов.УчетНДС = Истина;
		Если НастройкиПроводок.ВыручкаБезНДС = Неопределено Тогда
			ЗаполнитьПризнакиУчетаКорреспонденций(СтрокаНДССПрочихДоходов, "ВыручкаБезНДС", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаНДССАвансовПолученных = ОбъектыФинансовогоУчета.Добавить();
	СтрокаНДССАвансовПолученных.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НДССАвансовПолученных;
	СтрокаНДССАвансовПолученных.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьУчетНДС.Имя;
	СтрокаНДССАвансовПолученных.УчетНДС = Истина;
	
	СтрокаНДССАвансовВыданных = ОбъектыФинансовогоУчета.Добавить();
	СтрокаНДССАвансовВыданных.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.НДССАвансовВыданных;
	СтрокаНДССАвансовВыданных.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьУчетНДС.Имя;
	СтрокаНДССАвансовВыданных.УчетНДС = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаРезервыПодОбесценение(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаРезервыПодОбесценениеЗапасов = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРезервыПодОбесценениеЗапасов.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РезервыПодОбесценениеЗапасов;
	СтрокаРезервыПодОбесценениеЗапасов.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ФормироватьРезервыПодОбесценениеЗапасов.Имя;
	ОтборДанных = Новый Соответствие();
	РазделыУчета = Новый Массив();
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыВПути);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссиюВПути);
	ОтборДанных.Вставить("РазделУчета", РазделыУчета);
	СтрокаРезервыПодОбесценениеЗапасов.ОтборДанных = ОтборДанных;
	СтрокаРезервыПодОбесценениеЗапасов.ПутьКДаннымОбъектНастройки = МеждународныйУчетПоДаннымФинансовыхРегистров.ПолеВыборкиГФУНоменклатуры();
	СтрокаРезервыПодОбесценениеЗапасов.РесурсыУпр = РесурсыУчетаРезерваПодОбесценениеНоменклатурыУпр();
	СтрокаРезервыПодОбесценениеЗапасов.РесурсыРегл = РесурсыУчетаРезерваПодОбесценениеНоменклатурыРегл();
	СтрокаРезервыПодОбесценениеЗапасов.РесурсыКоличество.Добавить("0");
	
	СтрокаРезервыПодОбесценениеЗапасовПереданных = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРезервыПодОбесценениеЗапасовПереданных.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РезервыПодОбесценениеЗапасовПереданных;
	ФункциональныеОпцииПереданные = Новый Массив();
	//++ Устарело_Переработка24
	ФункциональныеОпцииПереданные.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоНаСтороне.Имя);
	//-- Устарело_Переработка24
	ФункциональныеОпцииПереданные.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводствоНаСтороне2_5.Имя);
	ФункциональныеОпцииПереданные.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи.Имя);
	ФункциональныеОпцииПереданные.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьКомиссиюПриПродажах.Имя);
	ФункциональныеОпции = Новый СписокЗначений();
	ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ФормироватьРезервыПодОбесценениеЗапасов.Имя);
	ФункциональныеОпции.Добавить(ФункциональныеОпцииПереданные);
	СтрокаРезервыПодОбесценениеЗапасовПереданных.ФункциональныеОпции = ФункциональныеОпции;
	ОтборДанных = Новый Соответствие();
	РазделыУчета = Новый Массив();
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеПереработчику);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыПереданныеПартнерам);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию);
	ОтборДанных.Вставить("РазделУчета", РазделыУчета);
	СтрокаРезервыПодОбесценениеЗапасовПереданных.ОтборДанных = ОтборДанных;
	СтрокаРезервыПодОбесценениеЗапасовПереданных.ПутьКДаннымОбъектНастройки = МеждународныйУчетПоДаннымФинансовыхРегистров.ПолеВыборкиГФУНоменклатуры();
	СтрокаРезервыПодОбесценениеЗапасовПереданных.РесурсыУпр = РесурсыУчетаРезерваПодОбесценениеНоменклатурыУпр();
	СтрокаРезервыПодОбесценениеЗапасовПереданных.РесурсыРегл = РесурсыУчетаРезерваПодОбесценениеНоменклатурыРегл();
	СтрокаРезервыПодОбесценениеЗапасовПереданных.РесурсыКоличество.Добавить("0");
	
	СтрокаРезервыПодОбесценениеЗапасовВЦеховойКладовой = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРезервыПодОбесценениеЗапасовВЦеховойКладовой.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РезервыПодОбесценениеЗапасовВЦеховойКладовой;
	ФункциональныеОпции = Новый СписокЗначений();
	ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ФормироватьРезервыПодОбесценениеЗапасов.Имя);
	ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводство.Имя);
	СтрокаРезервыПодОбесценениеЗапасовВЦеховойКладовой.ФункциональныеОпции = ФункциональныеОпции;
	ОтборДанных = Новый Соответствие();
	РазделыУчета = Новый Массив();
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранениеПереданныеПартнерам);
	ОтборДанных.Вставить("РазделУчета", РазделыУчета);
	ОтборДанных.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", Перечисления.ТипыМестХранения.Склад);
	СтрокаРезервыПодОбесценениеЗапасовВЦеховойКладовой.ОтборДанных = ОтборДанных;
	СтрокаРезервыПодОбесценениеЗапасовВЦеховойКладовой.ПутьКДаннымОбъектНастройки = МеждународныйУчетПоДаннымФинансовыхРегистров.ПолеВыборкиГФУНоменклатуры();
	СтрокаРезервыПодОбесценениеЗапасовВЦеховойКладовой.РесурсыУпр = РесурсыУчетаРезерваПодОбесценениеНоменклатурыУпр();
	СтрокаРезервыПодОбесценениеЗапасовВЦеховойКладовой.РесурсыРегл = РесурсыУчетаРезерваПодОбесценениеНоменклатурыРегл();
	СтрокаРезервыПодОбесценениеЗапасовВЦеховойКладовой.РесурсыКоличество.Добавить("0");
	
	СтрокаРезервыПодОбесценениеНЗП = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРезервыПодОбесценениеНЗП.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РезервыПодОбесценениеНезавершенногоПроизводства;
	ФункциональныеОпции = Новый СписокЗначений();
	ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ФормироватьРезервыПодОбесценениеЗапасов.Имя);
	ФункциональныеОпции.Добавить(Метаданные.ФункциональныеОпции.ИспользоватьПроизводство.Имя);
	СтрокаРезервыПодОбесценениеНЗП.ФункциональныеОпции = ФункциональныеОпции;
	ГруппаОтборов = Новый Массив();
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство);
	ГруппаОтборов.Добавить(ОтборДанных);
	ОтборДанных = Новый Соответствие();
	РазделыУчета = Новый Массив();
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранениеПереданныеПартнерам);
	ОтборДанных.Вставить("РазделУчета", РазделыУчета);
	МестаХранения = Новый Массив();
	МестаХранения.Добавить(Перечисления.ТипыМестХранения.ДоговорКонтрагента);
	МестаХранения.Добавить(Перечисления.ТипыМестХранения.Организация);
	МестаХранения.Добавить(Перечисления.ТипыМестХранения.Партнер);
	МестаХранения.Добавить(Перечисления.ТипыМестХранения.Подразделение);
	ОтборДанных.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", МестаХранения);
	ГруппаОтборов.Добавить(ОтборДанных);
	СтрокаРезервыПодОбесценениеНЗП.ОтборДанных = ГруппаОтборов;
	СтрокаРезервыПодОбесценениеНЗП.ПутьКДаннымОбъектНастройки = "АналитикаФинансовогоУчета";
	СтрокаРезервыПодОбесценениеНЗП.РесурсыУпр = РесурсыУчетаРезерваПодОбесценениеНоменклатурыУпр();
	СтрокаРезервыПодОбесценениеНЗП.РесурсыРегл = РесурсыУчетаРезерваПодОбесценениеНоменклатурыРегл();
	СтрокаРезервыПодОбесценениеНЗП.РесурсыКоличество.Добавить("0");
	
	// Прочие разделы учета себестоимости, не описанные в отборах объектов учета, не должны считываться
	ПодавитьДанныеБезОтбораПоСоставуРесурсов(ОбъектыФинансовогоУчета,
		Метаданные.ФункциональныеОпции.ФормироватьРезервыПодОбесценениеЗапасов.Имя,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя,
		РесурсыУчетаРезерваПодОбесценениеНоменклатурыУпр(),
		РесурсыУчетаРезерваПодОбесценениеНоменклатурыРегл(),
		"0");
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаРезервыПоСомнительнымДолгам(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаРезервыПоСомнительнымДолгам = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРезервыПоСомнительнымДолгам.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РезервыПоСомнительнымДолгам;
	СтрокаРезервыПоСомнительнымДолгам.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ФормироватьРезервыПоСомнительнымДолгам.Имя;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаРезервыПредстоящихРасходов(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаРезервыОценочныеОбязательства = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРезервыОценочныеОбязательства.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РезервыОценочныеОбязательства;
	СтрокаРезервыОценочныеОбязательства.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ФормироватьРезервыПредстоящихРасходов.Имя;
	СтрокаРезервыОценочныеОбязательства.РесурсыУпр.Добавить("СуммаУпр");
	СтрокаРезервыОценочныеОбязательства.РесурсыРегл.Добавить("СуммаРегл");
	
	СтрокаПроцентыДисконтированияРезервов = ОбъектыФинансовогоУчета.Добавить();
	СтрокаПроцентыДисконтированияРезервов.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПроцентыДисконтированияРезервов;
	СтрокаПроцентыДисконтированияРезервов.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ФормироватьРезервыПредстоящихРасходов.Имя;
	СтрокаПроцентыДисконтированияРезервов.РесурсыУпр.Добавить("СуммаДисконтированияУпр");
	СтрокаПроцентыДисконтированияРезервов.РесурсыРегл.Добавить("СуммаДисконтированияРегл");
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыУчетаПрочиеАктивыИОбязательства(ОбъектыФинансовогоУчета, НастройкиПроводок)
	
	СтрокаРасчетыПоНалогамИВзносам = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРасчетыПоНалогамИВзносам.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РасчетыПоНалогамИВзносам;;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.Налоги);
	СтрокаРасчетыПоНалогамИВзносам.ОтборДанных = ОтборДанных;
	СтрокаРасчетыПоНалогамИВзносам.ПутьКДаннымОбъектНастройки = "Аналитика";
	
	СтрокаВнутрихозяйственныеРасчеты = ОбъектыФинансовогоУчета.Добавить();
	СтрокаВнутрихозяйственныеРасчеты.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ВнутрихозяйственныеРасчеты;
	СтрокаВнутрихозяйственныеРасчеты.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс.Имя;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСФилиалами);
	СтрокаВнутрихозяйственныеРасчеты.ОтборДанных = ОтборДанных;
	ПутиКДаннымСубконто = Новый Соответствие();
	ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "Аналитика");
	СтрокаВнутрихозяйственныеРасчеты.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
	
	СтрокаРасчетыПоВыделенномуИмуществу = ОбъектыФинансовогоУчета.Добавить();
	СтрокаРасчетыПоВыделенномуИмуществу.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ВнутрихозяйственныеРасчетыПоВыделенномуИмуществу;
	СтрокаРасчетыПоВыделенномуИмуществу.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс.Имя;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыПоВыделенномуИмуществу);
	СтрокаРасчетыПоВыделенномуИмуществу.ОтборДанных = ОтборДанных;
	ПутиКДаннымСубконто = Новый Соответствие();
	ПутиКДаннымСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, "Аналитика");
	СтрокаРасчетыПоВыделенномуИмуществу.ПутиКДаннымСубконто = ПутиКДаннымСубконто;
	
	СтрокаОбязательстваПоНеотфактурованнымПоставкам = ОбъектыФинансовогоУчета.Добавить();
	СтрокаОбязательстваПоНеотфактурованнымПоставкам.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ОбязательстваПоНеотфактурованнымПоставкам;
	СтрокаОбязательстваПоНеотфактурованнымПоставкам.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьНеотфактурованныеПоставки.Имя;
	ОтборДанных = Новый Соответствие();
	ОтборДанных.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки);
	СтрокаОбязательстваПоНеотфактурованнымПоставкам.ОтборДанных = ОтборДанных;
	СтрокаОбязательстваПоНеотфактурованнымПоставкам.РесурсыУпр = РесурсыУчетаСобственнойНоменклатурыУпр();
	СтрокаОбязательстваПоНеотфактурованнымПоставкам.РесурсыРегл = РесурсыУчетаСобственнойНоменклатурыРегл();
	
	Если НастройкиПроводок.ВариантФормированияПроводок = Неопределено
	 ИЛИ НастройкиПроводок.ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.СКорреспонденцией Тогда
		СтрокаРасчетыПоВзаимозачетам = ОбъектыФинансовогоУчета.Добавить();
		СтрокаРасчетыПоВзаимозачетам.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.РасчетыПоВзаимозачетамЗадолженности;
	КонецЕсли;
	
	СтрокаВводОстатков = ОбъектыФинансовогоУчета.Добавить();
	СтрокаВводОстатков.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ВводОстатков;
	
	СтрокаПрочиеАктивыПассивы = ОбъектыФинансовогоУчета.Добавить();
	СтрокаПрочиеАктивыПассивы.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПрочиеАктивыПассивы;
	СтрокаПрочиеАктивыПассивы.ПутьКДаннымОбъектНастройки = "НастройкаСчетовУчета";
	
КонецПроцедуры

#КонецОбласти

Функция РесурсыУчетаСобственнойНоменклатурыУпр()
	
	РесурсыУпр = Новый Массив();
	РесурсыУпр.Добавить("СтоимостьУпр");
	РесурсыУпр.Добавить("ДопРасходыУпр");
	РесурсыУпр.Добавить("ТрудозатратыУпр");
	РесурсыУпр.Добавить("ПостатейныеПостоянныеУпр");
	РесурсыУпр.Добавить("ПостатейныеПеременныеУпр");
	
	Возврат РесурсыУпр;
	
КонецФункции

Функция РесурсыУчетаСобственнойНоменклатурыРегл()
	
	РесурсыРегл = Новый Массив();
	РесурсыРегл.Добавить("СтоимостьРегл");
	РесурсыРегл.Добавить("ДопРасходыРегл");
	РесурсыРегл.Добавить("ТрудозатратыРегл");
	РесурсыРегл.Добавить("ПостатейныеПостоянныеРегл");
	РесурсыРегл.Добавить("ПостатейныеПеременныеРегл");
	
	Возврат РесурсыРегл;
	
КонецФункции

Функция РесурсыУчетаПринятойНоменклатурыУпр()
	
	РесурсыУпр = Новый Массив();
	РесурсыУпр.Добавить("СтоимостьЗабалансовая");
	
	Возврат РесурсыУпр;
	
КонецФункции

Функция РесурсыУчетаПринятойНоменклатурыРегл()
	
	РесурсыРегл = Новый Массив();
	РесурсыРегл.Добавить("СтоимостьЗабалансоваяРегл");
	
	Возврат РесурсыРегл;
	
КонецФункции

Функция РесурсыУчетаРезерваПодОбесценениеНоменклатурыУпр()
	
	РесурсыУпр = Новый Массив();
	РесурсыУпр.Добавить("РезервПодОбесценениеУпр");
	
	Возврат РесурсыУпр;
	
КонецФункции

Функция РесурсыУчетаРезерваПодОбесценениеНоменклатурыРегл()
	
	РесурсыРегл = Новый Массив();
	РесурсыРегл.Добавить("РезервПодОбесценениеРегл");
	
	Возврат РесурсыРегл;
	
КонецФункции

Процедура ПодавитьДанныеБезОтбораПоСоставуРесурсов(ОбъектыФинансовогоУчета,
	ФункциональныеОпции, ИсточникДанных,
	РесурсыУпр = Неопределено, РесурсыРегл = Неопределено, РесурсыКоличество = Неопределено)
	
	СтрокаПустойОбъектУчета = ОбъектыФинансовогоУчета.Добавить();
	СтрокаПустойОбъектУчета.ОбъектУчета = Перечисления.ОбъектыФинансовогоУчета.ПустаяСсылка();
	СтрокаПустойОбъектУчета.ФункциональныеОпции = ФункциональныеОпции;
	СтрокаПустойОбъектУчета.ИсточникДанных = ИсточникДанных;
	СтрокаПустойОбъектУчета.ПутьКДаннымИдентификаторФинЗаписи = "&ИдентификаторНеиспользуемойФинЗаписи";
	
	Если РесурсыУпр <> Неопределено Тогда
		СтрокаПустойОбъектУчета.РесурсыУпр = МассивРесурсов(РесурсыУпр);
	КонецЕсли;
	
	Если РесурсыРегл <> Неопределено Тогда
		СтрокаПустойОбъектУчета.РесурсыРегл = МассивРесурсов(РесурсыРегл);
	КонецЕсли;
	
	Если РесурсыКоличество <> Неопределено Тогда
		СтрокаПустойОбъектУчета.РесурсыКоличество = МассивРесурсов(РесурсыКоличество);
	КонецЕсли;
	
КонецПроцедуры

Функция МассивРесурсов(Ресурсы)
	
	Если ТипЗнч(Ресурсы) = Тип("Строка") Тогда
		Возврат СтрРазделить(Ресурсы, ",");
	Иначе
		Возврат ОбщегоНазначенияУТКлиентСервер.Массив(Ресурсы);
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПризнакиУчетаКорреспонденций(СтрокаОбъектаУчета, ПризнакУчета, Значение)
	
	ПризнакиУчетаКорреспонденций = НоваяПризнакиУчетаКорреспонденций();
	
	Если СтрокаОбъектаУчета.ОбъектУчета = ВыручкаОтПродаж
	 ИЛИ СтрокаОбъектаУчета.ОбъектУчета = ВыручкаОтПродажБезНДС
	 ИЛИ СтрокаОбъектаУчета.ОбъектУчета = РасчетыПоНДС
	 ИЛИ СтрокаОбъектаУчета.ОбъектУчета = НДСПоОтгрузкамБезПереходаПраваСобственности Тогда
		НоваяСтрока = ПризнакиУчетаКорреспонденций.Добавить();
		НоваяСтрока.ОбъектУчета = ЗадолженностьКлиентов;
		
		НоваяСтрока = ПризнакиУчетаКорреспонденций.Добавить();
		НоваяСтрока.ОбъектУчета = АвансыПолученныеОтКлиентов;
		
		НоваяСтрока = ПризнакиУчетаКорреспонденций.Добавить();
		НоваяСтрока.ОбъектУчета = РасчетыСРозничнымиПокупателями;
	КонецЕсли;
	
	Если СтрокаОбъектаУчета.ОбъектУчета = ПрочаяВыручка
	 ИЛИ СтрокаОбъектаУчета.ОбъектУчета = ПрочаяВыручкаБезНДС Тогда
		НоваяСтрока = ПризнакиУчетаКорреспонденций.Добавить();
		НоваяСтрока.ОбъектУчета = ЗадолженностьКлиентов;
		
		НоваяСтрока = ПризнакиУчетаКорреспонденций.Добавить();
		НоваяСтрока.ОбъектУчета = АвансыПолученныеОтКлиентов;
		
		НоваяСтрока = ПризнакиУчетаКорреспонденций.Добавить();
		НоваяСтрока.ОбъектУчета = РасчетыПоЗаймамСотрудникам;
		
		НоваяСтрока = ПризнакиУчетаКорреспонденций.Добавить();
		НоваяСтрока.ОбъектУчета = КредитыИЗаймыВыданныеКомиссия;
		
		НоваяСтрока = ПризнакиУчетаКорреспонденций.Добавить();
		НоваяСтрока.ОбъектУчета = КредитыИЗаймыВыданныеПроценты;
	КонецЕсли;
	
	Если СтрокаОбъектаУчета.ОбъектУчета = НДССПродаж
	 ИЛИ СтрокаОбъектаУчета.ОбъектУчета = НДССПрочихДоходов Тогда
		НоваяСтрока = ПризнакиУчетаКорреспонденций.Добавить();
		НоваяСтрока.ОбъектУчета = РасчетыПоНДС;
		
		НоваяСтрока = ПризнакиУчетаКорреспонденций.Добавить();
		НоваяСтрока.ОбъектУчета = НДСПоОтгрузкамБезПереходаПраваСобственности;
	КонецЕсли;
	
	ПризнакиУчетаКорреспонденций.ЗаполнитьЗначения(ПризнакУчета, "ПризнакУчета");
	ПризнакиУчетаКорреспонденций.ЗаполнитьЗначения(Значение, "Значение");
	
	СтрокаОбъектаУчета.ПризнакиУчетаКорреспонденций = ПризнакиУчетаКорреспонденций;
	
КонецПроцедуры

Функция НоваяПризнакиУчетаКорреспонденций()
	
	ПризнакиУчетаКорреспонденций = Новый ТаблицаЗначений();
	ПризнакиУчетаКорреспонденций.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыФинансовогоУчета"));
	ПризнакиУчетаКорреспонденций.Колонки.Добавить("ПризнакУчета", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ПризнакиУчетаКорреспонденций.Колонки.Добавить("Значение", Новый ОписаниеТипов("Булево"));
	
	Возврат ПризнакиУчетаКорреспонденций;
	
КонецФункции
	
Процедура ЗаполнитьИсточникиДанныхОбъектовУчета(ОбъектыФинансовогоУчета)
	
	ИсточникиДанныхОбъектовУчета = ИсточникиДанныхОбъектовФинансовогоУчета();
	
	Для Каждого СтрокаОбъектаУчета Из ОбъектыФинансовогоУчета Цикл
		Если ПустаяСтрока(СтрокаОбъектаУчета.ИсточникДанных) Тогда
			ИсточникДанных = ИсточникиДанныхОбъектовУчета[СтрокаОбъектаУчета.ОбъектУчета];
			Если ЗначениеЗаполнено(ИсточникДанных) Тогда
				СтрокаОбъектаУчета.ИсточникДанных = ИсточникДанных;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВыделениеДолгосрочныхАктивовОбязательств(ОбъектыФинансовогоУчета)
	
	ТолькоКраткосрочныеОбъектыУчета = Новый Массив();
	ТолькоКраткосрочныеОбъектыУчета.Добавить(Перечисления.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам);
	
	РегистрыНакопленияМетаданные = Метаданные.РегистрыНакопления;
	ПараметрыОтраженияРегистров = Новый Структура();
	
	Для Каждого СтрокаОбъектаУчета Из ОбъектыФинансовогоУчета Цикл
		Если ПустаяСтрока(СтрокаОбъектаУчета.ИсточникДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтраженияДвижений = Неопределено;
		
		Если НЕ ПараметрыОтраженияРегистров.Свойство(СтрокаОбъектаУчета.ИсточникДанных, ПараметрыОтраженияДвижений) Тогда
			МенеджерРегистра = РегистрыНакопления[СтрокаОбъектаУчета.ИсточникДанных]; // РегистрНакопленияМенеджер -
			МетаданныеРегистра = РегистрыНакопленияМетаданные[СтрокаОбъектаУчета.ИсточникДанных];
			ПараметрыОтраженияДвижений = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра); // см. МеждународныйУчетПоДаннымФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
			ПараметрыОтраженияРегистров.Вставить(СтрокаОбъектаУчета.ИсточникДанных, ПараметрыОтраженияДвижений);
		КонецЕсли;
		
		Если НЕ ПараметрыОтраженияДвижений.ВыделениеДолгосрочныхАктивовОбязательств
		 ИЛИ ТолькоКраткосрочныеОбъектыУчета.Найти(СтрокаОбъектаУчета.ОбъектУчета) <> Неопределено Тогда
			СтрокаОбъектаУчета.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
		Иначе
			СтрокаОбъектаУчета.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтатьиИзНастроекОтбора(СтатьиАктивовПассивов, ОтборДанных)
	
	ТипЗначенияОтбора = ТипЗнч(ОтборДанных);
	
	Если ТипЗначенияОтбора = Тип("Соответствие") Тогда
		Для Каждого ЭлементОтбора Из ОтборДанных Цикл
			ЗаполнитьСтатьиИзНастроекОтбора(СтатьиАктивовПассивов, ЭлементОтбора.Значение);
		КонецЦикла;
	ИначеЕсли ТипЗначенияОтбора = Тип("Массив") Тогда
		Для Каждого ЭлементОтбора Из ОтборДанных Цикл
			ЗаполнитьСтатьиИзНастроекОтбора(СтатьиАктивовПассивов, ЭлементОтбора);
		КонецЦикла;
	ИначеЕсли ТипЗначенияОтбора = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		Если СтатьиАктивовПассивов.Найти(ОтборДанных) = Неопределено Тогда
			СтатьиАктивовПассивов.Добавить(ОтборДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
