#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.ПрименениеПравилаРасчетаРезервовПодОбесценение.ДобавитьКомандуКонтрольПримененияПравила(КомандыОтчетов);
	
КонецПроцедуры

// Формирует таблицу необходимых резервов согласно настройкам, указанным в правиле формирования резервов
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаФормированияРезервовПодОбесценениеЗапасов - Правило расчета резервов, в рамках которого формируется таблица
//  РасчетРезервов - Булево - Признак необходимости расчета суммовых показателей
// 	СтруктураПараметров - Структура - структура, содержащая параметры формирования таблицы                   
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица, содержащая перечень позиций, подлежащих расчету по данному правилу
//
Функция СформироватьТаблицуОстатковПоПравилу(Правило, РасчетРезервов, СтруктураПараметров) Экспорт
	
	СхемаКомпоновкиОстатков = Справочники.ПравилаФормированияРезервовПодОбесценениеЗапасов.ПолучитьМакет("СебестоимостьТоваров");
	
	ДополнитьЗапросСКДСуммовымиПоказателями(СхемаКомпоновкиОстатков, РасчетРезервов, СтруктураПараметров);
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиОстатков.НастройкиПоУмолчанию;
	
	РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Правило, 
							"ХранилищеНастроекКомпоновкиДанных,ВидЦены,Приоритет,Владелец,РегламентированныйУчет,УправленческийУчет", 
							Истина);
	ПользовательскиеНастройки = РеквизитыПравила.ХранилищеНастроекКомпоновкиДанных.Получить(); 
	
	ЗаполнитьОтборыСКДПоПользовательскимНастройкам(НастройкиКомпоновкиДанных, ПользовательскиеНастройки);
	
	СтруктураПараметровСКД = Новый Структура;
	СтруктураПараметровСКД.Вставить("Приоритет", РеквизитыПравила.Приоритет);
	СтруктураПараметровСКД.Вставить("ВидЦены", РеквизитыПравила.ВидЦены);
	СтруктураПараметровСКД.Вставить("Организация", РеквизитыПравила.Владелец);	
	
	Если НЕ СтруктураПараметров.Свойство("РегламентированныйУчет") Тогда
		СтруктураПараметровСКД.Вставить("РегламентированныйУчет", РеквизитыПравила.РегламентированныйУчет);
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("УправленческийУчет") Тогда
		
		Период = ПолучитьПериодИзСтруктурыПараметров(СтруктураПараметров);
		ВедетсяУправленческийУчетОрганизаций = РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций(Период);
		
		Если ВедетсяУправленческийУчетОрганизаций Тогда
			СтруктураПараметровСКД.Вставить("УправленческийУчет", РеквизитыПравила.УправленческийУчет);
		Иначе
			СтруктураПараметровСКД.Вставить("УправленческийУчет", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		СтруктураПараметровСКД.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	НаборВалют = Константы.СоздатьНабор("ВалютаРегламентированногоУчета, ВалютаУправленческогоУчета");
	НаборВалют.Прочитать();
	
	СтруктураПараметровСКД.Вставить("ВалютаРеглУчета", НаборВалют.ВалютаРегламентированногоУчета);
	СтруктураПараметровСКД.Вставить("ВалютаУпрУчета", НаборВалют.ВалютаУправленческогоУчета);
	СтруктураПараметровСКД.Вставить("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиКомпоновкиДанных.Отбор, "СегментНоменклатуры");
	ИспользуетсяОтборПоСегменту = Ложь;
	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда  
			ИспользуетсяОтборПоСегменту = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуетсяОтборПоСегменту Тогда
		СтруктураПараметровСКД.Вставить("ИспользуетсяОтборПоСегментуНоменклатуры", Истина);
	КонецЕсли;
	
	ЗаполнитьПараметрыСКД(НастройкиКомпоновкиДанных, СтруктураПараметровСКД);
	
	ТаблицаРезервов = СформироватьТаблицуЗначенийИзСКД(СхемаКомпоновкиОстатков, НастройкиКомпоновкиДанных);
	
	Возврат ТаблицаРезервов;
	
КонецФункции

// Помещает таблицу резервов, сформированную методом СформироватьТаблицуОстатковПоПравилу, во временную таблицу
// 
// Параметры:
// 	ТаблицаОстатковПоПравилу - ТаблицаЗначений - таблица резервов
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
// 	ПараметрыПомещения - Структура - Структура, содержащая поля:
//	  * ИмяВременнойТаблицы - Строка - основа имен временных таблиц, из которых формируется итоговая
//	  * НомерВременнойТаблицы - Число - наибольший номер временной таблицы остатков
//
Процедура ПоместитьТаблицуОстатковВоВременнуюТаблицу(ТаблицаОстатковПоПравилу, МенеджерВременныхТаблиц, ПараметрыПомещения) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = ТекстЗапросаПомещенияВоВременнуюТаблицу();
	
	Если ПараметрыПомещения.Свойство("НомерВременнойТаблицы") Тогда
		ИмяВременнойТаблицы = ИмяВременнойТаблицы(ПараметрыПомещения.ИмяВременнойТаблицы, ПараметрыПомещения.НомерВременнойТаблицы);
	Иначе
		ИмяВременнойТаблицы = ПараметрыПомещения.ИмяВременнойТаблицы;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ВременнаяТаблицаОстатков", ИмяВременнойТаблицы);  
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаОстатков", ТаблицаОстатковПоПравилу);
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует список веременных таблиц остатков согласно правилам формирования резервов под обесценение
// 
// Параметры:
//  ВыборкаПравил - ВыборкаИзРезультатаЗапроса - выборка из запроса действующих правил формирования резервов
//  Период - Дата - Период формирования остатков
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, в котором создаются временные таблицы остатков
//  РасчетРезервов - Булево - Признак необходимости расчета суммовых показателей
// 
// Возвращаемое значение:
//  Число - количество сформированных временных таблиц
//
Функция СоздатьВременныеТаблицыОстатковПоПравилам(ВыборкаПравил, Период, МенеджерВременныхТаблиц, РасчетРезервов = Ложь) Экспорт

	КлючеваяОперация = "Справочник.ПравилаФормированияРезервовПодОбесценениеЗапасов.МодульМенеджера.СоздатьВременныеТаблицыОстатковПоПравилам";
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	КоличествоОбработанныхДанных = 0;
	
	НомерВременнойТаблицы = 0;
	
	Пока ВыборкаПравил.Следующий() Цикл
		
		НомерВременнойТаблицы = НомерВременнойТаблицы + 1;
					
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Период", Период);
		СтруктураПараметров.Вставить("Правило", ВыборкаПравил.Правило);
		СтруктураПараметров.Вставить("РегламентированныйУчет", ВыборкаПравил.РегламентированныйУчет);
		СтруктураПараметров.Вставить("УправленческийУчет", ВыборкаПравил.УправленческийУчет);
		
		ТаблицаОстатковПоПравилу = СформироватьТаблицуОстатковПоПравилу(ВыборкаПравил.Правило, РасчетРезервов, СтруктураПараметров);
		
		КоличествоОбработанныхДанных = КоличествоОбработанныхДанных + ТаблицаОстатковПоПравилу.Количество();
				
		ПараметрыПомещения = Новый Структура;
		ПараметрыПомещения.Вставить("ИмяВременнойТаблицы", "ТаблицаОстатковПоПравилу");
		ПараметрыПомещения.Вставить("НомерВременнойТаблицы", НомерВременнойТаблицы);
		ПоместитьТаблицуОстатковВоВременнуюТаблицу(ТаблицаОстатковПоПравилу, МенеджерВременныхТаблиц, ПараметрыПомещения);
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоОбработанныхДанных / 1000);
	
	Возврат НомерВременнойТаблицы;
		
КонецФункции

// Создает временную таблицу, в которой сгруппированы данные из произвольного количества таблиц остатков по правилам.
// 
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц
// 	ПараметрыПомещения - Структура - структура, содержащая поля:
//	  * ИмяВременнойТаблицы - Строка - основа имен временных таблиц, из которых формируется итоговая
//	  * НомерВременнойТаблицы - Число - наибольший номер временной таблицы остатков
//
Процедура ОбъединитьВременныеТаблицыОстатковВИтоговую(МенеджерВременныхТаблиц, ПараметрыПомещения) Экспорт
	
	ЗапросИтоговойВременнойТаблицы = СформироватьИтоговыйЗапросРезервов(ПараметрыПомещения);
	ЗапросИтоговойВременнойТаблицы.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросИтоговойВременнойТаблицы.Выполнить();
	
КонецПроцедуры

// Создает операторы для схемы запроса объединения временных таблиц остатков в итоговую.
// 
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - схема запроса объединения временных таблиц остатков в итоговую
//  ИсходноеИмяТаблицы - Строка - основа имен временных таблиц, из которых формируется итоговая
//  МаксимальныйНомерВременнойТаблицы - Число - наибольший номер временной таблицы остатков
//
Процедура СформироватьОператорыОбъединенияВременныхТаблиц(СхемаЗапроса, ИсходноеИмяТаблицы, МаксимальныйНомерВременнойТаблицы) Экспорт
	
	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	ИсходныйОператор = ПакетЗапроса.Операторы[0];
	
	Для НомерВременнойТаблицы = 1 По МаксимальныйНомерВременнойТаблицы Цикл
		
		НовыйОператорЗапроса = ПакетЗапроса.Операторы.Добавить();
		
		ИмяВременнойТаблицы = Справочники.ПравилаФормированияРезервовПодОбесценениеЗапасов.ИмяВременнойТаблицы(ИсходноеИмяТаблицы, НомерВременнойТаблицы);
		ИсточникСхемыЗапроса = НовыйОператорЗапроса.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), ИмяВременнойТаблицы);
		
		Для Каждого ПолеЗапроса Из ИсходныйОператор.ВыбираемыеПоля Цикл
			ПсевдонимПоля = ПакетЗапроса.Колонки[ИсходныйОператор.ВыбираемыеПоля.Индекс(ПолеЗапроса)].Псевдоним;
			ИсточникСхемыЗапроса.Источник.ДоступныеПоля.Добавить(ПсевдонимПоля);
			НовыйОператорЗапроса.ВыбираемыеПоля.Добавить(СтрЗаменить(ПолеЗапроса, "ТаблицаОстатков", ИмяВременнойТаблицы));
		КонецЦикла;

	КонецЦикла;
	
	ПакетЗапроса.Операторы.Удалить(0);
	
КонецПроцедуры

// Формирует имя временной таблицы остатков, объединяя основу имени и номер временной таблицы.
// 
// Параметры:
//  ИсходноеИмя - Строка - основа имени временной таблицы
//  НомерВременнойТаблицы - Число - номер временной таблицы
// 
// Возвращаемое значение:
//  Строка - Имя временной таблицы
//
Функция ИмяВременнойТаблицы(ИсходноеИмя, НомерВременнойТаблицы) Экспорт
	Возврат СтрШаблон("%1%2", ИсходноеИмя, Формат(НомерВременнойТаблицы, "ЧГ="));
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
	
#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьСервер.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка, Метаданные.Справочники.СтатьиКалькуляции);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность		
КонецПроцедуры

#КонецЕсли

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьЗапросСКДСуммовымиПоказателями(СхемаКомпоновкиОстатков, РасчетРезервов, СтруктураПараметров)
	
	ВыражениеОтбораПоПериоду = Новый ВыражениеСхемыЗапроса("&Период");
	
	ФормулаФактическойСебестоимостиРегл = 
		"Остатки.СтоимостьРеглОстаток 
		| + Остатки.ДопРасходыРеглОстаток 
		| + Остатки.ТрудозатратыРеглОстаток
		| + Остатки.ПостатейныеПостоянныеРеглОстаток
		| + Остатки.ПостатейныеПеременныеРеглОстаток";
	
	ФормулаЧистойСтоимостиПродажиРегл = 
		"Остатки.КоличествоОстаток 
		| * ВЫБОР КОГДА Цены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ИЛИ Цены.Упаковка = Ключи.ЕдиницаХранения 
		|		ТОГДА 1
		|		ИНАЧЕ Ключи.КоэффициентВесаКЕдиницеИзмерения
		|	КОНЕЦ
		| * ЕСТЬNULL(Цены.Цена, 0)
		| * ВЫБОР
		|		КОГДА ЕСТЬNULL(Цены.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|			ТОГДА 1 
		|		ИНАЧЕ ВЫБОР 
		|				КОГДА Цены.Упаковка.Числитель = 0 
		|					ТОГДА 1 
		|				ИНАЧЕ Цены.Упаковка.Знаменатель / Цены.Упаковка.Числитель 
		|			КОНЕЦ 
		|	КОНЕЦ
		| * ВЫБОР
		|		КОГДА НЕ Цены.Валюта ЕСТЬ NULL И НЕ Цены.Валюта = &ВалютаРеглУчета
		|			ТОГДА ЕСТЬNULL(КурсВалютыЦены.КурсЧислитель, 0) / ЕСТЬNULL(КурсВалютыЦены.КурсЗнаменатель, 1)
		|		ИНАЧЕ 1
		|	КОНЕЦ";
					
	ФормулаОстаткаРезерваРегл = "Остатки.РезервПодОбесценениеРеглОстаток";
					
	ФормулаРасчетаРезерваРегл = 
		"ВЫБОР 
		|	КОГДА Остатки.СебестоимостьРегл < &ЧистаяСтоимостьПродажиРегл
		|		ТОГДА Остатки.РезервПодОбесценениеРеглОстаток
		|	ИНАЧЕ Остатки.СебестоимостьРегл - (&ЧистаяСтоимостьПродажиРегл - Остатки.РезервПодОбесценениеРеглОстаток)
		|КОНЕЦ";
	
	ПериодОтчета = ПолучитьПериодИзСтруктурыПараметров(СтруктураПараметров);
	ВедетсяУправленческийУчетОрганизаций = РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций(ПериодОтчета);
	
	Если ВедетсяУправленческийУчетОрганизаций Тогда
		
		ФормулаФактическойСебестоимостиУпр = 
			"Остатки.СтоимостьУпрОстаток 
			| + Остатки.ДопРасходыУпрОстаток 
			| + Остатки.ТрудозатратыУпрОстаток
			| + Остатки.ПостатейныеПостоянныеУпрОстаток
			| + Остатки.ПостатейныеПеременныеУпрОстаток";
		
		ФормулаЧистойСтоимостиПродажиУпр = 
			"Остатки.КоличествоОстаток 
			| * ВЫБОР КОГДА Цены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ИЛИ Цены.Упаковка = Ключи.ЕдиницаХранения 
			|		ТОГДА 1
			|		ИНАЧЕ Ключи.КоэффициентВесаКЕдиницеИзмерения
			|	КОНЕЦ
			| * ЕСТЬNULL(Цены.Цена, 0)
			| * ВЫБОР
			|		КОГДА ЕСТЬNULL(Цены.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
			|			ТОГДА 1 
			|		ИНАЧЕ ВЫБОР 
			|				КОГДА Цены.Упаковка.Числитель = 0 
			|					ТОГДА 1 
			|				ИНАЧЕ Цены.Упаковка.Знаменатель / Цены.Упаковка.Числитель 
			|			КОНЕЦ 
			|	КОНЕЦ
			| * ВЫБОР
			|		КОГДА Цены.Валюта = &ВалютаУпрУчета
			|			ИЛИ ЕСТЬNULL(КурсВалютыЦены.КурсЗнаменатель, 0) * КурсВалютыУпрУчета.КурсЧислитель = 0
			|			ТОГДА 1
			|		ИНАЧЕ КурсВалютыЦены.КурсЧислитель * КурсВалютыУпрУчета.КурсЗнаменатель 
			|				/ (КурсВалютыЦены.КурсЗнаменатель * КурсВалютыУпрУчета.КурсЧислитель)
			|	КОНЕЦ";
						
		ФормулаОстаткаРезерваУпр = "Остатки.РезервПодОбесценениеУпрОстаток";
	
		ФормулаРасчетаРезерваУпр = 
			"ВЫБОР 
			|	КОГДА Остатки.СебестоимостьУпр < &ЧистаяСтоимостьПродажиУпр
			|		ТОГДА Остатки.РезервПодОбесценениеУпрОстаток
			|	ИНАЧЕ Остатки.СебестоимостьУпр - (&ЧистаяСтоимостьПродажиУпр - Остатки.РезервПодОбесценениеУпрОстаток)
			|КОНЕЦ";
		
	Иначе
		
		ФормулаФактическойСебестоимостиУпр = "0";
		ФормулаЧистойСтоимостиПродажиУпр = "0";
		ФормулаРасчетаРезерваУпр = "0";
		ФормулаОстаткаРезерваУпр = "0";
		
	КонецЕсли;
				
	ФормулаРасчетаРезерваРегл = СтрЗаменить(ФормулаРасчетаРезерваРегл, "&ЧистаяСтоимостьПродажиРегл", ФормулаЧистойСтоимостиПродажиРегл);
	ФормулаРасчетаРезерваУпр = СтрЗаменить(ФормулаРасчетаРезерваУпр, "&ЧистаяСтоимостьПродажиУпр", ФормулаЧистойСтоимостиПродажиУпр);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(СхемаКомпоновкиОстатков.НаборыДанных[0].Запрос);
	
	ПакетЗапросаОстатки = Схема.ПакетЗапросов[1];
	ОператорЗапросаОстатки = ПакетЗапросаОстатки.Операторы[0];
	
	ПакетЗапросаКлючи = Схема.ПакетЗапросов[2];
	ОператорЗапросаКлючи = ПакетЗапросаКлючи.Операторы[0];
	
	ПакетЗапросаРасчетРезервов = Схема.ПакетЗапросов[3];
	ОператорЗапросаРасчетРезервов = ПакетЗапросаРасчетРезервов.Операторы[0];
	ИсточникДанныхРасчетРезервов = ОператорЗапросаРасчетРезервов.Источники[0];
	
	Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ПериодОтчета) Тогда
			
		ОператорЗапросаКлючи.ВыбираемыеПоля.Добавить(
				"ВЫБОР
				|	КОГДА Ключи.Номенклатура.ВидНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
				|		ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
				|	ИНАЧЕ Ключи.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
				|КОНЕЦ",
				ПакетЗапросаКлючи.Колонки.Индекс(ПакетЗапросаКлючи.Колонки.Найти("Характеристика")));
			
		ОператорЗапросаКлючи.ВыбираемыеПоля.Добавить(
				"ВЫБОР
				|	КОГДА Ключи.Номенклатура.ВидНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
				|		ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
				|	ИНАЧЕ ЕСТЬNULL(Ключи.Серия.СерияНоменклатурыДляЦенообразования, ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка))
				|КОНЕЦ",
				ПакетЗапросаКлючи.Колонки.Индекс(ПакетЗапросаКлючи.Колонки.Найти("Серия")));
		
		ИсточникЦен = ОператорЗапросаРасчетРезервов.Источники.Добавить("РегистрСведений.ЦеныНоменклатуры25.СрезПоследних", "Цены");
		ИсточникЦен.Источник.Параметры[0].Выражение = ВыражениеОтбораПоПериоду;
		ИсточникЦен.Источник.Параметры[1].Выражение = Новый ВыражениеСхемыЗапроса(
			"ВидЦены = &ВидЦены И УпаковкаЦО = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
		ИсточникДанныхРасчетРезервов.Соединения.Добавить(ИсточникЦен,
			"Ключи.Номенклатура = Цены.Номенклатура
			|И Ключи.Характеристика = Цены.ХарактеристикаЦО
			|И Ключи.Серия = Цены.СерияЦО");
	
	Иначе
		
		ИсточникЦен = ОператорЗапросаРасчетРезервов.Источники.Добавить("РегистрСведений.ЦеныНоменклатуры.СрезПоследних", "Цены");
		ИсточникЦен.Источник.Параметры[0].Выражение = ВыражениеОтбораПоПериоду;
		ИсточникЦен.Источник.Параметры[1].Выражение = Новый ВыражениеСхемыЗапроса("ВидЦены = &ВидЦены");
		ИсточникДанныхРасчетРезервов.Соединения.Добавить(ИсточникЦен,
			"Ключи.Номенклатура = Цены.Номенклатура
			|И Ключи.Характеристика = Цены.Характеристика");
	
	КонецЕсли;
	
	Если РасчетРезервов = Истина Тогда
		ИсточникДанныхРасчетРезервов.Соединения[ИсточникДанныхРасчетРезервов.Соединения.Количество() - 1].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	КонецЕсли;
	
	ИсточникКурсовВалют = ОператорЗапросаРасчетРезервов.Источники.Добавить("РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних", "КурсВалютыЦены");
	ИсточникКурсовВалют.Источник.Параметры[0].Выражение = ВыражениеОтбораПоПериоду;
	ИсточникКурсовВалют.Источник.Параметры[1].Выражение = Новый ВыражениеСхемыЗапроса("БазоваяВалюта = &БазоваяВалюта");
	ИсточникДанныхРасчетРезервов.Соединения.Добавить(ИсточникКурсовВалют, "Цены.Валюта = КурсВалютыЦены.Валюта");
	
	ОператорЗапросаОстатки.ВыбираемыеПоля.Установить(
			ПакетЗапросаОстатки.Колонки.Индекс(ПакетЗапросаОстатки.Колонки.Найти("СебестоимостьРегл")),
			Новый ВыражениеСхемыЗапроса(ФормулаФактическойСебестоимостиРегл));
	
	ОператорЗапросаОстатки.ВыбираемыеПоля.Установить(
			ПакетЗапросаОстатки.Колонки.Индекс(ПакетЗапросаОстатки.Колонки.Найти("СебестоимостьУпр")),
			Новый ВыражениеСхемыЗапроса(ФормулаФактическойСебестоимостиУпр));
	
	ОператорЗапросаОстатки.ВыбираемыеПоля.Установить(
			ПакетЗапросаОстатки.Колонки.Индекс(ПакетЗапросаОстатки.Колонки.Найти("РезервПодОбесценениеРеглОстаток")),
			Новый ВыражениеСхемыЗапроса(ФормулаОстаткаРезерваРегл));
	
	ОператорЗапросаОстатки.ВыбираемыеПоля.Установить(
			ПакетЗапросаОстатки.Колонки.Индекс(ПакетЗапросаОстатки.Колонки.Найти("РезервПодОбесценениеУпрОстаток")),
			Новый ВыражениеСхемыЗапроса(ФормулаОстаткаРезерваУпр));
	
	ОператорЗапросаРасчетРезервов.ВыбираемыеПоля.Установить(
			ПакетЗапросаРасчетРезервов.Колонки.Индекс(ПакетЗапросаРасчетРезервов.Колонки.Найти("ЧистаяСтоимостьПродажиРегл")),
			Новый ВыражениеСхемыЗапроса(ФормулаЧистойСтоимостиПродажиРегл));
	
	ОператорЗапросаРасчетРезервов.ВыбираемыеПоля.Установить(
			ПакетЗапросаРасчетРезервов.Колонки.Индекс(ПакетЗапросаРасчетРезервов.Колонки.Найти("ЧистаяСтоимостьПродажиУпр")),
			Новый ВыражениеСхемыЗапроса(ФормулаЧистойСтоимостиПродажиУпр));
					
	Если СтруктураПараметров.Свойство("РегламентированныйУчет")
		И СтруктураПараметров.РегламентированныйУчет
		Тогда
		
		ОператорЗапросаРасчетРезервов.ВыбираемыеПоля.Установить(
			ПакетЗапросаРасчетРезервов.Колонки.Индекс(ПакетЗапросаРасчетРезервов.Колонки.Найти("РезервПодОбесценениеРегл")),
			Новый ВыражениеСхемыЗапроса(СтрШаблон("-1 * (%1)", ФормулаРасчетаРезерваРегл)));
			
		ОператорЗапросаРасчетРезервов.ВыбираемыеПоля.Установить(
			ПакетЗапросаРасчетРезервов.Колонки.Индекс(ПакетЗапросаРасчетРезервов.Колонки.Найти("РезервПодОбесценениеРеглВыручка")),
			Новый ВыражениеСхемыЗапроса(ФормулаРасчетаРезерваРегл));
			
	КонецЕсли;
		
	Если СтруктураПараметров.Свойство("УправленческийУчет")
		И СтруктураПараметров.УправленческийУчет
		Тогда
				
		ОператорЗапросаРасчетРезервов.ВыбираемыеПоля.Установить(
			ПакетЗапросаРасчетРезервов.Колонки.Индекс(ПакетЗапросаРасчетРезервов.Колонки.Найти("РезервПодОбесценениеУпр")),
			Новый ВыражениеСхемыЗапроса(СтрШаблон("-1 * (%1)", ФормулаРасчетаРезерваУпр)));
			
		ОператорЗапросаРасчетРезервов.ВыбираемыеПоля.Установить(
			ПакетЗапросаРасчетРезервов.Колонки.Индекс(ПакетЗапросаРасчетРезервов.Колонки.Найти("РезервПодОбесценениеУпрВыручка")),
			Новый ВыражениеСхемыЗапроса(ФормулаРасчетаРезерваУпр));
			
	КонецЕсли;
	
	ОператорЗапросаРасчетРезервов.ВыбираемыеПоля.Установить(
			ПакетЗапросаРасчетРезервов.Колонки.Индекс(ПакетЗапросаРасчетРезервов.Колонки.Найти("ЦенаУказана")),
			Новый ВыражениеСхемыЗапроса("НЕ Цены.Цена ЕСТЬ NULL"));
		
	Если СтруктураПараметров.Свойство("ТолькоНенулевыеСуммы")
		И СтруктураПараметров.ТолькоНенулевыеСуммы
		Тогда
		
		ПакетЗапросаИтоговый = Схема.ПакетЗапросов[4];
		ОператорЗапросаРегл = ПакетЗапросаИтоговый.Операторы[0];
		ОператорЗапросаРегл.Отбор.Добавить(Новый ВыражениеСхемыЗапроса("РезервПодОбесценениеРегл <> 0"));
		
		Если ВедетсяУправленческийУчетОрганизаций Тогда
			ОператорЗапросаУпр = ПакетЗапросаИтоговый.Операторы[1];
			ОператорЗапросаУпр.Отбор.Добавить(Новый ВыражениеСхемыЗапроса("РезервПодОбесценениеУпр <> 0"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если РасчетРезервов = Истина Тогда
		Схема.ПакетЗапросов.Удалить(5);
	Иначе
		Схема.ПакетЗапросов.Удалить(4);			
	КонецЕсли;
	
	СхемаКомпоновкиОстатков.НаборыДанных[0].Запрос = Схема.ПолучитьТекстЗапроса();
	
КонецПроцедуры


// Создает элементы отбора в настройках компоновки и заполняет их согласно отборам в пользовательских настройках
// 
// Параметры:
// 	НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - настройки компоновки, в которых требуется заполнить параметры
// 	ПользовательскиеНастройки - НастройкиКомпоновкиДанных - настройки компоновки, содержащие отборы, которые необходимо скопировать
//
Процедура ЗаполнитьОтборыСКДПоПользовательскимНастройкам(НастройкиКомпоновкиДанных, ПользовательскиеНастройки)
	
	Если ПользовательскиеНастройки <> Неопределено Тогда
			
		Отбор = НастройкиКомпоновкиДанных.Отбор;
		
		Для Каждого ЭлементОтбора Из ПользовательскиеНастройки.Отбор.Элементы Цикл
			НовыйЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает параметры данных в настройках компоновки и устанавливает в них значения
// 
// Параметры:
// 	НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - настройки компоновки, в которых требуется заполнить параметры
// 	СтруктураПараметров - Структура - структура, содержащая имена и значения параметров, которые нужно добавить в настройки компоновки:
//  
Процедура ЗаполнитьПараметрыСКД(НастройкиКомпоновкиДанных, СтруктураПараметров)

	ПараметрыДанных = НастройкиКомпоновкиДанных.ПараметрыДанных;
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
			
		НовыйПараметрДанных = ПараметрыДанных.Элементы.Добавить();
		НовыйПараметрДанных.Параметр = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
		
		ПараметрыДанных.УстановитьЗначениеПараметра(Параметр.Ключ, Параметр.Значение);

	КонецЦикла;
	
	ПериодОтчета = ПолучитьПериодИзСтруктурыПараметров(СтруктураПараметров); 
		
	НовыйПараметрДанных = ПараметрыДанных.Элементы.Добавить();
	НовыйПараметрДанных.Параметр = Новый ПараметрКомпоновкиДанных("ПериодОтчета");
		
	ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета", ПериодОтчета);
	
КонецПроцедуры

// Производит вывод результата компоновки СКД в таблицу значений
// 
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - исходная СКД
// 	НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - настройки СКД
// Возвращаемое значение:
// 	ТаблицаЗначений - результирующая таблица
//
Функция СформироватьТаблицуЗначенийИзСКД(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных)
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
							НастройкиКомпоновкиДанных,
							,
							,
							Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция СформироватьИтоговыйЗапросРезервов(ПараметрыПомещения)
	
	ИтоговыйЗапрос = Новый Запрос;
	Схема = Новый СхемаЗапроса;
	ТекстЗапроса = ТекстЗапросаПомещенияВоВременнуюТаблицу();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаОстатков", ПараметрыПомещения.ИмяВременнойТаблицы);
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	СформироватьОператорыОбъединенияВременныхТаблиц(Схема, ПараметрыПомещения.ИмяВременнойТаблицы, ПараметрыПомещения.НомерВременнойТаблицы); 
	
	ИтоговыйЗапрос.Текст = Схема.ПолучитьТекстЗапроса();
	
	Возврат ИтоговыйЗапрос;
	
КонецФункции

Функция ТекстЗапросаПомещенияВоВременнуюТаблицу()
	
	// При изменении состава полей нужно так же изменить поля в:
	// - Отчет.ПересечениеПравилРасчетаРезервовПодОбесценениеЗапасов.ТекстЗапросаОбъединеннияПоГруппеПравил()
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Период КАК Период,
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаОстатков.Склад КАК Склад,
	|	ТаблицаОстатков.РазделУчета КАК РазделУчета,
	|	ТаблицаОстатков.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаОстатков.ТипЗапасов КАК ТипЗапасов,
	|	ТаблицаОстатков.Организация КАК Организация,
	|	ТаблицаОстатков.Партия КАК Партия,
	|	ТаблицаОстатков.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ТаблицаОстатков.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
	|	ТаблицаОстатков.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ТаблицаОстатков.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаОстатков.Правило КАК Правило,
	|	ТаблицаОстатков.Приоритет КАК Приоритет,
	|	ТаблицаОстатков.ВидЦены КАК ВидЦены,
	|	ТаблицаОстатков.РегламентированныйУчет КАК РегламентированныйУчет,
	|	ТаблицаОстатков.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаОстатков.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации,
	|	ТаблицаОстатков.РасчетСебестоимости КАК РасчетСебестоимости,
	|	ТаблицаОстатков.РезервПодОбесценениеРегл КАК РезервПодОбесценениеРегл,
	|	ТаблицаОстатков.РезервПодОбесценениеУпр КАК РезервПодОбесценениеУпр,
	|	ТаблицаОстатков.РезервПодОбесценениеРеглВыручка КАК РезервПодОбесценениеРеглВыручка,
	|	ТаблицаОстатков.РезервПодОбесценениеУпрВыручка КАК РезервПодОбесценениеУпрВыручка,
	|	ТаблицаОстатков.ЦенаУказана КАК ЦенаУказана,
	|	ТаблицаОстатков.КоличествоОстаток КАК КоличествоОстаток,
	|	ТаблицаОстатков.СебестоимостьРегл КАК СебестоимостьРегл,
	|	ТаблицаОстатков.СебестоимостьУпр КАК СебестоимостьУпр,
	|	ТаблицаОстатков.ЧистаяСтоимостьПродажиРегл КАК ЧистаяСтоимостьПродажиРегл,
	|	ТаблицаОстатков.ЧистаяСтоимостьПродажиУпр КАК ЧистаяСтоимостьПродажиУпр,
	|	ТаблицаОстатков.ВидДвижения КАК ВидДвижения	
	|ПОМЕСТИТЬ ВременнаяТаблицаОстатков
	|ИЗ
	|	&ТаблицаОстатков КАК ТаблицаОстатков";
	
	Возврат ТекстЗапроса
				
КонецФункции

Функция ПолучитьПериодИзСтруктурыПараметров(СтруктураПараметров)
	
	Период = '00010101';
	
	Если СтруктураПараметров.Свойство("Период") Тогда
		
		Если ТипЗнч(СтруктураПараметров.Период) = Тип("Граница") Тогда 
			Период= СтруктураПараметров.Период.Значение
		Иначе
			Период = СтруктураПараметров.Период;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Период;
	
КонецФункции

#КонецОбласти

#КонецЕсли
