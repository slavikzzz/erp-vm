#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыДляЗаписи Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Схема = Справочники.ПравилаФормированияРезервовПодОбесценениеЗапасов.ПолучитьМакет("СебестоимостьТоваров");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
	
	ФормироватьЗаданияКЗакрытиюМесяца = Ложь;
	
	НастроитьЗаголовкиПолей();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
	 И ЗначениеЗаполнено(Объект.Владелец) Тогда
	 	Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НачалоДействияСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.НачалоДействия);
	КонецДействияСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.КонецДействия);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ФормироватьЗаданияКЗакрытиюМесяца
	 И ИзмененыКлючевыеРеквизитыПравила()
	 И НЕ ЕстьЗаданияКРасчетуСебестоимостиКЗакрытиюМесяца(Объект.Владелец, ПериодФормированияЗаданий) Тогда
	 	Отказ = Истина;
	 	ПринудительноЗакрытьФорму = Истина;
	 	
	 	ТекстВопроса = НСтр("ru = 'После изменения правила потребуется выполнить
	 	|закрытия месяца, начиная с ""%1"", продолжить?';
	 	|en = 'After changing the rule you will need to run
	 	|month-end closing starting from ""%1"". Continue?'");
	 	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", Формат(ПериодФормированияЗаданий, "ДФ=ММ.гггг"));
	 	
	 	ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	 	
	 	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Нет Тогда
		ФормироватьЗаданияКЗакрытиюМесяца = Истина;
		ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоАдресВременногоХранилища(АдресНастроекКД) Тогда
	
		НастройкиКД = ПолучитьИзВременногоХранилища(АдресНастроекКД);
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКД);

	Иначе
	
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	
	КонецЕсли;
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьСервер.ПередЗаписьюНаСервере(ТекущийОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ФормироватьЗаданияКЗакрытиюМесяца = Ложь;
	
	НастройкиКД = ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных.Получить();
	Если НастройкиКД = Неопределено Тогда
		НастройкиКД = Новый НастройкиКомпоновкиДанных();
	КонецЕсли;
	Если ЗначениеЗаполнено(НастройкиКД) Тогда
		АдресНастроекКД = ПоместитьВоВременноеХранилище(НастройкиКД, УникальныйИдентификатор);
	КонецЕсли;
	
	НастроитьЗаголовкиПолей();
	
	ШаблонЗапретаДанных = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	СтрокаШаблона = ШаблонЗапретаДанных.Добавить();
	СтрокаШаблона.Раздел = "РегламентныеОперации";
	СтрокаШаблона.Дата = НачалоМесяца(ТекущийОбъект.НачалоДействия);
	ЕстьЗапретИзменения = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ШаблонЗапретаДанных);
	Если ЕстьЗапретИзменения Тогда
		Элементы.Организация.ТолькоПросмотр = Истина;
		Элементы.ВидЦены.ТолькоПросмотр = Истина;
		Элементы.РегламентированныйУчет.ТолькоПросмотр = Истина;
		Элементы.УправленческийУчет.ТолькоПросмотр = Истина;
		Элементы.НачалоДействияСтрока.ТолькоПросмотр = Истина;
		Элементы.РеквизитДопУпорядочивания.ТолькоПросмотр = Истина;
		Элементы.НастроитьОтборОстатковГиперссылка.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.КонецДействия) Тогда
		ШаблонЗапретаДанных = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
		СтрокаШаблона = ШаблонЗапретаДанных.Добавить();
		СтрокаШаблона.Раздел = "РегламентныеОперации";
		СтрокаШаблона.Дата = НачалоМесяца(ТекущийОбъект.КонецДействия);
		ЕстьЗапретИзменения = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ШаблонЗапретаДанных);
		Если ЕстьЗапретИзменения Тогда
			Элементы.КонецДействияСтрока.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ФормироватьЗаданияКЗакрытиюМесяца Тогда
		ПериодПервыхДвижений = ПартионныйУчетСервер.ПериодПервыхДвиженийПартионныйУчетВерсии22();
		Период = ПериодФормированияЗаданий; 
		Если ПериодПервыхДвижений > Период Тогда
			Период = ПериодПервыхДвижений;
		КонецЕсли;
		РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(Период,,
			Объект.Владелец,
			Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПодОбесценениеЗапасов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоДействияСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("НачалоДействияВыборЗавершение", ЭтотОбъект);
	ПараметрыФормы 	   = Новый Структура("Значение, РежимВыбораПериода", Объект.НачалоДействия, "МЕСЯЦ");
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		ПараметрыФормы, 
		ЭтотОбъект, 
		УникальныйИдентификатор,
		,
		, 
		ОбработчикЗакрытия,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НачалоДействияВыборЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	Если ВыбранныйПериод <> Неопределено Тогда
		Объект.НачалоДействия = ВыбранныйПериод;
		НачалоДействияСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ВыбранныйПериод);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачалоДействияСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.НачалоДействия = ДобавитьМесяц(Объект.НачалоДействия, Направление);
	НачалоДействияСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.НачалоДействия);
КонецПроцедуры

&НаКлиенте
Процедура НачалоДействияСтрокаОчистка(Элемент, СтандартнаяОбработка)
	Объект.НачалоДействия = "";
КонецПроцедуры

&НаКлиенте
Процедура КонецДействияСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("КонецДействияВыборЗавершение", ЭтотОбъект);
	ПараметрыФормы 	   = Новый Структура("Значение, РежимВыбораПериода", Объект.КонецДействия, "МЕСЯЦ");
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		ПараметрыФормы, 
		ЭтотОбъект, 
		УникальныйИдентификатор,
		,
		, 
		ОбработчикЗакрытия,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КонецДействияВыборЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	Если ВыбранныйПериод <> Неопределено Тогда
		Объект.КонецДействия = ВыбранныйПериод;
		Если ЗначениеЗаполнено(Объект.КонецДействия) Тогда
			Объект.КонецДействия = КонецМесяца(Объект.КонецДействия);
		КонецЕсли;
		КонецДействияСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ВыбранныйПериод);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонецДействияСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.КонецДействия = ДобавитьМесяц(Объект.КонецДействия, Направление);
	КонецДействияСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.КонецДействия);
КонецПроцедуры

&НаКлиенте
Процедура КонецДействияСтрокаОчистка(Элемент, СтандартнаяОбработка)
	Объект.КонецДействия = "";
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборОстатковГиперссылкаНажатие(Элемент)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НеПомещатьНастройкиВСхемуКомпоновкиДанных", Истина);
	ПараметрыФормы.Вставить("НеЗагружатьСхемуКомпоновкиДанныхИзФайла", Истина);
	ПараметрыФормы.Вставить("НеНастраиватьПараметры", Истина);
	ПараметрыФормы.Вставить("НеРедактироватьСхемуКомпоновкиДанных", Истина);
	ПараметрыФормы.Вставить("НеНастраиватьУсловноеОформление", Истина);
	ПараметрыФормы.Вставить("НеНастраиватьВыбор", Истина);
	ПараметрыФормы.Вставить("НеНастраиватьПорядок", Истина);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных", АдресНастроекКД);
	ПараметрыФормы.Вставить("Заголовок", "Отбор");
	
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("НастроитьОтборОстатковЗавершение",
			ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Открытие(Элемент, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиент.ПриОткрытии(ЭтотОбъект, Объект, Элемент, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьЗаголовкиПолей()
	
	ПредставлениеГиперссылокОтбора = Новый Соответствие();
	ПредставлениеГиперссылокОтбора.Вставить(Истина, НСтр("ru = 'Отбор установлен, изменить';
														|en = 'Filter is set, change'"));
	ПредставлениеГиперссылокОтбора.Вставить(Ложь, НСтр("ru = 'Отбор не установлен, добавить';
														|en = 'Filter not set, add'"));
	
	ОтборУстановлен = Объект.ВерсияНастроекОтбора > 0;
	Элементы.НастроитьОтборОстатковГиперссылка.Заголовок = ПредставлениеГиперссылокОтбора.Получить(ОтборУстановлен);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборОстатковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	АдресНастроекКД = Результат;
	
	НастроитьОтборОстатковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОбъекта()
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтборОстатковНаСервере()
	НастройкиКД = ПолучитьИзВременногоХранилища(АдресНастроекКД);
	Объект.ПредставлениеОтбора = Строка(НастройкиКД.Отбор);
	Если ОтборУстановлен(НастройкиКД) Тогда
		Объект.ВерсияНастроекОтбора = Объект.ВерсияНастроекОтбора + 1;
	Иначе
		Объект.ВерсияНастроекОтбора = 0;
	КонецЕсли;
	НастроитьЗаголовкиПолей();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтборУстановлен(НовыеНастройки)
	
	ОтборУстановлен = Ложь;
	НастройкиКомпоновщика = НовыеНастройки; // НастройкиКомпоновкиДанных
	Для Каждого ЭлементОтбора Из НастройкиКомпоновщика.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			
			ОтборУстановлен = Истина;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПараметрДанных Из НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
		
		Если (ТипЗнч(ПараметрДанных.Значение) = Тип("Булево") 
			И ПараметрДанных.Значение) Или ОтборУстановлен Тогда
			
			ОтборУстановлен = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтборУстановлен;
	
КонецФункции

&НаСервере
Функция ИзмененыКлючевыеРеквизитыПравила()
	
	Если Объект.Ссылка.Пустая() Тогда
		ПериодФормированияЗаданий = Объект.НачалоДействия;
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Правило.Ссылка,
	|	Правило.КонецДействия
	|ИЗ
	|	Справочник.ПравилаФормированияРезервовПодОбесценениеЗапасов КАК Правило
	|ГДЕ
	|	Правило.Ссылка = &Ссылка
	|	И (Правило.Владелец <> &Владелец
	|		ИЛИ Правило.ВидЦены <> &ВидЦены
	|		ИЛИ Правило.НачалоДействия <> &НачалоДействия
	|		ИЛИ Правило.КонецДействия <> &КонецДействия
	|		ИЛИ Правило.РегламентированныйУчет <> &РегламентированныйУчет
	|		ИЛИ Правило.УправленческийУчет <> &УправленческийУчет
	|		ИЛИ Правило.Приоритет <> &Приоритет
	|		ИЛИ Правило.ВерсияНастроекОтбора <> &ВерсияНастроекОтбора
	|	)
	|");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Владелец", Объект.Владелец);
	Запрос.УстановитьПараметр("ВидЦены", Объект.ВидЦены);
	Запрос.УстановитьПараметр("НачалоДействия", Объект.НачалоДействия);
	Запрос.УстановитьПараметр("КонецДействия", Объект.КонецДействия);
	Запрос.УстановитьПараметр("РегламентированныйУчет", Объект.РегламентированныйУчет);
	Запрос.УстановитьПараметр("УправленческийУчет", Объект.УправленческийУчет);
	Запрос.УстановитьПараметр("Приоритет", Объект.Приоритет);
	Запрос.УстановитьПараметр("ВерсияНастроекОтбора", Объект.ВерсияНастроекОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		// Если новое окончание действия правила больше предыдущего, то задания нужно будет сформировать 
		// начиная с предыдущей даты окончания.     
		Если ЗначениеЗаполнено(Выборка.КонецДействия) 
		 И Выборка.КонецДействия < Объект.КонецДействия 
		 ИЛИ Не ЗначениеЗаполнено(Объект.КонецДействия) Тогда
			ПериодФормированияЗаданий = Выборка.КонецДействия;
			
		// Если новое окончание действия правила меньше предудущего, то задания нужно будет сформировать
		// начиная со следующего месяца после даты окончания.
		ИначеЕсли ЗначениеЗаполнено(Объект.КонецДействия) 
		 И Выборка.КонецДействия > Объект.КонецДействия
		 ИЛИ Не ЗначениеЗаполнено(Выборка.КонецДействия) Тогда
			ПериодФормированияЗаданий = ДобавитьМесяц(Объект.КонецДействия, 1);
		Иначе
			ПериодФормированияЗаданий = Объект.НачалоДействия;
		КонецЕсли;
		ИзмененыКлючевыеРеквизиты = Истина;
	Иначе
		ИзмененыКлючевыеРеквизиты = Ложь;
	КонецЕсли; 
	
	Возврат ИзмененыКлючевыеРеквизиты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьЗаданияКРасчетуСебестоимостиКЗакрытиюМесяца(Организация, Период)
	
	ПериодПервыхДвижений = ПартионныйУчетСервер.ПериодПервыхДвиженийПартионныйУчетВерсии22();
	Если ПериодПервыхДвижений > Период Тогда
		Период = ПериодПервыхДвижений;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Задания.Месяц
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|ГДЕ
	|	Задания.Организация = &Организация
	|	И Задания.Месяц <= &Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Задания.Месяц
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеРезервовПодОбесценениеЗапасов)
	|	И Задания.Организация = &Организация
	|	И Задания.Месяц <= &Период
	|");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", НачалоМесяца(Период));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Следующий();
	
КонецФункции

#КонецОбласти
