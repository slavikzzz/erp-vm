
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	ОбновитьДатуЗапретаОтраженияНаСервере();
	
	ВидПериода = Перечисления.ДоступныеПериодыОтчета.Год;
	НачалоПериода = НачалоГода(ТекущаяДатаСеанса());
	КонецПериода = КонецГода(ТекущаяДатаСеанса());
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокВидовОтчетов.Отбор, "КомплектОтчетности", 0, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЭкземпляров.Отбор, "ВидОтчета", 0, ВидСравненияКомпоновкиДанных.Равно,, Истина);

	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	СписокТипов = СписокКомплектов.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка")).Тип;
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = СписокТипов;
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаИзменениеПорядка;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.КнопкаСравнитьЭкземпляры.Заголовок = НСтр("ru = 'Сравнить экземпляры (Тонкий клиент)';
															|en = 'Compare copies (Thin client)'");
		Элементы.КнопкаСравнитьЭкземпляры.Доступность = Ложь;
	#КонецЕсли
	
	ОчиститьСообщения();
	Если НЕ ЗавершеноОбновлениеОбъектовМФУ() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Формирование комплектов отчетов невозможно т.к. не завершено обновление объектов международного учета. Попробуйте позже.';
				|en = 'Cannot generate report sets as the update of general ledger objects is not completed. Try again later.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаДатаЗапретаФормированияПроводок" Тогда
		ОбновитьДатуЗапретаОтраженияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусКомплектаОтчетностиПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКомплектов.Отбор, "Статус", СтатусКомплектаОтчетности, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СтатусКомплектаОтчетности));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСпискаКомплектов

&НаКлиенте
Процедура СписокКомплектовПриАктивизацииСтроки(Элемент)
	
	ЭтаФорма.ПодключитьОбработчикОжидания("СписокКомплектовПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСпискаВидовОтчетов

&НаКлиенте
Процедура СписокВидовОтчетовПриАктивизацииСтроки(Элемент)
	
	ЭтаФорма.ПодключитьОбработчикОжидания("СписокВидовОтчетовПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСпискаЭкземпляров

&НаКлиенте
Процедура СписокЭкземпляровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.СписокВидовОтчетов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СформироватьОтчеты(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЭкземпляровПриАктивизацииСтроки(Элемент)
	
	#Если НЕ ВебКлиент Тогда
	Элементы.КнопкаСравнитьЭкземпляры.Доступность = Элементы.СписокЭкземпляров.ВыделенныеСтроки.Количество() > 1;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВидОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", ВыбраннаяСтрока);
	ПараметрыФормы.Вставить("КомплектОтчетности", Элементы.СписокКомплектов.ТекущиеДанные.Ссылка);
	ОткрытьФорму("Справочник.ВидыФинансовыхОтчетов.Форма.ФормаЭлемента",ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКомплект(Команда)
	
	ТекущиеДанные = Элементы.СписокКомплектов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СформироватьОтчеты(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьЭкземпляры(Команда)
	
	#Если НЕ ВебКлиент Тогда
		ОтчетыСравнения = ОтчетыДляСравнения(); 
		Если ОтчетыСравнения <> Неопределено Тогда
			
			ТабличныеДокументы = Новый Структура("Левый, Правый", ОтчетыСравнения[0].Результат, ОтчетыСравнения[1].Результат);
			АдресТабличныхДокументов = ПоместитьВоВременноеХранилище(ТабличныеДокументы, УникальныйИдентификатор);
			
			Отчет1 = ОтчетыСравнения[0]; // см. НовоеОписаниеОтета
			Отчет2 = ОтчетыСравнения[1]; // см. НовоеОписаниеОтета
			ПараметрыОткрытияФормы = Новый Структура("АдресТабличныхДокументов, ЗаголовокЛевый, ЗаголовокПравый", 
				АдресТабличныхДокументов, Отчет1.Заголовок, Отчет2.Заголовок);
			
			ОткрытьФорму("ОбщаяФорма.СравнениеТабличныхДокументов",
				ПараметрыОткрытияФормы, ЭтаФорма, Новый УникальныйИдентификатор);
			
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ОтчетыДляСравнения()
	
	Если Элементы.СписокЭкземпляров.ВыделенныеСтроки.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОтчетыСравнения = Новый Массив;
	Для Индекс = 0 По 1 Цикл
		
		Экземпляр = Элементы.СписокЭкземпляров.ВыделенныеСтроки[Индекс];
		ХранилищеРезультата = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Экземпляр,"РезультатОтчета"); //ХранилищеЗначения
		РезультатОтчета = ХранилищеРезультата.Получить();
		Если РезультатОтчета = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОписаниеОтчета = НовоеОписаниеОтета();
		ОписаниеОтчета.Результат = ПоместитьВоВременноеХранилище(РезультатОтчета, УникальныйИдентификатор);
		ОписаниеОтчета.Заголовок = Строка(Экземпляр);
		
		ОтчетыСравнения.Добавить(ОписаниеОтчета);
		
	КонецЦикла;
	Возврат ОтчетыСравнения;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДатуЗапрета(Команда)
	
	ОткрытьФорму("РегистрСведений.ДатыЗапретаФормированияПроводокМеждународныйУчет.Форма.ДатыЗапретаФормирования", , ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СписокКомплектов);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СписокКомплектов, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, СписокКомплектов.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ОбработчикиОжидания

&НаКлиенте
Процедура СписокКомплектовПриАктивизацииСтрокиОбработчикОжидания()
	
	ТекущийКомплект = Элементы.СписокКомплектов.ТекущаяСтрока;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокВидовОтчетов.Отбор, "КомплектОтчетности", ТекущийКомплект, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
	ТекущийВидОтчета = Элементы.СписокВидовОтчетов.ТекущаяСтрока;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЭкземпляров.Отбор, "КомплектОтчетности", ТекущийКомплект, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЭкземпляров.Отбор, "ВидОтчета", ТекущийВидОтчета, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВидовОтчетовПриАктивизацииСтрокиОбработчикОжидания()
	
	ТекущийВидОтчета = Элементы.СписокВидовОтчетов.ТекущаяСтрока;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЭкземпляров.Отбор, "ВидОтчета", ТекущийВидОтчета, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачалоПериодаДействия.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОкончаниеПериодаДействия.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭкземплярыОтчетов.НачалоПериода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭкземплярыОтчетов.ОкончаниеПериода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "Л=ru; ДЛФ=D");

КонецПроцедуры

#Область Прочее

&НаКлиенте
Процедура СформироватьОтчеты(СсылкаНаОбъект)
	
	ПараметрыФормы = Новый Структура("ПараметрыЭкземпляров", ПараметрыФормированияОтчета(СсылкаНаОбъект));
	ГенераторОтчета = Новый ОписаниеОповещения("СформироватьОтчетыЗавершение", ЭтаФорма, СсылкаНаОбъект);
	ОткрытьФорму("Справочник.КомплектыФинансовыхОтчетов.Форма.ФормаПараметровОтчета", ПараметрыФормы, ЭтаФорма,,,,ГенераторОтчета);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормированияОтчета(СсылкаНаОбъект)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПланыСчетов.ПланСчетов КАК ПланСчетов
	|ИЗ
	|	Справочник.КомплектыФинансовыхОтчетов.ПланыСчетов КАК ТаблицаПланыСчетов
	|ГДЕ
	|	ТаблицаПланыСчетов.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПланыСчетов.ПланСчетов КАК ПланСчетов
	|ИЗ
	|	Справочник.ВидыФинансовыхОтчетов.ПланыСчетов КАК ТаблицаПланыСчетов
	|ГДЕ
	|	ТаблицаПланыСчетов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ПланыСчетовКомплекта = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПланСчетов");
	
	ПараметрыЭкземпляров = МеждународнаяОтчетностьКлиентСервер.НовыеПараметрыФормированияОтчета();
	ПараметрыЭкземпляров.Ресурс = "Сумма";
	ПараметрыЭкземпляров.ПланыСчетов = ПланыСчетовКомплекта;
	ПараметрыЭкземпляров.ОткрытьФормы = ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.КомплектыФинансовыхОтчетов");
	
	ЗаполнитьЗначенияСвойств(ПараметрыЭкземпляров, ЭтаФорма,,"ОткрытьФормы");
	
	Возврат ПараметрыЭкземпляров; 
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетыЗавершение(ПараметрыЭкземпляров, НаборОтчетов) Экспорт
	
	Если ПараметрыЭкземпляров = Неопределено
		ИЛИ ПараметрыЭкземпляров = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыЭкземпляров);
	
	СоздатьВФоновомЗаданииНаСервере(НаборОтчетов);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВФоновомЗаданииНаСервере(НаборОтчетов)
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = 'Создание комплектов отчетов';
								|en = 'Reports sets creation'");
	ИмяПроцедуры        = "МеждународнаяОтчетностьСервер.СформироватьКомплектОтчетов";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыМетода = ПодготовитьПараметрыЭкземпляров(НаборОтчетов);;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;

КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыЭкземпляров(НаборОтчетов)
	
	Если ТипЗнч(НаборОтчетов) = Тип("СправочникСсылка.КомплектыФинансовыхОтчетов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВидыОтчетов.ВидФинансовогоОтчета КАК ВидФинансовогоОтчета
		|ИЗ
		|	Справочник.КомплектыФинансовыхОтчетов.ВидыОтчетов КАК ВидыОтчетов
		|ГДЕ
		|	ВидыОтчетов.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", НаборОтчетов);
		ВидыОтчетов = ОбщегоНазначения.ВыгрузитьКолонку(Запрос.Выполнить().Выгрузить(), "ВидФинансовогоОтчета");
		
	Иначе
		ВидыОтчетов = Новый Массив;
		ВидыОтчетов.Добавить(НаборОтчетов);
	КонецЕсли;
	
	ТекущийКомплект = Элементы.СписокКомплектов.ТекущаяСтрока;
	ПараметрыЭкземпляров = Новый Структура;
	ПараметрыЭкземпляров.Вставить("ИдентификаторГлавногоХранилища", УникальныйИдентификатор);
	ПараметрыЭкземпляров.Вставить("КомплектОтчетности", ТекущийКомплект);
	ПараметрыЭкземпляров.Вставить("ВидыОтчетов", ВидыОтчетов);
	ПараметрыЭкземпляров.Вставить("НаборОтчетов", НаборОтчетов);
	
	ЭкземплярыОтчетов = Новый Соответствие;
	Для Каждого ВидОтчета Из ВидыОтчетов Цикл
		Адрес = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ЭкземплярыОтчетов.Вставить(ВидОтчета, Адрес);
	КонецЦикла;
	ПараметрыЭкземпляров.Вставить("ЭкземплярыОтчетов", ЭкземплярыОтчетов);
	
	ПериодОтчета = Новый Структура("НачалоПериода, КонецПериода");
	ПериодОтчета.НачалоПериода = НачалоПериода;
	ПериодОтчета.КонецПериода = КонецПериода;
	ПараметрыЭкземпляров.Вставить("ПериодОтчета", ПериодОтчета);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("Подразделение", Подразделение);
	Отбор.Вставить("НаправлениеДеятельности", НаправлениеДеятельности);
	ПараметрыЭкземпляров.Вставить("Отбор", Отбор);
	
	ПараметрыЭкземпляров.Вставить("ВидОтчета", Неопределено);
	ПараметрыЭкземпляров.Вставить("РезультатОтчета", Неопределено);
	ПараметрыЭкземпляров.Вставить("Ресурс", Ресурс);
	ПараметрыЭкземпляров.Вставить("Валюта", Валюта);
	ПараметрыЭкземпляров.Вставить("ВыводитьКодСтроки", Ложь);
	ПараметрыЭкземпляров.Вставить("ВыводитьПримечание", Ложь);
	ПараметрыЭкземпляров.Вставить("ЗаголовокКодаСтроки", "");
	ПараметрыЭкземпляров.Вставить("ЗаголовокПримечания", "");
	ПараметрыЭкземпляров.Вставить("ЯзыкОтчета", "");
	ПараметрыЭкземпляров.Вставить("КратностьСумм", КратностьСумм);
	ПараметрыЭкземпляров.Вставить("ОткрытьФормы", ОткрытьФормы);
	ПараметрыЭкземпляров.Вставить("ДатаФормированияОтчета", ТекущаяДатаСеанса());
	
	Возврат ПараметрыЭкземпляров;
	
КонецФункции

&НаКлиенте
Процедура СоздатьКомплектЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатСоздания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если РезультатСоздания <> Неопределено 
		И (ТипЗнч(РезультатСоздания.НаборОтчетов) = Тип("СправочникСсылка.ВидыФинансовыхОтчетов")
			ИЛИ РезультатСоздания.ОткрытьФормы) Тогда
		
		Для Каждого Экземпляр Из РезультатСоздания.ДанныеЭкземпляров Цикл
			ПараметрыФормы = Новый Структура("АдресХранилища, СформироватьОтчет", Экземпляр.Ключ, Ложь);
			ПараметрыФормы.Вставить("ПользовательскиеНастройки", Экземпляр.Значение);
			ОткрытьФорму("Отчет.МеждународныйОтчет.Форма.ФормаОтчета", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.СписокЭкземпляров.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКомплектовПриИзменении(Элемент)
	
	Элементы.СписокВидовОтчетов.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуЗапретаОтраженияНаСервере()
	
	ДатаЗапрета = МеждународныйУчетОбщегоНазначения.ДатаЗапретаФормированияПроводок();
	Элементы.УстановитьДатуЗапрета.Заголовок = МеждународныйУчетОбщегоНазначения.ПредставлениеКомандыУстановитьДатуЗапрета(ДатаЗапрета);
	
КонецПроцедуры

// Возвращаемое значение:
// 	Структура - Описание:
// * Заголовок - Строка -  
// * Результат - Строка - 
&НаСервере
Функция НовоеОписаниеОтета()
	
	Возврат Новый Структура("Заголовок,Результат");
	
КонецФункции

#Область ОбслуживаниеДлительныхОпераций

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Если ЗначениеЗаполнено(ИдентификаторЗадания) И ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Элементы.СписокЭкземпляров.Обновить();
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СоздатьКомплектЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗавершеноОбновлениеОбъектовМФУ()
	
	Результат = Истина;
	
	Если НЕ Константы.ОтложенноеОбновлениеЗавершеноУспешно.Получить() Тогда
		
		ОбъектыМФУ = Новый Массив;
		ОбъектыМФУ.Добавить(Метаданные.Справочники.ПланыСчетовМеждународногоУчета);
		ОбъектыМФУ.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов);
		ОбъектыМФУ.Добавить(Метаданные.Справочники.ВидыФинансовыхОтчетов);
		ОбъектыМФУ.Добавить(Метаданные.РегистрыБухгалтерии.Международный);
		ОбъектыМФУ.Добавить(Метаданные.РегистрыБухгалтерии.МеждународныйБезКорреспонденции);
		
		ЕстьОбъектыМФУКОбновлению = ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ОбъектыМФУ);
		
		Элементы.СформироватьКомплект.Доступность = НЕ ЕстьОбъектыМФУКОбновлению;
		Элементы.СписокКомплектов.ИзменятьСоставСтрок = НЕ ЕстьОбъектыМФУКОбновлению;
		Элементы.СписокЭкземпляров.ИзменятьСоставСтрок = НЕ ЕстьОбъектыМФУКОбновлению;
		
		Результат = НЕ ЕстьОбъектыМФУКОбновлению;
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
