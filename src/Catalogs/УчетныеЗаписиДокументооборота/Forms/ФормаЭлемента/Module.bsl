&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	ИнициализацияТаблицыНастроекПользователей(ЭтоНовый);
	СписокОрганизаций = СписокОрганизаций();
	
	Если ЭтоНовый Тогда
		
		Объект.ДатаПодключения = ТекущаяДатаСеанса();
		
		ПортPOP3 = 110;
		ПортSMTP = 25;
		
		Если НЕ ЗначениеЗаполнено(Объект.РежимАвтонастройки) Тогда
			РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиНалогоплательщика.Отключена;
			ИспользоватьСервисОнлайнПроверкиОтчетов = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПредназначенаДляДокументооборотаСПФР.Заголовок = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(
		Элементы.ПредназначенаДляДокументооборотаСПФР.Заголовок, Истина);
	Элементы.ПредназначенаДляДокументооборотаСПФР.Подсказка = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(
		Элементы.ПредназначенаДляДокументооборотаСПФР.Подсказка, Истина);
	
	ЗаполнитьСтруктуруСсылочныхДанных();
	
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦБСуществует() Тогда
		ИмяСправочникаМашиночитаемыеДоверенностиЦБ = "МашиночитаемыеДоверенностиЦБ";
		Элементы.ДоверенностьЦБ.ОграничениеТипа =
			Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаМашиночитаемыеДоверенностиЦБ);
		
	Иначе
		Элементы.ПредназначенаДляДокументооборотаСЦБ.Видимость = Ложь;
		Элементы.ДоверенностьЦБ.Видимость = Ложь;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если НЕ ЭтоНовый Тогда
		ОбновитьТаблицуСертификатыЛичные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// инициализируем контекст формы - контейнера клиентских методов
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
    ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = Объект.АдресЭлектроннойПочты;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбменНапрямуюПриИзменении(Элемент)
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредназначенаДляДокументооборотаСФНСПриИзменении(Элемент)
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатРуководителяПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения(
		"СертификатРуководителяПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент));

	КриптографияЭДКОКлиент.ВыбратьСертификат(
		Оповещение, ПолучитьМестоХраненияКлюча(), Объект.СертификатРуководителя, "MY");
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатРуководителяПредставлениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат.Выполнено Тогда
		Объект.СертификатРуководителя = Результат.ВыбранноеЗначение.Отпечаток;
		
		КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
			ПолучитьМестоХраненияКлюча(), 
			Элементы.СертификатРуководителяПредставление, 
			Объект.СертификатРуководителя, 
			ЭтотОбъект,
			"СертификатРуководителяПредставление");
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатРуководителяПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.СертификатРуководителя = "";
	
	КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
		ПолучитьМестоХраненияКлюча(), 
		Элементы.СертификатРуководителяПредставление, 
		Объект.СертификатРуководителя, 
		ЭтотОбъект,
		"СертификатРуководителяПредставление");
		
	Модифицированность = Истина;
	
КонецПроцедуры
		
&НаКлиенте
Процедура СертификатРуководителяПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьСертификатПоОтпечатку(Объект.СертификатРуководителя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатГлавногоБухгалтераПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения(
		"СертификатГлавногоБухгалтераПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент));

	КриптографияЭДКОКлиент.ВыбратьСертификат(
		Оповещение, ПолучитьМестоХраненияКлюча(), Объект.СертификатГлавногоБухгалтера, "MY");
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатГлавногоБухгалтераПредставлениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат.Выполнено Тогда
		Объект.СертификатГлавногоБухгалтера = Результат.ВыбранноеЗначение.Отпечаток;
		
		КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
			ПолучитьМестоХраненияКлюча(), 
			Элементы.СертификатГлавногоБухгалтераПредставление, 
			Объект.СертификатГлавногоБухгалтера, 
			ЭтотОбъект,
			"СертификатГлавногоБухгалтераПредставление");
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатГлавногоБухгалтераПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.СертификатГлавногоБухгалтера = "";
	
	КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
		ПолучитьМестоХраненияКлюча(), 
		Элементы.СертификатГлавногоБухгалтераПредставление, 
		Объект.СертификатГлавногоБухгалтера, 
		ЭтотОбъект,
		"СертификатГлавногоБухгалтераПредставление");
		
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатГлавногоБухгалтераПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьСертификатПоОтпечатку(Объект.СертификатГлавногоБухгалтера, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатШифрованиеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения(
		"СертификатШифрованиеПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент));

	КриптографияЭДКОКлиент.ВыбратьСертификат(
		Оповещение, ПолучитьМестоХраненияКлюча(), Объект.СертификатДляШифрования, "MY");
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатШифрованиеПредставлениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат.Выполнено Тогда
		Объект.СертификатДляШифрования = Результат.ВыбранноеЗначение.Отпечаток;
		
		КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
			ПолучитьМестоХраненияКлюча(), 
			Элементы.СертификатШифрованиеПредставление, 
			Объект.СертификатДляШифрования, 
			ЭтотОбъект,
			"СертификатШифрованиеПредставление");
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатШифрованиеПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.СертификатДляШифрования = "";
	
	КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
		ПолучитьМестоХраненияКлюча(), 
		Элементы.СертификатШифрованиеПредставление, 
		Объект.СертификатДляШифрования, 
		ЭтотОбъект,
		"СертификатШифрованиеПредставление");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатШифрованиеПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьСертификатПоОтпечатку(Объект.СертификатДляШифрования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредназначенаДляДокументооборотаСПФРПриИзменении(Элемент)
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторСпецоператораСвязиПриИзменении(Элемент)
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредназначенаДляДокументооборотаСФСГСПриИзменении(Элемент)
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура СерверДокументооборотаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СерверДокументооборота)
	И (ПустаяСтрока(Объект.СерверSMTP) ИЛИ ПустаяСтрока(Объект.СерверPOP3)) Тогда
		АдресСервера = ПолучитьДоменноеИмяПоСерверуДокументооборота(Объект.СерверДокументооборота);
		Если НЕ ПустаяСтрока(АдресСервера) Тогда
			Если ПустаяСтрока(Объект.СерверSMTP) Тогда
				Объект.СерверSMTP = АдресСервера;
			КонецЕсли;
			Если ПустаяСтрока(Объект.СерверPOP3) Тогда
				Объект.СерверPOP3 = АдресСервера;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерверSMTPПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.СерверPOP3) Тогда
		Объект.СерверPOP3 = Объект.СерверSMTP;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяSMTPПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.ИмяПользователяPOP3) Тогда
		Объект.ИмяПользователяPOP3 = Объект.ИмяПользователяSMTP;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СерверPOP3ПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.СерверSMTP) Тогда
		Объект.СерверSMTP = Объект.СерверPOP3;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяPOP3ПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.ИмяПользователяSMTP) И Объект.ТребуетсяSMTPАутентификация Тогда
		Объект.ИмяПользователяSMTP = Объект.ИмяПользователяPOP3;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = Объект.АдресЭлектроннойПочты;
	КонецЕсли;
	
	ВхождениеРазделителя = СтрНайти(Объект.АдресЭлектроннойПочты, "@");
	Если ВхождениеРазделителя = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПользователяИзАдреса = СокрЛП(Лев(Объект.АдресЭлектроннойПочты, ВхождениеРазделителя - 1));
	Если ПустаяСтрока(Объект.СерверPOP3) Тогда
		Объект.ИмяПользователяPOP3 = ИмяПользователяИзАдреса;
	КонецЕсли;
	Если Объект.ТребуетсяSMTPАутентификация И ПустаяСтрока(Объект.СерверSMTP) Тогда
		Объект.ИмяПользователяSMTP = ИмяПользователяИзАдреса;
	КонецЕсли;
	
	АдресСервера = СокрЛП(Сред(Объект.АдресЭлектроннойПочты, ВхождениеРазделителя + 1));
	Если ПустаяСтрока(Объект.СерверSMTP) Тогда
		Объект.СерверSMTP = АдресСервера;
	КонецЕсли;
	Если ПустаяСтрока(Объект.СерверPOP3) Тогда
		Объект.СерверPOP3 = АдресСервера;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторАбонентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторСпецоператора) И СтрДлина(СокрЛП(Объект.ИдентификаторАбонента)) > 3 Тогда
		Объект.ИдентификаторСпецоператора = Лев(СокрЛП(Объект.ИдентификаторАбонента), 3);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПользователейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗакрытьФорму = Ложь;
	
	Если Объект.ЭтоМультиРежим Тогда
		
		МультирежимКлиент.ОткрытьПраваПользователей(ЭтотОбъект);
		
	Иначе
	
		ДополнительныеПараметры = Новый Структура("ЗакрытьФорму", ЗакрытьФорму);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтметитьПользователейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		СписокПользователей.ПоказатьОтметкуЭлементов(ОписаниеОповещения, "Выберите пользователей");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяSMTPАутентификацияПриИзменении(Элемент)
	
	УправлениеДоступностьюНастроекSMTP();
	ОписаниеОповещения = Новый ОписаниеОповещения("ТребуетсяSMTPАутентификацияПриИзмененииЗавершение", ЭтотОбъект);
	ТекстВопроса = "Параметры авторизации SMTP-сервера совпадают с параметрами авторизации POP3-сервера?";
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьЦБНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СсылкиНаОрганизации.Количество() = 1 Тогда
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Организация", СсылкиНаОрганизации[0].Значение));
	Иначе
		ПараметрыФормы = Неопределено;
	КонецЕсли;
	
	ИмяСправочникаМашиночитаемыеДоверенностиЦБ = "МашиночитаемыеДоверенностиЦБ";
	ОписаниеОповещения = Новый ОписаниеОповещения("ДоверенностьНачалоВыбораПослеВыбора", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник." + ИмяСправочникаМашиночитаемыеДоверенностиЦБ + ".ФормаВыбора",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификатПоОтпечатку(Отпечаток, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Отпечаток) Тогда
		ДанныеСертификата = Новый Структура();
		ДанныеСертификата.Вставить("Отпечаток", Отпечаток);
		КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Объект, ДанныеСертификата);
		
		КриптографияЭДКОКлиент.ПоказатьСертификат(ДанныеСертификата);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыПользователи() Экспорт
	
	УчетнаяЗапись = Объект.Ссылка;
	Возврат Мультирежим.ПараметрыФормыПользователиНеИзЗаявления(ЭтотОбъект, УчетнаяЗапись);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьСертификат(Команда)
	
	ДвДанные = ДвДанныеСертификатаMY(Объект.Ссылка);
	
	Если ДвДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Адрес    = ПоместитьВоВременноеХранилище(ДвДанные, Новый УникальныйИдентификатор);
	ИмяФайла = ИмяФайлаСертификата(ДвДанные);
	
	СохраняемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяФайла, Адрес); 
	ОперацииСФайламиЭДКОКлиент.СохранитьФайлы(СохраняемыйФайл);
	
КонецПроцедуры

&НаСервере
Функция ИмяФайлаСертификата(ДвДанные)

	СвойстваСертификата = Новый СертификатКриптографии(ДвДанные);
	ИмяФайла = ДокументооборотСКОКлиентСервер.ПредставлениеСертификата(СвойстваСертификата);
	
	ИмяФайла = ОбщегоНазначенияЭДКОКлиентСервер.ЗаменитьЗапрещенныеСимволыВИмениФайла(ИмяФайла, "");
	
	Возврат ИмяФайла + ".cer";

КонецФункции 

&НаСервере
Функция ДвДанныеСертификатаMY(УчетнаяЗапись) Экспорт
	
	// Из кэша
	ДвДанные = ТекущийСертификатУчетнойЗаписи(УчетнаяЗапись, Ложь);
	
	Если ДвДанные = Неопределено Тогда
		// С сервера
		ДвДанные = ТекущийСертификатУчетнойЗаписи(УчетнаяЗапись, Истина);
	КонецЕсли;
	
	Если ДвДанные = Неопределено Тогда
		Текст = НСтр("ru = 'Не удалось получить файл автонастройки';
					|en = 'Cannot receive the auto setup file'");
		ОбщегоНазначения.СообщитьПользователю(Текст);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДвДанные;
	
КонецФункции

&НаСервере
Функция ТекущийСертификатУчетнойЗаписи(УчетнаяЗапись, ОбновитьСертификатИзИнтернета) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если ОбновитьСертификатИзИнтернета Тогда
		
		Оператор              = УчетнаяЗапись.СпецоператорСвязи;
		ИдентификаторАбонента = Сред(УчетнаяЗапись.ИдентификаторАбонента, 4);
		Результат             = КонтекстЭДОСервер.ПолучитьФайлАвтонастройки(Оператор, ИдентификаторАбонента);
		
		Если Результат.Выполнено Тогда
			АдресДанных = Результат.Настройки;
		Иначе
			// Если не получилось загрузить из сети, пытаемся получить из кэша
			АдресДанных = КонтекстЭДОСервер.АдресДанныхФайлаАвтонастройки(УчетнаяЗапись);
		КонецЕсли;
		
	Иначе
		
		АдресДанных = КонтекстЭДОСервер.АдресДанныхФайлаАвтонастройки(УчетнаяЗапись);
		
	КонецЕсли;
	
	Сертификат = Мультирежим.СертификатПользователя(УчетнаяЗапись);
	Если НЕ Сертификат.Найден Тогда
		ВызватьИсключение Сертификат.ТекстОшибки;
	КонецЕсли;
	
	ДвДанныеСертификата = КонтекстЭДОСервер.СертификатMYИзФайлаАвтонастройки(АдресДанных, Сертификат.Отпечаток);
	Возврат ДвДанныеСертификата;
	
КонецФункции

&НаКлиенте
Процедура НастроитьАвтоматическиСейчас(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьАвтоматическиСейчасЗавершение", ЭтотОбъект);
		ТекстВопроса = "В текущей форме были произведены изменения, которые необходимо применить перед настройкой.
			|Применить изменения?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		НастроитьАвтоматическиСейчасПослеСохранения();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасширенныеНастройки(Команда)
	
	СтруктураПараметров = Новый Структура("СправочникОбъект", Объект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьРасширенныеНастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.РасширенныеНастройкиУчетнойЗаписи", СтруктураПараметров,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПараметрыДоступа(Команда)
	
	Если ПараметрыДоступаВерны() Тогда
		ПоказатьПредупреждение(, "Проверка параметров доступа успешно пройдена.");
	Иначе
		ПоказатьПредупреждение(, "Проверка параметров доступа НЕ пройдена!");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСведенияОЛицензии(Команда)
	
	ПараметрыФормы = Новый Структура("Ключ", Объект.Ссылка);
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ДанныеПоЛицензииНа1СОтчетность", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлАвтонастройки(Команда)
	КонтекстЭДОКлиент.СохранитьФайлАвтонастройки(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыУчетнойЗаписи(Команда)
	
	Парам = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("УчетнаяЗапись", Объект.Ссылка);
	Парам.Вставить("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписи.ФормаСписка", Парам);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыУчетнойЗаписиПолучатели(Команда)
	
	Парам = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("УчетнаяЗапись", Объект.Ссылка);
	Парам.Вставить("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписиПолучатели.ФормаСписка", Парам);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСведенийСпецоператоры(Команда)
	
	Парам = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("УчетнаяЗапись", Объект.Ссылка);
	Парам.Вставить("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ФайлыСведенийСпецоператоры.ФормаСписка", Парам);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиУчетнойЗаписи(Команда)
	
	Парам = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("УчетнаяЗапись", Объект.Ссылка);
	Парам.Вставить("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ПользователиУчетныхЗаписейДокументооборота.ФормаСписка", Парам);
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваПользователя(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("УчетнаяЗапись", Объект.Ссылка);
	Отбор.Вставить("Пользователь", ТекущийПользователь);
	
	МассивСтруктураЗаписи = Новый Массив;
	МассивСтруктураЗаписи.Добавить(Отбор);
	КлючЗаписи = Новый ("РегистрСведенийКлючЗаписи.ПользователиУчетныхЗаписейДокументооборота", МассивСтруктураЗаписи);
	
	Попытка
	
		Параметрыформы = Новый Структура("Ключ", КлючЗаписи);                            
		ОткрытьФорму("РегистрСведений.ПользователиУчетныхЗаписейДокументооборота.ФормаЗаписи", Параметрыформы);
	
	Исключение
		
		Текст = НСтр("ru = 'Текущий пользователь (%1) не имеет доступа к данной учетной записи.';
					|en = 'The current user (%1) does not have access to this account.'");
		Текст = СтрШаблон(Текст, ТекущийПользователь);
		
		ПоказатьПредупреждение(, Текст);
		
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПриглашения(Команда)
	
	Парам = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("УчетнаяЗапись", Объект.Ссылка);
	Парам.Вставить("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ПриглашенияПользователей1СОтчетности.ФормаСписка", Парам);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НастроитьАвтоматическиСейчасЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	РезультатЗаписи = Записать();
	Если НЕ РезультатЗаписи Тогда
		ПоказатьПредупреждение(, "Не удалось сохранить информацию об учетной записи!");
		Возврат;
	КонецЕсли;
	НастроитьАвтоматическиСейчасПослеСохранения();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматическиСейчасПослеСохранения()
	
	Организация = КонтекстЭДОКлиент.ОпределитьОрганизациюПоУчетнойЗаписиКлиент(Объект.Ссылка);
	Если Организация = Неопределено Тогда
		Если Объект.СпецоператорСвязи = СтруктураСсылочныхДанных.Перечисления_СпецоператорыСвязи_Такском Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьАвтоматическиСейчасПослеСохраненияЗавершение", ЭтотОбъект);
			ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.РОКИПараметрыАвтонастройкиНовойУчетнойЗаписи",,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Учетная запись не привязана ни к какой организации. Настройка невозможна.';
											|en = 'Account is not linked to any company. Cannot configure. '"));
		КонецЕсли;
	Иначе
		ЭтоЮридическоеЛицо = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(Организация);
		
		// Получаем ИНН и КПП
		СтруктураДанныхОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация);	
		Если ЭтоЮридическоеЛицо Тогда
			ПараметрыОрганизации = Новый Структура("ИНН, КПП",
			СокрЛП(СтруктураДанныхОрганизации["ИННЮЛ"]),
			СокрЛП(СтруктураДанныхОрганизации["КППЮЛ"]));
		Иначе
			ПараметрыОрганизации = Новый Структура("ИНН, КПП",
			СокрЛП(СтруктураДанныхОрганизации["ИННФЛ"]), "");
		КонецЕсли;
		
		НастроитьАвтоматическиСейчасПослеПолученияПараметровОрганизации(ПараметрыОрганизации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматическиСейчасПослеСохраненияЗавершение(ПараметрыОрганизации, ДополнительныеПараметры) Экспорт
	
	НастроитьАвтоматическиСейчасПослеПолученияПараметровОрганизации(ПараметрыОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматическиСейчасПослеПолученияПараметровОрганизации(ПараметрыОрганизации)
	
	Если ПараметрыОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьАвтоматическиСейчасПослеПолученияПараметровОрганизацииЗавершение", ЭтотОбъект);
	КонтекстЭДОКлиент.АвтоматическаяНастройкаУчетнойЗаписи(Объект.Ссылка, ПараметрыОрганизации, ОписаниеОповещения, , Истина, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматическиСейчасПослеПолученияПараметровОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("РезультатНастройки") Тогда
		РезультатНастройки = Результат.РезультатНастройки;
	ИначеЕсли Результат.Свойство("РезультатПрименения") Тогда
		РезультатНастройки = Результат.РезультатПрименения;
	Иначе
		РезультатНастройки = Неопределено;
	КонецЕсли;
	
	Если РезультатНастройки = Истина Тогда
		Прочитать();
		ИнициализацияТаблицыНастроекПользователей();
		ОбновитьФорму();
		ПоказатьПредупреждение(, "Автоматическая настройка успешно завершена.");
	КонецЕсли;
	
	ОбновитьТаблицуСертификатыЛичные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму()
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбновитьФормуПослеОтображенияСертификатов(Неопределено, Неопределено);
	Иначе
		ОбновитьПредставленияСертификатов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставленияСертификатов()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбновитьФормуПослеОтображенияСертификатов", 
		ЭтотОбъект);
		
	Элементы.ОдинСертификат.Видимость = Ложь;
	Элементы.НесколькоСертификатов.Видимость = Ложь;
		
	Если ЭтоМультиРежим ТОгда
		
		ТекущаяСтраница = Элементы.НесколькоСертификатов;
		
	Иначе
		
		ТекущаяСтраница = Элементы.ОдинСертификат;
	
		ПараметрыОтображенияСертификатов = Новый Массив;
		
		ПараметрыОтображенияСертификата = Новый Структура;
		ПараметрыОтображенияСертификата.Вставить("ПолеВвода", 								Элементы.СертификатРуководителяПредставление);
		ПараметрыОтображенияСертификата.Вставить("Сертификат", 								Объект.СертификатРуководителя);
		ПараметрыОтображенияСертификата.Вставить("ИмяРеквизитаПредставлениеСертификата", 	"СертификатРуководителяПредставление");
		
		ПараметрыОтображенияСертификатов.Добавить(ПараметрыОтображенияСертификата);
		
		ПараметрыОтображенияСертификата = Новый Структура;
		ПараметрыОтображенияСертификата.Вставить("ПолеВвода", 								Элементы.СертификатГлавногоБухгалтераПредставление);
		ПараметрыОтображенияСертификата.Вставить("Сертификат", 								Объект.СертификатГлавногоБухгалтера);
		ПараметрыОтображенияСертификата.Вставить("ИмяРеквизитаПредставлениеСертификата", 	"СертификатГлавногоБухгалтераПредставление");
		
		ПараметрыОтображенияСертификатов.Добавить(ПараметрыОтображенияСертификата);
		
		ПараметрыОтображенияСертификата = Новый Структура;
		ПараметрыОтображенияСертификата.Вставить("ПолеВвода", 								Элементы.СертификатШифрованиеПредставление);
		ПараметрыОтображенияСертификата.Вставить("Сертификат", 								Объект.СертификатДляШифрования);
		ПараметрыОтображенияСертификата.Вставить("ИмяРеквизитаПредставлениеСертификата", 	"СертификатШифрованиеПредставление");
		
		ПараметрыОтображенияСертификатов.Добавить(ПараметрыОтображенияСертификата);
			
		КриптографияЭДКОКлиент.ОтобразитьПредставленияСертификатов(
			ПараметрыОтображенияСертификатов, 
			ЭтотОбъект, 
			ПолучитьМестоХраненияКлюча(), 
			ОписаниеОповещения);
			
	КонецЕсли;
	
	ТекущаяСтраница.Видимость = Истина;
	Элементы.СертификатыУчетки.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбновитьФормуПослеОтображенияСертификатов(Результат, ВходящийКонтекст) Экспорт
	
	Элементы.ИдентификаторСпецоператора.Доступность = НЕ Объект.ОбменНапрямую;
	
	Если НЕ Объект.ПредназначенаДляДокументооборотаСФНС Тогда
		Если Объект.ПредназначенаДляДокументооборотаСФСГС Тогда
			Объект.ПредназначенаДляДокументооборотаСФСГС = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ПредназначенаДляДокументооборотаСФСГС Тогда
		Объект.ОбменНапрямую = Ложь;
		Если НЕ Объект.ПредназначенаДляДокументооборотаСФНС Тогда
			Объект.ПредназначенаДляДокументооборотаСФНС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ПредназначенаДляДокументооборотаСФНС И Объект.ПредназначенаДляДокументооборотаСПФР Тогда
		Элементы.НалоговыйОрган.Доступность = Истина;
		Элементы.СертификатГлавногоБухгалтераПредставление.Доступность = Истина;
		Элементы.ГруппаИдентификаторы.Доступность = Истина;
		Элементы.ОбменНапрямую.Доступность = Ложь;
		Элементы.ПредназначенаДляДокументооборотаСФСГС.Доступность = Истина;
	ИначеЕсли НЕ Объект.ПредназначенаДляДокументооборотаСФНС И Объект.ПредназначенаДляДокументооборотаСПФР Тогда
		Элементы.НалоговыйОрган.Доступность = Ложь;
		Элементы.СертификатГлавногоБухгалтераПредставление.Доступность = Ложь;
		Элементы.ГруппаИдентификаторы.Доступность = Ложь;
		Элементы.ОбменНапрямую.Доступность = Ложь;
		Элементы.ПредназначенаДляДокументооборотаСФСГС.Доступность = Ложь;
	ИначеЕсли Объект.ПредназначенаДляДокументооборотаСФНС И НЕ Объект.ПредназначенаДляДокументооборотаСПФР Тогда
		Элементы.НалоговыйОрган.Доступность = Истина;
		Элементы.СертификатГлавногоБухгалтераПредставление.Доступность = Истина;
		Элементы.ГруппаИдентификаторы.Доступность = Истина;
		Элементы.ОбменНапрямую.Доступность = Истина;
		Элементы.ПредназначенаДляДокументооборотаСФСГС.Доступность = Истина;
	Иначе
		Элементы.НалоговыйОрган.Доступность = Ложь;
		Элементы.СертификатГлавногоБухгалтераПредставление.Доступность = Ложь;
		Элементы.ГруппаИдентификаторы.Доступность = Ложь;
		Элементы.ОбменНапрямую.Доступность = Истина;
		Элементы.ПредназначенаДляДокументооборотаСФСГС.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.ПредназначенаДляДокументооборотаСФСГС Тогда
		Элементы.ОбменНапрямую.Доступность = Ложь;
	КонецЕсли;
	Элементы.ГруппаАвтоматическаяНастройка.Доступность = НЕ (Объект.ОбменНапрямую) И СпецоператорСвязиПоддерживаетАвтонастройку(Объект.СпецоператорСвязи);
	
	Если НЕ Элементы.ГруппаАвтоматическаяНастройка.Доступность Тогда
		 РежимАвтонастройки = СтруктураСсылочныхДанных.Перечисления_РежимыАвтонастройкиУчетнойЗаписиНалогоплательщика_Отключена;
	КонецЕсли;
		
	Элементы.СпецоператорСвязи.Доступность = НЕ Объект.ОбменНапрямую;
		
	УправлениеДоступностьюНастроекSMTP();
	УстановитьВидимостьКнопкиЛицензия();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопкиЛицензия()
	
	СпецоператорПоддерживаетВторичныеЗаявления = ОбработкаЗаявленийАбонентаВызовСервера.ПоддерживаетсяВторичноеЗаявление(Объект.Ссылка);
	Элементы.ПоказатьСведенияОЛицензии.Видимость = СпецоператорПоддерживаетВторичныеЗаявления;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруСсылочныхДанных()
	
	СтруктураСсылочныхДанных = Новый Структура;
	СтруктураСсылочныхДанных.Вставить("Перечисления_РежимыАвтонастройкиУчетнойЗаписиНалогоплательщика_Отключена", Перечисления.РежимыАвтонастройкиУчетнойЗаписиНалогоплательщика.Отключена);
	СтруктураСсылочныхДанных.Вставить("Перечисления_СпецоператорыСвязи_Прочие", Перечисления.СпецоператорыСвязи.Прочие);
	СтруктураСсылочныхДанных.Вставить("Перечисления_СпецоператорыСвязи_Такском", Перечисления.СпецоператорыСвязи.Такском);
	
КонецПроцедуры

&НаКлиенте
Функция СпецоператорСвязиПоддерживаетАвтонастройку(СпецоператорСвязи)
	
	Если НЕ ЗначениеЗаполнено(СпецоператорСвязи) ИЛИ СпецоператорСвязи = СтруктураСсылочныхДанных.Перечисления_СпецоператорыСвязи_Прочие Тогда
		 Возврат Ложь;
	ИначеЕсли СпецоператорСвязи = СтруктураСсылочныхДанных.Перечисления_СпецоператорыСвязи_Такском Тогда
		Возврат Истина;
	Иначе
		
		СтруктураПараметра = Новый Структура("ОбновленияПризнак");
		Значение = КонтекстЭДОКлиент.ПолучитьПараметрСпецоператораКлиент(Спецоператорсвязи,СтруктураПараметра).ОбновленияПризнак;
		Если Значение = Неопределено Тогда
			 Возврат Ложь;
		Иначе
			 Возврат Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюНастроекSMTP()
	
	Элементы.ИмяПользователяSMTP.АвтоВыборНезаполненного = Объект.ТребуетсяSMTPАутентификация;
	Элементы.ИмяПользователяSMTP.АвтоОтметкаНезаполненного = Объект.ТребуетсяSMTPАутентификация;
	Элементы.ПарольSMTP.АвтоВыборНезаполненного = Объект.ТребуетсяSMTPАутентификация;
	Элементы.ПарольSMTP.АвтоОтметкаНезаполненного = Объект.ТребуетсяSMTPАутентификация;
	Элементы.ИмяПользователяSMTP.Доступность = Объект.ТребуетсяSMTPАутентификация;
	Элементы.ПарольSMTP.Доступность = Объект.ТребуетсяSMTPАутентификация;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасширенныеНастройкиЗавершение(НастройкиОтвета, ДополнительныеПараметры) Экспорт
	
	Если НастройкиОтвета <> Неопределено И ТипЗнч(НастройкиОтвета) = Тип("Структура") Тогда 
		Модифицированность = Истина;
		Для Каждого ЭлементНастройки Из НастройкиОтвета Цикл 
			Объект[ЭлементНастройки.Ключ] = ЭлементНастройки.Значение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПараметрыДоступаВерны()
	
	ПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;
	ПочтовыйПрофиль.POP3ПередSMTP = Истина;
	
	ПочтовыйПрофиль.АдресСервераSMTP = Объект.СерверSMTP;
	ПочтовыйПрофиль.ПортSMTP = Объект.ПортSMTP;
	Если Объект.ТребуетсяSMTPАутентификация Тогда
		ПочтовыйПрофиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
		ПочтовыйПрофиль.ПользовательSMTP = Объект.ИмяПользователяSMTP;
		ПочтовыйПрофиль.ПарольSMTP = Объект.ПарольSMTP;
	КонецЕсли;
	
	ПочтовыйПрофиль.АутентификацияPOP3 = СпособPOP3Аутентификации.Обычная;
	ПочтовыйПрофиль.АдресСервераPOP3 = Объект.СерверPOP3;
	ПочтовыйПрофиль.ПортPOP3 = Объект.ПортPOP3;
	ПочтовыйПрофиль.Пользователь = Объект.ИмяПользователяPOP3;
	ПочтовыйПрофиль.Пароль = Объект.ПарольPOP3;
	
	ПочтовыйПрофиль.ВремяОжидания = ?(ЗначениеЗаполнено(Объект.СерверДокументооборота.ДлительностьОжиданияСервера), Объект.СерверДокументооборота.ДлительностьОжиданияСервера, 60);
	
	Почта = Новый ИнтернетПочта;
	Попытка
		Почта.Подключиться(ПочтовыйПрофиль);
		Почта.Отключиться();
	Исключение
		Инф = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с КО.Проверка параметров подключения';
				|en = 'Electronic data interchange with regulatory authorities.Checking the connection parameters'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(Инф));
			
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При проверке настроек учетной записи произошли ошибки:
                 |%1';
                 |en = 'Errors occurred while checking account settings:
                 |%1'"), КраткоеПредставлениеОшибки(Инф));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ТребуетсяSMTPАутентификацияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если Объект.ТребуетсяSMTPАутентификация И НЕ ПустаяСтрока(Объект.ИмяПользователяPOP3) И ПустаяСтрока(Объект.ИмяПользователяSMTP) И ПустаяСтрока(Объект.ПарольSMTP)
		И РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ИмяПользователяSMTP = Объект.ИмяПользователяPOP3;
		Объект.ПарольSMTP = Объект.ПарольPOP3;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьНачалоВыбораПослеВыбора(Результат, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ДоверенностьЦБ = Результат;
		
		Если НЕ МЧДЦБПодписана(Объект.ДоверенностьЦБ) Тогда
			РезультатыПроверки = ДокументооборотСКОВызовСервера.ПроверитьМЧДЦБ(Объект.ДоверенностьЦБ);
			
			Если РезультатыПроверки.Количество() <> 0 Тогда
				Для каждого РезультатПроверки Из РезультатыПроверки Цикл
					ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПроверки.ТекстОшибки);
				КонецЦикла;
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Машиночитаемая доверенность должна быть подписана доверителем, исправьте ошибки и подпишите доверенность';
																|en = 'The machine-readable authorization letter must be signed by the authorizing party. Correct the mistakes and sign the authorization letter'"));
				Возврат;
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ДоверенностьНачалоВыбораПослеВопроса", ЭтотОбъект);
			ПоказатьВопрос(
				ОписаниеОповещения,
				НСтр("ru = 'Машиночитаемая доверенность должна быть подписана доверителем. Подписать сейчас?';
					|en = 'The machine-readable authorization letter must be signed by the authorizing party. Do you want to sign it now?'"),
				РежимДиалогаВопрос.ДаНет,,
				КодВозвратаДиалога.Да);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьНачалоВыбораПослеВопроса(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДокументооборотСКОКлиент.ПодписатьМЧДЦБ(, Объект.ДоверенностьЦБ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МЧДЦБПодписана(ДоверенностьСсылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоверенностьСсылка,
		"ЭлектроннаяПодпись").Получить() <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоменноеИмяПоСерверуДокументооборота(СерверДокументооборота)
	
	АдресЭлектроннойПочтыСервера = СерверДокументооборота.АдресЭлектроннойПочтыФНС;
	АдресСервера = СокрЛП(Сред(АдресЭлектроннойПочтыСервера, СтрНайти(АдресЭлектроннойПочтыСервера, "@") + 1));
	Если ПустаяСтрока(АдресСервера) Тогда
		АдресЭлектроннойПочтыСервера = СерверДокументооборота.АдресЭлектроннойПочтыПФР;
		АдресСервера = СокрЛП(Сред(АдресЭлектроннойПочтыСервера, СтрНайти(АдресЭлектроннойПочтыСервера, "@") + 1));
	КонецЕсли;
	
	Возврат АдресСервера;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГиперссылку()
	
	Если ЭтоМультиРежим Тогда
		СписокПользователейСтрокой = Мультирежим.ОформлениеПравПользователей(ЭтотОбъект).Заголовок;
		Элементы.ГиперссылкаПользователей.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБРО; // синий
	Иначе
		СписокПользователейСтрокой = "";
		Элементы.ГиперссылкаПользователей.Подсказка = "";
		Для Каждого ЭлементСписка Из СписокПользователей Цикл
			Если ЭлементСписка.Пометка Тогда 
				СписокПользователейСтрокой = СписокПользователейСтрокой + ЭлементСписка.Представление + ", ";
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(СписокПользователейСтрокой) Тогда 
			СписокПользователейСтрокой = Лев(СписокПользователейСтрокой, СтрДлина(СписокПользователейСтрокой)-2);
			Элементы.ГиперссылкаПользователей.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБРО; // синий
		Иначе 
			СписокПользователейСтрокой = "<не выбраны>";
			Элементы.ГиперссылкаПользователей.ЦветТекста = Новый Цвет(255, 0, 0); // красный
			Элементы.ГиперссылкаПользователей.Подсказка = "Пользователи учетной записи налогоплательщика не установлены";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияТаблицыНастроекПользователей(ЭтоНовый = Ложь)
	
	Мультирежим.ИнициализироватьМультирежимНеИзЗаявления(
		ЭтотОбъект, 
		Объект.Ссылка);
	
	Спиcок = Мультирежим.ПользователиУчетнойЗаписи(Объект.Ссылка, ЭтоНовый);
	СписокПользователей = Спиcок.Скопировать();
	
	ЗаполнитьГиперссылку();
	
КонецПроцедуры

&НаСервере
Функция СписокОрганизаций()
	
	СписокОрганизацийУчетнойЗаписи = "";
	СсылкиНаОрганизации.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.Наименование КАК НаименованиеОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.УчетнаяЗаписьОбмена = &УчетнаяЗаписьОбмена
		|	И Организации.ПометкаУдаления = ЛОЖЬ
		|	И Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьОбмена", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокОрганизацийУчетнойЗаписи = СписокОрганизацийУчетнойЗаписи + ?(ПустаяСтрока(СписокОрганизацийУчетнойЗаписи),"",", ")+ ВыборкаДетальныеЗаписи.НаименованиеОрганизации;
		СсылкиНаОрганизации.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат СписокОрганизацийУчетнойЗаписи;
	
КонецФункции

&НаКлиенте
Процедура ОтметитьПользователейЗавершение(Список, ДополнительныеПараметры) Экспорт
	
	ЗакрытьФорму = ДополнительныеПараметры.ЗакрытьФорму;
	
	Если Список = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СохраненноеЗначение = СписокПользователейСтрокой;
	ЗаполнитьГиперссылку();
	
	Если СохраненноеЗначение = СписокПользователейСтрокой Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиент.ТекущийПользователь();
	ТекущийПользовательВСписке = СписокПользователей.НайтиПоЗначению(ТекущийПользователь);
	
	Если ТекущийПользовательВСписке <> Неопределено И НЕ ТекущийПользовательВСписке.Пометка Тогда 
		ТекстВопроса = НСтр("ru = 'Текущий пользователь был удален из списка пользователей учетных записей.
			|Форма учетной записи будет закрыта.
			|
			|Продолжить?';
			|en = 'The current user was removed from the account users list.
			|The account form will be closed.
			|
			|Continue?'");
		
		ДополнительныеПараметры = Новый Структура("ЗакрытьФорму", ЗакрытьФорму);
		ОписаниеОповещения = Новый ОписаниеОповещения("ГиперссылкаПользователейНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Внимание!");
		
	Иначе
		ЗаписатьПользователейУчетныхЗаписейДокументооборота();
		
		Если ЗакрытьФорму Тогда 
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПользователейНажатиеЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗакрытьФорму = ДополнительныеПараметры.ЗакрытьФорму;
	
	Если РезультатВыбора = КодВозвратаДиалога.Нет Тогда 
		ИнициализацияТаблицыНастроекПользователей();
		Возврат;
	Иначе
		ЗакрытьФорму = Истина;
	КонецЕсли;
	
	ЗаписатьПользователейУчетныхЗаписейДокументооборота();
	
	Если ЗакрытьФорму Тогда 
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПользователейУчетныхЗаписейДокументооборота()
	
	НаборЗаписей = РегистрыСведений.ПользователиУчетныхЗаписейДокументооборота.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(Объект.Ссылка);
	
	Для Каждого СтрокаСписка Из СписокПользователей Цикл
		Если СтрокаСписка.Пометка Тогда
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.УчетнаяЗапись = Объект.Ссылка;
			НоваяСтрока.Пользователь = СтрокаСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		РегламентированнаяОтчетностьКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки(), Ложь,
			"Не удалось обновить список пользователей по учетной записи налогоплательщика """ + СокрЛП(Объект.Ссылка) + """.");
	КонецПопытки;
	
	ИнициализацияТаблицыНастроекПользователей();
	
КонецПроцедуры

&НаСервере
Функция ИнформацияОЛичныхСертификатах()
	
	СписокСертификатов = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбъектУчетнойЗаписи = Объект.Ссылка.ПолучитьОбъект();
		
		Для Каждого Личный Из ОбъектУчетнойЗаписи.СертификатыЛичные Цикл
			
			Если НЕ Личный.Текущий Тогда
				
				ДанныеСертификата = Личный.Содержимое.Получить();
				Адрес = ПоместитьВоВременноеХранилище(ДанныеСертификата, УникальныйИдентификатор);
				СвойстваСертификата = Новый СертификатКриптографии(ДанныеСертификата);
					
				ОписаниеСертификата = ДокументооборотСКОКлиентСервер.ПредставлениеСертификата(СвойстваСертификата);
					
				СписокСертификатов.Добавить(Адрес + Символы.Таб + Личный.Отпечаток, ОписаниеСертификата);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокСертификатов;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьИнформациюОСертификатах(Команда)
	
	СписокСертификатов = ИнформацияОЛичныхСертификатах();
	
	Если СписокСертификатов.Количество() = 0 Тогда
		Текст = НСтр("ru = 'Предыдущие сертификаты отсутствуют';
					|en = 'There are no previous certificates'");
		ПоказатьПредупреждение(, Текст);
	Иначе
		ОО = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтотОбъект, Неопределено);
		СписокСертификатов.ПоказатьВыборЭлемента(ОО, "Предыдущие сертификаты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлемента(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда		
		ЭлементыСтроки = СтрРазделить(ВыбранныйЭлемент.Значение, Символы.Таб);
		ПолучитьФайл(ЭлементыСтроки[0], ЭлементыСтроки[1] + ".cer", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМестоХраненияКлючаОблачнойПодписи(Отпечаток)
	
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.ОпределитьМестоХраненияКлюча(Перечисления.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись);
	МодульСервисКриптографииDSS = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSS");
	НашлиСертификат = МодульСервисКриптографииDSS.НайтиСертификат(Новый Структура("Отпечаток", Отпечаток));
	Если НашлиСертификат.Выполнено Тогда
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.ОпределитьМестоХраненияКлюча(Перечисления.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись, НашлиСертификат.УчетнаяЗапись);
	КонецЕсли;
	
	Возврат МестоХраненияКлюча;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМестоХраненияКлюча() Экспорт
	
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.ОпределитьМестоХраненияКлюча(Объект.МодельХраненияЗакрытогоКлюча);
	
	Если КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(Объект.МодельХраненияЗакрытогоКлюча)
		И КриптографияЭДКОСлужебныйКлиент.ИспользованиеОблачнойПодписиВозможно() Тогда
		МестоХраненияКлюча = ПолучитьМестоХраненияКлючаОблачнойПодписи(Объект.СертификатРуководителя);
	КонецЕсли;
	
	Возврат МестоХраненияКлюча;
	
КонецФункции	

&НаСервере
Функция ДанныеСертификатаКриптографии(ДвДанные) Экспорт
	
	Сертификат = Новый СертификатКриптографии(ДвДанные);
	
	Если Сертификат.Субъект.Свойство("O") Тогда
		Субъект = Сертификат.Субъект["O"]; // Организация
	Иначе
		Субъект = Сертификат.Субъект["CN"]; // ИП
	КонецЕсли;
	
	Издатель = Сертификат.Издатель["O"];

	СертификатДатаНачала    = МестноеВремя(Сертификат.ДатаНачала);
	СертификатДатаОкончания = МестноеВремя(Сертификат.ДатаОкончания);
	
	СертификатПросрочен = СертификатДатаОкончания < ТекущаяДата();
	
	Шаблон = НСтр("ru = '%1 (%2-%3), %4';
					|en = '%1 (%2-%3), %4'");
	
	Представление = СтрШаблон(
		Шаблон,
		Субъект,
		Формат(СертификатДатаНачала, "ДЛФ=D"),
		Формат(СертификатДатаОкончания, "ДЛФ=D"),
		Издатель);
		
	Результат = Новый Структура();
	Результат.Вставить("Представление", Представление);
	Результат.Вставить("ДатаОкончания", Сертификат.ДатаОкончания);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбновитьТаблицуСертификатыЛичные() Экспорт
	
	СертификатыЛичные.Очистить();
	
	ОбъектУчетнойЗаписи = Объект.Ссылка.ПолучитьОбъект();
	Для каждого ТекущаяСтрока Из ОбъектУчетнойЗаписи.СертификатыЛичные Цикл
		
		Если НЕ ТекущаяСтрока.Текущий Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СертификатыЛичные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		Если ТекущаяСтрока.Пользователь = ТекущийПользователь Тогда
			НоваяСтрока.Пользователь = Строка(НоваяСтрока.Пользователь) + НСтр("ru = ' (Вы)';
																				|en = ' (You)'");
		КонецЕсли;
		
		ДвДанные = ТекущаяСтрока.Содержимое.Получить();
		Данные = ДанныеСертификатаКриптографии(ДвДанные);
		
		НоваяСтрока.Содержимое = Base64Строка(ДвДанные);
		НоваяСтрока.Представление = Данные.Представление;
		НоваяСтрока.ДатаОкончания = Данные.ДатаОкончания;
		
		Если ТекущаяСтрока.МодельХраненияЗакрытогоКлюча = Перечисления.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись Тогда
			НоваяСтрока.КартинкаМестаХранения = 3;
		ИначеЕсли ТекущаяСтрока.МодельХраненияЗакрытогоКлюча = Перечисления.МодельХраненияЗакрытогоКлюча.ЛокальныйКлюч Тогда
			НоваяСтрока.КартинкаМестаХранения = 1;
		ИначеЕсли ТекущаяСтрока.МодельХраненияЗакрытогоКлюча = Перечисления.МодельХраненияЗакрытогоКлюча.ВМоделиСервиса Тогда
			НоваяСтрока.КартинкаМестаХранения = 4;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСертификатМультирежима()
	
	ТекущиеДанные = Элементы.СертификатыЛичные.ТекущиеДанные;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.Отпечаток) Тогда
		
		МестоХранения = ОбработкаЗаявленийАбонентаКлиентСервер.ОпределитьМестоХраненияКлюча(
			ТекущиеДанные.Криптопровайдер);
		
		ДанныеСертификата = Новый Структура();
		ДанныеСертификата.Вставить("Отпечаток", ТекущиеДанные.Отпечаток);
		
		КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(
			МестоХранения, 
			ДанныеСертификата);
		
		КриптографияЭДКОКлиент.ПоказатьСертификат(ДанныеСертификата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыЛичныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СертификатыЛичныеПредставление" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьСертификатМультирежима();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
