#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ТолькоПросмотр = Истина Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
		
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Параметры.Свойство("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница) Тогда
			Если ТипЗнч(Объект.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Тогда
				Организация = Объект.СтруктурнаяЕдиница;
			Иначе
				Организация = Объект.СтруктурнаяЕдиница.Владелец;
			КонецЕсли;
			Объект.Владелец = Организация;
			Объект.Наименование = СтандартноеНаименование(Объект.СтруктурнаяЕдиница);
			Элементы.Владелец.ТолькоПросмотр = Истина;
		Иначе
			Если ИспользуетсяОднаОрганизация Тогда
				Объект.Владелец = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации").ОрганизацияПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользуетсяОднаОрганизация Тогда
		Элементы.Владелец.Видимость = Ложь;
	КонецЕсли;
	
	ИнициализироватьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Модифицированность = Ложь;
		ОповеститьОВыборе(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Представитель") Тогда
		
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		Если ВыбранноеЗначение.Свойство("Представитель") Тогда
			ОтчетностьПодписываетПредставитель = ?(ЗначениеЗаполнено(Объект.Представитель), 1, 0);
		КонецЕсли;
	
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		НастроитьПоСтруктурнойЕдинице(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("НовыйЭлемент", ТекущийОбъект.Ссылка.Пустая());
	
	Если ОтчетностьПодписываетПредставитель = 0 Тогда
		ТекущийОбъект.Представитель						= Неопределено;
		ТекущийОбъект.УполномоченноеЛицоПредставителя	= "";
		ТекущийОбъект.ДокументПредставителя				= "";
	КонецЕсли;
	
	ТекущийОбъект.КодОрганаФСГС = СокрЛП(ТекущийОбъект.КодОрганаФСГС);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	УстановитьПредставлениеКИ();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Новый Структура("Ссылка, Владелец", Объект.Ссылка, Объект.Владелец);
	Оповестить("ИзмененаРегистрацияВОрганеСтатистики", ПараметрОповещения);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ОтчетностьПодписываетПредставитель = 1	И Не ЗначениеЗаполнено(Объект.Представитель) Тогда
		ТекстСообщения = НСтр("ru = 'Заполните сведения о представителе';
								|en = 'Enter data about the representative '");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ПредставлениеПредставителя",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодОрганаФСГСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ПослеЗавершенияВыбораКодаОрганаФСГС", ЭтотОбъект));
	Если ЗначениеЗаполнено(Объект.КодОрганаФСГС) Тогда
		ДополнительныеПараметры.Вставить("ТекущийКодТОГС", Объект.КодОрганаФСГС);
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ВыбратьКодОрганаТОГС(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура КодОрганаФСГСПриИзменении(Элемент)
	
	ОбновитьНаименованиеОрганаФСГС(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетностьПодписываетПредставительПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПочтовыйПриИзменении(Элемент)
	
	Если ПустаяСтрока(АдресПочтовый) Тогда
		Объект.АдресПочтовый = АдресПочтовый;
	Иначе
		Объект.АдресПочтовый = КонтактнаяИнформацияПоПредставлению(АдресПочтовый);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПочтовыйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации"),
		Объект.АдресПочтовый);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизита", "АдресПочтовый");
	
	Оповещение = Новый ОписаниеОповещения("АдресЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Объект.Наименование = СтандартноеНаименование(Объект.СтруктурнаяЕдиница);
		НастроитьПоСтруктурнойЕдинице(ЭтаФорма);
	Иначе
		НастроитьПоТипуСтруктурнойЕдиницы(ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИдентификационныйНомерПриИзменении(Элемент)
	
	ПроверитьИдентификационныйНомер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПредставителяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура("Владелец,Представитель,УполномоченноеЛицоПредставителя,ДокументПредставителя");
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, Объект);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.РегистрацииВОрганеСтатистики.Форма.ФормаПредставителя", ПараметрыФормы, ЭтаФорма, КлючУникальности);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПосмотретьСостав(Команда)
	
	ПараметрыФормы = Новый Структура("Регистрация", Объект.Ссылка);
	ОткрытьФорму("Справочник.РегистрацииВОрганеСтатистики.Форма.ФормаСостав",
		ПараметрыФормы, ЭтаФорма, КлючУникальности,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Владелец",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Владелец));
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьИдентификационныйНомер(Форма)
	
	ТекстОшибки = "";
	Если ИдентификационныйНомерСоответствуетТребованиям(Форма.Объект.ИдентификационныйНомер, ТекстОшибки)
		Или Форма.Элементы.ИдентификационныйНомер.КнопкаОчистки = Истина Тогда
		Форма.Элементы.ИдентификационныйНомерКартинка.Видимость = Ложь;
	Иначе
		Элемент = Форма.Элементы.ИдентификационныйНомерКартинка;
		Элемент.Видимость = Истина;
		Элемент.Подсказка = ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтандартноеНаименование(Знач СтруктурнаяЕдиница) Экспорт
	
	Возврат Справочники.РегистрацииВОрганеСтатистики.СтандартноеНаименование(СтруктурнаяЕдиница);
	
КонецФункции

&НаСервере
Процедура ИнициализироватьФорму()
	
	Элементы.СтруктурнаяЕдиница.ОграничениеТипа =
		Справочники.РегистрацииВОрганеСтатистики.ОписаниеТиповРеспондентовРосстата();
	
	ОтчетностьПодписываетПредставитель = ?(ЗначениеЗаполнено(Объект.Представитель), 1, 0);
	
	ОбновитьНаименованиеОрганаФСГС(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	УстановитьПредставлениеКИ();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Форма.ОтчетностьПодписываетПредставитель = 1 Тогда
		Форма.Элементы.ГруппаПредставлениеПредставителяСтраницы.ТекущаяСтраница = Форма.Элементы.ГруппаПредставительГиперссылка;
	Иначе
		Форма.Элементы.ГруппаПредставлениеПредставителяСтраницы.ТекущаяСтраница = Форма.Элементы.ГруппаПредставительНеВыбран;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Представитель) Тогда
		Форма.ПредставлениеПредставителя = НСтр("ru = 'Заполнить';
												|en = 'Fill'");
	ИначеЕсли ТипЗнч(Объект.Представитель) = Тип("СправочникСсылка.ФизическиеЛица")
		ИЛИ НЕ ЗначениеЗаполнено(Объект.УполномоченноеЛицоПредставителя) Тогда
		Форма.ПредставлениеПредставителя = Объект.Представитель;
	ИначеЕсли ТипЗнч(Объект.Представитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		Форма.ПредставлениеПредставителя = Объект.УполномоченноеЛицоПредставителя + " (" + Объект.Представитель + ")";
	КонецЕсли;
	
	ПроверитьИдентификационныйНомер(Форма);
	
	НастроитьПоСтруктурнойЕдинице(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияВыбораКодаОрганаФСГС(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	Объект.КодОрганаФСГС = ВыбранноеЗначение.КодТОГС;
	ОбновитьНаименованиеОрганаФСГС(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНаименованиеОрганаФСГС(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.КодОрганаФСГС) Тогда
		Форма.НаименованиеОрганаФСГС = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.НаименованиеТОГС(
			СокрЛП(Форма.Объект.КодОрганаФСГС));
	Иначе
		Форма.НаименованиеОрганаФСГС = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьПоТипуСтруктурнойЕдиницы(Форма)
	
	НовыеПараметрыВыбора = Новый Массив;
	Если ТипЗнч(Форма.Объект.СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ПредставлениеТипа = НСтр("ru = 'Подразделение';
								|en = 'Business unit'");
	ИначеЕсли ТипЗнч(Форма.Объект.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Тогда
		ПредставлениеТипа = НСтр("ru = 'Организация';
								|en = 'Company'");
	Иначе
		ПредставлениеТипа = НСтр("ru = 'структурная единица';
								|en = 'business unit'");
	КонецЕсли;
	Форма.Элементы.СтруктурнаяЕдиница.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
	Форма.Элементы.СтруктурнаяЕдиница.Заголовок = СтрШаблон(НСтр("ru = 'Респондент (%1)';
																|en = 'Respondent (%1)'"), ПредставлениеТипа);

КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьПоСтруктурнойЕдинице(Форма)
	
	Элементы = Форма.Элементы;
	
	НастроитьПоТипуСтруктурнойЕдиницы(Форма);
	
	Если Не ЗначениеЗаполнено(Форма.Объект.СтруктурнаяЕдиница) Тогда
		Элементы.ГруппаИдентификационныйНомер.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	СвойстваРеспондента = РегистрацииВОрганеСтатистикиВызовСервера.СвойстваРеспондентаРосстата(Форма.Объект.СтруктурнаяЕдиница);
	
	Если СвойстваРеспондента.ЭтоТОСП Тогда
		Элементы.ГруппаИдентификационныйНомер.Видимость = Истина;
	ИначеЕсли Не ПустаяСтрока(Форма.Объект.ИдентификационныйНомер) Тогда
		Элементы.ГруппаИдентификационныйНомер.Видимость = Истина;
		Элементы.ИдентификационныйНомер.КнопкаОчистки = Истина;
	Иначе
		Элементы.ГруппаИдентификационныйНомер.Видимость = Ложь;
	КонецЕсли;
	
	РеспондентОрганизация = СвойстваРеспондента.ЭтоОрганизация;
	ИспользуетсяАдресРеспондента = РеспондентОрганизация;

	Если Форма.ИспользуетсяАдресРеспондента <> ИспользуетсяАдресРеспондента Тогда
		Форма.Объект.АдресПочтовый = "";
		Форма.АдресПочтовый = "";
		Форма.ИспользуетсяАдресРеспондента = ИспользуетсяАдресРеспондента;
		Элементы.АдресПочтовый.РасширеннаяПодсказка.Заголовок = "";
	КонецЕсли;
	Элементы.АдресПочтовый.Доступность = Не ИспользуетсяАдресРеспондента;
	
	Если РеспондентОрганизация Тогда
		Форма.Объект.Владелец = Форма.Объект.СтруктурнаяЕдиница;
		Элементы.АдресПочтовый.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Заполняется в форме организации';
																	|en = 'Filled in the company form'");
		ДанныеАдреса = ПолучитьАдресПочтовыйОрганизации(Форма.Объект.СтруктурнаяЕдиница);
		Форма.АдресПочтовый = ДанныеАдреса.АдресПочтовыйПредставление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресПочтовыйОрганизации(Знач Организация)
	
	Результат = Новый Структура("АдресПочтовый, АдресПочтовыйПредставление", "", "");
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Организация,
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
		ТекущаяДатаСеанса(), Ложь);
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		Строка = КонтактнаяИнформация[0];
		Результат.АдресПочтовый = Строка.Значение;
		Результат.АдресПочтовыйПредставление = Строка.Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияПоПредставлению(Знач ПредставлениеАдреса)
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации"));
	
КонецФункции

&НаСервере
Процедура УстановитьПредставлениеКИ()
	
	Если ИспользуетсяАдресРеспондента Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПолеВводаАдреса(ЭтотОбъект, "АдресПочтовый", Объект.АдресПочтовый);
		
КонецПроцедуры

Процедура ОбновитьПолеВводаАдреса(Форма, ИмяПоляВводаПредставления, ЗначениеКонтактнойИнформации) Экспорт
	
	ПолеВвода = Форма.Элементы.Найти(ИмяПоляВводаПредставления);
	Если ПолеВвода = Неопределено Тогда
		Возврат; // Элемент недоступен по правам или по ФО - обновлять не требуется.
	КонецЕсли;
	
	Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначениеКонтактнойИнформации);
	
	Если ПустаяСтрока(Представление) Тогда
		ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
	Иначе
		РезультатПроверки = РаботаСАдресами.ПроверитьАдрес(ЗначениеКонтактнойИнформации);
		Если РезультатПроверки.Результат = "Корректный" Тогда
			ПредставлениеРезультатаПроверки = НСтр("ru = 'Адрес введен правильно - в соответствии с требованиями';
													|en = 'Address is entered correctly - according to the requirements'");
			ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		Иначе
			ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			СообщенияПроверки = Новый Массив;
			СообщенияПроверки.Добавить(НСтр("ru = 'Адрес не соответствует адресному классификатору:';
											|en = 'Address does not correspond to address classifier:'"));
			Для Каждого Ошибка Из РезультатПроверки.СписокОшибок Цикл
				СообщенияПроверки.Добавить(Ошибка.Представление);
			КонецЦикла;
			ПредставлениеРезультатаПроверки = СтрСоединить(СообщенияПроверки, Символы.ПС);
		КонецЕсли;
	КонецЕсли;
	
	ПолеВвода.РасширеннаяПодсказка.Заголовок = ПредставлениеРезультатаПроверки;
	ПолеВвода.ЦветТекста = ЦветТекста;
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПолеВвода.ПутьКДанным, Представление);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЗавершениеВыбора(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(РезультатОткрытияФормы) <> Тип("Структура") Тогда
		Возврат; // Не было изменений в данных.
	КонецЕсли;
	
	ИмяРеквизитаАдрес = ПараметрыОповещения.ИмяРеквизита;
	
	Объект[ИмяРеквизитаАдрес] = РезультатОткрытияФормы.КонтактнаяИнформация;
	ЭтотОбъект[ИмяРеквизитаАдрес] = РезультатОткрытияФормы.Представление;
	Модифицированность = Истина;
	УстановитьПредставлениеКИ();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификационныйНомерСоответствуетТребованиям(ПроверяемыйКод, ТекстСообщения)
	
	ПроверяемыйКод = СокрЛП(ПроверяемыйКод);
	ДлинаКода = СтрДлина(ПроверяемыйКод);
	
	ОписаниеОшики = "";
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПроверяемыйКод) Тогда
		ОписаниеОшики = НСтр("ru = 'должен состоять только из цифр';
							|en = 'must contain only digits'");
	КонецЕсли;

	Если ДлинаКода <> 14 Тогда
		ОписаниеОшики = НСтр("ru = 'должен состоять из 14 цифр';
							|en = 'must contain 14 digits'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОписаниеОшики) Тогда
		ТекстСообщения = НСтр("ru = 'Идентификационный номер ТОСП';
								|en = 'Identification number of territorially autonomous business unit'") + " " + ОписаниеОшики;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти