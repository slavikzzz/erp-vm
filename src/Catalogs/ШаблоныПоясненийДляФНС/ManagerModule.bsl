#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

Функция ТиповыеШаблоны() Экспорт
	
	Шаблоны = Новый СписокЗначений;
	
	Макеты = Метаданные.Справочники.ШаблоныПоясненийДляФНС.Макеты;
	Для каждого Макет Из Макеты Цикл
		Если Макет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.HTMLДокумент Тогда
			Шаблоны.Добавить(Макет.Имя, Макет.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Шаблоны.СортироватьПоПредставлению();
	
	Возврат Шаблоны;
	
КонецФункции

Процедура ЗаполнениеТиповыхШаблонов(Параметры) Экспорт
	
	ТиповыеМакеты = ТиповыеШаблоны();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Шаблоны.ИмяМакета КАК ИмяМакета
	|ИЗ
	|	Справочник.ШаблоныПоясненийДляФНС КАК Шаблоны
	|ГДЕ
	|	Шаблоны.ИмяМакета <> """"
	|	И НЕ Шаблоны.ЭтоГруппа
	|	И НЕ Шаблоны.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Элемент = ТиповыеМакеты.НайтиПоЗначению(Выборка.ИмяМакета);
		Если Элемент <> Неопределено Тогда
			// Второй раз не добавляем
			ТиповыеМакеты.Удалить(Элемент);
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ТиповыеМакеты Цикл

		Попытка
		
			ШаблонОбъект = Справочники.ШаблоныПоясненийДляФНС.СоздатьЭлемент();
			ШаблонОбъект.ИмяМакета		= КлючИЗначение.Значение;
			ШаблонОбъект.Наименование 	= КлючИЗначение.Представление;
			
			Макет = Справочники.ШаблоныПоясненийДляФНС.ПолучитьМакет(КлючИЗначение.Значение);
			
			ДанныеШаблона = ПустаяСтруктураШаблона();
			ДанныеШаблона.ТекстHTML = Макет.ПолучитьТекст();
			ШаблонОбъект.ШаблонХранилище = Новый ХранилищеЗначения(ДанныеШаблона, Новый СжатиеДанных(9));
			
			ШаблонОбъект.Записать();
			
		Исключение

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать шаблон ответа ""%1"" по причине:
					|%2';
					|en = 'Не удалось создать шаблон ответа ""%1"" по причине:
					|%2'"),
					КлючИЗначение.Значение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.ШаблоныПоясненийДляФНС, 
				ТекстСообщения);
		
		КонецПопытки;
		
	КонецЦикла;

	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

Функция ПустаяСтруктураШаблона() Экспорт

	Вложения = Новый Структура();

	Результат = Новый Структура();
	Результат.Вставить("ТекстHTML", "");
	Результат.Вставить("Вложения", 	Вложения);
	
	Возврат Результат;

КонецФункции

Функция ДанныеШаблона(СсылкаНаШаблон, ИмяРеквизита) Экспорт

	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаШаблон) Тогда
		ШаблонХранилище = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаШаблон, ИмяРеквизита);
		Если ТипЗнч(ШаблонХранилище) = Тип("ХранилищеЗначения") Тогда
			Результат = ШаблонХранилище.Получить();
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Результат = ПустаяСтруктураШаблона();
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПолучитьТекстИзФорматированногоДокумента(РеквизитФормы) Экспорт
	
	ТекстHTML = "";
	Вложения = Новый Структура;
	РеквизитФормы.ПолучитьHTML(ТекстHTML, Вложения);
	
	Результат = ПустаяСтруктураШаблона();
	Результат.ТекстHTML = ТекстHTML;
	Результат.Вложения	= Вложения;
	
	Возврат Результат;
	
КонецФункции

Процедура УбратьВыделениеУПоясненияПослеОтправки(Опись, РеквизитФормы, ИмяРеквизита) Экспорт
	
	УбратьЖелтыйФон(РеквизитФормы);
	СохранитьФорматированныйДокументПоСсылка(Опись, РеквизитФормы, ИмяРеквизита);
	
КонецПроцедуры

Процедура СохранитьФорматированныйДокументПоСсылка(Опись, РеквизитФормы, ИмяРеквизита) Экспорт
	
	Объект = Опись.ПолучитьОбъект();
	СохранитьФорматированныйДокумент(Объект, РеквизитФормы, ИмяРеквизита);
	Объект.Записать();
	
КонецПроцедуры

Процедура СохранитьФорматированныйДокумент(Объект, РеквизитФормы, ИмяРеквизита) Экспорт
	
	ДанныеПояснения = ПолучитьТекстИзФорматированногоДокумента(РеквизитФормы);
	Объект[ИмяРеквизита] = Новый ХранилищеЗначения(ДанныеПояснения, Новый СжатиеДанных(9));
	
КонецПроцедуры

Функция УстановитьТекстВФорматированныйДокумент(Ссылка, РеквизитФормы, ИмяРеквизита) Экспорт

	ТекстЗагружен = Ложь;

	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ДанныеШаблона = ДанныеШаблона(Ссылка, ИмяРеквизита);
		Если ЗначениеЗаполнено(ДанныеШаблона.ТекстHTML) Тогда
			
			ТекстЗагружен = УстановитьТекстИзДанныхШаблона(
				ДанныеШаблона, 
				РеквизитФормы);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстЗагружен;
	
КонецФункции

Функция УстановитьТекстИзДанныхШаблона(ДанныеШаблона, РеквизитФормы) Экспорт

	ТекстЗагружен = Ложь;

	Если ЗначениеЗаполнено(ДанныеШаблона.ТекстHTML) Тогда
		
		РеквизитФормы.УстановитьHTML(
			ДанныеШаблона.ТекстHTML, 
			ДанныеШаблона.Вложения);
			
		ТекстЗагружен = Истина;
		
	КонецЕсли;
	
	Возврат ТекстЗагружен;
	
КонецФункции

Функция Белый() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция РазмерТекстовогоПоясненияПоСсылке(ОписьСсылка, РеквизитФормы, ИмяРеквизита) Экспорт
			
	// сохраняем вложения в каталог выгрузки
	ДвДанные = ДвДанныеТекстовогоПоясненияПоСсылке(ОписьСсылка, РеквизитФормы, ИмяРеквизита);
	
	Если ДвДанные = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ДвДанные.Размер();
	
КонецФункции

// Удяляет желтое выделение параметров!!!! 
Функция ДвДанныеТекстовогоПоясненияПоСсылке(ОписьСсылка, РеквизитФормы, ИмяРеквизита) Экспорт
			
	// сохраняем вложения в каталог выгрузки
	ЕстьПояснение = УстановитьТекстВФорматированныйДокумент(
		ОписьСсылка, 
		РеквизитФормы, 
		ИмяРеквизита);
		
	УбратьЖелтыйФон(РеквизитФормы);
	
	Если НЕ ЕстьПояснение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвДанные = ДвДанныеPDFФайлаФорматированногоДокумента(РеквизитФормы);
	
	Возврат ДвДанные;
	
КонецФункции

Функция ДвДанныеPDFФайлаФорматированногоДокумента(РеквизитФормы) Экспорт

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".pdf");
	РеквизитФормы.Записать(ИмяВременногоФайла, ТипФайлаФорматированногоДокумента.PDF);
	
	ДвДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Возврат ДвДанные;

КонецФункции

Функция ЗаполненТекстФорматированногоДокумента(РеквизитФормы) Экспорт
			
	Текст = СокрЛП(ТекстФорматированногоДокумента(РеквизитФормы));
	Заполнен = СтрДлина(Текст) > 0;
	
	Возврат Заполнен;
	
КонецФункции

Функция ТекстФорматированногоДокумента(РеквизитФормы) Экспорт
			
	Тело = ПолучитьТекстИзФорматированногоДокумента(РеквизитФормы).ТекстHTML;
	
	ЧтениеHTML = Новый ЧтениеHTML();
	DOM = Новый ПостроительDOM;
	ЧтениеHTML.УстановитьСтроку(Тело);
	ДокументHTML = DOM.Прочитать(ЧтениеHTML);
	
	Текст = ДокументHTML.ИзвлечьТолькоТекст();
	
	Возврат Текст;
	
КонецФункции

Процедура УбратьЖелтыйФон(РеквизитФормы) Экспорт
	
	МассивЭлементов = РеквизитФормы.ПолучитьЭлементы();
	Для Каждого ЭлементДокумента Из МассивЭлементов Цикл
		
		Если ТипЗнч(ЭлементДокумента) <> Тип("ТекстФорматированногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементДокумента.ЦветФона = ТребованияФНСКлиентСервер.Оранжевый() Тогда
			ЭлементДокумента.ЦветФона = Белый();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьЖелтыйФон(РеквизитФормы) Экспорт
	
	Есть = Ложь;
	
	МассивЭлементов = РеквизитФормы.ПолучитьЭлементы();
	Для Каждого ЭлементДокумента Из МассивЭлементов Цикл
		
		Если ТипЗнч(ЭлементДокумента) <> Тип("ТекстФорматированногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементДокумента.ЦветФона = ТребованияФНСКлиентСервер.Оранжевый() Тогда
			Есть = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Есть;
	
КонецФункции

Функция СформироватьПараметрИзТаблицы(Таблица, Знач Шаблон) Экспорт
	
	Если Таблица.Количество() = 0 Тогда
		Результат = ТребованияФНСКлиентСервер.Подчерк();
	Иначе
		
		Результат = Новый Массив;
		Выгрузка = Таблица.Выгрузить();
		
		Для каждого Строка Из Выгрузка Цикл
			
			ТекущееЗначение = Шаблон;
			Для каждого Колонка Из Выгрузка.Колонки Цикл
				
				Значение = СокрЛП(Строка(Строка[Колонка.Имя]));
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Значение = "________";
				КонецЕсли;
				ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "%" + Колонка.Имя, Значение);
				
			КонецЦикла;
			
			Результат.Добавить(ТекущееЗначение);
			
		КонецЦикла;
		
		Результат = СтрСоединить(Результат, Символы.ПС);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий


#КонецОбласти

#КонецЕсли


