#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектов.ПриСозданииНаСервере(ЭтотОбъект, Объект.Наименование);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	УстановитьПредставлениеОрганизации();
	УстановитьВидимостьОпераций();
	
	// СтандартныеПодсистемы.РаботаСФайлами 	
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов(); 	
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель"; 	
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки); 	
	// Конец СтандартныеПодсистемы.РаботаСФайлами
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектов.ПриЗаписиФормыОбъектаСклонения(ЭтотОбъект, Объект.Наименование, ТекущийОбъект.Ссылка);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьВидимостьОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекстОшибки = СформироватьТекстОшибкиПоПроверкиПериодаДействия(Объект);
	Если НЕ ТекстОшибки = "" Тогда
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,, 
			"ДатаНачала",
			"Объект",
			Отказ);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") Тогда
		Объект.Владелец = ВыбранноеЗначение;
		УстановитьПредставлениеОрганизации();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура УстановитьИнтервалДействия(Команда)
	
	ОписаниеОповещенияПослеИзмененияПериода = Новый ОписаниеОповещения("ПроверитьИнтервалыДействия", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания"), ОписаниеОповещенияПослеИзмененияПериода);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИнтервалыДействия(Результат, ДополнительныеДанные) Экспорт
	ОчиститьСообщения();
	ТекстОшибки = СформироватьТекстОшибкиПоПроверкиПериодаДействия(Объект);
	Если НЕ ТекстОшибки = "" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "Объект.ДатаНачала");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодДействияПриИзменении(Элемент)
	ПроверитьИнтервалыДействия(Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОформленияЗаявленияОПрекращенииДеятельностиПоПатенту(Команда)
	
	//++ НЕ УТ
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Патент", Объект.Ссылка);
	
	СоздатьЗаявление(ПараметрыЗаполнения,
		ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме"));
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОформленияЗаявленияОбУтратеПравНаПатентнуюСистему(Команда)
	
	// При утрате права, спрашиваем у пользователя дату события
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ВыборДатыУтратыПраваЗаявленияЗавершение", ЭтотОбъект);
	
	ПоказатьВводДаты(ОповещениеОВыборе, ОбщегоНазначенияКлиент.ДатаСеанса(), НСтр("ru = 'Право применения патента утрачено с';
																					|en = 'The right to apply the patent has been lost since'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьТекстОшибкиПоПроверкиПериодаДействия(ОбъектПроверки)
	ТекстОшибки = "";
	Если ЗначениеЗаполнено(ОбъектПроверки.ДатаНачала)
		И ЗначениеЗаполнено(ОбъектПроверки.ДатаОкончания) Тогда
		
		Если ОбъектПроверки.ДатаНачала > ОбъектПроверки.ДатаОкончания Тогда
			ТекстОшибки = НСтр("ru = 'Дата начала действия патента не может быть больше даты окончания действия';
								|en = 'Patent start date cannot be greater than the patent end date'");
		ИначеЕсли НЕ Год(ОбъектПроверки.ДатаНачала) = Год(ОбъектПроверки.ДатаОкончания) Тогда
			ТекстОшибки = НСтр("ru = 'Патент может быть выдан в пределах календарного года. Необходимо исправить либо дату начала, либо дату окончания патента';
								|en = 'A patent can be issued within a calendar year. Correct either patent start date or the patent end date'");
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстОшибки;
КонецФункции

&НаКлиенте
Процедура ОрганизацияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		ПоказатьЗначение(Неопределено, Объект.Владелец);
		
	Иначе
		
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"));
		
		ОткрытьФорму(
			"Справочник.Организации.Форма.ФормаВыбора",
			Новый Структура("Отбор", СтруктураОтбор),
			ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

//++ НЕ УТ

&НаКлиенте
Процедура СоздатьЗаявление(ПараметрыЗаполнения, ВидЗаявления)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	ПараметрыФормы.Вставить("Организация", Объект.Владелец);
	
	ИмяФормыЗаявления = ИмяФормыЗаявления(ВидЗаявления);
	Если ПустаяСтрока(ИмяФормыЗаявления) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СформироватьФормуОтчетаАвтоматически", Истина);

	ОткрытьФорму(ИмяФормыЗаявления, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяФормыЗаявления(ВидЗаявления)
	
	ИмяОтчета = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(ВидЗаявления);
	Если ПустаяСтрока(ИмяОтчета) Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаФорм = Отчеты[ИмяОтчета].ПолучитьТаблицуФорм();
	
	Если ТаблицаФорм.Количество() = 1 Тогда
		ИмяФормы = ТаблицаФорм[0].ИмяФормы;
	ИначеЕсли ТаблицаФорм.Количество() > 1 Тогда
		Стр = ТаблицаФорм.Получить(ТаблицаФорм.Количество() - 1);
		ИмяФормы = Стр.ИмяФормы;
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон("Отчет.%1.Форма.%2", ИмяОтчета, ИмяФормы);
	
КонецФункции

&НаКлиенте
Процедура ВыборДатыУтратыПраваЗаявленияЗавершение(ДатаУтратыПрава, ДополнительныеПараметры) Экспорт
	
	Если ДатаУтратыПрава = Неопределено Или ТипЗнч(ДатаУтратыПрава) <> Тип("Дата") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДатаУтратыПрава", ДатаУтратыПрава);
	
	СоздатьЗаявление(ПараметрыЗаполнения,
		ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОбУтратеПраваНаПатент"));
	
КонецПроцедуры

//-- НЕ УТ

&НаСервере
Процедура УстановитьПредставлениеОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
		ОрганизацияПредставление = НСтр("ru = '<не выбрана>';
										|en = '<not selected>'");
		Элементы.ОрганизацияПредставление.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Иначе
		ОрганизацияПредставление = Объект.Владелец;
		Элементы.ОрганизацияПредставление.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОпераций()
	
	Элементы.ГруппаДополнительныхОбработок.Видимость = Не Объект.Ссылка.Пустая()
		И (ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Или ПолучитьФункциональнуюОпцию("УправлениеПредприятием"));
	
КонецПроцедуры

#КонецОбласти
