#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает очередной номер операции внутри заданного владелца (маршрутной карты, этапа, технологического процесса).
//
// Параметры:
//  Владелец - СправочникСсылка.МаршрутныеКарты,СправочникСсылка.ЭтапыПроизводства - владелец операций в рамках которого
//		необходимо получить очередной номер.
//
// Возвращаемое значение:
//   Число - Новый номер операции.
//
Функция НовыйНомерОперации(Владелец) Экспорт
	
	Если Владелец.Пустая() Тогда
		Возврат 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТехнологическиеОперации.НомерОперации КАК НомерОперации
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
	|ГДЕ
	|	ТехнологическиеОперации.Владелец = &Владелец
	|	И НЕ ТехнологическиеОперации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерОперации УБЫВ";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 1;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.НомерОперации + 1;

КонецФункции

// Возвращает очередной Идентификатор внутри заданной маршрутной карты.
//
// Параметры:
//  Владелец  - СправочникСсылка.МаршрутныеКарты,СправочникСсылка.ЭтапыПроизводства,СправочникСсылка.ТехнологическиеПроцессы	 - владелец операций
//  Отказ	  - Булево	- признак отказа от выполнения действия.
// 
// Возвращаемое значение:
//  Число - Новый Идентификатор операции.
//
Функция НовыйИдентификаторОперации(Владелец) Экспорт
	
	Если Не ТранзакцияАктивна() Тогда
		ВызватьИсключение НСтр("ru = 'Получение нового идентификатора операции может выполняться только в транзакции.';
								|en = 'New operation ID can be received only in a transaction.'");
	КонецЕсли;
	
	Если Владелец.Пустая() Тогда
		Возврат 1;
	КонецЕсли;

	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.ТехнологическиеОперации");
	ЭлементБлокировки.УстановитьЗначение("Владелец", Владелец);
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
	Исключение
		
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'Не удалось получить новый идентификатор операции для объекта %1.';
				|en = 'Cannot get new operation ID for object %1.'"),
			Владелец);
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТехнологическиеОперации.Идентификатор КАК Идентификатор
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
		|ГДЕ
		|	ТехнологическиеОперации.Владелец = &Владелец
		|	И НЕ ТехнологическиеОперации.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор УБЫВ");
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 1;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.Идентификатор + 1;

КонецФункции

// Создает новый элемент справочника копированием существующего, затем записывает.
//  (используется при копировании маршрутной карты).
//
// Параметры:
//  Источник - СправочникСсылка.ТехнологическиеОперации	 - операция-источник
//  Владелец - СправочникСсылка.МаршрутныеКарты			 - владелец операций.
// 
// Возвращаемое значение:
//  СправочникСсылка.ТехнологическиеОперации - новая операция.
//
Функция СкопироватьТехнологическуюОперацию(Источник, Владелец) Экспорт
	
	СсылкаНаОперацию = Справочники.ТехнологическиеОперации.ПустаяСсылка();
	
	НачатьТранзакцию();
	Попытка
		
		ОперацияОбъект = Источник.Скопировать();
		ОперацияОбъект.Владелец = Владелец;
		
		ОперацияОбъект.ЗаполнитьСлужебныеРеквизиты();
		
		ОперацияОбъект.ОбменДанными.Загрузка = Истина;
		ОперацияОбъект.Записать();
		
		СсылкаНаОперацию = ОперацияОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru = 'Выполнение операции';
							|en = 'Performing operation'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ТехнологическиеОперации,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат СсылкаНаОперацию;
	
КонецФункции

// Определяет наличие зацикливания операций
//
// Параметры:
//  ПроверяемаяМаршрутнаяКарта	- СправочникСсылка.МаршрутныеКарты - маршрутная карта
//								операции которой (и все подчиненные) будут проверены на зацикливание
//  ИсходнаяМаршрутнаяКарта		- СправочникСсылка.МаршрутныеКарты - маршрутная карта на которую не должно быть ссылок
//  Отказ						- Булево - признак отказа от выполнения действия.
//
// Возвращаемое значение:
//   Булево   - Истина, если есть зацикливание операций.
//
Функция ЕстьЗацикливание(ПроверяемаяМаршрутнаяКарта, ИсходнаяМаршрутнаяКарта, Отказ = Ложь) Экспорт

	Если ПроверяемаяМаршрутнаяКарта = ИсходнаяМаршрутнаяКарта Тогда
		Отказ = Истина;
		Возврат Истина;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическиеОперации.Ссылка КАК Ссылка,
	|	ТехнологическиеОперации.ВложенныйМаршрут КАК ВложенныйМаршрут
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
	|ГДЕ
	|	НЕ ТехнологическиеОперации.ПометкаУдаления
	|	И ТехнологическиеОперации.Владелец В(&ПроверяемыеМаршрутныеКарты)
	|	И ТехнологическиеОперации.СодержитВложенныйМаршрут";
	
	Запрос.УстановитьПараметр("ИсходнаяМаршрутнаяКарта", ИсходнаяМаршрутнаяКарта);
	
	ПроверяемыеМаршрутныеКарты = Новый Массив;
	ПроверяемыеМаршрутныеКарты.Добавить(ПроверяемаяМаршрутнаяКарта);
	
	Пока ПроверяемыеМаршрутныеКарты.Количество() <> 0 Цикл
		
		Запрос.УстановитьПараметр("ПроверяемыеМаршрутныеКарты", ПроверяемыеМаршрутныеКарты);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		ПроверяемыеМаршрутныеКарты.Очистить();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ВложенныйМаршрут = ИсходнаяМаршрутнаяКарта Тогда
				Отказ = Истина;
				Возврат Истина;
			Иначе
				ПроверяемыеМаршрутныеКарты.Добавить(Выборка.ВложенныйМаршрут);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции

// Возвращает нормативные значения дополнительных реквизитов операции.
//
// Параметры:
//  Ссылка - СправочникСсылка.ТехнологическиеОперации - операция для которой необходимо получить нормативы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - нормативы с колонками:
//		* Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - ссылка на реквизит.
//		* ЗначениеМин - Число - нижнее нормативное значение.
//		* ЗначениеМакс - Число - верхнее нормативное значение.
//		* Формат - Строка - формат редактирования и отображения реквизита.
//
Функция НормативыЗначенийДопРеквизитов(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	
	ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидОперации");
	
	Если ВидОперации.Пустая() Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Нормативы.Свойство     КАК Свойство,
			|	Нормативы.ЗначениеМин  КАК ЗначениеМин,
			|	Нормативы.ЗначениеМакс КАК ЗначениеМакс,
			|	""""                   КАК Формат
			|ИЗ
			|	Справочник.ТехнологическиеОперации.НормативыВидаОперации КАК Нормативы
			|ГДЕ
			|	Нормативы.Ссылка = &Ссылка";
		
	Иначе
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Справочники.ВидыТехнологическихОпераций.СоздатьВТСвойстваНабора(ВидОперации, МенеджерВременныхТаблиц, Истина, Ложь);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Нормативы.Свойство                            КАК Свойство,
			|	Нормативы.ЗначениеМин                         КАК ЗначениеМин,
			|	Нормативы.ЗначениеМакс                        КАК ЗначениеМакс,
			|	ЕСТЬNULL(СвойстваНабора.ФорматСвойства, """") КАК Формат
			|ИЗ
			|	Справочник.ТехнологическиеОперации.НормативыВидаОперации КАК Нормативы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСвойстваНабора КАК СвойстваНабора
			|		ПО Нормативы.Свойство = СвойстваНабора.Свойство
			|ГДЕ
			|	Нормативы.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает текст запроса получения реквизитов исполнителя операции
//
// Параметры:
//  ИмяТаблицыОперации	 - Строка	 - имя таблицы ТехнологическиеОперации.
// 
// Возвращаемое значение:
//   - Строка - текст запроса получения реквизитов расчета времени выполнения операции.
//
Функция ТекстЗапросаРеквизитыИсполнителяОперации(ИмяТаблицыОперации) Экспорт
	
	ТекстЗапроса =
		"ВЫБОР
		|	КОГДА ТехнологическиеОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
		|		ТОГДА ТехнологическиеОперации.РабочийЦентр
		|	ИНАЧЕ ТехнологическиеОперации.РабочийЦентр.ВидРабочегоЦентра
		|КОНЕЦ КАК ВидРабочегоЦентра,
		|
		|ТехнологическиеОперации.РабочийЦентр КАК РабочийЦентр,
		|
		|ВЫБОР
		|	КОГДА ТехнологическиеОперации.РабочийЦентр = НЕОПРЕДЕЛЕНО
		|			ИЛИ ТехнологическиеОперации.РабочийЦентр = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
		|			ИЛИ ТехнологическиеОперации.РабочийЦентр = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|		ТОГДА ЛОЖЬ
		|	КОГДА ТехнологическиеОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
		|		ТОГДА ТехнологическиеОперации.РабочийЦентр.ПараллельнаяЗагрузка
		|	ИНАЧЕ ТехнологическиеОперации.РабочийЦентр.ВидРабочегоЦентра.ПараллельнаяЗагрузка
		|КОНЕЦ КАК ПараллельнаяЗагрузка";
		
	Возврат СтрЗаменить(ТекстЗапроса, "ТехнологическиеОперации" ,ИмяТаблицыОперации);
	
КонецФункции

// Возвращает текст запроса получения реквизитов расчета времени выполнения операции.
//
// Параметры:
//  ИмяТаблицыОперации	 - Строка	 - имя таблицы ТехнологическиеОперации.
// 
// Возвращаемое значение:
//   - Строка - текст запроса получения реквизитов расчета времени выполнения операции.
//
Функция ТекстЗапросаРеквизитыРасчетаВремениВыполненияОперации(ИмяТаблицыОперации) Экспорт
	
	ТекстЗапроса = 
		"ВЫБОР
		|		КОГДА ТехнологическиеОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ПараллельнаяЗагрузка
		|							И ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|						ТОГДА ВЫБОР
		|								КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ИспользуютсяВариантыНаладки
		|									ТОГДА ТехнологическиеОперации.ВариантНаладки.ВремяРаботы
		|								ИНАЧЕ ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ВремяРаботы
		|							КОНЕЦ
		|					ИНАЧЕ ТехнологическиеОперации.ВремяШтучное
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ПараллельнаяЗагрузка
		|						И ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|					ТОГДА ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
		|								ТОГДА ТехнологическиеОперации.ВариантНаладки.ВремяРаботы
		|							ИНАЧЕ ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ВремяРаботы
		|						КОНЕЦ
		|				ИНАЧЕ ТехнологическиеОперации.ВремяШтучное
		|			КОНЕЦ
		|	КОНЕЦ КАК ВремяШтучное,
		|	ВЫБОР
		|		КОГДА ТехнологическиеОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ПараллельнаяЗагрузка
		|							И ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|						ТОГДА ВЫБОР
		|								КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ИспользуютсяВариантыНаладки
		|									ТОГДА ТехнологическиеОперации.ВариантНаладки.ЕдиницаИзмерения
		|								ИНАЧЕ ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ЕдиницаИзмерения
		|							КОНЕЦ
		|					ИНАЧЕ ТехнологическиеОперации.ВремяШтучноеЕдИзм
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ПараллельнаяЗагрузка
		|						И ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|					ТОГДА ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
		|								ТОГДА ТехнологическиеОперации.ВариантНаладки.ЕдиницаИзмерения
		|							ИНАЧЕ ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ЕдиницаИзмерения
		|						КОНЕЦ
		|				ИНАЧЕ ТехнологическиеОперации.ВремяШтучноеЕдИзм
		|			КОНЕЦ
		|	КОНЕЦ КАК ВремяШтучноеЕдИзм,
		|	ТехнологическиеОперации.ВремяПЗ КАК ВремяПЗ,
		|	ВЫБОР
		|		КОГДА ТехнологическиеОперации.ВремяПЗ <> 0
		|			ТОГДА ТехнологическиеОперации.ВремяПЗЕдИзм
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка)
		|	КОНЕЦ КАК ВремяПЗЕдИзм,
		|	ВЫБОР
		|		КОГДА ТехнологическиеОперации.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры) = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|						ТОГДА 1
		|					ИНАЧЕ  ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).КоэффициентВремениРаботы
		|				КОНЕЦ
		|			ИНАЧЕ 1
		|	КОНЕЦ КАК КоэффициентВремениРаботы";
		
	Возврат СтрЗаменить(ТекстЗапроса, "ТехнологическиеОперации" ,ИмяТаблицыОперации);
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)

	УправлениеДаннымиОбИзделияхВызовСервера.ТехнологическиеОперацииОбработкаПолученияФормы(
				ВидФормы, 
				Параметры, 
				ВыбраннаяФорма, 
				СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

#Область НумерацияОпераций

// Заполняет порядок следования операций в таблице
// 
// Параметры:
// 	ТаблицаОперации - ТаблицаЗначений - таблица операций
//
Процедура ЗаполнитьПорядокОпераций(ТаблицаОперации) Экспорт
	
	ТаблицаОперации.Колонки.Добавить("НомерПрисвоен",          Новый ОписаниеТипов("Булево"));
	ТаблицаОперации.Колонки.Добавить("НомерСледующейПрисвоен", Новый ОписаниеТипов("Булево"));
	
	ТекущийНомер = МаксимальныйНомерОперации(ТаблицаОперации) + 1;
	НазначенныеНомера = Новый Соответствие;
	
	ЗаполнитьНомерНачальныхОпераций(ТаблицаОперации, ТекущийНомер, НазначенныеНомера);
	ЗаполнитьНомерЗависимыхОпераций(ТаблицаОперации, ТекущийНомер, НазначенныеНомера);
	УдалитьВложенныеМаршрутыИзТаблицыОпераций(ТаблицаОперации);
	
	ТаблицаОперации.Колонки.Удалить("НомерПрисвоен");
	ТаблицаОперации.Колонки.Удалить("НомерСледующейПрисвоен");
	
КонецПроцедуры

Функция МаксимальныйНомерОперации(ТаблицаОперации)
	
	Если ЗначениеЗаполнено(ТаблицаОперации) Тогда
		
		ТаблицаОперацийКопия = ТаблицаОперации.Скопировать(, "ИсходныйНомерОперации");
		ТаблицаОперацийКопия.Сортировать("ИсходныйНомерОперации Убыв");
		Возврат ТаблицаОперацийКопия[0].ИсходныйНомерОперации;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьНомерНачальныхОпераций(ТаблицаОперации, ТекущийНомер, НазначенныеНомера)
	
	КлючСвязиРодитель = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	НомераОпераций = НомераНачальныхОпераций(ТаблицаОперации, КлючСвязиРодитель);
	
	Для каждого НомерОперации Из НомераОпераций Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИсходныйНомерОперации", НомерОперации);
		СтруктураОтбора.Вставить("КлючСвязиРодитель", КлючСвязиРодитель);
	
		СписокСтрок = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
		Для каждого Строка Из СписокСтрок Цикл
			
			Строка.НомерОперации = НомерОперации;
			Строка.НомерСледующейОперации = Строка.ИсходныйНомерСледующейОперации;
			УстановитьФлагНомерОперацииПрисвоен(Строка);
			
			Если Строка.СодержитВложенныйМаршрут Тогда
				ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(
					ТаблицаОперации, НомерОперации, ТекущийНомер, Строка.КлючСвязи, НазначенныеНомера);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНомерЗависимыхОпераций(ТаблицаОперации, ТекущийНомер, НазначенныеНомера)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязиРодитель", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ОтборНеобработанныеСтроки = Новый Структура;
	ОтборНеобработанныеСтроки.Вставить("НомерПрисвоен", Истина);
	ОтборНеобработанныеСтроки.Вставить("НомерСледующейПрисвоен", Ложь);
	ОтборНеобработанныеСтроки.Вставить("КлючСвязиРодитель", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	СписокСтрок = ТаблицаОперации.НайтиСтроки(ОтборНеобработанныеСтроки);
	Пока НЕ СписокСтрок.Количество() = 0 Цикл
		
		Для каждого Строка Из СписокСтрок Цикл
			
			СтруктураОтбора.Вставить("ИсходныйНомерОперации", Строка.ИсходныйНомерСледующейОперации);
			СледующиеСтроки = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
			
			Для каждого СледующаяСтрока Из СледующиеСтроки Цикл
				
				Если НЕ СледующаяСтрока.НомерПрисвоен Тогда
					
					СледующаяСтрока.НомерОперации = СледующаяСтрока.ИсходныйНомерОперации;
					СледующаяСтрока.НомерСледующейОперации = СледующаяСтрока.ИсходныйНомерСледующейОперации;
					УстановитьФлагНомерОперацииПрисвоен(СледующаяСтрока);
					
					Если СледующаяСтрока.СодержитВложенныйМаршрут Тогда
						ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(
							ТаблицаОперации, СледующаяСтрока.НомерОперации, ТекущийНомер, СледующаяСтрока.КлючСвязи, НазначенныеНомера);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Строка.НомерСледующейПрисвоен = Истина;
			
		КонецЦикла;
		
		СписокСтрок = ТаблицаОперации.НайтиСтроки(ОтборНеобработанныеСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьВложенныеМаршрутыИзТаблицыОпераций(ТаблицаОперации)
	
	СтруктураПоискаОпераций = Новый Структура("СодержитВложенныйМаршрут", Истина);
	СписокСтрок = ТаблицаОперации.НайтиСтроки(СтруктураПоискаОпераций);
	
	Если ЗначениеЗаполнено(СписокСтрок) Тогда
		
		Для каждого СтрокаОперация Из СписокСтрок Цикл
			
			СтруктураПоиска = Новый Структура("КлючСвязиРодитель,НомерСледующейОперации", СтрокаОперация.КлючСвязи, 0);
			СписокПоследнихОпераций = ТаблицаОперации.НайтиСтроки(СтруктураПоиска);
			Для каждого ПоследняяОпераций Из СписокПоследнихОпераций Цикл
				ПоследняяОпераций.НомерСледующейОперации = СтрокаОперация.НомерСледующейОперации;
			КонецЦикла;
			
			ТаблицаОперации.Удалить(СтрокаОперация);
			
		КонецЦикла;
		
		ПеренумероватьОперацииКартыСВложеннымиМаршрутами(ТаблицаОперации);
		ТаблицаОперации.Сортировать("НомерОперации Возр");
		
	КонецЕсли;
	
КонецПроцедуры

Функция НомераНачальныхОпераций(ТаблицаОперации, КлючСвязиРодитель)
	
	Результат = Новый Массив;
	
	СтруктураПоиска = Новый Структура("КлючСвязиРодитель, ИсходныйНомерСледующейОперации", КлючСвязиРодитель);
	
	Для каждого Строка Из ТаблицаОперации Цикл
		
		Если Строка.КлючСвязиРодитель <> КлючСвязиРодитель Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.ИсходныйНомерСледующейОперации = Строка.ИсходныйНомерОперации;
		
		НайденныеСтроки = ТаблицаОперации.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Результат.Добавить(Строка.ИсходныйНомерОперации);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьФлагНомерОперацииПрисвоен(СтрокаОперации)
	
	СтрокаОперации.НомерПрисвоен = Истина;
	Если СтрокаОперации.ИсходныйНомерСледующейОперации = 0 Тогда
		СтрокаОперации.НомерСледующейПрисвоен = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(ТаблицаОперации, НачальныйНомер, ТекущийНомер, КлючСвязиРодитель, НазначенныеНомера)
	
	#Область ПервыеОперации
	
	НомераОпераций = НомераНачальныхОпераций(ТаблицаОперации, КлючСвязиРодитель);
	СтруктураОтбора = Новый Структура("КлючСвязиРодитель, ИсходныйНомерОперации", КлючСвязиРодитель);
	
	Для каждого ИсходныйНомерОперации Из НомераОпераций Цикл
		
		СтруктураОтбора.ИсходныйНомерОперации = ИсходныйНомерОперации;
		СтрокиМаршрута = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
		
		Для каждого Строка Из СтрокиМаршрута Цикл
			
			Если Строка.ИсходныйНомерОперации = 1 Тогда
				
				Строка.НомерОперации = НачальныйНомер;
				
			Иначе
				
				Строка.НомерОперации = ТекущийНомер;
				ТекущийНомер = ТекущийНомер + 1;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ИсходныйНомерСледующейОперации) Тогда
				
				ЗаполнитьНомерСледующейОперацииВложенногоМаршрута(
					Строка, НазначенныеНомера, ТекущийНомер, КлючСвязиРодитель);
				
			КонецЕсли;
			
			УстановитьФлагНомерОперацииПрисвоен(Строка);
			
			Если Строка.СодержитВложенныйМаршрут Тогда
				
				ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(
					ТаблицаОперации, НачальныйНомер, ТекущийНомер, Строка.КлючСвязи, НазначенныеНомера);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ПоследующиеОперации
	
	ОтборНеобработанныеСтроки = Новый Структура;
	ОтборНеобработанныеСтроки.Вставить("НомерПрисвоен", Истина);
	ОтборНеобработанныеСтроки.Вставить("НомерСледующейПрисвоен", Ложь);
	ОтборНеобработанныеСтроки.Вставить("КлючСвязиРодитель", КлючСвязиРодитель);
	
	СписокСтрок = ТаблицаОперации.НайтиСтроки(ОтборНеобработанныеСтроки);
	Пока НЕ СписокСтрок.Количество() = 0 Цикл
		
		Для каждого Строка Из СписокСтрок Цикл
			
			СтруктураОтбора.Вставить("ИсходныйНомерОперации", Строка.ИсходныйНомерСледующейОперации);
			СледующиеСтроки = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
			
			Для каждого СледующаяСтрока Из СледующиеСтроки Цикл
				
				Если НЕ СледующаяСтрока.НомерПрисвоен Тогда
					
					СледующаяСтрока.НомерОперации = Строка.НомерСледующейОперации;
					
					Если ЗначениеЗаполнено(СледующаяСтрока.ИсходныйНомерСледующейОперации) Тогда
						
						ЗаполнитьНомерСледующейОперацииВложенногоМаршрута(
							СледующаяСтрока, НазначенныеНомера, ТекущийНомер, КлючСвязиРодитель);
						
					КонецЕсли;
					
					УстановитьФлагНомерОперацииПрисвоен(СледующаяСтрока);
					
					Если СледующаяСтрока.СодержитВложенныйМаршрут Тогда
						
						ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(
							ТаблицаОперации, СледующаяСтрока.НомерОперации, ТекущийНомер, СледующаяСтрока.КлючСвязи, НазначенныеНомера);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Строка.НомерСледующейПрисвоен = Истина;
			
		КонецЦикла;
		
		СписокСтрок = ТаблицаОперации.НайтиСтроки(ОтборНеобработанныеСтроки);
		
	КонецЦикла;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ПеренумероватьОперацииКартыСВложеннымиМаршрутами(ТаблицаОперации)
	
	ТаблицаОперации.Сортировать("НомерОперации Возр");
	ТаблицаОперации.ЗаполнитьЗначения(Ложь, "НомерПрисвоен");
	
	ТаблицаОперации.Колонки.Добавить("Последователи");
	ТаблицаОперации.Колонки.Добавить("Предшественники");
	ЗаполнитьИндексыСмежныхОпераций(ТаблицаОперации);
	
	НазначенныеНомера = Новый Соответствие;
	НомерОперации = 1;
	
	Для каждого Строка Из ТаблицаОперации Цикл
		
		Если Строка.Предшественники.Количество() = 0 Тогда
			ПеренумероватьОперацииРекурсивно(ТаблицаОперации, Строка, НомерОперации, НазначенныеНомера);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОперации.Колонки.Удалить("Последователи");
	ТаблицаОперации.Колонки.Удалить("Предшественники");
	
КонецПроцедуры

Процедура ЗаполнитьНомерСледующейОперацииВложенногоМаршрута(Строка, НазначенныеНомера, ТекущийНомер, КлючСвязиРодитель)
	
	ИсходныйНомерСледующейОперации = Строка.ИсходныйНомерСледующейОперации;
	
	НомераРодителя = НазначенныеНомера.Получить(КлючСвязиРодитель);
	
	Если НомераРодителя = Неопределено Тогда
		НомераРодителя = Новый Соответствие;
	КонецЕсли;
	
	НомерСледующейОперации = НомераРодителя.Получить(ИсходныйНомерСледующейОперации);
	
	Если НомерСледующейОперации = Неопределено Тогда
		
		НомерСледующейОперации = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
		НомераРодителя.Вставить(ИсходныйНомерСледующейОперации, НомерСледующейОперации);
		
	КонецЕсли;
	
	Строка.НомерСледующейОперации = НомерСледующейОперации;
	
	НазначенныеНомера.Вставить(КлючСвязиРодитель, НомераРодителя);
	
КонецПроцедуры

Процедура ЗаполнитьИндексыСмежныхОпераций(ТаблицаОперации)
	
	Для каждого Строка Из ТаблицаОперации Цикл
		
		Последователи = Новый Массив;
		СтруктураПоиска = Новый Структура("НомерОперации", Строка.НомерСледующейОперации);
		НайденныеСтроки = ТаблицаОперации.НайтиСтроки(СтруктураПоиска);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Последователи.Добавить(ТаблицаОперации.Индекс(НайденнаяСтрока));
		КонецЦикла;
		Строка.Последователи = Последователи;
		
		Предшественники = Новый Массив;
		СтруктураПоиска = Новый Структура("НомерСледующейОперации", Строка.НомерОперации);
		НайденныеСтроки = ТаблицаОперации.НайтиСтроки(СтруктураПоиска);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Предшественники.Добавить(ТаблицаОперации.Индекс(НайденнаяСтрока));
		КонецЦикла;
		Строка.Предшественники = Предшественники;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренумероватьОперацииРекурсивно(ТаблицаОперации, Операция, НомерОперации, НазначенныеНомера)
	
	Для каждого Индекс Из Операция.Предшественники Цикл
		Если НЕ ТаблицаОперации[Индекс].НомерПрисвоен Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Номер = НазначенныеНомера.Получить(Операция.НомерОперации);
	
	Если Номер = Неопределено Тогда
		
		Номер = НомерОперации;
		НазначенныеНомера.Вставить(Операция.НомерОперации, Номер);
		
		Для каждого Индекс Из Операция.Предшественники Цикл
			ТаблицаОперации[Индекс].НомерСледующейОперации = Номер;
		КонецЦикла;
		
		НомерОперации = НомерОперации + 1;
		
	КонецЕсли;
	
	Операция.НомерОперации = Номер;
	Операция.НомерПрисвоен = Истина;
	
	Для каждого Индекс Из Операция.Последователи Цикл
		ПеренумероватьОперацииРекурсивно(ТаблицаОперации, ТаблицаОперации[Индекс], НомерОперации, НазначенныеНомера);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ДлинаИдентификатораОперации() Экспорт
	
	Возврат 5;
	
КонецФункции

Функция РассчитатьКоэффициентПересчетаНормативов(Операция, Количество) Экспорт
	
	Если ЗначениеЗаполнено(Количество) Тогда
		
		КоличествоОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Операция, "Количество");
		
		Если ЗначениеЗаполнено(КоличествоОперация) Тогда
			Результат = Количество / КоличествоОперация;
		Иначе
			Результат = 1;
		КонецЕсли;
		
	Иначе
		
		Результат = 1;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Конструктор таблицы операций
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Операция - СправочникСсылка.ТехнологическиеОперации -
// * ОперацияПредставление - Строка -
// * КлючСвязи - УникальныйИдентификатор -
// * КоличествоНаПартию - Число -
// * Количество - Число -
// * ЕдиницаИзмерения - Строка -
// * ИдентификаторОперации - Число -
// * НомерОперации - Число -
// * НомерСледующейОперации - Число -
// * ИсходныйНомерОперации - Число -
// * ИсходныйНомерСледующейОперации - Число -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров -
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// * Норма - Число -
// * ПараллельнаяЗагрузка - Булево -
// * ВремяВыполнения - Число -
// * ВремяВыполненияЕдИзм - ПеречислениеСсылка.ЕдиницыИзмеренияВремени -
// * ВремяШтучное - Число -
// * ВремяШтучноеЕдИзм - ПеречислениеСсылка.ЕдиницыИзмеренияВремени -
// * ВремяПЗ - Число -
// * ВремяПЗЕдИзм - ПеречислениеСсылка.ЕдиницыИзмеренияВремени -
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// * Загрузка - Число -
// * Непрерывная - Булево -
// * ОперацияРодитель - СправочникСсылка.ТехнологическиеОперации -
// * СодержитВложенныйМаршрут - Булево -
// * ВложенныйМаршрут - СправочникСсылка.МаршрутныеКарты -
// * КлючСвязиРодитель - УникальныйИдентификатор -
// * КлючСвязиВложенныйМаршрут - УникальныйИдентификатор -
// * СодержитТехнологическийПроцесс - Булево -
// * ТехнологическийПроцесс - СправочникСсылка.ТехнологическиеПроцессы -
Функция ТаблицаОперацииКонструктор() Экспорт
	
	ТаблицаОперации = Новый ТаблицаЗначений;
	ТаблицаОперации.Колонки.Добавить("Операция",              Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	ТаблицаОперации.Колонки.Добавить("ОперацияПредставление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаОперации.Колонки.Добавить("ОперацияРодитель",      Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	ТаблицаОперации.Колонки.Добавить("КлючСвязи",             Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаОперации.Колонки.Добавить("КлючСвязиРодитель",     Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаОперации.Колонки.Добавить("КоличествоНаПартию",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОперации.Колонки.Добавить("ВидОперации",           Новый ОписаниеТипов("СправочникСсылка.ВидыТехнологическихОпераций"));
	
	ТаблицаОперации.Колонки.Добавить("Количество",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОперации.Колонки.Добавить("ЕдиницаИзмерения",      Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));
	
	ТаблицаОперации.Колонки.Добавить("ИдентификаторОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(25,0)));
	
	ТаблицаОперации.Колонки.Добавить("НомерОперации",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаОперации.Колонки.Добавить("НомерСледующейОперации",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаОперации.Колонки.Добавить("ИсходныйНомерОперации",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаОперации.Колонки.Добавить("ИсходныйНомерСледующейОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	
	ТаблицаОперации.Колонки.Добавить("РабочийЦентр",      Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров"));
	ТаблицаОперации.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	ТаблицаОперации.Колонки.Добавить("Участок", Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеУчастки"));
	
	ТаблицаОперации.Колонки.Добавить("Норма",             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	ТаблицаОперации.Колонки.Добавить("ПараллельнаяЗагрузка", Новый ОписаниеТипов("Булево"));
	
	ТаблицаОперации.Колонки.Добавить("ВремяВыполнения",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,1)));
	ТаблицаОперации.Колонки.Добавить("ВремяВыполненияЕдИзм", Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"));
	
	ТаблицаОперации.Колонки.Добавить("КоэффициентВремениРаботы",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,2)));
	
	ТаблицаОперации.Колонки.Добавить("ВремяШтучное",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,1)));
	ТаблицаОперации.Колонки.Добавить("ВремяШтучноеЕдИзм", Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"));
	
	ТаблицаОперации.Колонки.Добавить("ВремяПЗ",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,1)));
	ТаблицаОперации.Колонки.Добавить("ВремяПЗЕдИзм", Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"));
	
	ТаблицаОперации.Колонки.Добавить("ВариантНаладки",  Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки"));
	ТаблицаОперации.Колонки.Добавить("Загрузка",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОперации.Колонки.Добавить("Непрерывная",     Новый ОписаниеТипов("Булево"));
	ТаблицаОперации.Колонки.Добавить("МожноПовторить",  Новый ОписаниеТипов("Булево"));
	ТаблицаОперации.Колонки.Добавить("МожноПропустить", Новый ОписаниеТипов("Булево"));
	ТаблицаОперации.Колонки.Добавить("Контроль",        Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыКонтроляТехнологическихОпераций"));
	
	//
	ТаблицаОперации.Колонки.Добавить("СодержитВложенныйМаршрут",  Новый ОписаниеТипов("Булево"));
	ТаблицаОперации.Колонки.Добавить("ВложенныйМаршрут",          Новый ОписаниеТипов("СправочникСсылка.МаршрутныеКарты")); 
	ТаблицаОперации.Колонки.Добавить("КлючСвязиВложенныйМаршрут", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаОперации.Колонки.Добавить("МаршрутнаяКарта",           Новый ОписаниеТипов("СправочникСсылка.МаршрутныеКарты"));
	
	//
	ТаблицаОперации.Колонки.Добавить("СодержитТехнологическийПроцесс",   Новый ОписаниеТипов("Булево"));
	ТаблицаОперации.Колонки.Добавить("ТехнологическийПроцесс", 	         Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеПроцессы"));
	ТаблицаОперации.Колонки.Добавить("КоэффициентТехнологическогоПроцесса", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	//
	ТаблицаОперации.Колонки.Добавить("Этап",       Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	ТаблицаОперации.Колонки.Добавить("НомерЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	
	Возврат ТаблицаОперации;
	
КонецФункции

Функция РеквизитыМаршрутаОперации(ВладелецОперации) Экспорт
	
	Результат = Новый Структура("Маршрут, МаршрутПредставление, МаршрутДоступен");
	
	Если ТипЗнч(ВладелецОперации) = Тип("СправочникСсылка.ЭтапыПроизводства") Тогда
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Владелец");
		Реквизиты.Вставить("ВладелецПредставление", "Владелец.Представление");
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецОперации, Реквизиты);
		Результат.Маршрут              = ЗначенияРеквизитов.Владелец;
		Результат.МаршрутПредставление = ЗначенияРеквизитов.ВладелецПредставление;
	Иначе
		Результат.Маршрут              = ВладелецОперации;
		Результат.МаршрутПредставление = Строка(ВладелецОперации);
	КонецЕсли;
	
	Если ТипЗнч(Результат.Маршрут) = Тип("СправочникСсылка.МаршрутныеКарты") Тогда
		Результат.МаршрутДоступен = ПолучитьФункциональнуюОпцию("ИспользоватьМаршрутныеКарты");
	Иначе
		Результат.МаршрутДоступен = ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстПоляРеквизитыМаршрутаОперации(ИсточникОперации = "") Экспорт
	
	ТекстПоля = "
	|	ВЫБОР КОГДА Операция.Владелец ССЫЛКА Справочник.ЭтапыПроизводства ТОГДА
	|		Операция.Владелец.Владелец
	|	ИНАЧЕ Операция.Владелец КОНЕЦ                                           КАК Маршрут,
	|	ВЫБОР КОГДА Операция.Владелец ССЫЛКА Справочник.ЭтапыПроизводства ТОГДА
	|		ПРЕДСТАВЛЕНИЕ(Операция.Владелец.Владелец)
	|	ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Операция.Владелец) КОНЕЦ                            КАК МаршрутПредставление
	|";
	
	Если ИсточникОперации <> "" Тогда
		
		ТекстПоля = СтрЗаменить(ТекстПоля, "Операция", ИсточникОперации);
		
	КонецЕсли;
	
	Возврат ТекстПоля;
	
КонецФункции

#КонецОбласти


#КонецОбласти

#КонецЕсли