#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ Локализация

// Функция получает список договоров и настроек подключений к СБП для рабочего места клиента.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация в договоре с платеж. системой
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица с колонками:
//		* Договор					- СправочникСсылка.ДоговорыЭквайринга - Договор подключения к платежной системе.
//		* НастройкаПодключения		- СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - Настройка интеграции.- Формат даты выработки
//
Функция СписокДоговоровИПодключенийСБП(Организация) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Интеграция КАК НастройкаПодключения,
	|	НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Договор КАК Договор
	|ПОМЕСТИТЬ НастройкиИнтеграцииПоОрганизации
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииСПлатежнымиСистемамиУТ КАК НастройкиИнтеграцииСПлатежнымиСистемамиУТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|		ПО НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Договор = ДоговорыЭквайринга.Ссылка
	|		И (ДоговорыЭквайринга.Организация = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиРМКПлатежныеСистемы.ДоговорПодключенияКПлатежнойСистеме КАК ДоговорПодключения,
	|	НастройкиРМКПлатежныеСистемы.Ссылка.ВидСсылкиСБП КАК ВидСсылкиСБП,
	|	НастройкиРМКПлатежныеСистемы.КассоваяСсылка КАК КассоваяСсылка,
	|	НастройкиРМКПлатежныеСистемы.ИдентификаторОплаты КАК ИдентификаторОплаты,
	|	НастройкиИнтеграцииПоОрганизации.НастройкаПодключения КАК НастройкаПодключения
	|ИЗ
	|	Справочник.НастройкиРМК.ПлатежныеСистемы КАК НастройкиРМКПлатежныеСистемы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиИнтеграцииПоОрганизации КАК НастройкиИнтеграцииПоОрганизации
	|		ПО НастройкиРМКПлатежныеСистемы.ДоговорПодключенияКПлатежнойСистеме = НастройкиИнтеграцииПоОрганизации.Договор
	|ГДЕ
	|	НастройкиРМКПлатежныеСистемы.Ссылка.РабочееМесто = &РабочееМесто";

	РабочееМестоКлиента = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМестоКлиента);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Возврат МассивРезультатов[1].Выгрузить();
	
КонецФункции

//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ОписанияКоманд = Новый Структура;

	//++ Локализация

	ОписанияКоманд = ОписаниеКомандПечатиКассовойСсылки();

	//-- Локализация

	СписокСортировки = Новый СписокЗначений;
	Для каждого Элем Из ОписанияКоманд Цикл
		СписокСортировки.Добавить(Элем.Ключ, Элем.Значение.Представление);
	КонецЦикла;
	СписокСортировки.СортироватьПоПредставлению();

	Для каждого ЭлемСписка Из СписокСортировки Цикл
		ОписаниеКоманды = ОписанияКоманд[ЭлемСписка.Значение];
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = ЭлемСписка.Значение;
		КомандаПечати.Представление = ОписаниеКоманды.Представление;
		КомандаПечати.Обработчик = ОписаниеКоманды.Обработчик;
	
	КонецЦикла;
	
КонецПроцедуры

//++ Локализация

// Возвращаемое значение:
//   Структура:
//		*Ключ - идентификатор команды
//		*Значение - Структура:
//			**Представление - Строка
//			**Обработчик - Строка
//			**ФорматПечати - Число - значения см. ПереводыСБПc2b.КарточкаКассовойСсылки
//
Функция ОписаниеКомандПечатиКассовойСсылки() Экспорт
	
	ЕдиныйОбработчик = "Форма.ПечатьКассовойСсылкиПоШаблону";
	
	ШаблонЗначения = Новый Структура("Представление, Обработчик, ФорматПечати", 
										"", ЕдиныйОбработчик, 0);
	
	Результат = Новый Структура;
	
	Ключ = "КассоваяСсылкаА5Широкий";
	ВсеЗначения = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонЗначения);
	ВсеЗначения.Представление = НСтр("ru = 'Кассовый QR-код (А5 широкий)';
									|en = 'QR code payment link (A5 wide)'");
	ВсеЗначения.ФорматПечати = 1;
	Результат.Вставить(Ключ, ВсеЗначения);
	
	Ключ = "КассоваяСсылкаА5ТолькоЛого";
	ВсеЗначения = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонЗначения);
	ВсеЗначения.Представление = НСтр("ru = 'Кассовый QR-код (А5 только логотипы)';
									|en = 'QR code payment link (A5 labels only)'");
	ВсеЗначения.ФорматПечати = 2;
	Результат.Вставить(Ключ, ВсеЗначения);
	
	Ключ = "КассоваяСсылкаА5Узкий";
	ВсеЗначения = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонЗначения);
	ВсеЗначения.Представление = НСтр("ru = 'Кассовый QR-код (А5 узкий)';
									|en = 'QR code payment link (A5 narrow)'");
	ВсеЗначения.ФорматПечати = 3;
	Результат.Вставить(Ключ, ВсеЗначения);
	
	Ключ = "КассоваяСсылкаА5УзкийГоризонтальный";
	ВсеЗначения = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонЗначения);
	ВсеЗначения.Представление = НСтр("ru = 'Кассовый QR-код (А5 узкий горизонтальный)';
									|en = 'QR code payment link (A5 narrow horizontal)'");
	ВсеЗначения.ФорматПечати = 4;
	Результат.Вставить(Ключ, ВсеЗначения);
	
	Ключ = "КассоваяСсылкаА6Квадратный";
	ВсеЗначения = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонЗначения);
	ВсеЗначения.Представление = НСтр("ru = 'Кассовый QR-код (А6 квадратный)';
									|en = 'QR code payment link (A6 square)'");
	ВсеЗначения.ФорматПечати = 5;
	Результат.Вставить(Ключ, ВсеЗначения);
	
	Ключ = "КассоваяСсылкаА6Круглый";
	ВсеЗначения = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонЗначения);
	ВсеЗначения.Представление = НСтр("ru = 'Кассовый QR-код (А6 круглый)';
									|en = 'QR code payment link (A6 round)'");
	ВсеЗначения.ФорматПечати = 6;
	Результат.Вставить(Ключ, ВсеЗначения);
	
	Возврат Результат;
	
КонецФункции

//-- Локализация

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	//++ Локализация
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.НастройкиРМК.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.14.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("64a162f9-d286-da43-aa26-1cf4245339e9");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.НастройкиРМК.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Вид ссылки СБП"" в элементах справочника Настройки РМК';
									|en = 'Fills the ""FPS link kind"" attribute in the ""Point of sale workplace settings"" catalog items'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.НастройкиРМК.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.НастройкиРМК.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.БлокируемыеОбъекты = "";
	
	//-- Локализация
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	//++ Локализация
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.НастройкиРМК";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиРМК.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиРМК КАК НастройкиРМК
		|ГДЕ
		|	НастройкиРМК.ВидСсылкиСБП = ЗНАЧЕНИЕ(Перечисление.ВидыСсылокСБП.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	//-- Локализация
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	//++ Локализация
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ОбновляемыеДанные.Количество() Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
		
	Для Каждого ЭлементСправочника Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСправочника.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ЭлементСправочника.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			НовыйВидСсылкиСБП = Перечисления.ВидыСсылокСБП.КассоваяСсылкаСБП;
			Если СправочникОбъект.ПлатежныеСистемы.Количество() Тогда
				НовыйВидСсылкиСБП = Перечисления.ВидыСсылокСБП.ПлатежнаяСсылкаСБП;
			КонецЕсли;
			Если СправочникОбъект.ВидСсылкиСБП <> НовыйВидСсылкиСБП Тогда
				СправочникОбъект.ВидСсылкиСБП = НовыйВидСсылкиСБП;
			КонецЕсли;
			
			Если СправочникОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ЭлементСправочника.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли