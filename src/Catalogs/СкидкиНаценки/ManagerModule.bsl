
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Данные.ВариантСовместногоПрименения) И Не ЗначениеЗаполнено(Данные.Наименование) Тогда
		СтандартнаяОбработка = Ложь;
		Представление = Данные.ВариантСовместногоПрименения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("ЭтоГруппа");
	Поля.Добавить("ВариантСовместногоПрименения");
	Поля.Добавить("Наименование");
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Получает реквизиты объекта, которые необходимо блокировать от изменения.
//
// Возвращаемое значение:
//  Массив - блокируемые реквизиты объекта.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ВалютаПредоставления");
	Результат.Добавить("ВариантСовместногоПрименения");
	Результат.Добавить("ВариантРасчетаРезультатаСовместногоПрименения");
	Результат.Добавить("ВидЦены");
	Результат.Добавить("ЗначениеСкидкиНаценки");
	Результат.Добавить("СегментПодарков");
	Результат.Добавить("СпособПредоставления;СпособПредоставленияСкидкиНаценки,СпособПредоставленияБонусныеБаллы,ПоказатьФормуНастроекВнешнейОбработкиБонусы,ПоказатьФормуНастроекВнешнейОбработки,УточнениеПоЦеновымГруппамПредставлениеСумма");
	Результат.Добавить("Управляемая;СпособНазначения");
	Результат.Добавить("УсловияПредоставления;УсловияПредоставленияПодобратьУсловияПредоставления,УсловияПредоставленияПодобратьУсловияПредоставленияБонусы,УсловияПредоставленияГруппаСоздать");
	Результат.Добавить("ЦеновыеГруппы");
	Результат.Добавить("Родитель");
	Результат.Добавить("ТекстСообщения");
	Результат.Добавить("ВидКартыЛояльности");
	Результат.Добавить("ИспользоватьКратность");
	Результат.Добавить("УсловиеДляСкидкиКоличеством");
	Результат.Добавить("ТочностьОкругления");
	Результат.Добавить("ПсихологическоеОкругление");
	Результат.Добавить("ВариантОкругления");
	Результат.Добавить("СпособПримененияСкидки");
	Результат.Добавить("СпособНазначения;СпособНазначенияВручную,СпособНазначенияАвтоматически");
	Результат.Добавить("БонуснаяПрограммаЛояльности");
	Результат.Добавить("ПериодДействия;ИспользоватьПериодДействия");
	Результат.Добавить("КоличествоПериодовДействия");
	Результат.Добавить("ПериодОтсрочкиНачалаДействия;ИспользоватьОтсрочкуНачалаДействия");
	Результат.Добавить("КоличествоПериодовОтсрочкиНачалаДействия");
	Результат.Добавить("ВариантОтбораНоменклатуры;ДополнительныйОтборПредставление,ОтборПредставление,СегментНоменклатуры,СписокНоменклатуры");
	Результат.Добавить("ПрименятьУмножениеВРамкахВышестоящейГруппы");
	Результат.Добавить("УчитыватьХарактеристики");
	Возврат Результат;
	
КонецФункции

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения:
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - Ключ - Имя табличной части объекта.
//                               Значение - Выгрузка в таблицу значений пустой табличной части.
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	#Область КорневаяГруппа
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КорневаяГруппа";
	Элемент.Наименование = НСтр("ru = 'Корневая группа';
								|en = 'Root group'", ОбщегоНазначения.КодОсновногоЯзыка());
	#КонецОбласти

КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - СправочникОбъект.СкидкиНаценки - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет предопределенный элемент справочника "Скидки (наценки)".
//
Процедура ЗаполнитьПредопределенныеЭлементы() Экспорт
	
	СправочникОбъект = Справочники.СкидкиНаценки.КорневаяГруппа.ПолучитьОбъект();
	СправочникОбъект.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум;
	СправочникОбъект.ВариантРасчетаРезультатаСовместногоПрименения = Перечисления.ВариантыРасчетаРезультатаСовместногоПрименения.ПоСтроке;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.СкидкиНаценки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.13.29";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b731350f-d952-4290-8b7b-e7e8e310fc81");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.СкидкиНаценки.ЗарегистрироватьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Обновление кэшированных запросов для скидок';
									|en = 'Update cached requests for discounts'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.СкидкиНаценки.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.СкидкиНаценки.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.СкидкиНаценки.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.СкидкиНаценки";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СкидкиНаценки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СкидкиНаценки КАК СкидкиНаценки
		|ГДЕ
		|	НЕ СкидкиНаценки.УдалитьОбновленНаПроизводительныйРежим
		|	И НЕ СкидкиНаценки.ЭтоГруппа
		|	И НЕ СкидкиНаценки.СпособПредоставления В(
		|		ВЫБРАТЬ
		|			ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка
		|		ИЗ
		|			Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки)");
	
	РегистрируемыеЭлементы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РегистрируемыеЭлементы);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.СкидкиНаценки";
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого ЭлементСправочника Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСправочника.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ЭлементСправочника.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
			Иначе
				
				НастройкиКомпоновкиДанных = СправочникОбъект.ХранилищеНастроекКомпоновкиДанных.Получить();
				Если ЗначениеЗаполнено(НастройкиКомпоновкиДанных)
						И ТипЗнч(НастройкиКомпоновкиДанных) = Тип("Структура")
						И НастройкиКомпоновкиДанных.Свойство("Запрос")
						И ТипЗнч(НастройкиКомпоновкиДанных.Запрос) = Тип("Структура")
						И НастройкиКомпоновкиДанных.Запрос.Свойство("ТекстЗапроса")
						И ТипЗнч(НастройкиКомпоновкиДанных.Запрос.ТекстЗапроса) = Тип("Строка")
						И СтрНайти(НастройкиКомпоновкиДанных.Запрос.ТекстЗапроса, "Константа" + "." + "ИспользоватьПроизводительныйРежимЗаписиИнформацииОДоступностиТоваровИРабот") > 0 Тогда
						
					СкидкиНаценкиСервер.ОбновитьКэшированныйЗапрос(СправочникОбъект);
					
				КонецЕсли;
				СправочникОбъект.УдалитьОбновленНаПроизводительныйРежим = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ЭлементСправочника.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
