#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает настройки оформления по умолчанию для вариантов анализа.
// 
// Параметры:
// 	ПокомпонентноеСравнение - Булево - Описание
// Возвращаемое значение:
// 	Структура - Описание:
// * ВключатьНоль - Булево -
// * РежимШкалыЗначений - ПеречислениеСсылка.РежимШкалыЗначенийДиаграмм -
// * РежимСглаживанияДиаграмм - Булево -
// * ОкантовкаДиаграмм - Булево -
// * ВыводитьПодписиКДиаграммам - Булево -
// * ОтображатьЛегенду - Булево -
// * ВыводитьМаркерТочекПрогноза - Булево -
// * ВыделятьМаксимальноеЗначениеДляПокомпонентногоСравнения - Булево -
// * ГрадиентДляПокомпонентногоСравнения - Булево -
// * ТолькоЦветОсновнойСерии - Булево -
// * ХранилищеНастроекОформления - ХранилищеЗначения -
Функция НастройкиОформленияПоУмолчанию(ПокомпонентноеСравнение = Ложь) Экспорт
	
	// Сформируем настройки цветов
	ЦветовыеНастройки = Новый Структура;
	
	НаборЦветов = Новый Соответствие;
	НаборЦветов.Вставить("Значение", WebЦвета.СинийСоСтальнымОттенком);
	НаборЦветов.Вставить("Прогноз", WebЦвета.НейтральноФиолетовоКрасный);
	НаборЦветов.Вставить("ЦелевоеЗначение", WebЦвета.ЗеленыйЛес);
	НаборЦветов.Вставить("ПозитивноеОтклонение", WebЦвета.КоролевскиГолубой);
	НаборЦветов.Вставить("НегативноеОтклонение", WebЦвета.Малиновый);
	НаборЦветов.Вставить("ЗонаДопустимыхОтклонений", Новый Цвет(255, 195, 0));
	
	ЦветовыеНастройки.Вставить("Цвета", НаборЦветов);
	
	ХранилищеНастроекОформления = Новый ХранилищеЗначения(ЦветовыеНастройки);
	
	// Сформируем настройки параметров вывода
	СтруктураНастроекОформления = Новый Структура;
	СтруктураНастроекОформления.Вставить("ХранилищеНастроекОформления", ХранилищеНастроекОформления);
	СтруктураНастроекОформления.Вставить("ТолькоЦветОсновнойСерии", Истина);
	СтруктураНастроекОформления.Вставить("ГрадиентДляПокомпонентногоСравнения", Истина);
	СтруктураНастроекОформления.Вставить("ВыделятьМаксимальноеЗначениеДляПокомпонентногоСравнения", Ложь);
	СтруктураНастроекОформления.Вставить("ВыводитьМаркерТочекПрогноза", Ложь);
	СтруктураНастроекОформления.Вставить("ОтображатьЛегенду", Истина);
	СтруктураНастроекОформления.Вставить("ВыводитьПодписиКДиаграммам", Истина);
	СтруктураНастроекОформления.Вставить("ОкантовкаДиаграмм", Ложь);
	СтруктураНастроекОформления.Вставить("РежимСглаживанияДиаграмм", Истина);
	СтруктураНастроекОформления.Вставить("РежимШкалыЗначений", Перечисления.РежимШкалыЗначенийДиаграмм.Авто);
	СтруктураНастроекОформления.Вставить("ВключатьНоль", Истина);
	
	Возврат СтруктураНастроекОформления;
	
КонецФункции

// Помещает во временное хранилище схему компоновки данных,
// настройки компоновки данных и пользовательские настройки и возвращает их адреса.
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант анализа, для которого возвращаются адреса.
//
// Возвращаемое значение:
//	Структура - структура, содержащая адреса:
//	 *СхемаКомпоновкиДанных - Строка - адрес временного хранилища, содержащий схему компоновки.
//	 *НастройкиКомпоновкиДанных - Строка - адрес временного хранилища, содержащий настройки схемы компоновки.
//	 *ПользовательскиеНастройки - Строка - адрес временного хранилища, содержащий пользовательские настройки.
//
Функция АдресаСхемыКомпоновкиДанныхИПользовательскихНастроек(ВариантАнализа) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ПользовательскиеНастройки");
	
	ЦелевойПоказатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "Владелец");
	ДанныеЦелевогоПоказателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЦелевойПоказатель,
		"СхемаКомпоновкиДанных, ХранилищеСхемыКомпоновкиДанных, ХранилищеНастроекКомпоновкиДанных");
	
	// Получим схему компоновки данных
	Если ЗначениеЗаполнено(ДанныеЦелевогоПоказателя.СхемаКомпоновкиДанных) ИЛИ ДанныеЦелевогоПоказателя.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		СхемаИНастройки = Справочники.СтруктураЦелей.ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦелевойПоказатель, ДанныеЦелевогоПоказателя.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ДанныеЦелевогоПоказателя.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	Настройки = ДанныеЦелевогоПоказателя.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор());
	КонецЕсли;
	
	ПользовательскиеНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "ХранилищеПользовательскихНастроекКомпоновкиДанных").Получить();
	
	Если ЗначениеЗаполнено(ПользовательскиеНастройки) Тогда
		Адреса.ПользовательскиеНастройки = ПоместитьВоВременноеХранилище(ПользовательскиеНастройки, Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

// Возвращает демонстрационные данные, указанные при варианте анализа
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант анализа, для которого возвращаются адреса.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица демонстрационных данных варианта анализа.
//
Функция ДемонстрационныеДанныеВариантаАнализа(ВариантАнализа) Экспорт 
	ДемонстрационныеДанные = Новый ТаблицаЗначений;
	
	ДанныеВариантаАнализа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантАнализа,
		"ТипАнализа, ЗначениеАнализа, ЗначениеАнализаДополнительное, ОбъектАнализа, ХранилищеДемонстрационныхДанных, РежимПокомпонентногоСравнения");
	ЗначениеАнализаИмя = Строка(ДанныеВариантаАнализа.ЗначениеАнализа.Получить());
	ЗначениеАнализаДополнительноеИмя = Строка(ДанныеВариантаАнализа.ЗначениеАнализаДополнительное.Получить());
	ОбъектАнализаИмя = Строка(ДанныеВариантаАнализа.ОбъектАнализа.Получить());
	
	ХранилищеДемонстрационныхДанныхЗначение = ДанныеВариантаАнализа.ХранилищеДемонстрационныхДанных.Получить();
	Если ХранилищеДемонстрационныхДанныхЗначение <> Неопределено Тогда
		ХранилищеДемонстрационныхДанных = ХранилищеДемонстрационныхДанныхЗначение.Данные; // ХранилищеЗначения
		ДемонстрационныеДанные = ХранилищеДемонстрационныхДанных.Получить(); // ТаблицаЗначений -
		
		КолонкаТаблицы = ДемонстрационныеДанные.Колонки.ЗначениеПоказателя; // КолонкаТаблицыЗначений - 
		КолонкаТаблицы.Имя = ЗначениеАнализаИмя;
		
		Если ДанныеВариантаАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение
			ИЛИ ДанныеВариантаАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика Тогда
			Если ДанныеВариантаАнализа.РежимПокомпонентногоСравнения = 0 Тогда
				КолонкаТаблицы = ДемонстрационныеДанные.Колонки.ОбъектАнализа; // КолонкаТаблицыЗначений -
				КолонкаТаблицы.Имя = ОбъектАнализаИмя;
			Иначе
				КолонкаТаблицы = ДемонстрационныеДанные.Колонки.ЗначениеПоказателяДополнительное; // КолонкаТаблицыЗначений -
				КолонкаТаблицы.Имя = ЗначениеАнализаДополнительноеИмя;
			КонецЕсли;
		КонецЕсли;
		Если ДанныеВариантаАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение Тогда
			Если ДанныеВариантаАнализа.РежимПокомпонентногоСравнения = 0 Тогда
				ПоследняяДата = ДемонстрационныеДанные[0].Период;
				ДемонстрационныеДанные.ЗаполнитьЗначения(Неопределено, "Период");
				
				ИтогПоТаблице = ДемонстрационныеДанные.Итог(ЗначениеАнализаИмя);
				НоваяСтрока = ДемонстрационныеДанные.Добавить();
				НоваяСтрока.Период = ПоследняяДата;
				НоваяСтрока[ЗначениеАнализаИмя] = ИтогПоТаблице;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ДемонстрационныеДанные;
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ОткрытиеСуществующегоОбъекта = Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ);
	СозданиеОбъектаНеИзСписка = Не ОткрытиеСуществующегоОбъекта
			И Не (Параметры.Свойство("ЗначенияЗаполнения") 
				И Параметры.ЗначенияЗаполнения.Свойство("Владелец")
				Или Параметры.Свойство("ЗначениеКопирования"));
	
	Если ВидФормы = "ФормаОбъекта" И СозданиеОбъектаНеИзСписка Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = Метаданные.Справочники.ВариантыАнализаЦелевыхПоказателей.Формы.ФормаПредупреждения;
	КонецЕсли;
КонецПроцедуры
	
#КонецОбласти 
