
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Параметры.Свойство("НастройкаФормированияПроводок") Тогда
		НастройкаФормированияПроводок = Параметры.НастройкаФормированияПроводок;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастройкаКомпоновки = Неопределено;
		Если Не Параметры.ЗначениеКопирования.Пустая() Тогда
			ДополнительныйОтбор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ДополнительныйОтбор");
			НастройкаКомпоновки = ДополнительныйОтбор.Получить();
		КонецЕсли;
		ИнициализироватьКомпоновщикНастроекСервер(НастройкаКомпоновки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетРеглУчета) Тогда
		СчетРеглУчетаЗабалансовый = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетРеглУчета, "Забалансовый");
	КонецЕсли;
	
	ПроверитьИспользованиеВПравилахОтраженияВМеждународномУчете();
	УстановитьУсловноеОформление();
	
	ВыполнитьПроверкуВыраженийЗаполненияСубконтоИОбновитьПредставления();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДополнительныйОтбор = ТекущийОбъект.ДополнительныйОтбор.Получить();
	ИнициализироватьКомпоновщикНастроекСервер(ДополнительныйОтбор);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкиКомпоновщика = КомпоновщикНастроек.ПолучитьНастройки(); 
	
	ТекущийОбъект.ДополнительныйОтбор = Новый ХранилищеЗначения(НастройкиКомпоновщика);
	ТекущийОбъект.ПредставлениеОтбора = Строка(НастройкиКомпоновщика.Отбор);
	ТекущийОбъект.УстановленДополнительныйОтбор = (НастройкиКомпоновщика.Отбор.Элементы.Количество() > 0);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(НастройкаФормированияПроводок) Тогда
		РегистрыСведений.ПравилаОтраженияВМеждународномУчете.ВключитьВНастройкуФормированияПроводок(НастройкаФормированияПроводок, ТекущийОбъект.Ссылка);
		ПроверитьИспользованиеВПравилахОтраженияВМеждународномУчете();
	КонецЕсли;
	
	ВыполнитьПроверкуВыраженийЗаполненияСубконтоИОбновитьПредставления();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененоИспользованиеВПравилахОтраженияВМеждународномУчете" Тогда
		ПроверитьИспользованиеВПравилахОтраженияВМеждународномУчете();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписьСоответствияСчетов", Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СчетРеглУчетаПриИзменении(Элемент)
	
	СчетРеглУчетаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетМеждународногоУчетаПриИзменении(Элемент)
	
	ОбновитьСписокСубконтоМеждународногоУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоВыражениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗаполнениеСубконто.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСубконто", ТекущиеДанные.ВидСубконто);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("ТекущееВыражение", ТекущиеДанные.Выражение);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПоляЗаполненияСубконто", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоВыражениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЗаполнениеСубконто.ТекущиеДанные;
	ТекущиеДанные.Выражение = ВыбранноеЗначение;
	Модифицированность = Истина;
	ИдентификаторСтроки = Элементы.ЗаполнениеСубконто.ТекущаяСтрока;
	
	ЗаполнениеСубконтоВыражениеОбработкаВыбораНаСервере(ИдентификаторСтроки);
	
	Элементы.ЗаполнениеСубконто.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоПредставлениеВыраженияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура НастроитьИспользование(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаНаВопросОЗаписиОбъекта", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для настройки использования необходимо записать объект. Записать?';
							|en = 'To configure the use, save the object. Do you want to save?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНастройкиИспользования();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НастройкиЗаполненияСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоУказанноеЗначение");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НастройкиЗаполненияСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоПредставлениеВыражения");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоНетВДоступныхПолях");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НастройкиЗаполненияСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Указанное значение';
								|en = 'Specified value'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоЗаполнятьИзИсточника");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НастройкиЗаполненияСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Из регл. учета';
								|en = 'From local accounting'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоЗаполнятьИзИсточника");
	
КонецПроцедуры

&НаСервере
Процедура СчетРеглУчетаПриИзмененииСервер()
	
	ИнициализироватьКомпоновщикНастроекСервер();
	ОбновитьНастройкиЗаполненияСубконтоПоРеглУчету();
	
	Если ЗначениеЗаполнено(Объект.СчетРеглУчета) Тогда
		СчетРеглУчетаЗабалансовый = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетРеглУчета, "Забалансовый");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроекСервер(НастройкаКомпоновки = Неопределено)
	
	СхемаКомпоновкиДанных = 
		Справочники.СоответствияСчетовМеждународногоУчета.СхемыКомпоновкиДанных(Объект.СчетРеглУчета);
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	Если НастройкаКомпоновки <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаКомпоновки);
	КонецЕсли;
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСубконтоМеждународногоУчета()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МеждународныйВидыСубконто.НомерСтроки КАК НомерСубконто,
	|	МеждународныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	МеждународныйВидыСубконто.ВидСубконто.ТипЗначения КАК ОписаниеТипов
	|ИЗ
	|	ПланСчетов.Международный.ВидыСубконто КАК МеждународныйВидыСубконто
	|ГДЕ
	|	МеждународныйВидыСубконто.Ссылка = &СчетМеждународногоУчета";
	Запрос.УстановитьПараметр("СчетМеждународногоУчета", Объект.СчетМеждународногоУчета);
	
	Объект.НастройкиЗаполненияСубконто.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ОбновитьНастройкиЗаполненияСубконтоПоРеглУчету();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиЗаполненияСубконтоПоРеглУчету(ПоложениеСубконто = Неопределено)
	
	Для каждого СтрокаСубконто Из Объект.НастройкиЗаполненияСубконто Цикл
		
		Если СтрокаСубконто.ЗаполнятьИзИсточника Тогда
			СтрокаСубконто.Выражение = "";
		КонецЕсли;
		
		Для каждого ДоступноеПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Для каждого Тип Из ДоступноеПолеВыбора.ТипЗначения.Типы() Цикл
				ТипЗначенияСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСубконто.ВидСубконто, "ТипЗначения");
				Если ТипЗначенияСубконто.СодержитТип(Тип) Тогда
					СтрокаСубконто.ЗаполнятьИзИсточника = Истина;
					СтрокаСубконто.Выражение = Строка(ДоступноеПолеВыбора.Поле);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	ВыполнитьПроверкуВыраженийЗаполненияСубконтоИОбновитьПредставления();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИспользованиеВПравилахОтраженияВМеждународномУчете()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПравилаОтраженияВМеждународномУчете.НастройкаФормированияПроводок) КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтраженияВМеждународномУчете
	|ГДЕ
	|	ПравилаОтраженияВМеждународномУчете.ШаблонПроводки = &ШаблонПроводки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПравилаОтраженияВМеждународномУчете.НастройкаФормированияПроводок) > 0";
	
	Запрос.УстановитьПараметр("ШаблонПроводки", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДоступноИзменениеНастроекМФУ = МеждународныйУчетОбщегоНазначения.ДоступноИзменениеНастроекМеждународногоУчета();
	
	Если Выборка.Следующий() Тогда
		СостояниеИспользованияВНастройке = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Используется (%1)';
				|en = 'Used (%1)'"),
			Выборка.НастройкаФормированияПроводок);
		Если ДоступноИзменениеНастроекМФУ Тогда	
			Элементы.НастроитьИспользование.Заголовок = НСтр("ru = 'Изменить';
															|en = 'Change'");
		Иначе
			Элементы.НастроитьИспользование.Заголовок = НСтр("ru = 'Посмотреть';
															|en = 'View'");
		КонецЕсли;	
	Иначе	
		СостояниеИспользованияВНастройке = " " + НСтр("ru = 'Не используется';
														|en = 'Not used'");
		Элементы.НастроитьИспользование.Заголовок = НСтр("ru = 'Настроить';
														|en = 'Customize'");
		Элементы.НастроитьИспользование.Видимость = ДоступноИзменениеНастроекМФУ;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаНаВопросОЗаписиОбъекта(Ответ, ДополнительныйПараметры) Экспорт 
	
	НастроитьИспользование = Ложь;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Записать() Тогда
			НастроитьИспользование = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НастроитьИспользование Тогда
		ОткрытьФормуНастройкиИспользования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиИспользования()
	
	ПараметрыФормы = Новый Структура("ШаблонПроводки", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ПравилаОтраженияВМеждународномУчете.Форма.НастройкаИспользования", ПараметрыФормы, ЭтаФорма); 
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуВыраженийЗаполненияСубконтоИОбновитьПредставления()
	
	МассивСтрокДляПроверкиВыражения = Новый Массив;
	Для каждого СтрокаНастройки Из Объект.НастройкиЗаполненияСубконто Цикл
		МассивСтрокДляПроверкиВыражения.Добавить(СтрокаНастройки);
	КонецЦикла;
	ПроверитьВыражение(МассивСтрокДляПроверкиВыражения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеСубконтоВыражениеОбработкаВыбораНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные = Объект.НастройкиЗаполненияСубконто.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПроверитьВыражение(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыражение(СтрокиНастройки)
	
	МеждународныйУчетОбщегоНазначения.ПроверитьВыражениеЗаполненияСубконто(СтрокиНастройки, КомпоновщикНастроек);
	
КонецПроцедуры

#КонецОбласти