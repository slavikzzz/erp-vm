#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает статью движения денежных средств для выбранной хозяйственной операции.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
// 	СправочникСсылка.СтатьиДвиженияДенежныхСредств - Найденная статья ДДС.
//
Функция СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
		|	СтатьиДвиженияДенежныхСредств.Ссылка КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств.ХозяйственныеОперации КАК СтатьиДвиженияДенежныхСредствХозяйственныеОперации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
		|		ПО СтатьиДвиженияДенежныхСредствХозяйственныеОперации.Ссылка = СтатьиДвиженияДенежныхСредств.Ссылка
		|			И (НЕ СтатьиДвиженияДенежныхСредств.ПометкаУдаления)
		|			И (СтатьиДвиженияДенежныхСредствХозяйственныеОперации.ХозяйственнаяОперация = &ХозяйственнаяОперация)");
	
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
	Иначе
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СтатьяДвиженияДенежныхСредств;

КонецФункции

// Получает предопределенную статью движения денежных средств для выбранной хозяйственной операции.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Валюта - СправочникСсылка.Валюты - Валюта документа.
//
// Возвращаемое значение:
// 	СправочникСсылка.СтатьиДвиженияДенежныхСредств - Предопределенная статья ДДС.
//
Функция ПредопределеннаяСтатьяДДС(ХозяйственнаяОперация, Валюта = Неопределено) Экспорт
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств Тогда
		Если Не ЗначениеЗаполнено(Валюта)
		 ИЛИ Валюта = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию() Тогда
			СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанка;
		Иначе
			СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанкаВИностраннойВалюте;
		КонецЕсли;
			
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет Тогда
		Если Не ЗначениеЗаполнено(Валюта)
		 ИЛИ Валюта = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию() Тогда
			СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СдачаДенежныхСредствВБанк;
		Иначе
			СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СдачаДенежныхСредствВБанкВИностраннойВалюте;
		КонецЕсли;
		
	Иначе
		Соответствие = Новый Соответствие;
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу, 
			Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюКассу);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию, 
			Справочники.СтатьиДвиженияДенежныхСредств.ОплатаДенежныхСредствВДругуюОрганизацию);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюКассу);	

		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет,
			Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеДенежныхСредствНаДругойСчет);

		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюКассу);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации,
			Справочники.СтатьиДвиженияДенежныхСредств.ОплатаДенежныхСредствВДругуюОрганизацию);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюКассу);

		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВКассуККМ);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ,
			Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзКассыККМ);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику,
			Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыДСПрибыль,
			Справочники.СтатьиДвиженияДенежныхСредств.КурсовыеРазницыПрибыль);
			
		Соответствие.Вставить(Перечисления.ХозяйственныеОперации.КурсовыеРазницыДСУбыток,
			Справочники.СтатьиДвиженияДенежныхСредств.КурсовыеРазницыУбыток);
		
		СтатьяДвиженияДенежныхСредств = Соответствие.Получить(ХозяйственнаяОперация);
	КонецЕсли; 
	
	Если СтатьяДвиженияДенежныхСредств = Неопределено Тогда
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СтатьяДвиженияДенежныхСредств;
	
КонецФункции

// Получает список хозяйственных операций соответствующих расходу денежных средств.
//
// Возвращаемое значение:
// 	Массив - массив хозяйственных операций.
//
Функция ХозяйственныеОперацииРасходаДенежныхСредств() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|ГДЕ
	|	НастройкиХозяйственныхОпераций.Расход = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.ДенежныеСредства)
	|	И НастройкиХозяйственныхОпераций.Приход <> ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.ПустаяСсылка)
	|	И НастройкиХозяйственныхОпераций.ХозяйственнаяОперация НЕ В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)"); 
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ХозяйственнаяОперация");
	
КонецФункции

// Проверяет легальность применения статьи ДДС для хозяйственной операции
//
// Параметры:
//    СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция
//
// Возвращаемое значение:
//    Булево - Признак соответствия статьи операции
Функция СтатьяСоответствуетХозяйственнойОперации(СтатьяДвиженияДенежныхСредств, ХозяйственнаяОперация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств.ХозяйственныеОперации КАК ХозяйственныеОперации
	|ГДЕ
	|	ХозяйственныеОперации.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И ХозяйственныеОперации.Ссылка = &СтатьяДвиженияДенежныхСредств
	|";
	
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения:
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - Ключ - имя табличной части объекта
//                               Значение - Выгрузка в таблицу значений пустой табличной части
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	#Область ИнвестиционнаяДеятельность
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ИнвестиционнаяДеятельность";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Инвестиционная деятельность';
		|en = 'Investment activity'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ОперационнаяДеятельность
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОперационнаяДеятельность";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Операционная деятельность';
		|en = 'Operating activity'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ФинансоваяДеятельность
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ФинансоваяДеятельность";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Финансовая деятельность';
		|en = 'Financial activities'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ВозвратДенежныхСредствОтДругойОрганизации
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВозвратДенежныхСредствОтДругойОрганизации";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат денежных средств от другой организации';
		|en = 'Refund from another company'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ВозвратДенежныхСредствОтПоставщика
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВозвратДенежныхСредствОтПоставщика";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат оплаты поставщиком (товары, работы, услуги)';
		|en = 'Payment return from vendor (goods, works, services)'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ВозвратОплатыКлиенту
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВозвратОплатыКлиенту";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат оплаты клиенту (продажа товаров, работ, услуг)';
		|en = 'Payment return to client (sale of goods, works, services)'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ВыдачаДенежныхСредствВДругуюКассу
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВыдачаДенежныхСредствВДругуюКассу";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выдача денежных средств в другую кассу';
		|en = 'Cash issue to another cash account'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ВыдачаДенежныхСредствВКассуККМ
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВыдачаДенежныхСредствВКассуККМ";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выдача денежных средств в кассу ККМ';
		|en = 'Cash payment to cash register'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ВыплатаЗаработнойПлаты
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВыплатаЗаработнойПлаты";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выплата заработной платы по ведомостям';
		|en = 'Salary payment by paysheets'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область КурсовыеРазницыПрибыль
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыПрибыль";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прибыль от курсовых разниц';
		|en = 'Exchange gain'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область КурсовыеРазницыУбыток
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыУбыток";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Убыток от курсовых разниц';
		|en = 'Exchange loss'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ОплатаДенежныхСредствВДругуюОрганизацию
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОплатаДенежныхСредствВДругуюОрганизацию";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплата денежных средств в другую организацию';
		|en = 'Cash payment to another company'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ОплатаПоставщику
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОплатаПоставщику";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплата поставщику (товары, работы, услуги)';
		|en = 'Payment to vendor (goods, works, services)'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ПеречислениеДенежныхСредствНаДругойСчет
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПеречислениеДенежныхСредствНаДругойСчет";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перечисление денежных средств на другой счет';
		|en = 'Cash transfer to another account'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ПоступлениеДенежныхСредствИзБанка
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствИзБанка";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление денежных средств из банка';
		|en = 'Bank account receipt note from bank'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ПоступлениеДенежныхСредствИзБанкаВИностраннойВалюте
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствИзБанкаВИностраннойВалюте";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление денежных средств из банка (в иностранной валюте)';
		|en = 'Cash receipt from bank (in foreign currency)'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ПоступлениеДенежныхСредствИзКассыККМ
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствИзКассыККМ";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление денежных средств из кассы ККМ';
		|en = 'Cash receipt from cash register'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ПоступлениеДенежныхСредствОтДругойОрганизации
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствОтДругойОрганизации";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление денежных средств от другой организации';
		|en = 'Payment from another company'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ПоступлениеОплатыОтКлиента
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПоступлениеОплатыОтКлиента";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление оплаты от клиента (продажа товаров, работ, услуг)';
		|en = 'Payment from client (sale of goods, works, services)'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область СдачаДенежныхСредствВБанк
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СдачаДенежныхСредствВБанк";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сдача денежных средств в банк';
		|en = 'Cash delivery to bank'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область СдачаДенежныхСредствВБанкВИностраннойВалюте
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СдачаДенежныхСредствВБанкВИностраннойВалюте";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сдача денежных средств в банк (в иностранной валюте)';
		|en = 'Cash delivery to bank (in foreign currency)'", КодыЯзыков); // @НСтр
	#КонецОбласти

КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - СправочникОбъект.СтатьиДвиженияДенежныхСредств - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ТолькоРасходДенежныхСредств") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация КАК Ссылка
		|ПОМЕСТИТЬ ХозяйственныеОперацииРасхода 
		|ИЗ
		|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
		|ГДЕ
		|	НастройкиХозяйственныхОпераций.Расход = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.ДенежныеСредства)
		|	И НастройкиХозяйственныхОпераций.Приход <> ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.ПустаяСсылка)
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатьиДвиженияДенежныхСредствХозОперации.Ссылка
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств.ХозяйственныеОперации КАК СтатьиДвиженияДенежныхСредствХозОперации
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ХозяйственныеОперацииРасхода КАК ХозяйственныеОперацииРасхода
		|	ПО
		|		СтатьиДвиженияДенежныхСредствХозОперации.ХозяйственнаяОперация = ХозяйственныеОперацииРасхода.Ссылка");
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	ИначеЕсли Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ХозяйственнаяОперация") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДанныеСправочника.Ссылка
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств.ХозяйственныеОперации КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.ХозяйственнаяОперация В (&ХозяйственнаяОперация)
		|	И (ДанныеСправочника.Ссылка.Наименование ПОДОБНО &СтрокаПоиска
		|		ИЛИ ДанныеСправочника.Ссылка.НаименованиеЯзык1 ПОДОБНО &СтрокаПоиска
		|		ИЛИ ДанныеСправочника.Ссылка.НаименованиеЯзык2 ПОДОБНО &СтрокаПоиска
		|		ИЛИ ДанныеСправочника.Ссылка.Код ПОДОБНО &СтрокаПоиска
		|		ИЛИ &СтрокаПоискаНеЗадана)
		|";
		
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Параметры.Отбор.ХозяйственнаяОперация);
		
		СтрокаПоиска = "";
		Если Параметры.Свойство("СтрокаПоиска") Тогда
			СтрокаПоиска = Параметры.СтрокаПоиска;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("СтрокаПоискаНеЗадана", Не ЗначениеЗаполнено(СтрокаПоиска));
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
КонецПроцедуры

#КонецЕсли

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" Тогда
		Если Параметры.Свойство("Отбор")
			И Параметры.Отбор.Свойство("ХозяйственнаяОперация")
			И ТипЗнч(Параметры.Отбор.ХозяйственнаяОперация) = Тип("ПеречислениеСсылка.ХозяйственныеОперации") Тогда
			ВыбраннаяФорма = "ФормаВыбораПоХозяйственнойОперации";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьПредопределенныеСтатьиДвиженияДенежныхСредств(СтатьяДДС = Неопределено) Экспорт
	
	Соответствие = Новый Соответствие;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюКассу ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюКассу,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу,
				"50.01",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ОплатаПоставщику,
				"60.01",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеДенежныхСредствНаДругойСчет ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеДенежныхСредствНаДругойСчет,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет,
				"51",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанка ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанка,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка,
				"51",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанкаВИностраннойВалюте ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанкаВИностраннойВалюте,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка,
				"52",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента,
				"62.01",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.СдачаДенежныхСредствВБанк ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.СдачаДенежныхСредствВБанк,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк,
				"51",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.СдачаДенежныхСредствВБанкВИностраннойВалюте ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.СдачаДенежныхСредствВБанкВИностраннойВалюте,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк,
				"52",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаДенежныхСредствВДругуюОрганизацию ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ОплатаДенежныхСредствВДругуюОрганизацию,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию,
				"60.01",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВКассуККМ ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВКассуККМ,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ,
				"50.01",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзКассыККМ ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзКассыККМ,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ,
				"50.01",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗаработнойПлаты,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты,
				"70",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствОтПоставщика ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствОтПоставщика,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика,
				"60.01",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту,
				"62.01",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.КурсовыеРазницыПрибыль ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.КурсовыеРазницыПрибыль,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.КурсовыеРазницыДСПрибыль,
				"91.01",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.КурсовыеРазницыУбыток ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.КурсовыеРазницыУбыток,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.КурсовыеРазницыДСУбыток,
				"91.02",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствОтДругойОрганизации ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствОтДругойОрганизации,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации,
				"62.01",));
	КонецЕсли;
	Если СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствОтДругойОрганизации ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Соответствие.Вставить(Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствОтДругойОрганизации ,
			Новый Структура("ХозяйственнаяОперация, КорреспондирующийСчет",
				Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации,
				"60.01",));
	КонецЕсли;
	
	Для Каждого Элемент Из Соответствие Цикл
	
		СтатьяДДСОбъект = Элемент.Ключ.ПолучитьОбъект();
		Элемент.Значение.Вставить("Родитель", ОперационнаяДеятельность);
		ЗаполнитьЗначенияСвойств(СтатьяДДСОбъект, Элемент.Значение);
		Если СтатьяДДСОбъект.ХозяйственныеОперации.Найти(Элемент.Значение.ХозяйственнаяОперация) = Неопределено Тогда
			СтатьяДДСОбъект.ХозяйственныеОперации.Добавить().ХозяйственнаяОперация = Элемент.Значение.ХозяйственнаяОперация;
		КонецЕсли;
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтатьяДДСОбъект);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Справочник %1 не записан, произошли ошибки при записи!';
					|en = 'The %1 catalog was not saved. Errors occurred during saving.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				СтатьяДДСОбъект);
			ОписаниеОшибки = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		
		Объект = ОперационнаяДеятельность.ПолучитьОбъект();
		Объект.РеквизитДопУпорядочивания = 1;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
		Объект = ИнвестиционнаяДеятельность.ПолучитьОбъект();
		Объект.РеквизитДопУпорядочивания = 2;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
		Объект = ФинансоваяДеятельность.ПолучитьОбъект();
		Объект.РеквизитДопУпорядочивания = 3;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	Исключение
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Справочник %1 не записан, произошли ошибки при записи!';
				|en = 'The %1 catalog was not saved. Errors occurred during saving.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Объект);
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
	КонецПопытки;
	
КонецПроцедуры

// Заполняет сведения об обработчиках обновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	//++ Локализация

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.СтатьиДвиженияДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.17.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("baecb6df-b08a-429c-a66a-e92609a9cf4e");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.СтатьиДвиженияДенежныхСредств.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий =
		НСтр("ru = 'Изменение операции ""Оплата самозанятому"" на операцию ""Оплата поставщику"" в справочнике ""Статьи движения денежных средств""';
			|en = 'Change the ""Payment to self-employed person"" transaction to the ""Payment to vendor"" transaction in the Cash flow items catalog.'");
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.СтатьиДвиженияДенежныхСредств.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.СтатьиДвиженияДенежныхСредств.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.СтатьиДвиженияДенежныхСредств.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

	//-- Локализация

КонецПроцедуры

//++ Локализация

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСправочника.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств.ХозяйственныеОперации КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдалитьОплатаСамозанятому)
		|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры обработчика:
//   * ВерсияПодсистемыНаНачалоОбновления - Строка - версия подсистемы.
//   * ИмяОбработчика - Строка - имя обработчика.
//   * ОбновляемыеДанные - Структура.
//   * ОбработкаЗавершена - Булево, Неопределено - признак завершения обработки.
//   * Очередь - Число - очередь.
//   * ПрогрессВыполнения - Структура:
//     ** ВсегоОбъектов - Число - всего обработано объектов.
//     ** ОбработаноОбъектов - Число - обработано объектов.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		
		Параметры.ОбработкаЗавершена =
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
		
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	ИсключенияПриОбновлении = Новый Массив;
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Не удалось изменить операцию в справочнике ""Статьи движения денежных средств""';
								|en = 'Cannot change the transaction in the Cash flow items catalog'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляОбновления.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	&ДанныеДляОбновления КАК ДанныеДляОбновления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ДанныеСправочника.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиДвиженияДенежныхСредств КАК ДанныеСправочника
		|		ПО ТаблицаДокументов.Ссылка = ДанныеСправочника.Ссылка";
	
	Запрос.УстановитьПараметр("ДанныеДляОбновления", ОбновляемыеДанные);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПричинаИсключения = 0;
		Рекомендация = "";
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = 1; // Блокировка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь); // СправочникОбъект
			
			ПричинаИсключения = 2; // ПлохиеДанные
			Рекомендация = НСтр("ru = 'Измените операцию ""Оплата самозанятому"" на операцию ""Оплата поставщику"" в справочнике вручную.';
								|en = 'Change the ""Payment to self-employed person"" transaction to the ""Payment to vendor"" transaction in the catalog manually.'");
			
			ОбъектИзменен = Ложь;
			
			Если СправочникОбъект <> Неопределено Тогда
				
				Операции = СправочникОбъект.ХозяйственныеОперации;
				НайденнаяСтрока = Операции.Найти(Перечисления.ХозяйственныеОперации.УдалитьОплатаСамозанятому, "ХозяйственнаяОперация");
				
				Если НайденнаяСтрока <> Неопределено Тогда
					
					ЕстьОперацияОплатыПоставщику = 
						Операции.Найти(Перечисления.ХозяйственныеОперации.ОплатаПоставщику, "ХозяйственнаяОперация") <> Неопределено;
					
					Если ЕстьОперацияОплатыПоставщику Тогда
						Операции.Удалить(НайденнаяСтрока);
					Иначе
						НайденнаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
					КонецЕсли;
					
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПричинаИсключения = 3; // Запись
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
			Если ПричинаИсключения = 2 Тогда
				
				ОписаниеПроблемы = ОбновлениеИнформационнойБазыУТ.ПроблемаСДанными(
					Выборка.Ссылка, Рекомендация, ИнформацияОбОшибке());
				ИсключенияПриОбновлении.Добавить(ОписаниеПроблемы);
				
			ИначеЕсли ПричинаИсключения = 3 Тогда
				
				ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(
					ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
				ВызватьИсключение СтрСоединить(СписокОписаний, Символы.ПС);
				
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена =
		ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		
		СписокОписаний.Добавить(НСтр("ru = 'Всего пропущено: %1';
									|en = 'Total skipped: %1'"));
		ТекстСообщения = СтрШаблон(СтрСоединить(СписокОписаний, Символы.ПС), ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		ШаблонСообщения = НСтр("ru = 'Обработана порция статей ДДС: %1';
								|en = 'A set of cash flow items is processed: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация, , ,
			ТекстСообщения);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#КонецОбласти

#КонецЕсли


