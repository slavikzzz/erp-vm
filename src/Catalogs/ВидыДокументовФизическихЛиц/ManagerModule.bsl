#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения:
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - Ключ - имя табличной части объекта
//                               Значение - Выгрузка в таблицу значений пустой табличной части
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	#Область ВодительскоеУдостоверение
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВодительскоеУдостоверение";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Водительское удостоверение';
		|en = 'Driver license'", КодыЯзыков); // @НСтр
	#КонецОбласти

	//++ Локализация

	#Область ВоенныйБилет
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВоенныйБилет";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Военный билет';
		|en = 'Military ID'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ВоенныйБилетОфицераЗапаса
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВоенныйБилетОфицераЗапаса";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Военный билет офицера запаса';
		|en = 'Reserve officer''s military ID'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ВременноеУдостоверениеВзаменВоенногоБилетаОфицераЗапаса
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВременноеУдостоверениеВзаменВоенногоБилетаОфицераЗапаса";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Временное удостоверение, выданное взамен военного билета офицера запаса';
		|en = 'Temporary certificate issued instead of the reserve officer''s military ID'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ДипломатическийПаспорт
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ДипломатическийПаспорт";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Дипломатический паспорт гражданина РФ';
		|en = 'Diplomatic RF citizen passport'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ЗагранпаспортРФ
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЗагранпаспортРФ";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Загранпаспорт гражданина РФ';
		|en = 'Foreign RF citizen passport'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ЗагранпаспортСССР
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЗагранпаспортСССР";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Загранпаспорт гражданина СССР';
		|en = 'Foreign USSR citizen passport'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ПаспортРФ
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПаспортРФ";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Паспорт гражданина РФ';
		|en = 'Local passport'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ПаспортСССР
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПаспортСССР";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Паспорт гражданина СССР';
		|en = 'USSR citizen passport'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ПаспортМинморфлота
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПаспортМинморфлота";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Паспорт Минморфлота';
		|en = 'Passport of the Ministry of the Maritime Fleet'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область ПаспортМоряка
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПаспортМоряка";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Паспорт моряка';
		|en = 'Sailor''s passport'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область СвидетельствоОРождении
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СвидетельствоОРождении";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Свидетельство о рождении';
		|en = 'Birth certificate'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область СправкаВзаменВоенногоБилета
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СправкаВзаменВоенногоБилета";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Справка взамен военного билета';
		|en = 'Certificate issued instead of the military ID'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область УдостоверениеГражданинаПодлежащегоПризыву
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УдостоверениеГражданинаПодлежащегоПризыву";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Удостоверение гражданина, подлежащего призыву на военную службу';
		|en = 'Certificate of a citizen eligible for conscription'", КодыЯзыков); // @НСтр
	#КонецОбласти

	#Область УдостоверениеОфицера
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УдостоверениеОфицера";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Удостоверение личности офицера';
		|en = 'Officer identity card'", КодыЯзыков); // @НСтр
	#КонецОбласти
	
	//-- Локализация
	
КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - СправочникОбъект.СтатьиДвиженияДенежныхСредств - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	//++ НЕ УТ
	
	//++ Локализация
	
	ДанныеВыбораБЗК.ЗаполнитьДляКлассификатораСПорядкомПоДопРеквизиту(
		Справочники.ВидыДокументовФизическихЛиц,
		ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
	//-- Локализация
	
	//-- НЕ УТ
	
	МультиязычностьСервер.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка, Метаданные.Справочники.ВидыДокументовФизическихЛиц);
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыДокументовФизическихЛиц.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.16.5";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f3353e9d-3f9d-4a05-b596-a874953568bb");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыДокументовФизическихЛиц.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет наименования на дополнительных языках, если используется мультиязычность';
									|en = 'Fills names in additional languages if National language support is used'");

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ВидыДокументовФизическихЛиц.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ВидыДокументовФизическихЛиц.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ВидыДокументовФизическихЛиц.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
#КонецОбласти

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если Метаданные.Языки.Количество() > 1 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВидыДокументовФизическихЛиц.Ссылка
		|ИЗ
		|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
		|ГДЕ
		|	(ВидыДокументовФизическихЛиц.НаименованиеЯзык1 = """"
		|	Или ВидыДокументовФизическихЛиц.НаименованиеЯзык2 = """")
		|	И ВидыДокументовФизическихЛиц.Предопределенный = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса.ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = Метаданные.Справочники.ВидыДокументовФизическихЛиц.ПолноеИмя();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыДокументовФизическихЛиц");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДанныеОбъекта = Выборка.Ссылка.ПолучитьОбъект();
			Если ДанныеОбъекта = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.НаименованиеЯзык1) Тогда
				ДанныеОбъекта.НаименованиеЯзык1 = ДанныеОбъекта.Наименование;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.НаименованиеЯзык2) Тогда
				ДанныеОбъекта.НаименованиеЯзык2 = ДанныеОбъекта.Наименование;
			КонецЕсли;
			Если ДанныеОбъекта.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Ссылка% по причине: %Причина%';
									|en = 'Cannot process the object: %Ссылка%. Reason: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
									
		КонецПопытки;
	КонецЦикла;
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
