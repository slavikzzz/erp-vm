
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Параметры.Свойство("НастройкаФормированияПроводок") Тогда
		НастройкаФормированияПроводок = Параметры.НастройкаФормированияПроводок;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастройкаКомпоновки = Неопределено;
		Если Не Параметры.ЗначениеКопирования.Пустая() Тогда
			ДополнительныйОтбор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ДополнительныйОтбор");
			НастройкаКомпоновки = ДополнительныйОтбор.Получить();
		КонецЕсли;
		ИнициализироватьКомпоновщикНастроекСервер(НастройкаКомпоновки);
		ПриЧтенииСозданииНаСервере(Объект);
	КонецЕсли;
	
	ПроверитьИспользованиеВПравилахОтраженияВМеждународномУчете();
	УстановитьУсловноеОформление();
	
	УправлениеФормой();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.НастройкиЗаполненияСубконто.Очистить();
	Для каждого СтрокаПоложенияСубконто Из ЗаполнениеСубконто.ПолучитьЭлементы() Цикл
		Для каждого СтрокаСубконто Из СтрокаПоложенияСубконто.ПолучитьЭлементы() Цикл
			НоваяСтрока = ТекущийОбъект.НастройкиЗаполненияСубконто.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоложенияСубконто, "ПоложениеСубконто");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСубконто, ,"ПоложениеСубконто");
		КонецЦикла;
	КонецЦикла;
	
	НастройкиКомпоновщика = КомпоновщикНастроек.ПолучитьНастройки(); 
	ТекущийОбъект.ДополнительныйОтбор = Новый ХранилищеЗначения(НастройкиКомпоновщика);
	ТекущийОбъект.ПредставлениеОтбора = Строка(НастройкиКомпоновщика.Отбор);
	ТекущийОбъект.УстановленДополнительныйОтбор = (НастройкиКомпоновщика.Отбор.Элементы.Количество() > 0);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДополнительныйОтбор = ТекущийОбъект.ДополнительныйОтбор.Получить();
	ИнициализироватьКомпоновщикНастроекСервер(ДополнительныйОтбор);
	
	ПриЧтенииСозданииНаСервере(ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененоИспользованиеВПравилахОтраженияВМеждународномУчете" Тогда
	    ПроверитьИспользованиеВПравилахОтраженияВМеждународномУчете();   
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(НастройкаФормированияПроводок) Тогда
		РегистрыСведений.ПравилаОтраженияВМеждународномУчете.ВключитьВНастройкуФормированияПроводок(НастройкаФормированияПроводок, ТекущийОбъект.Ссылка);
		ПроверитьИспользованиеВПравилахОтраженияВМеждународномУчете();
	КонецЕсли;
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписьСоответствияОборотов", Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ШаблонСообщения = НСтр("ru = 'Не настроено заполнение для субконто ""%1"" Счета %2';
							|en = 'Population of the ""%1"" extra dimension of Account %2 is not set up'");
	
	Для каждого СтрокаПоложенияСубконто Из ЗаполнениеСубконто.ПолучитьЭлементы() Цикл
		Для каждого Строка Из СтрокаПоложенияСубконто.ПолучитьЭлементы() Цикл
			НеНастроеноЗаполнениеСубконто = Ложь;
			Если Не ЗначениеЗаполнено(Строка.Выражение) И Строка.ЗаполнятьИзИсточника Тогда
				НеНастроеноЗаполнениеСубконто = Истина;
			КонецЕсли;
			Если НеНастроеноЗаполнениеСубконто Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения, Строка.ВидСубконто, СтрокаПоложенияСубконто.ПредставлениеПоложенияСубконто);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СчетРеглУчетаДтПриИзменении(Элемент)
	
	ПриИзмененииПроводкиРеглУчетаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетРеглУчетаКтПриИзменении(Элемент)
	
	ПриИзмененииПроводкиРеглУчетаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетМеждународногоУчетаДтПриИзменении(Элемент)
	
	ПриИзмененииСчетаМеждународногоУчетаДтСервер();
	РазвернутьДеревоЗаполненияСубконто("Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетМеждународногоУчетаКтПриИзменении(Элемент)
	
	ПриИзмененииСчетаМеждународногоУчетаКтСервер();
	РазвернутьДеревоЗаполненияСубконто("Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоВыражениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗаполнениеСубконто.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСубконто", ТекущиеДанные.ВидСубконто);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("ТекущееВыражение", ТекущиеДанные.Выражение);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПоляЗаполненияСубконто", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоВыражениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЗаполнениеСубконто.ТекущиеДанные;
	ТекущиеДанные.Выражение = ВыбранноеЗначение;
	Модифицированность = Истина;
	ИдентификаторСтроки = Элементы.ЗаполнениеСубконто.ТекущаяСтрока;
	ЗаполнениеСубконтоВыражениеОбработкаВыбораНаСервере(ИдентификаторСтроки);
	Элементы.ЗаполнениеСубконто.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеСубконтоВыражениеОбработкаВыбораНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные = ЗаполнениеСубконто.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПроверитьВыражение(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура НеОтражаетсяВМеждународномУчетеПриИзменении(Элемент)
	
	Объект.СчетМеждународногоУчетаДт = Неопределено;
	Объект.СчетМеждународногоУчетаКт = Неопределено;
	ЗаполнениеСубконто.ПолучитьЭлементы().Очистить();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоПредставлениеВыраженияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере(ТекущийОбъект)
	
	Если ТекущийОбъект.НастройкиЗаполненияСубконто.Количество() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиЗаполненияСубконто.ПоложениеСубконто,
		|	НастройкиЗаполненияСубконто.ВидСубконто,
		|	НастройкиЗаполненияСубконто.ЗаполнятьИзИсточника,
		|	НастройкиЗаполненияСубконто.УказанноеЗначение,
		|	НастройкиЗаполненияСубконто.Выражение
		|ПОМЕСТИТЬ НастройкиЗаполненияСубконто
		|ИЗ
		|	&НастройкиЗаполненияСубконто КАК НастройкиЗаполненияСубконто
		|;
		|
		|ВЫБРАТЬ
		|	НастройкиЗаполненияСубконто.ПоложениеСубконто,
		|	НастройкиЗаполненияСубконто.ВидСубконто,
		|	НастройкиЗаполненияСубконто.ЗаполнятьИзИсточника,
		|	НастройкиЗаполненияСубконто.УказанноеЗначение,
		|	НастройкиЗаполненияСубконто.Выражение,
		|	ВидыСубконто.ТипЗначения КАК ОписаниеТипов
		|ИЗ
		|	НастройкиЗаполненияСубконто КАК НастройкиЗаполненияСубконто
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|		ПланВидовХарактеристик.ВидыСубконтоМеждународные КАК ВидыСубконто
		|	ПО
		|		НастройкиЗаполненияСубконто.ВидСубконто = ВидыСубконто.Ссылка
		|";
		Запрос.УстановитьПараметр("НастройкиЗаполненияСубконто", ТекущийОбъект.НастройкиЗаполненияСубконто.Выгрузить());
		НастройкиЗаполненияСубконто = Запрос.Выполнить().Выгрузить();
		
		ПоложенияСубконто = Новый Структура;
		ПоложенияСубконто.Вставить("Дт", НСтр("ru = 'Дт';
												|en = 'Dr'"));
		ПоложенияСубконто.Вставить("Кт", НСтр("ru = 'Кт';
												|en = 'Cr'"));
		
		ПроверяемыеСтроки = Новый Массив;
		Для каждого ПоложениеСубконто Из ПоложенияСубконто Цикл
			СтрокаДереваПоложениеСубконто = ЗаполнениеСубконто.ПолучитьЭлементы().Добавить();
			СтрокаДереваПоложениеСубконто.ПоложениеСубконто = ПоложениеСубконто.Ключ;
			СтрокаДереваПоложениеСубконто.ПредставлениеПоложенияСубконто = ПоложениеСубконто.Значение;
			Отбор = Новый Структура("ПоложениеСубконто", ПоложениеСубконто.Ключ);
			Строки = НастройкиЗаполненияСубконто.НайтиСтроки(Отбор);
			Для каждого Строка Из Строки Цикл
				СтрокаСубконто = СтрокаДереваПоложениеСубконто.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСубконто, Строка, , "ПоложениеСубконто");
				ПроверяемыеСтроки.Добавить(СтрокаСубконто);
			КонецЦикла;
		КонецЦикла;
		ПроверитьВыражение(ПроверяемыеСтроки);
	КонецЕсли;
	
	ОпределитьБалансностьОборотаРегл();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоУказанноеЗначение");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоНетВДоступныхПолях");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоПредставлениеВыражения");

	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Указанное значение';
								|en = 'Specified value'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоЗаполнятьИзИсточника");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Из регл. учета';
								|en = 'From local accounting'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоЗаполнятьИзИсточника");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ВидСубконто");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Отображать");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ОтметкаНезаполненного");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоЗаполнятьИзИсточника");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоПредставлениеВыражения");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоУказанноеЗначение");
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ГруппаОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РучноеУточнениеПроводки");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НеОтражаетсяВМеждународномУчете");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СчетМеждународногоУчетаДт");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СчетМеждународногоУчетаКт");
	
	// 
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.СчетМеждународногоУчетаДт.Доступность = Не Объект.НеОтражаетсяВМеждународномУчете;
	Элементы.СчетМеждународногоУчетаКт.Доступность = Не Объект.НеОтражаетсяВМеждународномУчете;
	Элементы.ЗаполнениеСубконто.Доступность = Не Объект.НеОтражаетсяВМеждународномУчете;
	Элементы.РучноеУточнениеПроводки.Доступность = Не Объект.НеОтражаетсяВМеждународномУчете;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроекСервер(НастройкаКомпоновки = Неопределено)
	
	СхемаКомпоновкиДанных = 
		Справочники.СоответствияОборотовМеждународногоУчета.СхемыКомпоновкиДанных(Объект.СчетРеглУчетаДт, Объект.СчетРеглУчетаКт);
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	Если НастройкаКомпоновки <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаКомпоновки);
	КонецЕсли;
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПроводкиРеглУчетаСервер()
	
	ИнициализироватьКомпоновщикНастроекСервер();
	ОбновитьНастройкиЗаполненияСубконтоПоРеглУчету();
	ОпределитьБалансностьОборотаРегл();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСчетаМеждународногоУчетаДтСервер()
	
	ОбновитьСписокСубконтоМеждународногоУчета("Дт");
	
	УстановитьОтметкуНезаполненногоСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСчетаМеждународногоУчетаКтСервер()
	
	ОбновитьСписокСубконтоМеждународногоУчета("Кт");
	
	УстановитьОтметкуНезаполненногоСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьБалансностьОборотаРегл()
	
	ОборотРеглЗабалансовый = Ложь;
	СчетаРеглУчета = Новый Массив();
	
	Если ЗначениеЗаполнено(Объект.СчетРеглУчетаДт) Тогда
		СчетаРеглУчета.Добавить(Объект.СчетРеглУчетаДт);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетРеглУчетаКт) Тогда
		СчетаРеглУчета.Добавить(Объект.СчетРеглУчетаКт);
	КонецЕсли;
	
	Если СчетаРеглУчета.Количество() > 0 Тогда
		ЗначенияРеквизитаЗабалансовый = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СчетаРеглУчета, "Забалансовый");
		
		Если ЗначениеЗаполнено(Объект.СчетРеглУчетаДт) Тогда
			ОборотРеглЗабалансовый = ЗначенияРеквизитаЗабалансовый[Объект.СчетРеглУчетаДт];
		КонецЕсли;
		
		Если НЕ ОборотРеглЗабалансовый И ЗначениеЗаполнено(Объект.СчетРеглУчетаКт) Тогда
			ОборотРеглЗабалансовый = ЗначенияРеквизитаЗабалансовый[Объект.СчетРеглУчетаКт];
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтметкуНезаполненногоСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненногоСчетовУчета()
	
	Если НЕ ОборотРеглЗабалансовый Тогда
		Элементы.СчетРеглУчетаДт.АвтоОтметкаНезаполненного = Истина;
		Элементы.СчетРеглУчетаКт.АвтоОтметкаНезаполненного = Истина;
		Элементы.СчетМеждународногоУчетаДт.АвтоОтметкаНезаполненного = Истина;
		Элементы.СчетМеждународногоУчетаКт.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Если ЗначениеЗаполнено(Объект.СчетРеглУчетаДт)
		 ИЛИ ЗначениеЗаполнено(Объект.СчетРеглУчетаКт) Тогда
			Элементы.СчетРеглУчетаДт.АвтоОтметкаНезаполненного = Ложь;
			Элементы.СчетРеглУчетаКт.АвтоОтметкаНезаполненного = Ложь;
			Элементы.СчетРеглУчетаДт.ОтметкаНезаполненного = Ложь;
			Элементы.СчетРеглУчетаКт.ОтметкаНезаполненного = Ложь;
		Иначе
			Элементы.СчетРеглУчетаДт.АвтоОтметкаНезаполненного = Истина;
			Элементы.СчетРеглУчетаКт.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СчетМеждународногоУчетаДт)
		 ИЛИ ЗначениеЗаполнено(Объект.СчетМеждународногоУчетаКт) Тогда
			Элементы.СчетМеждународногоУчетаДт.АвтоОтметкаНезаполненного = Ложь;
			Элементы.СчетМеждународногоУчетаКт.АвтоОтметкаНезаполненного = Ложь;
			Элементы.СчетМеждународногоУчетаДт.ОтметкаНезаполненного = Ложь;
			Элементы.СчетМеждународногоУчетаКт.ОтметкаНезаполненного = Ложь;
		Иначе
			Элементы.СчетМеждународногоУчетаДт.АвтоОтметкаНезаполненного = Истина;
			Элементы.СчетМеждународногоУчетаКт.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСубконтоМеждународногоУчета(ПоложениеСубконто = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""Дт"" КАК ПоложениеСубконто,
	|	МеждународныйВидыСубконто.НомерСтроки КАК НомерСубконто,
	|	МеждународныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	МеждународныйВидыСубконто.ВидСубконто.ТипЗначения КАК ОписаниеТипов
	|ИЗ
	|	ПланСчетов.Международный.ВидыСубконто КАК МеждународныйВидыСубконто
	|ГДЕ
	|	МеждународныйВидыСубконто.Ссылка = &СчетМеждународногоУчетаДт
	|	И (&ПоложениеСубконто = ""Дт"" ИЛИ &ПоложениеСубконто = Неопределено)
	|;
	|
	|ВЫБРАТЬ
	|	""Кт"" КАК ПоложениеСубконто,
	|	МеждународныйВидыСубконто.НомерСтроки КАК НомерСубконто,
	|	МеждународныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	МеждународныйВидыСубконто.ВидСубконто.ТипЗначения КАК ОписаниеТипов
	|ИЗ
	|	ПланСчетов.Международный.ВидыСубконто КАК МеждународныйВидыСубконто
	|ГДЕ
	|	МеждународныйВидыСубконто.Ссылка = &СчетМеждународногоУчетаКт
	|	И (&ПоложениеСубконто = ""Кт"" ИЛИ &ПоложениеСубконто = Неопределено)";
	
	Запрос.УстановитьПараметр("СчетМеждународногоУчетаДт", Объект.СчетМеждународногоУчетаДт);
	Запрос.УстановитьПараметр("СчетМеждународногоУчетаКт", Объект.СчетМеждународногоУчетаКт);
	Запрос.УстановитьПараметр("ПоложениеСубконто",         ПоложениеСубконто);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаСубконтоДт = РезультатыЗапроса[0].Выбрать();
	ВыборкаСубконтоКт = РезультатыЗапроса[1].Выбрать();
	
	СтрокиКУдалению = Новый Массив; 
	Для каждого Строка Из ЗаполнениеСубконто.ПолучитьЭлементы() Цикл
		Если ПоложениеСубконто = Неопределено Или ПоложениеСубконто = Строка.ПоложениеСубконто Тогда
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из СтрокиКУдалению Цикл
		ЗаполнениеСубконто.ПолучитьЭлементы().Удалить(Строка);
	КонецЦикла;
	
	Если ВыборкаСубконтоДт.Количество()
		И (ПоложениеСубконто = Неопределено Или ПоложениеСубконто = "Дт") Тогда
		СтрокаДереваДт = ЗаполнениеСубконто.ПолучитьЭлементы().Вставить(0);
		СтрокаДереваДт.ПоложениеСубконто = "Дт";
		СтрокаДереваДт.ПредставлениеПоложенияСубконто = НСтр("ru = 'Дт';
															|en = 'Dr'");
		СтрокаДереваДт.ПолучитьЭлементы().Очистить();
		Пока ВыборкаСубконтоДт.Следующий() Цикл
			СтрокаДерева = СтрокаДереваДт.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ВыборкаСубконтоДт, , "ПоложениеСубконто");
		КонецЦикла;
	КонецЕсли;
	
	Если ВыборкаСубконтоКт.Количество()
		И (ПоложениеСубконто = Неопределено Или ПоложениеСубконто = "Кт") Тогда
		СтрокаДереваКт = ЗаполнениеСубконто.ПолучитьЭлементы().Добавить();
		СтрокаДереваКт.ПоложениеСубконто = "Кт";
		СтрокаДереваКт.ПредставлениеПоложенияСубконто = НСтр("ru = 'Кт';
															|en = 'Cr'");
		СтрокаДереваКт.ПолучитьЭлементы().Очистить();
		Пока ВыборкаСубконтоКт.Следующий() Цикл
			СтрокаДерева = СтрокаДереваКт.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ВыборкаСубконтоКт, , "ПоложениеСубконто");
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьНастройкиЗаполненияСубконтоПоРеглУчету(ПоложениеСубконто);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиЗаполненияСубконтоПоРеглУчету(ПоложениеСубконто = Неопределено)
	
	ИсточникиЗаполненияСубконто = Новый ТаблицаЗначений;
	ИсточникиЗаполненияСубконто.Колонки.Добавить("Приоритет");
	ИсточникиЗаполненияСубконто.Колонки.Добавить("Выражение");
	
	ПроверяемыеСтроки = Новый Массив;
	Для каждого СтрокаПоложениеСубконто Из ЗаполнениеСубконто.ПолучитьЭлементы() Цикл
		
		Если ПоложениеСубконто <> Неопределено 
			И СтрокаПоложениеСубконто.ПоложениеСубконто <> ПоложениеСубконто Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаСубконто Из СтрокаПоложениеСубконто.ПолучитьЭлементы() Цикл
			
			ИсточникиЗаполненияСубконто.Очистить();
			ДоступныеПоляВыбора = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы;
			ТипСубконто = СтрокаСубконто.ОписаниеТипов;
			
			ПолучитьИсточникиЗаполненияСубконто(
				ИсточникиЗаполненияСубконто, 
				ДоступныеПоляВыбора, 
				ТипСубконто,
				СтрокаПоложениеСубконто.ПоложениеСубконто);
				
			Если ИсточникиЗаполненияСубконто.Количество() > 0 Тогда
				ИсточникиЗаполненияСубконто.Сортировать("Приоритет");
				ИсточникЗаполненияСубконто = ИсточникиЗаполненияСубконто[0];
				СтрокаСубконто.ЗаполнятьИзИсточника = Истина;
				СтрокаСубконто.Выражение = ИсточникЗаполненияСубконто.Выражение;
				ПроверяемыеСтроки.Добавить(СтрокаСубконто);
			ИначеЕсли СтрокаСубконто.ЗаполнятьИзИсточника Тогда 
				СтрокаСубконто.Выражение = "";
				ПроверяемыеСтроки.Добавить(СтрокаСубконто);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПроверитьВыражение(ПроверяемыеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИсточникиЗаполненияСубконто(ИсточникиЗаполнения, ДоступныеПоляВыбора, ТипСубконто, ПоложениеСубконто)
	
	Для каждого ДоступноеПолеВыбора Из ДоступныеПоляВыбора Цикл
		Если ДоступноеПолеВыбора.Папка Тогда
			ПолучитьИсточникиЗаполненияСубконто(
				ИсточникиЗаполнения, 
				ДоступноеПолеВыбора.Элементы, 
				ТипСубконто,
				ПоложениеСубконто);
		Иначе
			Для каждого Тип Из ДоступноеПолеВыбора.ТипЗначения.Типы() Цикл
				Если Не ТипСубконто.СодержитТип(Тип) Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = ИсточникиЗаполнения.Добавить();
				Выражение = Строка(ДоступноеПолеВыбора.Поле);
				НоваяСтрока.Выражение = Выражение;
				Если СтрНайти(Выражение, ПоложениеСубконто) > 0 Тогда
					НоваяСтрока.Приоритет = 0;
				Иначе
					НоваяСтрока.Приоритет = 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоЗаполненияСубконто(ПоложениеСубконто = Неопределено)
	
	Для каждого Строка Из ЗаполнениеСубконто.ПолучитьЭлементы() Цикл
		Если ПоложениеСубконто = Неопределено Или ПоложениеСубконто = Строка.ПоложениеСубконто Тогда
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ЗаполнениеСубконто.Развернуть(ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИспользованиеВПравилахОтраженияВМеждународномУчете()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПравилаОтраженияВМеждународномУчете.НастройкаФормированияПроводок) КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтраженияВМеждународномУчете
	|ГДЕ
	|	ПравилаОтраженияВМеждународномУчете.ШаблонПроводки = &ШаблонПроводки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПравилаОтраженияВМеждународномУчете.НастройкаФормированияПроводок) > 0";
	
	Запрос.УстановитьПараметр("ШаблонПроводки", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДоступноИзменениеНастроекМФУ = МеждународныйУчетОбщегоНазначения.ДоступноИзменениеНастроекМеждународногоУчета();
	
	Если Выборка.Следующий() Тогда
		СостояниеИспользованияВНастройке = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Используется (%1)';
				|en = 'Used (%1)'"),
			Выборка.НастройкаФормированияПроводок);
		Если ДоступноИзменениеНастроекМФУ Тогда	
			Элементы.НастроитьИспользование.Заголовок = НСтр("ru = 'Изменить';
															|en = 'Change'");
		Иначе
			Элементы.НастроитьИспользование.Заголовок = НСтр("ru = 'Посмотреть';
															|en = 'View'");
		КонецЕсли;	
	Иначе	
		СостояниеИспользованияВНастройке = " " + НСтр("ru = 'Не используется';
														|en = 'Not used'");
		Элементы.НастроитьИспользование.Заголовок = НСтр("ru = 'Настроить';
														|en = 'Customize'");
		Элементы.НастроитьИспользование.Видимость = ДоступноИзменениеНастроекМФУ;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьВыражение(СтрокиНастройки)
	
	МеждународныйУчетОбщегоНазначения.ПроверитьВыражениеЗаполненияСубконто(СтрокиНастройки, КомпоновщикНастроек);
	
КонецПроцедуры

#КонецОбласти