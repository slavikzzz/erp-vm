#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет первоначальное заполнение структуры строк и граф настройки заполнения бухгалтерской отчетности.
// 
// Параметры:
//  Настройка - СправочникСсылка.НастройкиЗаполненияБухОтчетности
Процедура СгенерироватьНастройкиПоУмолчанию(Настройка, ФормыОтчетности, ТекущиеЭлементыНастройки, ИДФормыОтчета) Экспорт
	
	ПометитьКУдалениюТекущиеЭлементыНастройки(ТекущиеЭлементыНастройки);
	
	НастройкаОбъект = Настройка.ПолучитьОбъект();
	НастройкаОбъект.РедакцияФормы = ИДФормыОтчета;
	НастройкаОбъект.Записать();
	
	Для Каждого ФормаОтчетности Из ФормыОтчетности Цикл
		СформироватьСтруктуруСправочников(Настройка, ФормаОтчетности, ИДФормыОтчета);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СоставФормБухотчетности(ИДФормыОтчета) Экспорт
	
	ФормыОтчетности = Новый СписокЗначений; 
	
	Если ИДФормыОтчета = "" Или ИДФормыОтчета = "ФормаОтчета2019Кв1" Тогда
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Баланс,     "Бухгалтерский баланс",										Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.ОФР,        "Отчет о финансовых результатах",							Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.ОИК,        "Отчет об изменении капитала",								Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.ОДДС,       "Отчет о движении денежных средств",							Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения1, "Пояснения 1. НМА и НИОКР",									Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения2, "Пояснения 2. Основные средства",							Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения4, "Пояснения 4. Запасы", 										Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения5, "Пояснения 5. Дебиторская и кредиторская задолженность",		Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения6, "Пояснения 6. Затраты на производство",						Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения7, "Пояснения 7. Оценочные обязательства",						Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения8, "Пояснения 8. Обеспечения обязательств",						Истина);
	ИначеЕсли ИДФормыОтчета = "ФормаОтчета2025Кв1" Тогда
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Баланс,      "Бухгалтерский баланс",										Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.ОФР,         "Отчет о финансовых результатах",							Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.ОИК,         "Отчет об изменении капитала",								Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.ОДДС,        "Отчет о движении денежных средств",						Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения3,  "Пояснения 3. Нематериальные активы",						Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения4,  "Пояснения 4. Основные средства",							Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения6,  "Пояснения 6. Запасы",										Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения7,  "Пояснения 7. Дебиторская задолженность",					Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения8,  "Пояснения 8. Обязательства",								Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения9,  "Пояснения 9. Обеспечения обязательств",					Истина);
		ФормыОтчетности.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения10, "Пояснения 10. Расходы по обычным видам деятельности",		Истина);
		
	КонецЕсли;
	
	Возврат ФормыОтчетности;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекущиеЭлементыНастройки(Настройка, ФормыОтчетности) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиБухОтчетности.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтрокиБухОтчетности КАК СтрокиБухОтчетности
		|ГДЕ
		|	СтрокиБухОтчетности.Владелец = &Владелец
		|	И СтрокиБухОтчетности.ФормаОтчетности В(&ФормыОтчетности)
		|	И НЕ СтрокиБухОтчетности.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Настройка);
	Запрос.УстановитьПараметр("ФормыОтчетности", ФормыОтчетности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Процедура ПометитьКУдалениюТекущиеЭлементыНастройки(ТекущиеЭлементыНастройки)

	Для Каждого Элемент Из ТекущиеЭлементыНастройки Цикл
		ОбъектСправочник = Элемент.ПолучитьОбъект();
		ОбъектСправочник.УстановитьПометкуУдаления(Истина);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПустуюТаблицуАлгоритмов()

	Алгоритмы = Новый ТаблицаЗначений;
	Алгоритмы.Колонки.Добавить("Счет");
	Алгоритмы.Колонки.Добавить("Строка");
	Алгоритмы.Колонки.Добавить("Графа");
	Алгоритмы.Колонки.Добавить("Функция");
	Алгоритмы.Колонки.Добавить("Вычитаемый");
	Алгоритмы.Колонки.Добавить("КорСчет");
	Алгоритмы.Колонки.Добавить("Год");
	Алгоритмы.Колонки.Добавить("Отбор");
	Алгоритмы.Колонки.Добавить("КорОтбор");
	Алгоритмы.Колонки.Добавить("ОтборНедоступен");
	Алгоритмы.Колонки.Добавить("ВидДДС");
	Алгоритмы.Колонки.Добавить("НаименованиеРасшифровки");
	Алгоритмы.Колонки.Добавить("Группировки");
	Алгоритмы.Колонки.Добавить("ВыводитьДанныеНаКонецГода");
	
	Алгоритмы.Индексы.Добавить("Строка, Графа");

	Возврат Алгоритмы;
	
КонецФункции

Функция ПолучитьПустуюТаблицуГраф()

	Графы = Новый ТаблицаЗначений;
	Графы.Колонки.Добавить("Наименование");
	Графы.Колонки.Добавить("Код");
	Графы.Колонки.Добавить("СтрокиИсключения");
	Графы.Колонки.Добавить("ДопАлгоритм");
	Графы.Колонки.Добавить("ВыводитьДанныеНаКонецГода");
	Графы.Колонки.Добавить("Год");
	
	Возврат Графы;
	
КонецФункции 

Процедура СформироватьСтруктуруСправочников(Настройка, ФормаОтчетности, ИДФормыОтчета)

	ИмяФормы = XMLСтрока(ФормаОтчетности);
	
	ГруппаФормы = Справочники.СтрокиБухОтчетности.СоздатьГруппу();
	ГруппаФормы.Наименование = ФормаОтчетности;
	ГруппаФормы.ВключитьВОтчет = Истина;
	ГруппаФормы.Владелец = Настройка;
	ГруппаФормы.ФормаОтчетности = ФормаОтчетности;
	ГруппаФормы.Записать();
	
	ИмяМакета = ИмяФормы;
	Если ИДФормыОтчета = "ФормаОтчета2025Кв1" Тогда
		ИмяМакета = ИДФормыОтчета + "_" + ИмяФормы;
	КонецЕсли;
	
	МакетНастроек = Справочники.НастройкиЗаполненияБухОтчетности.ПолучитьМакет(ИмяМакета);
	
	Алгоритмы = ПолучитьПустуюТаблицуАлгоритмов();
	
	ОбластьАлгоритмы = МакетНастроек.ПолучитьОбласть("Алгоритмы");
	
	Для Сч = ОбластьАлгоритмы.Области.Алгоритмы.Верх По ОбластьАлгоритмы.Области.Алгоритмы.Низ Цикл
		СтрокаАлгоритм = Алгоритмы.Добавить();
		СтрокаАлгоритм.Счет = ОбластьАлгоритмы.Область(Сч, 1, Сч, 1).Текст;
		СтрокаАлгоритм.Строка = ОбластьАлгоритмы.Область(Сч, 2, Сч, 2).Текст;
		СтрокаАлгоритм.Графа = ОбластьАлгоритмы.Область(Сч, 3, Сч, 3).Текст;
		СтрокаАлгоритм.Функция = ОбластьАлгоритмы.Область(Сч, 4, Сч, 4).Текст;
		СтрокаАлгоритм.Вычитаемый = ОбластьАлгоритмы.Область(Сч, 5, Сч, 5).Текст = "-";
		СтрокаАлгоритм.КорСчет = ОбластьАлгоритмы.Область(Сч, 6, Сч, 6).Текст;
		СтрокаАлгоритм.НаименованиеРасшифровки = ОбластьАлгоритмы.Область(Сч, 7, Сч, 7).Текст;
		СтрокаАлгоритм.Год = ОбластьАлгоритмы.Область(Сч, 8, Сч, 8).Текст;
		СтрокаАлгоритм.Отбор = СтрРазделить(ОбластьАлгоритмы.Область(Сч, 9, Сч, 9).Текст,";", Ложь);
		СтрокаАлгоритм.КорОтбор = СтрРазделить(ОбластьАлгоритмы.Область(Сч, 11, Сч, 11).Текст,";", Ложь);
		СтрокаАлгоритм.ОтборНедоступен = СокрЛП(ОбластьАлгоритмы.Область(Сч, 13, Сч, 13).Текст) = "Да";
		СтрокаАлгоритм.ВидДДС = ОбластьАлгоритмы.Область(Сч, 14, Сч, 14).Текст;
		СтрокаАлгоритм.Группировки = ОбластьАлгоритмы.Область(Сч, 15, Сч, 15).Текст;
		СтрокаАлгоритм.ВыводитьДанныеНаКонецГода = ОбластьАлгоритмы.Область(Сч, 16, Сч, 16).Текст = "Да";
	КонецЦикла;
	
	ОбластьТаблицы = МакетНастроек.ПолучитьОбласть("Таблицы");
	
	Для Сч = ОбластьТаблицы.Области.Таблицы.Верх По ОбластьТаблицы.Области.Таблицы.Низ Цикл
		
		ИмяТаблицы = ОбластьТаблицы.Область(Сч, 1, Сч, 2).Текст;
		СинонимТаблицы = ОбластьТаблицы.Область(Сч, 2, Сч, 2).Текст;
		Если ГруппаФормы.Наименование = СинонимТаблицы Тогда
			ГруппаТаблицы = ГруппаФормы;
		Иначе	
			ГруппаТаблицы = Справочники.СтрокиБухОтчетности.СоздатьГруппу();
			ГруппаТаблицы.Наименование = СинонимТаблицы;
			ГруппаТаблицы.ВключитьВОтчет = ГруппаФормы.ВключитьВОтчет;
			ГруппаТаблицы.Владелец = Настройка;
			ГруппаТаблицы.ФормаОтчетности = ФормаОтчетности;
			ГруппаТаблицы.Родитель = ГруппаФормы.Ссылка;
			ГруппаТаблицы.Записать();
		КонецЕсли;
		
		Графы = ПолучитьПустуюТаблицуГраф();
		
		ЕстьГрафы = Ложь;
		Если МакетНастроек.Области.Найти(ИмяТаблицы + "_Графы") <> Неопределено Тогда
			
			ЕстьГрафы = Истина;
			
			ОбластьГраф = МакетНастроек.ПолучитьОбласть(ИмяТаблицы + "_Графы");
			
			Для СчГраф = ОбластьГраф.Области[ИмяТаблицы + "_Графы"].Верх По ОбластьГраф.Области[ИмяТаблицы + "_Графы"].Низ Цикл
				СтрокаГрафы = Графы.Добавить();
				СтрокаГрафы.Код = ОбластьГраф.Область(СчГраф, 2, СчГраф, 2).Текст;
				СтрокаГрафы.СтрокиИсключения = СтрРазделить(ОбластьГраф.Область(СчГраф, 3, СчГраф, 3).Текст, ";", Ложь);
				СтрокаГрафы.Наименование = ОбластьГраф.Область(СчГраф, 1, СчГраф, 1).Текст;
				СтрокаГрафы.ВыводитьДанныеНаКонецГода = ОбластьГраф.Область(СчГраф, 5, СчГраф, 5).Текст = "Да";
				СтрокаГрафы.Год = ОбластьГраф.Область(СчГраф, 6, СчГраф, 6).Текст;
				
				ДопАлгоритмыГрафы = Новый Соответствие;
				ДопАлгоритмы = СтрРазделить(ОбластьГраф.Область(СчГраф, 4, СчГраф, 4).Текст,";", Ложь);
				Для Каждого ДопАлгоритм Из ДопАлгоритмы Цикл
					ЗнакРазделения = СтрНайти(ДопАлгоритм, "~");
					Алгоритм = СокрЛП(Лев(ДопАлгоритм,ЗнакРазделения-1));
					СтрокиАлгоритма = СтрРазделить(Прав(ДопАлгоритм,СтрДлина(ДопАлгоритм)-ЗнакРазделения),",", Ложь);
					Для Каждого Строка Из СтрокиАлгоритма Цикл
						НомерСтроки = СокрЛП(Строка);
						ДопАлгоритмыГрафы.Вставить(НомерСтроки, Алгоритм);
					КонецЦикла;
				КонецЦикла;
				СтрокаГрафы.ДопАлгоритм = ДопАлгоритмыГрафы;
			КонецЦикла;
		КонецЕсли;
		
		ОсновныеСтроки = Новый Соответствие;
		
		ОбластьСтрок = МакетНастроек.ПолучитьОбласть(ИмяТаблицы);
		
		Для СчСтрок = ОбластьСтрок.Области[ИмяТаблицы].Верх По ОбластьСтрок.Области[ИмяТаблицы].Низ Цикл
			
			Строка = Справочники.СтрокиБухОтчетности.СоздатьЭлемент();
			Строка.Родитель = ГруппаТаблицы.Ссылка;
			Строка.Владелец = Настройка;
			Строка.ФормаОтчетности = ФормаОтчетности;
			Строка.Регламентированная = Истина;
			Строка.Наименование = СокрЛП(ОбластьСтрок.Область(СчСтрок, 1, СчСтрок, 1).Текст);
			Строка.КодСтроки = ОбластьСтрок.Область(СчСтрок, 2, СчСтрок, 2).Текст;
			Строка.НаименованиеРасшифровки = НаименованиеРасшифровки(Строка.КодСтроки, Строка.Наименование, ФормаОтчетности, ИДФормыОтчета);
			Строка.ЭтоОсновнаяСтрока = СокрЛП(ОбластьСтрок.Область(СчСтрок, 3, СчСтрок, 3).Текст) = "Да";
			Строка.ДобавлениеДопСтрок = СокрЛП(ОбластьСтрок.Область(СчСтрок, 5, СчСтрок, 5).Текст) = "Да";
			Строка.КодСтрокиПрошлогоПериода = ОбластьСтрок.Область(СчСтрок, 6, СчСтрок, 6).Текст;
			Строка.ДопАлгоритм = ОбластьСтрок.Область(СчСтрок, 7, СчСтрок, 7).Текст;
			Если ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Баланс 
					Или ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР
					Или ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения5 Тогда 
					
				Строка.КодЯчейки = ОбластьСтрок.Область(СчСтрок, 8, СчСтрок, 8).Текст;
				КодЯчейкиПрошлогоПериода = СокрЛП(ОбластьСтрок.Область(СчСтрок, 9, СчСтрок, 9).Текст);
				Если КодЯчейкиПрошлогоПериода <> "" Тогда
					Строка.КодЯчейкиПрошлогоПериода = КодЯчейкиПрошлогоПериода;
				Иначе
					Строка.КодЯчейкиПрошлогоПериода = СтрЗаменить(Строка.КодЯчейки, Строка.КодСтроки, Строка.КодСтрокиПрошлогоПериода);
				КонецЕсли;
			Иначе
				Строка.КодЯчейки = "П000100" + Строка.КодСтроки;
				Строка.КодЯчейкиПрошлогоПериода = СтрЗаменить(Строка.КодЯчейки, Строка.КодСтроки, Строка.КодСтрокиПрошлогоПериода);
			КонецЕсли;
			Строка.ЕстьГрафы = ЕстьГрафы;
			
			Если Строка.ЭтоОсновнаяСтрока Тогда
				Строка.Записать();
				ОсновныеСтроки.Вставить(Строка.КодСтроки, Строка.Ссылка);
			Иначе
				Строка.ОсновнаяСтрока = ОсновныеСтроки.Получить(ОбластьСтрок.Область(СчСтрок, 4, СчСтрок, 4).Текст);
				Строка.Записать();
			КонецЕсли;
			
			Если Графы.Количество()>0 Тогда
				Для Каждого СтрокаГрафа Из Графы Цикл
					Графа = Справочники.ГрафыБухОтчетности.СоздатьЭлемент();
					Графа.Владелец = Строка.Ссылка;
					Графа.Наименование = СтрокаГрафа.Наименование;
					Графа.КодГрафы = СтрокаГрафа.Код;
					Графа.ДопАлгоритм = СтрокаГрафа.ДопАлгоритм.Получить(Строка.КодСтроки);
					Графа.НеЗаполняется = СтрокаГрафа.СтрокиИсключения.Найти(Строка.КодСтроки)<> Неопределено;
					Графа.КодГода = СтрокаГрафа.Год;
					
					//Для алгоритма можно переопределить код года
					СтрокиАлгоритмов = Алгоритмы.НайтиСтроки(Новый Структура("Строка, Графа", Строка.КодСтроки, Графа.КодГрафы));
					Если СтрокиАлгоритмов.Количество()>0 Тогда
						Графа.КодГода = СтрокиАлгоритмов[0].Год;
						Если СтрокиАлгоритмов[0].ВыводитьДанныеНаКонецГода = Истина Тогда
							Графа.ВыводитьДанныеНаКонецГода = СтрокиАлгоритмов[0].ВыводитьДанныеНаКонецГода;
						КонецЕсли;
					КонецЕсли;
					Графа.Записать();
					
					СоздатьАлгоритмыСбораДанныхБухОтчетности(СтрокиАлгоритмов, Графа.Ссылка);
				КонецЦикла;
			Иначе	
				
				СтрокиАлгоритмов = Алгоритмы.НайтиСтроки(Новый Структура("Строка", Строка.КодСтроки));
				
				СоздатьАлгоритмыСбораДанныхБухОтчетности(СтрокиАлгоритмов, Строка.Ссылка);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьАлгоритмыСбораДанныхБухОтчетности(СтрокиАлгоритмов, Владелец)
	
	Для Каждого СтрокаАлгоритма Из СтрокиАлгоритмов Цикл
		
		Алгоритм = Справочники.АлгоритмыСбораДанныхБухОтчетности.СоздатьЭлемент();
		Алгоритм.ТипПоказателя = СтрокаАлгоритма.Функция;
		Алгоритм.Вычитаемый = СтрокаАлгоритма.Вычитаемый;
		Алгоритм.Владелец = Владелец;
		Алгоритм.ОтборНедоступен = СтрокаАлгоритма.ОтборНедоступен;
		Если СтрокаАлгоритма.ВидДДС <> "" Тогда 
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Перечисление.ВидыДвиженийДенежныхСредств");
			Алгоритм.ВидДвиженияДенежныхСредств = Менеджер[СтрокаАлгоритма.ВидДДС];
		КонецЕсли;
		
		Для Каждого КодСчета Из СтрРазделить(СтрокаАлгоритма.Счет,";", Ложь) Цикл
			Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СокрЛП(КодСчета));
			Если Счет <> Неопределено И Не Счет.Пустая() Тогда
				СтрокаСчет = Алгоритм.Счета.Добавить();
				СтрокаСчет.Счет = Счет;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого КодСчета Из СтрРазделить(СтрокаАлгоритма.КорСчет,";", Ложь) Цикл
			Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СокрЛП(КодСчета));
			Если Счет <> Неопределено И Не Счет.Пустая() Тогда
				СтрокаСчет = Алгоритм.КорСчета.Добавить();
				СтрокаСчет.Счет = Счет;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Группировка Из СтрРазделить(СтрокаАлгоритма.Группировки,";", Ложь) Цикл
			СтрокаГруппировки = Алгоритм.Группировки.Добавить();
			СтрокаГруппировки.ПутьКданным = СокрЛП(Группировка);
		КонецЦикла;
		
		Если СтрокаАлгоритма.Отбор.Количество()>0 ИЛИ СтрокаАлгоритма.КорОтбор.Количество()>0  Тогда
			
			Макет = ?(Алгоритм.КорСчета.Количество()>0, "НастройкиОтбораПоСчетамКорСчетам", "НастройкиОтбораПоСчетам");
			
			СхемаКомпоновки = Справочники.АлгоритмыСбораДанныхБухОтчетности.ПолучитьМакет(Макет);
			
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
			НастройкиОтбора = КомпоновщикНастроек.ПолучитьНастройки();
			
			Для Каждого Отбор Из СтрокаАлгоритма.Отбор Цикл
				ЗаполнитьОтбор(Отбор, НастройкиОтбора);
			КонецЦикла;
			
			Для Каждого КорОтбор Из СтрокаАлгоритма.КорОтбор Цикл
				ЗаполнитьОтбор(КорОтбор, НастройкиОтбора);		
			КонецЦикла;
			Алгоритм.НастройкиОтбора = Новый ХранилищеЗначения(НастройкиОтбора);
			Алгоритм.ОтборЗадан = Истина;
		КонецЕсли;
		
		Если СтрокаАлгоритма.НаименованиеРасшифровки <> "" Тогда
			Алгоритм.НаименованиеРасшифровки = СтрокаАлгоритма.НаименованиеРасшифровки;
			Алгоритм.АвтоматическаяРасшифровка = Ложь;
		Иначе
			Отборы = Неопределено;
			Если Алгоритм.ОтборЗадан Тогда
				Отборы = НастройкиОтбора;
			ИначеЕсли Не Алгоритм.ВидДвиженияДенежныхСредств.Пустая() Тогда
				Отборы = Алгоритм.ВидДвиженияДенежныхСредств;
			КонецЕсли;
			
			Алгоритм.НаименованиеРасшифровки = Справочники.АлгоритмыСбораДанныхБухОтчетности.СформироватьРасшифровкуАлгоритма(Алгоритм.ТипПоказателя,
				Алгоритм.Счета.ВыгрузитьКолонку("Счет"),
				Алгоритм.КорСчета.ВыгрузитьКолонку("Счет"),
				Отборы);
			Алгоритм.АвтоматическаяРасшифровка = Истина;
		КонецЕсли;
			
		Алгоритм.Наименование = Справочники.АлгоритмыСбораДанныхБухОтчетности.СформироватьНаименованиеАлгоритма(Алгоритм);
		Алгоритм.Записать();	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтбор(Отбор, НастройкиОтбора)
	
	Знаки = Новый Соответствие;
	Знаки.Вставить("=", ВидСравненияКомпоновкиДанных.Равно);
	Знаки.Вставить("<>", ВидСравненияКомпоновкиДанных.НеРавно);
	
	Для Каждого Знак Из Знаки Цикл
		
		ЗнакРазделения = СтрНайти(Отбор, Знак.Ключ);
		Если ЗнакРазделения <> 0 Тогда 
			Поле = Лев(Отбор, ЗнакРазделения-1);
			ЗначениеОтбора = Прав(Отбор,СтрДлина(Отбор) - ЗнакРазделения - (СтрДлина(Знак.Ключ)-1));
			
			Значение = Неопределено;
			Если ЗначениеОтбора = "Истина" Или ЗначениеОтбора = "Ложь" Тогда
				Значение = Булево(ЗначениеОтбора);
			ИначеЕсли СтрНайти(ЗначениеОтбора, "{") <> 0 Тогда
				Значение = ЗначениеИзСтрокиВнутр(ЗначениеОтбора);
			ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(Метаданные.НайтиПоПолномуИмени(ЗначениеОтбора)) Тогда
				
				Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ЗначениеОтбора);
				Если Менеджер <> Неопределено Тогда
					Значение = Менеджер.Получить()
				КонецЕсли;
			КонецЕсли;
			
			Если Значение <> Неопределено Тогда
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиОтбора.Отбор, Поле, Значение, Знак.Значение, Истина);
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция НаименованиеРасшифровки(КодСтроки, НаименованиеСтроки, ФормаОтчетности, ИДФормыОтчета)
	
	Если ИДФормыОтчета = "ФормаОтчета2025Кв1" Тогда
		Если ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Баланс
			Или ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР
			Или ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОЦИС
			Или ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОДДС
			Или ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОИК Тогда
			НаименованиеРасшифровки = НСтр("ru = '%1 ""%2""';
											|en = '%1 ""%2""'");
			НаименованиеРасшифровки = СтрШаблон(НаименованиеРасшифровки, КодСтроки, НаименованиеСтроки);
		Иначе
			НаименованиеРасшифровки = НСтр("ru = '""%1""';
											|en = '""%1""'");
			НаименованиеРасшифровки = СтрШаблон(НаименованиеРасшифровки, НаименованиеСтроки);
		КонецЕсли;
	Иначе
		НаименованиеРасшифровки = НСтр("ru = '%1 ""%2""';
										|en = '%1 ""%2""'");
		НаименованиеРасшифровки = СтрШаблон(НаименованиеРасшифровки, КодСтроки, НаименованиеСтроки)
	КонецЕсли;
	
	Возврат НаименованиеРасшифровки;
	
КонецФункции

#КонецОбласти

#КонецЕсли