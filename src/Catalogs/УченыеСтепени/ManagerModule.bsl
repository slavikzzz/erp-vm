#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

// Возвращает реквизиты справочника, которые образуют естественный ключ для элементов справочника.
//
// Возвращаемое значение:
//  Массив из Строка - имена реквизитов, образующих естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Наименование");
	
	Возврат Результат;
	
КонецФункции

// Конец ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПервоначальногоЗаполненияИОбновленияИБ

// Процедура выполняет первоначальное заполнение классификатора.
Процедура НачальноеЗаполнение() Экспорт
	
	УточнитьНаименование(НСтр("ru = 'Доктор искусствоведческих наук';
								|en = 'Doctor of Arts'"), НСтр("ru = 'Доктор искусствоведения';
																			|en = 'Doctor of Arts History'"));
	УточнитьНаименование(НСтр("ru = 'Кандидат искусствоведческих наук';
								|en = 'Candidate of Art Science'"), НСтр("ru = 'Кандидат искусствоведения';
																				|en = 'Candidate of Arts History'"));
	
	УточнитьНаименование(НСтр("ru = 'Доктор архитектурных наук';
								|en = 'Doctor of Architecture'"), НСтр("ru = 'Доктор архитектуры';
																		|en = 'Doctor of Architecture'"));
	УточнитьНаименование(НСтр("ru = 'Кандидат архитектурных наук';
								|en = 'Candidate of Architecture'"), НСтр("ru = 'Кандидат архитектуры';
																			|en = 'Candidate of Architecture'"));
	
	УточнитьНаименование(НСтр("ru = 'Доктор культурологических наук';
								|en = 'Doctor of Culturology'"), НСтр("ru = 'Доктор культурологии';
																			|en = 'Doctor of Culturology'"));
	УточнитьНаименование(НСтр("ru = 'Кандидат культурологических наук';
								|en = 'Candidate of Culturology'"), НСтр("ru = 'Кандидат культурологии';
																				|en = 'Candidate of Culturology'"));
	
	ЗаполнитьИзМакета();
	
КонецПроцедуры

Процедура ЗаполнитьИзМакета()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтраслиНауки.Ссылка КАК Ссылка,
		|	ОтраслиНауки.Код КАК Код
		|ИЗ
		|	Справочник.ОтраслиНауки КАК ОтраслиНауки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УченыеСтепени.Ссылка КАК Ссылка,
		|	УченыеСтепени.Код КАК Код,
		|	УченыеСтепени.Наименование КАК Наименование,
		|	УченыеСтепени.ОтрасльНауки КАК ОтрасльНауки,
		|	ЕСТЬNULL(УченыеСтепени.Родитель.Код, "" "") КАК КодРодителя,
		|	ЕСТЬNULL(УченыеСтепени.ОтрасльНауки.Код, ""  "") КАК КодОтраслиНауки
		|ИЗ
		|	Справочник.УченыеСтепени КАК УченыеСтепени";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаОтраслей = Результаты[0].Выбрать();
	ТаблицаСуществующихСтепеней = Результаты[1].Выгрузить();
	
	ТекстовыйДокумент = Справочники.УченыеСтепени.ПолучитьМакет("УченыеСтепени");
	ТаблицаКлассификатора = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ТекстовыйДокумент.ПолучитьТекст()).Данные;
	
	СоответствиеОтраслей = Новый Соответствие; 
	СоответствиеСтепеней = Новый Соответствие; 
	
	ОтрасльПустаяСсылка = Справочники.ОтраслиНауки.ПустаяСсылка();
	СтепеньПустаяСсылка = Справочники.УченыеСтепени.ПустаяСсылка();
	
	Пока ВыборкаОтраслей.Следующий() Цикл
		СоответствиеОтраслей.Вставить(ВыборкаОтраслей.Код, ВыборкаОтраслей.Ссылка);
	КонецЦикла;
	
	Для каждого СтрокаКлассификатора Из ТаблицаКлассификатора Цикл
		
		Код = СтрокаКлассификатора.Code;
		КодРодителя = СтрокаКлассификатора.ParentCode;
		Наименование = СтрокаКлассификатора.Name;
		КодОтраслиНауки = СтрокаКлассификатора.ScienceIndustryCode;
		
		ОтрасльНауки = ?(СоответствиеОтраслей[КодОтраслиНауки] = Неопределено, ОтрасльПустаяСсылка, СоответствиеОтраслей[КодОтраслиНауки]);
		СтепеньРодитель = ?(СоответствиеСтепеней[КодРодителя] = Неопределено, СтепеньПустаяСсылка, СоответствиеСтепеней[КодРодителя]);
		
		СтруктураПоиска = Новый Структура("Наименование", Наименование);
		НайденныеСтроки = ТаблицаСуществующихСтепеней.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СправочникОбъект = Справочники.УченыеСтепени.СоздатьЭлемент();
			СправочникОбъект.Наименование = Наименование;
			
			ОбновитьРеквизитыОбъектаИЗаписать(СправочникОбъект, Код, СтепеньРодитель, ОтрасльНауки);
			
			Если ПустаяСтрока(КодРодителя) Тогда
				СоответствиеСтепеней.Вставить(Код, СправочникОбъект.Ссылка);
			КонецЕсли;
			
		Иначе
			
			Для Каждого СтрокаСтепени Из НайденныеСтроки Цикл
				
				Если СтрокаСтепени.Код = Код
					И СтрокаСтепени.КодРодителя = КодРодителя
					И СтрокаСтепени.ОтрасльНауки = ОтрасльНауки Тогда
					
					Если ПустаяСтрока(КодРодителя) Тогда
						СоответствиеСтепеней.Вставить(Код, СтрокаСтепени.Ссылка);
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				СправочникОбъект = СтрокаСтепени.Ссылка.ПолучитьОбъект();
				ОбновитьРеквизитыОбъектаИЗаписать(СправочникОбъект, Код, СтепеньРодитель, ОтрасльНауки);
				
				Если ПустаяСтрока(КодРодителя) Тогда
					СоответствиеСтепеней.Вставить(Код, СправочникОбъект.Ссылка);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстранитьЗадвоение();
	
КонецПроцедуры

Процедура ОбновитьРеквизитыОбъектаИЗаписать(СправочникОбъект, Код, Родитель, ОтрасльНауки)
	
	СправочникОбъект.Код = Код;
	СправочникОбъект.Родитель = Родитель;
	СправочникОбъект.ОтрасльНауки = ОтрасльНауки;
	
	СправочникОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
	СправочникОбъект.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
	
КонецПроцедуры

Процедура УточнитьНаименование(НаименованиеПрежнее, Наименование)
	
	НайденнаяСсылка = Справочники.УченыеСтепени.НайтиПоНаименованию(НаименованиеПрежнее);
	Если Не НайденнаяСсылка.Пустая()
		И Справочники.УченыеСтепени.НайтиПоНаименованию(Наименование).Пустая() Тогда
		
		СправочникОбъект = НайденнаяСсылка.ПолучитьОбъект();
		СправочникОбъект.Наименование = Наименование;
		СправочникОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
		СправочникОбъект.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстранитьЗадвоение()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УченыеСтепени.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТЗадвоенныеНаименования
		|ИЗ
		|	Справочник.УченыеСтепени КАК УченыеСтепени
		|
		|СГРУППИРОВАТЬ ПО
		|	УченыеСтепени.Наименование
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УченыеСтепени.Ссылка) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадвоенныеНаименования.Наименование КАК Наименование,
		|	УченыеСтепени.Ссылка КАК Ссылка
		|ИЗ
		|	ВТЗадвоенныеНаименования КАК ЗадвоенныеНаименования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УченыеСтепени КАК УченыеСтепени
		|		ПО ЗадвоенныеНаименования.Наименование = УченыеСтепени.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Наименование") Цикл
		
		СписокСсылок = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СписокСсылок.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		ПарыЗамен = Новый Соответствие;
		ЗаменяемыеСсылки = Новый Соответствие;
		
		НайденныеСсылки = НайтиПоСсылкам(СписокСсылок);
		Если НайденныеСсылки.Количество() > 0 Тогда
			
			СсылкаОставляемого = НайденныеСсылки[0][0];
			
			НайденныеСсылки.Колонки.Добавить("Счетчик");
			НайденныеСсылки.ЗаполнитьЗначения(1, "Счетчик");
			НайденныеСсылки.Свернуть(НайденныеСсылки.Колонки[0].Имя, "Счетчик");
			НайденныеСсылки.Сортировать("Счетчик Убыв");
			
			Для Индекс = 1 По НайденныеСсылки.Количество() - 1 Цикл
				НайденнаяСсылка = НайденныеСсылки[Индекс][0];
				ЗаменяемыеСсылки.Вставить(НайденнаяСсылка, Истина);
				ПарыЗамен.Вставить(НайденнаяСсылка, СсылкаОставляемого);
			КонецЦикла;
			
		Иначе
			СсылкаОставляемого = СписокСсылок[0];
		КонецЕсли;
		
		Для Каждого НайденнаяСсылка Из СписокСсылок Цикл
			
			Если НайденнаяСсылка = СсылкаОставляемого Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗаменяемыеСсылки.Получить(НайденнаяСсылка) = Неопределено Тогда
				ПарыЗамен.Вставить(НайденнаяСсылка, СсылкаОставляемого);
			КонецЕсли;
			
		КонецЦикла;
		
		РезультатЗамены = ОбщегоНазначения.ЗаменитьСсылки(ПарыЗамен,
			Новый Структура("СпособУдаления,ВключатьБизнесЛогику,ПривилегированнаяЗапись", "Непосредственно", Ложь, Истина));
		
		Если РезультатЗамены.Количество() > 0 Тогда
			
			Для Каждого ОшибкаЗамены Из РезультатЗамены Цикл
				
				ЗаписьЖурналаРегистрации(
					"ИнформационнаяБаза.ОбновлениеИБ",
					УровеньЖурналаРегистрации.Ошибка,
					,
					ОшибкаЗамены.Ссылка,
					ОшибкаЗамены.ТекстОшибки);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли