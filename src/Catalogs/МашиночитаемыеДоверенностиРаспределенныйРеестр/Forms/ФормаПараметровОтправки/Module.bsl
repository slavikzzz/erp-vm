
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ВидДокумента = "Отмена" ИЛИ Параметры.ВидДокумента = "ПросмотрОтмены" Тогда
		Заголовок = НСтр("ru = 'Параметры отправки заявления об отзыве доверенности';
						|en = 'Параметры отправки заявления об отзыве доверенности'");
		
		Элементы.ГруппаОтмена.Видимость = Истина;
		Элементы.Выгрузить.Видимость 	= Истина;
		
		ПричинаОтмены 						= Параметры.ПричинаОтмены;
		ДатаОтмены 							= Параметры.ДатаОтмены;
		УникальныйИдентификаторДоверенности = Параметры.УникальныйИдентификаторДоверенности;
		ДолжностьРуководителяДоверителя 	= Параметры.ДолжностьРуководителяДоверителя;
		ДатаРожденияДоверителя 				= Параметры.ДатаРожденияДоверителя;
		ТелефонПодписанта 					= Параметры.ТелефонПодписанта;
		
		Элементы.ДолжностьРуководителяДоверителя.Видимость 	= Параметры.ЭтоДоверительРоссийскаяОрганизация;
		Элементы.ДатаРожденияДоверителя.Видимость 			= НЕ Параметры.ЭтоДоверительЮридическоеЛицо;
		
		Если Параметры.ВидДокумента = "ПросмотрОтмены" Тогда
			Элементы.ПричинаОтмены.ТолькоПросмотр = Истина;
			Элементы.ДатаОтмены.ТолькоПросмотр = Истина;
			Элементы.УникальныйИдентификаторДоверенности.ТолькоПросмотр = Истина;
			Элементы.ДолжностьРуководителяДоверителя.ТолькоПросмотр = Истина;
			Элементы.ДатаРожденияДоверителя.ТолькоПросмотр = Истина;
			Элементы.ТелефонПодписанта.ТолькоПросмотр = Истина;
			
			Элементы.СертификатАбонентаПредставление.Видимость = Ложь;
			Элементы.ДекорацияРазделитель.Видимость = Ложь;
			Элементы.Отправить.Видимость = Ложь;
			
			Элементы.Отмена.Заголовок = НСтр("ru = 'Закрыть';
											|en = 'Закрыть'");
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаОтмена.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ОрганизацияИлиСсылкаНаОбъект)
		И ТипЗнч(Параметры.ОрганизацияИлиСсылкаНаОбъект) <> Тип("СправочникСсылка.Организации") Тогда
		
		Организация = ДокументооборотСКОВызовСервера.ОрганизацияПоОбъектуОтправки(Параметры.ОрганизацияИлиСсылкаНаОбъект);
		
		ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
		Если ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
			И ТипЗнч(Параметры.ОрганизацияИлиСсылкаНаОбъект) =
			Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
			
			Элементы.Отправить.Заголовок = НСтр("ru = 'Подписать';
												|en = 'Подписать'");
		КонецЕсли;
		
	Иначе
		Организация = Параметры.ОрганизацияИлиСсылкаНаОбъект;
	КонецЕсли;
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Организация);
	
	КлючСохраненияПоложенияОкна = Параметры.ВидДокумента
		+ ?(КриптографияЭДКОКлиентСервер.ЭтоЛокальнаяПодпись(МестоХраненияКлюча), "", "ВМоделиСервиса");
	
	Элементы.ПарольДоступаКЗакрытомуКлючу.Видимость = Параметры.ВидДокумента <> "ПросмотрОтмены"
		И КриптографияЭДКОКлиентСервер.ЭтоЛокальнаяПодпись(МестоХраненияКлюча);
	
	ОтпечаткиСертификатовАбонентов =
		ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_МЧДРРОтпечаткиСертификатов");
	ОтпечатокСертификатаАбонента = ?(ЗначениеЗаполнено(ОтпечаткиСертификатовАбонентов),
		ОтпечаткиСертификатовАбонентов[Организация], "");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Элементы.СертификатАбонентаПредставление.Видимость Тогда
		
		Оповещение = Новый ОписаниеОповещения("НайтиСертификатПослеПоиска", ЭтотОбъект);
		
		Если Элементы.ГруппаОтмена.Видимость И Элементы.ДолжностьРуководителяДоверителя.Видимость
			И ЗначениеЗаполнено(ОтпечатокСертификатаАбонента) И НЕ ЗначениеЗаполнено(ДолжностьРуководителяДоверителя) Тогда
			
			Если КриптографияЭДКОКлиентСервер.ЭтоЛокальнаяПодпись(МестоХраненияКлюча) Тогда
				КриптографияЭДКОКлиент.ПолучитьСертификаты(
					Оповещение,
					Новый Структура("Хранилище, ЭтоЛокальноеХранилище", "MY", Истина));
				
			Иначе
				ПараметрыСертификата = Новый Структура();
				ПараметрыСертификата.Вставить("МестоХраненияКлюча", МестоХраненияКлюча);
				ПараметрыСертификата.Вставить("Отпечаток", 			ОтпечатокСертификатаАбонента);
				
				КриптографияЭДКОКлиент.НайтиСертификат(Оповещение, ПараметрыСертификата);
			КонецЕсли;
			
		Иначе
			ВыполнитьОбработкуОповещения(Оповещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СертификатАбонентаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения(
		"СертификатАбонентаПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент));
	
	КриптографияЭДКОКлиент.ВыбратьСертификат(
		Оповещение, МестоХраненияКлюча, ОтпечатокСертификатаАбонента, "My");
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатАбонентаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтпечатокСертификатаАбонента = "";
	СертификатАбонентаПредставление = "";
	
	КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
		МестоХраненияКлюча,
		Элемент,
		ОтпечатокСертификатаАбонента,
		ЭтотОбъект,
		"СертификатАбонентаПредставление");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатАбонентаПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СертификатАбонента = Новый Структура("Отпечаток", ОтпечатокСертификатаАбонента);
	КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(МестоХраненияКлюча, СертификатАбонента);
	КриптографияЭДКОКлиент.ПоказатьСертификат(СертификатАбонента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отправить(Команда)
	
	ТипОперации = "";
	Если НЕ СохранениеВозможно(ТипОперации) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьПараметрыОтправки();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ПричинаОтмены", 							ПричинаОтмены);
	СтруктураДанных.Вставить("ДатаОтмены", 								ДатаОтмены);
	СтруктураДанных.Вставить("УникальныйИдентификаторДоверенности", 	УникальныйИдентификаторДоверенности);
	СтруктураДанных.Вставить("ДолжностьРуководителяДоверителя", 		ДолжностьРуководителяДоверителя);
	СтруктураДанных.Вставить("ДатаРожденияДоверителя", 					ДатаРожденияДоверителя);
	СтруктураДанных.Вставить("ТелефонПодписанта", 						ТелефонПодписанта);
	СтруктураДанных.Вставить("МестоХраненияКлюча", 						МестоХраненияКлюча);
	СтруктураДанных.Вставить("ОтпечатокСертификатаАбонента", 			ОтпечатокСертификатаАбонента);
	СтруктураДанных.Вставить("ПарольДоступаКЗакрытомуКлючу", 			ПарольДоступаКЗакрытомуКлючу);
	СтруктураДанных.Вставить("ТипОперации", 							ТипОперации);
	
	Закрыть(СтруктураДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ТипОперации = "ТолькоВыгрузка";
	Если НЕ СохранениеВозможно(ТипОперации) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьПараметрыОтправки();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ПричинаОтмены", 							ПричинаОтмены);
	СтруктураДанных.Вставить("ДатаОтмены", 								ДатаОтмены);
	СтруктураДанных.Вставить("УникальныйИдентификаторДоверенности", 	УникальныйИдентификаторДоверенности);
	СтруктураДанных.Вставить("ДолжностьРуководителяДоверителя", 		ДолжностьРуководителяДоверителя);
	СтруктураДанных.Вставить("ДатаРожденияДоверителя", 					ДатаРожденияДоверителя);
	СтруктураДанных.Вставить("ТелефонПодписанта", 						ТелефонПодписанта);
	СтруктураДанных.Вставить("МестоХраненияКлюча", 						МестоХраненияКлюча);
	СтруктураДанных.Вставить("ОтпечатокСертификатаАбонента", 			ОтпечатокСертификатаАбонента);
	СтруктураДанных.Вставить("ПарольДоступаКЗакрытомуКлючу", 			ПарольДоступаКЗакрытомуКлючу);
	СтруктураДанных.Вставить("ТипОперации", 							ТипОперации);
	
	Закрыть(СтруктураДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция СохранениеВозможно(ТипОперации = "")
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если Элементы.ГруппаОтмена.Видимость И Элементы.ДатаОтмены.Видимость И НЕ ЗначениеЗаполнено(ДатаОтмены) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не задана дата отзыва';
														|en = 'Не задана дата отзыва'"),,
			"ДатаОтмены",, Отказ);
	КонецЕсли;
	
	Если Элементы.ГруппаОтмена.Видимость И Элементы.УникальныйИдентификаторДоверенности.Видимость
		И НЕ ЗначениеЗаполнено(УникальныйИдентификаторДоверенности) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не задан уникальный идентификатор доверенности';
														|en = 'Не задан уникальный идентификатор доверенности'"),,
			"УникальныйИдентификаторДоверенности",, Отказ);
	КонецЕсли;
	
	Если Элементы.ГруппаОтмена.Видимость И Элементы.ДолжностьРуководителяДоверителя.Видимость
		И НЕ ЗначениеЗаполнено(ДолжностьРуководителяДоверителя) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не задана должность руководителя организации - доверителя';
				|en = 'Не задана должность руководителя организации - доверителя'"),,
			"ДолжностьРуководителяДоверителя",, Отказ);
	КонецЕсли;
	
	Если Элементы.ГруппаОтмена.Видимость И Элементы.ДатаРожденияДоверителя.Видимость
		И НЕ ЗначениеЗаполнено(ДатаРожденияДоверителя) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не задана дата рождения доверителя';
														|en = 'Не задана дата рождения доверителя'"),,
			"ДатаРожденияДоверителя",, Отказ);
	КонецЕсли;
	
	Если ТипОперации <> "ТолькоВыгрузка" И НЕ ЗначениеЗаполнено(ОтпечатокСертификатаАбонента) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран сертификат для подписания';
														|en = 'Не выбран сертификат для подписания'"),,
			"СертификатАбонентаПредставление",, Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура НайтиСертификатПослеПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.Выполнено
		И (НЕ Результат.Свойство("СертификатНайден") ИЛИ Результат.СертификатНайден) Тогда
		
		Если Результат.Свойство("Сертификаты") Тогда
			Для каждого СвойстваСертификата Из Результат.Сертификаты Цикл
				Если СвойстваСертификата.Отпечаток = ОтпечатокСертификатаАбонента Тогда
					Если СвойстваСертификата.ВладелецСтруктура.Свойство("T")
						И ЗначениеЗаполнено(СвойстваСертификата.ВладелецСтруктура.T) Тогда
						
						ДолжностьРуководителяДоверителя = СвойстваСертификата.ВладелецСтруктура.T;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Если Результат.СвойстваСертификата.Свойство("Субъект")
				И (ТипЗнч(Результат.СвойстваСертификата.Субъект) = Тип("Структура")
					ИЛИ ТипЗнч(Результат.СвойстваСертификата.Субъект) = Тип("ФиксированнаяСтруктура"))
				И Результат.СвойстваСертификата.Субъект.Свойство("T")
				И ЗначениеЗаполнено(Результат.СвойстваСертификата.Субъект.T) Тогда
				
				ДолжностьРуководителяДоверителя = Результат.СвойстваСертификата.Субъект.T;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
		МестоХраненияКлюча,
		Элементы.СертификатАбонентаПредставление,
		ОтпечатокСертификатаАбонента,
		ЭтотОбъект,
		"СертификатАбонентаПредставление");
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатАбонентаПредставлениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат.Выполнено Тогда
		ОтпечатокСертификатаАбонента = Результат.ВыбранноеЗначение.Отпечаток;
		
		Если Элементы.ГруппаОтмена.Видимость И Элементы.ДолжностьРуководителяДоверителя.Видимость
			И (Результат.ВыбранноеЗначение.Свойство("ВладелецСтруктура")
				И Результат.ВыбранноеЗначение.ВладелецСтруктура <> Неопределено
				И Результат.ВыбранноеЗначение.ВладелецСтруктура.Свойство("T")
				И ЗначениеЗаполнено(Результат.ВыбранноеЗначение.ВладелецСтруктура.T)
			ИЛИ Результат.ВыбранноеЗначение.Свойство("Владелец")) Тогда
			
			Если Результат.ВыбранноеЗначение.Свойство("ВладелецСтруктура") Тогда
				ДолжностьРуководителяДоверителя = Результат.ВыбранноеЗначение.ВладелецСтруктура.T;
				
			Иначе
				ПоляДляПоиска = "; " + Результат.ВыбранноеЗначение.Владелец;
				ПрефиксДолжности = "; T=";
				ПозицияДолжности = СтрНайти(ПоляДляПоиска, ПрефиксДолжности);
				Если ПозицияДолжности = 0 Тогда
					ПрефиксДолжности = ";T=";
					ПозицияДолжности = СтрНайти(ПоляДляПоиска, ПрефиксДолжности);
				КонецЕсли;
				
				Если ПозицияДолжности <> 0 Тогда
					ДлинаПрефиксаДолжности = СтрДлина(ПрефиксДолжности);
					ПолеДолжности = Сред(ПоляДляПоиска, ПозицияДолжности + ДлинаПрефиксаДолжности);
					ПозицияРазделителя = СтрНайти(ПолеДолжности, ";");
					Если ПозицияРазделителя <> 0 Тогда
						ПолеДолжности = Лев(ПолеДолжности, ПозицияРазделителя - 1);
					КонецЕсли;
					
					ДолжностьРуководителяДоверителя = ПолеДолжности;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
			МестоХраненияКлюча,
			Элемент,
			Результат.ВыбранноеЗначение.Отпечаток,
			ЭтотОбъект,
			"СертификатАбонентаПредставление");
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтправки()
	
	ОтпечаткиСертификатовАбонентов =
		ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_МЧДРРОтпечаткиСертификатов");
	Если ОтпечаткиСертификатовАбонентов = Неопределено Тогда
		ОтпечаткиСертификатовАбонентов = Новый Соответствие;
	КонецЕсли;
	ОтпечаткиСертификатовАбонентов[Организация] = ОтпечатокСертификатаАбонента;
	ХранилищеОбщихНастроек.Сохранить("ДокументооборотСКонтролирующимиОрганами_МЧДРРОтпечаткиСертификатов",,
		ОтпечаткиСертификатовАбонентов);
	
КонецПроцедуры

#КонецОбласти
