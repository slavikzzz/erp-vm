#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ЗагрузкаЭлементаСправочника

Функция ДанныеИзФайлаОбмена(
		ВходящиеДанные,
		ОбновлятьСуществующийИлиСсылка = Ложь,
		Подпись = Неопределено,
		ЗаявлениеНаОтзыв = Неопределено,
		ПодписьЗаявленияНаОтзыв = Неопределено,
		ДанныеАрхива = Неопределено) Экспорт
	
	ДанныеДоверенности = Новый Структура;
	
	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;
	ДокументОбработки = ПодготовитьДокументDOM(ТекущиеДанные);
	
	Если ЭтоФайл Тогда
		ТекущиеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	ДанныеДоверенности.Вставить("ДанныеВыгрузки", ТекущиеДанные);
	
	ТекущиеДанные = Подпись;
	Если Подпись <> Неопределено Тогда
		Если ТипЗнч(Подпись) = Тип("ДвоичныеДанные") Тогда
			ТекущиеДанные = Подпись;
		ИначеЕсли ЭтоАдресВременногоХранилища(Подпись) Тогда
			ТекущиеДанные = ПолучитьИзВременногоХранилища(Подпись);
		ИначеЕсли ТипЗнч(Подпись) = Тип("Строка") И НайтиФайлы(Подпись).Количество() > 0 Тогда
			ТекущиеДанные = Новый ДвоичныеДанные(Подпись);
		КонецЕсли;
	КонецЕсли;
	ДанныеДоверенности.Вставить("ДанныеПодписи", ТекущиеДанные);
	
	ТекущиеДанные = ЗаявлениеНаОтзыв;
	Если ЗаявлениеНаОтзыв <> Неопределено Тогда
		Если ТипЗнч(ЗаявлениеНаОтзыв) = Тип("ДвоичныеДанные") Тогда
			ТекущиеДанные = ЗаявлениеНаОтзыв;
		ИначеЕсли ЭтоАдресВременногоХранилища(ЗаявлениеНаОтзыв) Тогда
			ТекущиеДанные = ПолучитьИзВременногоХранилища(ЗаявлениеНаОтзыв);
		ИначеЕсли ТипЗнч(ЗаявлениеНаОтзыв) = Тип("Строка") И НайтиФайлы(ЗаявлениеНаОтзыв).Количество() > 0 Тогда
			ТекущиеДанные = Новый ДвоичныеДанные(ЗаявлениеНаОтзыв);
		КонецЕсли;
	КонецЕсли;
	ДанныеДоверенности.Вставить("ДанныеЗаявленияНаОтзыв", ТекущиеДанные);
	Если ТекущиеДанные <> Неопределено Тогда
		ДокументОтзыва = ПодготовитьДокументDOM(ТекущиеДанные);
		СведенияФайла = ПолучитьВыборкуЭлементовDOM(ДокументОтзыва, "/Файл");
		Если СведенияФайла.Количество() = 1 Тогда
			ЭлементВыборки = СведенияФайла[0];
			ИмяФайлаЗаявленияНаОтзыв = ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИдФайл");
			Если ЗначениеЗаполнено(ИмяФайлаЗаявленияНаОтзыв) Тогда
				ДанныеДоверенности.Вставить("ИмяФайлаЗаявленияНаОтзыв", ИмяФайлаЗаявленияНаОтзыв + ".xml");
			КонецЕсли;
		КонецЕсли;
		
		СведенияДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОтзыва, "/Файл/Документ/СвЗаяв");
		Если СведенияДоверенности.Количество() = 1 Тогда
			ЭлементВыборки = СведенияДоверенности[0];
			ДанныеДоверенности.Вставить("УникальныйИдентификаторДоверенностиОтзыва",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИдДовер"));
			ДанныеДоверенности.Вставить("ДатаОтзыва", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаОтз", '00010101'));
			ДанныеДоверенности.Вставить("ПричинаОтзыва", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ПричОтз", ""));
		КонецЕсли;
		
		СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОтзыва, "/Файл/Документ/СвДоверит/НПЮЛ");
		СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ДокументОтзыва, "/Файл/Документ/СвДоверит/НПФЛ");
		СведенияДоверителяИО = ПолучитьВыборкуЭлементовDOM(ДокументОтзыва, "/Файл/Документ/СвДоверит/ИО");
		Если СведенияДоверителяЮЛ.Количество() = 1 Тогда
			ТипОрганизацииОтзыва = "ЮЛ";
			СведенияДоверителя = СведенияДоверителяЮЛ;
		ИначеЕсли СведенияДоверителяФЛ.Количество() = 1 Тогда
			ТипОрганизацииОтзыва = "ФЛ";
			СведенияДоверителя = СведенияДоверителяФЛ;
		Иначе
			ТипОрганизацииОтзыва = "ИО";
			СведенияДоверителя = СведенияДоверителяИО;
		КонецЕсли;
		Если СведенияДоверителя.Количество() = 1 Тогда
			ЭлементВыборки = СведенияДоверителя[0];
			Если ТипОрганизацииОтзыва = "ЮЛ" Тогда
				ДанныеДоверенности.Вставить("ДолжностьРуководителяДоверителяОтзыва",
					ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОрг/@Должность"));
			ИначеЕсли ТипОрганизацииОтзыва = "ФЛ" Тогда
				ДанныеДоверенности.Вставить("ДатаРожденияДоверителяОтзыва",
					ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаРожд", '00010101'));
			КонецЕсли;
		КонецЕсли;
		
		СведенияПодписанта = ПолучитьВыборкуЭлементовDOM(ДокументОтзыва, "/Файл/Документ/Подписант");
		Если СведенияПодписанта.Количество() = 1 Тогда
			ЭлементВыборки = СведенияПодписанта[0];
			ДанныеДоверенности.Вставить("ТелефонПодписантаОтзыва", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Тлф"));
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные = ПодписьЗаявленияНаОтзыв;
	Если ПодписьЗаявленияНаОтзыв <> Неопределено Тогда
		Если ТипЗнч(ПодписьЗаявленияНаОтзыв) = Тип("ДвоичныеДанные") Тогда
			ТекущиеДанные = ПодписьЗаявленияНаОтзыв;
		ИначеЕсли ЭтоАдресВременногоХранилища(ПодписьЗаявленияНаОтзыв) Тогда
			ТекущиеДанные = ПолучитьИзВременногоХранилища(ПодписьЗаявленияНаОтзыв);
		ИначеЕсли ТипЗнч(ПодписьЗаявленияНаОтзыв) = Тип("Строка")
			И НайтиФайлы(ПодписьЗаявленияНаОтзыв).Количество() > 0 Тогда
			ТекущиеДанные = Новый ДвоичныеДанные(ПодписьЗаявленияНаОтзыв);
		КонецЕсли;
	КонецЕсли;
	ДанныеДоверенности.Вставить("ДанныеПодписиЗаявленияНаОтзыв", ТекущиеДанные);
	
	ТекущиеДанные = ДанныеАрхива;
	Если ДанныеАрхива <> Неопределено Тогда
		Если ТипЗнч(ДанныеАрхива) = Тип("ДвоичныеДанные") Тогда
			ТекущиеДанные = ДанныеАрхива;
		ИначеЕсли ЭтоАдресВременногоХранилища(ДанныеАрхива) Тогда
			ТекущиеДанные = ПолучитьИзВременногоХранилища(ДанныеАрхива);
		ИначеЕсли ТипЗнч(ДанныеАрхива) = Тип("Строка")
			И НайтиФайлы(ДанныеАрхива).Количество() > 0 Тогда
			ТекущиеДанные = Новый ДвоичныеДанные(ДанныеАрхива);
		КонецЕсли;
	КонецЕсли;
	ДанныеДоверенности.Вставить("ДанныеАрхива", ТекущиеДанные);
	
	СведенияФайла = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл");
	Если СведенияФайла.Количество() = 1 Тогда
		ЭлементВыборки = СведенияФайла[0];
		ИмяФайлаВыгрузки = ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИдФайл");
		Если ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
			Если ВРег(Лев(ИмяФайлаВыгрузки, 12)) = "ON_OFFDOVER_" Тогда
				ДанныеДоверенности = ДанныеИзФайлаОбменаДляОтмены(ДокументОбработки, ОбновлятьСуществующийИлиСсылка, Подпись);
				Возврат ДанныеДоверенности;
			ИначеЕсли ВРег(Лев(ИмяФайлаВыгрузки, 9)) <> "ON_DOVEL_" Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Неопознанный тип доверенности, имя файла: %1';
						|en = 'Неопознанный тип доверенности, имя файла: %1'"),
					ИмяФайлаВыгрузки);
				Возврат Новый Структура("ТекстОшибки", ТекстОшибки);
			КонецЕсли;
			
			ДанныеДоверенности.Вставить("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки + ".xml");
		КонецЕсли;
		ДанныеДоверенности.Вставить("ВерсияФормата", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ВерсФорм"));
		
	Иначе
		СведенияДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Доверенность", Ложь);
		Если СведенияДоверенности.Количество() = 1 Тогда
			ЭлементВыборки = СведенияДоверенности[0];
			ВерсияФайлаВыгрузки = ПолучитьЗначениеДокумента(ЭлементВыборки, "@ВерсФорм");
			Если ВРег(Лев(ВерсияФайлаВыгрузки, 6)) = "EMCHD_" ИЛИ ВРег(Лев(ВерсияФайлаВыгрузки, 6)) = "003" Тогда
				Возврат Новый Структура("ТекстОшибки",
					НСтр("ru = 'Неверный тип доверенности: машиночитаемая доверенность (единый формат).
							   |Для загрузки доверенности в разделе ""Администрирование"" - ""Общие настройки"" - ""Электронная подпись и шифрование"" перейдите по ссылкам ""Сертификаты и программы электронной подписи и шифрования"" - ""Машиночитаемые доверенности (единый формат)"", воспользуйтесь кнопкой загрузки';
							   |en = 'Неверный тип доверенности: машиночитаемая доверенность (единый формат).
							   |Для загрузки доверенности в разделе ""Администрирование"" - ""Общие настройки"" - ""Электронная подпись и шифрование"" перейдите по ссылкам ""Сертификаты и программы электронной подписи и шифрования"" - ""Машиночитаемые доверенности (единый формат)"", воспользуйтесь кнопкой загрузки'"));
			ИначеЕсли ВРег(Лев(ВерсияФайлаВыгрузки, 6)) = "002" ИЛИ ВРег(Лев(ВерсияФайлаВыгрузки, 6)) = "001" Тогда
				Если Метаданные.Справочники.Найти("МЧД003") = Неопределено Тогда
					Возврат Новый Структура("ТекстОшибки",
						НСтр("ru = 'Неверный тип доверенности: машиночитаемая доверенность, используемая при обмене электронными документами.
								   |Для загрузки доверенности в типовой конфигурации с поддержкой обмена электронными документами в свойствах организации воспользуйтесь меню ""ЭДО"" - ""Машиночитаемые доверенности"", воспользуйтесь кнопкой загрузки.';
								   |en = 'Неверный тип доверенности: машиночитаемая доверенность, используемая при обмене электронными документами.
								   |Для загрузки доверенности в типовой конфигурации с поддержкой обмена электронными документами в свойствах организации воспользуйтесь меню ""ЭДО"" - ""Машиночитаемые доверенности"", воспользуйтесь кнопкой загрузки.'"));
				Иначе
					Возврат Новый Структура("ТекстОшибки",
						НСтр("ru = 'Неверный тип доверенности: машиночитаемая доверенность, используемая при обмене электронными документами.
								   |Для загрузки доверенности в свойствах организации воспользуйтесь меню ""ЭДО"" - ""Машиночитаемые доверенности"", воспользуйтесь кнопкой загрузки';
								   |en = 'Неверный тип доверенности: машиночитаемая доверенность, используемая при обмене электронными документами.
								   |Для загрузки доверенности в свойствах организации воспользуйтесь меню ""ЭДО"" - ""Машиночитаемые доверенности"", воспользуйтесь кнопкой загрузки'"));
				КонецЕсли;
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Неопознанный тип доверенности, версия файла: %1';
						|en = 'Неопознанный тип доверенности, версия файла: %1'"),
					ВерсияФайлаВыгрузки);
				Возврат Новый Структура("ТекстОшибки", ТекстОшибки);
			КонецЕсли;
		Иначе
			Возврат Новый Структура("ТекстОшибки", НСтр("ru = 'Неопознанный тип доверенности';
														|en = 'Неопознанный тип доверенности'"));
		КонецЕсли;
	КонецЕсли;
	
	ЭтоВерсия5_02 = (ДанныеДоверенности.Свойство("ВерсияФормата") И ДанныеДоверенности.ВерсияФормата = "5.02");
	ЭтоПередоверие = Ложь;
	
	Если ЭтоВерсия5_02 Тогда
		СведенияДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Довер/СвДов");
		Если СведенияДоверенности.Количество() = 0 Тогда
			СведенияДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Передов/СвДовП");
			ЭтоПередоверие = (СведенияДоверенности.Количество() <> 0);
		КонецЕсли;
	Иначе
		СведенияДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДов");
	КонецЕсли;
	
	Если ЭтоПередоверие Тогда
		Если СведенияДоверенности.Количество() = 1 Тогда
			ЭлементВыборки = СведенияДоверенности[0];
			ДанныеДоверенности.Вставить("НомерДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НомДовер"));
			ДанныеДоверенности.Вставить("ДатаВыдачи", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаНач", '00010101'));
			ДанныеДоверенности.Вставить("ДатаОкончания", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаОкон", '00010101'));
			ДанныеДоверенности.Вставить("ПередовериеВозможно", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ПрПередов") = "1");
			ДанныеДоверенности.Вставить("НомерРодительскойДоверенности",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "@РегНомДовN", ""));
			ДанныеДоверенности.Вставить("РегистрационныйНомерДоверенности",
				ПолучитьЗначениеДокумента(ДокументОбработки, "//Файл/Документ/@РегНомДовер"));
			ДанныеДоверенности.Вставить("КодНалоговогоОрганаПредставления",
				ПолучитьЗначениеДокумента(ДокументОбработки, "//Файл/Документ/@КодНО", ""));
		КонецЕсли;
		
		СписокНО = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Передов/СвДовП/КодНОДейст");
		ДанныеДоверенности.Вставить("НалоговыеОрганыДействия", Новый Массив);
		ДанныеДоверенности.Вставить("ФИО", Новый Массив);
		ДанныеДоверенности.Вставить("ПолномочияПредставителя", Новый Массив);
		ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);
		ДанныеДоверенности.Вставить("РодительскиеДоверенности", Новый Массив);
		ДанныеДоверенности.Вставить("ТипОрганизации", "");
		
		Для Каждого СтрокаМассива Из СписокНО Цикл
			НоваяСтрока = Новый Структура("КодНалоговогоОргана", СтрокаМассива.ТекстовоеСодержимое);
			ДанныеДоверенности.НалоговыеОрганыДействия.Добавить(НоваяСтрока);
		КонецЦикла;
		
		СведенияКорневойДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
			"/Файл/Документ/Передов/СвДовП/СвОснДов");
		Если СведенияКорневойДоверенности.Количество() = 1 Тогда
			ЭлементВыборки = СведенияКорневойДоверенности[0];
			
			ДанныеДоверенности.Вставить("НомерКорневойДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@РегНомДов0"));
			
			ДанныеКорневойДоверенности = Новый Структура;
			ДанныеКорневойДоверенности.Вставить("ЭтоКорневаяДоверенность", Истина);
			
			СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ЭлементВыборки, "СвДоверитОсн/ДоверитЮЛ");
			СведенияДоверителяИО = ПолучитьВыборкуЭлементовDOM(ЭлементВыборки, "СвДоверитОсн/ДоверитИО");
			СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ЭлементВыборки, "СвДоверитОсн/ДоверитФЛ");
			
			Если СведенияДоверителяЮЛ.Количество() = 1 Тогда
				ЭлементВыборки = СведенияДоверителяЮЛ[0];
				
				ДанныеКорневойДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Ложь);
				ДанныеКорневойДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимОрг"));
				ДанныеКорневойДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
				ДанныеКорневойДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
				ДанныеКорневойДоверенности.Вставить("ДоверительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРН"));
			
			ИначеЕсли СведенияДоверителяИО.Количество() = 1 И СведенияДоверителяФЛ.Количество() = 0 Тогда
				ЭлементВыборки = СведенияДоверителяИО[0];
				
				ДанныеКорневойДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
				ДанныеКорневойДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимИО"));
				ДанныеКорневойДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
				ДанныеКорневойДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
				
			ИначеЕсли СведенияДоверителяФЛ.Количество() = 1 Тогда
				ЭлементВыборки = СведенияДоверителяФЛ[0];
				
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННФЛ"));
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРНИП"));
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки, "@СНИЛС"));
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
					"@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
					"@ДатаРожд", '00010101'));
				
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_Фамилия", ПолучитьЗначениеДокумента(ЭлементВыборки,
					"ФИО/@Фамилия"));
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_Имя", ПолучитьЗначениеДокумента(ЭлементВыборки, "ФИО/@Имя"));
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_Отчество", ПолучитьЗначениеДокумента(ЭлементВыборки,
					"ФИО/@Отчество"));
				
				ДокументИП = Новый Структура;
				СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@СерНомДок"));
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_СерДок", СерияНомер.Серия);
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_НомДок", СерияНомер.Номер);
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_ДатаДок", ПолучитьЗначениеДокумента(ЭлементВыборки,
					"УдЛичн/@ДатаДок", '00010101'));
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_ВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки,
					"УдЛичн/@ВыдДок"));
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_КодВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки,
					"УдЛичн/@КодВыдДок"));
				ДанныеКорневойДоверенности.Вставить("ДоверительФЛ_ВидДок", ПолучитьЗначениеДокумента(ЭлементВыборки,
					"УдЛичн/@КодВидДок", Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
			КонецЕсли;
			
			ДанныеДоверенности.РодительскиеДоверенности.Добавить(ДанныеКорневойДоверенности);
		КонецЕсли;
		
		Если ДанныеДоверенности.НомерРодительскойДоверенности <> ДанныеДоверенности.НомерКорневойДоверенности Тогда
			СведенияРодительскойДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
				"/Файл/Документ/Передов/СвДовП/СвДоверщП");
			Если СведенияРодительскойДоверенности.Количество() = 1 Тогда
				ЭлементВыборки = СведенияРодительскойДоверенности[0];
				
				ДанныеРодительскойДоверенности = Новый Структура;
				ДанныеРодительскойДоверенности.Вставить("ЭтоКорневаяДоверенность", Ложь);
				
				СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ЭлементВыборки, "ДоверщЮЛ");
				СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ЭлементВыборки, "ДоверщФЛ");
				
				Если СведенияДоверителяЮЛ.Количество() = 1 Тогда
					ЭлементВыборки = СведенияДоверителяЮЛ[0];
					
					ДанныеРодительскойДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Ложь);
					ДанныеРодительскойДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимОрг"));
					ДанныеРодительскойДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
					ДанныеРодительскойДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
					ДанныеРодительскойДоверенности.Вставить("ДоверительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРН"));
				
				ИначеЕсли СведенияДоверителяФЛ.Количество() = 1 Тогда
					ЭлементВыборки = СведенияДоверителяФЛ[0];
					
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННФЛ"));
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРНИП"));
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки, "@СНИЛС"));
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
						"@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
						"@ДатаРожд", '00010101'));
					
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_Фамилия", ПолучитьЗначениеДокумента(ЭлементВыборки,
						"ФИО/@Фамилия"));
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_Имя", ПолучитьЗначениеДокумента(ЭлементВыборки, "ФИО/@Имя"));
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_Отчество", ПолучитьЗначениеДокумента(ЭлементВыборки,
						"ФИО/@Отчество"));
					
					ДокументИП = Новый Структура;
					СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@СерНомДок"));
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_СерДок", СерияНомер.Серия);
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_НомДок", СерияНомер.Номер);
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_ДатаДок", ПолучитьЗначениеДокумента(ЭлементВыборки,
						"УдЛичн/@ДатаДок", '00010101'));
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_ВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки,
						"УдЛичн/@ВыдДок"));
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_КодВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки,
						"УдЛичн/@КодВыдДок"));
					ДанныеРодительскойДоверенности.Вставить("ДоверительФЛ_ВидДок", ПолучитьЗначениеДокумента(ЭлементВыборки,
						"УдЛичн/@КодВидДок", Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
				КонецЕсли;
				
				ДанныеДоверенности.РодительскиеДоверенности.Добавить(ДанныеРодительскойДоверенности);
			КонецЕсли;
		КонецЕсли;
		
		СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Передов/СвДоверщ/СвОрг");
		СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Передов/СвДоверщ/СвФЛ");
		
		ДоверительЭтоОрганизация = (СведенияДоверителяЮЛ.Количество() = 1);
		ДанныеДоверенности.ТипОрганизации = ?(ДоверительЭтоОрганизация, "ЮЛ", "ФЛ");
		
		РеквизитыПоискаОрганизации = Новый Соответствие;
		
		Если СведенияДоверителяЮЛ.Количество() = 1 Тогда
			ЭлементВыборки = СведенияДоверителяЮЛ[0];
			
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимОрг"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРН"));
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
			СправочникОрганизации = Метаданные.Справочники.Найти("Организации");
			РеквизитКПП = ?(СправочникОрганизации = Неопределено, Неопределено, СправочникОрганизации.Реквизиты.Найти("КПП"));
			Если РеквизитКПП <> Неопределено И ЗначениеЗаполнено(ДанныеДоверенности.ДоверительЮЛ_КПП) Тогда
				РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
			КонецЕсли;
		КонецЕсли;
		
		Если СведенияДоверителяФЛ.Количество() = 1 Тогда
			ЭлементВыборки = СведенияДоверителяФЛ[0];
			
			ДанныеДоверенности.Вставить(?(ДоверительЭтоОрганизация, "ЛицоБезДовФЛ_ИНН", "ДоверительФЛ_ИНН"),
				ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННФЛ"));
			ДанныеДоверенности.Вставить(?(ДоверительЭтоОрганизация, "ЛицоБезДовФЛ_ОГРН", "ДоверительФЛ_ОГРН"),
				ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРНИП"));
			ДанныеДоверенности.Вставить(?(ДоверительЭтоОрганизация, "ЛицоБезДовФЛ_СНИЛС", "ДоверительФЛ_СНИЛС"),
				ПолучитьЗначениеДокумента(ЭлементВыборки, "@СНИЛС"));
			ДанныеДоверенности.Вставить(?(ДоверительЭтоОрганизация, "ЛицоБезДовФЛ_Гражданство", "ДоверительФЛ_Гражданство"),
				ПолучитьЗначениеДокумента(ЭлементВыборки, "@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить(?(ДоверительЭтоОрганизация, "ЛицоБезДовФЛ_ДатаРождения", "ДоверительФЛ_ДатаРождения"),
				ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаРожд", '00010101'));
			
			ДокументИП = Новый Структура;
			СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@СерНомДок"));
			ДокументИП.Вставить("СерДок", СерияНомер.Серия);
			ДокументИП.Вставить("НомДок", СерияНомер.Номер);
			ДокументИП.Вставить("ДатаДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@ДатаДок", '00010101'));
			ДокументИП.Вставить("ВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@ВыдДок"));
			ДокументИП.Вставить("КодВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@КодВыдДок"));
			ДокументИП.Вставить("ВидДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@КодВидДок", Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
			ДокументИП.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ);
			ДанныеДоверенности.УдостоверенияЛичности.Добавить(ДокументИП);
			
			Если ДоверительЭтоОрганизация Тогда
				Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_ИНН) Тогда
					ДанныеДоверенности.Вставить("ЛицоБезДовФЛ",
										ПодыскатьИнформациюВладельца("Контрагенты,ФизическиеЛица", 
										ДанныеДоверенности.ЛицоБезДовФЛ_ИНН, , ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС));
				КонецЕсли;
				
			Иначе
				РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если СведенияДоверенности.Количество() = 1 Тогда
			ЭлементВыборки = СведенияДоверенности[0];
			ДанныеДоверенности.Вставить("НомерДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НомДовер"));
			ДанныеДоверенности.Вставить("ДатаВыдачи", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаНач", '00010101'));
			Если ЭтоВерсия5_02 Тогда
				ДанныеДоверенности.Вставить("ДатаОкончания", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаОкон", '00010101'));
				ДанныеДоверенности.Вставить("ПередовериеВозможно", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ПрПередов") = "1");
				ДанныеДоверенности.Вставить("РегистрационныйНомерДоверенности",
					ПолучитьЗначениеДокумента(ДокументОбработки, "//Файл/Документ/@РегНомДовер"));
			Иначе
				ДанныеДоверенности.Вставить("ДатаОкончания", ПолучитьЗначениеДокумента(ЭлементВыборки, "ДатаОкон", '00010101'));
				ДанныеДоверенности.Вставить("СрокДействия", ПолучитьЗначениеДокумента(ЭлементВыборки, "СрокДейст", ""));
				ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", ПолучитьЗначениеДокумента(ЭлементВыборки, "СведСистОтм", ""));
				ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НомПредДовер", ""));
			КонецЕсли;
			ДанныеДоверенности.Вставить("КодНалоговогоОрганаПредставления",
				ПолучитьЗначениеДокумента(ДокументОбработки, "//Файл/Документ/@КодНО", ""));
		КонецЕсли;
		
		Если ЭтоВерсия5_02 Тогда
			СписокНО = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Довер/СвДов/КодНОДейст");
		Иначе
			СписокНО = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДов/КодНОДейст");
		КонецЕсли;
		ДанныеДоверенности.Вставить("НалоговыеОрганыДействия", Новый Массив);
		ДанныеДоверенности.Вставить("ФИО", Новый Массив);
		ДанныеДоверенности.Вставить("ПолномочияПредставителя", Новый Массив);
		ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);
		ДанныеДоверенности.Вставить("ТипОрганизации", "");
		
		Для Каждого СтрокаМассива Из СписокНО Цикл
			НоваяСтрока = Новый Структура("КодНалоговогоОргана", СтрокаМассива.ТекстовоеСодержимое);
			ДанныеДоверенности.НалоговыеОрганыДействия.Добавить(НоваяСтрока);
		КонецЦикла;
		
		Если ЭтоВерсия5_02 Тогда
			СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Довер/СвДоверит/НПЮЛ");
			СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Довер/СвДоверит/НПФЛ");
			СведенияДоверителяИО = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Довер/СвДоверит/ИО");
		Иначе
			СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/НПЮЛ");
			СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/НПФЛ");
			СведенияДоверителяИО = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/ИО");
		КонецЕсли;
		
		Если СведенияДоверителяЮЛ.Количество() = 1 Тогда
			ДанныеДоверенности.ТипОрганизации = "ЮЛ";
			СведенияДоверителя = СведенияДоверителяЮЛ;
		ИначеЕсли СведенияДоверителяФЛ.Количество() = 1 Тогда
			ДанныеДоверенности.ТипОрганизации = "ФЛ";
			СведенияДоверителя = СведенияДоверителяФЛ;
		Иначе
			ДанныеДоверенности.ТипОрганизации = "ИО";
			СведенияДоверителя = СведенияДоверителяИО;
		КонецЕсли;
		
		РеквизитыПоискаОрганизации = Новый Соответствие;
		
		Если СведенияДоверителя.Количество() = 1 Тогда
			ЭлементВыборки = СведенияДоверителя[0];
			Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
				ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимОрг"));
				ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
				ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
				ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРН"));
				
				ДанныеДоверенности.Вставить("ДоверительЮЛ_АдрРус", ПолучитьЗначениеДокумента(ЭлементВыборки, "АдрРФ/АдрРус"));
				ДанныеДоверенности.Вставить("ДоверительЮЛ_АдрЛат", ПолучитьЗначениеДокумента(ЭлементВыборки, "АдрРФ/АдрЛат"));
				
				ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "ЛицоБезДов/СвФЛ/@ИННФЛ"));
				ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки, "ЛицоБезДов/СвФЛ/@СНИЛС"));
				ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки, "ЛицоБезДов/СвФЛ/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
				ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки, "ЛицоБезДов/СвФЛ/@ДатаРожд", '00010101'));
				ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Должность", ПолучитьЗначениеДокумента(ЭлементВыборки, "ЛицоБезДов/СвФЛ/@Должность"));
				
				ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "ЛицоБезДов/СвОрг/@НаимОрг"));
				ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "ЛицоБезДов/СвОрг/@ИННЮЛ"));
				ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "ЛицоБезДов/СвОрг/@КПП"));
				ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "ЛицоБезДов/СвОрг/@ОГРН"));
				
				Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_ИНН) Тогда
					ДанныеДоверенности.Вставить("ЛицоБезДовФЛ",
										ПодыскатьИнформациюВладельца("Контрагенты,ФизическиеЛица", 
										ДанныеДоверенности.ЛицоБезДовФЛ_ИНН, , ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН) Тогда
					ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ",
										ПодыскатьИнформациюВладельца("Контрагенты,Организации", 
										ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН, ДанныеДоверенности.ЛицоБезДовЮЛ_КПП));
					Если НЕ ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовЮЛ)
						И ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовЮЛ_НаимОрг) Тогда
						ДанныеДоверенности.ЛицоБезДовЮЛ = ДанныеДоверенности.ЛицоБезДовЮЛ_НаимОрг;
					КонецЕсли;
				КонецЕсли;
				
				РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
				СправочникОрганизации = Метаданные.Справочники.Найти("Организации");
				РеквизитКПП = ?(СправочникОрганизации = Неопределено, Неопределено, СправочникОрганизации.Реквизиты.Найти("КПП"));
				Если РеквизитКПП <> Неопределено И ЗначениеЗаполнено(ДанныеДоверенности.ДоверительЮЛ_КПП) Тогда
					РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
				КонецЕсли;
				
			ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИО" Тогда
				ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
				ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимИО"));
				ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
				ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
				ДанныеДоверенности.Вставить("ДоверительЮЛ_СтрРег", ПолучитьЗначениеДокумента(ЭлементВыборки, "@СтрРег", Справочники.СтраныМира.ПустаяСсылка()));
				ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимРегОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимРегОрг"));
				ДанныеДоверенности.Вставить("ДоверительЮЛ_РегНомер", ПолучитьЗначениеДокумента(ЭлементВыборки, "@РегНомер"));
				ДанныеДоверенности.Вставить("ДоверительЮЛ_КодНПРег", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КодНПРег"));
				ДанныеДоверенности.Вставить("ДоверительЮЛ_АдрЛат", ПолучитьЗначениеДокумента(ЭлементВыборки, "АдрСтрРег/АдрЛат"));
				ДанныеДоверенности.Вставить("ДоверительЮЛ_АдрРус", ПолучитьЗначениеДокумента(ЭлементВыборки, "АдрСтрРег/АдрРус"));
				
				ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ИННФЛ"));
				ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ДатаРожд", '00010101'));
				ДанныеДоверенности.Вставить("ДоверительФЛ_МестоРожд", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@МестоРожд"));
				ДанныеДоверенности.Вставить("ДоверительФЛ_Пол", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@Пол", Перечисления.ПолФизическогоЛица.Мужской));
				ПризнакГражданства = ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ПрГражд");
				Если ПризнакГражданства = 1 Тогда
					ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.Россия);
				Иначе
					ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
				КонецЕсли;
				
				РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
				СправочникОрганизации = Метаданные.Справочники.Найти("Организации");
				РеквизитКПП = ?(СправочникОрганизации = Неопределено, Неопределено, СправочникОрганизации.Реквизиты.Найти("КПП"));
				Если РеквизитКПП <> Неопределено И ЗначениеЗаполнено(ДанныеДоверенности.ДоверительЮЛ_КПП) Тогда
					РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
				КонецЕсли;
				
			ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
				ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННФЛ"));
				ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРНИП"));
				ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки, "@СНИЛС"));
				ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
				ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаРожд", '00010101'));
				
				ДокументИП = Новый Структура;
				СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@СерНомДок"));
				ДокументИП.Вставить("СерДок", СерияНомер.Серия);
				ДокументИП.Вставить("НомДок", СерияНомер.Номер);
				ДокументИП.Вставить("ДатаДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@ДатаДок", '00010101'));
				ДокументИП.Вставить("ВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@ВыдДок"));
				ДокументИП.Вставить("КодВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@КодВыдДок"));
				ДокументИП.Вставить("ВидДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@КодВидДок", Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
				ДокументИП.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ);
				ДанныеДоверенности.УдостоверенияЛичности.Добавить(ДокументИП);
				
				РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПередоверие Тогда
		СведенияУполномоченных = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Передов/СвУпПред");
	ИначеЕсли ЭтоВерсия5_02 Тогда
		СведенияУполномоченных = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Довер/СвУпПред");
	Иначе
		СведенияУполномоченных = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвУпПред");
	КонецЕсли;
	Если ЭтоВерсия5_02 Тогда
		ДанныеДоверенности.Вставить("Представители", Новый Массив);
	КонецЕсли;
	ИндексПредставителя = 0;
	СтрокаПредставителя = Неопределено;
	Для каждого СтрокаМассива Из СведенияУполномоченных Цикл
		Если ИндексПредставителя = 1 Тогда
			ДанныеДоверенности.Представители.Добавить(СтрокаПредставителя);
		КонецЕсли;
		
		СтрокаПредставителя = Новый Структура;
		
		Если ИндексПредставителя < 1 Тогда
			НоваяСтрока = Новый Структура;
			Если ЭтоПередоверие Тогда
				ПолномочияПредставителя = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Передов/ПрОблПолн");
			ИначеЕсли ЭтоВерсия5_02 Тогда
				ПолномочияПредставителя = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "/Файл/Документ/Довер/ПрОблПолн");
			Иначе
				ПолномочияПредставителя = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "ПрОблПолн");
			КонецЕсли;
			Для каждого ПолномочиеПредставителя Из ПолномочияПредставителя Цикл
				ПредставлениеВида = СокрЛП(ПолномочиеПредставителя.ТекстовоеСодержимое);
				Если ПредставлениеВида = "99" Тогда
					НоваяСтрока.Вставить("ПризнакПолныеПолномочия", Истина);
				ИначеЕсли СтрДлина(ПредставлениеВида) = 2 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПредставлениеВида) Тогда
					ВидПолномочия = Число(ПредставлениеВида);
					Если ВидПолномочия >= 1 И ВидПолномочия <= КоличествоВидовПолномочийПредставителя() Тогда
						НоваяСтрока.Вставить("Признак" + ПредставлениеВида, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ДанныеДоверенности.ПолномочияПредставителя.Добавить(НоваяСтрока);
		КонецЕсли;
		
		ТипВладельца = Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ;
		Если ЭтоВерсия5_02 Тогда
			ИнформацияОрганизации = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "СвОрг");
		Иначе
			ИнформацияОрганизации = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "СвПред/СвОрг");
		КонецЕсли;
		Если ИнформацияОрганизации.Количество() > 0 Тогда
			СтрокаПредставителя.Вставить("ПредставительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0], "@НаимОрг"));
			СтрокаПредставителя.Вставить("ПредставительЮЛ_ИНН", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0], "@ИННЮЛ"));
			СтрокаПредставителя.Вставить("ПредставительЮЛ_КПП", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0], "@КПП"));
			СтрокаПредставителя.Вставить("ПредставительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0], "@ОГРН"));
			Если ИндексПредставителя < 1 Тогда
				ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", СтрокаПредставителя.ПредставительЮЛ_НаимОрг);
				ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", СтрокаПредставителя.ПредставительЮЛ_ИНН);
				ДанныеДоверенности.Вставить("ПредставительЮЛ_КПП", СтрокаПредставителя.ПредставительЮЛ_КПП);
				ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", СтрокаПредставителя.ПредставительЮЛ_ОГРН);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоВерсия5_02 Тогда
			СведенияФЛ = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "СведФизЛ");
		Иначе
			СведенияФЛ = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "СвПред/СведФизЛ");
		КонецЕсли;
		Если СведенияФЛ.Количество() > 0 Тогда
			СведенияФЛ = СведенияФЛ[0];
			СтрокаПредставителя.Вставить("ПредставительФЛ_ИНН", ПолучитьЗначениеДокумента(СведенияФЛ, "@ИННФЛ"));
			СтрокаПредставителя.Вставить("ПредставительФЛ_ОГРН", ПолучитьЗначениеДокумента(СведенияФЛ, "@ОГРНИП"));
			СтрокаПредставителя.Вставить("ПредставительФЛ_СНИЛС", ПолучитьЗначениеДокумента(СведенияФЛ, "@СНИЛС"));
			СтрокаПредставителя.Вставить("ПредставительФЛ_Гражданство", ПолучитьЗначениеДокумента(СведенияФЛ, "@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			СтрокаПредставителя.Вставить("ПредставительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(СведенияФЛ, "@ДатаРожд", '00010101'));
			Если ИндексПредставителя < 1 Тогда
				ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", СтрокаПредставителя.ПредставительФЛ_ИНН);
				ДанныеДоверенности.Вставить("ПредставительФЛ_ОГРН", СтрокаПредставителя.ПредставительФЛ_ОГРН);
				ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", СтрокаПредставителя.ПредставительФЛ_СНИЛС);
				ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", СтрокаПредставителя.ПредставительФЛ_Гражданство);
				ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", СтрокаПредставителя.ПредставительФЛ_ДатаРождения);
			КонецЕсли;
			
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Фамилия"));
			НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Имя"));
			НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Отчество"));
			НоваяСтрока.Вставить("Владелец", ТипВладельца);
			СтрокаПредставителя.Вставить("ПредставительФЛ_Фамилия", НоваяСтрока.Фамилия);
			СтрокаПредставителя.Вставить("ПредставительФЛ_Имя", НоваяСтрока.Имя);
			СтрокаПредставителя.Вставить("ПредставительФЛ_Отчество", НоваяСтрока.Отчество);
			Если ИндексПредставителя < 1 Тогда
				ДанныеДоверенности.ФИО.Добавить(НоваяСтрока);
			КонецЕсли;
			
			ДокументИП = Новый Структура;
			СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@СерНомДок"));
			ДокументИП.Вставить("СерДок", СерияНомер.Серия);
			ДокументИП.Вставить("НомДок", СерияНомер.Номер);
			ДокументИП.Вставить("ДатаДок", ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@ДатаДок", '00010101'));
			ДокументИП.Вставить("ВыдДок", ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@ВыдДок"));
			ДокументИП.Вставить("ВидДок", ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@КодВидДок", Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
			ДокументИП.Вставить("КодВыдДок", ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@КодВыдДок"));
			ДокументИП.Вставить("Владелец", ТипВладельца);
			СтрокаПредставителя.Вставить("ПредставительФЛ_ВидДок", ДокументИП.ВидДок);
			СтрокаПредставителя.Вставить("ПредставительФЛ_СерДок", ДокументИП.СерДок);
			СтрокаПредставителя.Вставить("ПредставительФЛ_НомДок", ДокументИП.НомДок);
			СтрокаПредставителя.Вставить("ПредставительФЛ_ДатаДок", ДокументИП.ДатаДок);
			СтрокаПредставителя.Вставить("ПредставительФЛ_ВыдДок", ДокументИП.ВыдДок);
			СтрокаПредставителя.Вставить("ПредставительФЛ_КодВыдДок", ДокументИП.КодВыдДок);
			Если ИндексПредставителя < 1 Тогда
				ДанныеДоверенности.УдостоверенияЛичности.Добавить(ДокументИП);
			КонецЕсли;
		КонецЕсли;
		
		ПредставительЯвляетсяСотрудником =
			ДанныеДоверенности.Свойство("ДоверительЮЛ_НаимОрг") И СтрокаПредставителя.Свойство("ПредставительЮЛ_НаимОрг")
			И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_НаимОрг)
			И ДанныеДоверенности.ДоверительЮЛ_НаимОрг = СтрокаПредставителя.ПредставительЮЛ_НаимОрг
			И ДанныеДоверенности.Свойство("ДоверительЮЛ_ИНН") И СтрокаПредставителя.Свойство("ПредставительЮЛ_ИНН")
			И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН)
			И ДанныеДоверенности.ДоверительЮЛ_ИНН = СтрокаПредставителя.ПредставительЮЛ_ИНН
			И ДанныеДоверенности.Свойство("ДоверительЮЛ_КПП") И СтрокаПредставителя.Свойство("ПредставительЮЛ_КПП")
			И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_КПП)
			И ДанныеДоверенности.ДоверительЮЛ_КПП = СтрокаПредставителя.ПредставительЮЛ_КПП
			И ?(ДанныеДоверенности.Свойство("ДоверительЮЛ_ОГРН"), ДанныеДоверенности.ДоверительЮЛ_ОГРН, "") =
			?(ДанныеДоверенности.Свойство("ПредставительЮЛ_ОГРН"), ДанныеДоверенности.ПредставительЮЛ_ОГРН, "");
		
		Представитель = Неопределено;
		Если НЕ ПредставительЯвляетсяСотрудником И СтрокаПредставителя.Свойство("ПредставительЮЛ_ИНН")
			И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН) Тогда
			
			Представитель = ПодыскатьИнформациюВладельца("Контрагенты,Организации",
								СтрокаПредставителя.ПредставительЮЛ_ИНН, СтрокаПредставителя.ПредставительЮЛ_КПП);
		КонецЕсли;
		
		Если НЕ СтрокаПредставителя.Свойство("ПредставительЮЛ_ИНН")
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН)
			И НЕ ЗначениеЗаполнено(Представитель) И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ОГРН) Тогда
			
			Представитель = ПодыскатьИнформациюВладельца("Контрагенты", СтрокаПредставителя.ПредставительФЛ_ИНН);
		КонецЕсли;
		
		Если НЕ СтрокаПредставителя.Свойство("ПредставительЮЛ_ИНН")
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН) ИЛИ ПредставительЯвляетсяСотрудником)
			И НЕ ЗначениеЗаполнено(Представитель) Тогда
			
			Представитель = ПодыскатьИнформациюВладельца("ФизическиеЛица", СтрокаПредставителя.ПредставительФЛ_ИНН);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Представитель) И СтрокаПредставителя.Свойство("ПредставительЮЛ_НаимОрг")
			И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_НаимОрг) Тогда
			
			Представитель = СтрокаПредставителя.ПредставительЮЛ_НаимОрг;
		КонецЕсли;
		
		Представитель_ЮридическоеЛицо = СтрокаПредставителя.Свойство("ПредставительЮЛ_ИНН")
			И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН);
		
		СтрокаПредставителя.Вставить("Представитель", Представитель);
		Если ИндексПредставителя < 1 Тогда
			ДанныеДоверенности.Вставить("Представитель", Представитель);
		КонецЕсли;
		
		Если ЭтоВерсия5_02 Тогда
			СтрокаПредставителя.Вставить("ПредставительЯвляетсяСотрудником", ПредставительЯвляетсяСотрудником);
			СтрокаПредставителя.Вставить("Идентификатор", Новый УникальныйИдентификатор);
			Если ИндексПредставителя >= 1 Тогда
				ДанныеДоверенности.Представители.Добавить(СтрокаПредставителя);
			КонецЕсли;
			ИндексПредставителя = ИндексПредставителя + 1;
			
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СведенияПодписанта = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Подписант");
	Если СведенияПодписанта.Количество() = 1 Тогда
		ЭлементВыборки = СведенияПодписанта[0];
		
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Фамилия"));
		НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Имя"));
		НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Отчество"));
		Если ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ);
		Иначе
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительРук);
			Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" И ДанныеДоверенности.Свойство("ЛицоБезДовФЛ")
				И НЕ ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ) И (ЗначениеЗаполнено(НоваяСтрока.Фамилия)
				ИЛИ ЗначениеЗаполнено(НоваяСтрока.Имя) ИЛИ ЗначениеЗаполнено(НоваяСтрока.Отчество)) Тогда
				ДанныеДоверенности.ЛицоБезДовФЛ = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
		ДанныеДоверенности.ФИО.Добавить(НоваяСтрока);
	КонецЕсли;
	
	ОрганизацияДоверенности = НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(), РеквизитыПоискаОрганизации);
	ДанныеДоверенности.Вставить("Доверитель", ОрганизацияДоверенности);
	Если НЕ ЗначениеЗаполнено(ДанныеДоверенности.Доверитель) И ДанныеДоверенности.Свойство("ДоверительЮЛ_НаимОрг")
		И ЗначениеЗаполнено(ДанныеДоверенности.ДоверительЮЛ_НаимОрг) Тогда
		ДанныеДоверенности.Доверитель = ДанныеДоверенности.ДоверительЮЛ_НаимОрг;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияДоверенности) И ЗначениеЗаполнено(РеквизитыПоискаОрганизации["КПП"]) Тогда
		РеквизитыПоискаОрганизации.Удалить("КПП");
		ОрганизацияДоверенности = НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(), РеквизитыПоискаОрганизации);
		Если НЕ ЗначениеЗаполнено(ОрганизацияДоверенности) И ЗначениеЗаполнено(РеквизитыПоискаОрганизации["ИНН"]) Тогда
			РеквизитыПоискаОрганизации.Удалить("ИНН");
			ОрганизацияДоверенности = НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(), РеквизитыПоискаОрганизации);
		КонецЕсли;
	КонецЕсли;
	ДанныеДоверенности.Вставить("Организация", ОрганизацияДоверенности);
	ДанныеДоверенности.Вставить("Владелец", ОрганизацияДоверенности);
	
	Если ЭтоПередоверие И ЗначениеЗаполнено(ДанныеДоверенности.Организация)
		И ЗначениеЗаполнено(ДанныеДоверенности.НомерРодительскойДоверенности) Тогда
		
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("НомерДоверенности", ДанныеДоверенности.НомерРодительскойДоверенности);
		Если ТипЗнч(ДанныеДоверенности.Организация) = Тип("СправочникСсылка.Организации") Тогда
			СтрокаПоиска.Вставить("Организация", ДанныеДоверенности.Организация);
		КонецЕсли;
		РодительскаяДоверенность = НайтиЭлементИБ(Справочники.МашиночитаемыеДоверенностиРаспределенныйРеестр.ПустаяСсылка(),
			СтрокаПоиска);
		ДанныеДоверенности.Вставить("РодительскаяДоверенность", РодительскаяДоверенность);
		
	ИначеЕсли НЕ ЭтоВерсия5_02 И ЗначениеЗаполнено(ДанныеДоверенности.Организация)
		И ЗначениеЗаполнено(ДанныеДоверенности.НомерРодительскойДоверенности) Тогда
		
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("НомерДоверенности", ДанныеДоверенности.НомерРодительскойДоверенности);
		Если ТипЗнч(ДанныеДоверенности.Организация) = Тип("СправочникСсылка.Организации") Тогда
			СтрокаПоиска.Вставить("Организация", ДанныеДоверенности.Организация);
		КонецЕсли;
		РодительскаяДоверенность = НайтиЭлементИБ(Справочники.МашиночитаемыеДоверенностиРаспределенныйРеестр.ПустаяСсылка(),
			СтрокаПоиска);
		ДанныеДоверенности.Вставить("РодительскаяДоверенность", РодительскаяДоверенность);
	КонецЕсли;
	
	Если ЭтоПередоверие И ЗначениеЗаполнено(ДанныеДоверенности.Организация)
		И ЗначениеЗаполнено(ДанныеДоверенности.НомерКорневойДоверенности) Тогда
		
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("РегистрационныйНомерДоверенности", ДанныеДоверенности.НомерКорневойДоверенности);
		Если ТипЗнч(ДанныеДоверенности.Организация) = Тип("СправочникСсылка.Организации") Тогда
			СтрокаПоиска.Вставить("Организация", ДанныеДоверенности.Организация);
		КонецЕсли;
		КорневаяДоверенность = НайтиЭлементИБ(Справочники.МашиночитаемыеДоверенностиРаспределенныйРеестр.ПустаяСсылка(),
			СтрокаПоиска);
		ДанныеДоверенности.Вставить("КорневаяДоверенность", КорневаяДоверенность);
	КонецЕсли;
	
	Возврат ДанныеДоверенности;
	
КонецФункции

Функция ДанныеИзФайлаОбменаДляОтмены(ВходящиеДанные, ОбновлятьСуществующийИлиСсылка = Ложь, Подпись = Неопределено) Экспорт
	
	ДанныеЗаявления = Новый Структура;
	ДанныеЗаявления.Вставить("ЭтоОтзыв", Истина);
	
	ЭтоФайл = Ложь;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДокументDOM") Тогда
		ДокументОбработки = ВходящиеДанные;
	Иначе
		ТекущиеДанные = ВходящиеДанные;
		Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
			ТекущиеДанные = ВходящиеДанные;
		ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
			ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
		ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
			ЭтоФайл = Истина;
		КонецЕсли;
		ДокументОбработки = ПодготовитьДокументDOM(ТекущиеДанные);
	КонецЕсли;
	
	Если ЭтоФайл Тогда
		ТекущиеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	ДанныеЗаявления.Вставить("ДанныеВыгрузки", ТекущиеДанные);
	
	ТекущиеДанные = Подпись;
	Если Подпись <> Неопределено Тогда
		Если ТипЗнч(Подпись) = Тип("ДвоичныеДанные") Тогда
			ТекущиеДанные = Подпись;
		ИначеЕсли ЭтоАдресВременногоХранилища(Подпись) Тогда
			ТекущиеДанные = ПолучитьИзВременногоХранилища(Подпись);
		ИначеЕсли ТипЗнч(Подпись) = Тип("Строка") И НайтиФайлы(Подпись).Количество() > 0 Тогда
			ТекущиеДанные = Новый ДвоичныеДанные(Подпись);
		КонецЕсли;
	КонецЕсли;
	ДанныеЗаявления.Вставить("ДанныеПодписи", ТекущиеДанные);
	
	СведенияФайла = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл");
	Если СведенияФайла.Количество() = 1 Тогда
		ЭлементВыборки = СведенияФайла[0];
		ИмяФайлаВыгрузки = ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИдФайл");
		Если ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
			ДанныеЗаявления.Вставить("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки + ".xml");
		КонецЕсли;
	КонецЕсли;
	
	СведенияДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвЗаяв");
	Если СведенияДоверенности.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверенности[0];
		ДанныеЗаявления.Вставить("НомерДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НомДовер"));
		ДанныеЗаявления.Вставить("УникальныйИдентификаторДоверенностиОтзыва", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИдДовер"));
		ДанныеЗаявления.Вставить("ДатаВыдачи", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаНач", '00010101'));
		ДанныеЗаявления.Вставить("ДатаОтзыва", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаОтз", '00010101'));
		ДанныеЗаявления.Вставить("СведенияОбИнформационнойСистеме", ПолучитьЗначениеДокумента(ЭлементВыборки, "СведСистОтм", ""));
		ДанныеЗаявления.Вставить("ПричинаОтзыва", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ПричОтз", ""));
		ДанныеЗаявления.Вставить("КодНалоговогоОрганаПредставления", ПолучитьЗначениеДокумента(ДокументОбработки, "//Файл/Документ/@КодНО", ""));
	КонецЕсли;
	
	ДанныеЗаявления.Вставить("ФИО", Новый Массив);
	ДанныеЗаявления.Вставить("УдостоверенияЛичности", Новый Массив);
	ДанныеЗаявления.Вставить("ТипОрганизации", "");
	СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/НПЮЛ");
	СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/НПФЛ");
	СведенияДоверителяИО = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/ИО");
	
	Если СведенияДоверителяЮЛ.Количество() = 1 Тогда
		ДанныеЗаявления.ТипОрганизации = "ЮЛ";
		СведенияДоверителя = СведенияДоверителяЮЛ;
	ИначеЕсли СведенияДоверителяФЛ.Количество() = 1 Тогда
		ДанныеЗаявления.ТипОрганизации = "ФЛ";
		СведенияДоверителя = СведенияДоверителяФЛ;
	Иначе
		ДанныеЗаявления.ТипОрганизации = "ИО";
		СведенияДоверителя = СведенияДоверителяИО;
	КонецЕсли;
	
	РеквизитыПоискаОрганизации = Новый Соответствие;
	
	Если СведенияДоверителя.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверителя[0];
		Если ДанныеЗаявления.ТипОрганизации = "ЮЛ" Тогда
			ДанныеЗаявления.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимОрг"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРН"));
			
			ДанныеЗаявления.Вставить("ЛицоБезДовФЛ_Должность", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОрг/@Должность"));
			ДанныеЗаявления.Вставить("ДолжностьРуководителяДоверителяОтзыва",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОрг/@Должность"));
			
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОрг/@НаимОрг"));
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОрг/@ИННЮЛ"));
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОрг/@КПП"));
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОрг/@ОГРН")); 
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеЗаявления.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеЗаявления.ДоверительЮЛ_КПП);
			
		ИначеЕсли ДанныеЗаявления.ТипОрганизации = "ИО" Тогда
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
			ДанныеЗаявления.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимИО"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			
			ПризнакГражданства = ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ПрГражд");
			Если ПризнакГражданства = 1 Тогда
				ДанныеЗаявления.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.Россия);
			Иначе
				ДанныеЗаявления.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			КонецЕсли;
			ИННФЛ = ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ИННФЛ");
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеЗаявления.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеЗаявления.ДоверительЮЛ_КПП);
			
		ИначеЕсли ДанныеЗаявления.ТипОрганизации = "ФЛ" Тогда
			ДанныеЗаявления.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННФЛ"));
			ДанныеЗаявления.Вставить("ДоверительФЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРНИП"));
			ДанныеЗаявления.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаРожд", '00010101'));
			ДанныеЗаявления.Вставить("ДатаРожденияДоверителяОтзыва",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаРожд", '00010101'));
			
			ДокументИП = Новый Структура;
			СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@СерНомДок"));
			ДокументИП.Вставить("СерДок", СерияНомер.Серия);
			ДокументИП.Вставить("НомДок", СерияНомер.Номер);
			ДокументИП.Вставить("ДатаДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@ДатаДок", '00010101'));
			ДокументИП.Вставить("ВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@ВыдДок"));
			ДокументИП.Вставить("КодВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@КодВыдДок"));
			ДокументИП.Вставить("ВидДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@КодВидДок", Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
			ДокументИП.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ);
			ДанныеЗаявления.УдостоверенияЛичности.Добавить(ДокументИП);
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеЗаявления.ДоверительФЛ_ИНН);
		КонецЕсли;
		
	КонецЕсли;
	
	СведенияПодписанта = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Подписант");
	Если СведенияПодписанта.Количество() = 1 Тогда
		ЭлементВыборки = СведенияПодписанта[0];
		
		НоваяСтрока = Новый Структура;
		
		ДанныеЗаявления.Вставить("ЛицоБезДовФЛ", "");
		ДанныеЗаявления.Вставить("ТелефонПодписантаОтзыва", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Тлф"));
		НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(ЭлементВыборки, "ФИО/@Фамилия"));
		НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(ЭлементВыборки, "ФИО/@Имя"));
		НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(ЭлементВыборки, "ФИО/@Отчество"));
		Если ДанныеЗаявления.ТипОрганизации = "ФЛ" Тогда
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ);
		Иначе
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительРук);
			Если ДанныеЗаявления.ТипОрганизации = "ЮЛ" И ДанныеЗаявления.Свойство("ЛицоБезДовФЛ")
				И НЕ ЗначениеЗаполнено(ДанныеЗаявления.ЛицоБезДовФЛ) И (ЗначениеЗаполнено(НоваяСтрока.Фамилия)
				ИЛИ ЗначениеЗаполнено(НоваяСтрока.Имя) ИЛИ ЗначениеЗаполнено(НоваяСтрока.Отчество)) Тогда
				ДанныеЗаявления.ЛицоБезДовФЛ = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеЗаявления.ФИО.Добавить(НоваяСтрока);
	КонецЕсли;
	
	ДанныеЗаявления.Вставить("Доверитель",
		НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(), РеквизитыПоискаОрганизации));
	Если НЕ ЗначениеЗаполнено(ДанныеЗаявления.Доверитель) И ДанныеЗаявления.Свойство("ДоверительЮЛ_НаимОрг")
		И ЗначениеЗаполнено(ДанныеЗаявления.ДоверительЮЛ_НаимОрг) Тогда
		ДанныеЗаявления.Доверитель = ДанныеЗаявления.ДоверительЮЛ_НаимОрг;
	КонецЕсли;
	
	ДанныеЗаявления.Вставить("Организация", ?(Подпись = Неопределено
		ИЛИ НЕ ДанныеЗаявления.Свойство("Представитель")
		ИЛИ ТипЗнч(ДанныеЗаявления.Представитель) <> Тип("СправочникСсылка.Организации"),
		ДанныеЗаявления.Доверитель, ДанныеЗаявления.Представитель));
	ДанныеЗаявления.Вставить("Владелец", ?(Подпись = Неопределено
		ИЛИ НЕ ДанныеЗаявления.Свойство("Представитель")
		ИЛИ ТипЗнч(ДанныеЗаявления.Представитель) <> Тип("СправочникСсылка.Организации"),
		ДанныеЗаявления.Доверитель, ДанныеЗаявления.Представитель));
	
	Возврат ДанныеЗаявления;
	
КонецФункции

Функция ДанныеМЧДЕдиногоФормата(СправочникСсылка, Знач Реквизиты = "") Экспорт
	
	РезультатВыгрузки = ДокументооборотСКОВызовСервера.ВыгрузитьМЧДЕдиногоФормата(СправочникСсылка);
	Если РезультатВыгрузки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДанныеВыгрузки = ПолучитьИзВременногоХранилища(РезультатВыгрузки[0].Адрес);
	
	ДанныеСправочника = Новый Структура;
	ДанныеСправочника.Вставить("ВерсияФормата", 					"5.02"); // аналог
	ДанныеСправочника.Вставить("ДляНалоговыхОрганов", 				Ложь);
	ДанныеСправочника.Вставить("ЭтоПередоверие", 					Ложь);
	ДанныеСправочника.Вставить("Номер", 							"");
	ДанныеСправочника.Вставить("НомерДоверенности", 				""); // дубль поля "Номер"
	ДанныеСправочника.Вставить("ДатаВыдачи", 						'00010101');
	ДанныеСправочника.Вставить("ДатаОкончания", 					'00010101');
	ДанныеСправочника.Вставить("ПередовериеВозможно", 				Ложь);
	ДанныеСправочника.Вставить("РегистрационныйНомерДоверенности", 	"");
	ДанныеСправочника.Вставить("РегистрационныйНомерРНД", 			"");
	ДанныеСправочника.Вставить("КодНО", 							"");
	ДанныеСправочника.Вставить("КодыНО", 							Новый Массив);
	ДанныеСправочника.Вставить("Доверитель", 						Неопределено);
	ДанныеСправочника.Вставить("ДоверительЮЛ_НаимОрг", 				"");
	ДанныеСправочника.Вставить("ДоверительЮЛ_ИНН", 					"");
	ДанныеСправочника.Вставить("ДоверительЮЛ_КПП", 					"");
	ДанныеСправочника.Вставить("ДоверительЮЛ_ОГРН", 				"");
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ", 						Неопределено);
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_ИНН", 					"");
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_ОГРН",					"");
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_СНИЛС", 				"");
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_Гражданство", 			Справочники.СтраныМира.ПустаяСсылка());
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_ДатаРождения", 		'00010101');
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_Фамилия", 				"");
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_Имя", 					"");
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_Отчество", 			"");
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_ВидДок", 				Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка());
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_СерДок", 				"");
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_НомДок", 				"");
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_ДатаДок", 				'00010101');
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_ВыдДок", 				"");
	ДанныеСправочника.Вставить("ЛицоБезДовФЛ_КодВыдДок", 			"");
	ДанныеСправочника.Вставить("ДоверительФЛ_ИНН", 					"");
	ДанныеСправочника.Вставить("ДоверительФЛ_ОГРН", 				"");
	ДанныеСправочника.Вставить("ДоверительФЛ_СНИЛС", 				"");
	ДанныеСправочника.Вставить("ДоверительФЛ_Гражданство", 			Справочники.СтраныМира.ПустаяСсылка());
	ДанныеСправочника.Вставить("ДоверительФЛ_ДатаРождения", 		'00010101');
	ДанныеСправочника.Вставить("Представитель", 					Неопределено);
	ДанныеСправочника.Вставить("ПредставительЮЛ_НаимОрг", 			"");
	ДанныеСправочника.Вставить("ПредставительЮЛ_ИНН", 				"");
	ДанныеСправочника.Вставить("ПредставительЮЛ_КПП", 				"");
	ДанныеСправочника.Вставить("ПредставительЮЛ_ОГРН", 				"");
	ДанныеСправочника.Вставить("ПредставительФЛ_Фамилия", 			"");
	ДанныеСправочника.Вставить("ПредставительФЛ_Имя", 				"");
	ДанныеСправочника.Вставить("ПредставительФЛ_Отчество", 			"");
	ДанныеСправочника.Вставить("ПредставительФЛ_ИНН", 				"");
	ДанныеСправочника.Вставить("ПредставительФЛ_ОГРН", 				"");
	ДанныеСправочника.Вставить("ПредставительФЛ_СНИЛС", 			"");
	ДанныеСправочника.Вставить("ПредставительФЛ_Гражданство", 		Справочники.СтраныМира.ПустаяСсылка());
	ДанныеСправочника.Вставить("ПредставительФЛ_ДатаРождения", 		'00010101');
	ДанныеСправочника.Вставить("ПредставительФЛ_ВидДок", 			Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка());
	ДанныеСправочника.Вставить("ПредставительФЛ_СерДок", 			"");
	ДанныеСправочника.Вставить("ПредставительФЛ_НомДок", 			"");
	ДанныеСправочника.Вставить("ПредставительФЛ_ДатаДок", 			'00010101');
	ДанныеСправочника.Вставить("ПредставительФЛ_ВыдДок", 			"");
	ДанныеСправочника.Вставить("ПредставительФЛ_КодВыдДок", 		"");
	ДанныеСправочника.Вставить("ПредставительЯвляетсяСотрудником", 	Ложь);
	ДанныеСправочника.Вставить("КоличествоПредставителей", 			0);
	ДанныеСправочника.Вставить("Представители", 					Новый Массив);
	ДанныеСправочника.Вставить("ПолномочияПредставителя", 			Новый Массив);
	
	ДокументОбработки = ПодготовитьДокументDOM(ДанныеВыгрузки);
	СведенияОбУзлахДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Доверенность", Ложь);
	Если СведенияОбУзлахДоверенности.Количество() = 1 Тогда
		СведенияОДоверенности = СведенияОбУзлахДоверенности[0];
		ПрЭлФорм = ПолучитьЗначениеДокумента(СведенияОДоверенности, "@ПрЭлФорм", "");
		ДанныеСправочника.ДляНалоговыхОрганов = (Сред(ПрЭлФорм, 4, 1) = "1");
	КонецЕсли;
	
	СведенияУзловДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Доверенность/Документ/Довер/СвДов",
		Ложь);
	Если СведенияУзловДоверенности.Количество() = 0 Тогда
		СведенияУзловДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
			"/Доверенность/Документ/Передов/СвПереДовер", Ложь);
		ДанныеСправочника.ЭтоПередоверие = (СведенияУзловДоверенности.Количество() <> 0);
	КонецЕсли;
	
	Если СведенияУзловДоверенности.Количество() = 1 Тогда
		СведенияДоверенности = СведенияУзловДоверенности[0];
		ДанныеСправочника.Номер = ПолучитьЗначениеДокумента(СведенияДоверенности, "@ВнНомДовер");
		ДанныеСправочника.НомерДоверенности = ДанныеСправочника.Номер;
		ДанныеСправочника.ДатаВыдачи = ПолучитьЗначениеДокумента(СведенияДоверенности, "@ДатаВыдДовер", '00010101');
		ДанныеСправочника.ДатаОкончания = ПолучитьЗначениеДокумента(СведенияДоверенности, "@СрокДейст", '00010101');
		ДанныеСправочника.ПередовериеВозможно = (ПолучитьЗначениеДокумента(СведенияДоверенности, "@ПрПередов") = "1");
		ДанныеСправочника.РегистрационныйНомерДоверенности = ПолучитьЗначениеДокумента(СведенияДоверенности, "@НомДовер");
		ДанныеСправочника.РегистрационныйНомерРНД = ПолучитьЗначениеДокумента(СведенияДоверенности, "@НомРНДДовер", "");
		ДанныеСправочника.КодНО = ПолучитьЗначениеДокумента(СведенияДоверенности, "@КодНО", "");
		
		СписокНО = ПолучитьВыборкуЭлементовDOM(СведенияДоверенности, "КодНОДейст", Ложь);
		Для каждого СтрокаМассива Из СписокНО Цикл
			СвойстваКодаНО = Новый Структура("КодНО", СтрокаМассива.ТекстовоеСодержимое);
			ДанныеСправочника.КодыНО.Добавить(СвойстваКодаНО);
		КонецЦикла;
	КонецЕсли;
	
	ТипДоверителя = "";
	СведенияУзловДоверителя = Неопределено;
	Если ДанныеСправочника.ЭтоПередоверие Тогда
		СведенияОДоверителях = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Доверенность/Документ/Передов/СвПередПолн",
			Ложь);
	Иначе
		СведенияОДоверителях = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Доверенность/Документ/Довер/СвДоверит",
			Ложь);
	КонецЕсли;
	Если СведенияОДоверителях.Количество() >= 1 Тогда
		СведенияОДоверителе = СведенияОДоверителях[0];
		Если ДанныеСправочника.ЭтоПередоверие Тогда
			ТипПерПолн = ПолучитьЗначениеДокумента(СведенияОДоверителе, "@ТипПерПолн");
			Если ТипПерПолн = "1" Тогда
				ТипДоверителя = "ЮЛ";
				СведенияУзловДоверителя = ПолучитьВыборкуЭлементовDOM(СведенияОДоверителе, "ПередПолн/РосОргПерПолн", Ложь);
			ИначеЕсли ТипПерПолн = "2" Тогда
				ТипДоверителя = "ИП";
				СведенияУзловДоверителя = ПолучитьВыборкуЭлементовDOM(СведенияОДоверителе, "ПередПолн/ИППерПолн", Ложь);
			ИначеЕсли ТипПерПолн = "3" Тогда
				ТипДоверителя = "ФЛ";
				СведенияУзловДоверителя = ПолучитьВыборкуЭлементовDOM(СведенияОДоверителе, "ПередПолн/ФЛПерПолн", Ложь);
			ИначеЕсли ТипПерПолн = "4" Тогда
				ТипДоверителя = "ФИ";
				СведенияУзловДоверителя = ПолучитьВыборкуЭлементовDOM(СведенияОДоверителе, "ПередПолн/ФилПерПолн", Ложь);
			ИначеЕсли ТипПерПолн = "5" Тогда
				ТипДоверителя = "ИО";
				СведенияУзловДоверителя = ПолучитьВыборкуЭлементовDOM(СведенияОДоверителе, "ПередПолн/ИнПерПолн", Ложь);
			КонецЕсли;
			
		Иначе
			ТипДоверит = ПолучитьЗначениеДокумента(СведенияОДоверителе, "@ТипДоверит");
			Если ТипДоверит = "1" Тогда
				ТипДоверителя = "ЮЛ";
				СведенияУзловДоверителя = ПолучитьВыборкуЭлементовDOM(СведенияОДоверителе, "Доверит/РосОргДовер", Ложь);
			ИначеЕсли ТипДоверит = "2" Тогда
				ТипДоверителя = "ИО";
				СведенияУзловДоверителя = ПолучитьВыборкуЭлементовDOM(СведенияОДоверителе, "Доверит/ИнОргДовер", Ложь);
			ИначеЕсли ТипДоверит = "3" Тогда
				ТипДоверителя = "ИП";
				СведенияУзловДоверителя = ПолучитьВыборкуЭлементовDOM(СведенияОДоверителе, "Доверит/ИПДовер", Ложь);
			ИначеЕсли ТипДоверит = "4" Тогда
				ТипДоверителя = "ФЛ";
				СведенияУзловДоверителя = ПолучитьВыборкуЭлементовDOM(СведенияОДоверителе, "Доверит/ФЛДовер", Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// информация о доверителе
	Если СведенияУзловДоверителя <> Неопределено И СведенияУзловДоверителя.Количество() = 1 Тогда
		СведенияДоверителя = СведенияУзловДоверителя[0];
		
		Если ТипДоверителя = "ЮЛ" Тогда
			СведенияРоссийскихОрганизаций = ПолучитьВыборкуЭлементовDOM(СведенияДоверителя, "СвРосОрг", Ложь);
			Если СведенияРоссийскихОрганизаций.Количество() = 1 Тогда
				СведенияРоссийскойОрганизации = СведенияРоссийскихОрганизаций[0];
				ДанныеСправочника.ДоверительЮЛ_НаимОрг = ПолучитьЗначениеДокумента(СведенияРоссийскойОрганизации, "@НаимОрг");
				ДанныеСправочника.ДоверительЮЛ_ИНН = ПолучитьЗначениеДокумента(СведенияРоссийскойОрганизации, "@ИННЮЛ", "");
				ДанныеСправочника.ДоверительЮЛ_КПП = ПолучитьЗначениеДокумента(СведенияРоссийскойОрганизации, "@КПП");
				ДанныеСправочника.ДоверительЮЛ_ОГРН = ПолучитьЗначениеДокумента(СведенияРоссийскойОрганизации, "@ОГРН", "");
			КонецЕсли;
			
			Если ПолучитьЗначениеДокумента(СведенияДоверителя, "@ЕИОФЛ") = "1" Тогда
				ЛицаБезДоверенности = ПолучитьВыборкуЭлементовDOM(СведенияДоверителя, "ЛицоБезДов", Ложь);
				Если ЛицаБезДоверенности.Количество() >= 1 Тогда
					ЛицоБезДоверенности = ЛицаБезДоверенности[0];
					СведенияЛицаБезДоверенностиУзловФЛ = ПолучитьВыборкуЭлементовDOM(ЛицоБезДоверенности, "СвФЛ", Ложь);
					Если СведенияЛицаБезДоверенностиУзловФЛ.Количество() = 1 Тогда
						СведенияЛицаБезДоверенностиФЛ = СведенияЛицаБезДоверенностиУзловФЛ[0];
						ДанныеСправочника.ЛицоБезДовФЛ_ИНН = ПолучитьЗначениеДокумента(СведенияЛицаБезДоверенностиФЛ, "@ИННФЛ", "");
						ДанныеСправочника.ЛицоБезДовФЛ_СНИЛС = ПолучитьЗначениеДокумента(СведенияЛицаБезДоверенностиФЛ, "@СНИЛС", "");
						СведенияУзловФЛ = ПолучитьВыборкуЭлементовDOM(СведенияЛицаБезДоверенностиФЛ, "СведФЛ", Ложь);
						Если СведенияУзловФЛ.Количество() = 1 Тогда
							СведенияФЛ = СведенияУзловФЛ[0];
							ПризнакГражданства = "";
							Если ДанныеСправочника.ДляНалоговыхОрганов Тогда
								ПризнакГражданства = ПолучитьЗначениеДокумента(СведенияФЛ, "@ПрГражд");
							КонецЕсли;
							Если ПризнакГражданства = "1" Тогда
								ДанныеСправочника.ЛицоБезДовФЛ_Гражданство = Справочники.СтраныМира.Россия;
							ИначеЕсли ПризнакГражданства = "2" Тогда
								ДанныеСправочника.ЛицоБезДовФЛ_Гражданство = ПолучитьЗначениеДокумента(СведенияФЛ, "@Гражданство",
									Справочники.СтраныМира.ПустаяСсылка());
							КонецЕсли;
							ДанныеСправочника.ЛицоБезДовФЛ_ДатаРождения = ПолучитьЗначениеДокумента(СведенияФЛ, "@ДатаРожд", '00010101');
							СведенияУзловФИО = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "ФИО", Ложь);
							Если СведенияУзловФИО.Количество() = 1 Тогда
								СведенияФИО = СведенияУзловФИО[0];
								ДанныеСправочника.ЛицоБезДовФЛ_Фамилия = ПолучитьЗначениеДокумента(СведенияФИО, "@Фамилия");
								ДанныеСправочника.ЛицоБезДовФЛ_Имя = ПолучитьЗначениеДокумента(СведенияФИО, "@Имя");
								ДанныеСправочника.ЛицоБезДовФЛ_Отчество = ПолучитьЗначениеДокумента(СведенияФИО, "@Отчество", "");
							КонецЕсли;
							
							УдостоверенияЛичности = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "УдЛичнФЛ", Ложь);
							Если УдостоверенияЛичности.Количество() = 1 Тогда
								УдостоверениеЛичности = УдостоверенияЛичности[0];
								ДанныеСправочника.ЛицоБезДовФЛ_ВидДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВидДок",
									Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка());
								СерияНомер = ПодготовитьПредставлениеСерияНомер(
									ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@СерНомДок"), ДанныеСправочника.ЛицоБезДовФЛ_ВидДок);
								ДанныеСправочника.ЛицоБезДовФЛ_СерДок = СерияНомер.Серия;
								ДанныеСправочника.ЛицоБезДовФЛ_НомДок = СерияНомер.Номер;
								ДанныеСправочника.ЛицоБезДовФЛ_ДатаДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ДатаДок",
									'00010101');
								ДанныеСправочника.ЛицоБезДовФЛ_ВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ВыдДок", "");
								ДанныеСправочника.ЛицоБезДовФЛ_КодВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВыдДок", "");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипДоверителя = "ИО" Тогда
			СведенияИностранныхОрганизаций = ПолучитьВыборкуЭлементовDOM(СведенияДоверителя, "СвИнОрг", Ложь);
			Если СведенияИностранныхОрганизаций.Количество() = 1 Тогда
				СведенияИностраннойОрганизации = СведенияИностранныхОрганизаций[0];
				ДанныеСправочника.ДоверительЮЛ_НаимОрг = ПолучитьЗначениеДокумента(СведенияИностраннойОрганизации, "@НаимИО");
				ДанныеСправочника.ДоверительЮЛ_ИНН = ПолучитьЗначениеДокумента(СведенияИностраннойОрганизации, "@ИННЮЛ", "");
				ДанныеСправочника.ДоверительЮЛ_КПП = ПолучитьЗначениеДокумента(СведенияИностраннойОрганизации, "@КПП", "");
			КонецЕсли;
			
			СведенияОРуководителях = ПолучитьВыборкуЭлементовDOM(СведенияДоверителя, "СвРукОП", Ложь);
			Если СведенияОРуководителях.Количество() >= 1 Тогда
				СведенияОРуководителе = СведенияОРуководителях[0];
				ДанныеСправочника.ДоверительФЛ_ИНН = ПолучитьЗначениеДокумента(СведенияОРуководителе, "@ИННФЛ", "");
				ДанныеСправочника.ДоверительФЛ_СНИЛС = ПолучитьЗначениеДокумента(СведенияОРуководителе, "@СНИЛС", "");
				СведенияУзловФЛ = ПолучитьВыборкуЭлементовDOM(СведенияОРуководителе, "СведФЛ", Ложь);
				Если СведенияУзловФЛ.Количество() = 1 Тогда
					СведенияФЛ = СведенияУзловФЛ[0];
					
					ПризнакГражданства = "";
					Если ДанныеСправочника.ДляНалоговыхОрганов Тогда
						ПризнакГражданства = ПолучитьЗначениеДокумента(СведенияФЛ, "@ПрГражд");
					КонецЕсли;
					Если ПризнакГражданства = "1" Тогда
						ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия;
					ИначеЕсли ПризнакГражданства = "2" Тогда
						ДанныеСправочника.ДоверительФЛ_Гражданство = ПолучитьЗначениеДокумента(СведенияФЛ, "@Гражданство",
							Справочники.СтраныМира.ПустаяСсылка());
					Иначе
						ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.ПустаяСсылка();
					КонецЕсли;
					ДанныеСправочника.ДоверительФЛ_ДатаРождения = ПолучитьЗначениеДокумента(СведенияФЛ, "@ДатаРожд", '00010101');
					СведенияУзловФИО = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "ФИО", Ложь);
					Если СведенияУзловФИО.Количество() = 1 Тогда
						СведенияФИО = СведенияУзловФИО[0];
						ДанныеСправочника.ЛицоБезДовФЛ_Фамилия = ПолучитьЗначениеДокумента(СведенияФИО, "@Фамилия");
						ДанныеСправочника.ЛицоБезДовФЛ_Имя = ПолучитьЗначениеДокумента(СведенияФИО, "@Имя");
						ДанныеСправочника.ЛицоБезДовФЛ_Отчество = ПолучитьЗначениеДокумента(СведенияФИО, "@Отчество", "");
					КонецЕсли;
					
					УдостоверенияЛичности = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "УдЛичнФЛ", Ложь);
					Если УдостоверенияЛичности.Количество() = 1 Тогда
						УдостоверениеЛичности = УдостоверенияЛичности[0];
						ДанныеСправочника.ЛицоБезДовФЛ_ВидДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВидДок",
							Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка());
						СерияНомер = ПодготовитьПредставлениеСерияНомер(
							ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@СерНомДок"), ДанныеСправочника.ЛицоБезДовФЛ_ВидДок);
						ДанныеСправочника.ЛицоБезДовФЛ_СерДок = СерияНомер.Серия;
						ДанныеСправочника.ЛицоБезДовФЛ_НомДок = СерияНомер.Номер;
						ДанныеСправочника.ЛицоБезДовФЛ_ДатаДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ДатаДок",
							'00010101');
						ДанныеСправочника.ЛицоБезДовФЛ_ВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ВыдДок", "");
						ДанныеСправочника.ЛицоБезДовФЛ_КодВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВыдДок", "");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипДоверителя = "ФИ" Тогда
			СведенияФилиалов = ПолучитьВыборкуЭлементовDOM(СведенияДоверителя, "СвФил", Ложь);
			Если СведенияФилиалов.Количество() = 1 Тогда
				СведенияФилиала = СведенияФилиалов[0];
				ДанныеСправочника.ДоверительЮЛ_НаимОрг = ПолучитьЗначениеДокумента(СведенияФилиала, "@НаимОрг");
				ДанныеСправочника.ДоверительЮЛ_ИНН = ПолучитьЗначениеДокумента(СведенияФилиала, "@ИННЮЛ", "");
				ДанныеСправочника.ДоверительЮЛ_КПП = ПолучитьЗначениеДокумента(СведенияФилиала, "@КПП");
				ДанныеСправочника.ДоверительЮЛ_ОГРН = ПолучитьЗначениеДокумента(СведенияФилиала, "@ОГРН", "");
			КонецЕсли;
			
			СведенияРуководителейФилиалов = ПолучитьВыборкуЭлементовDOM(СведенияДоверителя, "СвФил", Ложь);
			Если СведенияРуководителейФилиалов.Количество() = 1 Тогда
				СведенияРуководителяФилиала = СведенияРуководителейФилиалов[0];
				ДанныеСправочника.ДоверительФЛ_ИНН = ПолучитьЗначениеДокумента(СведенияРуководителяФилиала, "@ИННФЛ", "");
				ДанныеСправочника.ДоверительФЛ_СНИЛС = ПолучитьЗначениеДокумента(СведенияРуководителяФилиала, "@СНИЛС", "");
				СведенияУзловФЛ = ПолучитьВыборкуЭлементовDOM(СведенияРуководителяФилиала, "СведФЛ", Ложь);
				Если СведенияУзловФЛ.Количество() = 1 Тогда
					СведенияФЛ = СведенияУзловФЛ[0];
					ПризнакГражданства = "";
					Если ДанныеСправочника.ДляНалоговыхОрганов Тогда
						ПризнакГражданства = ПолучитьЗначениеДокумента(СведенияФЛ, "@ПрГражд");
					КонецЕсли;
					Если ПризнакГражданства = "1" Тогда
						ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия;
					ИначеЕсли ПризнакГражданства = "2" Тогда
						ДанныеСправочника.ДоверительФЛ_Гражданство = ПолучитьЗначениеДокумента(СведенияФЛ, "@Гражданство",
							Справочники.СтраныМира.ПустаяСсылка());
					Иначе
						ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.ПустаяСсылка();
					КонецЕсли;
					ДанныеСправочника.ДоверительФЛ_ДатаРождения = ПолучитьЗначениеДокумента(СведенияФЛ, "@ДатаРожд",
						'00010101');
					СведенияУзловФИО = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "ФИО", Ложь);
					Если СведенияУзловФИО.Количество() = 1 Тогда
						СведенияФИО = СведенияУзловФИО[0];
						ДанныеСправочника.ЛицоБезДовФЛ_Фамилия = ПолучитьЗначениеДокумента(СведенияФИО, "@Фамилия");
						ДанныеСправочника.ЛицоБезДовФЛ_Имя = ПолучитьЗначениеДокумента(СведенияФИО, "@Имя");
						ДанныеСправочника.ЛицоБезДовФЛ_Отчество = ПолучитьЗначениеДокумента(СведенияФИО, "@Отчество", "");
					КонецЕсли;
					
					УдостоверенияЛичности = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "УдЛичнФЛ", Ложь);
					Если УдостоверенияЛичности.Количество() = 1 Тогда
						УдостоверениеЛичности = УдостоверенияЛичности[0];
						ДанныеСправочника.ЛицоБезДовФЛ_ВидДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВидДок",
							Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка());
						СерияНомер = ПодготовитьПредставлениеСерияНомер(
							ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@СерНомДок"), ДанныеСправочника.ЛицоБезДовФЛ_ВидДок);
						ДанныеСправочника.ЛицоБезДовФЛ_СерДок = СерияНомер.Серия;
						ДанныеСправочника.ЛицоБезДовФЛ_НомДок = СерияНомер.Номер;
						ДанныеСправочника.ЛицоБезДовФЛ_ДатаДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ДатаДок",
							'00010101');
						ДанныеСправочника.ЛицоБезДовФЛ_ВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ВыдДок", "");
						ДанныеСправочника.ЛицоБезДовФЛ_КодВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВыдДок", "");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипДоверителя = "ИП" Тогда
			ДанныеСправочника.ДоверительФЛ_ИНН = ПолучитьЗначениеДокумента(СведенияДоверителя, "@ИННФЛ");
			ДанныеСправочника.ДоверительФЛ_СНИЛС = ПолучитьЗначениеДокумента(СведенияДоверителя, "@СНИЛС");
			ДанныеСправочника.ДоверительФЛ_ОГРН = ПолучитьЗначениеДокумента(СведенияДоверителя, "@ОГРНИП");
			
			СведенияУзловФЛ = ПолучитьВыборкуЭлементовDOM(СведенияДоверителя, "СведФЛ", Ложь);
			Если СведенияУзловФЛ.Количество() = 1 Тогда
				СведенияФЛ = СведенияУзловФЛ[0];
				ПризнакГражданства = "";
				Если ДанныеСправочника.ДляНалоговыхОрганов Тогда
					ПризнакГражданства = ПолучитьЗначениеДокумента(СведенияФЛ, "@ПрГражд");
				КонецЕсли;
				Если ПризнакГражданства = "1" Тогда
					ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия;
				ИначеЕсли ПризнакГражданства = "2" Тогда
					ДанныеСправочника.ДоверительФЛ_Гражданство = ПолучитьЗначениеДокумента(СведенияФЛ, "@Гражданство",
						Справочники.СтраныМира.ПустаяСсылка());
				Иначе
					ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.ПустаяСсылка();
				КонецЕсли;
				ДанныеСправочника.ДоверительФЛ_ДатаРождения = ПолучитьЗначениеДокумента(СведенияФЛ, "@ДатаРожд", '00010101');
				СведенияУзловФИО = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "ФИО", Ложь);
				Если СведенияУзловФИО.Количество() = 1 Тогда
					СведенияФИО = СведенияУзловФИО[0];
					ДанныеСправочника.ЛицоБезДовФЛ_Фамилия = ПолучитьЗначениеДокумента(СведенияФИО, "@Фамилия");
					ДанныеСправочника.ЛицоБезДовФЛ_Имя = ПолучитьЗначениеДокумента(СведенияФИО, "@Имя");
					ДанныеСправочника.ЛицоБезДовФЛ_Отчество = ПолучитьЗначениеДокумента(СведенияФИО, "@Отчество", "");
				КонецЕсли;
				
				УдостоверенияЛичности = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "УдЛичнФЛ", Ложь);
				Если УдостоверенияЛичности.Количество() = 1 Тогда
					УдостоверениеЛичности = УдостоверенияЛичности[0];
					ДанныеСправочника.ЛицоБезДовФЛ_ВидДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВидДок",
						Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка());
					СерияНомер = ПодготовитьПредставлениеСерияНомер(
						ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@СерНомДок"), ДанныеСправочника.ЛицоБезДовФЛ_ВидДок);
					ДанныеСправочника.ЛицоБезДовФЛ_СерДок = СерияНомер.Серия;
					ДанныеСправочника.ЛицоБезДовФЛ_НомДок = СерияНомер.Номер;
					ДанныеСправочника.ЛицоБезДовФЛ_ДатаДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ДатаДок",
						'00010101');
					ДанныеСправочника.ЛицоБезДовФЛ_ВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ВыдДок", "");
					ДанныеСправочника.ЛицоБезДовФЛ_КодВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВыдДок", "");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипДоверителя = "ФЛ" Тогда
			ДанныеСправочника.ДоверительФЛ_ИНН = ПолучитьЗначениеДокумента(СведенияДоверителя, "@ИННФЛ", "");
			ДанныеСправочника.ДоверительФЛ_СНИЛС = ПолучитьЗначениеДокумента(СведенияДоверителя, "@СНИЛС");
			
			СведенияУзловФЛ = ПолучитьВыборкуЭлементовDOM(СведенияДоверителя, "СведФЛ", Ложь);
			Если СведенияУзловФЛ.Количество() = 1 Тогда
				СведенияФЛ = СведенияУзловФЛ[0];
				ПризнакГражданства = "";
				Если ДанныеСправочника.ДляНалоговыхОрганов Тогда
					ПризнакГражданства = ПолучитьЗначениеДокумента(СведенияФЛ, "@ПрГражд");
				КонецЕсли;
				Если ПризнакГражданства = "1" Тогда
					ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия;
				ИначеЕсли ПризнакГражданства = "2" Тогда
					ДанныеСправочника.ДоверительФЛ_Гражданство = ПолучитьЗначениеДокумента(СведенияФЛ, "@Гражданство",
						Справочники.СтраныМира.ПустаяСсылка());
				Иначе
					ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.ПустаяСсылка();
				КонецЕсли;
				ДанныеСправочника.ДоверительФЛ_ДатаРождения = ПолучитьЗначениеДокумента(СведенияФЛ, "@ДатаРожд", '00010101');
				СведенияУзловФИО = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "ФИО", Ложь);
				Если СведенияУзловФИО.Количество() = 1 Тогда
					СведенияФИО = СведенияУзловФИО[0];
					ДанныеСправочника.ЛицоБезДовФЛ_Фамилия = ПолучитьЗначениеДокумента(СведенияФИО, "@Фамилия");
					ДанныеСправочника.ЛицоБезДовФЛ_Имя = ПолучитьЗначениеДокумента(СведенияФИО, "@Имя");
					ДанныеСправочника.ЛицоБезДовФЛ_Отчество = ПолучитьЗначениеДокумента(СведенияФИО, "@Отчество", "");
				КонецЕсли;
				
				УдостоверенияЛичности = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "УдЛичнФЛ", Ложь);
				Если УдостоверенияЛичности.Количество() = 1 Тогда
					УдостоверениеЛичности = УдостоверенияЛичности[0];
					ДанныеСправочника.ЛицоБезДовФЛ_ВидДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВидДок",
						Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка());
					СерияНомер = ПодготовитьПредставлениеСерияНомер(
						ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@СерНомДок"), ДанныеСправочника.ЛицоБезДовФЛ_ВидДок);
					ДанныеСправочника.ЛицоБезДовФЛ_СерДок = СерияНомер.Серия;
					ДанныеСправочника.ЛицоБезДовФЛ_НомДок = СерияНомер.Номер;
					ДанныеСправочника.ЛицоБезДовФЛ_ДатаДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ДатаДок",
						'00010101');
					ДанныеСправочника.ЛицоБезДовФЛ_ВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ВыдДок", "");
					ДанныеСправочника.ЛицоБезДовФЛ_КодВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВыдДок", "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// информация о представителях
	Если ДанныеСправочника.ЭтоПередоверие Тогда
		СведенияОПредставителях = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Доверенность/Документ/Передов/СвПолучПолн", Ложь);
	Иначе
		СведенияОПредставителях = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Доверенность/Документ/Довер/СвУпПред", Ложь);
	КонецЕсли;
	Для каждого СведенияОПредставителе Из СведенияОПредставителях Цикл
		ДанныеСправочника.КоличествоПредставителей = ДанныеСправочника.КоличествоПредставителей + 1;
		
		СтрокаПредставителя = Новый Структура;
		СтрокаПредставителя.Вставить("Представитель", 						Неопределено);
		СтрокаПредставителя.Вставить("ПредставительЮЛ_НаимОрг", 			"");
		СтрокаПредставителя.Вставить("ПредставительЮЛ_ИНН", 				"");
		СтрокаПредставителя.Вставить("ПредставительЮЛ_КПП", 				"");
		СтрокаПредставителя.Вставить("ПредставительЮЛ_ОГРН", 				"");
		СтрокаПредставителя.Вставить("ПредставительФЛ_Фамилия", 			"");
		СтрокаПредставителя.Вставить("ПредставительФЛ_Имя", 				"");
		СтрокаПредставителя.Вставить("ПредставительФЛ_Отчество", 			"");
		СтрокаПредставителя.Вставить("ПредставительФЛ_ИНН", 				"");
		СтрокаПредставителя.Вставить("ПредставительФЛ_ОГРН", 				"");
		СтрокаПредставителя.Вставить("ПредставительФЛ_СНИЛС", 				"");
		СтрокаПредставителя.Вставить("ПредставительФЛ_Гражданство", 		Справочники.СтраныМира.ПустаяСсылка());
		СтрокаПредставителя.Вставить("ПредставительФЛ_ДатаРождения", 		'00010101');
		СтрокаПредставителя.Вставить("ПредставительФЛ_ВидДок", 				Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка());
		СтрокаПредставителя.Вставить("ПредставительФЛ_СерДок", 				"");
		СтрокаПредставителя.Вставить("ПредставительФЛ_НомДок", 				"");
		СтрокаПредставителя.Вставить("ПредставительФЛ_ДатаДок", 			'00010101');
		СтрокаПредставителя.Вставить("ПредставительФЛ_ВыдДок", 				"");
		СтрокаПредставителя.Вставить("ПредставительФЛ_КодВыдДок", 			"");
		СтрокаПредставителя.Вставить("ПредставительЯвляетсяСотрудником", 	Ложь);
		СтрокаПредставителя.Вставить("Идентификатор", 						"");
		СтрокаПредставителя.Вставить("Статус", 								Перечисления.СтатусыМашиночитаемойДоверенностиКО.ПустаяСсылка());
		
		ТипПредставителя = "";
		СведенияУзловПредставителя = Неопределено;
		ТипПред = ПолучитьЗначениеДокумента(СведенияОПредставителе, "@ТипПред");
		Если ТипПред = "1" Тогда
			ТипПредставителя = "ЮЛ";
			СведенияУзловПредставителя = ПолучитьВыборкуЭлементовDOM(СведенияОПредставителе, "Пред/СведОрг", Ложь);
		ИначеЕсли ТипПред = "2" Тогда
			ТипПредставителя = "ИП";
			СведенияУзловПредставителя = ПолучитьВыборкуЭлементовDOM(СведенияОПредставителе, "Пред/СведИП", Ложь);
		ИначеЕсли ТипПред = "3" Тогда
			ТипПредставителя = "ФЛ";
			СведенияУзловПредставителя = ПолучитьВыборкуЭлементовDOM(СведенияОПредставителе, "Пред/СведФизЛ", Ложь);
		ИначеЕсли ТипПред = "4" Тогда
			ТипПредставителя = "ФИ";
			СведенияУзловПредставителя = ПолучитьВыборкуЭлементовDOM(СведенияОПредставителе, "Пред/СведФилиал", Ложь);
		ИначеЕсли ТипПред = "5" Тогда
			ТипПредставителя = "ИО";
			СведенияУзловПредставителя = ПолучитьВыборкуЭлементовDOM(СведенияОПредставителе, "Пред/СведИО", Ложь);
		КонецЕсли;
		
		Если СведенияУзловПредставителя <> Неопределено И СведенияУзловПредставителя.Количество() = 1 Тогда
			СведенияПредставителя = СведенияУзловПредставителя[0];
			
			Если ТипПредставителя = "ЮЛ" ИЛИ ТипПредставителя = "ФИ" ИЛИ ТипПредставителя = "ИО"
				ИЛИ ТипПредставителя = "ФЛ" Тогда
				
				Если ТипПредставителя <> "ФЛ" Тогда
					Если ТипПредставителя = "ИО" Тогда
						СтрокаПредставителя.ПредставительЮЛ_НаимОрг = ПолучитьЗначениеДокумента(СведенияПредставителя, "@НаимИО");
						СтрокаПредставителя.ПредставительЮЛ_ИНН = ПолучитьЗначениеДокумента(СведенияПредставителя, "@ИННЮЛ", "");
						СтрокаПредставителя.ПредставительЮЛ_КПП = ПолучитьЗначениеДокумента(СведенияПредставителя, "@КПП", "");
						
					Иначе
						СтрокаПредставителя.ПредставительЮЛ_НаимОрг = ПолучитьЗначениеДокумента(СведенияПредставителя, "@НаимОрг");
						СтрокаПредставителя.ПредставительЮЛ_ИНН = ПолучитьЗначениеДокумента(СведенияПредставителя, "@ИННЮЛ", "");
						СтрокаПредставителя.ПредставительЮЛ_КПП = ПолучитьЗначениеДокумента(СведенияПредставителя, "@КПП");
						СтрокаПредставителя.ПредставительЮЛ_ОГРН = ПолучитьЗначениеДокумента(СведенияПредставителя, "@ОГРН", "");
					КонецЕсли;
					
					СведенияУзловПредставителя = ПолучитьВыборкуЭлементовDOM(СведенияОПредставителе, "Пред/СведФизЛ", Ложь);
					СведенияПредставителя = ?(СведенияУзловПредставителя <> Неопределено
						И СведенияУзловПредставителя.Количество() = 1, СведенияУзловПредставителя[0], Неопределено);
				КонецЕсли;
				
				Если СведенияПредставителя <> Неопределено Тогда
					СтрокаПредставителя.ПредставительФЛ_ИНН = ПолучитьЗначениеДокумента(СведенияПредставителя, "@ИННФЛ", "");
					СтрокаПредставителя.ПредставительФЛ_СНИЛС = ПолучитьЗначениеДокумента(СведенияПредставителя, "@СНИЛС", "");
					
					СведенияУзловФЛ = ПолучитьВыборкуЭлементовDOM(СведенияПредставителя, "СведФЛ", Ложь);
					Если СведенияУзловФЛ.Количество() = 1 Тогда
						СведенияФЛ = СведенияУзловФЛ[0];
						ПризнакГражданства = "";
						Если ДанныеСправочника.ДляНалоговыхОрганов Тогда
							ПризнакГражданства = ПолучитьЗначениеДокумента(СведенияФЛ, "@ПрГражд");
						КонецЕсли;
						Если ПризнакГражданства = "1" Тогда
							СтрокаПредставителя.ПредставительФЛ_Гражданство = Справочники.СтраныМира.Россия;
						ИначеЕсли ПризнакГражданства = "2" Тогда
							СтрокаПредставителя.ПредставительФЛ_Гражданство = ПолучитьЗначениеДокумента(СведенияФЛ, "@Гражданство",
								Справочники.СтраныМира.ПустаяСсылка());
						КонецЕсли;
						СтрокаПредставителя.ПредставительФЛ_ДатаРождения = ПолучитьЗначениеДокумента(СведенияФЛ, "@ДатаРожд",
							'00010101');
						СведенияУзловФИО = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "ФИО", Ложь);
						Если СведенияУзловФИО.Количество() = 1 Тогда
							СведенияФИО = СведенияУзловФИО[0];
							СтрокаПредставителя.ПредставительФЛ_Фамилия = ПолучитьЗначениеДокумента(СведенияФИО, "@Фамилия");
							СтрокаПредставителя.ПредставительФЛ_Имя = ПолучитьЗначениеДокумента(СведенияФИО, "@Имя");
							СтрокаПредставителя.ПредставительФЛ_Отчество = ПолучитьЗначениеДокумента(СведенияФИО, "@Отчество", "");
						КонецЕсли;
						
						УдостоверенияЛичности = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "УдЛичнФЛ", Ложь);
						Если УдостоверенияЛичности.Количество() = 1 Тогда
							УдостоверениеЛичности = УдостоверенияЛичности[0];
							СтрокаПредставителя.ПредставительФЛ_ВидДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВидДок",
								Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка());
							СерияНомер = ПодготовитьПредставлениеСерияНомер(
								ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@СерНомДок"), СтрокаПредставителя.ПредставительФЛ_ВидДок);
							СтрокаПредставителя.ПредставительФЛ_СерДок = СерияНомер.Серия;
							СтрокаПредставителя.ПредставительФЛ_НомДок = СерияНомер.Номер;
							СтрокаПредставителя.ПредставительФЛ_ДатаДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ДатаДок",
								'00010101');
							СтрокаПредставителя.ПредставительФЛ_ВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ВыдДок", "");
							СтрокаПредставителя.ПредставительФЛ_КодВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВыдДок",
								"");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипПредставителя = "ИП" Тогда
				СтрокаПредставителя.ПредставительФЛ_ИНН = ПолучитьЗначениеДокумента(СведенияПредставителя, "@ИННФЛ");
				СтрокаПредставителя.ПредставительФЛ_СНИЛС = ПолучитьЗначениеДокумента(СведенияПредставителя, "@СНИЛС");
				СтрокаПредставителя.ПредставительФЛ_ОГРН = ПолучитьЗначениеДокумента(СведенияПредставителя, "@ОГРНИП");
				
				СведенияУзловФЛ = ПолучитьВыборкуЭлементовDOM(СведенияПредставителя, "СведФЛ", Ложь);
				Если СведенияУзловФЛ.Количество() = 1 Тогда
					СведенияФЛ = СведенияУзловФЛ[0];
					ПризнакГражданства = "";
					Если ДанныеСправочника.ДляНалоговыхОрганов Тогда
						ПризнакГражданства = ПолучитьЗначениеДокумента(СведенияФЛ, "@ПрГражд");
					КонецЕсли;
					Если ПризнакГражданства = "1" Тогда
						СтрокаПредставителя.ПредставительФЛ_Гражданство = Справочники.СтраныМира.Россия;
					ИначеЕсли ПризнакГражданства = "2" Тогда
						СтрокаПредставителя.ПредставительФЛ_Гражданство = ПолучитьЗначениеДокумента(СведенияФЛ, "@Гражданство",
							Справочники.СтраныМира.ПустаяСсылка());
					КонецЕсли;
					СтрокаПредставителя.ПредставительФЛ_ДатаРождения = ПолучитьЗначениеДокумента(СведенияФЛ, "@ДатаРожд", '00010101');
					СведенияУзловФИО = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "ФИО", Ложь);
					Если СведенияУзловФИО.Количество() = 1 Тогда
						СведенияФИО = СведенияУзловФИО[0];
						СтрокаПредставителя.ПредставительФЛ_Фамилия = ПолучитьЗначениеДокумента(СведенияФИО, "@Фамилия");
						СтрокаПредставителя.ПредставительФЛ_Имя = ПолучитьЗначениеДокумента(СведенияФИО, "@Имя");
						СтрокаПредставителя.ПредставительФЛ_Отчество = ПолучитьЗначениеДокумента(СведенияФИО, "@Отчество", "");
					КонецЕсли;
					
					УдостоверенияЛичности = ПолучитьВыборкуЭлементовDOM(СведенияФЛ, "УдЛичнФЛ", Ложь);
					Если УдостоверенияЛичности.Количество() = 1 Тогда
						УдостоверениеЛичности = УдостоверенияЛичности[0];
						СтрокаПредставителя.ПредставительФЛ_ВидДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВидДок",
							Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка());
						СерияНомер = ПодготовитьПредставлениеСерияНомер(
							ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@СерНомДок"), СтрокаПредставителя.ПредставительФЛ_ВидДок);
						СтрокаПредставителя.ПредставительФЛ_СерДок = СерияНомер.Серия;
						СтрокаПредставителя.ПредставительФЛ_НомДок = СерияНомер.Номер;
						СтрокаПредставителя.ПредставительФЛ_ДатаДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ДатаДок",
							'00010101');
						СтрокаПредставителя.ПредставительФЛ_ВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@ВыдДок", "");
						СтрокаПредставителя.ПредставительФЛ_КодВыдДок = ПолучитьЗначениеДокумента(УдостоверениеЛичности, "@КодВыдДок",
							"");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			СтрокаПредставителя.Идентификатор = Формат(ДанныеСправочника.КоличествоПредставителей, "ЧДЦ=; ЧН=; ЧГ=");
			
			Если НЕ СтрокаПредставителя.ПредставительЯвляетсяСотрудником
				И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН) Тогда
				
				СтрокаПредставителя.Представитель = ПодыскатьИнформациюВладельца("Контрагенты,Организации",
					СтрокаПредставителя.ПредставительЮЛ_ИНН, СтрокаПредставителя.ПредставительЮЛ_КПП);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН)
				И НЕ ЗначениеЗаполнено(СтрокаПредставителя.Представитель)
				И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ОГРН) Тогда
				
				СтрокаПредставителя.Представитель = ПодыскатьИнформациюВладельца("Контрагенты",
					СтрокаПредставителя.ПредставительФЛ_ИНН);
			КонецЕсли;
			
			Если (НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН)
				ИЛИ СтрокаПредставителя.ПредставительЯвляетсяСотрудником)
				И НЕ ЗначениеЗаполнено(СтрокаПредставителя.Представитель) Тогда
				
				СтрокаПредставителя.Представитель = ПодыскатьИнформациюВладельца("ФизическиеЛица",
					СтрокаПредставителя.ПредставительФЛ_ИНН);
			КонецЕсли;
			
			Если ДанныеСправочника.КоличествоПредставителей = 1 Тогда
				ЗаполнитьЗначенияСвойств(ДанныеСправочника, СтрокаПредставителя);
			КонецЕсли;
			
			ДанныеСправочника.Представители.Добавить(СтрокаПредставителя);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеСправочника.ЭтоПередоверие Тогда
		СведенияУзловОПолномочиях = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Доверенность/Документ/Передов/СвПолн",
			Ложь);
	Иначе
		СведенияУзловОПолномочиях = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Доверенность/Документ/Довер/СвПолн",
			Ложь);
	КонецЕсли;
	Если СведенияУзловОПолномочиях.Количество() = 1 Тогда
		СведенияОПолномочиях = СведенияУзловОПолномочиях[0];
		ТипПолномочия = ПолучитьЗначениеДокумента(СведенияОПолномочиях, "@ТипПолн");
		Если ТипПолномочия = "1" Тогда
			МашиночитаемыеПолномочия = ПолучитьВыборкуЭлементовDOM(СведенияОПолномочиях, "МашПолн", Ложь);
			Для каждого МашиночитаемоеПолномочие Из МашиночитаемыеПолномочия Цикл
				КодПолномочия = ПолучитьЗначениеДокумента(МашиночитаемоеПолномочие, "@КодПолн");
				ПозицияПрефикса = СтрНайти(КодПолномочия, "_FNS");
				Если ПозицияПрефикса <> 0 Тогда
					КодПолномочияФНС = Сред(КодПолномочия, ПозицияПрефикса + 4);
					Если СтрДлина(КодПолномочияФНС) = 2 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодПолномочияФНС) Тогда
						ДанныеСправочника.ПолномочияПредставителя.Добавить(КодПолномочияФНС);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты) Тогда
		Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
		Для ИндексРеквизита = 0 По Реквизиты.ВГраница() Цикл
			Реквизиты[ИндексРеквизита] = СокрЛП(Реквизиты[ИндексРеквизита]);
			Реквизиты[ИндексРеквизита] = ВРег(Реквизиты[ИндексРеквизита]);
		КонецЦикла;
		
		УдаляемыеКлючи = Новый Массив;
		Для каждого КлючИЗначениеСправочника Из ДанныеСправочника Цикл
			КлючСправочника = ВРег(КлючИЗначениеСправочника.Ключ);
			Если Реквизиты.Найти(КлючСправочника) = Неопределено Тогда
				УдаляемыеКлючи.Добавить(КлючИЗначениеСправочника.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для каждого УдаляемыйКлюч Из УдаляемыеКлючи Цикл
			ДанныеСправочника.Удалить(УдаляемыйКлюч);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеСправочника;
	
КонецФункции

Функция ЗагрузитьЭлементИзФайлаОбмена(
		ВходящиеДанные,
		ОбновлятьСуществующийИлиСсылка = Ложь,
		Подпись = Неопределено,
		ЗаявлениеНаОтзыв = Неопределено,
		ПодписьЗаявленияНаОтзыв = Неопределено,
		ДанныеАрхива = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("ЭтоОтзыв", Ложь);
	
	ДанныеПодготовленны = 0;
	КлючевыеРеквизиты = "";
	ТекстОшибки = "";
	Успешно = Истина;
	
	Попытка
		ДанныеДоверенности = ДанныеИзФайлаОбмена(
			ВходящиеДанные,
			ОбновлятьСуществующийИлиСсылка,
			Подпись,
			ЗаявлениеНаОтзыв,
			ПодписьЗаявленияНаОтзыв,
			ДанныеАрхива);
		Если ДанныеДоверенности.Свойство("ТекстОшибки") И ЗначениеЗаполнено(ДанныеДоверенности.ТекстОшибки) Тогда
			Результат.Ошибка = ДанныеДоверенности.ТекстОшибки;
			Успешно = Ложь;
		КонецЕсли;
	Исключение
		Результат.Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Успешно = Ложь;
	КонецПопытки;
	
	Если Успешно Тогда
		Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
			КлючевыеРеквизиты = "ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП";
		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			КлючевыеРеквизиты = "ДоверительФЛ_СНИЛС";
		Иначе
			КлючевыеРеквизиты = "ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП";
		КонецЕсли;
		
		КлючевыеРеквизиты = КлючевыеРеквизиты + ", ДатаВыдачи, КодНалоговогоОрганаПредставления";
		Если НЕ ДанныеДоверенности.Свойство("ЭтоОтзыв") ИЛИ НЕ ДанныеДоверенности.ЭтоОтзыв Тогда
			КлючевыеРеквизиты = КлючевыеРеквизиты + ", ПредставительФЛ_СНИЛС";
		КонецЕсли;
		
		КлючевыеРеквизиты = Новый Структура(КлючевыеРеквизиты);
		
		Для Каждого СтрокаКлюча Из КлючевыеРеквизиты Цикл
			Если ДанныеДоверенности.Свойство(СтрокаКлюча.Ключ) 
				И ЗначениеЗаполнено(ДанныеДоверенности[СтрокаКлюча.Ключ]) Тогда
				ДанныеПодготовленны = ДанныеПодготовленны + 1;
			ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнены реквизиты справочника';
									|en = 'Не заполнены реквизиты справочника'") + ":  " + СтрокаКлюча.Ключ;
			Иначе
				ТекстОшибки = ТекстОшибки + ", " + СтрокаКлюча.Ключ;
			КонецЕсли;
		КонецЦикла;
		
		Если КлючевыеРеквизиты.Количество() = ДанныеПодготовленны Тогда
			ТекущийЭлемент = ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующийИлиСсылка);
			Результат.Ссылка = ТекущийЭлемент;
			Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
				Результат.Выполнено = Истина;
				Если ДанныеДоверенности.Свойство("ЭтоОтзыв") И ДанныеДоверенности.ЭтоОтзыв Тогда
					Результат.ЭтоОтзыв = Истина;
				КонецЕсли;
			Иначе
				Результат.Ошибка = НСтр("ru = 'Не удалось запись элемент справочника. Подробности в журнале регистрации';
										|en = 'Не удалось запись элемент справочника. Подробности в журнале регистрации'");
			КонецЕсли;
		Иначе
			Результат.Ошибка = ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

Функция ВыгрузитьЭлементВФайлОбмена(
		СправочникСсылка,
		ИдентификаторФайла = "",
		КодНалоговогоОрганаПолучателя = "",
		ОпределятьКодНалоговогоОрганаПолучателя = Ложь,
		ФорматДоверенностиПоПриказуФНС = Истина,
		ПроверитьВыгрузку = Ложь,
		ПараметрыВозврата = Неопределено) Экспорт
	
	ПараметрыВозвратаВызова = Новый Структура;
	ПараметрыВозвратаВызова.Вставить("ВозвращатьАдресВоВременномХранилище", Ложь);
	ПараметрыВозвратаВызова.Вставить("ВозвращатьИмяФайлаСРасширением", 		Истина);
	ПараметрыВозвратаВызова.Вставить("ВозвращатьПриложеннуюПодпись", 		Ложь);
	Если ПараметрыВозврата <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВозвратаВызова, ПараметрыВозврата);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Содержимое", 		"");
	Результат.Вставить("ИмяФайла", 			"");
	Результат.Вставить("НомерДоверенности", "");
	
	Если ПараметрыВозвратаВызова.ВозвращатьПриложеннуюПодпись Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СправочникСсылка,
			"ИмяФайлаВыгрузки, ФайлВырузки, ЭлектроннаяПодпись");
		ДанныеВыгрузки = РеквизитыОбъекта.ФайлВырузки.Получить();
		ДанныеПодписи = РеквизитыОбъекта.ЭлектроннаяПодпись.Получить();
		Если ЗначениеЗаполнено(РеквизитыОбъекта.ИмяФайлаВыгрузки) И ДанныеВыгрузки <> Неопределено
			И ДанныеПодписи <> Неопределено Тогда
			
			Результат = Новый Массив;
			
			АдресВыгрузки = ПоместитьВоВременноеХранилище(ДанныеВыгрузки, Новый УникальныйИдентификатор);
			Результат.Добавить(Новый Структура("Имя, Адрес", РеквизитыОбъекта.ИмяФайлаВыгрузки, АдресВыгрузки));
			
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
				РеквизитыОбъекта.ИмяФайлаВыгрузки).ИмяБезРасширения + "_SGN_"
				+ нрег(Строка(Новый УникальныйИдентификатор())) + ".sgn";
			АдресПодписи = ПоместитьВоВременноеХранилище(ДанныеПодписи, Новый УникальныйИдентификатор);
			Результат.Добавить(Новый Структура("Имя, Адрес", ИмяФайлаПодписи, АдресПодписи));
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьВыгрузку Тогда
		РезультатыПроверки = ПроверитьВозможностьВыгрузки(СправочникСсылка);
		
		Если РезультатыПроверки.Количество() <> 0 Тогда
			Для каждого РезультатПроверки Из РезультатыПроверки Цикл
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(РезультатПроверки.ТекстОшибки);
			КонецЦикла;
			
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
				НСтр("ru = 'Не удалось сформировать машиночитаемую доверенность (ФНС, распределенный реестр)';
					|en = 'Не удалось сформировать машиночитаемую доверенность (ФНС, распределенный реестр)'"));
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСправочника = ДанныеИзИнформационнойБазы(СправочникСсылка);
	
	ИдентификаторФайла = ?(ЗначениеЗаполнено(ИдентификаторФайла), ИдентификаторФайла, ДанныеСправочника.Номер);
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОрганаПолучателя) Тогда
		Если ОпределятьКодНалоговогоОрганаПолучателя И ЗначениеЗаполнено(ДанныеСправочника.Организация) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ЭтоКрупнейший    = ДокументооборотСКО.ЭтоКрупнейший(ДанныеСправочника.Организация);
			КодНОКрупнейшего = ДокументооборотСКО.КодНОКрупнейшего(ДанныеСправочника.Организация);
			УстановитьПривилегированныйРежим(Ложь);
			КодНалоговогоОрганаПолучателя = ?(ЭтоКрупнейший,
				СокрЛП(КодНОКрупнейшего), ДанныеСправочника.КодНО);
		Иначе
			КодНалоговогоОрганаПолучателя = ДанныеСправочника.КодНО;
		КонецЕсли;
	КонецЕсли;
	ИННКПП = ?(ЗначениеЗаполнено(ДанныеСправочника.ДоверительЮЛ_ИНН),
		СокрЛП(ДанныеСправочника.ДоверительЮЛ_ИНН) + СокрЛП(ДанныеСправочника.ДоверительЮЛ_КПП),
		СокрЛП(ДанныеСправочника.ДоверительФЛ_ИНН));
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Результат.ИмяФайла = "ON_DOVEL_"
		+ КодНалоговогоОрганаПолучателя
		+ "_" + СокрЛП(ДанныеСправочника.КодНО)
		+ "_" + ИННКПП
		+ "_" + Формат(ДатаСеанса, "ДФ=yyyyMMdd")
		+ "_" + СокрЛП(ИдентификаторФайла);
	
	УниверсальныйФорматФНС 	= Истина;
	
	ЭтоВерсия5_02 = (ДанныеСправочника.ВерсияФормата = "5.02");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИдФайл", Результат.ИмяФайла);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВерсФорм", ?(ЭтоВерсия5_02, "5.02", "5.01"));
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xsi:noNamespaceSchemaLocation",
		?(ЭтоВерсия5_02, "ON_DOVEL_1_885_00_05_02_01.xsd", "ON_DOVEL_1_885_00_05_01_01.xsd"), Ложь);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance", Ложь);

	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КодНО", ДанныеСправочника.КодНО);
	Если ЭтоВерсия5_02 Тогда
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "РегНомДовер", ИдентификаторФайла);
	КонецЕсли;
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КНД", ДанныеСправочника.КНД);
	
	Если ЭтоВерсия5_02 Тогда
		Если ЗначениеЗаполнено(ДанныеСправочника.НомерРодительскойДоверенности) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Передов");
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("Довер");
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоВерсия5_02 И ЗначениеЗаполнено(ДанныеСправочника.НомерРодительскойДоверенности) Тогда
		// фомирование раздела Сведедения о доверенности
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвДовП");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НомДовер", ДанныеСправочника.Номер);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "РегНомДовN", ДанныеСправочника.НомерРодительскойДоверенности);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаНач", ДанныеСправочника.ДатаВыдачи);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрПередов", ?(ДанныеСправочника.ПередовериеВозможно, "1", "2"));
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаОкон", ДанныеСправочника.ДатаОкончания);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвОснДов");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "РегНомДов0", ДанныеСправочника.НомерКорневойДоверенности);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвДоверитОсн");
		
		Если ДанныеСправочника.КорневаяДоверенность_ДоверительЮЛ_ИностраннаяОрганизация
			ИЛИ ЗначениеЗаполнено(ДанныеСправочника.КорневаяДоверенность_ДоверительЮЛ_НаимОрг)
			ИЛИ ЗначениеЗаполнено(ДанныеСправочника.КорневаяДоверенность_ДоверительЮЛ_ИНН)
			ИЛИ ЗначениеЗаполнено(ДанныеСправочника.КорневаяДоверенность_ДоверительЮЛ_КПП)
			ИЛИ ЗначениеЗаполнено(ДанныеСправочника.КорневаяДоверенность_ДоверительЮЛ_ОГРН) Тогда
			
			Если ДанныеСправочника.КорневаяДоверенность_ДоверительЮЛ_ИностраннаяОрганизация Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("ДоверитИО");
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимИО", ДанныеСправочника.КорневаяДоверенность_ДоверительЮЛ_НаимОрг);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.КорневаяДоверенность_ДоверительЮЛ_ИНН, Ложь);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.КорневаяДоверенность_ДоверительЮЛ_КПП, Ложь);
				ЗаписьXML.ЗаписатьКонецЭлемента(); // "ДоверитИО"
				
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента("ДоверитЮЛ");
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", ДанныеСправочника.КорневаяДоверенность_ДоверительЮЛ_НаимОрг);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.КорневаяДоверенность_ДоверительЮЛ_ИНН);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.КорневаяДоверенность_ДоверительЮЛ_КПП);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.КорневаяДоверенность_ДоверительЮЛ_ОГРН);
				ЗаписьXML.ЗаписатьКонецЭлемента(); // "ДоверитЮЛ"
				
			КонецЕсли;
			
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("ДоверитФЛ");
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_ИНН, Ложь);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРНИП", ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_ОГРН, Ложь);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СНИЛС", ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_СНИЛС);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_Гражданство,
				Ложь);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_ДатаРождения,
				Ложь);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Фамилия", ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_Фамилия);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Имя", ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_Имя);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Отчество", ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_Отчество, Ложь);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "ФИО"
			
			ВыгрузитьУдостоверениеУзла(
				ЗаписьXML,
				ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_ВидДок,
				ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_СерДок,
				ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_НомДок,
				ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_ДатаДок,
				ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_ВыдДок,
				ДанныеСправочника.КорневаяДоверенность_ДоверительФЛ_КодВыдДок);
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "ДоверитФЛ"
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвДоверитОсн"
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвОснДов"
		
		Если ДанныеСправочника.НомерРодительскойДоверенности <> ДанныеСправочника.НомерКорневойДоверенности Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвДоверщП");
			
			Если ЗначениеЗаполнено(ДанныеСправочника.РодительскаяДоверенность_ДоверительЮЛ_НаимОрг)
				ИЛИ ЗначениеЗаполнено(ДанныеСправочника.РодительскаяДоверенность_ДоверительЮЛ_ИНН)
				ИЛИ ЗначениеЗаполнено(ДанныеСправочника.РодительскаяДоверенность_ДоверительЮЛ_КПП)
				ИЛИ ЗначениеЗаполнено(ДанныеСправочника.РодительскаяДоверенность_ДоверительЮЛ_ОГРН) Тогда
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ДоверщЮЛ");
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", ДанныеСправочника.РодительскаяДоверенность_ДоверительЮЛ_НаимОрг);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.РодительскаяДоверенность_ДоверительЮЛ_ИНН);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.РодительскаяДоверенность_ДоверительЮЛ_КПП);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.РодительскаяДоверенность_ДоверительЮЛ_ОГРН, Ложь);
				ЗаписьXML.ЗаписатьКонецЭлемента(); // "ДоверщЮЛ"
				
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента("ДоверщФЛ");
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_ИНН, Ложь);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРНИП", ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_ОГРН, Ложь);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СНИЛС", ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_СНИЛС);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_Гражданство,
					Ложь);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_ДатаРождения,
					Ложь);
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Фамилия", ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_Фамилия);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Имя", ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_Имя);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Отчество", ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_Отчество, Ложь);
				ЗаписьXML.ЗаписатьКонецЭлемента(); // "ФИО"
				
				ВыгрузитьУдостоверениеУзла(
					ЗаписьXML,
					ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_ВидДок,
					ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_СерДок,
					ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_НомДок,
					ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_ДатаДок,
					ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_ВыдДок,
					ДанныеСправочника.РодительскаяДоверенность_ДоверительФЛ_КодВыдДок);
				
				ЗаписьXML.ЗаписатьКонецЭлемента(); // "ДоверщФЛ"
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвДоверщП"
		КонецЕсли;
		
		Для Каждого СтрокаМассива Из ДанныеСправочника.КодыНО Цикл
			ЗаписатьУзелXML(ЗаписьXML, "КодНОДейст", СтрокаМассива.КодНО, Ложь);
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвДовП"
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвДоверщ");
		
		ДоверительЭтоОрганизация = (ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ИО"
			ИЛИ ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ЮЛ");
		
		Если ДоверительЭтоОрганизация Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвОрг");
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", ДанныеСправочника.ДоверительЮЛ_НаимОрг);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ДоверительЮЛ_ИНН);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ДоверительЮЛ_КПП);
			Если ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ЮЛ" Тогда
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН",
					?(ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ИО", "", ДанныеСправочника.ДоверительЮЛ_ОГРН), Ложь);
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвОрг"
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвФЛ");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ",
			?(ДоверительЭтоОрганизация, ДанныеСправочника.ЛицоБезДовФЛ_ИНН, ДанныеСправочника.ДоверительФЛ_ИНН), Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРНИП",
			?(ДоверительЭтоОрганизация, ДанныеСправочника.ЛицоБезДовФЛ_ОГРН, ДанныеСправочника.ДоверительФЛ_ОГРН), Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СНИЛС",
			?(ДоверительЭтоОрганизация, ДанныеСправочника.ЛицоБезДовФЛ_СНИЛС, ДанныеСправочника.ДоверительФЛ_СНИЛС));
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", ?(ДоверительЭтоОрганизация,
			ДанныеСправочника.ЛицоБезДовФЛ_Гражданство, ДанныеСправочника.ДоверительФЛ_Гражданство), Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ?(ДоверительЭтоОрганизация,
			ДанныеСправочника.ЛицоБезДовФЛ_ДатаРождения, ДанныеСправочника.ДоверительФЛ_ДатаРождения), Ложь);
		
		ВыгрузитьУдостоверениеУзла(
			ЗаписьXML,
			ДанныеСправочника.ЛицоБезДовФЛ_ВидДок,
			ДанныеСправочника.ЛицоБезДовФЛ_СерДок,
			ДанныеСправочника.ЛицоБезДовФЛ_НомДок,
			ДанныеСправочника.ЛицоБезДовФЛ_ДатаДок,
			ДанныеСправочника.ЛицоБезДовФЛ_ВыдДок,
			ДанныеСправочника.ЛицоБезДовФЛ_КодВыдДок);
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвФЛ"
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвДоверщ"
		
	Иначе
		// фомирование раздела Сведедения о доверенности
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвДов");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НомДовер", ДанныеСправочника.Номер);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаНач", ДанныеСправочника.ДатаВыдачи);
		Если НЕ УниверсальныйФорматФНС И НЕ ФорматДоверенностиПоПриказуФНС Тогда
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НомПредДовер", ДанныеСправочника.ПредыдующийНомер, Ложь);
		КонецЕсли;
		Если ЭтоВерсия5_02 Тогда
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаОкон", ДанныеСправочника.ДатаОкончания);
		ИначеЕсли ЗначениеЗаполнено(ДанныеСправочника.ДатаОкончания) Тогда
			ЗаписатьУзелXML(ЗаписьXML, "ДатаОкон", ДанныеСправочника.ДатаОкончания);
		Иначе
			ЗаписатьУзелXML(ЗаписьXML, "СрокДейст", ДанныеСправочника.СрокДействия);
		КонецЕсли;
		Если ЭтоВерсия5_02 Тогда
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрПередов", ?(ДанныеСправочника.ПередовериеВозможно, "1", "2"));
		КонецЕсли;
		Если НЕ УниверсальныйФорматФНС И НЕ ФорматДоверенностиПоПриказуФНС Тогда
			ЗаписатьУзелXML(ЗаписьXML, "СведСистОтм", ДанныеСправочника.СведенияОбИнформационнойСистеме);
		КонецЕсли;
		
		Для Каждого СтрокаМассива Из ДанныеСправочника.КодыНО Цикл
			ЗаписатьУзелXML(ЗаписьXML, "КодНОДейст", СтрокаМассива.КодНО, Ложь);
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвДов"
		
		// фомирование раздела Сведения о доверителе
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвДоверит");
		
		Если ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ИО" Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("ИО");
			
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимИО", ДанныеСправочника.ДоверительЮЛ_НаимОрг);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ДоверительЮЛ_ИНН);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ДоверительЮЛ_КПП);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СтрРег", ДанныеСправочника.ДоверительЮЛ_СтрРег);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимРегОрг", ДанныеСправочника.ДоверительЮЛ_НаимРегОрг, Ложь);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "РегНомер", ДанныеСправочника.ДоверительЮЛ_РегНомер);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КодНПРег", ДанныеСправочника.ДоверительЮЛ_КодНПРег, Ложь);
			
			ВыгрузитьАдресУзла(ЗаписьXML, ДанныеСправочника.ДоверительЮЛ_АдрРус, ДанныеСправочника.ДоверительЮЛ_АдрЛат, "АдрСтрРег");
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвРукОП");
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.ДоверительФЛ_ИНН, Ложь);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Пол", ДанныеСправочника.ДоверительФЛ_Пол);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ДанныеСправочника.ДоверительФЛ_ДатаРождения);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "МестоРожд", ДанныеСправочника.ДоверительФЛ_МестоРожд, Ложь);
			Если ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "1");
			ИначеЕсли ЗначениеЗаполнено(ДанныеСправочника.ДоверительФЛ_Гражданство) Тогда
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "2");
			Иначе
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "3");
			КонецЕсли;
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", ДанныеСправочника.ДоверительФЛ_Гражданство, Ложь);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвРукОП"
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "ИО"
			
		ИначеЕсли ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ЮЛ" Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("НПЮЛ");
			
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", ДанныеСправочника.ДоверительЮЛ_НаимОрг);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ДоверительЮЛ_ИНН);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ДоверительЮЛ_КПП);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.ДоверительЮЛ_ОГРН);
			
			ВыгрузитьАдресУзла(ЗаписьXML, ДанныеСправочника.ДоверительЮЛ_АдрРус, "", "АдрРФ");
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЛицоБезДов");
			
			Если ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовЮЛ_ИНН) Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("СвОрг");
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", ДанныеСправочника.ЛицоБезДовЮЛ_НаимОрг);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ЛицоБезДовЮЛ_ИНН);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ЛицоБезДовЮЛ_КПП);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.ЛицоБезДовЮЛ_ОГРН, Ложь);
				ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвОрг"
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвФЛ");
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.ЛицоБезДовФЛ_ИНН, НЕ ЭтоВерсия5_02);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СНИЛС", ДанныеСправочника.ЛицоБезДовФЛ_СНИЛС);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", ДанныеСправочника.ЛицоБезДовФЛ_Гражданство, Ложь);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ДанныеСправочника.ЛицоБезДовФЛ_ДатаРождения, Ложь);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Должность", ДанныеСправочника.ЛицоБезДовФЛ_Должность, Ложь);
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвФЛ"
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "ЛицоБезДов"
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "НПЮЛ"
			
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("НПФЛ");
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.ДоверительФЛ_ИНН, НЕ ЭтоВерсия5_02);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРНИП", ДанныеСправочника.ДоверительФЛ_ОГРН, Ложь);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СНИЛС", ДанныеСправочника.ДоверительФЛ_СНИЛС);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", ДанныеСправочника.ДоверительФЛ_Гражданство, Ложь);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ДанныеСправочника.ДоверительФЛ_ДатаРождения, Ложь);
			
			ВыгрузитьУдостоверениеУзла(
				ЗаписьXML,
				ДанныеСправочника.ЛицоБезДовФЛ_ВидДок,
				ДанныеСправочника.ЛицоБезДовФЛ_СерДок,
				ДанныеСправочника.ЛицоБезДовФЛ_НомДок,
				ДанныеСправочника.ЛицоБезДовФЛ_ДатаДок,
				ДанныеСправочника.ЛицоБезДовФЛ_ВыдДок,
				ДанныеСправочника.ЛицоБезДовФЛ_КодВыдДок);
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "НПФЛ"
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвДоверит"
	КонецЕсли;
	
	Представители = ДанныеСправочника.Представители;
	Если НЕ ЭтоВерсия5_02 ИЛИ Представители.Количество() <= 1 Тогда
		Представители = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСправочника);
	КонецЕсли;
	
	Для каждого СтрокаПредставителя Из Представители Цикл
		// фомирование раздела Сведения об уполномоченном представителе
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвУпПред");
		
		Если НЕ ЭтоВерсия5_02 Тогда
			Для каждого ПолномочиеПредставителя Из ДанныеСправочника.ПолномочияПредставителя Цикл
				ЗаписатьУзелXML(ЗаписьXML, "ПрОблПолн", ПолномочиеПредставителя);
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвПред");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвОрг");
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", СтрокаПредставителя.ПредставительЮЛ_НаимОрг);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", СтрокаПредставителя.ПредставительЮЛ_ИНН);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", СтрокаПредставителя.ПредставительЮЛ_КПП);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", СтрокаПредставителя.ПредставительЮЛ_ОГРН, Ложь);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвОрг"
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведФизЛ");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", СтрокаПредставителя.ПредставительФЛ_ИНН, НЕ ЭтоВерсия5_02);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРНИП", СтрокаПредставителя.ПредставительФЛ_ОГРН, Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СНИЛС", СтрокаПредставителя.ПредставительФЛ_СНИЛС);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", СтрокаПредставителя.ПредставительФЛ_Гражданство, Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", СтрокаПредставителя.ПредставительФЛ_ДатаРождения, Ложь);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
		ВыгрузитьФИОУзла(
			ЗаписьXML,
			СтрокаПредставителя.ПредставительФЛ_Фамилия,
			СтрокаПредставителя.ПредставительФЛ_Имя,
			СтрокаПредставителя.ПредставительФЛ_Отчество);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "ФИО"
		
		ВыгрузитьУдостоверениеУзла(
			ЗаписьXML,
			СтрокаПредставителя.ПредставительФЛ_ВидДок,
			СтрокаПредставителя.ПредставительФЛ_СерДок,
			СтрокаПредставителя.ПредставительФЛ_НомДок,
			СтрокаПредставителя.ПредставительФЛ_ДатаДок,
			СтрокаПредставителя.ПредставительФЛ_ВыдДок,
			СтрокаПредставителя.ПредставительФЛ_КодВыдДок);
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "СведФизЛ"
		
		Если НЕ ЭтоВерсия5_02 Тогда
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвПред"
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвУпПред"
	КонецЦикла;
	
	Если ЭтоВерсия5_02 Тогда
		Для каждого ПолномочиеПредставителя Из ДанныеСправочника.ПолномочияПредставителя Цикл
			ЗаписатьУзелXML(ЗаписьXML, "ПрОблПолн", ПолномочиеПредставителя);
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "Передов" или "Довер"
	КонецЕсли;
	
	// фомирование раздела Сведения об подписанте доверителя
	ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
	ВыгрузитьФИОУзла(
		ЗаписьXML,
		ДанныеСправочника.ЛицоБезДовФЛ_Фамилия,
		ДанныеСправочника.ЛицоБезДовФЛ_Имя,
		ДанныеСправочника.ЛицоБезДовФЛ_Отчество);
	ЗаписьXML.ЗаписатьКонецЭлемента(); // "Подписант"
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // "Документ"
	ЗаписьXML.ЗаписатьКонецЭлемента(); // "Файл"
	
	Результат.Содержимое = ЗаписьXML.Закрыть();
	
	Если ПараметрыВозвратаВызова.ВозвращатьИмяФайлаСРасширением Тогда
		Результат.ИмяФайла = Результат.ИмяФайла + ".xml";
	КонецЕсли;
	
	Результат.НомерДоверенности = ДанныеСправочника.Номер;
	
	Если ПараметрыВозвратаВызова.ВозвращатьАдресВоВременномХранилище Тогда
		ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(Результат.Содержимое, "windows-1251");
		АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
		Результат = Новый Структура("Имя, Адрес", Результат.ИмяФайла, АдресФайла);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьЭлементВФайлОбменаДляОтмены(
		СправочникСсылка,
		ИдентификаторФайла = "",
		КодНалоговогоОрганаПолучателя = "",
		ОпределятьКодНалоговогоОрганаПолучателя = Ложь,
		ФорматДоверенностиПоПриказуФНС = Истина,
		ПроверитьВыгрузку = Ложь,
		ПараметрыОперации = Неопределено) Экспорт
	
	ПараметрыОперацииВызова = Новый Структура;
	ПараметрыОперацииВызова.Вставить("ВозвращатьАдресВоВременномХранилище", Ложь);
	ПараметрыОперацииВызова.Вставить("ВозвращатьИмяФайлаСРасширением", 		Истина);
	ПараметрыОперацииВызова.Вставить("ПричинаОтмены", 						"");
	ПараметрыОперацииВызова.Вставить("УникальныйИдентификаторДоверенности", "");
	ПараметрыОперацииВызова.Вставить("ДатаОтмены", 							Неопределено);
	ПараметрыОперацииВызова.Вставить("ДолжностьРуководителяДоверителя", 	"");
	ПараметрыОперацииВызова.Вставить("ДатаРожденияДоверителя", 				Неопределено);
	ПараметрыОперацииВызова.Вставить("ТелефонПодписанта", 					"");
	Если ПараметрыОперации <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОперацииВызова, ПараметрыОперации);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Содержимое", 	"");
	Результат.Вставить("ИмяФайла", 		"");
	
	Если ПроверитьВыгрузку Тогда
		РезультатыПроверки = ПроверитьВозможностьВыгрузкиДляОтмены(СправочникСсылка, ПараметрыОперацииВызова);
		
		Если РезультатыПроверки.Количество() <> 0 Тогда
			Для каждого РезультатПроверки Из РезультатыПроверки Цикл
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(РезультатПроверки.ТекстОшибки);
			КонецЦикла;
			
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
				НСтр("ru = 'Не удалось сформировать заявление на отзыв машиночитаемой доверенности ФНС из распределенного реестра';
					|en = 'Не удалось сформировать заявление на отзыв машиночитаемой доверенности ФНС из распределенного реестра'"));
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСправочника = ДанныеИзИнформационнойБазы(СправочникСсылка);
	
	Если НЕ ФорматДоверенностиПоПриказуФНС Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("windows-1251");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
		ЗаписьXML.ЗаписатьАтрибут("ТД", XMLСтрока("Заявление на отзыв МЧД"));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвДов");
		ЗаписьXML.ЗаписатьАтрибут("НомДовер", XMLСтрока(ДанныеСправочника.Номер));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвПрич");
		ЗаписьXML.ЗаписатьАтрибут("Отз", XMLСтрока(ПараметрыОперацииВызова.ПричинаОтмены));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Результат.ИмяФайла = "revoke";
		Результат.Содержимое = ЗаписьXML.Закрыть();
		
		Если ПараметрыОперацииВызова.ВозвращатьИмяФайлаСРасширением Тогда
			Результат.ИмяФайла = Результат.ИмяФайла + ".xml";
		КонецЕсли;
		
		Если ПараметрыОперацииВызова.ВозвращатьАдресВоВременномХранилище Тогда
			ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(Результат.Содержимое, "windows-1251");
			АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
			Результат = Новый Структура("Имя, Адрес", Результат.ИмяФайла, АдресФайла);
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторФайла = ?(ЗначениеЗаполнено(ИдентификаторФайла),
		ИдентификаторФайла, ДанныеСправочника.Номер);
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОрганаПолучателя) Тогда
		Если ОпределятьКодНалоговогоОрганаПолучателя И ЗначениеЗаполнено(ДанныеСправочника.Организация) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ЭтоКрупнейший    = ДокументооборотСКО.ЭтоКрупнейший(ДанныеСправочника.Организация);
			КодНОКрупнейшего = ДокументооборотСКО.КодНОКрупнейшего(ДанныеСправочника.Организация);
			УстановитьПривилегированныйРежим(Ложь);
			КодНалоговогоОрганаПолучателя = ?(ЭтоКрупнейший,
				СокрЛП(КодНОКрупнейшего), ДанныеСправочника.КодНО);
		Иначе
			КодНалоговогоОрганаПолучателя = ДанныеСправочника.КодНО;
		КонецЕсли;
	КонецЕсли;
	ИННКПП = ?(ЗначениеЗаполнено(ДанныеСправочника.ДоверительЮЛ_ИНН),
		СокрЛП(ДанныеСправочника.ДоверительЮЛ_ИНН) + СокрЛП(ДанныеСправочника.ДоверительЮЛ_КПП),
		СокрЛП(ДанныеСправочника.ДоверительФЛ_ИНН));
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Результат.ИмяФайла = "ON_OFFDOVER_"
		+ КодНалоговогоОрганаПолучателя
		+ "_" + СокрЛП(ДанныеСправочника.КодНО)
		+ "_" + ИННКПП
		+ "_" + Формат(ДатаСеанса, "ДФ=yyyyMMdd")
		+ "_" + СокрЛП(ИдентификаторФайла);
	
	УниверсальныйФорматФНС = Истина;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИдФайл", Результат.ИмяФайла);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВерсФорм", "5.01");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xsi:noNamespaceSchemaLocation", "ON_OFFDOVER_1_884_00_05_01_01.xsd", Ложь);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance", Ложь);

	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КодНО", ДанныеСправочника.КодНО);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КНД", "1110311");
	
	// фомирование раздела Сведедения о доверенности
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвЗаяв");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НомДовер", ДанныеСправочника.Номер);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИдДовер", ПараметрыОперацииВызова.УникальныйИдентификаторДоверенности);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаНач", ДанныеСправочника.ДатаВыдачи);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаОтз", ПараметрыОперацииВызова.ДатаОтмены);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПричОтз", ПараметрыОперацииВызова.ПричинаОтмены, Ложь);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// фомирование раздела Сведения о доверителе
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвДоверит");
	
	Если ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ИО" Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("ИО");
		
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимИО", ДанныеСправочника.ДоверительЮЛ_НаимОрг);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ДоверительЮЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ДоверительЮЛ_КПП);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвРукОП");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.ДоверительФЛ_ИНН, Ложь);
		Если ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "1");
		ИначеЕсли ЗначениеЗаполнено(ДанныеСправочника.ДоверительФЛ_Гражданство) Тогда
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "2");
		Иначе
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "3");
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ИначеЕсли ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ЮЛ" Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("НПЮЛ");
		
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", ДанныеСправочника.ДоверительЮЛ_НаимОрг);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ДоверительЮЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ДоверительЮЛ_КПП);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.ДоверительЮЛ_ОГРН);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвРукОрг");
		
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Должность", ПараметрыОперацииВызова.ДолжностьРуководителяДоверителя);
		
		Если ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовЮЛ_ИНН) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвОрг");
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", ДанныеСправочника.ЛицоБезДовЮЛ_НаимОрг);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ЛицоБезДовЮЛ_ИНН);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ЛицоБезДовЮЛ_КПП);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.ЛицоБезДовЮЛ_ОГРН, Ложь);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("НПФЛ");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.ДоверительФЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРНИП", ДанныеСправочника.ДоверительФЛ_ОГРН, Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ПараметрыОперацииВызова.ДатаРожденияДоверителя);
		
		ВыгрузитьУдостоверениеУзла(
			ЗаписьXML,
			ДанныеСправочника.ЛицоБезДовФЛ_ВидДок,
			ДанныеСправочника.ЛицоБезДовФЛ_СерДок,
			ДанныеСправочника.ЛицоБезДовФЛ_НомДок,
			ДанныеСправочника.ЛицоБезДовФЛ_ДатаДок,
			ДанныеСправочника.ЛицоБезДовФЛ_ВыдДок,
			ДанныеСправочника.ЛицоБезДовФЛ_КодВыдДок);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// фомирование раздела Сведения об подписанте доверителя
	ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Тлф", ПараметрыОперацииВызова.ТелефонПодписанта);
	ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
	ВыгрузитьФИОУзла(ЗаписьXML,
		ДанныеСправочника.ЛицоБезДовФЛ_Фамилия,
		ДанныеСправочника.ЛицоБезДовФЛ_Имя,
		ДанныеСправочника.ЛицоБезДовФЛ_Отчество);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Результат.Содержимое = ЗаписьXML.Закрыть();
	
	Если ПараметрыОперацииВызова.ВозвращатьИмяФайлаСРасширением Тогда
		Результат.ИмяФайла = Результат.ИмяФайла + ".xml";
	КонецЕсли;
	
	Если ПараметрыОперацииВызова.ВозвращатьАдресВоВременномХранилище Тогда
		ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(Результат.Содержимое, "windows-1251");
		АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
		Результат = Новый Структура("Имя, Адрес", Результат.ИмяФайла, АдресФайла);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ПроверитьВозможностьВыгрузки(ОбъектИлиСсылка, НастройкиПроверки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектИлиСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр") Тогда
		Доверенность = ОбъектИлиСсылка.ПолучитьОбъект();
	Иначе
		Доверенность = ОбъектИлиСсылка;
	КонецЕсли;
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("ВыполнятьПроверкиОсновныхРеквизитов", 		Ложь);
	НастройкиВызова.Вставить("ВыполнятьПроверкиРодительскойДоверенности", 	Ложь);
	НастройкиВызова.Вставить("ВыполнятьПроверкиКорневойДоверенности", 		Ложь);
	НастройкиВызова.Вставить("ВыполнятьПроверкиДоверителя", 				Ложь);
	НастройкиВызова.Вставить("ВыполнятьПроверкиЛицаБезДоверенностиЮЛ", 		Ложь);
	НастройкиВызова.Вставить("ВыполнятьПроверкиЛицаБезДоверенностиФЛ", 		Ложь);
	НастройкиВызова.Вставить("ВыполнятьПроверкиДоверителя", 				Ложь);
	НастройкиВызова.Вставить("ВыполнятьПроверкиПредставителя", 				Ложь);
	НастройкиВызова.Вставить("ВыполнятьПроверкиНалоговыхОрганов", 			Ложь);
	Если НастройкиПроверки = Неопределено Тогда
		Для каждого КлючИЗначениеНастроекВызова Из НастройкиВызова Цикл
			НастройкиВызова[КлючИЗначениеНастроекВызова.Ключ] = Истина;
		КонецЦикла;
	Иначе
		ЗаполнитьЗначенияСвойств(НастройкиВызова, НастройкиПроверки);
	КонецЕсли;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ГодДатыСеанса = Год(ДатаСеанса);
	МинимальнаяДата = Дата(1900, 1, 1);
	ГодМаксимальнойДаты = Цел((ГодДатыСеанса + 50) / 100) * 100 + 99;
	МаксимальнаяДата = Дата(ГодМаксимальнойДаты, 1, 1);
	МаксимальнаяДата = КонецГода(МаксимальнаяДата);
	
	ЭтоВерсия5_02 = (Доверенность.ВерсияФормата = "5.02");
	ЭтоПередоверие = ЭтоВерсия5_02 И ЗначениеЗаполнено(Доверенность.НомерРодительскойДоверенности);
	
	// основные
	
	Если НастройкиВызова.ВыполнятьПроверкиОсновныхРеквизитов Тогда
		Если НЕ ЗначениеЗаполнено(Доверенность.НомерДоверенности) Тогда
			Если ЭтоВерсия5_02 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан единый регистрационный номер доверенности';
						|en = 'Не задан единый регистрационный номер доверенности'"), "НомерДоверенности"));
				
			Иначе
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан номер доверенности';
						|en = 'Не задан номер доверенности'"), "НомерДоверенности"));
			КонецЕсли;
			
		ИначеЕсли ЭтоВерсия5_02 И СтрДлина(Доверенность.НомерДоверенности) <> 36 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Длина единого регистрационного номера доверенности не 36 символов';
					|en = 'Длина единого регистрационного номера доверенности не 36 символов'"),
				"НомерДоверенности"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Доверенность.ДатаВыдачи) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана дата выдачи';
					|en = 'Не задана дата выдачи'"), "ДатаВыдачи"));
		ИначеЕсли Доверенность.ДатаВыдачи < МинимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата выдачи не может быль раньше %1';
						|en = 'Дата выдачи не может быль раньше %1'"),
					Формат(МинимальнаяДата, "ДЛФ=Д")),
				"ДатаВыдачи"));
		ИначеЕсли Доверенность.ДатаВыдачи > МаксимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата выдачи не может быль позднее %1';
						|en = 'Дата выдачи не может быль позднее %1'"),
					Формат(МаксимальнаяДата, "ДЛФ=Д")),
				"ДатаВыдачи"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Доверенность.ДатаОкончания)
			И (ЭтоВерсия5_02 ИЛИ НЕ ЗначениеЗаполнено(Доверенность.СрокДействия)) Тогда
			
			Если ЭтоВерсия5_02 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана дата окончания';
						|en = 'Не задана дата окончания'"), "ДатаОкончания"));
				
			Иначе
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не заданы дата окончания или срок действия';
						|en = 'Не заданы дата окончания или срок действия'"), "ДатаОкончания"));
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Доверенность.ДатаОкончания) И Доверенность.ДатаОкончания < МинимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата окончания действия не может быль раньше %1';
						|en = 'Дата окончания действия не может быль раньше %1'"),
					Формат(МинимальнаяДата, "ДЛФ=Д")),
				"ДатаОкончания"));
			
		ИначеЕсли ЗначениеЗаполнено(Доверенность.ДатаОкончания) И Доверенность.ДатаОкончания > МаксимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата окончания действия не может быль позднее %1';
						|en = 'Дата окончания действия не может быль позднее %1'"),
					Формат(МаксимальнаяДата, "ДЛФ=Д")),
				"ДатаОкончания"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Доверенность.ДатаВыдачи) И ЗначениеЗаполнено(Доверенность.ДатаОкончания)
			И Доверенность.ДатаОкончания < Доверенность.ДатаВыдачи Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Дата выдачи доверенности не может быть больше даты окончания действия';
					|en = 'Дата выдачи доверенности не может быть больше даты окончания действия'"), "ДатаОкончания"));
		КонецЕсли;
		
		Если ЭтоПередоверие И СтрДлина(Доверенность.НомерРодительскойДоверенности) <> 36 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Длина единого регистрационного номера доверенности, в отношении которой производится передоверие, не 36 символов';
					|en = 'Длина единого регистрационного номера доверенности, в отношении которой производится передоверие, не 36 символов'"),
				"НомерРодительскойДоверенности"));
		КонецЕсли;
		
		Если ЭтоПередоверие И НЕ ЗначениеЗаполнено(Доверенность.НомерКорневойДоверенности) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан номер корневой доверенности';
					|en = 'Не задан номер корневой доверенности'"), "НомерКорневойДоверенности"));
		ИначеЕсли ЭтоПередоверие И СтрДлина(Доверенность.НомерРодительскойДоверенности) <> 36 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Длина единого регистрационного номера корневой доверенности не 36 символов';
					|en = 'Длина единого регистрационного номера корневой доверенности не 36 символов'"),
				"НомерКорневойДоверенности"));
		КонецЕсли;
	КонецЕсли;
	
	// родительские доверенности
	
	Если ЭтоПередоверие Тогда
		Если НастройкиВызова.ВыполнятьПроверкиРодительскойДоверенности
			И Доверенность.НомерРодительскойДоверенности <> Доверенность.НомерКорневойДоверенности Тогда
			
			СтрокиДоверенностей = Доверенность.РодительскиеДоверенности.НайтиСтроки(Новый Структура("ЭтоКорневаяДоверенность",
				Ложь));
			Если СтрокиДоверенностей.Количество() >= 1 Тогда
				СтрокаДоверенности = СтрокиДоверенностей[0];
				
				Если ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_НаимОрг)
					ИЛИ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_ИНН)
					ИЛИ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_КПП)
					ИЛИ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_ОГРН) Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_НаимОрг) Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Не задано наименование организации доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Не задано наименование организации доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_ИНН) Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Не задан ИНН организации доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Не задан ИНН организации доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
						
					ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
						СтрокаДоверенности.ДоверительЮЛ_ИНН, Ложь) Тогда
						
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Указан некорректный ИНН организации доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Указан некорректный ИНН организации доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_КПП) Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Не задан КПП организации доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Не задан КПП организации доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
						
					ИначеЕсли СтрДлина(СтрокаДоверенности.ДоверительЮЛ_КПП) <> 9 Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Указан некорректный КПП организации доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Указан некорректный КПП организации доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_ОГРН)
						И СтрДлина(СтрокаДоверенности.ДоверительЮЛ_ОГРН) <> 13 Тогда
						
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Указан некорректный ОГРН организации доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Указан некорректный ОГРН организации доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_Фамилия)
					ИЛИ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_Имя)
					ИЛИ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_Отчество)
					ИЛИ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ИНН)
					ИЛИ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ОГРН)
					ИЛИ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_СНИЛС) Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_Фамилия) Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Не задана фамилия доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Не задана фамилия доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_Имя) Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Не задано имя доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Не задано имя доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ИНН)
						И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
						СтрокаДоверенности.ДоверительФЛ_ИНН, Истина) Тогда
						
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Указан некорректный ИНН доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Указан некорректный ИНН доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ОГРН)
						И СтрДлина(СтрокаДоверенности.ДоверительФЛ_ОГРН) <> 15 Тогда
						
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Указан некорректный ОГРНИП доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Указан некорректный ОГРНИП доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_СНИЛС) Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Не задан СНИЛС доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Не задан СНИЛС доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
					ИначеЕсли СтрДлина(СтрокаДоверенности.ДоверительФЛ_СНИЛС) <> 14 Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Указан некорректный СНИЛС доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Указан некорректный СНИЛС доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ДатаРождения)
						И СтрокаДоверенности.ДоверительФЛ_ДатаРождения < МинимальнаяДата Тогда
						
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							СтрШаблон(
								НСтр("ru = 'Дата рождения доверителя доверенности, в отношении которой производится передоверие, не может быль раньше %1';
									|en = 'Дата рождения доверителя доверенности, в отношении которой производится передоверие, не может быль раньше %1'"),
								Формат(МинимальнаяДата, "ДЛФ=Д")),
							"НомерРодительскойДоверенности"));
						
					ИначеЕсли ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ДатаРождения)
						И СтрокаДоверенности.ДоверительФЛ_ДатаРождения > МаксимальнаяДата Тогда
						
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							СтрШаблон(
								НСтр("ru = 'Дата рождения доверителя доверенности, в отношении которой производится передоверие, не может быль позднее %1';
									|en = 'Дата рождения доверителя доверенности, в отношении которой производится передоверие, не может быль позднее %1'"),
								Формат(МаксимальнаяДата, "ДЛФ=Д")),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
					КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
						СтрокаДоверенности.ДоверительФЛ_ВидДок);
					Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
						И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
						И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
						
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Вид документа доверителя доверенности, в отношении которой производится передоверие, не поддерживается';
								|en = 'Вид документа доверителя доверенности, в отношении которой производится передоверие, не поддерживается'"),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
					Если СтрДлина(СокрЛП(СтрокаДоверенности.ДоверительФЛ_СерДок)
						+ СокрЛП(СтрокаДоверенности.ДоверительФЛ_НомДок)) = 0 Тогда
						
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Не заданы серии и номера документа доверенности, в отношении которой производится передоверие';
								|en = 'Не заданы серии и номера документа доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
						
					ИначеЕсли СтрДлина(СокрЛП(СтрокаДоверенности.ДоверительФЛ_СерДок)
						+ СокрЛП(СтрокаДоверенности.ДоверительФЛ_НомДок)) > 25 Тогда
						
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Длина серии и номера документа доверенности, в отношении которой производится передоверие, больше 25 символов';
								|en = 'Длина серии и номера документа доверенности, в отношении которой производится передоверие, больше 25 символов'"),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ДатаДок) Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Не задана дата выдачи документа доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Не задана дата выдачи документа доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
							
					ИначеЕсли СтрокаДоверенности.ДоверительФЛ_ДатаДок < МинимальнаяДата Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							СтрШаблон(
								НСтр("ru = 'Дата выдачи документа доверителя доверенности, в отношении которой производится передоверие, не может быль раньше %1';
									|en = 'Дата выдачи документа доверителя доверенности, в отношении которой производится передоверие, не может быль раньше %1'"),
								Формат(МинимальнаяДата, "ДЛФ=Д")),
							"НомерРодительскойДоверенности"));
					ИначеЕсли СтрокаДоверенности.ДоверительФЛ_ДатаДок > МаксимальнаяДата Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							СтрШаблон(
								НСтр("ru = 'Дата выдачи документа доверителя доверенности, в отношении которой производится передоверие, не может быль позднее %1';
									|en = 'Дата выдачи документа доверителя доверенности, в отношении которой производится передоверие, не может быль позднее %1'"),
								Формат(МаксимальнаяДата, "ДЛФ=Д")),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ВыдДок) И КодВидаДокумента = "21" Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Не задано наименование органа, выдавшего документ доверителя доверенности, в отношении которой производится передоверие';
								|en = 'Не задано наименование органа, выдавшего документ доверителя доверенности, в отношении которой производится передоверие'"),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_КодВыдДок)
						И СтрДлина(СокрЛП(СтрокаДоверенности.ДоверительФЛ_КодВыдДок)) <> 7 Тогда
						
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Длина кода подразделения документа доверителя доверенности, в отношении которой производится передоверие, не 7 символов';
								|en = 'Длина кода подразделения документа доверителя доверенности, в отношении которой производится передоверие, не 7 символов'"),
							"НомерРодительскойДоверенности"));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НастройкиВызова.ВыполнятьПроверкиКорневойДоверенности Тогда
			СтрокиДоверенностей = Доверенность.РодительскиеДоверенности.НайтиСтроки(Новый Структура("ЭтоКорневаяДоверенность",
				Истина));
			СтрокаДоверенности = ?(СтрокиДоверенностей.Количество() >= 1, СтрокиДоверенностей[0], Неопределено);
			
			Если СтрокаДоверенности <> Неопределено И СтрокаДоверенности.ДоверительЮЛ_ИностраннаяОрганизация Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_НаимОрг) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задано наименование организации корневой доверенности';
							|en = 'Не задано наименование организации корневой доверенности'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_ИНН) И
					НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
					СтрокаДоверенности.ДоверительЮЛ_ИНН, Ложь) Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ИНН организации доверителя корневой доверенности';
							|en = 'Указан некорректный ИНН организации доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_КПП)
					И СтрДлина(СтрокаДоверенности.ДоверительЮЛ_КПП) <> 9 Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный КПП организации доверителя корневой доверенности';
							|en = 'Указан некорректный КПП организации доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
			ИначеЕсли СтрокаДоверенности <> Неопределено И НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_Фамилия)
				И НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_Имя)
				И НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_Отчество)
				И НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ИНН)
				И НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ОГРН)
				И НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_СНИЛС) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_НаимОрг) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задано наименование организации корневой доверенности';
							|en = 'Не задано наименование организации корневой доверенности'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_ИНН) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан ИНН организации доверителя корневой доверенности';
							|en = 'Не задан ИНН организации доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
					
				ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
					СтрокаДоверенности.ДоверительЮЛ_ИНН, Ложь) Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ИНН организации доверителя корневой доверенности';
							|en = 'Указан некорректный ИНН организации доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_КПП) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан КПП организации доверителя корневой доверенности';
							|en = 'Не задан КПП организации доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
					
				ИначеЕсли СтрДлина(СтрокаДоверенности.ДоверительЮЛ_КПП) <> 9 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный КПП организации доверителя корневой доверенности';
							|en = 'Указан некорректный КПП организации доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительЮЛ_ОГРН) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан ОГРН организации доверителя корневой доверенности';
							|en = 'Не задан ОГРН организации доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
					
				ИначеЕсли СтрДлина(СтрокаДоверенности.ДоверительЮЛ_ОГРН) <> 13 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ОГРН организации доверителя корневой доверенности';
							|en = 'Указан некорректный ОГРН организации доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
			Иначе
				Если СтрокаДоверенности = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_Фамилия) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задана фамилия доверителя корневой доверенности';
							|en = 'Не задана фамилия доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если СтрокаДоверенности = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_Имя) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задано имя доверителя корневой доверенности';
							|en = 'Не задано имя доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если СтрокаДоверенности <> Неопределено И ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ИНН)
					И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
					СтрокаДоверенности.ДоверительФЛ_ИНН, Истина) Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ИНН доверителя корневой доверенности';
							|en = 'Указан некорректный ИНН доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если СтрокаДоверенности <> Неопределено И ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ОГРН)
					И СтрДлина(СтрокаДоверенности.ДоверительФЛ_ОГРН) <> 15 Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ОГРНИП доверителя корневой доверенности';
							|en = 'Указан некорректный ОГРНИП доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если СтрокаДоверенности = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_СНИЛС) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан СНИЛС доверителя корневой доверенности';
							|en = 'Не задан СНИЛС доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
					
				ИначеЕсли СтрДлина(СтрокаДоверенности.ДоверительФЛ_СНИЛС) <> 14 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный СНИЛС доверителя корневой доверенности';
							|en = 'Указан некорректный СНИЛС доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если СтрокаДоверенности <> Неопределено И ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ДатаРождения)
					И СтрокаДоверенности.ДоверительФЛ_ДатаРождения < МинимальнаяДата Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						СтрШаблон(
							НСтр("ru = 'Дата рождения доверителя корневой доверенности не может быль раньше %1';
								|en = 'Дата рождения доверителя корневой доверенности не может быль раньше %1'"),
							Формат(МинимальнаяДата, "ДЛФ=Д")),
						"НомерКорневойДоверенности"));
					
				ИначеЕсли СтрокаДоверенности <> Неопределено И ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ДатаРождения)
					И СтрокаДоверенности.ДоверительФЛ_ДатаРождения > МаксимальнаяДата Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						СтрШаблон(
							НСтр("ru = 'Дата рождения доверителя корневой доверенности не может быль позднее %1';
								|en = 'Дата рождения доверителя корневой доверенности не может быль позднее %1'"),
							Формат(МаксимальнаяДата, "ДЛФ=Д")),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
					?(СтрокаДоверенности = Неопределено, "", СтрокаДоверенности.ДоверительФЛ_ВидДок));
				Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
					И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
					И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Вид документа доверителя корневой доверенности, не поддерживается';
							|en = 'Вид документа доверителя корневой доверенности, не поддерживается'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если СтрокаДоверенности = Неопределено
					ИЛИ СтрДлина(СокрЛП(СтрокаДоверенности.ДоверительФЛ_СерДок)
					+ СокрЛП(СтрокаДоверенности.ДоверительФЛ_НомДок)) = 0 Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не заданы серии и номера документа корневой доверенности';
							|en = 'Не заданы серии и номера документа корневой доверенности'"),
						"НомерКорневойДоверенности"));
					
				ИначеЕсли СтрДлина(СокрЛП(СтрокаДоверенности.ДоверительФЛ_СерДок)
					+ СокрЛП(СтрокаДоверенности.ДоверительФЛ_НомДок)) > 25 Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Длина серии и номера документа корневой доверенности больше 25 символов';
							|en = 'Длина серии и номера документа корневой доверенности больше 25 символов'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если СтрокаДоверенности = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ДатаДок) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задана дата выдачи документа доверителя корневой доверенности';
							|en = 'Не задана дата выдачи документа доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
						
				ИначеЕсли СтрокаДоверенности.ДоверительФЛ_ДатаДок < МинимальнаяДата Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						СтрШаблон(
							НСтр("ru = 'Дата выдачи документа доверителя корневой доверенности не может быль раньше %1';
								|en = 'Дата выдачи документа доверителя корневой доверенности не может быль раньше %1'"),
							Формат(МинимальнаяДата, "ДЛФ=Д")),
						"НомерКорневойДоверенности"));
				ИначеЕсли СтрокаДоверенности.ДоверительФЛ_ДатаДок > МаксимальнаяДата Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						СтрШаблон(
							НСтр("ru = 'Дата выдачи документа доверителя корневой доверенности не может быль позднее %1';
								|en = 'Дата выдачи документа доверителя корневой доверенности не может быль позднее %1'"),
							Формат(МаксимальнаяДата, "ДЛФ=Д")),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если (СтрокаДоверенности = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_ВыдДок))
					И КодВидаДокумента = "21" Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задано наименование органа, выдавшего документ доверителя корневой доверенности';
							|en = 'Не задано наименование органа, выдавшего документ доверителя корневой доверенности'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
				
				Если СтрокаДоверенности <> Неопределено И ЗначениеЗаполнено(СтрокаДоверенности.ДоверительФЛ_КодВыдДок)
					И СтрДлина(СокрЛП(СтрокаДоверенности.ДоверительФЛ_КодВыдДок)) <> 7 Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Длина кода подразделения документа доверителя корневой доверенности не 7 символов';
							|en = 'Длина кода подразделения документа доверителя корневой доверенности не 7 символов'"),
						"НомерКорневойДоверенности"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// доверитель
	
	Доверитель_ЮридическоеЛицо = ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_ИНН);
	
	Если Доверитель_ЮридическоеЛицо Тогда
		Если НастройкиВызова.ВыполнятьПроверкиДоверителя Тогда
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_НаимОрг) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано наименование организации доверителя';
						|en = 'Не задано наименование организации доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_ИНН) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан ИНН организации доверителя';
						|en = 'Не задан ИНН организации доверителя'"), "Доверитель"));
			ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				Доверенность.ДоверительЮЛ_ИНН, Ложь) Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ИНН организации доверителя';
						|en = 'Указан некорректный ИНН организации доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_КПП) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан КПП организации доверителя';
						|en = 'Не задан КПП организации доверителя'"), "Доверитель"));
			ИначеЕсли СтрДлина(СокрЛП(Доверенность.ДоверительЮЛ_КПП)) <> 9 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный КПП организации доверителя';
						|en = 'Указан некорректный КПП организации доверителя'"), "Доверитель"));
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЭтоПередоверие И Доверенность.ДоверительЮЛ_ИностраннаяОрганизация Тогда
			Если НастройкиВызова.ВыполнятьПроверкиДоверителя Тогда
				Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_АдрРус)
					И НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_АдрЛат) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан адрес организации доверителя';
							|en = 'Не задан адрес организации доверителя'"), "Доверитель"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_СтрРег) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задана страна регистрации организации доверителя';
							|en = 'Не задана страна регистрации организации доверителя'"), "Доверитель"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_РегНомер) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан регистрационный номер организации доверителя';
							|en = 'Не задан регистрационный номер организации доверителя'"), "Доверитель"));
				КонецЕсли;
				
				СтрокиФИО = Доверенность.ФИО.НайтиСтроки(Новый Структура("Владелец",
					ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
				
				Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задана фамилия руководителя обособленного подразделения доверителя';
							|en = 'Не задана фамилия руководителя обособленного подразделения доверителя'"), "Доверитель"));
				КонецЕсли;
				
				Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задано имя руководителя обособленного подразделения доверителя';
							|en = 'Не задано имя руководителя обособленного подразделения доверителя'"), "Доверитель"));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ИНН)
					И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
					Доверенность.ДоверительФЛ_ИНН, Истина) Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ИНН руководителя обособленного подразделения доверителя';
							|en = 'Указан некорректный ИНН руководителя обособленного подразделения доверителя'"), "Доверитель"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_Пол) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан пол руководителя обособленного подразделения доверителя';
							|en = 'Не задан пол руководителя обособленного подразделения доверителя'"), "Доверитель"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ДатаРождения) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задана дата рождения руководителя обособленного подразделения доверителя';
							|en = 'Не задана дата рождения руководителя обособленного подразделения доверителя'"), "Доверитель"));
				ИначеЕсли Доверенность.ДоверительФЛ_ДатаРождения < МинимальнаяДата Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						СтрШаблон(
							НСтр("ru = 'Дата рождения руководителя обособленного подразделения доверителя не может быль раньше %1';
								|en = 'Дата рождения руководителя обособленного подразделения доверителя не может быль раньше %1'"),
							Формат(МинимальнаяДата, "ДЛФ=Д")),
						"Доверитель"));
				ИначеЕсли Доверенность.ДоверительФЛ_ДатаРождения > МаксимальнаяДата Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						СтрШаблон(
							НСтр("ru = 'Дата рождения руководителя обособленного подразделения доверителя не может быль позднее %1';
								|en = 'Дата рождения руководителя обособленного подразделения доверителя не может быль позднее %1'"),
							Формат(МаксимальнаяДата, "ДЛФ=Д")),
						"Доверитель"));
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если НастройкиВызова.ВыполнятьПроверкиДоверителя Тогда
				Если НЕ ЭтоПередоверие И НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_АдрРус) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан адрес организации доверителя';
							|en = 'Не задан адрес организации доверителя'"), "Доверитель"));
				КонецЕсли;
				
				Если НЕ ЭтоПередоверие И НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_ОГРН) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан ОГРН организации доверителя';
							|en = 'Не задан ОГРН организации доверителя'"), "Доверитель"));
					
				ИначеЕсли ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_ОГРН)
					И СтрДлина(СокрЛП(Доверенность.ДоверительЮЛ_ОГРН)) <> 13 Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ОГРН организации доверителя';
							|en = 'Указан некорректный ОГРН организации доверителя'"), "Доверитель"));
				КонецЕсли;
			КонецЕсли;
			
			ЛицоБезДов_ЮридическоеЛицо = НЕ ЭтоВерсия5_02 И ЗначениеЗаполнено(Доверенность.ЛицоБезДовЮЛ_ИНН);
			
			Если НастройкиВызова.ВыполнятьПроверкиЛицаБезДоверенностиЮЛ И ЛицоБезДов_ЮридическоеЛицо Тогда
				Если НЕ ЗначениеЗаполнено(Доверенность.ЛицоБезДовЮЛ_НаимОрг) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задано наименование управляющей организации, действующей без доверенности';
							|en = 'Не задано наименование управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Доверенность.ЛицоБезДовЮЛ_ИНН) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан ИНН управляющей организации, действующей без доверенности';
							|en = 'Не задан ИНН управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
					Доверенность.ЛицоБезДовЮЛ_ИНН, Ложь) Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ИНН управляющей организации, действующей без доверенности';
							|en = 'Указан некорректный ИНН управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Доверенность.ЛицоБезДовЮЛ_КПП) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан КПП управляющей организации, действующей без доверенности';
							|en = 'Не задан КПП управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				ИначеЕсли СтрДлина(СокрЛП(Доверенность.ЛицоБезДовЮЛ_КПП)) <> 9 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный КПП управляющей организации, действующей без доверенности';
							|en = 'Указан некорректный КПП управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Доверенность.ЛицоБезДовЮЛ_ОГРН)
					И СтрДлина(СокрЛП(Доверенность.ЛицоБезДовЮЛ_ОГРН)) <> 13 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ОГРН управляющей организации, действующей без доверенности';
							|en = 'Указан некорректный ОГРН управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
			КонецЕсли;
			
			Если НастройкиВызова.ВыполнятьПроверкиЛицаБезДоверенностиФЛ Тогда
				СтрокиФИО = Доверенность.ФИО.НайтиСтроки(Новый Структура("Владелец",
					ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
				
				Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задана фамилия физического лица со стороны доверителя';
							|en = 'Не задана фамилия физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
				Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задано имя физического лица со стороны доверителя';
							|en = 'Не задано имя физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
				Если НЕ ЭтоВерсия5_02 И НЕ ЗначениеЗаполнено(Доверенность.ЛицоБезДовФЛ_ИНН) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан ИНН физического лица со стороны доверителя';
							|en = 'Не задан ИНН физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				ИначеЕсли ЗначениеЗаполнено(Доверенность.ЛицоБезДовФЛ_ИНН)
					И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
					Доверенность.ЛицоБезДовФЛ_ИНН, Истина) Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ИНН физического лица со стороны доверителя';
							|en = 'Указан некорректный ИНН физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Доверенность.ЛицоБезДовФЛ_СНИЛС) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан СНИЛС физического лица со стороны доверителя';
							|en = 'Не задан СНИЛС физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				ИначеЕсли СтрДлина(СокрЛП(Доверенность.ЛицоБезДовФЛ_СНИЛС)) <> 14 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный СНИЛС физического лица со стороны доверителя';
							|en = 'Указан некорректный СНИЛС физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
				Если ЭтоПередоверие Тогда
					СтрокиУдостоверений = Доверенность.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
						ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
					
					Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВидДок) Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Не задан вид документа физического лица со стороны доверителя';
								|en = 'Не задан вид документа физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
					КонецЕсли;
					
					КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
						?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].ВидДок));
					Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
						И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
						И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
						
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Вид документа физического лица со стороны доверителя не поддерживается';
								|en = 'Вид документа физического лица со стороны доверителя не поддерживается'"), "ЛицоБезДовФЛ"));
					КонецЕсли;
					
					Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтрокиУдостоверений[0].СерДок)
						+ СокрЛП(СтрокиУдостоверений[0].НомДок)) Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Не заданы серия и номер документа физического лица со стороны доверителя';
								|en = 'Не заданы серия и номер документа физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
					КонецЕсли;
					
					Если СтрокиУдостоверений.Количество() <> 0 И СтрДлина(СокрЛП(СтрокиУдостоверений[0].СерДок)
						+ СокрЛП(СтрокиУдостоверений[0].НомДок)) > 25 Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Длина серии и номера документа физического лица со стороны доверителя больше 25 символов';
								|en = 'Длина серии и номера документа физического лица со стороны доверителя больше 25 символов'"),
							"ЛицоБезДовФЛ"));
					КонецЕсли;
					
					Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ДатаДок) Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Не задана дата выдачи документа доверителя';
								|en = 'Не задана дата выдачи документа доверителя'"), "ЛицоБезДовФЛ"));
					ИначеЕсли СтрокиУдостоверений[0].ДатаДок < МинимальнаяДата Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							СтрШаблон(
								НСтр("ru = 'Дата выдачи документа физического лица со стороны доверителя не может быль раньше %1';
									|en = 'Дата выдачи документа физического лица со стороны доверителя не может быль раньше %1'"),
								Формат(МинимальнаяДата, "ДЛФ=Д")),
							"ЛицоБезДовФЛ"));
					ИначеЕсли СтрокиУдостоверений[0].ДатаДок > МаксимальнаяДата Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							СтрШаблон(
								НСтр("ru = 'Дата выдачи документа физического лица со стороны доверителя не может быль позднее %1';
									|en = 'Дата выдачи документа физического лица со стороны доверителя не может быль позднее %1'"),
								Формат(МаксимальнаяДата, "ДЛФ=Д")),
							"ЛицоБезДовФЛ"));
					КонецЕсли;
					
					Если (СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВыдДок))
						И КодВидаДокумента = "21" Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Не задано наименование органа, выдавшего документ физического лица со стороны доверителя';
								|en = 'Не задано наименование органа, выдавшего документ физического лица со стороны доверителя'"),
							"ЛицоБезДовФЛ"));
					КонецЕсли;
					
					Если СтрокиУдостоверений.Количество() <> 0 И ЗначениеЗаполнено(СтрокиУдостоверений[0].КодВыдДок)
						И СтрДлина(СокрЛП(СтрокиУдостоверений[0].КодВыдДок)) <> 7 Тогда
						Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
							НСтр("ru = 'Длина кода подразделения документа физического лица со стороны доверителя не 7 символов';
								|en = 'Длина кода подразделения документа физического лица со стороны доверителя не 7 символов'"),
							"ЛицоБезДовФЛ"));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если НастройкиВызова.ВыполнятьПроверкиДоверителя Тогда
			СтрокиФИО = Доверенность.ФИО.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана фамилия доверителя';
						|en = 'Не задана фамилия доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано имя доверителя';
						|en = 'Не задано имя доверителя'"), "Доверитель"));
			КонецЕсли;
			
			СтрокиУдостоверений = Доверенность.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
			
			Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВидДок) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан вид документа доверителя';
						|en = 'Не задан вид документа доверителя'"), "Доверитель"));
			КонецЕсли;
			
			КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
				?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].ВидДок));
			Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
				И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
				И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Вид документа доверителя не поддерживается';
						|en = 'Вид документа доверителя не поддерживается'"), "Доверитель"));
			КонецЕсли;
			
			Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтрокиУдостоверений[0].СерДок)
				+ СокрЛП(СтрокиУдостоверений[0].НомДок)) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не заданы серия и номер документа доверителя';
						|en = 'Не заданы серия и номер документа доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если СтрокиУдостоверений.Количество() <> 0 И СтрДлина(СокрЛП(СтрокиУдостоверений[0].СерДок)
				+ СокрЛП(СтрокиУдостоверений[0].НомДок)) > 25 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Длина серии и номера документа доверителя больше 25 символов';
						|en = 'Длина серии и номера документа доверителя больше 25 символов'"), "Доверитель"));
			КонецЕсли;
			
			Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ДатаДок) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана дата выдачи документа доверителя';
						|en = 'Не задана дата выдачи документа доверителя'"), "Доверитель"));
			ИначеЕсли СтрокиУдостоверений[0].ДатаДок < МинимальнаяДата Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					СтрШаблон(
						НСтр("ru = 'Дата выдачи документа доверителя не может быль раньше %1';
							|en = 'Дата выдачи документа доверителя не может быль раньше %1'"),
						Формат(МинимальнаяДата, "ДЛФ=Д")),
					"Доверитель"));
			ИначеЕсли СтрокиУдостоверений[0].ДатаДок > МаксимальнаяДата Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					СтрШаблон(
						НСтр("ru = 'Дата выдачи документа доверителя не может быль позднее %1';
							|en = 'Дата выдачи документа доверителя не может быль позднее %1'"),
						Формат(МаксимальнаяДата, "ДЛФ=Д")),
					"Доверитель"));
			КонецЕсли;
			
			Если (СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВыдДок))
				И КодВидаДокумента = "21" Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано наименование органа, выдавшего документ доверителя';
						|en = 'Не задано наименование органа, выдавшего документ доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если СтрокиУдостоверений.Количество() <> 0 И ЗначениеЗаполнено(СтрокиУдостоверений[0].КодВыдДок)
				И СтрДлина(СокрЛП(СтрокиУдостоверений[0].КодВыдДок)) <> 7 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Длина кода подразделения документа доверителя не 7 символов';
						|en = 'Длина кода подразделения документа доверителя не 7 символов'"), "Доверитель"));
			КонецЕсли;
			
			Если НЕ ЭтоВерсия5_02 И НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ИНН) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан ИНН доверителя';
						|en = 'Не задан ИНН доверителя'"), "Доверитель"));
			ИначеЕсли ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ИНН)
				И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				Доверенность.ДоверительФЛ_ИНН, Истина) Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ИНН доверителя';
						|en = 'Указан некорректный ИНН доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ОГРН)
				И СтрДлина(СокрЛП(Доверенность.ДоверительФЛ_ОГРН)) <> 15 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ОГРНИП доверителя';
						|en = 'Указан некорректный ОГРНИП доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_СНИЛС) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан СНИЛС доверителя';
						|en = 'Не задан СНИЛС доверителя'"), "Доверитель"));
			ИначеЕсли СтрДлина(СокрЛП(Доверенность.ДоверительФЛ_СНИЛС)) <> 14 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный СНИЛС доверителя';
						|en = 'Указан некорректный СНИЛС доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ДатаРождения)
				И Доверенность.ДоверительФЛ_ДатаРождения < МинимальнаяДата Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					СтрШаблон(
						НСтр("ru = 'Дата рождения доверителя не может быль раньше %1';
							|en = 'Дата рождения доверителя не может быль раньше %1'"),
						Формат(МинимальнаяДата, "ДЛФ=Д")),
					"Доверитель"));
			ИначеЕсли ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ДатаРождения)
				И Доверенность.ДоверительФЛ_ДатаРождения > МаксимальнаяДата Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					СтрШаблон(
						НСтр("ru = 'Дата рождения доверителя не может быль позднее %1';
							|en = 'Дата рождения доверителя не может быль позднее %1'"),
						Формат(МаксимальнаяДата, "ДЛФ=Д")),
					"Доверитель"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// представитель
	
	Если НастройкиВызова.ВыполнятьПроверкиПредставителя Тогда
		ТребоватьОГРНДляПредставителяФЛ = Ложь;
		
		Представители = Неопределено;
		Если ЭтоВерсия5_02 Тогда
			КоличествоПредставителей = Доверенность.Представители.Количество();
			Если КоличествоПредставителей > 1 Тогда
				Представители = Доверенность.Представители;
			КонецЕсли;
		Иначе
			КоличествоПредставителей = 1;
		КонецЕсли;
		Если Представители = Неопределено Тогда
			Представители = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Доверенность);
			КоличествоПредставителей = 1;
		КонецЕсли;
		
		Для ИндексПредставителя = 0 По КоличествоПредставителей - 1 Цикл
			СтрокаПредставителя = Представители[ИндексПредставителя];
			
			ДобавляемыйНомерПредставителя = ?(КоличествоПредставителей > 1, " " + Строка(ИндексПредставителя + 1), "");
			
			Представитель_ЮридическоеЛицо = ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН);
			
			Если Представитель_ЮридическоеЛицо Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_НаимОрг) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не задано наименование организации представителя%1';
							|en = 'Не задано наименование организации представителя%1'"),
						ДобавляемыйНомерПредставителя);
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						ТекстОшибки, ?(КоличествоПредставителей > 1, "", "Представитель")));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не задан ИНН организации представителя%1';
							|en = 'Не задан ИНН организации представителя%1'"),
						ДобавляемыйНомерПредставителя);
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						ТекстОшибки, ?(КоличествоПредставителей > 1, "", "Представитель")));
					
				ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
					СтрокаПредставителя.ПредставительЮЛ_ИНН, Ложь) Тогда
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Указан некорректный ИНН организации представителя%1';
							|en = 'Указан некорректный ИНН организации представителя%1'"),
						ДобавляемыйНомерПредставителя);
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						ТекстОшибки, ?(КоличествоПредставителей > 1, "", "Представитель")));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_КПП) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не задан КПП организации представителя%1';
							|en = 'Не задан КПП организации представителя%1'"),
						ДобавляемыйНомерПредставителя);
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						ТекстОшибки, ?(КоличествоПредставителей > 1, "", "Представитель")));
					
				ИначеЕсли СтрДлина(СокрЛП(СтрокаПредставителя.ПредставительЮЛ_КПП)) <> 9 Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Указан некорректный КПП организации представителя%1';
							|en = 'Указан некорректный КПП организации представителя%1'"),
						ДобавляемыйНомерПредставителя);
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						ТекстОшибки, ?(КоличествоПредставителей > 1, "", "Представитель")));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ОГРН)
					И СтрДлина(СокрЛП(СтрокаПредставителя.ПредставительЮЛ_ОГРН)) <> 13 Тогда
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Указан некорректный ОГРН организации представителя%1';
							|en = 'Указан некорректный ОГРН организации представителя%1'"),
						ДобавляемыйНомерПредставителя);
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						ТекстОшибки, ?(КоличествоПредставителей > 1, "", "Представитель")));
				КонецЕсли;
			КонецЕсли;
			
			Если КоличествоПредставителей > 1 Тогда
				ПредставительФЛ_Фамилия = СтрокаПредставителя.ПредставительФЛ_Фамилия;
				ПредставительФЛ_Имя 	= СтрокаПредставителя.ПредставительФЛ_Имя;
				
			Иначе
				СтрокиФИО = Доверенность.ФИО.НайтиСтроки(Новый Структура("Владелец",
					ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
				ПредставительФЛ_Фамилия = ?(СтрокиФИО.Количество() = 0, "", СтрокиФИО[0].Фамилия);
				ПредставительФЛ_Имя 	= ?(СтрокиФИО.Количество() = 0, "", СтрокиФИО[0].Имя);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПредставительФЛ_Фамилия) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задана фамилия представителя%1';
						|en = 'Не задана фамилия представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ФИО")));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПредставительФЛ_Имя) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задано имя физлица-представителя%1';
						|en = 'Не задано имя физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ФИО")));
			КонецЕсли;
			
			Если КоличествоПредставителей > 1 Тогда
				ПредставительФЛ_ВидДок 		= СтрокаПредставителя.ПредставительФЛ_ВидДок;
				ПредставительФЛ_СерДок 		= СтрокаПредставителя.ПредставительФЛ_СерДок;
				ПредставительФЛ_НомДок 		= СтрокаПредставителя.ПредставительФЛ_НомДок;
				ПредставительФЛ_ДатаДок 	= СтрокаПредставителя.ПредставительФЛ_ДатаДок;
				ПредставительФЛ_ВыдДок 		= СтрокаПредставителя.ПредставительФЛ_ВыдДок;
				ПредставительФЛ_КодВыдДок 	= СтрокаПредставителя.ПредставительФЛ_КодВыдДок;
				
			Иначе
				СтрокиУдостоверений = Доверенность.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
					ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
				ПредставительФЛ_ВидДок 		= ?(СтрокиУдостоверений.Количество() = 0, Неопределено, СтрокиУдостоверений[0].ВидДок);
				ПредставительФЛ_СерДок 		= ?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].СерДок);
				ПредставительФЛ_НомДок 		= ?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].НомДок);
				ПредставительФЛ_ДатаДок 	= ?(СтрокиУдостоверений.Количество() = 0, Неопределено, СтрокиУдостоверений[0].ДатаДок);
				ПредставительФЛ_ВыдДок 		= ?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].ВыдДок);
				ПредставительФЛ_КодВыдДок 	= ?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].КодВыдДок);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПредставительФЛ_ВидДок) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задан вид документа физлица-представителя%1';
						|en = 'Не задан вид документа физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(ПредставительФЛ_ВидДок);
			Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
				И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
				И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Вид документа физлица-представителя%1 не поддерживается';
						|en = 'Вид документа физлица-представителя%1 не поддерживается'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(ПредставительФЛ_СерДок) + СокрЛП(ПредставительФЛ_НомДок)) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не заданы серия и номер документа физлица-представителя%1';
						|en = 'Не заданы серия и номер документа физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			Если СтрДлина(СокрЛП(ПредставительФЛ_СерДок) + СокрЛП(ПредставительФЛ_НомДок)) > 25 Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Длина серии и номера документа физлица-представителя%1 больше 25 символов';
						|en = 'Длина серии и номера документа физлица-представителя%1 больше 25 символов'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПредставительФЛ_ДатаДок) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задана дата выдачи документа физлица-представителя%1';
						|en = 'Не задана дата выдачи документа физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			ИначеЕсли ПредставительФЛ_ДатаДок < МинимальнаяДата Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Дата выдачи документа физлица-представителя%1 не может быль раньше %2';
						|en = 'Дата выдачи документа физлица-представителя%1 не может быль раньше %2'"),
					ДобавляемыйНомерПредставителя,
					Формат(МинимальнаяДата, "ДЛФ=Д"));
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			ИначеЕсли ПредставительФЛ_ДатаДок > МаксимальнаяДата Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Дата выдачи документа физлица-представителя%1 не может быль позднее %2';
						|en = 'Дата выдачи документа физлица-представителя%1 не может быль позднее %2'"),
					ДобавляемыйНомерПредставителя,
					Формат(МаксимальнаяДата, "ДЛФ=Д"));
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПредставительФЛ_ВыдДок) И КодВидаДокумента = "21" Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задано наименование органа, выдавшего документ физлица-представителя%1';
						|en = 'Не задано наименование органа, выдавшего документ физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПредставительФЛ_КодВыдДок) И СтрДлина(СокрЛП(ПредставительФЛ_КодВыдДок)) <> 7 Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Длина кода подразделения документа физлица-представителя%1 не 7 символов';
						|en = 'Длина кода подразделения документа физлица-представителя%1 не 7 символов'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			Если НЕ ЭтоВерсия5_02 И НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ИНН) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задан ИНН физлица-представителя%1';
						|en = 'Не задан ИНН физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ИНН")));
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ИНН)
				И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				СтрокаПредставителя.ПредставительФЛ_ИНН, Истина) Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Указан некорректный ИНН физлица-представителя%1';
						|en = 'Указан некорректный ИНН физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ИНН")));
			КонецЕсли;
			
			Если ТребоватьОГРНДляПредставителяФЛ И НЕ Представитель_ЮридическоеЛицо
				И НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ОГРН) Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задан ОГРНИП физлица-представителя%1';
						|en = 'Не задан ОГРНИП физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ОГРН")));
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ОГРН)
				И СтрДлина(СокрЛП(СтрокаПредставителя.ПредставительФЛ_ОГРН)) <> 15 Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Указан некорректный ОГРНИП физлица-представителя%1';
						|en = 'Указан некорректный ОГРНИП физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ОГРН")));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_СНИЛС) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задан СНИЛС физлица-представителя%1';
						|en = 'Не задан СНИЛС физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_СНИЛС")));
				
			ИначеЕсли СтрДлина(СокрЛП(СтрокаПредставителя.ПредставительФЛ_СНИЛС)) <> 14 Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Указан некорректный СНИЛС физлица-представителя%1';
						|en = 'Указан некорректный СНИЛС физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_СНИЛС")));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ДатаРождения)
				И СтрокаПредставителя.ПредставительФЛ_ДатаРождения < МинимальнаяДата Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Дата рождения физлица-представителя%1 не может быль раньше %2';
						|en = 'Дата рождения физлица-представителя%1 не может быль раньше %2'"),
					ДобавляемыйНомерПредставителя,
					Формат(МинимальнаяДата, "ДЛФ=Д"));
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ДатаРождения")));
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ДатаРождения)
				И СтрокаПредставителя.ПредставительФЛ_ДатаРождения > МаксимальнаяДата Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Дата рождения физлица-представителя%1 не может быль позднее %2';
						|en = 'Дата рождения физлица-представителя%1 не может быль позднее %2'"),
					ДобавляемыйНомерПредставителя,
					Формат(МаксимальнаяДата, "ДЛФ=Д"));
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ДатаРождения")));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// налоговые органы
	
	Если НастройкиВызова.ВыполнятьПроверкиНалоговыхОрганов Тогда
		Если НЕ ЗначениеЗаполнено(Доверенность.КодНалоговогоОрганаПредставления) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан код налогового органа - получателя';
					|en = 'Не задан код налогового органа - получателя'"), "КодНалоговогоОрганаПредставления"));
		ИначеЕсли СтрДлина(СокрЛП(Доверенность.КодНалоговогоОрганаПредставления)) <> 4 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный код налогового органа - получателя';
					|en = 'Указан некорректный код налогового органа - получателя'"), "КодНалоговогоОрганаПредставления"));
		КонецЕсли;
		
		Для каждого НалоговыйОрганДействия Из Доверенность.НалоговыеОрганыДействия Цикл
			Если СтрДлина(СокрЛП(НалоговыйОрганДействия.КодНалоговогоОргана)) <> 4 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					СтрШаблон(
						НСтр("ru = 'Указан некорректный код налогового органа, для которого действует доверенность, ""%1""';
							|en = 'Указан некорректный код налогового органа, для которого действует доверенность, ""%1""'"),
						НалоговыйОрганДействия.КодНалоговогоОргана),
					""));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузкиДляОтмены(ОбъектИлиСсылка, ПараметрыОперации = Неопределено) Экспорт
	
	ПараметрыОперацииВызова = Новый Структура;
	ПараметрыОперацииВызова.Вставить("ПричинаОтмены", 							"");
	ПараметрыОперацииВызова.Вставить("ДатаОтмены", 								Неопределено);
	ПараметрыОперацииВызова.Вставить("УникальныйИдентификаторДоверенности", 	"");
	ПараметрыОперацииВызова.Вставить("ДолжностьРуководителяДоверителя", 		"");
	ПараметрыОперацииВызова.Вставить("ДатаРожденияДоверителя", 					Неопределено);
	ПараметрыОперацииВызова.Вставить("ТелефонПодписанта", 						"");
	Если ПараметрыОперации <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОперацииВызова, ПараметрыОперации);
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектИлиСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр") Тогда
		Доверенность = ОбъектИлиСсылка.ПолучитьОбъект();
	Иначе
		Доверенность = ОбъектИлиСсылка;
	КонецЕсли;
	
	// основные
	
	Если НЕ ЗначениеЗаполнено(Доверенность.НомерДоверенности) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан номер доверенности';
				|en = 'Не задан номер доверенности'"), "НомерДоверенности"));
	КонецЕсли;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ГодДатыСеанса = Год(ДатаСеанса);
	МинимальнаяДата = Дата(1900, 1, 1);
	ГодМаксимальнойДаты = Цел((ГодДатыСеанса + 50) / 100) * 100 + 99;
	МаксимальнаяДата = Дата(ГодМаксимальнойДаты, 1, 1);
	МаксимальнаяДата = КонецГода(МаксимальнаяДата);
	
	Если НЕ ЗначениеЗаполнено(Доверенность.ДатаВыдачи) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана дата выдачи';
				|en = 'Не задана дата выдачи'"), "ДатаВыдачи"));
	ИначеЕсли Доверенность.ДатаВыдачи < МинимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата выдачи не может быль раньше %1';
					|en = 'Дата выдачи не может быль раньше %1'"),
				Формат(МинимальнаяДата, "ДЛФ=Д")),
			"ДатаВыдачи"));
	ИначеЕсли Доверенность.ДатаВыдачи > МаксимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата выдачи не может быль позднее %1';
					|en = 'Дата выдачи не может быль позднее %1'"),
				Формат(МаксимальнаяДата, "ДЛФ=Д")),
			"ДатаВыдачи"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОперацииВызова.ДатаОтмены) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана дата отзыва';
				|en = 'Не задана дата отзыва'"), "ДатаОтмены"));
	ИначеЕсли ПараметрыОперацииВызова.ДатаОтмены < МинимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата отзыва не может быль раньше %1';
					|en = 'Дата отзыва не может быль раньше %1'"),
				Формат(МинимальнаяДата, "ДЛФ=Д")),
			"ДатаОтмены"));
	ИначеЕсли ПараметрыОперацииВызова.ДатаОтмены > МаксимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата отзыва не может быль позднее %1';
					|en = 'Дата отзыва не может быль позднее %1'"),
				Формат(МаксимальнаяДата, "ДЛФ=Д")),
			"ДатаОтмены"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Доверенность.ДатаВыдачи) И ЗначениеЗаполнено(ПараметрыОперацииВызова.ДатаОтмены)
		И ПараметрыОперацииВызова.ДатаОтмены < Доверенность.ДатаВыдачи Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Дата выдачи доверенности не может быть больше даты отзыва';
				|en = 'Дата выдачи доверенности не может быть больше даты отзыва'"), "ДатаОтмены"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОперацииВызова.УникальныйИдентификаторДоверенности) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан уникальный идентификатор доверенности';
				|en = 'Не задан уникальный идентификатор доверенности'"), "УникальныйИдентификаторДоверенности"));
	ИначеЕсли СтрДлина(СокрЛП(ПараметрыОперацииВызова.УникальныйИдентификаторДоверенности)) <> 36 Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Указан некорректный уникальный идентификатор доверенности';
				|en = 'Указан некорректный уникальный идентификатор доверенности'"),
			"УникальныйИдентификаторДоверенности"));
	КонецЕсли;
	
	// доверитель
	
	Доверитель_ЮридическоеЛицо = ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_ИНН);
	
	Если Доверитель_ЮридическоеЛицо Тогда
		Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_НаимОрг) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано наименование организации доверителя';
					|en = 'Не задано наименование организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН организации доверителя';
					|en = 'Не задан ИНН организации доверителя'"), "Доверитель"));
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			Доверенность.ДоверительЮЛ_ИНН, Ложь) Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН организации доверителя';
					|en = 'Указан некорректный ИНН организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_КПП) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан КПП организации доверителя';
					|en = 'Не задан КПП организации доверителя'"), "Доверитель"));
		ИначеЕсли СтрДлина(СокрЛП(Доверенность.ДоверительЮЛ_КПП)) <> 9 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный КПП организации доверителя';
					|en = 'Указан некорректный КПП организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если Доверенность.ДоверительЮЛ_ИностраннаяОрганизация Тогда
			СтрокиФИО = Доверенность.ФИО.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана фамилия руководителя обособленного подразделения доверителя';
						|en = 'Не задана фамилия руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано имя руководителя обособленного подразделения доверителя';
						|en = 'Не задано имя руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ИНН)
				И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				Доверенность.ДоверительФЛ_ИНН, Истина) Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ИНН руководителя обособленного подразделения доверителя';
						|en = 'Указан некорректный ИНН руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
			
		Иначе
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_ОГРН) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан ОГРН организации доверителя';
						|en = 'Не задан ОГРН организации доверителя'"), "Доверитель"));
			ИначеЕсли СтрДлина(СокрЛП(Доверенность.ДоверительЮЛ_ОГРН)) <> 13 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ОГРН организации доверителя';
						|en = 'Указан некорректный ОГРН организации доверителя'"), "Доверитель"));
			КонецЕсли;
			
			ЛицоБезДов_ЮридическоеЛицо = ЗначениеЗаполнено(Доверенность.ЛицоБезДовЮЛ_ИНН);
			
			Если ЛицоБезДов_ЮридическоеЛицо Тогда
				Если НЕ ЗначениеЗаполнено(Доверенность.ЛицоБезДовЮЛ_НаимОрг) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задано наименование управляющей организации, действующей без доверенности';
							|en = 'Не задано наименование управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Доверенность.ЛицоБезДовЮЛ_ИНН) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан ИНН управляющей организации, действующей без доверенности';
							|en = 'Не задан ИНН управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
					Доверенность.ЛицоБезДовЮЛ_ИНН, Ложь) Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ИНН управляющей организации, действующей без доверенности';
							|en = 'Указан некорректный ИНН управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Доверенность.ЛицоБезДовЮЛ_КПП) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан КПП управляющей организации, действующей без доверенности';
							|en = 'Не задан КПП управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				ИначеЕсли СтрДлина(СокрЛП(Доверенность.ЛицоБезДовЮЛ_КПП)) <> 9 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный КПП управляющей организации, действующей без доверенности';
							|en = 'Указан некорректный КПП управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Доверенность.ЛицоБезДовЮЛ_ОГРН)
					И СтрДлина(СокрЛП(Доверенность.ЛицоБезДовЮЛ_ОГРН)) <> 13 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ОГРН управляющей организации, действующей без доверенности';
							|en = 'Указан некорректный ОГРН управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
			КонецЕсли;
			
			СтрокиФИО = Доверенность.ФИО.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана фамилия физического лица со стороны доверителя';
						|en = 'Не задана фамилия физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			КонецЕсли;
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано имя физического лица со стороны доверителя';
						|en = 'Не задано имя физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПараметрыОперацииВызова.ДолжностьРуководителяДоверителя) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана должность руководителя организации - доверителя';
						|en = 'Не задана должность руководителя организации - доверителя'"), "ДолжностьРуководителяДоверителя"));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		СтрокиФИО = Доверенность.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
		
		Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана фамилия доверителя';
					|en = 'Не задана фамилия доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано имя доверителя';
					|en = 'Не задано имя доверителя'"), "Доверитель"));
		КонецЕсли;
		
		СтрокиУдостоверений = Доверенность.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
		
		Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВидДок) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан вид документа доверителя';
					|en = 'Не задан вид документа доверителя'"), "Доверитель"));
		КонецЕсли;
		
		КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
			?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].ВидДок));
		Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
			И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
			И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Вид документа доверителя не поддерживается';
					|en = 'Вид документа доверителя не поддерживается'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтрокиУдостоверений[0].СерДок)
			+ СокрЛП(СтрокиУдостоверений[0].НомДок)) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не заданы серия и номер документа доверителя';
					|en = 'Не заданы серия и номер документа доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиУдостоверений.Количество() <> 0 И СтрДлина(СокрЛП(СтрокиУдостоверений[0].СерДок)
			+ СокрЛП(СтрокиУдостоверений[0].НомДок)) > 25 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Длина серии и номера документа доверителя больше 25 символов';
					|en = 'Длина серии и номера документа доверителя больше 25 символов'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ДатаДок) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана дата выдачи документа доверителя';
					|en = 'Не задана дата выдачи документа доверителя'"), "Доверитель"));
		ИначеЕсли СтрокиУдостоверений[0].ДатаДок < МинимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата выдачи документа доверителя не может быль раньше %1';
						|en = 'Дата выдачи документа доверителя не может быль раньше %1'"),
					Формат(МинимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		ИначеЕсли СтрокиУдостоверений[0].ДатаДок > МаксимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата выдачи документа доверителя не может быль позднее %1';
						|en = 'Дата выдачи документа доверителя не может быль позднее %1'"),
					Формат(МаксимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		КонецЕсли;
		
		Если (СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВыдДок))
			И КодВидаДокумента = "21" Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано наименование органа, выдавшего документ доверителя';
					|en = 'Не задано наименование органа, выдавшего документ доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиУдостоверений.Количество() <> 0 И ЗначениеЗаполнено(СтрокиУдостоверений[0].КодВыдДок)
			И СтрДлина(СокрЛП(СтрокиУдостоверений[0].КодВыдДок)) <> 7 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Длина кода подразделения документа доверителя не 7 символов';
					|en = 'Длина кода подразделения документа доверителя не 7 символов'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН доверителя';
					|en = 'Не задан ИНН доверителя'"), "Доверитель"));
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			Доверенность.ДоверительФЛ_ИНН, Истина) Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН доверителя';
					|en = 'Указан некорректный ИНН доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ОГРН) И СтрДлина(СокрЛП(Доверенность.ДоверительФЛ_ОГРН)) <> 15 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ОГРНИП доверителя';
					|en = 'Указан некорректный ОГРНИП доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыОперацииВызова.ДатаРожденияДоверителя) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана дата рождения доверителя';
					|en = 'Не задана дата рождения доверителя'"), "ДатаРожденияДоверителя"));
		ИначеЕсли ПараметрыОперацииВызова.ДатаРожденияДоверителя < МинимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата рождения доверителя не может быль раньше %1';
						|en = 'Дата рождения доверителя не может быль раньше %1'"),
					Формат(МинимальнаяДата, "ДЛФ=Д")),
				"ДатаРожденияДоверителя"));
		ИначеЕсли ПараметрыОперацииВызова.ДатаРожденияДоверителя > МаксимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата рождения доверителя не может быль позднее %1';
						|en = 'Дата рождения доверителя не может быль позднее %1'"),
					Формат(МаксимальнаяДата, "ДЛФ=Д")),
				"ДатаРожденияДоверителя"));
		КонецЕсли;
	КонецЕсли;
	
	// налоговые органы
	
	Если НЕ ЗначениеЗаполнено(Доверенность.КодНалоговогоОрганаПредставления) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан код налогового органа - получателя';
				|en = 'Не задан код налогового органа - получателя'"), "КодНалоговогоОрганаПредставления"));
	ИначеЕсли СтрДлина(СокрЛП(Доверенность.КодНалоговогоОрганаПредставления)) <> 4 Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Указан некорректный код налогового органа - получателя';
				|en = 'Указан некорректный код налогового органа - получателя'"), "КодНалоговогоОрганаПредставления"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоВидовПолномочийПредставителя() Экспорт
	
	Возврат 40;
	
КонецФункции

Функция ПолучитьСведенияДоверенности(
		СправочникСсылка,
		ОпределитьСтатусДоверенности = Ложь,
		ИсключеноПриложениеДоверенности = Ложь,
		ДанныеПредставителя = Неопределено) Экспорт
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = ?(ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует(),
		"МашиночитаемыеДоверенности", "");
	Если ЗначениеЗаполнено(ИмяТипаСправочникаМашиночитаемыеДоверенности)
		И ТипЗнч(СправочникСсылка) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		ДанныеСправочника = ДанныеМЧДЕдиногоФормата(СправочникСсылка);
		
	Иначе
		ДанныеСправочника = ДанныеИзИнформационнойБазы(СправочникСсылка);
	КонецЕсли;
	
	Если ДанныеПредставителя <> Неопределено Тогда
		ТекстСообщения = ДокументооборотСКОВызовСервера.УточнитьРеквизитыПредставителяМЧДФНС(ДанныеСправочника,
			СправочникСсылка, ДанныеПредставителя);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоВерсия5_02 = (ДанныеСправочника.ВерсияФормата = "5.02");
	ВыгружатьЛицоБезДовЮЛ = Ложь;
	
	// структура с результатом
	Сведения = Новый Структура;
	
	Сведения.Вставить("ВерсияФормата", ДанныеСправочника.ВерсияФормата);
	Сведения.Вставить("ИсключеноПриложениеДоверенности", ЭтоВерсия5_02 И ИсключеноПриложениеДоверенности <> Ложь
		И ДанныеПредставителя <> Неопределено
		И СокрЛП(ДанныеСправочника.РегистрационныйНомерДоверенности) = СокрЛП(ДанныеПредставителя.ДокументПредставителя));
	Сведения.Вставить("РегистрационныйНомерДоверенности", СокрЛП(ДанныеСправочника.РегистрационныйНомерДоверенности));
	
	// добавляем код НО
	Сведения.Вставить("КодНО", СокрЛП(ДанныеСправочника.КодНО));
	Сведения.Вставить("КодыНО", ДанныеСправочника.КодыНО);
	
	ФИОПредставителя = Новый Структура;
	ФИОПредставителя.Вставить("Фамилия", 	ДанныеСправочника.ПредставительФЛ_Фамилия);
	ФИОПредставителя.Вставить("Имя", 		ДанныеСправочника.ПредставительФЛ_Имя);
	ФИОПредставителя.Вставить("Отчество", 	ДанныеСправочника.ПредставительФЛ_Отчество);
	СвПредставительФЛ = Новый Структура;
	ПредставительЗаданСтрокойФИО = (ЗначениеЗаполнено(ДанныеСправочника.Представитель)
		И НЕ ЗначениеЗаполнено(ДанныеСправочника.ПредставительЮЛ_ИНН)
		И ТипЗнч(ДанныеСправочника.Представитель) = Тип("Строка")
		И ДанныеСправочника.Представитель = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(ФИОПредставителя));
	СвПредставительФЛ.Вставить("ЯвляетсяСотрудникомОрганизацииПоМЧД",
		ДанныеСправочника.ПредставительЯвляетсяСотрудником
			И НЕ ЗначениеЗаполнено(ДанныеСправочника.ПредставительЮЛ_ИНН)
		ИЛИ ЗначениеЗаполнено(ДанныеСправочника.ПредставительЮЛ_ИНН)
			И ЗначениеЗаполнено(ДанныеСправочника.ПредставительЮЛ_КПП)
			И ДанныеСправочника.ДоверительЮЛ_ИНН = ДанныеСправочника.ПредставительЮЛ_ИНН
			И ДанныеСправочника.ДоверительЮЛ_КПП = ДанныеСправочника.ПредставительЮЛ_КПП
		ИЛИ ПредставительЗаданСтрокойФИО);
	СвПредставительФЛ.Вставить("ЯвляетсяСотрудникомОрганизации",
		СвПредставительФЛ.ЯвляетсяСотрудникомОрганизацииПоМЧД
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеСправочника.ПредставительЮЛ_ИНН)
			И НЕ ЗначениеЗаполнено(ДанныеСправочника.ПредставительФЛ_ОГРН));
	ИспользоватьРеквизитыДоверителя = НЕ ЗначениеЗаполнено(ДанныеСправочника.ПредставительЮЛ_ИНН)
		И СвПредставительФЛ.ЯвляетсяСотрудникомОрганизации
		И СвПредставительФЛ.ЯвляетсяСотрудникомОрганизацииПоМЧД = Ложь; // представитель - физ.лицо, а не ИП
	
	// формируем структуру с учетными сведениями о самой доверенности
	УчетныеСведенияОДоверенности = Новый Структура;
	УчетныеСведенияОДоверенности.Вставить("Номер",
		?(ЗначениеЗаполнено(ДанныеСправочника.Номер), СокрЛП(ДанныеСправочника.Номер), "БН"));
	УчетныеСведенияОДоверенности.Вставить("Дата", ДанныеСправочника.ДатаВыдачи);
	УчетныеСведенияОДоверенности.Вставить("ДатаОкончания", ДанныеСправочника.ДатаОкончания);
	Сведения.Вставить("УчСвДов", УчетныеСведенияОДоверенности);
	
	// формируем сведения о представляемом лице
	СведенияОПредставляемомЛице = Новый Структура;
	СведенияОПредставляемомЛице.Вставить("ЯвляетсяФЛ", НЕ ЗначениеЗаполнено(ДанныеСправочника.ДоверительЮЛ_ИНН));
	КППДоверителя = "";
	Если СведенияОПредставляемомЛице.ЯвляетсяФЛ Тогда
		// общие сведения
		КодСтраныГражданства = ?(ЗначениеЗаполнено(ДанныеСправочника.ДоверительФЛ_Гражданство),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСправочника.ДоверительФЛ_Гражданство, "Код"), "");
		
		СведенияОПредставляемомЛице.Вставить("ИННФЛ", 		СокрЛП(ДанныеСправочника.ДоверительФЛ_ИНН));
		СведенияОПредставляемомЛице.Вставить("ОГРНИП", 		СокрЛП(ДанныеСправочника.ДоверительФЛ_ОГРН));
		СведенияОПредставляемомЛице.Вставить("Гражданство", СокрЛП(КодСтраныГражданства));
		СведенияОПредставляемомЛице.Вставить("ДатаРожд", 	ДанныеСправочника.ДоверительФЛ_ДатаРождения);
		
		// формируем структуру с Ф.И.О.
		ФИОПредпринимателя = Новый Структура;
		ФИОПредпринимателя.Вставить("Фамилия", 	ДанныеСправочника.ЛицоБезДовФЛ_Фамилия);
		ФИОПредпринимателя.Вставить("Имя", 		ДанныеСправочника.ЛицоБезДовФЛ_Имя);
		ФИОПредпринимателя.Вставить("Отчество", ДанныеСправочника.ЛицоБезДовФЛ_Отчество);
		СведенияОПредставляемомЛице.Вставить("ФИО", ФИОПредпринимателя);
		
		// формируем структуру со сведениями об удостоверении личности
		КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
			ДанныеСправочника.ЛицоБезДовФЛ_ВидДок);
		
		УдЛичнПредпринимателя = Новый Структура;
		УдЛичнПредпринимателя.Вставить("ВидДок", СокрЛП(КодВидаДокумента));
		УдЛичнПредпринимателя.Вставить("СерНомДок", СокрЛП(СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_СерДок) + " "
			+ СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_НомДок)));
		УдЛичнПредпринимателя.Вставить("ДатаДок", ДанныеСправочника.ЛицоБезДовФЛ_ДатаДок);
		УдЛичнПредпринимателя.Вставить("ВыдДок", СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_ВыдДок));
		УдЛичнПредпринимателя.Вставить("КодВыдДок", СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_КодВыдДок));
		СведенияОПредставляемомЛице.Вставить("УдЛичн", УдЛичнПредпринимателя);
		
	Иначе
		Если ИспользоватьРеквизитыДоверителя И ДанныеПредставителя <> Неопределено
			И ДокументооборотСКОКлиентСервер.ПараметрыОтправкиПоМЧДФНС(
			"КППСообщенияОДоверенностиИзРегистрацииНалоговогоОргана") Тогда
			
			КППДоверителя = СокрЛП(ДанныеПредставителя.КПП);
		КонецЕсли;
		СведенияОПредставляемомЛицеКПП = ?(ЗначениеЗаполнено(КППДоверителя),
			КППДоверителя, СокрЛП(ДанныеСправочника.ДоверительЮЛ_КПП));
		
		// общие сведения
		СведенияОПредставляемомЛице.Вставить("НаимОрг", СокрЛП(ДанныеСправочника.ДоверительЮЛ_НаимОрг));
		СведенияОПредставляемомЛице.Вставить("ИННЮЛ", СокрЛП(ДанныеСправочника.ДоверительЮЛ_ИНН));
		СведенияОПредставляемомЛице.Вставить("КПП", СведенияОПредставляемомЛицеКПП);
		СведенияОПредставляемомЛице.Вставить("ОГРН", СокрЛП(ДанныеСправочника.ДоверительЮЛ_ОГРН));
		
		// формируем структуру со сведениями о руководителе
		ФИОРуководителяОрганизации = Новый Структура;
		ФИОРуководителяОрганизации.Вставить("Фамилия", 	ДанныеСправочника.ЛицоБезДовФЛ_Фамилия);
		ФИОРуководителяОрганизации.Вставить("Имя", 		ДанныеСправочника.ЛицоБезДовФЛ_Имя);
		ФИОРуководителяОрганизации.Вставить("Отчество", ДанныеСправочника.ЛицоБезДовФЛ_Отчество);
		СвРукОргЮЛ = Новый Структура;
		СвРукОргЮЛ.Вставить("ИННФЛ", СокрЛП(ДанныеСправочника.ДоверительФЛ_ИНН));
		СвРукОргЮЛ.Вставить("ФИО", ФИОРуководителяОрганизации);
		СведенияОПредставляемомЛице.Вставить("СвРукОрг", СвРукОргЮЛ);
	КонецЕсли;
	Сведения.Вставить("СвПредст", СведенияОПредставляемомЛице);
	
	// формируем сведения о доверителе
	СвДовер = Новый Структура;
	СвДовер.Вставить("ПрДов", ?(ВыгружатьЛицоБезДовЮЛ И ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовЮЛ_ИНН), 2, 1));
	
	Если ВыгружатьЛицоБезДовЮЛ И ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовЮЛ_ИНН) Тогда
		// общие сведения
		ДоверительЮЛ = Новый Структура;
		ДоверительЮЛ.Вставить("НаимОрг", 	СокрЛП(ДанныеСправочника.ЛицоБезДовЮЛ_НаимОрг));
		ДоверительЮЛ.Вставить("ИННЮЛ", 		СокрЛП(ДанныеСправочника.ЛицоБезДовЮЛ_ИНН));
		ДоверительЮЛ.Вставить("КПП", 		СокрЛП(ДанныеСправочника.ЛицоБезДовЮЛ_КПП));
		ДоверительЮЛ.Вставить("ОГРН", 		СокрЛП(ДанныеСправочника.ЛицоБезДовЮЛ_ОГРН));
		
		// сведения о руководителе
		СвРукОрг = Новый Структура;
		СвРукОрг.Вставить("ИННФЛ", "");
		ФИОРуководителяОрганизации = Новый Структура;
		ФИОРуководителяОрганизации.Вставить("Фамилия", 	"");
		ФИОРуководителяОрганизации.Вставить("Имя", 		"");
		ФИОРуководителяОрганизации.Вставить("Отчество", "");
		СвРукОрг.Вставить("ФИО", ФИОРуководителяОрганизации);
		ДоверительЮЛ.Вставить("СвРукОрг", СвРукОрг);
		
		СвДовер.Вставить("СвЮЛ", ДоверительЮЛ);
	КонецЕсли;
	Сведения.Вставить("СвДовер", СвДовер);
	
	// выгружаем сведения о представителе и его полномочиях
	СвУпПред = Новый Структура;
	
	// выгружаем сведения о представителе
	СвПред = Новый Структура;
	
	Если ЗначениеЗаполнено(ДанныеСправочника.ПредставительЮЛ_ИНН) Тогда
		СвПредставительЮЛКПП = ?(ЗначениеЗаполнено(КППДоверителя),
			КППДоверителя, СокрЛП(ДанныеСправочника.ПредставительЮЛ_КПП));
		
		СвПредставительЮЛ = Новый Структура;
		СвПредставительЮЛ.Вставить("НаимОрг", 	СокрЛП(ДанныеСправочника.ПредставительЮЛ_НаимОрг));
		СвПредставительЮЛ.Вставить("ИННЮЛ", 	СокрЛП(ДанныеСправочника.ПредставительЮЛ_ИНН));
		СвПредставительЮЛ.Вставить("КПП", 		СвПредставительЮЛКПП);
		СвПредставительЮЛ.Вставить("ОГРН", 		СокрЛП(ДанныеСправочника.ПредставительЮЛ_ОГРН));
		СвПред.Вставить("СвОрг", СвПредставительЮЛ);
	КонецЕсли;
	
	КодСтраныГражданства = ?(ЗначениеЗаполнено(ДанныеСправочника.ПредставительФЛ_Гражданство),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСправочника.ПредставительФЛ_Гражданство, "Код"), "");
	
	СвПредставительФЛ.Вставить("ИННФЛ", 		СокрЛП(ДанныеСправочника.ПредставительФЛ_ИНН));
	СвПредставительФЛ.Вставить("ОГРНИП", 		СокрЛП(ДанныеСправочника.ПредставительФЛ_ОГРН));
	СвПредставительФЛ.Вставить("Гражданство", 	СокрЛП(КодСтраныГражданства));
	СвПредставительФЛ.Вставить("ДатаРожд", 		ДанныеСправочника.ПредставительФЛ_ДатаРождения);
	
	СвПредставительФЛ.Вставить("ФИО", ФИОПредставителя);
	
	КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
		ДанныеСправочника.ПредставительФЛ_ВидДок);
	
	УдЛичнПредпринимателя = Новый Структура;
	УдЛичнПредпринимателя.Вставить("ВидДок", СокрЛП(КодВидаДокумента));
	УдЛичнПредпринимателя.Вставить("СерНомДок", СокрЛП(СокрЛП(ДанныеСправочника.ПредставительФЛ_СерДок) + " "
		+ СокрЛП(ДанныеСправочника.ПредставительФЛ_НомДок)));
	УдЛичнПредпринимателя.Вставить("ДатаДок", ДанныеСправочника.ПредставительФЛ_ДатаДок);
	УдЛичнПредпринимателя.Вставить("ВыдДок", СокрЛП(ДанныеСправочника.ПредставительФЛ_ВыдДок));
	УдЛичнПредпринимателя.Вставить("КодВыдДок", СокрЛП(ДанныеСправочника.ПредставительФЛ_КодВыдДок));
	СвПредставительФЛ.Вставить("УдЛичн", УдЛичнПредпринимателя);
	СвПред.Вставить("СведФизЛ", СвПредставительФЛ);
	
	СвУпПред.Вставить("СвПред", СвПред);
	ОргФЛ = Новый Структура("ФЛ", СокрЛП(ДанныеСправочника.ДоверительЮЛ_ИНН));
	ПолнДов = Новый Массив;
	ПолномочияПредставителя = Новый Структура;
	ПолномочияПредставителя.Вставить("ПрОблПолн", 	ДанныеСправочника.ПолномочияПредставителя);
	ПолномочияПредставителя.Вставить("ОргФЛ", 		ОргФЛ);
	ПолномочияПредставителя.Вставить("ОКАТО", 		"");
	ПолнДов.Добавить(ПолномочияПредставителя);
	СвУпПред.Вставить("ПолнДов", ПолнДов);
	
	Сведения.Вставить("СвУпПред", СвУпПред);
	
	Если ОпределитьСтатусДоверенности Тогда
		Если ЗначениеЗаполнено(ИмяТипаСправочникаМашиночитаемыеДоверенности)
			И ТипЗнч(СправочникСсылка) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
			
			СостояниеМЧД = ДокументооборотСКОВызовСервера.ПрочитатьСостояниеМЧДЕдиногоФормата(СправочникСсылка);
			СтатусМЧДРР = ДокументооборотСКОВызовСервера.СтатусМЧДРРПоСтатусуМЧДЕдиногоФормата(
				?(СостояниеМЧД = Неопределено, Неопределено, СостояниеМЧД.ТехническийСтатус));
			Сведения.Вставить("Статус", СтатусМЧДРР);
			
		Иначе
			Сведения.Вставить("Статус", ДанныеСправочника.Статус);
		КонецЕсли;
	КонецЕсли;
	
	// возвращаем полученную структуру
	Возврат Сведения;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
		"ПрисоединитьДополнительныеТаблицы
		|ЭтотСписок КАК ЭтотСписок
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Владельцы
		|	ПО Владельцы.Ссылка = ЭтотСписок.Организация
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения
		|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = Владельцы.Ссылка
		|;
		|РазрешитьЧтение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)
		|ИЛИ ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
		|;
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БазовыйФункционалDOM

// https://soltau.ru/index.php/themes/dev/item/413

Функция ПодготовитьДокументDOM(ВходящиеДанные)
	
	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Если ТипЗнч(ТекущиеДанные) = Тип("ДвоичныеДанные") Тогда
		БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ТекущиеДанные);
		ЧтениеXML.ОткрытьПоток(Новый ПотокВПамяти(БуферДанных));
	ИначеЕсли ЭтоФайл Тогда
		ЧтениеXML.ОткрытьФайл(ТекущиеДанные);
	Иначе	
		ЧтениеXML.УстановитьСтроку(ТекущиеДанные);
	КонецЕсли;
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Возврат ДокументDOM;
	
КонецФункции

Функция ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска, ИспользоватьXPath = Истина)
	
	Результат = Новый Массив;
	
	Если ИспользоватьXPath Тогда
		ДокументВладелец = УзелВладелец.ДокументВладелец;
		РазыменовательИмен = Новый РазыменовательПространствИменDOM(ДокументВладелец);
		НашлиЭлементы = ДокументВладелец.ВычислитьВыражениеXPath(ТекстПоиска, УзелВладелец, РазыменовательИмен);
		
		ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
		Пока ОчереднойЭлемент <> Неопределено Цикл
			Результат.Добавить(ОчереднойЭлемент);
			ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
		КонецЦикла;
		
	Иначе
		ДокументИлиУзелВладелец = УзелВладелец;
		
		ИменаУзлов = СтрРазделить(ТекстПоиска, "/");
		КоличествоУзлов = ИменаУзлов.Количество();
		Для ИндексУзла = 0 По КоличествоУзлов - 1 Цикл
			ИмяУзла = ИменаУзлов[ИндексУзла];
			Если ИндексУзла = 0 И ИмяУзла = "" Тогда
				ДокументИлиУзелВладелец = УзелВладелец.ДокументВладелец;
			Иначе
				МассивУзлов = ДокументИлиУзелВладелец.ПолучитьЭлементыПоИмени(ИмяУзла);
				Если МассивУзлов.Количество() = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если ИндексУзла = КоличествоУзлов - 1 Тогда
					Результат = МассивУзлов;
				Иначе
					ДокументИлиУзелВладелец = МассивУзлов[0];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеДаты(ПредставлениеДаты)
	
	Результат = ПредставлениеДаты;
	
	МассивСтроки = СтрРазделить(ПредставлениеДаты, ".", Ложь);
	
	Если МассивСтроки.Количество() = 3 И СтрДлина(МассивСтроки[2]) = 4 Тогда
		Результат = МассивСтроки[2] + МассивСтроки[1] + МассивСтроки[0];
	Иначе
		МассивСтроки = СтрРазделить(ПредставлениеДаты, "-", Ложь);
		Если МассивСтроки.Количество() = 3 И СтрДлина(МассивСтроки[0]) = 4 Тогда
			Результат = МассивСтроки[0] + МассивСтроки[1] + МассивСтроки[2];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеПола(ПредставлениеПола)
	
	Если ПредставлениеПола = "2" Тогда
		Результат = Перечисления.ПолФизическогоЛица.Женский;
	Иначе
		Результат = Перечисления.ПолФизическогоЛица.Мужской;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеСтраны(ПредставлениеСтраны)
	
	Результат = Справочники.СтраныМира.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеСтраны) Тогда
		Результат = Справочники.СтраныМира.НайтиПоКоду(ПредставлениеСтраны);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеВидаДокумента(ПредставлениеДокумента)
	
	ВсеВарианты = Новый Соответствие;
	ВсеВарианты.Вставить("07", "Военный билет");
	ВсеВарианты.Вставить("10", "Паспорт иностранного гражданина");
	ВсеВарианты.Вставить("11", "Свидетельство о рассмотрении ходатайства о признании лица беженцем на территории Российской Федерации по существу");
	ВсеВарианты.Вставить("12", "Вид на жительство в Российской Федерации");
	ВсеВарианты.Вставить("13", "Удостоверение беженца");
	ВсеВарианты.Вставить("15", "Разрешение на временное проживание в Российской Федерации");
	ВсеВарианты.Вставить("19", "Свидетельство о предоставлении временного убежища на территории Российской Федерации");
	ВсеВарианты.Вставить("21", "Паспорт гражданина Российской Федерации");
	ВсеВарианты.Вставить("24", "Удостоверение личности военнослужащего Российской Федерации");
	
	Результат = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеДокумента) Тогда
		Если Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодМВД") <> Неопределено Тогда
			Результат = Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодМВД", ПредставлениеДокумента);
		ИначеЕсли Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодФНС") <> Неопределено Тогда
			Результат = Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодФНС", ПредставлениеДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеСерияНомер(ПредставлениеСерияНомер, ВидДокумента = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Серия", ПредставлениеСерияНомер);
	Результат.Вставить("Номер", "");
	
	ЭтоПаспортРФ = (ВидДокумента = "21" ИЛИ ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц")
		И ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(ВидДокумента) = "21");
	Если ЭтоПаспортРФ Тогда
		СерияНомерБезПробелов = СтрЗаменить(ПредставлениеСерияНомер, " ", "");
		СерияНомерБезПробелов = СокрЛП(СерияНомерБезПробелов);
		Если СтрДлина(СерияНомерБезПробелов) = 10 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СерияНомерБезПробелов) Тогда
			Результат.Серия = Лев(СерияНомерБезПробелов, 2) + " " + Сред(СерияНомерБезПробелов, 3, 2);
			Результат.Номер = Сред(СерияНомерБезПробелов, 5);
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	МассивСтроки = СтрРазделить(ПредставлениеСерияНомер, " ", Ложь);
	
	Если МассивСтроки.Количество() > 2 Тогда
		Результат.Серия = МассивСтроки[0] + " " + МассивСтроки[1];
		МассивСтроки.Удалить(0);
		МассивСтроки.Удалить(0);
		Результат.Номер = СтрСоединить(МассивСтроки, " ");
	ИначеЕсли МассивСтроки.Количество() = 2 Тогда
		Результат.Серия = МассивСтроки[0];
		Результат.Номер = МассивСтроки[1];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиЭлементИБ(ЗначениеПоУмолчанию, ФильтрыПоиска)
	
	Результат = ЗначениеПоУмолчанию;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектПоиска.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр КАК ОбъектПоиска
	|ГДЕ
	|	НЕ ОбъектПоиска.ПометкаУдаления
	|{ГДЕ
	|	ОбъектПоиска.Ссылка.*}";
	
	МетаданныеОбъекта = ЗначениеПоУмолчанию.Метаданные();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр", МетаданныеОбъекта.ПолноеИмя());
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст = ТекстЗапроса;
	Построитель.ЗаполнитьНастройки();
	
	Для Каждого СтрокаКлюча Из ФильтрыПоиска Цикл
		НовыйОтбор = Построитель.Отбор.Добавить("Ссылка." + СтрокаКлюча.Ключ);
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
		НовыйОтбор.Значение = СтрокаКлюча.Значение;
	КонецЦикла;
	
	Запрос = Построитель.ПолучитьЗапрос();
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() И Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодыскатьИнформациюВладельца(СписокСправочников, ИНН, КПП = "", СНИЛС = "")
	
	Результат = Неопределено;
	
	МассивСправочников = СтрРазделить(СписокСправочников, ",", Ложь);
	
	Если МассивСправочников.Найти("Организации") <> Неопределено Тогда
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("ИНН", ИНН);
		СправочникОрганизации = Метаданные.Справочники.Найти("Организации");
		РеквизитКПП = ?(СправочникОрганизации = Неопределено, Неопределено, СправочникОрганизации.Реквизиты.Найти("КПП"));
		Если РеквизитКПП <> Неопределено Тогда
			СтрокаПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		Результат = НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(), СтрокаПоиска);
	КонецЕсли;
	
	ИмяСправочникаКонтрагенты = "Контрагенты";
	Если НЕ ЗначениеЗаполнено(Результат) И МассивСправочников.Найти(ИмяСправочникаКонтрагенты) <> Неопределено
		И ЭлектронныйДокументооборотСКонтролирующимиОрганами.РеквизитыСправочникаКонтрагентовДоступны(Истина, Истина) Тогда
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("ИНН", ИНН);
		Если ЗначениеЗаполнено(КПП) Тогда
			СтрокаПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		Результат = НайтиЭлементИБ(Справочники[ИмяСправочникаКонтрагенты].ПустаяСсылка(), СтрокаПоиска);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) И МассивСправочников.Найти("ФизическиеЛица") <> Неопределено Тогда
		СправочникФизическиеЛица = Метаданные.Справочники.Найти("ФизическиеЛица");
		Если СправочникФизическиеЛица <> Неопределено И СправочникФизическиеЛица.Реквизиты.Найти("ИНН") <> Неопределено Тогда
			СтрокаПоиска = Новый Структура;
			СтрокаПоиска.Вставить("ИНН", ИНН);
			Если ЗначениеЗаполнено(СНИЛС) Тогда
				Если СправочникФизическиеЛица.Реквизиты.Найти("СтраховойНомерПФР") <> Неопределено Тогда
					СтрокаПоиска.Вставить("СтраховойНомерПФР", СНИЛС);
				ИначеЕсли СправочникФизическиеЛица.Реквизиты.Найти("СНИЛС") <> Неопределено Тогда
					СтрокаПоиска.Вставить("СНИЛС", СНИЛС);
				КонецЕсли;
			КонецЕсли;
			Результат = НайтиЭлементИБ(Справочники.ФизическиеЛица.ПустаяСсылка(), СтрокаПоиска);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит элемент документа DOM, проверяет что оно одно и пытается получить значение и привести тип.
//
Функция ПолучитьЗначениеДокумента(
		УзелВладелец,
		ТекстПоиска,
		ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	
	ВыборкаЭлементов = ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска);
	
	Если ВыборкаЭлементов.Количество() = 1 Тогда
		
		ЭлементВыборки = ВыборкаЭлементов[0];
		Если ТипЗнч(ЭлементВыборки) = Тип("АтрибутDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.Значение;
		ИначеЕсли ТипЗнч(ЭлементВыборки) = Тип("ЭлементDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.ТекстовоеСодержимое;
		Иначе
			ПредставлениеЗначения = ЭлементВыборки.ЗначениеУзла;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Дата") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеДаты(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеПола(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.СтраныМира") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеСтраны(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеВидаДокумента(ПредставлениеЗначения);
		КонецЕсли;
		
		Если ЗначениеПоУмолчанию <> Неопределено Тогда
			МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЗначениеПоУмолчанию));
			ТекущийТип = Новый ОписаниеТипов(МассивТипов);
			Результат = ТекущийТип.ПривестиЗначение(ПредставлениеЗначения);
		Иначе
			Результат = ПредставлениеЗначения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьУзелXML(данныеXML, ИмяУзла, ЗначениеУзла, ВыгружатьПустые = Истина)
	
	ПредставлениеЗначения = ЗначениеВыгрузкиXML(ЗначениеУзла);
	
	Если ВыгружатьПустые ИЛИ ЗначениеЗаполнено(ПредставлениеЗначения) Тогда 
		данныеXML.ЗаписатьНачалоЭлемента(ИмяУзла);
		данныеXML.ЗаписатьТекст(ПредставлениеЗначения);
		данныеXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьАтрибутУзлаXML(данныеXML, ИмяАтрибута, ЗначениеАтрибута, ВыгружатьПустые = Истина)
	
	ПредставлениеЗначения = ЗначениеВыгрузкиXML(ЗначениеАтрибута);
	
	Если ВыгружатьПустые ИЛИ ЗначениеЗаполнено(ЗначениеАтрибута) Тогда 
		данныеXML.ЗаписатьНачалоАтрибута(ИмяАтрибута);
		данныеXML.ЗаписатьТекст(ПредставлениеЗначения);
		данныеXML.ЗаписатьКонецАтрибута();
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеВыгрузкиXML(ЗначениеВыгрузки)
	
	Результат = Строка(ЗначениеВыгрузки);
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВыгрузки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеВыгрузки) = Тип("Дата") Тогда
		Результат = Формат(ЗначениеВыгрузки, "ДФ=dd.MM.yyyy");
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("СправочникСсылка.СтраныМира") Тогда
		Результат = ЗначениеВыгрузки.Код;
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
		Если Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодМВД") <> Неопределено Тогда
			Результат = ЗначениеВыгрузки.КодМВД;
		ИначеЕсли Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодФНС") <> Неопределено Тогда
			Результат = ЗначениеВыгрузки.КодФНС;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
		Если ЗначениеВыгрузки = Перечисления.ПолФизическогоЛица.Женский Тогда
			Результат = "2";
		Иначе	
			Результат = "1";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаЭлементаСправочника

Функция ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующийИлиСсылка)
	
	Результат = Неопределено;
	НашлиЭлемент = Неопределено;
	
	Если ТипЗнч(ОбновлятьСуществующийИлиСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр") Тогда
		НашлиЭлемент = ОбновлятьСуществующийИлиСсылка;
		
	ИначеЕсли ОбновлятьСуществующийИлиСсылка = Истина Тогда
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);
		СтрокаПоиска.Вставить("ДатаВыдачи", ДанныеДоверенности.ДатаВыдачи);
		СтрокаПоиска.Вставить("Организация", ДанныеДоверенности.Организация);
		НашлиЭлемент = НайтиЭлементИБ(Справочники.МашиночитаемыеДоверенностиРаспределенныйРеестр.ПустаяСсылка(), СтрокаПоиска);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НашлиЭлемент) Тогда
		ОбъектСправочника = Справочники.МашиночитаемыеДоверенностиРаспределенныйРеестр.СоздатьЭлемент();
	Иначе
		ОбъектСправочника = НашлиЭлемент.ПолучитьОбъект();
		Для Каждого СтрокаРеквизита Из ОбъектСправочника.Метаданные().Реквизиты Цикл
			ОбъектСправочника[СтрокаРеквизита.Имя] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	// здесь переносим значения реквизитов
	ЗаполнитьЗначенияСвойств(ОбъектСправочника, ДанныеДоверенности);
	
	ТабличныеЧасти = Новый Структура;
	Если ДанныеДоверенности.Свойство("НалоговыеОрганыДействия") Тогда
		ТабличныеЧасти.Вставить("НалоговыеОрганыДействия", ДанныеДоверенности.НалоговыеОрганыДействия);
	КонецЕсли;
	ТабличныеЧасти.Вставить("ФИО", ДанныеДоверенности.ФИО);
	Если ДанныеДоверенности.Свойство("ПолномочияПредставителя") Тогда
		ТабличныеЧасти.Вставить("ПолномочияПредставителя", ДанныеДоверенности.ПолномочияПредставителя);
	КонецЕсли;
	ТабличныеЧасти.Вставить("УдостоверенияЛичности", ДанныеДоверенности.УдостоверенияЛичности);
	Если ДанныеДоверенности.Свойство("РодительскиеДоверенности") Тогда
		ТабличныеЧасти.Вставить("РодительскиеДоверенности", ДанныеДоверенности.РодительскиеДоверенности);
	КонецЕсли;
	Если ДанныеДоверенности.Свойство("Представители") Тогда
		ТабличныеЧасти.Вставить("Представители", ДанныеДоверенности.Представители);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТабличныеЧасти Цикл
		ТекущаяТЧ = ОбъектСправочника[СтрокаТЧ.Ключ];
		ТекущаяТЧ.Очистить();
		Для Каждого НоваяСтрока Из СтрокаТЧ.Значение Цикл
			ДобавленнаяСтрока = ТекущаяТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НоваяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеДоверенности.Свойство("ДанныеВыгрузки") И ДанныеДоверенности.ДанныеВыгрузки <> Неопределено Тогда
		ОбъектСправочника.ФайлВырузки = Новый ХранилищеЗначения(ДанныеДоверенности.ДанныеВыгрузки, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Если ДанныеДоверенности.Свойство("ДанныеПодписи") И ДанныеДоверенности.ДанныеПодписи <> Неопределено Тогда
		ОбъектСправочника.ЭлектроннаяПодпись = Новый ХранилищеЗначения(
			ДанныеДоверенности.ДанныеПодписи, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Если ДанныеДоверенности.Свойство("ДанныеЗаявленияНаОтзыв")
		И ДанныеДоверенности.ДанныеЗаявленияНаОтзыв <> Неопределено Тогда
		
		ОбъектСправочника.ФайлЗаявленияНаОтзыв = Новый ХранилищеЗначения(
			ДанныеДоверенности.ДанныеЗаявленияНаОтзыв, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Если ДанныеДоверенности.Свойство("ДанныеПодписиЗаявленияНаОтзыв")
		И ДанныеДоверенности.ДанныеПодписиЗаявленияНаОтзыв <> Неопределено Тогда
		
		ОбъектСправочника.ЭлектроннаяПодписьЗаявленияНаОтзыв = Новый ХранилищеЗначения(
			ДанныеДоверенности.ДанныеПодписиЗаявленияНаОтзыв, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Если ДанныеДоверенности.Свойство("ДанныеАрхива")
		И ДанныеДоверенности.ДанныеАрхива <> Неопределено Тогда
		
		ОбъектСправочника.Образ = Новый ХранилищеЗначения(ДанныеДоверенности.ДанныеАрхива, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Удачно = Ложь;
	
	Если ОбъектСправочника.ПроверитьЗаполнение() Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр");
		Если НЕ ОбъектСправочника.ЭтоНовый() Тогда
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектСправочника.Ссылка);
		КонецЕсли;	
		
		Удачно = Истина;
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка.Заблокировать();
			ОбъектСправочника.Записать();
			
		Исключение
			ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Ошибка изменения МЧД.';
								|en = 'Электронный документооборот с контролирующими органами. Ошибка изменения МЧД.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,,,
				ДанныеОшибки);
			Удачно = Ложь;
		КонецПопытки;
		
		Если Удачно Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Удачно Тогда
		Результат = ОбъектСправочника.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

Функция ДанныеИзИнформационнойБазы(СправочникСсылка)

	Результат = Новый Структура;
	Результат.Вставить("КодНО", "");
	Результат.Вставить("КНД", "1110310");
	Результат.Вставить("КодыНО", Новый Массив);
	
	ТекстЗапросаРеквизитовПолномочий = "";
	Для ВидПолномочия = 1 По КоличествоВидовПолномочийПредставителя() Цикл
		ПредставлениеВида = Формат(ВидПолномочия, "ЧЦ=2; ЧВН=");
		ТекстЗапросаРеквизитовПолномочий = ТекстЗапросаРеквизитовПолномочий + "
			|	МашиночитаемыеДоверенностиРаспределенныйРеестрПолномочияПредставителя.Признак" + ПредставлениеВида
			+ " КАК Признак" + ПредставлениеВида + ?(ВидПолномочия = КоличествоВидовПолномочийПредставителя(), "", ",");
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПолномочияПредставителя.Ссылка КАК Доверенность,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПолномочияПредставителя.ПризнакПолныеПолномочия КАК ПризнакПолныеПолномочия,"
		+ ТекстЗапросаРеквизитовПолномочий + "
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.ПолномочияПредставителя КАК МашиночитаемыеДоверенностиРаспределенныйРеестрПолномочияПредставителя
		|ГДЕ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПолномочияПредставителя.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрФИО.Владелец КАК Владелец,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрФИО.Фамилия КАК Фамилия,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрФИО.Имя КАК Имя,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрФИО.Отчество КАК Отчество
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.ФИО КАК МашиночитаемыеДоверенностиРаспределенныйРеестрФИО
		|ГДЕ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрФИО.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.РегистрационныйНомерДоверенности КАК РегистрационныйНомерДоверенности,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.КодНалоговогоОрганаПредставления КАК КодНалоговогоОрганаПредставления,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.СведенияОбИнформационнойСистеме КАК СведенияОбИнформационнойСистеме,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.СрокДействия КАК СрокДействия,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.НомерРодительскойДоверенности КАК НомерРодительскойДоверенности,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.НомерКорневойДоверенности КАК НомерКорневойДоверенности,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ПередовериеВозможно КАК ПередовериеВозможно,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ВерсияФормата КАК ВерсияФормата,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Владелец КАК Владелец,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Организация КАК Организация,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Доверитель КАК Доверитель,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительЮЛ_ИностраннаяОрганизация КАК ДоверительЮЛ_ИностраннаяОрганизация,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительЮЛ_ИНН КАК ДоверительЮЛ_ИНН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительЮЛ_КПП КАК ДоверительЮЛ_КПП,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительЮЛ_ОГРН КАК ДоверительЮЛ_ОГРН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительЮЛ_СтрРег КАК ДоверительЮЛ_СтрРег,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительЮЛ_НаимРегОрг КАК ДоверительЮЛ_НаимРегОрг,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительЮЛ_РегНомер КАК ДоверительЮЛ_РегНомер,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительЮЛ_КодНПРег КАК ДоверительЮЛ_КодНПРег,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительЮЛ_АдрРус КАК ДоверительЮЛ_АдрРус,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительЮЛ_АдрЛат КАК ДоверительЮЛ_АдрЛат,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительФЛ_ИНН КАК ДоверительФЛ_ИНН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительФЛ_ОГРН КАК ДоверительФЛ_ОГРН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительФЛ_СНИЛС КАК ДоверительФЛ_СНИЛС,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительФЛ_Гражданство КАК ДоверительФЛ_Гражданство,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительФЛ_Пол КАК ДоверительФЛ_Пол,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительФЛ_ДатаРождения КАК ДоверительФЛ_ДатаРождения,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительФЛ_МестоРожд КАК ДоверительФЛ_МестоРожд,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДоверительЮЛ_НаимОрг КАК ДоверительЮЛ_НаимОрг,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ЛицоБезДовЮЛ КАК ЛицоБезДовЮЛ,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ЛицоБезДовЮЛ_НаимОрг КАК ЛицоБезДовЮЛ_НаимОрг,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ЛицоБезДовЮЛ_ИНН КАК ЛицоБезДовЮЛ_ИНН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ЛицоБезДовЮЛ_КПП КАК ЛицоБезДовЮЛ_КПП,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ЛицоБезДовЮЛ_ОГРН КАК ЛицоБезДовЮЛ_ОГРН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ЛицоБезДовФЛ КАК ЛицоБезДовФЛ,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ЛицоБезДовФЛ_ИНН КАК ЛицоБезДовФЛ_ИНН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ЛицоБезДовФЛ_ОГРН КАК ЛицоБезДовФЛ_ОГРН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ЛицоБезДовФЛ_СНИЛС КАК ЛицоБезДовФЛ_СНИЛС,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ЛицоБезДовФЛ_Гражданство КАК ЛицоБезДовФЛ_Гражданство,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ЛицоБезДовФЛ_ДатаРождения КАК ЛицоБезДовФЛ_ДатаРождения,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ЛицоБезДовФЛ_Должность КАК ЛицоБезДовФЛ_Должность,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Представитель КАК Представитель,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ПредставительЮЛ_НаимОрг КАК ПредставительЮЛ_НаимОрг,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ПредставительЮЛ_ИНН КАК ПредставительЮЛ_ИНН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ПредставительЮЛ_КПП КАК ПредставительЮЛ_КПП,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ПредставительЮЛ_ОГРН КАК ПредставительЮЛ_ОГРН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ПредставительФЛ_ИНН КАК ПредставительФЛ_ИНН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ПредставительФЛ_ОГРН КАК ПредставительФЛ_ОГРН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ПредставительФЛ_СНИЛС КАК ПредставительФЛ_СНИЛС,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ПредставительФЛ_Гражданство КАК ПредставительФЛ_Гражданство,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ПредставительФЛ_ДатаРождения КАК ПредставительФЛ_ДатаРождения,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ПредставительЯвляетсяСотрудником КАК ПредставительЯвляетсяСотрудником,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.КоличествоПредставителей КАК КоличествоПредставителей,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Статус КАК Статус
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр КАК МашиночитаемыеДоверенностиРаспределенныйРеестр
		|ГДЕ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрНалоговыеОрганыДействия.КодНалоговогоОргана КАК КодНалоговогоОргана
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.НалоговыеОрганыДействия КАК МашиночитаемыеДоверенностиРаспределенныйРеестрНалоговыеОрганыДействия
		|ГДЕ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрНалоговыеОрганыДействия.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрУдостоверенияЛичности.Владелец КАК Владелец,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрУдостоверенияЛичности.ВидДок КАК ВидДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрУдостоверенияЛичности.СерДок КАК СерДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрУдостоверенияЛичности.НомДок КАК НомДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрУдостоверенияЛичности.ДатаДок КАК ДатаДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрУдостоверенияЛичности.ВыдДок КАК ВыдДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрУдостоверенияЛичности.КодВыдДок КАК КодВыдДок
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.УдостоверенияЛичности КАК МашиночитаемыеДоверенностиРаспределенныйРеестрУдостоверенияЛичности
		|ГДЕ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрУдостоверенияЛичности.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ЭтоКорневаяДоверенность КАК ЭтоКорневаяДоверенность,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительЮЛ_ИностраннаяОрганизация КАК ДоверительЮЛ_ИностраннаяОрганизация,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительЮЛ_НаимОрг КАК ДоверительЮЛ_НаимОрг,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительЮЛ_ИНН КАК ДоверительЮЛ_ИНН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительЮЛ_КПП КАК ДоверительЮЛ_КПП,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительЮЛ_ОГРН КАК ДоверительЮЛ_ОГРН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_Фамилия КАК ДоверительФЛ_Фамилия,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_Имя КАК ДоверительФЛ_Имя,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_Отчество КАК ДоверительФЛ_Отчество,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_ИНН КАК ДоверительФЛ_ИНН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_ОГРН КАК ДоверительФЛ_ОГРН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_СНИЛС КАК ДоверительФЛ_СНИЛС,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_Гражданство КАК ДоверительФЛ_Гражданство,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_ДатаРождения КАК ДоверительФЛ_ДатаРождения,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_ВидДок КАК ДоверительФЛ_ВидДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_СерДок КАК ДоверительФЛ_СерДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_НомДок КАК ДоверительФЛ_НомДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_ДатаДок КАК ДоверительФЛ_ДатаДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_ВыдДок КАК ДоверительФЛ_ВыдДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.ДоверительФЛ_КодВыдДок КАК ДоверительФЛ_КодВыдДок
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.РодительскиеДоверенности КАК МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности
		|ГДЕ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрРодительскиеДоверенности.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.Представитель КАК Представитель,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительЮЛ_НаимОрг КАК ПредставительЮЛ_НаимОрг,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительЮЛ_ИНН КАК ПредставительЮЛ_ИНН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительЮЛ_КПП КАК ПредставительЮЛ_КПП,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительЮЛ_ОГРН КАК ПредставительЮЛ_ОГРН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_Фамилия КАК ПредставительФЛ_Фамилия,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_Имя КАК ПредставительФЛ_Имя,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_Отчество КАК ПредставительФЛ_Отчество,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_ИНН КАК ПредставительФЛ_ИНН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_ОГРН КАК ПредставительФЛ_ОГРН,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_СНИЛС КАК ПредставительФЛ_СНИЛС,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_Гражданство КАК ПредставительФЛ_Гражданство,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_ДатаРождения КАК ПредставительФЛ_ДатаРождения,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_ВидДок КАК ПредставительФЛ_ВидДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_СерДок КАК ПредставительФЛ_СерДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_НомДок КАК ПредставительФЛ_НомДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_ДатаДок КАК ПредставительФЛ_ДатаДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_ВыдДок КАК ПредставительФЛ_ВыдДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_КодВыдДок КАК ПредставительФЛ_КодВыдДок,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.Статус КАК Статус,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительЯвляетсяСотрудником КАК ПредставительЯвляетсяСотрудником,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.Идентификатор КАК Идентификатор
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.Представители КАК МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители
		|ГДЕ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.Ссылка = &СправочникСсылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СправочникСсылка", СправочникСсылка);
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	ВыборкаПолномочий = ПакетЗапросов[0].Выгрузить();
	
	ПолномочияПредставителя = Новый Массив;
	Если ВыборкаПолномочий.Количество() = 0 ИЛИ ВыборкаПолномочий[0].ПризнакПолныеПолномочия Тогда
		ПолномочияПредставителя.Добавить("99");
	Иначе
		Для ВидПолномочия = 1 По КоличествоВидовПолномочийПредставителя() Цикл
			ПредставлениеВида = Формат(ВидПолномочия, "ЧЦ=2; ЧВН=");
			Если ВыборкаПолномочий[0]["Признак" + ПредставлениеВида] Тогда
				ПолномочияПредставителя.Добавить(ПредставлениеВида);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Результат.Вставить("ПолномочияПредставителя", ПолномочияПредставителя);
	
	ВыборкаПодписантов = ПакетЗапросов[1].Выгрузить();
	ВыборкаДокументов = ПакетЗапросов[4].Выгрузить();
	
	ПустойПодписант = Новый Структура("Имя, Отчество, Фамилия", "", "", "");
	ПустойДокумент = Новый Структура("ВидДок, СерДок, НомДок, ДатаДок, ВыдДок, КодВыдДок", "", "", "", "", "", "", "");
	
	ВыборкаИнформации = ПакетЗапросов[2].Выбрать();
	Если ВыборкаИнформации.Следующий() Тогда
		Результат.Вставить("КодНО", ВыборкаИнформации.КодНалоговогоОрганаПредставления);
		Результат.Вставить("Номер", ВыборкаИнформации.НомерДоверенности);
		Результат.Вставить("РегистрационныйНомерДоверенности", ВыборкаИнформации.РегистрационныйНомерДоверенности);
		Результат.Вставить("ДатаВыдачи", ВыборкаИнформации.ДатаВыдачи);
		Результат.Вставить("ДатаОкончания", ВыборкаИнформации.ДатаОкончания);
		Результат.Вставить("СведенияОбИнформационнойСистеме", ВыборкаИнформации.СведенияОбИнформационнойСистеме);
		Результат.Вставить("СрокДействия", ВыборкаИнформации.СрокДействия);
		Результат.Вставить("НомерРодительскойДоверенности", ВыборкаИнформации.НомерРодительскойДоверенности);
		Результат.Вставить("НомерКорневойДоверенности", ВыборкаИнформации.НомерКорневойДоверенности);
		Результат.Вставить("ПередовериеВозможно", ВыборкаИнформации.ПередовериеВозможно);
		Результат.Вставить("ВерсияФормата", ВыборкаИнформации.ВерсияФормата);
		
		// информация об доверителе
		Результат.Вставить("Владелец", ВыборкаИнформации.Владелец);
		Результат.Вставить("Организация", ВыборкаИнформации.Организация);
		Результат.Вставить("ИностраннаяОрганизация", ВыборкаИнформации.ДоверительЮЛ_ИностраннаяОрганизация);
		Результат.Вставить("Доверитель", ВыборкаИнформации.Доверитель);
		Результат.Вставить("ДоверительЮЛ_ИНН", ВыборкаИнформации.ДоверительЮЛ_ИНН);
		Результат.Вставить("ДоверительЮЛ_КПП", ВыборкаИнформации.ДоверительЮЛ_КПП);
		Результат.Вставить("ДоверительЮЛ_ОГРН", ВыборкаИнформации.ДоверительЮЛ_ОГРН);
		Результат.Вставить("ДоверительЮЛ_СтрРег", ВыборкаИнформации.ДоверительЮЛ_СтрРег);
		Результат.Вставить("ДоверительЮЛ_НаимРегОрг", ВыборкаИнформации.ДоверительЮЛ_НаимРегОрг);
		Результат.Вставить("ДоверительЮЛ_РегНомер", ВыборкаИнформации.ДоверительЮЛ_РегНомер);
		Результат.Вставить("ДоверительЮЛ_КодНПРег", ВыборкаИнформации.ДоверительЮЛ_КодНПРег);
		Результат.Вставить("ДоверительЮЛ_АдрРус", ВыборкаИнформации.ДоверительЮЛ_АдрРус);
		Результат.Вставить("ДоверительЮЛ_АдрЛат", ВыборкаИнформации.ДоверительЮЛ_АдрЛат);
		Результат.Вставить("ДоверительФЛ_ИНН", ВыборкаИнформации.ДоверительФЛ_ИНН);
		Результат.Вставить("ДоверительФЛ_ОГРН", ВыборкаИнформации.ДоверительФЛ_ОГРН);
		Результат.Вставить("ДоверительФЛ_СНИЛС", ВыборкаИнформации.ДоверительФЛ_СНИЛС);
		Результат.Вставить("ДоверительФЛ_Гражданство", ВыборкаИнформации.ДоверительФЛ_Гражданство);
		Результат.Вставить("ДоверительФЛ_Пол", ВыборкаИнформации.ДоверительФЛ_Пол);
		Результат.Вставить("ДоверительФЛ_ДатаРождения", ВыборкаИнформации.ДоверительФЛ_ДатаРождения);
		Результат.Вставить("ДоверительФЛ_МестоРожд", ВыборкаИнформации.ДоверительФЛ_МестоРожд);
		Результат.Вставить("ДоверительЮЛ_НаимОрг", ВыборкаИнформации.ДоверительЮЛ_НаимОрг);
		
		Если Результат.ИностраннаяОрганизация Тогда
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ИО");
		ИначеЕсли ЗначениеЗаполнено(Результат.ДоверительЮЛ_ИНН) Тогда
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ЮЛ");
		Иначе
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ФЛ");
		КонецЕсли;
		
		// информация об подписанте
		Результат.Вставить("ЛицоБезДовЮЛ", ВыборкаИнформации.ЛицоБезДовЮЛ);
		Результат.Вставить("ЛицоБезДовЮЛ_НаимОрг", ВыборкаИнформации.ЛицоБезДовЮЛ_НаимОрг);
		Результат.Вставить("ЛицоБезДовЮЛ_ИНН", ВыборкаИнформации.ЛицоБезДовЮЛ_ИНН);
		Результат.Вставить("ЛицоБезДовЮЛ_КПП", ВыборкаИнформации.ЛицоБезДовЮЛ_КПП);
		Результат.Вставить("ЛицоБезДовЮЛ_ОГРН", ВыборкаИнформации.ЛицоБезДовЮЛ_ОГРН);
		Результат.Вставить("ЛицоБезДовФЛ", ВыборкаИнформации.ЛицоБезДовФЛ);
		Результат.Вставить("ЛицоБезДовФЛ_ИНН", ВыборкаИнформации.ЛицоБезДовФЛ_ИНН);
		Результат.Вставить("ЛицоБезДовФЛ_ОГРН", ВыборкаИнформации.ЛицоБезДовФЛ_ОГРН);
		Результат.Вставить("ЛицоБезДовФЛ_СНИЛС", ВыборкаИнформации.ЛицоБезДовФЛ_СНИЛС);
		Результат.Вставить("ЛицоБезДовФЛ_Гражданство", ВыборкаИнформации.ЛицоБезДовФЛ_Гражданство);
		Результат.Вставить("ЛицоБезДовФЛ_ДатаРождения", ВыборкаИнформации.ЛицоБезДовФЛ_ДатаРождения);
		Результат.Вставить("ЛицоБезДовФЛ_Должность", ВыборкаИнформации.ЛицоБезДовФЛ_Должность);
		
		Если Результат.ДоверительЮЛ_ТипОрганизации = "ФЛ" Тогда
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
		Иначе
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительРук));
		КонецЕсли;
		
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиФИО = ПустойПодписант;
		Иначе
			НашлиФИО = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ЛицоБезДовФЛ_Имя", НашлиФИО.Имя);
		Результат.Вставить("ЛицоБезДовФЛ_Отчество", НашлиФИО.Отчество);
		Результат.Вставить("ЛицоБезДовФЛ_Фамилия", НашлиФИО.Фамилия);
		
		НашлиСтроки = ВыборкаДокументов.НайтиСтроки(Новый Структура("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиДок = ПустойДокумент;
		Иначе
			НашлиДок = НашлиСтроки[0];
		КонецЕсли;
		
		Результат.Вставить("ЛицоБезДовФЛ_ВидДок", НашлиДок.ВидДок);
		Результат.Вставить("ЛицоБезДовФЛ_СерДок", НашлиДок.СерДок);
		Результат.Вставить("ЛицоБезДовФЛ_НомДок", НашлиДок.НомДок);
		Результат.Вставить("ЛицоБезДовФЛ_ДатаДок", НашлиДок.ДатаДок);
		Результат.Вставить("ЛицоБезДовФЛ_ВыдДок", НашлиДок.ВыдДок);
		Результат.Вставить("ЛицоБезДовФЛ_КодВыдДок", НашлиДок.КодВыдДок);
		
		// информация о представителе
		Результат.Вставить("Представитель", ВыборкаИнформации.Представитель);
		Результат.Вставить("ПредставительЮЛ_НаимОрг", ВыборкаИнформации.ПредставительЮЛ_НаимОрг);
		Результат.Вставить("ПредставительЮЛ_ИНН", ВыборкаИнформации.ПредставительЮЛ_ИНН);
		Результат.Вставить("ПредставительЮЛ_КПП", ВыборкаИнформации.ПредставительЮЛ_КПП);
		Результат.Вставить("ПредставительЮЛ_ОГРН", ВыборкаИнформации.ПредставительЮЛ_ОГРН);
		Результат.Вставить("ПредставительФЛ_ИНН", ВыборкаИнформации.ПредставительФЛ_ИНН);
		Результат.Вставить("ПредставительФЛ_ОГРН", ВыборкаИнформации.ПредставительФЛ_ОГРН);
		Результат.Вставить("ПредставительФЛ_СНИЛС", ВыборкаИнформации.ПредставительФЛ_СНИЛС);
		Результат.Вставить("ПредставительФЛ_Гражданство", ВыборкаИнформации.ПредставительФЛ_Гражданство);
		Результат.Вставить("ПредставительФЛ_ДатаРождения", ВыборкаИнформации.ПредставительФЛ_ДатаРождения);
		Результат.Вставить("ПредставительЯвляетсяСотрудником", ВыборкаИнформации.ПредставительЯвляетсяСотрудником);
		Результат.Вставить("КоличествоПредставителей", ВыборкаИнформации.КоличествоПредставителей);
		Результат.Вставить("Статус", ВыборкаИнформации.Статус);
		
		ТипВладельца = Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ;
		НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец", ТипВладельца));
		
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиФИО = ПустойПодписант;
		Иначе
			НашлиФИО = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ПредставительФЛ_Имя", НашлиФИО.Имя);
		Результат.Вставить("ПредставительФЛ_Отчество", НашлиФИО.Отчество);
		Результат.Вставить("ПредставительФЛ_Фамилия", НашлиФИО.Фамилия);
		
		НашлиСтроки = ВыборкаДокументов.НайтиСтроки(Новый Структура("Владелец", ТипВладельца));
		
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиДок = ПустойДокумент;
		Иначе
			НашлиДок = НашлиСтроки[0];
		КонецЕсли;
		
		Результат.Вставить("ПредставительФЛ_ВидДок", НашлиДок.ВидДок);
		Результат.Вставить("ПредставительФЛ_СерДок", НашлиДок.СерДок);
		Результат.Вставить("ПредставительФЛ_НомДок", НашлиДок.НомДок);
		Результат.Вставить("ПредставительФЛ_ДатаДок", НашлиДок.ДатаДок);
		Результат.Вставить("ПредставительФЛ_ВыдДок", НашлиДок.ВыдДок);
		Результат.Вставить("ПредставительФЛ_КодВыдДок", НашлиДок.КодВыдДок);
		
	КонецЕсли;
	
	ВыборкаНО = ПакетЗапросов[3].Выбрать();
	Пока ВыборкаНО.Следующий() Цикл
		НоваяСтрока = Новый Структура("КодНО", ВыборкаНО.КодНалоговогоОргана);
		Результат.КодыНО.Добавить(НоваяСтрока);
	КонецЦикла;
	
	ВыборкаРодительскихДоверенностей = ПакетЗапросов[5].Выбрать();
	Пока ВыборкаРодительскихДоверенностей.Следующий() Цикл
		ПрефиксРодительскойДоверенности = ?(ВыборкаРодительскихДоверенностей.ЭтоКорневаяДоверенность,
			"КорневаяДоверенность_", "РодительскаяДоверенность_");
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительЮЛ_ИностраннаяОрганизация",
			ВыборкаРодительскихДоверенностей.ДоверительЮЛ_ИностраннаяОрганизация);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительЮЛ_НаимОрг",
			ВыборкаРодительскихДоверенностей.ДоверительЮЛ_НаимОрг);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительЮЛ_ИНН",
			ВыборкаРодительскихДоверенностей.ДоверительЮЛ_ИНН);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительЮЛ_КПП",
			ВыборкаРодительскихДоверенностей.ДоверительЮЛ_КПП);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительЮЛ_ОГРН",
			ВыборкаРодительскихДоверенностей.ДоверительЮЛ_ОГРН);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_Фамилия",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_Фамилия);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_Имя",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_Имя);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_Отчество",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_Отчество);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_ИНН",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_ИНН);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_ОГРН",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_ОГРН);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_СНИЛС",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_СНИЛС);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_Гражданство",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_Гражданство);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_ДатаРождения",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_ДатаРождения);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_ВидДок",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_ВидДок);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_СерДок",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_СерДок);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_НомДок",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_НомДок);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_ДатаДок",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_ДатаДок);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_ВыдДок",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_ВыдДок);
		Результат.Вставить(ПрефиксРодительскойДоверенности + "ДоверительФЛ_КодВыдДок",
			ВыборкаРодительскихДоверенностей.ДоверительФЛ_КодВыдДок);
	КонецЦикла;
	
	Результат.Вставить("Представители", Новый Массив);
	ВыборкаПредставителей = ПакетЗапросов[6].Выбрать();
	Пока ВыборкаПредставителей.Следующий() Цикл
		СтрокаПредставителя = Новый Структура;
		СтрокаПредставителя.Вставить("Представитель", 						ВыборкаПредставителей.Представитель);
		СтрокаПредставителя.Вставить("ПредставительЮЛ_НаимОрг", 			ВыборкаПредставителей.ПредставительЮЛ_НаимОрг);
		СтрокаПредставителя.Вставить("ПредставительЮЛ_ИНН", 				ВыборкаПредставителей.ПредставительЮЛ_ИНН);
		СтрокаПредставителя.Вставить("ПредставительЮЛ_КПП", 				ВыборкаПредставителей.ПредставительЮЛ_КПП);
		СтрокаПредставителя.Вставить("ПредставительЮЛ_ОГРН", 				ВыборкаПредставителей.ПредставительЮЛ_ОГРН);
		СтрокаПредставителя.Вставить("ПредставительФЛ_Фамилия", 			ВыборкаПредставителей.ПредставительФЛ_Фамилия);
		СтрокаПредставителя.Вставить("ПредставительФЛ_Имя", 				ВыборкаПредставителей.ПредставительФЛ_Имя);
		СтрокаПредставителя.Вставить("ПредставительФЛ_Отчество", 			ВыборкаПредставителей.ПредставительФЛ_Отчество);
		СтрокаПредставителя.Вставить("ПредставительФЛ_ИНН", 				ВыборкаПредставителей.ПредставительФЛ_ИНН);
		СтрокаПредставителя.Вставить("ПредставительФЛ_ОГРН", 				ВыборкаПредставителей.ПредставительФЛ_ОГРН);
		СтрокаПредставителя.Вставить("ПредставительФЛ_СНИЛС", 				ВыборкаПредставителей.ПредставительФЛ_СНИЛС);
		СтрокаПредставителя.Вставить("ПредставительФЛ_Гражданство", 		ВыборкаПредставителей.ПредставительФЛ_Гражданство);
		СтрокаПредставителя.Вставить("ПредставительФЛ_ДатаРождения", 		ВыборкаПредставителей.ПредставительФЛ_ДатаРождения);
		СтрокаПредставителя.Вставить("ПредставительФЛ_ВидДок", 				ВыборкаПредставителей.ПредставительФЛ_ВидДок);
		СтрокаПредставителя.Вставить("ПредставительФЛ_СерДок", 				ВыборкаПредставителей.ПредставительФЛ_СерДок);
		СтрокаПредставителя.Вставить("ПредставительФЛ_НомДок", 				ВыборкаПредставителей.ПредставительФЛ_НомДок);
		СтрокаПредставителя.Вставить("ПредставительФЛ_ДатаДок", 			ВыборкаПредставителей.ПредставительФЛ_ДатаДок);
		СтрокаПредставителя.Вставить("ПредставительФЛ_ВыдДок", 				ВыборкаПредставителей.ПредставительФЛ_ВыдДок);
		СтрокаПредставителя.Вставить("ПредставительФЛ_КодВыдДок", 			ВыборкаПредставителей.ПредставительФЛ_КодВыдДок);
		СтрокаПредставителя.Вставить("Статус", 								ВыборкаПредставителей.Статус);
		СтрокаПредставителя.Вставить("ПредставительЯвляетсяСотрудником", 	ВыборкаПредставителей.ПредставительЯвляетсяСотрудником);
		СтрокаПредставителя.Вставить("Идентификатор", 						ВыборкаПредставителей.Идентификатор);
		
		Результат.Представители.Добавить(СтрокаПредставителя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыгрузитьФИОУзла(ЗаписьXML, Фамилия, Имя, Отчество)
	
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Фамилия", Фамилия);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Имя", Имя);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Отчество", Отчество, Ложь);
	
КонецПроцедуры

Процедура ВыгрузитьАдресУзла(ЗаписьXML, АдресРФ, АдресЛат, ВыделитьВУзел = "")
	
	Если ЗначениеЗаполнено(ВыделитьВУзел) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента(ВыделитьВУзел);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресЛат) Тогда
		ЗаписатьУзелXML(ЗаписьXML, "АдрЛат", АдресЛат);
	ИначеЕсли ЗначениеЗаполнено(АдресРФ) Тогда
		ЗаписатьУзелXML(ЗаписьXML, "АдрРус", АдресРФ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыделитьВУзел) Тогда
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьУдостоверениеУзла(
				ЗаписьXML,
				ВидДокумента,
				СерияДокумента,
				НомерДокумента,
				ДатаВыдачи,
				Выдан,
				КодПодразделения)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("УдЛичн");
	
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КодВидДок", ВидДокумента);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СерНомДок", СокрЛП(СерияДокумента + " " + НомерДокумента));
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаДок", ДатаВыдачи);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВыдДок", Выдан, Ложь);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КодВыдДок", КодПодразделения, Ложь);
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
