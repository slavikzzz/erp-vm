
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТКА

// Возвращает структуру по умолчанию передаваемую в качестве параметра в процедуру проверки "ПроверитьЗаполнение".
// 
// Возвращаемое значение:
// 	Структура - Описание:
//      * ПараметрыПроверкиУзлов - Структура -:
//           ** Форма - Неопределено -
//           ** СообщатьОшибки - Булево -
//           ** ПотокОшибок - Структура -
//      * ПроверятьУзлы - Булево -
//      * ИспользоватьУзлыОбъектовЭксплуатации - Булево -
//      * Форма - ФормаКлиентскогоПриложения - с реквизитами:
//           ** Свойства_ОписаниеДополнительныхРеквизитов - ДанныеФормыКоллекция - с колонками:
//                  *** Наименование - Строка -
//      * СообщатьОшибки - Булево -
//      * ПотокОшибок - Структура -
Функция ПараметрыПроверкиЗаполнения() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ПотокОшибок", Новый Структура);
	ОбъектыЭксплуатации.ИнициализироватьПотокОшибок(Параметры.ПотокОшибок);
	
	Параметры.Вставить("СообщатьОшибки", Истина);
	Параметры.Вставить("Форма", Неопределено);
	
	Параметры.Вставить("ИспользоватьУзлыОбъектовЭксплуатации", ПолучитьФункциональнуюОпцию("ИспользоватьУзлыОбъектовЭксплуатации"));
	
	Параметры.Вставить("ПроверятьУзлы", Истина);
	Параметры.Вставить("ПараметрыПроверкиУзлов", Справочники.УзлыОбъектовЭксплуатации.ПараметрыПроверкиЗаполнения());
	Параметры.ПараметрыПроверкиУзлов.Вставить("СообщатьОшибки", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает описание реквизитов объекта эксплуатации
//
// Возвращаемое значение:
//		ТаблицаЗначений - Таблица с описанием реквизитов элемента справочника объектов эксплуатации.
//
Функция СоставРеквизитовОбъектаЭксплуатации() Экспорт
	
	// Описание формата возвращаемой таблицы реквизитов
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОбязателенДляЗаполнения", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ТолькоПросмотрОбязательности", Новый ОписаниеТипов("Булево"));
	
	// Значения заполняемые по-умолчанию в строку каждого из реквизитов
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("Имя", "");
	ЗначенияПоУмолчанию.Вставить("Синоним", "");
	ЗначенияПоУмолчанию.Вставить("ОбязателенДляЗаполнения", "Ложь");
	ЗначенияПоУмолчанию.Вставить("ТолькоПросмотрОбязательности", "Ложь");
	
	// Описания реквизитов, со значениями параметров отличающихся от "по-умолчанию"
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ДатаСведений", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Статус", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Класс", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Подкласс", Новый Структура("ОбязателенДляЗаполнения, ТолькоПросмотрОбязательности", Ложь, Истина));
	
	// Список реквизитов, которые должны быть исключены: служебные, не используемые, предназначенные для удаления, булевы признаки
	// или любые другие не предназначенные для интерактивной настройки пользователем.
	СтопЛист = Новый Структура;
	СтопЛист.Вставить("ТипОС");
	СтопЛист.Вставить("Комментарий");
	СтопЛист.Вставить("ОбъектБытовогоНазначения");
	СтопЛист.Вставить("ДатаСведений");
	СтопЛист.Вставить("ЗарегистрированоВРеестреСистемыПлатон");
	СтопЛист.Вставить("УчитыватьСтоимостьЛиквидационногоОбязательства");
	
	Если НЕ ПолучитьФункциональнуюОпцию("РегламентированныйУчетВНА") Тогда
		СтопЛист.Вставить("ГруппаОС");
	КонецЕсли;

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		СтопЛист.Вставить("ГруппаОСМеждународныйУчет");
	КонецЕсли;
	
	// Получение таблицы реквизитов из описания метаданных
	СтруктураСправочника = Метаданные.Справочники.ОбъектыЭксплуатации;
	Для Каждого Реквизит Из СтруктураСправочника.Реквизиты Цикл
		
		Если СтопЛист.Свойство(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРеквизита = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ЗначенияПоУмолчанию);
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, Реквизит);
		
		СтрокаРеквизита.ОбязателенДляЗаполнения = (Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
		
		Если СтруктураРеквизитов.Свойство(Реквизит.Имя) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРеквизита, СтруктураРеквизитов[Реквизит.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Выполняет проверку заполнения переданного объекта проверки по заданным параметрам.
//
// Параметры:
// 		ОбъектПроверки - ДанныеФормыСтруктура, СправочникОбъект.ОбъектыЭксплуатации, СправочникСсылка.ОбъектыЭксплуатации - Объект, ссылка или массив ссылок на объекты эксплуатации, которые необходимо проверить на корректность заполнения.
// 		ПараметрыПроверки - см. Справочники.ОбъектыЭксплуатации.ПараметрыПроверкиЗаполнения
// 		Отказ - Булево - Возвращаемый параметр, признак наличия ошибок при проверки.
//
Процедура ПроверитьЗаполнениеОбъектаЭксплуатации(ОбъектПроверки, ПараметрыПроверки, Отказ=Ложь) Экспорт
	
	КэшированныеЗначения = Неопределено;
	ОбъектыЭксплуатации.ИнициализироватьКэшированныеЗначенияПроверкиЗаполнения(КэшированныеЗначения);
	
	ТипОбъекта = ТипЗнч(ОбъектПроверки);
	
	МассивОбъектовЭксплуатации = Новый Массив;
	
	Если ТипОбъекта = Тип("СправочникСсылка.ОбъектыЭксплуатации")
		Или ТипОбъекта = Тип("Массив") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектыЭксплуатации", ОбъектПроверки);
		
		СформироватьЗапросПроверкиЗаполнения(Запрос.Текст);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПроверитьОбъектЭксплуатации(
				Выборка,
				ПараметрыПроверки,
				КэшированныеЗначения);
			
			МассивОбъектовЭксплуатации.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	Иначе
		
		ПроверитьОбъектЭксплуатации(
			ОбъектПроверки,
			ПараметрыПроверки,
			КэшированныеЗначения);
		
		МассивОбъектовЭксплуатации.Добавить(ОбъектПроверки.Ссылка);
		
	КонецЕсли;
	
	ПараметрыПроверки.Вставить("ОтказПроверкиУзлов", Ложь);
	
	Если ПараметрыПроверки.ИспользоватьУзлыОбъектовЭксплуатации
		И ПараметрыПроверки.ПроверятьУзлы Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектыЭксплуатации", МассивОбъектовЭксплуатации);
		СформироватьЗапросПроверкиЗаполненияУзлов(Запрос.Текст);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Справочники.УзлыОбъектовЭксплуатации.ПроверитьЗаполнение(
					Выборка,
					ПараметрыПроверки.ПараметрыПроверкиУзлов,
					ПараметрыПроверки.ОтказПроверкиУзлов, // Отказ
					КэшированныеЗначения);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПроверки.ПотокОшибок.СписокОшибок.Количество() <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПараметрыПроверки.ПараметрыПроверкиУзлов.ПотокОшибок.СписокОшибок.Количество() <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПараметрыПроверки.СообщатьОшибки Тогда
		ОбъектыЭксплуатации.СообщитьОшибкиПроверкиЗаполнения(ПараметрыПроверки.ПотокОшибок, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет разблокировку объекта эксплуатации для разрешения возможности интерактивного редактирования.
//
// Параметры:
//	ОбъектЭксплуатации - СправочникСсылка.ОбъектыЭксплуатации - Ссылка на элемент справочника
//	Отказ - Булево - Возвращаемый параметр, признак наличия ошибок во время выполнения.
//
Процедура РазблокироватьОбъектЭксплуатации(ОбъектЭксплуатации, Отказ=Ложь) Экспорт
	
	ДанныеЗаполнения = Новый Структура("Статус", Перечисления.СтатусыОбъектовЭксплуатации.Редактируется);
	
	ОбъектСправочника = ОбъектЭксплуатации.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(ОбъектСправочника, ДанныеЗаполнения);
	Попытка
		ОбъектСправочника.Записать();
	Исключение
		Отказ = Истина;
		ВызватьИсключение НСтр("ru = 'Ошибка при попытке записи объекта эксплуатации:';
								|en = 'An error occurred while trying to save asset:'") + " " + ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
КонецПроцедуры

//-- НЕ УТКА

// Формирует сведения об учете основного средства
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации	- Основное средство, для которого нужно получить сведения.
//  ОтборОрганизация - СправочникСсылка.Организации - Организация, для которой нужно получить сведения.
// 
// Возвращаемое значение:
//  Структура, Неопределено - Содержит сведения об учете.
//
Функция СведенияОбУчете(ОсновноеСредство, ОтборОрганизация = Неопределено) Экспорт

	СведенияОбУчете = ОбъектыЭксплуатацииЛокализация.СведенияОбУчете(ОсновноеСредство, ОтборОрганизация);
	
	Если СведенияОбУчете = NULL Тогда
		
		Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС)
			ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
			ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОС)
			ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ)
			ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПараметрыАмортизацииОСУУ) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК ВидОбъектаУчета,
		|
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВводаВЭксплуатациюБУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВводаВЭксплуатациюНУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВводаВЭксплуатациюУУ,
		|
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюБУ, НЕОПРЕДЕЛЕНО) КАК ДокументВводаВЭксплуатациюБУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюБУ, НЕОПРЕДЕЛЕНО) КАК ДокументВводаВЭксплуатациюНУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюУУ, НЕОПРЕДЕЛЕНО) КАК ДокументВводаВЭксплуатациюУУ,
		|
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ, НЕОПРЕДЕЛЕНО) КАК ДокументСнятияСУчетаБУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ, НЕОПРЕДЕЛЕНО) КАК ДокументСнятияСУчетаНУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаУУ, НЕОПРЕДЕЛЕНО) КАК ДокументСнятияСУчетаУУ,
		|
		|	ВЫБОР
		|		КОГДА ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ ССЫЛКА Документ.СписаниеОС2_4
		|				И ЕСТЬNULL(ВЫРАЗИТЬ(ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ КАК Документ.СписаниеОС2_4).СписаниеСПрошлойДаты, ЛОЖЬ)
		|			ТОГДА ВЫРАЗИТЬ(ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ КАК Документ.СписаниеОС2_4).ДатаСписания
		|		ИНАЧЕ ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ.Дата, ДАТАВРЕМЯ(1, 1, 1))
		|	КОНЕЦ КАК ДатаСнятияСУчетаБУ,
		|
		|	ВЫБОР
		|		КОГДА ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ ССЫЛКА Документ.СписаниеОС2_4
		|				И ЕСТЬNULL(ВЫРАЗИТЬ(ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ КАК Документ.СписаниеОС2_4).СписаниеСПрошлойДаты, ЛОЖЬ)
		|			ТОГДА ВЫРАЗИТЬ(ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ КАК Документ.СписаниеОС2_4).ДатаСписания
		|		ИНАЧЕ ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаБУ.Дата, ДАТАВРЕМЯ(1, 1, 1))
		|	КОНЕЦ КАК ДатаСнятияСУчетаНУ,
		|
		|	ВЫБОР
		|		КОГДА ПервоначальныеСведенияОС.ДокументСнятияСУчетаУУ ССЫЛКА Документ.СписаниеОС2_4
		|				И ЕСТЬNULL(ВЫРАЗИТЬ(ПервоначальныеСведенияОС.ДокументСнятияСУчетаУУ КАК Документ.СписаниеОС2_4).СписаниеСПрошлойДаты, ЛОЖЬ)
		|			ТОГДА ВЫРАЗИТЬ(ПервоначальныеСведенияОС.ДокументСнятияСУчетаУУ КАК Документ.СписаниеОС2_4).ДатаСписания
		|		ИНАЧЕ ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаУУ.Дата, ДАТАВРЕМЯ(1, 1, 1))
		|	КОНЕЦ КАК ДатаСнятияСУчетаУУ,
		|
		|	ЕСТЬNULL(ПорядокУчетаОС.ГруппаФинансовогоУчета, НЕОПРЕДЕЛЕНО) КАК ГруппаФинансовогоУчета,
		|	ЕСТЬNULL(ПорядокУчетаОС.ГруппаФинансовогоУчета.Представление, """") КАК ГруппаФинансовогоУчетаПредставление,
		|
		|	ВЫБОР 
		|		КОГДА &ОтборПоОрганизации 
		|				И МестонахождениеОС.Арендатор = &ОтборОрганизация
		|				И НЕ ПорядокУчетаОСБУ.ОсновноеСредство ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
		|		ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
		|	КОНЕЦ КАК СостояниеБУ,
		|
		|	ВЫБОР 
		|		КОГДА &ОтборПоОрганизации 
		|				И МестонахождениеОС.Арендатор = &ОтборОрганизация
		|				И НЕ ПорядокУчетаОСБУ.ОсновноеСредство ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
		|		ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
		|	КОНЕЦ КАК СостояниеНУ,
		|
		|	ВЫБОР 
		|		КОГДА &ОтборПоОрганизации 
		|				И МестонахождениеОС.Арендатор = &ОтборОрганизация
		|				И НЕ ПорядокУчетаОСУУ.ОсновноеСредство ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
		|		ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
		|	КОНЕЦ КАК СостояниеУУ,
		|
		|	ЕСТЬNULL(ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимостьРегл,
		|
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияБУ, 0) КАК СрокИспользованияБУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСУУ.СрокИспользования, 0) КАК СрокИспользованияУУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияБУ, 0) КАК СрокИспользованияНУ,
		|
		|	МестонахождениеОС.Период КАК ПериодСведенийОМестонахождении,
		|	МестонахождениеОС.Организация КАК Организация,
		|	ЕСТЬNULL(МестонахождениеОС.Организация.Представление, """") КАК ОрганизацияПредставление,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	ЕСТЬNULL(МестонахождениеОС.МОЛ.Представление, """") КАК МОЛПредставление,
		|	МестонахождениеОС.Местонахождение КАК Подразделение,
		|	ЕСТЬNULL(МестонахождениеОС.Местонахождение.Представление, """") КАК ПодразделениеПредставление,
		|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
		|	МестонахождениеОС.ОсновноеСредство.ТипОС КАК ТипОС,
		|	ЛОЖЬ КАК ПолученоВАрендуОтДругойОрганизации,
		|	НЕ АрендованныеОС.ОсновноеСредство ЕСТЬ NULL КАК ПолученВАренду,
		|	НЕ ПереданныеВАрендуОС.ОсновноеСредство ЕСТЬ NULL КАК ПереданВАренду,
		|	ЕСТЬNULL(АрендованныеОС.Партнер, ЕСТЬNULL(ПереданныеВАрендуОС.Партнер, НЕОПРЕДЕЛЕНО)) КАК Партнер,
		|	ЕСТЬNULL(АрендованныеОС.Партнер.Представление, ЕСТЬNULL(ПереданныеВАрендуОС.Партнер.Представление, """")) КАК ПартнерПредставление,
		|	ЕСТЬNULL(АрендованныеОС.Контрагент, ЕСТЬNULL(ПереданныеВАрендуОС.Контрагент, НЕОПРЕДЕЛЕНО)) КАК Контрагент,
		|	ЕСТЬNULL(АрендованныеОС.Контрагент.Представление, ЕСТЬNULL(ПереданныеВАрендуОС.Контрагент.Представление, """")) КАК КонтрагентПредставление,
		|	ЕСТЬNULL(АрендованныеОС.Договор, ЕСТЬNULL(ПереданныеВАрендуОС.Договор, НЕОПРЕДЕЛЕНО)) КАК Договор,
		|	ЕСТЬNULL(АрендованныеОС.Договор.Представление, ЕСТЬNULL(ПереданныеВАрендуОС.Договор.Представление, """")) КАК ДоговорПредставление
		|
		|ИЗ
		|	РегистрСведений.МестонахождениеОС.СрезПоследних(
		|			, 
		|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|				И ОсновноеСредство = &Ссылка) КАК МестонахождениеОС
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
		|				,  
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И ОсновноеСредство = &Ссылка) КАК ПервоначальныеСведенияОС
		|		ПО (ПервоначальныеСведенияОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
		|			И (ПервоначальныеСведенияОС.Организация = МестонахождениеОС.Организация)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
		|				, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОС
		|		ПО (ПорядокУчетаОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
		|				, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОСБУ
		|		ПО (ПорядокУчетаОСБУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
		|			И (ПорядокУчетаОСБУ.Организация = МестонахождениеОС.Организация)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|				, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОСУУ
		|		ПО (ПорядокУчетаОСУУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
		|			И (ПорядокУчетаОСУУ.Организация = МестонахождениеОС.Организация)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(
		|				, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И ОсновноеСредство = &Ссылка) КАК ПараметрыАмортизацииОСБУ
		|		ПО (ПараметрыАмортизацииОСБУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
		|			И (ПараметрыАмортизацииОСБУ.Организация = МестонахождениеОС.Организация)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(
		|				, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И ОсновноеСредство = &Ссылка) КАК ПараметрыАмортизацииОСУУ
		|		ПО (ПараметрыАмортизацииОСУУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
		|			И (ПараметрыАмортизацииОСУУ.Организация = МестонахождениеОС.Организация)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПереданныеВАрендуОС.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК ПереданныеВАрендуОС
		|		ПО (ПереданныеВАрендуОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
		|			И (ПереданныеВАрендуОС.Организация = МестонахождениеОС.Организация)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АрендованныеОС.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК АрендованныеОС
		|		ПО (АрендованныеОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ОсновноеСредство);
		Запрос.УстановитьПараметр("ОтборОрганизация", ОтборОрганизация);
		Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(ОтборОрганизация));
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СведенияОбУчете = Новый Структура;
		Для каждого КолонкаЗапроса Из Результат.Колонки Цикл
			СведенияОбУчете.Вставить(КолонкаЗапроса.Имя);
		КонецЦикла; 
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СведенияОбУчете, Выборка);
		
	КонецЕсли; 
	
	Возврат СведенияОбУчете;

КонецФункции

// Возвращает сведения об основном средстве.
//
// Параметры:
//  ОсновноеСредствоИлиСписок - Массив, СправочникСсылка.ОбъектыЭксплуатации - Основное средство для которого нужно получить сведения.
//  Период - Дата - На какую дату нужно получить сведения.
// 
// Возвращаемое значение:
//  Соответствие, Структура - Содержит сведения об основном средстве.
//
Функция ПервоначальныеСведения(ОсновноеСредствоИлиСписок, Период = '000101010000') Экспорт
	
	ПервоначальныеСведения = ОбъектыЭксплуатацииЛокализация.ПервоначальныеСведения(ОсновноеСредствоИлиСписок, Период);
	
	Если ПервоначальныеСведения <> Неопределено Тогда
		Возврат ПервоначальныеСведения;
	КонецЕсли; 
		
	ПервоначальныеСведения = Новый Структура;
	ПервоначальныеСведения.Вставить("Организация", Неопределено);
	ПервоначальныеСведения.Вставить("Местонахождение", Неопределено);
	ПервоначальныеСведения.Вставить("МОЛ", Неопределено);
	ПервоначальныеСведения.Вставить("НаправлениеДеятельности", Неопределено);
	ПервоначальныеСведения.Вставить("ДатаВводаВЭксплуатациюБУ", '000101010000');
	ПервоначальныеСведения.Вставить("ДатаВводаВЭксплуатациюНУ", '000101010000');
	ПервоначальныеСведения.Вставить("ДатаВводаВЭксплуатациюУУ", '000101010000');
	ПервоначальныеСведения.Вставить("ДокументВводаВЭксплуатациюБУ", Неопределено);
	ПервоначальныеСведения.Вставить("ДокументВводаВЭксплуатациюНУ", Неопределено);
	ПервоначальныеСведения.Вставить("ДокументВводаВЭксплуатациюУУ", Неопределено);
	ПервоначальныеСведения.Вставить("СостояниеБУ", Перечисления.СостоянияОС.НеПринятоКУчету);
	ПервоначальныеСведения.Вставить("СостояниеНУ", Перечисления.СостоянияОС.НеПринятоКУчету);
	ПервоначальныеСведения.Вставить("СостояниеУУ", Перечисления.СостоянияОС.НеПринятоКУчету);
	ПервоначальныеСведения.Вставить("ЛиквидационнаяСтоимость", 0);
	ПервоначальныеСведения.Вставить("ЛиквидационнаяСтоимостьРегл", 0);
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) Тогда
		
		Возврат ?(ТипЗнч(ОсновноеСредствоИлиСписок) = Тип("Массив"), Новый Соответствие, ПервоначальныеСведения);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОС.Организация КАК Организация,
	|	МестонахождениеОС.Местонахождение КАК Местонахождение,
	|	МестонахождениеОС.МОЛ КАК МОЛ,
	|	ПорядокУчетаОС.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ КАК ДатаВводаВЭксплуатациюУУ,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ КАК ДатаВводаВЭксплуатациюБУ,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ КАК ДатаВводаВЭксплуатациюНУ,
	|	ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюУУ КАК ДокументВводаВЭксплуатациюУУ,
	|	ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюБУ КАК ДокументВводаВЭксплуатациюБУ,
	|	ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюБУ КАК ДокументВводаВЭксплуатациюНУ,
	|	ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеУУ,
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеБУ,
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимостьРегл
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(&Период, ДатаИсправления = ДАТАВРЕМЯ(1,1,1) И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
	|				&Период, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1) 
	|					И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОС
	|		ПО МестонахождениеОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|			И МестонахождениеОС.Организация = ПервоначальныеСведенияОС.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|				&Период, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОС
	|		ПО МестонахождениеОС.ОсновноеСредство = ПорядокУчетаОС.ОсновноеСредство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|				&Период,
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСБУ
	|		ПО МестонахождениеОС.ОсновноеСредство = ПорядокУчетаОСБУ.ОсновноеСредство
	|			И МестонахождениеОС.Организация = ПорядокУчетаОСБУ.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
	|				&Период, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУ
	|		ПО МестонахождениеОС.ОсновноеСредство = ПорядокУчетаОСУУ.ОсновноеСредство
	|			И МестонахождениеОС.Организация = ПорядокУчетаОСУУ.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(
	|				&Период, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСБУ
	|		ПО МестонахождениеОС.ОсновноеСредство = ПараметрыАмортизацииОСБУ.ОсновноеСредство
	|			И МестонахождениеОС.Организация = ПараметрыАмортизацииОСБУ.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(
	|				&Период, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСУУ
	|		ПО МестонахождениеОС.ОсновноеСредство = ПараметрыАмортизацииОСУУ.ОсновноеСредство
	|			И МестонахождениеОС.Организация = ПараметрыАмортизацииОСУУ.Организация
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", Период);
	
	СписокОС = ?(ТипЗнч(ОсновноеСредствоИлиСписок) = Тип("Массив"), ОсновноеСредствоИлиСписок, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновноеСредствоИлиСписок));
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ?(ТипЗнч(ОсновноеСредствоИлиСписок) = Тип("Массив"), Новый Соответствие, ПервоначальныеСведения);
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Если ТипЗнч(ОсновноеСредствоИлиСписок) = Тип("Массив") Тогда
		Результат = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПервоначальныеСведенияОС = ОбщегоНазначения.СкопироватьРекурсивно(ПервоначальныеСведения);
			ЗаполнитьЗначенияСвойств(ПервоначальныеСведенияОС, Выборка);
			Результат.Вставить(Выборка.ОсновноеСредство, ПервоначальныеСведенияОС);
		КонецЦикла;
	Иначе
		Результат = ПервоначальныеСведения;
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
// 		Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ГруппаОС");
	Результат.Добавить("ШифрПоЕНАОФ");
	Результат.Добавить("КодПоОКОФ");
	Результат.Добавить("ГруппаОСМеждународныйУчет");
	
	Возврат Результат;
	
КонецФункции

// Возвращает показатель наработки объекта эксплуатации.
//
// Параметры:
//  ОбъектЭксплуатации	 - СправочникСсылка.ОбъектыЭксплуатации	 - Объект эксплуатации.
//  Дата				 - Дата									 - Дата.
// 
// Возвращаемое значение:
//  СправочникСсылка.ПоказателиНаработки - Показатель наработки объекта эксплуатации.
//
Функция ПоказательНаработки(ОбъектЭксплуатации, Дата) Экспорт

	ТекстЗапроса = ОбъектыЭксплуатацииЛокализация.ТекстЗапросаПоказательНаработки();
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПорядокУчетаОС.ПоказательНаработки КАК ПоказательНаработки
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
		|		&Дата, 
		|		ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|			И ОсновноеСредство = &Объект) КАК ПорядокУчетаОС"
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Объект", ОбъектЭксплуатации);
	Запрос.УстановитьПараметр("ИспользуетсяУправлениеВНА_2_4", ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Дата));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ПоказателиНаработки.ПустаяСсылка();
	КонецЕсли;
		
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
		
	Возврат Выборка.ПоказательНаработки;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает реквизиты объекта, которые разрешается редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами") Тогда
		РедактируемыеРеквизиты.Добавить("ДатаВыпуска");
		РедактируемыеРеквизиты.Добавить("Изготовитель");
		РедактируемыеРеквизиты.Добавить("Модель");
		РедактируемыеРеквизиты.Добавить("РемонтирующееПодразделение");
		РедактируемыеРеквизиты.Добавить("ЭксплуатирующееПодразделение");
		РедактируемыеРеквизиты.Добавить("СтатьяРасходов");
	КонецЕсли;
	
	Возврат РедактируемыеРеквизиты;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ОбработкаВыполнена = ВнеоборотныеАктивыВызовСервера.ОбработкаПолученияФормы_ОбъектыЭксплуатации(
							ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
	Если ВидФормы = "ФормаВыбора" И НЕ ОбработкаВыполнена Тогда
		
		ВыбраннаяФорма = "ФормаВыбора2_4";
		СтандартнаяОбработка = Ложь;

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ДанныеВыбора = ВнеоборотныеАктивыВызовСервера.ДанныеВыбораОбъектовЭксплуатации(Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция ЕстьПраваНаЧтениеСведений() Экспорт

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4()
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.СтоимостьОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.АмортизацияОС)
		ИЛИ НЕ ОбъектыЭксплуатацииЛокализация.ЕстьПраваНаЧтениеСведений() Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Функция ПредставлениеСведенийОбУчете(СведенияОбУчете, СтоимостьИАмортизация, ВключитьНезаполненные = Истина) Экспорт

	ПредставлениеСведений = Новый Структура;

	СведенияЛиквидационнаяСтоимость = Новый Массив;
	СведенияЛиквидационнаяСтоимостьРегл = Новый Массив;
	
	СведенияВосстановительнаяСтоимость = Новый Массив;
	СведенияНакопленнаяАмортизация = Новый Массив;
	СведенияОбесценение = Новый Массив;
	СведенияОстаточнаяСтоимость = Новый Массив;
	
	СведенияМестонахождениеАдрес = Новый Массив;
	Период = '000101010000';
	
	Если СведенияОбУчете <> Неопределено Тогда
		ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(СведенияОбУчете.Организация);
	Иначе
		ВалютаРегл = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли; 

	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
		
	ВалютаРеглПредставление = Строка(ВалютаРегл);
	ВалютаУпрПредставление = Строка(ВалютаУпр);
	
	ВедетсяРегламентированныйУчетВНА = ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА();
	
	ВнеоборотныеАктивыСлужебный.ПредставлениеСведенийОДатеПринятияКУчету(СведенияОбУчете, ПредставлениеСведений);
	ВнеоборотныеАктивыСлужебный.ПредставлениеСведенийОСрокеИспользования(СведенияОбУчете, ПредставлениеСведений);
	ВнеоборотныеАктивыСлужебный.ПредставлениеСведенийОДатеСписания(СведенияОбУчете, ПредставлениеСведений);
	ВнеоборотныеАктивыСлужебный.ПредставлениеСведенийОЛиквидационнойСтоимости(СведенияОбУчете, ПредставлениеСведений);
				
	#Область ОбщиеСведения
	
	Если СведенияОбУчете <> Неопределено Тогда
		
		ВнеоборотныеАктивыСлужебный.ПредставлениеСведенийПоСсылке(
			"СведенияГФУ", 
			НСтр("ru = 'Группа финансового учета:';
				|en = 'Financial accounting group:'"), 
			СведенияОбУчете.ГруппаФинансовогоУчета, 
			СведенияОбУчете.ГруппаФинансовогоУчетаПредставление, 
			ПредставлениеСведений);
		
		ВнеоборотныеАктивыСлужебный.ПредставлениеСведенийПоСсылке(
			"СведенияПартнер", 
			 ?(СведенияОбУчете.ПолученВАренду, НСтр("ru = 'Арендодатель:';
													|en = 'Lessor:'"), НСтр("ru = 'Арендатор:';
																					|en = 'Lessee:'")), 
			СведенияОбУчете.Партнер, 
			СведенияОбУчете.ПартнерПредставление, 
			ПредставлениеСведений);
			
		Если НЕ ЗначениеЗаполнено(СведенияОбУчете.Партнер) Тогда
			ТекстНадписи = ?(СведенияОбУчете.ПолученВАренду, НСтр("ru = 'Арендодатель:';
																	|en = 'Lessor:'"), НСтр("ru = 'Арендатор:';
																								|en = 'Lessee:'"));
		Иначе
			ТекстНадписи = НСтр("ru = 'Контрагент:';
								|en = 'Counterparty:'");
		КонецЕсли;
		ВнеоборотныеАктивыСлужебный.ПредставлениеСведенийПоСсылке(
			"СведенияКонтрагент", 
			ТекстНадписи, 
			СведенияОбУчете.Контрагент, 
			СведенияОбУчете.КонтрагентПредставление, 
			ПредставлениеСведений);
			
		ВнеоборотныеАктивыСлужебный.ПредставлениеСведенийПоСсылке(
			"СведенияДоговор", 
			НСтр("ru = 'Договор:';
				|en = 'Contract:'"), 
			СведенияОбУчете.Договор, 
			СведенияОбУчете.ДоговорПредставление, 
			ПредставлениеСведений);
		 
	Иначе
			
		ПредставлениеСведений.Вставить("СведенияГФУ", Неопределено);
		ПредставлениеСведений.Вставить("СведенияПартнер", Неопределено);
		ПредставлениеСведений.Вставить("СведенияКонтрагент", Неопределено);
		ПредставлениеСведений.Вставить("СведенияДоговор", Неопределено);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Местонахождение
	
	Если СведенияОбУчете <> Неопределено Тогда
		
		Период = СведенияОбУчете.ПериодСведенийОМестонахождении; 

		ВнеоборотныеАктивыСлужебный.ПредставлениеСведенийПоСсылке(
			"СведенияМестонахождениеОрганизация", 
			НСтр("ru = 'Организация:';
				|en = 'Company:'"), 
			СведенияОбУчете.Организация, 
			СведенияОбУчете.ОрганизацияПредставление, 
			ПредставлениеСведений);
			
		ВнеоборотныеАктивыСлужебный.ПредставлениеСведенийПоСсылке(
			"СведенияМестонахождениеПодразделение", 
			НСтр("ru = 'Подразделение:';
				|en = 'Business unit:'"), 
			СведенияОбУчете.Подразделение, 
			СведенияОбУчете.ПодразделениеПредставление, 
			ПредставлениеСведений);
			
		ВнеоборотныеАктивыСлужебный.ПредставлениеСведенийПоСсылке(
			"СведенияМестонахождениеМОЛ", 
			НСтр("ru = 'МОЛ:';
				|en = 'Responsible employee:'"), 
			СведенияОбУчете.МОЛ, 
			СведенияОбУчете.МОЛПредставление, 
			ПредставлениеСведений);
			
		Если ЗначениеЗаполнено(СведенияОбУчете.АдресМестонахождения) Тогда
			СведенияМестонахождениеАдрес.Добавить(НСтр("ru = 'Адрес:';
														|en = 'Address:'"));
			СведенияМестонахождениеАдрес.Добавить(" ");
			СведенияМестонахождениеАдрес.Добавить(СведенияОбУчете.АдресМестонахождения);
			СведенияМестонахождениеАдрес.Добавить(" ");
			СведенияМестонахождениеАдрес.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.ПоказатьНаКарте,,,, СведенияОбУчете.АдресМестонахождения));
		ИначеЕсли ВключитьНезаполненные Тогда
			СведенияМестонахождениеАдрес.Добавить(НСтр("ru = 'Адрес:';
														|en = 'Address:'"));
			СведенияМестонахождениеАдрес.Добавить(" ");
			СведенияМестонахождениеАдрес.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'не указан';
																					|en = 'not specified'"),, ЦветаСтиля.НезаполненноеПолеТаблицы));
		КонецЕсли;
		 
	Иначе
			
		ПредставлениеСведений.Вставить("СведенияМестонахождениеОрганизация", Неопределено);
		ПредставлениеСведений.Вставить("СведенияМестонахождениеПодразделение", Неопределено);
		ПредставлениеСведений.Вставить("СведенияМестонахождениеМОЛ", Неопределено);
		
	КонецЕсли; 
	
	#КонецОбласти
	
	#Область Суммы
	
	Если НЕ ВедетсяРегламентированныйУчетВНА 
		И ВалютаРегл = ВалютаУпр
		И СведенияОбУчете <> Неопределено Тогда
		
		ПредставлениеСуммы = ВнеоборотныеАктивыСлужебный.ПредставлениеСуммы(
			СтоимостьИАмортизация.Стоимость, НСтр("ru = 'Восстановительная стоимость:';
													|en = 'Replacement cost:'"), ВалютаУпр);
		СведенияВосстановительнаяСтоимость.Добавить(ПредставлениеСуммы);
		
		ПредставлениеСуммы = ВнеоборотныеАктивыСлужебный.ПредставлениеСуммы(
			СтоимостьИАмортизация.Амортизация, НСтр("ru = 'Накопленная амортизация:';
													|en = 'Accumulated depreciation:'"), ВалютаУпр);
		СведенияНакопленнаяАмортизация.Добавить(ПредставлениеСуммы);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбесценениеВНА") Тогда
			ПредставлениеСуммы = ВнеоборотныеАктивыСлужебный.ПредставлениеСуммы(
				СтоимостьИАмортизация.ОбесценениеУпр, НСтр("ru = 'Обесценение:';
															|en = 'Impairment:'"), ВалютаУпр);
			СведенияОбесценение.Добавить(ПредставлениеСуммы);
		КонецЕсли;
		
		ПредставлениеСуммы = ВнеоборотныеАктивыСлужебный.ПредставлениеСуммы(
			СтоимостьИАмортизация.Стоимость - СтоимостьИАмортизация.Амортизация - СтоимостьИАмортизация.ОбесценениеУпр,
			НСтр("ru = 'Остаточная стоимость:';
				|en = 'Net book value:'"), ВалютаУпр);
		СведенияОстаточнаяСтоимость.Добавить(ПредставлениеСуммы);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ПредставлениеСведений.Вставить("Период", Период);
	ПредставлениеСведений.Вставить("СведенияВосстановительнаяСтоимость", СведенияВосстановительнаяСтоимость);
	ПредставлениеСведений.Вставить("СведенияНакопленнаяАмортизация", СведенияНакопленнаяАмортизация);
	ПредставлениеСведений.Вставить("СведенияОбесценение", СведенияОбесценение);
	ПредставлениеСведений.Вставить("СведенияОстаточнаяСтоимость", СведенияОстаточнаяСтоимость);
	ПредставлениеСведений.Вставить("СведенияМестонахождениеАдрес", СведенияМестонахождениеАдрес);
	
	Возврат ПредставлениеСведений;

КонецФункции

// Возвращает владельца узла или компонента амортизации по состоянию на дату.
// 
// Параметры:
//  УзелКомпонент - СправочникСсылка.ОбъектыЭксплуатации - узел или компонент амортизации
//  ДатаСведений - Дата - Дата сведений, если не указано, то на текущую дату.
// 
// Возвращаемое значение:
//  СправочникСсылка.ОбъектыЭксплуатации - Владелец узла или компонента амортизации.
//
Функция ВладелецУзлаКомпонентаАмортизации(УзелКомпонент, ДатаСведений = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(УзелКомпонент) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелКомпонент", УзелКомпонент);
	Запрос.УстановитьПараметр("Период", ?(ДатаСведений = Неопределено, ТекущаяДатаСеанса(), ДатаСведений));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УзлыКомпоненты.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.УзлыКомпонентыАмортизации.СрезПоследних(&Период, УзелКомпонент = &УзелКомпонент) КАК УзлыКомпоненты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОсновноеСредство;
	Иначе
		Возврат ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеЗапросаДляВыбора(Параметры, УстановитьВсеОтборы = Ложь, МассивОбъектов = Неопределено) Экспорт

	Если Параметры.Свойство("ВладелецУзлаКомпонентаОС") Тогда
		ДатаСведений = Неопределено;
		Параметры.Свойство("ДатаСведений", ДатаСведений);
		МассивОбъектов = ПолучитьУзлыКомпонентовАмортизацииПоВладельцу(Параметры.ВладелецУзлаКомпонентаОС, ДатаСведений);
	КонецЕсли;

	ОписаниеЗапросаДляВыбора = ОбъектыЭксплуатацииЛокализация.ОписаниеЗапросаДляВыбора(Параметры, УстановитьВсеОтборы, МассивОбъектов);
	
	Если ОписаниеЗапросаДляВыбора <> Неопределено Тогда
		Возврат ОписаниеЗапросаДляВыбора;
	КонецЕсли;
	
	Если Параметры.Свойство("Контекст") Тогда
		ДоступныеКонтексты = Новый Структура(Параметры.Контекст);
	Иначе
		ДоступныеКонтексты = Новый Структура("УУ,БУ"); // По умолчанию доступны все контексты.
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") Тогда
		ОтборСписка = Параметры.Отбор;
	Иначе
		ОтборСписка = Новый Структура;
	КонецЕсли;
	
	Если ОтборСписка.Свойство("ОтражатьВРеглУчете")
		И НЕ ОтборСписка.ОтражатьВРеглУчете
		И ДоступныеКонтексты.Свойство("БУ") Тогда
		ДоступныеКонтексты.Удалить("БУ"); // Доступен выбор отражения в учете и в регл. учете нет отражения.
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("ОтражатьВУпрУчете")
		И НЕ ОтборСписка.ОтражатьВУпрУчете
		И ДоступныеКонтексты.Свойство("УУ") Тогда
		ДоступныеКонтексты.Удалить("УУ"); // Доступен выбор отражения в учете и в упр. учете нет отражения.
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("НаправлениеДеятельности")
		И НЕ ЗначениеЗаполнено(ОтборСписка.НаправлениеДеятельности) Тогда
		ОтборСписка.Удалить("НаправлениеДеятельности");
	КонецЕсли; 
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС) Тогда
		ОтборСписка.Удалить("Подразделение");
		ОтборСписка.Удалить("Организация");
		ОтборСписка.Удалить("МОЛ");
	КонецЕсли;
	
	Если ОтборСписка.Свойство("СрокИспользованияУУ")
		И НЕ ЗначениеЗаполнено(ОтборСписка.СрокИспользованияУУ) Тогда
		ОтборСписка.Удалить("СрокИспользованияУУ");
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("СрокИспользованияБУ")
		И НЕ ЗначениеЗаполнено(ОтборСписка.СрокИспользованияБУ) Тогда
		ОтборСписка.Удалить("СрокИспользованияБУ");
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("Организация")
		И НЕ ЗначениеЗаполнено(ОтборСписка.Организация) Тогда
		ОтборСписка.Удалить("Организация");
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("Подразделение")
		И НЕ ЗначениеЗаполнено(ОтборСписка.Подразделение) Тогда
		ОтборСписка.Удалить("Подразделение");
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("МОЛ")
		И НЕ ЗначениеЗаполнено(ОтборСписка.МОЛ) Тогда
		ОтборСписка.Удалить("МОЛ");
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("Договор")
		И НЕ ЗначениеЗаполнено(ОтборСписка.Договор) Тогда
		ОтборСписка.Удалить("Договор");
	КонецЕсли; 
	
	ЭтоВыборУзлаКомпонента = Ложь;
	ЭтоВыборОС = Ложь;
	Если ОтборСписка.Свойство("ТипОС")
		И (ОтборСписка.ТипОС = Перечисления.ТипыОС.Узел
		Или ОтборСписка.ТипОС = Перечисления.ТипыОС.КомпонентАмортизации) Тогда
		ЭтоВыборУзлаКомпонента = Истина;
	ИначеЕсли ОтборСписка.Свойство("ТипОС")
		И ОтборСписка.ТипОС = Перечисления.ТипыОС.ОбъектЭксплуатации Тогда
		ЭтоВыборОС = Истина;
	КонецЕсли;
	
	ИсключитьКомпоненты = Ложь;
	Если ОтборСписка.Свойство("Владелец")
		И ТипЗнч(ОтборСписка.Владелец) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов")
		И ДоступныеКонтексты.Свойство("БУ") Тогда
		ИсключитьКомпоненты = Истина; // Компоненты амортизации запрещены для выбора в качестве аналитики расходов
	КонецЕсли; 
	
	ДополнительныеПоля = "";
	ТекстОтборы = "";
	ПараметрыЗапроса = Новый Структура;
	ДоступныеПоля = Новый Массив;
	НеобходимыеТаблицы = Новый Структура;
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС) Тогда
		
		ПолеОрганизация = "ЕСТЬNULL(МестонахождениеОС.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
		ПолеМОЛ = "ЕСТЬNULL(МестонахождениеОС.МОЛ, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))";
		ПолеПодразделение = "ЕСТЬNULL(МестонахождениеОС.Местонахождение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))";
		ПолеАдресМестонахождения = "ЕСТЬNULL(МестонахождениеОС.АдресМестонахождения, """""""")";
		
		НеобходимыеТаблицы.Вставить("МестонахождениеОС");
		
	Иначе
		
		ПолеОрганизация = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		ПолеМОЛ = "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
		ПолеПодразделение = "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
		ПолеАдресМестонахождения = """""";
		
	КонецЕсли;
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОС) Тогда
		
		ПолеГФУ = "ЕСТЬNULL(ПорядокУчетаОС.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка))";
		
		НеобходимыеТаблицы.Вставить("ПорядокУчетаОС");
		
	Иначе
		
		ПолеГФУ = "ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка)";
		
	КонецЕсли;
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС) Тогда
		
		ПолеДатаПринятияКУчетуРегл = "ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1))";
		ПолеДатаПринятияКУчетуУпр = "ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1))";
		
		НеобходимыеТаблицы.Вставить("ПервоначальныеСведенияОС");
		
	Иначе
		ПолеДатаПринятияКУчетуРегл = "ДАТАВРЕМЯ(1, 1, 1)";
		ПолеДатаПринятияКУчетуУпр = "ДАТАВРЕМЯ(1, 1, 1)";
	КонецЕсли;
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ОтборСписка.Свойство("Договор")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.АрендованныеОС) Тогда
		
		ПолеДоговор = "ЕСТЬNULL(АрендованныеОС.Договор, НЕОПРЕДЕЛЕНО)";
		
		НеобходимыеТаблицы.Вставить("АрендованныеОС");
		
	Иначе
		ПолеДоговор = "НЕОПРЕДЕЛЕНО";
	КонецЕсли;
	
	Если Параметры.Свойство("РеквизитыКоторыеДолжныСовпадать")
			И СтрНайти(Параметры.РеквизитыКоторыеДолжныСовпадать, "СрокИспользованияУУ") <> 0 
		ИЛИ ОтборСписка.Свойство("СрокИспользованияУУ") Тогда
		
		ПолеСрокИспользованияУУ = "ЕСТЬNULL(ПараметрыАмортизацииОСУУ.СрокИспользования, 0)";
		
		НеобходимыеТаблицы.Вставить("ПараметрыАмортизацииОСУУ");
		
	Иначе
		
		ПолеСрокИспользованияУУ = "0";
		
	КонецЕсли;
	
	Если Параметры.Свойство("РеквизитыКоторыеДолжныСовпадать")
			И СтрНайти(Параметры.РеквизитыКоторыеДолжныСовпадать, "СрокИспользованияБУ") <> 0 
		ИЛИ ОтборСписка.Свойство("СрокИспользованияБУ") Тогда
		
		ПолеСрокИспользованияБУ = "ЕСТЬNULL(ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияБУ, 0)";
		
		НеобходимыеТаблицы.Вставить("ПараметрыАмортизацииОСБУ");
		
	Иначе
		
		ПолеСрокИспользованияБУ = "0";
		
	КонецЕсли;

	Если Параметры.Свойство("ИспользоватьОтборПоОстаточномуСПИ") 
		И Параметры.Свойство("ДатаСведений")
		И ЗначениеЗаполнено(Параметры.ДатаСведений) Тогда
		
		ПолеОстаточныйСрокИспользованияУУ = 
			"ВЫБОР 
			|	КОГДА ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ ЕСТЬ NULL
			|		ТОГДА 0
			|	КОГДА ПараметрыАмортизацииОСУУ.СрокИспользования - РАЗНОСТЬДАТ(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, НАЧАЛОПЕРИОДА(&ДатаСведений, ДЕНЬ), МЕСЯЦ) < 0
			|		ТОГДА 0
			|	ИНАЧЕ ПараметрыАмортизацииОСУУ.СрокИспользования - РАЗНОСТЬДАТ(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, НАЧАЛОПЕРИОДА(&ДатаСведений, ДЕНЬ), МЕСЯЦ)
			|	КОНЕЦ";
		
		ПолеОстаточныйСрокИспользованияБУ = 
			"ВЫБОР 
			|	КОГДА ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ ЕСТЬ NULL
			|		ТОГДА 0
			|	КОГДА ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияБУ - РАЗНОСТЬДАТ(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, НАЧАЛОПЕРИОДА(&ДатаСведений, ДЕНЬ), МЕСЯЦ) < 0
			|		ТОГДА 0
			|	ИНАЧЕ ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияБУ - РАЗНОСТЬДАТ(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, НАЧАЛОПЕРИОДА(&ДатаСведений, ДЕНЬ), МЕСЯЦ)
			|	КОНЕЦ";
		
		НеобходимыеТаблицы.Вставить("ПервоначальныеСведенияОС");
		НеобходимыеТаблицы.Вставить("ПараметрыАмортизацииОСУУ");
		НеобходимыеТаблицы.Вставить("ПараметрыАмортизацииОСБУ");
		
	Иначе
		
		ПолеОстаточныйСрокИспользованияУУ = "0";
		ПолеОстаточныйСрокИспользованияБУ = "0";
		
	КонецЕсли;
	
	Если Параметры.Свойство("РегистрацияНаработки")
		ИЛИ Параметры.Свойство("УстановкаНаработки")
		ИЛИ Параметры.Свойство("ИсточникПоказателяНаработки") Тогда
		НеобходимыеТаблицы.Вставить("ПараметрыАмортизацииОСУУ");
	КонецЕсли;
				
	ДополнительныеПоля = ДополнительныеПоля + "
		|, " + ПолеОрганизация + " КАК Организация
		|, " + ПолеМОЛ + " КАК МОЛ
		|, " + ПолеПодразделение + " КАК Подразделение
		|, " + ПолеАдресМестонахождения + " КАК АдресМестонахождения
		|, " + ПолеГФУ + " КАК ГруппаФинансовогоУчета
		|, " + ПолеДатаПринятияКУчетуРегл + " КАК ДатаПринятияКУчетуРегл
		|, " + ПолеДатаПринятияКУчетуУпр + " КАК ДатаПринятияКУчетуУпр
		|, " + ПолеСрокИспользованияУУ + " КАК СрокИспользованияУУ
		|, " + ПолеСрокИспользованияБУ + " КАК СрокИспользованияБУ
		|, 0 КАК СрокИспользованияНУ
		|, " + ПолеОстаточныйСрокИспользованияУУ + " КАК ОстаточныйСрокИспользованияУУ
		|, " + ПолеОстаточныйСрокИспользованияБУ + " КАК ОстаточныйСрокИспользованияБУ
		|, 0 КАК ОстаточныйСрокИспользованияНУ
		|, НЕОПРЕДЕЛЕНО КАК Арендатор
		|, НЕОПРЕДЕЛЕНО КАК Арендодатель
		|, " + ПолеДоговор + " КАК Договор";
	
	Если ДоступныеКонтексты.Свойство("БУ") 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСБУ) Тогда
		
		ДоступныеПоля.Добавить("СостояниеБУ");
		ДополнительныеПоля = ДополнительныеПоля + "
			|,ВЫБОР 
			|	КОГДА СправочникОбъектыЭксплуатации.ЭтоГруппа 
			|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
			|	КОГДА ПорядокУчетаОСБУ.СостояниеБУ <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
			|		ТОГДА ПорядокУчетаОСБУ.СостояниеБУ
			|	ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
			|	КОНЕЦ КАК СостояниеБУ";
			
		НеобходимыеТаблицы.Вставить("ПорядокУчетаОСБУ");
		
	Иначе
		
		ДополнительныеПоля = ДополнительныеПоля + "
			|,ВЫБОР 
			|	КОГДА НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа 
			|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
			|	КОНЕЦ КАК СостояниеБУ";
		
	КонецЕсли; 
	
	Если ДоступныеКонтексты.Свойство("УУ")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) Тогда
		
		ДополнительныеПоля = ДополнительныеПоля + "
			|,ВЫБОР 
			|	КОГДА НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа 
			|		ТОГДА ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
			|	КОНЕЦ КАК СостояниеУУ";
		
		НеобходимыеТаблицы.Вставить("ПорядокУчетаОСУУ");
		
	Иначе
		
		ДополнительныеПоля = ДополнительныеПоля + "
			|,ВЫБОР 
			|	КОГДА НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа 
			|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
			|	КОНЕЦ КАК СостояниеУУ";
		
	КонецЕсли;
	
	ДоступенВыборУчета = (ОтборСписка.Свойство("ОтражатьВРеглУчете") ИЛИ ОтборСписка.Свойство("ОтражатьВУпрУчете"));
		
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСБУ) Тогда
		
		Если ОтборСписка.Свойство("Состояние") Тогда
				
			ТекстУсловия = "";
			
			Если ДоступныеКонтексты.Свойство("БУ") И ДоступныеКонтексты.Свойство("УУ") Тогда
				
				Если ДоступенВыборУчета Тогда
					ТекстУсловия = 
					"	ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)
					|	И ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)";
				Иначе
					ТекстУсловия = 
					"	(ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)
					|		ИЛИ ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние))";
				КонецЕсли; 
			
			ИначеЕсли ДоступныеКонтексты.Свойство("БУ") Тогда
				
				ТекстУсловия = 
				"	(ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние))";
			
			ИначеЕсли ДоступныеКонтексты.Свойство("УУ") Тогда
				
				ТекстУсловия = 
				"ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)";
				
			КонецЕсли;
			
			Если ТипЗнч(ОтборСписка.Состояние) = Тип("ФиксированныйМассив") Тогда
				ПараметрыЗапроса.Вставить("Состояние", Новый Массив(ОтборСписка.Состояние));
			Иначе
				ПараметрыЗапроса.Вставить("Состояние", ОтборСписка.Состояние);
			КонецЕсли;
			
			Если ТекстУсловия <> "" Тогда
				ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
			КонецЕсли;

			ОтборСписка.Удалить("Состояние");
			
		Иначе
			
			ТекстУсловия = "";
			
			Если ДоступныеКонтексты.Свойство("БУ") И ДоступныеКонтексты.Свойство("УУ") Тогда
				
				ТекстУсловия = "
				|	(ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка))";
				
			ИначеЕсли ДоступныеКонтексты.Свойство("БУ") Тогда
				
				ТекстУсловия = "
				|	(ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка))";
				
			ИначеЕсли ДоступныеКонтексты.Свойство("УУ") Тогда
				
				ТекстУсловия = "
				|	(ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка))";
				
			КонецЕсли;
			
			Если ТекстУсловия <> "" Тогда
				ПараметрыЗапроса.Вставить("Состояние", Перечисления.СостоянияОС.ПустаяСсылка());
				ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если Параметры.Свойство("УчитыватьВВидеГрупповогоОС")
		И Параметры.УчитыватьВВидеГрупповогоОС Тогда
		
		ТекстУсловия = "СправочникОбъектыЭксплуатации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС)";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
			
	КонецЕсли;
	
	Если ЭтоВыборОС Тогда
		
		ТекстУсловия = "СправочникОбъектыЭксплуатации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации)";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
			
	ИначеЕсли ИсключитьКомпоненты Тогда
		
		ТекстУсловия = "(НЕ СправочникОбъектыЭксплуатации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.КомпонентАмортизации)
			|	ИЛИ СправочникОбъектыЭксплуатации.УчитыватьСтоимостьЛиквидационногоОбязательства)";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
			
	КонецЕсли;
	
	Если УстановитьВсеОтборы Тогда
		
		Для каждого КлючИЗначение Из ОтборСписка Цикл
			
			Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КлючИЗначение.Ключ = "Организация" Тогда
				ПутьКПолю = ПолеОрганизация;
			ИначеЕсли КлючИЗначение.Ключ = "Подразделение" Тогда
				ПутьКПолю = ПолеПодразделение;
			ИначеЕсли КлючИЗначение.Ключ = "МОЛ" Тогда
				ПутьКПолю = ПолеМОЛ;
			ИначеЕсли КлючИЗначение.Ключ = "СрокИспользованияБУ" Тогда
				ПутьКПолю = ПолеСрокИспользованияБУ;
			ИначеЕсли КлючИЗначение.Ключ = "СрокИспользованияУУ" Тогда
				ПутьКПолю = ПолеСрокИспользованияУУ;
			ИначеЕсли КлючИЗначение.Ключ = "Договор" Тогда
				ПутьКПолю = ПолеДоговор;
			ИначеЕсли КлючИЗначение.Ключ = "НаправлениеДеятельности" Тогда
				ПутьКПолю = "ЕСТЬNULL(ПорядокУчетаОС.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))";
			ИначеЕсли КлючИЗначение.Ключ = "ГруппаОС"
				ИЛИ КлючИЗначение.Ключ = "Статус"
				ИЛИ КлючИЗначение.Ключ = "ТипОС" Тогда
				ПутьКПолю = "СправочникОбъектыЭксплуатации." + КлючИЗначение.Ключ;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЭтоМассив = ТипЗнч(КлючИЗначение.Значение) = Тип("ФиксированныйМассив") 
						ИЛИ ТипЗнч(КлючИЗначение.Значение) = Тип("Массив");
						
			ТекстУсловия = ПутьКПолю + ?(ЭтоМассив, " В (&" + КлючИЗначение.Ключ + ")", " = &" + КлючИЗначение.Ключ);
			ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
						
			ПараметрыЗапроса.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	ТекстСоединения = "";
	
	Если НеобходимыеТаблицы.Свойство("МестонахождениеОС")
		ИЛИ НеобходимыеТаблицы.Свойство("ПервоначальныеСведенияОС")
		ИЛИ НеобходимыеТаблицы.Свойство("ПорядокУчетаОСУУ")
		ИЛИ НеобходимыеТаблицы.Свойство("ПараметрыАмортизацииОСУУ")
		ИЛИ НеобходимыеТаблицы.Свойство("ПараметрыАмортизацииОСБУ")
		ИЛИ НеобходимыеТаблицы.Свойство("ПорядокУчетаОСБУ") Тогда
		
		НеобходимыеТаблицы.Вставить("МестонахождениеОС");
		
		Если ЭтоВыборУзлаКомпонента Тогда
			ТекстСоединения = ТекстСоединения + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКомпонентыАмортизации.СрезПоследних(
			|			&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата,
			|			&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК УзлыКомпоненты
			|		ПО СправочникОбъектыЭксплуатации.Ссылка = УзлыКомпоненты.УзелКомпонент
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОС КАК МестонахождениеОС
			|		ПО УзлыКомпоненты.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство";
		Иначе
			ТекстСоединения = ТекстСоединения + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОС КАК МестонахождениеОС
			|		ПО СправочникОбъектыЭксплуатации.Ссылка = МестонахождениеОС.ОсновноеСредство";
		КонецЕсли;
	
	КонецЕсли;
	
	Если НеобходимыеТаблицы.Свойство("ПервоначальныеСведенияОС") Тогда
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
		|				&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК ПервоначальныеСведенияОС
		|		ПО ПервоначальныеСведенияОС.Организация = МестонахождениеОС.Организация
		|			И ПервоначальныеСведенияОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство";
	КонецЕсли;
	
	Если НеобходимыеТаблицы.Свойство("ПорядокУчетаОСУУ") Тогда
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|				&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК ПорядокУчетаОСУУ
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПорядокУчетаОСУУ.ОсновноеСредство
		|			И ПорядокУчетаОСУУ.Организация = МестонахождениеОС.Организация";
	КонецЕсли;
	
	Если НеобходимыеТаблицы.Свойство("ПорядокУчетаОСБУ") Тогда
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
		|				&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК ПорядокУчетаОСБУ
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПорядокУчетаОСБУ.ОсновноеСредство
		|			И ПорядокУчетаОСБУ.Организация = МестонахождениеОС.Организация";
	КонецЕсли;
	
	Если НеобходимыеТаблицы.Свойство("ПараметрыАмортизацииОСУУ") Тогда
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(
		|				&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК ПараметрыАмортизацииОСУУ
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПараметрыАмортизацииОСУУ.ОсновноеСредство
		|			И ПараметрыАмортизацииОСУУ.Организация = МестонахождениеОС.Организация";
	КонецЕсли;
	
	Если НеобходимыеТаблицы.Свойство("ПараметрыАмортизацииОСБУ") Тогда
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(
		|					&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата, 
		|					ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|						И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК ПараметрыАмортизацииОСБУ
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПараметрыАмортизацииОСБУ.ОсновноеСредство
		|			И ПараметрыАмортизацииОСБУ.Организация = МестонахождениеОС.Организация";
	КонецЕсли;
	
	Если НеобходимыеТаблицы.Свойство("АрендованныеОС") Тогда
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АрендованныеОС.СрезПоследних(
		|				&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата, 
		|				&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК АрендованныеОС
		|		ПО СправочникОбъектыЭксплуатации.Ссылка = АрендованныеОС.ОсновноеСредство";
	КонецЕсли;
	
	Если Параметры.Свойство("СтрокаПоиска") Тогда
		
		ТекстУсловия = 
			"(СправочникОбъектыЭксплуатации.Наименование ПОДОБНО &СтрокаПоиска
			|			ИЛИ СправочникОбъектыЭксплуатации.ИнвентарныйНомер ПОДОБНО &СтрокаПоиска)
			|	И НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа
			|	И НЕ СправочникОбъектыЭксплуатации.ПометкаУдаления";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
			
		ПараметрыЗапроса.Вставить("СтрокаПоиска", "%" + Параметры.СтрокаПоиска + "%");
		
	КонецЕсли;
	
	Если МассивОбъектов <> Неопределено Тогда
		
		ТекстУсловия = 
			"СправочникОбъектыЭксплуатации.Ссылка В(&МассивОбъектов)
			|	И НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа
			|	И НЕ СправочникОбъектыЭксплуатации.ПометкаУдаления";
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);

		ПараметрыЗапроса.Вставить("МассивОбъектов", МассивОбъектов);
		
	КонецЕсли; 
	
	Если Параметры.Свойство("РегистрацияНаработки")
		ИЛИ Параметры.Свойство("УстановкаНаработки")
		ИЛИ Параметры.Свойство("ИсточникПоказателяНаработки") Тогда
		
		ТекстУсловия = "";
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами") Тогда
			
			//++ НЕ УТКА
			ПараметрыЗапроса.Вставить(
				"РегистрацияНаработки",
				?(Параметры.Свойство("РегистрацияНаработки"), Параметры.РегистрацияНаработки, Ложь));
	
			ПараметрыЗапроса.Вставить(
				"УстановкаНаработки",
				?(Параметры.Свойство("УстановкаНаработки"), Параметры.УстановкаНаработки, Ложь));
	
			ПараметрыЗапроса.Вставить(
				"ИсточникПоказателяНаработки",
				?(Параметры.Свойство("ИсточникПоказателяНаработки"), Параметры.ИсточникПоказателяНаработки, Ложь));
	
			ПараметрыЗапроса.Вставить(
				"ПоказательНаработки",
				?(Параметры.Свойство("ПоказательНаработки"), Параметры.ПоказательНаработки, Неопределено));

			ТекстУсловия = "СправочникОбъектыЭксплуатации.Класс В
			|	(ВЫБРАТЬ
			|		ПараметрыПоказателейКласса.Ссылка
			|	ИЗ
			|		Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК ПараметрыПоказателейКласса
			|	ГДЕ
			|		НЕ ПараметрыПоказателейКласса.Ссылка.ПометкаУдаления
			|		И ВЫБОР
			|			КОГДА &РегистрацияНаработки
			|				ТОГДА НЕ ПараметрыПоказателейКласса.РегистрироватьОтИсточника
			|			КОГДА &УстановкаНаработки
			|				ТОГДА ИСТИНА
			|			КОГДА &ИсточникПоказателяНаработки
			|				ТОГДА ПараметрыПоказателейКласса.ПоказательНаработки = &ПоказательНаработки
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ)";
			//-- НЕ УТКА
			
		Иначе
			
			ТекстУсловия = "ПараметрыАмортизацииОСУУ.МетодНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции)";
			
		КонецЕсли;
			
		ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтборы) Тогда
		ТекстОтборы = "
		|ГДЕ
		|" + ТекстОтборы;
	КонецЕсли;
	
	Если НеобходимыеТаблицы.Свойство("МестонахождениеОС") Тогда
		ТекстВТ = 
		"ВЫБРАТЬ
		|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
		|	МестонахождениеОС.Организация КАК Организация,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	МестонахождениеОС.Местонахождение КАК Местонахождение,
		|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
		|	МестонахождениеОС.Арендатор КАК Арендатор
		|ПОМЕСТИТЬ МестонахождениеОС
		|ИЗ
		|	РегистрСведений.МестонахождениеОС.СрезПоследних(
		|				&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1) 
		|					И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК МестонахождениеОС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	Организация
		|;
		|";
	Иначе
		ТекстВТ = "";
	КонецЕсли;
	
	ТекстЗапроса = ТекстВТ +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	|	СправочникОбъектыЭксплуатации.Ссылка,
	|	СправочникОбъектыЭксплуатации.ПометкаУдаления,
	|	СправочникОбъектыЭксплуатации.Родитель,
	|	СправочникОбъектыЭксплуатации.ЭтоГруппа,
	|	СправочникОбъектыЭксплуатации.Код,
	|	СправочникОбъектыЭксплуатации.Наименование,
	|	СправочникОбъектыЭксплуатации.ТипОС,
	|	СправочникОбъектыЭксплуатации.ИнвентарныйНомер,
	|	СправочникОбъектыЭксплуатации.ГруппаОСМеждународныйУчет,
	|	СправочникОбъектыЭксплуатации.ДатаВыпуска,
	|	СправочникОбъектыЭксплуатации.ЗаводскойНомер,
	|	СправочникОбъектыЭксплуатации.Изготовитель,
	|	СправочникОбъектыЭксплуатации.Класс,
	|	СправочникОбъектыЭксплуатации.Модель,
	|	СправочникОбъектыЭксплуатации.НаименованиеПолное,
	|	СправочникОбъектыЭксплуатации.НомерПаспорта,
	|	СправочникОбъектыЭксплуатации.ОбъектБытовогоНазначения,
	|	СправочникОбъектыЭксплуатации.Подкласс,
	|	СправочникОбъектыЭксплуатации.Расположение,
	|	СправочникОбъектыЭксплуатации.РемонтирующееПодразделение,
	|	СправочникОбъектыЭксплуатации.ЭксплуатирующееПодразделение,
	|	СправочникОбъектыЭксплуатации.СерийныйНомер,
	|	СправочникОбъектыЭксплуатации.Статус,
	|	ЕСТЬNULL(ПорядокУчетаОС.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
	|	СправочникОбъектыЭксплуатации.Комментарий
	|	,&ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК СправочникОбъектыЭксплуатации
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|			&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата, 
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И &ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия) КАК ПорядокУчетаОС
	|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПорядокУчетаОС.ОсновноеСредство";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ", ДополнительныеПоля);
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ТекстСоединения;
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ТекстОтборы;
	
	Если НЕ Параметры.Свойство("СтрокаПоиска") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ ПЕРВЫЕ 10", "");
	КонецЕсли;

	ПараметрыСрезаПоследнихДата = "";
	ПараметрыСрезаПоследних = "ИСТИНА";
	Если Параметры.Свойство("ДатаСведений") Тогда
		ПараметрыСрезаПоследнихДата = "&ДатаСведений";
		ПараметрыЗапроса.Вставить("ДатаСведений", КонецДня(Параметры.ДатаСведений));
	КонецЕсли; 
	Если Параметры.Свойство("ТекущийРегистратор") Тогда
		ПараметрыСрезаПоследних = "Регистратор <> &ТекущийРегистратор";
		ПараметрыЗапроса.Вставить("ТекущийРегистратор", Параметры.ТекущийРегистратор);
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Дата", ПараметрыСрезаПоследнихДата);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ_Условия", ПараметрыСрезаПоследних);
	
	ОписаниеЗапросаДляВыбора = Новый Структура("ТекстЗапроса,ПараметрыЗапроса,ДоступныеПоля", ТекстЗапроса, ПараметрыЗапроса, ДоступныеПоля);

	
	Возврат ОписаниеЗапросаДляВыбора;
	
КонецФункции

// Возвращает массив узлов и компонентов амортизации по ОС-Владельцу
//
// Параметры:
//  ОсновноеСредство  - СправочникСсылка.ОбъектыЭксплуатации - ОС-Владелец или узел/компонент амортизации
//
// Возвращаемое значение:
//   Массив   - Массив подчиненных узлов и компонентов амортизации
//
Функция ПолучитьУзлыКомпонентовАмортизацииПоВладельцу(ОсновноеСредство, ДатаСведений = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ВтОСВладелец
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УзлыКомпонентыАмортизации.ОсновноеСредство
		|ИЗ
		|	РегистрСведений.УзлыКомпонентыАмортизации.СрезПоследних(&ДатаСведений, УзелКомпонент = &ОсновноеСредство) КАК
		|		УзлыКомпонентыАмортизации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УзлыКомпоненты.УзелКомпонент КАК УзелКомпонент
		|ПОМЕСТИТЬ ВтУзлыОсновныхСредств
		|ИЗ
		|	РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпоненты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОСВладелец КАК ОСВладелец
		|		ПО УзлыКомпоненты.ОсновноеСредство = ОСВладелец.ОсновноеСредство
		|ГДЕ
		|	УзлыКомпоненты.УзелКомпонент <> &ОсновноеСредство //Если передан не владелец, а узел, то исключаем сам узел из выборки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	УзелКомпонент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УзлыКомпоненты.УзелКомпонент КАК УзелКомпонент
		|ИЗ
		|	РегистрСведений.УзлыКомпонентыАмортизации.СрезПоследних(&ДатаСведений, УзелКомпонент В
		|		(ВЫБРАТЬ
		|			ВтУзлыОсновныхСредств.УзелКомпонент КАК УзелКомпонент
		|		ИЗ
		|			ВтУзлыОсновныхСредств КАК ВтУзлыОсновныхСредств)) КАК УзлыКомпоненты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОСВладелец КАК ОСВладелец
		|		ПО УзлыКомпоненты.ОсновноеСредство = ОСВладелец.ОсновноеСредство";
	
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("УзелКомпонент");

КонецФункции

Функция ИсторияИзмененияРеквизита(ОсновноеСредство, ИмяРеквизита) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыПоОС.Дата КАК Дата,
	|	ДокументыПоОС.Ссылка КАК Документ
	|ИЗ
	|	РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеПараметровОС2_4 КАК ИзменениеПараметровОС
	|		ПО (ИзменениеПараметровОС.Ссылка = ДокументыПоОС.Ссылка)
	|ГДЕ
	|	ДокументыПоОС.ОсновноеСредство = &ОсновноеСредство
	|	И ДокументыПоОС.ТипСсылки = &ТипСсылки
	|	И ДокументыПоОС.НомерЗаписи = 0
	|	И ДокументыПоОС.Проведен
	|	И НЕ ДокументыПоОС.ДополнительнаяЗапись
	|	И (ИзменениеПараметровОС.НаправлениеДеятельностиФлаг
	|				И &ИмяРеквизита = ""НаправлениеДеятельности""
	|			ИЛИ ИзменениеПараметровОС.АмортизационнаяГруппаФлаг
	|				И &ИмяРеквизита = ""АмортизационнаяГруппа""
	|			ИЛИ ИзменениеПараметровОС.НедвижимоеИмуществоФлаг
	|				И &ИмяРеквизита = ""НедвижимоеИмущество"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыПоОС.Дата";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("ИмяРеквизита", ИмяРеквизита);
	Запрос.УстановитьПараметр("ТипСсылки", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ИзменениеПараметровОС2_4")));
	
	УстановитьПривилегированныйРежим(Истина);
	ИсторияИзменений = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат ИсторияИзменений;
	
КонецФункции

//++ НЕ УТКА

// Вызывается при изменении класса объекта эксплуатации.
// 
// Параметры:
// 	Объект - СправочникОбъект.ОбъектыЭксплуатации -
Процедура ПриИзмененииКласса(Объект) Экспорт
	
	Объект.Подкласс = Справочники.ПодклассыОбъектовЭксплуатации.ПустаяСсылка();
	
КонецПроцедуры

#Область ПроверкаЗаполненияОбъектовЭксплуатации

Процедура СформироватьЗапросПроверкиЗаполнения(ТекстЗапроса)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.*
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка В (&ОбъектыЭксплуатации)";
	
КонецПроцедуры

Процедура СформироватьЗапросПроверкиЗаполненияУзлов(ТекстЗапроса)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	УзлыОбъектовЭксплуатации.*
		|ИЗ
		|	Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
		|ГДЕ
		|	УзлыОбъектовЭксплуатации.Владелец В(&ОбъектыЭксплуатации)
		|	И УзлыОбъектовЭксплуатации.Владелец <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
		|	И НЕ УзлыОбъектовЭксплуатации.ПометкаУдаления
		|	И УзлыОбъектовЭксплуатации.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ВЭксплуатации), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ПустаяСсылка))";
	
КонецПроцедуры

Функция ПолучитьОбязательныеРеквизиты(Класс, КэшированныеЗначения)
	
	ОбязательныеРеквизиты = КэшированныеЗначения.ОбязательныеРеквизиты.Получить(Класс);
	
	Если ОбязательныеРеквизиты = Неопределено Тогда
		
		Запрос = Новый Запрос;
		
		Если ЗначениеЗаполнено(Класс) Тогда
			Запрос.Текст =
				"ВЫБРАТЬ
				|	РеквизитыДляКонтроляОбъектов.Имя,
				|	РеквизитыДляКонтроляОбъектов.Синоним
				|ИЗ
				|	Справочник.КлассыОбъектовЭксплуатации.РеквизитыДляКонтроля КАК Реквизиты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыОбъектов КАК РеквизитыДляКонтроляОбъектов
				|		ПО Реквизиты.ИмяРеквизита = РеквизитыДляКонтроляОбъектов.Имя
				|ГДЕ
				|	Реквизиты.Ссылка = &Класс
				|	И Реквизиты.ОбязателенДляЗаполнения";
		Иначе
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Реквизиты.Имя,
				|	Реквизиты.Синоним
				|ИЗ
				|	РеквизитыОбъектов КАК Реквизиты
				|ГДЕ
				|	Реквизиты.ОбязателенДляЗаполнения";
			
		КонецЕсли;
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ОбязательныеРеквизиты = Запрос.Выполнить().Выгрузить();
		
		КэшированныеЗначения.ОбязательныеРеквизиты.Вставить(Класс, ОбязательныеРеквизиты);
		
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

Функция ПолучитьОбязательныеДопРеквизиты(Класс, КэшированныеЗначения)
	
	ОбязательныеДопРеквизиты = КэшированныеЗначения.ОбязательныеДопРеквизиты.Получить(Класс);
	
	Если ОбязательныеДопРеквизиты = Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДопРеквизиты.Свойство
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизиты
			|ГДЕ
			|	ДопРеквизиты.Ссылка = ВЫРАЗИТЬ(&Класс КАК Справочник.КлассыОбъектовЭксплуатации).НаборСвойств
			|	И (ДопРеквизиты.Свойство.ЗаполнятьОбязательно)
			|	И НЕ ДопРеквизиты.Свойство В
			|				(ВЫБРАТЬ
			|					ОбщиеДопРеквизитыОбъектов.Свойство
			|				ИЗ
			|					ОбщиеДопРеквизитыОбъектов КАК ОбщиеДопРеквизитыОбъектов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДопРеквизиты.Свойство
			|ИЗ
			|	ОбщиеДопРеквизитыОбъектов КАК ДопРеквизиты
			|ГДЕ
			|	ДопРеквизиты.ЗаполнятьОбязательно");
		
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ОбязательныеДопРеквизиты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Свойство");
		
		КэшированныеЗначения.ОбязательныеДопРеквизиты.Вставить(Класс, ОбязательныеДопРеквизиты);
		
	КонецЕсли;
	
	Возврат ОбязательныеДопРеквизиты;
	
КонецФункции

Функция ПолучитьПараметрыУчетаНаработок(Класс, КэшированныеЗначения)
	
	ПараметрыУчетаНаработок = КэшированныеЗначения.ПараметрыУчетаНаработок.Получить(Класс);
	
	Если ПараметрыУчетаНаработок = Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Параметры.ПоказательНаработки КАК ПоказательНаработки,
			|	Параметры.РассчитыватьОстаточныйРесурс КАК ЗаполнятьНазначенныйРесурс,
			|	Параметры.РегистрироватьОтИсточника КАК ЗаполнятьИсточник
			|ИЗ
			|	Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК Параметры
			|ГДЕ
			|	Параметры.Ссылка = &Класс
			|	И (Параметры.РегистрироватьОтИсточника
			|			ИЛИ Параметры.РассчитыватьОстаточныйРесурс)");
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ПараметрыУчетаНаработок = Запрос.Выполнить().Выгрузить();
		
		КэшированныеЗначения.ПараметрыУчетаНаработок.Вставить(Класс, ПараметрыУчетаНаработок);
		
	КонецЕсли;
	
	Возврат ПараметрыУчетаНаработок;
	
КонецФункции

Процедура ПроверитьОбъектЭксплуатации(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	ПроверитьРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьДопРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьРабочиеЦентры(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьПараметрыУчетаНаработок(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ПроверитьРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	ОбязательныеРеквизиты = ПолучитьОбязательныеРеквизиты(ОбъектПроверки.Класс, КэшированныеЗначения);
	
	Для Каждого Реквизит Из ОбязательныеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(ОбъектПроверки[СокрЛП(Реквизит.Имя)]) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поле ""%1"" не заполнено.';
					|en = '""%1"" is required.'"),
				СокрЛП(Реквизит.Синоним));
			
			ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
				ПараметрыПроверки.ПотокОшибок,
				ОбъектПроверки.Ссылка,
				"Объект."+Реквизит.Имя,
				ТекстОшибки,
				"Реквизиты",
				0,
				ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДопРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	Если ПараметрыПроверки.Форма = Неопределено Тогда
		
		ОбязательныеДопРеквизиты = ПолучитьОбязательныеДопРеквизиты(ОбъектПроверки.Класс, КэшированныеЗначения);
		
		ТаблицаДопРеквизитов = ОбъектПроверки.ДополнительныеРеквизиты.Выгрузить();
		
		Для Каждого Свойство Из ОбязательныеДопРеквизиты Цикл
			
			Если ТаблицаДопРеквизитов.Найти(Свойство, "Свойство") = Неопределено Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Поле ""%1"" не заполнено.';
						|en = 'Field %1 is required.'"),
					Свойство);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ГруппаДополнительныеРеквизиты",
					ТекстОшибки,
					"ДопРеквизиты",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если Не (ПараметрыПроверки.Форма.Свойства_ИспользоватьСвойства И ПараметрыПроверки.Форма.Свойства_ИспользоватьДопРеквизиты) Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаДопРеквизитов = ПараметрыПроверки.Форма.Свойства_ОписаниеДополнительныхРеквизитов;
		
		Для Каждого Строка Из ТаблицаДопРеквизитов Цикл
			Если Строка.ЗаполнятьОбязательно Тогда
				
				Если НЕ ЗначениеЗаполнено(ПараметрыПроверки.Форма[Строка.ИмяРеквизитаЗначение]) Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Поле ""%1"" не заполнено.';
							|en = 'Field %1 is required.'"),
						Строка.Наименование);
					
					ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
						ПараметрыПроверки.ПотокОшибок,
						ОбъектПроверки.Ссылка,
						Строка.ИмяРеквизитаЗначение,
						ТекстОшибки,
						"ДопРеквизиты",
						0,
						ТекстОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРабочиеЦентры(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	РабочиеЦентры = ОбъектПроверки.РабочиеЦентры.Выгрузить();
	Для ТекИндекс=0 По РабочиеЦентры.Количество()-1 Цикл
		
		Строка = РабочиеЦентры[ТекИндекс];
		
		Если Не ЗначениеЗаполнено(Строка["РабочийЦентр"]) Тогда
			
			ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
				ПараметрыПроверки.ПотокОшибок,
				ОбъектПроверки.Ссылка,
				"Объект.РабочиеЦентры[%1].РабочийЦентр",
				НСтр("ru = 'Не заполнено поле ""Рабочий центр""';
					|en = '""Operation center"" is required'"),
				"РабочиеЦентры",
				ТекИндекс,
				НСтр("ru = 'Не заполнена колонка ""Рабочий центр"" в строке %1 списка ""Рабочие центры""';
					|en = 'The ""Operation center"" column in line %1 of the ""Operation centers"" list is not filled in'"));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПараметрыУчетаНаработок(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	Если ПараметрыПроверки.Форма = Неопределено Тогда
		
		ПараметрыУчетаНаработки = ПолучитьПараметрыУчетаНаработок(ОбъектПроверки.Класс, КэшированныеЗначения);
		
		ТаблицаПараметров = ОбъектПроверки.ПараметрыУчетаНаработок.Выгрузить(); 
		
		Для Каждого НастройкаПоказателя Из ПараметрыУчетаНаработки Цикл
			
			Строка = ТаблицаПараметров.Найти(НастройкаПоказателя.ПоказательНаработки, "ПоказательНаработки");
			
			Если Строка = Неопределено Или (НастройкаПоказателя.ЗаполнятьНазначенныйРесурс И Не ЗначениеЗаполнено(Строка.НазначенныйРесурс)) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Назначенный ресурс показателя наработки ""%1"" не заполнен';
						|en = 'Specify lifetime for the ""%1"" asset activity measure'"),
					НастройкаПоказателя.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
			Если Строка = Неопределено Или (НастройкаПоказателя.ЗаполнятьИсточник И Не ЗначениеЗаполнено(Строка.ИсточникПараметра)) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Источник текущих значений показателя наработки ""%1"" не заполнен';
						|en = 'Specify the source of the current values of ""%1"" asset activity'"),
					НастройкаПоказателя.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ПараметрыПроверки.Форма.ПараметрыУчетаНаработок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		Для ТекИндекс=0 По ПараметрыПроверки.Форма.ПараметрыУчетаНаработок.Количество()-1 Цикл
			
			Строка = ПараметрыПроверки.Форма.ПараметрыУчетаНаработок[ТекИндекс];
			
			Если Строка.ЗаполнятьНазначенныйРесурс И Не ЗначениеЗаполнено(Строка.НазначенныйРесурс) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Назначенный ресурс показателя наработки ""%1"" не заполнен';
						|en = 'Specify lifetime for the ""%1"" asset activity measure'"),
					Строка.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок[%1].НазначенныйРесурс",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					ТекИндекс,
					ТекстОшибки);
				
			КонецЕсли;
			Если Строка.ЗаполнятьИсточник И Не ЗначениеЗаполнено(Строка.ИсточникПараметра) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Источник текущих значений показателя наработки ""%1"" не заполнен';
						|en = 'Specify the source of the current values of ""%1"" asset activity'"),
					Строка.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок[%1].ИсточникПараметра",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					ТекИндекс,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область ПодключаемыеКоманды

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьЭтикетокОбъектовЭксплуатации) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ВнеоборотныеАктивыКлиент.ПечатьЭтикетокОбъектовЭксплуатации";
		КомандаПечати.Идентификатор = "ЭтикеткаОбъектовЭксплуатации";
		КомандаПечати.Представление = НСтр("ru = 'Этикетки';
											|en = 'Labels'");
		
	КонецЕсли;
	
	ОбъектыЭксплуатацииЛокализация.ДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = Документы.ПринятиеКУчетуОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПринятиеКУчетуУзловКомпонентовАмортизации.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ИзменениеПараметровОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.МодернизацияОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПереоценкаОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПеремещениеОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПодготовкаКПередачеОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.СписаниеОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.НаработкаОбъектовЭксплуатации.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСписка, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.РазукомплектацияОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ОбъединениеОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
		Команда.МножественныйВыбор = Истина;
	КонецЕсли;
	
	Команда = Документы.КорректировкаСтоимостиИАмортизацииОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
		Команда.МножественныйВыбор = Истина;
	КонецЕсли;
	
	Команда = Документы.ПередачаОСВАренду2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда

		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ТипОС", Перечисления.ТипыОС.ОбъектЭксплуатации);
		
	КонецЕсли;
	
	Команда = Документы.ВозвратОСИзАренды2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ТипОС", Перечисления.ТипыОС.ОбъектЭксплуатации);
			
	КонецЕсли;
	
	//++ НЕ УТКА
	Команда = Документы.ЗаказНаРемонт.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда

		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСписка";
		Команда.РежимЗаписи = "";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			Команда, 
			"ТипОС",
			Перечисления.ТипыОС.ОбъектЭксплуатации);
		
	КонецЕсли;
	
	Команда = Документы.УстановкаЗначенийНаработки.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСписка";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	//-- НЕ УТКА
	
	ОбъектыЭксплуатацииЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Команда = Отчеты.ВедомостьПоОС_МУ.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
	КонецЕсли;
	
	Команда = Отчеты.СправкаРасчетАмортизацииОС_МУ.ДобавитьКомандуОтчетаПоОС(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
	КонецЕсли;
	
	Команда = Отчеты.СтруктураЗатратНаКапитализацию.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
	КонецЕсли;
	
	//++ НЕ УТКА
	
	Команда = Отчеты.КарточкаОбъектаЭксплуатации.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСписка";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			Команда, 
			"ТипОС",
			Перечисления.ТипыОС.ОбъектЭксплуатации);
			
	КонецЕсли;
	
	//-- НЕ УТКА

	ОбъектыЭксплуатацииЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	ОбъектыЭксплуатацииЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
