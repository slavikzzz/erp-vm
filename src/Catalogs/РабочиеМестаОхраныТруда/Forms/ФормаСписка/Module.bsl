#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельСписок;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	СохранитьРежимОтображенияСпискаПриЗакрытии = Истина;
	ВидИерархия = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СписокРабочихМест", "ВидИерархия");
	Если ВидИерархия = Неопределено Тогда
		ВидИерархия = Истина;
	КонецЕсли;

	УстановитьОтборСписка(ЭтотОбъект);
	
	Если Параметры.РежимВыбора Тогда
		Если Параметры.МножественныйВыбор = Истина Тогда
			ЗакрыватьПриВыборе = Ложь;
		Иначе
			Элементы.Список.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Список", "РежимВыбора", Истина);

		Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
			ВидИерархия = Ложь;
		КонецЕсли;

		СохранитьРежимОтображенияСпискаПриЗакрытии = Ложь;
	КонецЕсли;

	Если Параметры.Свойство("АдресСпискаПодобранных") Тогда
		Подобранные.ЗагрузитьЗначения(ПолучитьИзВременногоХранилища(Параметры.АдресСпискаПодобранных));
	КонецЕсли;
	
	ЗарплатаКадры.ПриСозданииНаСервереФормыСДинамическимСписком(
		ЭтотОбъект, "Список", , , , ИсключаемыеПоля(), Не Параметры.Отбор.Свойство("Владелец"));

	ОбработатьИзменениеВидаСписка();

	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Элементы.Список.РежимВыбора Или Не Элементы.Список.МножественныйВыбор Тогда
		Возврат;
	КонецЕсли;
	
	Если ВсеВыбранные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	НачатьВопросОВыбореПодобранных();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_ПриИзмененииЭлементаОтбора(Элемент)
	ОбновитьНастройкиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьРабочиеМестаВАрхивеПриИзменении(Элемент)
	УстановитьОтображениеАрхивныхРабочихМест(Список, ПоказыватьРабочиеМестаВАрхиве);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Отказ = Истина;
		ПоказатьЗначение( , Элемент.ТекущиеДанные.Подразделение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Если Не Элементы.Список.РежимВыбора Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Элементы.Список.МножественныйВыбор Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Значение.Количество() > 1 Или ВсеВыбранные.Количество() = 0 Тогда
		ОбновитьПодобранные(Значение);
	КонецЕсли;

	ОповеститьОВыборе(ВсеВыбранные.ВыгрузитьЗначения());
	ВсеВыбранные.Очистить();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элементы.Список.РежимВыбора Тогда
		Возврат;
	КонецЕсли;

	Если Не Элементы.Список.МножественныйВыбор Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ОбновитьПодобранные(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, Настройки);
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)

	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, , СтандартнаяОбработка);

	Если СтандартнаяОбработка Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.Список.СоздатьЭлементыФормыПользовательскихНастроек();
	КонецЕсли;

	ПодключитьОбработчикиСобытийЭлементамПолейОтбора();

	ОбновитьНастройкиФормы();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВидИерархия(Команда)

	Если Не ВидИерархия Тогда
		ВидИерархия = Истина;
		ОбработатьИзменениеВидаСписка();
	КонецЕсли;

	ПодключитьОбработчикОжидания("ПриИзмененииСохраняемойНастройки", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВидСписок(Команда)

	Если ВидИерархия Тогда
		ВидИерархия = Ложь;
		ОбработатьИзменениеВидаСписка();
	КонецЕсли;

	ПодключитьОбработчикОжидания("ПриИзмененииСохраняемойНастройки", 0.2, Истина);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементУсловногоОформления.Отбор, "ВидИерархия", Истина);
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Подразделение");

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаОтбораИли = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбораИли, "Список.ВАрхиве", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбораИли, "Список.ПометкаУдаления", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "ПоказыватьРабочиеМестаВАрхиве", Ложь);

	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЗаголовокУдаленногоРеквизитаШрифт);
	ГруппаОтбораИли = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбораИли, "ВАрхиве", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбораИли, "ПометкаУдаления", Истина);

	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "ВАрхиве", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "ЭтоГруппа", Истина);
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаОтбораИли = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбораИли, "ВАрхиве", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбораИли, "ПометкаУдаления", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "ПараметрыДанных.ПоказыватьВАрхиве", Ложь);
	
	// Выделение подобранных.
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор, "Ссылка", Подобранные.ВыгрузитьЗначения());
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПодобранногоЗначенияЦвет);
	ЭлементОформления.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройкиВыделениеПодобранных();
	ЭлементОформления.Представление = НСтр("ru = 'Выделение подобранных';
											|en = 'Select the picked'");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьОтборСписка(Форма)
	
	Список = Форма.Список;
	Параметры = Форма.Параметры;
	
	Если Параметры.Отбор.Свойство("Владелец") Тогда
		Если ЗначениеЗаполнено(Параметры.Отбор.Владелец) Тогда
			Форма.ОтборОрганизация = Параметры.Отбор.Владелец;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, "Владелец", Форма.ОтборОрганизация, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		КонецЕсли;
		Параметры.Отбор.Удалить("Владелец");
	КонецЕсли;

	Если Параметры.Отбор.Свойство("Подразделение") Тогда
		Если ЗначениеЗаполнено(Параметры.Отбор.Подразделение) Тогда
			Форма.ОтборПодразделение = Параметры.Отбор.Подразделение;
			
			Если Не ЗначениеЗаполнено(Форма.ОтборОрганизация) Тогда
				Форма.ОтборОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ОтборПодразделение, "Владелец");
				Параметры.Отбор.Вставить("Владелец", Форма.ОтборОрганизация);
			КонецЕсли;
			
			Если Параметры.Отбор.Свойство("ОтборРабочихМестПодразделения") Тогда
				ВидСравненияОтбораПодразделений = ВидСравненияКомпоновкиДанных.Равно;
			Иначе
				ВидСравненияОтбораПодразделений = ВидСравненияКомпоновкиДанных.ВИерархии;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, "Подразделение", Форма.ОтборПодразделение, ВидСравненияОтбораПодразделений);
		КонецЕсли;
		Параметры.Отбор.Удалить("Подразделение");
	КонецЕсли;
	
	Если Параметры.Свойство("ПоказыватьРабочиеМестаВАрхиве") Тогда
		Форма.ПоказыватьРабочиеМестаВАрхиве = Параметры.ПоказыватьРабочиеМестаВАрхиве;
	КонецЕсли;
	
	Если Параметры.РежимВыбора И ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
		Форма.ПоказыватьРабочиеМестаВАрхиве = Параметры.ТекущаяСтрока.ВАрхиве;
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Должность") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, 
			"ДолжностьРабочегоМеста", 
			Параметры.Отбор.Должность, , , 
			ЗначениеЗаполнено(Параметры.Отбор.Должность), 
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ, 
			Строка(Новый УникальныйИдентификатор));
		Параметры.Отбор.Удалить("Должность");
	КонецЕсли;
	
	УстановитьОтображениеАрхивныхРабочихМест(Список, Форма.ПоказыватьРабочиеМестаВАрхиве);
	
КонецПроцедуры	

&НаСервере
Процедура ПодключитьОбработчикиСобытийЭлементамПолейОтбора(ГруппаФормы = Неопределено)

	Если ГруппаФормы = Неопределено Тогда
		ГруппаФормы = Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки;
	КонецЕсли;

	Для Каждого ЭлементГруппы Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы") Тогда
			ПодключитьОбработчикиСобытийЭлементамПолейОтбора(ЭлементГруппы);
		КонецЕсли;

		Если ТипЗнч(ЭлементГруппы) = Тип("ПолеФормы") Тогда
			ЭлементГруппы.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаОтбора");
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСохраняемойНастройки()

	Если СохранитьРежимОтображенияСпискаПриЗакрытии Тогда
		Настройки = СохраняемыеНастройки();
		Настройки.ВидИерархия = ВидИерархия;
		СохранитьНастройкиНаСервере(Настройки);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СохраняемыеНастройки()

	Настройки = Новый Структура("ВидИерархия");
	Возврат Настройки;

КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(Настройки)

	Для Каждого КлючИЗначение Из Настройки Цикл
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СписокРабочихМест", КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПользовательскиеОтборы(Список)

	ПользовательскиеОтборы = Неопределено;
	Для Каждого ЭлементПользовательскихНастроек Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементПользовательскихНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
			ПользовательскиеОтборы = ЭлементПользовательскихНастроек;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ПользовательскиеОтборы = Неопределено Тогда
		КоллекцияЭлементов = Новый Массив;
	Иначе
		КоллекцияЭлементов = ПользовательскиеОтборы.Элементы;
		Для Каждого Элемент Из КоллекцияЭлементов Цикл
			Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Должность") Тогда
				Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДолжностьРабочегоМеста");
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат КоллекцияЭлементов;

КонецФункции

&НаСервере
Процедура ОбработатьИзменениеВидаСписка()

	ОбработатьОтображениеРежимаИерархии(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьОтображениеРежимаИерархии(Форма)

	Элементы = Форма.Элементы;
	Элементы.ФормаВидИерархия.Пометка = Форма.ВидИерархия;
	Элементы.ФормаВидСписок.Пометка = Не Форма.ВидИерархия;

	Если Форма.ВидИерархия Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
	Иначе
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;

	УстановитьОтборГруппПодразделений(Форма.Список, Форма.ВидИерархия);

КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиФормы()

	НастройкиОтборовСписка = НастройкиСписка(Список);
	Если НастройкиОтборовСписка.УстановленОтборПоПодразделению Тогда
		ВидИерархия = Ложь;
		ОбработатьИзменениеВидаСписка();
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаВидИерархия", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ФормаВидИерархия", "Видимость", ЗначениеЗаполнено(НастройкиОтборовСписка.ОтборПоОрганизации));
	КонецЕсли;
	
	// Управление видимостью команд переключения вида отображения списка
	ЭлементыВидСписка = Элементы.Найти("ВидСписка");
	Если ЭлементыВидСписка <> Неопределено Тогда
		КоличествоЭлементов = 0;
		
		Для Каждого ПодчиненныйЭлемент Из ЭлементыВидСписка.ПодчиненныеЭлементы Цикл
			Если ПодчиненныйЭлемент.Видимость Тогда
				КоличествоЭлементов = КоличествоЭлементов + 1;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыВидСписка.Видимость = КоличествоЭлементов > 1;
	КонецЕсли;

	Если НастройкиОтборовСписка.УстановленОтборПоОрганизации Тогда
		Если ОтборОрганизация <> НастройкиОтборовСписка.ОтборПоОрганизации Тогда
			ОтборОрганизация = НастройкиОтборовСписка.ОтборПоОрганизации;
		КонецЕсли;
	КонецЕсли;

	УстановитьОтборГруппПодразделений(Список, ВидИерархия, НастройкиОтборовСписка.УстановленОтборПоОрганизации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборГруппПодразделений(Список, ВидИерархия, УстановленОтборПоОрганизации = Неопределено)

	Если УстановленОтборПоОрганизации = Неопределено Тогда
		НастройкиОтборовСписка = НастройкиСписка(Список);
		УстановленОтборПоОрганизации = НастройкиОтборовСписка.УстановленОтборПоОрганизации;
	КонецЕсли;

	Если УстановленОтборПоОрганизации И ВидИерархия Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ЭтоГруппа");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЭтоГруппа", Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиСписка(Список)

	Настройки = Новый Структура;
	Настройки.Вставить("ОтборПоОрганизации", Неопределено);
	Настройки.Вставить("УстановленОтборПоОрганизации", Ложь);
	Настройки.Вставить("УстановленОтборПоПодразделению", Ложь);

	КоллекцияОтборов = Новый Массив;
	КоллекцияОтборов.Добавить(Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы);
	КоллекцияОтборов.Добавить(Список.КомпоновщикНастроек.Настройки.Отбор.Элементы);
	КоллекцияОтборов.Добавить(ПользовательскиеОтборы(Список));

	Для Каждого ЭлементыОтбора Из КоллекцияОтборов Цикл
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;

			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
				Настройки.УстановленОтборПоПодразделению = ЭлементОтбора.Использование;
			КонецЕсли;

			Если ЭлементОтбора.Использование И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец") Тогда
				Настройки.УстановленОтборПоОрганизации = Истина;
				Настройки.ОтборПоОрганизации = ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Настройки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеАрхивныхРабочихМест(Список, ПоказыватьВАрхиве)

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ПоказыватьВАрхиве", ПоказыватьВАрхиве);

	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ВАрхиве");
	Если Не ПоказыватьВАрхиве Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВАрхиве", Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодобранные(Выбранные)
	
	Для Каждого Элемент Из Выбранные Цикл
		Если Не ЕстьВПодобранных(Элемент) Тогда
			Подобранные.Добавить(Элемент);
			ВсеВыбранные.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	УточнитьПодобранныеВУсловномОформлении();
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьВПодобранных(РабочееМестоСсылка)
	Возврат Подобранные.НайтиПоЗначению(РабочееМестоСсылка) <> Неопределено;
КонецФункции

&НаСервере
Процедура УточнитьПодобранныеВУсловномОформлении()
	
	Для Каждого ЭлементОформления Из Список.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройкиВыделениеПодобранных() Тогда
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
				ЭлементОформления.Отбор, "Ссылка", , Подобранные.ВыгрузитьЗначения());
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторПользовательскойНастройкиВыделениеПодобранных()
	Возврат "ВыделениеПодобранных";
КонецФункции

&НаКлиенте
Процедура НачатьВопросОВыбореПодобранных()
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Подбор рабочих мест';
										|en = 'Pick workplaces'");
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		Новый ОписаниеОповещения("ЗавершитьВопросОВыбореПодобранных", ЭтотОбъект), 
		НСтр("ru = 'Выбрать подобранные рабочие места?';
			|en = 'Do you want to select picked workspaces?'"), 
		РежимДиалогаВопрос.ДаНетОтмена,
		ПараметрыВопроса);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВопросОВыбореПодобранных(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено Или Ответ.Значение = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ.Значение = КодВозвратаДиалога.Да Тогда
		ОповеститьОВыборе(ВсеВыбранные.ВыгрузитьЗначения());
	КонецЕсли;
	
	ВсеВыбранные.Очистить();
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ИсключаемыеПоля()
	
	ИсключаемыеПоля = Новый Массив;
	ИсключаемыеПоля.Добавить("ЭтоГруппа");
	ИсключаемыеПоля.Добавить("ВАрхиве");
	
	Если Элементы.Список.РежимВыбора Тогда
		ИсключаемыеПоля.Добавить("Владелец");
		ИсключаемыеПоля.Добавить("Подразделение");
	КонецЕсли;
	
	Возврат СтрСоединить(ИсключаемыеПоля, ",");
	
КонецФункции

#КонецОбласти