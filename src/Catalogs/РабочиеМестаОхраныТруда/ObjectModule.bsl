#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоГруппа Тогда
		ВызватьИсключение НСтр("ru = 'Группы рабочих мест создаются автоматически';
								|en = 'Workplace groups are automatically created'");
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.РабочиеМестаОхраныТруда") Тогда
		ИменаРеквизитов = "Владелец,
						  |Подразделение,
						  |Должность,
						  |ВАрхиве";
		СведенияОснования = РабочиеМестаОхраныТруда.ЗначенияВзносовВредностиПФР(ДанныеЗаполнения, ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СведенияОснования);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
		ИменаРеквизитов = "Владелец,
						  |Подразделение,
						  |Должность,
						  |Закрыта";
		СведенияОснования = РабочиеМестаОхраныТруда.ЗначенияВзносовВредностиПФР(ДанныеЗаполнения, ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СведенияОснования);
		ВАрхиве = СведенияОснования.Закрыта;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		НазначитьНомер();
		Наименование = РабочиеМестаОхраныТруда.НаименованиеРабочегоМеста(Подразделение, Должность, Номер);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ОбъектКопирования.ЭтоГруппа Тогда
		ВызватьИсключение НСтр("ru = 'Группы рабочих мест создаются автоматически';
								|en = 'Workplace groups are automatically created'");
	КонецЕсли;
	
	НазначитьНомер();
	Наименование = РабочиеМестаОхраныТруда.НаименованиеРабочегоМеста(Подразделение, Должность, Номер);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗанятостьНомераРабочегоМеста();
	
	УстановитьПривилегированныйРежим(Истина);
	СоздатьГруппуРабочегоМеста();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПроверитьНазначениеРабочегоМестаСотрудникам(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоУсловиямТруда(УсловияТруда, ДанныеУсловийТруда = Неопределено) Экспорт
	
	Если ДанныеУсловийТруда = Неопределено Тогда
		ДанныеУсловийТруда = РабочиеМестаОхраныТруда.ЗначенияВзносовВредностиПФР(УсловияТруда);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеУсловийТруда);
	
	СоответствуетУсловиямТруда = Истина;
	
КонецПроцедуры

Процедура ПроверитьЗанятостьНомераРабочегоМеста()
	
	СОУТИспользуется = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		СОУТИспользуется = МодульОхранаТруда.СпециальнаяОценкаУсловийТрудаИспользуется(Владелец);
	КонецЕсли;
	
	Если Не СОУТИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗанятогоРабочегоМеста = Новый Структура;
	ДанныеЗанятогоРабочегоМеста.Вставить("Номер", "");
	ДанныеЗанятогоРабочегоМеста.Вставить("РабочееМесто", Новый ОписаниеТипов("СправочникСсылка.РабочиеМестаОхраныТруда"));
	
	Если Не Справочники.РабочиеМестаОхраныТруда.НомерРабочегоМестаЗанят(ЭтотОбъект, Ссылка, ДанныеЗанятогоРабочегоМеста) Тогда
		Возврат;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Номер %1 уже установлен в рабочем месте %2.';
			|en = 'Number %1 is already set in the %2 workplace.'"),
		ДанныеЗанятогоРабочегоМеста.Номер, ДанныеЗанятогоРабочегоМеста.РабочееМесто);
	
КонецПроцедуры

Процедура СоздатьГруппуРабочегоМеста() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РабочиеМеста.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМеста
		|ГДЕ
		|	РабочиеМеста.Владелец = &Владелец
		|	И РабочиеМеста.Подразделение = &Подразделение
		|	И РабочиеМеста.ЭтоГруппа";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Родитель = Справочники.РабочиеМестаОхраныТруда.ПолучитьСсылку();
		
		ГруппаРодитель = Справочники.РабочиеМестаОхраныТруда.СоздатьГруппу();
		ГруппаРодитель.Владелец = Владелец;
		ГруппаРодитель.Подразделение = Подразделение;
		ГруппаРодитель.Наименование = Строка(ГруппаРодитель.Подразделение);
		ГруппаРодитель.УстановитьСсылкуНового(Родитель);
		ГруппаРодитель.Записать();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Родитель = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНазначениеРабочегоМестаСотрудникам(Отказ)

	Если Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеРабочегоМеста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ПометкаУдаления, ВАрхиве");
	Если Не ((ПометкаУдаления И Не ДанныеРабочегоМеста.ПометкаУдаления) Или (ВАрхиве И Не ДанныеРабочегоМеста.ВАрхиве)) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.КадровыеДанные = "РабочееМестоОхраныТруда";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПолучения.Отборы, "ДатаУвольнения", "=", "ДАТАВРЕМЯ(1, 1, 1)");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПолучения.Отборы, "РабочееМестоОхраныТруда", "=", Ссылка);
	
	ПараметрыПолучения.Организация = Владелец;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ПараметрыПолучения.Подразделение = Подразделение;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
	УстановитьПривилегированныйРежим(Ложь);
	
	КоличествоСотрудников = СотрудникиОрганизации.Количество();
	Если КоличествоСотрудников > 0 Тогда 
		ТекстКоличествоСотрудников = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 сотруднику;;%1 сотрудникам;%1 сотрудникам;%1 сотрудникам';
				|en = ';%1 employee;;;;%1 employees'"),
			КоличествоСотрудников);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Рабочее место назначено %1: %2. Назначенное рабочее место не может быть помечено на удаление или отмечено как неиспользуемое.';
				|en = 'The workplace is assigned to %1: %2. Cannot mark the assigned workplace for deletion or mark as unused.'"),
			ТекстКоличествоСотрудников, ТекстФИОСотрудников(КоличествоСотрудников, СотрудникиОрганизации));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.ВАрхиве", "ВАрхиве", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстФИОСотрудников(Знач КоличествоСотрудников, Знач СотрудникиОрганизации)
	
	СотрудниковВключено = 0;
	ЧастиНадписи = Новый Массив;
	Для Каждого СтрокаСотрудник Из СотрудникиОрганизации Цикл
		Если СотрудниковВключено = 3 Тогда
			Прервать;
		КонецЕсли;
		ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Строка(СтрокаСотрудник.Сотрудник));
		ЧастиНадписи.Добавить(ФамилияИнициалы);
		СотрудниковВключено = СотрудниковВключено + 1;
	КонецЦикла;
	ТекстФИОСотрудников = СтрСоединить(ЧастиНадписи, ", ");
	
	ЕщеОсталось = КоличествоСотрудников - СотрудниковВключено;
	Если ЕщеОсталось > 0 Тогда
		ТекстФИОСотрудников = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 и еще %2';
				|en = '%1 and %2 more'"), 
			ТекстФИОСотрудников, ЕщеОсталось);
	КонецЕсли;
	
	Возврат ТекстФИОСотрудников;

КонецФункции	

Процедура НазначитьНомер()
	
	ПорядковыйНомер = Справочники.РабочиеМестаОхраныТруда.МаксимальныйНомерРабочегоМеста(Владелец, Подразделение) + 1;
	Номер = СтрЗаменить(Строка(ПорядковыйНомер), Символы.НПП, "");

КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли