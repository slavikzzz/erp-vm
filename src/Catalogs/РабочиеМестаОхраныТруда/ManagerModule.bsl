#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделенийОрганизаций КАК Т2 
	|	ПО Т2.Подразделение = Т.Подразделение
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т2.ВышестоящееПодразделение)
	|	И ЗначениеРазрешено(Т.Владелец)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	РабочиеМестаОхраныТруда.ОбработкаПолученияФормы(
		ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиПравилРегистрации

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	Настройка = Настройки.Добавить();
	Настройка.ПриОбработкеПослеИзменения = Истина;
	Настройка.ПриОбработкеПередИзменением = Истина;
	Настройка.ПослеОбработки = Истина;
	Настройка.ДополнительныеПараметры.Вставить("РазделыДанных", "ОхранаТруда");
КонецПроцедуры

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчикаПриОбработкеПередИзменением
Процедура ПриОбработкеПравилаРегистрацииПередИзменениемОбъекта(Объект, Отказ, Параметры) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульСинхронизацияДанныхЗарплатаКадрыСервер = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
		МодульСинхронизацияДанныхЗарплатаКадрыСервер.ОграничитьПоОрганизацииВладельцу(
			Объект, Отказ, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Владелец"), Параметры);
	КонецЕсли;
	
КонецПроцедуры

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчикаПриОбработкеПослеИзменения
Процедура ПриОбработкеПравилаРегистрацииПослеИзмененияОбъекта(Объект, Отказ, Параметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульСинхронизацияДанныхЗарплатаКадрыСервер = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
		МодульСинхронизацияДанныхЗарплатаКадрыСервер.ОграничитьПоОрганизацииВладельцу(Объект, Отказ, Объект.Владелец, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчикаПослеОбработки
Процедура ПослеОбработкиПравилаРегистрации(Объект, Отказ, Параметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульСинхронизацияДанныхЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадры");
		МодульСинхронизацияДанныхЗарплатаКадры.ОбъектыСПрисоединеннымиФайламиПослеОбработкиПравилаРегистрации(
			Объект, Отказ, Параметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ДанныеРабочегоМеста(РабочееМесто) Экспорт
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РабочиеМестаОхраныТруда.Должность КАК Должность,
		|	РабочиеМестаОхраныТруда.Владелец КАК Организация,
		|	РабочиеМестаОхраныТруда.Подразделение КАК Подразделение,
		|	РабочиеМестаОхраныТруда.УсловияТруда КАК УсловияТруда
		|ИЗ
		|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМестаОхраныТруда
		|ГДЕ
		|	РабочиеМестаОхраныТруда.Ссылка = &РабочееМесто");
		
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	
КонецФункции

Процедура ОбновитьСтруктуруРабочихМест(Организация = Неопределено, Подразделение = Неопределено) Экспорт
	
	УстранитьКоллизииСтруктурыРабочихМест(Организация, Подразделение);
	ОбновитьСтруктуруРабочихМестПоДаннымПодразделений(Организация, Подразделение);
	ОбновитьСтруктуруРабочихМестПоДаннымРабочихМест(Организация, Подразделение);
	
КонецПроцедуры

Процедура ОбновитьСтруктуруРабочихМестПоДаннымПодразделений(Организация = Неопределено, Подразделение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Создание недостающих групп рабочих мест.
	СчетчикИтераций = 0;
	Пока СчетчикИтераций < 10 Цикл
		СоздатьВТСтруктураРабочихМест(Запрос.МенеджерВременныхТаблиц, Организация, Подразделение);
		
		ИменаТаблицКУничтожению = Новый Массив;
		ИменаТаблицКУничтожению.Добавить("ВТПодразделенияРабочихМест");
		ИменаТаблицКУничтожению.Добавить("ВТПодразделенияРабочихМестКСозданию");
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, ИменаТаблицКУничтожению, Истина);
		
	// АПК:96 -выкл результат должен содержать уникальные значения
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РабочиеМеста.Подразделение КАК Подразделение,
			|	РабочиеМеста.Подразделение.Владелец КАК Владелец,
			|	РабочиеМеста.ВышестоящееПодразделение КАК ВышестоящееПодразделение
			|ПОМЕСТИТЬ ВТПодразделенияРабочихМест
			|ИЗ
			|	ВТСтруктураРабочихМест КАК РабочиеМеста
			|ГДЕ
			|	РабочиеМеста.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
			|	И РабочиеМеста.Подразделение.Владелец <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|	И РабочиеМеста.Подразделение.Владелец = РабочиеМеста.Владелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПодразделенияРабочихМест.Подразделение КАК Подразделение,
			|	ПодразделенияРабочихМест.Владелец КАК Владелец,
			|	ПодразделенияРабочихМест.ВышестоящееПодразделение КАК ВышестоящееПодразделение
			|ПОМЕСТИТЬ ВТПодразделенияРабочихМестКСозданию
			|ИЗ
			|	ВТПодразделенияРабочихМест КАК ПодразделенияРабочихМест
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтруктураРабочихМест КАК РабочиеМеста
			|		ПО ПодразделенияРабочихМест.Подразделение = РабочиеМеста.Подразделение
			|			И ПодразделенияРабочихМест.Владелец = РабочиеМеста.Владелец
			|			И (РабочиеМеста.ЭтоГруппа)
			|ГДЕ
			|	РабочиеМеста.Ссылка ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПодразделенияРабочихМест.ВышестоящееПодразделение,
			|	ПодразделенияРабочихМест.Владелец,
			|	ВЫРАЗИТЬ(ПодразделенияРабочихМест.ВышестоящееПодразделение КАК Справочник.ПодразделенияОрганизаций).Родитель
			|ИЗ
			|	ВТПодразделенияРабочихМест КАК ПодразделенияРабочихМест
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтруктураРабочихМест КАК РабочиеМеста
			|		ПО ПодразделенияРабочихМест.ВышестоящееПодразделение = РабочиеМеста.Подразделение
			|			И ПодразделенияРабочихМест.Владелец = РабочиеМеста.Владелец
			|			И (РабочиеМеста.ЭтоГруппа)
			|ГДЕ
			|	РабочиеМеста.Ссылка ЕСТЬ NULL
			|	И ПодразделенияРабочихМест.ВышестоящееПодразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПодразделенияРабочихМестКСозданию.Подразделение КАК Подразделение,
			|	ПРЕДСТАВЛЕНИЕ(ПодразделенияРабочихМестКСозданию.Подразделение) КАК Наименование,
			|	ЕСТЬNULL(РабочиеМеста.Ссылка, ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)) КАК Родитель,
			|	ПодразделенияРабочихМестКСозданию.Владелец КАК Владелец
			|ИЗ
			|	ВТПодразделенияРабочихМестКСозданию КАК ПодразделенияРабочихМестКСозданию
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтруктураРабочихМест КАК РабочиеМеста
			|		ПО ПодразделенияРабочихМестКСозданию.ВышестоящееПодразделение = РабочиеМеста.Подразделение
			|			И ПодразделенияРабочихМестКСозданию.Владелец = РабочиеМеста.Владелец
			|			И (РабочиеМеста.ЭтоГруппа)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтруктураРабочихМест КАК РабочиеМестаТекущийУровень
			|		ПО ПодразделенияРабочихМестКСозданию.Подразделение = РабочиеМестаТекущийУровень.Подразделение
			|			И ПодразделенияРабочихМестКСозданию.Владелец = РабочиеМестаТекущийУровень.Владелец
			|			И (РабочиеМестаТекущийУровень.ЭтоГруппа)
			|ГДЕ
			|	РабочиеМестаТекущийУровень.Ссылка ЕСТЬ NULL";
	
	// АПК:96 -вкл
	
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяГруппа = Справочники.РабочиеМестаОхраныТруда.СоздатьГруппу();
				ЗаполнитьЗначенияСвойств(НоваяГруппа, Выборка);
				НоваяГруппа.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеСтруктурыРабочихМест", Истина);
				НоваяГруппа.Записать();
			КонецЦикла;
		КонецЕсли;
		
		СчетчикИтераций = СчетчикИтераций + 1;
	КонецЦикла;
	
	// Обновление иерархии групп
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РабочиеМеста.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(МАКСИМУМ(ГруппыРабочихМест.Ссылка), ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)) КАК Родитель
		|ИЗ
		|	ВТСтруктураРабочихМест КАК РабочиеМеста
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтруктураРабочихМест КАК ГруппыРабочихМест
		|		ПО РабочиеМеста.ВышестоящееПодразделение = ГруппыРабочихМест.Подразделение
		|			И (ГруппыРабочихМест.ЭтоГруппа)
		|			И РабочиеМеста.Ссылка <> ГруппыРабочихМест.Ссылка
		|			И РабочиеМеста.Владелец = ГруппыРабочихМест.Владелец
		|			И (ГруппыРабочихМест.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|ГДЕ
		|	РабочиеМеста.ЭтоГруппа
		|	И НЕ РабочиеМеста.Родитель В
		|				(ВЫБРАТЬ
		|					Т.Ссылка
		|				ИЗ
		|					ВТСтруктураРабочихМест КАК Т
		|				ГДЕ
		|					РабочиеМеста.ВышестоящееПодразделение = Т.Подразделение
		|					И РабочиеМеста.Ссылка <> Т.Ссылка
		|					И РабочиеМеста.Владелец = Т.Владелец
		|					И Т.ЭтоГруппа)
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочиеМеста.Ссылка,
		|	РабочиеМеста.Родитель
		|
		|ИМЕЮЩИЕ
		|	РабочиеМеста.Родитель <> ЕСТЬNULL(МАКСИМУМ(ГруппыРабочихМест.Ссылка), ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ОбновляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОбновляемыйОбъект.Родитель = Выборка.Родитель;
			ОбновляемыйОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеСтруктурыРабочихМест", Истина);
			ОбновляемыйОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	УдалитьПустыеГруппыРабочихМест();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьСтруктуруРабочихМестПоДаннымРабочихМест(Организация = Неопределено,
														  Подразделение = Неопределено,
														  РабочееМесто = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТСтруктураРабочихМест(Запрос.МенеджерВременныхТаблиц, Организация, Подразделение);
	
	// Обновление иерархии элементов.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РабочиеМеста.Ссылка,
		|	ГруппыРабочихМест.Ссылка КАК Родитель
		|ИЗ
		|	ВТСтруктураРабочихМест КАК РабочиеМеста
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтруктураРабочихМест КАК ГруппыРабочихМест
		|		ПО РабочиеМеста.Подразделение = ГруппыРабочихМест.Подразделение
		|		И РабочиеМеста.Владелец = ГруппыРабочихМест.Владелец
		|		И (ГруппыРабочихМест.ЭтоГруппа)
		|ГДЕ
		|	РабочиеМеста.Родитель <> ГруппыРабочихМест.Ссылка
		|	И НЕ РабочиеМеста.ЭтоГруппа";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ОбновляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОбновляемыйОбъект.Родитель = Выборка.Родитель;
			ОбновляемыйОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеСтруктурыРабочихМест", Истина);
			ОбновляемыйОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
		
	// Обновление наименований групп рабочих мест.
	СчетчикИтераций = 0;
	Пока СчетчикИтераций < 10 Цикл
		СоздатьВТСтруктураРабочихМест(Запрос.МенеджерВременныхТаблиц, Организация, Подразделение);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(РабочиеМестаГруппы.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
			|	РабочиеМестаГруппы.Владелец КАК Владелец,
			|	МИНИМУМ(РабочиеМеста.ПометкаУдаления) КАК ПометкаУдаления,
			|	МИНИМУМ(РабочиеМеста.ВАрхиве) КАК ВАрхиве
			|ПОМЕСТИТЬ ВТАрхивныеПодразделенияПредварительно
			|ИЗ
			|	ВТСтруктураРабочихМест КАК РабочиеМестаГруппы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтруктураРабочихМест КАК РабочиеМеста
			|		ПО РабочиеМестаГруппы.Владелец = РабочиеМеста.Владелец
			|			И РабочиеМестаГруппы.Подразделение = РабочиеМеста.Подразделение
			|			И (НЕ РабочиеМеста.ЭтоГруппа)
			|ГДЕ
			|	РабочиеМестаГруппы.ЭтоГруппа
			|
			|СГРУППИРОВАТЬ ПО
			|	РабочиеМестаГруппы.Подразделение,
			|	РабочиеМестаГруппы.Владелец,
			|	ВЫРАЗИТЬ(РабочиеМестаГруппы.Подразделение КАК Справочник.ПодразделенияОрганизаций)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РабочиеМеста.Подразделение КАК Подразделение,
			|	РабочиеМеста.Владелец КАК Владелец,
			|	МИНИМУМ(РабочиеМестаПодчиненные.ПометкаУдаления) КАК ПометкаУдаления,
			|	МИНИМУМ(РабочиеМестаПодчиненные.ВАрхиве) КАК ВАрхиве
			|ПОМЕСТИТЬ ВТАрхивныеПодразделения
			|ИЗ
			|	ВТАрхивныеПодразделенияПредварительно КАК РабочиеМеста
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделенийОрганизаций КАК ПодчиненностьПодразделенийОрганизаций
			|		ПО РабочиеМеста.Подразделение = ПодчиненностьПодразделенийОрганизаций.ВышестоящееПодразделение
			|			И РабочиеМеста.Владелец = ПодчиненностьПодразделенийОрганизаций.Организация
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАрхивныеПодразделенияПредварительно КАК РабочиеМестаПодчиненные
			|		ПО (ПодчиненностьПодразделенийОрганизаций.Подразделение = РабочиеМестаПодчиненные.Подразделение)
			|			И (ПодчиненностьПодразделенийОрганизаций.Организация = РабочиеМестаПодчиненные.Владелец)
			|
			|СГРУППИРОВАТЬ ПО
			|	РабочиеМеста.Подразделение,
			|	РабочиеМеста.Владелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РабочиеМеста.Ссылка КАК ГруппаРабочегоМеста,
			|	РабочиеМеста.Родитель КАК Родитель,
			|	РабочиеМеста.Владелец КАК Владелец,
			|	АрхивныеПодразделения.ПометкаУдаления КАК ПометкаУдаления,
			|	АрхивныеПодразделения.ВАрхиве КАК ВАрхиве,
			|	АрхивныеПодразделения.Подразделение.Наименование КАК Наименование
			|ИЗ
			|	ВТСтруктураРабочихМест КАК РабочиеМеста
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАрхивныеПодразделения КАК АрхивныеПодразделения
			|		ПО РабочиеМеста.Подразделение = АрхивныеПодразделения.Подразделение
			|			И РабочиеМеста.Владелец = АрхивныеПодразделения.Владелец
			|ГДЕ
			|	РабочиеМеста.ЭтоГруппа
			|	И НЕ АрхивныеПодразделения.Подразделение ЕСТЬ NULL
			|	И (РабочиеМеста.Наименование <> ЕСТЬNULL(АрхивныеПодразделения.Подразделение.Наименование, НЕОПРЕДЕЛЕНО)
			|			ИЛИ РабочиеМеста.ПометкаУдаления <> ЕСТЬNULL(АрхивныеПодразделения.ПометкаУдаления, НЕОПРЕДЕЛЕНО)
			|			ИЛИ РабочиеМеста.ВАрхиве <> ЕСТЬNULL(АрхивныеПодразделения.ВАрхиве, НЕОПРЕДЕЛЕНО))";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаблокироватьДанныеДляРедактирования(Выборка.ГруппаРабочегоМеста);
			ОбновляемыйОбъект = Выборка.ГруппаРабочегоМеста.ПолучитьОбъект();
			ОбновляемыйОбъект.Наименование = Выборка.Наименование;
			ОбновляемыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
			ОбновляемыйОбъект.ВАрхиве = Выборка.ВАрхиве;
			ОбновляемыйОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеСтруктурыРабочихМест", Истина);
			ОбновляемыйОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Выборка.ГруппаРабочегоМеста);
		КонецЦикла;
		
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТАрхивныеПодразделенияПредварительно");
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТАрхивныеПодразделения");
		
		СчетчикИтераций = СчетчикИтераций + 1;
	КонецЦикла;
	
	// Удаление лишних (пустых) групп.
	УдалитьПустыеГруппыРабочихМест();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьДанныеРабочихМестПоУсловиямТруда(УсловияТруда) Экспорт

	ДанныеУсловийТруда = РабочиеМестаОхраныТруда.ЗначенияВзносовВредностиПФР(УсловияТруда);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УсловияТруда", УсловияТруда);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаОхраныТруда.Ссылка КАК РабочееМесто
		|ИЗ
		|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМестаОхраныТруда
		|ГДЕ
		|	РабочиеМестаОхраныТруда.СоответствуетУсловиямТруда
		|	И РабочиеМестаОхраныТруда.УсловияТруда = &УсловияТруда
		|	И НЕ РабочиеМестаОхраныТруда.ВАрхиве
		|	И НЕ РабочиеМестаОхраныТруда.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникДляБлокировки = РезультатЗапроса.Выгрузить();
	РабочиеМестаПоОтбору = ИсточникДляБлокировки.ВыгрузитьКолонку("РабочееМесто");
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.РабочиеМестаОхраныТруда");
	ЭлементБлокировкиДанных.ИсточникДанных = ИсточникДляБлокировки;
	ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Ссылка", "РабочееМесто");
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных.Заблокировать();
		Для Каждого РабочееМесто Из РабочиеМестаПоОтбору Цикл
			Если РеквизитыРабочегоМестаСоответствуютУсловиямТруда(РабочееМесто, ДанныеУсловийТруда) Тогда
				Продолжить;
			КонецЕсли;
			РабочееМестоОбъект = РабочееМесто.ПолучитьОбъект();
			РабочееМестоОбъект.ЗаполнитьПоУсловиямТруда(УсловияТруда, ДанныеУсловийТруда);
			Попытка
				РабочееМестоОбъект.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Требуется внести изменение в данные рабочего места «%1». 
					|В данный момент изменение невозможно, так как рабочее место редактируется другим пользователем или в другой форме программы.';
					|en = 'Make changes to the ""%1"" workplace data. 
					|Currently, you cannot make changes as the workplace is being edited by another user or in another application form.'"),
					РабочееМестоОбъект.Наименование);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			РабочееМестоОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВТСтруктураРабочихМест(МенеджерВременныхТаблиц, Организация, Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТСтруктураРабочихМест", Истина);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РабочиеМеста.Ссылка КАК Ссылка,
		|	РабочиеМеста.Владелец КАК Владелец,
		|	РабочиеМеста.Родитель КАК Родитель,
		|	РабочиеМеста.Подразделение КАК Подразделение,
		|	РабочиеМеста.Подразделение.Родитель КАК ВышестоящееПодразделение,
		|	РабочиеМеста.ЭтоГруппа КАК ЭтоГруппа,
		|	РабочиеМеста.ПометкаУдаления КАК ПометкаУдаления,
		|	РабочиеМеста.ВАрхиве КАК ВАрхиве,
		|	РабочиеМеста.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТСтруктураРабочихМест
		|ИЗ
		|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМеста
		|ГДЕ
		|	&УсловиеОтбора
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Владелец";
	
	УсловияОтбора = Новый Массив;
	Если Организация <> Неопределено Тогда
		УсловияОтбора.Добавить("РабочиеМеста.Владелец В (&Организация)");
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Если Подразделение <> Неопределено Тогда
		ЗапросПоРодителямПодразделений = Новый Запрос;
		ЗапросПоРодителямПодразделений.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПодчиненностьПодразделенийОрганизаций.ВышестоящееПодразделение КАК ВышестоящееПодразделение
			|ПОМЕСТИТЬ ВТВышестоящиеПодразделение
			|ИЗ
			|	РегистрСведений.ПодчиненностьПодразделенийОрганизаций КАК ПодчиненностьПодразделенийОрганизаций
			|ГДЕ
			|	ПодчиненностьПодразделенийОрганизаций.Подразделение В(&Подразделение)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВышестоящиеПодразделение.ВышестоящееПодразделение КАК ВышестоящееПодразделение
			|ИЗ
			|	ВТВышестоящиеПодразделение КАК ВышестоящиеПодразделение
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПодчиненностьПодразделенийОрганизаций.Подразделение
			|ИЗ
			|	РегистрСведений.ПодчиненностьПодразделенийОрганизаций КАК ПодчиненностьПодразделенийОрганизаций
			|ГДЕ
			|	ПодчиненностьПодразделенийОрганизаций.ВышестоящееПодразделение В
			|			(ВЫБРАТЬ
			|				ВТВышестоящиеПодразделение.ВышестоящееПодразделение
			|			ИЗ
			|				ВТВышестоящиеПодразделение)";
		
		ЗапросПоРодителямПодразделений.УстановитьПараметр("Подразделение", Подразделение);
		
		УсловияОтбора.Добавить("РабочиеМеста.Подразделение В (&Подразделение)");
		Запрос.УстановитьПараметр("Подразделение",
			ЗапросПоРодителямПодразделений.Выполнить().Выгрузить().ВыгрузитьКолонку("ВышестоящееПодразделение"));
	КонецЕсли;
	
	Если УсловияОтбора.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", СтрСоединить(УсловияОтбора, Символы.ПС + Символы.Таб + "И "));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", "(ИСТИНА)");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура УстранитьКоллизииСтруктурыРабочихМест(Организация, Подразделение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТСтруктураРабочихМест(Запрос.МенеджерВременныхТаблиц, Организация, Подразделение);
	
	// Проверка и устранение задвоенных групп.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РабочиеМеста.Ссылка) КАК КоличествоСсылок,
		|	РабочиеМеста.Подразделение КАК Подразделение,
		|	РабочиеМеста.Владелец КАК Владелец
		|ПОМЕСТИТЬ ВТКоличествоГруппПодразделений
		|ИЗ
		|	ВТСтруктураРабочихМест КАК РабочиеМеста
		|ГДЕ
		|	РабочиеМеста.ЭтоГруппа
		|	И РабочиеМеста.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочиеМеста.Подразделение,
		|	РабочиеМеста.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоличествоГруппПодразделений.Подразделение КАК Подразделение,
		|	КоличествоГруппПодразделений.Владелец КАК Владелец
		|ПОМЕСТИТЬ ВТГруппыСПовторяющимисяПодразделениями
		|ИЗ
		|	ВТКоличествоГруппПодразделений КАК КоличествоГруппПодразделений
		|ГДЕ
		|	КоличествоГруппПодразделений.КоличествоСсылок > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыСПовторяющимисяПодразделениями.Подразделение КАК Подразделение,
		|	ГруппыСПовторяющимисяПодразделениями.Владелец КАК Владелец,
		|	РабочиеМестаРодители.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РабочиеМестаПодчиненные.Ссылка) КАК КоличествоПодчиненных
		|ПОМЕСТИТЬ ВТКоличествоПодчиненныхЭлементов
		|ИЗ
		|	ВТГруппыСПовторяющимисяПодразделениями КАК ГруппыСПовторяющимисяПодразделениями
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтруктураРабочихМест КАК РабочиеМестаРодители
		|		ПО ГруппыСПовторяющимисяПодразделениями.Подразделение = РабочиеМестаРодители.Подразделение
		|			И ГруппыСПовторяющимисяПодразделениями.Владелец = РабочиеМестаРодители.Владелец
		|			И (РабочиеМестаРодители.ЭтоГруппа)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтруктураРабочихМест КАК РабочиеМестаПодчиненные
		|		ПО РабочиеМестаРодители.Ссылка = РабочиеМестаПодчиненные.Родитель
		|			И (РабочиеМестаРодители.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|			И РабочиеМестаРодители.Владелец = РабочиеМестаПодчиненные.Владелец
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыСПовторяющимисяПодразделениями.Подразделение,
		|	ГруппыСПовторяющимисяПодразделениями.Владелец,
		|	РабочиеМестаРодители.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоличествоПодчиненныхЭлементов.Подразделение КАК Подразделение,
		|	КоличествоПодчиненныхЭлементов.Владелец КАК Владелец,
		|	МАКСИМУМ(КоличествоПодчиненныхЭлементов.КоличествоПодчиненных) КАК КоличествоПодчиненных
		|ПОМЕСТИТЬ ВТОставляемыеГруппыПредварительно
		|ИЗ
		|	ВТКоличествоПодчиненныхЭлементов КАК КоличествоПодчиненныхЭлементов
		|
		|СГРУППИРОВАТЬ ПО
		|	КоличествоПодчиненныхЭлементов.Подразделение,
		|	КоличествоПодчиненныхЭлементов.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоличествоПодчиненныхЭлементов.Подразделение КАК Подразделение,
		|	КоличествоПодчиненныхЭлементов.Владелец КАК Владелец,
		|	МАКСИМУМ(КоличествоПодчиненныхЭлементов.Ссылка) КАК Ссылка
		|ПОМЕСТИТЬ ВТОставляемыеПодразделения
		|ИЗ
		|	ВТКоличествоПодчиненныхЭлементов КАК КоличествоПодчиненныхЭлементов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОставляемыеГруппыПредварительно КАК ОставляемыеГруппыПредварительно
		|		ПО (КоличествоПодчиненныхЭлементов.Подразделение = КоличествоПодчиненныхЭлементов.Подразделение)
		|			И (КоличествоПодчиненныхЭлементов.Владелец = КоличествоПодчиненныхЭлементов.Владелец)
		|			И (КоличествоПодчиненныхЭлементов.КоличествоПодчиненных = КоличествоПодчиненныхЭлементов.КоличествоПодчиненных)
		|
		|СГРУППИРОВАТЬ ПО
		|	КоличествоПодчиненныхЭлементов.Подразделение,
		|	КоличествоПодчиненныхЭлементов.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РабочиеМеста.Ссылка КАК Ссылка,
		|	ОставляемыеПодразделения.Ссылка КАК Родитель
		|ИЗ
		|	ВТОставляемыеПодразделения КАК ОставляемыеПодразделения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтруктураРабочихМест КАК РабочиеМеста
		|		ПО ОставляемыеПодразделения.Подразделение = РабочиеМеста.Подразделение
		|			И ОставляемыеПодразделения.Владелец = РабочиеМеста.Владелец
		|			И ОставляемыеПодразделения.Ссылка <> РабочиеМеста.Родитель
		|			И (НЕ РабочиеМеста.ЭтоГруппа)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ОбновляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОбновляемыйОбъект.Родитель = Выборка.Родитель;
			ОбновляемыйОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеСтруктурыРабочихМест", Истина);
			ОбновляемыйОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	// Удаление лишних (пустых) групп.
	УдалитьПустыеГруппыРабочихМест();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УдалитьПустыеГруппыРабочихМест()
	
	ОбновляемыеПодразделения = Новый Массив;
	
	ПроверитьНеобходимостьУдаленияЛишнихГрупп = Истина;
	Пока ПроверитьНеобходимостьУдаленияЛишнихГрупп Цикл
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	РабочиеМеста.Ссылка КАК Ссылка,
			|	РабочиеМеста.Родитель КАК Родитель
			|ПОМЕСТИТЬ ВТРабочиеМестаПодчиненные
			|ИЗ
			|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМеста
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РабочиеМеста.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМеста
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаПодчиненные КАК РабочиеМестаПодчиненные
			|		ПО РабочиеМеста.Ссылка = РабочиеМестаПодчиненные.Родитель
			|ГДЕ
			|	РабочиеМеста.ЭтоГруппа
			|СГРУППИРОВАТЬ ПО
			|	РабочиеМеста.Ссылка
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РабочиеМестаПодчиненные.Ссылка) = 0";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ПроверитьНеобходимостьУдаленияЛишнихГрупп = Ложь;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				ЛишняяГруппа = Выборка.Ссылка.ПолучитьОбъект();
				Если ЛишняяГруппа <> Неопределено Тогда
					ОбновляемыеПодразделения.Добавить(ЛишняяГруппа.Подразделение);
					ЛишняяГруппа.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеСтруктурыРабочихМест", Истина);
					ЛишняяГруппа.Удалить();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		УправлениеШтатнымРасписанием.ОбновитьСведенияПодразделений(ОбновляемыеПодразделения);
	КонецЕсли;
	
КонецПроцедуры

Функция МаксимальныйНомерРабочегоМеста(Организация, Подразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ПолеГруппировки,
		|	МАКСИМУМ(РабочиеМестаОхраныТруда.ПорядковыйНомер) КАК ПорядковыйНомер
		|ИЗ
		|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМестаОхраныТруда
		|ГДЕ
		|	&Отбор
		|	И НЕ РабочиеМестаОхраныТруда.НомерВручную
		|	И НЕ РабочиеМестаОхраныТруда.ПометкаУдаления
		|	И НЕ РабочиеМестаОхраныТруда.ВАрхиве
		|СГРУППИРОВАТЬ ПО
		|	&ПолеГруппировки";
	
	ТекстОтбора = "ИСТИНА";
	ТекстПоляГруппировки = "РабочиеМестаОхраныТруда.НомерВручную";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ПриОпределенииМаксимальногоНомераРабочегоМеста(
			Организация, Подразделение, Запрос, ТекстОтбора, ТекстПоляГруппировки);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", ТекстОтбора);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеГруппировки", ТекстПоляГруппировки);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПорядковыйНомер;
	КонецЕсли;
	
	Возврат 0; 
	
КонецФункции

Функция НомерРабочегоМестаЗанят(РабочееМестоОбъект, РабочееМестоСсылка, ДанныеЗанятогоРабочегоМеста = Неопределено) Экспорт
	
	КонтролироватьУникальность = Ложь;
	СпособКонтроляУникальности = Неопределено;
	
	ЕстьПодсистемаОхранаТруда = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда");
	Если ЕстьПодсистемаОхранаТруда Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
	КонецЕсли;
	
	Если ЕстьПодсистемаОхранаТруда Тогда
		МодульОхранаТруда.ОпределитьПараметрыКонтроляУникальности(
			РабочееМестоОбъект.Владелец, КонтролироватьУникальность, СпособКонтроляУникальности);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РабочееМестоОбъект.ПорядковыйНомер) И КонтролироватьУникальность <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерРабочегоМеста", РабочееМестоОбъект.Номер);
	Запрос.УстановитьПараметр("Ссылка", РабочееМестоСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РабочиеМестаОхраныТруда.Ссылка КАК РабочееМесто,
	|	РабочиеМестаОхраныТруда.Номер КАК Номер
	|ИЗ
	|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМестаОхраныТруда
	|ГДЕ
	|	РабочиеМестаОхраныТруда.Номер = &НомерРабочегоМеста
	|	И &Отбор
	|	И РабочиеМестаОхраныТруда.Ссылка <> &Ссылка
	|	И НЕ РабочиеМестаОхраныТруда.НомерВручную
	|	И НЕ РабочиеМестаОхраныТруда.ПометкаУдаления
	|	И НЕ РабочиеМестаОхраныТруда.ВАрхиве";
	
	ТекстОтбора = "ИСТИНА";
	
	Если ЕстьПодсистемаОхранаТруда Тогда
		МодульОхранаТруда.ПриОпределенииЗанятостиНомераРабочегоМеста(
			РабочееМестоОбъект, Запрос, ТекстОтбора, КонтролироватьУникальность, СпособКонтроляУникальности);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", ТекстОтбора);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Если ДанныеЗанятогоРабочегоМеста <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеЗанятогоРабочегоМеста, Выборка);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция РеквизитыРабочегоМестаСоответствуютУсловиямТруда(РабочееМестоОбъект, ДанныеУсловийТруда = Неопределено) Экспорт
	
	Если РабочееМестоОбъект.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией <> ДанныеУсловийТруда.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РабочееМестоОбъект.ОснованиеДосрочногоНазначенияПенсии <> ДанныеУсловийТруда.ОснованиеДосрочногоНазначенияПенсии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РабочееМестоОбъект.ОсобыеУсловияТрудаПФР <> ДанныеУсловийТруда.ОсобыеУсловияТрудаПФР Тогда
		Возврат Ложь;
	КонецЕсли;

	Если РабочееМестоОбъект.ПроцентНадбавкиЗаВредность <> ДанныеУсловийТруда.ПроцентНадбавкиЗаВредность Тогда
		Возврат Ложь;
	КонецЕсли;

	Если РабочееМестоОбъект.ВыплачиваетсяНадбавкаЗаВредность <> ДанныеУсловийТруда.ВыплачиваетсяНадбавкаЗаВредность Тогда
		Возврат Ложь;
	КонецЕсли;

	Если РабочееМестоОбъект.КоличествоДнейДополнительногоОтпускаВГод <> ДанныеУсловийТруда.КоличествоДнейДополнительногоОтпускаВГод Тогда
		Возврат Ложь;
	КонецЕсли;

	Если РабочееМестоОбъект.КодПозицииСпискаПФР <> ДанныеУсловийТруда.КодПозицииСпискаПФР Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

#КонецОбласти

#КонецЕсли