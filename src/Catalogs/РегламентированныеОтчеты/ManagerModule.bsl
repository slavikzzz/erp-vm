#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс	

// Обработчик обновления БРО.
//
// Вызывается при первом заполнении либо в случае необходимости обновления справочника регламентированных отчетов.
//
Процедура ЗаполнитьСписокРегламентированныхОтчетов() Экспорт
    	    			
	ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать();

	ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();

	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов);
	
КонецПроцедуры

// Обработчик обновления БРО.
//
// Вызывается при первом заполнении либо в случае необходимости обновления справочника регламентированных отчетов.
//
Процедура УстановитьСнятьПометкуНаУдаление() Экспорт
	
	ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать();

	ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();

	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОбработкаОбновлениеОтчетов.УстановитьСнятьПометкуНаУдаление(ДеревоОтчетов);
	
КонецПроцедуры

// Обработчик обновления БРО 1.1.13.5
//
Процедура УдалитьРеглОтчетИсполнениеКонтрактовГОЗИзГруппыОтчетностьПрочая() Экспорт
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РегламентированныеОтчеты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|ГДЕ
	|	РегламентированныеОтчеты.Наименование = &НаименованиеЭлемента
	|	И РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ
	|	И РегламентированныеОтчеты.Родитель.Наименование = &НаименованиеГруппы";
	
	Запрос.УстановитьПараметр("НаименованиеЭлемента", "Исполнение контрактов ГОЗ");
	Запрос.УстановитьПараметр("НаименованиеГруппы",   "Отчетность прочая");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		УдаляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если УдаляемыйОбъект <> Неопределено Тогда
			ОбновлениеИнформационнойБазы.УдалитьДанные(УдаляемыйОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Обработчик обновления БРО 1.0.1.52
//
Процедура УдалитьПовторяющиесяГруппыИЭлементыВСправочникеРеглОтчетов() Экспорт
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
						  |	РегламентированныеОтчеты.Наименование КАК Наименование
						  |ИЗ
						  |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
						  |ГДЕ
						  |	РегламентированныеОтчеты.ЭтоГруппа = ИСТИНА");
						  
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	Пока ТаблицаРезультатов.Количество() > 0 Цикл
		
		НайденныеСтроки = ТаблицаРезультатов.НайтиСтроки(Новый Структура("Наименование", ТаблицаРезультатов[0].Наименование));
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			
			Для НомерНайденнойСтроки = 1 По НайденныеСтроки.Количество() - 1 Цикл
				
				УдаляемыйОбъект = НайденныеСтроки[НомерНайденнойСтроки].Ссылка.ПолучитьОбъект();
				
				Если НЕ УдаляемыйОбъект = Неопределено Тогда
					ОбновлениеИнформационнойБазы.УдалитьДанные(УдаляемыйОбъект);
				КонецЕсли;
								
				ТаблицаРезультатов.Удалить(НайденныеСтроки[НомерНайденнойСтроки]);
				
			КонецЦикла;
			
			ТаблицаРезультатов.Удалить(0);
						
		Иначе
			
			ТаблицаРезультатов.Удалить(0);
			
		КонецЕсли;
				
	КонецЦикла;
					
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
						  |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
						  |ИЗ
						  |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
						  |ГДЕ
						  |	РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ");
						  
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	Пока ТаблицаРезультатов.Количество() > 0 Цикл
		
		НайденныеСтроки = ТаблицаРезультатов.НайтиСтроки(Новый Структура("ИсточникОтчета", ТаблицаРезультатов[0].ИсточникОтчета));
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			
			Для НомерНайденнойСтроки = 1 По НайденныеСтроки.Количество() - 1 Цикл
								
				УдаляемыйОбъект = НайденныеСтроки[НомерНайденнойСтроки].Ссылка.ПолучитьОбъект();
				
				Если НЕ УдаляемыйОбъект = Неопределено Тогда
				   
					Если УдаляемыйОбъект.Предопределенный Тогда
						
						УдаляемыйОбъект.ИмяПредопределенныхДанных = "";
						
						УдаляемыйОбъект.Записать();
						
					КонецЕсли;
				   
					ОбновлениеИнформационнойБазы.УдалитьДанные(УдаляемыйОбъект);
					
				КонецЕсли;
				
				ТаблицаРезультатов.Удалить(НайденныеСтроки[НомерНайденнойСтроки]);
				
			КонецЦикла;
			
			ТаблицаРезультатов.Удалить(0);
						
		Иначе
			
			ТаблицаРезультатов.Удалить(0);
			
		КонецЕсли;
				
	КонецЦикла;
				
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Обработчик обновления БРО.
//
Процедура ОчиститьВнешниеРеглОтчеты() Экспорт
	
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
	                      |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
	                      |ИЗ
	                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	                      |ГДЕ
	                      |	(РегламентированныеОтчеты.ВнешнийОтчетИспользовать = ИСТИНА
	                      |		ИЛИ РегламентированныеОтчеты.ВнешнийОтчетВерсия <> """"
	                      |		ИЛИ РАЗМЕРХРАНИМЫХДАННЫХ(РегламентированныеОтчеты.ВнешнийОтчетХранилище) > 100)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Метаданные.Документы.Найти(Выборка.ИсточникОтчета) <> Неопределено 
		 ИЛИ Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
			
			ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
			ОбъектРеглОтчет.ВнешнийОтчетХранилище = Неопределено;
			ОбъектРеглОтчет.ВнешнийОтчетВерсия = "";
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектРеглОтчет, , Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Производит обработку файла архива регламентированного отчета загруженного
// из сервиса интернет-поддержки пользователей.
//
// Параметры:
//   ОписаниеФайла - Структура - описание файла регламентированного отчета:
//     * ДанныеФайла - ДвоичныеДанные - данные файла отчета;
//     * Идентификатор - Строка - идентификатор регламентированного отчета в сервисе;
//     * ИдентификаторВидаОтчета - Строка - идентификатор вида регламентированного отчета в сервисе;
//     * Наименование - Строка - наименование регламентированного отчета в сервисе;
//     * Версия - Число - номер актуальной версии;
//     * КонтрольнаяСумма - Число - контрольная сумма файла;
//     * Размер - Строка - размер файла;
//     * ОписаниеВерсии - Строка - описание версии регламентированного отчета.
//   Обработан - Булево - если Ложь, при обработке файла обновления были ошибки
//   и его необходимо загрузить повторно;
//   ДополнительныеПараметры - Структура - содержит дополнительные параметры обработки.
//
Процедура ОбновитьДанныеОтчетаИзФайла(ОписаниеФайла, Обработан, ДополнительныеПараметры) Экспорт
	
	ПараметрыВнешнейФормы = Новый Структура;
	ПараметрыВнешнейФормы.Вставить("Версия", ОписаниеФайла.Версия);
	ПараметрыВнешнейФормы.Вставить("Отчет");
	ПараметрыВнешнейФормы.Вставить("Представление", ОписаниеФайла.Наименование);
	ПараметрыВнешнейФормы.Вставить("ДопИнформация");
	ПараметрыВнешнейФормы.Вставить("ОтчетСсылка");
	ПараметрыВнешнейФормы.Вставить("РезультатСравнения");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
	
	ПутьКФайлуАрхива = ИмяВременногоФайла;
	Если ТипЗнч(ОписаниеФайла.ДанныеФайла) = Тип("ДвоичныеДанные") Тогда
		ОписаниеФайла.ДанныеФайла.Записать(ПутьКФайлуАрхива);
	ИначеЕсли ЭтоАдресВременногоХранилища(ОписаниеФайла.ДанныеФайла) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеФайла.ДанныеФайла);
		ДвоичныеДанные.Записать(ПутьКФайлуАрхива);
	Иначе
		ПутьКФайлуАрхива = ОписаниеФайла.ДанныеФайла;
	КонецЕсли;
	
	ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.ОбработатьИЗаписатьВнешнийОтчетВСправочникРО(
		ПараметрыВнешнейФормы, ПутьКФайлуАрхива);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Если ПараметрыВнешнейФормы.РезультатСравнения <> Неопределено Тогда
		Если ПараметрыВнешнейФормы.РезультатСравнения = 3 Тогда // внешний отчет загружен
			Обработан = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Внешняя Форма отчета ""%1"" загружена в справочник регламентированных отчетов.';
					|en = 'Внешняя Форма отчета ""%1"" загружена в справочник регламентированных отчетов.'"),
				ПараметрыВнешнейФормы.Представление);
			ДополнительныеПараметры.Вставить("ТекстСообщения", ТекстСообщения);
		ИначеЕсли ПараметрыВнешнейФормы.РезультатСравнения = 4 Тогда // внешний отчет отключен
			Обработан = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В справочнике регламентированных отчетов отключена внешняя форма отчета %1""%2"".';
					|en = 'В справочнике регламентированных отчетов отключена внешняя форма отчета %1""%2"".'"),
				Символы.ПС, ПараметрыВнешнейФормы.Представление);
			ДополнительныеПараметры.Вставить("ТекстСообщения", ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает реквизиты справочника, которые образуют естественный ключ
// для элементов справочника.
//
// Возвращаемое значение:
//   Массив - массив имен реквизитов, образующих естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив();
	
	Результат.Добавить("ИсточникОтчета");
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли