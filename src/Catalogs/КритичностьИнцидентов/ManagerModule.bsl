#Область ПрограммныйИнтерфейс

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения:
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - Ключ - Имя табличной части объекта.
//                               Значение - Выгрузка в таблицу значений пустой табличной части.
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Высокая';
		|en = 'High'", КодыЯзыков); // @НСтр
	Элемент.РеквизитДопУпорядочивания = 1;

	Элемент = Элементы.Добавить();
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Средняя';
		|en = 'Average'", КодыЯзыков); // @НСтр
	Элемент.РеквизитДопУпорядочивания = 2;

	Элемент = Элементы.Добавить();
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Низкая';
		|en = 'Low'", КодыЯзыков); // @НСтр
	Элемент.РеквизитДопУпорядочивания = 3;
	
КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - СправочникОбъект.КритичностьИнцидентов - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт

КонецПроцедуры

// Добавляет на форму списка условное оформление для поля КритичностьИнцидентов.
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма.
//  ИмяСписка         - Строка - имя динамического списка.
//  ИмяПоля           - Строка - имя поля КритичностьИнцидентов динамического списка.
//  ИмяЭлемента       - Строка - имя колонки КритичностьИнцидентов динамического списка.
//  ИспользуетсяОтбор - Булево - Истина, если используется отбор и для него необходимо установить условное оформление.
//  ИмяПоляОтбора     - Строка - имя реквизита формы для отбора.
//  ИмяЭлементаОтбора - Строка - имя элемента формы для отбора.
//
Процедура УстановитьУсловноеОформлениеПоляКритичность(Форма, ИмяСписка, ИмяПоля, ИмяЭлемента, ИспользуетсяОтбор = Ложь, ИмяПоляОтбора = Неопределено, ИмяЭлементаОтбора = Неопределено) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	ПредставлениеЭлементаОформления = НСтр("ru = 'Критичность';
											|en = 'Severity'");
	Для Индекс = 0 По УсловноеОформление.Элементы.Количество() - 1 Цикл
		Элемент = УсловноеОформление.Элементы[0];
		Если Элемент.Представление = ПредставлениеЭлементаОформления Тогда
			УсловноеОформление.Элементы.Удалить(Элемент);
			Индекс = Индекс - 1;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КритичностьИнцидентов.Ссылка  КАК Критичность,
		|	КритичностьИнцидентов.Цвет    КАК Цвет
		|ИЗ
		|	Справочник.КритичностьИнцидентов КАК КритичностьИнцидентов");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Цвет = Выборка.Цвет;// ХранилищеЗначения
			
			// колонка
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоля);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Выборка.Критичность;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Цвет.Получить());
			
			Элемент.Представление = ПредставлениеЭлементаОформления;
			
			// отбор
			Если ИспользуетсяОтбор Тогда
				
				Элемент = УсловноеОформление.Элементы.Добавить();
				
				Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора);
				
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора);
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Выборка.Критичность;
				
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Цвет.Получить());
				
				Элемент.Представление = ПредставлениеЭлементаОформления;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Область ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КритичностьИнцидентов.Ссылка                      КАК Ссылка,
	|	КритичностьИнцидентов.ПометкаУдаления             КАК ПометкаУдаления,
	|	КритичностьИнцидентов.РеквизитДопУпорядочивания   КАК РеквизитДопУпорядочивания,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(КритичностьИнцидентов.Ссылка) КАК Представление
	|ИЗ
	|	Справочник.КритичностьИнцидентов КАК КритичностьИнцидентов
	|ГДЕ
	|	НЕ КритичностьИнцидентов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
	
		Пока Выборка.Следующий() Цикл
		
			ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
		
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

#КонецЕсли

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

#КонецОбласти

