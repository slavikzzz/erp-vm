&НаКлиенте
Перем КонтекстЭДОКлиент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Параметры.СтруктураДанных;
	
	Если СтруктураДанных.Свойство("ТолькоПросмотрФормы") И СтруктураДанных.ТолькоПросмотрФормы Тогда
		Элементы.Полномочия.ТолькоПросмотр 			= Истина;
		Элементы.ФормаКнопкаСохранить.Доступность 	= Ложь;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.НачальноеЗаполнениеПолномочийПредставителяФСС();
	
	Организация = СтруктураДанных.Организация;
	
	УправлениеФормой(СтруктураДанных.ПолномочияПредставителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьКоличествоВыбранных();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииПослеПолученияКонтекстаЭДО", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Редактирование_ОтправкиФСС" Тогда
		УправлениеФормой();
		ОбновитьКоличествоВыбранных();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолномочияПриИзменении(Элемент)
	
	ОбновитьКоличествоВыбранных();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ЗадатьПометку(Полномочия);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ЗадатьПометку(Полномочия, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	Если НЕ СохранениеВозможно() Тогда
		Возврат;
	КонецЕсли;
	
	МассивНайденныхЭлементов = Новый Массив;
	ПоискЭлементовДерева(МассивНайденныхЭлементов, Полномочия, "Пометка", Истина);
	Результат = Новый Структура("ПолномочияПредставителя", Новый Массив);
	Для каждого СтрПолномочие Из МассивНайденныхЭлементов Цикл
		ПолномочиеПредставителя = Новый Структура;
		ПолномочиеПредставителя.Вставить("КодПолномочия", 			СтрПолномочие.КодПолномочия);
		ПолномочиеПредставителя.Вставить("НаименованиеПолномочия", 	СтрПолномочие.НаименованиеПолномочия);
		ПолномочиеПредставителя.Вставить("ПризнакПередоверия", 		СтрПолномочие.ПризнакПередоверия);
		ПолномочиеПредставителя.Вставить("ДатаНачала", 				СтрПолномочие.ДатаНачала);
		ПолномочиеПредставителя.Вставить("ДатаОкончания", 			СтрПолномочие.ДатаОкончания);
		Результат.ПолномочияПредставителя.Добавить(ПолномочиеПредставителя);
	КонецЦикла;
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьПослеОбновления", ЭтотОбъект);
	
	ТипВзаимодействияМЧД = ДокументооборотСФССКлиентСервер.ТипВзаимодействияОрганизацияСЭДО();
	ЭлектронныйДокументооборотСФССКлиент.ПолучитьВходящиеСообщенияСЭДОФСС(
		Оповещение,
		Организации,,,
		ТипВзаимодействияМЧД);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой(ПолномочияПредставителя = Неопределено)
	
	Если ПолномочияПредставителя = Неопределено Тогда
		ПолномочияПредставителя = Новый Массив;
		ДобавлениеЭлементовДерева(ПолномочияПредставителя, Полномочия, "КодПолномочия,ПризнакПередоверия");
	КонецЕсли;
	
	ЗапросПолномочий = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ложь КАК Пометка,
		|	ПолномочияПредставителяФСС.Код КАК КодПолномочия,
		|	ПолномочияПредставителяФСС.Наименование КАК НаименованиеПолномочия,
		|	Ложь КАК ПризнакПередоверия,
		|	ПолномочияПредставителяФСС.ДатаНачала КАК ДатаНачала,
		|	ПолномочияПредставителяФСС.ДатаОкончания КАК ДатаОкончания,
		|	ПолномочияПредставителяФСС.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.ПолномочияПредставителяФСС КАК ПолномочияПредставителяФСС
		|ГДЕ
		|	НЕ ПолномочияПредставителяФСС.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	ПолномочияПредставителяФСС.Ссылка ИЕРАРХИЯ");
	
	ДеревоПолномочий = ЗапросПолномочий.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Для каждого ПолномочиеПредставителя Из ПолномочияПредставителя Цикл
		СтрокаПолномочия = ДеревоПолномочий.Строки.Найти(ПолномочиеПредставителя.КодПолномочия, "КодПолномочия", Истина);
		Если СтрокаПолномочия <> Неопределено Тогда
			СтрокаПолномочия.Пометка = Истина;
			СтрокаПолномочия.ПризнакПередоверия = ПолномочиеПредставителя.ПризнакПередоверия;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоПолномочий, Полномочия);
	
КонецПроцедуры

&НаКлиенте
Функция СохранениеВозможно()
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	// проверяем полномочия
	
	МассивНайденныхЭлементов = Новый Массив;
	ПоискЭлементовДерева(МассивНайденныхЭлементов, Полномочия, "Пометка", Истина, 1);
	Если МассивНайденныхЭлементов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран ни один вид полномочия.';
														|en = 'Не выбран ни один вид полномочия.'"),, "Полномочия",, Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытииПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьКоличествоВыбранных()
	
	МассивНайденныхЭлементов = Новый Массив;
	ПоискЭлементовДерева(МассивНайденныхЭлементов, Полномочия, "Пометка", Истина);
	КоличествоНайденныхЭлементов = МассивНайденныхЭлементов.Количество();
	ТекстКоличестваНайденныхЭлементов = Формат(КоличествоНайденныхЭлементов, "ЧДЦ=; ЧН=");
	
	Элементы.ДекорацияВыбрано.Заголовок = СтрШаблон(
		НСтр("ru = 'Выбрано полномочий: %1';
			|en = 'Выбрано полномочий: %1'"),
		ТекстКоличестваНайденныхЭлементов);
	
КонецФункции

&НаКлиенте
Процедура ЗадатьПометку(ЭлементДерево, Пометка = Истина)
	
	Для каждого Стр Из ЭлементДерево.ПолучитьЭлементы() Цикл
		Стр.Пометка = Пометка;
		ЗадатьПометку(Стр, Пометка);
	КонецЦикла;
	
	ОбновитьКоличествоВыбранных();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВремяУстареванияЗапросаПолномочий()
	
	Возврат 60 * 60;
	
Конецфункции

&НаКлиенте
Процедура ПоискЭлементовДерева(
		МассивНайденныхЭлементов,
		ОбъектДерева,
		ИмяЭлмента,
		ЗначениеЭлемента,
		МаксимальноеКоличество = 0,
		ВключатьПодчиненные = Истина)
	
	КоллекцияЭлементов = ОбъектДерева.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из КоллекцияЭлементов Цикл
		НайденноеЗначение = Неопределено;
		Если ЭлементДерева.Свойство(ИмяЭлмента, НайденноеЗначение) Тогда
			Если НайденноеЗначение = ЗначениеЭлемента Тогда
				МассивНайденныхЭлементов.Добавить(ЭлементДерева);
				Если МаксимальноеКоличество <> 0 И МассивНайденныхЭлементов.Количество() >= МаксимальноеКоличество Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Если ВключатьПодчиненные Тогда
				ПоискЭлементовДерева(
					МассивНайденныхЭлементов,
					ЭлементДерева,
					ИмяЭлмента,
					ЗначениеЭлемента,
					МаксимальноеКоличество,
					ВключатьПодчиненные);
				Если МаксимальноеКоличество <> 0 И МассивНайденныхЭлементов.Количество() >= МаксимальноеКоличество Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПослеОбновления(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.БылиОшибки Тогда
		Для каждого ОшибкиПоОрганизации Из Результат.ОшибкиПоОрганизациям Цикл
			Для каждого ОписаниеОшибки Из ОшибкиПоОрганизации.Значение Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ПоследниеРезультатыОбработки = РезультатыОбработки(Организация);
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если ЗначениеЗаполнено(ПоследниеРезультатыОбработки.ДатаЗапроса)
		И ПоследниеРезультатыОбработки.ДатаЗапроса > ДатаСеанса - ВремяУстареванияЗапросаПолномочий() Тогда
		
		УправлениеФормой();
		ОбновитьКоличествоВыбранных();
		Возврат;
	КонецЕсли;
	
	ПараметрыСообщения =
		ДокументооборотСКОВызовСервера.ПараметрыЗапросаСправочникаПолномочийМашиночитаемыхДоверенностейФСС(Организация);
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьПослеОтправки", ЭтотОбъект);
	
	НастройкиЗаписиОтправки = Новый Структура;
	НастройкиЗаписиОтправки.Вставить("ВидОтчета",
		ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗапросСправочникаПолномочийМашиночитаемойДоверенностиФСС"));
	НастройкиЗаписиОтправки.Вставить("КороткоеИмяФайлаПакета", "PA_%1.xml");
	НастройкиЗаписиОтправки.Вставить("Организация", Организация);
	ПараметрыСообщения.Вставить("НастройкиЗаписиОтправки", НастройкиЗаписиОтправки);
	ЭлектронныйДокументооборотСФССКлиент.ОтправитьСообщениеСЭДО(
		Оповещение,
		ПараметрыСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПослеОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	УправлениеФормой();
	ОбновитьКоличествоВыбранных();
	
	Если НЕ Результат.Выполнено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ПараметрыДлительнойОтправки = ДлительнаяОтправкаКлиент.ПараметрыДлительнойОтправки();
	ПараметрыДлительнойОтправки.ОтчетСсылка 				= Неопределено;
	ПараметрыДлительнойОтправки.ОбщееКоличествоЭтапов 		= 1;
	ПараметрыДлительнойОтправки.КонтекстДлительнойОперации 	= ДополнительныеПараметры;
	
	Если ДлительнаяОтправкаКлиент.ПоказатьФормуДлительнойОтправки(ПараметрыДлительнойОтправки) Тогда // отправка в ФСС
		ПараметрыАвтозапроса = Новый Структура();
		ПараметрыАвтозапроса.Вставить("Ключ", Результат.ОтправкаСсылка);
		
		ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ПараметрыАвтозапроса", ПараметрыАвтозапроса);
		ДополнительныеПараметры.Вставить("ЭтоЗапросРезультатаОперации", Истина);
		ДополнительныеПараметры.Вставить("ВидКонтролирующегоОргана",
			ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС"));
		
		ДлительнаяОтправкаКлиент.ОповеститьОбУдачнойОтправке(ДополнительныеПараметры); // ФСС.
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавлениеЭлементовДерева(МассивДобавленныхЭлементов, ОбъектДерева, ИменаЭлементов)
	
	Если ТипЗнч(ИменаЭлементов) = Тип("Строка") Тогда
		ИменаЭлементов = СтрРазделить(ИменаЭлементов, ",");
	КонецЕсли;
	ЭлементыДерева = ОбъектДерева.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		ДобавляемыйЭлемент = Новый Структура;
		Для каждого ИмяЭлемента Из ИменаЭлементов Цикл
			ДобавляемыйЭлемент.Вставить(ИмяЭлемента, ЭлементДерева[ИмяЭлемента]);
		КонецЦикла;
		МассивДобавленныхЭлементов.Добавить(ДобавляемыйЭлемент);
		
		ДобавлениеЭлементовДерева(МассивДобавленныхЭлементов, ЭлементДерева, ИменаЭлементов);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатыОбработки(Организация)
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаЗапроса", 				Неопределено);
	Результат.Вставить("ДатаУспешногоОбновления", 	Неопределено);
	Результат.Вставить("ДатаОшибокОбновления", 		Неопределено);
	Результат.Вставить("ДатаИзменения", 			Неопределено);
	Результат.Вставить("ПротоколОшибок", 			Неопределено);
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	ЗапросОтправок = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОтправкиФСС.ДатаОтправки КАК ДатаОтправки,
		|	ОтправкиФСС.ДатаПолученияРезультата КАК ДатаПолученияРезультата
		|ИЗ
		|	Справочник.ОтправкиФСС КАК ОтправкиФСС
		|ГДЕ
		|	ОтправкиФСС.Организация = &Организация
		|	И ОтправкиФСС.ВидОтчета =
		|		ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.ЗапросСправочникаПолномочийМашиночитаемойДоверенностиФСС)
		|	И ОтправкиФСС.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Сдан)
		|	И ОтправкиФСС.ДатаОтправки <= &МаксимальнаяДатаОтправки
		|	И (ОтправкиФСС.ДатаПолученияРезультата ЕСТЬ NULL
		|		ИЛИ ОтправкиФСС.ДатаПолученияРезультата <= &МаксимальнаяДатаПолученияРезультата)
		|	И ОтправкиФСС.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтправкиФСС.ДатаОтправки УБЫВ");
	ЗапросОтправок.Параметры.Вставить("Организация", 							Организация);
	ЗапросОтправок.Параметры.Вставить("МаксимальнаяДатаОтправки", 				ДатаСеанса);
	ЗапросОтправок.Параметры.Вставить("МаксимальнаяДатаПолученияРезультата", 	ДатаСеанса);
	
	Выборка = ЗапросОтправок.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.ДатаУспешногоОбновления = Выборка.ДатаОтправки;
		ДатаПолученияРезультата = Выборка.ДатаПолученияРезультата;
		Если ЗначениеЗаполнено(ДатаПолученияРезультата) И ДатаПолученияРезультата > Результат.ДатаУспешногоОбновления Тогда
			Результат.ДатаУспешногоОбновления = ДатаПолученияРезультата;
		КонецЕсли;
	КонецЕсли;
	
	ЗапросОтправок = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОтправкиФСС.ДатаОтправки КАК ДатаОтправки,
		|	ОтправкиФСС.ДатаПолученияРезультата КАК ДатаПолученияРезультата,
		|	ОтправкиФСС.Протокол КАК Протокол
		|ИЗ
		|	Справочник.ОтправкиФСС КАК ОтправкиФСС
		|ГДЕ
		|	ОтправкиФСС.Организация = &Организация
		|	И ОтправкиФСС.ВидОтчета =
		|		ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.ЗапросСправочникаПолномочийМашиночитаемойДоверенностиФСС)
		|	И ОтправкиФСС.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.НеПринят)
		|	И ОтправкиФСС.ДатаОтправки <= &МаксимальнаяДатаОтправки
		|	И (ОтправкиФСС.ДатаПолученияРезультата ЕСТЬ NULL
		|		ИЛИ ОтправкиФСС.ДатаПолученияРезультата <= &МаксимальнаяДатаПолученияРезультата)"
		+ ?(ЗначениеЗаполнено(Результат.ДатаУспешногоОбновления), "
		|	И (ОтправкиФСС.ДатаОтправки >= &ДатаУспешногоОбновления
		|		ИЛИ ОтправкиФСС.ДатаПолученияРезультата ЕСТЬ НЕ NULL
		|		И ОтправкиФСС.ДатаПолученияРезультата >= &ДатаУспешногоПолученияРезультата)", "") + "
		|	И ОтправкиФСС.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтправкиФСС.ДатаОтправки УБЫВ");
	ЗапросОтправок.Параметры.Вставить("Организация", 							Организация);
	ЗапросОтправок.Параметры.Вставить("МаксимальнаяДатаОтправки", 				ДатаСеанса);
	ЗапросОтправок.Параметры.Вставить("МаксимальнаяДатаПолученияРезультата", 	ДатаСеанса);
	Если ЗначениеЗаполнено(Результат.ДатаУспешногоОбновления) Тогда
		ЗапросОтправок.Параметры.Вставить("ДатаУспешногоОбновления", 			Результат.ДатаУспешногоОбновления);
		ЗапросОтправок.Параметры.Вставить("ДатаУспешногоПолученияРезультата", 	Результат.ДатаУспешногоОбновления);
	КонецЕсли;
	
	Выборка = ЗапросОтправок.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.ДатаОшибокОбновления = Выборка.ДатаОтправки;
		ДатаПолученияРезультата = Выборка.ДатаПолученияРезультата;
		Если ЗначениеЗаполнено(ДатаПолученияРезультата) И ДатаПолученияРезультата > Результат.ДатаОшибокОбновления Тогда
			Результат.ДатаОшибокОбновления = ДатаПолученияРезультата;
		КонецЕсли;
		Результат.ПротоколОшибок = Выборка.Протокол.Получить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ДатаУспешногоОбновления)
		И Результат.ДатаУспешногоОбновления >= ДатаСеанса - ВремяУстареванияЗапросаПолномочий() Тогда
		
		Результат.ДатаЗапроса = Результат.ДатаУспешногоОбновления;
		
	ИначеЕсли ЗначениеЗаполнено(Результат.ДатаОшибокОбновления)
		И Результат.ДатаОшибокОбновления >= ДатаСеанса - ВремяУстареванияЗапросаПолномочий() Тогда
		
		Результат.ДатаЗапроса = Результат.ДатаОшибокОбновления;
		
	Иначе
		ЗапросОтправок = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ОтправкиФСС.ДатаОтправки КАК ДатаОтправки,
			|	ОтправкиФСС.ДатаПолученияРезультата КАК ДатаПолученияРезультата
			|ИЗ
			|	Справочник.ОтправкиФСС КАК ОтправкиФСС
			|ГДЕ
			|	ОтправкиФСС.Организация = &Организация
			|	И ОтправкиФСС.ВидОтчета =
			|		ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.ЗапросСправочникаПолномочийМашиночитаемойДоверенностиФСС)
			|	И ОтправкиФСС.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Отправлен)
			|	И ОтправкиФСС.ДатаОтправки <= &МаксимальнаяДатаОтправки
			|	И ОтправкиФСС.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ОтправкиФСС.ДатаОтправки УБЫВ");
		ЗапросОтправок.Параметры.Вставить("Организация", Организация);
		ЗапросОтправок.Параметры.Вставить("МаксимальнаяДатаОтправки", ДатаСеанса);
		
		Выборка = ЗапросОтправок.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.ДатаЗапроса = Выборка.ДатаОтправки;
		КонецЕсли;
	КонецЕсли;
	
	ИзмененияПолномочийПредставителяФСС = ХранилищеОбщихНастроек.Загрузить(
		"ДокументооборотСКонтролирующимиОрганами_ИзмененияПолномочийПредставителяФСС");
	Если ИзмененияПолномочийПредставителяФСС <> Неопределено Тогда
		ИзмененияПолномочийПредставителяФССОрганизации = ИзмененияПолномочийПредставителяФСС[Организация];
		Если ИзмененияПолномочийПредставителяФССОрганизации <> Неопределено Тогда
			Результат.ДатаИзменения = ИзмененияПолномочийПредставителяФССОрганизации.ДатаИзменения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
