&НаКлиенте
Перем КонтекстЭДОКлиент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
				Объект.Организация = Параметры.Организация;
				Объект.Доверитель = Параметры.Организация;
				ПодставитьРеквизитыДоверителя(ЭтаФорма);
				
			Иначе
				УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
				Элементы.Доверитель.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
				
				ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
				
				КонтекстЭДОСервер = КонтекстЭДОСервер();
				
				Если ЗначениеЗаполнено(ОргПоУмолчанию)
					И ?(КонтекстЭДОСервер = Неопределено, Истина,
					КонтекстЭДОСервер.СписокДопустимыхОрганизацийВОбъектахОбмена().Найти(ОргПоУмолчанию) <> Неопределено)
					И ((ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ УчетПоВсемОрганизациям)
					ИЛИ (НЕ ЗначениеЗаполнено(Объект.Организация) И УчетПоВсемОрганизациям
					И (ЗначениеЗаполнено(ОргПоУмолчанию)))) Тогда
					
					Объект.Организация = ОргПоУмолчанию;
					Объект.Доверитель = ОргПоУмолчанию;
					ПодставитьРеквизитыДоверителя(ЭтаФорма);
				КонецЕсли;
			КонецЕсли;
			
			КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
			КорневоеПолномочиеПредставителя = КонтекстЭДОСервер.НачальноеЗаполнениеПолномочийПредставителяФСС(0);
			
			СтрокиПолномочий = Объект.ПолномочияПредставителя.НайтиСтроки(Новый Структура("КодПолномочия",
				КорневоеПолномочиеПредставителя.Код));
			Если СтрокиПолномочий.Количество() = 0 Тогда
				СтрокаПолномочия = Объект.ПолномочияПредставителя.Добавить();
				СтрокаПолномочия.КодПолномочия 			= КорневоеПолномочиеПредставителя.Код;
				СтрокаПолномочия.НаименованиеПолномочия = КорневоеПолномочиеПредставителя.Наименование;
				СтрокаПолномочия.ПризнакПередоверия 	= Ложь;
				СтрокаПолномочия.ДатаНачала 			= КорневоеПолномочиеПредставителя.ДатаНачала;
				СтрокаПолномочия.ДатаОкончания 			= КорневоеПолномочиеПредставителя.ДатаОкончания;
			КонецЕсли;
		КонецЕсли;
		
		Объект.НомерДоверенности = Строка(Новый УникальныйИдентификатор);
		Объект.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.ПустаяСсылка();
	КонецЕсли;
	
	Заголовок = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(Заголовок, Истина, Истина);
	
	УведомлениеОтправлено = УведомлениеОтправлено(Объект.Ссылка);
	
	Инициализация();
	
	УправлениеФормой(ЭтаФорма);
	ПрорисоватьСтатус(ЭтаФорма);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииПослеПолученияКонтекстаЭДО", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_МашиночитаемыеДоверенностиФСС",, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьСтатусОтправкиУведомления();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Редактирование_ОтправкиФСС" И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Ссылка")
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		УведомлениеОтправлено = ПослеОтправкиНаСервере();
		
		// Перерисовка статуса отправки в форме Отчетность
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыОповещения.Вставить("Организация", Объект.Организация);
		Оповестить("Завершение отправки", ПараметрыОповещения, Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Доверитель) И ИмяСобытия = "Запись_Организации"
		И (Параметр = Объект.Доверитель ИЛИ Источник = Объект.Доверитель) Тогда
		
		ПодставитьРеквизитыДоверителя(ЭтаФорма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЛицоБезДовФЛ) И (ИмяСобытия = "Запись_Контрагенты"
		ИЛИ ИмяСобытия = "Запись_Контрагента" ИЛИ ИмяСобытия = "Запись_ФизическиеЛица"
		ИЛИ ИмяСобытия = "Запись_ВладельцаИлиБухгалтера")
		И (Параметр = Объект.ЛицоБезДовФЛ ИЛИ Источник = Объект.ЛицоБезДовФЛ) Тогда
		
		ПодставитьРеквизитыЛицаБезДоверенностиФЛ();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Представитель) И (ИмяСобытия = "Запись_Организации"
		ИЛИ ИмяСобытия = "Запись_Контрагенты" ИЛИ ИмяСобытия = "Запись_Контрагента"
		ИЛИ ИмяСобытия = "Запись_ФизическиеЛица" ИЛИ ИмяСобытия = "Запись_ВладельцаИлиБухгалтера")
		И (Параметр = Объект.Представитель ИЛИ Источник = Объект.Представитель) Тогда
		
		ПодставитьРеквизитыПредставителя();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДоверительПриИзменении(Элемент)
	
	ПодставитьРеквизитыДоверителя(ЭтаФорма);
	
	Если НЕ УведомлениеОтправлено И ТипЗнч(Объект.Доверитель) = Тип("Строка") Тогда
		Объект.ДоверительЮЛ_НаимОрг = Объект.Доверитель;
		Если Доверитель_ЮридическоеЛицо И НЕ Представитель_ЮридическоеЛицо И ПредставительЯвляетсяСотрудником Тогда
			Объект.ПредставительЮЛ_НаимОрг = Объект.Доверитель;
		КонецЕсли;
		ВвестиРеквизитыДоверителя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверительОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ПодписьЗагружена ИЛИ ТипОтправителя <> "1" Тогда
		Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ЭтоЭлектроннаяПодписьВМоделиСервиса = Неопределено;
	КонецЕсли;
	
	Если УведомлениеОтправлено Тогда
		Возврат;
	КонецЕсли;
	
	Доверитель_ЮридическоеЛицо 					= Истина;
	Объект.Доверитель_СтраховательФизлицо 		= Ложь;
	Объект.ДоверительЮЛ_ИностраннаяОрганизация 	= Ложь;
	Объект.ДоверительЮЛ_НаимОрг 				= "";
	Объект.ДоверительЮЛ_ИНН 					= "";
	Объект.ДоверительЮЛ_КПП 					= "";
	Объект.ДоверительЮЛ_ОГРН 					= "";
	Объект.ДоверительЮЛ_Адр 					= "";
	Объект.ДоверительЮЛ_АдрXML 					= "";
	
	Если Доверитель_ЮридическоеЛицо И НЕ Представитель_ЮридическоеЛицо И ПредставительЯвляетсяСотрудником Тогда
		Объект.ПредставительЮЛ_ИностраннаяОрганизация 	= Ложь;
		Объект.ПредставительЮЛ_НаимОрг 					= "";
		Объект.ПредставительЮЛ_ИНН 						= "";
		Объект.ПредставительЮЛ_КПП 						= "";
		Объект.ПредставительЮЛ_ОГРН 					= "";
		Объект.ПредставительЮЛ_Адр 						= "";
		Объект.ПредставительЮЛ_АдрXML 					= "";
	КонецЕсли;
	
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
	КоличествоСтрокФИО = СтрокиФИО.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокФИО Цикл
		Объект.ФИО.Удалить(СтрокиФИО[КоличествоСтрокФИО - НомерСКонца]);
	КонецЦикла;
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
	КоличествоСтрокФИО = СтрокиФИО.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокФИО Цикл
		Объект.ФИО.Удалить(СтрокиФИО[КоличествоСтрокФИО - НомерСКонца]);
	КонецЦикла;
	
	СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
	КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокУдостоверений Цикл
		Объект.УдостоверенияЛичности.Удалить(СтрокиУдостоверений[КоличествоСтрокУдостоверений - НомерСКонца]);
	КонецЦикла;
	СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
	КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокУдостоверений Цикл
		Объект.УдостоверенияЛичности.Удалить(СтрокиУдостоверений[КоличествоСтрокУдостоверений - НомерСКонца]);
	КонецЦикла;
	
	Объект.ДоверительФЛ_ДобровольноЗастрахованный 	= Ложь;
	Объект.ДоверительФЛ_РегистрационныйНомерФСС 	= "";
	Объект.ДоверительФЛ_КодПодчиненностиФСС 		= "";
	Объект.ДоверительФЛ_ИНН 						= "";
	Объект.ДоверительФЛ_ОГРН 						= "";
	Объект.ДоверительФЛ_СНИЛС 						= "";
	Объект.ДоверительФЛ_ДатаРождения 				= Неопределено;
	
	Объект.ЛицоБезДовФЛ 				= Неопределено;
	Объект.ЛицоБезДовФЛ_ИНН 			= "";
	Объект.ЛицоБезДовФЛ_СНИЛС 			= "";
	Объект.ЛицоБезДовФЛ_ДатаРождения 	= Неопределено;
	
	Объект.РежимыИспользования = "";
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыДоверителяНажатие(Элемент)
	
	ВвестиРеквизитыДоверителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицоБезДовФЛПриИзменении(Элемент)
	
	ПодставитьРеквизитыЛицаБезДоверенностиФЛ();
	
	Если НЕ УведомлениеОтправлено И ТипЗнч(Объект.ЛицоБезДовФЛ) = Тип("Строка") Тогда
		СтруктураФИО = ДокументооборотСКОВызовСервера.РазложитьФИО(Объект.ЛицоБезДовФЛ);
		
		СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
		КоличествоСтрокФИО = СтрокиФИО.Количество();
		Если КоличествоСтрокФИО = 0 Тогда
			СтрокаФИО = Объект.ФИО.Добавить();
			СтрокаФИО.Владелец = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук");
		Иначе
			СтрокаФИО = СтрокиФИО[0];
		КонецЕсли;
		СтрокаФИО.Фамилия 	= СокрЛП(СтруктураФИО.Фамилия);
		СтрокаФИО.Имя 		= СокрЛП(СтруктураФИО.Имя);
		СтрокаФИО.Отчество 	= СокрЛП(СтруктураФИО.Отчество);
		
		ВвестиРеквизитыЛицаБезДоверенностиФЛ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицоБезДовФЛОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
	КоличествоСтрокФИО = СтрокиФИО.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокФИО Цикл
		Объект.ФИО.Удалить(СтрокиФИО[КоличествоСтрокФИО - НомерСКонца]);
	КонецЦикла;
	
	Объект.ЛицоБезДовФЛ 				= Неопределено;
	Объект.ЛицоБезДовФЛ_ИНН 			= "";
	Объект.ЛицоБезДовФЛ_СНИЛС 			= "";
	Объект.ЛицоБезДовФЛ_ДатаРождения 	= Неопределено;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыЛицаБезДоверенностиФЛНажатие(Элемент)
	
	ВвестиРеквизитыЛицаБезДоверенностиФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставительПриИзменении(Элемент)
	
	ПодставитьРеквизитыПредставителя();
	
	Если НЕ УведомлениеОтправлено И ТипЗнч(Объект.Представитель) = Тип("Строка") Тогда
		Объект.ПредставительЮЛ_НаимОрг = Объект.Представитель;
		ВвестиРеквизитыПредставителя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставительОчистка(Элемент, СтандартнаяОбработка)
	
	Если ПодписьЗагружена И ТипОтправителя = "1" Тогда
		Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ЭтоЭлектроннаяПодписьВМоделиСервиса = Неопределено;
	КонецЕсли;
	
	Если УведомлениеОтправлено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПредставительЮЛ_ИностраннаяОрганизация 	= "";
	Объект.ПредставительЮЛ_НаимОрг 					= "";
	Объект.ПредставительЮЛ_ИНН 						= "";
	Объект.ПредставительЮЛ_КПП 						= "";
	Объект.ПредставительЮЛ_ОГРН 					= "";
	Объект.ПредставительЮЛ_Адр 						= "";
	Объект.ПредставительЮЛ_АдрXML 					= "";
	
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
	КоличествоСтрокФИО = СтрокиФИО.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокФИО Цикл
		Объект.ФИО.Удалить(СтрокиФИО[КоличествоСтрокФИО - НомерСКонца]);
	КонецЦикла;
	
	ПредставительФЛ_ФИО = "";
	
	СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
	КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокУдостоверений Цикл
		Объект.УдостоверенияЛичности.Удалить(СтрокиУдостоверений[КоличествоСтрокУдостоверений - НомерСКонца]);
	КонецЦикла;
	
	ПредставительФЛ_Удостоверение = "";
	
	Объект.ПредставительФЛ_ИНН 							= "";
	Объект.ПредставительФЛ_ОГРН 						= "";
	Объект.ПредставительФЛ_СНИЛС 						= "";
	Объект.ПредставительФЛ_ДатаРождения 				= Неопределено;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставительСертификатПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если ПредставительСертификат И ЗначениеЗаполнено(Объект.Представитель_ИдентификаторСертификата) Тогда
		Если ЭтоЭлектроннаяПодписьВМоделиСервиса = Неопределено Тогда
			ЭтоЭлектроннаяПодписьВМоделиСервиса =
				ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ЭтоЭлектроннаяПодписьВМоделиСервиса(Объект.Организация);
		КонецЕсли;
		
		ПараметрыОтображенияСертификатов = Новый Массив;
		
		ПараметрыОтображенияСертификата = Новый Структура;
		ПараметрыОтображенияСертификата.Вставить("ПолеВвода", 								Элементы.СертификатПредставителяПредставление);
		ПараметрыОтображенияСертификата.Вставить("Сертификат", 								Объект.Представитель_ИдентификаторСертификата);
		ПараметрыОтображенияСертификата.Вставить("ИмяРеквизитаПредставлениеСертификата", 	"СертификатПредставителяПредставление");
		
		ПараметрыОтображенияСертификатов.Добавить(ПараметрыОтображенияСертификата);
		
		КриптографияЭДКОКлиент.ОтобразитьПредставленияСертификатов(
			ПараметрыОтображенияСертификатов,
			ЭтотОбъект,
			ЭтоЭлектроннаяПодписьВМоделиСервиса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатПредставителяПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса = Неопределено Тогда
		ЭтоЭлектроннаяПодписьВМоделиСервиса =
			ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ЭтоЭлектроннаяПодписьВМоделиСервиса(Объект.Организация);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"СертификатПредставителяПредставлениеНачалоВыбораПослеВыбора", ЭтотОбъект, Новый Структура("Элемент", Элемент));
	
	КриптографияЭДКОКлиент.ВыбратьСертификат(
		Оповещение, ЭтоЭлектроннаяПодписьВМоделиСервиса, Объект.Представитель_ИдентификаторСертификата, "AddressBook");
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатПредставителяПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса = Неопределено Тогда
		ЭтоЭлектроннаяПодписьВМоделиСервиса =
			ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ЭтоЭлектроннаяПодписьВМоделиСервиса(Объект.Организация);
	КонецЕсли;
	
	Объект.Представитель_ИдентификаторСертификата = "";
	СертификатПредставителяПредставление = "";
	
	КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
		ЭтоЭлектроннаяПодписьВМоделиСервиса,
		Элемент,
		Объект.Представитель_ИдентификаторСертификата,
		ЭтотОбъект,
		"СертификатПредставителяПредставление");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатПредставителяПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса = Неопределено Тогда
		ЭтоЭлектроннаяПодписьВМоделиСервиса =
			ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ЭтоЭлектроннаяПодписьВМоделиСервиса(Объект.Организация);
	КонецЕсли;
	
	КриптографияЭДКОКлиент.ПоказатьСертификат(
		Новый Структура("Отпечаток, ЭтоЭлектроннаяПодписьВМоделиСервиса",
		Объект.Представитель_ИдентификаторСертификата, ЭтоЭлектроннаяПодписьВМоделиСервиса));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыПредставителяНажатие(Элемент)
	
	ВвестиРеквизитыПредставителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставительЯвляетсяСотрудникомПриИзменении(Элемент)
	
	Если Доверитель_ЮридическоеЛицо И НЕ Представитель_ЮридическоеЛицо И ПредставительЯвляетсяСотрудником Тогда
		Объект.ПредставительЮЛ_ИностраннаяОрганизация 	= Объект.ДоверительЮЛ_ИностраннаяОрганизация;
		Объект.ПредставительЮЛ_НаимОрг 					= Объект.ДоверительЮЛ_НаимОрг;
		Объект.ПредставительЮЛ_ИНН 						= Объект.ДоверительЮЛ_ИНН;
		Объект.ПредставительЮЛ_КПП 						= Объект.ДоверительЮЛ_КПП;
		Объект.ПредставительЮЛ_ОГРН 					= Объект.ДоверительЮЛ_ОГРН;
		Объект.ПредставительЮЛ_Адр 						= Объект.ДоверительЮЛ_Адр;
		Объект.ПредставительЮЛ_АдрXML 					= Объект.ДоверительЮЛ_АдрXML;
		
	Иначе
		Объект.ПредставительЮЛ_ИностраннаяОрганизация 	= Ложь;
		Объект.ПредставительЮЛ_НаимОрг 					= "";
		Объект.ПредставительЮЛ_ИНН 						= "";
		Объект.ПредставительЮЛ_КПП 						= "";
		Объект.ПредставительЮЛ_ОГРН 					= "";
		Объект.ПредставительЮЛ_Адр 						= "";
		Объект.ПредставительЮЛ_АдрXML 					= "";
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставительФЛ_ФИОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ФормаВводаФИО = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВводаФИО");
	
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
	
	ФормаВводаФИО.Фамилия 	= ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Фамилия, "");
	ФормаВводаФИО.Имя 		= ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Имя, "");
	ФормаВводаФИО.Отчество 	= ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Отчество, "");
	
	ФормаВводаФИО.ОписаниеОповещенияОЗакрытии =
		Новый ОписаниеОповещения("ПредставительФЛ_ФИОНачалоВыбораПослеВвода", ЭтотОбъект);
	ФормаВводаФИО.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВводаФИО.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставительФЛ_ФИООчистка(Элемент, СтандартнаяОбработка)
	
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
	
	КоличествоСтрокФИО = СтрокиФИО.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокФИО Цикл
		Объект.ФИО.Удалить(СтрокиФИО[КоличествоСтрокФИО - НомерСКонца]);
	КонецЦикла;
	
	ПредставительФЛ_ФИО = "";
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Представитель_ФизлицоПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставительФЛ_УдостоверениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДокументВид",
		?(СтрокиУдостоверений.Количество() <> 0, СтрокиУдостоверений[0].ВидДок, ""));
	СтруктураДанных.Вставить("ДокументСерия",
		?(СтрокиУдостоверений.Количество() <> 0, СтрокиУдостоверений[0].СерДок, ""));
	СтруктураДанных.Вставить("ДокументНомер",
		?(СтрокиУдостоверений.Количество() <> 0, СтрокиУдостоверений[0].НомДок, ""));
	СтруктураДанных.Вставить("ДокументДатаВыдачи",
		?(СтрокиУдостоверений.Количество() <> 0, СтрокиУдостоверений[0].ДатаДок, ""));
	СтруктураДанных.Вставить("ДокументКемВыдан",
		?(СтрокиУдостоверений.Количество() <> 0, СтрокиУдостоверений[0].ВыдДок, ""));
	СтруктураДанных.Вставить("ДокументКодПодразделения",
		?(СтрокиУдостоверений.Количество() <> 0, СтрокиУдостоверений[0].КодВыдДок, ""));

	ОписаниеОповещения = Новый ОписаниеОповещения("ПредставительФЛ_УдостоверениеНачалоВыбораПослеВвода", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.МашиночитаемыеДоверенностиФСС.Форма.ФормаВводаУдостоверения",
		Новый Структура("СтруктураДанных", СтруктураДанных),
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставительФЛ_УдостоверениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
	
	КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокУдостоверений Цикл
		Объект.УдостоверенияЛичности.Удалить(СтрокиУдостоверений[КоличествоСтрокУдостоверений - НомерСКонца]);
	КонецЦикла;
	
	ПредставительФЛ_Удостоверение = "";
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОтправителяПриИзменении(Элемент)
	
	Если ТипОтправителя = "1" Тогда
		Объект.Организация = ?(ТипЗнч(Объект.Представитель) = Тип("СправочникСсылка.Организации"),
			Объект.Представитель, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	Иначе
		Объект.Организация = ?(ТипЗнч(Объект.Доверитель) = Тип("СправочникСсылка.Организации"),
			Объект.Доверитель, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	КонецЕсли;
	ЭтоЭлектроннаяПодписьВМоделиСервиса = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПолномочияПредставителяНажатие(Элемент)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Организация", Объект.Организация);
	СтруктураДанных.Вставить("ПолномочияПредставителя", Новый Массив);
	Для каждого ПолномочиеПредставителя Из Объект.ПолномочияПредставителя Цикл
		СведенияПолномочия = Новый Структура;
		СведенияПолномочия.Вставить("КодПолномочия", 			ПолномочиеПредставителя.КодПолномочия);
		СведенияПолномочия.Вставить("НаименованиеПолномочия", 	ПолномочиеПредставителя.НаименованиеПолномочия);
		СведенияПолномочия.Вставить("ПризнакПередоверия", 		ПолномочиеПредставителя.ПризнакПередоверия);
		СведенияПолномочия.Вставить("ДатаНачала", 				ПолномочиеПредставителя.ДатаНачала);
		СведенияПолномочия.Вставить("ДатаОкончания", 			ПолномочиеПредставителя.ДатаОкончания);
		СтруктураДанных.ПолномочияПредставителя.Добавить(СведенияПолномочия);
	КонецЦикла;
	СтруктураДанных.Вставить("ТолькоПросмотрФормы", УведомлениеОтправлено ИЛИ ПодписьЗагружена);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияПолномочияПредставителяНажатиеПослеВвода", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.МашиночитаемыеДоверенностиФСС.Форма.ФормаВводаПолномочий",
		Новый Структура("СтруктураДанных", СтруктураДанных),
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерРодительскойДоверенностиПриИзменении(Элемент)
	
	Объект.РодительскаяДоверенность = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерРодительскойДоверенности)
		И (НЕ УведомлениеОтправлено ИЛИ ТипОтправителя <> "1") Тогда
		Объект.Организация = Объект.Доверитель;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерРодительскойДоверенностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НомерРодительскойДоверенностиНачалоВыбораПослеВыбора", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.МашиночитаемыеДоверенностиФСС.ФормаВыбора",
		Новый Структура("ТекущаяСтрока", Объект.РодительскаяДоверенность),
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерРодительскойДоверенностиОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.РодительскаяДоверенность = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерРодительскойДоверенности)
		И (НЕ УведомлениеОтправлено ИЛИ ТипОтправителя <> "1") Тогда
		Объект.Организация = Объект.Доверитель;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерРодительскойДоверенностиОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.РодительскаяДоверенность) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Объект.РодительскаяДоверенность);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отправить(Команда)
	
	ОчиститьСообщения();
	ДокументооборотСКОКлиент.ЗапоминаниеОшибок("Сброс");
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ПодписьЗагружена И ТипОтправителя = "1" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите представителя из справочника ""Организации""';
															|en = 'Выберите представителя из справочника ""Организации""'"),,
				"Представитель");
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите доверителя из справочника ""Организации""';
															|en = 'Выберите доверителя из справочника ""Организации""'"),,
				"Доверитель");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПослеПодтвержденияПриПредупреждении", ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.ДатаОкончания)
		И Объект.ДатаОкончания < НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Дата окончания действия доверенности меньше текущей, продолжить отправку?';
				|en = 'Дата окончания действия доверенности меньше текущей, продолжить отправку?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отозвать(Команда)
	
	КонтекстЭДОКлиент.ОтозватьМашиночитаемуюДоверенностьФСС(,
		Объект.Ссылка,
		Объект.Организация,
		Объект.НомерДоверенности);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПодписьЗагружена Тогда
		РезультатыПроверки = ДокументооборотСКОВызовСервера.ПроверитьМЧДФСС(Объект);
		
		Если РезультатыПроверки.Количество() <> 0 Тогда
			Для каждого РезультатПроверки Из РезультатыПроверки Цикл
				ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПроверки.ТекстОшибки,,
					РезультатПроверки.Поле);
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодтвержденияВыгрузкиПодписи", ЭтотОбъект);
	Если ПодписьЗагружена Тогда
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Будут выгружены файлы машиночитаемой доверенности и подписи доверителя, продолжить?';
				|en = 'Будут выгружены файлы машиночитаемой доверенности и подписи доверителя, продолжить?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Да);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПослеПодтвержденияВыгрузкиПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДокументооборотСКОКлиент.ПроверитьИЗаписать(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("ВозвращатьАдресВоВременномХранилище", 	Истина);
	ПараметрыВозврата.Вставить("ВозвращатьИмяФайлаСРасширением", 		Истина);
	ПараметрыВозврата.Вставить("ВозвращатьПриложеннуюПодпись", 			Истина);
	РезультатВыгрузки = ДокументооборотСКОВызовСервера.ВыгрузитьМЧДФСС(
		Объект.Ссылка,
		Новый УникальныйИдентификатор,
		Ложь,
		ПараметрыВозврата);
	
	Если ЗначениеЗаполнено(РезультатВыгрузки) Тогда
		ОперацииСФайламиЭДКОКлиент.СохранитьФайлы(РезультатВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если (Модифицированность ИЛИ Параметры.Ключ.Пустая()) И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьПослеЗагрузки", ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ДопустимыеТипыФайлов", 	"xml;");
	ДополнительныеПараметры.Вставить("ВозвращатьРазмер", 		Истина);
	ДополнительныеПараметры.Вставить("МножественныйВыбор", 		Ложь);
	
	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлы(
		ОписаниеОповещения, 
		Новый УникальныйИдентификатор,
		НСтр("ru = 'Выберите xml-файл';
			|en = 'Выберите xml-файл'"),
		ДополнительныеПараметры);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФСС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФСС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФСС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСС");
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru = 'Вы уверены, что уведомление уже зарегистрировано?';
													|en = 'Вы уверены, что уведомление уже зарегистрировано?'"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура Инициализация()
	
	ПоддерживаетсяОтправкаПредставителем = Ложь;
	
	Если ТипЗнч(Объект.Доверитель) <> Тип("Строка") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
		Элементы.Доверитель.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Если ТипЗнч(Объект.ЛицоБезДовФЛ) <> Тип("Строка") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		Элементы.ЛицоБезДовФЛ.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Если ТипЗнч(Объект.Представитель) <> Тип("Строка") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		Элементы.Представитель.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Доверитель_ЮридическоеЛицо = НЕ ЗначениеЗаполнено(Объект.Доверитель)
		ИЛИ ДокументооборотСКОВызовСервера.ЭтоЮридическоеЛицо(Объект.Доверитель);
	
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ));
	ПредставительФЛ_ФИО = ?(СтрокиФИО.Количество() <> 0,
		ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(СтрокиФИО[0]), "");
	
	Представитель_ЮридическоеЛицо = ДокументооборотСКОВызовСервера.ЭтоЮридическоеЛицо(Объект.Представитель);
	
	ПредставительЯвляетсяСотрудником =
		ДокументооборотСФССКлиентСервер.НастройкиМЧДФСС().ПредставительСотрудникСУказаниемОрганизации
		И (НЕ ЗначениеЗаполнено(Объект.Представитель)
		ИЛИ (ЗначениеЗаполнено(Объект.Представитель) И НЕ Представитель_ЮридическоеЛицо
		И (ЗначениеЗаполнено(Объект.ПредставительЮЛ_НаимОрг) ИЛИ ЗначениеЗаполнено(Объект.ПредставительЮЛ_ИНН)
		ИЛИ ЗначениеЗаполнено(Объект.ПредставительЮЛ_КПП) ИЛИ ЗначениеЗаполнено(Объект.ПредставительЮЛ_ОГРН))
		И Объект.Доверитель <> Объект.Представитель
		И Объект.ДоверительЮЛ_ИностраннаяОрганизация = Объект.ПредставительЮЛ_ИностраннаяОрганизация
		И Объект.ДоверительЮЛ_НаимОрг = Объект.ПредставительЮЛ_НаимОрг И Объект.ДоверительЮЛ_ИНН = Объект.ПредставительЮЛ_ИНН
		И Объект.ДоверительЮЛ_КПП = Объект.ПредставительЮЛ_КПП И Объект.ДоверительЮЛ_ОГРН = Объект.ПредставительЮЛ_ОГРН
		И Объект.ДоверительЮЛ_Адр = Объект.ПредставительЮЛ_Адр И Объект.ДоверительЮЛ_АдрXML = Объект.ПредставительЮЛ_АдрXML));
	
	Если Представитель_ЮридическоеЛицо И НЕ Объект.ПредставительЮЛ_ИностраннаяОрганизация
		И НЕ ЗначениеЗаполнено(Объект.ПредставительЮЛ_НаимОрг) И НЕ ЗначениеЗаполнено(Объект.ПредставительЮЛ_ИНН)
		И НЕ ЗначениеЗаполнено(Объект.ПредставительЮЛ_КПП) И НЕ ЗначениеЗаполнено(Объект.ПредставительЮЛ_ОГРН)
		И НЕ ЗначениеЗаполнено(Объект.ПредставительЮЛ_Адр) И НЕ ЗначениеЗаполнено(Объект.ПредставительЮЛ_АдрXML)
		И НЕ ЗначениеЗаполнено(ПредставительФЛ_ФИО) И НЕ ЗначениеЗаполнено(Объект.ПредставительФЛ_ОГРН)
		И НЕ Объект.Представитель_Физлицо Тогда
		
		Объект.Представитель_Физлицо = Истина;
	КонецЕсли;
	
	СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
		Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ));
	ПредставительФЛ_Удостоверение = ?(СтрокиУдостоверений.Количество() <> 0,
		ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеУдостоверение(СтрокиУдостоверений[0]), "");
	
	ПредставительСертификат = ЗначениеЗаполнено(Объект.Представитель_ИдентификаторСертификата);
	Если ЗначениеЗаполнено(Объект.Представитель_ИдентификаторСертификата) Тогда
		ЭтоЭлектроннаяПодписьВМоделиСервиса =
			ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ЭтоЭлектроннаяПодписьВМоделиСервиса(Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ИмяФайлаВыгрузки) Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "ФайлВырузки, ЭлектроннаяПодпись");
		ПодписьЗагружена = (РеквизитыОбъекта.ФайлВырузки.Получить() <> Неопределено
			И РеквизитыОбъекта.ЭлектроннаяПодпись.Получить() <> Неопределено);
	Иначе
		ПодписьЗагружена = Ложь;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ТипОтправителя = ?(Объект.Организация <> Объект.Доверитель И Объект.Организация = Объект.Представитель
			И ПоддерживаетсяОтправкаПредставителем, "1", "0");
	Иначе
		ТипОтправителя = ?(ПодписьЗагружена, "1", "0");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрорисоватьСтатус(Форма)
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(
		Форма.Объект.Ссылка,
		Форма.Объект.Организация,
		"ФСС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(
		Форма,
		ПараметрыПрорисовкиПанелиОтправки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ИспользоватьДоверителяФизическоеЛицоПриПередоверии = Ложь;
	
	Форма.Элементы.Отправить.Видимость = НЕ Форма.УведомлениеОтправлено;
	Форма.Элементы.Записать.ТолькоВоВсехДействиях = Форма.УведомлениеОтправлено;
	Форма.Элементы.Загрузить.Видимость = НЕ Форма.УведомлениеОтправлено;
	
	Форма.Элементы.ГруппаЛицоБезДоверенностиФЛ.Видимость = Форма.Доверитель_ЮридическоеЛицо
		И (НЕ Форма.Объект.Доверитель_СтраховательФизлицо И НЕ Форма.Объект.ДоверительЮЛ_ИностраннаяОрганизация
			ИЛИ Форма.Объект.Доверитель_СтраховательФизлицо И ЗначениеЗаполнено(Форма.Объект.НомерРодительскойДоверенности)
				И ИспользоватьДоверителяФизическоеЛицоПриПередоверии)
		ИЛИ НЕ Форма.Доверитель_ЮридическоеЛицо И ЗначениеЗаполнено(Форма.Объект.НомерРодительскойДоверенности);
	
	ЗаданаОрганизацияПредставителя = Форма.Представитель_ЮридическоеЛицо
		И (Форма.Объект.ПредставительЮЛ_ИностраннаяОрганизация ИЛИ ЗначениеЗаполнено(Форма.Объект.ПредставительЮЛ_НаимОрг)
		ИЛИ ЗначениеЗаполнено(Форма.Объект.ПредставительЮЛ_ИНН) ИЛИ ЗначениеЗаполнено(Форма.Объект.ПредставительЮЛ_КПП)
		ИЛИ ЗначениеЗаполнено(Форма.Объект.ПредставительЮЛ_ОГРН) ИЛИ ЗначениеЗаполнено(Форма.Объект.ПредставительЮЛ_Адр)
		ИЛИ ЗначениеЗаполнено(Форма.Объект.ПредставительЮЛ_АдрXML));
	
	Форма.Элементы.ДекорацияРеквизитыПредставителя.Доступность = Форма.Представитель_ЮридическоеЛицо
		И НЕ Форма.ПредставительСертификат;
	Форма.Элементы.ПредставительЯвляетсяСотрудником.Видимость =
		ДокументооборотСФССКлиентСервер.НастройкиМЧДФСС().ПредставительСотрудникСУказаниемОрганизации
		И Форма.Доверитель_ЮридическоеЛицо И НЕ Форма.Представитель_ЮридическоеЛицо И НЕ Форма.ПредставительСертификат;
	Форма.Элементы.Представитель_Физлицо.Видимость = НЕ Форма.ПредставительЯвляетсяСотрудником;
	Форма.Элементы.ГруппаПредставительФИО.Видимость = (НЕ Форма.Представитель_ЮридическоеЛицо
		ИЛИ НЕ ЗаданаОрганизацияПредставителя) И НЕ Форма.ПредставительСертификат;
	Форма.Элементы.ГруппаПредставительУдостоверение.Видимость = (НЕ Форма.Представитель_ЮридическоеЛицо
		ИЛИ НЕ ЗаданаОрганизацияПредставителя) И НЕ Форма.ПредставительСертификат;
	Форма.Элементы.ГруппаПредставительИНН.Видимость = (НЕ Форма.Представитель_ЮридическоеЛицо
		ИЛИ НЕ ЗаданаОрганизацияПредставителя) И НЕ Форма.ПредставительСертификат;
	Форма.Элементы.ГруппаПредставительОГРН.Видимость = (НЕ Форма.Представитель_ЮридическоеЛицо
		ИЛИ НЕ ЗаданаОрганизацияПредставителя) И НЕ Форма.ПредставительСертификат;
	Форма.Элементы.ГруппаПредставительДатаРождения.Видимость = (НЕ Форма.Представитель_ЮридическоеЛицо
		ИЛИ НЕ ЗаданаОрганизацияПредставителя) И НЕ Форма.ПредставительСертификат;
	Форма.Элементы.ГруппаПредставительСертификат.Видимость = Форма.ПредставительСертификат;
	
	Форма.Элементы.ДекорацияПредставительОГРН.Заголовок = ?(Форма.Объект.Представитель_Физлицо, НСтр("ru = 'СНИЛС';
																									|en = 'СНИЛС'"),
		НСтр("ru = 'ОГРНИП';
			|en = 'ОГРНИП'")) + ":";
	Форма.Элементы.ГруппаПредставительОГРНПоле.Видимость = НЕ Форма.Объект.Представитель_Физлицо;
	Форма.Элементы.ГруппаПредставительСНИЛС.ГоризонтальноеПоложениеПодчиненных = ?(Форма.Объект.Представитель_Физлицо,
		ГоризонтальноеПоложениеЭлемента.Авто, ГоризонтальноеПоложениеЭлемента.Право);
	Форма.Элементы.ПредставительФЛ_СНИЛС.ПоложениеЗаголовка = ?(Форма.Объект.Представитель_Физлицо,
		ПоложениеЗаголовкаЭлементаФормы.Нет, ПоложениеЗаголовкаЭлементаФормы.Лево);
	
	Если Форма.Объект.ПолномочияПредставителя.Количество() = 0 Тогда
		Форма.Элементы.ДекорацияПолномочияПредставителя.Заголовок = НСтр("ru = 'Не заданы';
																		|en = 'Не заданы'");
		Форма.Элементы.ДекорацияПолномочияПредставителя.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		ПредставленияВидов = "";
		Для каждого ПолномочиеПредставителя Из Форма.Объект.ПолномочияПредставителя Цикл
			ПредставленияВидов = ПредставленияВидов + ?(ЗначениеЗаполнено(ПредставленияВидов), ". ", "")
				+ ПолномочиеПредставителя.НаименованиеПолномочия + ?(ПолномочиеПредставителя.ПризнакПередоверия,
				" (" + НСтр("ru = 'с передоверием';
							|en = 'с передоверием'") + ")", "");
		КонецЦикла;
		Форма.Элементы.ДекорацияПолномочияПредставителя.Заголовок = ПредставленияВидов;
		Форма.Элементы.ДекорацияПолномочияПредставителя.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
	Форма.Элементы.ГруппаТипОтправителя.Видимость 			= Форма.ПодписьЗагружена;
	Форма.Элементы.ДекорацияОтступТипОтправителя.Видимость 	= Форма.ПодписьЗагружена;
	
	Форма.Элементы.ГруппаПодписант.Видимость 				= ЗначениеЗаполнено(Форма.Объект.НомерРодительскойДоверенности);
	
	ТолькоПросмотрФормы = Форма.УведомлениеОтправлено ИЛИ Форма.ПодписьЗагружена;
	
	Форма.Элементы.ДекорацияРеквизитыПредставителя.Видимость = Форма.Представитель_ЮридическоеЛицо
		И НЕ Форма.ПредставительСертификат ИЛИ НЕ ТолькоПросмотрФормы;
	Форма.Элементы.ПредставительСертификат.Видимость = Форма.ПредставительСертификат ИЛИ НЕ ТолькоПросмотрФормы;
	
	Форма.Элементы.НомерДоверенности.ТолькоПросмотр 					= ТолькоПросмотрФормы;
	Форма.Элементы.ДатаВыдачи.ТолькоПросмотр 							= ТолькоПросмотрФормы;
	Форма.Элементы.ДатаОкончания.ТолькоПросмотр 						= ТолькоПросмотрФормы;
	Форма.Элементы.ЛицоБезДовФЛ.ТолькоПросмотр 							= ТолькоПросмотрФормы;
	Форма.Элементы.ПредставительЯвляетсяСотрудником.ТолькоПросмотр 		= ТолькоПросмотрФормы;
	Форма.Элементы.ПредставительСертификат.ТолькоПросмотр 				= ТолькоПросмотрФормы;
	Форма.Элементы.ПредставительФЛ_ФИО.ТолькоПросмотр 					= ТолькоПросмотрФормы;
	Форма.Элементы.Представитель_Физлицо.ТолькоПросмотр 				= ТолькоПросмотрФормы;
	Форма.Элементы.ПредставительФЛ_Удостоверение.ТолькоПросмотр 		= ТолькоПросмотрФормы;
	Форма.Элементы.ПредставительФЛ_ИНН.ТолькоПросмотр 					= ТолькоПросмотрФормы;
	Форма.Элементы.ПредставительФЛ_ОГРН.ТолькоПросмотр 					= ТолькоПросмотрФормы;
	Форма.Элементы.ПредставительФЛ_СНИЛС.ТолькоПросмотр 				= ТолькоПросмотрФормы;
	Форма.Элементы.ПредставительФЛ_ДатаРождения.ТолькоПросмотр 			= ТолькоПросмотрФормы;
	Форма.Элементы.СертификатПредставителяПредставление.ТолькоПросмотр 	= ТолькоПросмотрФормы;
	Форма.Элементы.ТипОтправителя.ТолькоПросмотр 						= Форма.УведомлениеОтправлено;
	Форма.Элементы.НомерРодительскойДоверенности.ТолькоПросмотр 		= ТолькоПросмотрФормы;
	Форма.Элементы.Примечание.ТолькоПросмотр 							= ТолькоПросмотрФормы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодставитьРеквизитыДоверителя(Форма)
	
	Если НЕ Форма.УведомлениеОтправлено И ТипЗнч(Форма.Объект.Доверитель) = Тип("СправочникСсылка.Организации")
		И Форма.Объект.Доверитель <> ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.НомерРодительскойДоверенности)
			И (НЕ Форма.ПодписьЗагружена ИЛИ Форма.ТипОтправителя <> "1") Тогда
			
			Форма.Объект.Организация = Форма.Объект.Доверитель;
			Форма.ЭтоЭлектроннаяПодписьВМоделиСервиса = Неопределено;
		КонецЕсли;
		
		СвойстваОрганизации = ДокументооборотСКОВызовСервера.ПолучитьСвойстваОрганизации(Форма.Объект.Доверитель);
		
		Форма.Доверитель_ЮридическоеЛицо = СвойстваОрганизации.ЭтоЮридическоеЛицо;
		Форма.Объект.Доверитель_СтраховательФизлицо = Ложь;
		Форма.Объект.ДоверительЮЛ_ИностраннаяОрганизация = НЕ СвойстваОрганизации.ЭтоРоссийскаяОрганизация;
		
		Форма.Объект.ДоверительЮЛ_НаимОрг = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			?(НЕ СвойстваОрганизации.ЭтоРоссийскаяОрганизация И ЗначениеЗаполнено(СвойстваОрганизации.НаимИОПол),
			СвойстваОрганизации.НаимИОПол, СвойстваОрганизации.НаимЮЛПол), "");
		Форма.Объект.ДоверительЮЛ_ИНН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ИННЮЛ, "");
		Форма.Объект.ДоверительЮЛ_КПП = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.КППЮЛ, "");
		Форма.Объект.ДоверительЮЛ_ОГРН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И СвойстваОрганизации.ЭтоРоссийскаяОрганизация, СвойстваОрганизации.ОГРН, "");
		
		Если СвойстваОрганизации.ЭтоЮридическоеЛицо Тогда
			Если СвойстваОрганизации.ЭтоРоссийскаяОрганизация Тогда
				АдресСтруктурой = Новый Структура("Строка, XML, JSON, Представление, Значение",
					СвойстваОрганизации.АдрЮР, СвойстваОрганизации.АдрЮР_XML, СвойстваОрганизации.АдрЮР_JSON,
					СвойстваОрганизации.АдрЮР, СвойстваОрганизации.АдрЮР_XML);
			Иначе
				АдресСтруктурой = Новый Структура("Строка, XML, JSON, Представление, Значение",
					СвойстваОрганизации.АдрИО, СвойстваОрганизации.АдрИО_XML, СвойстваОрганизации.АдрИО_JSON,
					СвойстваОрганизации.АдрИО, СвойстваОрганизации.АдрИО_XML);
			КонецЕсли;
			ДокументооборотСКОВызовСервера.ПреобразоватьАдресВФорматXML(АдресСтруктурой,
				ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
			Если ЗначениеЗаполнено(АдресСтруктурой.XML) Тогда
				Форма.Объект.ДоверительЮЛ_Адр = ДокументооборотСКОВызовСервера.ПредставлениеКонтактнойИнформации(
					АдресСтруктурой.XML);
			Иначе
				Форма.Объект.ДоверительЮЛ_Адр = АдресСтруктурой.Представление;
			КонецЕсли;
			Форма.Объект.ДоверительЮЛ_АдрXML = АдресСтруктурой.XML;
		Иначе
			Форма.Объект.ДоверительЮЛ_Адр = "";
			Форма.Объект.ДоверительЮЛ_АдрXML = "";
		КонецЕсли;
		
		Если Форма.Доверитель_ЮридическоеЛицо И НЕ Форма.Представитель_ЮридическоеЛицо
			И Форма.ПредставительЯвляетсяСотрудником Тогда
			
			Форма.Объект.ПредставительЮЛ_ИностраннаяОрганизация = Форма.Объект.ДоверительЮЛ_ИностраннаяОрганизация;
			Форма.Объект.ПредставительЮЛ_НаимОрг 				= Форма.Объект.ДоверительЮЛ_НаимОрг;
			Форма.Объект.ПредставительЮЛ_ИНН 					= Форма.Объект.ДоверительЮЛ_ИНН;
			Форма.Объект.ПредставительЮЛ_КПП 					= Форма.Объект.ДоверительЮЛ_КПП;
			Форма.Объект.ПредставительЮЛ_ОГРН 					= Форма.Объект.ДоверительЮЛ_ОГРН;
			Форма.Объект.ПредставительЮЛ_Адр 					= Форма.Объект.ДоверительЮЛ_Адр;
			Форма.Объект.ПредставительЮЛ_АдрXML 				= Форма.Объект.ДоверительЮЛ_АдрXML;
		КонецЕсли;
		
		СубъектДоверенности = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук"),
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ"));
		СтрокиФИО = Форма.Объект.ФИО.НайтиСтроки(Новый Структура("Владелец", СубъектДоверенности));
		КоличествоСтрокФИО = СтрокиФИО.Количество();
		Если КоличествоСтрокФИО = 0 Тогда
			СтрокаФИО = Форма.Объект.ФИО.Добавить();
			СтрокаФИО.Владелец = СубъектДоверенности;
		Иначе
			СтрокаФИО = СтрокиФИО[0];
		КонецЕсли;
		СтрокаФИО.Фамилия = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			СвойстваОрганизации.ФамилияРук, СвойстваОрганизации.ФамилияИП);
		СтрокаФИО.Имя = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			СвойстваОрганизации.ИмяРук, СвойстваОрганизации.ИмяИП);
		СтрокаФИО.Отчество = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			СвойстваОрганизации.ОтчествоРук, СвойстваОрганизации.ОтчествоИП);
		
		Форма.Объект.ДоверительФЛ_ДобровольноЗастрахованный = Ложь;
		
		СтрокиУдостоверений = Форма.Объект.УдостоверенияЛичности.НайтиСтроки(
			Новый Структура("Владелец", СубъектДоверенности));
		КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
		Если КоличествоСтрокУдостоверений = 0 Тогда
			Если НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо Тогда
				СтрокаУдостоверения = Форма.Объект.УдостоверенияЛичности.Добавить();
				СтрокаУдостоверения.Владелец = СубъектДоверенности;
			КонецЕсли;
		Иначе
			Если НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо Тогда
				СтрокаУдостоверения = СтрокиУдостоверений[0];
			Иначе
				Для НомерСКонца = 1 По КоличествоСтрокУдостоверений Цикл
					Форма.Объект.УдостоверенияЛичности.Удалить(СтрокиУдостоверений[КоличествоСтрокУдостоверений - НомерСКонца]);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо Тогда
			СтрокаУдостоверения.ВидДок = СвойстваОрганизации.ВидУдостоверения;
			СтрокаУдостоверения.СерДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.СерияУдЛичнРук, СвойстваОрганизации.СерияУдЛичн);
			СтрокаУдостоверения.НомДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.НомерУдЛичнРук, СвойстваОрганизации.НомерУдЛичн);
			СтрокаУдостоверения.ДатаДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.ДатаУдЛичнРук, СвойстваОрганизации.ДатаУдЛичн);
			СтрокаУдостоверения.ВыдДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.ОрганВыданУдЛичнРук, СвойстваОрганизации.ОрганВыданУдЛичн);
			СтрокаУдостоверения.КодВыдДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.КодПодрУдЛичнРук, СвойстваОрганизации.КодПодрУдЛичн);
		КонецЕсли;
		
		Форма.Объект.ДоверительФЛ_РегистрационныйНомерФСС = ?(НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо,
			?(СвойстваОрганизации.Свойство("РегистрационныйНомерФСС"), СвойстваОрганизации.РегистрационныйНомерФСС, ""), "");
		Форма.Объект.ДоверительФЛ_ИНН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И НЕ СвойстваОрганизации.ЭтоРоссийскаяОрганизация, СвойстваОрганизации.ИННРук,
			?(НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ИННФЛ, ""));
		Форма.Объект.ДоверительФЛ_ОГРН = ?(НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ОГРН, "");
		Форма.Объект.ДоверительФЛ_СНИЛС = ?(НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.СНИЛС, "");
		Форма.Объект.ДоверительФЛ_ДатаРождения = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И НЕ СвойстваОрганизации.ЭтоРоссийскаяОрганизация, СвойстваОрганизации.ДатаРождРук,
			?(НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ДатаРожд, Неопределено));
		
		Форма.Объект.ЛицоБезДовФЛ = СвойстваОрганизации.Руководитель;
		Форма.Объект.ЛицоБезДовФЛ_ИНН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И СвойстваОрганизации.ЭтоРоссийскаяОрганизация, СвойстваОрганизации.ИННРук, "");
		Форма.Объект.ЛицоБезДовФЛ_СНИЛС = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И СвойстваОрганизации.ЭтоРоссийскаяОрганизация, СвойстваОрганизации.СНИЛС, "");
		Форма.Объект.ЛицоБезДовФЛ_ДатаРождения = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И СвойстваОрганизации.ЭтоРоссийскаяОрганизация, СвойстваОрганизации.ДатаРождРук, Неопределено);
		
		СтрокиФИО = Форма.Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
		КоличествоСтрокФИО = СтрокиФИО.Количество();
		СтрокиУдостоверений = Форма.Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
		КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
		
		Форма.Объект.РежимыИспользования = "";
		
		Форма.Модифицированность = Истина;
		
		УправлениеФормой(Форма);
		
	ИначеЕсли НЕ Форма.УведомлениеОтправлено ИЛИ Форма.ТипОтправителя <> "1" Тогда
		Форма.Объект.Организация = ?(ТипЗнч(Форма.Объект.Доверитель) = Тип("СправочникСсылка.Организации"),
			Форма.Объект.Доверитель, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
		Форма.ЭтоЭлектроннаяПодписьВМоделиСервиса = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРеквизитыДоверителя()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Доверитель_ЮридическоеЛицо", Доверитель_ЮридическоеЛицо);
	СтруктураДанных.Вставить("Доверитель_СтраховательФизлицо", Объект.Доверитель_СтраховательФизлицо);
	СтруктураДанных.Вставить("ДоверительЮЛ_РоссийскаяОрганизация", НЕ Объект.ДоверительЮЛ_ИностраннаяОрганизация);
	СтруктураДанных.Вставить("ДоверительЮЛ_НаимОрг", Объект.ДоверительЮЛ_НаимОрг);
	СтруктураДанных.Вставить("ДоверительЮЛ_ИНН", Объект.ДоверительЮЛ_ИНН);
	СтруктураДанных.Вставить("ДоверительЮЛ_КПП", Объект.ДоверительЮЛ_КПП);
	СтруктураДанных.Вставить("ДоверительЮЛ_ОГРН", Объект.ДоверительЮЛ_ОГРН);
	СтруктураДанных.Вставить("ДоверительЮЛ_Адр", Объект.ДоверительЮЛ_Адр);
	СтруктураДанных.Вставить("ДоверительЮЛ_АдрXML", Объект.ДоверительЮЛ_АдрXML);
	
	СубъектДоверенности = ?(Доверитель_ЮридическоеЛицо И (Объект.ДоверительЮЛ_ИностраннаяОрганизация
		ИЛИ Объект.Доверитель_СтраховательФизлицо),
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук"),
		?(НЕ Доверитель_ЮридическоеЛицо,
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ"),
		Неопределено));
	СтрокиФИО = ?(СубъектДоверенности = Неопределено, Новый Массив,
		Объект.ФИО.НайтиСтроки(Новый Структура("Владелец", СубъектДоверенности)));
	СтруктураДанных.Вставить("ДоверительФЛ_Фамилия", ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Фамилия, ""));
	СтруктураДанных.Вставить("ДоверительФЛ_Имя", ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Имя, ""));
	СтруктураДанных.Вставить("ДоверительФЛ_Отчество", ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Отчество, ""));
	ФИО = ?(СтрокиФИО.Количество() <> 0, ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(СтрокиФИО[0]), "");
	СтруктураДанных.Вставить("ДоверительФЛ_ФИО", ФИО);
	
	СтруктураДанных.Вставить("ДоверительФЛ_ДобровольноЗастрахованный", Объект.ДоверительФЛ_ДобровольноЗастрахованный);
	
	СубъектДоверенности = ?(Доверитель_ЮридическоеЛицо И Объект.Доверитель_СтраховательФизлицо,
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук"),
		?(НЕ Доверитель_ЮридическоеЛицо,
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ"),
		Неопределено));
	СтрокиУдостоверений = ?(СубъектДоверенности = Неопределено, Новый Массив,
		Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец", СубъектДоверенности)));
	СтруктураДанных.Вставить("ДоверительФЛ_ВидДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].ВидДок, ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка")));
	СтруктураДанных.Вставить("ДоверительФЛ_СерДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].СерДок, ""));
	СтруктураДанных.Вставить("ДоверительФЛ_НомДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].НомДок, ""));
	СтруктураДанных.Вставить("ДоверительФЛ_ДатаДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].ДатаДок, Неопределено));
	СтруктураДанных.Вставить("ДоверительФЛ_ВыдДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].ВыдДок, ""));
	СтруктураДанных.Вставить("ДоверительФЛ_КодВыдДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].КодВыдДок, ""));
	ДоверительФЛ_Удостоверение = ?(СтрокиУдостоверений.Количество() <> 0,
		ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеУдостоверение(СтрокиУдостоверений[0]), "");
	СтруктураДанных.Вставить("ДоверительФЛ_Удостоверение", ДоверительФЛ_Удостоверение);
	
	СтруктураДанных.Вставить("ДоверительФЛ_РегистрационныйНомерФСС", 	Объект.ДоверительФЛ_РегистрационныйНомерФСС);
	СтруктураДанных.Вставить("ДоверительФЛ_КодПодчиненностиФСС", 		Объект.ДоверительФЛ_КодПодчиненностиФСС);
	СтруктураДанных.Вставить("ДоверительФЛ_ИНН", 						Объект.ДоверительФЛ_ИНН);
	СтруктураДанных.Вставить("ДоверительФЛ_ОГРН", 						Объект.ДоверительФЛ_ОГРН);
	СтруктураДанных.Вставить("ДоверительФЛ_СНИЛС", 						Объект.ДоверительФЛ_СНИЛС);
	СтруктураДанных.Вставить("ДоверительФЛ_ДатаРождения", 				Объект.ДоверительФЛ_ДатаРождения);
	
	СтруктураДанных.Вставить("Доверитель_ПодписаноНотариусом", Объект.Доверитель_ПодписаноНотариусом);
	СтруктураДанных.Вставить("Доверитель_ОснованиеСоставленияНотариусом",
		Объект.Доверитель_ОснованиеСоставленияНотариусом);
	
	СтруктураДанных.Вставить("ТолькоПросмотрФормы", УведомлениеОтправлено ИЛИ ПодписьЗагружена);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиРеквизитыДоверителяПослеВвода", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.МашиночитаемыеДоверенностиФСС.Форма.ФормаДоверителя",
		Новый Структура("СтруктураДанных", СтруктураДанных),
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРеквизитыДоверителяПослеВвода(
		СтруктураДанных,
		ДополнительныеПараметры) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанных.ДоверительЮЛ_НаимОрг) И НЕ ЗначениеЗаполнено(Объект.Доверитель) Тогда
		Элементы.Доверитель.ОграничениеТипа = Новый ОписаниеТипов;
		Объект.Доверитель = СтруктураДанных.ДоверительЮЛ_НаимОрг;
	КонецЕсли;
	
	Объект.Доверитель_СтраховательФизлицо = СтруктураДанных.Доверитель_СтраховательФизлицо;
	Объект.ДоверительЮЛ_ИностраннаяОрганизация = Доверитель_ЮридическоеЛицо
		И НЕ СтруктураДанных.ДоверительЮЛ_РоссийскаяОрганизация;
	Объект.ДоверительЮЛ_НаимОрг = СтруктураДанных.ДоверительЮЛ_НаимОрг;
	Объект.ДоверительЮЛ_ИНН = ?(Доверитель_ЮридическоеЛицо ИЛИ Объект.Доверитель_СтраховательФизлицо,
		СтруктураДанных.ДоверительЮЛ_ИНН, "");
	Объект.ДоверительЮЛ_КПП = СтруктураДанных.ДоверительЮЛ_КПП;
	Объект.ДоверительЮЛ_ОГРН = СтруктураДанных.ДоверительЮЛ_ОГРН;
	Объект.ДоверительЮЛ_Адр = СтруктураДанных.ДоверительЮЛ_Адр;
	Объект.ДоверительЮЛ_АдрXML = СтруктураДанных.ДоверительЮЛ_АдрXML;
	
	Если Доверитель_ЮридическоеЛицо И НЕ Представитель_ЮридическоеЛицо И ПредставительЯвляетсяСотрудником Тогда
		Объект.ПредставительЮЛ_ИностраннаяОрганизация 	= Объект.ДоверительЮЛ_ИностраннаяОрганизация;
		Объект.ПредставительЮЛ_НаимОрг 					= Объект.ДоверительЮЛ_НаимОрг;
		Объект.ПредставительЮЛ_ИНН 						= Объект.ДоверительЮЛ_ИНН;
		Объект.ПредставительЮЛ_КПП 						= Объект.ДоверительЮЛ_КПП;
		Объект.ПредставительЮЛ_ОГРН 					= Объект.ДоверительЮЛ_ОГРН;
		Объект.ПредставительЮЛ_Адр 						= Объект.ДоверительЮЛ_Адр;
		Объект.ПредставительЮЛ_АдрXML 					= Объект.ДоверительЮЛ_АдрXML;
	КонецЕсли;
	
	Если Доверитель_ЮридическоеЛицо И НЕ СтруктураДанных.ДоверительЮЛ_РоссийскаяОрганизация
		ИЛИ СтруктураДанных.Доверитель_СтраховательФизлицо ИЛИ НЕ Доверитель_ЮридическоеЛицо Тогда
		
		СубъектДоверенности = ?(Доверитель_ЮридическоеЛицо,
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук"),
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ"));
		СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец", СубъектДоверенности));
		Если СтрокиФИО.Количество() = 0 Тогда
			СтрокаФИО = Объект.ФИО.Добавить();
			СтрокаФИО.Владелец = СубъектДоверенности;
		Иначе
			СтрокаФИО = СтрокиФИО[0];
		КонецЕсли;
		СтрокаФИО.Фамилия 	= СтруктураДанных.ДоверительФЛ_Фамилия;
		СтрокаФИО.Имя 		= СтруктураДанных.ДоверительФЛ_Имя;
		СтрокаФИО.Отчество 	= СтруктураДанных.ДоверительФЛ_Отчество;
		
		Если НЕ Доверитель_ЮридическоеЛицо ИЛИ СтруктураДанных.Доверитель_СтраховательФизлицо Тогда
			СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец", СубъектДоверенности));
			Если СтрокиУдостоверений.Количество() = 0 Тогда
				СтрокаУдостоверения = Объект.УдостоверенияЛичности.Добавить();
				СтрокаУдостоверения.Владелец = СубъектДоверенности;
			Иначе
				СтрокаУдостоверения = СтрокиУдостоверений[0];
			КонецЕсли;
			СтрокаУдостоверения.ВидДок 		= СтруктураДанных.ДоверительФЛ_ВидДок;
			СтрокаУдостоверения.СерДок 		= СтруктураДанных.ДоверительФЛ_СерДок;
			СтрокаУдостоверения.НомДок 		= СтруктураДанных.ДоверительФЛ_НомДок;
			СтрокаУдостоверения.ДатаДок 	= СтруктураДанных.ДоверительФЛ_ДатаДок;
			СтрокаУдостоверения.ВыдДок 		= СтруктураДанных.ДоверительФЛ_ВыдДок;
			СтрокаУдостоверения.КодВыдДок 	= СтруктураДанных.ДоверительФЛ_КодВыдДок;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ДоверительФЛ_ДобровольноЗастрахованный 	= СтруктураДанных.ДоверительФЛ_ДобровольноЗастрахованный;
	Объект.ДоверительФЛ_РегистрационныйНомерФСС 	= СтруктураДанных.ДоверительФЛ_РегистрационныйНомерФСС;
	Объект.ДоверительФЛ_КодПодчиненностиФСС 		= СтруктураДанных.ДоверительФЛ_КодПодчиненностиФСС;
	Объект.ДоверительФЛ_ИНН 						= СтруктураДанных.ДоверительФЛ_ИНН;
	Объект.ДоверительФЛ_ОГРН 						= СтруктураДанных.ДоверительФЛ_ОГРН;
	Объект.ДоверительФЛ_СНИЛС 						= СтруктураДанных.ДоверительФЛ_СНИЛС;
	Объект.ДоверительФЛ_ДатаРождения 				= СтруктураДанных.ДоверительФЛ_ДатаРождения;
	
	Объект.Доверитель_ПодписаноНотариусом 				= СтруктураДанных.Доверитель_ПодписаноНотариусом;
	Объект.Доверитель_ОснованиеСоставленияНотариусом 	= СтруктураДанных.Доверитель_ОснованиеСоставленияНотариусом;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодставитьРеквизитыЛицаБезДоверенностиФЛ()
	
	Если ТипЗнч(Объект.ЛицоБезДовФЛ) = Тип("СправочникСсылка.Контрагенты")
		И Объект.ЛицоБезДовФЛ <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
		
		СвойстваКонтрагента = ДокументооборотСКОВызовСервера.ПолучитьСвойстваКонтрагента(Объект.ЛицоБезДовФЛ);
		
		Если СвойстваКонтрагента.ЭтоЮридическоеЛицо = Истина Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выбранный контранент является юридическим лицом';
											|en = 'Выбранный контранент является юридическим лицом'"));
			Объект.ЛицоБезДовФЛ 		= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			Возврат;
		КонецЕсли;
		
		СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
		КоличествоСтрокФИО = СтрокиФИО.Количество();
		Если КоличествоСтрокФИО = 0 Тогда
			Если СвойстваКонтрагента.ЭтоЮридическоеЛицо = Ложь Тогда
				СтрокаФИО = Объект.ФИО.Добавить();
				СтрокаФИО.Владелец = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук");
			КонецЕсли;
		Иначе
			Если СвойстваКонтрагента.ЭтоЮридическоеЛицо = Ложь Тогда
				СтрокаФИО = СтрокиФИО[0];
			Иначе
				Для НомерСКонца = 1 По КоличествоСтрокФИО Цикл
					Объект.ФИО.Удалить(СтрокиФИО[КоличествоСтрокФИО - НомерСКонца]);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если СвойстваКонтрагента.ЭтоЮридическоеЛицо = Ложь Тогда
			СтрокаФИО.Фамилия 	= СвойстваКонтрагента.Фамилия;
			СтрокаФИО.Имя 		= СвойстваКонтрагента.Имя;
			СтрокаФИО.Отчество 	= СвойстваКонтрагента.Отчество;
		КонецЕсли;
		
		Объект.ЛицоБезДовФЛ_ИНН 			= ?(СвойстваКонтрагента.ЭтоЮридическоеЛицо = Ложь, СвойстваКонтрагента.ИНН, "");
		Объект.ЛицоБезДовФЛ_СНИЛС 			= "";
		Объект.ЛицоБезДовФЛ_ДатаРождения 	= Неопределено;
		
		Модифицированность = Истина;
		
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли ТипЗнч(Объект.ЛицоБезДовФЛ) = Тип("СправочникСсылка.ФизическиеЛица")
		И Объект.ЛицоБезДовФЛ <> ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка") Тогда
		
		СвойстваФизическогоЛица = ДокументооборотСКОВызовСервера.ПолучитьСвойстваФизическогоЛица(Объект.ЛицоБезДовФЛ);
		
		СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
		КоличествоСтрокФИО = СтрокиФИО.Количество();
		Если КоличествоСтрокФИО = 0 Тогда
			СтрокаФИО = Объект.ФИО.Добавить();
			СтрокаФИО.Владелец = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук");
		Иначе
			СтрокаФИО = СтрокиФИО[0];
		КонецЕсли;
		СтрокаФИО.Фамилия 	= СвойстваФизическогоЛица.ФИО.Фамилия;
		СтрокаФИО.Имя 		= СвойстваФизическогоЛица.ФИО.Имя;
		СтрокаФИО.Отчество 	= СвойстваФизическогоЛица.ФИО.Отчество;
		
		Объект.ЛицоБезДовФЛ_ИНН 			= СвойстваФизическогоЛица.ИНН;
		Объект.ЛицоБезДовФЛ_СНИЛС 			= СвойстваФизическогоЛица.СНИЛС;
		Объект.ЛицоБезДовФЛ_ДатаРождения 	= СвойстваФизическогоЛица.ДатаРождения;
		
		Модифицированность = Истина;
		
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРеквизитыЛицаБезДоверенностиФЛ()
	
	ИспользоватьДоверителяФизическоеЛицоПриПередоверии = Ложь;
	
	Если Доверитель_ЮридическоеЛицо
		И (Объект.Доверитель_СтраховательФизлицо ИЛИ Объект.ДоверительЮЛ_ИностраннаяОрганизация)
		И (НЕ Объект.Доверитель_СтраховательФизлицо ИЛИ НЕ ЗначениеЗаполнено(Объект.НомерРодительскойДоверенности)
			ИЛИ НЕ ИспользоватьДоверителяФизическоеЛицоПриПередоверии)
		ИЛИ НЕ Доверитель_ЮридическоеЛицо И НЕ ЗначениеЗаполнено(Объект.НомерРодительскойДоверенности) Тогда
		
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_Фамилия", ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Фамилия, ""));
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_Имя", ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Имя, ""));
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_Отчество", ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Отчество, ""));
	ФИО = ?(СтрокиФИО.Количество() <> 0, ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(СтрокиФИО[0]), "");
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_ФИО", ФИО);
	
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_ИНН", Объект.ЛицоБезДовФЛ_ИНН);
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_СНИЛС", Объект.ЛицоБезДовФЛ_СНИЛС);
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_ДатаРождения", Объект.ЛицоБезДовФЛ_ДатаРождения);
	
	СтруктураДанных.Вставить("ТолькоПросмотрФормы", УведомлениеОтправлено ИЛИ ПодписьЗагружена);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиРеквизитыЛицаБезДоверенностиФЛПослеВвода",
		ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.МашиночитаемыеДоверенностиФСС.Форма.ФормаЛицаБезДоверенностиФЛ",
		Новый Структура("СтруктураДанных", СтруктураДанных),
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРеквизитыЛицаБезДоверенностиФЛПослеВвода(
		СтруктураДанных,
		ДополнительныеПараметры) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанных.ЛицоБезДовФЛ_Фамилия) ИЛИ ЗначениеЗаполнено(СтруктураДанных.ЛицоБезДовФЛ_Имя)
		ИЛИ ЗначениеЗаполнено(СтруктураДанных.ЛицоБезДовФЛ_Отчество) И НЕ ЗначениеЗаполнено(Объект.ЛицоБезДовФЛ) Тогда
		Элементы.ЛицоБезДовФЛ.ОграничениеТипа = Новый ОписаниеТипов;
		Объект.ЛицоБезДовФЛ = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(
			Новый Структура("Фамилия, Имя, Отчество",
			СтруктураДанных.ЛицоБезДовФЛ_Фамилия, СтруктураДанных.ЛицоБезДовФЛ_Имя, СтруктураДанных.ЛицоБезДовФЛ_Отчество));
	КонецЕсли;
	
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
	Если СтрокиФИО.Количество() = 0 Тогда
		СтрокаФИО = Объект.ФИО.Добавить();
		СтрокаФИО.Владелец = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук");
	Иначе
		СтрокаФИО = СтрокиФИО[0];
	КонецЕсли;
	СтрокаФИО.Фамилия = СтруктураДанных.ЛицоБезДовФЛ_Фамилия;
	СтрокаФИО.Имя = СтруктураДанных.ЛицоБезДовФЛ_Имя;
	СтрокаФИО.Отчество = СтруктураДанных.ЛицоБезДовФЛ_Отчество;
	
	Объект.ЛицоБезДовФЛ_ИНН = СтруктураДанных.ЛицоБезДовФЛ_ИНН;
	Объект.ЛицоБезДовФЛ_СНИЛС = СтруктураДанных.ЛицоБезДовФЛ_СНИЛС;
	Объект.ЛицоБезДовФЛ_ДатаРождения = СтруктураДанных.ЛицоБезДовФЛ_ДатаРождения;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодставитьРеквизитыПредставителя()
	
	Если НЕ УведомлениеОтправлено И ТипЗнч(Объект.Представитель) = Тип("СправочникСсылка.Организации")
		И Объект.Представитель <> ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		
		СвойстваОрганизации = ДокументооборотСКОВызовСервера.ПолучитьСвойстваОрганизации(Объект.Представитель);
		
		Представитель_ЮридическоеЛицо = СвойстваОрганизации.ЭтоЮридическоеЛицо;
		Если Доверитель_ЮридическоеЛицо И НЕ Представитель_ЮридическоеЛицо И ПредставительЯвляетсяСотрудником Тогда
			Объект.ПредставительЮЛ_ИностраннаяОрганизация 	= Объект.ДоверительЮЛ_ИностраннаяОрганизация;
			Объект.ПредставительЮЛ_НаимОрг 					= Объект.ДоверительЮЛ_НаимОрг;
			Объект.ПредставительЮЛ_ИНН 						= Объект.ДоверительЮЛ_ИНН;
			Объект.ПредставительЮЛ_КПП 						= Объект.ДоверительЮЛ_КПП;
			Объект.ПредставительЮЛ_ОГРН 					= Объект.ДоверительЮЛ_ОГРН;
			Объект.ПредставительЮЛ_Адр 						= Объект.ДоверительЮЛ_Адр;
			Объект.ПредставительЮЛ_АдрXML 					= Объект.ДоверительЮЛ_АдрXML;
		Иначе
			Объект.ПредставительЮЛ_ИностраннаяОрганизация 	= СвойстваОрганизации.ЭтоЮридическоеЛицо
				И НЕ СвойстваОрганизации.ЭтоРоссийскаяОрганизация;
			Объект.ПредставительЮЛ_НаимОрг = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				?(НЕ СвойстваОрганизации.ЭтоРоссийскаяОрганизация И ЗначениеЗаполнено(СвойстваОрганизации.НаимИОПол),
				СвойстваОрганизации.НаимИОПол, СвойстваОрганизации.НаимЮЛПол), "");
			Объект.ПредставительЮЛ_ИНН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ИННЮЛ, "");
			Объект.ПредставительЮЛ_КПП = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.КППЮЛ, "");
			Объект.ПредставительЮЛ_ОГРН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ОГРН, "");
			
			Если СвойстваОрганизации.ЭтоЮридическоеЛицо Тогда
				Если СвойстваОрганизации.ЭтоРоссийскаяОрганизация Тогда
					АдресСтруктурой = Новый Структура("Строка, XML, JSON, Представление, Значение",
						СвойстваОрганизации.АдрЮР, СвойстваОрганизации.АдрЮР_XML, СвойстваОрганизации.АдрЮР_JSON,
						СвойстваОрганизации.АдрЮР, СвойстваОрганизации.АдрЮР_XML);
				Иначе
					АдресСтруктурой = Новый Структура("Строка, XML, JSON, Представление, Значение",
						СвойстваОрганизации.АдрИО, СвойстваОрганизации.АдрИО_XML, СвойстваОрганизации.АдрИО_JSON,
						СвойстваОрганизации.АдрИО, СвойстваОрганизации.АдрИО_XML);
				КонецЕсли;
				ДокументооборотСКОВызовСервера.ПреобразоватьАдресВФорматXML(АдресСтруктурой,
					ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
				Если ЗначениеЗаполнено(АдресСтруктурой.XML) Тогда
					Объект.ПредставительЮЛ_Адр = ДокументооборотСКОВызовСервера.ПредставлениеКонтактнойИнформации(
						АдресСтруктурой.XML);
				Иначе
					Объект.ПредставительЮЛ_Адр = АдресСтруктурой.Представление;
				КонецЕсли;
				Объект.ПредставительЮЛ_АдрXML = АдресСтруктурой.XML;
			Иначе
				Объект.ПредставительЮЛ_Адр = "";
				Объект.ПредставительЮЛ_АдрXML = "";
			КонецЕсли;
		КонецЕсли;
		
		СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
		КоличествоСтрокФИО = СтрокиФИО.Количество();
		СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
		КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
		ФизическоеЛицоПредставителяЗаполнено = КоличествоСтрокФИО <> 0 ИЛИ Объект.ПредставительЮЛ_ИностраннаяОрганизация
			ИЛИ КоличествоСтрокУдостоверений <> 0 ИЛИ ЗначениеЗаполнено(Объект.ПредставительФЛ_ИНН)
			ИЛИ ЗначениеЗаполнено(Объект.ПредставительФЛ_ОГРН) ИЛИ ЗначениеЗаполнено(Объект.ПредставительФЛ_СНИЛС)
			ИЛИ ЗначениеЗаполнено(Объект.ПредставительФЛ_ДатаРождения);
		Если ФизическоеЛицоПредставителяЗаполнено Тогда
			Если КоличествоСтрокФИО = 0 Тогда
				СтрокаФИО = Объект.ФИО.Добавить();
				СтрокаФИО.Владелец =
					ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ");
			Иначе
				СтрокаФИО = СтрокиФИО[0];
			КонецЕсли;
			СтрокаФИО.Фамилия = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.ФамилияРук, СвойстваОрганизации.ФамилияИП);
			СтрокаФИО.Имя = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.ИмяРук, СвойстваОрганизации.ИмяИП);
			СтрокаФИО.Отчество = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.ОтчествоРук, СвойстваОрганизации.ОтчествоИП);
			
			ПредставительФЛ_ФИО = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(СтрокаФИО);
			
			Если КоличествоСтрокУдостоверений = 0 Тогда
				СтрокаУдостоверения = Объект.УдостоверенияЛичности.Добавить();
				СтрокаУдостоверения.Владелец =
					ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ");
			Иначе
				СтрокаУдостоверения = СтрокиУдостоверений[0];
			КонецЕсли;
			СтрокаУдостоверения.ВидДок = СвойстваОрганизации.ВидУдостоверения;
			СтрокаУдостоверения.СерДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.СерияУдЛичнРук, СвойстваОрганизации.СерияУдЛичн);
			СтрокаУдостоверения.НомДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.НомерУдЛичнРук, СвойстваОрганизации.НомерУдЛичн);
			СтрокаУдостоверения.ДатаДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.ДатаУдЛичнРук, СвойстваОрганизации.ДатаУдЛичн);
			СтрокаУдостоверения.ВыдДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.ОрганВыданУдЛичнРук, СвойстваОрганизации.ОрганВыданУдЛичн);
			СтрокаУдостоверения.КодВыдДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.КодПодрУдЛичнРук, СвойстваОрганизации.КодПодрУдЛичн);
			
			ПредставительФЛ_Удостоверение =
				ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеУдостоверение(СтрокаУдостоверения);
			
			Объект.ПредставительФЛ_ИНН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ИННРук,
				СвойстваОрганизации.ИННФЛ);
			Объект.ПредставительФЛ_ОГРН = ?(НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ОГРН, "");
			Объект.ПредставительФЛ_СНИЛС = СвойстваОрганизации.СНИЛС;
			Объект.ПредставительФЛ_ДатаРождения = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.ДатаРождРук, СвойстваОрганизации.ДатаРожд);
		КонецЕсли;
		
		Модифицированность = Истина;
		
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли НЕ УведомлениеОтправлено И ТипЗнч(Объект.Представитель) = Тип("СправочникСсылка.Контрагенты")
		И Объект.Представитель <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
		
		СвойстваКонтрагента = ДокументооборотСКОВызовСервера.ПолучитьСвойстваКонтрагента(Объект.Представитель);
		
		Если СвойстваКонтрагента.ЭтоЮридическоеЛицо = Истина Тогда
			Представитель_ЮридическоеЛицо 					= Истина;
			Объект.ПредставительЮЛ_ИностраннаяОрганизация 	= Ложь;
			Объект.ПредставительЮЛ_НаимОрг 					= СвойстваКонтрагента.НаименованиеПолное;
			Объект.ПредставительЮЛ_ИНН 						= СвойстваКонтрагента.ИНН;
			Объект.ПредставительЮЛ_КПП 						= СвойстваКонтрагента.КПП;
			Объект.ПредставительЮЛ_ОГРН 					= "";
			Объект.ПредставительЮЛ_Адр 						= "";
			Объект.ПредставительЮЛ_АдрXML 					= "";
			
			Модифицированность = Истина;
			
			УправлениеФормой(ЭтаФорма);
			
		ИначеЕсли СвойстваКонтрагента.ЭтоЮридическоеЛицо = Ложь Тогда
			Представитель_ЮридическоеЛицо = Ложь;
			Если Доверитель_ЮридическоеЛицо И ПредставительЯвляетсяСотрудником Тогда
				Объект.ПредставительЮЛ_ИностраннаяОрганизация 	= Объект.ДоверительЮЛ_ИностраннаяОрганизация;
				Объект.ПредставительЮЛ_НаимОрг 					= Объект.ДоверительЮЛ_НаимОрг;
				Объект.ПредставительЮЛ_ИНН 						= Объект.ДоверительЮЛ_ИНН;
				Объект.ПредставительЮЛ_КПП 						= Объект.ДоверительЮЛ_КПП;
				Объект.ПредставительЮЛ_ОГРН 					= Объект.ДоверительЮЛ_ОГРН;
				Объект.ПредставительЮЛ_Адр 						= Объект.ДоверительЮЛ_Адр;
				Объект.ПредставительЮЛ_АдрXML 					= Объект.ДоверительЮЛ_АдрXML;
			Иначе
				Объект.ПредставительЮЛ_ИностраннаяОрганизация 	= Ложь;
				Объект.ПредставительЮЛ_НаимОрг 					= "";
				Объект.ПредставительЮЛ_ИНН 						= "";
				Объект.ПредставительЮЛ_КПП 						= "";
				Объект.ПредставительЮЛ_ОГРН 					= "";
				Объект.ПредставительЮЛ_Адр 						= "";
				Объект.ПредставительЮЛ_АдрXML 					= "";
			КонецЕсли;
			
			СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
			КоличествоСтрокФИО = СтрокиФИО.Количество();
			Если КоличествоСтрокФИО = 0 Тогда
				СтрокаФИО = Объект.ФИО.Добавить();
				СтрокаФИО.Владелец =
					ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ");
			Иначе
				СтрокаФИО = СтрокиФИО[0];
			КонецЕсли;
			СтрокаФИО.Фамилия 	= СвойстваКонтрагента.Фамилия;
			СтрокаФИО.Имя 		= СвойстваКонтрагента.Имя;
			СтрокаФИО.Отчество 	= СвойстваКонтрагента.Отчество;
			
			ПредставительФЛ_ФИО = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(СтрокаФИО);
			
			СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
			КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
			Для НомерСКонца = 1 По КоличествоСтрокУдостоверений Цикл
				Объект.УдостоверенияЛичности.Удалить(СтрокиУдостоверений[КоличествоСтрокУдостоверений - НомерСКонца]);
			КонецЦикла;
			
			ПредставительФЛ_Удостоверение = "";
			
			Объект.ПредставительФЛ_ИНН 							= СвойстваКонтрагента.ИНН;
			Объект.ПредставительФЛ_ОГРН 						= "";
			Объект.ПредставительФЛ_СНИЛС 						= "";
			Объект.ПредставительФЛ_ДатаРождения 				= Неопределено;
			
			Модифицированность = Истина;
			
			УправлениеФормой(ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли НЕ УведомлениеОтправлено И ТипЗнч(Объект.Представитель) = Тип("СправочникСсылка.ФизическиеЛица")
		И Объект.Представитель <> ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка") Тогда
		
		СвойстваФизическогоЛица = ДокументооборотСКОВызовСервера.ПолучитьСвойстваФизическогоЛица(Объект.Представитель);
		
		Представитель_ЮридическоеЛицо 	= Ложь;
		Если Доверитель_ЮридическоеЛицо И ПредставительЯвляетсяСотрудником Тогда
			Объект.ПредставительЮЛ_ИностраннаяОрганизация 	= Объект.ДоверительЮЛ_ИностраннаяОрганизация;
			Объект.ПредставительЮЛ_НаимОрг 					= Объект.ДоверительЮЛ_НаимОрг;
			Объект.ПредставительЮЛ_ИНН 						= Объект.ДоверительЮЛ_ИНН;
			Объект.ПредставительЮЛ_КПП 						= Объект.ДоверительЮЛ_КПП;
			Объект.ПредставительЮЛ_ОГРН 					= Объект.ДоверительЮЛ_ОГРН;
			Объект.ПредставительЮЛ_Адр 						= Объект.ДоверительЮЛ_Адр;
			Объект.ПредставительЮЛ_АдрXML 					= Объект.ДоверительЮЛ_АдрXML;
		Иначе
			Объект.ПредставительЮЛ_ИностраннаяОрганизация 	= Ложь;
			Объект.ПредставительЮЛ_НаимОрг 					= "";
			Объект.ПредставительЮЛ_ИНН 						= "";
			Объект.ПредставительЮЛ_КПП 						= "";
			Объект.ПредставительЮЛ_ОГРН 					= "";
			Объект.ПредставительЮЛ_Адр 						= "";
			Объект.ПредставительЮЛ_АдрXML 					= "";
		КонецЕсли;
		
		СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
		КоличествоСтрокФИО = СтрокиФИО.Количество();
		Если КоличествоСтрокФИО = 0 Тогда
			СтрокаФИО = Объект.ФИО.Добавить();
			СтрокаФИО.Владелец = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ");
		Иначе
			СтрокаФИО = СтрокиФИО[0];
		КонецЕсли;
		СтрокаФИО.Фамилия 	= СвойстваФизическогоЛица.ФИО.Фамилия;
		СтрокаФИО.Имя 		= СвойстваФизическогоЛица.ФИО.Имя;
		СтрокаФИО.Отчество 	= СвойстваФизическогоЛица.ФИО.Отчество;
		
		ПредставительФЛ_ФИО = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(СтрокаФИО);
		
		СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
		КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
		Если КоличествоСтрокУдостоверений = 0 Тогда
			СтрокаУдостоверения = Объект.УдостоверенияЛичности.Добавить();
			СтрокаУдостоверения.Владелец =
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ");
		Иначе
			СтрокаУдостоверения = СтрокиУдостоверений[0];
		КонецЕсли;
		СтрокаУдостоверения.ВидДок 		= СвойстваФизическогоЛица.ВидДокумента;
		СтрокаУдостоверения.СерДок 		= СвойстваФизическогоЛица.Серия;
		СтрокаУдостоверения.НомДок 		= СвойстваФизическогоЛица.Номер;
		СтрокаУдостоверения.ДатаДок 	= СвойстваФизическогоЛица.ДатаВыдачи;
		СтрокаУдостоверения.ВыдДок 		= СвойстваФизическогоЛица.КемВыдан;
		СтрокаУдостоверения.КодВыдДок 	= СвойстваФизическогоЛица.КодПодразделения;
		
		ПредставительФЛ_Удостоверение =
			ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеУдостоверение(СтрокаУдостоверения);
		
		Объект.ПредставительФЛ_ИНН 							= СвойстваФизическогоЛица.ИНН;
		Объект.ПредставительФЛ_ОГРН 						= "";
		Объект.ПредставительФЛ_СНИЛС 						= СвойстваФизическогоЛица.СНИЛС;
		Объект.ПредставительФЛ_ДатаРождения 				= СвойстваФизическогоЛица.ДатаРождения;
		
		Модифицированность = Истина;
		
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли УведомлениеОтправлено И ТипОтправителя = "1" Тогда
		Объект.Организация = ?(ТипЗнч(Объект.Представитель) = Тип("СправочникСсылка.Организации"),
			Объект.Представитель, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
		ЭтоЭлектроннаяПодписьВМоделиСервиса = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРеквизитыПредставителя()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ПредставительЮЛ_ИностраннаяОрганизация", Объект.ПредставительЮЛ_ИностраннаяОрганизация);
	СтруктураДанных.Вставить("ПредставительЮЛ_НаимОрг", Объект.ПредставительЮЛ_НаимОрг);
	СтруктураДанных.Вставить("ПредставительЮЛ_ИНН", 	Объект.ПредставительЮЛ_ИНН);
	СтруктураДанных.Вставить("ПредставительЮЛ_КПП", 	Объект.ПредставительЮЛ_КПП);
	СтруктураДанных.Вставить("ПредставительЮЛ_ОГРН", 	Объект.ПредставительЮЛ_ОГРН);
	СтруктураДанных.Вставить("ПредставительЮЛ_Адр", 	Объект.ПредставительЮЛ_Адр);
	СтруктураДанных.Вставить("ПредставительЮЛ_АдрXML", 	Объект.ПредставительЮЛ_АдрXML);
	СтруктураДанных.Вставить("ТолькоПросмотрФормы", 	УведомлениеОтправлено ИЛИ ПодписьЗагружена);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиРеквизитыПредставителяПослеВвода",
		ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.МашиночитаемыеДоверенностиФСС.Форма.ФормаПредставителя",
		Новый Структура("СтруктураДанных", СтруктураДанных),
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРеквизитыПредставителяПослеВвода(
		СтруктураДанных,
		ДополнительныеПараметры) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанных.ПредставительЮЛ_НаимОрг) И НЕ ЗначениеЗаполнено(Объект.Представитель) Тогда
		Представитель_ЮридическоеЛицо = Истина;
		Элементы.Представитель.ОграничениеТипа = Новый ОписаниеТипов;
		Объект.Представитель = СтруктураДанных.ПредставительЮЛ_НаимОрг;
	КонецЕсли;
	
	Объект.ПредставительЮЛ_ИностраннаяОрганизация 	= СтруктураДанных.ПредставительЮЛ_ИностраннаяОрганизация;
	Объект.ПредставительЮЛ_НаимОрг 					= СтруктураДанных.ПредставительЮЛ_НаимОрг;
	Объект.ПредставительЮЛ_ИНН 						= СтруктураДанных.ПредставительЮЛ_ИНН;
	Объект.ПредставительЮЛ_КПП 						= СтруктураДанных.ПредставительЮЛ_КПП;
	Объект.ПредставительЮЛ_ОГРН 					= СтруктураДанных.ПредставительЮЛ_ОГРН;
	Объект.ПредставительЮЛ_Адр 						= СтруктураДанных.ПредставительЮЛ_Адр;
	Объект.ПредставительЮЛ_АдрXML 					= СтруктураДанных.ПредставительЮЛ_АдрXML;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если ЗначениеЗаполнено(Объект.Представитель_ИдентификаторСертификата) Тогда
		ПараметрыОтображенияСертификатов = Новый Массив;
		
		ПараметрыОтображенияСертификата = Новый Структура;
		ПараметрыОтображенияСертификата.Вставить("ПолеВвода", 								Элементы.СертификатПредставителяПредставление);
		ПараметрыОтображенияСертификата.Вставить("Сертификат", 								Объект.Представитель_ИдентификаторСертификата);
		ПараметрыОтображенияСертификата.Вставить("ИмяРеквизитаПредставлениеСертификата", 	"СертификатПредставителяПредставление");
		
		ПараметрыОтображенияСертификатов.Добавить(ПараметрыОтображенияСертификата);
		
		КриптографияЭДКОКлиент.ОтобразитьПредставленияСертификатов(
			ПараметрыОтображенияСертификатов,
			ЭтотОбъект,
			ЭтоЭлектроннаяПодписьВМоделиСервиса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставительФЛ_ФИОНачалоВыбораПослеВвода(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатРедактирования) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
	
	КоличествоСтрокФИО = СтрокиФИО.Количество();
	Если КоличествоСтрокФИО = 0 Тогда
		СтрокаФИО = Объект.ФИО.Добавить();
		СтрокаФИО.Владелец = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ");
	Иначе
		СтрокаФИО = СтрокиФИО[0];
	КонецЕсли;
	СтрокаФИО.Фамилия 	= РезультатРедактирования.Фамилия;
	СтрокаФИО.Имя 		= РезультатРедактирования.Имя;
	СтрокаФИО.Отчество 	= РезультатРедактирования.Отчество;
	
	ПредставительФЛ_ФИО = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(СтрокаФИО);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставительФЛ_УдостоверениеНачалоВыбораПослеВвода(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатВыбора) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
	
	КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
	Если КоличествоСтрокУдостоверений = 0 Тогда
		СтрокаУдостоверения = Объект.УдостоверенияЛичности.Добавить();
		СтрокаУдостоверения.Владелец =
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ");
	Иначе
		СтрокаУдостоверения = СтрокиУдостоверений[0];
	КонецЕсли;
	СтрокаУдостоверения.ВидДок 		= РезультатВыбора.ДокументВид;
	СтрокаУдостоверения.СерДок 		= РезультатВыбора.ДокументСерия;
	СтрокаУдостоверения.НомДок 		= РезультатВыбора.ДокументНомер;
	СтрокаУдостоверения.ДатаДок 	= РезультатВыбора.ДокументДатаВыдачи;
	СтрокаУдостоверения.ВыдДок 		= РезультатВыбора.ДокументКемВыдан;
	СтрокаУдостоверения.КодВыдДок 	= РезультатВыбора.ДокументКодПодразделения;
	
	ПредставительФЛ_Удостоверение =
		ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеУдостоверение(СтрокаУдостоверения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатПредставителяПредставлениеНачалоВыбораПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат.Выполнено Тогда
		Объект.Представитель_ИдентификаторСертификата = Результат.ВыбранноеЗначение.Отпечаток;
		
		КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
			ЭтоЭлектроннаяПодписьВМоделиСервиса,
			Элемент,
			Результат.ВыбранноеЗначение.Отпечаток,
			ЭтотОбъект,
			"СертификатПредставителяПредставление");
		
		Модифицированность = Истина;
		
		Оповещение = Новый ОписаниеОповещения("СертификатПредставителяПредставлениеНачалоВыбораПослеЭкспорта", ЭтотОбъект);
		Сертификат = Новый Структура("Отпечаток, ЭтоЭлектроннаяПодписьВМоделиСервиса",
			Результат.ВыбранноеЗначение.Отпечаток, ЭтоЭлектроннаяПодписьВМоделиСервиса);
		КриптографияЭДКОКлиент.ЭкспортироватьСертификатВBase64(Оповещение, Сертификат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатПредставителяПредставлениеНачалоВыбораПослеЭкспорта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Выполнено Тогда
		Если НЕ ДокументооборотСКОКлиент.ПроверитьИЗаписать(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		ЗаписатьСертификатПредставителя(Объект.Ссылка, Результат.СтрокаBase64);
		
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСертификатПредставителя(СправочникСсылка, СертификатBase64)
	
	ДанныеСертификата = Base64Значение(СертификатBase64);
	
	СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
	СправочникОбъект.Представитель_Сертификат = Новый ХранилищеЗначения(ДанныеСертификата);
	СправочникОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПолномочияПредставителяНажатиеПослеВвода(
		СтруктураДанных,
		ДополнительныеПараметры) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияПолномочий = Новый Соответствие;
	Для каждого ПолномочиеПредставителя Из СтруктураДанных.ПолномочияПредставителя Цикл
		СведенияПолномочий[ПолномочиеПредставителя.КодПолномочия] = ПолномочиеПредставителя;
	КонецЦикла;
	
	КоличествоПолномочий = Объект.ПолномочияПредставителя.Количество();
	Для НомерСКонца = 1 По КоличествоПолномочий Цикл
		ПолномочиеПредставителя = Объект.ПолномочияПредставителя[КоличествоПолномочий - НомерСКонца];
		СведенияПолномочия = СведенияПолномочий[ПолномочиеПредставителя.КодПолномочия];
		Если СведенияПолномочия = Неопределено Тогда
			Объект.ПолномочияПредставителя.Удалить(ПолномочиеПредставителя);
		Иначе
			ПолномочиеПредставителя.КодПолномочия 			= СведенияПолномочия.КодПолномочия;
			ПолномочиеПредставителя.НаименованиеПолномочия 	= СведенияПолномочия.НаименованиеПолномочия;
			ПолномочиеПредставителя.ПризнакПередоверия 		= СведенияПолномочия.ПризнакПередоверия;
			ПолномочиеПредставителя.ДатаНачала 				= СведенияПолномочия.ДатаНачала;
			ПолномочиеПредставителя.ДатаОкончания 			= СведенияПолномочия.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ПолномочиеПредставителя Из СтруктураДанных.ПолномочияПредставителя Цикл
		СтрокиПолномочий = Объект.ПолномочияПредставителя.НайтиСтроки(Новый Структура("КодПолномочия",
			ПолномочиеПредставителя.КодПолномочия));
		Если СтрокиПолномочий.Количество() = 0 Тогда
			СтрокаПолномочия = Объект.ПолномочияПредставителя.Добавить();
			СтрокаПолномочия.КодПолномочия 			= ПолномочиеПредставителя.КодПолномочия;
			СтрокаПолномочия.НаименованиеПолномочия = ПолномочиеПредставителя.НаименованиеПолномочия;
			СтрокаПолномочия.ПризнакПередоверия 	= ПолномочиеПредставителя.ПризнакПередоверия;
			СтрокаПолномочия.ДатаНачала 			= ПолномочиеПредставителя.ДатаНачала;
			СтрокаПолномочия.ДатаОкончания 			= ПолномочиеПредставителя.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерРодительскойДоверенностиНачалоВыбораПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыРодительскойДоверенности =
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗначенияРеквизитовОбъекта(Результат,
		"НомерДоверенности, Представитель");
	
	Объект.РодительскаяДоверенность = Результат;
	Объект.НомерРодительскойДоверенности = РеквизитыРодительскойДоверенности.НомерДоверенности;
	Если ТипЗнч(РеквизитыРодительскойДоверенности.Представитель) = Тип("СправочникСсылка.Организации") Тогда
		Объект.Организация = РеквизитыРодительскойДоверенности.Представитель;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПослеПодтвержденияПриПредупреждении(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодписьЗагружена Тогда
		РезультатыПроверки = ДокументооборотСКОВызовСервера.ПроверитьМЧДФСС(Объект);
		
		Если РезультатыПроверки.Количество() <> 0 Тогда
			Для каждого РезультатПроверки Из РезультатыПроверки Цикл
				ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПроверки.ТекстОшибки,,
					РезультатПроверки.Поле);
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДокументооборотСКОКлиент.ПроверитьИЗаписать(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПослеОтправки", ЭтотОбъект);
	КонтекстЭДОКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганДляФСС(
		ЭтотОбъект,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПослеОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	УведомлениеОтправлено = ПослеОтправкиНаСервере();
	
	// Перерисовка статуса отправки в форме Отчетность
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	Оповестить("Завершение отправки", ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПослеЗагрузки(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено ИЛИ Результат.ОписанияФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеФайла = Результат.ОписанияФайлов[0];
	
	РезультатЗагрузки = ДокументооборотСКОВызовСервера.ЗагрузитьМЧДФСС(
		ОписаниеФайла.Адрес,
		Объект.Ссылка);
	Если НЕ РезультатЗагрузки.Выполнено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.Ошибка);
		Возврат;
	КонецЕсли;
	
	ПослеОтправкиНаСервере(Истина);
	
КонецПроцедуры

&НаСервере
Функция ПослеОтправкиНаСервере(Перечитать = Ложь)
	
	Если Перечитать Тогда
		Прочитать();
		Инициализация();
	КонецЕсли;
	
	УведомлениеОтправлено = УведомлениеОтправлено(Объект.Ссылка);
	УправлениеФормой(ЭтаФорма);
	ПрорисоватьСтатус(ЭтаФорма);
	
	Возврат УведомлениеОтправлено;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтекстЭДОСервер()
	
	Возврат ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
КонецФункции

&НаСервереБезКонтекста
Функция УведомлениеОтправлено(Ссылка)
	
	СтатусОтправки = КонтекстЭДОСервер().ПолучитьСтатусОтправкиОбъекта(Ссылка);
	
	УведомлениеОтправлено =
		ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> Перечисления.СтатусыОтправки.ВКонверте;
	
	Возврат УведомлениеОтправлено;
	
КонецФункции

&НаСервере
Процедура СохранитьСтатусОтправкиУведомления()
	
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиУведомления(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
