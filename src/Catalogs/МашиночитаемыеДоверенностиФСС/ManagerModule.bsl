#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ЗагрузкаЭлементаСправочника

Функция ДанныеИзФайлаОбмена(
		ВходящиеДанные,
		ОбновлятьСуществующийИлиСсылкаИлиРежим = Ложь,
		Подпись = Неопределено,
		Организация = Неопределено) Экспорт
	
	ДанныеДоверенности = Новый Структура;
	
	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;
	ДокументОбработки = ПодготовитьДокументDOM(ТекущиеДанные);
	
	Если ЭтоФайл Тогда
		ТекущиеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	ДанныеДоверенности.Вставить("ДанныеВыгрузки", ТекущиеДанные);
	
	ТекущиеДанные = Подпись;
	Если Подпись <> Неопределено Тогда
		Если ТипЗнч(Подпись) = Тип("ДвоичныеДанные") Тогда
			ТекущиеДанные = Подпись;
		ИначеЕсли ЭтоАдресВременногоХранилища(Подпись) Тогда
			ТекущиеДанные = ПолучитьИзВременногоХранилища(Подпись);
		ИначеЕсли ТипЗнч(Подпись) = Тип("Строка") И НайтиФайлы(Подпись).Количество() > 0 Тогда
			ТекущиеДанные = Новый ДвоичныеДанные(Подпись);
		КонецЕсли;
	КонецЕсли;
	ДанныеДоверенности.Вставить("ДанныеПодписи", ТекущиеДанные);
	
	СведенияФайла = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/powerOfAttorney");
	Если СведенияФайла.Количество() = 1 Тогда
		ЭлементВыборки = СведенияФайла[0];
		ИмяФайлаВыгрузки = ПолучитьЗначениеДокумента(ЭлементВыборки, "@Id");
		Если ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
			ДанныеДоверенности.Вставить("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки + ".xml");
		КонецЕсли;
	КонецЕсли;
	
	СведенияДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/powerOfAttorney/generalInfo");
	Если СведенияДоверенности.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверенности[0];
		ДанныеДоверенности.Вставить("НомерДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "uuid"));
		ДанныеДоверенности.Вставить("ДатаВыдачи", ПолучитьЗначениеДокумента(ЭлементВыборки, "startDate", '00010101'));
		ДанныеДоверенности.Вставить("ДатаОкончания", ПолучитьЗначениеДокумента(ЭлементВыборки, "endDate", '00010101'));
		ДанныеДоверенности.Вставить("Примечание", ПолучитьЗначениеДокумента(ЭлементВыборки, "comment"));
	КонецЕсли;
	
	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("ПолномочияПредставителя", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);
	ДанныеДоверенности.Вставить("ТипОрганизации", "");
	
	СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
		"/powerOfAttorney/owner/legalOrganization");
	СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
		"/powerOfAttorney/owner/legalPerson");
	СведенияДоверителяСтраховательФизлицо = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
		"/powerOfAttorney/owner/person");
	СведенияДоверителяДобровольноЗастрахованный = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
		"/powerOfAttorney/owner/person/volunteer");
	
	Если СведенияДоверителяЮЛ.Количество() = 1 Тогда
		СведенияДоверителя = СведенияДоверителяЮЛ;
		ЭлементВыборки = СведенияДоверителя[0];
		Если ПолучитьЗначениеДокумента(ЭлементВыборки, "foreign") = Истина Тогда
			ДанныеДоверенности.ТипОрганизации = "ИО";
		Иначе
			ДанныеДоверенности.ТипОрганизации = "ЮЛ";
		КонецЕсли;
		ДанныеДоверенности.Вставить("Доверитель_СтраховательФизлицо", Ложь);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДобровольноЗастрахованный", Ложь);
	ИначеЕсли СведенияДоверителяФЛ.Количество() = 1 Тогда
		ДанныеДоверенности.ТипОрганизации = "ФЛ";
		СведенияДоверителя = СведенияДоверителяФЛ;
		ДанныеДоверенности.Вставить("Доверитель_СтраховательФизлицо", Ложь);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДобровольноЗастрахованный", Ложь);
	ИначеЕсли СведенияДоверителяСтраховательФизлицо.Количество() = 1 Тогда
		ДанныеДоверенности.ТипОрганизации = "ФЛ";
		СведенияДоверителя = СведенияДоверителяСтраховательФизлицо;
		ДанныеДоверенности.Вставить("Доверитель_СтраховательФизлицо", Истина);
		ЭтоДобровольноЗастрахованный = (СведенияДоверителяДобровольноЗастрахованный.Количество() = 1);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДобровольноЗастрахованный", ЭтоДобровольноЗастрахованный);
	КонецЕсли;
	
	РеквизитыПоискаОрганизации = Новый Соответствие;
	
	Если СведенияДоверителя.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверителя[0];
		Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" ИЛИ ДанныеДоверенности.ТипОрганизации = "ИО" Тогда
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", ДанныеДоверенности.ТипОрганизации = "ИО");
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "fullName"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "inn"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "kpp"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "ogrn"));
			
			ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", ПолучитьЗначениеДокумента(ЭлементВыборки, "jurAddress"));
			
			СведенияЛицаДоверителя = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
				"/powerOfAttorney/principal/person");
			Если СведенияЛицаДоверителя.Количество() = 1 Тогда
				ЭлементВыборкиЛица = СведенияЛицаДоверителя[0];
				
				СведенияЛицаДоверителя_ИНН = ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "inn");
				СведенияЛицаДоверителя_СНИЛС = ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "snils");
				СведенияЛицаДоверителя_СНИЛС =
					ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СНИЛССРазделителями(
					СведенияЛицаДоверителя_СНИЛС);
				СведенияЛицаДоверителя_ДатаРождения = ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "birthDate", '00010101');
				
				НоваяСтрока = Новый Структура;
				НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "lastName"));
				НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "firstName"));
				НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "middleName"));
				НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительРук);
				ДанныеДоверенности.ФИО.Добавить(НоваяСтрока);
				
				ДокументФЛ = Новый Структура;
				ДокументФЛ.Вставить("СерДок",
					ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "insurer/personDocument/series"));
				ДокументФЛ.Вставить("НомДок",
					ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "insurer/personDocument/number"));
				ДокументФЛ.Вставить("ДатаДок",
					ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "insurer/personDocument/issuedDate", '00010101'));
				ДокументФЛ.Вставить("ВыдДок",
					ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "insurer/personDocument/issuedBy"));
				ДокументФЛ.Вставить("КодВыдДок",
					ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "insurer/personDocument/issuedByCode"));
				ДокументФЛ.Вставить("ВидДок",
					ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "insurer/personDocument/identityDocument",
					Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
				ДокументФЛ.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ);
				ДанныеДоверенности.УдостоверенияЛичности.Добавить(ДокументФЛ);
				
				СправочникОрганизации = Метаданные.Справочники.Найти("Организации");
				РеквизитКПП = ?(СправочникОрганизации = Неопределено, Неопределено, СправочникОрганизации.Реквизиты.Найти("КПП"));
				Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
					ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ИНН", 			СведенияЛицаДоверителя_ИНН);
					ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", 			СведенияЛицаДоверителя_СНИЛС);
					ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ДатаРождения", 	СведенияЛицаДоверителя_ДатаРождения);
					
					Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_ИНН) Тогда
						ДанныеДоверенности.Вставить("ЛицоБезДовФЛ",
							ПодыскатьИнформациюВладельца("Контрагенты,ФизическиеЛица",
							ДанныеДоверенности.ЛицоБезДовФЛ_ИНН,, ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС));
						Если НЕ ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ) И (ЗначениеЗаполнено(НоваяСтрока.Фамилия)
							ИЛИ ЗначениеЗаполнено(НоваяСтрока.Имя) ИЛИ ЗначениеЗаполнено(НоваяСтрока.Отчество)) Тогда
							ДанныеДоверенности.ЛицоБезДовФЛ = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(НоваяСтрока);
						КонецЕсли;
					КонецЕсли;
					
					РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
					Если РеквизитКПП <> Неопределено И ЗначениеЗаполнено(ДанныеДоверенности.ДоверительЮЛ_КПП) Тогда
						РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
					КонецЕсли;
					
				Иначе
					ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", 			СведенияЛицаДоверителя_ИНН);
					ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", 			СведенияЛицаДоверителя_СНИЛС);
					ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", 	СведенияЛицаДоверителя_ДатаРождения);
					
					РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
					Если РеквизитКПП <> Неопределено И ЗначениеЗаполнено(ДанныеДоверенности.ДоверительЮЛ_КПП) Тогда
						РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			Если ДанныеДоверенности.Доверитель_СтраховательФизлицо
				И НЕ ДанныеДоверенности.ДоверительФЛ_ДобровольноЗастрахованный Тогда
				ДанныеДоверенности.Вставить("ДоверительФЛ_РегистрационныйНомерФСС",
					ПолучитьЗначениеДокумента(ЭлементВыборки, "insurer/regNum"));
			КонецЕсли;
			Если ДанныеДоверенности.ДоверительФЛ_ДобровольноЗастрахованный Тогда
				ДанныеДоверенности.Вставить("ДоверительФЛ_РегистрационныйНомерФСС",
					ПолучитьЗначениеДокумента(ЭлементВыборки, "volunteer/regNum"));
				ДанныеДоверенности.Вставить("ДоверительФЛ_КодПодчиненностиФСС",
					ПолучитьЗначениеДокумента(ЭлементВыборки, "volunteer/kpsNum"));
			КонецЕсли;
			
			ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "inn"));
			Если НЕ ДанныеДоверенности.Доверитель_СтраховательФизлицо
				И НЕ ДанныеДоверенности.ДоверительФЛ_ДобровольноЗастрахованный Тогда
				ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "ogrnip"));
			КонецЕсли;
			ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки, "snils"));
			ДанныеДоверенности.ДоверительФЛ_СНИЛС =
				ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СНИЛССРазделителями(
				ДанныеДоверенности.ДоверительФЛ_СНИЛС);
			ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "birthDate", '00010101'));
			
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(ЭлементВыборки, "lastName"));
			НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(ЭлементВыборки, "firstName"));
			НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(ЭлементВыборки, "middleName"));
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ);
			ДанныеДоверенности.ФИО.Добавить(НоваяСтрока);
			
			Если ДокументооборотСФССКлиентСервер.НастройкиМЧДФСС().ДоверительФЛУдостоверениеИспользуется Тогда
				Если ДанныеДоверенности.Доверитель_СтраховательФизлицо
					ИЛИ ДанныеДоверенности.ДоверительФЛ_ДобровольноЗастрахованный Тогда
					ЭлементВыборкиЛица = ЭлементВыборки;
				Иначе
					ЭлементВыборкиЛица = Неопределено;
					СведенияЛицаДоверителя = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
						"/powerOfAttorney/principal/person");
					Если СведенияЛицаДоверителя.Количество() = 1 Тогда
						ЭлементВыборкиЛица = СведенияЛицаДоверителя[0];
					КонецЕсли;
				КонецЕсли;
				
				Если ЭлементВыборкиЛица <> Неопределено Тогда
					ДокументФЛ = Новый Структура;
					ДокументФЛ.Вставить("СерДок",
						ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "insurer/personDocument/series"));
					ДокументФЛ.Вставить("НомДок",
						ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "insurer/personDocument/number"));
					ДокументФЛ.Вставить("ДатаДок",
						ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "insurer/personDocument/issuedDate", '00010101'));
					ДокументФЛ.Вставить("ВыдДок", 
						ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "insurer/personDocument/issuedBy"));
					ДокументФЛ.Вставить("КодВыдДок",
						ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "insurer/personDocument/issuedByCode"));
					ДокументФЛ.Вставить("ВидДок",
						ПолучитьЗначениеДокумента(ЭлементВыборкиЛица, "insurer/personDocument/identityDocument",
						Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
					ДокументФЛ.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ);
					ДанныеДоверенности.УдостоверенияЛичности.Добавить(ДокументФЛ);
				КонецЕсли;
			КонецЕсли;
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);
		КонецЕсли;
	КонецЕсли;
	
	СведенияУполномоченных = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/powerOfAttorney/representative");
	Для каждого СтрокаМассива Из СведенияУполномоченных Цикл
		ТипВладельца = Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ;
		ИнформацияОрганизации = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "legalOrganization");
		Если ИнформацияОрганизации.Количество() > 0 Тогда
			ДанныеДоверенности.Вставить("ПредставительЮЛ_ИностраннаяОрганизация",
				ПолучитьЗначениеДокумента(ИнформацияОрганизации[0], "foreign"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг",
				ПолучитьЗначениеДокумента(ИнформацияОрганизации[0], "fullName"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0], "inn"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_КПП", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0], "kpp"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН",
				ПолучитьЗначениеДокумента(ИнформацияОрганизации[0], "ogrn"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_Адр",
				ПолучитьЗначениеДокумента(ИнформацияОрганизации[0], "jurAddress"));
		КонецЕсли;
		
		СведенияФЛ = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "legalPerson");
		Если СведенияФЛ.Количество() > 0 Тогда
			СведенияФЛ = СведенияФЛ[0];
			ДанныеДоверенности.Вставить("Представитель_Физлицо", Ложь);
		Иначе
			СведенияФЛ = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "person");
			Если СведенияФЛ.Количество() > 0 Тогда
				СведенияФЛ = СведенияФЛ[0];
				ДанныеДоверенности.Вставить("Представитель_Физлицо", Истина);
			Иначе
				СведенияФЛ = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если СведенияФЛ <> Неопределено Тогда
			ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", ПолучитьЗначениеДокумента(СведенияФЛ, "inn"));
			ДанныеДоверенности.Вставить("ПредставительФЛ_ОГРН", ПолучитьЗначениеДокумента(СведенияФЛ, "ogrnip"));
			ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", ПолучитьЗначениеДокумента(СведенияФЛ, "snils"));
			ДанныеДоверенности.ПредставительФЛ_СНИЛС =
				ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СНИЛССРазделителями(
				ДанныеДоверенности.ПредставительФЛ_СНИЛС);
			ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения",
				ПолучитьЗначениеДокумента(СведенияФЛ, "birthDate", '00010101'));
			
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(СведенияФЛ, "lastName"));
			НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(СведенияФЛ, "firstName"));
			НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(СведенияФЛ, "middleName"));
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ);
			ДанныеДоверенности.ФИО.Добавить(НоваяСтрока);
			
			ДокументФЛ = Новый Структура;
			ДокументФЛ.Вставить("СерДок", ПолучитьЗначениеДокумента(СведенияФЛ, "personDocument/series"));
			ДокументФЛ.Вставить("НомДок", ПолучитьЗначениеДокумента(СведенияФЛ, "personDocument/number"));
			ДокументФЛ.Вставить("ДатаДок",
				ПолучитьЗначениеДокумента(СведенияФЛ, "personDocument/issuedDate", '00010101'));
			ДокументФЛ.Вставить("ВыдДок", ПолучитьЗначениеДокумента(СведенияФЛ, "personDocument/issuedBy"));
			ДокументФЛ.Вставить("КодВыдДок", ПолучитьЗначениеДокумента(СведенияФЛ, "personDocument/issuedByCode"));
			ДокументФЛ.Вставить("ВидДок",
				ПолучитьЗначениеДокумента(СведенияФЛ, "personDocument/identityDocument",
				Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
			ДокументФЛ.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ);
			ДанныеДоверенности.УдостоверенияЛичности.Добавить(ДокументФЛ);
		КонецЕсли;
		
		ДанныеДоверенности.Вставить("Представитель_ИдентификаторСертификата", "");
		ДанныеСертификатаBase64 = ПолучитьЗначениеДокумента(СтрокаМассива, "certificate");
		ДанныеСертификата = ?(ЗначениеЗаполнено(ДанныеСертификатаBase64),
			Base64Значение(ДанныеСертификатаBase64), Неопределено);
		ДанныеДоверенности.Вставить("Представитель_Сертификат", ДанныеСертификата);
		Если ДанныеСертификата <> Неопределено Тогда
			Попытка
				ОбъектСертификатКриптографии = Новый СертификатКриптографии(ДанныеСертификата);
				ОтпечатокСертификата = ПолучитьHexСтрокуИзДвоичныхДанных(ОбъектСертификатКриптографии.Отпечаток);
				ДанныеДоверенности.Представитель_ИдентификаторСертификата = нрег(ОтпечатокСертификата);
			Исключение
				ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Ошибка извлечения сертификата МЧД СФР (бывш. ФСС).';
									|en = 'Электронный документооборот с контролирующими органами. Ошибка извлечения сертификата МЧД СФР (бывш. ФСС).'", ОбщегоНазначения.КодОсновногоЯзыка());
				ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					ИмяСобытия,
					УровеньЖурналаРегистрации.Ошибка,,,
					ДанныеОшибки);
			КонецПопытки;
		КонецЕсли;
		
		Представитель = Неопределено;
		Если ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН")
			И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН) Тогда
			Представитель = ПодыскатьИнформациюВладельца("Контрагенты,Организации",
				ДанныеДоверенности.ПредставительЮЛ_ИНН, ДанныеДоверенности.ПредставительЮЛ_КПП);
		КонецЕсли;
		
		Если (НЕ ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН")
			ИЛИ НЕ ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН)) И НЕ ЗначениеЗаполнено(Представитель)
			И ДанныеДоверенности.Свойство("ПредставительФЛ_ОГРН") И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_ОГРН)
			И ДанныеДоверенности.Свойство("ПредставительФЛ_ИНН")
			И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_ИНН) Тогда
			Представитель = ПодыскатьИнформациюВладельца("Контрагенты", ДанныеДоверенности.ПредставительФЛ_ИНН);
		КонецЕсли;
		
		Если (НЕ ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН")
			ИЛИ НЕ ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_ИНН)) И НЕ ЗначениеЗаполнено(Представитель)
			И ДанныеДоверенности.Свойство("ПредставительФЛ_ИНН")
			И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_ИНН) Тогда
			Представитель = ПодыскатьИнформациюВладельца("ФизическиеЛица", ДанныеДоверенности.ПредставительФЛ_ИНН);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Представитель) И ДанныеДоверенности.Свойство("ПредставительЮЛ_НаимОрг")
			И ЗначениеЗаполнено(ДанныеДоверенности.ПредставительЮЛ_НаимОрг) Тогда
			Представитель = ДанныеДоверенности.ПредставительЮЛ_НаимОрг;
		КонецЕсли;
		
		ДанныеДоверенности.Вставить("Представитель", Представитель);
	КонецЦикла;
	
	СведенияПолномочий = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/powerOfAttorney/authorities");
	Для каждого СтрокаМассива Из СведенияПолномочий Цикл
		ПолномочияПредставителя = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "authority");
		Для каждого ПолномочиеПредставителя Из ПолномочияПредставителя Цикл
			КодыПолномочийПредставителя = ПолучитьВыборкуЭлементовDOM(ПолномочиеПредставителя, "mnemonic");
			Для каждого КодПолномочийПредставителя Из КодыПолномочийПредставителя Цикл
				НоваяСтрока = Новый Структура;
				НоваяСтрока.Вставить("КодПолномочия", КодПолномочийПредставителя.ТекстовоеСодержимое);
				НоваяСтрока.Вставить("НаименованиеПолномочия", КодПолномочийПредставителя.ТекстовоеСодержимое);
				НоваяСтрока.Вставить("ПризнакПередоверия", ПолучитьЗначениеДокумента(ПолномочиеПредставителя, "@entrustment"));
				НоваяСтрока.Вставить("ДатаНачала", ПолучитьЗначениеДокумента(ПолномочиеПредставителя, "@startDate", '00010101'));
				НоваяСтрока.Вставить("ДатаОкончания", ПолучитьЗначениеДокумента(ПолномочиеПредставителя, "@endDate", '00010101'));
				ДанныеДоверенности.ПолномочияПредставителя.Добавить(НоваяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СведенияОРодительскойДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
		"/powerOfAttorney/Signature/Object/authorities/authority");
	НомерРодительскойДоверенности = "";
	Если СведенияОРодительскойДоверенности.Количество() >= 1 Тогда
		НомерРодительскойДоверенности = ПолучитьЗначениеДокумента(СведенияОРодительскойДоверенности[0],
			"powerOfAttorneyLink");
	КонецЕсли;
	ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", НомерРодительскойДоверенности);
	
	ДанныеДоверенности.Вставить("Доверитель",
		НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(), РеквизитыПоискаОрганизации));
	Если НЕ ЗначениеЗаполнено(ДанныеДоверенности.Доверитель) И ДанныеДоверенности.Свойство("ДоверительЮЛ_НаимОрг")
		И ЗначениеЗаполнено(ДанныеДоверенности.ДоверительЮЛ_НаимОрг) Тогда
		ДанныеДоверенности.Доверитель = ДанныеДоверенности.ДоверительЮЛ_НаимОрг;
	КонецЕсли;
	
	ДанныеДоверенности.Вставить("Организация", ?(ЗначениеЗаполнено(Организация), Организация, ?(Подпись = Неопределено
		ИЛИ НЕ ДанныеДоверенности.Свойство("Представитель")
		ИЛИ ТипЗнч(ДанныеДоверенности.Представитель) <> Тип("СправочникСсылка.Организации"),
		ДанныеДоверенности.Доверитель, ДанныеДоверенности.Представитель)));
	
	Если ЗначениеЗаполнено(ДанныеДоверенности.Организация)
		И ЗначениеЗаполнено(ДанныеДоверенности.НомерРодительскойДоверенности) Тогда
		
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("НомерДоверенности", ДанныеДоверенности.НомерРодительскойДоверенности);
		СтрокаПоиска.Вставить("Организация", ДанныеДоверенности.Организация);
		НашлиДоверенность = НайтиЭлементИБ(Справочники.МашиночитаемыеДоверенностиФСС.ПустаяСсылка(), СтрокаПоиска);
		ДанныеДоверенности.Вставить("РодительскаяДоверенность", НашлиДоверенность);
	КонецЕсли;
	
	Подписана = (ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/powerOfAttorney/Signature").Количество() <> 0);
	ДанныеДоверенности.Вставить("Подписана", Подписана);
	
	Возврат ДанныеДоверенности;
	
КонецФункции

Функция ЗагрузитьЭлементИзФайлаОбмена(
		ВходящиеДанные,
		ОбновлятьСуществующийИлиСсылкаИлиРежим = Ложь,
		Подпись = Неопределено,
		Организация = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", 		Ложь);
	Результат.Вставить("Ссылка", 			Неопределено);
	Результат.Вставить("НомерДоверенности", "");
	Результат.Вставить("Ошибка", 			"");
	
	ДанныеПодготовленны = 0;
	КлючевыеРеквизиты = "";
	ТекстОшибки = "";
	Успешно = Истина;
	
	Попытка
		ДанныеДоверенности = ДанныеИзФайлаОбмена(ВходящиеДанные, ОбновлятьСуществующийИлиСсылкаИлиРежим, Подпись, Организация);
	Исключение
		Результат.Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Успешно = Ложь;
	КонецПопытки;
	
	Если Успешно Тогда
		Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
			КлючевыеРеквизиты = "ДоверительЮЛ_ИНН";
		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			КлючевыеРеквизиты = "ДоверительФЛ_ИНН, ДоверительФЛ_СНИЛС";
		Иначе
			КлючевыеРеквизиты = "ДоверительЮЛ_ИНН";
		КонецЕсли;
		
		КлючевыеРеквизиты = КлючевыеРеквизиты + ", НомерДоверенности, ДатаВыдачи";
		
		КлючевыеРеквизиты = Новый Структура(КлючевыеРеквизиты);
		
		Для каждого СтрокаКлюча Из КлючевыеРеквизиты Цикл
			Если ДанныеДоверенности.Свойство(СтрокаКлюча.Ключ) 
				И ЗначениеЗаполнено(ДанныеДоверенности[СтрокаКлюча.Ключ]) Тогда
				ДанныеПодготовленны = ДанныеПодготовленны + 1;
			ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнены реквизиты справочника';
									|en = 'Не заполнены реквизиты справочника'") + ":  " + СтрокаКлюча.Ключ;
			Иначе
				ТекстОшибки = ТекстОшибки + ", " + СтрокаКлюча.Ключ;
			КонецЕсли;
		КонецЦикла;
		
		Если КлючевыеРеквизиты.Количество() = ДанныеПодготовленны Тогда
			Результат.НомерДоверенности = ДанныеДоверенности.НомерДоверенности;
			ТекущийЭлемент = ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующийИлиСсылкаИлиРежим);
			Если ТекущийЭлемент = "ЗапрещеноОбновлятьСуществующий" Тогда
				Результат.Выполнено = Истина;
				Результат.Ошибка 	= "ЗапрещеноОбновлятьСуществующий";
			ИначеЕсли ЗначениеЗаполнено(ТекущийЭлемент) Тогда
				Результат.Выполнено = Истина;
				Результат.Ссылка 	= ТекущийЭлемент;
			Иначе
				Результат.Ошибка 	= НСтр("ru = 'Не удалось запись элемент справочника. Подробности в журнале регистрации';
											|en = 'Не удалось запись элемент справочника. Подробности в журнале регистрации'");
			КонецЕсли;
		Иначе
			Результат.Ошибка = ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

Функция ВыгрузитьЭлементВФайлОбмена(
		СправочникСсылка,
		ИдентификаторФайла = "",
		ПроверитьВыгрузку = Ложь,
		ПараметрыВозврата = Неопределено) Экспорт
	
	ПараметрыВозвратаВызова = Новый Структура;
	ПараметрыВозвратаВызова.Вставить("ВозвращатьАдресВоВременномХранилище", Ложь);
	ПараметрыВозвратаВызова.Вставить("ВозвращатьИмяФайлаСРасширением", 		Ложь);
	ПараметрыВозвратаВызова.Вставить("ВозвращатьПриложеннуюПодпись", 		Ложь);
	Если ПараметрыВозврата <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВозвратаВызова, ПараметрыВозврата);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Содержимое", 			"");
	Результат.Вставить("ИмяФайла", 				"");
	Результат.Вставить("ИдентификаторРодителя", "");
	
	Если ПараметрыВозвратаВызова.ВозвращатьПриложеннуюПодпись Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СправочникСсылка,
			"ИмяФайлаВыгрузки, ФайлВырузки, ЭлектроннаяПодпись");
		ДанныеВыгрузки = РеквизитыОбъекта.ФайлВырузки.Получить();
		ДанныеПодписи = РеквизитыОбъекта.ЭлектроннаяПодпись.Получить();
		Если ЗначениеЗаполнено(РеквизитыОбъекта.ИмяФайлаВыгрузки) И ДанныеВыгрузки <> Неопределено
			И ДанныеПодписи <> Неопределено Тогда
			
			Результат = Новый Массив;
			
			АдресВыгрузки = ПоместитьВоВременноеХранилище(ДанныеВыгрузки, Новый УникальныйИдентификатор);
			Результат.Добавить(Новый Структура("Имя, Адрес", РеквизитыОбъекта.ИмяФайлаВыгрузки, АдресВыгрузки));
			
			ИмяФайлаПодписи = НРег(СтрЗаменить(Строка(СправочникСсылка.УникальныйИдентификатор()), "-", "")) + ".sgn";
			АдресПодписи = ПоместитьВоВременноеХранилище(ДанныеПодписи, Новый УникальныйИдентификатор);
			Результат.Добавить(Новый Структура("Имя, Адрес", ИмяФайлаПодписи, АдресПодписи));
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьВыгрузку Тогда
		РезультатыПроверки = ПроверитьВозможностьВыгрузки(СправочникСсылка);
		
		Если РезультатыПроверки.Количество() <> 0 Тогда
			Для каждого РезультатПроверки Из РезультатыПроверки Цикл
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(РезультатыПроверки.ТекстОшибки);
			КонецЦикла;
			
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
				НСтр("ru = 'Не удалось сформировать машиночитаемую доверенность налогоплательщика';
					|en = 'Не удалось сформировать машиночитаемую доверенность налогоплательщика'"));
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСправочника = ДанныеИзИнформационнойБазы(СправочникСсылка);
	
	ИдентификаторФайла = ?(ЗначениеЗаполнено(ИдентификаторФайла),
		ИдентификаторФайла, ДанныеСправочника.Номер);
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Результат.ИмяФайла = "P_" + СокрЛП(ИдентификаторФайла);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("utf-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("powerOfAttorney");
	
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xmlns", "urn:ru:fss:integration:types:mchd:v01");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xmlns:ns2", "http://www.fss.ru/integration/types/common/v01");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("systemInfo");
	
	ЗаписатьУзелXML(ЗаписьXML, "ns2:specVersion", "1");
	ЗаписатьУзелXML(ЗаписьXML, "ns2:software", ВРЕГ(Лев(РегламентированнаяОтчетность.НазваниеПрограммы(), 40)));
	ЗаписатьУзелXML(ЗаписьXML, "ns2:softwareVersion", РегламентированнаяОтчетность.ВерсияПрограммы());
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("generalInfo");
	
	ЗаписатьУзелXML(ЗаписьXML, "uuid", ДанныеСправочника.Номер);
	ЗаписатьУзелXML(ЗаписьXML, "startDate", ДанныеСправочника.ДатаВыдачи,, Истина);
	ЗаписатьУзелXML(ЗаписьXML, "endDate", ДанныеСправочника.ДатаОкончания,, Истина);
	ЗаписатьУзелXML(ЗаписьXML, "comment", ДанныеСправочника.Примечание, Ложь);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// фомирование раздела Сведения о доверителе
	ЗаписьXML.ЗаписатьНачалоЭлемента("owner");
	
	Если (ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ИО"
		ИЛИ ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ЮЛ")
		И НЕ ДанныеСправочника.Доверитель_СтраховательФизлицо Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("legalOrganization");
		
		ЗаписатьУзелXML(ЗаписьXML, "fullName", ДанныеСправочника.ДоверительЮЛ_НаимОрг);
		ЗаписатьУзелXML(ЗаписьXML, "jurAddress", ДанныеСправочника.ДоверительЮЛ_Адр);
		ЗаписатьУзелXML(ЗаписьXML, "inn", ДанныеСправочника.ДоверительЮЛ_ИНН);
		ЗаписатьУзелXML(ЗаписьXML, "kpp", ДанныеСправочника.ДоверительЮЛ_КПП, Ложь);
		Если ДанныеСправочника.ДоверительЮЛ_ТипОрганизации <> "ИО" Тогда
			ЗаписатьУзелXML(ЗаписьXML, "ogrn", ДанныеСправочника.ДоверительЮЛ_ОГРН);
		КонецЕсли;
		ЗаписатьУзелXML(ЗаписьXML, "foreign", ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ИО", Ложь);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ИначеЕсли ДанныеСправочника.Доверитель_СтраховательФизлицо
		ИЛИ ДанныеСправочника.ДоверительФЛ_ДобровольноЗастрахованный Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("person");
		
		ЗаписатьУзелXML(ЗаписьXML, "firstName", ДанныеСправочника.ЛицоБезДовФЛ_Имя);
		ЗаписатьУзелXML(ЗаписьXML, "lastName", ДанныеСправочника.ЛицоБезДовФЛ_Фамилия);
		ЗаписатьУзелXML(ЗаписьXML, "middleName", ДанныеСправочника.ЛицоБезДовФЛ_Отчество, Ложь);
		ЗаписатьУзелXML(ЗаписьXML, "birthDate", ДанныеСправочника.ДоверительФЛ_ДатаРождения,, Истина);
		СНИЛСБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СНИЛСБезРазделителей(
			ДанныеСправочника.ДоверительФЛ_СНИЛС);
		ЗаписатьУзелXML(ЗаписьXML, "snils", СНИЛСБезРазделителей);
		ЗаписатьУзелXML(ЗаписьXML, "inn", ДанныеСправочника.ДоверительФЛ_ИНН);
		
		Если ДанныеСправочника.Доверитель_СтраховательФизлицо
			И НЕ ДанныеСправочника.ДоверительФЛ_ДобровольноЗастрахованный
			И ЗначениеЗаполнено(ДанныеСправочника.ДоверительФЛ_РегистрационныйНомерФСС) Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("insurer");
			ЗаписатьУзелXML(ЗаписьXML, "regNum", ДанныеСправочника.ДоверительФЛ_РегистрационныйНомерФСС, Ложь);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Если ДанныеСправочника.ДоверительФЛ_ДобровольноЗастрахованный
			И (ЗначениеЗаполнено(ДанныеСправочника.ДоверительФЛ_РегистрационныйНомерФСС)
			ИЛИ ЗначениеЗаполнено(ДанныеСправочника.ДоверительФЛ_КодПодчиненностиФСС)) Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("volunteer");
			ЗаписатьУзелXML(ЗаписьXML, "regNum", ДанныеСправочника.ДоверительФЛ_РегистрационныйНомерФСС, Ложь);
			ЗаписатьУзелXML(ЗаписьXML, "kpsNum", ДанныеСправочника.ДоверительФЛ_КодПодчиненностиФСС, Ложь);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Если ДокументооборотСФССКлиентСервер.НастройкиМЧДФСС().ДоверительФЛУдостоверениеИспользуется Тогда
			ВыгрузитьУдостоверениеУзла(
				ЗаписьXML,
				ДанныеСправочника.ДоверительФЛ_ВидДок,
				ДанныеСправочника.ДоверительФЛ_СерДок,
				ДанныеСправочника.ДоверительФЛ_НомДок,
				ДанныеСправочника.ДоверительФЛ_ДатаДок,
				ДанныеСправочника.ДоверительФЛ_ВыдДок,
				ДанныеСправочника.ДоверительФЛ_КодВыдДок);
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("legalPerson");
		
		ЗаписатьУзелXML(ЗаписьXML, "firstName", ДанныеСправочника.ЛицоБезДовФЛ_Имя);
		ЗаписатьУзелXML(ЗаписьXML, "lastName", ДанныеСправочника.ЛицоБезДовФЛ_Фамилия);
		ЗаписатьУзелXML(ЗаписьXML, "middleName", ДанныеСправочника.ЛицоБезДовФЛ_Отчество, Ложь);
		ЗаписатьУзелXML(ЗаписьXML, "birthDate", ДанныеСправочника.ДоверительФЛ_ДатаРождения,, Истина);
		СНИЛСБезРазделителей =
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СНИЛСБезРазделителей(
			ДанныеСправочника.ДоверительФЛ_СНИЛС);
		ЗаписатьУзелXML(ЗаписьXML, "snils", СНИЛСБезРазделителей);
		ЗаписатьУзелXML(ЗаписьXML, "inn", ДанныеСправочника.ДоверительФЛ_ИНН);
		ЗаписатьУзелXML(ЗаписьXML, "ogrnip", ДанныеСправочника.ДоверительФЛ_ОГРН);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// фомирование раздела Сведения о доверителе
	ЗаписьXML.ЗаписатьНачалоЭлемента("principal");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("person");
	
	ЭтоЛицоБезДовФЛПередоверие = ((ДанныеСправочника.ДоверительЮЛ_ТипОрганизации <> "ИО"
			И ДанныеСправочника.ДоверительЮЛ_ТипОрганизации <> "ЮЛ") ИЛИ ДанныеСправочника.Доверитель_СтраховательФизлицо)
		И ЗначениеЗаполнено(ДанныеСправочника.НомерРодительскойДоверенности)
		И (ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовФЛПередоверие_Фамилия)
			ИЛИ ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовФЛПередоверие_Имя)
			ИЛИ ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовФЛПередоверие_Отчество));
	
	Если ЭтоЛицоБезДовФЛПередоверие Тогда
		ЗаписатьУзелXML(ЗаписьXML, "firstName", ДанныеСправочника.ЛицоБезДовФЛПередоверие_Имя);
		ЗаписатьУзелXML(ЗаписьXML, "lastName", ДанныеСправочника.ЛицоБезДовФЛПередоверие_Фамилия);
		ЗаписатьУзелXML(ЗаписьXML, "middleName", ДанныеСправочника.ЛицоБезДовФЛПередоверие_Отчество, Ложь);
	Иначе
		ЗаписатьУзелXML(ЗаписьXML, "firstName", ДанныеСправочника.ЛицоБезДовФЛ_Имя);
		ЗаписатьУзелXML(ЗаписьXML, "lastName", ДанныеСправочника.ЛицоБезДовФЛ_Фамилия);
		ЗаписатьУзелXML(ЗаписьXML, "middleName", ДанныеСправочника.ЛицоБезДовФЛ_Отчество, Ложь);
	КонецЕсли;
	
	Если ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ЮЛ"
		И НЕ ДанныеСправочника.Доверитель_СтраховательФизлицо
		ИЛИ ЭтоЛицоБезДовФЛПередоверие Тогда
		
		ЗаписатьУзелXML(ЗаписьXML, "birthDate", ДанныеСправочника.ЛицоБезДовФЛ_ДатаРождения,, Истина);
		СНИЛСБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СНИЛСБезРазделителей(
			ДанныеСправочника.ЛицоБезДовФЛ_СНИЛС);
		ЗаписатьУзелXML(ЗаписьXML, "snils", СНИЛСБезРазделителей);
		ЗаписатьУзелXML(ЗаписьXML, "inn", ДанныеСправочника.ЛицоБезДовФЛ_ИНН);
		
	Иначе
		ЗаписатьУзелXML(ЗаписьXML, "birthDate", ДанныеСправочника.ДоверительФЛ_ДатаРождения,, Истина);
		СНИЛСБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СНИЛСБезРазделителей(
			ДанныеСправочника.ДоверительФЛ_СНИЛС);
		ЗаписатьУзелXML(ЗаписьXML, "snils", СНИЛСБезРазделителей);
		ЗаписатьУзелXML(ЗаписьXML, "inn", ДанныеСправочника.ДоверительФЛ_ИНН);
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписатьУзелXML(ЗаписьXML, "signedByNotary", ДанныеСправочника.Доверитель_ПодписаноНотариусом, Ложь);
	ЗаписатьУзелXML(ЗаписьXML, "notaryBasedOn", ДанныеСправочника.Доверитель_ОснованиеСоставленияНотариусом, Ложь);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// фомирование раздела Сведения об уполномоченном представителе
	ЗаписьXML.ЗаписатьНачалоЭлемента("representative");
	
	Если ЗначениеЗаполнено(ДанныеСправочника.Представитель_ИдентификаторСертификата) Тогда
		СертификатBase64 = Base64Строка(ДанныеСправочника.Представитель_Сертификат);
		СертификатBase64 = СтрЗаменить(СертификатBase64, Символы.ВК, "");
		СертификатBase64 = СтрЗаменить(СертификатBase64, Символы.ПС, "");
		ЗаписатьУзелXML(ЗаписьXML, "certificate", СертификатBase64);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеСправочника.ПредставительЮЛ_ИНН)
		ИЛИ ДанныеСправочника.Представитель_Физлицо Тогда
		
		Если ЗначениеЗаполнено(ДанныеСправочника.ПредставительЮЛ_ИНН) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("legalOrganization");
			
			ЗаписатьУзелXML(ЗаписьXML, "fullName", ДанныеСправочника.ПредставительЮЛ_НаимОрг);
			ЗаписатьУзелXML(ЗаписьXML, "jurAddress", ДанныеСправочника.ПредставительЮЛ_Адр);
			ЗаписатьУзелXML(ЗаписьXML, "inn", ДанныеСправочника.ПредставительЮЛ_ИНН);
			ЗаписатьУзелXML(ЗаписьXML, "kpp", ДанныеСправочника.ПредставительЮЛ_КПП, Ложь);
			Если НЕ ДанныеСправочника.ПредставительЮЛ_ИностраннаяОрганизация Тогда
				ЗаписатьУзелXML(ЗаписьXML, "ogrn", ДанныеСправочника.ПредставительЮЛ_ОГРН);
			КонецЕсли;
			ЗаписатьУзелXML(ЗаписьXML, "foreign", ДанныеСправочника.ПредставительЮЛ_ИностраннаяОрганизация, Ложь);
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСправочника.ПредставительЮЛ_ИНН)
			ИЛИ ДокументооборотСФССКлиентСервер.НастройкиМЧДФСС().ПредставительСотрудникСУказаниемОрганизации Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("person");
			
			ЗаписатьУзелXML(ЗаписьXML, "firstName", ДанныеСправочника.ПредставительФЛ_Имя);
			ЗаписатьУзелXML(ЗаписьXML, "lastName", ДанныеСправочника.ПредставительФЛ_Фамилия);
			ЗаписатьУзелXML(ЗаписьXML, "middleName", ДанныеСправочника.ПредставительФЛ_Отчество, Ложь);
			ЗаписатьУзелXML(ЗаписьXML, "birthDate", ДанныеСправочника.ПредставительФЛ_ДатаРождения,, Истина);
			СНИЛСБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СНИЛСБезРазделителей(
				ДанныеСправочника.ПредставительФЛ_СНИЛС);
			ЗаписатьУзелXML(ЗаписьXML, "snils", СНИЛСБезРазделителей);
			ЗаписатьУзелXML(ЗаписьXML, "inn", ДанныеСправочника.ПредставительФЛ_ИНН);
			
			ВыгрузитьУдостоверениеУзла(
				ЗаписьXML,
				ДанныеСправочника.ПредставительФЛ_ВидДок,
				ДанныеСправочника.ПредставительФЛ_СерДок,
				ДанныеСправочника.ПредставительФЛ_НомДок,
				ДанныеСправочника.ПредставительФЛ_ДатаДок,
				ДанныеСправочника.ПредставительФЛ_ВыдДок,
				ДанныеСправочника.ПредставительФЛ_КодВыдДок);
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("legalPerson");
		
		ЗаписатьУзелXML(ЗаписьXML, "firstName", ДанныеСправочника.ПредставительФЛ_Имя);
		ЗаписатьУзелXML(ЗаписьXML, "lastName", ДанныеСправочника.ПредставительФЛ_Фамилия);
		ЗаписатьУзелXML(ЗаписьXML, "middleName", ДанныеСправочника.ПредставительФЛ_Отчество, Ложь);
		ЗаписатьУзелXML(ЗаписьXML, "birthDate", ДанныеСправочника.ПредставительФЛ_ДатаРождения,, Истина);
		СНИЛСБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СНИЛСБезРазделителей(
			ДанныеСправочника.ПредставительФЛ_СНИЛС);
		ЗаписатьУзелXML(ЗаписьXML, "snils", СНИЛСБезРазделителей);
		ЗаписатьУзелXML(ЗаписьXML, "inn", ДанныеСправочника.ПредставительФЛ_ИНН);
		ЗаписатьУзелXML(ЗаписьXML, "ogrnip", ДанныеСправочника.ПредставительФЛ_ОГРН);
		
		ВыгрузитьУдостоверениеУзла(
			ЗаписьXML,
			ДанныеСправочника.ПредставительФЛ_ВидДок,
			ДанныеСправочника.ПредставительФЛ_СерДок,
			ДанныеСправочника.ПредставительФЛ_НомДок,
			ДанныеСправочника.ПредставительФЛ_ДатаДок,
			ДанныеСправочника.ПредставительФЛ_ВыдДок,
			ДанныеСправочника.ПредставительФЛ_КодВыдДок);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("authorities");
	
	Для каждого ПолномочиеПредставителя Из ДанныеСправочника.ПолномочияПредставителя Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("authority");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mnemonic");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "entrustment", ПолномочиеПредставителя.ПризнакПередоверия);
		ЗаписьXML.ЗаписатьТекст(ПолномочиеПредставителя.КодПолномочия);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Результат.ИдентификаторРодителя = ДанныеСправочника.НомерРодительскойДоверенности;
	
	Результат.Содержимое = ЗаписьXML.Закрыть();
	
	Если ПараметрыВозвратаВызова.ВозвращатьИмяФайлаСРасширением Тогда
		Результат.ИмяФайла = Результат.ИмяФайла + ".xml";
	КонецЕсли;
	
	Если ПараметрыВозвратаВызова.ВозвращатьАдресВоВременномХранилище Тогда
		ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(Результат.Содержимое, "utf-8");
		АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
		Результат = Новый Структура("Имя, Адрес", Результат.ИмяФайла, АдресФайла);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ПроверитьВозможностьВыгрузки(ОбъектИлиСсылка) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектИлиСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФСС") Тогда
		Доверенность = ОбъектИлиСсылка.ПолучитьОбъект();
	Иначе
		Доверенность = ОбъектИлиСсылка;
	КонецЕсли;
	
	// основные
	
	Если НЕ ЗначениеЗаполнено(Доверенность.НомерДоверенности) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан номер доверенности';
				|en = 'Не задан номер доверенности'"), "НомерДоверенности"));
	КонецЕсли;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ГодДатыСеанса = Год(ДатаСеанса);
	МинимальнаяДата = Дата(1900, 1, 1);
	ГодМаксимальнойДаты = Цел((ГодДатыСеанса + 50) / 100) * 100 + 99;
	МаксимальнаяДата = Дата(ГодМаксимальнойДаты, 1, 1);
	МаксимальнаяДата = КонецГода(МаксимальнаяДата);
	
	Если НЕ ЗначениеЗаполнено(Доверенность.ДатаВыдачи) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана дата выдачи';
				|en = 'Не задана дата выдачи'"), "ДатаВыдачи"));
	ИначеЕсли Доверенность.ДатаВыдачи < МинимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата выдачи не может быль раньше %1';
					|en = 'Дата выдачи не может быль раньше %1'"),
				Формат(МинимальнаяДата, "ДЛФ=Д")),
			"ДатаВыдачи"));
	ИначеЕсли Доверенность.ДатаВыдачи > МаксимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата выдачи не может быль позднее %1';
					|en = 'Дата выдачи не может быль позднее %1'"),
				Формат(МаксимальнаяДата, "ДЛФ=Д")),
			"ДатаВыдачи"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Доверенность.ДатаОкончания) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не заданы дата окончания или срок действия';
				|en = 'Не заданы дата окончания или срок действия'"), "ДатаОкончания"));
	ИначеЕсли ЗначениеЗаполнено(Доверенность.ДатаОкончания) И Доверенность.ДатаОкончания < МинимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата окончания действия не может быль раньше %1';
					|en = 'Дата окончания действия не может быль раньше %1'"),
				Формат(МинимальнаяДата, "ДЛФ=Д")),
			"ДатаОкончания"));
	ИначеЕсли ЗначениеЗаполнено(Доверенность.ДатаОкончания) И Доверенность.ДатаОкончания > МаксимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата окончания действия не может быль позднее %1';
					|en = 'Дата окончания действия не может быль позднее %1'"),
				Формат(МаксимальнаяДата, "ДЛФ=Д")),
			"ДатаОкончания"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Доверенность.ДатаВыдачи) И ЗначениеЗаполнено(Доверенность.ДатаОкончания)
		И Доверенность.ДатаОкончания < Доверенность.ДатаВыдачи Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Дата выдачи доверенности не может быть больше даты окончания действия';
				|en = 'Дата выдачи доверенности не может быть больше даты окончания действия'"), "ДатаОкончания"));
	КонецЕсли;
	
	// доверитель
	
	Доверитель_ЮридическоеЛицо = ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_ИНН);
	
	Если Доверитель_ЮридическоеЛицо И НЕ Доверенность.Доверитель_СтраховательФизлицо Тогда
		Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_НаимОрг) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано наименование организации доверителя';
					|en = 'Не задано наименование организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН организации доверителя';
					|en = 'Не задан ИНН организации доверителя'"), "Доверитель"));
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			Доверенность.ДоверительЮЛ_ИНН, Ложь) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН организации доверителя';
					|en = 'Указан некорректный ИНН организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_КПП) И СтрДлина(Доверенность.ДоверительЮЛ_КПП) <> 9 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный КПП организации доверителя';
					|en = 'Указан некорректный КПП организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если Доверенность.ДоверительЮЛ_ИностраннаяОрганизация Тогда
			СтрокиФИО = Доверенность.ФИО.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана фамилия руководителя обособленного подразделения доверителя';
						|en = 'Не задана фамилия руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано имя руководителя обособленного подразделения доверителя';
						|en = 'Не задано имя руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ИНН) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан ИНН руководителя обособленного подразделения доверителя';
						|en = 'Не задан ИНН руководителя обособленного подразделения доверителя'"), "Доверитель"));
			ИначеЕсли ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ИНН)
				И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				Доверенность.ДоверительФЛ_ИНН, Истина) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ИНН руководителя обособленного подразделения доверителя';
						|en = 'Указан некорректный ИНН руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ДатаРождения) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана дата рождения руководителя обособленного подразделения доверителя';
						|en = 'Не задана дата рождения руководителя обособленного подразделения доверителя'"), "Доверитель"));
			ИначеЕсли Доверенность.ДоверительФЛ_ДатаРождения < МинимальнаяДата Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					СтрШаблон(
						НСтр("ru = 'Дата рождения руководителя обособленного подразделения доверителя не может быль раньше %1';
							|en = 'Дата рождения руководителя обособленного подразделения доверителя не может быль раньше %1'"),
						Формат(МинимальнаяДата, "ДЛФ=Д")),
					"Доверитель"));
			ИначеЕсли Доверенность.ДоверительФЛ_ДатаРождения > МаксимальнаяДата Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					СтрШаблон(
						НСтр("ru = 'Дата рождения руководителя обособленного подразделения доверителя не может быль позднее %1';
							|en = 'Дата рождения руководителя обособленного подразделения доверителя не может быль позднее %1'"),
						Формат(МаксимальнаяДата, "ДЛФ=Д")),
					"Доверитель"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_СНИЛС) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан СНИЛС руководителя обособленного подразделения доверителя';
						|en = 'Не задан СНИЛС руководителя обособленного подразделения доверителя'"), "Доверитель"));
			ИначеЕсли СтрДлина(Доверенность.ДоверительФЛ_СНИЛС) <> 14 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный СНИЛС руководителя обособленного подразделения доверителя';
						|en = 'Указан некорректный СНИЛС руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
			
		Иначе
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_ОГРН) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан ОГРН организации доверителя';
						|en = 'Не задан ОГРН организации доверителя'"), "Доверитель"));
			ИначеЕсли СтрДлина(Доверенность.ДоверительЮЛ_ОГРН) <> 13 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ОГРН организации доверителя';
						|en = 'Указан некорректный ОГРН организации доверителя'"), "Доверитель"));
			КонецЕсли;
			
			СтрокиФИО = Доверенность.ФИО.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана фамилия физического лица со стороны доверителя';
						|en = 'Не задана фамилия физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			КонецЕсли;
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано имя физического лица со стороны доверителя';
						|en = 'Не задано имя физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ЛицоБезДовФЛ_ИНН) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан ИНН физического лица со стороны доверителя';
						|en = 'Не задан ИНН физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				Доверенность.ЛицоБезДовФЛ_ИНН, Истина) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ИНН физического лица со стороны доверителя';
						|en = 'Указан некорректный ИНН физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ЛицоБезДовФЛ_СНИЛС) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан СНИЛС физического лица со стороны доверителя';
						|en = 'Не задан СНИЛС физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			ИначеЕсли СтрДлина(Доверенность.ЛицоБезДовФЛ_СНИЛС) <> 14 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный СНИЛС физического лица со стороны доверителя';
						|en = 'Указан некорректный СНИЛС физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(Доверенность.ЛицоБезДовФЛ_ДатаРождения) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана дата рождения физического лица со стороны доверителя';
						|en = 'Не задана дата рождения физического лица со стороны доверителя'"), "Доверитель"));
			ИначеЕсли Доверенность.ЛицоБезДовФЛ_ДатаРождения < МинимальнаяДата Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					СтрШаблон(
						НСтр("ru = 'Дата рождения физического лица со стороны доверителя не может быль раньше %1';
							|en = 'Дата рождения физического лица со стороны доверителя не может быль раньше %1'"),
						Формат(МинимальнаяДата, "ДЛФ=Д")),
					"Доверитель"));
			ИначеЕсли Доверенность.ЛицоБезДовФЛ_ДатаРождения > МаксимальнаяДата Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					СтрШаблон(
						НСтр("ru = 'Дата рождения физического лица со стороны доверителя не может быль позднее %1';
							|en = 'Дата рождения физического лица со стороны доверителя не может быль позднее %1'"),
						Формат(МаксимальнаяДата, "ДЛФ=Д")),
					"Доверитель"));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		СтрокиФИО = Доверенность.ФИО.НайтиСтроки(Новый Структура("Владелец", ?(Доверитель_ЮридическоеЛицо,
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук"),
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ"))));
		
		Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана фамилия доверителя';
					|en = 'Не задана фамилия доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано имя доверителя';
					|en = 'Не задано имя доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если Доверенность.ДоверительФЛ_ДобровольноЗастрахованный ИЛИ Доверенность.Доверитель_СтраховательФизлицо Тогда
			Если Доверенность.ДоверительФЛ_ДобровольноЗастрахованный
				И НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_РегистрационныйНомерФСС) Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан регистрационный номер в СФР (бывш. ФСС) доверителя';
						|en = 'Не задан регистрационный номер в СФР (бывш. ФСС) доверителя'"), "Доверитель"));
			ИначеЕсли ЗначениеЗаполнено(Доверенность.ДоверительФЛ_РегистрационныйНомерФСС)
				И СтрДлина(Доверенность.ДоверительФЛ_РегистрационныйНомерФСС) <> 10 Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный регистрационный номер в СФР (бывш. ФСС) доверителя';
						|en = 'Указан некорректный регистрационный номер в СФР (бывш. ФСС) доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если Доверенность.ДоверительФЛ_ДобровольноЗастрахованный Тогда
				Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_КодПодчиненностиФСС) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан код подчиненности к территориальному органу в СФР (бывш. ФСС) доверителя';
							|en = 'Не задан код подчиненности к территориальному органу в СФР (бывш. ФСС) доверителя'"), "Доверитель"));
				ИначеЕсли СтрДлина(Доверенность.ДоверительФЛ_КодПодчиненностиФСС) <> 5 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный код подчиненности к территориальному органу в СФР (бывш. ФСС) доверителя';
							|en = 'Указан некорректный код подчиненности к территориальному органу в СФР (бывш. ФСС) доверителя'"), "Доверитель"));
				КонецЕсли;
			КонецЕсли;
			
			Если ДокументооборотСФССКлиентСервер.НастройкиМЧДФСС().ДоверительФЛУдостоверениеИспользуется Тогда
				СтрокиУдостоверений = Доверенность.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
					ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
				
				Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВидДок) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан вид документа доверителя';
							|en = 'Не задан вид документа доверителя'"), "Доверитель"));
				КонецЕсли;
				
				КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
					?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].ВидДок));
				Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
					И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
					И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Вид документа доверителя не поддерживается';
							|en = 'Вид документа доверителя не поддерживается'"), "Доверитель"));
				КонецЕсли;
				
				Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтрокиУдостоверений[0].СерДок)
					+ СокрЛП(СтрокиУдостоверений[0].НомДок)) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не заданы серия и номер документа доверителя';
							|en = 'Не заданы серия и номер документа доверителя'"), "Доверитель"));
				КонецЕсли;
				
				Если СтрокиУдостоверений.Количество() <> 0 И СтрДлина(СокрЛП(СтрокиУдостоверений[0].СерДок)
					+ СокрЛП(СтрокиУдостоверений[0].НомДок)) > 25 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Длина серии и номера документа доверителя больше 25 символов';
							|en = 'Длина серии и номера документа доверителя больше 25 символов'"), "Доверитель"));
				КонецЕсли;
				
				Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ДатаДок) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задана дата выдачи документа доверителя';
							|en = 'Не задана дата выдачи документа доверителя'"), "Доверитель"));
				ИначеЕсли СтрокиУдостоверений[0].ДатаДок < МинимальнаяДата Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						СтрШаблон(
							НСтр("ru = 'Дата выдачи документа доверителя не может быль раньше %1';
								|en = 'Дата выдачи документа доверителя не может быль раньше %1'"),
							Формат(МинимальнаяДата, "ДЛФ=Д")),
						"Доверитель"));
				ИначеЕсли СтрокиУдостоверений[0].ДатаДок > МаксимальнаяДата Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						СтрШаблон(
							НСтр("ru = 'Дата выдачи документа доверителя не может быль позднее %1';
								|en = 'Дата выдачи документа доверителя не может быль позднее %1'"),
							Формат(МаксимальнаяДата, "ДЛФ=Д")),
						"Доверитель"));
				КонецЕсли;
				
				Если (СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВыдДок))
					И КодВидаДокумента = "21" Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задано наименование органа, выдавшего документ доверителя';
							|en = 'Не задано наименование органа, выдавшего документ доверителя'"), "Доверитель"));
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ОГРН) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан ОГРНИП доверителя';
						|en = 'Не задан ОГРНИП доверителя'"), "Доверитель"));
			ИначеЕсли СтрДлина(Доверенность.ДоверительФЛ_ОГРН) <> 15 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ОГРНИП доверителя';
						|en = 'Указан некорректный ОГРНИП доверителя'"), "Доверитель"));
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН доверителя';
					|en = 'Не задан ИНН доверителя'"), "Доверитель"));
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			Доверенность.ДоверительФЛ_ИНН, Истина) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН доверителя';
					|en = 'Указан некорректный ИНН доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_СНИЛС) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан СНИЛС доверителя';
					|en = 'Не задан СНИЛС доверителя'"), "Доверитель"));
		ИначеЕсли СтрДлина(Доверенность.ДоверительФЛ_СНИЛС) <> 14 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный СНИЛС доверителя';
					|en = 'Указан некорректный СНИЛС доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ДатаРождения) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана дата рождения доверителя';
					|en = 'Не задана дата рождения доверителя'"), "Доверитель"));
		ИначеЕсли Доверенность.ДоверительФЛ_ДатаРождения < МинимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата рождения доверителя не может быль раньше %1';
						|en = 'Дата рождения доверителя не может быль раньше %1'"),
					Формат(МинимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		ИначеЕсли Доверенность.ДоверительФЛ_ДатаРождения > МаксимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата рождения доверителя не может быль позднее %1';
						|en = 'Дата рождения доверителя не может быль позднее %1'"),
					Формат(МаксимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		КонецЕсли;
	КонецЕсли;
	
	// представитель
	
	Если НЕ ЗначениеЗаполнено(Доверенность.Представитель_ИдентификаторСертификата) Тогда
		Представитель_ЮридическоеЛицо = ЗначениеЗаполнено(Доверенность.ПредставительЮЛ_ИНН);
		
		Если Представитель_ЮридическоеЛицо Тогда
			Если НЕ ЗначениеЗаполнено(Доверенность.ПредставительЮЛ_НаимОрг) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано наименование организации представителя';
						|en = 'Не задано наименование организации представителя'"), "Представитель"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ПредставительЮЛ_ИНН) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан ИНН организации представителя';
						|en = 'Не задан ИНН организации представителя'"), "Представитель"));
			ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				Доверенность.ПредставительЮЛ_ИНН, Ложь) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ИНН организации представителя';
						|en = 'Указан некорректный ИНН организации представителя'"), "Представитель"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Доверенность.ПредставительЮЛ_КПП) И СтрДлина(Доверенность.ПредставительЮЛ_КПП) <> 9 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный КПП организации представителя';
						|en = 'Указан некорректный КПП организации представителя'"), "Представитель"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Доверенность.ПредставительЮЛ_ОГРН) И СтрДлина(Доверенность.ПредставительЮЛ_ОГРН) <> 13 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ОГРН организации представителя';
						|en = 'Указан некорректный ОГРН организации представителя'"), "Представитель"));
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Представитель_ЮридическоеЛицо
			ИЛИ ДокументооборотСФССКлиентСервер.НастройкиМЧДФСС().ПредставительСотрудникСУказаниемОрганизации Тогда
			
			СтрокиФИО = Доверенность.ФИО.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана фамилия представителя';
						|en = 'Не задана фамилия представителя'"), "ПредставительФЛ_ФИО"));
			КонецЕсли;
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано имя физлица-представителя';
						|en = 'Не задано имя физлица-представителя'"), "ПредставительФЛ_ФИО"));
			КонецЕсли;
			
			СтрокиУдостоверений = Доверенность.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
			
			Если ДокументооборотСФССКлиентСервер.НастройкиМЧДФСС().ПредставительФЛУдостоверениеОбязательно
				И (СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВидДок)) Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан вид документа физлица-представителя';
						|en = 'Не задан вид документа физлица-представителя'"), "Доверитель"));
			КонецЕсли;
			
			КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
				?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].ВидДок));
			Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
				И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
				И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Вид документа физлица-представителя не поддерживается';
						|en = 'Вид документа физлица-представителя не поддерживается'"), "ПредставительФЛ_Удостоверение"));
			КонецЕсли;
			
			Если ДокументооборотСФССКлиентСервер.НастройкиМЧДФСС().ПредставительФЛУдостоверениеОбязательно
				И (СтрокиУдостоверений.Количество() = 0
				ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтрокиУдостоверений[0].СерДок) + СокрЛП(СтрокиУдостоверений[0].НомДок))) Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не заданы серия и номер документа физлица-представителя';
						|en = 'Не заданы серия и номер документа физлица-представителя'"), "ПредставительФЛ_Удостоверение"));
			КонецЕсли;
			
			Если СтрокиУдостоверений.Количество() <> 0 И СтрДлина(СокрЛП(СтрокиУдостоверений[0].СерДок)
				+ СокрЛП(СтрокиУдостоверений[0].НомДок)) > 25 Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Длина серии и номера документа физлица-представителя больше 25 символов';
						|en = 'Длина серии и номера документа физлица-представителя больше 25 символов'"),
					"ПредставительФЛ_Удостоверение"));
			КонецЕсли;
			
			Если ДокументооборотСФССКлиентСервер.НастройкиМЧДФСС().ПредставительФЛУдостоверениеОбязательно
				И (СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ДатаДок)) Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана дата выдачи документа физлица-представителя';
						|en = 'Не задана дата выдачи документа физлица-представителя'"), "ПредставительФЛ_Удостоверение"));
				
			ИначеЕсли СтрокиУдостоверений.Количество() <> 0 И ЗначениеЗаполнено(СтрокиУдостоверений[0].ДатаДок)
				И СтрокиУдостоверений[0].ДатаДок < МинимальнаяДата Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					СтрШаблон(
						НСтр("ru = 'Дата выдачи документа физлица-представителя не может быль раньше %1';
							|en = 'Дата выдачи документа физлица-представителя не может быль раньше %1'"),
						Формат(МинимальнаяДата, "ДЛФ=Д")),
					"ПредставительФЛ_Удостоверение"));
				
			ИначеЕсли СтрокиУдостоверений.Количество() <> 0 И ЗначениеЗаполнено(СтрокиУдостоверений[0].ДатаДок)
				И СтрокиУдостоверений[0].ДатаДок > МаксимальнаяДата Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					СтрШаблон(
						НСтр("ru = 'Дата выдачи документа физлица-представителя не может быль позднее %1';
							|en = 'Дата выдачи документа физлица-представителя не может быль позднее %1'"),
						Формат(МаксимальнаяДата, "ДЛФ=Д")),
					"ПредставительФЛ_Удостоверение"));
			КонецЕсли;
			
			Если ДокументооборотСФССКлиентСервер.НастройкиМЧДФСС().ПредставительФЛУдостоверениеОбязательно
				И (СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВыдДок))
				И КодВидаДокумента = "21" Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано наименование органа, выдавшего документ физлица-представителя';
						|en = 'Не задано наименование органа, выдавшего документ физлица-представителя'"),
					"ПредставительФЛ_Удостоверение"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ПредставительФЛ_ИНН) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан ИНН физлица-представителя';
						|en = 'Не задан ИНН физлица-представителя'"), "ПредставительФЛ_ИНН"));
			ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				Доверенность.ПредставительФЛ_ИНН, Истина) Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ИНН физлица-представителя';
						|en = 'Указан некорректный ИНН физлица-представителя'"), "ПредставительФЛ_ИНН"));
			КонецЕсли;
			
			Если НЕ Представитель_ЮридическоеЛицо И НЕ Доверенность.Представитель_Физлицо Тогда
				Если НЕ ЗначениеЗаполнено(Доверенность.ПредставительФЛ_ОГРН) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан ОГРНИП физлица-представителя';
							|en = 'Не задан ОГРНИП физлица-представителя'"), "ПредставительФЛ_ОГРН"));
				ИначеЕсли ЗначениеЗаполнено(Доверенность.ПредставительФЛ_ОГРН)
					И СтрДлина(Доверенность.ПредставительФЛ_ОГРН) <> 15 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ОГРНИП физлица-представителя';
							|en = 'Указан некорректный ОГРНИП физлица-представителя'"), "ПредставительФЛ_ОГРН"));
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ПредставительФЛ_СНИЛС) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан СНИЛС физлица-представителя';
						|en = 'Не задан СНИЛС физлица-представителя'"), "ПредставительФЛ_СНИЛС"));
			ИначеЕсли СтрДлина(Доверенность.ПредставительФЛ_СНИЛС) <> 14 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный СНИЛС физлица-представителя';
						|en = 'Указан некорректный СНИЛС физлица-представителя'"), "ПредставительФЛ_СНИЛС"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ПредставительФЛ_ДатаРождения) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана дата рождения физлица-представителя';
						|en = 'Не задана дата рождения физлица-представителя'"), "ПредставительФЛ_ДатаРождения"));
			ИначеЕсли Доверенность.ПредставительФЛ_ДатаРождения < МинимальнаяДата Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					СтрШаблон(
						НСтр("ru = 'Дата рождения физлица-представителя не может быль раньше %1';
							|en = 'Дата рождения физлица-представителя не может быль раньше %1'"),
						Формат(МинимальнаяДата, "ДЛФ=Д")),
					"ПредставительФЛ_ДатаРождения"));
			ИначеЕсли Доверенность.ПредставительФЛ_ДатаРождения > МаксимальнаяДата Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					СтрШаблон(
						НСтр("ru = 'Дата рождения физлица-представителя не может быль позднее %1';
							|en = 'Дата рождения физлица-представителя не может быль позднее %1'"),
						Формат(МаксимальнаяДата, "ДЛФ=Д")),
					"ПредставительФЛ_ДатаРождения"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
		"ПрисоединитьДополнительныеТаблицы
		|ЭтотСписок КАК ЭтотСписок
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Владельцы
		|	ПО Владельцы.Ссылка = ЭтотСписок.Организация
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения
		|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = Владельцы.Ссылка
		|;
		|РазрешитьЧтение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)
		|ИЛИ ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
		|;
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БазовыйФункционалDOM

// https://soltau.ru/index.php/themes/dev/item/413

Функция ПодготовитьДокументDOM(ВходящиеДанные)
	
	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Если ТипЗнч(ТекущиеДанные) = Тип("ДвоичныеДанные") Тогда
		БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ТекущиеДанные);
		ЧтениеXML.ОткрытьПоток(Новый ПотокВПамяти(БуферДанных));
	ИначеЕсли ЭтоФайл Тогда
		ЧтениеXML.ОткрытьФайл(ТекущиеДанные);
	Иначе	
		ЧтениеXML.УстановитьСтроку(ТекущиеДанные);
	КонецЕсли;
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Возврат ДокументDOM;
	
КонецФункции

Функция ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска)
	
	Результат = Новый Массив;
	
	ДокументИлиУзелВладелец = УзелВладелец;
	
	ИменаУзлов = СтрРазделить(ТекстПоиска, "/");
	КоличествоУзлов = ИменаУзлов.Количество();
	Для ИндексУзла = 0 По КоличествоУзлов - 1 Цикл
		ИмяУзла = ИменаУзлов[ИндексУзла];
		Если ИндексУзла = 0 И ИмяУзла = "" Тогда
			ДокументИлиУзелВладелец = УзелВладелец.ДокументВладелец;
		Иначе
			МассивУзлов = ДокументИлиУзелВладелец.ПолучитьЭлементыПоИмени(ИмяУзла);
			Если МассивУзлов.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если ИндексУзла = КоличествоУзлов - 1 Тогда
				Результат = МассивУзлов;
			Иначе
				ДокументИлиУзелВладелец = МассивУзлов[0];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеДаты(ПредставлениеДаты)
	
	Результат = ПредставлениеДаты;
	
	МассивСтроки = СтрРазделить(ПредставлениеДаты, ".", Ложь);
	
	Если МассивСтроки.Количество() = 3 И СтрДлина(МассивСтроки[2]) = 4 Тогда
		Результат = МассивСтроки[2] + МассивСтроки[1] + МассивСтроки[0];
	Иначе
		МассивСтроки = СтрРазделить(ПредставлениеДаты, "-", Ложь);
		Если МассивСтроки.Количество() = 3 И СтрДлина(МассивСтроки[0]) = 4 Тогда
			Результат = МассивСтроки[0] + МассивСтроки[1] + МассивСтроки[2];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеПола(ПредставлениеПола)
	
	Если ПредставлениеПола = "2" Тогда
		Результат = Перечисления.ПолФизическогоЛица.Женский;
	Иначе
		Результат = Перечисления.ПолФизическогоЛица.Мужской;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеСтраны(ПредставлениеСтраны)
	
	Результат = Справочники.СтраныМира.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеСтраны) Тогда
		Результат = Справочники.СтраныМира.НайтиПоКоду(ПредставлениеСтраны);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеВидаДокумента(ПредставлениеДокумента)
	
	ВсеВарианты = Новый Соответствие;
	ВсеВарианты.Вставить("07", "Военный билет");
	ВсеВарианты.Вставить("10", "Паспорт иностранного гражданина");
	ВсеВарианты.Вставить("11", "Свидетельство о рассмотрении ходатайства о признании лица беженцем на территории Российской Федерации по существу");
	ВсеВарианты.Вставить("12", "Вид на жительство в Российской Федерации");
	ВсеВарианты.Вставить("13", "Удостоверение беженца");
	ВсеВарианты.Вставить("15", "Разрешение на временное проживание в Российской Федерации");
	ВсеВарианты.Вставить("19", "Свидетельство о предоставлении временного убежища на территории Российской Федерации");
	ВсеВарианты.Вставить("21", "Паспорт гражданина Российской Федерации");
	ВсеВарианты.Вставить("24", "Удостоверение личности военнослужащего Российской Федерации");
	
	Результат = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеДокумента) Тогда
		Результат = ДокументооборотСКОВызовСервера.ПолучитьВидДокументаПоКодуИлиНаименованию(ПредставлениеДокумента,
			ПредставлениеДокумента);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиЭлементИБ(ЗначениеПоУмолчанию, ФильтрыПоиска)
	
	Результат = ЗначениеПоУмолчанию;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектПоиска.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиФСС КАК ОбъектПоиска
	|ГДЕ
	|	НЕ ОбъектПоиска.ПометкаУдаления
	|{ГДЕ
	|	ОбъектПоиска.Ссылка.*}";
	
	МетаданныеОбъекта = ЗначениеПоУмолчанию.Метаданные();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.МашиночитаемыеДоверенностиФСС", МетаданныеОбъекта.ПолноеИмя());
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст = ТекстЗапроса;
	Построитель.ЗаполнитьНастройки();
	
	Для каждого СтрокаКлюча Из ФильтрыПоиска Цикл
		НовыйОтбор = Построитель.Отбор.Добавить("Ссылка." + СтрокаКлюча.Ключ);
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
		НовыйОтбор.Значение = СтрокаКлюча.Значение;
	КонецЦикла;
	
	Запрос = Построитель.ПолучитьЗапрос();
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() И Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодыскатьИнформациюВладельца(СписокСправочников, ИНН, КПП = "", СНИЛС = "")
	
	Результат = Неопределено;
	
	МассивСправочников = СтрРазделить(СписокСправочников, ",", Ложь);
	
	Если МассивСправочников.Найти("Организации") <> Неопределено Тогда
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("ИНН", ИНН);
		СправочникОрганизации = Метаданные.Справочники.Найти("Организации");
		РеквизитКПП = ?(СправочникОрганизации = Неопределено, Неопределено, СправочникОрганизации.Реквизиты.Найти("КПП"));
		Если РеквизитКПП <> Неопределено И ЗначениеЗаполнено(КПП) Тогда
			СтрокаПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		Результат = НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(), СтрокаПоиска);
	КонецЕсли;
	
	ИмяСправочникаКонтрагенты = "Контрагенты";
	Если НЕ ЗначениеЗаполнено(Результат) И МассивСправочников.Найти(ИмяСправочникаКонтрагенты) <> Неопределено
		И ЭлектронныйДокументооборотСКонтролирующимиОрганами.РеквизитыСправочникаКонтрагентовДоступны(Истина, Истина) Тогда
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("ИНН", ИНН);
		Если ЗначениеЗаполнено(КПП) Тогда
			СтрокаПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		Результат = НайтиЭлементИБ(Справочники[ИмяСправочникаКонтрагенты].ПустаяСсылка(), СтрокаПоиска);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) И МассивСправочников.Найти("ФизическиеЛица") <> Неопределено Тогда
		СправочникФизическиеЛица = Метаданные.Справочники.Найти("ФизическиеЛица");
		Если СправочникФизическиеЛица <> Неопределено И СправочникФизическиеЛица.Реквизиты.Найти("ИНН") <> Неопределено Тогда
			СтрокаПоиска = Новый Структура;
			СтрокаПоиска.Вставить("ИНН", ИНН);
			Если ЗначениеЗаполнено(СНИЛС) Тогда
				Если СправочникФизическиеЛица.Реквизиты.Найти("СтраховойНомерПФР") <> Неопределено Тогда
					СтрокаПоиска.Вставить("СтраховойНомерПФР", СНИЛС);
				ИначеЕсли СправочникФизическиеЛица.Реквизиты.Найти("СНИЛС") <> Неопределено Тогда
					СтрокаПоиска.Вставить("СНИЛС", СНИЛС);
				КонецЕсли;
			КонецЕсли;
			Результат = НайтиЭлементИБ(Справочники.ФизическиеЛица.ПустаяСсылка(), СтрокаПоиска);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит элемент документа DOM, проверяет что оно одно и пытается получить значение и привести тип.
//
Функция ПолучитьЗначениеДокумента(УзелВладелец, ТекстПоиска, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	
	ВыборкаЭлементов = ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска);
	
	Если ВыборкаЭлементов.Количество() = 1 Тогда
		
		ЭлементВыборки = ВыборкаЭлементов[0];
		Если ТипЗнч(ЭлементВыборки) = Тип("АтрибутDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.Значение;
		ИначеЕсли ТипЗнч(ЭлементВыборки) = Тип("ЭлементDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.ТекстовоеСодержимое;
		Иначе
			ПредставлениеЗначения = ЭлементВыборки.ЗначениеУзла;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Дата") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеДаты(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеПола(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.СтраныМира") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеСтраны(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеВидаДокумента(ПредставлениеЗначения);
		КонецЕсли;
		
		Если ЗначениеПоУмолчанию <> Неопределено Тогда
			МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЗначениеПоУмолчанию));
			ТекущийТип = Новый ОписаниеТипов(МассивТипов);
			Результат = ТекущийТип.ПривестиЗначение(ПредставлениеЗначения);
		Иначе
			Результат = ПредставлениеЗначения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьУзелXML(данныеXML, ИмяУзла, ЗначениеУзла, ВыгружатьПустые = Истина, ДатаБезВремени = Ложь)
	
	ПредставлениеЗначения = ЗначениеВыгрузкиXML(ЗначениеУзла, ДатаБезВремени);
	
	Если ВыгружатьПустые ИЛИ ЗначениеЗаполнено(ЗначениеУзла) И (ЗначениеУзла <> Ложь) Тогда
		данныеXML.ЗаписатьНачалоЭлемента(ИмяУзла);
		данныеXML.ЗаписатьТекст(ПредставлениеЗначения);
		данныеXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьАтрибутУзлаXML(данныеXML, ИмяАтрибута, ЗначениеАтрибута, ВыгружатьПустые = Истина, ДатаБезВремени = Ложь)
	
	ПредставлениеЗначения = ЗначениеВыгрузкиXML(ЗначениеАтрибута, ДатаБезВремени);
	
	Если ВыгружатьПустые ИЛИ ЗначениеЗаполнено(ЗначениеАтрибута) И (ЗначениеАтрибута <> Ложь) Тогда
		данныеXML.ЗаписатьНачалоАтрибута(ИмяАтрибута);
		данныеXML.ЗаписатьТекст(ПредставлениеЗначения);
		данныеXML.ЗаписатьКонецАтрибута();
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеВыгрузкиXML(ЗначениеВыгрузки, ДатаБезВремени = Ложь)
	
	Результат = Строка(ЗначениеВыгрузки);
	Результат = СокрЛП(Результат);
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВыгрузки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеВыгрузки) = Тип("Булево") Тогда
		Результат = ?(ЗначениеВыгрузки, "true", "false");
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("Дата") Тогда
		Если ДатаБезВремени Тогда
			Результат = Формат(ЗначениеВыгрузки, "ДФ=гггг-ММ-дд");
		Иначе
			Результат = Формат(ЗначениеВыгрузки, "ДФ=гггг-ММ-ддTЧЧ:мм:сс");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("СправочникСсылка.СтраныМира") Тогда
		Результат = ЗначениеВыгрузки.Код;
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
		Результат = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(ЗначениеВыгрузки);
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
		Если ЗначениеВыгрузки = Перечисления.ПолФизическогоЛица.Женский Тогда
			Результат = "2";
		Иначе	
			Результат = "1";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаЭлементаСправочника

Функция ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующийИлиСсылкаИлиРежим)
	
	Результат = Неопределено;
	НашлиЭлемент = Неопределено;
	
	Если ТипЗнч(ОбновлятьСуществующийИлиСсылкаИлиРежим) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФСС") Тогда
		НашлиЭлемент = ОбновлятьСуществующийИлиСсылкаИлиРежим;
		
	Иначе
		Если ОбновлятьСуществующийИлиСсылкаИлиРежим = Истина
			ИЛИ ОбновлятьСуществующийИлиСсылкаИлиРежим = "ЗапрещеноОбновлятьСуществующий" Тогда
			
			СтрокаПоиска = Новый Структура;
			СтрокаПоиска.Вставить("НомерДоверенности", 	ДанныеДоверенности.НомерДоверенности);
			СтрокаПоиска.Вставить("Организация", 		ДанныеДоверенности.Организация);
			НашлиЭлемент = НайтиЭлементИБ(Справочники.МашиночитаемыеДоверенностиФСС.ПустаяСсылка(), СтрокаПоиска);
			
			Если ЗначениеЗаполнено(НашлиЭлемент)
				И ОбновлятьСуществующийИлиСсылкаИлиРежим = "ЗапрещеноОбновлятьСуществующий" Тогда
				
				Возврат "ЗапрещеноОбновлятьСуществующий";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НашлиЭлемент) Тогда
		ОбъектСправочника = Справочники.МашиночитаемыеДоверенностиФСС.СоздатьЭлемент();
	Иначе
		ОбъектСправочника = НашлиЭлемент.ПолучитьОбъект();
		Для каждого СтрокаРеквизита Из ОбъектСправочника.Метаданные().Реквизиты Цикл
			ОбъектСправочника[СтрокаРеквизита.Имя] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	// здесь переносим значения реквизитов
	ЗаполнитьЗначенияСвойств(ОбъектСправочника, ДанныеДоверенности);
	
	ТабличныеЧасти = Новый Структура;
	ТабличныеЧасти.Вставить("ФИО", ДанныеДоверенности.ФИО);
	ТабличныеЧасти.Вставить("ПолномочияПредставителя", ДанныеДоверенности.ПолномочияПредставителя);
	ТабличныеЧасти.Вставить("УдостоверенияЛичности", ДанныеДоверенности.УдостоверенияЛичности);
	
	Для каждого СтрокаТЧ Из ТабличныеЧасти Цикл
		ТекущаяТЧ = ОбъектСправочника[СтрокаТЧ.Ключ];
		ТекущаяТЧ.Очистить();
		Для каждого НоваяСтрока Из СтрокаТЧ.Значение Цикл
			ДобавленнаяСтрока = ТекущаяТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НоваяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеДоверенности.Свойство("ДанныеВыгрузки") И ДанныеДоверенности.ДанныеВыгрузки <> Неопределено Тогда
		ОбъектСправочника.ФайлВырузки = Новый ХранилищеЗначения(ДанныеДоверенности.ДанныеВыгрузки, Новый СжатиеДанных(9));
	КонецЕсли;
	Если ДанныеДоверенности.Свойство("ДанныеПодписи") И ДанныеДоверенности.ДанныеПодписи <> Неопределено Тогда
		ОбъектСправочника.ЭлектроннаяПодпись = Новый ХранилищеЗначения(ДанныеДоверенности.ДанныеПодписи,
			Новый СжатиеДанных(9));
	КонецЕсли;
	
	Удачно = Ложь;
	
	Если ОбъектСправочника.ПроверитьЗаполнение() Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.МашиночитаемыеДоверенностиФСС");
		Если НЕ ОбъектСправочника.ЭтоНовый() Тогда
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектСправочника.Ссылка);
		КонецЕсли;	
		
		Удачно = Истина;
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка.Заблокировать();
			ОбъектСправочника.Записать();
			
		Исключение
			ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Ошибка изменения МЧД СФР (бывш. ФСС).';
								|en = 'Электронный документооборот с контролирующими органами. Ошибка изменения МЧД СФР (бывш. ФСС).'", ОбщегоНазначения.КодОсновногоЯзыка());
			ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,,,
				ДанныеОшибки);
			Удачно = Ложь;
		КонецПопытки;
		
		Если Удачно Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Удачно Тогда
		Результат = ОбъектСправочника.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) И ДанныеДоверенности.Свойство("Подписана") И ДанныеДоверенности.Подписана = Истина
		И ДанныеДоверенности.Свойство("ДанныеВыгрузки") И ДанныеДоверенности.ДанныеВыгрузки <> Неопределено Тогда
		
		ДатаСеанса = ТекущаяДатаСеанса();
		ДанныеВыгрузки64 = Base64Строка(ДанныеДоверенности.ДанныеВыгрузки);
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		НастройкиОтправки = Новый Структура;
		НастройкиОтправки.Вставить("ОтчетСсылка", 		Результат);
		НастройкиОтправки.Вставить("СтатусОтправки", 	Перечисления.СтатусыОтправки.Сдан);
		НастройкиОтправки.Вставить("ПодписанныйПакет", 	ДанныеВыгрузки64);
		НастройкиОтправки.Вставить("ВидОтчета", 		Справочники.ВидыОтправляемыхДокументов.МашиночитаемыеДоверенностиФСС);
		НастройкиОтправки.Вставить("ДатаОтправки", 		ДатаСеанса);
		НастройкиОтправки.Вставить("Организация", 		ДанныеДоверенности.Организация);
		
		КонтекстЭДОСервер.ДобавитьОтправкуФСС(
			Ложь,
			"P_" + ДанныеДоверенности.НомерДоверенности + ".xml",
			ДанныеДоверенности.ДанныеВыгрузки,
			"МЧД_" + Строка(Новый УникальныйИдентификатор),
			НастройкиОтправки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

Функция ДанныеИзИнформационнойБазы(СправочникСсылка)
	
	Результат = Новый Структура;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиФССПолномочияПредставителя.Ссылка КАК Доверенность,
		|	МашиночитаемыеДоверенностиФССПолномочияПредставителя.КодПолномочия КАК КодПолномочия,
		|	МашиночитаемыеДоверенностиФССПолномочияПредставителя.НаименованиеПолномочия КАК НаименованиеПолномочия,
		|	МашиночитаемыеДоверенностиФССПолномочияПредставителя.ПризнакПередоверия КАК ПризнакПередоверия,
		|	МашиночитаемыеДоверенностиФССПолномочияПредставителя.ДатаНачала КАК ДатаНачала,
		|	МашиночитаемыеДоверенностиФССПолномочияПредставителя.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиФСС.ПолномочияПредставителя КАК МашиночитаемыеДоверенностиФССПолномочияПредставителя
		|ГДЕ
		|	МашиночитаемыеДоверенностиФССПолномочияПредставителя.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиФССФИО.Владелец КАК Владелец,
		|	МашиночитаемыеДоверенностиФССФИО.Фамилия КАК Фамилия,
		|	МашиночитаемыеДоверенностиФССФИО.Имя КАК Имя,
		|	МашиночитаемыеДоверенностиФССФИО.Отчество КАК Отчество
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиФСС.ФИО КАК МашиночитаемыеДоверенностиФССФИО
		|ГДЕ
		|	МашиночитаемыеДоверенностиФССФИО.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиФСС.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиФСС.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиФСС.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиФСС.НомерРодительскойДоверенности КАК НомерРодительскойДоверенности,
		|	МашиночитаемыеДоверенностиФСС.Организация КАК Организация,
		|	МашиночитаемыеДоверенностиФСС.Доверитель_СтраховательФизлицо КАК Доверитель_СтраховательФизлицо,
		|	МашиночитаемыеДоверенностиФСС.ДоверительЮЛ_ИностраннаяОрганизация КАК ДоверительЮЛ_ИностраннаяОрганизация,
		|	МашиночитаемыеДоверенностиФСС.ДоверительЮЛ_ИНН КАК ДоверительЮЛ_ИНН,
		|	МашиночитаемыеДоверенностиФСС.ДоверительЮЛ_КПП КАК ДоверительЮЛ_КПП,
		|	МашиночитаемыеДоверенностиФСС.ДоверительЮЛ_ОГРН КАК ДоверительЮЛ_ОГРН,
		|	МашиночитаемыеДоверенностиФСС.ДоверительЮЛ_Адр КАК ДоверительЮЛ_Адр,
		|	МашиночитаемыеДоверенностиФСС.ДоверительФЛ_ДобровольноЗастрахованный КАК ДоверительФЛ_ДобровольноЗастрахованный,
		|	МашиночитаемыеДоверенностиФСС.ДоверительФЛ_РегистрационныйНомерФСС КАК ДоверительФЛ_РегистрационныйНомерФСС,
		|	МашиночитаемыеДоверенностиФСС.ДоверительФЛ_КодПодчиненностиФСС КАК ДоверительФЛ_КодПодчиненностиФСС,
		|	МашиночитаемыеДоверенностиФСС.ДоверительФЛ_ИНН КАК ДоверительФЛ_ИНН,
		|	МашиночитаемыеДоверенностиФСС.ДоверительФЛ_ОГРН КАК ДоверительФЛ_ОГРН,
		|	МашиночитаемыеДоверенностиФСС.ДоверительФЛ_СНИЛС КАК ДоверительФЛ_СНИЛС,
		|	МашиночитаемыеДоверенностиФСС.ДоверительФЛ_ДатаРождения КАК ДоверительФЛ_ДатаРождения,
		|	МашиночитаемыеДоверенностиФСС.ДоверительЮЛ_НаимОрг КАК ДоверительЮЛ_НаимОрг,
		|	МашиночитаемыеДоверенностиФСС.ЛицоБезДовФЛ_ИНН КАК ЛицоБезДовФЛ_ИНН,
		|	МашиночитаемыеДоверенностиФСС.ЛицоБезДовФЛ_СНИЛС КАК ЛицоБезДовФЛ_СНИЛС,
		|	МашиночитаемыеДоверенностиФСС.ЛицоБезДовФЛ_ДатаРождения КАК ЛицоБезДовФЛ_ДатаРождения,
		|	МашиночитаемыеДоверенностиФСС.Доверитель_ПодписаноНотариусом КАК Доверитель_ПодписаноНотариусом,
		|	МашиночитаемыеДоверенностиФСС.Доверитель_ОснованиеСоставленияНотариусом КАК Доверитель_ОснованиеСоставленияНотариусом,
		|	МашиночитаемыеДоверенностиФСС.ПредставительЮЛ_ИностраннаяОрганизация КАК ПредставительЮЛ_ИностраннаяОрганизация,
		|	МашиночитаемыеДоверенностиФСС.ПредставительЮЛ_НаимОрг КАК ПредставительЮЛ_НаимОрг,
		|	МашиночитаемыеДоверенностиФСС.ПредставительЮЛ_ИНН КАК ПредставительЮЛ_ИНН,
		|	МашиночитаемыеДоверенностиФСС.ПредставительЮЛ_КПП КАК ПредставительЮЛ_КПП,
		|	МашиночитаемыеДоверенностиФСС.ПредставительЮЛ_ОГРН КАК ПредставительЮЛ_ОГРН,
		|	МашиночитаемыеДоверенностиФСС.ПредставительЮЛ_Адр КАК ПредставительЮЛ_Адр,
		|	МашиночитаемыеДоверенностиФСС.Представитель_Физлицо КАК Представитель_Физлицо,
		|	МашиночитаемыеДоверенностиФСС.ПредставительФЛ_ИНН КАК ПредставительФЛ_ИНН,
		|	МашиночитаемыеДоверенностиФСС.ПредставительФЛ_ОГРН КАК ПредставительФЛ_ОГРН,
		|	МашиночитаемыеДоверенностиФСС.ПредставительФЛ_СНИЛС КАК ПредставительФЛ_СНИЛС,
		|	МашиночитаемыеДоверенностиФСС.ПредставительФЛ_ДатаРождения КАК ПредставительФЛ_ДатаРождения,
		|	МашиночитаемыеДоверенностиФСС.Представитель_ИдентификаторСертификата КАК Представитель_ИдентификаторСертификата,
		|	МашиночитаемыеДоверенностиФСС.Представитель_Сертификат КАК Представитель_Сертификат,
		|	МашиночитаемыеДоверенностиФСС.Примечание КАК Примечание
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиФСС КАК МашиночитаемыеДоверенностиФСС
		|ГДЕ
		|	МашиночитаемыеДоверенностиФСС.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиФССУдостоверенияЛичности.Владелец КАК Владелец,
		|	МашиночитаемыеДоверенностиФССУдостоверенияЛичности.ВидДок КАК ВидДок,
		|	МашиночитаемыеДоверенностиФССУдостоверенияЛичности.СерДок КАК СерДок,
		|	МашиночитаемыеДоверенностиФССУдостоверенияЛичности.НомДок КАК НомДок,
		|	МашиночитаемыеДоверенностиФССУдостоверенияЛичности.ДатаДок КАК ДатаДок,
		|	МашиночитаемыеДоверенностиФССУдостоверенияЛичности.ВыдДок КАК ВыдДок,
		|	МашиночитаемыеДоверенностиФССУдостоверенияЛичности.КодВыдДок КАК КодВыдДок
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиФСС.УдостоверенияЛичности КАК МашиночитаемыеДоверенностиФССУдостоверенияЛичности
		|ГДЕ
		|	МашиночитаемыеДоверенностиФССУдостоверенияЛичности.Ссылка = &СправочникСсылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СправочникСсылка", СправочникСсылка);
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	ВыборкаПолномочий = ПакетЗапросов[0].Выгрузить();
	
	ПолномочияПредставителя = Новый Массив;
	Для каждого ЭлементВыборки Из ВыборкаПолномочий Цикл
		ПолномочиеПредставителя = Новый Структура;
		ПолномочиеПредставителя.Вставить("КодПолномочия", 			ЭлементВыборки.КодПолномочия);
		ПолномочиеПредставителя.Вставить("НаименованиеПолномочия", 	ЭлементВыборки.НаименованиеПолномочия);
		ПолномочиеПредставителя.Вставить("ПризнакПередоверия", 		ЭлементВыборки.ПризнакПередоверия);
		ПолномочиеПредставителя.Вставить("ДатаНачала", 				ЭлементВыборки.ДатаНачала);
		ПолномочиеПредставителя.Вставить("ДатаОкончания", 			ЭлементВыборки.ДатаОкончания);
		ПолномочияПредставителя.Добавить(ПолномочиеПредставителя);
	КонецЦикла;
	Результат.Вставить("ПолномочияПредставителя", ПолномочияПредставителя);
	
	ВыборкаПодписантов = ПакетЗапросов[1].Выгрузить();
	ВыборкаДокументов = ПакетЗапросов[3].Выгрузить();
	
	ПустойПодписант = Новый Структура("Имя, Отчество, Фамилия", "", "", "");
	ПустойДокумент = Новый Структура("ВидДок, СерДок, НомДок, ДатаДок, ВыдДок, КодВыдДок", "", "", "", "", "", "", "");
	
	ВыборкаИнформации = ПакетЗапросов[2].Выбрать();
	Если ВыборкаИнформации.Следующий() Тогда
		Результат.Вставить("Номер", ВыборкаИнформации.НомерДоверенности);
		Результат.Вставить("ДатаВыдачи", ВыборкаИнформации.ДатаВыдачи);
		Результат.Вставить("ДатаОкончания", ВыборкаИнформации.ДатаОкончания);
		Результат.Вставить("НомерРодительскойДоверенности", ВыборкаИнформации.НомерРодительскойДоверенности);
		
		// информация об доверителе
		Результат.Вставить("Организация", ВыборкаИнформации.Организация);
		Результат.Вставить("Доверитель_СтраховательФизлицо", ВыборкаИнформации.Доверитель_СтраховательФизлицо);
		Результат.Вставить("ИностраннаяОрганизация", ВыборкаИнформации.ДоверительЮЛ_ИностраннаяОрганизация);
		Результат.Вставить("ДоверительЮЛ_ИНН", ВыборкаИнформации.ДоверительЮЛ_ИНН);
		Результат.Вставить("ДоверительЮЛ_КПП", ВыборкаИнформации.ДоверительЮЛ_КПП);
		Результат.Вставить("ДоверительЮЛ_ОГРН", ВыборкаИнформации.ДоверительЮЛ_ОГРН);
		Результат.Вставить("ДоверительЮЛ_Адр", ВыборкаИнформации.ДоверительЮЛ_Адр);
		Результат.Вставить("ДоверительФЛ_ДобровольноЗастрахованный",
			ВыборкаИнформации.ДоверительФЛ_ДобровольноЗастрахованный);
		Результат.Вставить("ДоверительФЛ_РегистрационныйНомерФСС", ВыборкаИнформации.ДоверительФЛ_РегистрационныйНомерФСС);
		Результат.Вставить("ДоверительФЛ_КодПодчиненностиФСС", ВыборкаИнформации.ДоверительФЛ_КодПодчиненностиФСС);
		Результат.Вставить("ДоверительФЛ_ИНН", ВыборкаИнформации.ДоверительФЛ_ИНН);
		Результат.Вставить("ДоверительФЛ_ОГРН", ВыборкаИнформации.ДоверительФЛ_ОГРН);
		Результат.Вставить("ДоверительФЛ_СНИЛС", ВыборкаИнформации.ДоверительФЛ_СНИЛС);
		Результат.Вставить("ДоверительФЛ_ДатаРождения", ВыборкаИнформации.ДоверительФЛ_ДатаРождения);
		Результат.Вставить("ДоверительЮЛ_НаимОрг", ВыборкаИнформации.ДоверительЮЛ_НаимОрг);
		Результат.Вставить("Доверитель_ПодписаноНотариусом", ВыборкаИнформации.Доверитель_ПодписаноНотариусом);
		Результат.Вставить("Доверитель_ОснованиеСоставленияНотариусом",
			ВыборкаИнформации.Доверитель_ОснованиеСоставленияНотариусом);
		
		Если Результат.ИностраннаяОрганизация Тогда
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ИО");
		ИначеЕсли ЗначениеЗаполнено(Результат.ДоверительЮЛ_ИНН) Тогда
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ЮЛ");
		Иначе
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ФЛ");
		КонецЕсли;
		
		// информация об подписанте
		Результат.Вставить("ЛицоБезДовФЛ_ИНН", ВыборкаИнформации.ЛицоБезДовФЛ_ИНН);
		Результат.Вставить("ЛицоБезДовФЛ_СНИЛС", ВыборкаИнформации.ЛицоБезДовФЛ_СНИЛС);
		Результат.Вставить("ЛицоБезДовФЛ_ДатаРождения", ВыборкаИнформации.ЛицоБезДовФЛ_ДатаРождения);
		
		НашлиСтрокиПередоверие = Новый Массив;
		Если Результат.ДоверительЮЛ_ТипОрганизации = "ФЛ" Тогда
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
			Если ЗначениеЗаполнено(ВыборкаИнформации.НомерРодительскойДоверенности) Тогда
				НашлиСтрокиПередоверие = ВыборкаПодписантов.НайтиСтроки(
					Новый Структура("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительРук));
			КонецЕсли;
		Иначе
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительРук));
		КонецЕсли;
		
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиФИО = ПустойПодписант;
		Иначе
			НашлиФИО = НашлиСтроки[0];
		КонецЕсли;
		
		Если НашлиСтрокиПередоверие.Количество() = 0 Тогда
			НашлиФИОПередоверие = ПустойПодписант;
		Иначе
			НашлиФИОПередоверие = НашлиСтрокиПередоверие[0];
		КонецЕсли;
		
		Результат.Вставить("ЛицоБезДовФЛ_Имя", НашлиФИО.Имя);
		Результат.Вставить("ЛицоБезДовФЛ_Отчество", НашлиФИО.Отчество);
		Результат.Вставить("ЛицоБезДовФЛ_Фамилия", НашлиФИО.Фамилия);
		
		Результат.Вставить("ЛицоБезДовФЛПередоверие_Имя", НашлиФИОПередоверие.Имя);
		Результат.Вставить("ЛицоБезДовФЛПередоверие_Отчество", НашлиФИОПередоверие.Отчество);
		Результат.Вставить("ЛицоБезДовФЛПередоверие_Фамилия", НашлиФИОПередоверие.Фамилия);
		
		НашлиСтроки = ВыборкаДокументов.НайтиСтроки(Новый Структура("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиДок = ПустойДокумент;
		Иначе
			НашлиДок = НашлиСтроки[0];
		КонецЕсли;
		
		Результат.Вставить("ЛицоБезДовФЛ_ВидДок", НашлиДок.ВидДок);
		Результат.Вставить("ЛицоБезДовФЛ_СерДок", НашлиДок.СерДок);
		Результат.Вставить("ЛицоБезДовФЛ_НомДок", НашлиДок.НомДок);
		Результат.Вставить("ЛицоБезДовФЛ_ДатаДок", НашлиДок.ДатаДок);
		Результат.Вставить("ЛицоБезДовФЛ_ВыдДок", НашлиДок.ВыдДок);
		Результат.Вставить("ЛицоБезДовФЛ_КодВыдДок", НашлиДок.КодВыдДок);
		
		// информация о представителе
		Результат.Вставить("ПредставительЮЛ_ИностраннаяОрганизация",
			ВыборкаИнформации.ПредставительЮЛ_ИностраннаяОрганизация);
		Результат.Вставить("ПредставительЮЛ_НаимОрг", ВыборкаИнформации.ПредставительЮЛ_НаимОрг);
		Результат.Вставить("ПредставительЮЛ_ИНН", ВыборкаИнформации.ПредставительЮЛ_ИНН);
		Результат.Вставить("ПредставительЮЛ_КПП", ВыборкаИнформации.ПредставительЮЛ_КПП);
		Результат.Вставить("ПредставительЮЛ_ОГРН", ВыборкаИнформации.ПредставительЮЛ_ОГРН);
		Результат.Вставить("ПредставительЮЛ_Адр", ВыборкаИнформации.ПредставительЮЛ_Адр);
		Результат.Вставить("Представитель_Физлицо", ВыборкаИнформации.Представитель_Физлицо);
		Результат.Вставить("ПредставительФЛ_ИНН", ВыборкаИнформации.ПредставительФЛ_ИНН);
		Результат.Вставить("ПредставительФЛ_ОГРН", ВыборкаИнформации.ПредставительФЛ_ОГРН);
		Результат.Вставить("ПредставительФЛ_СНИЛС", ВыборкаИнформации.ПредставительФЛ_СНИЛС);
		Результат.Вставить("ПредставительФЛ_ДатаРождения", ВыборкаИнформации.ПредставительФЛ_ДатаРождения);
		Результат.Вставить("Представитель_ИдентификаторСертификата",
			ВыборкаИнформации.Представитель_ИдентификаторСертификата);
		ДанныеСертификата = ВыборкаИнформации.Представитель_Сертификат.Получить();
		Результат.Вставить("Представитель_Сертификат", ДанныеСертификата);
		Результат.Вставить("Примечание", ВыборкаИнформации.Примечание);
		
		ТипВладельца = Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ;
		НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец", ТипВладельца));
		
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиФИО = ПустойПодписант;
		Иначе
			НашлиФИО = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ПредставительФЛ_Имя", НашлиФИО.Имя);
		Результат.Вставить("ПредставительФЛ_Отчество", НашлиФИО.Отчество);
		Результат.Вставить("ПредставительФЛ_Фамилия", НашлиФИО.Фамилия);
		
		НашлиСтроки = ВыборкаДокументов.НайтиСтроки(Новый Структура("Владелец", ТипВладельца));
		
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиДок = ПустойДокумент;
		Иначе
			НашлиДок = НашлиСтроки[0];
		КонецЕсли;
		
		Результат.Вставить("ПредставительФЛ_ВидДок", НашлиДок.ВидДок);
		Результат.Вставить("ПредставительФЛ_СерДок", НашлиДок.СерДок);
		Результат.Вставить("ПредставительФЛ_НомДок", НашлиДок.НомДок);
		Результат.Вставить("ПредставительФЛ_ДатаДок", НашлиДок.ДатаДок);
		Результат.Вставить("ПредставительФЛ_ВыдДок", НашлиДок.ВыдДок);
		Результат.Вставить("ПредставительФЛ_КодВыдДок", НашлиДок.КодВыдДок);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыгрузитьУдостоверениеУзла(
		ЗаписьXML,
		ВидДокумента,
		СерияДокумента,
		НомерДокумента,
		ДатаВыдачи,
		Выдан,
		КодПодразделения)
	
	Если НЕ ЗначениеЗаполнено(ВидДокумента) И НЕ ЗначениеЗаполнено(СерияДокумента) И НЕ ЗначениеЗаполнено(НомерДокумента)
		И НЕ ЗначениеЗаполнено(ДатаВыдачи) И НЕ ЗначениеЗаполнено(Выдан) И НЕ ЗначениеЗаполнено(ДатаВыдачи) Тогда
		
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("personDocument");
	
	ЗаписатьУзелXML(ЗаписьXML, "identityDocument", 	ВидДокумента, Ложь);
	ЗаписатьУзелXML(ЗаписьXML, "series", 			СерияДокумента, Ложь);
	ЗаписатьУзелXML(ЗаписьXML, "number", 			НомерДокумента, Ложь);
	ЗаписатьУзелXML(ЗаписьXML, "issuedDate", 		ДатаВыдачи, Ложь, Истина);
	ЗаписатьУзелXML(ЗаписьXML, "issuedBy", 			Выдан, Ложь);
	ЗаписатьУзелXML(ЗаписьXML, "issuedByCode", 		КодПодразделения, Ложь);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
