#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТКА

// Функция возвращает таблицу с планируемыми и фактическими задачами.
//
// Параметры:
//  МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - Модель для которой строится расписание
//  НачалоПериода - Дата - Начало периода.
//  КонецПериода - Дата - Конец периода.
//  ДополнятьФактическимиЗадачами - Булево - Если Истина, то будут заполнены данные о фактических задачах.
//  ПроверятьЗадачиДругихПериодов - Булево - Если Ложь, то начало периода отсекается началом действия модели.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Расписание бюджетного процесса с даты начала действия модели по параметр "НаДату".
//
Функция ПолучитьБюджетныеЗадачи(Знач МодельБюджетирования, Знач НачалоПериода = Неопределено, Знач КонецПериода,
									Знач ДополнятьФактическимиЗадачами = Ложь, Знач ПроверятьЗадачиДругихПериодов = Ложь) Экспорт
	
	НачалоДействияМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МодельБюджетирования, "НачалоДействия");
	Если Не ЗначениеЗаполнено(НачалоДействияМодели) Тогда
		Возврат ШаблонЗадач();
	КонецЕсли;
	
	Если НачалоПериода = Неопределено Тогда
		НачалоПериода = НачалоДействияМодели;
	ИначеЕсли Не ПроверятьЗадачиДругихПериодов Тогда
		НачалоПериода = Макс(НачалоПериода, НачалоДействияМодели);
	КонецЕсли;
	
	ТаблицаРезультат = ЗадачиБюджетирования(МодельБюджетирования,
			НачалоПериода,
			КонецПериода,
			ДополнятьФактическимиЗадачами,
			ПроверятьЗадачиДругихПериодов);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Функция возвращает таблицу со связями задач между собой.
//
// Параметры:
//  ТаблицаЗадач - ТаблицаЗначений - Таблица, полученная функцией "ПолучитьБюджетныеЗадачи".
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица связей между задачами.
//
Функция СвязиЗадач(ТаблицаЗадач) Экспорт
	
	ТаблицаСвязейЗадач = Новый ТаблицаЗначений;
	ТаблицаСвязейЗадач.Колонки.Добавить("ПредыдущаяЗадача", Новый ОписаниеТипов("Число"));
	ТаблицаСвязейЗадач.Колонки.Добавить("Задача", 			Новый ОписаниеТипов("Число"));
	ТаблицаСвязейЗадач.Колонки.Добавить("СледующаяЗадача", 	Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаЗадачи Из ТаблицаЗадач Цикл
		НоваяСтрока = ТаблицаСвязейЗадач.Добавить();
		НоваяСтрока.Задача = СтрокаЗадачи.НомерЗадачи;
		ТаблицаПредыдущих = СтрокаЗадачи.ПредыдущиеЗадачи;
		Если ЗначениеЗаполнено(ТаблицаПредыдущих) Тогда
			Для Каждого ПредыдущаяЗадача Из ТаблицаПредыдущих Цикл
				НоваяСтрока = ТаблицаСвязейЗадач.Добавить();
				НоваяСтрока.Задача = СтрокаЗадачи.НомерЗадачи;
				НоваяСтрока.ПредыдущаяЗадача = ПредыдущаяЗадача.НомерЗадачи;
				НоваяСтрока = ТаблицаСвязейЗадач.Добавить();
				НоваяСтрока.Задача = ПредыдущаяЗадача.НомерЗадачи;
				НоваяСтрока.СледующаяЗадача = СтрокаЗадачи.НомерЗадачи;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСвязейЗадач.Сортировать("Задача, ПредыдущаяЗадача, СледующаяЗадача");
	
	Возврат ТаблицаСвязейЗадач;
	
КонецФункции

//-- НЕ УТКА

// Проверяет, действует ли модель бюджетирования.
//
// Параметры:
// 	МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - Модель бюджетирования для проверки.
//
// Возвращаемое значение:
// 	Булево - Истина, если модель бюджетирования действует.
// 				Ложь, если модель бюджетирования не действует.
//
Функция МодельБюджетированияДействует(МодельБюджетирования) Экспорт
	
	Если НЕ ЗначениеЗаполнено(МодельБюджетирования) Тогда
		Действует = Ложь;
	Иначе
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МодельБюджетирования, 
			Новый Структура("ПометкаУдаления, Статус"));
			
		Действует = НЕ РеквизитыОбъекта.ПометкаУдаления
				И РеквизитыОбъекта.Статус = Перечисления.СтатусыМоделейБюджетирования.Действует;
	КонецЕсли;
		
	Возврат Действует;
	
КонецФункции

// Возвращает количество действующих моделей бюджетирования.
//
// Возвращаемое значение:
// 	 Число - Количество действующих моделей.
//
Функция КоличествоДействующихМоделейБюджетирования() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	СУММА(1) КАК Количество
		|ИЗ
		|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
		|ГДЕ
		|	МоделиБюджетирования.Статус = &Статус
		|	И НЕ МоделиБюджетирования.ПометкаУдаления");
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыМоделейБюджетирования.Действует);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Количество, 0);
	
КонецФункции

// Получает модель бюджетирования по умолчанию для подстановки.
//
// Возвращаемое значение:
// 	СправочникСсылка.МоделиБюджетирования - Модель бюджетирования по умолчанию или найденная по статистике.
// 	Неопределено - Если действующих моделей бюджетирования нет.
//
Функция МодельБюджетированияПоУмолчанию() Экспорт
	
	МодельБюджетированияПоУмолчанию = Неопределено;
	
	СтатусДействует = Перечисления.СтатусыМоделейБюджетирования.Действует;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
		|	МоделиБюджетирования.Ссылка КАК МодельБюджетирования
		|ИЗ
		|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
		|ГДЕ
		|	МоделиБюджетирования.Статус = &Статус
		|	И НЕ МоделиБюджетирования.ПометкаУдаления");
	Запрос.УстановитьПараметр("Статус", СтатусДействует);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		МодельБюджетированияПоУмолчанию = Выборка.МодельБюджетирования;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МодельБюджетированияПоУмолчанию) И Выборка.Количество() > 1 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ОписаниеРеквизитов = Новый Структура;
		ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "МодельБюджетирования");
		ЗаполняемыеРеквизиты = ЗаполнениеОбъектовПоСтатистике.ПолучитьЗначенияРеквизитов(
			Документы.ЭкземплярБюджета.ПустаяСсылка(), ОписаниеРеквизитов);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ЗначениеЗаполнено(ЗаполняемыеРеквизиты.МодельБюджетирования)
			И МодельБюджетированияДействует(ЗаполняемыеРеквизиты.МодельБюджетирования) Тогда
			МодельБюджетированияПоУмолчанию = ЗаполняемыеРеквизиты.МодельБюджетирования;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МодельБюджетированияПоУмолчанию;
	
КонецФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
// 
// Возвращаемое значение:
// 	Массив - имена блокируемых реквизитов:
//		* БлокируемыйРеквизит - Строка - Имя блокируемого реквизита.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Периодичность");
	Результат.Добавить("НачалоДействия");
	Результат.Добавить("КонецДействия");
	Результат.Добавить("БюджетыПоОрганизациям");
	Результат.Добавить("БюджетыПоПодразделениям");
	Результат.Добавить("ИспользоватьУтверждениеБюджетов");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Дата = '00010101';
	НачалоПериода = '00010101';
	ОкончаниеПериода = '00010101';
	
	ПереопределенныеДанныеВыбора = Неопределено;
	Если Параметры.Свойство("Дата", Дата) Тогда
		
		ПереопределенныеДанныеВыбора = БюджетнаяОтчетностьВызовСервера.МоделиБюджетированияСОтборомПоДате(Дата);
		
	ИначеЕсли Параметры.Свойство("НачалоПериода", НачалоПериода)
			И Параметры.Свойство("ОкончаниеПериода", ОкончаниеПериода) Тогда
		
		ПереопределенныеДанныеВыбора = БюджетнаяОтчетностьВызовСервера.МоделиБюджетированияСОтборомПоПериоду(НачалоПериода, ОкончаниеПериода);
		
	КонецЕсли;
	
	Если ПереопределенныеДанныеВыбора <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПереопределенныеДанныеВыбора;
		
	Иначе
		
		Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТКА

#Область МеханизмФормированияБюджетногоРасписанияСлужебныеПроцедуры

Функция ПолучитьДатуПоКалендарю(МенеджерГрафика, Дата, Отклонение)
	
	Если Отклонение > 0 Тогда
		ЗнакСравнения = ">=";
		Функц = "МАКСИМУМ";
		Порядок = "ВОЗР";
	ИначеЕсли Отклонение < 0 Тогда
		ЗнакСравнения = "<=";
		Функц = "МИНИМУМ";
		Порядок = "УБЫВ";
	Иначе
		Возврат Дата;
	КонецЕсли;
	
	АбсОтклонение = Макс(Отклонение, -Отклонение);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерГрафика;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
		|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
		|ПОМЕСТИТЬ тмпДанныеГрафика
		|ИЗ
		|	ДанныеГрафика КАК КалендарныеГрафики
		|ГДЕ
		|	&ВыражениеУсловия
		|
		|УПОРЯДОЧИТЬ ПО
		|	&ВыражениеУпорядочивания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ВыражениеФункции КАК ДатаГрафика
		|ИЗ
		|	тмпДанныеГрафика КАК тмпДанныеГрафика";
	
	СхемыЗапросов.УстановитьКоличествоПолучаемыхЗаписей(Запрос, АбсОтклонение + 1, 0);
	
	СоединяемыеСтроки = Новый Массив;
	СоединяемыеСтроки.Добавить("КалендарныеГрафики.ДатаГрафика");
	СоединяемыеСтроки.Добавить(ЗнакСравнения);
	СоединяемыеСтроки.Добавить("&ДатаГрафика");
	ВыражениеУсловия = СтрСоединить(СоединяемыеСтроки, " ");
	ВыражениеУпорядочивания = "ДатаГрафика" + " " + Порядок;
	ВыражениеФункции = Функц + "(тмпДанныеГрафика.ДатаГрафика)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеУсловия", ВыражениеУсловия);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеУпорядочивания", ВыражениеУпорядочивания);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеФункции", ВыражениеФункции);
	
	Запрос.УстановитьПараметр("ДатаГрафика", Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Запрос.Текст = "УНИЧТОЖИТЬ тмпДанныеГрафика";
	Запрос.Выполнить();
	
	Если Не ЗначениеЗаполнено(Выборка.ДатаГрафика) Тогда
		Возврат Дата;
	КонецЕсли;
	
	Возврат Выборка.ДатаГрафика;
	
КонецФункции

Процедура ПроверитьЗаполнениеГрафиковЗаПериод(ДатаНачала, ДатаОкончания, График, Отказ)
	Перем Ошибки;
	
	ТаблицаГодов = Новый ТаблицаЗначений;
	ТаблицаГодов.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	ТаблицаГодов.Колонки.Добавить("График", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	
	Для Год = Год(ДатаНачала) По Год(ДатаОкончания) Цикл
		НоваяСтрока = ТаблицаГодов.Добавить();
		НоваяСтрока.Год = Год;
		НоваяСтрока.График = График;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаГодов.Год,
		|	ТаблицаГодов.График
		|ПОМЕСТИТЬ ТаблицаГодов
		|ИЗ
		|	&ТаблицаГодов КАК ТаблицаГодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаГодов.Год,
		|	ТаблицаГодов.График,
		|	КалендарныеГрафики.Год КАК ГодГрафика,
		|	МАКСИМУМ(КалендарныеГрафики.ДеньВключенВГрафик) КАК ДеньВключенВГрафик
		|ПОМЕСТИТЬ ТаблицаПроверки
		|ИЗ
		|	ТаблицаГодов КАК ТаблицаГодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ПО ТаблицаГодов.Год = КалендарныеГрафики.Год
		|			И ТаблицаГодов.График = КалендарныеГрафики.Календарь
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаГодов.График,
		|	ТаблицаГодов.Год,
		|	КалендарныеГрафики.Год
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПроверки.Год КАК Год
		|ИЗ
		|	ТаблицаПроверки КАК ТаблицаПроверки
		|ГДЕ
		|	(ТаблицаПроверки.ГодГрафика ЕСТЬ NULL 
		|			ИЛИ ТаблицаПроверки.ДеньВключенВГрафик = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Год";

	Запрос.УстановитьПараметр("ТаблицаГодов", ТаблицаГодов);
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СообщениеОбОшибке = НСтр("ru = 'Не заполнен основной график работы предприятия на %1 г.';
								|en = 'Main enterprise schedule for %1 is not filled in'");
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, Формат(ВыборкаДетальныеЗаписи.Год, "ЧГ="));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , СообщениеОбОшибке, "");
		Отказ = Истина;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
КонецПроцедуры

Функция ТаблицуНомеровЗадачВСтроку(ТаблицаНомеровЗадач)
	
	Результат = "";
	Для Каждого СтрокаЗадачи Из ТаблицаНомеровЗадач Цикл
		Результат = Результат + "| " + СтрокаЗадачи.НомерЗадачи + " |";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Возвращает шаблон таблицы задач.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * НомерЗадачи - Число -
// * ЭтапПодготовкиБюджетов - СправочникСсылка.ЭтапыПодготовкиБюджетов -
// * ЭтапПодготовкиБюджетовОснование - СправочникСсылка.ЭтапыПодготовкиБюджетов -
// * ПроцессПодготовкиБюджетов - ДокументСсылка.ПроцессПодготовкиБюджетов -
// * Действие - ПеречислениеСсылка.ТипыДействийЭтаповПодготовкиБюджетов -
// * Исполнитель - СправочникСсылка.Пользователи -
// * Периодичность - ПеречислениеСсылка.Периодичность -
// * НастройкаДействия - Структура - 
// * Период - Дата -
// * ПериодСтрокой - Строка -
// * ДатаНачала - Дата -
// * ДатаОкончания - Дата -
// * ПредыдущиеЗадачиСтрокой - Строка -
// * ПредыдущиеЗадачи - ТаблицаЗначений - 
// * Задача - ЗадачаСсылка.БюджетнаяЗадача -
// * ЗадачаВыполнена - Булево -
// * ДатаНачалаФакт - Дата -
// * ДатаОкончанияФакт - Дата -
Функция ШаблонЗадач()
	
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("НомерЗадачи", 						Новый ОписаниеТипов("Число"));
	ТаблицаЗадач.Колонки.Добавить("ЭтапПодготовкиБюджетов", 			Новый ОписаниеТипов("СправочникСсылка.ЭтапыПодготовкиБюджетов"));
	ТаблицаЗадач.Колонки.Добавить("ЭтапПодготовкиБюджетовОснование", 	Новый ОписаниеТипов("СправочникСсылка.ЭтапыПодготовкиБюджетов"));
	ТаблицаЗадач.Колонки.Добавить("ПроцессПодготовкиБюджетов", 			Новый ОписаниеТипов("ДокументСсылка.ПроцессПодготовкиБюджетов"));
	ТаблицаЗадач.Колонки.Добавить("Действие", 							Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДействийЭтаповПодготовкиБюджетов"));
	ТаблицаЗадач.Колонки.Добавить("Исполнитель", 						Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаЗадач.Колонки.Добавить("Периодичность", 						Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаЗадач.Колонки.Добавить("НастройкаДействия");					// Хранилище значений
	
	ТаблицаЗадач.Колонки.Добавить("Период", 							Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("ПериодСтрокой", 						Новый ОписаниеТипов("Строка"));
	ТаблицаЗадач.Колонки.Добавить("ДатаНачала", 						Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("ДатаОкончания", 						Новый ОписаниеТипов("Дата"));
	
	ТаблицаЗадач.Колонки.Добавить("ПредыдущиеЗадачиСтрокой", 			Новый ОписаниеТипов("Строка"));
	ТаблицаЗадач.Колонки.Добавить("ПредыдущиеЗадачи");					// Таблица значений
	
	ТаблицаЗадач.Колонки.Добавить("Задача", 							Новый ОписаниеТипов("ЗадачаСсылка.БюджетнаяЗадача"));
	ТаблицаЗадач.Колонки.Добавить("ЗадачаВыполнена", 					Новый ОписаниеТипов("Булево"));
	ТаблицаЗадач.Колонки.Добавить("ДатаНачалаФакт", 					Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("ДатаОкончанияФакт", 					Новый ОписаниеТипов("Дата"));
	
	ТаблицаЗадач.Индексы.Добавить("НомерЗадачи");
	
	Возврат ТаблицаЗадач;
	
КонецФункции


// Возвращает структуру дат начала и окончания задачи.
// 
// Параметры:
// 	Выборка - СтрокаДереваЗначений -
// 	ТаблицаЗадач - ТаблицаЗначений - :
// 	 *НомерЗадачи - Число - 
// 	 *ДатаНачала - Дата -
// 	 *ДатаОкончания - Дата -
// 	МенеджерГрафика - МенеджерВременныхТаблиц -
// 	ПараметрыПериодаГруппы - Структура -:
// 	 *ДатаНачала - Дата -
// 	 *ДатаОкончания - Дата -
// 	ТаблицаПредыдущихЗадач - ТаблицаЗначений -:
// 	 *НомерЗадачи - Число -
// 	ДополнитьФактом - Булево -
// 	СведенияОФакте - СтрокаТаблицыЗначений, Неопределено -:
// 	 *ДатаНачала - Дата - 
// 	 *ДатаОкончания - Дата - 
// 	 *Выполнена - Булево - 
// Возвращаемое значение:
// 	Структура -:
// 	*ДатаНачалаЗадачи - Дата - 
// 	*ДатаОкончанияЗадачи - Дата -
Функция ПолучитьПериодЗадачи(Выборка, ТаблицаЗадач, МенеджерГрафика, 
								ПараметрыПериодаГруппы, ТаблицаПредыдущихЗадач, ДополнитьФактом = Ложь, СведенияОФакте = Неопределено)
								
	Если ДополнитьФактом И СведенияОФакте <> Неопределено Тогда
		ДатаОкончания = СведенияОФакте.ДатаОкончания;
		Если Не СведенияОФакте.Выполнена Тогда
			ДатаОкончания = КонецДня(ТекущаяДатаСеанса());
		КонецЕсли;
		Возврат Новый Структура("ДатаНачалаЗадачи, ДатаОкончанияЗадачи", СведенияОФакте.ДатаНачала, ДатаОкончания);
	КонецЕсли;
		
	Если Выборка.УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаЭтаповПодготовкиБюджетов.ДоНачалаПериода
		ИЛИ Выборка.УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаЭтаповПодготовкиБюджетов.ПослеНачалаПериода Тогда
		ДатаНачалаЗадачи = ПараметрыПериодаГруппы.ДатаНачала;
	Иначе
		ДатаНачалаЗадачи = КонецДня(ПараметрыПериодаГруппы.ДатаОкончания) + 1;
	КонецЕсли;
	
	Если Выборка.УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаЭтаповПодготовкиБюджетов.ДоНачалаПериода
		ИЛИ Выборка.УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаЭтаповПодготовкиБюджетов.ДоОкончанияПериода Тогда
		Знак = -1;
	Иначе
		Знак = 1;
	КонецЕсли;
	
	Если Выборка.ТипСрока = Перечисления.ТипыСроковЭтаповПодготовкиБюджетов.ВРабочихДнях Тогда
		ДатаНачалаЗадачи = ПолучитьДатуПоКалендарю(МенеджерГрафика, ДатаНачалаЗадачи, Знак * Выборка.Срок);
	Иначе
		ДатаНачалаЗадачи = ДатаНачалаЗадачи + Знак * Выборка.Срок * 86400;
	КонецЕсли;
	
	ДатаПредыдущейЗадачи = Дата(1, 1, 1);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПредыдущихЗадач Цикл
		НайденнаяСтрока = ТаблицаЗадач.Найти(СтрокаТаблицы.НомерЗадачи, "НомерЗадачи");
		ДатаОкончания = НайденнаяСтрока.ДатаОкончания;
		ДатаПредыдущейЗадачи = Макс(ДатаПредыдущейЗадачи, ДатаОкончания);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаПредыдущейЗадачи) Тогда
		ДатаНачалаЗадачи = Макс(ДатаНачалаЗадачи, ДатаПредыдущейЗадачи + 1);
	КонецЕсли;
	
	Если Выборка.Длительность > 0 Тогда
		Если Выборка.ТипДлительности = Перечисления.ТипыСроковЭтаповПодготовкиБюджетов.ВРабочихДнях Тогда
			ДатаОкончанияЗадачи = ПолучитьДатуПоКалендарю(МенеджерГрафика, ДатаНачалаЗадачи, Выборка.Длительность - 1);
		Иначе
			ДатаОкончанияЗадачи = ДатаНачалаЗадачи + (Выборка.Длительность - 1) * 86400;
		КонецЕсли;
	Иначе
		ДатаОкончанияЗадачи = ДатаНачалаЗадачи;
	КонецЕсли;
	
	Возврат Новый Структура("ДатаНачалаЗадачи, ДатаОкончанияЗадачи", НачалоДня(ДатаНачалаЗадачи), КонецДня(ДатаОкончанияЗадачи));
	
КонецФункции

#КонецОбласти

#Область МеханизмФормированияБюджетногоРасписанияЗаполнениеТаблицыРасписания

// Функция добавляет в таблицу планируемых задач строку
//	выполняет следующие действия:
//	1. добавляет строку планируемой задачи
//	2. заполняет сведения о фактическом исполнении этапа, если в параметрах есть флаг "дополнять фактом".
//
// Параметры:
//  Выборка  						- СтрокаДереваЗначений - результат запроса к справочнику "Этапы подготовки бюджетов" с иерархией этапов:
//   *ЭтапПодготовкиБюджетов		- СправочникСсылка.ЭтапыПодготовкиБюджетов -
//   *ЭтапПодготовкиБюджетовОснование - СправочникСсылка.ЭтапыПодготовкиБюджетов -
//   *ПроцессПодготовкиБюджетов		- ДокументСсылка.ПроцессПодготовкиБюджетов -
//   *Действие						- ПеречислениеСсылка.ТипыДействийЭтаповПодготовкиБюджетов -
//   *НастройкаДействия				- Структура -
//   *Исполнитель					- СправочникСсылка.Пользователи -
//   *ПериодичностьРодитель			- ПеречислениеСсылка.Периодичность -
//  ПараметрыТаблицыЗадач  			- Структура - содержит таблицу с задачами и флаг "дополнять фактом":
//   *ТаблицаЗадач					- ТаблицаЗначений -:
//     **НомерЗадачи 				- Число -
//     **ЭтапПодготовкиБюджетов		- СправочникСсылка.ЭтапыПодготовкиБюджетов -
//     **ЭтапПодготовкиБюджетовОснование - СправочникСсылка.ЭтапыПодготовкиБюджетов -
//     **ПроцессПодготовкиБюджетов	- ДокументСсылка.ПроцессПодготовкиБюджетов - 
//     **Действие					- ПеречислениеСсылка.ТипыДействийЭтаповПодготовкиБюджетов -
//     **НастройкаДействия			- Структура -
//     **Исполнитель				- СправочникСсылка.Пользователи -
//     **Периодичность				- ПеречислениеСсылка.Периодичность - 
//     **ДатаНачала					- Дата -
//     **ДатаОкончания				- Дата -
//  МенеджерГрафика  				- МенеджерВременныхТаблиц - содержит таблицу с данными графика, отфильтрованную
//									по графику и индексированную по дате.
//  ПараметрыПериодаГруппы  		- Структура - структура с началом и окончанием периода за который формируем задачи
//  ТаблицаПредыдущихЗадач  		- ТаблицаЗначений - содержит номер задач, которые предшествуют текущей задачи.
//		
// Возвращаемое значение:
//  ТаблицаЗначений 				- содержит номера задач, при выполнении которых группа или задача будет считаться выполненной.
//
Функция ДобавитьСтрокуПлановойЗадачи(Выборка, ПараметрыТаблицыЗадач, МенеджерГрафика, ПараметрыПериодаГруппы, ТаблицаПредыдущихЗадач)
	
	ТаблицаЗадач = ПараметрыТаблицыЗадач.ТаблицаЗадач;
	
	НоваяСтрока 						= ТаблицаЗадач.Добавить();
	НоваяСтрока.НомерЗадачи 			= ТаблицаЗадач.Количество();
	НоваяСтрока.ЭтапПодготовкиБюджетов 	= Выборка.ЭтапПодготовкиБюджетов;
	НоваяСтрока.ЭтапПодготовкиБюджетовОснование 	= Выборка.ЭтапПодготовкиБюджетовОснование;
	НоваяСтрока.ПроцессПодготовкиБюджетов			= Выборка.ПроцессПодготовкиБюджетов;
	НоваяСтрока.Действие 				= Выборка.Действие;
	НоваяСтрока.НастройкаДействия 		= Выборка.НастройкаДействия;
	НоваяСтрока.Исполнитель 			= Выборка.Исполнитель;
	НоваяСтрока.Периодичность 			= Выборка.ПериодичностьРодитель;
	
	ПараметрыДатПлан = ПолучитьПериодЗадачи(Выборка, 
			ТаблицаЗадач, 
			МенеджерГрафика, 
			ПараметрыПериодаГруппы, 
			ТаблицаПредыдущихЗадач);
	
	НоваяСтрока.ДатаНачала = ПараметрыДатПлан.ДатаНачалаЗадачи;
	НоваяСтрока.ДатаОкончания = ПараметрыДатПлан.ДатаОкончанияЗадачи;
	
	Если ПараметрыТаблицыЗадач.Свойство("ДополнитьФактом") Тогда
		
		СведенияОФакте = Неопределено;
		КлючПоиска = Новый Структура();
		КлючПоиска.Вставить("Период", ПараметрыПериодаГруппы.ДатаНачала);
		КлючПоиска.Вставить("ЭтапПодготовкиБюджетов", Выборка.ЭтапПодготовкиБюджетов);
		КлючПоиска.Вставить("ЭтапПодготовкиБюджетовОснование", Выборка.ЭтапПодготовкиБюджетовОснование); 
		КлючПоиска.Вставить("ПроцессПодготовкиБюджетов", Выборка.ПроцессПодготовкиБюджетов);
		
		НайденныеСтроки = ПараметрыТаблицыЗадач.ТаблицаФакт.НайтиСтроки(КлючПоиска);
		Если НайденныеСтроки.Количество() Тогда
			СведенияОФакте = НайденныеСтроки[0];
			НоваяСтрока.Задача 			= СведенияОФакте.Задача;
			НоваяСтрока.ЗадачаВыполнена = СведенияОФакте.Выполнена;
			НоваяСтрока.Исполнитель 	= СведенияОФакте.Исполнитель;
		КонецЕсли;
		ПараметрыДатФакт = ПолучитьПериодЗадачи(Выборка,
				ТаблицаЗадач,
				МенеджерГрафика,
				ПараметрыПериодаГруппы,
				ТаблицаПредыдущихЗадач,
				Истина,
				СведенияОФакте);

		НоваяСтрока.ДатаНачалаФакт 			= ПараметрыДатФакт.ДатаНачалаЗадачи;
		НоваяСтрока.ДатаОкончанияФакт		= ПараметрыДатФакт.ДатаОкончанияЗадачи;
		Если НайденныеСтроки.Количество() Тогда
			ПараметрыТаблицыЗадач.ТаблицаФакт.Удалить(СведенияОФакте);
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока.Период = ПараметрыПериодаГруппы.ДатаНачала;
	НоваяСтрока.ПериодСтрокой = БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(
		НоваяСтрока.Период, 
		НоваяСтрока.Периодичность);
	
	НоваяСтрока.ПредыдущиеЗадачиСтрокой = ТаблицуНомеровЗадачВСтроку(ТаблицаПредыдущихЗадач);
	НоваяСтрока.ПредыдущиеЗадачи = ТаблицаПредыдущихЗадач.Скопировать();
	
	ПредыдущиеЗадачи = Новый ТаблицаЗначений;
	ПредыдущиеЗадачи.Колонки.Добавить("НомерЗадачи");
	ПредыдущиеЗадачи.Добавить().НомерЗадачи = НоваяСтрока.НомерЗадачи;
	
	Возврат ПредыдущиеЗадачи;
	
КонецФункции

// Рекурсивная функция генерации списка задач на основании дерева этапов
//	выполняет следующие действия:
//	1. если это группа задач - передает управление процедуры, обрабатывающей группы
//		формирование задач по группе выполняется для каждого периода группы
//	2. если это ЭтапПодготовкиБюджетов - передает управление процедуре, формирующей строку задачи.
//
// Параметры:
//  Выборка - СтрокаДереваЗначений - результат запроса к справочнику "Этапы подготовки бюджетов" с иерархией этапов
//  ПараметрыТаблицыЗадач  			- Структура:
//  	*ТаблицаЗадач				- ТаблицаЗначений - заполняемая таблица.
//  	*НастройкиРасчетаПроцессов	- Соответствие из КлючИЗначение - где:
//  	 **Ключ						- ДокументСсылка.ПроцессПодготовкиБюджетов - 
//  	 **Значение					- ТаблицаЗначений - 
//  ПараметрыПериодаГруппы  		- Структура - структура с началом и окончанием периода за который формируем задачи:
//  	*ДатаНачала					- Дата -
//  	*ДатаОкончания				- Дата -
//  МенеджерГрафика  				- МенеджерВременныхТаблиц - содержит таблицу с данными графика, отфильтрованную
//									по графику и индексированную по дате
//  ТаблицаПредыдущихЗадач  		- ТаблицаЗначений - содержит номер задач, которые предшествуют текущей задачи.
//		
//  ТаблицаЗначений 				- содержит номера задач, при выполнении которых группа или задача будет считаться выполненной.
//
Функция ОбработатьИсполнениеШагаПроцесса(Выборка,
					ПараметрыТаблицыЗадач,
					ПараметрыПериодаГруппы,
					МенеджерГрафика,
					ТаблицаПредыдущихЗадач)
	
	Если Не Выборка.ЭтоГруппа Тогда
		
		ПропуститьЭтап = Ложь;
		Если ЗначениеЗаполнено(Выборка.ПроцессПодготовкиБюджетов) Тогда
			
			НастройкиРасчета = ПараметрыТаблицыЗадач.НастройкиРасчетаПроцессов[Выборка.ПроцессПодготовкиБюджетов];
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Период", ПараметрыПериодаГруппы.ДатаНачала);
			СтруктураПоиска.Вставить("НеВыполняется", Ложь);
			СтруктураПоиска.Вставить("ЭтапПодготовкиБюджетов", Выборка.ЭтапПодготовкиБюджетов);
			СтруктураПоиска.Вставить("ЭтапПодготовкиБюджетовОснование", Выборка.ЭтапПодготовкиБюджетовОснование);
			
			НайденныеСтроки = НастройкиРасчета.НайтиСтроки(СтруктураПоиска);
			
			Если Не НайденныеСтроки.Количество() Тогда
				ПропуститьЭтап = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПропуститьЭтап Тогда
				
			Если ЗначениеЗаполнено(Выборка.ПроцессПодготовкиБюджетов) Тогда
			
				НастройкиРасчета = ПараметрыТаблицыЗадач.НастройкиРасчетаПроцессов[Выборка.ПроцессПодготовкиБюджетов];
				СтруктураПоиска = Новый Структура("Период, ЭтапПодготовкиБюджетов, ЭтапПодготовкиБюджетовОснование");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				СтруктураПоиска.Период = ПараметрыПериодаГруппы.ДатаНачала;
				НайденныеСтроки = НастройкиРасчета.НайтиСтроки(СтруктураПоиска);
				
				ЗаполнитьЗначенияСвойств(Выборка, НайденныеСтроки[0], "Длительность, ТипДлительности");
				Выборка.Исполнитель = НайденныеСтроки[0].Ответственный;
			
			КонецЕсли;
			
			НоваяТаблицаПредыдущих = ДобавитьСтрокуПлановойЗадачи(Выборка,
					ПараметрыТаблицыЗадач,
					МенеджерГрафика,
					ПараметрыПериодаГруппы,
					ТаблицаПредыдущихЗадач);
			
		КонецЕсли;
		
	Иначе
		
		ДатаНачала = БюджетированиеКлиентСервер.ДатаНачалаПериода(ПараметрыПериодаГруппы.ДатаНачала, Выборка.Периодичность);
		
		Пока ДатаНачала <= ПараметрыПериодаГруппы.ДатаОкончания Цикл
			
			ДатаКонца = БюджетированиеКлиентСервер.ДатаКонцаПериода(ДатаНачала, Выборка.Периодичность);
			ДатаКонца = Мин(ДатаКонца, ПараметрыПериодаГруппы.ДатаОкончания);
			
			ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаКонца);
			
			НоваяТаблицаПредыдущих = ЗаполнитьДеревоЗадач(Выборка,
					ПараметрыТаблицыЗадач,
					ПараметрыПериода,
					МенеджерГрафика,
					ТаблицаПредыдущихЗадач);
			
			ДатаНачала = ДатаКонца + 1; //Переходим в следующий период
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НоваяТаблицаПредыдущих;
	
КонецФункции

// Рекурсивная функция генерации списка задач на основании дерева этапов процесса
//	выполняет следующие действия:
//	1. для каждой строки дерева, содержащей этап процесса вызывает процедуру - обработчик шага процесса
//	2. на основании вида группы формирует таблицу, которая содержит номера задач, 
//	при выполнении которых группа будет считаться выполненной и процесс перейдет на следующий за группой шаг.
//
// Параметры:
//  ДеревоШагов						- СтрокаДереваЗначений - результат запроса к справочнику "Шаги бюджетного процесса" с иерархией шагов
//  ПараметрыТаблицыЗадач			- Структура -:
//  	*ТаблицаЗадач - 			- ТаблицаЗначений - заполняемая таблица.
//  ПараметрыПериодаГруппы			- Структура - структура с началом и окончанием периода за который формируем задачи:
//  	*ДатаНачала					- Дата -
//  	*ДатаОкончания				- Дата - 
//  МенеджерГрафика					- МенеджерВременныхТаблиц - содержит таблицу с данными графика, отфильтрованную
//										по графику и индексированную по дате
//  ПредыдущиеЗадачи				- ТаблицаЗначений - содержит номер задач, которые предшествуют текущей задачи.
//	
//	Возвращаемое значение:
//  ТаблицаЗначений 				- содержит номера задач, при выполнении которых группа будет считаться выполненной.
//
Функция ЗаполнитьДеревоЗадач(ДеревоШагов, ПараметрыТаблицыЗадач, ПараметрыПериодаГруппы, 
										МенеджерГрафика, ПредыдущиеЗадачи = Неопределено)
							
	Если ПредыдущиеЗадачи = Неопределено Тогда
		ПредыдущиеЗадачи = Новый ТаблицаЗначений;
		ПредыдущиеЗадачи.Колонки.Добавить("НомерЗадачи");
	КонецЕсли;
	
	ТаблицаПредыдущихЗадач = ПредыдущиеЗадачи.Скопировать();
	ТекущаяТаблицаПредыдущихЗадач = ТаблицаПредыдущихЗадач.СкопироватьКолонки();
	
	ПоследовательнаяГруппа = Ложь;
	
	Для Каждого Выборка Из ДеревоШагов.Строки Цикл
		
		НоваяТаблицаПредыдущих = ОбработатьИсполнениеШагаПроцесса(Выборка,
				ПараметрыТаблицыЗадач,
				ПараметрыПериодаГруппы,
				МенеджерГрафика,
				ТаблицаПредыдущихЗадач);
		
		Если НоваяТаблицаПредыдущих = Неопределено Тогда
			Продолжить; //ни одна задача не входит в период отчета
		КонецЕсли;
		
		Если Выборка.ПорядокВыполненияЭтапов = Перечисления.ПорядокВыполненияЭтаповПодготовкиБюджетов.Последовательно Тогда
			ТаблицаПредыдущихЗадач = НоваяТаблицаПредыдущих;
			ПоследовательнаяГруппа = Истина;
		Иначе
			Для Каждого СтрокаЗадачи Из НоваяТаблицаПредыдущих Цикл
				ТекущаяТаблицаПредыдущихЗадач.Добавить().НомерЗадачи = СтрокаЗадачи.НомерЗадачи;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПоследовательнаяГруппа И НоваяТаблицаПредыдущих <> Неопределено Тогда
		Для Каждого СтрокаЗадачи Из НоваяТаблицаПредыдущих Цикл
			ТекущаяТаблицаПредыдущихЗадач.Добавить().НомерЗадачи = СтрокаЗадачи.НомерЗадачи;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекущаяТаблицаПредыдущихЗадач;
	
КонецФункции

Процедура СкопироватьПовторяемыеЭтапыПодготовкиБюджетов(Источник, Приемник, ЭтапПодготовкиБюджетовОснование)
	
	Для Каждого Строка Из Источник Цикл
		Если Строка.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ПовторГруппыЭтапов Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЭтапПодготовкиБюджетов = НоваяСтрока.ЭтапПодготовкиБюджетов;
		НоваяСтрока.ЭтапПодготовкиБюджетов = ЭтапПодготовкиБюджетовОснование;
		НоваяСтрока.ЭтапПодготовкиБюджетовОснование = ЭтапПодготовкиБюджетов;
		СкопироватьПовторяемыеЭтапыПодготовкиБюджетов(Строка.Строки, НоваяСтрока.Строки, ЭтапПодготовкиБюджетовОснование);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПовторяемыеЭтапыПодготовкиБюджетов(ДеревоШагов) Экспорт
	
	СтруктураПоискаПовторовГруппы = Новый Структура("Действие", Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ПовторГруппыЭтапов);
	НайденныеСтроки = ДеревоШагов.Строки.НайтиСтроки(СтруктураПоискаПовторовГруппы, Истина);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		НайденнаяСтрока.ЭтоГруппа = Истина;
		
		НастройкиДействия = НайденнаяСтрока.НастройкаДействия.Получить();
		ПовторяемаяГруппа = НастройкиДействия.Найти("ГруппаШагов", "Имя");
		Если ПовторяемаяГруппа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ЭтапПодготовкиБюджетов, ЭтапПодготовкиБюджетовОснование", 
			ПовторяемаяГруппа.Значение, Справочники.ЭтапыПодготовкиБюджетов.ПустаяСсылка());
		СтрокиПовторения = ДеревоШагов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если СтрокиПовторения.Количество() Тогда
			НайденнаяСтрока.Периодичность = СтрокиПовторения[0].Периодичность;
			СкопироватьПовторяемыеЭтапыПодготовкиБюджетов(СтрокиПовторения[0].Строки, НайденнаяСтрока.Строки, НайденнаяСтрока.ЭтапПодготовкиБюджетов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПорядокВыполненияПоПроцессу(ДанныеДокумента, НоваяСтрока)
	
	Если Не ЗначениеЗаполнено(НоваяСтрока.ЭтапПодготовкиБюджетов) Тогда
		// Вспомогательный этап
		Возврат Перечисления.ПорядокВыполненияЭтаповПодготовкиБюджетов.Последовательно;
	КонецЕсли;
	
	ИсточникРеквизитов = ?(ЗначениеЗаполнено(НоваяСтрока.ЭтапПодготовкиБюджетовОснование), 
									НоваяСтрока.ЭтапПодготовкиБюджетовОснование,
									НоваяСтрока.ЭтапПодготовкиБюджетов);
		
	Реквизиты = ДанныеДокумента.ТаблицаРеквизитов.Найти(ИсточникРеквизитов);
		
	Если НоваяСтрока.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ПовторГруппыЭтапов Тогда
		НастройкиДействия = НоваяСтрока.НастройкаДействия.Получить();
		ПовторяемаяГруппа = НастройкиДействия.Найти("ГруппаШагов", "Имя").Значение;
		РеквизитыПоСсылкеНаГруппу = ДанныеДокумента.ТаблицаРеквизитов.Найти(ПовторяемаяГруппа);
		Возврат РеквизитыПоСсылкеНаГруппу.ПорядокВыполненияЭтапов;
	Иначе
		Возврат Реквизиты.ПорядокВыполненияЭтапов;
	КонецЕсли;
	
КонецФункции

Процедура СкопироватьЭтапыПроцессаПодготовкиБюджетов(Источник, Приемник, ДанныеДокумента)
	
	Для Каждого Строка Из Источник Цикл
		
		НоваяСтрока = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПроцессПодготовкиБюджетов = ДанныеДокумента.ПроцессПодготовкиБюджетов;
		НоваяСтрока.ДатаПроцесса = ДанныеДокумента.Дата;
		Если ЗначениеЗаполнено(НоваяСтрока.Родитель) Тогда
			НоваяСтрока.ПериодичностьРодитель = НоваяСтрока.Родитель.Периодичность;
		КонецЕсли;
		
		ИсточникРеквизитов = ?(ЗначениеЗаполнено(НоваяСтрока.ЭтапПодготовкиБюджетовОснование), 
										НоваяСтрока.ЭтапПодготовкиБюджетовОснование,
										НоваяСтрока.ЭтапПодготовкиБюджетов);
		
		ТаблицаРеквизитов = ДанныеДокумента.ТаблицаРеквизитов; // См. ТаблицаРеквизитовПоМодели
		Реквизиты = ТаблицаРеквизитов.Найти(ИсточникРеквизитов);
		НоваяСтрока.Действие = Реквизиты.Действие;
		НоваяСтрока.НастройкаДействия = Реквизиты.НастройкаДействия;
		
		Если НоваяСтрока.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ПовторГруппыЭтапов Тогда
			НоваяСтрока.ПорядокВыполненияЭтапов = ПорядокВыполненияПоПроцессу(ДанныеДокумента, НоваяСтрока);
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Родитель) Тогда
			НоваяСтрока.ПорядокВыполненияЭтапов = ПорядокВыполненияПоПроцессу(ДанныеДокумента, НоваяСтрока.Родитель);
		КонецЕсли;
		
		СкопироватьЭтапыПроцессаПодготовкиБюджетов(Строка.Строки, НоваяСтрока.Строки, ДанныеДокумента);
		
	КонецЦикла;
	
КонецПроцедуры


// Возвращает таблицу реквизитов этапов подготовки бюджетов по модели.
// 
// Параметры:
// 	МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - 
// Возвращаемое значение:
// 	ТаблицаЗначений -:
// 	 *Ссылка - СправочникСсылка.ЭтапыПодготовкиБюджетов - 
// 	 *Действие - ПеречислениеСсылка.ТипыДействийЭтаповПодготовкиБюджетов -
// 	 *НастройкаДействия - ХранилищеЗначения - 
// 	 *ПорядокВыполненияЭтапов - ПеречислениеСсылка.ПорядокВыполненияЭтаповПодготовкиБюджетов -
// 	 *УсловиеЗапуска - ПеречислениеСсылка.ТипыУсловийЗапускаЭтаповПодготовкиБюджетов -
// 	 *РодительПорядокВыполненияЭтапов - ПеречислениеСсылка.ПорядокВыполненияЭтаповПодготовкиБюджетов -
//
Функция ТаблицаРеквизитовПоМодели(МодельБюджетирования)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЭтапыПодготовкиБюджетов.Ссылка КАК Ссылка,
		|	ЭтапыПодготовкиБюджетов.Действие КАК Действие,
		|	ЭтапыПодготовкиБюджетов.НастройкаДействия КАК НастройкаДействия,
		|	ЭтапыПодготовкиБюджетов.ПорядокВыполненияЭтапов КАК ПорядокВыполненияЭтапов,
		|	ЭтапыПодготовкиБюджетов.УсловиеЗапуска КАК УсловиеЗапуска,
		|	ЭтапыПодготовкиБюджетов.Родитель.ПорядокВыполненияЭтапов КАК РодительПорядокВыполненияЭтапов
		|ИЗ
		|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
		|ГДЕ
		|	ЭтапыПодготовкиБюджетов.Владелец = &МодельБюджетирования";
	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	ТаблицаРеквизитов.Индексы.Добавить("Ссылка");
	
	Возврат ТаблицаРеквизитов;
КонецФункции

Процедура ДополнитьДействующимиПроцессамиПодготовкиБюджетов(ДеревоШагов, МодельБюджетирования, 
													ПараметрыТаблицыЗадач, ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроцессПодготовкиБюджетов.Ссылка
		|ПОМЕСТИТЬ ТаблицаПроцессов
		|ИЗ
		|	Документ.ПроцессПодготовкиБюджетов КАК ПроцессПодготовкиБюджетов
		|ГДЕ
		|	ПроцессПодготовкиБюджетов.МодельБюджетирования = &МодельБюджетирования
		|	И НЕ ПроцессПодготовкиБюджетов.ПометкаУдаления
		|	И ПроцессПодготовкиБюджетов.Статус = &Выполняется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцессПодготовкиБюджетов.Ссылка,
		|	ПроцессПодготовкиБюджетов.НастройкиИерархии.(
		|		Ссылка,
		|		НомерСтроки,
		|		ГруппаЭтапов,
		|		ЭтапПодготовкиБюджетов,
		|		ЭтапПодготовкиБюджетовОснование,
		|		Код,
		|		Периодичность
		|	),
		|	ПроцессПодготовкиБюджетов.НастройкиРасчета.(
		|		Ссылка,
		|		НомерСтроки,
		|		Период,
		|		ЭтапПодготовкиБюджетов,
		|		ЭтапПодготовкиБюджетовОснование,
		|		Ответственный,
		|		Длительность,
		|		ТипДлительности,
		|		НеВыполняется,
		|		ВыполнятьАвтоматически
		|	),
		|	ПроцессПодготовкиБюджетов.Периодичность,
		|	ПроцессПодготовкиБюджетов.ГруппаЭтапов.ЭтоГруппа,
		|	ПроцессПодготовкиБюджетов.Дата
		|ИЗ
		|	ТаблицаПроцессов КАК ТаблицаПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроцессПодготовкиБюджетов КАК ПроцессПодготовкиБюджетов
		|		ПО ТаблицаПроцессов.Ссылка = ПроцессПодготовкиБюджетов.Ссылка";
	
	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
	Запрос.УстановитьПараметр("Выполняется", Перечисления.СтатусыПроцессовПодготовкиБюджетов.Выполняется);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТаблицаРеквизитов = ТаблицаРеквизитовПоМодели(МодельБюджетирования);
	
	ПараметрыТаблицыЗадач.Вставить("НастройкиРасчетаПроцессов", Новый Соответствие);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НастройкиИерархии = ВыборкаДетальныеЗаписи.НастройкиИерархии.Выгрузить();
		ДеревоЭтаповПроцесса = Документы.ПроцессПодготовкиБюджетов.ИерархияЭтаповПроцессаПоДокументу(НастройкиИерархии);
		
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("ТаблицаРеквизитов", ТаблицаРеквизитов); 
		ДанныеДокумента.Вставить("ПроцессПодготовкиБюджетов", ВыборкаДетальныеЗаписи.Ссылка);
		ДанныеДокумента.Вставить("НастройкиРасчета", ВыборкаДетальныеЗаписи.НастройкиРасчета.Выгрузить());
		ДанныеДокумента.Вставить("Периодичность", ВыборкаДетальныеЗаписи.Периодичность);
		ДанныеДокумента.Вставить("Дата", ВыборкаДетальныеЗаписи.Дата);
		
		Если Не ВыборкаДетальныеЗаписи.ГруппаЭтаповЭтоГруппа Тогда
			
			ВспомогательнаяГруппа = ДеревоШагов.Строки.Добавить();
			ВспомогательнаяГруппа.Периодичность = ДеревоЭтаповПроцесса.Строки[0].Периодичность;
			ВспомогательнаяГруппа.ПроцессПодготовкиБюджетов = ВыборкаДетальныеЗаписи.Ссылка;
			ВспомогательнаяГруппа.ЭтоГруппа = Истина;
			Приемник = ВспомогательнаяГруппа.Строки;
			
		Иначе
			
			Приемник = ДеревоШагов.Строки;
			
		КонецЕсли;
		
		СкопироватьЭтапыПроцессаПодготовкиБюджетов(ДеревоЭтаповПроцесса.Строки, Приемник, ДанныеДокумента);
		
		ПараметрыТаблицыЗадач.НастройкиРасчетаПроцессов.Вставить(ВыборкаДетальныеЗаписи.Ссылка, 
			ВыборкаДетальныеЗаписи.НастройкиРасчета.Выгрузить());
		
	КонецЦикла;
	
КонецПроцедуры


// Возвращает таблицу существующих задач по модели бюджетирования.
// 
// Параметры:
// 	МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - 
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица существующих задач:
// 	 *ЭтапПодготовкиБюджетов - СправочникСсылка.ЭтапыПодготовкиБюджетов - 
// 	 *ЭтапПодготовкиБюджетовОснование - СправочникСсылка.ЭтапыПодготовкиБюджетов - 
// 	 *Период - Дата - 
// 	 *Задача - ЗадачаСсылка.БюджетнаяЗадача - 
// 	 *Исполнитель - СправочникСсылка.Пользователи - 
// 	 *ДатаНачала - Дата -
// 	 *ДатаОкончания - Дата - 
// 	 *Выполнена - Булево - 
// 	 *Периодичность - ПеречислениеСсылка.Периодичность - 
// 	 *ПроцессПодготовкиБюджетов - ДокументСсылка.ПроцессПодготовкиБюджетов - 
//
Функция ТаблицаФактЗадачПоМодели(МодельБюджетирования)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БюджетнаяЗадача.ЭтапПодготовкиБюджетов КАК ЭтапПодготовкиБюджетов,
	|	БюджетнаяЗадача.ЭтапПодготовкиБюджетовОснование КАК ЭтапПодготовкиБюджетовОснование,
	|	БюджетнаяЗадача.Период КАК Период,
	|	БюджетнаяЗадача.Ссылка КАК Задача,
	|	БюджетнаяЗадача.Исполнитель КАК Исполнитель,
	|	БюджетнаяЗадача.Дата КАК ДатаНачала,
	|	БюджетнаяЗадача.ДатаИсполнения КАК ДатаОкончания,
	|	БюджетнаяЗадача.Выполнена КАК Выполнена,
	|	БюджетнаяЗадача.ЭтапПодготовкиБюджетов.Родитель.Периодичность КАК Периодичность,
	|	БюджетнаяЗадача.ПроцессПодготовкиБюджетов КАК ПроцессПодготовкиБюджетов
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	БюджетнаяЗадача.МодельБюджетирования = &МодельБюджетирования
	|	И БюджетнаяЗадача.ОсновнаяЗадача = ЗНАЧЕНИЕ(Задача.БюджетнаяЗадача.ПустаяСсылка)
	|	И НЕ БюджетнаяЗадача.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаФакт = РезультатЗапроса.Выгрузить();
	ТаблицаФакт.Индексы.Добавить("Период, ЭтапПодготовкиБюджетов");
	
	Возврат ТаблицаФакт;
КонецФункции


// Возвращает дерево шагов этапов подготовки бюджета по модели.
// 
// Параметры:
// 	МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - 
// Возвращаемое значение:
// 	ДеревоЗначений - :
// 	 *ЭтапПодготовкиБюджетов - СправочникСсылка.ЭтапыПодготовкиБюджетов - 
// 	 *Периодичность - ПеречислениеСсылка.Периодичность - 
// 	 *Действие - ПеречислениеСсылка.ТипыДействийЭтаповПодготовкиБюджетов -
// 	 *НастройкаДействия - ХранилищеЗначения - 
// 	 *ПериодичностьРодитель - ПеречислениеСсылка.Периодичность - 
// 	 *ПорядокВыполненияЭтапов - ПеречислениеСсылка.ПорядокВыполненияЭтаповПодготовкиБюджетов -
// 	 *УсловиеЗапуска - ПеречислениеСсылка.ТипыУсловийЗапускаЭтаповПодготовкиБюджетов -
// 	 *Срок - Число - 
// 	 *Длительность - Число - 
// 	 *ТипДлительности - ПеречислениеСсылка.ТипыСроковЭтаповПодготовкиБюджетов -
// 	 *Исполнитель - СправочникСсылка.Пользователи - 
// 	 *ЭтоГруппа - Булево - 
// 	 *Код - Число - 
// 	 *ЭтапПодготовкиБюджетовОснование - СправочникСсылка.ЭтапыПодготовкиБюджетов - 
//
Функция ДеревоШаговПоМодели(МодельБюджетирования)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПодготовкиБюджетов.Ссылка КАК ЭтапПодготовкиБюджетов,
		|	ЭтапыПодготовкиБюджетов.Периодичность КАК Периодичность,
		|	ЭтапыПодготовкиБюджетов.Действие КАК Действие,
		|	ЭтапыПодготовкиБюджетов.НастройкаДействия КАК НастройкаДействия,
		|	ЭтапыПодготовкиБюджетов.Родитель.Периодичность КАК ПериодичностьРодитель,
		|	ЭтапыПодготовкиБюджетов.Родитель.ПорядокВыполненияЭтапов КАК ПорядокВыполненияЭтапов,
		|	ЭтапыПодготовкиБюджетов.Родитель.УсловиеЗапуска КАК УсловиеЗапуска,
		|	ЭтапыПодготовкиБюджетов.Родитель.Срок КАК Срок,
		|	ЭтапыПодготовкиБюджетов.Родитель.ТипСрока КАК ТипСрока,
		|	ЭтапыПодготовкиБюджетов.Длительность КАК Длительность,
		|	ЭтапыПодготовкиБюджетов.ТипДлительности,
		|	ЭтапыПодготовкиБюджетов.Ответственный КАК Исполнитель,
		|	ЭтапыПодготовкиБюджетов.ЭтоГруппа,
		|	ЭтапыПодготовкиБюджетов.Код КАК Код,
		|	ЗНАЧЕНИЕ(Справочник.ЭтапыПодготовкиБюджетов.ПустаяСсылка) КАК ЭтапПодготовкиБюджетовОснование
		|ИЗ
		|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
		|ГДЕ
		|	ЭтапыПодготовкиБюджетов.Владелец = &МодельБюджетирования
		|	И (ЭтапыПодготовкиБюджетов.ЭтоГруппа
		|			ИЛИ ЭтапыПодготовкиБюджетов.НеВыполняется = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтапПодготовкиБюджетов ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
	РезультатЗапроса = Запрос.Выполнить();
	ДеревоШагов = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоШагов.Строки.Сортировать("Код", Истина);
	ДеревоШагов.Колонки.Добавить("ПроцессПодготовкиБюджетов", Новый ОписаниеТипов("ДокументСсылка.ПроцессПодготовкиБюджетов"));
	ДеревоШагов.Колонки.Добавить("ДатаПроцесса", Новый ОписаниеТипов("Дата"));
	
	Возврат ДеревоШагов;
КонецФункции

// Функция возвращает таблицу планируемых задач, построенное по шагам процесса
//	выполняет следующие действия:
//	1. формирует дерево значений с элементами справочника "Этапы подготовки бюджетов"
//	2. подготавливает менеджер временных таблиц для последующего определения длительности "по рабочим дням"
//	3. формирует таблицу с фактическими задачами, если установлен флаг "дополнять фактом". 
//		таблица фактических задач впоследствии используется в алгоритме заполнения итоговой таблице плановых задач
//	4. дополняет таблицу плановых задач фактическими задачами, если эти задачи были сформированы "вне бюджетного процесса".
//
// Параметры:
//  МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - модель для которой строиться дерево задач.
//  ДатаНачала - Дата - дата, с которой будет строиться таблица задач.
//  ДатаОкончания - Дата - дата, по которую будет строиться таблице задач.
//  ДополнятьФактом - Булево - Если ИСТИНА - то будут заполнены сведения о фактических задачах.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица значений, содержащая сведения о планируемых и фактических шагах бюджетного процесса.
//
Функция ЗадачиБюджетирования(МодельБюджетирования, ДатаНачала, ДатаОкончания, ДополнятьФактом, ПроверятьЗадачиДругихПериодов)
	
	Отказ = Ложь;
	График = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	ПроверитьЗаполнениеГрафиковЗаПериод(ДатаНачала, ДатаОкончания, График, Отказ);
	
	ТаблицаЗадач = ШаблонЗадач();
	
	Если Отказ Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	ДеревоШагов = ДеревоШаговПоМодели(МодельБюджетирования);
	
	ПараметрыТаблицыЗадач = Новый Структура("ТаблицаЗадач", ТаблицаЗадач);
	
	ДополнитьПовторяемыеЭтапыПодготовкиБюджетов(ДеревоШагов);
	ДополнитьДействующимиПроцессамиПодготовкиБюджетов(ДеревоШагов,
			МодельБюджетирования,
			ПараметрыТаблицыЗадач,
			ДатаНачала,
			ДатаОкончания);
	
	Запрос = Новый Запрос();
	МенеджерГрафика = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерГрафика;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
		|ПОМЕСТИТЬ ДанныеГрафика
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ГДЕ
		|	КалендарныеГрафики.Календарь = &ГрафикРаботы
		|	И КалендарныеГрафики.ДеньВключенВГрафик
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаГрафика";
	
	Запрос.УстановитьПараметр("ГрафикРаботы", График);
	Запрос.Выполнить();
	
	Если ДополнятьФактом Тогда
		ПараметрыТаблицыЗадач.Вставить("ДополнитьФактом", ДополнятьФактом);
		
		ТаблицаФакт = ТаблицаФактЗадачПоМодели(МодельБюджетирования);
		
		ПараметрыТаблицыЗадач.Вставить("ТаблицаФакт", ТаблицаФакт);
		
	КонецЕсли;
	
	Если ПроверятьЗадачиДругихПериодов Тогда
		
		// Дополним конец периода
		// задачи формируем на ДатаОкончания + 365 рабочих или календарных дней
		// 365 - максимальная длительность задачи.
		МаксДата = ПолучитьДатуПоКалендарю(МенеджерГрафика, ДатаОкончания, 365);
		МаксДата = Макс(МаксДата, ДатаОкончания + 365 * 86400);
		
		КонецДействияМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МодельБюджетирования, "КонецДействия");
		ДатаОкончанияПериода= ?(КонецДействияМодели <> '00010101000000', МИН(МаксДата, КонецДействияМодели), МаксДата);
		
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончанияПериода);
		ЗаполнитьДеревоЗадач(ДеревоШагов, ПараметрыТаблицыЗадач, ПараметрыПериода, МенеджерГрафика);
		
	Иначе
		
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
		ЗаполнитьДеревоЗадач(ДеревоШагов, ПараметрыТаблицыЗадач, ПараметрыПериода, МенеджерГрафика);
		
	КонецЕсли;
	
	Если ДополнятьФактом Тогда
		ТаблицаФакт = ПараметрыТаблицыЗадач.ТаблицаФакт; // ТаблицаФактЗадачПоМодели -
		Для Каждого ОставшаясяСтрокаЗадач Из ПараметрыТаблицыЗадач.ТаблицаФакт Цикл
			НоваяСтрока = ТаблицаЗадач.Добавить();
			НоваяСтрока.НомерЗадачи = ТаблицаЗадач.Количество();
			НоваяСтрока.Задача = ОставшаясяСтрокаЗадач.Задача;
			НоваяСтрока.ЗадачаВыполнена = ОставшаясяСтрокаЗадач.Выполнена;
			НоваяСтрока.Исполнитель = ОставшаясяСтрокаЗадач.Исполнитель;
			НоваяСтрока.Период = ОставшаясяСтрокаЗадач.Период;
			НоваяСтрока.ДатаНачалаФакт = ОставшаясяСтрокаЗадач.ДатаНачала;
			НоваяСтрока.Периодичность = ОставшаясяСтрокаЗадач.Периодичность;
			НоваяСтрока.ЭтапПодготовкиБюджетов = ОставшаясяСтрокаЗадач.ЭтапПодготовкиБюджетов;
			НоваяСтрока.ЭтапПодготовкиБюджетовОснование = ОставшаясяСтрокаЗадач.ЭтапПодготовкиБюджетовОснование;
			ДатаОкончания = ОставшаясяСтрокаЗадач.ДатаОкончания;
			Если Не ОставшаясяСтрокаЗадач.Выполнена Тогда
				ДатаОкончания = КонецДня(ТекущаяДатаСеанса());
			КонецЕсли;
			НоваяСтрока.ДатаОкончанияФакт = ДатаОкончания;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаЗадач;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

#КонецЕсли