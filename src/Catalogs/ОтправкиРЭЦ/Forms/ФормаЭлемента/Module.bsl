#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		//Создается новый объект
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Справочник не предназначен для ручного заполнения!';
													|en = 'Справочник не предназначен для ручного заполнения!'"));
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;

	Элементы.НадписьПомеченНаУдаление.Видимость = Объект.ПометкаУдаления;
						
	Индекс = 0;
	Для Каждого ПрисоединенныйФайл Из Объект.ОтчетыСсылки Цикл
		Если Индекс = 0 Тогда    
			Если ЗначениеЗаполнено(ПрисоединенныйФайл.ПроизвольноеВложениеСсылка) Тогда
				ПредметОтправки = ПрисоединенныйФайл.ПроизвольноеВложениеСсылка;
			Иначе
				ПредметОтправки = ПрисоединенныйФайл.ОтчетСсылка;
			КонецЕсли;
			ТипЗнчСсылкаНаОтчет = ТипЗнч(ПредметОтправки);

			Если ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				Элементы.НадписьПервичноеСообщение.Заголовок = Строка(РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ПредметОтправки))
					+ " - " + ПредставлениеТипаФайла(ПрисоединенныйФайл.ТипФайла);
			ИначеЕсли ТипЗнчСсылкаНаОтчет = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
				// электронное представление
				Элементы.НадписьПервичноеСообщение.Заголовок = Строка(ПредметОтправки.Наименование);
			Иначе
				Элементы.НадписьПервичноеСообщение.Заголовок = ПрисоединенныйФайл.ИмяФайлаПакета + " - " + ПредставлениеТипаФайла(ПрисоединенныйФайл.ТипФайла);
			КонецЕсли;
		Иначе 
			НоваяГруппа = Элементы.Вставить("ГруппаПервичноеСообщение_" + Строка(Индекс), Тип("ГруппаФормы"), Элементы.ГруппаПервичноеСообщение.Родитель, Элементы.ГруппаПодтверждениеНаПодтверждениеОтправки);
			ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаПервичноеСообщение, , "ПутьКДаннымЗаголовка");
			
			НоваяЭмблемаСообщения = Элементы.Добавить("КартинкаПервичноеСообщениеЭмблема_" + Строка(Индекс), Тип("ДекорацияФормы"), НоваяГруппа); 
			ЗаполнитьЗначенияСвойств(НоваяЭмблемаСообщения, Элементы.КартинкаПервичноеСообщениеЭмблема);
			
			НоваяКартинкаСообщения = Элементы.Добавить("КартинкаПервичноеСообщение_" + Строка(Индекс), Тип("ДекорацияФормы"), НоваяГруппа); 
			ЗаполнитьЗначенияСвойств(НоваяКартинкаСообщения, Элементы.КартинкаПервичноеСообщение);
			
			НоваяНадписьСообщения = Элементы.Добавить("НадписьПервичноеСообщение_" + Строка(Индекс), Тип("ДекорацияФормы"), НоваяГруппа); 
			ЗаполнитьЗначенияСвойств(НоваяНадписьСообщения, Элементы.НадписьПервичноеСообщение);
			
			Если ЗначениеЗаполнено(ПрисоединенныйФайл.ПроизвольноеВложениеСсылка) Тогда
				ПредметОтправки = ПрисоединенныйФайл.ПроизвольноеВложениеСсылка;
			Иначе
				ПредметОтправки = ПрисоединенныйФайл.ОтчетСсылка;
			КонецЕсли;
			
			ТипЗнчСсылкаНаОтчет = ТипЗнч(ПредметОтправки);

			Если ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				НоваяНадписьСообщения.Заголовок = Строка(РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ПредметОтправки))
					+ " - " + ПредставлениеТипаФайла(ПрисоединенныйФайл.ТипФайла);
			ИначеЕсли ТипЗнчСсылкаНаОтчет = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
				// электронное представление
				НоваяНадписьСообщения.Заголовок = Строка(ПредметОтправки.Наименование);
			Иначе
				НоваяНадписьСообщения.Заголовок = ПрисоединенныйФайл.ИмяФайлаПакета + " - " + ПредставлениеТипаФайла(ПрисоединенныйФайл.ТипФайла);
			КонецЕсли;
			
			НоваяНадписьСообщения.УстановитьДействие("Нажатие", "НадписьПервичноеСообщениеНажатие");
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ДатаОтправки = Объект.ДатаОтправки;
	ДатаЗакрытия = НСтр("ru = '<не завершена>';
						|en = '<не завершена>'");
	ДатаОбновления = НСтр("ru = '<не определено>';
							|en = '<не определено>'");
	ОбновитьФорму();
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "НадписьОрганизация");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьСтатусОтправкиНажатие(Элемент)
	
	ДокументооборотСРЭЦКлиент.ПоказатьПротокол(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПервичноеСообщениеНажатие(Элемент)
	
	МассивЧастейИмени = СтрРазделить(Элемент.Имя, "_", Ложь);
	Если МассивЧастейИмени.Количество() = 1 Тогда
		Индекс = 0;
	Иначе
		Индекс = Число(МассивЧастейИмени[1]);
	КонецЕсли;
	
	ПолучитьФайл(ПолучитьАдресФайлаПакета(Объект.ОтчетыСсылки[Индекс].Пакет, УникальныйИдентификатор), Объект.ОтчетыСсылки[Индекс].ИмяФайлаПакета);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьЗавершение", ЭтотОбъект);
	ДокументооборотСРЭЦКлиент.ПолучитьСтатусОтчета(Оповещение, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПротокол(Команда)
	
	ПолучитьФайл(
		ПолучитьАдресФайлаПротокола(Объект.Ссылка), 
	    СтрШаблон("Протокол_%1.html", Объект.Идентификатор));
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакеты(Команда)
	
	ПолучаемыеФайлы = Новый Массив;	
	ИндексФайла = 0;
	Для Каждого Стр Из Объект.ОтчетыСсылки Цикл
		АдресФайлаПакета = ПолучитьАдресФайлаПакета(Стр.Пакет, ЭтотОбъект.УникальныйИдентификатор);
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(Стр.ИмяФайлаПакета, АдресФайлаПакета);
		ПолучаемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	ДиалогВыбораКаталог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталог.Заголовок = НСтр("ru = 'Выбор каталога';
										|en = 'Выбор каталога'");
	
	НачатьПолучениеФайлов(Новый ОписаниеОповещения, ПолучаемыеФайлы, ДиалогВыбораКаталог, Истина); 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТипаФайла(ТипФайла) 
	
	Результат = ТипФайла;
	
	Если СтрЗаканчиваетсяНа(ТипФайла, "Раздел8") Тогда
		Результат = "Приложение к декларации по НДС (Раздел 8)";	
	ИначеЕсли СтрЗаканчиваетсяНа(ТипФайла, "Раздел9") Тогда
		Результат = "Приложение к декларации по НДС (Раздел 9)";
	ИначеЕсли ТипФайла = "РеестрНДС_1_Сведения" Тогда
		Результат = "Приложение к реестру таможенных деклараций";
	ИначеЕсли ТипФайла = "РеестрНДС_1" Тогда
		Результат = "Реестр таможенных деклараций";
	ИначеЕсли ТипФайла = "Вложение" Тогда
		Результат = "Контракт";
	ИначеЕсли СтрНачинаетсяС(ТипФайла, "НДС") Тогда
		Результат = "Декларация по НДС";
	КонецЕсли;   
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеФормыНаСервере()
	
	Прочитать();
	ОбновитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФорму()
		
	ЦветСерый = Новый Цвет(128, 128, 128);
	ЦветСиний = Новый Цвет(0, 0, 255);
	
	ПустаяДата = Дата(1,1,1);
	
	ДатаОбновления = ?(Объект.ДатаПолученияРезультата = ПустаяДата, НСтр("ru = '<не определено>';
																		|en = '<не определено>'"), Объект.ДатаПолученияРезультата);
	
	Если Объект.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен
		Или Объект.СтатусОтправки = Перечисления.СтатусыОтправки.ВКонверте Тогда
		Элементы.НадписьСтатусОтправки.Заголовок = НСтр("ru = 'Протокол обработки пакета отсутствует';
														|en = 'Протокол обработки пакета отсутствует'");
		Элементы.НадписьСтатусОтправки.ЦветТекста = ЦветСерый;
		Элементы.НадписьСтатусОтправки.ГиперСсылка = Ложь;
	Иначе
		Элементы.КартинкаПодтверждениеОтправки.Картинка = БиблиотекаКартинок.ЗеленыйШар;
		ДатаЗакрытия =  Объект.ДатаЗакрытия;
		
		Если Объект.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
			Элементы.КартинкаСтатусОтправки.Картинка = БиблиотекаКартинок.РегламентированныйОтчетНеПринят;
			Элементы.НадписьСтатусОтправки.Заголовок = НСтр("ru = 'Протокол ошибок получен';
															|en = 'Протокол ошибок получен'");
			Элементы.НадписьСтатусОтправки.ЦветТекста = ЦветСиний;
			Элементы.НадписьСтатусОтправки.ГиперСсылка = Истина;
		ИначеЕсли Объект.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
			Элементы.КартинкаСтатусОтправки.Картинка = БиблиотекаКартинок.ПисьмоПодтверждениеПолучено;
			Элементы.НадписьСтатусОтправки.Заголовок = НСтр("ru = 'Уведомление о сдаче отчета получено';
															|en = 'Уведомление о сдаче отчета получено'");
			Элементы.НадписьСтатусОтправки.ЦветТекста = ЦветСиний;
			Элементы.НадписьСтатусОтправки.ГиперСсылка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьМеню();
КонецПроцедуры

&НаСервере
Процедура ОбновитьМеню()
	
	КнопкаВыгрузитьКвитанцию = Элементы.Найти("ФормаВыгрузитьКвитанцию");
	КнопкаВыгрузитьПротокол = Элементы.Найти("ФормаВыгрузитьПротокол");
	
	Если Объект.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен Тогда
		КнопкаВыгрузитьПротокол.Видимость 	= Ложь;
	ИначеЕсли Объект.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
		КнопкаВыгрузитьПротокол.Видимость 	= Истина;
	ИначеЕсли Объект.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан 
		ИЛИ Объект.СтатусОтправки = Перечисления.СтатусыОтправки.ПринятЕстьОшибки Тогда
		КнопкаВыгрузитьПротокол.Видимость 	= Истина;
	КонецЕсли;
	
	//кнопка Обновить
	КнопкаОбновить = Элементы.Найти("ФормаОбновить");
	КнопкаОбновить.Видимость = (Объект.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДанныеФормыНаСервере();
	
	//ПараметрыОповещения = Новый Структура; 
	//ПараметрыОповещения.Вставить("Ссылка", Объект.ОтчетСсылка);
	//ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	//Оповестить("Актуализация состояния отправки", ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресФайлаПакета(ФайлСсылка, Знач ИдентификаторФормы)
						
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСсылка);					
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, ИдентификаторФормы);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАдресФайлаПротокола(ОтправкаСсылка)
	
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ОтправкаСсылка.Протокол);
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
КонецФункции

#КонецОбласти






















