
#Область ОписаниеПеременных

&НаКлиенте
Перем РасположениеДанныхДоИзменения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Параметры.Свойство("Режим", Режим);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.ПереключитьОтображениеРеквизитов.Пометка = ОтображатьВсеРеквизиты;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОтображатьВсеРеквизиты");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере(ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьНастройкиТекущихЗагружаемыхДанных(ТекущийОбъект);
	
	СохранитьНастройкиИсточника(ТекущийОбъект);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеЗагружаемыхДанных", ОписаниеЗагружаемыхДанных);
	
	Если ИспользоватьМониторинг <> ПолучитьФункциональнуюОпцию("ИспользоватьМониторингСостоянияЗагрузкиПроизводственнойНСИ") Тогда
		ПараметрыЗаписи.Вставить("ОбновитьИнтерфейс");
		ИспользоватьМониторинг = НЕ ИспользоватьМониторинг;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ОбновитьИнтерфейс") Тогда
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
	Оповестить("Запись_ИсточникиДанныхЗагрузкиПроизводственнойНСИ", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьЭлементыФормы();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РазделКОбработкеПриИзменении(Элемент)
	
	КлючРаздела = Элемент.Имя;
	
	Если ЭтотОбъект[КлючРаздела] Тогда
		РазделыКОбработке.Вставить(КлючРаздела);
	ИначеЕсли РазделыКОбработке.Свойство(КлючРаздела) Тогда
		РазделыКОбработке.Удалить(КлючРаздела);
	КонецЕсли;
	
	РазделыКОбработкеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматОбменаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ФорматОбмена");
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеДанныхОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РасположениеДанныхДоИзменения = РасположениеДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеДанныхПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	АктуализироватьКаталогиПеремещения(ДействияСФайлами, РасположениеДанныхДоИзменения, РасположениеДанных);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДействияСФайлами");
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.Каталог = РасположениеДанных;
	ДиалогВыбора.Заголовок = НСтр("ru = 'Выберите каталог расположения файлов с данными';
									|en = 'Select a data file directory'");
	ОписаниеОповещения = Новый ОписаниеОповещения("РасположениеДанныхНачалоВыбораЗавершение", ЭтотОбъект);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОписаниеОповещения, ДиалогВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбновленияОбъектовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РедактироватьВариантОбновленияОбъектовЗавершение",
		ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбновлениеОбъектов", ОбновлениеОбъектов);
	
	ОткрытьФорму("Справочник.ИсточникиЗагрузкиПроизводственнойНСИ.Форма.ФормаВариантОбновленияОбъектов",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗагрузкиОборудованияПриИзменении(Элемент)
	
	РазделыКОбработкеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозагрузкаИспользуетсяПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Расписание");
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПередЗагрузкойНажатие(Элемент)
	
	РедактироватьАлгоритмОбработкиОбъекта(
		УправлениеДаннымиОбИзделияхКлиентСервер.ИмяСобытияПередЗагрузкойОбъекта());
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПередЗаписьюНажатие(Элемент)
	
	РедактироватьАлгоритмОбработкиОбъекта(
		УправлениеДаннымиОбИзделияхКлиентСервер.ИмяСобытияПередЗаписьюОбъекта());
	
КонецПроцедуры
&НаКлиенте
Процедура РазрешениеКонфликтовПриПоискеНажатие(Элемент)
	
	РедактироватьРазрешениеКонфликтовПриПоиске();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСФайламиНажатие(Элемент)
	
	СоответствиеЭлементов = СоответствиеСостояниеЭлементДействияСФайлами(Истина);
	
	РедактироватьДействиеСФайлами(СоответствиеЭлементов[Элемент.Имя]);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗагружаемыеДанные

&НаКлиенте
Процедура ЗагружаемыеДанныеПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ЗагружаемыеДанные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
			ИЛИ ТекущиеДанные.КлючОписанияЗагружаемыхДанных= ТекущийКлючОписанияЗагружаемыхДанных Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗагружаемыеДанныеПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкаРеквизитов

&НаКлиенте
Процедура НастройкаРеквизитовСпособУстановкиЗначенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаРеквизитов.ТекущиеДанные;
	
	Значение = ?(НЕ ТекущиеДанные.СпособУстановкиЗначения = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НеИспользовать")
					И ТипЗнч(ТекущиеДанные.Значение) = Тип("Строка"),
		ТекущиеДанные.Значение,
		Неопределено);
	ТекущиеДанные.Значение = НастроитьПараметрыВыбораЗначенияПоСтроке(ЭтотОбъект, ТекущиеДанные).ПривестиЗначение(Значение);
	
	РассчитатьПризнакАктивенСтрокиРеквизита(ТекущиеДанные);
	ОбновитьИнформациюОНаличииОшибокНастройки(ЭтотОбъект, ТекущийКлючОписанияЗагружаемыхДанных);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОтображатьВсеРеквизиты");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРеквизитовСпособУстановкиЗначенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРеквизитовСпособУстановкиЗначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораСпособаУстановкиЗначенияПоСтроке(Элементы.НастройкаРеквизитов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРеквизитовЗначениеПриИзменении(Элемент)
	
	ОбновитьИнформациюОНаличииОшибокНастройки(ЭтотОбъект, ТекущийКлючОписанияЗагружаемыхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРеквизитовПередНачаломИзменения(Элемент, Отказ)
	
	НастроитьПараметрыВыбораЗначенияПоСтроке(ЭтотОбъект, Элементы.НастройкаРеквизитов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРеквизитовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.НастройкаРеквизитовАлгоритмРасчетаЗначения Тогда
		
		СтандартнаяОбработка = Ложь;
		РедактироватьАлгоритмУстановкиЗначенияРеквизита(ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРеквизитовПолеПоискаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ЗагружаемыеДанные");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	Расписание = ?(АвтозагрузкаРасписание = Неопределено,
		Новый РасписаниеРегламентногоЗадания(),
		АвтозагрузкаРасписание);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект);
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ДиалогРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьОтображениеРеквизитов(Команда)
	
	ОтображатьВсеРеквизиты = НЕ ОтображатьВсеРеквизиты;
	
	Элементы.ПереключитьОтображениеРеквизитов.Пометка = ОтображатьВсеРеквизиты;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОтображатьВсеРеквизиты");
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиПравилЗагрузки(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СброситьНастройкиПравилЗагрузкиЗавершение", ЭтотОбъект),
		НСтр("ru = 'Внимание! Все существующие настройки правил загрузки данных будут очищены. Продолжить?';
			|en = 'Important. All the current settings of data import rules will be cleared. Continue?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружаемыеДанныеСвернуть(Команда)
	
	ДеревоТиповСвертка(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружаемыеДанныеРазвернуть(Команда)
	
	ДеревоТиповСвертка(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеОбъектов(Команда)
	
	Если Модифицированность
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СоответствиеОбъектовЗавершение", ЭтотОбъект),
			НСтр("ru = 'Для перехода к просмотру и редактированию сопоставленных объектов, источник данных будет записан. Продолжить?';
				|en = 'To view and edit mapped objects, the data source will be saved. Continue?'"),
			РежимДиалогаВопрос.ДаНет);
			
	Иначе
		
		ОткрытьФормуСоответствиеОбъектов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МониторингСостоянияЗагрузки(Команда)
	
	Если Модифицированность
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("МониторингСостоянияЗагрузкиЗавершение", ЭтотОбъект),
			НСтр("ru = 'Для перехода к форме мониторинга, источник данных будет записан. Продолжить?';
				|en = 'To go to the monitoring form, the data source will be saved. Continue?'"),
			РежимДиалогаВопрос.ДаНет);
			
	Иначе
		
		ОткрытьФормуМониторингСостоянияЗагрузки();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область НастройкаРеквизитов
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаРеквизитов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.СпособУстановкиЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НеИспользовать;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаРеквизитов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.ПолеПоиска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);
	
	#КонецОбласти
	
	#Область НастройкаРеквизитовПолеПоиска
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаРеквизитовПолеПоиска.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружаемыеДанные.ДоступенПоиск");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаРеквизитовПолеПоиска.Имя);
	
	ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.ДоступенПоиск");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.СпособУстановкиЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НеИспользовать;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.ОбязательныйПоиск");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область НастройкаРеквизитовЗначение
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаРеквизитовЗначение.Имя);
	
	ГруппаИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.СпособУстановкиЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.СписокЗначений(, "НеИспользовать,РассчитатьПоАлгоритму");
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаРеквизитовЗначение.Имя);
	
	ГруппаИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.СпособУстановкиЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.УстановитьВЗначение;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.Обязательный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<значение будет очищено>';
																|en = '<the value will be cleared>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаРеквизитовЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.СпособУстановкиЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.СписокЗначений("НеИспользовать,РассчитатьПоАлгоритму");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаРеквизитовЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.СпособУстановкиЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.РассчитатьПоАлгоритму;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	#Область НастройкаРеквизитовАлгоритмРасчетаЗначения
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаРеквизитовАлгоритмРасчетаЗначения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.АлгоритмРасчетаЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстАлгоритмЗаполнен());
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаРеквизитовАлгоритмРасчетаЗначения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.АлгоритмРасчетаЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстАлгоритмНеЗаполнен());
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблема);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаРеквизитовАлгоритмРасчетаЗначения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаРеквизитов.СпособУстановкиЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.РассчитатьПоАлгоритму;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере(ТекущийОбъект = Неопределено)
	
	ЗаполнитьНастройкиИсточника(ТекущийОбъект);
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ЗаполнитьДеревоЗагружаемыхДанных();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ИспользоватьМониторинг = ПолучитьФункциональнуюОпцию("ИспользоватьМониторингСостоянияЗагрузкиПроизводственнойНСИ");
	
	ЗаполнитьОписаниеЗагружаемыхДанных();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеЗагружаемыхДанных()
	
	ОписаниеЗагружаемыхДанных = УправлениеДаннымиОбИзделиях.ОписаниеЗагружаемыхДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиИсточника(ТекущийОбъект)
	
	НастройкиИсточника = Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.НастройкиИсточникаДанных(ТекущийОбъект);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиИсточника);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИсточника(ТекущийОбъект)
	
	Настройки = Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.НастройкиИсточникаДанныхКонструктор(1);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);
	Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.ПоместитьСтруктуруНастроекВХранилище(ТекущийОбъект, Настройки);
	
	Настройки = Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.НастройкиИсточникаДанныхКонструктор();
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НастройкиИсточника", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Если НЕ ПустаяСтрока(Режим) Тогда
		
		Если Режим = "НастройкаОсновныхПараметров" Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаОсновное;
			Элементы.ГруппаСтраницаНастройкаПравил.Доступность = Ложь;
		ИначеЕсли Режим = "НастройкаПравилЗагрузки" Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаНастройкаПравил;
			Элементы.ГруппаСтраницаОсновное.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьЭлементыРазделыКОбработке();

	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("РазделыКОбработке")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаВариантЗагрузкиОборудования.Видимость =
			Форма.РазделыКОбработке.Свойство(УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаПроизводственноеОборудование());
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ФорматОбмена")
		ИЛИ Инициализация Тогда
		
		Элементы.ПояснениеФорматОбмена.Заголовок = ПояснениеПоФорматуОбмена(Форма, Объект.ФорматОбмена);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ДействияСФайлами")
		ИЛИ Инициализация Тогда
		
		НастроитьЭлементыДействияСФайлами(Форма);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Расписание")
		ИЛИ Инициализация Тогда
			
		Элементы.АвтозагрузкаИспользуется.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
		Элементы.НастроитьРасписание.Доступность = Форма.АвтозагрузкаИспользуется;
		Если Форма.АвтозагрузкаРасписание <> Неопределено Тогда
			Элементы.НастроитьРасписание.Заголовок = Строка(Форма.АвтозагрузкаРасписание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ОтображатьВсеРеквизиты")
		ИЛИ Инициализация Тогда
			
		Если Форма.ОтображатьВсеРеквизиты Тогда
			ОтборСтрок = Новый ФиксированнаяСтруктура;
		Иначе
			ОтборСтрок = Новый ФиксированнаяСтруктура("Активен", Истина);
		КонецЕсли;
		Элементы.НастройкаРеквизитов.ОтборСтрок = ОтборСтрок;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ЗагружаемыеДанные")
		ИЛИ Инициализация Тогда
		
		НастроитьЭлементыАлгоритмовОбработкиОбъектов(Форма);
		
		НастроитьЭлементРазрешениеКонфликтовПриПоиске(Форма);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ОбновлениеОбъектов")
		ИЛИ Инициализация Тогда
		
		НастроитьЭлементыОбновлениеОбъектов(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыАлгоритмовОбработкиОбъектов(Форма)
	
	Если НЕ ЗначениеЗаполнено(Форма.ТекущийКлючОписанияЗагружаемыхДанных) Тогда
		Форма.Элементы.ГруппаНастройкаПравилАлгоритмы.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Описание = Форма.ОписаниеЗагружаемыхДанных[Форма.ТекущийКлючОписанияЗагружаемыхДанных]; // см. УправлениеДаннымиОбИзделиях.ОписаниеЭлементаЗагружаемыхДанныхКонструктор
	Форма.Элементы.ГруппаНастройкаПравилАлгоритмы.Видимость = Описание.ДоступныАлгоритмыОбъекта;
	
	СтруктураСобытий = Новый Структура;
	СтруктураСобытий.Вставить(УправлениеДаннымиОбИзделияхКлиентСервер.ИмяСобытияПередЗагрузкойОбъекта(), Форма.Элементы.АлгоритмПередЗагрузкой.Имя);
	СтруктураСобытий.Вставить(УправлениеДаннымиОбИзделияхКлиентСервер.ИмяСобытияПередЗаписьюОбъекта(), Форма.Элементы.АлгоритмПередЗаписью.Имя);
	
	Для каждого КлючИЗначение Из СтруктураСобытий Цикл
		КлючАлгоритма = УправлениеДаннымиОбИзделияхКлиентСервер.КлючАлгоритмаОбработкиОбъектаПриЗагрузке(
			КлючИЗначение.Ключ,
			Описание.ИмяОбъектаМетаданных,
			Описание.ИмяТЧ);
		Если Форма.АлгоритмыОбработкиОбъектов.Свойство(КлючАлгоритма)
				И ЗначениеЗаполнено(Форма.АлгоритмыОбработкиОбъектов[КлючАлгоритма]) Тогда
			Форма.Элементы[КлючИЗначение.Значение].Заголовок  = ТекстАлгоритмЗаполнен();
			Форма.Элементы[КлючИЗначение.Значение].ЦветТекста = Новый Цвет();
		Иначе
			Форма.Элементы[КлючИЗначение.Значение].Заголовок  = ТекстАлгоритмНеЗаполнен();
			Форма.Элементы[КлючИЗначение.Значение].ЦветТекста = WebЦвета.Серый;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементРазрешениеКонфликтовПриПоиске(Форма)
	
	Если НЕ ЗначениеЗаполнено(Форма.ТекущийКлючОписанияЗагружаемыхДанных) Тогда
		Форма.Элементы.ГруппаРазрешениеКонфликтовПриПоиске.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Описание = Форма.ОписаниеЗагружаемыхДанных[Форма.ТекущийКлючОписанияЗагружаемыхДанных];
	Форма.Элементы.ГруппаРазрешениеКонфликтовПриПоиске.Видимость = Описание.ДоступенПоиск;
	Форма.Элементы.ГруппаРазрешениеКонфликтовПриПоиске.Доступность = Форма.НастройкаРеквизитов.НайтиСтроки(Новый Структура("ПолеПоиска", Истина)).Количество();
	
	Настройка = Неопределено;
	Если НЕ Форма.РазрешениеКонфликтовПриПоиске.Свойство(Форма.ТекущийКлючОписанияЗагружаемыхДанных, Настройка) Тогда
		Настройка = УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеНастройкиРазрешенияКонфликтаПриПоискеКонструктор();
	КонецЕсли;
	
	Если Настройка.Правило = УправлениеДаннымиОбИзделияхКлиентСервер.ПравилоРазрешенияКонфликтаПриПоискеРегистрироватьОшибку() Тогда
		ПравилоЗаголовок = НСтр("ru = 'Регистрировать ошибку';
								|en = 'Register an error'");
		ПравилоЦвет = Новый Цвет();
	ИначеЕсли Настройка.Правило = УправлениеДаннымиОбИзделияхКлиентСервер.ПравилоРазрешенияКонфликтаПриПоискеСортировать() Тогда
		ПравилоЗаголовок = СтрШаблон(НСтр("ru = 'Сортировать (%1)';
											|en = 'Sort (%1)'"), ПредставлениеСортировки(Описание, Настройка.НастройкиСортировки));
		ПравилоЦвет = Новый Цвет();
	Иначе
		ПравилоЗаголовок = НСтр("ru = '<не задано>';
								|en = '<not set>'");
		ПравилоЦвет = WebЦвета.Серый;
	КонецЕсли;
	
	Форма.Элементы.РазрешениеКонфликтовПриПоиске.Заголовок  = ПравилоЗаголовок;
	Форма.Элементы.РазрешениеКонфликтовПриПоиске.ЦветТекста = ПравилоЦвет;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыДействияСФайлами(Форма)
	
	РасположениеДанных = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Форма.РасположениеДанных);
	СоответствиеЭлементов = СоответствиеСостояниеЭлементДействияСФайлами();
	
	Для каждого Состояние Из СтрРазделить("ВыполненаУспешно,ВыполненаСОшибками,НеВыполнена", ",") Цикл
		
		ЭлементДействие = Форма.Элементы[СоответствиеЭлементов[Состояние]];
		
		ОписаниеДействия = Неопределено;
		Если Форма.ДействияСФайлами.Свойство(Состояние, ОписаниеДействия) Тогда
			
			Если ЗначениеЗаполнено(ОписаниеДействия.Каталог) Тогда
				Если ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ОписаниеДействия.Каталог) <> РасположениеДанных
						И СтрНайти(ОписаниеДействия.Каталог, РасположениеДанных) = 1 Тогда
					КаталогПредставление = СтрШаблон("..\%1", СтрЗаменить(ОписаниеДействия.Каталог, РасположениеДанных, ""));
				Иначе
					КаталогПредставление = ОписаниеДействия.Каталог;
				КонецЕсли;
				ЭлементДействие.Заголовок = СтрШаблон(НСтр("ru = '%1 в каталог %2';
															|en = '%1 to the %2 directory'"), ОписаниеДействия.Действие, КаталогПредставление);
			Иначе
				ЭлементДействие.Заголовок = ОписаниеДействия.Действие;
			КонецЕсли;
			
			ЭлементДействие.ЦветТекста = Новый Цвет();
			
		Иначе
			
			ЭлементДействие.Заголовок  = НСтр("ru = '<действие не задано>';
												|en = '<action is not specified>'");
			ЭлементДействие.ЦветТекста = WebЦвета.Серый;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыРазделыКОбработке()
	
	Для каждого КлючИЗначение Из РазделыКОбработке Цикл
		ЭтотОбъект[КлючИЗначение.Ключ] = Истина;
	КонецЦикла;
	
	КлючРазделаЗамены = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаЗаменыМатериалов();
	Элементы[КлючРазделаЗамены].Доступность = ПолучитьФункциональнуюОпцию("ИспользоватьАналогиМатериалов")
		ИЛИ РазделыКОбработке.Свойство(КлючРазделаЗамены);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыОбновлениеОбъектов(Форма)
	
	Форма.ВариантОбновленияОбъектов = Форма.ОбновлениеОбъектов.ВариантОбновления;
	
КонецПроцедуры

#Область СтраницаОсновныеПараметры

&НаКлиентеНаСервереБезКонтекста
Функция ПояснениеПоФорматуОбмена(Форма, ФорматОбмена)
	
	МассивСтрок = Новый Массив;
	
	Если ЗначениеЗаполнено(ФорматОбмена) Тогда
		
		Если ФорматОбмена = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИФорматы.XLS") Тогда
			МассивСтрок.Добавить(
				НСтр("ru = 'Все файлы, расположенные в каталоге, считаются данными для загрузки и будут обрабатываться в порядке сортировки по алфавиту.
				|Каждый файл должен содержать перечень листов, со следующими наименованиями для каждого типа загружаемых данных:';
				|en = 'All the files in the directory are considered data to import. They will be processed in an alphabetical order.
				|Each file must contain a list of sheets with the following names for each type of data to import:'"));
			Расширение = "";
		Иначе
			МассивСтрок.Добавить(
				НСтр("ru = 'Файлы каждого типа загружаемых данных будут обрабатываться в перечисленном ниже порядке и должны иметь следующий формат наименований:';
					|en = 'Files of each type of data to import will be processed in the order listed below. They must have the following name format:'"));
			Расширение = СтрШаблон("*.%1", НРег(ФорматОбмена));
		КонецЕсли;
		
		Индекс = 1;
		Для каждого КлючРаздела Из УправлениеДаннымиОбИзделияхКлиентСервер.ПорядокОбработкиРазделов() Цикл
			Если НЕ Форма.РазделыКОбработке.Свойство(КлючРаздела) Тогда
				Продолжить;
			КонецЕсли;
			Если КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаИзделияИМатериалы() Тогда
				Пояснение = НСтр("ru = 'для изделий и материалов';
								|en = 'for finished products and materials'");
			ИначеЕсли КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаПроизводственноеОборудование() Тогда
				Пояснение = НСтр("ru = 'для оборудования';
								|en = 'for equipment'");
			ИначеЕсли КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаСоставыИзделий() Тогда
				Пояснение = НСтр("ru = 'для составов изделий';
								|en = 'for compositions of finished products'");
			ИначеЕсли КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаТехнологияПроизводства() Тогда
				Пояснение = НСтр("ru = 'для технологии производства';
								|en = 'for manufacturing technology'");
			ИначеЕсли КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаЗаменыМатериалов() Тогда
				Пояснение = НСтр("ru = 'для замен материалов';
								|en = 'for material replacements'");
			КонецЕсли;
			МассивСтрок.Добавить(СтрШаблон("%1 - %2%3 - %4;", Индекс, КлючРаздела, Расширение, Пояснение));
			Индекс = Индекс + 1;
		КонецЦикла;
		
	Иначе
		
		МассивСтрок.Добавить(НСтр("ru = '<необходимо выбрать формат обмена данными>';
									|en = '<select a data exchange format>'"));
		
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаКлиенте
Процедура РасположениеДанныхНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		АктуализироватьКаталогиПеремещения(ДействияСФайлами, РасположениеДанных, Результат[0]);
		РасположениеДанных = Результат[0];
		Модифицированность = Истина;
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДействияСФайлами");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		АвтозагрузкаРасписание = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Расписание");
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыКОбработкеПриИзменении()
	
	РазделыКОбработкеПриИзмененииНаСервере();
	
	ДеревоТиповСвертка(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура РазделыКОбработкеПриИзмененииНаСервере()
	
	СохранитьНастройкиТекущихЗагружаемыхДанных(Объект);
	
	ЗаполнитьОписаниеЗагружаемыхДанных();
	
	ЗаполнитьДеревоЗагружаемыхДанных();
	
	ТекущийКлючОписанияЗагружаемыхДанных = "";
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "РазделыКОбработке,ФорматОбмена");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДействиеСФайлами(СостояниеНаименование)
	
	ПараметрыОповещения = Новый Структура;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РедактироватьДействиеСФайламиЗавершение",
		ЭтотОбъект,
		ПараметрыОповещения);
		
	ОписаниеДействия = Неопределено;
	Если НЕ ДействияСФайлами.Свойство(СостояниеНаименование, ОписаниеДействия) Тогда
		ОписаниеДействия = УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеДействияСФайламиКонструктор(СостояниеНаименование);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОписаниеДействия",   ОписаниеДействия);
	ПараметрыФормы.Вставить("РасположениеДанных", РасположениеДанных);
	
	ОткрытьФорму("Справочник.ИсточникиЗагрузкиПроизводственнойНСИ.Форма.ФормаДействиеПослеЗагрузки",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДействиеСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		СостояниеНаименование = Результат.СостояниеНаименование;
		
		Если Результат.Действие = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИДействияСФайлами.НеЗадано") Тогда
			Если ДействияСФайлами.Свойство(СостояниеНаименование) Тогда
				ДействияСФайлами.Удалить(СостояниеНаименование);
			КонецЕсли;
		Иначе
			ДействияСФайлами.Вставить(СостояниеНаименование, Результат);
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДействияСФайлами");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура АктуализироватьКаталогиПеремещения(ДействияСФайлами, РасположениеДанныхДоИзменения, РасположениеДанных)
	
	Если ПустаяСтрока(РасположениеДанных) Тогда
		Возврат;
	КонецЕсли;
	
	РасположениеДо    = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РасположениеДанныхДоИзменения);
	РасположениеПосле = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РасположениеДанных);
	
	Если РасположениеДанныхДоИзменения = РасположениеДанных Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ДействияСФайлами Цикл
		
		ОписаниеДействия = КлючИЗначение.Значение;
		Если ОписаниеДействия.Действие <> ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИДействияСФайлами.Переместить") Тогда
			Продолжить;
		КонецЕсли;
		
		КаталогДействия = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ОписаниеДействия.Каталог);
		Если КаталогДействия = РасположениеДо Тогда
			ОписаниеДействия.Каталог = РасположениеДанных;
		ИначеЕсли СтрНайти(КаталогДействия, РасположениеДо) = 1 Тогда
			ОписаниеДействия.Каталог = СтрЗаменить(ОписаниеДействия.Каталог, РасположениеДо, РасположениеПосле);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВариантОбновленияОбъектовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ОбновлениеОбъектов = Результат;
		
		Модифицированность = Истина;
		
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОбновлениеОбъектов");
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СтраницаНастройкаПравилЗагрузки

&НаКлиенте
Процедура Подключаемый_ЗагружаемыеДанныеПриАктивизацииСтроки()
	
	ЗагружаемыеДанныеПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагружаемыеДанныеПриАктивизацииСтрокиНаСервере()
	
	СохранитьНастройкиТекущихЗагружаемыхДанных(Объект);
	
	ЗаполнитьРеквизитыЗагружаемыхДанных();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ЗагружаемыеДанные");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповСвертка(Свернуть = Истина, Знач КоллекцияСтрок = Неопределено)
	
	Если КоллекцияСтрок = Неопределено Тогда
		КоллекцияСтрок = ЗагружаемыеДанные;
	КонецЕсли;
	
	Для каждого СтрокаДерева Из КоллекцияСтрок.ПолучитьЭлементы() Цикл
		Если Свернуть Тогда
			ДеревоТиповСвертка(Свернуть, СтрокаДерева);
			Элементы.ЗагружаемыеДанные.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		Иначе
			Элементы.ЗагружаемыеДанные.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуВДеревоЗагружаемыхДанных(ИмяОбъектаМетаданных, ИмяТЧ = "", СтрокиДерева = Неопределено)
	
	КлючОписанияЗагружаемыхДанных = УправлениеДаннымиОбИзделияхКлиентСервер.КлючОписанияЭлементаЗагружаемыхДанных(ИмяОбъектаМетаданных, ИмяТЧ);
	
	Описание = ОписаниеЗагружаемыхДанных[КлючОписанияЗагружаемыхДанных]; // см. УправлениеДаннымиОбИзделиях.ОписаниеЭлементаЗагружаемыхДанныхКонструктор
	
	Если СтрокиДерева = Неопределено Тогда
		СтрокиДерева = ЗагружаемыеДанные.ПолучитьЭлементы();
	КонецЕсли;
	
	НоваяСтрока = СтрокиДерева.Добавить();
	НоваяСтрока.КлючОписанияЗагружаемыхДанных = КлючОписанияЗагружаемыхДанных;
	НоваяСтрока.ДоступенПоиск = Описание.ДоступенПоиск;
	НоваяСтрока.Представление = Описание.Представление;
	
	НоваяСтрока.КартинкаТипДанных = ?(
			ПустаяСтрока(Описание.ИмяТЧ),
			БиблиотекаКартинок[СтрРазделить(Описание.ПолноеИмя,".")[0]],
			БиблиотекаКартинок.ВложеннаяТаблица);
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоЗагружаемыхДанных()
	
	ЗагружаемыеДанные.ПолучитьЭлементы().Очистить();
	
	Если РазделыКОбработке.Свойство(УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаИзделияИМатериалы()) Тогда
		ДобавитьСтрокуВДеревоЗагружаемыхДанных("Номенклатура");
	КонецЕсли;
	
	Если РазделыКОбработке.Свойство(УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаПроизводственноеОборудование()) Тогда
		ДобавитьСтрокуВДеревоЗагружаемыхДанных(XmlСтрока(ВариантЗагрузкиОборудования));
	КонецЕсли;
	
	Если РазделыКОбработке.Свойство(УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаСоставыИзделий()) Тогда
		СтрокиДерева = ДобавитьСтрокуВДеревоЗагружаемыхДанных("РесурсныеСпецификации").ПолучитьЭлементы();
		ДобавитьСтрокуВДеревоЗагружаемыхДанных("РесурсныеСпецификации", "МатериалыИУслуги", СтрокиДерева);
	КонецЕсли;
	
	Если РазделыКОбработке.Свойство(УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаТехнологияПроизводства()) Тогда
		ДобавитьСтрокуВДеревоЗагружаемыхДанных("РесурсныеСпецификации", "Трудозатраты", СтрокиДерева);
		СтрокиДерева = ДобавитьСтрокуВДеревоЗагружаемыхДанных("ЭтапыПроизводства",, СтрокиДерева).ПолучитьЭлементы();
		ДобавитьСтрокуВДеревоЗагружаемыхДанных("ТехнологическиеОперации",, СтрокиДерева);
		ДобавитьСтрокуВДеревоЗагружаемыхДанных("ВидыРаботСотрудников");
	КонецЕсли;
	
	Если РазделыКОбработке.Свойство(УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаЗаменыМатериалов()) Тогда
		СтрокиДерева = ДобавитьСтрокуВДеревоЗагружаемыхДанных("РазрешениеНаЗаменуМатериалов").ПолучитьЭлементы();
		ДобавитьСтрокуВДеревоЗагружаемыхДанных("РазрешениеНаЗаменуМатериалов", "Материалы", СтрокиДерева);
	КонецЕсли;
	
	ОбновитьИнформациюОНаличииОшибокНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиПравилЗагрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
	
		СброситьНастройкиПравилЗагрузкиДанных();
		ЗаполнитьРеквизитыЗагружаемыхДанных();
		ОбновитьИнформациюОНаличииОшибокНастройки(ЭтотОбъект);
		
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИнформациюОНаличииОшибокНастройки(Форма, КлючОписанияЗагружаемыхДанных = "", СтрокиДерева = Неопределено)
	
	Если СтрокиДерева = Неопределено Тогда
		СтрокиДерева = Форма.ЗагружаемыеДанные.ПолучитьЭлементы();
	КонецЕсли;
	
	Для каждого Строка Из СтрокиДерева Цикл
		
		ОбновитьИнформациюОНаличииОшибокНастройки(Форма, КлючОписанияЗагружаемыхДанных, Строка.ПолучитьЭлементы());
		
		Если ЗначениеЗаполнено(КлючОписанияЗагружаемыхДанных)
				И Строка.КлючОписанияЗагружаемыхДанных <> КлючОписанияЗагружаемыхДанных Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибки = Ложь;
		
		РеквизитыОбязательные = Новый Массив;
		Если Строка.КлючОписанияЗагружаемыхДанных = Форма.ТекущийКлючОписанияЗагружаемыхДанных Тогда
			СтрокиТаблицы = Форма.НастройкаРеквизитов;
		Иначе
			Описание = Форма.ОписаниеЗагружаемыхДанных[Строка.КлючОписанияЗагружаемыхДанных];
			СтрокиТаблицы = Форма.Объект.ОписаниеРеквизитов.НайтиСтроки(Описание.СтруктураОтбора);
			Для каждого Элемент Из Описание.РеквизитыОбязательные Цикл
				РеквизитыОбязательные.Добавить(Элемент);
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			Индекс = РеквизитыОбязательные.Найти(СтрокаТаблицы.ИмяРеквизита);
			Если Индекс <> Неопределено Тогда
				РеквизитыОбязательные.Удалить(Индекс);
			КонецЕсли;
			Если СтрокаТаблицы.СпособУстановкиЗначения = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НеИспользовать") Тогда
				Продолжить;
			ИначеЕсли СтрокаТаблицы.СпособУстановкиЗначения = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.РассчитатьПоАлгоритму")
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.АлгоритмРасчетаЗначения) Тогда
				ЕстьОшибки = Истина;
				Прервать;
			ИначеЕсли НЕ СтрокаТаблицы.СпособУстановкиЗначения = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.РассчитатьПоАлгоритму")
				И НЕ СтрокаТаблицы.СпособУстановкиЗначения = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.УстановитьВЗначение")
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
				ЕстьОшибки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если РеквизитыОбязательные.Количество() > 0 Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Строка.ЕстьОшибки = ЕстьОшибки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьРазрешениеКонфликтовПриПоиске()
	
	ПараметрыОповещения = Новый Структура;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РедактироватьРазрешениеКонфликтовПриПоискеЗавершение",
		ЭтотОбъект,
		ПараметрыОповещения);
		
	Описание = ОписаниеЗагружаемыхДанных[ТекущийКлючОписанияЗагружаемыхДанных];
		
	ЗаголовокФормы = СтрШаблон(НСтр("ru = 'Разрешение конфликтов при поиске в справочнике ""%1""';
									|en = 'Resolve conflicts during the search in the %1 catalog'"),
		Описание.Представление);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормы);
	ПараметрыФормы.Вставить("ОписаниеЭлементаЗагружаемыхДанных", Описание);
	Если РазрешениеКонфликтовПриПоиске.Свойство(ТекущийКлючОписанияЗагружаемыхДанных) Тогда
		ПараметрыФормы.Вставить("НастройкаРазрешенияКонфликтаПриПоиске", РазрешениеКонфликтовПриПоиске[ТекущийКлючОписанияЗагружаемыхДанных]);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ИсточникиЗагрузкиПроизводственнойНСИ.Форма.ФормаРазрешениеКонфликтовПриПоиске",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьРазрешениеКонфликтовПриПоискеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Настройка = Неопределено;
		Если Результат.Свойство("НастройкаРазрешенияКонфликтаПриПоиске", Настройка) Тогда
			РазрешениеКонфликтовПриПоиске.Вставить(ТекущийКлючОписанияЗагружаемыхДанных, Настройка);
		Иначе
			РазрешениеКонфликтовПриПоиске.Удалить(ТекущийКлючОписанияЗагружаемыхДанных);
		КонецЕсли;
		
		НастроитьЭлементРазрешениеКонфликтовПриПоиске(ЭтотОбъект);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСортировки(ОписаниеЭлементаЗагружаемыхДанных, НастройкиСортировки)
	
	Если НастройкиСортировки.ВГраница() = -1 Тогда
		Возврат НСтр("ru = 'сортировка не задана';
					|en = 'sort is not set'");
	КонецЕсли;
	
	МассивПредставлений   = Новый Массив;
	МаксимумПредставлений = 3;
	
	Для каждого ЭлементСортировки Из НастройкиСортировки Цикл // см. УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеЭлементаСортировкиКонструктор
		Представление = СокрЛП(ЭлементСортировки.ИмяРеквизита);
		Для каждого ГруппаРеквизитов Из УправлениеДаннымиОбИзделияхКлиентСервер.ГруппыРеквизитовШапкиОбъекта() Цикл
			Для каждого КлючИЗначение Из ОписаниеЭлементаЗагружаемыхДанных[ГруппаРеквизитов] Цикл
				Если ЭлементСортировки.ИмяРеквизита = КлючИЗначение.Ключ Тогда
					Представление = СокрЛП(КлючИЗначение.Значение.Представление);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		МассивПредставлений.Добавить(?(ЭлементСортировки.Направление = "Возр", Представление, СтрШаблон(НСтр("ru = '%1 Убыв';
																											|en = '%1 Desc'"), Представление)));
		Если МассивПредставлений.Количество() = МаксимумПредставлений Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = СтрСоединить(МассивПредставлений, "; ");
	Если НастройкиСортировки.Количество() > МаксимумПредставлений Тогда
		Результат = СтрШаблон(НСтр("ru = '%1...(+ еще %2)';
									|en = '%1...(+ %2 more)'"), Результат, НастройкиСортировки.Количество() - МаксимумПредставлений);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область РаботаСАлгоритмами

&НаКлиенте
Процедура РедактироватьАлгоритмОбработкиОбъекта(ИмяСобытия)
	
	Описание = ОписаниеЗагружаемыхДанных[ТекущийКлючОписанияЗагружаемыхДанных];
	
	КлючАлгоритма = УправлениеДаннымиОбИзделияхКлиентСервер.КлючАлгоритмаОбработкиОбъектаПриЗагрузке(
		ИмяСобытия,
		Описание.ИмяОбъектаМетаданных,
		Описание.ИмяТЧ);
	
	ОтборПараметров = Новый Структура;
	ОтборПараметров.Вставить("ОбъектМетаданных", Описание.ОбъектМетаданных);
	ОтборПараметров.Вставить("КлючСвязи", УправлениеДаннымиОбИзделияхКлиентСервер.КлючСвязиВидаАлгоритмаОбработкиОбъекта(ИмяСобытия));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КлючАлгоритма", КлючАлгоритма);
	ПараметрыОповещения.Вставить("ОтборПараметров", ОтборПараметров);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РедактироватьАлгоритмОбработкиОбъектаЗавершение",
		ЭтотОбъект,
		ПараметрыОповещения);
		
	ЗаголовокФормы = СтрШаблон(НСтр("ru = 'Алгоритм ""%1"" справочника ""%2""';
									|en = 'The %1 algorithm of the %2 catalog'"),
		УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеВидаАлгоритмаОбработкиОбъекта(ИмяСобытия),
		Описание.Представление);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормы);
	Если АлгоритмыОбработкиОбъектов.Свойство(КлючАлгоритма) Тогда
		ПараметрыФормы.Вставить("ТекстАлгоритма", АлгоритмыОбработкиОбъектов[КлючАлгоритма]);
		ПараметрыФормы.Вставить("ПараметрыАлгоритма", ПолучитьПараметрыАлгоритма(ЭтотОбъект, ОтборПараметров));
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ИсточникиЗагрузкиПроизводственнойНСИ.Форма.ФормаРедактированияАлгоритма",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьАлгоритмОбработкиОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		КлючАлгоритма = ДополнительныеПараметры.КлючАлгоритма;
		
		Если ЗначениеЗаполнено(Результат.ТекстАлгоритма) Тогда
			АлгоритмыОбработкиОбъектов.Вставить(КлючАлгоритма, Результат.ТекстАлгоритма);
		Иначе
			АлгоритмыОбработкиОбъектов.Удалить(КлючАлгоритма);
		КонецЕсли;
		
		СохранитьПараметрыАлгоритма(ЭтотОбъект, ДополнительныеПараметры.ОтборПараметров, Результат.ПараметрыАлгоритма);
		
		ОбновитьИнформациюОНаличииОшибокНастройки(ЭтотОбъект, ТекущийКлючОписанияЗагружаемыхДанных);
		
		НастроитьЭлементыАлгоритмовОбработкиОбъектов(ЭтотОбъект);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьАлгоритмУстановкиЗначенияРеквизита(ИдентификаторСтроки)
	
	ДанныеСтроки = НастройкаРеквизитов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ОтборПараметров = Новый Структура;
	ОтборПараметров.Вставить("КлючСвязи", ДанныеСтроки.КлючСвязи);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОтборПараметров", ОтборПараметров);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РедактироватьАлгоритмУстановкиЗначенияРеквизитаЗавершение",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ЗаголовокФормы = СтрШаблон(НСтр("ru = 'Алгоритм расчета значения реквизита ""%1""';
									|en = 'An algorithm to calculate a value of the %1 attribute'"), ДанныеСтроки.Представление);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстАлгоритма", ДанныеСтроки.АлгоритмРасчетаЗначения);
	ПараметрыФормы.Вставить("ПараметрыАлгоритма", ПолучитьПараметрыАлгоритма(ЭтотОбъект, ОтборПараметров));
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормы);
	
	ОткрытьФорму("Справочник.ИсточникиЗагрузкиПроизводственнойНСИ.Форма.ФормаРедактированияАлгоритма",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьАлгоритмУстановкиЗначенияРеквизитаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Элементы.НастройкаРеквизитов.ТекущиеДанные.АлгоритмРасчетаЗначения = Результат.ТекстАлгоритма;
		
		СохранитьПараметрыАлгоритма(ЭтотОбъект, ДополнительныеПараметры.ОтборПараметров, Результат.ПараметрыАлгоритма);
		
		ОбновитьИнформациюОНаличииОшибокНастройки(ЭтотОбъект, ТекущийКлючОписанияЗагружаемыхДанных);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПараметрыАлгоритма(Форма, ОтборПараметров)
	
	МассивПараметров = Новый Массив;
	Таблица = Форма.Объект.ПараметрыАлгоритмов;
	
	НайденныеСтроки = Таблица.НайтиСтроки(ОтборПараметров);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		МассивПараметров.Добавить(Новый Структура("ИмяПараметра,Значение", НайденнаяСтрока.ИмяПараметра, НайденнаяСтрока.Значение));
	КонецЦикла;
	
	Возврат МассивПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьПараметрыАлгоритма(Форма, ОтборПараметров, МассивПараметров)
	
	Таблица = Форма.Объект.ПараметрыАлгоритмов;
	
	НайденныеСтроки = Таблица.НайтиСтроки(ОтборПараметров);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Таблица.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
	Для каждого Параметр Из МассивПараметров Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметр);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтборПараметров);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстАлгоритмЗаполнен()
	Возврат НСтр("ru = '<алгоритм установлен>';
				|en = '<algorithm is set>'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстАлгоритмНеЗаполнен()
	Возврат НСтр("ru = '<алгоритм не установлен>';
				|en = '<algorithm is not set>'");
КонецФункции

#КонецОбласти

#Область РаботаСРеквизитами

// Сохраняет настройку реквизитов текущего типа загружаемых данных
// 
// Параметры:
//  ТекущийОбъект - ДанныеФормыСтруктура, СправочникОбъект.ИсточникиЗагрузкиПроизводственнойНСИ - Текущий объект
&НаСервере
Процедура СохранитьНастройкиТекущихЗагружаемыхДанных(ТекущийОбъект)
	
	Если НЕ ЗначениеЗаполнено(ТекущийКлючОписанияЗагружаемыхДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Описание = ОписаниеЗагружаемыхДанных[ТекущийКлючОписанияЗагружаемыхДанных];
	
	Для каждого Строка Из ТекущийОбъект.ОписаниеРеквизитов.НайтиСтроки(Описание.СтруктураОтбора) Цикл
		ТекущийОбъект.ОписаниеРеквизитов.Удалить(Строка);
	КонецЦикла;
	
	Для каждого Строка Из НастройкаРеквизитов Цикл
		Если Строка.СпособУстановкиЗначения = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НеИспользовать
				ИЛИ Строка.СпособУстановкиЗначения.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТекущийОбъект.ОписаниеРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ОбъектМетаданных = Описание.ОбъектМетаданных;
		НоваяСтрока.ИмяТЧ            = Описание.ИмяТЧ;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыЗагружаемыхДанных()
	
	НастройкаРеквизитов.Очистить();
	
	ТекущиеДанные = ЗагружаемыеДанные.НайтиПоИдентификатору(Элементы.ЗагружаемыеДанные.ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКлючОписанияЗагружаемыхДанных = ТекущиеДанные.КлючОписанияЗагружаемыхДанных;
	Описание = ОписаниеЗагружаемыхДанных[ТекущийКлючОписанияЗагружаемыхДанных];
	
	СохраненныеНастройки = Объект.ОписаниеРеквизитов.Выгрузить(Описание.СтруктураОтбора);
	СохраненныеНастройки.Индексы.Добавить("ИмяРеквизита");
	
	ТаблицаРеквизитов = НастройкаРеквизитов.Выгрузить();
	ТаблицаРеквизитов.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Для каждого ГруппаРеквизита Из УправлениеДаннымиОбИзделияхКлиентСервер.ГруппыРеквизитов() Цикл
		Для каждого КлючИЗначение Из Описание[ГруппаРеквизита] Цикл
			ОписаниеРеквизита = КлючИЗначение.Значение; // см. УправлениеДаннымиОбИзделиях.ОписаниеРеквизитаЗагружаемыхДанныхКонструктор
			НоваяСтрока = ТаблицаРеквизитов.Добавить();
			НоваяСтрока.ИмяРеквизита      = ОписаниеРеквизита.Имя;
			НоваяСтрока.Представление     = ОписаниеРеквизита.Представление;
			НоваяСтрока.ГруппаРеквизита   = ГруппаРеквизита;
			НоваяСтрока.Обязательный      = ОписаниеРеквизита.Обязательный;
			НоваяСтрока.ДоступенПоиск     = ДоступенПоискПоРеквизиту(ГруппаРеквизита);
			СохраненнаяНастройка = СохраненныеНастройки.Найти(КлючИЗначение.Ключ, "ИмяРеквизита");
			Если СохраненнаяНастройка <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СохраненнаяНастройка);
			Иначе
				Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.ИнициализироватьНовуюСтрокуТаблицыРеквизитов(
					НоваяСтрока, ОписаниеРеквизита.Обязательный);
			КонецЕсли;
			Если ОписаниеРеквизита.ОбязательныйПоиск Тогда
				НоваяСтрока.ПолеПоиска = Истина;
				НоваяСтрока.ОбязательныйПоиск = Истина;
			КонецЕсли;
			УстановитьПорядокСтрокиРеквизита(НоваяСтрока);
			РассчитатьПризнакАктивенСтрокиРеквизита(НоваяСтрока);
			УстановитьКартинкуСтрокиРеквизита(ОписаниеРеквизита, НоваяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаРеквизитов.Сортировать("Порядок,Представление");
	НастройкаРеквизитов.Загрузить(ТаблицаРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура СброситьНастройкиПравилЗагрузкиДанных()
	
	Объект.ОписаниеРеквизитов.Очистить();
	
	АлгоритмыОбработкиОбъектов = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуСтрокиРеквизита(ОписаниеРеквизита, ДанныеСтроки)
	
	ИндексКартинки = 1;
	
	Если ДанныеСтроки.ГруппаРеквизита = "РеквизитыИдентификаторы" Тогда
		ИндексКартинки = ?(ДанныеСтроки.Обязательный, 6, 7);
	ИначеЕсли ДанныеСтроки.ГруппаРеквизита = "РеквизитыСтандартные" Тогда
		ИндексКартинки = ?(ДанныеСтроки.Обязательный, 5, 2);
	ИначеЕсли ДанныеСтроки.ГруппаРеквизита = "РеквизитыПрикладные" Тогда
		ИндексКартинки = ?(ДанныеСтроки.Обязательный, 5, 2);
	ИначеЕсли ДанныеСтроки.ГруппаРеквизита = "РеквизитыДополнительные" Тогда
		ИндексКартинки = ?(ОписаниеРеквизита.ОписаниеСвойства.СвойствоЭтоДополнительноеСведение, 4, 3);
	ИначеЕсли ДанныеСтроки.ГруппаРеквизита = "РеквизитыСлужебные" Тогда
		ИндексКартинки = ?(ДанныеСтроки.Обязательный, 5, 2);
	КонецЕсли;
	
	ДанныеСтроки.ИндексКартинки = ИндексКартинки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПорядокСтрокиРеквизита(ДанныеСтроки)
	
	ДанныеСтроки.Порядок = 100 * ?(ДанныеСтроки.Обязательный, 0, 1)
		+ 10 * УправлениеДаннымиОбИзделияхКлиентСервер.ГруппыРеквизитов().Найти(ДанныеСтроки.ГруппаРеквизита);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПризнакАктивенСтрокиРеквизита(ДанныеСтроки)
	
	ДанныеСтроки.Активен = ЗначениеЗаполнено(ДанныеСтроки.СпособУстановкиЗначения)
		И ДанныеСтроки.СпособУстановкиЗначения <> ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НеИспользовать");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступенПоискПоРеквизиту(ГруппаРеквизита)
	
	Возврат ГруппаРеквизита = "РеквизитыСтандартные"
				ИЛИ ГруппаРеквизита = "РеквизитыПрикладные";
	
КонецФункции

// Описание реквизита по строке.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции
// 
// Возвращаемое значение:
//  Структура - см. УправлениеДаннымиОбИзделиях.ОписаниеРеквизитаЗагружаемыхДанныхКонструктор
//
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеРеквизитаПоСтроке(Форма, ДанныеСтроки)
	
	ОписаниеРеквизита = Неопределено;
	
	Если НЕ ПустаяСтрока(Форма.ТекущийКлючОписанияЗагружаемыхДанных) Тогда
		Описание          = Форма.ОписаниеЗагружаемыхДанных[Форма.ТекущийКлючОписанияЗагружаемыхДанных];
		ОписаниеРеквизита = Описание[ДанныеСтроки.ГруппаРеквизита][ДанныеСтроки.ИмяРеквизита];
	КонецЕсли;
	
	Возврат ОписаниеРеквизита;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораСпособаУстановкиЗначенияПоСтроке(ДанныеСтроки)
	
	СписокВыбора = Элементы.НастройкаРеквизитовСпособУстановкиЗначения.СписокВыбора;
	СписокВыбора.Очистить();
	
	ОписаниеРеквизита = ОписаниеРеквизитаПоСтроке(ЭтотОбъект, ДанныеСтроки);
	Если ОписаниеРеквизита <> Неопределено Тогда
	
		Если НЕ ДанныеСтроки.Обязательный Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НеИспользовать"));
		КонецЕсли;
		
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.ВзятьИзФайла"));
		Если ДанныеСтроки.ГруппаРеквизита <> "РеквизитыИдентификаторы" Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.УстановитьВЗначение"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.РассчитатьПоАлгоритму"));
		КонецЕсли;
		
		Если ОписаниеРеквизита.ЕстьКод Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НайтиПоКоду"));
		КонецЕсли;
		Если ОписаниеРеквизита.ЕстьНаименование Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НайтиПоНаименованию"));
		КонецЕсли;
		Если ОписаниеРеквизита.ЕстьНомер Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НайтиПоНомеру"));
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастроитьПараметрыВыбораЗначенияПоСтроке(Форма, ДанныеСтроки)
	
	ТипЗначения = Неопределено;
	
	ОписаниеРеквизита = ОписаниеРеквизитаПоСтроке(Форма, ДанныеСтроки); // см. УправлениеДаннымиОбИзделиях.ОписаниеРеквизитаЗагружаемыхДанныхКонструктор
	Если ОписаниеРеквизита <> Неопределено Тогда
	
		Если ДанныеСтроки.СпособУстановкиЗначения = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.ВзятьИзФайла")
				ИЛИ ДанныеСтроки.СпособУстановкиЗначения = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.РассчитатьПоАлгоритму")
				ИЛИ ДанныеСтроки.СпособУстановкиЗначения = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НайтиПоКоду")
				ИЛИ ДанныеСтроки.СпособУстановкиЗначения = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НайтиПоНаименованию")
				ИЛИ ДанныеСтроки.СпособУстановкиЗначения = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НайтиПоНомеру") Тогда
			
			ТипЗначения = Новый ОписаниеТипов("Строка");
			
		ИначеЕсли ДанныеСтроки.СпособУстановкиЗначения = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.УстановитьВЗначение") Тогда
			
			ТипЗначения = ОписаниеРеквизита.Тип;
			
		Иначе
			
			ТипЗначения = Новый ОписаниеТипов();
			
		КонецЕсли;
		
		Если ОписаниеРеквизита.СсылочныйТип Тогда
			Форма.Элементы.НастройкаРеквизитовЗначение.ВыборГруппИЭлементов = ОписаниеРеквизита.ВыборГруппИЭлементов;
			Форма.Элементы.НастройкаРеквизитовЗначение.ПараметрыВыбора      = ОписаниеРеквизита.ПараметрыВыбора;
		КонецЕсли;
		
		Форма.Элементы.НастройкаРеквизитовЗначение.ОграничениеТипа = ТипЗначения;
		
	КонецЕсли;
	
	Возврат ТипЗначения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура СоответствиеОбъектовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
		ОткрытьФормуСоответствиеОбъектов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСоответствиеОбъектов()
	
	ОткрытьФорму("Обработка.ЗагрузкаПроизводственнойНСИ.Форма.СоответствиеОбъектов",
		Новый Структура("ИсточникДанных", Объект.Ссылка),
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура МониторингСостоянияЗагрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
		ОткрытьФормуМониторингСостоянияЗагрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуМониторингСостоянияЗагрузки()
	
	ОткрытьФорму("Обработка.ЗагрузкаПроизводственнойНСИ.Форма.МониторингСостоянияЗагрузки",
		Новый Структура("ИсточникДанных", Объект.Ссылка),
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СоответствиеСостояниеЭлементДействияСФайлами(Обратное = Ложь)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВыполненаУспешно",   "ДекорацияДействие_ВыполненаУспешно");
	Результат.Вставить("ВыполненаСОшибками", "ДекорацияДействие_ВыполненаСОшибками");
	Результат.Вставить("НеВыполнена",        "ДекорацияДействие_НеВыполнена");
	
	Если Обратное Тогда
		Для каждого КлючИЗначение Из Результат Цикл
			Результат.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
			Результат.Удалить(КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
