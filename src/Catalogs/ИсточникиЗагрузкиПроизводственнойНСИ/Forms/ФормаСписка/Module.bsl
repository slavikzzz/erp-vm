
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = УправлениеДаннымиОбИзделияхКлиентСервер.ИмяСобытияЗагрузкаЗавершение() Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	СписокКлючей = Строки.ПолучитьКлючи();
	
	Если СписокКлючей.Количество() > 0 Тогда
		
		СостояниеЗагрузки = РегистрыСведений.НастройкиВыполненияЗагрузкиНСИ.СостояниеЗагрузки(СписокКлючей);
		
		Для каждого СтрокаСостояние Из СостояниеЗагрузки Цикл
			
			СтрокаСписка = Строки[СтрокаСостояние.ИсточникДанных];
			
			ПолеИспользуется            = СтрокаСписка.Оформление["Используется"];
			ПолеРасписаниеПредставление = СтрокаСписка.Оформление["РасписаниеПредставление"];
			
			Если СтрокаСостояние.АвтозагрузкаИспользуется Тогда
				Если СтрокаСостояние.АвтозагрузкаРасписание <> Неопределено Тогда
					ПолеРасписаниеПредставление.УстановитьЗначениеПараметра("Текст", Строка(СтрокаСостояние.АвтозагрузкаРасписание));
				Иначе
					ПолеРасписаниеПредставление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<расписание не настроено>';
																							|en = '<schedule is not configured>'"));
					ПолеРасписаниеПредставление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ЦветНедоступногоТекста);
				КонецЕсли;
				ПолеИспользуется.УстановитьЗначениеПараметра("Отображать", Истина);
			Иначе
				ПолеРасписаниеПредставление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<загрузка по расписанию не используется>';
																						|en = '<scheduled import is not used>'"));
				ПолеРасписаниеПредставление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ЦветНедоступногоТекста);
				ПолеИспользуется.УстановитьЗначениеПараметра("Отображать", Ложь);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаСписка.Данные.ДатаВыполнения) Тогда
				
				СвойстваСостояния = Перечисления.ЗагрузкаНСИСостояния.СвойстваСостоянияЗагрузки(СтрокаСостояние.Состояние);
				
				ТекстПоля = Строка(СвойстваСостояния.Состояние);
				Если НЕ СвойстваСостояния.Состояние = Перечисления.ЗагрузкаНСИСостояния.ВыполненаУспешно
						И НЕ СвойстваСостояния.Состояние = Перечисления.ЗагрузкаНСИСостояния.НетДанных
						И НЕ СвойстваСостояния.Состояние = Перечисления.ЗагрузкаНСИСостояния.НеВыполнялась Тогда
					ТекстПоля = СтрШаблон(НСтр("ru = '%1. Ошибок при последнем выполнении: %2';
												|en = '%1. Errors upon the last execution: %2'"), ТекстПоля, СтрокаСостояние.КоличествоОшибок);
				КонецЕсли;
				
				Если СтрокаСостояние.СостояниеПроблемное Тогда
					ПолеСостояниеПредставление = СтрокаСписка.Оформление["СостояниеПредставлениеПроблемы"];
				Иначе
					ПолеСостояниеПредставление = СтрокаСписка.Оформление["СостояниеПредставление"];
				КонецЕсли;
				ПолеСостояниеПредставление.УстановитьЗначениеПараметра("Текст", ТекстПоля);
				ПолеСостояниеПредставление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля[СвойстваСостояния.Цвет]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Обработки.ЗагрузкаПроизводственнойНСИ.УстановитьОформлениеДатыВСписке(Строки, "ДатаВыполнения");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СостояниеПредставлениеПроблемы Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьМониторингПоИсточнику(Элементы.Список.ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Включить(Команда)
	
	УстановитьПризнакИспользуется(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отключить(Команда)
	
	УстановитьПризнакИспользуется(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиАвтозагрузки = НастройкиАвтозагрузки();
	Если НастройкиАвтозагрузки.АвтозагрузкаРасписание = Неопределено Тогда
		Расписание = Новый РасписаниеРегламентногоЗадания();
	Иначе
		Расписание = НастройкиАвтозагрузки.АвтозагрузкаРасписание;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект, НастройкиАвтозагрузки);
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ДиалогРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузку(Команда)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗагрузкуДанных(Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеОбъектов(Команда)
	
	ОткрытьСоответствиеОбъектовПоИсточнику(Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура МониторингСостоянияЗагрузки(Команда)
	
	ОткрытьМониторингПоИсточнику(Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаВыполнения.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДатаВыполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<загрузка не выполнялась>';
																|en = '<import was not performed>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	//
	ПроблемныеСостояния = Перечисления.ЗагрузкаНСИСостояния.ПроблемныеСостояния();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ПроблемныеСостояния;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеПредставлениеПроблемы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ПроблемныеСостояния;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ДлительныеОперацииСтруктура = Новый Структура("ЗагрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакИспользуется(Используется)
	
	УстановитьПризнакИспользуетсяНаСервере(Используется);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакИспользуетсяНаСервере(Используется)
	
	Настройки = Новый Структура("АвтозагрузкаИспользуется", Используется);
	
	Для каждого ИсточникДанных Из Элементы.Список.ВыделенныеСтроки Цикл
		
		РегистрыСведений.НастройкиВыполненияЗагрузкиНСИ.ЗаписатьНастройкиИсточника(ИсточникДанных, Настройки, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НастройкиАвтозагрузки()
	
	НастройкиАвтозагрузки = Новый Структура("АвтозагрузкаИспользуется,АвтозагрузкаРасписание");
	ЗаполнитьЗначенияСвойств(НастройкиАвтозагрузки, Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.НастройкиИсточникаДанных(Элементы.Список.ТекущаяСтрока));
	
	Возврат НастройкиАвтозагрузки;
	
КонецФункции

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры.АвтозагрузкаРасписание = Результат;
		УстановитьРасписаниеНаСервере(ДополнительныеПараметры);
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеНаСервере(НастройкиАвтозагрузки)
	
	НастройкиАвтозагрузки.АвтозагрузкаИспользуется = Истина;
	РегистрыСведений.НастройкиВыполненияЗагрузкиНСИ.ЗаписатьНастройкиИсточника(Элементы.Список.ТекущаяСтрока, НастройкиАвтозагрузки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСоответствиеОбъектовПоИсточнику(ИсточникДанных)
	
	ОткрытьФорму("Обработка.ЗагрузкаПроизводственнойНСИ.Форма.СоответствиеОбъектов",
		Новый Структура("ИсточникДанных", ИсточникДанных),,
		ИсточникДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМониторингПоИсточнику(ИсточникДанных)
	
	ОткрытьФорму("Обработка.ЗагрузкаПроизводственнойНСИ.Форма.МониторингСостоянияЗагрузки",
		Новый Структура("ИсточникДанных", ИсточникДанных),
		ЭтотОбъект,
		ИсточникДанных);
	
КонецПроцедуры

#Область ЗагрузкаДанных

&НаКлиенте
Процедура НачатьЗагрузкуДанных(ИсточникДанных)
	
	Если ДлительныеОперацииСтруктура.ЗагрузкаДанных <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗагрузкуДанныхНаСервере(ИсточникДанных);
	
	Если ДлительныеОперацииСтруктура.ЗагрузкаДанных <> Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗагрузкаДанныхЗавершение", ЭтотОбъект, Новый Структура("ИсточникДанных", ИсточникДанных));
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ТекстСообщения = СтрШаблон(НСтр("ru = 'Выполняется загрузка данных из источника ""%1""';
															|en = 'Importing data from the ""%1"" source'"), ИсточникДанных);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительныеОперацииСтруктура.ЗагрузкаДанных,
			ОписаниеОповещения,
			ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьЗагрузкуДанныхНаСервере(ИсточникДанных)
	
	ИмяДействия = Обработки.ЗагрузкаПроизводственнойНСИ.ДействиеЗагрузитьДанные();
	
	Если Обработки.ЗагрузкаПроизводственнойНСИ.ДействиеУжеВыполняется(ИсточникДанных, ИмяДействия) Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Загрузка данных из источника ""%1"" уже выполняется';
															|en = 'Data from the ""%1"" source is already being imported'"), ИсточникДанных));
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.КлючФоновогоЗадания         = Обработки.ЗагрузкаПроизводственнойНСИ.КлючВыполненияДействияВФоне(ИсточникДанных, ИмяДействия);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Обработки.ЗагрузкаПроизводственнойНСИ.НаименованиеДействияВФоне(ИмяДействия);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИмяДействия",    ИмяДействия);
	ПараметрыПроцедуры.Вставить("ИсточникДанных", ИсточникДанных);
	
	ДлительныеОперацииСтруктура.ЗагрузкаДанных = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗагрузкаПроизводственнойНСИ.ВыполнитьДействиеВФоне",
		ПараметрыПроцедуры, ПараметрыВыполнения);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	ДлительныеОперацииСтруктура.ЗагрузкаДанных = Неопределено;
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ТекстЗаголовок = НСтр("ru = 'Загрузка данных';
								|en = 'Data import'");
		ТекстСообщения = "";
		Картинка       = Неопределено;
		
		Если ДлительнаяОперация.Статус = "Ошибка" Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Загрузка данных завершилась неудачно.
					|%1
					|Подробности см. в рабочем месте ""Мониторинг состояния загрузки"" или в журнале регистрации.';
					|en = 'Data is not imported.
					|%1
					|For more information, see the ""Import state monitoring"" workspace or the event log.'"),
				ДлительнаяОперация.КраткоеПредставлениеОшибки);
			Картинка = БиблиотекаКартинок.Ошибка32;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ПоказатьОповещениеПользователя(ТекстЗаголовок,,ТекстСообщения, Картинка);
		КонецЕсли;
		
	КонецЕсли;
	
	Оповестить(
		УправлениеДаннымиОбИзделияхКлиентСервер.ИмяСобытияЗагрузкаЗавершение(),,
		ДополнительныеПараметры.ИсточникДанных);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти