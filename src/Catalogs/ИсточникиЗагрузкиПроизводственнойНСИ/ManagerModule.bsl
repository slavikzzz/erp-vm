
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Конструктор настроек источника данных
// 
// Параметры:
// Состав - Число - Состав настроек (0 - полный, 1 - только группируемые, 2 - только внешние)
// 
// Возвращаемое значение:
//  Структура - Настройки источника данных конструктор:
// * РазделыКОбработке - Структура
// * РасположениеДанных - Строка
// * ВариантЗагрузкиОборудования - ПеречислениеСсылка.ЗагрузкаНСИОборудование
// * АлгоритмыОбработкиОбъектов - Структура
// * РазрешениеКонфликтовПриПоиске - Структура
// * ДействияСФайлами - Структура
// * ОбновлениеОбъектов - см. УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеНастройкиОбновленияОбъектовКонструктор
// * Используется - Булево
// * АвтозагрузкаИспользуется - Булево
// * АвтозагрузкаРасписание - Неопределено
// * АвтозагрузкаИдентификаторЗадания - УникальныйИдентификатор
Функция НастройкиИсточникаДанныхКонструктор(Состав = 0) Экспорт
	
	Результат = Новый Структура;
	
	Если Состав = 0 ИЛИ Состав = 1 Тогда
		Результат.Вставить("ВерсияНастроек",                   ВерсияНастроек());
		Результат.Вставить("РасположениеДанных",               "");
		Результат.Вставить("РазделыКОбработке",                Новый Структура);
		Результат.Вставить("ВариантЗагрузкиОборудования",      Перечисления.ЗагрузкаНСИОборудование.ВидыРабочихЦентров);
		Результат.Вставить("АлгоритмыОбработкиОбъектов",       Новый Структура);
		Результат.Вставить("РазрешениеКонфликтовПриПоиске",    Новый Структура);
		Результат.Вставить("ДействияСФайлами",                 Новый Структура);
		Результат.Вставить("ОбновлениеОбъектов",               УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеНастройкиОбновленияОбъектовКонструктор());
	КонецЕсли;
	
	Если Состав = 0 ИЛИ Состав = 2 Тогда
		Результат.Вставить("Используется",                     Ложь);
		Результат.Вставить("АвтозагрузкаИспользуется",         Ложь);
		Результат.Вставить("АвтозагрузкаРасписание",           Неопределено);
		Результат.Вставить("АвтозагрузкаИдентификаторЗадания", Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Настройки источника данных.
// 
// Параметры:
//  ИсточникДанных - СправочникОбъект.ИсточникиЗагрузкиПроизводственнойНСИ
// 
// Возвращаемое значение:
//  Структура - см. НастройкиИсточникаДанныхКонструктор
//
Функция НастройкиИсточникаДанных(ИсточникДанных) Экспорт
	
	Результат = НастройкиИсточникаДанныхКонструктор();
	
	Если ИсточникДанных <> Неопределено
		И ИсточникДанных <> Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.ПустаяСсылка() Тогда
		
		ХранилищеНастроек = Неопределено;
		
		Если ТипЗнч(ИсточникДанных) = Тип("СправочникСсылка.ИсточникиЗагрузкиПроизводственнойНСИ") Тогда
			ЭтоОбъект = Ложь;
			ИсточникДанныхСсылка = ИсточникДанных;
		Иначе
			ЭтоОбъект = Истина;
			ИсточникДанныхСсылка = ИсточникДанных.Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсточникДанныхСсылка) Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ИсточникиДанных.ФорматОбмена                                                   КАК ФорматОбмена,
			|	ИсточникиДанных.ХранилищеНастроек                                              КАК ХранилищеНастроек,
			|	ISNULL(ДополнительныеНастройки.Используется, ЛОЖЬ)                             КАК Используется,
			|	ISNULL(ДополнительныеНастройки.АвтозагрузкаИдентификаторЗадания, НЕОПРЕДЕЛЕНО) КАК АвтозагрузкаИдентификаторЗадания
			|ИЗ
			|	Справочник.ИсточникиЗагрузкиПроизводственнойНСИ КАК ИсточникиДанных
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВыполненияЗагрузкиНСИ КАК ДополнительныеНастройки
			|		ПО ИсточникиДанных.Ссылка = ДополнительныеНастройки.ИсточникДанных
			|ГДЕ
			|	ИсточникиДанных.Ссылка = &ИсточникДанных
			|";
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанныхСсылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(Результат, Выборка);
				ЗаполнитьНастройкиАвтозагрузки(Результат);
				ХранилищеНастроек = Выборка.ХранилищеНастроек;
			КонецЕсли
			
		КонецЕсли;
		
		Если ЭтоОбъект Тогда
			ЗаполнитьЗначенияСвойств(Результат, ИсточникДанных);
			ХранилищеНастроек = ИсточникДанных.ХранилищеНастроек;
		КонецЕсли;
		
		Попытка
		
			Если ХранилищеНастроек <> Неопределено Тогда
				СтруктураНастроек = ПолучитьСтруктуруНастроекИзХранилища(ХранилищеНастроек);
				Для каждого КлючИЗначение Из НастройкиИсточникаДанныхКонструктор(1) Цикл
					ИмяНастройки = КлючИЗначение.Ключ;
					Если СтруктураНастроек.Свойство(ИмяНастройки) Тогда
						Результат[ИмяНастройки] = СтруктураНастроек[ИмяНастройки];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось получить настройки источника данных ""%1"".
				|%2';
				|en = 'Cannot get settings of the %1 data source.
				|%2'"), ИсточникДанных, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(Обработки.ЗагрузкаПроизводственнойНСИ.КлючСобытияЖурналаРегистрации(ИсточникДанных),
					УровеньЖурналаРегистрации.Ошибка,,
					ИсточникДанных,
					ТекстОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.РазделыКОбработке) Тогда
		Результат.РазделыКОбработке = УправлениеДаннымиОбИзделияхКлиентСервер.РазделыКОбработкеКонструктор();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ссылочные типы данных, которые загружаются либо сопоставляются для источника
// 
// Параметры:
//  ИсточникДанных  - СправочникСсылка.ИсточникиЗагрузкиПроизводственнойНСИ
//  ОписаниеЗагружаемыхДанных - см. УправлениеДаннымиОбИзделиях.ОписаниеЗагружаемыхДанных
//  Отбор - Неопределено,Структура
//  ИсключениеПриОшибке - Булево - определяет необходимость остановки при несовпадении данных описания и настройки
//  
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Ссылочные типы данных источника:
// * ОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных
Функция НастройкиРеквизитовИсточника(ИсточникДанных, ОписаниеЗагружаемыхДанных, Отбор = Неопределено, ИсключениеПриОшибке = Ложь) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ОбъектМетаданных",              Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	Результат.Колонки.Добавить("ИмяОбъектаМетаданных",          Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяТЧ",                         Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяРеквизита",                  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("СпособУстановкиЗначения",       Новый ОписаниеТипов("ПеречислениеСсылка.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита"));
	Результат.Колонки.Добавить("Значение",                      Новый ОписаниеТипов());
	Результат.Колонки.Добавить("АлгоритмРасчетаЗначения",       Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПолеПоиска",                    Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("КлючСвязи",                     Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Результат.Колонки.Добавить("КлючРаздела",                   Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КлючЗагружаемыхДанных",         Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("СсылочныйТип",                  Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЭтоОсновнойИдентификатор",      Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ОписаниеРеквизита");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.ОбъектМетаданных           КАК ОбъектМетаданных,
	|	Т.ОбъектМетаданных.Имя       КАК ИмяОбъектаМетаданных,
	|	Т.ИмяТЧ                      КАК ИмяТЧ,
	|	Т.ИмяРеквизита               КАК ИмяРеквизита,
	|	Т.СпособУстановкиЗначения    КАК СпособУстановкиЗначения,
	|	Т.Значение                   КАК Значение,
	|	Т.АлгоритмРасчетаЗначения    КАК АлгоритмРасчетаЗначения,
	|	Т.ПолеПоиска                 КАК ПолеПоиска,
	|	Т.КлючСвязи                  КАК КлючСвязи
	|ИЗ
	|	Справочник.ИсточникиЗагрузкиПроизводственнойНСИ.ОписаниеРеквизитов КАК Т
	|ГДЕ
	|	Т.Ссылка = &ИсточникДанных
	|	И НЕ Т.СпособУстановкиЗначения В (&ИсключитьСпособыУстановкиЗначения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектМетаданных,
	|	ИмяТЧ,
	|	ИмяРеквизита";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);
	
	Если Отбор <> Неопределено
		И Отбор.Свойство("ИсключитьСпособыУстановкиЗначения") Тогда
		Запрос.УстановитьПараметр("ИсключитьСпособыУстановкиЗначения", Отбор.ИсключитьСпособыУстановкиЗначения);
	Иначе
		Запрос.УстановитьПараметр("ИсключитьСпособыУстановкиЗначения", Новый Массив);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КлючЗагружаемыхДанных = УправлениеДаннымиОбИзделияхКлиентСервер.КлючОписанияЭлементаЗагружаемыхДанных(
			Выборка.ИмяОбъектаМетаданных, Выборка.ИмяТЧ);
			
		Если НЕ ОписаниеЗагружаемыхДанных.Свойство(КлючЗагружаемыхДанных) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Неизвестное описание загружаемых данных: %1.';
										|en = 'Unknown description of data to import: %1.'"), КлючЗагружаемыхДанных);
			ЗаписьЖурналаРегистрации(Обработки.ЗагрузкаПроизводственнойНСИ.КлючСобытияЖурналаРегистрации(ИсточникДанных),
				УровеньЖурналаРегистрации.Ошибка,,
				ИсточникДанных,
				ТекстОшибки);
			Если ИсключениеПриОшибке Тогда
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ОписаниеРеквизита = УправлениеДаннымиОбИзделиях.ОписаниеРеквизитаЗагружаемыхДанныхПоИмени(
			Выборка.ИмяРеквизита, ОписаниеЗагружаемыхДанных[КлючЗагружаемыхДанных]);
			
		Если ОписаниеРеквизита = Неопределено Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Неизвестный реквизит описания загружаемых данных: %1.';
										|en = 'Unknown attribute of the description of data to import: %1.'"), Выборка.ИмяРеквизита);
			ЗаписьЖурналаРегистрации(Обработки.ЗагрузкаПроизводственнойНСИ.КлючСобытияЖурналаРегистрации(ИсточникДанных),
				УровеньЖурналаРегистрации.Ошибка,,
				ИсточникДанных,
				ТекстОшибки);
			Если ИсключениеПриОшибке Тогда
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.КлючРаздела = ОписаниеЗагружаемыхДанных[КлючЗагружаемыхДанных].КлючРаздела;
		НоваяСтрока.КлючЗагружаемыхДанных = КлючЗагружаемыхДанных;
		НоваяСтрока.СсылочныйТип = ОписаниеРеквизита.СсылочныйТип ИЛИ ОписаниеРеквизита.ЭтоИдентификатор;
		НоваяСтрока.ЭтоОсновнойИдентификатор = ОписаниеРеквизита.ЭтоОсновнойИдентификатор;
		НоваяСтрока.ОписаниеРеквизита = ОписаниеРеквизита;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Настройки

// Текущая версия настроек источника данных.
// 
// Возвращаемое значение:
//  Число
Функция ВерсияНастроек() Экспорт
	
	Возврат 1;
	
КонецФункции

// Восстанавливает структуру настроек из хранилища.
// В том числе, обеспечивает конвертацию на актуальную версию настроек.
// 
// Параметры:
//  ХранилищеНастроек - ХранилищеЗначения
// 
// Возвращаемое значение:
//  см. НастройкиИсточникаДанныхКонструктор
Функция ПолучитьСтруктуруНастроекИзХранилища(ХранилищеНастроек) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ХранилищеНастроек) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураНастроек = ХранилищеНастроек.Получить(); // см. НастройкиИсточникаДанныхКонструктор
	
	Если НЕ ЗначениеЗаполнено(СтруктураНастроек) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("ВерсияНастроек") Тогда
		ВерсияСохраненныхНастроек = СтруктураНастроек.ВерсияНастроек;
	Иначе
		ВерсияСохраненныхНастроек = 0;
	КонецЕсли;
	
	Если ВерсияСохраненныхНастроек >= ВерсияНастроек() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	Если ВерсияСохраненныхНастроек = 0 Тогда
		КонвертироватьНастройкиРазрешенияКонфликтов(СтруктураНастроек);
		КонвертироватьКлючиАлгоритмовОбработкиОбъектов(СтруктураНастроек);
	КонецЕсли;
	
	СтруктураНастроек.Вставить("ВерсияНастроек", ВерсияНастроек());
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Поместить структуру настроек в хранилище.
// 
// Параметры:
//  Объект - СправочникОбъект.ИсточникиЗагрузкиПроизводственнойНСИ
//  СтруктураНастроек - см. НастройкиИсточникаДанныхКонструктор
Процедура ПоместитьСтруктуруНастроекВХранилище(Объект, СтруктураНастроек) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураНастроек) Тогда
		СтруктураНастроек = НастройкиИсточникаДанныхКонструктор(1);
	КонецЕсли;
		
	Объект.ВерсияНастроек    = СтруктураНастроек.ВерсияНастроек;
	Объект.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураНастроек);
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиАвтозагрузки(НастройкиИсточника) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НастройкиИсточника.АвтозагрузкаИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	Задание = РегламентныеЗаданияСервер.Задание(НастройкиИсточника.АвтозагрузкаИдентификаторЗадания);
	Если Задание <> Неопределено Тогда
		НастройкиИсточника.АвтозагрузкаИспользуется = Задание.Использование;
		НастройкиИсточника.АвтозагрузкаРасписание   = Задание.Расписание;
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертироватьНастройкиРазрешенияКонфликтов(СтруктураНастроек)
	
	НастройкиСортировки = Неопределено;
	Если НЕ СтруктураНастроек.Свойство("НастройкиСортировки", НастройкиСортировки)
		ИЛИ НЕ ЗначениеЗаполнено(НастройкиСортировки) Тогда
		Возврат;
	КонецЕсли;
	
	РазрешениеКонфликтовПриПоиске = Неопределено;
	Если НЕ СтруктураНастроек.Свойство("РазрешениеКонфликтовПриПоиске", РазрешениеКонфликтовПриПоиске) Тогда
		РазрешениеКонфликтовПриПоиске = Новый Структура;
		СтруктураНастроек.Вставить("РазрешениеКонфликтовПриПоиске", РазрешениеКонфликтовПриПоиске);
	КонецЕсли;
	
	Для каждого КлючИЗначение Из НастройкиСортировки Цикл
		Если НЕ РазрешениеКонфликтовПриПоиске.Свойство(КлючИЗначение.Ключ)
				И ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			НастройкаПравила = УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеНастройкиРазрешенияКонфликтаПриПоискеКонструктор();
			РазрешениеКонфликтовПриПоиске.Вставить(КлючИЗначение.Ключ, НастройкаПравила);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертироватьКлючиАлгоритмовОбработкиОбъектов(СтруктураНастроек)
	
	АлгоритмыОбработкиОбъектов = Неопределено;
	Если НЕ СтруктураНастроек.Свойство("АлгоритмыОбработкиОбъектов", АлгоритмыОбработкиОбъектов)
		ИЛИ НЕ ЗначениеЗаполнено(АлгоритмыОбработкиОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из УправлениеДаннымиОбИзделиях.ОписаниеЗагружаемыхДанных(СтруктураНастроек) Цикл
		
		Описание = КлючИЗначение.Значение; // см. УправлениеДаннымиОбИзделиях.ОписаниеЭлементаЗагружаемыхДанныхКонструктор
		
		КлючСтарый = УправлениеДаннымиОбИзделияхКлиентСервер.КлючАлгоритмаОбработкиОбъектаПриЗагрузке(
			"ПослеЗагрузки", Описание.ИмяОбъектаМетаданных, Описание.ИмяТЧ);
		КлючНовый  = УправлениеДаннымиОбИзделияхКлиентСервер.КлючАлгоритмаОбработкиОбъектаПриЗагрузке(
			УправлениеДаннымиОбИзделияхКлиентСервер.ИмяСобытияПередЗаписьюОбъекта(), Описание.ИмяОбъектаМетаданных, Описание.ИмяТЧ);
		
		Если АлгоритмыОбработкиОбъектов.Свойство(КлючСтарый)
				И НЕ АлгоритмыОбработкиОбъектов.Свойство(КлючНовый) Тогда
			АлгоритмыОбработкиОбъектов.Вставить(КлючНовый, АлгоритмыОбработкиОбъектов[КлючСтарый]);
			АлгоритмыОбработкиОбъектов.Удалить(КлючСтарый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ИнициализироватьНовуюСтрокуТаблицыРеквизитов(ДанныеСтроки, Обязательный = Ложь) Экспорт
	
	ДанныеСтроки.КлючСвязи = Новый УникальныйИдентификатор();
	
	Если Обязательный Тогда
		ДанныеСтроки.СпособУстановкиЗначения = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.ВзятьИзФайла");
	Иначе
		ДанныеСтроки.СпособУстановкиЗначения = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НеИспользовать");
	КонецЕсли;
	
КонецПроцедуры

// Сведения о режиме работы с источниками.
// 
// Возвращаемое значение:
//  Структура:
// * НесколькоИсточниковДанных - Булево - признак использования нескольких источников
// * ИсточникДанных - СправочникСсылка.ИсточникиЗагрузкиПроизводственнойНСИ - приоритетный источник для подстановки в формы
Функция СведенияОРежимеРаботыСИсточниками() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НесколькоИсточниковДанных", Ложь);
	Результат.Вставить("ИсточникДанных", Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.ПустаяСсылка());
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.Ссылка) КАК КоличествоИсточников
	|ПОМЕСТИТЬ ВтКоличествоИсточников
	|
	|ИЗ
	|	Справочник.ИсточникиЗагрузкиПроизводственнойНСИ КАК Т
	|
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т1.КоличествоИсточников                                                                   КАК КоличествоИсточников,
	|	ISNULL(Т2.Ссылка, ЗНАЧЕНИЕ(Справочник.ИсточникиЗагрузкиПроизводственнойНСИ.ПустаяСсылка)) КАК ИсточникДанных
	|ИЗ
	|	ВтКоличествоИсточников КАК Т1
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиЗагрузкиПроизводственнойНСИ КАК Т2
	|		ПО НЕ Т2.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ISNULL(Т2.Код, """")
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат.НесколькоИсточниковДанных = Выборка.КоличествоИсточников > 1;
	Если НЕ Результат.НесколькоИсточниковДанных Тогда
		Результат.ИсточникДанных = Выборка.ИсточникДанных;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.16.29";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a2d4157b-dd88-4b28-8079-d80d9a6f8533");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Корректирует формат настроек источника данных.';
									|en = 'Adjusts the format of the data source settings.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

// Регистрирует данные к обработке при переходе на новую версию.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.ИсточникиЗагрузкиПроизводственнойНСИ";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсточникиЗагрузкиПроизводственнойНСИ КАК Таблица
	|ГДЕ
	|	Таблица.ВерсияНастроек < &ВерсияНастроек
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВерсияНастроек", ВерсияНастроек());
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ИсточникиЗагрузкиПроизводственнойНСИ";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для каждого ЭлементСправочника Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСправочника.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			СправочникОбъект = ЭлементСправочника.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ИсточникиЗагрузкиПроизводственнойНСИ
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если СправочникОбъект.ВерсияНастроек < ВерсияНастроек() Тогда
				СтруктураНастроек = ПолучитьСтруктуруНастроекИзХранилища(СправочникОбъект.ХранилищеНастроек);
				ПоместитьСтруктуруНастроекВХранилище(СправочникОбъект, СтруктураНастроек);
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ЭлементСправочника.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
