#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	РассчитыватьКоэффициентЧисло = Объект.РассчитыватьКоэффициент;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	УстановитьОтборВСпискеОпераций();
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);

	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	ЗаполнитьЕстьАвтовыборНоменклатуры();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, Новый Массив);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ТехнологическиеПроцессы",, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	УстановитьОтборВСпискеОпераций();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	УстановитьДоступностьКомандИзмененияСтатуса();
	
	Элементы.ГруппаОписание.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Описание);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Элементы.Операции.Обновить();
		
	ИначеЕсли ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьРеквизитов);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаАвтовыбораНоменклатуры" Тогда
		
		ОбработкаВыбораНастройкаАвтовыбораНоменклатуры(ИсточникВыбора.ИмяТЧ, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаОтбораПоСвойствамИРасчетаПоФормулам" Тогда
		
		ОбработкаВыбораНастройкаОтбораПоСвойствамИРасчетаПоФормулам(ИсточникВыбора.ИмяТЧ, ВыбранноеЗначение);
		
	Иначе
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьКоэффициентЧисло0ПриИзменении(Элемент)
	
	ПриИзмененииРассчитыватьКоэффициентЧисло();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьКоэффициентЧисло1ПриИзменении(Элемент)
	
	ПриИзмененииРассчитыватьКоэффициентЧисло();
	
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентЗнаменательПриИзменении(Элемент)
	
	НастроитьРасшифровкуКоэффициентЗнаменатель(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОперации

&НаКлиенте
Процедура ОперацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ДобавитьОперацию(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИУслуги

&НаКлиенте
Процедура МатериалыИУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("МатериалыИУслуги", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ПриВводеНовойСтрокиТехнологическогоПроцесса(ЭтотОбъект, Элемент.Имя, Элементы[Элемент.Имя].ТекущиеДанные, Копирование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередУдалением(Элемент, Отказ)
	
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиАвтовыбораНоменклатуры(
				Элементы.МатериалыИУслуги,
				Элементы.МатериалыИУслуги.ВыделенныеСтроки,
				Объект.СоответствиеСвойств);
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
				Элементы.МатериалыИУслуги,
				Элементы.МатериалыИУслуги.ВыделенныеСтроки,
				Объект.ОтборПоСвойствам);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ИмяФормы, "МатериалыИУслуги"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииНоменклатурыВСтрокеСАвтовыбором(ТекущаяСтрока, Объект);
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущаяСтрока, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущиеДанные, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("Трудозатраты", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПередУдалением(Элемент, Отказ)
	
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
		Элементы.Трудозатраты,
		Элементы.Трудозатраты.ВыделенныеСтроки,
		Объект.ОтборПоСвойствам);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ПриВводеНовойСтрокиТехнологическогоПроцесса(ЭтотОбъект, Элемент.Имя, Элементы[Элемент.Имя].ТекущиеДанные, Копирование);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура КомандаЗаполнитьПоТехнологическомуПроцессу(Команда)
	
	ПараметрыОтбора = Новый Структура("ПометкаУдаления", Ложь);
	ПараметрыФормы = Новый Структура("ЗапретитьВыбор,Отбор", Объект.Ссылка, ПараметрыОтбора);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикЗаполнитьПоТехнологическомуПроцессу", ЭтотОбъект);
	ОткрытьФорму("Справочник.ТехнологическиеПроцессы.ФормаВыбора",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусВРазработке(Команда)
	
	Если НЕ ДоступностьРеквизитов Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусВРазработкеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.ТехнологическиеПроцессы.Форма.РазблокированиеРеквизитов",
								Новый Структура("Объект", Объект.Ссылка),,,,,
								ОписаниеОповещения,
								РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусДействует(Команда)
	
	УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыТехнологическихПроцессов.Действует"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусЗакрыт(Команда)
	
	УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыТехнологическихПроцессов.Закрыт"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьЗаполнение(Команда)
	
	ОчиститьСообщения();
	
	ТекстЗаголовка = НСтр("ru = 'Проверка технологического процесса';
							|en = 'Check technological process'");
	
	Если Объект.ПометкаУдаления Тогда
		ТекстПредупреждения = НСтр("ru = 'Помеченный на удаление технологический процесс не может быть действующим.';
									|en = 'The technological process marked for deletion cannot be valid.'");
		ПоказатьПредупреждение(,ТекстПредупреждения,, ТекстЗаголовка);
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнениеПринудительно() Тогда
		ТекстПредупреждения = НСтр("ru = 'Технологический процесс можно сделать действующим.';
									|en = 'The technological process can be set as valid.'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Технологический процесс не может быть действующим.';
									|en = 'The technological process cannot be set as valid.'");
	КонецЕсли;
	
	ПоказатьПредупреждение(,ТекстПредупреждения,, ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Объект не записан!';
										|en = 'Object is not saved.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросКопироватьТехнологическийПроцесс", ЭтотОбъект);
	
	ТехнологическиеПроцессыКлиент.ПоказатьВопросКопироватьТехнологическийПроцессСОперациями(ОписаниеОповещения)
	
КонецПроцедуры

#Область Материалы

&НаКлиенте
Процедура КомандаНастроитьАвтовыборМатериалов(Команда)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Материалы и работы"".';
								|en = 'Row of the ""Materials and works"" table is not selected.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		Возврат;
	КонецЕсли;
	
	СоответствиеСвойств = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.СоответствиеСвойств,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаСоответствияСвойств());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатуры(
							ЭтотОбъект,
							"МатериалыИУслуги",
							СоответствиеСвойств, 
							Объект.ДляВидаИзделий,
							НСтр("ru = 'Указывается в технологическом процессе';
								|en = 'Specified in technological process'"),
							НЕ ДоступностьРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Материалы и работы"".';
								|en = 'Row of the ""Materials and works"" table is not selected.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "МатериалыИУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Трудозатраты"".';
								|en = 'Line of the ""Labor costs"" table is not selected.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Трудозатраты", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "Трудозатраты");

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПодборМатериалов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	МассивТиповНоменклатуры = УправлениеДаннымиОбИзделияхКлиентСервер.МассивДоступныхТиповНоменклатуры(ЭтотОбъект, "МатериалыИУслуги");
	ДоступныеТипыНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ДоступныеТипыНоменклатуры));
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", 
			ПараметрыФормы, 
			ЭтотОбъект, 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("МатериалыИУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("МатериалыИУслуги");
	
КонецПроцедуры

#КонецОбласти

#Область Операции

&НаКлиенте
Процедура КомандаДобавитьОперацию(Команда)
	
	Элементы.Операции.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьОперациюВперед(Команда)
	
	ПереместитьОперацию(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьОперациюНазад(Команда)
	
	ПереместитьОперацию(Ложь);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область ПроцедурыПодсистемыСвойств

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаКлиенте
Процедура СкопироватьСтрокиТЧ(ИмяТЧ)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы[ИмяТЧ]) Тогда
		СкопироватьСтрокиНаСервере(ИмяТЧ);
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы[ИмяТЧ].ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ)
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтрокиИзБуфераОбмена(ИмяТЧ)
	
	КоличествоСтрокДоВставки = Объект[ИмяТЧ].Количество();
	
	ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ);
	
	КоличествоВставленных = Объект[ИмяТЧ].Количество() - КоличествоСтрокДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ)
	
	СоставСтрок     = Неопределено;
	ПараметрыОтбора = Неопределено;
	
	Если ИмяТЧ = "МатериалыИУслуги" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,СтатьяКалькуляции";
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		СоставСтрок = "ВидРабот,Количество,СтатьяКалькуляции";
	КонецЕсли;
	
	ПодборТоваров = ИмяТЧ <> "Трудозатраты";
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Если ПодборТоваров Тогда
		
		МассивТиповНоменклатуры = УправлениеДаннымиОбИзделияхКлиентСервер.МассивДоступныхТиповНоменклатуры(ЭтотОбъект, ИмяТЧ);
		ПараметрыОтбора = Новый Соответствие;
		ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры", МассивТиповНоменклатуры);
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		
	КонецЕсли;
	
	СтрокиИзБуфера = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, СоставСтрок);
	
	Если Не ЗначениеЗаполнено(СтрокиИзБуфера) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаИзБуфера Из СтрокиИзБуфера Цикл
		
		ТаблицаОбъекта = Объект[ИмяТЧ]; // ДанныеФормыКоллекция
		ТекущаяСтрока = ТаблицаОбъекта.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаИзБуфера);
		
		ПриВводеНовойСтрокиТехнологическогоПроцесса(ЭтотОбъект, ИмяТЧ, ТекущаяСтрока);
		
		Если ПодборТоваров Тогда
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, РеквизитыДоступны)
	
	Форма.Элементы.МатериалыИУслуги_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюМатериалыИУслуги_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
	Форма.Элементы.Трудозатраты_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюТрудозатраты_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
КонецПроцедуры

#КонецОбласти

#Область Операции

&НаКлиенте
Процедура ПереместитьОперацию(Вперед)
	
	ТекстОшибки = "";
	
	Если НЕ ТекущаяСтрокаЭтоОперация() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	Если ПереместитьОперациюНаСервере(ТекущиеДанные.Ссылка, Вперед, ТекстОшибки) Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.ТехнологическиеОперации"));
	Иначе
		ПоказатьПредупреждение(,ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереместитьОперациюНаСервере(Ссылка, Вперед, ТекстОшибки)

	ОперацияОбъект = Ссылка.ПолучитьОбъект();
	Попытка
		ОперацияОбъект.Заблокировать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось переместить операцию.
								|Возможно, операция редактируется пользователем.';
								|en = 'Cannot move the operation. 
								|Maybe, the operation is being edited by another user.'");
	    Возврат Ложь;
	КонецПопытки;
	НомерОперации          = ОперацияОбъект.НомерОперации;
	НомерСледующейОперации = ОперацияОбъект.НомерСледующейОперации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическиеОперации.Ссылка
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
	|ГДЕ
	|	ТехнологическиеОперации.Владелец = &Владелец
	|	И НЕ ТехнологическиеОперации.ПометкаУдаления
	|	И (&Вперед
	|				И ТехнологическиеОперации.НомерОперации = &НомерСледующейОперации
	|			ИЛИ НЕ &Вперед
	|				И ТехнологическиеОперации.НомерСледующейОперации = &НомерОперации)";
	
	Запрос.УстановитьПараметр("Владелец",               ОперацияОбъект.Владелец);
	Запрос.УстановитьПараметр("НомерОперации",          НомерОперации);
	Запрос.УстановитьПараметр("НомерСледующейОперации", НомерСледующейОперации);
	Запрос.УстановитьПараметр("Вперед",                 Вперед);
	
	Результат = Запрос.Выполнить().Выгрузить(); // см. ПроизводствоСервер.СлужебнаяСтруктураТаблицыЗначений
	Если Результат.Количество() = 0 Тогда
		
		Возврат Истина;
		
	ИначеЕсли Результат.Количество() > 1 Тогда
		// Не должно быть несколько операций
		Если Вперед Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось переместить операцию вперед,
									|т.к. следующих операций несколько.';
									|en = 'Cannot put the operation forward 
									|as there are several following operations.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось переместить операцию назад,
									|т.к. предыдущих операций несколько.';
									|en = 'Cannot put the operation back
									|as there are several previous operations.'");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ОперацияДляЗамены = Неопределено;
	
	// Заблокируем операцию с которой будет выполняться перемещение
	ОперацияДляЗамены = Результат[0].Ссылка.ПолучитьОбъект();
	Попытка
		ОперацияДляЗамены.Заблокировать();
	Исключение
		Если Вперед Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось переместить операцию.
									|Возможно, следующая операция редактируется пользователем.';
									|en = 'Cannot move the operation.
									|Maybe, the following operation is being edited by another user.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось переместить операцию.
									|Возможно, предыдущая операция редактируется пользователем.';
									|en = 'Cannot move the operation.
									|Maybe, the previous operation is being edited by another user.'");
		КонецЕсли;
	    Возврат Ложь;
	КонецПопытки;
	
	ОперацияОбъект.НомерОперации          = ОперацияДляЗамены.НомерОперации;
	ОперацияОбъект.НомерСледующейОперации = ОперацияДляЗамены.НомерСледующейОперации;
	
	ОперацияДляЗамены.НомерОперации          = НомерОперации;
	ОперацияДляЗамены.НомерСледующейОперации = НомерСледующейОперации;
	
	Попытка
		ОперацияОбъект.Записать();
		ОперацияДляЗамены.Записать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось переместить операцию.';
							|en = 'Cannot move the operation.'");
		Возврат Ложь;
	КонецПопытки;
	
	ОперацияОбъект.Разблокировать();
	ОперацияДляЗамены.Разблокировать();
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ТекущаяСтрокаЭтоОперация()

	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТипЗнч(ТекущиеДанные) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборВСпискеОпераций()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции, 
		"Владелец", 
		Объект.Ссылка, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции, 
		"ПометкаУдаления", 
		Ложь, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперацию(Отказ = Ложь)

	Если НЕ ДоступностьРеквизитов Тогда
		
		Отказ = Истина;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Отказ = Истина;
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТехнологическихПроцессов.Действует") Тогда
			ТекстВопроса = НСтр("ru = 'Ввод операций возможен со статусом ""В разработке"".
										|Изменить статус и записать спецификацию?';
										|en = 'You can enter operations only with status ""Under development"".
										|Change the status and save the BOM?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Ввод операций возможен только после записи технологического процесса.
										|Записать технологический процесс?';
										|en = 'Operations can only be entered after saving the technological process.
										|Save the technological process?'");
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросДобавитьОперацию", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Автовыбор_ОтборПоСвойствам_РасчетКоличества

&НаКлиенте
Процедура ОбработкаВыбораНастройкаАвтовыбораНоменклатуры(ИмяТЧ, ВыбранноеЗначение)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СпособАвтовыбораНоменклатуры = ТекущиеДанные.СпособАвтовыбораНоменклатуры;
	
	Если УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатурыЗавершение(ВыбранноеЗначение, ТекущиеДанные, Объект.СоответствиеСвойств) Тогда
		
		Если СпособАвтовыбораНоменклатуры <> ТекущиеДанные.СпособАвтовыбораНоменклатуры Тогда
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
		ЗаполнитьЕстьАвтовыборНоменклатуры();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораНастройкаОтбораПоСвойствамИРасчетаПоФормулам(ИмяТЧ, ВыбранноеЗначение)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если УправлениеДаннымиОбИзделияхКлиент.НастроитьОтборПоСвойствамИРасчетПоФормуламЗавершение(ВыбранноеЗначение, ТекущиеДанные, Объект.ОтборПоСвойствам) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, ИмяТЧ)
	
	АдресВХранилище = ПоместитьДанныеДляРасчетаПоФормуламВХранилище(ИмяТЧ);
	
	ОтборПоСвойствам = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.ОтборПоСвойствам,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаОтбораПоСвойствам());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьОтборПоСвойствамИРасчетПоФормулам(
								ЭтотОбъект,
								ИмяТЧ,
								ОтборПоСвойствам,
								Объект.ДляВидаИзделий,
								Не ДоступностьРеквизитов,
								,
								АдресВХранилище);

КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеДляРасчетаПоФормуламВХранилище(ИмяТЧ)
	
	ТаблицаФормы = Элементы[ИмяТЧ]; // ТаблицаФормы
	
	ДанныеДляРасчета = Справочники.ТехнологическиеПроцессы.ВыгрузитьДанныеДляКонструктораФормул(
		Объект,
		ИмяТЧ,
		Объект[ИмяТЧ].НайтиПоИдентификатору(ТаблицаФормы.ТекущаяСтрока));
	
	Результат = ПоместитьВоВременноеХранилище(ДанныеДляРасчета, УникальныйИдентификатор);
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПриВводеНовойСтрокиТехнологическогоПроцесса(Форма, ИмяТЧ, СтрокаТабличнойЧасти, Копирование = Ложь)
	
	КлючСвязиИсточника = ?(Копирование, СтрокаТабличнойЧасти.КлючСвязи, Неопределено);
	
	СтрокаТабличнойЧасти.КлючСвязи = Новый УникальныйИдентификатор;
	
	Если ИмяТЧ <> "Трудозатраты" Тогда
	
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(
			СтрокаТабличнойЧасти, 
			КлючСвязиИсточника,
			Форма.Объект.СоответствиеСвойств);
		
	КонецЕсли;
		
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСОтборомПоСвойствам(
		СтрокаТабличнойЧасти,
		КлючСвязиИсточника,
		Форма.Объект.ОтборПоСвойствам);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ИспользоватьПараметризациюРесурсныхСпецификаций = 
		ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций");
		
	ЗаполнитьСлужебныеРеквизиты();
	
	УстановитьДоступностьКомандИзмененияСтатуса();
	УправлениеВидимостью(ЭтотОбъект);
	НастроитьРасшифровкуКоэффициентЗнаменатель(ЭтотОбъект);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораМатериалов(
		Элементы.МатериалыИУслугиНоменклатура, ЭтотОбъект);
		
	Элементы.ГруппаОписание.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Описание);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Подразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыТехнологическихПроцессов.Действует;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект,
		"МатериалыИУслугиНоменклатураЕдиницаИзмерения", "Объект.МатериалыИУслуги.Упаковка");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиОперация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ОперацияРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<первая операция>';
																|en = '<first operation>'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСтатьяКалькуляции.Имя);
	
	ГруппаИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор");
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СтатьяКалькуляции");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсточникСоставаНаборовВПроизводстве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ИсточникиСоставаНаборовВПроизводстве.Спецификации;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<указывается в составе набора>';
																|en = '<specified in the set>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыОперация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.ОперацияРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<первая операция>';
																|en = '<first operation>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДляВидаИзделий.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьАвтовыборНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтотОбъект,
		"Объект",
		"МатериалыИУслуги",
		"КоличествоУпаковок");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтотОбъект,
		"Объект",
		"Трудозатраты",
		"Количество");
		
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеАвтовыбораНоменклатуры(ЭтотОбъект, "Объект", "МатериалыИУслуги");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.МатериалыИУслуги, СтруктураДействий);
		
	Если ИспользоватьПараметризациюРесурсныхСпецификаций Тогда
		
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.МатериалыИУслуги,
			Истина,
			Истина,
			Объект.ОтборПоСвойствам);
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.Трудозатраты,
			Ложь,
			Истина,
			Объект.ОтборПоСвойствам);
		
	КонецЕсли;
	
	ИсточникСоставаНаборовВПроизводстве = УправлениеДаннымиОбИзделияхПовтИсп.ИсточникСоставаНаборовВПроизводстве();
	
КонецПроцедуры

// Производит заполнение по другому технологическому процессу
// 
// Параметры:
// 	Источник - СправочникОбъект.ТехнологическиеПроцессы
&НаСервере
Процедура ЗаполнитьПоТехнологическомуПроцессу(Источник)
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			УдалитьОперацииПолучателя();
		Иначе
			Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
				Объект.Наименование = Источник.Наименование;
			КонецЕсли;
			Записать();
		КонецЕсли;
		СсылкаПриемника = Объект.Ссылка;
		
		Если НЕ Справочники.ТехнологическиеПроцессы.ЗаполнитьПоТехнологическомуПроцессу(Объект, Источник, СсылкаПриемника) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось заполнить по технологическому процессу.';
									|en = 'Cannot fill in by technological process.'");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
 		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Заполнение технологического процесса';
				|en = 'Technological process population'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
 		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОперацииПолучателя()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическиеОперации.Ссылка
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
	|ГДЕ
	|	ТехнологическиеОперации.Владелец = &Владелец
	|	И НЕ ТехнологическиеОперации.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОперацияОбъект.ОбменДанными.Загрузка = Истина;
		ОперацияОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьРеквизитов = (Объект.Статус = Перечисления.СтатусыТехнологическихПроцессов.ВРазработке);
	ТехнологическийПроцессЗакрыт = (Объект.Статус = Перечисления.СтатусыТехнологическихПроцессов.Закрыт);
	
	// Элементы управления шапки
	Элементы.Код.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.ДляВидаИзделий.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.Подразделение.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	
	// Элементы табличных частей
	Элементы.МатериалыИУслуги.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.Трудозатраты.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	
	// Команды
	Элементы.МатериалыИУслугиОткрытьПодборМатериалов.Доступность = ДоступностьРеквизитов;
	Элементы.ФормаЗаполнитьПоТехнологическомуПроцессу.Доступность = ДоступностьРеквизитов;
	
	// Если техгологический процесс закрыт то сделаем недоступными остальные реквизиты
	
	Элементы.Ответственный.ТолькоПросмотр = ТехнологическийПроцессЗакрыт;
	
	// Доступность элементов списка операций
	Элементы.Операции.ИзменятьСоставСтрок       = ДоступностьРеквизитов;
	Элементы.ОперацииГруппаДобавить.Доступность = ДоступностьРеквизитов;
	
	Элементы.ОперацииПереместитьОперациюНазад.Доступность   = ДоступностьРеквизитов;
	Элементы.ОперацииПереместитьОперациюВперед.Доступность  = ДоступностьРеквизитов;
	
	УстановитьДоступностьКомандБуфераОбмена(
		ЭтотОбъект,
		РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена() И ДоступностьРеквизитов);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеПринудительно()
	
	Отказ = Ложь;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.Статус = Перечисления.СтатусыТехнологическихПроцессов.Действует;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, Новый Массив, СправочникОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ СправочникОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандИзмененияСтатуса()
	
	Элементы.УстановитьСтатусДействует.Доступность   = (Объект.Статус <> Перечисления.СтатусыТехнологическихПроцессов.Действует);
	Элементы.УстановитьСтатусаЗакрыт.Доступность     = (Объект.Статус <> Перечисления.СтатусыТехнологическихПроцессов.Закрыт);
	Элементы.УстановитьСтатусВРазработке.Доступность = (Объект.Статус <> Перечисления.СтатусыТехнологическихПроцессов.ВРазработке);
	Элементы.ПроверитьЗаполнение.Доступность         = (Объект.Статус <> Перечисления.СтатусыТехнологическихПроцессов.Действует);

КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьНовыйСтатусИЗаписать(Статус)

	Если Объект.ПометкаУдаления Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя изменить статус помеченного на удаление технологического процесса.';
									|en = 'Cannot change the status of a technological process marked for deletion.'");
  		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	
	ТекущийСтатус = Объект.Статус;
	
	Объект.Статус = Статус;
	Если НЕ Записать() Тогда
		Объект.Статус = ТекущийСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(Форма, Действие = "")
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВсеДействия = ПустаяСтрока(Действие);
	
	Если ВсеДействия ИЛИ Действие = "РассчитыватьКоэффициент" Тогда
		
		ОтображатьКоэффициент = Истина;
		
		Элементы.ГруппаКоэффициентПрименения.Видимость = ОтображатьКоэффициент;
		Элементы.ГруппаКоэффициентФормула.Видимость = ОтображатьКоэффициент И Объект.РассчитыватьКоэффициент;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СписокТоваров = ВыбранноеЗначение;
	Иначе
		СписокТоваров = Новый Массив;
		СписокТоваров.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	ИмяТЧ = "МатериалыИУслуги";
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТаблицаОбъекта = Объект[ИмяТЧ]; // ДанныеФормыКоллекция
	
	Для каждого СтрокаТовара Из СписокТоваров Цикл
		
		ТекущаяСтрока = ТаблицаОбъекта.Добавить();
		ТекущаяСтрока.Номенклатура = СтрокаТовара;
		
		ПриВводеНовойСтрокиТехнологическогоПроцесса(ЭтотОбъект, ИмяТЧ, ТекущаяСтрока);
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗаполнитьПоТехнологическомуПроцессу(ТехнологическийПроцессИсточник, ДополнительныеПараметры) Экспорт

	Если ТехнологическийПроцессИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстВопроса = НСтр("ru = 'При заполнении прежние данные будут утеряны.
								|Заполнить?';
								|en = 'The previous data will be lost during the population.
								|Populate?'");
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить';
														|en = 'Fill'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьПоТехнологическомуПроцессу", ЭтотОбъект, ТехнологическийПроцессИсточник);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,,, НСтр("ru = 'Заполнение по технологическому процессу';
																			|en = 'Population by technological process'"));

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьПоТехнологическомуПроцессу(РезультатВопроса, ТехнологическийПроцессИсточник) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоТехнологическомуПроцессу(ТехнологическийПроцессИсточник);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ТехнологическиеОперации"));
	
	Оповестить("Запись_ТехнологическиеОперации");
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДобавитьОперацию(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТехнологическихПроцессов.Действует") Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТехнологическихПроцессов.ВРазработке");
	КонецЕсли;
	
	Если Записать() Тогда
		Элементы.Операции.ДобавитьСтроку();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВРазработкеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Истина Тогда
		УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыТехнологическихПроцессов.ВРазработке"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПоляВТаблице(ИмяТаблицы, ИмяПоля, СтандартнаяОбработка)

	Если НЕ ТолькоПросмотр И ДоступностьРеквизитов Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если (ИмяПоля = "МатериалыИУслугиНоменклатура"
			ИЛИ ИмяПоля = "МатериалыИУслугиНоменклатураКод"
			ИЛИ ИмяПоля = "МатериалыИУслугиАртикул")
		И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		
	ИначеЕсли (ИмяПоля = "МатериалыИУслугиОперация"
		ИЛИ ИмяПоля = "ТрудозатратыОперация")
		И ЗначениеЗаполнено(ТекущиеДанные.ОперацияРедактирование) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ОперацияРедактирование);
		
	ИначеЕсли (ИмяПоля = "МатериалыИУслугиСтатьяКалькуляции"
			ИЛИ ИмяПоля = "ТрудозатратыСтатьяКалькуляции")
		И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.СтатьяКалькуляции);
		
	ИначеЕсли (ИмяПоля = "ТрудозатратыВидРабот")
		И ЗначениеЗаполнено(ТекущиеДанные.ВидРабот)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВидРабот);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРассчитыватьКоэффициентЧисло()
	
	Объект.РассчитыватьКоэффициент = РассчитыватьКоэффициентЧисло;
	
	УправлениеВидимостью(ЭтотОбъект, "РассчитыватьКоэффициент");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьРасшифровкуКоэффициентЗнаменатель(Форма)
	
	ПредставлениеЕдиницы = ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
		НСтр("ru = 'единицу';
			|en = 'unit'"),
		НСтр("ru = 'единицы';
			|en = 'units'"),
		НСтр("ru = 'единиц';
			|en = 'units'"),
		Форма.Объект.КоэффициентЗнаменатель);
	
	Форма.Элементы.РасшифровкаКоэффициентЗнаменатель.Заголовок = СтрШаблон(
		НСтр("ru = '%1 основного изделия спецификации';
			|en = '%1 of main BOM product'"),
		ПредставлениеЕдиницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЕстьАвтовыборНоменклатуры()
	
	ЕстьАвтовыборНоменклатуры = ИспользоватьПараметризациюРесурсныхСпецификаций 
	И (Справочники.ТехнологическиеПроцессы.ЕстьАвтовыборНоменклатуры(Объект.МатериалыИУслуги));
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопироватьТехнологическийПроцесс(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = КопироватьТехнологическийПроцессНаСервере(Объект.Ссылка);
	
	Если Ссылка <> Неопределено Тогда
		
		ТехнологическиеПроцессыКлиент.ОповеститьОКопированииТехнологическогоПроцессаСОперациями();
		
		ОткрытьФорму("Справочник.ТехнологическиеПроцессы.ФормаОбъекта", Новый Структура("Ключ", Ссылка));
	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция КопироватьТехнологическийПроцессНаСервере(Источник)
	
	Возврат Справочники.ТехнологическиеПроцессы.СкопироватьТехнологическийПроцессСОперациями(Источник);
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
