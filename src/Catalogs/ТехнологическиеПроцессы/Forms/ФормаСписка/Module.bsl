
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ТехнологическиеПроцессы" Тогда
		Элементы.Список.Обновить();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтборПоСтатусу(ЭтаФорма);
	УстановитьОтборПоПодразделению(ЭтаФорма);
	УстановитьОтборПоОтветственному(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область БыстрыеОтборы

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	
	УстановитьОтборПоСтатусу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	УстановитьОтборПоПодразделению(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	
	УстановитьОтборПоОтветственному(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНоменклатураПриИзменении(Элемент)
	
	УстановитьОтборПоНоменклатуре();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Группа Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		Отказ = Истина;
		
		КопироватьТехнологическийПроцесс();
		
	ИначеЕсли НЕ ОтборНоменклатура.Пустая() Тогда
		
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ОтборНоменклатура);
		ОткрытьФорму("Справочник.ТехнологическиеПроцессы.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаУстановитьСтатусВРазработке(Команда)
	
	УстановитьСтатус("ВРазработке", НСтр("ru = 'В разработке';
										|en = 'Under development'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусДействует(Команда)
	
	УстановитьСтатус("Действует", НСтр("ru = 'Действует';
										|en = 'Valid'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусЗакрыт(Команда)
	
	УстановитьСтатус("Закрыт", НСтр("ru = 'Закрыт';
									|en = 'Closed'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ИзменитьВыделенныеДоступна = ПроизводствоСервер.ДоступнаКомандаИзменитьВыделенные(Метаданные.Справочники.ТехнологическиеПроцессы);
	Элементы.СписокИзменитьВыделенные.Видимость                      = ИзменитьВыделенныеДоступна;
	Элементы.КонтекстноеМенюИзменитьВыделенные.Видимость = ИзменитьВыделенныеДоступна;
	
КонецПроцедуры

#Область Отборы

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСтатусу(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список, 
		"Статус", 
		Форма.ОтборСтатус, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.ОтборСтатус));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПодразделению(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список, 
		"Подразделение", 
		Форма.ОтборПодразделение, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.ОтборПодразделение));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОтветственному(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список, 
		"Ответственный", 
		Форма.ОтборОтветственный, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.ОтборОтветственный));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоНоменклатуре()
	
	Справочники.ТехнологическиеПроцессы.УстановитьОтборПоНоменклатуреВСпискеТехнологическихПроцессов(
		Список,
		ОтборНоменклатура);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаСтатуса

&НаКлиенте
Процедура УстановитьСтатус(ЗначениеСтатуса, ПредставлениеСтатуса)

	ВыделенныеСсылки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеСтатуса",      ЗначениеСтатуса);
	ДополнительныеПараметры.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
	ДополнительныеПараметры.Вставить("ВыделенныеСсылки",     ВыделенныеСсылки);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Выбранным технологическим процессам будет установлен статус ""%1"". Продолжить?';
						|en = 'The selected technological processes will be set to ""%1"" status. Continue?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеСтатуса);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = УстановитьСтатусНаСервере(
			ДополнительныеПараметры.ВыделенныеСсылки, 
			ДополнительныеПараметры.ЗначениеСтатуса);
										
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
			Неопределено,
			КоличествоОбработанных, 
			ДополнительныеПараметры.ВыделенныеСсылки.Количество(), 
			ДополнительныеПараметры.ПредставлениеСтатуса);
			
	Оповестить("Запись_ТехнологическиеПроцессы");
	ОповеститьОбИзменении(Тип("СправочникСсылка.ТехнологическиеПроцессы"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьСтатусНаСервере(ВыделенныеСсылки, ЗначениеСтатуса) Экспорт
	НовыйСтатус = Перечисления.СтатусыТехнологическихПроцессов[ЗначениеСтатуса];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехнологическиеПроцессы.Ссылка,
	|	ТехнологическиеПроцессы.Наименование,
	|	ТехнологическиеПроцессы.ПометкаУдаления
	|ИЗ
	|	Справочник.ТехнологическиеПроцессы КАК ТехнологическиеПроцессы
	|ГДЕ
	|	ТехнологическиеПроцессы.Статус <> &НовыйСтатус
	|	И ТехнологическиеПроцессы.Ссылка В(&ВыделенныеСсылки)";
	
	Запрос.УстановитьПараметр("ВыделенныеСсылки", ВыделенныеСсылки);
	Запрос.УстановитьПараметр("НовыйСтатус",      НовыйСтатус);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоличествоОбработанных = 0;
	
	Если НовыйСтатус = Перечисления.СтатусыТехнологическихПроцессов.ВРазработке Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Нельзя изменить статус помеченного на удаление технологического процесса""%1"".';
										|en = 'Cannot change the status of a technological process ""%1"" marked for deletion.'"),
									Выборка.Наименование);
									
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка); 
			Продолжить;
		КонецЕсли;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НачатьТранзакцию();
		
		Попытка
			
			Если НовыйСтатус = Перечисления.СтатусыТехнологическихПроцессов.ВРазработке Тогда
				ПараметрыПроверки = Новый Структура("Объект", Выборка.Ссылка);
				Справочники.ТехнологическиеПроцессы.ПроверитьИспользованиеОбъекта(ПараметрыПроверки, АдресХранилища);
				ЕстьСсылки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Если ЕстьСсылки Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Технологический процесс ""%1"" используется. Установка статуса ""В разработке"" допускается только в форме технологического процесса.';
												|en = 'Technological process ""%1"" is in use. Setting the ""Under development"" status is only allowed in the technological process form.'"),
											СпрОбъект.Наименование);
											
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка); 
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецЕсли; 
			
			СпрОбъект.Статус = НовыйСтатус;
			Если СпрОбъект.ПроверитьЗаполнение() Тогда
				СпрОбъект.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;

КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Список.УсловноеОформление.Элементы.Очистить();
	Справочники.ТехнологическиеПроцессы.УстановитьУсловноеОформлениеСпискаТехнологическихПроцессов(Список.УсловноеОформление);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьТехнологическийПроцесс()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросКопироватьТехнологическийПроцесс", ЭтаФорма);
	
	ТехнологическиеПроцессыКлиент.ПоказатьВопросКопироватьТехнологическийПроцессСОперациями(ОписаниеОповещения)
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопироватьТехнологическийПроцесс(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = КопироватьТехнологическийПроцессНаСервере(Элементы.Список.ТекущиеДанные.Ссылка);
	
	Если Ссылка <> Неопределено Тогда
		
		Элементы.Список.ТекущаяСтрока = Ссылка;
		
		ТехнологическиеПроцессыКлиент.ОповеститьОКопированииТехнологическогоПроцессаСОперациями();
		
		ОткрытьФорму("Справочник.ТехнологическиеПроцессы.ФормаОбъекта", Новый Структура("Ключ", Ссылка));
	
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Функция КопироватьТехнологическийПроцессНаСервере(Источник)
	
	Возврат Справочники.ТехнологическиеПроцессы.СкопироватьТехнологическийПроцессСОперациями(Источник);
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
