#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Количество");
	
	Если Статус <> Перечисления.СтатусыТехнологическихПроцессов.Действует Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	КонецЕсли;
	
	Если МатериалыИУслуги.Количество() > 0 Тогда
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "МатериалыИУслуги";
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций") Тогда
			СписокСтрок = МатериалыИУслуги.НайтиСтроки(Новый Структура("СпособАвтовыбораХарактеристики", 
				Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ));
			ПараметрыПроверки.СписокСтрок = СписокСтрок;
		КонецЕсли;
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	КонецЕсли;
	
	ПроверитьЗаполнениеНоменклатурыИКоличества(Отказ);
	
	Если УправлениеДаннымиОбИзделияхПовтИсп.ДоступноИспользованиеНаборовВПроизводстве() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.СтатьяКалькуляции");
		ПроверитьЗаполнениеСтатьиКалькуляции(Отказ);
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыТехнологическихПроцессов.Действует Тогда
		
		ПроверитьАвтовыборРасчетПоФормуламОтборПоСвойствам(Отказ);
		
		Справочники.ТехнологическиеПроцессы.ПоследовательностьОперацийПравильная(Ссылка, Отказ);
		РедакторПроизводственногоПроцесса.ПроверитьКорректностьЗаполненияОпераций(Ссылка, Подразделение, Отказ);
		
	КонецЕсли;
	
	Если НЕ РассчитыватьКоэффициент Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентЧислитель");
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентЗнаменатель");
	КонецЕсли;
	
	ТабличныеЧастиОбъекта = Метаданные().ТабличныеЧасти;
	ПроверитьВыборОпераций("МатериалыИУслуги", ТабличныеЧастиОбъекта.МатериалыИУслуги.Синоним, Отказ);
	ПроверитьВыборОпераций("Трудозатраты",ТабличныеЧастиОбъекта.Трудозатраты.Синоним, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если НЕ ЭтоГруппа Тогда
		
		ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
		Если ТипДанныхЗаполнения = Тип("СправочникСсылка.Номенклатура") Тогда
			
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "ЭтоГруппа, ВидНоменклатуры");
			Если СтруктураРеквизитов.ЭтоГруппа = Ложь Тогда
				ДляВидаИзделий = СтруктураРеквизитов.ВидНоменклатуры;
			КонецЕсли;
			
		КонецЕсли;
		
		Ответственный = Пользователи.ТекущийПользователь();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Статус         = Перечисления.СтатусыТехнологическихПроцессов.ВРазработке;
	Ответственный  = Пользователи.ТекущийПользователь();
	Подразделение  = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	ОчиститьВыборОпераций();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если НЕ ЭтоГруппа Тогда
		
		Если ПометкаУдаления Тогда
			Статус = Перечисления.СтатусыТехнологическихПроцессов.Закрыт;
			ОчиститьВыборОпераций();
		КонецЕсли;
		
		ПередЗаписьюДействующегоТехнологическогоПроцесса(Отказ);
		
		ЗаполнитьСлужебныеРеквизиты();
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Процедура ПередЗаписьюДействующегоТехнологическогоПроцесса(Отказ)

	Если Статус = Перечисления.СтатусыТехнологическихПроцессов.Действует И НЕ ПометкаУдаления И НЕ Отказ Тогда
		
		ОчиститьНеиспользуемыеДанные();
		
		ОбновитьПривязкуОпераций(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет значение реквизита Операция в табличных частях
//  - если реквизит ОперацияРедактирование не пустой то подставляет значение из него
//  - если реквизит ОперацияРедактирование пустой то подставляет последнюю операцию.
//
Процедура ОбновитьПривязкуОпераций(Отказ)
	
	ПерваяОперация = Неопределено;
	
	ПустаяОперация = Справочники.ТехнологическиеОперации.ПустаяСсылка();
	
	ПолучитьКрайниеОперации = МатериалыИУслуги.Найти(ПустаяОперация, "ОперацияРедактирование") <> Неопределено
		ИЛИ Трудозатраты.Найти(ПустаяОперация, "ОперацияРедактирование") <> Неопределено;
	
	Если ПолучитьКрайниеОперации Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТехнологическиеОперации.Ссылка,
			|	ВЫБОР
			|		КОГДА ТехнологическиеОперации.НомерОперации = 1
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПерваяОперация
			|ИЗ
			|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
			|ГДЕ
			|	ТехнологическиеОперации.Владелец = &Владелец
			|	И НЕ ТехнологическиеОперации.ПометкаУдаления");
		
		Запрос.УстановитьПараметр("Владелец", Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ПерваяОперация Тогда
				ПерваяОперация = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить("МатериалыИУслуги");
	ТабличныеЧасти.Добавить("Трудозатраты");
	
	Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		Для каждого Строка Из ЭтотОбъект[ТабличнаяЧасть] Цикл
			
			Если Строка.ОперацияРедактирование.Пустая() Тогда
				
				Строка.Операция = ПерваяОперация;
				
			Иначе
				
				Строка.Операция = Строка.ОперацияРедактирование;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьВыборОпераций()

	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить("МатериалыИУслуги");
	ТабличныеЧасти.Добавить("Трудозатраты");
	
	Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		Для каждого Строка Из ЭтотОбъект[ТабличнаяЧасть] Цикл
			
			Строка.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
			Строка.ОперацияРедактирование = Справочники.ТехнологическиеОперации.ПустаяСсылка();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВыборОпераций(ИмяТаблицы, ПредставлениеТаблицы, Отказ)

	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Не допускается выбор операций помеченных на удаление (список ""%1"", строка %2).';
							|en = 'It is not allowed to select operations marked for deletion (the ""%1"" list, line %2).'");
	
	ТабличнаяЧасть = ЭтотОбъект[ИмяТаблицы]; // СправочникТабличнаяЧасть.ТехнологическиеПроцессы.МатериалыИУслуги
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если СтрокаТаблицы.ОперацияРедактирование.Пустая() 
			ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ОперацияРедактирование, "ПометкаУдаления") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
																					ПредставлениеТаблицы, 
																					Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
																					
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, СтрокаТаблицы.НомерСтроки, "ОперацияРедактирование");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНоменклатурыИКоличества(Отказ)
	
	ШаблонСообщенияНоменклатура = НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке %1 списка ""%2""';
										|en = 'Column ""Items"" in line %1 of the ""%2"" list is not filled in'");
	ШаблонСообщенияКоличество   = НСтр("ru = 'Не заполнена колонка ""Количество"" в строке %1 списка ""%2""';
										|en = 'Column ""Quantity"" in line %1 of the ""%2"" list is not filled in'");
	
	МетаданныеТЧ = Метаданные.Справочники.ТехнологическиеПроцессы.ТабличныеЧасти;
	
	РеквизитыПроверки = "ИмяТЧ, Номенклатура, Количество";
	
	МассивПроверок = Новый Массив;
	МассивПроверок.Добавить(Новый Структура(РеквизитыПроверки, "МатериалыИУслуги", "Номенклатура", "КоличествоУпаковок"));
	МассивПроверок.Добавить(Новый Структура(РеквизитыПроверки, "Трудозатраты", "", "Количество"));
	
	Для каждого Проверка Из МассивПроверок Цикл
		
		ТабличнаяЧасть = ЭтотОбъект[Проверка.ИмяТЧ]; // СправочникТабличнаяЧасть.ТехнологическиеПроцессы.МатериалыИУслуги
		Для каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
			
			Если Проверка.Номенклатура <> ""
				И ТекущаяСтрока[Проверка.Номенклатура].Пустая()
				И (ТекущаяСтрока.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ 
					ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций")) Тогда
				
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщенияНоменклатура, 
							Формат(ТекущаяСтрока.НомерСтроки, "ЧГ="),
							МетаданныеТЧ[Проверка.ИмяТЧ].Синоним);
							
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Проверка.ИмяТЧ, ТекущаяСтрока.НомерСтроки, Проверка.Номенклатура);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			КонецЕсли;
			
			Если Статус = Перечисления.СтатусыТехнологическихПроцессов.Действует Тогда
				
				Если ТекущаяСтрока[Проверка.Количество] = 0
					И (ПустаяСтрока(ТекущаяСтрока.АлгоритмРасчетаКоличества) 
						ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций")) Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонСообщенияКоличество, 
											Формат(ТекущаяСтрока.НомерСтроки, "ЧГ="),
											МетаданныеТЧ[Проверка.ИмяТЧ].Синоним);
											
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Проверка.ИмяТЧ, ТекущаяСтрока.НомерСтроки, Проверка.Количество);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСтатьиКалькуляции(Отказ)
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Статья калькуляции"" в строке %1 списка ""%2""';
							|en = 'The ""Product cost element"" column in the %1 line of the ""%2"" list is not filled'");
	
	ТипыНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		МатериалыИУслуги.ВыгрузитьКолонку("Номенклатура"),
		"ТипНоменклатуры");
		
	ИсточникСоставаНаборовВПроизводстве = УправлениеДаннымиОбИзделияхПовтИсп.ИсточникСоставаНаборовВПроизводстве();
	МетаданныеТЧ = Метаданные.Справочники.ТехнологическиеПроцессы.ТабличныеЧасти.МатериалыИУслуги;
	
	Для каждого ТекущаяСтрока Из МатериалыИУслуги Цикл
		
		СтатьяКалькуляцииНеОбязательна =
			ТипыНоменклатуры.Получить(ТекущаяСтрока.Номенклатура) = Перечисления.ТипыНоменклатуры.Набор
			И ИсточникСоставаНаборовВПроизводстве = Перечисления.ИсточникиСоставаНаборовВПроизводстве.Спецификации;
		
		Если НЕ СтатьяКалькуляцииНеОбязательна И НЕ ЗначениеЗаполнено(ТекущаяСтрока.СтатьяКалькуляции) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения,
				Формат(ТекущаяСтрока.НомерСтроки, "ЧГ="),
				МетаданныеТЧ.Синоним);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				МетаданныеТЧ.Имя,
				ТекущаяСтрока.НомерСтроки,
				"СтатьяКалькуляции");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьАвтовыборРасчетПоФормуламОтборПоСвойствам(Отказ)

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций") Тогда
		Возврат;
	КонецЕсли;
	
#Область Автовыбор

	МассивПроверок = Новый Массив;
	МассивПроверок.Добавить(Новый Структура("ИмяТЧ, Представление, Реквизит", "МатериалыИУслуги", НСтр("ru = 'Материалы и работы';
																										|en = 'Materials and works'"), "Номенклатура"));
	
	СписокВсехДоступныхСвойств = УправлениеДаннымиОбИзделиях.ПолучитьСвойстваДляАвтовыбора(ДляВидаИзделий); 
	
	// Проверим, что свойство в котором указывается номенклатура есть в продукции
	ШаблонСообщения = НСтр("ru = 'В настройке автовыбора определено, что номенклатура указывается в свойстве ""%1"", но это свойство не входит в состав свойств основного изделия (список ""%2"", строка %3).';
							|en = 'In auto selection settings, it is determined that items are specified in the ""%1"" property, but this property is not included in main product properties (the ""%2"" list, line %3).'");
	ТекстНеЗаданоСвойствоАвтовыбора = НСтр("ru = 'В настройке автовыбора определено, что номенклатура указывается в свойстве основного изделия, но свойство не задано.';
											|en = 'In auto selection settings, it is determined that items are specified in the property of the main product, but this property is not set.'");
	ТекстНеЗаданАлгоритмАвтовыбора = НСтр("ru = 'В настройке автовыбора определено, что характеристика определяется по алгоритму, но алгоритм не задан.';
											|en = 'In auto selection settings, it is determined that a variant is defined by algorithm, but the algorithm is not specified.'");
	Для каждого Проверка Из МассивПроверок Цикл
		
		ТабличнаяЧасть = ЭтотОбъект[Проверка.ИмяТЧ]; // ТабличнаяЧасть - Справочник.ТехнологическиеПроцессы.МатериалыИУслуги
		Для каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
			
			ТекстСообщения = "";
			Если ТекущаяСтрока.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции Тогда
				
				Если ЗначениеЗаполнено(ТекущаяСтрока.СвойствоСодержащееНоменклатуру) Тогда
					Если СписокВсехДоступныхСвойств.Найти(ТекущаяСтрока.СвойствоСодержащееНоменклатуру, "Свойство") = Неопределено Тогда
						ЗаголовокСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.СвойствоСодержащееНоменклатуру, "Заголовок");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщения, 
							ЗаголовокСвойства,
							Проверка.Представление,
							Формат(ТекущаяСтрока.НомерСтроки, "ЧГ="));
					КонецЕсли;
				Иначе
					ТекстСообщения = ТекстНеЗаданоСвойствоАвтовыбора;
				КонецЕсли;
				
			ИначеЕсли ТекущаяСтрока.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму 
				И НЕ ЗначениеЗаполнено(ТекущаяСтрока.АлгоритмАвтовыбораХарактеристики) Тогда
				ТекстСообщения = ТекстНеЗаданАлгоритмАвтовыбора;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Проверка.ИмяТЧ, ТекущаяСтрока.НомерСтроки, "Номенклатура");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
#КонецОбласти

#Область ОтборПоСвойствам
	
	СписокВсехДоступныхСвойств = УправлениеДаннымиОбИзделиях.ПолучитьСвойстваДляОтбораПоСвойствам(ДляВидаИзделий,,Ложь);
	
	// Настройки использования и расчета количества
	МассивПроверок.Добавить(Новый Структура("ИмяТЧ, Представление, Реквизит", "Трудозатраты", НСтр("ru = 'Трудозатраты';
																									|en = 'Labor costs'"), "ВидРабот"));
	
	ШаблонСообщения = НСтр("ru = 'В настройках использования указаны неверные свойства (список ""%1"", строка %2).';
							|en = 'Incorrect properties are specified in usage settings (the ""%1"" list, line %2).'");
	
	Для каждого Проверка Из МассивПроверок Цикл
		
		ТабличнаяЧасть = ЭтотОбъект[Проверка.ИмяТЧ]; // СправочникТабличнаяЧасть.ТехнологическиеПроцессы.МатериалыИУслуги
		Для каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
			
			СтрокиОтбор = ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", ТекущаяСтрока.КлючСвязи));
			
			Для каждого СтрокаОтбор Из СтрокиОтбор Цикл
				
				Если СписокВсехДоступныхСвойств.Найти(СтрокаОтбор.Свойство, "Свойство") = Неопределено Тогда
					
					ТекстСообщения = СтрШаблон(ШаблонСообщения, Проверка.Представление, Формат(ТекущаяСтрока.НомерСтроки, "ЧГ="));
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Проверка.ИмяТЧ, ТекущаяСтрока.НомерСтроки, Проверка.Реквизит);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, 
						ЭтотОбъект, 
						Поле,
						, 
						Отказ);
						
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
#КонецОбласти

#Область РасчетПоФормулам

	ТабличныеЧастиОбъекта = Метаданные().ТабличныеЧасти;
	
	Отбор = Новый Структура("АлгоритмРасчетаКоличества", "");
	
	Для Ит = - МассивПроверок.ВГраница() По 0 Цикл
		Проверка = МассивПроверок[-Ит];
		Если ЭтотОбъект[Проверка.ИмяТЧ].НайтиСтроки(Отбор).Количество() = ЭтотОбъект[Проверка.ИмяТЧ].Количество() Тогда
			МассивПроверок.Удалить(-Ит);
		Иначе
			ИмяРеквизита = "КоличествоУпаковок";
			Если ТабличныеЧастиОбъекта[Проверка.ИмяТЧ].Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
				ИмяРеквизита = "Количество";
			КонецЕсли;
			Проверка.Реквизит = ИмяРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПроверок.Количество() > 0 Тогда
		
		ОписаниеИсточников = Справочники.ТехнологическиеПроцессы.ВыгрузитьДанныеДляКонструктораФормул(ЭтотОбъект, "");
		
		ПараметрыПроверки = Новый Структура("Состав, ВыводитьСообщения, ОчищатьНеНайденные", МассивПроверок, Истина, Ложь);
		
		УправлениеДаннымиОбИзделиях.ПроверитьОчиститьАлгоритмРасчетаКоличества(ЭтотОбъект, ОписаниеИсточников, ПараметрыПроверки, Отказ);
		
	КонецЕсли;
	
#КонецОбласти
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеДанные()
	
	ИспользоватьПараметризациюРесурсныхСпецификаций = ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций");
	
	Для каждого Строка Из МатериалыИУслуги Цикл
		Если Не ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) И ИспользоватьПараметризациюРесурсныхСпецификаций Тогда
			Строка.КоличествоУпаковок = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Трудозатраты Цикл
		Если Не ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) И ИспользоватьПараметризациюРесурсныхСпецификаций Тогда
			Строка.Количество = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизиты()
	
	Если ( Статус = Перечисления.СтатусыСпецификаций.ВРазработке ) Тогда
		
		ЕстьПараметризацияРесурсов = Ложь;
		
	Иначе
		
		ЕстьПараметризацияРесурсов = ОтборПоСвойствам.Количество();
		Если НЕ ЕстьПараметризацияРесурсов Тогда
			
			СписокТЧ = Новый Массив;
			СписокТЧ.Добавить("МатериалыИУслуги");
			СписокТЧ.Добавить("Трудозатраты");
			
			Для каждого ИмяТЧ Из СписокТЧ Цикл
				Для каждого Строка Из ЭтотОбъект[ИмяТЧ] Цикл
					Если Не ПустаяСтрока(Строка.АлгоритмРасчетаКоличества)
						ИЛИ ИмяТЧ <> "Трудозатраты"
							И (Строка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции
								ИЛИ Строка.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции
								ИЛИ Строка.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму) Тогда
						ЕстьПараметризацияРесурсов = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьПараметризацияРесурсов Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли