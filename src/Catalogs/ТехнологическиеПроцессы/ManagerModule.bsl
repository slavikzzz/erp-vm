#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	НеРедактируемыеРеквизиты.Добавить("ВыходныеИзделия.Операция");
	НеРедактируемыеРеквизиты.Добавить("ВозвратныеОтходы.Операция");
	НеРедактируемыеРеквизиты.Добавить("МатериалыИУслуги.Операция");
	НеРедактируемыеРеквизиты.Добавить("Трудозатраты.Операция");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Функция - конструктор структуры для выборки данных технологического процесса.
//
// Возвращаемое значение:
//  Структура - структура с параметрами выборки данных технологического процесса.
//
Функция ДанныеПоНоменклатуре() Экспорт
	
	ДанныеПоНоменклатуре = Новый Структура;
	
	ДанныеПоНоменклатуре.Вставить("Распоряжение"); // заказ на производство
	
	ДанныеПоНоменклатуре.Вставить("НаправлениеДеятельности");
	
	ДанныеПоНоменклатуре.Вставить("Номенклатура");
	ДанныеПоНоменклатуре.Вставить("Характеристика");
	
	ДанныеПоНоменклатуре.Вставить("Количество", 0); // количество основного изделия РС
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Данные технологического процесса.
// 
// Параметры:
//  ТехнологическийПроцесс - СправочникСсылка.ТехнологическиеПроцессы
//  СписокДанных - Строка -  Перечень получаемых данных
//  КоличествоСмещение - Число -  Смещение нумерации строк в формулах
// 
// Возвращаемое значение:
//  Структура - из:
//		* Операции - ТаблицаЗначений - таблица операций:
//			** Операция - СправочникСсылка.ТехнологическиеОперации
//			** Наименование - Строка - наименование операции
//		* МатериалыИУслуги - ТаблицаЗначений - таблица материалов:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//		* Трудозатраты - ТаблицаЗначений - таблица трудозатрат:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
Функция ДанныеТехнологическогоПроцесса(ТехнологическийПроцесс, Знач СписокДанных = "", КоличествоСмещение = 0) Экспорт
	
	Если СписокДанных <> "" Тогда
		ПереченьДанных = СтрРазделить(СписокДанных,",");
	Иначе
		ПереченьДанных = СтрРазделить("Операции,МатериалыИУслуги,Трудозатраты,СоответствиеСвойств,ОтборПоСвойствам",",");
	КонецЕсли;
	
	РазделительЗапросовВПакете = ОбщегоНазначения.РазделительПакетаЗапросов();
	ТекстыЗапроса              = Новый СписокЗначений;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.Ссылка                           КАК ТехнологическийПроцесс,
	|	Т.ДляВидаИзделий                   КАК ДляВидаИзделий,
	|	Т.Подразделение                    КАК Подразделение,
	|	Т.РассчитыватьКоэффициент          КАК РассчитыватьКоэффициент,
	|	Т.КоэффициентЧислитель             КАК КоэффициентЧислитель,
	|	Т.КоэффициентЗнаменатель           КАК КоэффициентЗнаменатель,
	|	Т.ЕстьПараметризацияРесурсов       КАК ЕстьПараметризацияРесурсов
	|ИЗ
	|	Справочник.ТехнологическиеПроцессы КАК Т
	|ГДЕ
	|	Т.Ссылка = &ТехнологическийПроцесс
	|
	|";
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "Реквизиты");
	
	Если ПереченьДанных.Найти("Операции") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Т.Ссылка                 КАК Операция,
		|	Т.Наименование           КАК Наименование,
		|	Т.НомерОперации          КАК НомерОперации,
		|	Т.НомерСледующейОперации КАК НомерСледующейОперации,
		|	Т.РабочийЦентр           КАК РабочийЦентр
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК Т
		|ГДЕ
		|	Т.Владелец = &ТехнологическийПроцесс
		|	И НЕ Т.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.НомерОперации,
		|	Т.Наименование
		|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "Операции");
		
	КонецЕсли;
	
	Если ПереченьДанных.Найти("МатериалыИУслуги") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Т.*,
		|	Т.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА Т.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются
		|
		|ИЗ
		|	Справочник.ТехнологическиеПроцессы.МатериалыИУслуги КАК Т
		|ГДЕ
		|	Т.Ссылка = &ТехнологическийПроцесс
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.НомерСтроки
		|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "МатериалыИУслуги");
		
	КонецЕсли;
	
	Если ПереченьДанных.Найти("Трудозатраты") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Т.*
		|ИЗ
		|	Справочник.ТехнологическиеПроцессы.Трудозатраты КАК Т
		|ГДЕ
		|	Т.Ссылка = &ТехнологическийПроцесс
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.НомерСтроки
		|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "Трудозатраты");
		
	КонецЕсли;
	
	Если ПереченьДанных.Найти("СоответствиеСвойств") <> Неопределено Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Т.*
		|ИЗ
		|	Справочник.ТехнологическиеПроцессы.СоответствиеСвойств КАК Т
		|ГДЕ
		|	Т.Ссылка = &ТехнологическийПроцесс
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.НомерСтроки
		|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "СоответствиеСвойств");
		
	КонецЕсли;
	
	Если ПереченьДанных.Найти("ОтборПоСвойствам") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Т.*
		|ИЗ
		|	Справочник.ТехнологическиеПроцессы.ОтборПоСвойствам КАК Т
		|ГДЕ
		|	Т.Ссылка = &ТехнологическийПроцесс
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.НомерСтроки
		|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ОтборПоСвойствам");
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТехнологическийПроцесс", ТехнологическийПроцесс);
	
	УстановитьПривилегированныйРежим(Истина);
	Таблицы = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса);
	УстановитьПривилегированныйРежим(Ложь);
	
	УправлениеДаннымиОбИзделиях.ОбновитьКлючиСвязиОбъекта(Таблицы);
	ОбработатьСмещениеФормул(Таблицы, КоличествоСмещение);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТехнологическийПроцесс");
	СтруктураДанных.Вставить("ДляВидаИзделий");
	СтруктураДанных.Вставить("Подразделение");
	СтруктураДанных.Вставить("РассчитыватьКоэффициент");
	СтруктураДанных.Вставить("КоэффициентЧислитель");
	СтруктураДанных.Вставить("КоэффициентЗнаменатель");
	СтруктураДанных.Вставить("ЕстьПараметризацияРесурсов");
	
	//@skip-warning
	ТаблицаРеквизитов = Таблицы["Реквизиты"];
	Если ТаблицаРеквизитов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ТаблицаРеквизитов[0]);
	КонецЕсли;
	
	Для каждого ИмяТаблицы Из ПереченьДанных Цикл
		
		Таблица = Таблицы[ИмяТаблицы];
		
		СтруктураДанных.Вставить(ИмяТаблицы, Таблица);
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Проверяет последовательность операций
//
// Параметры:
//  ТехнологическийПроцесс		- СправочникСсылка.ТехнологическиеПроцессы - технологический процесс, операции которого требуется проверить
//  Отказ				- Булево - признак отмены текущего действия.
//
// Возвращаемое значение:
//   Булево   - истина, если последовательность операций правильная.
//
Функция ПоследовательностьОперацийПравильная(ТехнологическийПроцесс, Отказ = Ложь) Экспорт
	
	СтруктураСообщений = РедакторПроизводственногоПроцесса.СтруктураПроверокПоследовательностиОпераций();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяСправочникаОпераций",     "ТехнологическиеОперации");
	СтруктураПараметров.Вставить("ПолеНомерОперации",          "НомерОперации");
	СтруктураПараметров.Вставить("ПолеНомерСледующейОперации", "НомерСледующейОперации");
	
	ПоследовательностьПравильная = РедакторПроизводственногоПроцесса.ПоследовательностьОперацийПравильная(
		ТехнологическийПроцесс, СтруктураПараметров, СтруктураСообщений, Отказ);
	
	Возврат ПоследовательностьПравильная;
	
КонецФункции

// Заполняет технологический процесс по другому технологическому процессу
//
// Параметры:
//  Приемник - СправочникОбъект.ТехнологическиеПроцессы, ДанныеФормыСтруктура - технологический процесс
//		в который будут скопированы операции.
//  Источник - СправочникСсылка.ТехнологическиеПроцессы - технологический процесс операции которого нужно скопировать.
//	СсылкаПриемника - СправочникСсылка.ТехнологическиеПроцессы - ссылка на заполняемый технологический процесс.
//
// Возвращаемое значение:
//   Булево   - истина, если копирование выполнено успешно.
//
Функция ЗаполнитьПоТехнологическомуПроцессу(Приемник, Источник, СсылкаПриемника) Экспорт

	ИсточникОбъект = Источник.ПолучитьОбъект();

	Приемник.МатериалыИУслуги.Загрузить(ИсточникОбъект.МатериалыИУслуги.Выгрузить());
	Приемник.Трудозатраты.Загрузить(ИсточникОбъект.Трудозатраты.Выгрузить());
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СправочникТехнологическиеОперации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК СправочникТехнологическиеОперации
	|ГДЕ
	|	СправочникТехнологическиеОперации.Владелец = &Источник
	|	И НЕ СправочникТехнологическиеОперации.ПометкаУдаления");
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СсылкаНаОперацию = Справочники.ТехнологическиеОперации.СкопироватьТехнологическуюОперацию(Выборка.Ссылка, СсылкаПриемника);
		Если Не ЗначениеЗаполнено(СсылкаНаОперацию) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Заполним связь с операцией
		НайденныеСтроки = Приемник.МатериалыИУслуги.НайтиСтроки(Новый Структура("ОперацияРедактирование", Выборка.Ссылка));
		Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
			ДанныеСтроки.ОперацияРедактирование = СсылкаНаОперацию;
		КонецЦикла;
		НайденныеСтроки = Приемник.Трудозатраты.НайтиСтроки(Новый Структура("ОперацияРедактирование", Выборка.Ссылка));
		Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
			ДанныеСтроки.ОперацияРедактирование = СсылкаНаОперацию;
		КонецЦикла;
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

// Проверяет использование объекта
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки.
//
Процедура ПроверитьИспользованиеОбъекта(Параметры, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСсылки
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.СодержитТехнологическийПроцесс
	|	И ТаблицаПоиска.ТехнологическийПроцесс = &Объект
	|";
	
	Запрос.УстановитьПараметр("Объект", Параметры.Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЕстьСсылки = НЕ Результат.Пустой();
	
	ПоместитьВоВременноеХранилище(ЕстьСсылки, АдресХранилища);

КонецПроцедуры

// Возвращает коэффициент применения технологичекого процесса
//
// Параметры:
//  ОсновноеИзделиеКоличество - Число - количество основного изделия ресурсной спецификации.
//  ТехнологическийПроцесс - СправочникСсылка.ТехнологическиеПроцессы - технологический процесс для расчета коэффициента.
// 
// Возвращаемое значение:
//  Число - рассчитанный коэффициент.
//
Функция КоэффициентТехнологическогоПроцессаДляСпецификации(ОсновноеИзделиеКоличество, ТехнологическийПроцесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеТП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ТехнологическийПроцесс, "РассчитыватьКоэффициент,КоэффициентЧислитель,КоэффициентЗнаменатель");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеТП.РассчитыватьКоэффициент = Ложь Тогда
		
		Результат = 1;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеТП.КоэффициентЗнаменатель) Тогда
		
		Результат = ДанныеТП.КоэффициентЧислитель / ДанныеТП.КоэффициентЗнаменатель * ОсновноеИзделиеКоличество;
		
	Иначе
		
		Результат = 0;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КоэффициентТехнологическогоПроцессаРассчитывается(ТехнологическийПроцесс) Экспорт
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ТехнологическийПроцесс) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТехнологическийПроцесс, "РассчитыватьКоэффициент");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает копию технологического процесса со всеми технологическими операциями.
//
// Параметры:
//  Источник - СправочникСсылка.ТехнологическиеПроцессы - технологический процесс, который необходимо скопировать.
// 
// Возвращаемое значение:
//  СправочникСсылка.ТехнологическиеПроцессы - ссылка на созданный технологический процесс.
//
Функция СкопироватьТехнологическийПроцессСОперациями(Источник) Экспорт
	
	Ссылка = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		Ссылка = Справочники.ТехнологическиеПроцессы.ПолучитьСсылку();
		
		Объект = Источник.Скопировать();
		Объект.Наименование = Объект.Наименование + " " + НСтр("ru = '(копия)';
																|en = '(copy)'");
		
		Если НЕ ЗаполнитьПоТехнологическомуПроцессу(Объект, Источник, Ссылка) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось скопировать технологический процесс.';
									|en = 'Cannot copy technological process.'");
		КонецЕсли;
		
		УправлениеДаннымиОбИзделиях.ОбновитьКлючиСвязиОбъекта(Объект);
		
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
 		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Копирование технологического процесса';
				|en = 'Copying technological process'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Ссылка;
	
КонецФункции

// Возвращает значения реквизитов технологического процесса
// 
// Параметры:
// 	ТехнологическийПроцесс - СправочникСсылка.ТехнологическиеПроцессы
// Возвращаемое значение:
// 	Структура - см. СтруктураРеквизитовТехнологическогоПроцесса
Функция ЗначенияРеквизитовТехнологическогоПроцесса(ТехнологическийПроцесс) Экспорт
	
	Результат = СтруктураРеквизитовТехнологическогоПроцесса();
	
	Если ЗначениеЗаполнено(ТехнологическийПроцесс) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТехнологическиеПроцессы.Статус                  КАК Статус,
		|	ТехнологическиеПроцессы.ДляВидаИзделий          КАК ДляВидаИзделий,
		|	ТехнологическиеПроцессы.Подразделение           КАК Подразделение,
		|	ТехнологическиеПроцессы.РассчитыватьКоэффициент КАК РассчитыватьКоэффициент,
		|	ТехнологическиеПроцессы.КоэффициентЧислитель    КАК КоэффициентЧислитель,
		|	ТехнологическиеПроцессы.КоэффициентЗнаменатель  КАК КоэффициентЗнаменатель
		|
		|ИЗ
		|	Справочник.ТехнологическиеПроцессы КАК ТехнологическиеПроцессы
		|ГДЕ
		|	ТехнологическиеПроцессы.Ссылка = &ТехнологическийПроцесс";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ТехнологическийПроцесс", ТехнологическийПроцесс);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру реквизитов технологического процесса
//
// Возвращаемое значение:
//  Структура - содержит:
//   * Статус - ПеречислениеСсылка.СтатусыТехнологическихПроцессов
//   * ДляВидаИзделий - СправочникСсылка.ВидыНоменклатуры
//   * Подразделение - СправочникСсылка.СтруктураПредприятия
//   * РассчитыватьКоэффициент - Булево
//   * КоэффициентЧислитель - Число
//   * КоэффициентЗнаменатель - Число
Функция СтруктураРеквизитовТехнологическогоПроцесса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Статус",                  Перечисления.СтатусыТехнологическихПроцессов.ПустаяСсылка());
	Результат.Вставить("ДляВидаИзделий",          Справочники.ВидыНоменклатуры.ПустаяСсылка());
	Результат.Вставить("Подразделение",           Справочники.СтруктураПредприятия.ПустаяСсылка());
	Результат.Вставить("РассчитыватьКоэффициент", Ложь);
	Результат.Вставить("КоэффициентЧислитель",    0);
	Результат.Вставить("КоэффициентЗнаменатель",  0);
	
	Возврат Результат;
	
КонецФункции

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента,ФормаСписка,ФормаВыбора";
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТехнологическийПроцесс";
	КомандаПечати.Представление = НСтр("ru = 'Технологический процесс';
										|en = 'Technological process'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область КонструкторФормул

Функция ВыгрузитьДанныеДляКонструктораФормул(Объект, ИмяТЧ, ДанныеСтроки = Неопределено) Экспорт
	
	ОписаниеИсточников = ОписаниеИсточниковДанныхОперандов(Объект);
	
	ОписаниеИсточников["ОсновноеИзделие"].ИсточникСвойствНоменклатуры = Объект.ДляВидаИзделий;
	
	УправлениеДаннымиОбИзделиях.ДополнитьОписаниеИсточниковСоставомОперандов(
		ОписаниеИсточников, Объект, ИмяТЧ, ДанныеСтроки);
	
	Возврат ОписаниеИсточников;
	
КонецФункции

Функция ОписаниеИсточниковДанныхОперандов(Объект = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	
	// [ОсновноеИзделие]
	ПредставлениеИсточника = НСтр("ru = 'Основное изделие';
									|en = 'Main product'");
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"ОсновноеИзделие", ПредставлениеИсточника);
	
	ПредставлениеИсточника = НСтр("ru = 'Количество';
									|en = 'Quantity'");
	НовыйРеквизит = УправлениеДаннымиОбИзделиях.СоздатьОписанияРеквизитаИсточникаДанныхОперандов(
		"Количество", ОписаниеТипаЧисло, ПредставлениеИсточника);
	Описание.Реквизиты.Добавить(НовыйРеквизит);
	
	Описание.СодержитСвойстваНоменклатуры = Истина;
	
	Результат.Вставить("ОсновноеИзделие", Описание);
	
	// [МатериалыИУслуги],[Материал]
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"МатериалыИУслуги", НСтр("ru = 'Вспомогательные материалы';
								|en = 'Auxiliary materials'"));
	
	НовыйРеквизит = УправлениеДаннымиОбИзделиях.СоздатьОписанияРеквизитаИсточникаДанныхОперандов(
		"Количество", НСтр("ru = 'Количество';
							|en = 'Quantity'"));
	Описание.Реквизиты.Добавить(НовыйРеквизит);
	
	Описание.СодержитСвойстваНоменклатуры = Истина;
	Описание.Коллекция                    = Истина;
	
	Результат.Вставить("МатериалыИУслуги", Описание);
	
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"Материал", НСтр("ru = 'Материал (текущая строка)';
						|en = 'Material (current line)'"));
	
	Описание.СодержитСвойстваНоменклатуры = Истина;
	Описание.ИмяТЧ = "МатериалыИУслуги";
	
	Результат.Вставить("Материал", Описание);
	
	// [Подразделение]
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"Подразделение", НСтр("ru = 'Подразделение';
								|en = 'Business unit'"));
	
	Описание.СодержитСвойства = Истина;
	Описание.НаборСвойств     = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_СтруктураПредприятия");
	
	Результат.Вставить("Подразделение", Описание);
	
	// [Распоряжение]
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"Распоряжение", НСтр("ru = 'Заказ на производство';
							|en = 'Production order'"));
	
	Описание.СодержитСвойства = Истина;
	Описание.НаборСвойств     = УправлениеСвойствами.НаборСвойствПоИмени("Документ_ЗаказНаПроизводство2_2");
	
	Результат.Вставить("Распоряжение", Описание);
	
	// [НаправлениеДеятельности]
	Если ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат") Тогда
		
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов("НаправлениеДеятельности", НСтр("ru = 'Направление деятельности';
																														|en = 'Line of business'"));
		
		Описание.СодержитСвойства = Истина;
		Описание.НаборСвойств     = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_НаправленияДеятельности");
		
		Результат.Вставить("НаправлениеДеятельности", Описание);
		
	КонецЕсли;
	
	// [Спецификация]
	ПредставлениеИсточника = НСтр("ru = 'Спецификация';
									|en = 'Bill of materials'");
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"Спецификация", ПредставлениеИсточника);
		
	Описание.СодержитСвойства = Истина;
	Описание.НаборСвойств     = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_РесурсныеСпецификации");
	
	Результат.Вставить("Спецификация", Описание);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СписокТехнологическихПроцессов

// Устанавливает условное оформление списка технологических процессов
// 
// Параметры:
// 	УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление списка
Процедура УстановитьУсловноеОформлениеСпискаТехнологическихПроцессов(УсловноеОформление) Экспорт
	
	// Оформление технологического процесса в разработке
	Элемент = УсловноеОформление.Элементы.Добавить();

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыТехнологическихПроцессов.ВРазработке;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Оформление закрытого технологического процесса
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыТехнологическихПроцессов.Закрыт;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТехнологическийПроцесс") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТехнологическийПроцесс",
			НСтр("ru = 'Технологический процесс';
				|en = 'Technological process'"),
			СформироватьПечатнуюФормуТехнологическогоПроцесса(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(
		ПараметрыВывода.ПараметрыОтправки,
		МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Производственная операция

Функция СформироватьПечатнуюФормуТехнологическогоПроцесса(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ТехнологическиеПроцессы.ПечатнаяФорма");
	ПервыйДокумент = Истина;
	
	ДанныеДляПечати = ДанныеДляПечатиТехнологическийПроцесс(МассивОбъектов);
	
	ВыборкаШапка = ДанныеДляПечати.ВыборкаШапка;
	
	Пока ВыборкаШапка.Следующий() Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
	
		Область.Параметры.ТекстЗаголовка = СтрШаблон(
			НСтр("ru = 'Технологический процесс %1';
				|en = '%1 technological process'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеДляПечати.ВыборкаШапка.Представление);
		Область.Параметры.Ссылка = ВыборкаШапка.Ссылка;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
			ТабличныйДокумент,
			Макет,
			Область,
			ВыборкаШапка.Ссылка);
	
		ТабличныйДокумент.Вывести(Область);
		
		// Шапка
		Область = Макет.ПолучитьОбласть("Шапка");
		
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		Область.Параметры.Заполнить(ВыборкаШапка);
		
		ТабличныйДокумент.Вывести(Область);
		
		// Операции
		ПечатнаяФормаВывестиОперации(Макет, ТабличныйДокумент, ВыборкаШапка, ДанныеДляПечати.ВыборкаОперации);
		
		// Материалы
		ПечатнаяФормаВывестиМатериалы(Макет, ТабличныйДокумент, ВыборкаШапка, ДанныеДляПечати.ВыборкаМатериалы);
		
		// Трудозатраты
		ПечатнаяФормаВывестиТрудозатраты(Макет, ТабличныйДокумент, ВыборкаШапка, ДанныеДляПечати.ВыборкаТрудозатраты);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ВыборкаШапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеДляПечатиТехнологическийПроцесс(Ссылки)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Процессы.Ссылка                          КАК Ссылка,
		|	Процессы.Подразделение                   КАК Подразделение,
		|	Процессы.Подразделение.Представление     КАК ПодразделениеПредставление,
		|	Процессы.Представление                   КАК Представление,
		|	Процессы.Ответственный                   КАК Ответственный,
		|	Процессы.Ответственный.Представление     КАК ОтветственныйПредставление,
		|	Процессы.ДляВидаИзделий                  КАК ДляВидаИзделий,
		|	Процессы.Описание                        КАК Описание
		|ИЗ
		|	Справочник.ТехнологическиеПроцессы КАК Процессы
		|ГДЕ
		|	Процессы.Ссылка В(&Ссылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Материалы.Ссылка                            КАК Ссылка,
		|	Материалы.Номенклатура                      КАК Номенклатура,
		|	Материалы.Номенклатура.Код                  КАК Код,
		|	Материалы.Номенклатура.Артикул              КАК Артикул,
		|	Материалы.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
		|	Материалы.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	&ТекстЗапросаЕдиницаИзмеренияМатериалы      КАК ЕдиницаИзмерения,
		|	Материалы.КоличествоУпаковок                КАК Количество
		|ИЗ
		|	Справочник.ТехнологическиеПроцессы.МатериалыИУслуги КАК Материалы
		|ГДЕ
		|	Материалы.Ссылка В(&Ссылки)
		|	И Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) // Отображается только заполненная номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Операции.Владелец                                                     КАК Ссылка,
		|	Операции.Наименование                                                 КАК НаименованиеОперации,
		|	Операции.НомерОперации                                                КАК НомерОперации,
		|	ВЫБОР
		|		КОГДА Операции.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
		|			ТОГДА ВЫРАЗИТЬ(Операции.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра
		|		ИНАЧЕ Операции.РабочийЦентр
		|	КОНЕЦ                                                                 КАК ВидРабочегоЦентра,
		|	&ТекстРеквизитыРасчетаВремениВыполненияОперации
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК Операции
		|
		|ГДЕ
		|	Операции.Владелец В(&Ссылки)
		|	И НЕ Операции.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерОперации
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Трудозатраты.Ссылка                    КАК Ссылка,
		|	Трудозатраты.ВидРабот                  КАК ВидРабот,
		|	Трудозатраты.ВидРабот.ЕдиницаИзмерения КАК ВидРаботЕдИзм,
		|	Трудозатраты.Количество                КАК Количество,
		|	Трудозатраты.Операция                  КАК Операция
		|ИЗ
		|	Справочник.ТехнологическиеПроцессы.Трудозатраты КАК Трудозатраты
		|ГДЕ
		|	Трудозатраты.Ссылка В(&Ссылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ ПО
		|	Ссылка
		|";
	
	ТекстЕдИзм = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
		"Наименование", "Материалы.Упаковка", "Материалы.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаЕдиницаИзмеренияМатериалы", ТекстЕдИзм);
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ТекстРеквизитыРасчетаВремениВыполненияОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыРасчетаВремениВыполненияОперации("Операции"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("ВыборкаШапка",        МассивРезультатов[0].Выбрать());
	ДанныеДляПечати.Вставить("ВыборкаМатериалы",    МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	ДанныеДляПечати.Вставить("ВыборкаОперации",     МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	ДанныеДляПечати.Вставить("ВыборкаТрудозатраты", МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Возврат ДанныеДляПечати;
	
КонецФункции

// Параметры:
// 	Макет - МакетОформленияКомпоновкиДанных, ГеографическаяСхема, СхемаКомпоновкиДанных, ГрафическаяСхема, ОболочкаHTMLДокумента, ДвоичныеДанные, ТабличныйДокумент, ОболочкаActiveDocument, ТекстовыйДокумент - Описание
// 	ТабличныйДокумент - ТабличныйДокумент - Описание
// 	ВыборкаШапка -  ВыборкаИзРезультатаЗапроса -
// 	ВыборкаМатериалы -  ВыборкаИзРезультатаЗапроса -
Процедура ПечатнаяФормаВывестиМатериалы(Макет, ТабличныйДокумент, ВыборкаШапка, ВыборкаМатериалы)
	
	Если НЕ ВыборкаМатериалы.НайтиСледующий(Новый Структура("Ссылка", ВыборкаШапка.Ссылка)) Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
		
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицыМатериалы"));
			
	Если ВыводитьКоды Тогда
	   	
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалы_СКодом");
		ОбластьШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыМатериалы_СКодом"); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
			
	Иначе
				
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалы_БезКода");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыМатериалы_БезКода");  // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	НомерСтроки = 1;
	Выборка = ВыборкаМатериалы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
			
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.Артикул = Выборка[ИмяКолонкиКодов];
		КонецЕсли;
						
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
		ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Выборка.НоменклатураНаименованиеПолное,
			Выборка.ХарактеристикаНаименованиеПолное,
			,
			,
			ДопПараметрыПредставлениеНоменклатуры);
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалМатериалы"));
	
КонецПроцедуры

// Параметры:
// 	Макет - МакетОформленияКомпоновкиДанных, ГеографическаяСхема, СхемаКомпоновкиДанных, ГрафическаяСхема, ОболочкаHTMLДокумента, ДвоичныеДанные, ТабличныйДокумент, ОболочкаActiveDocument, ТекстовыйДокумент - Описание
// 	ТабличныйДокумент - ТабличныйДокумент - Описание
// 	ВыборкаШапка -  ВыборкаИзРезультатаЗапроса -
// 	ВыборкаОперации -  ВыборкаИзРезультатаЗапроса -
Процедура ПечатнаяФормаВывестиОперации(Макет, ТабличныйДокумент, ВыборкаШапка, ВыборкаОперации)
	
	Если НЕ ВыборкаОперации.НайтиСледующий(Новый Структура("Ссылка", ВыборкаШапка.Ссылка)) Тогда
		Возврат;
	КонецЕсли;
			
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицыОперации"));
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыОперации"));
	
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыОперация");
	
	Выборка = ВыборкаОперации.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
			
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
			
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалОперации"));
	
КонецПроцедуры

// Параметры:
// 	Макет - МакетОформленияКомпоновкиДанных, ГеографическаяСхема, СхемаКомпоновкиДанных, ГрафическаяСхема, ОболочкаHTMLДокумента, ДвоичныеДанные, ТабличныйДокумент, ОболочкаActiveDocument, ТекстовыйДокумент - Описание
// 	ТабличныйДокумент - ТабличныйДокумент - Описание
// 	ВыборкаШапка -  ВыборкаИзРезультатаЗапроса -
// 	ВыборкаТрудозатраты -  ВыборкаИзРезультатаЗапроса -
Процедура ПечатнаяФормаВывестиТрудозатраты(Макет, ТабличныйДокумент, ВыборкаШапка, ВыборкаТрудозатраты)
	
	Если НЕ ВыборкаТрудозатраты.НайтиСледующий(Новый Структура("Ссылка", ВыборкаШапка.Ссылка)) Тогда
		Возврат;
	КонецЕсли;
			
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицыТрудозатраты"));
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыТрудозатраты"));
	
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыТрудозатраты");
	
	НомерСтроки = 1;
	Выборка = ВыборкаТрудозатраты.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
			
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалТрудозатраты"));
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ОбработатьСмещениеФормул(Таблицы, КоличествоСмещение)
	
	Если КоличествоСмещение = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникОперандов = "МатериалыИУслуги";
	
	ТаблицаКорректировкиОперандов = Новый ТаблицаЗначений();
	ТаблицаКорректировкиОперандов.Колонки.Добавить("ОперандСтарый");
	ТаблицаКорректировкиОперандов.Колонки.Добавить("НомерНовый");
	
	ОтборОперандов = Новый Структура("ОперандСтарый");
	
	Для каждого ИмяТаблицы Из СтрРазделить("МатериалыИУслуги,Трудозатраты", ",") Цикл
		
		Таблица = Неопределено; // ТаблицаЗначений
		Если НЕ Таблицы.Свойство(ИмяТаблицы, Таблица) Тогда
			Возврат;
		КонецЕсли;
		
		Для Индекс = 0 По Таблица.Количество() - 1 Цикл
			
			Строка = Таблица[Индекс];
			
			КоличествоСмещение = КоличествоСмещение + 1;
			
			НомерСтрокиТекущий = Строка.НомерСтроки;
			НомерСтрокиНовый   = КоличествоСмещение;
			
			Если ИмяТаблицы = ИсточникОперандов Тогда
				НоваяСтрока = ТаблицаКорректировкиОперандов.Добавить();
				НоваяСтрока.ОперандСтарый = СтрШаблон("%1[%2].", ИсточникОперандов, Формат(НомерСтрокиТекущий,"ЧН=; ЧГ="));
				НоваяСтрока.НомерНовый    = Формат(НомерСтрокиНовый,"ЧН=; ЧГ=");
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) Тогда
				
				Операнды = Новый Массив;
				
				МаркерОткрытия = СтрНайти(Строка.АлгоритмРасчетаКоличества, ИсточникОперандов,,1);
				Пока МаркерОткрытия > 0 Цикл
					МаркерЗакрытия = СтрНайти(Строка.АлгоритмРасчетаКоличества, "].",,МаркерОткрытия);
					Если МаркерЗакрытия > 0 Тогда
						Операнд = Сред(Строка.АлгоритмРасчетаКоличества, МаркерОткрытия, МаркерЗакрытия-МаркерОткрытия+2);
						Если Операнды.Найти(Операнд) = Неопределено Тогда
							Операнды.Добавить(Операнд);
						КонецЕсли;
					КонецЕсли;
					МаркерОткрытия = СтрНайти(Строка.АлгоритмРасчетаКоличества, ИсточникОперандов,,МаркерЗакрытия);
				КонецЦикла;
				
				Для каждого Операнд Из Операнды Цикл
					ОтборОперандов.ОперандСтарый = Операнд;
					НайденныеСтроки = ТаблицаКорректировкиОперандов.НайтиСтроки(ОтборОперандов);
					Если НайденныеСтроки.ВГраница() <> -1 Тогда
						НомерЗамены = НайденныеСтроки[0].НомерНовый;
					Иначе
						НомерЗамены = "0";
					КонецЕсли;
					Строка.АлгоритмРасчетаКоличества = СтрЗаменить(Строка.АлгоритмРасчетаКоличества,
						Операнд, СтрШаблон("%1_[%2].", ИсточникОперандов, НомерЗамены));
				КонецЦикла;
				
				Строка.АлгоритмРасчетаКоличества = СтрЗаменить(Строка.АлгоритмРасчетаКоличества, ИсточникОперандов+"_", ИсточникОперандов);
				
			КонецЕсли;
			
			Строка.НомерСтроки = НомерСтрокиНовый;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьАвтовыборНоменклатуры(ТабличнаяЧасть) Экспорт
	
	Результат = Ложь;
	
	Для каждого Строка Из ТабличнаяЧасть Цикл
		
		Если (
				ЗначениеЗаполнено(Строка.СпособАвтовыбораНоменклатуры)
				И Строка.СпособАвтовыбораНоменклатуры <> Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ
			)
			ИЛИ
			(
				ЗначениеЗаполнено(Строка.СпособАвтовыбораХарактеристики)
				И Строка.СпособАвтовыбораХарактеристики <> Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ
			) Тогда
			
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	Список - ДинамическийСписок - список технологических процессов
// 	Номенклатура - СправочникСсылка.Номенклатура - значение отбора
Процедура УстановитьОтборПоНоменклатуреВСпискеТехнологическихПроцессов(Список, Номенклатура) Экспорт
	
	ТекстыЗапроса = "";
	
	// Материал
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ТекстыЗапроса = "
		|ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТехнологическиеПроцессы.МатериалыИУслуги КАК Т
		|ГДЕ
		|	Т.Номенклатура = &Номенклатура";
		
	КонецЕсли;
	
	СписокОтбора = Новый СписокЗначений;
	Использовать = (ТекстыЗапроса <> "");
	
	Если Использовать Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстыЗапроса;
		Запрос.УстановитьПараметр("Номенклатура",    Номенклатура);
		
		СписокОтбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
		
	ОтборПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
		НСтр("ru = 'Отбор по номенклатуре';
			|en = 'Filter by items'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ОтборПоНоменклатуре,
			"Ссылка",
			ВидСравненияКомпоновкиДанных.ВСписке,
			СписокОтбора,
			,
			Использовать);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли