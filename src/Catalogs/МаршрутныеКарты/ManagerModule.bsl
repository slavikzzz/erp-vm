#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	НеРедактируемыеРеквизиты.Добавить("ВыходныеИзделия.Операция");
	НеРедактируемыеРеквизиты.Добавить("ВозвратныеОтходы.Операция");
	НеРедактируемыеРеквизиты.Добавить("МатериалыИУслуги.Операция");
	НеРедактируемыеРеквизиты.Добавить("Трудозатраты.Операция");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента,ФормаСписка,ФормаВыбора";
	КонецЕсли;
	
КонецПроцедуры

// Функция - конструктор структуры для выборки данных маршрутной карты.
//
// Возвращаемое значение:
//  Структура - структура с параметрами выборки данных маршрутной карты.
//
Функция ДанныеПоНоменклатуре() Экспорт
	
	ДанныеПоНоменклатуре = Новый Структура;
	
	ДанныеПоНоменклатуре.Вставить("Распоряжение"); // заказ на производство
	
	ДанныеПоНоменклатуре.Вставить("НаправлениеДеятельности");
	
	ДанныеПоНоменклатуре.Вставить("Номенклатура");
	ДанныеПоНоменклатуре.Вставить("Характеристика");
	
	ДанныеПоНоменклатуре.Вставить("Количество", 0); // количество основного изделия
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Возвращает данные маршрутной карты с учетом вложенных маршрутов
//
// Параметры:
//  МаршрутнаяКарта			- СправочникСсылка.МаршрутныеКарты	- Маршрутная карта данные которой нужно получить
//  КоличествоРезультата	- Число								- Количество результата по маршрутной карте
//  Номенклатура			- СправочникСсылка.Номенклатура		- Изделие
//  Характеристика			- СправочникСсылка.ХарактеристикиНоменклатуры	- Характеристика изделия
//  СписокДанных			- Строка	- через запятую перечисляются данные, которые нужно получить: ВыходныеИзделия,Материалы,Трудозатраты,Операции.
//  ВложенныеМаршруты		- Булево	- определяет необходимость включения в результат вложенных маршрутов
//
// Возвращаемое значение:
//   Структура - содержит данные маршрутной карты: операции, выходные изделия, материалы, трудозатраты.
//
Функция ДанныеМаршрутнойКарты(МаршрутнаяКарта, КоличествоРезультата, Номенклатура, Характеристика, Знач СписокДанных = "") Экспорт
	
	Если СписокДанных <> "" Тогда
		СтруктураДанных = Новый Структура(СписокДанных);
	Иначе
		СтруктураДанных = Новый Структура("ВыходныеИзделия,ВозвратныеОтходы,Материалы,Трудозатраты,Операции,ВспомогательныеРабочиеЦентры");
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Операции") Тогда
		СтруктураДанных.Вставить("Операции", Справочники.ТехнологическиеОперации.ТаблицаОперацииКонструктор());
	КонецЕсли;
	
	СтруктураСвязей = ИнициализироватьСтруктуруСвязей();
	ДобавитьДанныеМаршрутнойКартыРекурсивно(
				МаршрутнаяКарта,
				КоличествоРезультата,
				Номенклатура,
				Характеристика,
				СтруктураСвязей,
				СтруктураДанных);
	
	Если СтруктураДанных.Свойство("Операции") Тогда
		Справочники.ТехнологическиеОперации.ЗаполнитьПорядокОпераций(СтруктураДанных.Операции);
	КонецЕсли; 
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает данные маршрутной карты с отбором по заданной технологической операции.
//
// Параметры:
//  Операция			         - СправочникСсылка.ТехнологическиеОперации	 - Операция маршрутной карты, данные по которой необходимо получить.
//  КоличествоОпераций           - Число									 - Количество операций.
//  КоэффициентМаршрутнойКарты   - Число									 - Коэффициент маршрутной карты.
//  ДанныеПоНоменклатуре         - см. ДанныеПоНоменклатуре
// 
// Возвращаемое значение:
//  Структура - содержит данные маршрутной карты: операции, выходные изделия, материалы, трудозатраты.
//
Функция ДанныеОперацииМаршрутнойКарты(Операция, КоличествоОпераций, КоэффициентМаршрутнойКарты, ДанныеПоНоменклатуре) Экспорт
	
	РеквизитыОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Операция, "Владелец, Количество");
	
	МаршрутнаяКарта = РеквизитыОперации["Владелец"];
	
	Запрос = Новый Запрос;
	ИндексыТаблиц = Новый Соответствие;
	
	ПодготовитьТекстЗапросаДляВыборкиДанныхОперации(Запрос, ИндексыТаблиц);
	
	Запрос.УстановитьПараметр("МаршрутнаяКарта",            МаршрутнаяКарта);
	Запрос.УстановитьПараметр("Номенклатура",               ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",             ДанныеПоНоменклатуре.Характеристика);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",    ДанныеПоНоменклатуре.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("КоличествоРезультата",       КоэффициентМаршрутнойКарты);
	Запрос.УстановитьПараметр("ОперацияРодитель",           Неопределено);
	Запрос.УстановитьПараметр("КлючСвязиРодитель",          Неопределено);
	Запрос.УстановитьПараметр("КлючСвязиВложенныйМаршрут",  Неопределено);
	Запрос.УстановитьПараметр("ИспользоватьПараметризацию", ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций"));
	Запрос.УстановитьПараметр("Операция",                   Операция);
	Запрос.УстановитьПараметр("КоэффициентТекущейОперации", КоличествоОпераций / (РеквизитыОперации["Количество"] * КоэффициентМаршрутнойКарты));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанных = Новый Структура;
	Отбор = Новый Структура("Операция", Операция);
	
	Для каждого КлючИЗначение Из ИндексыТаблиц Цикл
		
		Таблица = РезультатЗапроса[КлючИЗначение.Значение].Выгрузить();
		
		СтруктураДанных.Вставить(КлючИЗначение.Ключ, Таблица);
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций") Тогда
		
		ПараметрыАвтовыбора = ПолучитьПараметрыАвтовыбора(
			МаршрутнаяКарта,
			ДанныеПоНоменклатуре);
		
		Для каждого ИмяТаблицы Из СтрРазделить("ВыходныеИзделия,ВозвратныеОтходы,Материалы", ",") Цикл
			
			Если СтруктураДанных.Свойство(ИмяТаблицы, Таблица) Тогда
				УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораНоменклатуры(
						Таблица,
						ПараметрыАвтовыбора);
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасчетаПоФормулам = ПолучитьПараметрыРасчетаПоФормулам(
			МаршрутнаяКарта,
			КоличествоОпераций,
			ДанныеПоНоменклатуре);
		
		ОбработатьРасчетКоличестваПоФормулам(ПараметрыРасчетаПоФормулам, СтруктураДанных);
	
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураДанных Цикл
		
		СтруктураДанных.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.Скопировать(Отбор));
		
	КонецЦикла;
	
	РаспаковатьСоставНаборов(СтруктураДанных, "Материалы");
	
	Если СтруктураДанных.Операции.Количество() > 0 Тогда
		Для каждого Колонка Из СтруктураДанных.Операции.Колонки Цикл
			СтруктураДанных.Вставить(Колонка.Имя, СтруктураДанных.Операции[0][Колонка.Имя]);
		КонецЦикла;
	Иначе
		Для каждого Колонка Из СтруктураДанных.Операции.Колонки Цикл
			СтруктураДанных.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение(0));
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

//++ Устарело_Производство21

// Возвращает данные маршрутной карты для печати с учетом вложенных маршрутов
//
// Параметры:
//  МаршрутнаяКарта			- СправочникСсылка.МаршрутныеКарты	- Маршрутная карта данные которой нужно получить
//  КоличествоРезультата	- Число								- Количество результата по маршрутной карте
//  Номенклатура			- СправочникСсылка.Номенклатура		- Изделие
//  Характеристика			- СправочникСсылка.ХарактеристикиНоменклатуры	- Характеристика изделия
//  СписокДанных			- Строка	- через запятую перечисляются данные, которые нужно получить: ВыходныеИзделия,Материалы,Операции.
//
// Возвращаемое значение:
//   Структура - содержит данные маршрутной карты: операции, выходные изделия, материалы.
//
Функция ДанныеМаршрутнойКартыДляПечати(МаршрутнаяКарта, КоличествоРезультата, Номенклатура, Характеристика, Знач СписокДанных = "") Экспорт
	
	Если СписокДанных <> "" Тогда
		СтруктураДанных = Новый Структура(СписокДанных);
	Иначе
		СтруктураДанных = Новый Структура("ВыходныеИзделия,Материалы,Операции");
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Операции") Тогда
		СтруктураДанных.Вставить("Операции", Справочники.ТехнологическиеОперации.ТаблицаОперацииКонструктор());
	КонецЕсли; 
	
	СтруктураСвязей = ИнициализироватьСтруктуруСвязей();
	ДобавитьДанныеМаршрутнойКартыДляПечатиРекурсивно(
				МаршрутнаяКарта, 
				КоличествоРезультата, 
				Номенклатура, 
				Характеристика, 
				СтруктураСвязей, 
				СтруктураДанных);
	
	Если СтруктураДанных.Свойство("Операции") Тогда
		
		Справочники.ТехнологическиеОперации.ЗаполнитьПорядокОпераций(СтруктураДанных.Операции);
		
		Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
			ЗаполнитьНомерОперацииВСвязаннойТаблице(СтруктураДанных.ВыходныеИзделия, СтруктураДанных.Операции);
		КонецЕсли; 
		Если СтруктураДанных.Свойство("Материалы") Тогда
			ЗаполнитьНомерОперацииВСвязаннойТаблице(СтруктураДанных.Материалы, СтруктураДанных.Операции);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СтруктураДанных;
	
КонецФункции

//-- Устарело_Производство21

// Проверяет последовательность операций
//
// Параметры:
//  МаршрутнаяКарта		- СправочникСсылка.МаршрутныеКарты - маршрутная карта, операции которой требуется проверить
//  Отказ				- Булево - признак отмены текущего действия.
//
// Возвращаемое значение:
//   Булево   - истина, если последовательность операций правильная.
//
Функция ПоследовательностьОперацийПравильная(МаршрутнаяКарта, Отказ = Ложь) Экспорт
	
	СтруктураСообщений = РедакторПроизводственногоПроцесса.СтруктураПроверокПоследовательностиОпераций();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяСправочникаОпераций",     "ТехнологическиеОперации");
	СтруктураПараметров.Вставить("ПолеНомерОперации",          "НомерОперации");
	СтруктураПараметров.Вставить("ПолеНомерСледующейОперации", "НомерСледующейОперации");
	
	ПоследовательностьПравильная = РедакторПроизводственногоПроцесса.ПоследовательностьОперацийПравильная(
		МаршрутнаяКарта, СтруктураПараметров, СтруктураСообщений, Отказ);
	
	Возврат ПоследовательностьПравильная;
	
КонецФункции

// Заполняет маршрутную карту по другой маршрутной карте
//
// Параметры:
//  Приемник - СправочникОбъект.МаршрутныеКарты, ДанныеФормыСтруктура - маршрутная карта
//		в которую будут скопированы операции.
//  Источник - СправочникСсылка.МаршрутныеКарты - маршрутная карта операции которой нужно скопировать.
//	СсылкаПриемника - СправочникСсылка.МаршрутныеКарты - ссылка на заполняемую маршрутную карту.
//
// Возвращаемое значение:
//   Булево   - истина, если копирование выполнено успешно.
//
Функция ЗаполнитьПоМаршрутнойКарте(Приемник, Источник, СсылкаПриемника) Экспорт

	ИсточникОбъект = Источник.ПолучитьОбъект();
	Если Приемник.ИспользоватьВыходныеИзделия Тогда
		Приемник.ВыходныеИзделия.Загрузить(ИсточникОбъект.ВыходныеИзделия.Выгрузить());
		Приемник.ВозвратныеОтходы.Загрузить(ИсточникОбъект.ВозвратныеОтходы.Выгрузить());
	КонецЕсли;
	Если Приемник.ИспользоватьМатериалы Тогда
		Приемник.МатериалыИУслуги.Загрузить(ИсточникОбъект.МатериалыИУслуги.Выгрузить());
	КонецЕсли; 
	Если Приемник.ИспользоватьТрудозатраты Тогда
		Приемник.Трудозатраты.Загрузить(ИсточникОбъект.Трудозатраты.Выгрузить());
	КонецЕсли; 
	
	Если Приемник.ИспользоватьОперации Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СправочникТехнологическиеОперации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК СправочникТехнологическиеОперации
		|ГДЕ
		|	СправочникТехнологическиеОперации.Владелец = &Источник
		|	И НЕ СправочникТехнологическиеОперации.ПометкаУдаления");
		Запрос.УстановитьПараметр("Источник", Источник);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СсылкаНаОперацию = Справочники.ТехнологическиеОперации.СкопироватьТехнологическуюОперацию(Выборка.Ссылка, СсылкаПриемника);
			Если Не ЗначениеЗаполнено(СсылкаНаОперацию) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// Заполним связь с операцией
			Если Приемник.ИспользоватьВыходныеИзделия Тогда
				НайденныеСтроки = Приемник.ВыходныеИзделия.НайтиСтроки(Новый Структура("ОперацияРедактирование", Выборка.Ссылка));
				Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
					ДанныеСтроки.ОперацияРедактирование = СсылкаНаОперацию;
				КонецЦикла;
				НайденныеСтроки = Приемник.ВозвратныеОтходы.НайтиСтроки(Новый Структура("ОперацияРедактирование", Выборка.Ссылка));
				Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
					ДанныеСтроки.ОперацияРедактирование = СсылкаНаОперацию;
				КонецЦикла;
			КонецЕсли; 
			Если Приемник.ИспользоватьМатериалы Тогда
				НайденныеСтроки = Приемник.МатериалыИУслуги.НайтиСтроки(Новый Структура("ОперацияРедактирование", Выборка.Ссылка));
				Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
					ДанныеСтроки.ОперацияРедактирование = СсылкаНаОперацию;
				КонецЦикла;
			КонецЕсли; 
			Если Приемник.ИспользоватьТрудозатраты Тогда
				НайденныеСтроки = Приемник.Трудозатраты.НайтиСтроки(Новый Структура("ОперацияРедактирование", Выборка.Ссылка));
				Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
					ДанныеСтроки.ОперацияРедактирование = СсылкаНаОперацию;
				КонецЦикла;
			КонецЕсли; 
			
		КонецЦикла;
	Иначе
		Для каждого ДанныеСтроки Из Приемник.ВыходныеИзделия Цикл
			ДанныеСтроки.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
			ДанныеСтроки.ОперацияРедактирование = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		КонецЦикла;
		Для каждого ДанныеСтроки Из Приемник.ВозвратныеОтходы Цикл
			ДанныеСтроки.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
			ДанныеСтроки.ОперацияРедактирование = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		КонецЦикла;
		Для каждого ДанныеСтроки Из Приемник.МатериалыИУслуги Цикл
			ДанныеСтроки.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
			ДанныеСтроки.ОперацияРедактирование = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		КонецЦикла;
		Для каждого ДанныеСтроки Из Приемник.Трудозатраты Цикл
			ДанныеСтроки.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
			ДанныеСтроки.ОперацияРедактирование = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет использование объекта
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки.
//
Процедура ПроверитьИспользованиеОбъекта(Параметры, АдресХранилища) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСсылки
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.МаршрутнаяКарта = &Объект
	//++ НЕ УТКА
	|
	//++ Устарело_Производство21
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.МаршрутнаяКарта = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.МаршрутнаяКарта = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Операции КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Операция = &Объект
	//-- Устарело_Производство21
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.МаршрутнаяКарта = &Объект
	//-- НЕ УТКА
	|";
	
	Запрос.УстановитьПараметр("Объект", Параметры.Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЕстьСсылки = НЕ Результат.Пустой();
	
	ПоместитьВоВременноеХранилище(ЕстьСсылки, АдресХранилища);

КонецПроцедуры

// Рассчитывает коэффициент применения маршрутной карты в ресурсной спецификации.
//
// Параметры:
//  ДанныеОсновногоИзделияСпецификации - Структура - данные основного выходного изделия ресурсной спецификации.
//  МаршрутнаяКарта - СправочникСсылка.МаршрутныеКарты - маршрутная карта для расчета коэффициента.
// 
// Возвращаемое значение:
//  Число - рассчитанный коэффициент.
//
Функция КоэффициентМаршрутнойКартыДляСпецификации(ДанныеОсновногоИзделияСпецификации, МаршрутнаяКарта) Экспорт
	
	ДанныеМК = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		МаршрутнаяКарта, "КоэффициентЧислитель, КоэффициентЗнаменатель");
	
	Если ЗначениеЗаполнено(ДанныеМК.КоэффициентЗнаменатель) Тогда
		
		Результат = ДанныеМК.КоэффициентЧислитель/ДанныеМК.КоэффициентЗнаменатель
			* ДанныеОсновногоИзделияСпецификации.Количество;
		
	Иначе
		
		Результат = 0;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает копию маршрутной карты со всеми технологическими операциями.
//
// Параметры:
//  Источник - СправочникСсылка.МаршрутныеКарты - маршрутная карта, которую необходимо скопировать.
// 
// Возвращаемое значение:
//  СправочникСсылка.МаршрутныеКарты - ссылка на созданную маршрутную карту.
//
Функция СкопироватьМаршрутнуюКартуСОперациями(Источник) Экспорт
	
	Ссылка = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		Ссылка = Справочники.МаршрутныеКарты.ПолучитьСсылку();
		
		Объект = Источник.Скопировать();
		Объект.Наименование = Объект.Наименование + " " + НСтр("ru = '(копия)';
																|en = '(copy)'");
		
		Если НЕ ЗаполнитьПоМаршрутнойКарте(Объект, Источник, Ссылка) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось скопировать маршрутную карту.';
									|en = 'Cannot copy the route sheet.'");
		КонецЕсли;
		
		УправлениеДаннымиОбИзделиях.ОбновитьКлючиСвязиОбъекта(Объект);
		
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
 		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Копирование маршрутной карты';
				|en = 'Copy route sheet'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Ссылка;
	
КонецФункции

// Возвращает значения реквизитов маршрутной карты
// 
// Параметры:
// 	МаршрутнаяКарта - СправочникСсылка.МаршрутныеКарты
// Возвращаемое значение:
// 	Структура - см. СтруктураРеквизитовМаршрутнойКарты()
Функция ЗначенияРеквизитовМаршрутнойКарты(МаршрутнаяКарта) Экспорт
	
	МаршрутныеКарты = Новый Массив;
	МаршрутныеКарты.Добавить(МаршрутнаяКарта);
	Результат = ЗначенияРеквизитовМаршрутныхКарт(МаршрутныеКарты);
	Возврат Результат[МаршрутнаяКарта];
	
КонецФункции

Функция ЗначенияРеквизитовМаршрутныхКарт(МаршрутныеКарты) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МаршрутныеКарты.Ссылка                                    КАК Ссылка,
	|	МаршрутныеКарты.Наименование                              КАК Наименование,
	|	МаршрутныеКарты.Статус                                    КАК Статус,
	|	МаршрутныеКарты.НачалоДействия                            КАК НачалоДействия,
	|	МаршрутныеКарты.КонецДействия                             КАК КонецДействия,
	|	МаршрутныеКарты.МаксимальноеКоличествоЕдиницПартийИзделия КАК МаксимальноеКоличествоЕдиницПартийИзделия,
	|	МаршрутныеКарты.РассчитыватьКоэффициент                   КАК РассчитыватьКоэффициент
	|ИЗ
	|	Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|ГДЕ
	|	МаршрутныеКарты.Ссылка В (&МаршрутныеКарты)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МаршрутныеКарты", МаршрутныеКарты);
	
	Результат = Новый Соответствие();
	
	Для каждого Ссылка Из МаршрутныеКарты Цикл
		Результат.Вставить(Ссылка, СтруктураРеквизитовМаршрутнойКарты());
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Результат[Выборка.Ссылка], Выборка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру реквизитов маршрутной карты.
//
// Возвращаемое значение:
//  Структура - содержит:
//   * МаксимальноеКоличествоЕдиницПартийИзделия - Число
//   * РассчитыватьКоэффициент - Булево
Функция СтруктураРеквизитовМаршрутнойКарты()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Ссылка", Справочники.МаршрутныеКарты.ПустаяСсылка());
	Результат.Вставить("Наименование", "");
	Результат.Вставить("Статус", Перечисления.СтатусыМаршрутныхКарт.ПустаяСсылка());
	Результат.Вставить("НачалоДействия", Дата(1,1,1));
	Результат.Вставить("КонецДействия", Дата(1,1,1));
	Результат.Вставить("МаксимальноеКоличествоЕдиницПартийИзделия", 0);
	Результат.Вставить("РассчитыватьКоэффициент", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	УправлениеДаннымиОбИзделияхВызовСервера.МаршрутныеКартыОбработкаПолученияДанныхВыбора(
				ДанныеВыбора, 
				Параметры, 
				СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" И Параметры.Свойство("ВыборДействующихМаршрутныхКарт") Тогда
		ВыбраннаяФорма = "ВыборДействующихМаршрутныхКарт";
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

#КонецОбласти

#Область РасчетПоФормулам

#Область ДанныеДляРасчета

Функция ДанныеДляРасчетаПоФормулам(НаборДанных, ПараметрыРасчетаПоФормулам, КешированныеЗначения = Неопределено)
	
	Перем ДанныеДляРасчета;
	
	ОписаниеИсточников = ОписаниеИсточниковДанныхОперандов();
	
#Область ПараметрыДляРасчета
	ПараметрыДляРасчета = УправлениеДаннымиОбИзделиях.ПараметрыДляРасчетаПоФормулам(ОписаниеИсточников, НаборДанных);
	Если Не ЗначениеЗаполнено(ПараметрыДляРасчета) Тогда
		Возврат ДанныеДляРасчета;
	КонецЕсли;
#КонецОбласти

#Область ДанныеМаршрутнойКарты
	ПереченьДанных = Новый Массив;
	СтруктураДанных = Новый Структура("ВыходныеИзделия,ВозвратныеОтходы,МатериалыИУслуги");
	
	Если ПараметрыДляРасчета.Найти("ОсновноеИзделие", "Ключ") <> Неопределено
		ИЛИ ПараметрыДляРасчета.Найти("ВыходныеИзделия", "Ключ") <> Неопределено Тогда
		ЕстьВыходныеИзделия = КешированныеЗначения <> Неопределено 
			И КешированныеЗначения.Свойство("ВыходныеИзделия", СтруктураДанных.ВыходныеИзделия);
		Если Не ЕстьВыходныеИзделия Тогда
			ПереченьДанных.Добавить("ВыходныеИзделия");
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыДляРасчета.Найти("МатериалыИУслуги", "Ключ") <> Неопределено Тогда
		ЕстьМатериалыИУслуги = КешированныеЗначения <> Неопределено
			И КешированныеЗначения.Свойство("Материалы", СтруктураДанных.МатериалыИУслуги);
		Если Не ЕстьМатериалыИУслуги Тогда
			ПереченьДанных.Добавить("Материалы");
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыДляРасчета.Найти("ВозвратныеОтходы", "Ключ") <> Неопределено Тогда
		ЕстьВозвратныеОтходы = КешированныеЗначения <> Неопределено
			И КешированныеЗначения.Свойство("ВозвратныеОтходы", СтруктураДанных.ВозвратныеОтходы);
		Если Не ЕстьВозвратныеОтходы Тогда
			ПереченьДанных.Добавить("ВозвратныеОтходы");
		КонецЕсли;
	КонецЕсли;
	
	Если ПереченьДанных.ВГраница() <> -1 Тогда
		
		СписокДанных = СтрСоединить(ПереченьДанных, ",");
		ДанныеМаршрутнойКарты = ДанныеМаршрутнойКарты(
									ПараметрыРасчетаПоФормулам.Спецификация,
									ПараметрыРасчетаПоФормулам.Количество,
									ПараметрыРасчетаПоФормулам.Номенклатура,
									ПараметрыРасчетаПоФормулам.Характеристика,
									СписокДанных);
			
		Если ДанныеМаршрутнойКарты.Свойство("ВыходныеИзделия") Тогда
			СтруктураДанных.ВыходныеИзделия = ДанныеМаршрутнойКарты.ВыходныеИзделия;
		КонецЕсли;
		Если ДанныеМаршрутнойКарты.Свойство("Материалы") Тогда
			СтруктураДанных.МатериалыИУслуги = ДанныеМаршрутнойКарты.Материалы;
		КонецЕсли;
		Если ДанныеМаршрутнойКарты.Свойство("ВозвратныеОтходы") Тогда
			СтруктураДанных.ВозвратныеОтходы = ДанныеМаршрутнойКарты.ВозвратныеОтходы;
		КонецЕсли;
		
	КонецЕсли;
#КонецОбласти

#Область ИсточникиДанных
	ИсточникиДанных = СтруктураИсточниковДляРасчетаПоФормулам();
	
	ИсточникиДанных.ПараметрыРасчетаПоФормулам = ПараметрыРасчетаПоФормулам;
	
	Для каждого КлючИЗначение Из СтруктураДанных Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ТаблицаИсточника = ИсточникиДанных[КлючИЗначение.Ключ]; // см. УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам
			Для каждого Строка Из СтруктураДанных[КлючИЗначение.Ключ] Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаИсточника.Добавить(), Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
#КонецОбласти

	ПодготовитьПараметрыДляРасчетаПоФормулам(ПараметрыДляРасчета, ОписаниеИсточников, ИсточникиДанных);
	
	ДанныеДляРасчета = УправлениеДаннымиОбИзделиях.ДанныеДляРасчетаПоФормулам(Справочники.МаршрутныеКарты, ПараметрыДляРасчета, ОписаниеИсточников, ИсточникиДанных);
	Возврат ДанныеДляРасчета;
	
КонецФункции

Функция ВыгрузитьДанныеДляКонструктораФормул(Объект, ИмяТЧ, ДанныеСтроки = Неопределено) Экспорт
	
	ОписаниеИсточников = Справочники.МаршрутныеКарты.ОписаниеИсточниковДанныхОперандов(Объект);
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ОписаниеИсточников.Удалить("МатериалыИУслуги");
		ОписаниеИсточников.Удалить("Материал");
	ИначеЕсли ИмяТЧ = "МатериалыИУслуги" Тогда
		ОписаниеИсточников.Удалить("ВозвратныеОтходы");
		ОписаниеИсточников.Удалить("ВозвратныйОтход");
	КонецЕсли;
	ОписаниеИсточников["ОсновноеИзделие"].ИсточникСвойствНоменклатуры = Объект.ДляВидаИзделий;
	
	УправлениеДаннымиОбИзделиях.ДополнитьОписаниеИсточниковСоставомОперандов(
		ОписаниеИсточников, Объект, ИмяТЧ, ДанныеСтроки);
	
	Возврат ОписаниеИсточников;
	
КонецФункции

#КонецОбласти

#Область ИсточникиДанных

// Конструктор структуры источников для расчета по формулам
// 
// Возвращаемое значение:
// 	Структура - из:
// * ПараметрыРасчетаПоФормулам - см. ПолучитьПараметрыРасчетаПоФормулам
// * МатериалыИУслуги - см. УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам
// * ВозвратныеОтходы - см. УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам
// * ВыходныеИзделия - см. УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам
//
Функция СтруктураИсточниковДляРасчетаПоФормулам() Экспорт
	
	ИсточникиДанных = Новый Структура;
	
	ИсточникиДанных.Вставить("ПараметрыРасчетаПоФормулам");
	
	ИсточникиДанных.Вставить("ВыходныеИзделия", УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам());
	ИсточникиДанных.Вставить("ВозвратныеОтходы", УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам());
	ИсточникиДанных.Вставить("МатериалыИУслуги", УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам());
	
	Возврат ИсточникиДанных;
	
КонецФункции

Функция ОписаниеИсточниковДанныхОперандов(Объект = Неопределено) Экспорт
	
	Настройки = ПроизводствоСерверПовтИсп.НастройкиПодсистемыПроизводство();
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	
	Результат = Новый Структура;
	
	// [Операция]
	Если Настройки.ИспользуетсяПроизводство22 И Не Настройки.ИспользуетсяПроизводство21 Тогда
		
		ПредставлениеИсточника = НСтр("ru = 'Операция';
										|en = 'Operation'");
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
			"Операция", ПредставлениеИсточника);
		
		ПредставлениеИсточника = НСтр("ru = 'Количество';
										|en = 'Quantity'");
		НовыйРеквизит = УправлениеДаннымиОбИзделиях.СоздатьОписанияРеквизитаИсточникаДанныхОперандов(
			"КоличествоОпераций", ОписаниеТипаЧисло, ПредставлениеИсточника);
		Описание.Реквизиты.Добавить(НовыйРеквизит);
		
		Результат.Вставить("Операция", Описание);
		
	КонецЕсли;
	
	// [ОсновноеИзделие]
	ПредставлениеИсточника = НСтр("ru = 'Основное изделие';
									|en = 'Main product'");
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"ОсновноеИзделие", ПредставлениеИсточника);
	
	ПредставлениеИсточника = НСтр("ru = 'Количество';
									|en = 'Quantity'");
	НовыйРеквизит = УправлениеДаннымиОбИзделиях.СоздатьОписанияРеквизитаИсточникаДанныхОперандов(
		"Количество", ОписаниеТипаЧисло, ПредставлениеИсточника);
	Описание.Реквизиты.Добавить(НовыйРеквизит);
	
	Описание.СодержитСвойстваНоменклатуры = Истина;
	
	Результат.Вставить("ОсновноеИзделие", Описание);
	
	// [ВыходныеИзделия]
	Если Объект = Неопределено
		ИЛИ Объект.ИспользоватьВыходныеИзделия Тогда
		
		ПредставлениеИсточника = НСтр("ru = 'Выходные изделия';
										|en = 'Finished products'");
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
			"ВыходныеИзделия", ПредставлениеИсточника);
		
		ПредставлениеИсточника = НСтр("ru = 'Количество';
										|en = 'Quantity'");
		НовыйРеквизит = УправлениеДаннымиОбИзделиях.СоздатьОписанияРеквизитаИсточникаДанныхОперандов(
			"Количество", ОписаниеТипаЧисло, ПредставлениеИсточника);
		Описание.Реквизиты.Добавить(НовыйРеквизит);
		
		Описание.СодержитСвойстваНоменклатуры = Истина;
		Описание.Коллекция                    = Истина;
		
		Результат.Вставить("ВыходныеИзделия", Описание);
		
		ПредставлениеИсточника = НСтр("ru = 'Выходное изделие (текущая строка)';
										|en = 'Finished product (current line)'");
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
			"ВыходноеИзделие", ПредставлениеИсточника);
		
		Описание.СодержитСвойстваНоменклатуры = Истина;
		Описание.ИмяТЧ = "ВыходныеИзделия";
		
		Результат.Вставить("ВыходноеИзделие", Описание);
		
		ПредставлениеИсточника = НСтр("ru = 'Побочный выход';
										|en = 'By-product'");
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
			"ВозвратныеОтходы", ПредставлениеИсточника);
		
		ПредставлениеИсточника = ПредставлениеИсточника;
		НовыйРеквизит = УправлениеДаннымиОбИзделиях.СоздатьОписанияРеквизитаИсточникаДанныхОперандов(
			"Количество", ОписаниеТипаЧисло, ПредставлениеИсточника);
		Описание.Реквизиты.Добавить(НовыйРеквизит);
		
		Описание.СодержитСвойстваНоменклатуры = Истина;
		Описание.Коллекция                    = Истина;
		
		Результат.Вставить("ВозвратныеОтходы", Описание);
		
		ПредставлениеИсточника = НСтр("ru = 'Побочный выход (текущая строка)';
										|en = 'By-product (current line)'");
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
			"ВозвратныйОтход", ПредставлениеИсточника);
		
		Описание.СодержитСвойстваНоменклатуры = Истина;
		Описание.ИмяТЧ = "ВозвратныеОтходы";
		
		Результат.Вставить("ВозвратныйОтход", Описание);
		
	КонецЕсли;
	
	// [МатериалыИУслуги],[Материал]
	Если Объект = Неопределено
		ИЛИ Объект.ИспользоватьМатериалы Тогда
		
		ПредставлениеИсточника = НСтр("ru = 'Материалы и работы';
										|en = 'Materials and works'");
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
			"МатериалыИУслуги", ПредставлениеИсточника);
		
		ПредставлениеИсточника = НСтр("ru = 'Количество';
										|en = 'Quantity'");
		НовыйРеквизит = УправлениеДаннымиОбИзделиях.СоздатьОписанияРеквизитаИсточникаДанныхОперандов(
			"Количество", ОписаниеТипаЧисло, ПредставлениеИсточника);
		Описание.Реквизиты.Добавить(НовыйРеквизит);
		
		Описание.СодержитСвойстваНоменклатуры = Истина;
		Описание.Коллекция                    = Истина;
		
		Результат.Вставить("МатериалыИУслуги", Описание);
		
		ПредставлениеИсточника = НСтр("ru = 'Материал (текущая строка)';
										|en = 'Material (current line)'");
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
			"Материал", ПредставлениеИсточника);
		
		Описание.СодержитСвойстваНоменклатуры = Истина;
		Описание.ИмяТЧ = "МатериалыИУслуги";
		
		Результат.Вставить("Материал", Описание);
		
	КонецЕсли;
	
	// [Подразделение]
	ПредставлениеИсточника = НСтр("ru = 'Подразделение';
									|en = 'Business unit'");
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"Подразделение", ПредставлениеИсточника);
	
	Описание.СодержитСвойства = Истина;
	Описание.НаборСвойств     = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_СтруктураПредприятия");
	
	Результат.Вставить("Подразделение", Описание);
	
	// [Распоряжение]
	Если Настройки.ИспользуетсяПроизводство22 И Не Настройки.ИспользуетсяПроизводство21 Тогда
		
		ПредставлениеИсточника = НСтр("ru = 'Заказ на производство';
										|en = 'Production order'");
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
			"Распоряжение", ПредставлениеИсточника);
		
		Описание.СодержитСвойства = Истина;
		Описание.НаборСвойств     = УправлениеСвойствами.НаборСвойствПоИмени("Документ_ЗаказНаПроизводство2_2");
		
		Результат.Вставить("Распоряжение", Описание);
		
	КонецЕсли;
	
	// [НаправлениеДеятельности]
	Если ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат") Тогда
		ПредставлениеИсточника = НСтр("ru = 'Направление деятельности';
										|en = 'Line of business'");
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
			"НаправлениеДеятельности", ПредставлениеИсточника);
		
		Описание.СодержитСвойства = Истина;
		Описание.НаборСвойств     = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_НаправленияДеятельности");
		
		Результат.Вставить("НаправлениеДеятельности", Описание);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Конструктор источника данных для расчета по формулам
// 
// Параметры:
// 	ПутьКДанным - см. УправлениеДаннымиОбИзделиях.ПараметрыДляРасчетаПоФормулам
// 	ИсточникиДанных - см. СтруктураИсточниковДляРасчетаПоФормулам
// Возвращаемое значение:
// 	см. УправлениеДаннымиОбИзделиях.СоздатьСтруктуруДанныхИсточникаДляРасчетаПоФормулам
//
Функция ИсточникДанныхДляРасчетаПоФормулам(ПутьКДанным, ИсточникиДанных) Экспорт
	
	Источник = Неопределено;
	
	Если ПутьКДанным.Ключ = "Операция" Тогда
		
		Источник = Новый Структура("КоличествоОпераций", ПутьКДанным.ДанныеСтроки.КоличествоОпераций);
		
	ИначеЕсли ПутьКДанным.Ключ = "ОсновноеИзделие" Тогда
		
		Источник = УправлениеДаннымиОбИзделиях.СоздатьСтруктуруДанныхИсточникаДляРасчетаПоФормулам();
		ЗаполнитьЗначенияСвойств(Источник, ИсточникиДанных.ПараметрыРасчетаПоФормулам);
		
	ИначеЕсли ПутьКДанным.Ключ = "ВыходныеИзделия"
		ИЛИ ПутьКДанным.Ключ = "ВозвратныеОтходы"
		ИЛИ ПутьКДанным.Ключ = "МатериалыИУслуги" Тогда
		
		ДанныеСтроки = ИсточникиДанных[ПутьКДанным.Ключ].Найти(ПутьКДанным.НомерСтроки, "НомерСтроки");
		
		Если ДанныеСтроки <> Неопределено Тогда
			Источник = УправлениеДаннымиОбИзделиях.СоздатьСтруктуруДанныхИсточникаДляРасчетаПоФормулам();
			ЗаполнитьЗначенияСвойств(Источник, ДанныеСтроки);
		КонецЕсли;
		
	ИначеЕсли ПутьКДанным.Ключ = "ВыходноеИзделие"
		ИЛИ ПутьКДанным.Ключ = "ВозвратныйОтход"
		ИЛИ ПутьКДанным.Ключ = "Материал" Тогда
		
		Источник = УправлениеДаннымиОбИзделиях.СоздатьСтруктуруДанныхИсточникаДляРасчетаПоФормулам();
		ЗаполнитьЗначенияСвойств(Источник, ПутьКДанным.ДанныеСтроки);
		
	Иначе
		
		Структура = Новый Структура(ПутьКДанным.Ключ);
		
		Если ПутьКДанным.Ключ = "Подразделение" Тогда
			
			ЗаполнитьЗначенияСвойств(Структура, ПутьКДанным.ДанныеСтроки);
			
		ИначеЕсли ПутьКДанным.Ключ = "Распоряжение"
			ИЛИ ПутьКДанным.Ключ = "НаправлениеДеятельности" Тогда
			
			ЗаполнитьЗначенияСвойств(Структура, ИсточникиДанных.ПараметрыРасчетаПоФормулам);
			
		КонецЕсли;
		Источник = Структура[ПутьКДанным.Ключ];
		
	КонецЕсли;
	
	Возврат Источник;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ПодготовитьПараметрыДляРасчетаПоФормулам(ПараметрыДляРасчета, ОписаниеИсточников, ИсточникиДанных)
	
	ИсточникиЗначенийПараметров = УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковЗначенийПараметровДляРасчетаПоФормулам();
	
	УправлениеДаннымиОбИзделиях.ДополнитьТаблицуИсточниковЗначенийПараметровДляРасчетаПоФормулам(
		Справочники.МаршрутныеКарты,
		ИсточникиЗначенийПараметров,
		ИсточникиДанных,
		ОписаниеИсточников,
		ПараметрыДляРасчета);
		
	УправлениеДаннымиОбИзделиях.ЗаполнитьЗначенияПараметровДляРасчетаПоФормулам(ИсточникиЗначенийПараметров);
	
КонецПроцедуры

Процедура ДобавитьСтрокиДляРасчетаПоФормулам(НаборДанных, ДанныеМаршрутнойКарты, ИмяТЧ)
	
	Отбор = Новый Структура("АлгоритмРасчетаКоличества", "");
	
	Если ДанныеМаршрутнойКарты.Свойство(ИмяТЧ)
		И ДанныеМаршрутнойКарты[ИмяТЧ].НайтиСтроки(Отбор).Количество() <> ДанныеМаршрутнойКарты[ИмяТЧ].Количество() Тогда
		
		Если ДанныеМаршрутнойКарты[ИмяТЧ].Колонки.Найти("Формула") = Неопределено Тогда
			ДанныеМаршрутнойКарты[ИмяТЧ].Колонки.Добавить("Формула",              Новый ОписаниеТипов("Строка"));
			ДанныеМаршрутнойКарты[ИмяТЧ].Колонки.Добавить("ФормулаОшибкаРасчета", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		НаборДанных.Добавить(ДанныеМаршрутнойКарты[ИмяТЧ]);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРасчетКоличестваПоФормулам(ПараметрыРасчетаПоФормулам, ДанныеМаршрутнойКарты, ИспользоватьДанныеМаршрутнойКарты = Истина)
	
	НаборДанных = Новый Массив;
	
	ДобавитьСтрокиДляРасчетаПоФормулам(НаборДанных, ДанныеМаршрутнойКарты, "ВыходныеИзделия");
	ДобавитьСтрокиДляРасчетаПоФормулам(НаборДанных, ДанныеМаршрутнойКарты, "Материалы");
	ДобавитьСтрокиДляРасчетаПоФормулам(НаборДанных, ДанныеМаршрутнойКарты, "ВозвратныеОтходы");
	ДобавитьСтрокиДляРасчетаПоФормулам(НаборДанных, ДанныеМаршрутнойКарты, "Трудозатраты");
	
	Если ИспользоватьДанныеМаршрутнойКарты Тогда
		ДанныеДляРасчета = ДанныеДляРасчетаПоФормулам(НаборДанных, ПараметрыРасчетаПоФормулам, ДанныеМаршрутнойКарты);
	Иначе
		ДанныеДляРасчета = ДанныеДляРасчетаПоФормулам(НаборДанных, ПараметрыРасчетаПоФормулам);
	КонецЕсли;
	
	РассчитатьКоличество(ДанныеМаршрутнойКарты, "ВыходныеИзделия",  Истина, ДанныеДляРасчета);
	РассчитатьКоличество(ДанныеМаршрутнойКарты, "Материалы",        Истина, ДанныеДляРасчета);
	РассчитатьКоличество(ДанныеМаршрутнойКарты, "ВозвратныеОтходы", Истина, ДанныеДляРасчета);
	РассчитатьКоличество(ДанныеМаршрутнойКарты, "Трудозатраты",     Ложь,   ДанныеДляРасчета);
	
КонецПроцедуры

Процедура РассчитатьКоличество(ДанныеМаршрутнойКарты, ИмяТЧ, ЕстьУпаковки, ДанныеДляРасчета)
	
	Если ДанныеМаршрутнойКарты.Свойство(ИмяТЧ) Тогда
	
		Для каждого Строка Из ДанныеМаршрутнойКарты[ИмяТЧ] Цикл
			
			РассчитатьКоличествоВСтроке(
				Строка,
				ЕстьУпаковки,
				ДанныеДляРасчета);
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьКоличествоВСтроке(Строка, ЕстьУпаковки, ДанныеДляРасчета)
	
	Если НЕ ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) Тогда
		
		УправлениеДаннымиОбИзделиях.РассчитатьКоличествоПоФормуле(Строка, ДанныеДляРасчета);
		
		Если ЕстьУпаковки Тогда
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, Новый Структура("ПересчитатьКоличествоУпаковок"), Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СписокМаршрутныхКарт

Функция ТекстЗапросаДинамическогоСпискаМаршрутныхКарт() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СправочникМаршрутныеКарты.Ссылка         КАК Ссылка,
	|	СправочникМаршрутныеКарты.Статус         КАК Статус,
	|
	|	СправочникМаршрутныеКарты.Код            КАК Код,
	|	СправочникМаршрутныеКарты.Наименование   КАК Наименование,
	|
	|	СправочникМаршрутныеКарты.НачалоДействия КАК НачалоДействия,
	|	СправочникМаршрутныеКарты.КонецДействия  КАК КонецДействия,
	|
	|	СправочникМаршрутныеКарты.Подразделение  КАК Подразделение,
	|	СправочникМаршрутныеКарты.Ответственный  КАК Ответственный,
	|
	|	СправочникМаршрутныеКарты.Описание       КАК Описание
	|ИЗ
	|	Справочник.МаршрутныеКарты КАК СправочникМаршрутныеКарты
	|";

	Возврат ТекстЗапроса;
	
КонецФункции

// Устанавливает условное оформление списка маршрутных карт
// 
// Параметры:
// 	УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление списка
Процедура УстановитьУсловноеОформлениеСпискаМаршрутныхКарт(УсловноеОформление) Экспорт
	
	// Оформление маршрутной карты в разработке
	Элемент = УсловноеОформление.Элементы.Добавить();

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхКарт.ВРазработке;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Оформление закрытой маршрутной карты
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхКарт.Закрыта;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ИнициализироватьСтруктуруСвязей()
	
	СтруктураСвязей = Новый Структура;
	СтруктураСвязей.Вставить("ОперацияРодитель", Неопределено);
	СтруктураСвязей.Вставить("КлючСвязиРодитель", Неопределено);
	СтруктураСвязей.Вставить("КлючСвязиВложенныйМаршрут", Неопределено);
	СтруктураСвязей.Вставить("Уровень", 0);
	
	Возврат СтруктураСвязей;
	
КонецФункции

Функция ПолучитьДанныеПоНоменклатуре(Номенклатура, Характеристика, ДанныеМаршрутнойКарты)
	
	ДанныеПоНоменклатуре = ДанныеПоНоменклатуре();
	
	ДанныеПоНоменклатуре.Номенклатура = Номенклатура;
	ДанныеПоНоменклатуре.Характеристика = Характеристика;
	
	Если ДанныеМаршрутнойКарты.Свойство("ВыходныеИзделия")
		И ЗначениеЗаполнено(ДанныеМаршрутнойКарты.ВыходныеИзделия) Тогда
		
		Отбор = Новый Структура("Номенклатура,Характеристика", Номенклатура, Характеристика);
		СписокСтрок = ДанныеМаршрутнойКарты.ВыходныеИзделия.НайтиСтроки(Отбор);
		
		Если СписокСтрок.Количество() > 0 Тогда
			ДанныеПоНоменклатуре.Количество = СписокСтрок[0].Количество;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

Функция ПолучитьПараметрыАвтовыбора(МаршрутнаяКарта, ДанныеПоНоменклатуре)
	
	ПараметрыАвтовыбора = УправлениеДаннымиОбИзделиях.ПолучитьПараметрыАвтовыбора();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	0               КАК Идентификатор,
	|	&Номенклатура   КАК Номенклатура,
	|	&Характеристика КАК Характеристика,
	|	&Количество     КАК Количество,
	|	&Спецификация   КАК Спецификация,
	|	&Распоряжение   КАК Распоряжение
	|
	|ПОМЕСТИТЬ ВтДанныеПоНоменклатуре
	|;
	|";
	Запрос.УстановитьПараметр("Номенклатура"  , ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ДанныеПоНоменклатуре.Характеристика);
	Запрос.УстановитьПараметр("Количество"    , ДанныеПоНоменклатуре.Количество);
	Запрос.УстановитьПараметр("Распоряжение"  , ДанныеПоНоменклатуре.Распоряжение);
	Запрос.УстановитьПараметр("Спецификация"  , МаршрутнаяКарта);
	Запрос.Выполнить();
	
	ПараметрыАвтовыбора.МенеджерВременныхТаблиц     = Запрос.МенеджерВременныхТаблиц;
	ПараметрыАвтовыбора.ТаблицаДанныхПоНоменклатуре = Запрос.МенеджерВременныхТаблиц.Таблицы[0].ПолучитьДанные().Выгрузить();
	
	ПараметрыАвтовыбора.ЗначенияСвойствИзделий = УправлениеДаннымиОбИзделиях.ЗначенияСвойствИзделия(ДанныеПоНоменклатуре);
	ПараметрыАвтовыбора.СоответствиеСвойств    = УправлениеДаннымиОбИзделиях.НастройкиСоответствияСвойств(МаршрутнаяКарта);
	
	Возврат ПараметрыАвтовыбора;
	
КонецФункции

// Функция - конструктор параметров расчета по формулам
//
// Возвращаемое значение:
//  Структура - структура с параметрами расчета по формулам
//
Функция ПолучитьПараметрыРасчетаПоФормулам(МаршрутнаяКарта, КоличествоРезультата, ДанныеПоНоменклатуре)
	
	Результат = ДанныеПоНоменклатуре();
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеПоНоменклатуре);
	
	Результат.Вставить("Спецификация", МаршрутнаяКарта);
	Результат.Вставить("КоличествоОпераций", КоличествоРезультата);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьДанныеМаршрутнойКартыРекурсивно(МаршрутнаяКарта, КоличествоРезультата, Номенклатура, Характеристика, СтруктураСвязей, СтруктураДанных)
	
	Индекс = 0;
	ТекстыЗапроса = Новый Массив;
	ИндексыТаблиц = Новый Соответствие;
	
	Если СтруктураДанных.Свойство("ВыходныеИзделия")
		ИЛИ СтруктураДанных.Свойство("ВозвратныеОтходы")
		ИЛИ СтруктураДанных.Свойство("Материалы")
		ИЛИ СтруктураДанных.Свойство("Трудозатраты")
	Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаОтборПоСвойствам());
		Индекс = Индекс + 2;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		
		ТекстЗапроса = ТекстЗапросаВыходныеИзделияМаршрутнойКарты();
		ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "ВыходныеИзделия");
		
	КонецЕсли; 

	Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
		
		ТекстЗапроса = ТекстЗапросаВозвратныеОтходыМаршрутнойКарты();
		ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "ВозвратныеОтходы");
		
	КонецЕсли;
	
	// Операции получаем всегда, чтобы обойти вложенные маршрутные карты
	ТекстЗапроса = ТекстЗапросаОперацииМаршрутнойКарты(Ложь);
	ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "Операции");
	
	Если СтруктураДанных.Свойство("Материалы") Тогда
		
		ТекстЗапроса = ТекстЗапросаМатериалыМаршрутнойКарты();
		ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "Материалы");
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Трудозатраты") Тогда
		
		ТекстЗапроса = ТекстЗапросаТрудозатратыМаршрутнойКарты();
		ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "Трудозатраты");
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ВспомогательныеРабочиеЦентры") Тогда
		
		ТекстЗапроса = ТекстЗапросаВспомогательныеРЦМаршрутнойКарты();
		ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "ВспомогательныеРабочиеЦентры");
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("МаршрутнаяКарта",         МаршрутнаяКарта);
	Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",          Характеристика);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Неопределено); 
	Запрос.УстановитьПараметр("КоличествоРезультата",    КоличествоРезультата);
	Запрос.УстановитьПараметр("ОперацияРодитель",        СтруктураСвязей.ОперацияРодитель);
	Запрос.УстановитьПараметр("КлючСвязиРодитель",       СтруктураСвязей.КлючСвязиРодитель);
	Запрос.УстановитьПараметр("КлючСвязиВложенныйМаршрут", СтруктураСвязей.КлючСвязиВложенныйМаршрут);
	Запрос.УстановитьПараметр("ИспользоватьПараметризацию", 
		ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций"));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеМаршрутнойКарты = Новый Структура;
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		ТаблицаВыходныеИзделия  = РезультатЗапроса[ИндексыТаблиц.Получить("ВыходныеИзделия")].Выгрузить(); // ТаблицаЗначений
		ТаблицаВыходныеИзделия.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ДанныеМаршрутнойКарты.Вставить("ВыходныеИзделия", ТаблицаВыходныеИзделия);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
		ТаблицаВозвратныеОтходы = РезультатЗапроса[ИндексыТаблиц.Получить("ВозвратныеОтходы")].Выгрузить(); // ТаблицаЗначений
		ТаблицаВозвратныеОтходы.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ДанныеМаршрутнойКарты.Вставить("ВозвратныеОтходы", ТаблицаВозвратныеОтходы);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ТаблицаМатериалыИУслуги = РезультатЗапроса[ИндексыТаблиц.Получить("Материалы")].Выгрузить(); // ТаблицаЗначений
		ТаблицаМатериалыИУслуги.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ДанныеМаршрутнойКарты.Вставить("Материалы", ТаблицаМатериалыИУслуги);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Трудозатраты") Тогда
		ТаблицаТрудозатраты = РезультатЗапроса[ИндексыТаблиц.Получить("Трудозатраты")].Выгрузить(); // ТаблицаЗначений
		ТаблицаТрудозатраты.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ДанныеМаршрутнойКарты.Вставить("Трудозатраты", ТаблицаТрудозатраты);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВспомогательныеРабочиеЦентры") Тогда
		ТаблицаВспомогательныеРабочиеЦентры = РезультатЗапроса[ИндексыТаблиц.Получить("ВспомогательныеРабочиеЦентры")].Выгрузить(); // ТаблицаЗначений
		ТаблицаВспомогательныеРабочиеЦентры.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ДанныеМаршрутнойКарты.Вставить("ВспомогательныеРабочиеЦентры", ТаблицаВспомогательныеРабочиеЦентры);
	КонецЕсли;
	
	ТаблицаВложенныхМаршрутов = Новый ТаблицаЗначений;
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("ВложенныйМаршрут");
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("Операция");
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("КлючСвязи");
	
	ВыборкаОпераций = РезультатЗапроса[ИндексыТаблиц.Получить("Операции")].Выбрать(); // СправочникВыборка.ТехнологическиеОперации
	ДлинаИдентификатора = Справочники.ТехнологическиеОперации.ДлинаИдентификатораОперации();
	Пока ВыборкаОпераций.Следующий() Цикл
		
		// Добавим полученные операции
		Если СтруктураДанных.Свойство("Операции") Тогда
			
			СтрокаОперация = СтруктураДанных.Операции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперация, ВыборкаОпераций);
			
			СтрокаОперация.КлючСвязи = Новый УникальныйИдентификатор;
			
			ОтборРодитель = Новый Структура("КлючСвязи", ВыборкаОпераций.КлючСвязиРодитель);
			НайденныеСтроки = СтруктураДанных.Операции.НайтиСтроки(ОтборРодитель);
			Если НайденныеСтроки.ВГраница() <> -1 Тогда
				СтрокаОперация.ИдентификаторОперации = НайденныеСтроки[0].ИдентификаторОперации * Pow(10, ДлинаИдентификатора);
			КонецЕсли;
			СтрокаОперация.ИдентификаторОперации = СтрокаОперация.ИдентификаторОперации + ВыборкаОпераций.Идентификатор;
			
			ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
				СтрокаОперация, КоличествоРезультата);
			
			Если ВыборкаОпераций.СодержитВложенныйМаршрут Тогда
				НовыйВложенныйМаршрут = ТаблицаВложенныхМаршрутов.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйВложенныйМаршрут, СтрокаОперация);
				Продолжить;
			КонецЕсли;
			
			Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаВыходныеИзделия);
			КонецЕсли;
			Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаВозвратныеОтходы);
			КонецЕсли;
			Если СтруктураДанных.Свойство("Материалы") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаМатериалыИУслуги);
			КонецЕсли;
			Если СтруктураДанных.Свойство("Трудозатраты") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаТрудозатраты);
			КонецЕсли;
			Если СтруктураДанных.Свойство("ВспомогательныеРабочиеЦентры") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаВспомогательныеРабочиеЦентры);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций") Тогда
	
		ДанныеПоНоменклатуре = ПолучитьДанныеПоНоменклатуре(
			Номенклатура,
			Характеристика,
			ДанныеМаршрутнойКарты);
		
		ПараметрыАвтовыбора = ПолучитьПараметрыАвтовыбора(МаршрутнаяКарта, ДанныеПоНоменклатуре);
		
		Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
			
			УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораНоменклатуры(
					ТаблицаВыходныеИзделия,
					ПараметрыАвтовыбора);
				
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
			
			УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораНоменклатуры(
					ТаблицаВозвратныеОтходы,
					ПараметрыАвтовыбора);
				
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("Материалы") Тогда
			
			УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораНоменклатуры(
					ТаблицаМатериалыИУслуги,
					ПараметрыАвтовыбора);
				
		КонецЕсли;
		
		ПараметрыРасчетаПоФормулам = ПолучитьПараметрыРасчетаПоФормулам(МаршрутнаяКарта, КоличествоРезультата, ДанныеПоНоменклатуре);
		ОбработатьРасчетКоличестваПоФормулам(ПараметрыРасчетаПоФормулам, ДанныеМаршрутнойКарты);
	
	КонецЕсли;
	
	РаспаковатьСоставНаборов(ДанныеМаршрутнойКарты, "Материалы");
	
	// Добавим подготовленные таблицы в структуру данных
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		ДобавитьТаблицуМаршрутнойКарты("ВыходныеИзделия",  ТаблицаВыходныеИзделия.Скопировать(),  СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
		ДобавитьТаблицуМаршрутнойКарты("ВозвратныеОтходы",  ТаблицаВозвратныеОтходы.Скопировать(), СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ДобавитьТаблицуМаршрутнойКарты("Материалы", ТаблицаМатериалыИУслуги.Скопировать(), СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Трудозатраты") Тогда
		ДобавитьТаблицуМаршрутнойКарты("Трудозатраты", ТаблицаТрудозатраты.Скопировать(), СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВспомогательныеРабочиеЦентры") Тогда
		ДобавитьТаблицуМаршрутнойКарты("ВспомогательныеРабочиеЦентры", ТаблицаВспомогательныеРабочиеЦентры.Скопировать(), СтруктураДанных);
	КонецЕсли;
	
	// Перед тем как уйти в рекурсию освободим память
	Запрос                  = Неопределено;
	РезультатЗапроса        = Неопределено;
	ТаблицаВыходныеИзделия  = Неопределено;
	ТаблицаВозвратныеОтходы = Неопределено;
	ТаблицаМатериалыИУслуги = Неопределено;
	ТаблицаТрудозатраты     = Неопределено;
	ТаблицаВспомогательныеРабочиеЦентры = Неопределено;
	
	// Добавим данные вложенных маршрутов рекурсивно
	Если СтруктураСвязей.Уровень < Справочники.МаршрутныеКарты.МаксимальнаяГлубинаВложенности()-1 Тогда
		
		Для каждого ВыборкаОпераций Из ТаблицаВложенныхМаршрутов Цикл
			
			СтруктураСвязейВложенная = Новый Структура;
			СтруктураСвязейВложенная.Вставить("ОперацияРодитель", ВыборкаОпераций.Операция);
			СтруктураСвязейВложенная.Вставить("КлючСвязиРодитель", ВыборкаОпераций.КлючСвязи);
			СтруктураСвязейВложенная.Вставить("Уровень", СтруктураСвязей.Уровень + 1);
			
			Если СтруктураСвязей.КлючСвязиВложенныйМаршрут = Неопределено Тогда
				СтруктураСвязейВложенная.Вставить("КлючСвязиВложенныйМаршрут", ВыборкаОпераций.КлючСвязи);
			Иначе
				СтруктураСвязейВложенная.Вставить("КлючСвязиВложенныйМаршрут", СтруктураСвязей.КлючСвязиВложенныйМаршрут);
			КонецЕсли;
			
			ДобавитьДанныеМаршрутнойКартыРекурсивно(ВыборкаОпераций.ВложенныйМаршрут, 
													КоличествоРезультата, 
													Номенклатура, 
													Характеристика,
													СтруктураСвязейВложенная,
													СтруктураДанных);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//++ Устарело_Производство21
Процедура ДобавитьДанныеМаршрутнойКартыДляПечатиРекурсивно(МаршрутнаяКарта, КоличествоРезультата, Номенклатура, Характеристика, СтруктураСвязей, СтруктураДанных)
	
	// Заполним строки по маршрутной карте
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	ТекущийИндекс = 0;
	ИндексыТаблиц = Новый Соответствие;
	
	Если СтруктураДанных.Свойство("ВыходныеИзделия")
		ИЛИ СтруктураДанных.Свойство("Материалы") Тогда
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОтборПоСвойствам() + Символы.ПС + ";" + Символы.ПС;
		ТекущийИндекс = ТекущийИндекс + 2;
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		
		ИндексыТаблиц.Вставить("ВыходныеИзделия", ТекущийИндекс);
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	МаршрутныеКартыВыходныеИзделия.Номенклатура                   КАК Номенклатура,
		|	МаршрутныеКартыВыходныеИзделия.Номенклатура.Представление     КАК НоменклатураПредставление,
		|	МаршрутныеКартыВыходныеИзделия.Номенклатура.Артикул           КАК НоменклатураАртикул,
		|	ВЫБОР 
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                          КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА МаршрутныеКартыВыходныеИзделия.Характеристика
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Номенклатура = &Номенклатура
		|			ТОГДА &Характеристика
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                                          КАК Характеристика,
		|	ВЫБОР
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА МаршрутныеКартыВыходныеИзделия.Характеристика.Представление
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Номенклатура = &Номенклатура
		|			ТОГДА ХарактеристикиНоменклатуры.Представление
		|		ИНАЧЕ """"
		|	КОНЕЦ                                                                       КАК ХарактеристикаПредставление,
		|	МаршрутныеКартыВыходныеИзделия.КоличествоУпаковок * &КоличествоРезультата   КАК КоличествоУпаковок,
		|	ВЫРАЗИТЬ(МаршрутныеКартыВыходныеИзделия.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * &КоличествоРезультата КАК ЧИСЛО(15, 3)) КАК Количество,
		|	МаршрутныеКартыВыходныеИзделия.Упаковка                                     КАК Упаковка,
		|	&ТекстЗапросаНаименованиеЕдиницыИзмерения1                                  КАК ЕдиницаИзмеренияНаименование,
		|
		|	ВЫБОР 
		|		КОГДА (МаршрутныеКартыВыходныеИзделия.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|			ИЛИ МаршрутныеКартыВыходныеИзделия.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|			И &ИспользоватьПараметризацию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                            КАК ИспользуетсяАвтовыбор,
		|	ПРЕДСТАВЛЕНИЕ("""")                                              КАК СведенияАвтовыбора,
		|	МаршрутныеКартыВыходныеИзделия.СпособАвтовыбораНоменклатуры,
		|	МаршрутныеКартыВыходныеИзделия.СпособАвтовыбораХарактеристики,
		|	МаршрутныеКартыВыходныеИзделия.СвойствоСодержащееНоменклатуру,
		|	МаршрутныеКартыВыходныеИзделия.АлгоритмАвтовыбораХарактеристики,
		|
		|	// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА МаршрутныеКартыВыходныеИзделия.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                                              КАК АлгоритмРасчетаКоличества,
		|
		|	МаршрутныеКартыВыходныеИзделия.Операция                            КАК Операция,
		|	МаршрутныеКартыВыходныеИзделия.Ссылка.Подразделение                КАК Подразделение,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости,
		|	МаршрутныеКартыВыходныеИзделия.ДоляСтоимости                       КАК ДоляСтоимости,
		|	0                                                                  КАК Идентификатор,
		|	МаршрутныеКартыВыходныеИзделия.КлючСвязи                           КАК КлючСвязи
		|ИЗ
		|	Справочник.МаршрутныеКарты.ВыходныеИзделия КАК МаршрутныеКартыВыходныеИзделия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ВыходныеИзделия КАК ИсходноеВыходноеИзделие
		|		ПО ИсходноеВыходноеИзделие.Ссылка = МаршрутныеКартыВыходныеИзделия.Ссылка
		|			И ИсходноеВыходноеИзделие.Номенклатура = &Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ХарактеристикиНоменклатуры.Ссылка = &Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
		|		ПО МаршрутныеКартыВыходныеИзделия.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
		|ГДЕ
		|	МаршрутныеКартыВыходныеИзделия.Ссылка = &МаршрутнаяКарта
		|	И ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
		|	И МаршрутныеКарты.ИспользоватьВыходныеИзделия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутныеКартыВозвратныеОтходы.Номенклатура                   КАК Номенклатура,
		|	МаршрутныеКартыВозвратныеОтходы.Номенклатура.Представление     КАК НоменклатураПредставление,
		|	МаршрутныеКартыВозвратныеОтходы.Номенклатура.Артикул           КАК НоменклатураАртикул,
		|	ВЫБОР 
		|		КОГДА МаршрутныеКартыВозвратныеОтходы.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                                        КАК ХарактеристикиИспользуются,
		|	МаршрутныеКартыВозвратныеОтходы.Характеристика                               КАК Характеристика,
		|	МаршрутныеКартыВозвратныеОтходы.Характеристика.Представление                 КАК ХарактеристикаПредставление,
		|	МаршрутныеКартыВозвратныеОтходы.КоличествоУпаковок * &КоличествоРезультата   КАК КоличествоУпаковок,
		|	ВЫРАЗИТЬ(МаршрутныеКартыВозвратныеОтходы.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) * &КоличествоРезультата КАК ЧИСЛО(15, 3)) КАК Количество,
		|	МаршрутныеКартыВозвратныеОтходы.Упаковка                                     КАК Упаковка,
		|	&ТекстЗапросаНаименованиеЕдиницыИзмерения2                                   КАК ЕдиницаИзмеренияНаименование,
		|
		|	ВЫБОР 
		|		КОГДА (МаршрутныеКартыВозвратныеОтходы.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|			ИЛИ МаршрутныеКартыВозвратныеОтходы.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|			И &ИспользоватьПараметризацию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                          КАК ИспользуетсяАвтовыбор,
		|	ПРЕДСТАВЛЕНИЕ("""")                                            КАК СведенияАвтовыбора,
		|	МаршрутныеКартыВозвратныеОтходы.СпособАвтовыбораНоменклатуры,
		|	МаршрутныеКартыВозвратныеОтходы.СпособАвтовыбораХарактеристики,
		|	МаршрутныеКартыВозвратныеОтходы.СвойствоСодержащееНоменклатуру,
		|	МаршрутныеКартыВозвратныеОтходы.АлгоритмАвтовыбораХарактеристики,
		|
		|	// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА МаршрутныеКартыВозвратныеОтходы.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                                          КАК АлгоритмРасчетаКоличества,
		|
		|	МаршрутныеКартыВозвратныеОтходы.Операция                       КАК Операция,
		|	МаршрутныеКартыВозвратныеОтходы.Ссылка.Подразделение           КАК Подразделение,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная)          КАК ТипСтоимости,
		|	0                                                              КАК ДоляСтоимости,
		|	0                                                              КАК Идентификатор,
		|	МаршрутныеКартыВозвратныеОтходы.КлючСвязи
		|ИЗ
		|	Справочник.МаршрутныеКарты.ВозвратныеОтходы КАК МаршрутныеКартыВозвратныеОтходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
		|		ПО МаршрутныеКартыВозвратныеОтходы.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
		|ГДЕ
		|	МаршрутныеКартыВозвратныеОтходы.Ссылка = &МаршрутнаяКарта
		|	И ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
		|	И МаршрутныеКарты.ИспользоватьВыходныеИзделия";
			
		ТекущийИндекс = ТекущийИндекс + 1;
		
	КонецЕсли; 

	// Операции получаем всегда, чтобы обойти вложенные маршрутные карты
	ИндексыТаблиц.Вставить("Операции", ТекущийИндекс);
	
	Запрос.Текст = Запрос.Текст +
	?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) + ТекстЗапросаОперацииМаршрутнойКарты(Ложь);
	
	ТекущийИндекс = ТекущийИндекс + 1;
	
	Если СтруктураДанных.Свойство("Материалы") Тогда
		
		ИндексыТаблиц.Вставить("Материалы", ТекущийИндекс);
		
		Запрос.Текст = Запрос.Текст +
		?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	МаршрутныеКартыМатериалыИУслуги.Операция                                        КАК Операция,
		|	МаршрутныеКартыМатериалыИУслуги.Ссылка.Подразделение                            КАК Подразделение,
		|	МаршрутныеКартыМатериалыИУслуги.Номенклатура                                    КАК Номенклатура,
		|	МаршрутныеКартыМатериалыИУслуги.Номенклатура.Представление                      КАК НоменклатураПредставление,
		|	МаршрутныеКартыМатериалыИУслуги.Номенклатура.Артикул                            КАК НоменклатураАртикул,
		|	МаршрутныеКартыМатериалыИУслуги.Номенклатура.ТипНоменклатуры                    КАК ТипНоменклатуры,
		|	ВЫБОР 
		|		КОГДА МаршрутныеКартыМатериалыИУслуги.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                                           КАК ХарактеристикиИспользуются,
		|	МаршрутныеКартыМатериалыИУслуги.Характеристика                                  КАК Характеристика,
		|	МаршрутныеКартыМатериалыИУслуги.Характеристика.Представление                    КАК ХарактеристикаПредставление,
		|	МаршрутныеКартыМатериалыИУслуги.КоличествоУпаковок * &КоличествоРезультата      КАК КоличествоУпаковок,
		|	ВЫРАЗИТЬ(МаршрутныеКартыМатериалыИУслуги.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3,1) * &КоличествоРезультата КАК ЧИСЛО(15,3)) КАК Количество,
		|	МаршрутныеКартыМатериалыИУслуги.Упаковка                                        КАК Упаковка,
		|	МаршрутныеКартыМатериалыИУслуги.СтатьяКалькуляции                               КАК СтатьяКалькуляции,
		|	&ТекстЗапросаНаименованиеЕдиницыИзмерения3                                      КАК ЕдиницаИзмеренияНаименование,
		|	ВЫБОР 
		|		КОГДА (МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|			ИЛИ МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|			И &ИспользоватьПараметризацию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                                           КАК ИспользуетсяАвтовыбор,
		|	ПРЕДСТАВЛЕНИЕ("""")                                                             КАК СведенияАвтовыбора,
		|	МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораНоменклатуры,
		|	МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораХарактеристики,
		|	МаршрутныеКартыМатериалыИУслуги.СвойствоСодержащееНоменклатуру,
		|	МаршрутныеКартыМатериалыИУслуги.АлгоритмАвтовыбораХарактеристики,
		|
		|	// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА МаршрутныеКартыМатериалыИУслуги.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                               КАК АлгоритмРасчетаКоличества,
		|
		|	МаршрутныеКартыМатериалыИУслуги.ПрименениеМатериала КАК ПрименениеМатериала,
		|	0                                                   КАК Идентификатор,
		|	МаршрутныеКартыМатериалыИУслуги.КлючСвязи           КАК КлючСвязи
		|ИЗ
		|	Справочник.МаршрутныеКарты.МатериалыИУслуги КАК МаршрутныеКартыМатериалыИУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
		|		ПО МаршрутныеКартыМатериалыИУслуги.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
		|ГДЕ
		|	МаршрутныеКартыМатериалыИУслуги.Ссылка = &МаршрутнаяКарта
		|	И ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
		|	И МаршрутныеКарты.ИспользоватьМатериалы";
		
		ТекущийИндекс = ТекущийИндекс + 1;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"МаршрутныеКартыВыходныеИзделия.Упаковка",
			"МаршрутныеКартыВыходныеИзделия.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"МаршрутныеКартыВыходныеИзделия.Упаковка",
			"МаршрутныеКартыВыходныеИзделия.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"МаршрутныеКартыВозвратныеОтходы.Упаковка",
			"МаршрутныеКартыВозвратныеОтходы.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"МаршрутныеКартыВозвратныеОтходы.Упаковка",
			"МаршрутныеКартыВозвратныеОтходы.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"МаршрутныеКартыМатериалыИУслуги.Упаковка",
			"МаршрутныеКартыМатериалыИУслуги.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"МаршрутныеКартыМатериалыИУслуги.Упаковка",
			"МаршрутныеКартыМатериалыИУслуги.Номенклатура"));
	
	Запрос.УстановитьПараметр("МаршрутнаяКарта",         МаршрутнаяКарта);
	Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",          Характеристика);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Неопределено); 
	Запрос.УстановитьПараметр("КоличествоРезультата",    КоличествоРезультата);
	Запрос.УстановитьПараметр("ОперацияРодитель",        СтруктураСвязей.ОперацияРодитель);
	Запрос.УстановитьПараметр("КлючСвязиРодитель",       СтруктураСвязей.КлючСвязиРодитель);
	Запрос.УстановитьПараметр("КлючСвязиВложенныйМаршрут", СтруктураСвязей.КлючСвязиВложенныйМаршрут);
	Запрос.УстановитьПараметр("ИспользоватьПараметризацию", 
		ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций"));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеМаршрутнойКарты = Новый Структура;
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		ТаблицаВыходныеИзделия  = РезультатЗапроса[ИндексыТаблиц.Получить("ВыходныеИзделия")].Выгрузить(); // ТаблицаЗначений
		ТаблицаВыходныеИзделия.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ДанныеМаршрутнойКарты.Вставить("ВыходныеИзделия", ТаблицаВыходныеИзделия);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ТаблицаМатериалыИУслуги = РезультатЗапроса[ИндексыТаблиц.Получить("Материалы")].Выгрузить(); // ТаблицаЗначений
		ТаблицаМатериалыИУслуги.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ДанныеМаршрутнойКарты.Вставить("Материалы", ТаблицаМатериалыИУслуги);
	КонецЕсли;
	
	ТаблицаВложенныхМаршрутов = Новый ТаблицаЗначений;
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("ВложенныйМаршрут");
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("Операция");
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("КлючСвязи");
	
	ВыборкаОпераций = РезультатЗапроса[ИндексыТаблиц.Получить("Операции")].Выбрать();
	Пока ВыборкаОпераций.Следующий() Цикл
		
		// Добавим полученные операции
		ТаблицаОпераций = Неопределено; // ТаблицаЗначений
		Если СтруктураДанных.Свойство("Операции", ТаблицаОпераций) Тогда
			СтрокаОперация = ТаблицаОпераций.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперация, ВыборкаОпераций);
			СтрокаОперация.КлючСвязи = Новый УникальныйИдентификатор;
			
			ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
				СтрокаОперация, КоличествоРезультата);
			
			Если ВыборкаОпераций.СодержитВложенныйМаршрут Тогда
				НовыйВложенныйМаршрут = ТаблицаВложенныхМаршрутов.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйВложенныйМаршрут, СтрокаОперация);
				Продолжить;
			КонецЕсли;
			
			Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаВыходныеИзделия);
			КонецЕсли;
			Если СтруктураДанных.Свойство("Материалы") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаМатериалыИУслуги);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций") Тогда
	
		ДанныеПоНоменклатуре = ПолучитьДанныеПоНоменклатуре(
			Номенклатура,
			Характеристика,
			ДанныеМаршрутнойКарты);
		
		ПараметрыАвтовыбора = ПолучитьПараметрыАвтовыбора(МаршрутнаяКарта, ДанныеПоНоменклатуре);
		
		Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
			
			УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораНоменклатуры(
					ТаблицаВыходныеИзделия,
					ПараметрыАвтовыбора);
					
		КонецЕсли;

		Если СтруктураДанных.Свойство("Материалы") Тогда
			
			УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораНоменклатуры(
					ТаблицаМатериалыИУслуги,
					ПараметрыАвтовыбора);
					
		КонецЕсли;
		
		ПараметрыРасчетаПоФормулам = ПолучитьПараметрыРасчетаПоФормулам(МаршрутнаяКарта, КоличествоРезультата, ДанныеПоНоменклатуре);
		ПараметрыРасчетаПоФормулам.Количество = КоличествоРезультата;
		ОбработатьРасчетКоличестваПоФормулам(ПараметрыРасчетаПоФормулам, ДанныеМаршрутнойКарты, Ложь);
	
	КонецЕсли;
	
	РаспаковатьСоставНаборов(ДанныеМаршрутнойКарты, "Материалы");
	
	// Добавим подготовленные таблицы в структуру данных
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		ДобавитьТаблицуМаршрутнойКарты("ВыходныеИзделия",  ТаблицаВыходныеИзделия.Скопировать(),  СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ДобавитьТаблицуМаршрутнойКарты("Материалы", ТаблицаМатериалыИУслуги.Скопировать(), СтруктураДанных);
	КонецЕсли;
	
	// Перед тем как уйти в рекурсию освободим память
	Запрос                  = Неопределено;
	РезультатЗапроса        = Неопределено;
	ТаблицаВыходныеИзделия  = Неопределено;
	ТаблицаМатериалыИУслуги = Неопределено;
	
	// Добавим данные вложенных маршрутов рекурсивно
	Для каждого ВыборкаОпераций Из ТаблицаВложенныхМаршрутов Цикл
		
		СтруктураСвязейВложенная = Новый Структура;
		СтруктураСвязейВложенная.Вставить("ОперацияРодитель", ВыборкаОпераций.Операция);
		СтруктураСвязейВложенная.Вставить("КлючСвязиРодитель", ВыборкаОпераций.КлючСвязи);
		
		Если СтруктураСвязей.КлючСвязиВложенныйМаршрут = Неопределено Тогда
			СтруктураСвязейВложенная.Вставить("КлючСвязиВложенныйМаршрут", ВыборкаОпераций.КлючСвязи);
		Иначе
			СтруктураСвязейВложенная.Вставить("КлючСвязиВложенныйМаршрут", СтруктураСвязей.КлючСвязиВложенныйМаршрут);
		КонецЕсли;
		
		ДобавитьДанныеМаршрутнойКартыДляПечатиРекурсивно(ВыборкаОпераций.ВложенныйМаршрут, 
															КоличествоРезультата, 
															Номенклатура, 
															Характеристика,
															СтруктураСвязейВложенная,
															СтруктураДанных);
	КонецЦикла;
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	ТаблицаСвязаннаяСОперациями - ТаблицаЗначений - таблица, для которой необходимо заполнить номера операций
// 	ТаблицаОперации - ТаблицаЗначений - таблица операций
Процедура ЗаполнитьНомерОперацииВСвязаннойТаблице(ТаблицаСвязаннаяСОперациями, ТаблицаОперации)

	ТаблицаСвязаннаяСОперациями.Колонки.Добавить("НомерОперации", Новый ОписаниеТипов("Число"));
	
	Для каждого ДанныеСтроки Из ТаблицаСвязаннаяСОперациями Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Операция) Тогда
			ДанныеСтроки.НомерОперации = 1;
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Операция", ДанныеСтроки.Операция);
  		СписокСтрок = ТаблицаОперации.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			ДанныеСтроки.НомерОперации = СписокСтрок[0].НомерОперации;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
//-- Устарело_Производство21

Процедура ЗаполнитьКлючСвязи(Операция, КлючСвязиОперации, Таблица)
	
	СтруктураПоиска = Новый Структура("Операция", Операция);
	СписокСтрок = Таблица.НайтиСтроки(СтруктураПоиска);
	
	Для каждого ЭлементКоллекции Из СписокСтрок Цикл
		ЭлементКоллекции.КлючСвязиОперации = КлючСвязиОперации;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьТаблицуМаршрутнойКарты(ИмяТаблицы, Таблица, СтруктураДанных)

	ИсходнаяТаблица = Неопределено; // ТаблицаЗначений
	СтруктураДанных.Свойство(ИмяТаблицы, ИсходнаяТаблица);
	Если ИсходнаяТаблица <> Неопределено Тогда
		Для каждого ЭлементКоллекции Из Таблица Цикл
			НоваяСтрока = ИсходнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		КонецЦикла; 
	Иначе
		СтруктураДанных.Вставить(ИмяТаблицы, Таблица);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПодготовитьТекстЗапросаДляВыборкиДанныхОперации(Запрос, ИндексыТаблиц)
	
	ТекстыЗапроса = Новый Массив;
	Индекс = 0;
	
	ТекстыЗапроса.Добавить(ТекстЗапросаОтборПоСвойствам());
	Индекс = Индекс + 2;
	
	ТекстЗапроса = ТекстЗапросаВыходныеИзделияМаршрутнойКарты();
	ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "ВыходныеИзделия");
	
	ТекстЗапроса = ТекстЗапросаВозвратныеОтходыМаршрутнойКарты();
	ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "ВозвратныеОтходы");
	
	ТекстЗапроса = ТекстЗапросаМатериалыМаршрутнойКарты();
	ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "Материалы");
	
	ТекстЗапроса = ТекстЗапросаТрудозатратыМаршрутнойКарты();
	ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "Трудозатраты");
	
	Для Ит = 0 По ТекстыЗапроса.ВГраница() Цикл
		ТекстыЗапроса[Ит] = СтрЗаменить(
			ТекстыЗапроса[Ит],
			"&КоличествоРезультата",
			"&КоличествоРезультата * ВЫБОР КОГДА ТабличнаяЧасть.Операция = &Операция ТОГДА &КоэффициентТекущейОперации ИНАЧЕ 1 КОНЕЦ");
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапросаОперацииМаршрутнойКарты(Ложь);
	ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "Операции");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецПроцедуры

Процедура ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, ИмяТаблицы)
	
	ИндексыТаблиц.Вставить(ИмяТаблицы, Индекс);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Индекс = Индекс + 1;
	
КонецПроцедуры

Функция ТекстЗапросаОтборПоСвойствам()
	
	Результат =  
	"ВЫБРАТЬ
	|	0                                         КАК Идентификатор,
	|	МаршрутныеКартыОтборПоСвойствам.КлючСвязи КАК КлючСвязи,
	|	МаршрутныеКартыОтборПоСвойствам.Свойство  КАК Свойство,
	|	МаршрутныеКартыОтборПоСвойствам.Условие   КАК Условие,
	|	МаршрутныеКартыОтборПоСвойствам.Значение  КАК ЗначениеОтбор,
	|
	|	ВЫБОР
	|		КОГДА НЕ ЗначенияДопРеквизитовХарактеристик.Значение ЕСТЬ NULL
	|			ТОГДА ЗначенияДопРеквизитовХарактеристик.Значение
	|		КОГДА НЕ ЗначенияДопСведенийХарактеристик.Значение ЕСТЬ NULL
	|			ТОГДА ЗначенияДопСведенийХарактеристик.Значение
	|		КОГДА НЕ ЗначенияДопРеквизитовНоменклатуры.Значение ЕСТЬ NULL
	|			ТОГДА ЗначенияДопРеквизитовНоменклатуры.Значение
	|		КОГДА НЕ ЗначенияДопСведенийНоменклатуры.Значение ЕСТЬ NULL
	|			ТОГДА ЗначенияДопСведенийНоменклатуры.Значение
	|		КОГДА НЕ ЗначенияДопРеквизитовНаправленийДеятельности.Значение ЕСТЬ NULL
	|			ТОГДА ЗначенияДопРеквизитовНаправленийДеятельности.Значение
	|		КОГДА НЕ ЗначенияДопСведенийНаправленийДеятельности.Значение ЕСТЬ NULL
	|			ТОГДА ЗначенияДопСведенийНаправленийДеятельности.Значение
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(МаршрутныеКартыОтборПоСвойствам.Значение) = ТИП(БУЛЕВО)
	|					ТОГДА ЛОЖЬ
	|				КОГДА ТИПЗНАЧЕНИЯ(МаршрутныеКартыОтборПоСвойствам.Значение) = ТИП(ЧИСЛО)
	|					ТОГДА 0
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ                                     КАК ЗначениеСвойства
	|
	|ПОМЕСТИТЬ ВТОтборПоСвойствамНастройки
	|ИЗ
	|	Справочник.МаршрутныеКарты.ОтборПоСвойствам КАК МаршрутныеКартыОтборПоСвойствам
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияДопРеквизитовНоменклатуры
	|		ПО МаршрутныеКартыОтборПоСвойствам.Свойство = ЗначенияДопРеквизитовНоменклатуры.Свойство
	|			И (ЗначенияДопРеквизитовНоменклатуры.Ссылка = &Номенклатура)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияДопСведенийНоменклатуры
	|		ПО ЗначенияДопСведенийНоменклатуры.Объект = &Номенклатура
	|			И МаршрутныеКартыОтборПоСвойствам.Свойство = ЗначенияДопСведенийНоменклатуры.Свойство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияДопРеквизитовХарактеристик
	|		ПО МаршрутныеКартыОтборПоСвойствам.Свойство = ЗначенияДопРеквизитовХарактеристик.Свойство
	|			И (ЗначенияДопРеквизитовХарактеристик.Ссылка = &Характеристика)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияДопСведенийХарактеристик
	|		ПО ЗначенияДопСведенийХарактеристик.Объект = &Характеристика
	|			И МаршрутныеКартыОтборПоСвойствам.Свойство = ЗначенияДопСведенийХарактеристик.Свойство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности.ДополнительныеРеквизиты КАК ЗначенияДопРеквизитовНаправленийДеятельности
	|		ПО МаршрутныеКартыОтборПоСвойствам.Свойство = ЗначенияДопРеквизитовНаправленийДеятельности.Свойство
	|			И (ЗначенияДопРеквизитовНаправленийДеятельности.Ссылка = &НаправлениеДеятельности)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияДопСведенийНаправленийДеятельности
	|		ПО ЗначенияДопСведенийНаправленийДеятельности.Объект = &НаправлениеДеятельности
	|			И МаршрутныеКартыОтборПоСвойствам.Свойство = ЗначенияДопСведенийНаправленийДеятельности.Свойство
	|
	|ГДЕ
	|	МаршрутныеКартыОтборПоСвойствам.Ссылка = &МаршрутнаяКарта
	|	И &ИспользоватьПараметризацию
	|;
	|" + УправлениеДаннымиОбИзделиях.ТекстЗапросаОтборНоменклатурыПоСвойствам("ВТОтборПоСвойствамНастройки");
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаВыходныеИзделияМаршрутнойКарты()
	
	Результат = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.КоличествоУпаковок * &КоличествоРезультата КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки,1) * &КоличествоРезультата КАК ЧИСЛО(15,3)) КАК Количество,
	|	ТабличнаяЧасть.Упаковка КАК Упаковка,
	|	ТабличнаяЧасть.Операция КАК Операция,
	|	ТабличнаяЧасть.Операция.Количество * &КоличествоРезультата КАК КоличествоОпераций,
	|	ВЫБОР
	|		КОГДА (ТабличнаяЧасть.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
	|				ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
	|				И &ИспользоватьПараметризацию
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ               КАК ИспользуетсяАвтовыбор,
	|	ПРЕДСТАВЛЕНИЕ("""") КАК СведенияАвтовыбора,
	|	ТабличнаяЧасть.СпособАвтовыбораНоменклатуры,
	|	ТабличнаяЧасть.СпособАвтовыбораХарактеристики,
	|	ТабличнаяЧасть.СвойствоСодержащееНоменклатуру,
	|	ТабличнаяЧасть.АлгоритмАвтовыбораХарактеристики,
	|
	|	// расчет по формуле:
	|	ВЫБОР
	|		КОГДА &ИспользоватьПараметризацию
	|			ТОГДА ТабличнаяЧасть.АлгоритмРасчетаКоличества
	|		ИНАЧЕ """" 
	|	КОНЕЦ КАК АлгоритмРасчетаКоличества,
	|
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.ДоляСтоимости        КАК ДоляСтоимости,
	|	0                                   КАК Идентификатор,
	|	ТабличнаяЧасть.КлючСвязи            КАК КлючСвязи
	|ИЗ
	|	Справочник.МаршрутныеКарты.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = &МаршрутнаяКарта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
	|		ПО ТабличнаяЧасть.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &МаршрутнаяКарта
	|	И ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
	|	И МаршрутныеКарты.ИспользоватьВыходныеИзделия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки";
	
	Результат = СтрЗаменить(
		Результат,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТабличнаяЧасть.Упаковка",
			"ТабличнаяЧасть.Номенклатура"));
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаВозвратныеОтходыМаршрутнойКарты()
	
	Результат =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.КоличествоУпаковок * &КоличествоРезультата КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки,1) * &КоличествоРезультата КАК ЧИСЛО(15,3)) КАК Количество,
	|	ТабличнаяЧасть.Упаковка КАК Упаковка,
	|	ТабличнаяЧасть.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ТабличнаяЧасть.Операция КАК Операция,
	|	ТабличнаяЧасть.Операция.Количество * &КоличествоРезультата КАК КоличествоОпераций,
	|	ВЫБОР
	|		КОГДА (ТабличнаяЧасть.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
	|				ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
	|				И &ИспользоватьПараметризацию
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ               КАК ИспользуетсяАвтовыбор,
	|	ПРЕДСТАВЛЕНИЕ("""") КАК СведенияАвтовыбора,
	|	ТабличнаяЧасть.СпособАвтовыбораНоменклатуры,
	|	ТабличнаяЧасть.СпособАвтовыбораХарактеристики,
	|	ТабличнаяЧасть.СвойствоСодержащееНоменклатуру,
	|	ТабличнаяЧасть.АлгоритмАвтовыбораХарактеристики,
	|
	|	// расчет по формуле:
	|	ВЫБОР
	|		КОГДА &ИспользоватьПараметризацию
	|			ТОГДА ТабличнаяЧасть.АлгоритмРасчетаКоличества
	|		ИНАЧЕ """" 
	|	КОНЕЦ КАК АлгоритмРасчетаКоличества,
	|	
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	0                                   КАК Идентификатор,
	|	ТабличнаяЧасть.КлючСвязи            КАК КлючСвязи
	|ИЗ
	|	Справочник.МаршрутныеКарты.ВозвратныеОтходы КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = &МаршрутнаяКарта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
	|		ПО ТабличнаяЧасть.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &МаршрутнаяКарта
	|	И ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
	|	И МаршрутныеКарты.ИспользоватьВыходныеИзделия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки";
	
	Результат = СтрЗаменить(
		Результат,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТабличнаяЧасть.Упаковка",
			"ТабличнаяЧасть.Номенклатура"));
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаМатериалыМаршрутнойКарты()
	
	Результат =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Операция КАК Операция,
	|	ТабличнаяЧасть.Операция.Количество * &КоличествоРезультата КАК КоличествоОпераций,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.КоличествоУпаковок * &КоличествоРезультата КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки,1) * &КоличествоРезультата КАК ЧИСЛО(15,3)) КАК Количество,
	|	ТабличнаяЧасть.Упаковка КАК Упаковка,
	|	ТабличнаяЧасть.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ВЫБОР
	|		КОГДА (ТабличнаяЧасть.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
	|				ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
	|				И &ИспользоватьПараметризацию
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                КАК ИспользуетсяАвтовыбор,
	|	ПРЕДСТАВЛЕНИЕ("""")  КАК СведенияАвтовыбора,
	|	ТабличнаяЧасть.СпособАвтовыбораНоменклатуры,
	|	ТабличнаяЧасть.СпособАвтовыбораХарактеристики,
	|	ТабличнаяЧасть.СвойствоСодержащееНоменклатуру,
	|	ТабличнаяЧасть.АлгоритмАвтовыбораХарактеристики,
	|
	|	// расчет по формуле:
	|	ВЫБОР
	|		КОГДА &ИспользоватьПараметризацию
	|			ТОГДА ТабличнаяЧасть.АлгоритмРасчетаКоличества
	|		ИНАЧЕ """" 
	|	КОНЕЦ КАК АлгоритмРасчетаКоличества,
	|
	|	ТабличнаяЧасть.ПрименениеМатериала КАК ПрименениеМатериала,
	|	0                                  КАК Идентификатор,
	|	ТабличнаяЧасть.КлючСвязи           КАК КлючСвязи
	|ИЗ
	|	Справочник.МаршрутныеКарты.МатериалыИУслуги КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = &МаршрутнаяКарта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
	|		ПО ТабличнаяЧасть.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &МаршрутнаяКарта
	|	И ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
	|	И МаршрутныеКарты.ИспользоватьМатериалы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки";
	
	Результат = СтрЗаменить(
		Результат,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТабличнаяЧасть.Упаковка",
			"ТабличнаяЧасть.Номенклатура"));
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаТрудозатратыМаршрутнойКарты()
	
	Результат = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.ВидРабот,
	|	ТабличнаяЧасть.Операция.Представление КАК СодержаниеРабот,
	|	ТабличнаяЧасть.Количество * &КоличествоРезультата КАК Количество,
	|	ТабличнаяЧасть.СтатьяКалькуляции,
	|	ТабличнаяЧасть.Операция,
	|	ТабличнаяЧасть.Операция.Количество * &КоличествоРезультата КАК КоличествоОпераций,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|
	|	// расчет по формуле:
	|	ВЫБОР
	|		КОГДА &ИспользоватьПараметризацию
	|			ТОГДА ТабличнаяЧасть.АлгоритмРасчетаКоличества
	|		ИНАЧЕ """" 
	|	КОНЕЦ КАК АлгоритмРасчетаКоличества
	|
	|ИЗ
	|	Справочник.МаршрутныеКарты.Трудозатраты КАК ТабличнаяЧасть
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = &МаршрутнаяКарта)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
	|		ПО ТабличнаяЧасть.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &МаршрутнаяКарта
	|	И ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
	|	И МаршрутныеКарты.ИспользоватьТрудозатраты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаВспомогательныеРЦМаршрутнойКарты()
	
	Результат =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.РабочийЦентр,
	|	ТабличнаяЧасть.Ссылка КАК Операция
	|ИЗ
	|	Справочник.ТехнологическиеОперации.ВспомогательныеРабочиеЦентры КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.Владелец = &МаршрутнаяКарта";
		
	Возврат Результат;

КонецФункции

Функция ТекстЗапросаОперацииМаршрутнойКарты(УстановитьОтборПоОперации)
	
	Результат = 
	"ВЫБРАТЬ
	|	&ОперацияРодитель                        КАК ОперацияРодитель,
	|	&КлючСвязиРодитель                       КАК КлючСвязиРодитель,
	|	&КлючСвязиВложенныйМаршрут               КАК КлючСвязиВложенныйМаршрут,
	|	ТехнологическиеОперации.Владелец         КАК МаршрутнаяКарта,
	|	ТехнологическиеОперации.Ссылка           КАК Операция,
	|	ТехнологическиеОперации.Представление    КАК ОперацияПредставление,
	|	ТехнологическиеОперации.Идентификатор    КАК Идентификатор,
	|	ТехнологическиеОперации.ВложенныйМаршрут КАК ВложенныйМаршрут,
	|	ТехнологическиеОперации.НомерОперации    КАК ИсходныйНомерОперации,
	|	ТехнологическиеОперации.НомерСледующейОперации КАК ИсходныйНомерСледующейОперации,
	|	ТехнологическиеОперации.ВидОперации      КАК ВидОперации,
	|	ТехнологическиеОперации.Количество       КАК Количество,
	|	ТехнологическиеОперации.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТехнологическиеОперации.Количество * &КоличествоРезультата КАК КоличествоНаПартию,
	|	ТехнологическиеОперации.ВариантНаладки   КАК ВариантНаладки,
	|	ТехнологическиеОперации.Загрузка         КАК Загрузка,
	|	ТехнологическиеОперации.Непрерывная      КАК Непрерывная,
	|	ТехнологическиеОперации.МожноПовторить   КАК МожноПовторить,
	|	ТехнологическиеОперации.МожноПропустить  КАК МожноПропустить,
	|	ТехнологическиеОперации.Контроль         КАК Контроль,
	|	ТехнологическиеОперации.СодержитВложенныйМаршрут КАК СодержитВложенныйМаршрут,
	|	&ТекстРеквизитыИсполнителяОперации,
	|	&ТекстРеквизитыРасчетаВремениВыполненияОперации
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = &МаршрутнаяКарта)
	|ГДЕ
	|	ТехнологическиеОперации.Владелец = &МаршрутнаяКарта
	|	И НЕ ТехнологическиеОперации.ПометкаУдаления
	|	И МаршрутныеКарты.ИспользоватьОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТехнологическиеОперации.НомерОперации";
	
	Результат = СтрЗаменить(
		Результат,
		"&ТекстРеквизитыИсполнителяОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыИсполнителяОперации("ТехнологическиеОперации"));
	
	Результат = СтрЗаменить(
		Результат,
		"&ТекстРеквизитыРасчетаВремениВыполненияОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыРасчетаВремениВыполненияОперации("ТехнологическиеОперации"));
	
	Если УстановитьОтборПоОперации Тогда
		
		Результат = СтрЗаменить(
			Результат,
			"ТехнологическиеОперации.Владелец = &МаршрутнаяКарта",
			"ТехнологическиеОперации.Ссылка = &Операция");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция МаксимальнаяГлубинаВложенности() Экспорт
	
	Возврат 5;
	
КонецФункции

Функция ЕстьАвтовыборНоменклатуры(ТабличнаяЧасть) Экспорт
	
	Результат = Ложь;
	
	Для каждого Строка Из ТабличнаяЧасть Цикл
		
		Если (
				ЗначениеЗаполнено(Строка.СпособАвтовыбораНоменклатуры)
				И Строка.СпособАвтовыбораНоменклатуры <> Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ
			)
			ИЛИ
			(
				ЗначениеЗаполнено(Строка.СпособАвтовыбораХарактеристики)
				И Строка.СпособАвтовыбораХарактеристики <> Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ
			) Тогда
			
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура РаспаковатьСоставНаборов(ДанныеМаршрутнойКарты, ИмяТЧ)

	НаборДанных = Неопределено;
	Если НЕ ДанныеМаршрутнойКарты.Свойство(ИмяТЧ, НаборДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ТипНоменклатурыНабор = Перечисления.ТипыНоменклатуры.Набор;
	Если НаборДанных.Найти(ТипНоменклатурыНабор, "ТипНоменклатуры") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоступноХранениеСоставаНабораВВариантахКомплектации = УправлениеДаннымиОбИзделияхПовтИсп.ДоступноХранениеСоставаНабораВВариантахКомплектации();
	
	СоставНабораКолонки = "Номенклатура, Характеристика, Количество, Упаковка, КоличествоУпаковок, ТипНоменклатуры";
	
	ЕстьПредставления = Ложь;
	Если НаборДанных.Колонки.Найти("НоменклатураПредставление") <> Неопределено Тогда
		ЕстьПредставления = Истина;
	КонецЕсли;
	
	ИндексСтроки           = 0;
	КоличествоСтрокТаблицы = НаборДанных.Количество();
	Пока ИндексСтроки < КоличествоСтрокТаблицы Цикл
		СтрокаНабораДанных = НаборДанных[ИндексСтроки];
		Если СтрокаНабораДанных.ТипНоменклатуры = ТипНоменклатурыНабор Тогда
			
			ПараметрыВариантаКомплектации = Неопределено;
			Если ДоступноХранениеСоставаНабораВВариантахКомплектации Тогда
				ПараметрыВариантаКомплектации = НаборыВызовСервера.ПараметрыВариантаКомплектацииНоменклатуры(
					СтрокаНабораДанных.Номенклатура,
					СтрокаНабораДанных.Характеристика);
			КонецЕсли;
			
			Если ПараметрыВариантаКомплектации = Неопределено
					ИЛИ НЕ ПараметрыВариантаКомплектации.Комплектующие.Количество() Тогда
				СтрокаНабораДанных.Номенклатура   = Справочники.Номенклатура.ПустаяСсылка();
				СтрокаНабораДанных.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				СтрокаНабораДанных.СпособАвтовыбораНоменклатуры   = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве;
				СтрокаНабораДанных.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ;
				ИндексСтроки = ИндексСтроки + 1;
			Иначе
				Для каждого СтрокаКомплектующие Из ПараметрыВариантаКомплектации.Комплектующие Цикл
					
					Если СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар
						И СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = НаборДанных.Вставить(ИндексСтроки);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабораДанных, , СоставНабораКолонки);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКомплектующие, , "Количество, Упаковка, КоличествоУпаковок");
					НоваяСтрока.Количество          = СтрокаКомплектующие.Количество * СтрокаНабораДанных.Количество;
					НоваяСтрока.КоличествоУпаковок  = СтрокаКомплектующие.КоличествоУпаковок * СтрокаНабораДанных.Количество;
					НоваяСтрока.Упаковка            = СтрокаКомплектующие.Упаковка;
					Если ЕстьПредставления Тогда
						НоваяСтрока.НоменклатураПредставление = Строка(НоваяСтрока.Номенклатура);
						НоваяСтрока.ХарактеристикаПредставление = Строка(НоваяСтрока.Характеристика);
					КонецЕсли;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
				
				НаборДанных.Удалить(СтрокаНабораДанных);
				КоличествоСтрокТаблицы = НаборДанных.Количество();
			КонецЕсли;
			
		Иначе
			ИндексСтроки = ИндексСтроки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
