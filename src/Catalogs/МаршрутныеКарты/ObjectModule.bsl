#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	// Дата окончания действия должна быть не меньше даты начала.
	Если ЗначениеЗаполнено(НачалоДействия) 
		И ЗначениеЗаполнено(КонецДействия) 
		И НачалоДействия > КонецДействия Тогда
		
		ТекстОшибки = НСтр("ru = 'Дата окончания действия должна быть не меньше даты начала действия.';
							|en = 'Action expiration date must be greater than the effective date.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"КонецДействия",
			,
			Отказ);
		
	КонецЕсли;
		
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ДоляСтоимости");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.КоличествоУпаковок");
	
	Если НЕ ИспользоватьВыходныеИзделия Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.Характеристика");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.КоличествоУпаковок");
	
	Если НЕ ИспользоватьМатериалы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Характеристика");
	КонецЕсли;
	
	Если НЕ ИспользоватьТрудозатраты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.ВидРабот");
	КонецЕсли;
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Количество");
	
	Если Статус <> Перечисления.СтатусыМаршрутныхКарт.Действует Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
		МассивНепроверяемыхРеквизитов.Добавить("НачалоДействия");
		МассивНепроверяемыхРеквизитов.Добавить("КонецДействия");
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
	КонецЕсли;
	
	Если ИспользоватьВыходныеИзделия Тогда
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "ВыходныеИзделия";
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций") Тогда
			СписокСтрок = ВыходныеИзделия.НайтиСтроки(Новый Структура("СпособАвтовыбораХарактеристики", 
				Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ));
			ПараметрыПроверки.СписокСтрок = СписокСтрок;
		КонецЕсли;
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "ВозвратныеОтходы";
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций") Тогда
			СписокСтрок = ВозвратныеОтходы.НайтиСтроки(Новый Структура("СпособАвтовыбораХарактеристики", 
				Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ));
			ПараметрыПроверки.СписокСтрок = СписокСтрок;
		КонецЕсли;
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	КонецЕсли;
	
	Если ИспользоватьМатериалы Тогда
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "МатериалыИУслуги";
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций") Тогда
			СписокСтрок = МатериалыИУслуги.НайтиСтроки(Новый Структура("СпособАвтовыбораХарактеристики", 
				Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ));
			ПараметрыПроверки.СписокСтрок = СписокСтрок;
		КонецЕсли;
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	КонецЕсли;
	
	ПроверитьЗаполнениеНоменклатурыИКоличества(Отказ);
	
	Если Статус = Перечисления.СтатусыМаршрутныхКарт.Действует Тогда
		
		ПроверитьЗаполнениеДолиСтоимости(Отказ);
		ПроверитьАвтовыборРасчетПоФормуламОтборПоСвойствам(Отказ);
		
		Если ИспользоватьОперации Тогда
			Справочники.МаршрутныеКарты.ПоследовательностьОперацийПравильная(Ссылка, Отказ);
			РедакторПроизводственногоПроцесса.ПроверитьКорректностьЗаполненияОпераций(Ссылка, Подразделение, Отказ);
		КонецЕсли;
		Если ПредварительныйБуфер = 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
		КонецЕсли; 
		Если ЗавершающийБуфер = 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ РассчитыватьКоэффициент Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентЧислитель");
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентЗнаменатель");
	КонецЕсли;
	
	ТабличныеЧастиОбъекта = Метаданные().ТабличныеЧасти;
	Если ИспользоватьВыходныеИзделия Тогда
		ПроверитьВыборОпераций("ВыходныеИзделия",  ТабличныеЧастиОбъекта.ВыходныеИзделия.Синоним, Отказ);
		ПроверитьВыборОпераций("ВозвратныеОтходы", ТабличныеЧастиОбъекта.ВозвратныеОтходы.Синоним, Отказ);
	КонецЕсли; 
	Если ИспользоватьМатериалы Тогда
		ПроверитьВыборОпераций("МатериалыИУслуги", ТабличныеЧастиОбъекта.МатериалыИУслуги.Синоним, Отказ);
	КонецЕсли; 
	Если ИспользоватьТрудозатраты Тогда
		ПроверитьВыборОпераций("Трудозатраты",ТабличныеЧастиОбъекта.Трудозатраты.Синоним, Отказ);
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если НЕ ЭтоГруппа Тогда
		
		ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
		Если ТипДанныхЗаполнения = Тип("СправочникСсылка.Номенклатура") Тогда
			
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "ЭтоГруппа, ВидНоменклатуры");
			Если СтруктураРеквизитов.ЭтоГруппа = Ложь Тогда
				ДляВидаИзделий = СтруктураРеквизитов.ВидНоменклатуры;
				
				НоваяСтрока = ВыходныеИзделия.Добавить();
				НоваяСтрока.КлючСвязи          = Новый УникальныйИдентификатор;
				НоваяСтрока.Номенклатура       = ДанныеЗаполнения;
				НоваяСтрока.КоличествоУпаковок = 1;
				УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(НоваяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
		Ответственный = Пользователи.ТекущийПользователь();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Статус         = Перечисления.СтатусыМаршрутныхКарт.ВРазработке;
	Ответственный  = Пользователи.ТекущийПользователь();
	Подразделение  = Справочники.СтруктураПредприятия.ПустаяСсылка();
	НачалоДействия = '00010101';
	
	ОчиститьВыборОпераций();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если НЕ ЭтоГруппа Тогда
		
		Если ПометкаУдаления Тогда
			Статус = Перечисления.СтатусыМаршрутныхКарт.Закрыта;
			ОчиститьВыборОпераций();
			УбратьПризнакОсновнойМаршрутнойКарты();
		КонецЕсли;
		
		ПередЗаписьюДействующейМаршрутнойКарты(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Процедура ПередЗаписьюДействующейМаршрутнойКарты(Отказ)

	Если Статус = Перечисления.СтатусыМаршрутныхКарт.Действует И НЕ ПометкаУдаления И НЕ Отказ Тогда
		
		ОчиститьНеиспользуемыеДанные();
		
		ОбновитьПривязкуОпераций(Отказ);
		ПроверитьВложенныеМаршруты(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет значение реквизита Операция в табличной части ВыходныеИзделия
//  - если реквизит ОперацияРедактирование не пустой то подставляет значение из него
//  - если реквизит ОперацияРедактирование пустой то подставляет последнюю операцию.
//
Процедура ОбновитьПривязкуОпераций(Отказ)
	
	ПерваяОперация = Неопределено;
	ПоследняяОперация = Неопределено;
	
	ПустаяОперация = Справочники.ТехнологическиеОперации.ПустаяСсылка();
	
	ПолучитьКрайниеОперации = ВыходныеИзделия.Найти(ПустаяОперация, "ОперацияРедактирование") <> Неопределено
		ИЛИ ВозвратныеОтходы.Найти(ПустаяОперация, "ОперацияРедактирование") <> Неопределено
		ИЛИ МатериалыИУслуги.Найти(ПустаяОперация, "ОперацияРедактирование") <> Неопределено
		ИЛИ Трудозатраты.Найти(ПустаяОперация, "ОперацияРедактирование") <> Неопределено;
	
	Если ПолучитьКрайниеОперации Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТехнологическиеОперации.Ссылка КАК Ссылка,
			|	ИСТИНА КАК ПерваяОперация,
			|	ВЫБОР
			|		КОГДА ТехнологическиеОперации.НомерСледующейОперации = 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПоследняяОперация
			|ИЗ
			|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
			|ГДЕ
			|	ТехнологическиеОперации.Владелец = &Владелец
			|	И ТехнологическиеОперации.НомерОперации = 1
			|	И НЕ ТехнологическиеОперации.ПометкаУдаления
			|	И ТехнологическиеОперации.СодержитВложенныйМаршрут = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ТехнологическиеОперации.Ссылка,
			|	ВЫБОР
			|		КОГДА ТехнологическиеОперации.НомерОперации = 1
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ,
			|	ИСТИНА
			|ИЗ
			|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
			|ГДЕ
			|	ТехнологическиеОперации.Владелец = &Владелец
			|	И ТехнологическиеОперации.НомерСледующейОперации = 0
			|	И НЕ ТехнологическиеОперации.ПометкаУдаления
			|	И ТехнологическиеОперации.СодержитВложенныйМаршрут = ЛОЖЬ");
		
		Запрос.УстановитьПараметр("Владелец", Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ПерваяОперация Тогда
				ПерваяОперация = Выборка.Ссылка;
			КонецЕсли;
			
			Если Выборка.ПоследняяОперация Тогда
				ПоследняяОперация = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить("ВыходныеИзделия");
	ТабличныеЧасти.Добавить("ВозвратныеОтходы");
	ТабличныеЧасти.Добавить("МатериалыИУслуги");
	ТабличныеЧасти.Добавить("Трудозатраты");
	
	Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		Для каждого Строка Из ЭтотОбъект[ТабличнаяЧасть] Цикл
			
			Если Строка.ОперацияРедактирование.Пустая() Тогда
				
				Если ТабличнаяЧасть = "ВыходныеИзделия" ИЛИ ТабличнаяЧасть = "ВозвратныеОтходы" Тогда
					Строка.Операция = ПоследняяОперация;
				Иначе
					Строка.Операция = ПерваяОперация;
				КонецЕсли;
				
			Иначе
				
				Строка.Операция = Строка.ОперацияРедактирование;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВложенныеМаршруты(Отказ) Экспорт
	
	Глубина = 0;
	МаксГлубина = Справочники.МаршрутныеКарты.МаксимальнаяГлубинаВложенности();
	
	ПутиВГрафе = Новый Соответствие;
	ПутиВГрафе.Вставить(Ссылка, Новый Массив);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныеМаршруты.Владелец                КАК Владелец,
	|	ВложенныеМаршруты.Владелец.Представление  КАК ВладелецПредставление,
	|	ВложенныеМаршруты.ВложенныйМаршрут        КАК Ссылка,
	|	ВложенныеМаршруты.Наименование            КАК Представление,
	|// проверка реквизитов вложенного маршрута
	|	ВложенныеМаршруты.ВложенныйМаршрут.Статус        КАК Статус,
	|	ВложенныеМаршруты.ВложенныйМаршрут.Подразделение КАК Подразделение
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ВложенныеМаршруты
	|ГДЕ
	|	ВложенныеМаршруты.Владелец В(&МассивСсылок)
	|	И ВложенныеМаршруты.СодержитВложенныйМаршрут
	|	И НЕ ВложенныеМаршруты.ПометкаУдаления");
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	Пока Глубина <> МаксГлубина И МассивСсылок.ВГраница() <> -1 Цикл
		
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		МассивСсылок.Очистить();
		ПутиВГрафеНовый = Новый Соответствие;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ПутиВГрафе[Выборка.Владелец].Найти(Выборка.Владелец) = Неопределено Тогда
				ПутиВГрафе[Выборка.Владелец].Вставить(0,Выборка.Владелец);
			КонецЕсли;
			ПутиВГрафеНовый.Вставить(Выборка.Ссылка, ПутиВГрафе[Выборка.Владелец]); 
			
			МассивСсылок.Добавить(Выборка.Ссылка);
			
			ПроверитьРеквизитыВложенногоМаршрута(Выборка, Отказ);
			
		КонецЦикла;
		
		ПутиВГрафе = ПутиВГрафеНовый;
		ПутиВГрафеНовый = Неопределено;
		Глубина = Глубина + 1;
		
	КонецЦикла;
	
	Если Глубина <> МаксГлубина Тогда
		Возврат;
	КонецЕсли;
	
	ПутьВГрафе = Новый ТаблицаЗначений;
	ПутьВГрафе.Колонки.Добавить("Вершина", Новый ОписаниеТипов("СправочникСсылка.МаршрутныеКарты"));
	ПутьВГрафе.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Для каждого КлючИЗначение Из ПутиВГрафе Цикл
		Путь = КлючИЗначение.Значение;
		Для Индекс = 0 По Путь.ВГраница() Цикл
			НоваяСтрока = ПутьВГрафе.Добавить();
			НоваяСтрока.Вершина = Путь[Индекс];
			НоваяСтрока.Порядок = Индекс;
		КонецЦикла;
		Прервать;
	КонецЦикла;
	
	ТекстПутьВГрафе = "";
	Если ПутьВГрафе.Количество() > 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПутьВГрафе.Вершина,
		|	ПутьВГрафе.Порядок
		|ПОМЕСТИТЬ ВтПутьВГрафе
		|ИЗ
		|	&ПутьВГрафе КАК ПутьВГрафе
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(МаршрутныеКарты.Ссылка.Код, """") КАК Код
		|ИЗ
		|	ВтПутьВГрафе КАК ПутьВГрафе
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО ПутьВГрафе.Вершина = МаршрутныеКарты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	-ПутьВГрафе.Порядок");
		Запрос.УстановитьПараметр("ПутьВГрафе", ПутьВГрафе);
		
		Маршрут = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		ТекстПутьВГрафе = "/" + СтрСоединить(Маршрут, "/") + "/";
		
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Превышена максимальная глубина вложенности маршрутных карт %1';
						|en = 'Maximum nesting depth of the %1 route sheet is exceeded'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, ТекстПутьВГрафе);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, 
		ЭтотОбъект,
		,
		,
		Отказ);
	
КонецПроцедуры

Процедура ПроверитьРеквизитыВложенногоМаршрута(Выборка, Отказ)
	
	Если Выборка.Статус <> Перечисления.СтатусыМаршрутныхКарт.Действует Тогда
		
		ТекстОшибки = НСтр("ru = 'Статус вложенного маршрута ""%1"" маршрутной карты ""%2"" должен быть ""Действует"".';
							|en = 'Status of ""%1"" nested route of the ""%2"" route sheet must be set to ""Valid"".'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Выборка.Представление, Выборка.ВладелецПредставление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, 
			Выборка.Владелец,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если Выборка.Подразделение <> ЭтотОбъект.Подразделение Тогда
		
		ТекстОшибки = НСтр("ru = 'Подразделение вложенного маршрута ""%1"" должно совпадать с подразделением маршрутной картой ""%2"".';
							|en = 'Business unit specified in the ""%1"" nested route must match the business unit specified in the ""%2"" route sheet.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Выборка.Представление, Выборка.ВладелецПредставление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, 
			Выборка.Владелец,
			,
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьВыборОпераций()

	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить("ВыходныеИзделия");
	ТабличныеЧасти.Добавить("ВозвратныеОтходы");
	ТабличныеЧасти.Добавить("МатериалыИУслуги");
	ТабличныеЧасти.Добавить("Трудозатраты");
	
	Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		Для каждого Строка Из ЭтотОбъект[ТабличнаяЧасть] Цикл
			
			Строка.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
			Строка.ОперацияРедактирование = Справочники.ТехнологическиеОперации.ПустаяСсылка();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВыборОпераций(ИмяТаблицы, ПредставлениеТаблицы, Отказ)

	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Не допускается выбор операций помеченных на удаление (список ""%1"", строка %2).';
							|en = 'It is not allowed to select operations marked for deletion (the ""%1"" list, line %2).'");
	
	ТабличнаяЧасть = ЭтотОбъект[ИмяТаблицы]; // СправочникТабличнаяЧасть.МаршрутныеКарты.ВыходныеИзделия
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если СтрокаТаблицы.ОперацияРедактирование.Пустая() 
			ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ОперацияРедактирование, "ПометкаУдаления") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
																					ПредставлениеТаблицы, 
																					Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
																					
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, СтрокаТаблицы.НомерСтроки, "ОперацияРедактирование");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ); 						
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДолиСтоимости(Отказ)
	
	Если НЕ ИспользоватьВыходныеИзделия
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством")
		ИЛИ ВыходныеИзделия.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Доля стоимости"" в строке %1 списка ""Выходные изделия""';
							|en = 'Column ""Cost share"" in line %1 of the ""Finished products"" list is not filled in'");
	Для каждого СтрокаТаблицы Из ВыходныеИзделия Цикл
		Если СтрокаТаблицы.ДоляСтоимости = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
																						Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
																						
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", СтрокаТаблицы.НомерСтроки, "ДоляСтоимости");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНоменклатурыИКоличества(Отказ)
	
	ШаблонСообщенияНоменклатура = НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке %1 списка ""%2""';
										|en = 'Column ""Items"" in line %1 of the ""%2"" list is not filled in'");
	ШаблонСообщенияКоличество   = НСтр("ru = 'Не заполнена колонка ""Количество"" в строке %1 списка ""%2""';
										|en = 'Column ""Quantity"" in line %1 of the ""%2"" list is not filled in'");
	
	МетаданныеТЧ = Метаданные.Справочники.МаршрутныеКарты.ТабличныеЧасти;
	
	РеквизитыПроверки = "ИмяТЧ, Номенклатура, Количество";
	
	МассивПроверок = Новый Массив;
	Если ИспользоватьВыходныеИзделия Тогда
		МассивПроверок.Добавить(Новый Структура(РеквизитыПроверки, "ВыходныеИзделия", "Номенклатура", "КоличествоУпаковок"));
		МассивПроверок.Добавить(Новый Структура(РеквизитыПроверки, "ВозвратныеОтходы", "Номенклатура", "КоличествоУпаковок"));
	КонецЕсли;
	Если ИспользоватьМатериалы Тогда
		МассивПроверок.Добавить(Новый Структура(РеквизитыПроверки, "МатериалыИУслуги", "Номенклатура", "КоличествоУпаковок"));
	КонецЕсли;
	Если ИспользоватьТрудозатраты Тогда
		МассивПроверок.Добавить(Новый Структура(РеквизитыПроверки, "Трудозатраты", "", "Количество"));
	КонецЕсли;
	
	Для каждого Проверка Из МассивПроверок Цикл
		
		ТабличнаяЧасть = ЭтотОбъект[Проверка.ИмяТЧ]; // СправочникТабличнаяЧасть.МаршрутныеКарты.ВыходныеИзделия
		Для каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
			
			Если Проверка.Номенклатура <> ""
				И ТекущаяСтрока[Проверка.Номенклатура].Пустая()
				И (ТекущаяСтрока.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ 
					ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций")) Тогда
				
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщенияНоменклатура, 
							Формат(ТекущаяСтрока.НомерСтроки, "ЧГ="),
							МетаданныеТЧ[Проверка.ИмяТЧ].Синоним);
							
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Проверка.ИмяТЧ, ТекущаяСтрока.НомерСтроки, Проверка.Номенклатура);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			КонецЕсли;
			
			Если Статус = Перечисления.СтатусыМаршрутныхКарт.Действует Тогда
				
				Если ТекущаяСтрока[Проверка.Количество] = 0
					И (ПустаяСтрока(ТекущаяСтрока.АлгоритмРасчетаКоличества) 
						ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций")) Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонСообщенияКоличество, 
											Формат(ТекущаяСтрока.НомерСтроки, "ЧГ="),
											МетаданныеТЧ[Проверка.ИмяТЧ].Синоним);
											
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Проверка.ИмяТЧ, ТекущаяСтрока.НомерСтроки, Проверка.Количество);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьАвтовыборРасчетПоФормуламОтборПоСвойствам(Отказ)

	Если НЕ (ИспользоватьВыходныеИзделия
				ИЛИ ИспользоватьМатериалы 
				ИЛИ ИспользоватьТрудозатраты) 
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций") Тогда
		Возврат;
	КонецЕсли;
	
#Область Автовыбор

	МассивПроверок = Новый Массив;
	Если ИспользоватьВыходныеИзделия Тогда
		МассивПроверок.Добавить(Новый Структура("ИмяТЧ, Представление, Реквизит", "ВыходныеИзделия", НСтр("ru = 'Выходные изделия';
																											|en = 'Finished products'"), "Номенклатура"));
		МассивПроверок.Добавить(Новый Структура("ИмяТЧ, Представление, Реквизит", "ВозвратныеОтходы", НСтр("ru = 'Промежуточный и побочный выпуск';
																											|en = 'Intermediate and side release'"), "Номенклатура"));
	КонецЕсли;
	Если ИспользоватьМатериалы Тогда
		МассивПроверок.Добавить(Новый Структура("ИмяТЧ, Представление, Реквизит", "МатериалыИУслуги", НСтр("ru = 'Материалы и работы';
																											|en = 'Materials and works'"), "Номенклатура"));
	КонецЕсли;
	
	СписокВсехДоступныхСвойств = УправлениеДаннымиОбИзделиях.ПолучитьСвойстваДляАвтовыбора(ДляВидаИзделий); 
	
	// Проверим, что свойство в котором указывается номенклатура есть в продукции
	ШаблонСообщения = НСтр("ru = 'В настройке автовыбора определено, что номенклатура указывается в свойстве ""%1"", но это свойство не входит в состав свойств основного изделия (список ""%2"", строка %3).';
							|en = 'In auto selection settings, it is determined that items are specified in the ""%1"" property, but this property is not included in main product properties (the ""%2"" list, line %3).'");
	ТекстНеЗаданоСвойствоАвтовыбора = НСтр("ru = 'В настройке автовыбора определено, что номенклатура указывается в свойстве основного изделия, но свойство не задано.';
											|en = 'In auto selection settings, it is determined that items are specified in the property of the main product, but this property is not set.'");
	ТекстНеЗаданАлгоритмАвтовыбора = НСтр("ru = 'В настройке автовыбора определено, что характеристика определяется по алгоритму, но алгоритм не задан.';
											|en = 'In auto selection settings, it is determined that a variant is defined by algorithm, but the algorithm is not specified.'");
	Для каждого Проверка Из МассивПроверок Цикл
		
		ТабличнаяЧасть = ЭтотОбъект[Проверка.ИмяТЧ]; // СправочникТабличнаяЧасть.МаршрутныеКарты.ВыходныеИзделия
		Для каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
			
			ТекстСообщения = "";
			Если ТекущаяСтрока.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции Тогда
				
				Если ЗначениеЗаполнено(ТекущаяСтрока.СвойствоСодержащееНоменклатуру) Тогда
					Если СписокВсехДоступныхСвойств.Найти(ТекущаяСтрока.СвойствоСодержащееНоменклатуру, "Свойство") = Неопределено Тогда
						ЗаголовокСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.СвойствоСодержащееНоменклатуру, "Заголовок");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщения, 
							ЗаголовокСвойства,
							Проверка.Представление,
							Формат(ТекущаяСтрока.НомерСтроки, "ЧГ="));
					КонецЕсли;
				Иначе
					ТекстСообщения = ТекстНеЗаданоСвойствоАвтовыбора;
				КонецЕсли;
				
			ИначеЕсли ТекущаяСтрока.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму 
				И НЕ ЗначениеЗаполнено(ТекущаяСтрока.АлгоритмАвтовыбораХарактеристики) Тогда
				ТекстСообщения = ТекстНеЗаданАлгоритмАвтовыбора;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Проверка.ИмяТЧ, ТекущаяСтрока.НомерСтроки, "Номенклатура");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
#КонецОбласти

#Область ОтборПоСвойствам
	
	СписокВсехДоступныхСвойств = УправлениеДаннымиОбИзделиях.ПолучитьСвойстваДляОтбораПоСвойствам(ДляВидаИзделий,,Ложь);
	
	// Настройки использования и расчета количества
	Если ИспользоватьТрудозатраты Тогда
		МассивПроверок.Добавить(Новый Структура("ИмяТЧ, Представление, Реквизит", "Трудозатраты", НСтр("ru = 'Трудозатраты';
																										|en = 'Labor costs'"), "ВидРабот"));
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'В настройках использования указаны неверные свойства (список ""%1"", строка %2).';
							|en = 'Incorrect properties are specified in usage settings (the ""%1"" list, line %2).'");
	
	Для каждого Проверка Из МассивПроверок Цикл
		
		ТабличнаяЧасть = ЭтотОбъект[Проверка.ИмяТЧ]; // СправочникТабличнаяЧасть.МаршрутныеКарты.ВыходныеИзделия
		Для каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
			
			СтрокиОтбор = ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", ТекущаяСтрока.КлючСвязи));
			
			Для каждого СтрокаОтбор Из СтрокиОтбор Цикл
				
				Если СписокВсехДоступныхСвойств.Найти(СтрокаОтбор.Свойство, "Свойство") = Неопределено Тогда
					
					ТекстСообщения = СтрШаблон(ШаблонСообщения, Проверка.Представление, Формат(ТекущаяСтрока.НомерСтроки, "ЧГ="));
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Проверка.ИмяТЧ, ТекущаяСтрока.НомерСтроки, Проверка.Реквизит);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, 
						ЭтотОбъект, 
						Поле,
						, 
						Отказ);
						
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
#КонецОбласти

#Область РасчетПоФормулам

	ТабличныеЧастиОбъекта = Метаданные().ТабличныеЧасти;
	
	Отбор = Новый Структура("АлгоритмРасчетаКоличества", "");
	
	Для Ит = - МассивПроверок.ВГраница() По 0 Цикл
		Проверка = МассивПроверок[-Ит];
		Если ЭтотОбъект[Проверка.ИмяТЧ].НайтиСтроки(Отбор).Количество() = ЭтотОбъект[Проверка.ИмяТЧ].Количество() Тогда
			МассивПроверок.Удалить(-Ит);
		Иначе
			ИмяРеквизита = "КоличествоУпаковок";
			Если ТабличныеЧастиОбъекта[Проверка.ИмяТЧ].Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
				ИмяРеквизита = "Количество";
			КонецЕсли;
			Проверка.Реквизит = ИмяРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПроверок.Количество() > 0 Тогда
		
		ОписаниеИсточников = Справочники.МаршрутныеКарты.ВыгрузитьДанныеДляКонструктораФормул(ЭтотОбъект, "");
		
		ПараметрыПроверки = Новый Структура("Состав, ВыводитьСообщения, ОчищатьНеНайденные", МассивПроверок, Истина, Ложь);
		
		УправлениеДаннымиОбИзделиях.ПроверитьОчиститьАлгоритмРасчетаКоличества(ЭтотОбъект, ОписаниеИсточников, ПараметрыПроверки, Отказ);
		
	КонецЕсли;
	
#КонецОбласти
	
КонецПроцедуры

Процедура УбратьПризнакОсновнойМаршрутнойКарты()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновныеМаршрутныеКарты.Номенклатура,
	|	ОсновныеМаршрутныеКарты.Характеристика,
	|	ОсновныеМаршрутныеКарты.Подразделение
	|ИЗ
	|	РегистрСведений.ОсновныеМаршрутныеКарты КАК ОсновныеМаршрутныеКарты
	|ГДЕ
	|	ОсновныеМаршрутныеКарты.МаршрутнаяКарта = &МаршрутнаяКарта";
	
	Запрос.УстановитьПараметр("МаршрутнаяКарта", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаписьОсновная = РегистрыСведений.ОсновныеМаршрутныеКарты.СоздатьМенеджерЗаписи();
		ЗаписьОсновная.Номенклатура   = Выборка.Номенклатура;
		ЗаписьОсновная.Характеристика = Выборка.Характеристика;
		ЗаписьОсновная.Подразделение  = Выборка.Подразделение;
		ЗаписьОсновная.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеДанные()
	
	ИспользоватьПараметризациюРесурсныхСпецификаций = ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций");
	
	Для каждого ИмяТЧ Из СтрРазделить("ВыходныеИзделия,ВозвратныеОтходы,МатериалыИУслуги",",") Цикл
		Для каждого Строка Из ЭтотОбъект[ИмяТЧ] Цикл
			Если Не ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) И ИспользоватьПараметризациюРесурсныхСпецификаций Тогда
				Строка.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого Строка Из Трудозатраты Цикл
		Если Не ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) И ИспользоватьПараметризациюРесурсныхСпецификаций Тогда
			Строка.Количество = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли