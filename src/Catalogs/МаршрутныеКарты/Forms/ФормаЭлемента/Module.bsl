#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ОсновнаяЕдиницаВремениБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
	РассчитыватьКоэффициентЧисло = Объект.РассчитыватьКоэффициент;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	УстановитьОтборВСпискеОпераций();
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	ЗаполнитьЕстьАвтовыборНоменклатуры();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ РазбиватьМаршрутныеЛисты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("МаксимальноеКоличествоЕдиницПартийИзделия");
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ТекущийОбъект.МаксимальноеКоличествоЕдиницПартийИзделия = МаксимальноеКоличествоЕдиницПартийИзделия;

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_МаршрутныеКарты",, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	УстановитьОтборВСпискеОпераций();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	УстановитьДоступностьКомандИзмененияСтатуса();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Элементы.Операции.Обновить();
		
	ИначеЕсли ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, ДоступностьРеквизитов);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаАвтовыбораНоменклатуры" Тогда
		
		ОбработкаВыбораНастройкаАвтовыбораНоменклатуры(ИсточникВыбора.ИмяТЧ, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаОтбораПоСвойствамИРасчетаПоФормулам" Тогда
		
		ОбработкаВыбораНастройкаОтбораПоСвойствамИРасчетаПоФормулам(ИсточникВыбора.ИмяТЧ, ВыбранноеЗначение);
		
	Иначе
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПредварительногоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияПредварительногоБуфера.Пустая() Тогда
		Объект.ЕдиницаИзмеренияПредварительногоБуфера = ОсновнаяЕдиницаВремениБуфера;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияЗавершающегоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияЗавершающегоБуфера.Пустая() Тогда
		Объект.ЕдиницаИзмеренияЗавершающегоБуфера = ОсновнаяЕдиницаВремениБуфера;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РазбиватьМаршрутныеЛистыПриИзменении(Элемент)
	
	Если НЕ РазбиватьМаршрутныеЛисты Тогда
		Если МаксимальноеКоличествоЕдиницПартийИзделия <> 0 Тогда
			МаксимальноеКоличествоЕдиницПартийИзделия = 0;
		КонецЕсли; 
	Иначе
		Если МаксимальноеКоличествоЕдиницПартийИзделия = 0 Тогда
			МаксимальноеКоличествоЕдиницПартийИзделия = 1;
		КонецЕсли; 
	КонецЕсли;
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйБуферПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершающийБуферПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьКоэффициентЧисло0ПриИзменении(Элемент)
	
	ПриИзмененииРассчитыватьКоэффициентЧисло();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьКоэффициентЧисло1ПриИзменении(Элемент)
	
	ПриИзмененииРассчитыватьКоэффициентЧисло();
	
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентЗнаменательПриИзменении(Элемент)
	
	НастроитьРасшифровкуКоэффициентЗнаменатель(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОперации

&НаКлиенте
Процедура ОперацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ДобавитьОперацию(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("ВыходныеИзделия", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ПриВводеНовойСтрокиМаршрутнойКарты(ЭтаФорма, Элемент.Имя, Элементы[Элемент.Имя].ТекущиеДанные, Копирование);
		
		ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ВыходныеИзделия"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииНоменклатурыВСтрокеСАвтовыбором(ТекущаяСтрока, Объект);
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущаяСтрока, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущиеДанные, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		КоличествоИзделийСТипомСтоимостиРассчитывается = Объект.ВыходныеИзделия.Количество();
		ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
		Если Объект.ДляВидаИзделий.Пустая() 
			И ТекущиеДанные.НомерСтроки = 1 
			И НЕ ТекущиеДанные.Номенклатура.Пустая() Тогда
			Объект.ДляВидаИзделий = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиАвтовыбораНоменклатуры(
		Элементы.ВыходныеИзделия,
		Элементы.ВыходныеИзделия.ВыделенныеСтроки,
		Объект.СоответствиеСвойств);
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
		Элементы.ВыходныеИзделия,
		Элементы.ВыходныеИзделия.ВыделенныеСтроки,
		Объект.ОтборПоСвойствам);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	
	КоличествоИзделийСТипомСтоимостиРассчитывается = Объект.ВыходныеИзделия.Количество();
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ВыходныеИзделия");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("ВозвратныеОтходы", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииНоменклатурыВСтрокеСАвтовыбором(ТекущаяСтрока, Объект);
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущаяСтрока, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущиеДанные, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
	
		ПриВводеНовойСтрокиМаршрутнойКарты(ЭтаФорма, Элемент.Имя, Элементы[Элемент.Имя].ТекущиеДанные, Копирование);
	
		ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПередУдалением(Элемент, Отказ)
	
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиАвтовыбораНоменклатуры(
		Элементы.ВозвратныеОтходы,
		Элементы.ВозвратныеОтходы.ВыделенныеСтроки,
		Объект.СоответствиеСвойств);
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
		Элементы.ВозвратныеОтходы,
		Элементы.ВозвратныеОтходы.ВыделенныеСтроки,
		Объект.ОтборПоСвойствам);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПослеУдаления(Элемент)
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходы_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходы_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ВозвратныеОтходы");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИУслуги

&НаКлиенте
Процедура МатериалыИУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("МатериалыИУслуги", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ПриВводеНовойСтрокиМаршрутнойКарты(ЭтаФорма, Элемент.Имя, Элементы[Элемент.Имя].ТекущиеДанные, Копирование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередУдалением(Элемент, Отказ)
	
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиАвтовыбораНоменклатуры(
				Элементы.МатериалыИУслуги,
				Элементы.МатериалыИУслуги.ВыделенныеСтроки,
				Объект.СоответствиеСвойств);
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
				Элементы.МатериалыИУслуги,
				Элементы.МатериалыИУслуги.ВыделенныеСтроки,
				Объект.ОтборПоСвойствам);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "МатериалыИУслуги"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииНоменклатурыВСтрокеСАвтовыбором(ТекущаяСтрока, Объект);
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущаяСтрока, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущиеДанные, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("Трудозатраты", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПередУдалением(Элемент, Отказ)
	
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
		Элементы.Трудозатраты,
		Элементы.Трудозатраты.ВыделенныеСтроки,
		Объект.ОтборПоСвойствам);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ПриВводеНовойСтрокиМаршрутнойКарты(ЭтаФорма, Элемент.Имя, Элементы[Элемент.Имя].ТекущиеДанные, Копирование);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура КомандаСхемаОпераций(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МаршрутнаяКарта", Объект.Ссылка);
	
	ОткрытьФорму("Отчет.СхемаМаршрутнойКарты.Форма", ПараметрыФормы); 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоМаршрутнойКарте(Команда)
	
	ПараметрыОтбора = Новый Структура("ПометкаУдаления", Ложь);
	ПараметрыФормы = Новый Структура("ЗапретитьВыбор,Отбор", Объект.Ссылка, ПараметрыОтбора);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикЗаполнитьПоМаршрутнойКарте", ЭтотОбъект);
	ОткрытьФорму("Справочник.МаршрутныеКарты.ФормаВыбора", 
				ПараметрыФормы,,,,, 
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусВРазработке(Команда)
	
	Если НЕ ДоступностьРеквизитов Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусВРазработкеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.МаршрутныеКарты.Форма.РазблокированиеРеквизитов", 
								Новый Структура("Объект", Объект.Ссылка),,,,,
								ОписаниеОповещения,
								РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусДействует(Команда)
	
	УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.Действует"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусЗакрыта(Команда)
	
	УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.Закрыта"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьЗаполнение(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнениеПринудительно() Тогда
		ТекстПредупреждения = НСтр("ru = 'Маршрутную карту можно сделать действующей.';
									|en = '""Valid"" status can be set for this route sheet.'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Маршрутная карта не может быть действующей.';
									|en = '""Valid"" status cannot be set for this route sheet.'");
	КонецЕсли;
	
	ПоказатьПредупреждение(,ТекстПредупреждения,, НСтр("ru = 'Проверка маршрутной карты';
														|en = 'Check route sheet'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастроитьСостав(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИспользоватьВыходныеИзделия", Объект.ИспользоватьВыходныеИзделия);
	ПараметрыФормы.Вставить("ИспользоватьМатериалы", Объект.ИспользоватьМатериалы);
	ПараметрыФормы.Вставить("ИспользоватьОперации", Объект.ИспользоватьОперации);
	ПараметрыФормы.Вставить("ИспользоватьТрудозатраты", Объект.ИспользоватьТрудозатраты);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьСоставЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.МаршрутныеКарты.Форма.НастройкаСоставаМаршрутнойКарты", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Объект не записан!';
										|en = 'Object is not saved.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросКопироватьМаршрутнуюКарту", ЭтаФорма);
	УправлениеДаннымиОбИзделияхКлиент.ПоказатьВопросКопироватьМаршрутнуюКартуСОперациями(ОписаниеОповещения);
	
КонецПроцедуры

#Область ВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделия_НастроитьАвтовыборНоменклатуры(Команда)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Выходные изделия"".';
								|en = 'Line of the ""Finished products"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ВыходныеИзделия", "Объект");
		Возврат;
	КонецЕсли;
	
	СоответствиеСвойств = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.СоответствиеСвойств,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаСоответствияСвойств());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатуры(
							ЭтаФорма,
							"ВыходныеИзделия",
							СоответствиеСвойств,
							Объект.ДляВидаИзделий,
							НСтр("ru = 'Указывается в маршрутной карте';
								|en = 'Specified in the route sheet'"),
							НЕ ДоступностьРеквизитов);

КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Выходные изделия"".';
								|en = 'Line of the ""Finished products"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ВыходныеИзделия", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

#КонецОбласти

#Область ВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходы_НастроитьАвтовыборНоменклатуры(Команда)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Побочный и промежуточный выпуск"".';
								|en = 'Line of the ""Side and intermediate release"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ВозвратныеОтходы", "Объект");
		Возврат;
	КонецЕсли;
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатуры(
							ЭтаФорма,
							"ВозвратныеОтходы",
							Объект.СоответствиеСвойств,
							Объект.ДляВидаИзделий,
							НСтр("ru = 'Указывается в маршрутной карте';
								|en = 'Specified in the route sheet'"),
							НЕ ДоступностьРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходы_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)

	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Побочный и промежуточный выпуск"".';
								|en = 'Line of the ""Side and intermediate release"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ВозвратныеОтходы", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "ВозвратныеОтходы");
	
КонецПроцедуры

#КонецОбласти

#Область Материалы

&НаКлиенте
Процедура КомандаНастроитьАвтовыборМатериалов(Команда)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Материалы и работы"".';
								|en = 'Row of the ""Materials and works"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		Возврат;
	КонецЕсли;
	
	СоответствиеСвойств = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.СоответствиеСвойств,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаСоответствияСвойств());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатуры(
							ЭтаФорма,
							"МатериалыИУслуги",
							СоответствиеСвойств, 
							Объект.ДляВидаИзделий,
							НСтр("ru = 'Указывается в маршрутной карте';
								|en = 'Specified in the route sheet'"),
							НЕ ДоступностьРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Материалы и работы"".';
								|en = 'Row of the ""Materials and works"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "МатериалыИУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Трудозатраты"".';
								|en = 'Line of the ""Labor costs"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Трудозатраты", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "Трудозатраты");

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПодборМатериалов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	МассивТиповНоменклатуры = УправлениеДаннымиОбИзделияхКлиентСервер.МассивДоступныхТиповНоменклатуры(ЭтотОбъект, "МатериалыИУслуги");
	ДоступныеТипыНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ДоступныеТипыНоменклатуры));
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", 
			ПараметрыФормы, 
			ЭтаФорма, 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("МатериалыИУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("МатериалыИУслуги");
	
КонецПроцедуры

#КонецОбласти

#Область Операции

&НаКлиенте
Процедура КомандаДобавитьОперацию(Команда)
	
	Элементы.Операции.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВложенныйМаршрут(Команда)
	
	ДобавитьОперацию(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьВидОперацииНаВложенныйМаршрут(Команда)
	
	ИзменитьВидОперации(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьВидОперацииНаОперация(Команда)
	
	ИзменитьВидОперации(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьОперациюВперед(Команда)
	
	ПереместитьОперацию(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьОперациюНазад(Команда)
	
	ПереместитьОперацию(Ложь);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область ПроцедурыПодсистемыСвойств

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаКлиенте
Процедура СкопироватьСтрокиТЧ(ИмяТЧ)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы[ИмяТЧ]) Тогда
		СкопироватьСтрокиНаСервере(ИмяТЧ);
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы[ИмяТЧ].ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ)
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтрокиИзБуфераОбмена(ИмяТЧ)
	
	КоличествоСтрокДоВставки = Объект[ИмяТЧ].Количество();
	
	ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ);
	
	КоличествоВставленных = Объект[ИмяТЧ].Количество() - КоличествоСтрокДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ)
	
	СоставСтрок     = Неопределено;
	ПараметрыОтбора = Неопределено;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "МатериалыИУслуги" ИЛИ ИмяТЧ = "ВозвратныеОтходы" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,СтатьяКалькуляции";
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		СоставСтрок = "ВидРабот,Количество,СтатьяКалькуляции";
	КонецЕсли;
	
	ПодборТоваров = ИмяТЧ <> "Трудозатраты";
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Если ПодборТоваров Тогда
		
		МассивТиповНоменклатуры = УправлениеДаннымиОбИзделияхКлиентСервер.МассивДоступныхТиповНоменклатуры(ЭтотОбъект, ИмяТЧ);
		ПараметрыОтбора = Новый Соответствие;
		ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры", МассивТиповНоменклатуры);
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		
	КонецЕсли;
	
	СтрокиИзБуфера = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, СоставСтрок);
	
	Если Не ЗначениеЗаполнено(СтрокиИзБуфера) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаИзБуфера Из СтрокиИзБуфера Цикл
		
		ТаблицаОбъекта = Объект[ИмяТЧ]; // ДанныеФормыКоллекция
		ТекущаяСтрока = ТаблицаОбъекта.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаИзБуфера);
		
		ПриВводеНовойСтрокиМаршрутнойКарты(ЭтаФорма, ИмяТЧ, ТекущаяСтрока);
		
		Если ПодборТоваров Тогда
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, РеквизитыДоступны)
	
	Форма.Элементы.ВозвратныеОтходы_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюВозвратныеОтходы_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
	Форма.Элементы.ВыходныеИзделия_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюВыходныеИзделия_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
	Форма.Элементы.МатериалыИУслуги_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюМатериалыИУслуги_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
	Форма.Элементы.Трудозатраты_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюТрудозатраты_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
КонецПроцедуры

#КонецОбласти

#Область Операции

&НаКлиенте
Процедура ИзменитьВидОперации(СодержитВложенныйМаршрут)

	Если НЕ ТекущаяСтрокаЭтоОперация() Тогда
		Возврат;
	КонецЕсли;
	
	Если СодержитВложенныйМаршрут Тогда
		ТекстВопроса = НСтр("ru = 'Изменить вид операции на ""Вложенный маршрут""?';
							|en = 'Change the operation kind to ""Nested route""?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Изменить вид операции на ""Операция""?';
							|en = 'Change the operation kind to ""Operation""?'");
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросИзменитьВидОперации", ЭтаФорма, СодержитВложенныйМаршрут);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьОперацию(Вперед)
	
	ТекстОшибки = "";
	
	Если НЕ ТекущаяСтрокаЭтоОперация() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	Если ПереместитьОперациюНаСервере(ТекущиеДанные.Ссылка, Вперед, ТекстОшибки) Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.ТехнологическиеОперации"));
	Иначе
		ПоказатьПредупреждение(,ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереместитьОперациюНаСервере(Ссылка, Вперед, ТекстОшибки)

	ОперацияОбъект = Ссылка.ПолучитьОбъект();
	Попытка
		ОперацияОбъект.Заблокировать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось переместить операцию.
								|Возможно, операция редактируется пользователем.';
								|en = 'Cannot move the operation. 
								|Maybe, the operation is being edited by another user.'");
	    Возврат Ложь;
	КонецПопытки;
	НомерОперации          = ОперацияОбъект.НомерОперации;
	НомерСледующейОперации = ОперацияОбъект.НомерСледующейОперации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическиеОперации.Ссылка
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
	|ГДЕ
	|	ТехнологическиеОперации.Владелец = &Владелец
	|	И НЕ ТехнологическиеОперации.ПометкаУдаления
	|	И (&Вперед
	|				И ТехнологическиеОперации.НомерОперации = &НомерСледующейОперации
	|			ИЛИ НЕ &Вперед
	|				И ТехнологическиеОперации.НомерСледующейОперации = &НомерОперации)";
	
	Запрос.УстановитьПараметр("Владелец",               ОперацияОбъект.Владелец);
	Запрос.УстановитьПараметр("НомерОперации",          НомерОперации);
	Запрос.УстановитьПараметр("НомерСледующейОперации", НомерСледующейОперации);
	Запрос.УстановитьПараметр("Вперед",                 Вперед);
	
	Результат = Запрос.Выполнить().Выгрузить(); // см. ПроизводствоСервер.СлужебнаяСтруктураТаблицыЗначений
	Если Результат.Количество() = 0 Тогда
		
		Возврат Истина;
		
	ИначеЕсли Результат.Количество() > 1 Тогда
		// Не должно быть несколько операций
		Если Вперед Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось переместить операцию вперед,
									|т.к. следующих операций несколько.';
									|en = 'Cannot put the operation forward 
									|as there are several following operations.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось переместить операцию назад,
									|т.к. предыдущих операций несколько.';
									|en = 'Cannot put the operation back
									|as there are several previous operations.'");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ОперацияДляЗамены = Неопределено;
	
	// Заблокируем операцию с которой будет выполняться перемещение
	ОперацияДляЗамены = Результат[0].Ссылка.ПолучитьОбъект();
	Попытка
		ОперацияДляЗамены.Заблокировать();
	Исключение
		Если Вперед Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось переместить операцию.
									|Возможно, следующая операция редактируется пользователем.';
									|en = 'Cannot move the operation.
									|Maybe, the following operation is being edited by another user.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось переместить операцию.
									|Возможно, предыдущая операция редактируется пользователем.';
									|en = 'Cannot move the operation.
									|Maybe, the previous operation is being edited by another user.'");
		КонецЕсли;
	    Возврат Ложь;
	КонецПопытки;
	
	ОперацияОбъект.НомерОперации          = ОперацияДляЗамены.НомерОперации;
	ОперацияОбъект.НомерСледующейОперации = ОперацияДляЗамены.НомерСледующейОперации;
	
	ОперацияДляЗамены.НомерОперации          = НомерОперации;
	ОперацияДляЗамены.НомерСледующейОперации = НомерСледующейОперации;
	
	Попытка
		ОперацияОбъект.Записать();
		ОперацияДляЗамены.Записать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось переместить операцию.';
							|en = 'Cannot move the operation.'");
		Возврат Ложь;
	КонецПопытки;
	
	ОперацияОбъект.Разблокировать();
	ОперацияДляЗамены.Разблокировать();
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ТекущаяСтрокаЭтоОперация()

	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТипЗнч(ТекущиеДанные) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборВСпискеОпераций()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции, 
		"Владелец", 
		Объект.Ссылка, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции, 
		"ПометкаУдаления", 
		Ложь, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Операции,
		"МаршрутнаяКарта",
		Объект.Ссылка,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперацию(Отказ = Ложь, ДобавитьВложенныйМаршрут = Ложь)

	Если НЕ ДоступностьРеквизитов Тогда
		
		Отказ = Истина;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Отказ = Истина;
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.Действует") Тогда
			ТекстВопроса = НСтр("ru = 'Ввод операций возможен со статусом ""В разработке"".
										|Изменить статус и записать спецификацию?';
										|en = 'You can enter operations only with status ""Under development"".
										|Change the status and save the BOM?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Ввод операций возможен только после записи маршрутной карты.
										|Записать маршрутную карту?';
										|en = 'Operations can be entered only after saving the route sheet.
										|Save the route sheet?'");
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросДобавитьОперацию", ЭтаФорма, ДобавитьВложенныйМаршрут);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ДобавитьВложенныйМаршрут Тогда
		
		ДобавитьВложенныйМаршрут();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Автовыбор_ОтборПоСвойствам_РасчетКоличества

&НаКлиенте
Процедура ОбработкаВыбораНастройкаАвтовыбораНоменклатуры(ИмяТЧ, ВыбранноеЗначение)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СпособАвтовыбораНоменклатуры = ТекущиеДанные.СпособАвтовыбораНоменклатуры;
	
	Если УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатурыЗавершение(ВыбранноеЗначение, ТекущиеДанные, Объект.СоответствиеСвойств) Тогда
		
		Если СпособАвтовыбораНоменклатуры <> ТекущиеДанные.СпособАвтовыбораНоменклатуры Тогда
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
		ЗаполнитьЕстьАвтовыборНоменклатуры();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораНастройкаОтбораПоСвойствамИРасчетаПоФормулам(ИмяТЧ, ВыбранноеЗначение)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если УправлениеДаннымиОбИзделияхКлиент.НастроитьОтборПоСвойствамИРасчетПоФормуламЗавершение(ВыбранноеЗначение, ТекущиеДанные, Объект.ОтборПоСвойствам) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, ИмяТЧ)
	
	АдресВХранилище = ПоместитьДанныеДляРасчетаПоФормуламВХранилище(ИмяТЧ);
	
	ОтборПоСвойствам = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.ОтборПоСвойствам,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаОтбораПоСвойствам());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьОтборПоСвойствамИРасчетПоФормулам(
								ЭтаФорма,
								ИмяТЧ,
								ОтборПоСвойствам,
								Объект.ДляВидаИзделий,
								Не ДоступностьРеквизитов,
								,
								АдресВХранилище);

КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеДляРасчетаПоФормуламВХранилище(ИмяТЧ)
	
	ТаблицаФормы = Элементы[ИмяТЧ]; // ТаблицаФормы
	
	ДанныеДляРасчета = Справочники.МаршрутныеКарты.ВыгрузитьДанныеДляКонструктораФормул(
		Объект,
		ИмяТЧ,
		Объект[ИмяТЧ].НайтиПоИдентификатору(ТаблицаФормы.ТекущаяСтрока));
	
	Результат = ПоместитьВоВременноеХранилище(ДанныеДляРасчета, УникальныйИдентификатор);
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПриВводеНовойСтрокиМаршрутнойКарты(Форма, ИмяТЧ, СтрокаТабличнойЧасти, Копирование = Ложь)
	
	КлючСвязиИсточника = ?(Копирование, СтрокаТабличнойЧасти.КлючСвязи, Неопределено);
	
	СтрокаТабличнойЧасти.КлючСвязи = Новый УникальныйИдентификатор;
	
	Если ИмяТЧ <> "Трудозатраты" Тогда
	
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(
			СтрокаТабличнойЧасти, 
			КлючСвязиИсточника,
			Форма.Объект.СоответствиеСвойств);
		
	КонецЕсли;
		
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСОтборомПоСвойствам(
		СтрокаТабличнойЧасти,
		КлючСвязиИсточника,
		Форма.Объект.ОтборПоСвойствам);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ТипСтоимостиРассчитывается = Перечисления.ТипыСтоимостиВыходныхИзделий.Рассчитывается;
	
	РазбиватьМаршрутныеЛисты = (Объект.МаксимальноеКоличествоЕдиницПартийИзделия <> 0);
	
	МаксимальноеКоличествоЕдиницПартийИзделия = Объект.МаксимальноеКоличествоЕдиницПартийИзделия;
	
	ИспользоватьПараметризациюРесурсныхСпецификаций = 
		ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций");
		
	ЗаполнитьСлужебныеРеквизиты();
	
	УстановитьДоступностьКомандИзмененияСтатуса();
	УправлениеДоступностью(ЭтаФорма);
	УправлениеВидимостью(ЭтаФорма);
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтаФорма);
	НастроитьРасшифровкуКоэффициентЗнаменатель(ЭтаФорма);
	
	НастроитьСоставМаршрутнойКарты();
	
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораМатериалов(
		Элементы.МатериалыИУслугиНоменклатура, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачалоДействия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхКарт.Действует;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Подразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхКарт.Действует;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВыходныеИзделияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВыходныеИзделия.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВозвратныеОтходыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВозвратныеОтходы.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "МатериалыИУслугиНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.МатериалыИУслуги.Упаковка");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ОсновноеИзделие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияОперация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ОперацияРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<последняя операция>';
																|en = '<last operation>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыОперация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ОперацияРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<последняя операция>';
																|en = '<last operation>'"));

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиОперация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ОперацияРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<первая операция>';
																|en = '<first operation>'"));

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыОперация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.ОперацияРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<первая операция>';
																|en = '<first operation>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимости.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоИзделийСТипомСтоимостиРассчитывается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазбиватьМаршрутныеЛисты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДляВидаИзделий.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьАвтовыборНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтаФорма,
		"Объект",
		"ВыходныеИзделия",
		"КоличествоУпаковок");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтаФорма,
		"Объект",
		"ВозвратныеОтходы",
		"КоличествоУпаковок");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтаФорма,
		"Объект",
		"МатериалыИУслуги",
		"КоличествоУпаковок");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтаФорма,
		"Объект",
		"Трудозатраты",
		"Количество");
		
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеАвтовыбораНоменклатуры(ЭтаФорма, "Объект", "ВыходныеИзделия");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеАвтовыбораНоменклатуры(ЭтаФорма, "Объект", "ВозвратныеОтходы");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеАвтовыбораНоменклатуры(ЭтаФорма, "Объект", "МатериалыИУслуги");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	СтруктураДействий = Новый Структура;
	
	ДействиеХарактеристики = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", ДействиеХарактеристики);
	
	ДействиеАртикул = Новый Структура("Номенклатура", "Артикул");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", ДействиеАртикул);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВыходныеИзделия, СтруктураДействий);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВозвратныеОтходы, СтруктураДействий);
			
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.МатериалыИУслуги, СтруктураДействий);
		
	Если ИспользоватьПараметризациюРесурсныхСпецификаций Тогда
		
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.ВыходныеИзделия,
			Истина,
			Истина,
			Объект.ОтборПоСвойствам);
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.ВозвратныеОтходы,
			Истина,
			Истина,
			Объект.ОтборПоСвойствам);
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.МатериалыИУслуги,
			Истина,
			Истина,
			Объект.ОтборПоСвойствам);
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.Трудозатраты,
			Ложь,
			Истина,
			Объект.ОтборПоСвойствам);
		
	КонецЕсли;
	
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
	КоличествоИзделийСТипомСтоимостиРассчитывается = Объект.ВыходныеИзделия.Количество();
	
	ИсточникСоставаНаборовВПроизводстве = УправлениеДаннымиОбИзделияхПовтИсп.ИсточникСоставаНаборовВПроизводстве();
	
КонецПроцедуры

// Производит заполнение по другой маршрутной карте
// 
// Параметры:
// 	Источник - СправочникОбъект.МаршрутныеКарты
&НаСервере
Процедура ЗаполнитьПоМаршрутнойКарте(Источник)
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			УдалитьОперацииПолучателя();
		Иначе
			Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
				Объект.Наименование = Источник.Наименование;
			КонецЕсли;
			Записать();
		КонецЕсли;
		СсылкаПриемника = Объект.Ссылка;
		
		Если НЕ Справочники.МаршрутныеКарты.ЗаполнитьПоМаршрутнойКарте(Объект, Источник, СсылкаПриемника) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось заполнить по маршрутной карте.';
									|en = 'Cannot fill in according to the route sheet.'");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
 		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Заполнение маршрутной карты';
				|en = 'Route sheet filling'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
 		ВызватьИсключение;
		
	КонецПопытки; 
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОперацииПолучателя()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическиеОперации.Ссылка
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
	|ГДЕ
	|	ТехнологическиеОперации.Владелец = &Владелец
	|	И НЕ ТехнологическиеОперации.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОперацияОбъект.ОбменДанными.Загрузка = Истина;
		ОперацияОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьРеквизитов = (Объект.Статус = Перечисления.СтатусыМаршрутныхКарт.ВРазработке);
	МаршрутнаяКартаЗакрыта = (Объект.Статус = Перечисления.СтатусыМаршрутныхКарт.Закрыта);
	
	// Элементы управления шапки
	Элементы.Код.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.ДляВидаИзделий.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.Подразделение.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	
	// Элементы табличных частей
	Элементы.ВыходныеИзделия.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.ВозвратныеОтходы.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.МатериалыИУслуги.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.Трудозатраты.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	
	// Команды
	Элементы.МатериалыИУслугиОткрытьПодборМатериалов.Доступность = ДоступностьРеквизитов;
	Элементы.ФормаЗаполнитьПоМаршрутнойКарте.Доступность = ДоступностьРеквизитов;
	
	// Если маршрутная карта закрыта то сделаем недоступными остальные реквизиты
	
	Элементы.НачалоДействия.ТолькоПросмотр = МаршрутнаяКартаЗакрыта;
	Элементы.КонецДействия.ТолькоПросмотр = МаршрутнаяКартаЗакрыта;
	Элементы.Ответственный.ТолькоПросмотр = МаршрутнаяКартаЗакрыта;
	Элементы.РазбиватьМаршрутныеЛисты.ТолькоПросмотр = МаршрутнаяКартаЗакрыта;
	Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.ТолькоПросмотр = МаршрутнаяКартаЗакрыта;
	Элементы.ПредварительныйБуфер.ТолькоПросмотр = МаршрутнаяКартаЗакрыта;
	Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ТолькоПросмотр = МаршрутнаяКартаЗакрыта;
	Элементы.ЗавершающийБуфер.ТолькоПросмотр = МаршрутнаяКартаЗакрыта;
	Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ТолькоПросмотр = МаршрутнаяКартаЗакрыта;
	
	// Доступность элементов списка операций
	Элементы.Операции.ИзменятьСоставСтрок       = ДоступностьРеквизитов;
	Элементы.ОперацииГруппаДобавить.Доступность = ДоступностьРеквизитов;
	
	Элементы.ОперацииИзменитьВидОперацииНаОперация.Доступность         = ДоступностьРеквизитов;
	Элементы.ОперацииИзменитьВидОперацииНаВложенныйМаршрут.Доступность = ДоступностьРеквизитов;
	Элементы.ОперацииКонтекстноеМенюИзменитьВидОперацииНаОперация.Доступность = ДоступностьРеквизитов;
	Элементы.ОперацииКонтекстноеМенюИзменитьВидОперацииНаВложенныйМаршрут.Доступность = ДоступностьРеквизитов;
	
	Элементы.ОперацииПереместитьОперациюНазад.Доступность   = ДоступностьРеквизитов;
	Элементы.ОперацииПереместитьОперациюВперед.Доступность  = ДоступностьРеквизитов;
	
	УстановитьДоступностьКомандБуфераОбмена(
		ЭтаФорма,
		РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена() И ДоступностьРеквизитов);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеПринудительно()
	
	Отказ = Ложь;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.Статус = Перечисления.СтатусыМаршрутныхКарт.Действует;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, Новый Массив, СправочникОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ СправочникОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	СправочникОбъект.ПроверитьВложенныеМаршруты(Отказ);
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандИзмененияСтатуса()
	
	Элементы.УстановитьСтатусДействует.Доступность   = (Объект.Статус <> Перечисления.СтатусыМаршрутныхКарт.Действует);
	Элементы.УстановитьСтатусаЗакрыта.Доступность    = (Объект.Статус <> Перечисления.СтатусыМаршрутныхКарт.Закрыта);
	Элементы.УстановитьСтатусВРазработке.Доступность = (Объект.Статус <> Перечисления.СтатусыМаршрутныхКарт.ВРазработке);
	Элементы.ПроверитьЗаполнение.Доступность         = (Объект.Статус <> Перечисления.СтатусыМаршрутныхКарт.Действует);
	Элементы.НастроитьСостав.Видимость               = (Объект.Статус <> Перечисления.СтатусыМаршрутныхКарт.Действует);

КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьНовыйСтатусИЗаписать(Статус)

	Если Объект.ПометкаУдаления Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя изменить статус помеченной на удаление маршрутной карты.';
									|en = 'Cannot change status of the route sheet marked for deletion.'");
  		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	
	ТекущийСтатус = Объект.Статус;
	
	Объект.Статус = Статус;
	Если НЕ Записать() Тогда
		Объект.Статус = ТекущийСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)

	МассивЭлементов = Новый Массив;;
	МассивЭлементов.Добавить("МаксимальноеКоличествоЕдиницПартийИзделия");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
								Форма.Элементы, 
								МассивЭлементов, 
								"ТолькоПросмотр", 
								НЕ Форма.РазбиватьМаршрутныеЛисты);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(Форма, Действие = "")
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВсеДействия = ПустаяСтрока(Действие);
	//++ Устарело_Производство21
	НастройкиПодсистемы = НастройкиПодсистемыПроизводство();
	//-- Устарело_Производство21
	
	Если ВсеДействия ИЛИ Действие = "РассчитыватьКоэффициент" Тогда
		
		ОтображатьКоэффициент = Истина
			//++ Устарело_Производство21
			И (НастройкиПодсистемы.ИспользуетсяПроизводство22 И НЕ НастройкиПодсистемы.ИспользуетсяПроизводство21)
			//-- Устарело_Производство21
			;
		
		Элементы.ГруппаКоэффициентПрименения.Видимость = ОтображатьКоэффициент;
		Элементы.ГруппаКоэффициентФормула.Видимость = ОтображатьКоэффициент И Объект.РассчитыватьКоэффициент;
		
	КонецЕсли;
	
	Если ВсеДействия Тогда
		
		ВидимостьЭлементов = Ложь
			//++ Устарело_Производство21
			ИЛИ НастройкиПодсистемы.ИспользуетсяПроизводство21
			//-- Устарело_Производство21
			;
		
		Элементы.ГруппаРазбиватьМаршрутныеЛисты.Видимость = ВидимостьЭлементов;
		Элементы.ГруппаПланированиеРаботыКлючевыхВидовРабочихЦентров.Видимость = ВидимостьЭлементов;
		Элементы.ВыходныеИзделияДоляСтоимости.Видимость = ВидимостьЭлементов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СписокТоваров = ВыбранноеЗначение;
	Иначе
		СписокТоваров = Новый Массив;
		СписокТоваров.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	ИмяТЧ = "МатериалыИУслуги";
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТаблицаОбъекта = Объект[ИмяТЧ]; // ДанныеФормыКоллекция
	
	Для каждого СтрокаТовара Из СписокТоваров Цикл
		
		ТекущаяСтрока = ТаблицаОбъекта.Добавить();
		ТекущаяСтрока.Номенклатура = СтрокаТовара;
		
		ПриВводеНовойСтрокиМаршрутнойКарты(ЭтаФорма, ИмяТЧ, ТекущаяСтрока);
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗаполнитьПоМаршрутнойКарте(МаршрутнаяКартаИсточник, ДополнительныеПараметры) Экспорт

	Если МаршрутнаяКартаИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстВопроса = НСтр("ru = 'При заполнении прежние данные будут утеряны.
								|Заполнить?';
								|en = 'The previous data will be lost during the population.
								|Populate?'");
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить';
														|en = 'Fill'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьПоМаршрутнойКарте", ЭтаФорма, МаршрутнаяКартаИсточник);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,,, НСтр("ru = 'Заполнение по маршрутной карте';
																			|en = 'Fill in according to the route sheet'"));

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьПоМаршрутнойКарте(РезультатВопроса, МаршрутнаяКартаИсточник) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоМаршрутнойКарте(МаршрутнаяКартаИсточник);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ТехнологическиеОперации"));
	
	Оповестить("Запись_ТехнологическиеОперации");
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменитьВидОперации(РезультатВопроса, СодержитВложенныйМаршрут) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	
	Если СодержитВложенныйМаршрут Тогда
		ИмяОткрываемойФормы = "ФормаВложенногоМаршрута";
	Иначе
		ИмяОткрываемойФормы = "ФормаОперации";
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
	ОткрытьФорму("Справочник.ТехнологическиеОперации.Форма." + ИмяОткрываемойФормы, ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ВопросДобавитьОперацию(РезультатВопроса, ДобавитьВложенныйМаршрут) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.Действует") Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.ВРазработке");
	КонецЕсли;
	
	Если Записать() Тогда
		
		Если ДобавитьВложенныйМаршрут Тогда
			ДобавитьВложенныйМаршрут();
		Иначе
			Элементы.Операции.ДобавитьСтроку();
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенныйМаршрут()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СодержитВложенныйМаршрут", Истина);
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	ОткрытьФорму("Справочник.ТехнологическиеОперации.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ПараметрыФормы));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВРазработкеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Истина Тогда
		УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.ВРазработке"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПоляВТаблице(ИмяТаблицы, ИмяПоля, СтандартнаяОбработка)

	Если НЕ ТолькоПросмотр И ДоступностьРеквизитов Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если (ИмяПоля = "ВыходныеИзделияНоменклатура"
			ИЛИ ИмяПоля = "ВыходныеИзделияНоменклатураКод"
			ИЛИ ИмяПоля = "ВыходныеИзделияНоменклатураАртикул"
			ИЛИ ИмяПоля = "МатериалыИУслугиНоменклатура"
			ИЛИ ИмяПоля = "МатериалыИУслугиНоменклатураКод"
			ИЛИ ИмяПоля = "МатериалыИУслугиАртикул")
		И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		
	ИначеЕсли (ИмяПоля = "ВыходныеИзделияОперация"
		ИЛИ ИмяПоля = "ВозвратныеОтходыОперация"
		ИЛИ ИмяПоля = "МатериалыИУслугиОперация"
		ИЛИ ИмяПоля = "ТрудозатратыОперация")
		И ЗначениеЗаполнено(ТекущиеДанные.ОперацияРедактирование) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ОперацияРедактирование);
		
	ИначеЕсли (ИмяПоля = "МатериалыИУслугиСтатьяКалькуляции"
			ИЛИ ИмяПоля = "ТрудозатратыСтатьяКалькуляции")
		И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.СтатьяКалькуляции);
		
	ИначеЕсли (ИмяПоля = "ТрудозатратыВидРабот")
		И ЗначениеЗаполнено(ТекущиеДанные.ВидРабот)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВидРабот);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуНезаполненногоДляБуферов(Форма)

	Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияПредварительногоБуфера)
		И Форма.Объект.ПредварительныйБуфер <> 0 Тогда
		Форма.Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Истина;
	Иначе
		Форма.Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Ложь;
	КонецЕсли; 	

	Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияЗавершающегоБуфера)
		И Форма.Объект.ЗавершающийБуфер <> 0 Тогда
		Форма.Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Истина;
	Иначе
		Форма.Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Ложь;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоставЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(Объект, РезультатЗакрытия);
	НастроитьСоставМаршрутнойКарты();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСоставМаршрутнойКарты()

	Элементы.Операции.Видимость = Объект.ИспользоватьОперации;
	Элементы.ВыходныеИзделия.Видимость = Объект.ИспользоватьВыходныеИзделия;
	Элементы.ВозвратныеОтходы.Видимость = Объект.ИспользоватьВыходныеИзделия;
	Элементы.МатериалыИУслуги.Видимость = Объект.ИспользоватьМатериалы;
	Элементы.Трудозатраты.Видимость = Объект.ИспользоватьТрудозатраты;

	Элементы.ВыходныеИзделияОперация.Видимость = Объект.ИспользоватьОперации;
	Элементы.ВозвратныеОтходыОперация.Видимость = Объект.ИспользоватьОперации;
	Элементы.МатериалыИУслугиОперация.Видимость = Объект.ИспользоватьОперации;
	Элементы.ТрудозатратыОперация.Видимость = Объект.ИспользоватьОперации;
	
КонецПроцедуры

//++ Устарело_Производство21
&НаСервереБезКонтекста
Функция НастройкиПодсистемыПроизводство()
	
	Возврат ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
КонецФункции
//-- Устарело_Производство21

&НаКлиенте
Процедура ПриИзмененииРассчитыватьКоэффициентЧисло()
	
	Объект.РассчитыватьКоэффициент = РассчитыватьКоэффициентЧисло;
	
	УправлениеВидимостью(ЭтотОбъект, "РассчитыватьКоэффициент");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьРасшифровкуКоэффициентЗнаменатель(Форма)
	
	ПредставлениеЕдиницы = ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
		НСтр("ru = 'единицу';
			|en = 'unit'"),
		НСтр("ru = 'единицы';
			|en = 'units'"),
		НСтр("ru = 'единиц';
			|en = 'units'"),
		Форма.Объект.КоэффициентЗнаменатель);
	
	Форма.Элементы.РасшифровкаКоэффициентЗнаменатель.Заголовок = СтрШаблон(
		НСтр("ru = '%1 основного изделия спецификации';
			|en = '%1 of main BOM product'"),
		ПредставлениеЕдиницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЕстьАвтовыборНоменклатуры()
	
	ЕстьАвтовыборНоменклатуры = ИспользоватьПараметризациюРесурсныхСпецификаций 
	И (
		Справочники.МаршрутныеКарты.ЕстьАвтовыборНоменклатуры(Объект.МатериалыИУслуги)
		ИЛИ Справочники.МаршрутныеКарты.ЕстьАвтовыборНоменклатуры(Объект.ВозвратныеОтходы)
		ИЛИ Справочники.МаршрутныеКарты.ЕстьАвтовыборНоменклатуры(Объект.ВыходныеИзделия)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопироватьМаршрутнуюКарту(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = КопироватьМаршрутнуюКартуНаСервере(Объект.Ссылка);
	
	Если Ссылка <> Неопределено Тогда
		
		УправлениеДаннымиОбИзделияхКлиент.ОповеститьОКопированииМаршрутнойКартыСОперациями();
		
		ОткрытьФорму("Справочник.МаршрутныеКарты.ФормаОбъекта", Новый Структура("Ключ", Ссылка));
	
	КонецЕсли; 

КонецПроцедуры
 
&НаСервереБезКонтекста
Функция КопироватьМаршрутнуюКартуНаСервере(Источник)
	
	Возврат Справочники.МаршрутныеКарты.СкопироватьМаршрутнуюКартуСОперациями(Источник);
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
