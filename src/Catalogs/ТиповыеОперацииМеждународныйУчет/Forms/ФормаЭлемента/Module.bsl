
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	УстановитьЗаголовкиКолонок();

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	МеждународныйУчетОбщегоНазначения.ЗаполнитьПредставлениеВидовСубконто(ПроводкиСКорреспонденцией, "Дт");
	МеждународныйУчетОбщегоНазначения.ЗаполнитьПредставлениеВидовСубконто(ПроводкиСКорреспонденцией, "Кт");
	МеждународныйУчетОбщегоНазначения.ЗаполнитьПредставлениеВидовСубконто(ПроводкиБезКорреспонденции, "");
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ТекущийОбъект.ПроводкиСКорреспонденцией.Загрузить(ПроводкиСКорреспонденцией.Выгрузить());
	
	ТекущийОбъект.ПроводкиБезКорреспонденции.Очистить();
	Для каждого Запись Из ПроводкиБезКорреспонденции Цикл
		НоваяСтрока = ТекущийОбъект.ПроводкиБезКорреспонденции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
		Если Запись.ВидДвижения = ВидДвиженияДебет Тогда
			НоваяСтрока.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Дебет;
		ИначеЕсли Запись.ВидДвижения = ВидДвиженияКредит Тогда
			НоваяСтрока.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Кредит;
		Иначе
			НоваяСтрока.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьОтображениеПоПлануСчетов();
КонецПроцедуры

&НаКлиенте
Процедура ПланСчетовПриИзменении(Элемент)
	
	ЕстьДвижения = 
		ПроводкиБезКорреспонденции.Количество() > 0
		Или ПроводкиСКорреспонденцией.Количество() > 0;
		
	Если ЕстьДвижения И ТекущийПланСчетов <> Объект.ПланСчетов Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииПланаСчетовВопрос", ЭтотОбъект);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Продолжить';
													|en = 'Continue'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена';
														|en = 'Cancel'"));
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Шаблон проводок будет очищен. Продолжить?';
												|en = 'Posting template will be cleared. Continue?'"), Кнопки);
	Иначе
		ТекущийПланСчетов = Объект.ПланСчетов;
		ОбновитьОтображениеПоПлануСчетов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПроводкиСКорреспонденцией

&НаКлиенте
Процедура ПроводкиСКорреспонденциейПередНачаломИзменения(Элемент, Отказ)
	СтрокаТаблицы = Элементы.ПроводкиСКорреспонденцией.ТекущиеДанные;
	НастройкаСчетовУчетаКлиент.ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, СтрокаТаблицы, Объект.Организация, "Дт");
	НастройкаСчетовУчетаКлиент.ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, СтрокаТаблицы, Объект.Организация, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПроводкиСКорреспонденцией.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПредставлениеВидовСубконтоСчета(ТекущиеДанные.СчетДт, "Дт"));
КонецПроцедуры

&НаКлиенте
Процедура СчетКтПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПроводкиСКорреспонденцией.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПредставлениеВидовСубконтоСчета(ТекущиеДанные.СчетКт, "Кт"));
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ПроводкиСКорреспонденцией.ТекущиеДанные;
	ТекущаяСтрока.СуммаПредставления = РассчитатьСуммуПредставления(Объект.ПланСчетов, Объект.Организация, ТекущаяСтрока.Сумма);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.ПроводкиСКорреспонденцией.ТекущиеДанные;
	НастройкаСчетовУчетаКлиент.ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, СтрокаТаблицы, Объект.Организация, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.ПроводкиСКорреспонденцией.ТекущиеДанные;
	НастройкаСчетовУчетаКлиент.ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, СтрокаТаблицы, Объект.Организация, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПроводкиБезКорреспонденции

&НаКлиенте
Процедура ПроводкиБезКорреспонденцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ПроводкиБезКорреспонденции.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущаяСтрока.Активность = Ложь;
		Если ИтогСуммаДт >= ИтогСуммаКт Тогда
			ТекущаяСтрока.ВидДвижения = ВидДвиженияКредит;
			ТекущаяСтрока.СуммаКт = ИтогСуммаДт - ИтогСуммаКт;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаКт;
			
			ТекущаяСтрока.СуммаПредставленияКт = РассчитатьСуммуПредставления(Объект.ПланСчетов, Объект.Организация, ТекущаяСтрока.Сумма);
			ТекущаяСтрока.СуммаПредставления = ТекущаяСтрока.СуммаПредставленияКт;
		Иначе
			ТекущаяСтрока.ВидДвижения = ВидДвиженияДебет;
			ТекущаяСтрока.СуммаДт = ИтогСуммаКт - ИтогСуммаДт;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаДт;
			
			ТекущаяСтрока.СуммаПредставленияДт = РассчитатьСуммуПредставления(Объект.ПланСчетов, Объект.Организация, ТекущаяСтрока.Сумма);
			ТекущаяСтрока.СуммаПредставления = ТекущаяСтрока.СуммаПредставленияДт;
		КонецЕсли;
		РассчитатьИтогиПоПроводкамБезКорреспонденции(ЭтотОбъект);
		ТекущаяСтрока.ВидДвиженияИндекс = 
			ВидДвиженияБезКорреспоненцииИндексКартинки(ТекущаяСтрока.ВидДвижения, ТекущаяСтрока.Активность, ТекущаяСтрока.Сумма, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиБезКорреспонденцииПередНачаломИзменения(Элемент, Отказ)
	СтрокаТаблицы = Элементы.ПроводкиБезКорреспонденции.ТекущиеДанные;
	НастройкаСчетовУчетаКлиент.ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, СтрокаТаблицы, Объект.Организация, "");
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиБезКорреспонденцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		РассчитатьИтогиПоПроводкамБезКорреспонденции(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиБезКорреспонденцииПослеУдаления(Элемент)
	РассчитатьИтогиПоПроводкамБезКорреспонденции(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СчетПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПроводкиБезКорреспонденции.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПредставлениеВидовСубконтоСчета(ТекущиеДанные.Счет, ""));
КонецПроцедуры

&НаКлиенте
Процедура СуммаДтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПроводкиБезКорреспонденции.ТекущиеДанные;
	ТекущиеДанные.ВидДвижения = ВидДвиженияДебет;
	ТекущиеДанные.Сумма = ТекущиеДанные.СуммаДт;
	ТекущиеДанные.СуммаКт = 0;
	
	ТекущиеДанные.СуммаПредставленияДт = РассчитатьСуммуПредставления(Объект.ПланСчетов, Объект.Организация, ТекущиеДанные.Сумма);
	ТекущиеДанные.СуммаПредставления = ТекущиеДанные.СуммаПредставленияДт;
	ТекущиеДанные.СуммаПредставленияКт = 0;
	
	ТекущиеДанные.ВидДвиженияИндекс = 
		ВидДвиженияБезКорреспоненцииИндексКартинки(ТекущиеДанные.ВидДвижения, ТекущиеДанные.Активность, ТекущиеДанные.Сумма, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаКтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПроводкиБезКорреспонденции.ТекущиеДанные;
	ТекущиеДанные.ВидДвижения = ВидДвиженияКредит;
	ТекущиеДанные.Сумма = ТекущиеДанные.СуммаКт;
	ТекущиеДанные.СуммаДт = 0;
	
	ТекущиеДанные.СуммаПредставленияКт = РассчитатьСуммуПредставления(Объект.ПланСчетов, Объект.Организация, ТекущиеДанные.Сумма);
	ТекущиеДанные.СуммаПредставления = ТекущиеДанные.СуммаПредставленияКт;
	ТекущиеДанные.СуммаПредставленияДт = 0;
	
	ТекущиеДанные.ВидДвиженияИндекс = 
		ВидДвиженияБезКорреспоненцииИндексКартинки(ТекущиеДанные.ВидДвижения, ТекущиеДанные.Активность, ТекущиеДанные.Сумма, ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура СуммаПредставленияДтПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПроводкиБезКорреспонденции.ТекущиеДанные;
	ТекущиеДанные.СуммаПредставления = ТекущиеДанные.СуммаПредставленияДт;
	ТекущиеДанные.ВидДвижения = ВидДвиженияДебет;
	Если ТекущиеДанные.СуммаКт <> 0 Тогда
		ТекущиеДанные.СуммаКт = 0;
		ТекущиеДанные.Сумма = 0;
	КонецЕсли;
	Если ТекущиеДанные.СуммаПредставленияКт <> 0 Тогда
		ТекущиеДанные.СуммаПредставленияКт = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СуммаПредставленияКтПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПроводкиБезКорреспонденции.ТекущиеДанные;
	ТекущиеДанные.СуммаПредставления = ТекущиеДанные.СуммаПредставленияКт;
	ТекущиеДанные.ВидДвижения = ВидДвиженияКредит;
	Если ТекущиеДанные.СуммаДт <> 0 Тогда
		ТекущиеДанные.СуммаДт = 0;
		ТекущиеДанные.Сумма = 0;
	КонецЕсли;
	Если ТекущиеДанные.СуммаПредставленияДт <> 0 Тогда
		ТекущиеДанные.СуммаПредставленияДт = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютнаяСуммаПриИзменении(Элемент)
	ВалютаПриИзмененииКлиент(Элементы.ПроводкиБезКорреспонденции, "");
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	ВалютаПриИзмененииКлиент(Элементы.ПроводкиБезКорреспонденции, "");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.ПроводкиБезКорреспонденции.ТекущиеДанные;
	НастройкаСчетовУчетаКлиент.ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, СтрокаТаблицы, Объект.Организация, "");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// оформление полей "Субконто1", ... и т.д.
	МеждународныйУчетОбщегоНазначения.УстановитьОформлениеПроводок(УсловноеОформление, "ПроводкиСКорреспонденцией");
	МеждународныйУчетОбщегоНазначения.УстановитьОформлениеПроводок(УсловноеОформление, "ПроводкиБезКорреспонденции", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВидДвиженияДебет = ВидДвиженияБухгалтерии.Дебет;
	ВидДвиженияКредит = ВидДвиженияБухгалтерии.Кредит;
	ПросроченныеДанныеЦвет = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ТекущийПланСчетов = Объект.ПланСчетов;
	
	ПроводкиСКорреспонденцией.Загрузить(Объект.ПроводкиСКорреспонденцией.Выгрузить());
	
	Для каждого Запись Из Объект.ПроводкиБезКорреспонденции Цикл
		НоваяСтрока = ПроводкиБезКорреспонденции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
		Если Запись.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Дебет Тогда
			НоваяСтрока.ВидДвижения = ВидДвиженияДебет;
		ИначеЕсли Запись.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Кредит Тогда
			НоваяСтрока.ВидДвижения = ВидДвиженияКредит;
		Иначе
			НоваяСтрока.ВидДвижения = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	МеждународныйУчетОбщегоНазначения.ЗаполнитьПредставлениеВидовСубконто(ПроводкиСКорреспонденцией, "Дт");
	МеждународныйУчетОбщегоНазначения.ЗаполнитьПредставлениеВидовСубконто(ПроводкиСКорреспонденцией, "Кт");
	МеждународныйУчетОбщегоНазначения.ЗаполнитьПредставлениеВидовСубконто(ПроводкиБезКорреспонденции, "");
	ЗаполнитьВспомогательныеРеквизитыПроводокБезКорреспонденции();
	ОбновитьОтображениеПоПлануСчетов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок()

	ВалютаМУ = МеждународныйУчетОбщегоНазначения.УчетныеВалюты(Объект.ПланСчетов, Объект.Организация);
	
	Шаблон = НСтр("ru = 'Сумма';
					|en = 'Amount'") + " (%1)";
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка(ВалютаМУ.Функциональная));
	Элементы.Сумма.Заголовок = Текст;
	
	Шаблон = НСтр("ru = 'Сумма представления';
					|en = 'Presentation amount'") + " (%1)";
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка(ВалютаМУ.Представления));
	Элементы.СуммаПредставления.Заголовок = Текст;
	ШаблонЗаголовка = НСтр("ru = 'Подразделение %1';
							|en = 'Business unit %1'");
	Если Справочники.НаправленияДеятельности.ИспользуетсяУчетПоНаправлениям() Тогда
		ШаблонЗаголовка = ШаблонЗаголовка + ", " + НСтр("ru = 'Направление %1';
														|en = 'Direction %1'")
	КонецЕсли;
	Элементы.ПодразделениеДт.Заголовок = СтрШаблон(ШаблонЗаголовка, НСтр("ru = 'Дт';
																		|en = 'Dr'"));
	Элементы.ПодразделениеКт.Заголовок = СтрШаблон(ШаблонЗаголовка, НСтр("ru = 'Кт';
																		|en = 'Cr'"));
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Функция ПредставлениеВидовСубконтоСчета(Счет, ДтКт)
	
	Возврат МеждународныйУчетОбщегоНазначения.ПредставлениеВидовСубконто(Счет, ДтКт);
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьСуммуПредставления(ПланСчетов, Организация, Сумма)
	
	Возврат МеждународныйУчетОбщегоНазначения.РассчитатьСуммуПредставления(ПланСчетов, Организация, Сумма);
	
КонецФункции

&НаКлиенте
Процедура ВалютаПриИзмененииКлиент(ТаблицаФормы, ДтКт)
	
	ТекущаяСтрока = ТаблицаФормы.ТекущиеДанные;
	СуммыПроводки = РассчитатьСуммы(Объект.ПланСчетов, Объект.Организация, ТекущаяСтрока["ВалютнаяСумма"+ДтКт], ТекущаяСтрока["Валюта"+ДтКт]);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СуммыПроводки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммы(ПланСчетов, Организация, ВалютнаяСумма, Валюта)
	
	СуммыПроводки = Новый Структура("Сумма,СуммаПредставления",0,0);
	КоэффициентыПересчета = МеждународныйУчетОбщегоНазначения.ПолучитьКоэффициентыПересчетаВалюты(ПланСчетов, Организация, Валюта, ТекущаяДатаСеанса());
	СуммыПроводки.Сумма = ВалютнаяСумма * КоэффициентыПересчета.ВФункциональнуюВалюту;
	СуммыПроводки.СуммаПредставления = ВалютнаяСумма * КоэффициентыПересчета.ВВалютуПредставления;
	
	Возврат СуммыПроводки;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьПараметрыВыбора(Элемент)
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПланаСчетовВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПроводкиБезКорреспонденции.Очистить();
		ПроводкиСКорреспонденцией.Очистить();
		ТекущийПланСчетов = Объект.ПланСчетов;
		ОбновитьОтображениеПоПлануСчетов();
	Иначе
		Объект.ПланСчетов = ТекущийПланСчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПоПлануСчетов()
	
	ВалютаМУ = МеждународныйУчетОбщегоНазначения.УчетныеВалюты(Объект.ПланСчетов, Объект.Организация);
	
	Если Не ЗначениеЗаполнено(ВалютаМУ.Функциональная) Тогда
		ТекстСумма = НСтр("ru = 'Функц.';
							|en = 'Functional'");
		ТекстСуммаДт = НСтр("ru = 'Сумма функц. Дт';
							|en = 'Dr funct. currency amount'");
		ТекстСуммаКт = НСтр("ru = 'Сумма функц. Кт';
							|en = 'Cr funct. currency amount'");
	Иначе
		ТекстСумма = СтрШаблон(НСтр("ru = 'Функц. (%1)';
									|en = 'Funct. (%1)'"), Строка(ВалютаМУ.Функциональная));
		ТекстСуммаДт = СтрШаблон(НСтр("ru = 'Сумма функц. Дт (%1)';
										|en = 'Funct. currency amount Dr (%1)'"), Строка(ВалютаМУ.Функциональная));
		ТекстСуммаКт = СтрШаблон(НСтр("ru = 'Сумма функц. Кт (%1)';
										|en = 'Cr funct. currency amount (%1)'"), Строка(ВалютаМУ.Функциональная));
	КонецЕсли;
	Элементы.Сумма.Заголовок = ТекстСумма;
	Элементы.СуммаДт.Заголовок = ТекстСуммаДт;
	Элементы.СуммаКт.Заголовок = ТекстСуммаКт;
	
	Элементы.СуммаПредставления.Видимость = Истина;
	Элементы.СуммаПредставленияДт.Видимость = Истина;
	Элементы.СуммаПредставленияКт.Видимость = Истина;
	Если Не ЗначениеЗаполнено(ВалютаМУ.Представления) Тогда
		ТекстСуммаПредставления = НСтр("ru = 'Пред.';
										|en = 'Presentation'");
		ТекстСуммаПредставленияДт = НСтр("ru = 'Сумма предст. Дт';
										|en = 'Dr present. amount'");
		ТекстСуммаПредставленияКт = НСтр("ru = 'Сумма предст. Кт';
										|en = 'Cr present. amount'");
	Иначе
		ТекстСуммаПредставления = СтрШаблон(НСтр("ru = 'Пред. (%1)';
												|en = 'Present. (%1)'"), Строка(ВалютаМУ.Представления));
		ТекстСуммаПредставленияДт = СтрШаблон(НСтр("ru = 'Сумма предст. Дт (%1)';
													|en = 'Dr present. amount (%1)'"), Строка(ВалютаМУ.Представления));
		ТекстСуммаПредставленияКт = СтрШаблон(НСтр("ru = 'Сумма предст. Кт (%1)';
													|en = 'Cr present. amount (%1)'"), Строка(ВалютаМУ.Представления));
	КонецЕсли;
	Элементы.СуммаПредставления.Заголовок = ТекстСуммаПредставления;
	Элементы.СуммаПредставленияДт.Заголовок = ТекстСуммаПредставленияДт;
	Элементы.СуммаПредставленияКт.Заголовок = ТекстСуммаПредставленияКт;
	
	Если ЗначениеЗаполнено(ВалютаМУ.Функциональная) И ВалютаМУ.Функциональная = ВалютаМУ.Представления Тогда
		Элементы.СуммаПредставления.Видимость = Ложь;
		Элементы.СуммаПредставленияДт.Видимость = Ложь;
		Элементы.СуммаПредставленияКт.Видимость = Ложь;
		ТекстСумма = СтрШаблон(НСтр("ru = 'Сумма (%1)';
									|en = 'Amount (%1)'"), Строка(ВалютаМУ.Функциональная));
		ТекстСуммаДт = СтрШаблон(НСтр("ru = 'Сумма Дт (%1)';
										|en = 'Dr amount (%1)'"), Строка(ВалютаМУ.Функциональная));
		ТекстСуммаКт = СтрШаблон(НСтр("ru = 'Сумма Кт (%1)';
										|en = 'Cr amount (%1)'"), Строка(ВалютаМУ.Функциональная));
		Элементы.Сумма.Заголовок = ТекстСумма;
		Элементы.СуммаДт.Заголовок = ТекстСуммаДт;
		Элементы.СуммаКт.Заголовок = ТекстСуммаКт;
	КонецЕсли;
	
	ВариантФормированияПроводок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПланСчетов, "ВариантФормированияПроводок");
	Если ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.БезКорреспонденции Тогда
		Элементы.СтраницыШаблонПроводок.ТекущаяСтраница = Элементы.СтраницаШаблонПроводокБезКорреспонденции;
	ИначеЕсли ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.СКорреспонденцией Тогда
		Элементы.СтраницыШаблонПроводок.ТекущаяСтраница = Элементы.СтраницаШаблонПроводокСКорреспонденцией;
	Иначе
		Элементы.СтраницыШаблонПроводок.ТекущаяСтраница = Элементы.СтраницаВыберитеПланСчетов;
	КонецЕсли;
	
	ДобавитьТипыАннулирующихПроводок();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТипыАннулирующихПроводок()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		НастройкаФормированияПроводок = МеждународныйУчетСерверПовтИсп.ИспользуемаяНастройкаФормированияПроводок(
			НачалоМесяца(ТекущаяДатаСеанса()), Объект.ПланСчетов, Объект.Организация);
		СпособАннулированияПроводок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаФормированияПроводок, "СпособАннулированияПроводок");
	Иначе
		НастройкиФормированияПроводок = Справочники.НастройкиФормированияПроводокМеждународногоУчета.НастройкиФормированияПроводок();
		СпособАннулированияПроводок = НастройкиФормированияПроводок.СпособАннулированияПроводок;
	КонецЕсли;
	
	МеждународныйУчетОбщегоНазначения.ДобавитьТипыАннулирующихПроводок(СпособАннулированияПроводок,
		Элементы.ТипПроводки.СписокВыбора);
	МеждународныйУчетОбщегоНазначения.ДобавитьТипыАннулирующихПроводок(СпособАннулированияПроводок,
		Элементы.ПроводкиБезКорреспонденцииТипПроводки.СписокВыбора);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиПоПроводкамБезКорреспонденции(ЭтаФорма)
	
	Элементы = ЭтаФорма.Элементы;
	
	ЭтаФорма.ИтогСуммаДт = 0;
	ЭтаФорма.ИтогСуммаКт = 0;
	ЭтаФорма.ИтогСуммаПредставленияДт = 0;
	ЭтаФорма.ИтогСуммаПредставленияКт = 0;
	Для каждого Запись Из ЭтаФорма.ПроводкиБезКорреспонденции Цикл
		ЭтаФорма.ИтогСуммаДт = ЭтаФорма.ИтогСуммаДт + ?(Запись.ВидДвижения = ЭтаФорма.ВидДвиженияДебет, Запись.Сумма, 0);
		ЭтаФорма.ИтогСуммаКт = ЭтаФорма.ИтогСуммаКт + ?(Запись.ВидДвижения = ЭтаФорма.ВидДвиженияКредит, Запись.Сумма, 0);
		ЭтаФорма.ИтогСуммаПредставленияДт = ЭтаФорма.ИтогСуммаПредставленияДт + ?(Запись.ВидДвижения = ЭтаФорма.ВидДвиженияДебет, Запись.СуммаПредставления, 0);
		ЭтаФорма.ИтогСуммаПредставленияКт = ЭтаФорма.ИтогСуммаПредставленияКт + ?(Запись.ВидДвижения = ЭтаФорма.ВидДвиженияКредит, Запись.СуммаПредставления, 0);
	КонецЦикла;
	
	Если ЭтаФорма.ИтогСуммаДт <> ЭтаФорма.ИтогСуммаКт Тогда
		Элементы.СуммаДт.ЦветТекстаПодвала = ЭтаФорма.ПросроченныеДанныеЦвет;
		Элементы.СуммаКт.ЦветТекстаПодвала = ЭтаФорма.ПросроченныеДанныеЦвет;
	Иначе
		Элементы.СуммаДт.ЦветТекстаПодвала = Новый Цвет();
		Элементы.СуммаКт.ЦветТекстаПодвала = Новый Цвет();
	КонецЕсли;
	
	Если ЭтаФорма.ИтогСуммаПредставленияДт <> ЭтаФорма.ИтогСуммаПредставленияКт Тогда
		Элементы.СуммаПредставленияДт.ЦветТекстаПодвала = ЭтаФорма.ПросроченныеДанныеЦвет;
		Элементы.СуммаПредставленияКт.ЦветТекстаПодвала = ЭтаФорма.ПросроченныеДанныеЦвет;
	Иначе
		Элементы.СуммаПредставленияДт.ЦветТекстаПодвала = Новый Цвет();
		Элементы.СуммаПредставленияКт.ЦветТекстаПодвала = Новый Цвет();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВспомогательныеРеквизитыПроводокБезКорреспонденции()
	
	Для каждого Запись Из ПроводкиБезКорреспонденции Цикл
		
		Запись.СуммаДт = ?(Запись.ВидДвижения = ВидДвиженияДебет, Запись.Сумма, 0);
		Запись.СуммаКт = ?(Запись.ВидДвижения = ВидДвиженияКредит, Запись.Сумма, 0);
		Запись.СуммаПредставленияДт = ?(Запись.ВидДвижения = ВидДвиженияДебет, Запись.СуммаПредставления, 0);
		Запись.СуммаПредставленияКт = ?(Запись.ВидДвижения = ВидДвиженияКредит, Запись.СуммаПредставления, 0);
		Запись.ВидДвиженияИндекс = 
			ВидДвиженияБезКорреспоненцииИндексКартинки(
				Запись.ВидДвижения, Запись.Активность, Запись.Сумма, ЭтотОбъект);
		
	КонецЦикла;
	
	РассчитатьИтогиПоПроводкамБезКорреспонденции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидДвиженияБезКорреспоненцииИндексКартинки(ВидДвижения, Активность, Сумма, ЭтаФормы)
	
	Если ВидДвижения = ЭтаФормы.ВидДвиженияДебет И Сумма <> 0 Тогда
		Возврат 1;
	ИначеЕсли ВидДвижения = ЭтаФормы.ВидДвиженияКредит И Сумма <> 0 Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции



#КонецОбласти
