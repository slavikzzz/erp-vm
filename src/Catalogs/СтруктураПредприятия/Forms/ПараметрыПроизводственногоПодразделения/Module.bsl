
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЭтоКА = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	
	Параметры.Свойство("Ссылка", Ссылка);
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Параметры.АдресХранилищаДанныеОбъекта);
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Объект[Реквизит.Имя] = ДанныеОбъекта[Реквизит.Имя];
	КонецЦикла;
	Для каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		Если ТабличнаяЧасть.Имя = "ГрафикиРаботы"
			И Объект.СпособНастройкиГрафикаРаботы = Перечисления.СпособыНастройкиГрафикаРаботыПодразделений.ИндивидуальныйГрафик Тогда
			
			Если ДанныеОбъекта.ГрафикиРаботы.Количество() <> 0 Тогда
				ГрафикРаботы = ДанныеОбъекта.ГрафикиРаботы[0].ГрафикРаботы;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Объект[ТабличнаяЧасть.Имя].Загрузить(ДанныеОбъекта[ТабличнаяЧасть.Имя]);
		
	КонецЦикла;
	СкладМатериалов = ДанныеОбъекта.СкладМатериалов;
	
	//++ НЕ УТКА
		
	Если Константы.ИспользоватьИнтервалПланированияЧас.Получить()
		ИЛИ Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		
		Элементы.ИнтервалПланирования.СписокВыбора.Вставить(0, Перечисления.ТочностьГрафикаПроизводства.Час);
		
	КонецЕсли;
	
	ИнициализироватьПараметрыИнтервалаПланирования();
	
	УстановитьТекстЧасовДнейМесяцевНедель();
	
	//-- НЕ УТКА
	
	Если Объект.ИспользоватьБригадныеНаряды И Объект.ИспользоватьПерсональныеНаряды Тогда
		ВидыНарядов = "БригадыИРаботники";
	ИначеЕсли Объект.ИспользоватьБригадныеНаряды Тогда
		ВидыНарядов = "Бригады";
	Иначе
		ВидыНарядов = "Работники";
	КонецЕсли;
	
	Если Объект.ИспользуетсяСписаниеЗатратНаВыпуск Тогда
		ИспользованиеСписанияЗатратНаВыпуск = 1;
	Иначе
		ИспользованиеСписанияЗатратНаВыпуск = 2;
	КонецЕсли;
	
	КалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
	Если НЕ КалендарьПредприятия.Пустая() Тогда
		Элементы.СтраницыКалендарьПредприятия.ТекущаяСтраница = Элементы.СтраницаКалендарьЗадан;
	Иначе
		Элементы.СтраницыКалендарьПредприятия.ТекущаяСтраница = Элементы.СтраницаКалендарьНеЗадан;
	КонецЕсли; 
	
	//++ НЕ УТ
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	Производство21 = НастройкиПроизводства.ИспользуетсяПроизводство21;
	Производство22 = НастройкиПроизводства.ИспользуетсяПроизводство22;
	ПланируетсяГрафикПроизводства = НастройкиПроизводства.ПланируетсяГрафикПроизводства;
	//-- НЕ УТ
	
	//++ НЕ УТКА
	Если НЕ ПланируетсяГрафикПроизводства И НЕ Объект.ИспользоватьПооперационноеПланирование Тогда
		
		Подсказка    = Элементы.ИспользоватьПооперационноеПланирование.Подсказка;
		ПодсказкаДоп = НСтр("ru = 'Для использования пооперационного планирования необходимо включить использование графика производства (раздел ""НСИ и администрирование"" - ""Производство"").';
							|en = 'To use Manufacturing execution system (MES), enable production schedule usage (Master data and settings - Manufacturing).'");
		
		Если ПустаяСтрока(Подсказка) Тогда
			Элементы.ИспользоватьПооперационноеПланирование.Подсказка = ПодсказкаДоп;
		Иначе
			Элементы.ИспользоватьПооперационноеПланирование.Подсказка = ?(Прав(Подсказка, 1) = ".",
				СтрШаблон("%1 %2", Подсказка, ПодсказкаДоп),
				СтрШаблон("%1. %2", Подсказка, ПодсказкаДоп));
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ УТКА
	
	УправлениеВидимостью();
	
	Если ПравоДоступа("Изменение", Метаданные.Справочники.СтруктураПредприятия) Тогда
		УправлениеДоступностью();
	Иначе
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма,,, Новый Структура("Ссылка", Ссылка));
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.СпособНастройкиГрафикаРаботы = Перечисления.СпособыНастройкиГрафикаРаботыПодразделений.ИндивидуальныйГрафик
			И ГрафикРаботы.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""График работы"" не заполнено';
								|en = '""Work schedule"" is required'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ГрафикРаботы",, Отказ);
	КонецЕсли;
	
//++ НЕ УТКА
	Если Объект.СпособНастройкиГрафикаРаботы = Перечисления.СпособыНастройкиГрафикаРаботыПодразделений.Смены
			И Объект.ГрафикиРаботы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Смены""';
								|en = 'No lines entered into the Shifts list'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ГрафикиРаботы", "Объект", Отказ);
	КонецЕсли;
	
	СоставСмен = Новый Соответствие;
	Для каждого Строка Из Объект.ГрафикиРаботы Цикл
		
		Если Строка.ГрафикРаботы.Пустая() Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Смена"" в строке %1 списка ""Смены"".';
											|en = 'Column ""Shift"" in line %1 of the ""Shifts"" list is not filled in.'"),
				Формат(Строка.НомерСтроки, "ЧГ="));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ГрафикиРаботы", Строка.НомерСтроки, "ГрафикРаботы");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
			
		Иначе
			
			Если СоставСмен.Получить(Строка.ГрафикРаботы) = Неопределено Тогда
				
				СоставСмен.Вставить(Строка.ГрафикРаботы, Ложь);
				
			Иначе
				
				Если НЕ СоставСмен[Строка.ГрафикРаботы] Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Смена ""%1"" указана в списке ""Смены"" более одного раза.';
													|en = 'The ""%1"" shift is specified in the Shifts list more than once.'"),
						Строка.ГрафикРаботы);
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ГрафикиРаботы", Строка.НомерСтроки, "ГрафикРаботы");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
					
					СоставСмен[Строка.ГрафикРаботы] = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ПроизводствоПоЗаказам Тогда
		
		//++ Устарело_Производство21
		Если Объект.СпособПолученияПолуфабрикатов.Пустая()
			И Элементы.СпособПолученияПолуфабрикатов.Видимость Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Способ получения полуфабрикатов"" не заполнено';
									|en = 'The ""Semi-finished products receipt method"" field is not filled in'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СпособПолученияПолуфабрикатов", "Объект", Отказ);
		КонецЕсли;
		Если Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование 
			И Объект.СпособПооперационногоУправления.Пустая() Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Способ управления операциями"" не заполнено';
									|en = 'The ""Method of operation management"" is not filled in'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СпособПооперационногоУправления", "Объект", Отказ);
		КонецЕсли;
		//-- Устарело_Производство21
		
		Если Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День
			И НачалоМинуты(НачалоИнтервалаПланированияВремяДня) >= НачалоМинуты(ОкончаниеИнтервалаПланированияВремяДня) Тогда
			ТекстСообщения = НСтр("ru = 'Время начала интервала планирования больше времени окончания';
									|en = 'Planning interval start time is greater than end time'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОкончаниеИнтервалаПланированияДень",, Отказ);
		ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя
			И Перечисления.ДниНедели.Индекс(НачалоИнтервалаПланированияДеньНедели) >= Перечисления.ДниНедели.Индекс(ОкончаниеИнтервалаПланированияДеньНедели) Тогда
			ТекстСообщения = НСтр("ru = 'Время начала интервала планирования больше времени окончания';
									|en = 'Planning interval start time is greater than end time'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОкончаниеИнтервалаПланированияНеделяДень",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьГрафикПредприятияПриИзменении(Элемент)
	
	Если НЕ ГрафикРаботы.Пустая() Тогда
		ГрафикРаботы = Неопределено;
	КонецЕсли;
	Если Объект.ГрафикиРаботы.Количество() <> 0 Тогда
		Объект.ГрафикиРаботы.Очистить();
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйГрафикПриИзменении(Элемент)
	
	Если Объект.ГрафикиРаботы.Количество() <> 0 Тогда
		Объект.ГрафикиРаботы.Очистить();
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСменыПриИзменении(Элемент)
	
	Если НЕ ГрафикРаботы.Пустая() Тогда
		ГрафикРаботы = Неопределено;
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалПланированияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Если Объект.ИнтервалПланирования.Пустая() Тогда
		Объект.ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.День");
	КонецЕсли;
	
	ИнтервалПланированияПриИзмененииНаСервере();
	
	//-- НЕ УТКА
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеМаршрутнымиЛистамиПриИзменении(Элемент)
	
	//++ Устарело_Производство21
	УправлениеДоступностью();
	//-- Устарело_Производство21
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПооперационноеУправлениеПриИзменении(Элемент)
	
	Если НЕ Объект.ИспользоватьПооперационноеУправление Тогда
		
		Объект.ИспользоватьМатериалыВОперациях = Ложь;
		Объект.ИспользоватьВыходныеИзделияВОперациях = Ложь;
		Объект.ИспользоватьСменныеЗадания = Ложь;
		Объект.ИспользоватьПооперационноеПланирование = Ложь;
		
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСменныеЗаданияПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПооперационноеПланированиеПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеДоступностиДляГрафикаПроизводстваКоличествоИнтерваловПриИзменении(Элемент)
	
	УстановитьТекстЧасовДнейМесяцевНедель();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеДоступностиДляРасписанияРЦКоличествоИнтерваловПриИзменении(Элемент)
	
	УстановитьТекстЧасовДнейМесяцевНедель();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПроизводствоПоЗаказамПриИзменении(Элемент)
	
	Объект.ПроизводственноеПодразделение = Объект.ПроизводствоБезЗаказов Или Объект.ПроизводствоПоЗаказам;
	
	Если НЕ Объект.ПроизводствоПоЗаказам Тогда
		
		Объект.ИспользоватьПроизводственныеУчастки = Ложь;
		Объект.ИспользоватьПооперационноеУправление = Ложь;
		Объект.ИспользоватьМатериалыВОперациях = Ложь;
		Объект.ИспользоватьВыходныеИзделияВОперациях = Ложь;
		Объект.ИспользоватьСменныеЗадания = Ложь;
		Объект.ИспользоватьПооперационноеПланирование = Ложь;
		
	КонецЕсли;
	
	ОбъектПроизводствоПоЗаказамПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПроизводствоБезЗаказовПриИзменении(Элемент)
	
	Объект.ПроизводственноеПодразделение = Объект.ПроизводствоБезЗаказов Или Объект.ПроизводствоПоЗаказам;
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПроизводственноеПодразделениеПриИзменении(Элемент)
	
	Объект.ПроизводствоБезЗаказов = Объект.ПроизводственноеПодразделение;
	
	Если Не ЭтоКА Тогда
		Объект.ПроизводствоПоЗаказам = Объект.ПроизводственноеПодразделение;
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыНарядовПриИзменении(Элемент)
	
	Объект.ИспользоватьБригадныеНаряды = ВидыНарядов = "БригадыИРаботники" Или ВидыНарядов = "Бригады";
	Объект.ИспользоватьПерсональныеНаряды = ВидыНарядов = "БригадыИРаботники" Или ВидыНарядов = "Работники";
	
	Если Не Объект.ИспользоватьБригадныеНаряды Тогда
		Объект.ИспользоватьКТУ = Ложь;
		Объект.ИспользоватьТарифныеСтавки = Ложь;
		Объект.ИспользоватьОтработанноеВремя = Ложь;
	КонецЕсли;
	
	Элементы.ИспользоватьКТУ.Доступность = Объект.ИспользоватьБригадныеНаряды;
	Элементы.ИспользоватьОтработанноеВремя.Доступность = Объект.ИспользоватьБригадныеНаряды;
	Элементы.ИспользоватьТарифныеСтавки.Доступность = Объект.ИспользоватьОтработанноеВремя;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтработанноеВремяПриИзменении(Элемент)
	
	Если Не Объект.ИспользоватьОтработанноеВремя Тогда
		Объект.ИспользоватьТарифныеСтавки = Ложь;
	КонецЕсли;
	
	Элементы.ИспользоватьТарифныеСтавки.Доступность = Объект.ИспользоватьОтработанноеВремя;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСмены

&НаКлиенте
Процедура ГрафикиРаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ГрафикиРаботы.ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Объект.ГрафикиРаботы.НайтиПоИдентификатору(ВыбраннаяСтрока).ГрафикРаботы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗавершитьРедактирование(Команда)
	
	ЗавершитьРедактированиеИЗакрыть(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ПараметрыПроцедуры = ОбщегоНазначенияУТКлиент.ПараметрыРазрешенияРедактированияРеквизитовОбъекта();
	ПараметрыПроцедуры.ИмяФормыРазблокировки = "Справочник.СтруктураПредприятия.Форма.РазблокированиеПараметровПроизводства";
	ПараметрыПроцедуры.ОповещениеОРазблокировке = Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект);
	ПараметрыПроцедуры.Объект = Новый Структура("Ссылка", Ссылка);
	
	ОбщегоНазначенияУТКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма, ПараметрыПроцедуры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеВидимостью()
	
	//++ НЕ УТ
	Элементы.ГруппаПроизводственное.Видимость       = ЭтоКА Или (Производство22 И Не Производство21);
	
	Элементы.ГруппаПодразделениеДиспетчер.Видимость = НЕ ЭтоКА;
	Элементы.ГруппаПроизводственное21.Видимость     = НЕ ЭтоКА И Производство21;
	Элементы.ГруппаПроизводствоПоЗаказам.Видимость  = НЕ ЭтоКА;
	Элементы.ГруппаТрудозатраты.Видимость           = Производство22;
	
	Элементы.ГруппаУправлениеМаршрутнымиЛистами.Видимость = НЕ ЭтоКА И Производство21;
	Элементы.СпособПолученияПолуфабрикатов.Видимость      = НЕ ЭтоКА И Производство21;
	Элементы.СкладМатериалов.Видимость                    = НЕ ЭтоКА И Производство21;
	Элементы.ГруппаПроизводствоБезЗаказовУП21.Видимость   = НЕ ЭтоКА И Производство21;
	Элементы.ГруппаПроизводствоБезЗаказовКА.Видимость     = ЭтоКА И Производство21;
	
	Элементы.ГруппаВнутрицеховоеУправление2_2.Видимость    = НЕ ЭтоКА И Производство22;
	Элементы.ИспользоватьСмены.Видимость                   = НЕ ЭтоКА И НЕ Производство21 И Производство22;
	Элементы.ГрафикиРаботы.Видимость                       = НЕ ЭтоКА И НЕ Производство21 И Производство22;
	Элементы.ИспользоватьСменныеЗадания.Видимость          = НЕ ЭтоКА И НЕ Производство21 И Производство22;
	Элементы.ИспользоватьПроизводственныеУчастки.Видимость = НЕ ЭтоКА И НЕ Производство21 И Производство22;
	
	Если НЕ ЭтоКА Тогда
		
		Если Производство21 И Производство22 Тогда
			Элементы.ГруппаВнутрицеховоеУправление.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Иначе
			Элементы.ГруппаВнутрицеховоеУправление.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностью()
	
	ЗапретРедактированияРеквизитов = ИспользуетсяЗапретРедактированияРеквизитов();
	
	//++ НЕ УТКА
	
	//++ Устарело_Производство21
	Если Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		ПооперационноеПланирование = Истина;
	Иначе
		ПооперационноеПланирование = Ложь;
	КонецЕсли;
	
	Если РеквизитДоступенДляРедактирования("СпособПооперационногоУправления", ЗапретРедактированияРеквизитов) Тогда
		
		Элементы.СпособПооперационногоУправления.ТолькоПросмотр = НЕ ПооперационноеПланирование;
		Элементы.СпособПооперационногоУправления.АвтоОтметкаНезаполненного = ПооперационноеПланирование;
		
		Если ПооперационноеПланирование Тогда
			Если Объект.СпособПооперационногоУправления.Пустая() Тогда
				Объект.СпособПооперационногоУправления = ПредопределенноеЗначение("Перечисление.СпособыУправленияОперациями.РегистрацияОтклонений");
			КонецЕсли;
		Иначе
			Объект.СпособПооперационногоУправления = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Элементы.СпособПооперационногоУправления.АвтоОтметкаНезаполненного = Ложь;
		
	КонецЕсли;
	
	Если РеквизитДоступенДляРедактирования("ВремяНаРегистрациюВыполнения", ЗапретРедактированияРеквизитов) Тогда
		Элементы.ВремяНаРегистрациюВыполнения.ТолькоПросмотр = НЕ ПооперационноеПланирование;
		Элементы.ВремяНаРегистрациюВыполненияЕдИзм.ТолькоПросмотр = НЕ ПооперационноеПланирование;
		Если НЕ ПооперационноеПланирование Тогда
			Объект.ВремяНаРегистрациюВыполнения = Неопределено;
		КонецЕсли;
	КонецЕсли;
	//-- Устарело_Производство21
	
	Если РеквизитДоступенДляРедактирования("ИспользоватьМатериалыВОперациях", ЗапретРедактированияРеквизитов) Тогда
		Элементы.ИспользоватьМатериалыВОперациях.Доступность = Объект.ИспользоватьПооперационноеУправление;
	КонецЕсли;
	
	Если РеквизитДоступенДляРедактирования("ИспользоватьВыходныеИзделияВОперациях", ЗапретРедактированияРеквизитов) Тогда
		Элементы.ИспользоватьВыходныеИзделияВОперациях.Доступность = Объект.ИспользоватьПооперационноеУправление;
	КонецЕсли;
	
	Если РеквизитДоступенДляРедактирования("ИспользоватьСменныеЗадания", ЗапретРедактированияРеквизитов) Тогда
		Элементы.ИспользоватьСменныеЗадания.Доступность = Объект.ИспользоватьПооперационноеУправление
			И НЕ Объект.ИспользоватьПооперационноеПланирование;
	КонецЕсли;
		
	Если РеквизитДоступенДляРедактирования("ИспользоватьПооперационноеПланирование", ЗапретРедактированияРеквизитов) Тогда
		Элементы.ИспользоватьПооперационноеПланирование.Доступность = Объект.ИспользоватьПооперационноеУправление
			И НЕ Объект.ИспользоватьСменныеЗадания
			И (ПланируетсяГрафикПроизводства ИЛИ Объект.ИспользоватьПооперационноеПланирование);
	КонецЕсли;
	
	Если РеквизитДоступенДляРедактирования("ГрафикиРаботы", ЗапретРедактированияРеквизитов) Тогда
		Элементы.ГрафикиРаботы.Доступность = (Объект.СпособНастройкиГрафикаРаботы
			= Перечисления.СпособыНастройкиГрафикаРаботыПодразделений.Смены);
		Элементы.ГрафикиРаботы.АвтоОтметкаНезаполненного = Элементы.ГрафикиРаботы.Доступность;
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Если РеквизитДоступенДляРедактирования("ГрафикРаботы", ЗапретРедактированияРеквизитов) Тогда
		Элементы.ГрафикРаботы.Доступность = (Объект.СпособНастройкиГрафикаРаботы
			= Перечисления.СпособыНастройкиГрафикаРаботыПодразделений.ИндивидуальныйГрафик);
		Элементы.ГрафикРаботы.АвтоОтметкаНезаполненного = Элементы.ГрафикРаботы.Доступность;
	КонецЕсли;
	
	Элементы.ГруппаПроизводствоПоЗаказам.Доступность =
		Объект.ПроизводствоПоЗаказам И Производство21
		Или Объект.ПроизводственноеПодразделение И Не Производство21;
	
	Элементы.ГруппаПроизводствоБезЗаказовУП21.Доступность = Не ЭтоКА И Объект.ПроизводствоБезЗаказов;
	Элементы.ГруппаПроизводствоБезЗаказовКА.Доступность   = ЭтоКА И Объект.ПроизводствоБезЗаказов;
	
	Элементы.ГруппаКалендарьПроизводства.Доступность = ЭтоКА И Объект.ПроизводствоБезЗаказов Или Не ЭтоКА;
	Элементы.ГруппаСкладМатериалов.Доступность = ЭтоКА И Объект.ПроизводствоБезЗаказов Или Не ЭтоКА;
	
	Элементы.ГруппаТрудозатраты.Доступность = Объект.ПроизводственноеПодразделение;
	
	Элементы.ИспользоватьКТУ.Доступность = Объект.ИспользоватьБригадныеНаряды;
	Элементы.ИспользоватьОтработанноеВремя.Доступность = Объект.ИспользоватьБригадныеНаряды;
	Элементы.ИспользоватьТарифныеСтавки.Доступность = Объект.ИспользоватьОтработанноеВремя;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЧасовДнейМесяцевНедель()
	
	//++ НЕ УТКА
	
	Если Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час
		ИЛИ Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		ПараметрыПредметаИсчисления = НСтр("ru = 'день, дня, дней, м,,,,,0';
											|en = 'day, days,,,0'");
	ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		ПараметрыПредметаИсчисления = НСтр("ru = 'неделю, недели, недель, ж,,,,,0';
											|en = 'week, weeks,,,0'");
	ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		ПараметрыПредметаИсчисления = НСтр("ru = 'месяц, месяца, месяцев, м,,,,,0';
											|en = 'month, months,,,0'");
	Иначе
		ПараметрыПредметаИсчисления = НСтр("ru = 'интервал, интервала, интервалов, м,,,,,0';
											|en = 'interval, intervals,,,0'");
	КонецЕсли;
	
	ПериодПрописью = ПолучитьПериодПрописью(Объект.ЗаполнениеДоступностиДляГрафикаПроизводстваКоличествоИнтервалов, ПараметрыПредметаИсчисления);
	Элементы.ЧасовДнейНедельМесяцев.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = '%1 и напоминать о составлении за';
														|en = '%1 and remind of drawing up in'"),
													ПериодПрописью);
													
	ПериодПрописью = ПолучитьПериодПрописью(Объект.ЗаполнениеДоступностиДляРасписанияРЦКоличествоИнтервалов, ПараметрыПредметаИсчисления);
	Элементы.ЧасовДнейНедельМесяцев1.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = '%1 и напоминать о составлении за';
														|en = '%1 and remind of drawing up in'"),
													ПериодПрописью);
	//-- НЕ УТКА													
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеИЗакрыть(Результат, ДополнительныеПараметры) Экспорт

	ОчиститьСообщения();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Закрыть(
		ПодготовитьДанныеДляЗаписиИПоместитьВХранилище());
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляЗаписиИПоместитьВХранилище()
	
	Объект.ИспользуетсяСписаниеЗатратНаВыпуск =
		ИспользованиеСписанияЗатратНаВыпуск = 1
			И Объект.ПроизводствоБезЗаказов;
	
	Если Объект.СпособНастройкиГрафикаРаботы =
			Перечисления.СпособыНастройкиГрафикаРаботыПодразделений.ИндивидуальныйГрафик Тогда
		Объект.ГрафикиРаботы.Добавить().ГрафикРаботы = ГрафикРаботы;
	КонецЕсли;
	
	//++ НЕ УТКА
	СохранитьНастройкуИнтервалаПланирования();
	//-- НЕ УТКА
	
	ДанныеОбъекта = Новый Структура;
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		ДанныеОбъекта.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	КонецЦикла;
	
	Для каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		ДанныеОбъекта.Вставить(ТабличнаяЧасть.Имя, Объект[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("СкладМатериалов", СкладМатериалов);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбъекта, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
		УправлениеДоступностью();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбъектПроизводствоПоЗаказамПриИзмененииНаСервере()
	
	//++ НЕ УТКА
	Если Объект.ИнтервалПланирования.Пустая() Тогда
		Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День;
		ИнтервалПланированияПриИзмененииНаСервере();
	КонецЕсли;
	
	//++ Устарело_Производство21
	Если Объект.УправлениеМаршрутнымиЛистами.Пустая() Тогда
		Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ;
	КонецЕсли;
	
	Если Объект.ВремяНаРегистрациюВыполненияЕдИзм.Пустая() Тогда
		Объект.ВремяНаРегистрациюВыполненияЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Минута;
	КонецЕсли;
	//-- Устарело_Производство21
	
	//-- НЕ УТКА
	УправлениеДоступностью();
	
КонецПроцедуры

&НаСервере
Функция ИспользуетсяЗапретРедактированияРеквизитов()
	
	Результат = Ложь;
	
	РеквизитыФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если РеквизитФормы.Имя = "ПараметрыЗапретаРедактированияРеквизитов" Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РеквизитДоступенДляРедактирования(ИмяРеквизита, ЗапретРедактированияРеквизитов)
	
	Если НЕ ЗапретРедактированияРеквизитов Тогда
		Результат = Истина;
	Иначе
		
		СтруктураПоиска = Новый Структура("ИмяРеквизита", ИмяРеквизита);
		НайденныеСтроки = ЭтотОбъект.ПараметрыЗапретаРедактированияРеквизитов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Результат = Истина;
		Иначе
			Результат = НайденныеСтроки[0].РедактированиеРазрешено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//++ НЕ УТКА

&НаСервере
Функция ПолучитьПериодПрописью(Число, ПараметрыПредметаИсчисления)
	
	ПорцияПрописью = ЧислоПрописью(Число,, ПараметрыПредметаИсчисления);
	
	ПорцияПрописьюМ = СтрЗаменить(ПорцияПрописью, " ", Символы.ПС);
	
	Возврат СтрПолучитьСтроку(ПорцияПрописьюМ, СтрЧислоСтрок(ПорцияПрописьюМ));
	
КонецФункции

&НаСервере
Функция СохранитьНастройкуИнтервалаПланирования()
	
	ПустаяДата = '00010101';
	
	Если Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		
		ДлинаИнтервала = 3600;
		
		Объект.НачалоИнтервалаПланирования = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ПустаяДата, Объект.ИнтервалПланирования);
		Объект.ОкончаниеИнтервалаПланирования = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ПустаяДата, Объект.ИнтервалПланирования);
		
	ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День
		ИЛИ Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.ПустаяСсылка() Тогда
		
		ДлинаИнтервала = 86400;
		
		Объект.НачалоИнтервалаПланирования = ПустаяДата + Час(НачалоИнтервалаПланированияВремяДня) * 60 * 60 
															+ Минута(НачалоИнтервалаПланированияВремяДня) * 60;
															
		Объект.ОкончаниеИнтервалаПланирования = ПустаяДата + Час(ОкончаниеИнтервалаПланированияВремяДня) * 60 * 60 
																+ Минута(ОкончаниеИнтервалаПланированияВремяДня) * 60;
																
	ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		
		ДлинаИнтервала = 604800;
		
		Объект.НачалоИнтервалаПланирования = ПустаяДата + Перечисления.ДниНедели.Индекс(НачалоИнтервалаПланированияДеньНедели) * 86400
															+ Час(НачалоИнтервалаПланированияВремяДня) * 60 * 60 
																+ Минута(НачалоИнтервалаПланированияВремяДня) * 60;
																
		Объект.ОкончаниеИнтервалаПланирования = ПустаяДата + Перечисления.ДниНедели.Индекс(ОкончаниеИнтервалаПланированияДеньНедели) * 86400
																+ Час(ОкончаниеИнтервалаПланированияВремяДня) * 60 * 60 
																	+ Минута(ОкончаниеИнтервалаПланированияВремяДня) * 60;
																	
	ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		
		ДлинаИнтервала = 2678400;
		
		Объект.НачалоИнтервалаПланирования = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ПустаяДата, Объект.ИнтервалПланирования);
		Объект.ОкончаниеИнтервалаПланирования = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ПустаяДата, Объект.ИнтервалПланирования);
		
	КонецЕсли;
	
	Если Объект.НачалоИнтервалаПланирования = Объект.ОкончаниеИнтервалаПланирования Тогда
		
		Объект.ОкончаниеИнтервалаПланирования = КонецМинуты(Объект.ОкончаниеИнтервалаПланирования + ДлинаИнтервала - 60);
		
	ИначеЕсли Объект.НачалоИнтервалаПланирования > Объект.ОкончаниеИнтервалаПланирования Тогда
		
		Объект.ОкончаниеИнтервалаПланирования = КонецМинуты(Объект.ОкончаниеИнтервалаПланирования + ДлинаИнтервала);
		
	Иначе
		
		Объект.ОкончаниеИнтервалаПланирования = КонецМинуты(Объект.ОкончаниеИнтервалаПланирования);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИнициализироватьПараметрыИнтервалаПланирования(Сбросить = Ложь)
	
	Если Сбросить Тогда
		
		Объект.НачалоИнтервалаПланирования = '00010101';
		Объект.ОкончаниеИнтервалаПланирования = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования('00010101', Объект.ИнтервалПланирования);
		
	КонецЕсли;
	
	Если Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		
		Элементы.ГруппаНастройкаИнтервалаПланирования.Видимость = Истина;
		Элементы.ГруппаНастройкаИнтервалаПланирования.ТекущаяСтраница = Элементы.ГруппаИнтервалПланированияДень;
		
		НачалоИнтервалаПланированияВремяДня    = Объект.НачалоИнтервалаПланирования;
		ОкончаниеИнтервалаПланированияВремяДня = Объект.ОкончаниеИнтервалаПланирования;
		
	ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		
		Элементы.ГруппаНастройкаИнтервалаПланирования.Видимость = Истина;
		Элементы.ГруппаНастройкаИнтервалаПланирования.ТекущаяСтраница = Элементы.ГруппаИнтервалПланированияНеделя;
		
		НачалоИнтервалаПланированияДеньНедели     = Перечисления.ДниНедели[ДеньНедели(Объект.НачалоИнтервалаПланирования) - 1];
		НачалоИнтервалаПланированияВремяДня       = Объект.НачалоИнтервалаПланирования;
		
		ОкончаниеИнтервалаПланированияДеньНедели  = Перечисления.ДниНедели[ДеньНедели(Объект.ОкончаниеИнтервалаПланирования) - 1];
		ОкончаниеИнтервалаПланированияВремяДня    = Объект.ОкончаниеИнтервалаПланирования;
		
	Иначе
		
		Элементы.ГруппаНастройкаИнтервалаПланирования.Видимость = Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИнтервалПланированияПриИзмененииНаСервере()
	
	УстановитьТекстЧасовДнейМесяцевНедель();
	ИнициализироватьПараметрыИнтервалаПланирования(Истина);
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

