#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	//++ НЕ УТКА
	Результат.Добавить("ПодразделениеДиспетчер");
	
	Результат.Добавить("ИнтервалПланирования;
		|НачалоИнтервалаПланированияДень, ОкончаниеИнтервалаПланированияДень,
		|НачалоИнтервалаПланированияНеделяДень, НачалоИнтервалаПланированияНеделяВремя,
		|ОкончаниеИнтервалаПланированияНеделяДень, ОкончаниеИнтервалаПланированияНеделяВремя");
	Результат.Добавить("УправлениеМаршрутнымиЛистами");
	Результат.Добавить("СпособПооперационногоУправления");
	Результат.Добавить("СпособПолученияПолуфабрикатов");
	Результат.Добавить("ИспользоватьПооперационноеУправление");
	Результат.Добавить("ИспользоватьМатериалыВОперациях");
	Результат.Добавить("ИспользоватьВыходныеИзделияВОперациях");
	Результат.Добавить("ИспользоватьПооперационноеПланирование");
	Результат.Добавить("ИспользоватьСменныеЗадания");
	Результат.Добавить("ИспользоватьПроизводственныеУчастки");
	//-- НЕ УТКА
	
	Результат.Добавить("ПериодичностьОформленияВыработки");
	Результат.Добавить("ИспользоватьКТУ");
	Результат.Добавить("ИспользоватьТарифныеСтавки");
	Результат.Добавить("ИспользоватьОтработанноеВремя");
	Результат.Добавить("ИспользоватьБригадныеНаряды;
		|ВидыНарядовБригады, ВидыНарядовРаботники, ВидыНарядовБригадыИРаботники");
	Результат.Добавить("ИспользоватьПерсональныеНаряды;
		|ВидыНарядовБригады, ВидыНарядовРаботники, ВидыНарядовБригадыИРаботники");
	
	Результат.Добавить("СпособНастройкиГрафикаРаботы");
	Результат.Добавить("ГрафикиРаботы; ГрафикРаботы");
	
	Результат.Добавить("ПроизводственноеПодразделение");
	Результат.Добавить("ПроизводствоПоЗаказам");
	Результат.Добавить("ПроизводствоБезЗаказов");
	Результат.Добавить("ИспользуетсяСписаниеЗатратНаВыпуск;
		|ОтдельнымДокументом, ПоПравиламРаспределения");
	
	Возврат Результат;
	
КонецФункции

// Получает подразделение-диспетчер, если оно одно в ИБ
//  Если подразделение-диспетчер не передано в качестве параметра или передано пустое,
//  возвращает единственное в информационной базе подразделение-диспетчер.
//  Если подразделений-диспетчеров в базе несколько,
//  возвращает подразделение-диспетчер из настроек пользователя.
//  Если подразделение-диспетчер не указано в настройках пользователя,
//  возвращает пустое подразделение.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - ссылка на пользователя.
// 
// Возвращаемое значение:
//  СправочникСсылка.СтруктураПредприятия - подразделение-диспетчер по умолчанию.
//
Функция ПолучитьПодразделениеДиспетчерПоУмолчанию(Знач Пользователь = Неопределено) Экспорт
	
//++ НЕ УТКА
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления
		|	И СтруктураПредприятия.ПодразделениеДиспетчер
		|");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		
		Подразделение = Выборка.Подразделение;
		
	ИначеЕсли ЗначениеЗаполнено(Пользователь) Тогда
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Пользователи.Подразделение КАК Подразделение
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Ссылка = &Пользователь
			|	И ЕСТЬNULL(Пользователи.Подразделение.ПодразделениеДиспетчер, ЛОЖЬ)
			|");
			
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Подразделение = Выборка.Подразделение;
		Иначе
			Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
//-- НЕ УТКА
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
//++ НЕ УТКА
	КонецЕсли;
//-- НЕ УТКА
	
	Возврат Подразделение;

КонецФункции

// Возвращает количество подразделений-диспетчеров.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество подразделений-диспетчеров.
//
Функция КоличествоПодразделенийДиспетчеров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления
		|	И СтруктураПредприятия.ПодразделениеДиспетчер");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Возвращает признак использования нескольких подразделений-диспетчеров.
// 
// Возвращаемое значение:
//  Булево - Истина, если используется несколько подразделений-диспетчеров.
//
Функция ИспользуетсяНесколькоПодразделенийДиспетчеров() Экспорт
	
	Возврат КоличествоПодразделенийДиспетчеров() > 1;
	
КонецФункции

//++ НЕ УТ

// Проверяет использование параметров производства
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки.
//
Процедура ПроверитьИспользованиеПараметровПроизводства(Параметры, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоиска.Ссылка
	|ИЗ
	|	Документ.ДвижениеПродукцииИМатериалов КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Отправитель = &Подразделение
	|	И ТаблицаПоиска.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение))
	|	И НЕ ТаблицаПоиска.ПоРаспоряжениям
	//++ Устарело_Производство21
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыпускПродукции.Ссылка
	|ИЗ
	|	Документ.ВыпускПродукции КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Подразделение = &Подразделение
	|	И НЕ ВыпускПродукции.ВыпускПоРаспоряжениям
	//-- Устарело_Производство21
	|;
	//++ НЕ УТКА
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыРабочихЦентров.Ссылка
	|ИЗ
	|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|ГДЕ
	|	ВидыРабочихЦентров.Подразделение = &Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Подразделение = &Подразделение
	|	И ЭтапыПроизводства.ПланироватьРаботуВидовРабочихЦентров
	|;
	|
	//++ Устарело_Производство21
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказНаПроизводство.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Подразделение = &Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	//-- Устарело_Производство21
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказНаПроизводство.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Подразделение = &Подразделение
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Подразделение = &Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоиска.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Подразделение = &Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоиска.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Подразделение = &Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоиска.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Подразделение = &Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоиска.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоиска.Ссылка
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2 КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоиска.Ссылка
	|ИЗ
	|	Документ.СменноеЗадание КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Подразделение = &Подразделение
	|
	|;
	//++ Устарело_Производство21
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	МаршрутныйЛистПроизводства.Ссылка
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПооперационноеРасписание.ИдентификаторОперации
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.Подразделение = &Подразделение
	|;
	//-- Устарело_Производство21	

	//-- НЕ УТКА
	|";
	
	Запрос.УстановитьПараметр("Подразделение", Параметры.Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("ИспользуетсяДляПроизводстваБезЗаказов",       НЕ Результат[0].Пустой());
	
	//++ НЕ УТКА
	РезультатПроверки.Вставить("ИнтервалПланированияИспользуется",            НЕ Результат[1].Пустой());
	
	РезультатПроверки.Вставить("ИспользуетсяКакДиспетчер",                    НЕ Результат[2].Пустой());
	
	РезультатПроверки.Вставить("ИспользуетсяДляПроизводстваПоЗаказам",        НЕ Результат[3].Пустой());
	
	РезультатПроверки.Вставить("ИспользуетсяПооперационноеУправлениеЭтапами", НЕ Результат[4].Пустой());
	
	РезультатПроверки.Вставить("ИспользуютсяСменныеЗадания",                  НЕ Результат[5].Пустой());
	
	//++ Устарело_Производство21
	РезультатПроверки.Вставить("УправлениеМаршрутнымиЛистамиИспользуется",    НЕ Результат[6].Пустой());
	
	РезультатПроверки.Вставить("ПооперационноеРасписаниеИспользуется",        НЕ Результат[7].Пустой());
	//-- Устарело_Производство21
	
	//-- НЕ УТКА
	
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресХранилища);
	
КонецПроцедуры

// Определяет цеховую кладовую подразделения
//
// Параметры:
//	Подразделение	- СправочникСсылка.СтруктураПредприятия - Подразделение для которого определяется кладовая.
//
// Возвращаемое значение:
//		СправочникСсылка.Склады - Цеховая кладовая подразделения.
//
Функция ЦеховаяКладоваяПоУмолчанию(Подразделение) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		
		Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
			Возврат Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Таблица.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И НЕ Таблица.ЭтоГруппа
		|	И Таблица.Подразделение = &Подразделение
		|	И Таблица.ЦеховаяКладовая";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Таблица.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И НЕ Таблица.ЭтоГруппа
		|	И Таблица.ЦеховаяКладовая";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Склад = Выборка.Склад;
	Иначе
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Склад;

КонецФункции

//-- НЕ УТ

//++ НЕ УТКА

// Возвращает даты по которые нужно заполнить доступность
//
// Параметры:
//  Подразделение	- СправочникСсылка.СтруктураПредприятия - подразделение для которого нужно получить данные.
//
// Возвращаемое значение:
//   Структура   - Даты по которые нужно заполнить доступность.
//
Функция ДоступностьТребуетсяЗаполнитьПо(Подразделение) Экспорт
	
	ДоступностьДляГрафикаНужноЗаполнитьПо = '000101010000';
	ГрафикРаботыРЦНужнозаполнитьПо = '000101010000';
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураПредприятия.ЗаполнениеДоступностиДляГрафикаПроизводстваНапоминаниеДней,
	|	СтруктураПредприятия.ЗаполнениеДоступностиДляРасписанияРЦНапоминаниеДней
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка = &Подразделение";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущаяДатаСеанса = НачалоДня(ТекущаяДатаСеанса());
		Если Выборка.ЗаполнениеДоступностиДляГрафикаПроизводстваНапоминаниеДней <> 0 Тогда
			ДоступностьДляГрафикаНужноЗаполнитьПо = ТекущаяДатаСеанса + Выборка.ЗаполнениеДоступностиДляГрафикаПроизводстваНапоминаниеДней * 86400;
		КонецЕсли; 
		Если Выборка.ЗаполнениеДоступностиДляРасписанияРЦНапоминаниеДней <> 0 Тогда
			ГрафикРаботыРЦНужнозаполнитьПо = ТекущаяДатаСеанса + Выборка.ЗаполнениеДоступностиДляРасписанияРЦНапоминаниеДней * 86400;
		КонецЕсли; 
	КонецЕсли; 
	
	ТребуетсяЗаполнитьПо = Новый Структура;
	ТребуетсяЗаполнитьПо.Вставить("ДоступностьДляГрафикаНужноЗаполнитьПо", ДоступностьДляГрафикаНужноЗаполнитьПо);
	ТребуетсяЗаполнитьПо.Вставить("ГрафикРаботыРЦНужнозаполнитьПо", ГрафикРаботыРЦНужнозаполнитьПо);
	
	Возврат ТребуетсяЗаполнитьПо;

КонецФункции

// Заполняет служебные константы:
//	 - ИспользоватьМетодикуББВ,
//	 - ИспользоватьМетодикуПооперационноеПланирование,
//	 - ИспользоватьМетодикуРегистрацияОпераций,
//	 - ИспользоватьПооперационноеУправление,
//	 - ИспользоватьПооперационноеПланирование.
//
Процедура ЗаполнитьИспользуемыеМетодикиУправления() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		//++ Устарело_Производство21
		|	МАКСИМУМ(СтруктураПредприятия.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ)
		|			И Производство2_1.Значение) КАК ИспользоватьМетодикуББВ,
		|
		|	МАКСИМУМ(СтруктураПредприятия.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование)
		|			И Производство2_1.Значение) КАК ИспользоватьМетодикуПооперационноеПланирование,
		|
		|	МАКСИМУМ(СтруктураПредприятия.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций)
		|			И Производство2_1.Значение) КАК ИспользоватьМетодикуРегистрацияОпераций,
		//-- Устарело_Производство21
		|
		|	МАКСИМУМ(СтруктураПредприятия.ИспользоватьПооперационноеУправление
		|			И НЕ СтруктураПредприятия.ИспользоватьПооперационноеПланирование
		|			И Производство2_2.Значение) КАК ИспользоватьПооперационноеУправление,
		|
		|	МАКСИМУМ(СтруктураПредприятия.ИспользоватьПооперационноеУправление
		|			И СтруктураПредприятия.ИспользоватьПооперационноеПланирование
		|			И Производство2_2.Значение) КАК ИспользоватьПооперационноеПланирование,
		|
		|	МАКСИМУМ(СтруктураПредприятия.ИспользоватьСменныеЗадания
		|			И Производство2_2.Значение) КАК ИспользоватьСменныеЗадания
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьУправлениеПроизводством КАК Производство2_1
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьУправлениеПроизводством2_2 КАК Производство2_2
		|		ПО (ИСТИНА)");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		//++ Устарело_Производство21
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьМетодикуББВ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьМетодикуПооперационноеПланирование");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьМетодикуРегистрацияОпераций");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//-- Устарело_Производство21
	
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьПооперационноеУправление");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьПооперационноеПланирование");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьСменныеЗадания");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьУправлениеПроизводством");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьУправлениеПроизводством2_2");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		//++ Устарело_Производство21
		Если Константы.ИспользоватьМетодикуББВ.Получить() <> Выборка.ИспользоватьМетодикуББВ Тогда
			Константы.ИспользоватьМетодикуББВ.Установить(Выборка.ИспользоватьМетодикуББВ);
		КонецЕсли;
		
		Если Константы.ИспользоватьМетодикуПооперационноеПланирование.Получить() <> Выборка.ИспользоватьМетодикуПооперационноеПланирование Тогда
			Константы.ИспользоватьМетодикуПооперационноеПланирование.Установить(Выборка.ИспользоватьМетодикуПооперационноеПланирование);
		КонецЕсли;
		
		Если Константы.ИспользоватьМетодикуРегистрацияОпераций.Получить() <> Выборка.ИспользоватьМетодикуРегистрацияОпераций Тогда
			Константы.ИспользоватьМетодикуРегистрацияОпераций.Установить(Выборка.ИспользоватьМетодикуРегистрацияОпераций);
		КонецЕсли;
		//-- Устарело_Производство21
		
		Если Константы.ИспользоватьПооперационноеУправление.Получить() <> Выборка.ИспользоватьПооперационноеУправление Тогда
			Константы.ИспользоватьПооперационноеУправление.Установить(Выборка.ИспользоватьПооперационноеУправление);
		КонецЕсли;
		
		Если Константы.ИспользоватьПооперационноеПланирование.Получить() <> Выборка.ИспользоватьПооперационноеПланирование Тогда
			Константы.ИспользоватьПооперационноеПланирование.Установить(Выборка.ИспользоватьПооперационноеПланирование);
		КонецЕсли;
		
		Если Константы.ИспользоватьСменныеЗадания.Получить() <> Выборка.ИспользоватьСменныеЗадания Тогда
			Константы.ИспользоватьСменныеЗадания.Установить(Выборка.ИспользоватьСменныеЗадания);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать используемые методики управления производством';
								|en = 'Cannot save the used production management methods'");
		
		СобытиеЖурналаРегистрации = 
			НСтр("ru = 'Межцеховое управление';
				|en = 'Production scheduling and controlling'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
			+ "."
			+ НСтр("ru = 'Ошибка заполнения методик управления производством';
					|en = 'Production management methods filling error'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,
			, 
			, 
			ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Определяет используется ли пооперационное управление этапами производства в подразделении.
//
// Параметры:
//	Подразделение	- СправочникСсылка.СтруктураПредприятия - Подразделение.
//
// Возвращаемое значение:
//		Булево - Истина, если в подразделении используется пооперационное управление.
//
Функция ИспользоватьПооперационноеУправление(Подразделение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка = &Ссылка
	|	И СтруктураПредприятия.ИспользоватьПооперационноеУправление
	|	И НЕ СтруктураПредприятия.ИспользоватьПооперационноеПланирование");
	Запрос.УстановитьПараметр("Ссылка", Подразделение);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Определяет используется ли пооперационное планирование операций этапов производства в подразделении.
//
// Параметры:
//	Подразделение	- СправочникСсылка.СтруктураПредприятия - Подразделение.
//
// Возвращаемое значение:
//		Булево - Истина, если в подразделении используется пооперационное планирование.
//
Функция ИспользоватьПооперационноеПланирование(Подразделение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка = &Ссылка
	|	И СтруктураПредприятия.ИспользоватьПооперационноеУправление
	|	И СтруктураПредприятия.ИспользоватьПооперационноеПланирование");
	Запрос.УстановитьПараметр("Ссылка", Подразделение);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

//-- НЕ УТКА

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	//++ НЕ УТ
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ПодразделениеДиспетчерИлиПроизводственноеПодразделение") Тогда
		ПроизводствоВызовСервера.СтруктураПредприятияОбработкаПолученияДанныхВыбора(
					ДанныеВыбора, 
					Параметры, 
					СтандартнаяОбработка);
	КонецЕсли; 
	//-- НЕ УТ
	
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

//++ НЕ УТ

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецЕсли
