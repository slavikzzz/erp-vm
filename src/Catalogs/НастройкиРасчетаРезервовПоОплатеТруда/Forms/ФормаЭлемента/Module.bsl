
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Организация", "Объект.Организация");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
			Объект.НачалоПериода = НачалоГода(ТекущаяДатаСеанса());
			Объект.ПериодВыплаты = НачалоГода(Объект.НачалоПериода);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
			Объект.КонецПериода = КонецГода(ТекущаяДатаСеанса());
		КонецЕсли;
		ЗаполнитьБазовыеНачисления();
		
		ПриПолученииДанныхНаСервере();
		
		ЗначениеКопирования = Параметры.ЗначениеКопирования;
		
	КонецЕсли;
	
	КонтекстныйВызов = Параметры.КонтекстныйВызов;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		ЗаписатьНастройкуРасчетаРезерва();
		ПараметрыЗаписи.Вставить("ОтключитьСинхронизацию", Истина);
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("ОтключитьСинхронизацию") Тогда
		Справочники.НастройкиРасчетаРезервовПоОплатеТруда.СинхронизироватьНастройки(Объект);
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.ВидыРасчетовРезерва.Количество() = 0 Тогда
		ОбновитьНастройкиВидовРасчетаПриИзмененииОрганизации();
	Иначе
		ПоказатьВопросОбОчисткеПриИзмененииПоказателя("Организация");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезервПриИзменении(Элемент)
	
	Если Объект.ВидыРасчетовРезерва.Количество() = 0 Тогда
		ОбновитьПараметрыРасчетаРезерва();
	ИначеЕсли Не ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		ПоказатьВопросОбОчисткеПриИзмененииПоказателя("Резерв");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНастройкиГоловнойОрганизацииПриИзменении(Элемент)
	
	ИспользоватьНастройкиГоловнойОрганизацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРезерваПриИзменении(Элемент)
	
	Если Объект.ВидыРасчетовРезерва.Количество() = 0 Тогда
		ЭтоРасчетОтпуска = Объект.ВидРезерва = ВидРезерваОтпуск;
		УстановитьПериодВыплаты(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	Иначе
		ПоказатьВопросОбОчисткеПриИзмененииПоказателя("ВидРезерва");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГодПериодаПриИзменении(Элемент)
	
	Объект.КонецПериода = КонецГода(Объект.НачалоПериода);
	УстановитьПериодВыплаты(ЭтотОбъект);
	УстановитьПараметрыВыплаты(ЭтотОбъект);
	ПроверитьСоответствиеПериодов();
	ОбновитьПараметрыРасчетаРезерва();
	
КонецПроцедуры

&НаКлиенте
Процедура ГодПериодаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыплатыПриИзменении(Элемент)
	
	УстановитьПериодВыплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьРезервНУПриИзменении(Элемент)
	
	МетодНачисленияРезерваНУ = 0;
	
	Объект.НормативОтчисленийВРезервНУ           = 0;
	Объект.ПредельнаяВеличинаОтчисленийВРезервНУ = 0;
	
	НасроитьМетодНачисленияРезерваНУ();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияРезерваБУПриИзменении(Элемент)
	
	Если Объект.МетодНачисленияРезерваБУ = ПредопределенноеЗначение("Перечисление.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод") Тогда
		Если Объект.НалоговыйУчетПоНастройкамБухгалтерскогоУчета Тогда
			Объект.МетодНачисленияРезерваНУ = Объект.МетодНачисленияРезерваБУ;
		КонецЕсли;
	Иначе
		Объект.НормативОтчисленийВРезервБУ = 0;
	КонецЕсли;
	
	НасроитьМетодНачисленияРезерваНУ();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияРезерваНУПриИзменении(Элемент)
	
	НасроитьМетодНачисленияРезерваНУ();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьНачислениеПредельнойСуммойБУПриИзменении(Элемент)
	
	Если Не Объект.ОграничиватьНачислениеПредельнойСуммойБУ Тогда
		Объект.ПредельнаяВеличинаОтчисленийВРезервБУ = 0;
	ИначеЕсли Объект.НалоговыйУчетПоНастройкамБухгалтерскогоУчета Тогда
		Объект.ОпределятьИзлишкиЕжемесячноНУ = Объект.ОпределятьИзлишкиЕжемесячноБУ;
		Объект.ПредельнаяВеличинаОтчисленийВРезервНУ = Объект.ПредельнаяВеличинаОтчисленийВРезервБУ;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьНачислениеПредельнойСуммойНУПриИзменении(Элемент)
	
	Если Не Объект.ОграничиватьНачислениеПредельнойСуммойНУ Тогда
		Объект.ПредельнаяВеличинаОтчисленийВРезервНУ = 0;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НормативОтчисленийВРезервБУПриИзменении(Элемент)
	
	Если Объект.НалоговыйУчетПоНастройкамБухгалтерскогоУчета Тогда
		Объект.НормативОтчисленийВРезервНУ = Объект.НормативОтчисленийВРезервБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредельнаяВеличинаОтчисленийВРезервБУПриИзменении(Элемент)
	
	Если Объект.НалоговыйУчетПоНастройкамБухгалтерскогоУчета Тогда
		Объект.ПредельнаяВеличинаОтчисленийВРезервНУ = Объект.ПредельнаяВеличинаОтчисленийВРезервБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределятьИзлишкиЕжемесячноБУПриИзменении(Элемент)
	
	Если Объект.НалоговыйУчетПоНастройкамБухгалтерскогоУчета Тогда
		Объект.ОпределятьИзлишкиЕжемесячноНУ = Объект.ОпределятьИзлишкиЕжемесячноБУ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВидыРасчетовРезерва

&НаКлиенте
Процедура ВидыРасчетовРезерваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВидыРасчетовРезерваНастройкаВидаРасчета" Тогда
		
		ТекущиеДанные = Элементы.ВидыРасчетовРезерва.ТекущиеДанные;
		Если ТекущиеДанные.ДоступнаДетальнаяНастройка Тогда
			
			Если Параметры.Ключ.Пустая() Тогда
				ДополнительныеПараметры = Новый Структура("ВидРасчетаРезерва, НазначениеПоказателя",
					ТекущиеДанные.ВидРасчетаРезерва, ТекущиеДанные.НазначениеПоказателя);
				ТекстВопроса = НСтр("ru = 'Перед тем как заполнить назначение показателей необходимо записать настройку расчета.
				|Продолжить?';
				|en = 'Before filling the indicator purposes, save the calculation setting.
				|Continue?'");
				Оповещение = Новый ОписаниеОповещения("ВидыРасчетовРезерваНастройкаВидаРасчетаВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Иначе
				ОткрытьДетальныеНастройки(ТекущиеДанные.ВидРасчетаРезерва, ТекущиеДанные.НазначениеПоказателя);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ВидыРасчетовРезерваФормулаВидаРасчета" Тогда
		
		ТекущиеДанные = Элементы.ВидыРасчетовРезерва.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидРасчетаРезерва) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("РежимРедактированияФормулы", Истина);
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ВидРасчетаРезерва);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр Или Объект.ИспользоватьНастройкиГоловнойОрганизации);
		ОткрытьФорму("Справочник.ВидыРасчетовРезервовПоОплатеТруда.Форма.ФормаЭлемента",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Поле.Имя = "ВидыРасчетовРезерваПоказательВидаРасчета" Тогда
		
		ТекущиеДанные = Элементы.ВидыРасчетовРезерва.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидРасчетаРезерва) Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметры.Ключ.Пустая() Тогда
			ДополнительныеПараметры = Новый Структура("ВидРасчетаРезерва",
				ТекущиеДанные.ВидРасчетаРезерва);
			ТекстВопроса = НСтр("ru = 'Перед тем как задать значения показателей необходимо записать настройку расчета.
								|Продолжить?';
								|en = 'Before setting the indicator values, save the calculation setting.
								|Continue?'");
			Оповещение = Новый ОписаниеОповещения("ВидыРасчетовРезерваПоказательВидаРасчетаВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			ОткрытьНастройкиПоказателейВидаРасчета(ТекущиеДанные.ВидРасчетаРезерва);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидыРасчетовРезерваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВидыРасчетовРезерва.ТекущиеДанные;
		Если ЭтоРасчетОтпуска Тогда
			ТекущиеДанные.ВидРасчета = ПредопределенноеЗначение("Справочник.ВидыОтпусков.ПустаяСсылка");
		Иначе
			ТекущиеДанные.ВидРасчета = ПредопределенноеЗначение("ПланВидовРасчета.Начисления.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРасчетовРезерваВидРасчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРасчетовРезерваВидОтпускаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРасчетовРезерваНазначениеПоказателяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыРасчетовРезерва.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтрокаТаблицы = СтукрураСтрокиВидыРасчетовРезерва();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекущиеДанные);
		ВидыРасчетовРезерваНазначениеПоказателяПриИзмененииНаСервере(СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРасчетовРезерваНазначениеПоказателяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРасчетовРезерваПриИзменении(Элемент)
	
	ВидыРасчетовРезерваПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРасчетовРезерваВидРасчетаПриИзменении(Элемент)
	
	ВидыРасчетовРезерваВидПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРасчетовРезерваВидОтпускаПриИзменении(Элемент)
	
	ВидыРасчетовРезерваВидПриИзменении();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РасчетнаяБаза(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастройки", АдресТаблицыИсключенийРасчетнойБазыФондаОплатыТруда());
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр Или Объект.ИспользоватьНастройкиГоловнойОрганизации);
	
	Оповещение = Новый ОписаниеОповещения("РасчетнаяБазаЗавершениеРедактирования", ЭтотОбъект);
	ОткрытьФорму("Справочник.НастройкиРасчетаРезервовПоОплатеТруда.Форма.ФормаНастройкаРасчетнойБазы",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
		ОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация,"ОбособленноеПодразделение");
	Иначе
		ГоловнаяОрганизация       = Справочники.Организации.ПустаяСсылка();
		ОбособленноеПодразделение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНазваниеПараметраРасчетаРезервов()
	
	ОписаниеОбъекта = Новый Структура();
	ОписаниеОбъекта.Вставить("Организация",   Объект.Организация);
	ОписаниеОбъекта.Вставить("Резерв",        Объект.Резерв);
	ОписаниеОбъекта.Вставить("НачалоПериода", Объект.НачалоПериода);
	ОписаниеОбъекта.Вставить("КонецПериода",  Объект.КонецПериода);
	
	Объект.Наименование       = НаименованиеНастройки(ОписаниеОбъекта);
	Объект.ПолноеНаименование = ПолноеНаименованиеНастройки(ОписаниеОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиВидовРасчетаПриИзмененииОрганизации()
	
	ОрганизацияПриИзмененииНаСервере();
	ОбновитьПараметрыРасчетаРезерва();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыРасчетаРезерва()
	
	СформироватьНазваниеПараметраРасчетаРезервов();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеНастройки(Источник)
	
	Возврат РезервыПоОплатеТруда.НаименованиеНастройки(Источник);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолноеНаименованиеНастройки(Источник)
	
	Возврат РезервыПоОплатеТруда.ПолноеНаименованиеНастройки(Источник);
	
КонецФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ФормироватьРезервБУ = Истина;
	
	ОрганизацияСсылка = Объект.Организация;
	Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(ОрганизацияСсылка);
		ОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка,"ОбособленноеПодразделение");
		
		ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнаяОрганизация,"ЮридическоеФизическоеЛицо");
		ЭтоФизЛицо = ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли;
	
	Если Объект.ФормироватьРезервНУ
		И Объект.НалоговыйУчетПоНастройкамБухгалтерскогоУчета Тогда
		МетодНачисленияРезерваНУ = 1;
	КонецЕсли;
	
	ОрганизацияПрежнееЗначение = Объект.Организация;
	РезервПрежнееЗначение      = Объект.Резерв;
	ВидРезерваПрежнееЗначение  = Объект.ВидРезерва;
	
	ВидРезерваОтпуск = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
	ЭтоРасчетОтпуска = Объект.ВидРезерва = ВидРезерваОтпуск;
	
	УстановитьПараметрыВыплаты(ЭтотОбъект);
	ПериодВыплаты = Объект.НачалоПериода = Объект.ПериодВыплаты;
	
	УстановитьПризнакНастройкиПоказателей();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВидыРасчетовРезерваПриИзмененииНаСервере()
	
	СинхронизироватьНастройкиВидовРасчета();
	УстановитьПризнакНастройкиПоказателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРасчетовРезерваВидПриИзменении()
	
	ТекущиеДанные = Элементы.ВидыРасчетовРезерва.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидРасчетаРезерва) Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = СтукрураСтрокиВидыРасчетовРезерва();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекущиеДанные);
	ВидыРасчетовРезерваВидРасчетаПриИзмененииНаСервере(СтрокаТаблицы);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрокаТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ВидыРасчетовРезерваВидРасчетаПриИзмененииНаСервере(СтрокаТаблицы)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчетаРезерва) Тогда
		Возврат;
	КонецЕсли;
	
	ВидРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ВидРасчетаРезерва, "ВидРасчета");
	Если ЭтоРасчетОтпуска И ВидРасчета <> СтрокаТаблицы.ВидОтпуска Тогда
		СтрокаТаблицы.ВидРасчетаРезерва = Справочники.ВидыОтпусков.ПустаяСсылка();
	ИначеЕсли Не ЭтоРасчетОтпуска И ВидРасчета <> СтрокаТаблицы.ВидРасчета Тогда
		СтрокаТаблицы.ВидРасчетаРезерва = Справочники.ВидыРасчетовРезервовПоОплатеТруда.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НасроитьМетодНачисленияРезерваНУ()
	
	Если МетодНачисленияРезерваНУ = 0 Тогда
		Объект.ОграничиватьНачислениеПредельнойСуммойНУ     = Истина;
		Объект.МетодНачисленияРезерваНУ                     = ПредопределенноеЗначение("Перечисление.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод");
		Объект.НалоговыйУчетПоНастройкамБухгалтерскогоУчета = Ложь;
	Иначе
		Объект.НалоговыйУчетПоНастройкамБухгалтерскогоУчета = Истина;
		Объект.МетодНачисленияРезерваНУ                     = Объект.МетодНачисленияРезерваБУ;
		Объект.НормативОтчисленийВРезервНУ                  = Объект.НормативОтчисленийВРезервБУ;
		Если Объект.МетодНачисленияРезерваНУ = ПредопределенноеЗначение("Перечисление.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод") Тогда
			Объект.ОграничиватьНачислениеПредельнойСуммойНУ = Истина;
		КонецЕсли;
		Если Объект.ОграничиватьНачислениеПредельнойСуммойБУ И Объект.ОграничиватьНачислениеПредельнойСуммойНУ Тогда
			Объект.ПредельнаяВеличинаОтчисленийВРезервНУ = Объект.ПредельнаяВеличинаОтчисленийВРезервБУ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьНастройкиВидовРасчета()
	
	Для Каждого СтрокаТаблицы Из Объект.ВидыРасчетовРезерва Цикл
		Если (ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета) Или ЗначениеЗаполнено(СтрокаТаблицы.ВидОтпуска))
			И Не ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчетаРезерва) Тогда
			Справочники.НастройкиРасчетаРезервовПоОплатеТруда.ЗаполнитьВидРасчетаРезерваПоОписанию(СтрокаТаблицы,
				Объект.Организация,
				Объект.Резерв,
				Объект.ВидыРасчетовРезерва,
				ЭтоРасчетОтпуска);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыплаты(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ПериодВыплаты.СписокВыбора.Очистить();
	Элементы.ПериодВыплаты.СписокВыбора.Добавить(1,
		СтрШаблон(НСтр("ru = '%1 г.';
						|en = '%1 г.'"), Формат(Объект.НачалоПериода, "ДФ=yyyy")));
	Элементы.ПериодВыплаты.СписокВыбора.Добавить(0,
		СтрШаблон(НСтр("ru = '%1 г.';
						|en = '%1 г.'"), Формат(ДобавитьМесяц(Объект.НачалоПериода, 12), "ДФ=yyyy")));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПериодВыплаты(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Форма.ЭтоРасчетОтпуска Тогда
		Объект.ПериодВыплаты = НачалоГода(Объект.НачалоПериода);
	Иначе
		Объект.ПериодВыплаты = ?(Форма.ПериодВыплаты = 1,
			НачалоГода(Объект.НачалоПериода),
			НачалоГода(ДобавитьМесяц(Объект.НачалоПериода, 12)));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакНастройкиПоказателей()
	
	МассивВидовРасчетов = ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВидыРасчетовРезерва, "ВидРасчетаРезерва", Истина);
	НазначенияПоказателяВидовРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивВидовРасчетов, "НазначениеПоказателя");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивВидовРасчетов",     МассивВидовРасчетов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НазначениеПоказателейРасчетаРезервов.ВидРасчетаРезерва КАК ВидРасчетаРезерва
	|ПОМЕСТИТЬ ВТ_НазначенияПоказателей
	|ИЗ
	|	РегистрСведений.НазначениеПоказателейРасчетаРезервов КАК НазначениеПоказателейРасчетаРезервов
	|ГДЕ
	|	НазначениеПоказателейРасчетаРезервов.ВидРасчетаРезерва В(&МассивВидовРасчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыРасчетовРезервовПоОплатеТруда.Ссылка КАК ВидРасчетаРезерва,
	|	ВидыРасчетовРезервовПоОплатеТруда.НазначениеПоказателя КАК НазначениеПоказателя,
	|	ВидыРасчетовРезервовПоОплатеТруда.ВидРасчета КАК ВидРасчета,
	|	НЕ ВТ_НазначенияПоказателей.ВидРасчетаРезерва ЕСТЬ NULL КАК ЕстьДетальнаяНастройка,
	|	ВидыРасчетовРезервовПоОплатеТруда.НазначениеПоказателя <> ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляОрганизации) КАК ДоступнаДетальнаяНастройка
	|ИЗ
	|	Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчетовРезервовПоОплатеТруда
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НазначенияПоказателей КАК ВТ_НазначенияПоказателей
	|		ПО ВидыРасчетовРезервовПоОплатеТруда.Ссылка = ВТ_НазначенияПоказателей.ВидРасчетаРезерва
	|ГДЕ
	|	ВидыРасчетовРезервовПоОплатеТруда.Ссылка В(&МассивВидовРасчетов)";
	
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из Объект.ВидыРасчетовРезерва Цикл
		
		ВидРасчетаРезерва = СтрокаТаблицы.ВидРасчетаРезерва;
		
		ОписаниеНастройкиВидаРасчета = "";
		НазначениеПоказателя = НазначенияПоказателяВидовРасчета[ВидРасчетаРезерва];
		
		ТекущаяСтрокаНастройки = ТаблицаРезультата.Найти(ВидРасчетаРезерва);
		Если ТекущаяСтрокаНастройки <> Неопределено Тогда
			СтрокаТаблицы.ВидРасчета                 = ТекущаяСтрокаНастройки.ВидРасчета;
			СтрокаТаблицы.ВидОтпуска                 = ТекущаяСтрокаНастройки.ВидРасчета;
			СтрокаТаблицы.ЕстьДетальнаяНастройка     = ТекущаяСтрокаНастройки.ЕстьДетальнаяНастройка;
			СтрокаТаблицы.ДоступнаДетальнаяНастройка = ТекущаяСтрокаНастройки.ДоступнаДетальнаяНастройка;
			СтрокаТаблицы.НазначениеПоказателя       = НазначениеПоказателя;
		Иначе
			СтрокаТаблицы.ЕстьДетальнаяНастройка     = Ложь;
			СтрокаТаблицы.ДоступнаДетальнаяНастройка = Ложь;
			СтрокаТаблицы.НазначениеПоказателя       = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляОрганизации;
		КонецЕсли;
		
		Если СтрокаТаблицы.ДоступнаДетальнаяНастройка Тогда
			Если НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляПодразделения Тогда
				ОписаниеНастройкиВидаРасчета = НСтр("ru = 'Список подразделений';
													|en = 'Business units'");
			Иначе
				ОписаниеНастройкиВидаРасчета = НСтр("ru = 'Список должностей';
													|en = 'Job title list'");
			КонецЕсли;
			СтрокаТаблицы.НастройкаВидаРасчета = ОписаниеНастройкиВидаРасчета;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьНастройкиГоловнойОрганизацииПриИзмененииНаСервере()
	
	Если Объект.ИспользоватьНастройкиГоловнойОрганизации Тогда
		ПерезаполнитьПоНастройкамГоловнойОрганизации();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоНастройкамГоловнойОрганизации()
	
	НастройкиГоловнойОрганизации = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.СсылкаНаНастройкуРасчетаДляГоловнойОрганизации(
		ГоловнаяОрганизация,
		Объект.Резерв,
		Объект.НачалоПериода);
	НастройкиГоловнойОрганизацииОбъект = НастройкиГоловнойОрганизации.ПолучитьОбъект();
	
	ИсключаемыеСвойства = "Организация, ИспользоватьНастройкиГоловнойОрганизации, ВидыРасчетовРезерва, ИсключенияИзРасчетнойБазыФондаОплатыТруда, ДополнительныеРеквизиты";
	
	ЗаполнитьЗначенияСвойств(Объект, НастройкиГоловнойОрганизацииОбъект, , ИсключаемыеСвойства);
	
	ВидыРасчетовРезерваИсточник = НастройкиГоловнойОрганизацииОбъект.ВидыРасчетовРезерва.Выгрузить();
	ВидыРасчетовРезерваИсточник.Колонки.Добавить("ВидРасчета");
	ВидыРасчетовРезерваИсточник.Колонки.Добавить("ВидОтпуска");
	Справочники.НастройкиРасчетаРезервовПоОплатеТруда.СкопироватьВидыРасчетовРезерва(Объект, ВидыРасчетовРезерваИсточник);
	Справочники.НастройкиРасчетаРезервовПоОплатеТруда.СкопироватьНазначенияПоказателей(Объект);
	Справочники.НастройкиРасчетаРезервовПоОплатеТруда.СкопироватьЗначенияПоказателей(Объект);
	
	Справочники.НастройкиРасчетаРезервовПоОплатеТруда.СкопироватьТабличнуюЧасть(Объект, НастройкиГоловнойОрганизацииОбъект, "ИсключенияИзРасчетнойБазыФондаОплатыТруда");
	
	ПриПолученииДанныхНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтукрураСтрокиВидыРасчетовРезерва()
	
	ОписаниеПолей = "ВидРасчетаРезерва,ВидРасчета,ВидОтпуска,НазначениеПоказателя,
		|ДоступнаДетальнаяНастройка,ЕстьДетальнаяНастройка";
	СтруктураСтроки = Новый Структура(ОписаниеПолей);
	
	Возврат СтруктураСтроки;
	
КонецФункции

&НаСервере
Процедура ВидыРасчетовРезерваНазначениеПоказателяПриИзмененииНаСервере(СтрокаТаблицы)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчетаРезерва) Тогда
		Возврат;
	КонецЕсли;
	
	ВидРасчетаРезерваОбъект = СтрокаТаблицы.ВидРасчетаРезерва.ПолучитьОбъект();
	ВидРасчетаРезерваОбъект.НазначениеПоказателя = СтрокаТаблицы.НазначениеПоказателя;
	ВидРасчетаРезерваОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОбОчисткеПриИзмененииПоказателя(ИмяПоказателя)
	
	Если ЗначениеЗаполнено(ЭтотОбъект[ИмяПоказателя + "ПрежнееЗначение"])
		И ЭтотОбъект[ИмяПоказателя + "ПрежнееЗначение"] <> Объект[ИмяПоказателя] Тогда
		ТекстВопроса = НСтр("ru = 'Список видов начислений будет очищен.
							|Продолжить?';
							|en = 'List of the accrued payroll kinds will be cleared.
							|Continue?'");
		Оповещение = Новый ОписаниеОповещения("ПоказательПриИзмененииЗавершение", ЭтотОбъект, "ВидРезерва");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ОбновитьНастройкиВидовРасчета(ИмяПоказателя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательПриИзмененииЗавершение(Ответ, ИмяПоказателя) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьНастройкиВидовРасчета(ИмяПоказателя);
	Иначе
		Объект[ИмяПоказателя]= ЭтотОбъект[ИмяПоказателя + "ПрежнееЗначение"];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиВидовРасчета(ИмяПоказателя)

	Объект.ВидыРасчетовРезерва.Очистить();
	
	ЭтотОбъект[ИмяПоказателя + "ПрежнееЗначение"] = Объект[ИмяПоказателя];
	
	Если ИмяПоказателя = "Организация" Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
	Если ИмяПоказателя = "ВидРезерва" Тогда
		ЭтоРасчетОтпуска = Объект.ВидРезерва = ВидРезерваОтпуск;
		УстановитьПериодВыплаты(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ИмяПоказателя = "Организация"
		Или ИмяПоказателя = "Резерв" Тогда
		ОбновитьПараметрыРасчетаРезерва();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРасчетовРезерваПоказательВидаРасчетаВыборЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьНастройкуРасчетаРезерва();
		ОткрытьНастройкиПоказателейВидаРасчета(ДополнительныеПараметры.ВидРасчетаРезерва);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРасчетовРезерваНастройкаВидаРасчетаВыборЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьНастройкуРасчетаРезерва();
		ОткрытьДетальныеНастройки(ДополнительныеПараметры.ВидРасчетаРезерва, ДополнительныеПараметры.НазначениеПоказателя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкуРасчетаРезерва()
	
	Если Параметры.Ключ.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗначениеКопирования", ЗначениеКопирования);
		Запрос.УстановитьПараметр("ТекущееЗначение",     Объект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НазначениеПоказателейРасчетаРезервов.Организация КАК Организация,
		|	&ТекущееЗначение КАК ПараметрыРасчетаРезерва,
		|	НазначениеПоказателейРасчетаРезервов.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
		|	НазначениеПоказателейРасчетаРезервов.ВладелецВидаРасчета КАК ВладелецВидаРасчета
		|ИЗ
		|	РегистрСведений.НазначениеПоказателейРасчетаРезервов КАК НазначениеПоказателейРасчетаРезервов
		|ГДЕ
		|	НазначениеПоказателейРасчетаРезервов.ПараметрыРасчетаРезерва = &ЗначениеКопирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателейРасчетаРезервов.Организация КАК Организация,
		|	&ТекущееЗначение КАК ПараметрыРасчетаРезерва,
		|	ЗначенияПоказателейРасчетаРезервов.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
		|	ЗначенияПоказателейРасчетаРезервов.ВладелецВидаРасчета КАК ВладелецВидаРасчета,
		|	ЗначенияПоказателейРасчетаРезервов.ПоказательРасчета КАК ПоказательРасчета,
		|	ЗначенияПоказателейРасчетаРезервов.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияПоказателейРасчетаРезервов КАК ЗначенияПоказателейРасчетаРезервов
		|ГДЕ
		|	ЗначенияПоказателейРасчетаРезервов.ПараметрыРасчетаРезерва = &ЗначениеКопирования";
		
		Результат = Запрос.ВыполнитьПакет();
		ТаблицаНазначенийПоказателей = Результат[0].Выгрузить();
		ТаблицаЗначенийПоказателей   = Результат[1].Выгрузить();
		
		Если ТаблицаНазначенийПоказателей.Количество() <> 0 Тогда
			НаборЗаписей = РегистрыСведений.НазначениеПоказателейРасчетаРезервов.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(ТаблицаНазначенийПоказателей);
			НаборЗаписей.Записать();
		КонецЕсли;
		
		Если ТаблицаЗначенийПоказателей.Количество() <> 0 Тогда
			НаборЗаписей = РегистрыСведений.ЗначенияПоказателейРасчетаРезервов.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(ТаблицаЗначенийПоказателей);
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗначениеКопирования = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.ПустаяСсылка();
		
		Записать();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиПоказателейВидаРасчета(ВидРасчетаРезерва)
	
	ТекущиеДанные = Элементы.ВидыРасчетовРезерва.ТекущиеДанные;
	
	ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения("ОткрытьНастройкиПоказателейВидаРасчетаПослеЗакрытия", ЭтотОбъект);
	
	ПараметрыФормы = ПолучитьПоказателиНаСервере(ТекущиеДанные.ВидРасчетаРезерва);
	ОткрытьФорму("РегистрСведений.ЗначенияПоказателейРасчетаРезервов.Форма.ФормаНастройкиПоказателейРасчета",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьНастройкиПоказателейВидаРасчетаПослеЗакрытия(Параметр = Неопределено, ДопПараметр = Неопределено) Экспорт

	Если Не ТипЗнч(Параметр) = Тип("Булево") Тогда
		Возврат;
	Иначе
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоказателиНаСервере(ВидРасчетаРезерва)
	
	МассивЗначений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидРасчетаРезерва);
	
	ПоказателиВидаРасчетаРезервов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗначений, "ИспользоватьСобственнуюФормулуРасчета, НазначениеПоказателя");
	
	МассивОбщихПоказателей              = Новый Массив;
	
	ТаблицаПоказателейПодразделений = Новый ТаблицаЗначений;
	ТаблицаПоказателейПодразделений.Колонки.Добавить("Показатель");
	ТаблицаПоказателейПодразделений.Колонки.Добавить("Точность");
	
	ТаблицаПоказателейСотрудников = Новый ТаблицаЗначений;
	ТаблицаПоказателейСотрудников.Колонки.Добавить("Показатель");
	ТаблицаПоказателейСотрудников.Колонки.Добавить("Точность");
	
	Для Каждого СтрокаТаблицы ИЗ Объект.ВидыРасчетовРезерва Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчетаРезерва) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидРасчетаРезерва <> Неопределено Тогда
			Если ВидРасчетаРезерва <> СтрокаТаблицы.ВидРасчетаРезерва Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказателиВидаРасчетаРезервов[СтрокаТаблицы.ВидРасчетаРезерва].ИспользоватьСобственнуюФормулуРасчета
			Или ЭтоРасчетОтпуска Тогда
			ВидРасчета = СтрокаТаблицы.ВидРасчетаРезерва;
			ВидыРасчетаИнфо = РезервыПоОплатеТрудаРасширенный.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		Иначе
			ВидРасчета = СтрокаТаблицы.ВидРасчета;
			ВидыРасчетаИнфо = РезервыПоОплатеТрудаРасширенный.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		КонецЕсли;
		
		ВидРасчетаИнфо = ВидыРасчетаИнфо[ВидРасчета];
		Для Каждого ОписаниеПоказателя Из ВидРасчетаИнфо.Показатели Цикл
			Если ОписаниеПоказателя.ВводитсяНепосредственноПриРасчете
				Или ОписаниеПоказателя.ЗапрашиватьПриВводе Тогда
				
				НазначениеПоказателя = СтрокаТаблицы.НазначениеПоказателя;
				
				Если НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляОрганизации Тогда
					МассивОбщихПоказателей.Добавить(ОписаниеПоказателя.Показатель);
				ИначеЕсли НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляПодразделения Тогда
					НоваяСтрока = ТаблицаПоказателейПодразделений.Добавить();
					НоваяСтрока.Показатель    = ОписаниеПоказателя.Показатель;
					НоваяСтрока.Точность      = ОписаниеПоказателя.Точность;
				ИначеЕсли НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляПозицииШтатногоРасписания Тогда
					НоваяСтрока = ТаблицаПоказателейСотрудников.Добавить();
					НоваяСтрока.Показатель = ОписаниеПоказателя.Показатель;
					НоваяСтрока.Точность   = ОписаниеПоказателя.Точность;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивОбщихПоказателей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОбщихПоказателей);
	АдресОбщихПоказателей = ПоместитьВоВременноеХранилище(МассивОбщихПоказателей, Новый УникальныйИдентификатор);
	
	ТаблицаПоказателейПодразделений.Свернуть("Показатель,Точность");
	АдресПоказателейПодразделений = ПоместитьВоВременноеХранилище(ТаблицаПоказателейПодразделений, Новый УникальныйИдентификатор);
	
	ТаблицаПоказателейСотрудников.Свернуть("Показатель,Точность");
	АдресПоказателейСотрудников = ПоместитьВоВременноеХранилище(ТаблицаПоказателейСотрудников, Новый УникальныйИдентификатор);
	
	РежимПросмотра = ТолькоПросмотр Или Объект.ИспользоватьНастройкиГоловнойОрганизации;
	ПараметрыФормы = Новый Структура("Организация, ПараметрыРасчетаРезерва, ДатаНачалаОтбора, ВидРасчетаРезерва,
		|АдресОбщихПоказателей, АдресПоказателейПодразделений, АдресПоказателейСотрудников, ТолькоПросмотр",
		Объект.Организация, Объект.Ссылка, Объект.НачалоПериода, ВидРасчетаРезерва,
		АдресОбщихПоказателей, АдресПоказателейПодразделений, АдресПоказателейСотрудников, РежимПросмотра);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПроверитьСоответствиеПериодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеПериодов(Отказ = Ложь)
	
	ТекстОшибки = "";
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ТекстОшибки  = НСтр("ru = 'Дата начала периода не может быть пустой';
							|en = 'Period start date cannot be empty'");
		ИмяРеквизита = "ГодПериода";
		Отказ        = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы  = Форма.Элементы;
	Объект    = Форма.Объект;
	
	Элементы.ИспользоватьНастройкиГоловнойОрганизации.Видимость = Форма.ОбособленноеПодразделение;
	Элементы.Организация.ТолькоПросмотр                         = Форма.ОбособленноеПодразделение;
	Элементы.ГруппаШапка.ТолькоПросмотр                         = Форма.ОбособленноеПодразделение;
	Элементы.ГруппаПорядокРасчетаРезервовБУ.ТолькоПросмотр      = Форма.ОбособленноеПодразделение;
	Элементы.ГруппаПорядокРасчетаРезервовНУ.ТолькоПросмотр      = Форма.ОбособленноеПодразделение;
	Элементы.ФормироватьРезервНУ.ТолькоПросмотр                 = Форма.ОбособленноеПодразделение;
	Элементы.ГруппаНастраиваемая.ТолькоПросмотр                 = Форма.ОбособленноеПодразделение и Объект.ИспользоватьНастройкиГоловнойОрганизации;
	
	МетодНачисленияРезервовНормативный = ПредопределенноеЗначение("Перечисление.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод");
	
	ЭтоФизЛицо          = Форма.ЭтоФизЛицо;
	ФормироватьРезервНУ = Объект.ФормироватьРезервНУ;
	
	Элементы.ГруппаНастройкиРезерваНеПоддерживаются.Видимость = ЭтоФизЛицо;
	
	Элементы.Резерв.Видимость = Не Форма.КонтекстныйВызов;
	
	Элементы.ГруппаПорядокВыплаты.Видимость = Не Форма.ЭтоРасчетОтпуска;
	
	// Группа БУ
	НормативныйМетод = Объект.МетодНачисленияРезерваБУ = МетодНачисленияРезервовНормативный;
	Элементы.ГруппаПредельнаяСуммаБУ.Доступность = Объект.ОграничиватьНачислениеПредельнойСуммойБУ;
	Если НормативныйМетод Тогда
		Элементы.ГруппаПараметрыРасчетаМетодаСтраницыБУ.ТекущаяСтраница = Элементы.ГруппаПараметрыРасчетаНормативногоМетодаСтраницаБУ;
	Иначе
		Элементы.ГруппаПараметрыРасчетаМетодаСтраницыБУ.ТекущаяСтраница = Элементы.ГруппаПараметрыРасчетаМетодаОбязательствСтраницаБУ;
	КонецЕсли;
	
	Элементы.ВидыРасчетовРезерваГруппаНазначениеПоказателя.Видимость = Не НормативныйМетод;
	Элементы.ВидыРасчетовРезерваФормулаВидаРасчета.Видимость         = Не НормативныйМетод;
	Элементы.ВидыРасчетовРезерваПоказательВидаРасчета.Видимость      = Не НормативныйМетод;
	Элементы.ПредельнаяВеличинаОтчисленийВРезервБУ.Доступность       = Объект.ОграничиватьНачислениеПредельнойСуммойБУ;
	
	// Группа НУ
	НормативныйМетод = Объект.МетодНачисленияРезерваНУ = МетодНачисленияРезервовНормативный;
	Элементы.ГруппаРезервыНУ.Видимость                         = ФормироватьРезервНУ;
	Элементы.МетодНачисленияРезерваНУ.Доступность              = ФормироватьРезервНУ;
	Элементы.ГруппаПараметрыРасчетаРезервовНУ.Доступность      = ФормироватьРезервНУ;
	Элементы.ПредельнаяВеличинаОтчисленийВРезервНУ.Доступность = Объект.ОграничиватьНачислениеПредельнойСуммойНУ;
	Если НормативныйМетод Тогда
		Элементы.ГруппаПараметрыРасчетаМетодаСтраницыНУ.ТекущаяСтраница = Элементы.ГруппаПараметрыРасчетаНормативногоМетодаСтраницаНУ;
	Иначе
		Элементы.ГруппаПараметрыРасчетаМетодаСтраницыНУ.ТекущаяСтраница = Элементы.ГруппаПараметрыРасчетаМетодаОбязательствСтраницаНУ;
	КонецЕсли;
	
	// Группа НУ как БУ
	НормативныйМетод = Объект.МетодНачисленияРезерваБУ = МетодНачисленияРезервовНормативный;
	Элементы.ОграничиватьНачислениеПредельнойСуммойНУ.Доступность = Объект.НалоговыйУчетПоНастройкамБухгалтерскогоУчета
		И Не НормативныйМетод И Не Объект.ОграничиватьНачислениеПредельнойСуммойБУ;
	Элементы.НормативОтчисленийВРезервНУ.Доступность              = Не Объект.НалоговыйУчетПоНастройкамБухгалтерскогоУчета;
	Элементы.ГруппаПредельнаяСуммаНУ.Доступность                  = Объект.ОграничиватьНачислениеПредельнойСуммойНУ
		И Не (Объект.НалоговыйУчетПоНастройкамБухгалтерскогоУчета И Объект.ОграничиватьНачислениеПредельнойСуммойБУ);
	
	Элементы.ВидыРасчетовРезерваВидОтпуска.Видимость = Форма.ЭтоРасчетОтпуска;
	Элементы.ВидыРасчетовРезерваВидРасчета.Видимость = Не Форма.ЭтоРасчетОтпуска;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДетальныеНастройки(ВидРасчетаРезерва = Неопределено, НазначениеПоказателя = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",             Объект.Организация);
	ПараметрыФормы.Вставить("ПараметрыРасчетаРезерва", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидРасчетаРезерва",       ВидРасчетаРезерва);
	ПараметрыФормы.Вставить("НазначениеПоказателя",    НазначениеПоказателя);
	ПараметрыФормы.Вставить("НачалоПериода",           Объект.НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода",            Объект.КонецПериода);
	ПараметрыФормы.Вставить("ТолькоПросмотр",          ТолькоПросмотр 
		Или (Объект.ИспользоватьНастройкиГоловнойОрганизации и НазначениеПоказателя = ПредопределенноеЗначение("Перечисление.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляОрганизации")));
	
	ОткрытьФорму("РегистрСведений.НазначениеПоказателейРасчетаРезервов.Форма.ФормаДетальныеНастройкиРасчета",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыИсключенийРасчетнойБазыФондаОплатыТруда()
	
	ТаблицаРасчетнаяБазаФондаОплатыТруда = Объект.ИсключенияИзРасчетнойБазыФондаОплатыТруда.Выгрузить();
	АдресНастройки = ПоместитьВоВременноеХранилище(ТаблицаРасчетнаяБазаФондаОплатыТруда, УникальныйИдентификатор);
	Возврат АдресНастройки;
	
КонецФункции

&НаКлиенте
Процедура РасчетнаяБазаЗавершениеРедактирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗагрузитьТаблицуИсключенийРасчетнойБазыФондаОплатыТруда(Результат);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуИсключенийРасчетнойБазыФондаОплатыТруда(АдресНастройки)
	
	Объект.ИсключенияИзРасчетнойБазыФондаОплатыТруда.Загрузить(ПолучитьИзВременногоХранилища(АдресНастройки));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазовыеНачисления()
	
	ИсключенияИзРасчетнойБазы = РезервыПоОплатеТруда.ИсключенияИзРасчетнойБазы();
	Объект.ИсключенияИзРасчетнойБазыФондаОплатыТруда.Загрузить(ИсключенияИзРасчетнойБазы);
	
КонецПроцедуры

#КонецОбласти

