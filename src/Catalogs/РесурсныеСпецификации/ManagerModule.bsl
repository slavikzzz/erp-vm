#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	НеРедактируемыеРеквизиты.Добавить("ВыходныеИзделия.Этап");
	НеРедактируемыеРеквизиты.Добавить("ВозвратныеОтходы.Этап");
	НеРедактируемыеРеквизиты.Добавить("МатериалыИУслуги.Этап");
	НеРедактируемыеРеквизиты.Добавить("Трудозатраты.Этап");
	//++ НЕ УТКА
	НеРедактируемыеРеквизиты.Добавить("ВыходныеИзделия.Операция");
	НеРедактируемыеРеквизиты.Добавить("ВозвратныеОтходы.Операция");
	НеРедактируемыеРеквизиты.Добавить("МатериалыИУслуги.Операция");
	НеРедактируемыеРеквизиты.Добавить("Трудозатраты.Операция");
	//-- НЕ УТКА
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Проверяет использование объекта
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки
//
Процедура ПроверитьИспользованиеОбъекта(Параметры, АдресХранилища) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСсылки
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
	|	И ТаблицаПоиска.ИсточникПолученияПолуфабриката = &Объект
	//++ Устарело_Производство21
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ВыпускПродукции.Товары КАК ВыпускПродукцииТовары
	|ГДЕ
	|	ВыпускПродукцииТовары.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.СписаниеЗатратНаВыпуск КАК СписаниеЗатратНаВыпуск
	|ГДЕ
	|	СписаниеЗатратНаВыпуск.Спецификация = &Объект
	//-- Устарело_Производство21
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	//++ НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСсылки
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСсылки
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСсылки
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.СпецификацияРемонта = &Объект
	|
	//++ Устарело_Производство21
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.ПроизводитсяВПроцессе
	|	И ТаблицаПоиска.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
	|	И ТаблицаПоиска.ИсточникПолученияПолуфабриката = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	//-- Устарело_Производство21
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.НаборыМатериаловИРабот КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.АналогиМатериалов КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	//-- НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа.ВыходныеИзделия КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|";
	
	Запрос.УстановитьПараметр("Объект", Параметры.Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЕстьСсылки = НЕ Результат.Пустой();
	
	ПоместитьВоВременноеХранилище(ЕстьСсылки, АдресХранилища);

КонецПроцедуры

// Заполняет список команд создания на основании.
// 
// Параметры:
//  КомандыСоздатьНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, Параметры) Экспорт
	
	ВидимостьВФормах = "ФормаЭлемента,ФормаСписка,ФормаВыбора";
	
	//++ НЕ УТКА
	Команда = Документы.ПлановаяКалькуляция2_2.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.РежимЗаписи = "";
		Команда.ВидимостьВФормах = ВидимостьВФормах;
	КонецЕсли;
	
	//++ Устарело_Производство21
	Команда = Документы.ПлановаяКалькуляция.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.РежимЗаписи = "";
		Команда.ВидимостьВФормах = ВидимостьВФормах;
	КонецЕсли;
	//-- Устарело_Производство21
	
	Команда = Документы.РазрешениеНаЗаменуМатериалов.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.РежимЗаписи = "";
		Команда.ВидимостьВФормах = ВидимостьВФормах;
	КонецЕсли;
	//-- НЕ УТКА
	
	Команда = БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = ВидимостьВФормах;
	КонецЕсли;
	
КонецПроцедуры

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Устарело_Производство21

	//++ НЕ УТКА
	ВидимостьВФормах = "ФормаЭлемента,ФормаСписка,ФормаВыбора,ФормаВыбораПоНоменклатуре";
	
	Команда = Отчеты.СравнениеКалькуляцииИРесурснойСпецификации.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = ВидимостьВФормах;
	КонецЕсли;
	
	Команда = Отчеты.СтоимостьМатериаловИРаботСпецификации.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = ВидимостьВФормах;
	КонецЕсли;
	//-- НЕ УТКА

	//-- Устарело_Производство21
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - См. ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения.КомандыЗаполнения
//   Параметры - См. ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения.Параметры
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзФайлаВТЧ

// Устанавливает параметры загрузки.
//
// Параметры:
//   Параметры - Структура - параметры загрузки из файла.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
	ТипДанныхКолонки = Параметры.ТипДанныхКолонки;
	ИмяТЧ            = Параметры.ДополнительныеПараметры.ИмяТЧ;
	
	ТипДанныхКолонки.Вставить("НомерЭтапа",    Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(5, 0)));
	ТипДанныхКолонки.Вставить("НомерОперации", Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(5, 0)));
	
	ТипДанныхКолонки.Вставить("СтатьяКалькуляции", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТипДанныхКолонки.Вставить("Этап",              Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ТипДанныхКолонки.Вставить("Операция",          Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	
	Если ИмяТЧ = "Трудозатраты" Тогда
		
		ТипДанныхКолонки.Вставить("КодВидаРабот",    Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(9)));
		ТипДанныхКолонки.Вставить("ВидРабот",        Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
		ТипДанныхКолонки.Вставить("НазначениеРабот", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
		
		ТипДанныхКолонки.Вставить("Количество", Новый ОписаниеТипов("Число",,  Новый КвалификаторыЧисла(15, 3)));
		
	Иначе
		
		ТипДанныхКолонки.Вставить("Штрихкод",        Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
		ТипДанныхКолонки.Вставить("Артикул",         Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
		ТипДанныхКолонки.Вставить("КодНоменклатуры", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)));
		ТипДанныхКолонки.Вставить("Номенклатура",    Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
		ТипДанныхКолонки.Вставить("Характеристика",  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
		ТипДанныхКолонки.Вставить("КодУпаковки",     Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(4)));
		ТипДанныхКолонки.Вставить("Упаковка",        Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
		
		ТипДанныхКолонки.Вставить(?(ИмяТЧ = "МатериалыИУслуги", "ПрименениеМатериала", "ОписаниеИзделия"),
			Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)));
		
		ТипДанныхКолонки.Вставить("КоличествоУпаковок", Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(15, 3)));
		
	КонецЕсли;
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
// 
// Параметры:
// 	АдресЗагружаемыхДанных- Строка - адрес временного хранилища с таблицей значений, в которой
//                                   находятся загруженные данные из файла.
// 	АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                       являющейся копией табличной части документа, 
//                                       которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
// 	СписокНеоднозначностей - ТаблицаЗначений - состоит из:
//  * Идентификатор - Число - идентификатор
//  * Колонка - Строка - имя колонки
// 	ПолноеИмяТабличнойЧасти - Строка - полное имя табличной части
// 	ДополнительныеПараметры - Структура - дополнительные параметры, переданные из формы-источнике.
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ИмяТЧ = "Трудозатраты" Тогда
		СопоставитьЗагружаемыеДанныеТрудозатраты(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры);
	Иначе
		СопоставитьЗагружаемыеДанныеНоменклатура(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
// 	ПолноеИмяТабличнойЧасти- Строка - полное имя табличной части, в которую загружаются данные.
// 	СписокНеоднозначностей - Массив - список неоднозначностей.
// 	ИмяКолонки - Строка - имя колонки, в которой возникает неоднозначность.
// 	ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
// 	ДополнительныеПараметры - Структура - дополнительные параметры, переданные из формы-источнике.
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт 
	
	Если ДополнительныеПараметры.ИмяТЧ = "Трудозатраты" Тогда
		ЗаполнитьСписокНеоднозначностейТрудозатраты(СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры);
	Иначе
		ЗаполнитьСписокНеоднозначностейНоменклатура(СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Конструкторы

// Функция - конструктор структуры для выборки данных ресурсной спецификации.
// 
// Возвращаемое значение:
//  Структура - структура с параметрами выборки данных спецификации:
//  	* Номенклатура - СправочникСсылка.Номенклатура - номенклатура
//  	* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика
//  	* Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация
//  	* Количество - Число - количество изделий
//
Функция ДанныеПоНоменклатуре() Экспорт
	
	ДанныеПоНоменклатуре = Новый Структура;
	
	ДанныеПоНоменклатуре.Вставить("Номенклатура");
	ДанныеПоНоменклатуре.Вставить("Характеристика");
	
	ДанныеПоНоменклатуре.Вставить("Спецификация");
	ДанныеПоНоменклатуре.Вставить("Количество");
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Функция - конструктор структуры для выборки данных ресурсной спецификации.
//
// Возвращаемое значение:
//  Структура - структура с параметрами выборки данных спецификации:
//  	* Номенклатура - СправочникСсылка.Номенклатура - номенклатура
//  	* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика
//  	* Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация
//  	* Количество - Число - количество изделий
//  	* ПодразделениеДиспетчер - СправочникСсылка.СтруктураПредприятия - подразделение
//  	* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - направление деятельности
//  	* НачалоПроизводства - Дата - дата начала производства
//  	* ДнейОтПотребности - Число - количество дней от потребности по нормативному графику
//		* Распоряжение - ДокументСсылка - распоряжение
//
Функция ДанныеПоНоменклатуреРасширенный() Экспорт
	
	ДанныеПоНоменклатуре = Новый Структура;
	
	ДанныеПоНоменклатуре.Вставить("Номенклатура");
	ДанныеПоНоменклатуре.Вставить("Характеристика");
	
	ДанныеПоНоменклатуре.Вставить("Спецификация");
	ДанныеПоНоменклатуре.Вставить("Количество");
	
	ДанныеПоНоменклатуре.Вставить("Распоряжение");
	
	ДанныеПоНоменклатуре.Вставить("ПодразделениеДиспетчер");
	ДанныеПоНоменклатуре.Вставить("НаправлениеДеятельности");
	ДанныеПоНоменклатуре.Вставить("НачалоПроизводства");
	
	ДанныеПоНоменклатуре.Вставить("ДнейОтПотребности");
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Функция - конструктор таблицы для выборки данных ресурсной спецификации по списку значений.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с параметрами выборки данных спецификации:
//  	* Номенклатура - СправочникСсылка.Номенклатура - номенклатура
//  	* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика
//  	* Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация
//  	* Количество - Число - количество изделий
//  	* ПодразделениеДиспетчер - СправочникСсылка.СтруктураПредприятия - подразделение
//  	* ПодразделениеИсполнитель - СправочникСсылка.СтруктураПредприятия - переопределение исполняющего подразделения
//  	* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - направление деятельности
//  	* НачалоПроизводства - Дата - дата начала производства
//  	* ДнейОтПотребности - Число - количество дней от потребности по нормативному графику
//  	* Распоряжение - ДокументСсылка - распоряжение
//  	* Идентификатор - Число - идентификатор строки таблицы (добавляется позже)
//
Функция СписокНоменклатуры() Экспорт
	
	СписокНоменклатуры = Новый ТаблицаЗначений;
	
	СписокНоменклатуры.Колонки.Добавить("Номенклатура",             Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СписокНоменклатуры.Колонки.Добавить("Характеристика",           Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СписокНоменклатуры.Колонки.Добавить("Спецификация",             Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	СписокНоменклатуры.Колонки.Добавить("Количество",               Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	СписокНоменклатуры.Колонки.Добавить("ПодразделениеДиспетчер",   Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	СписокНоменклатуры.Колонки.Добавить("ПодразделениеИсполнитель", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	СписокНоменклатуры.Колонки.Добавить("НаправлениеДеятельности",  Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	СписокНоменклатуры.Колонки.Добавить("НачалоПроизводства",       Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	СписокНоменклатуры.Колонки.Добавить("ДнейОтПотребности",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	//++ НЕ УТКА
	ТипыДанных = Новый Массив;
	ТипыДанных.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство2_2"));
	//++ Устарело_Производство21
	ТипыДанных.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	//-- Устарело_Производство21
	СписокНоменклатуры.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов(ТипыДанных));
	//-- НЕ УТКА
	
	Возврат СписокНоменклатуры;
	
КонецФункции

// Функция - конструктор структуры для выборки данных ресурсной спецификации.
//
// Параметры:
//  ПереченьДанных - Строка,Массив,Неопределено  - содержит перечень данных спецификации, которые требуется получить.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц,Неопределено - содержит временные таблицы используемые для получения способа обеспечения.
//  ВариантЗаполненияОбеспечения - ПеречислениеСсылка.ВариантыЗаполненияОбеспеченияПроизводства,Неопределено - определяет вариант заполнения обеспечения.
// 
// Возвращаемое значение:
//  Структура - структура с параметрами выборки данных спецификации:
//  	* ПереченьДанных - Массив - Содержит перечень данных спецификации, которые требуется получить.
//  	    Неопределено - если нужно получить весь набор данных.
//  	* МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит временные таблицы используемые для получения способа обеспечения.
//  	* ВариантЗаполненияОбеспечения - ПеречислениеСсылка.ВариантыЗаполненияОбеспеченияПроизводства -  Вариант заполнения обеспечения в производстве
//  	* ПолучитьПредставления - Булево - Истина, если нужно получить представления ссылочных полей.
//  	* ПолучитьСведенияАвтовыбора - Булево - Истина, если нужно получить сведения автовыбора.
//  	* ПереопределениеНастройкиПартииВыпуска - Структура - используется для переопределение настройки партии выпуска.
//  	* ОкруглятьКоличествоШтучныхТоваров - Булево - если Истина, то штучные товары в мерных ед. изм. при отгрузке
//  		с/на склады, не являющиеся цеховыми кладовыми, будут округляться до целого количества штук.
//  		Так же до целого количества вверх округляется штучная номенклатура если: 
//  		выпуск произвольными порциями, изделие одно и норматив задан на целое количество базовых ед. изм.
//  	* ПолучитьДанныеНаборов - Булево - если Истина, то составы наборов будут распакованы
//
Функция ПараметрыВыборкиДанных(ПереченьДанных = Неопределено, МенеджерВременныхТаблиц = Неопределено, ВариантЗаполненияОбеспечения = Неопределено) Экспорт
	
	ПараметрыВыборки = Новый Структура;
	
	Если ТипЗнч(ПереченьДанных) = Тип("Строка") Тогда
		ПараметрыВыборки.Вставить("ПереченьДанных", СтрРазделить(СтрЗаменить(ПереченьДанных, " ", ""), ",", Ложь));
	ИначеЕсли ТипЗнч(ПереченьДанных) = Тип("Массив") Тогда
		ПараметрыВыборки.Вставить("ПереченьДанных", ПереченьДанных);
	Иначе
		ПараметрыВыборки.Вставить("ПереченьДанных", ПереченьДанныхСпецификации());
	КонецЕсли;
	
	ПараметрыВыборки.Вставить("ПолучитьПредставления", Ложь);
	ПараметрыВыборки.Вставить("ПолучитьСведенияАвтовыбора", Истина);
	
	ПараметрыВыборки.Вставить("ОбъединитьМатериалыИВходящиеИзделия", Ложь);
	
	ПараметрыВыборки.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	Если ВариантЗаполненияОбеспечения = Неопределено Тогда
		ПараметрыВыборки.Вставить("ВариантЗаполненияОбеспечения", Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения);
	Иначе
		ПараметрыВыборки.Вставить("ВариантЗаполненияОбеспечения", ВариантЗаполненияОбеспечения);
	КонецЕсли;
	
	ПараметрыВыборки.Вставить("ДоступныРаботы", Истина);
	
	ПараметрыВыборки.Вставить("УчитыватьВероятностьБрака", Истина);
	ПараметрыВыборки.Вставить("СпособРасчетаМатериалов", Перечисления.СпособыРасчетаМатериалов.МинимальноеПотребление);
	
	ПараметрыВыборки.Вставить("ПереопределениеНастройкиПартииВыпуска", Новый Структура("Использовать,ВыпускПроизвольнымиПорциями",Ложь,Ложь));
	
	ПараметрыВыборки.Вставить("РассчитыватьДолиСтоимостиВыходныхИзделий", Ложь);
	ПараметрыВыборки.Вставить("РассчитыватьПризнакЗапланироватьПроизводство", Истина);
	
	ПараметрыВыборки.Вставить("ОкруглятьКоличествоШтучныхТоваров", Истина);
	
	ПараметрыВыборки.Вставить("ПолучитьДанныеНаборов", Истина);
	
	//++ НЕ УТКА
	ПараметрыВыборки.Вставить("ПолучитьПромежуточныйВыпуск", Ложь);
	//-- НЕ УТКА
	
	Возврат ПараметрыВыборки;
	
КонецФункции

#КонецОбласти

#Область ДанныеСпецификации

// Возвращает данные спецификации с учетом данных о номенклатуре
// 
// Параметры:
// 	ДанныеПоНоменклатуре - см. ДанныеПоНоменклатуреРасширенный
// 	ПараметрыВыборки - см. ПараметрыВыборкиДанных
// 	Отбор - Структура,Неопределено - структура отбора
// Возвращаемое значение:
// 	см. ДанныеСпецификацииКонструктор
//
Функция ДанныеСпецификацииПоНоменклатуре(ДанныеПоНоменклатуре, ПараметрыВыборки, Отбор = Неопределено) Экспорт
	
	ДанныеСпецификации = ДанныеСпецификации(ДанныеПоНоменклатуре, ПараметрыВыборки)[0];
	
	ПартияВыпуска = РассчитатьПартиюВыпускаПоНоменклатуре(ДанныеПоНоменклатуре, ДанныеСпецификации, ПараметрыВыборки);
	
	РассчитатьКоличествоНаПартиюВыпуска(ПартияВыпуска, ДанныеСпецификации, ДанныеПоНоменклатуре);
	
	ПрименитьОтборПоДаннымСпецификации(ДанныеСпецификации, ПараметрыВыборки, Отбор);
	
	Возврат ДанныеСпецификации;
	
КонецФункции

// Возвращает данные спецификации по переданному списку номенклатуры.
//
// Параметры:
//  СписокНоменклатуры - см. СписокНоменклатуры
//  ПараметрыВыборки   - см. ПараметрыВыборкиДанных
//	ГруппироватьДанные - Булево - Истина, если при получении данных требуется группировать их
//		по заданному набору полей (см. параметр ПоляГруппировки).
//	ПоляГруппировки    - Строка - имена полей, указанных через запятую, по которым необходимо группировать данные.
//		В строке не должно быть пробелов и прочих незначимых символов.
//		Колонки с аналогичными именами должны присутствовать в списке номенклатуры к получению данных.
//		Если поля не заданы, но взведен параметр ГруппироватьДанные, то группировка осуществляется только по спецификации.
//
// Возвращаемое значение:
//  Массив из см. ДанныеСпецификацииКонструктор - массив данных спецификаций
//
Функция ДанныеСпецификацииПоСпискуНоменклатуры(СписокНоменклатуры, ПараметрыВыборки, ГруппироватьДанные = Ложь, ПоляГруппировки = "") Экспорт
	
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(СписокНоменклатуры, "Идентификатор");
	
	ДанныеСпецификаций = ДанныеСпецификации(СписокНоменклатуры, ПараметрыВыборки);
	
	#Область ГруппировкаДанных
	
	// Переменные для группировки данных
	СтруктураПоиска = Неопределено;
	ДополнительныйИндекс = Неопределено;
	ПоляГруппировкиМассив = Новый Массив;
	
	Если ГруппироватьДанные Тогда
		
		ПоляПоиска = ПоляГруппировки;
		Если СтрНайти(ПоляПоиска, "Спецификация") = 0 Тогда
			ПоляПоиска = ПоляПоиска + ?(ПустаяСтрока(ПоляПоиска), "", ",") + "Спецификация";
		КонецЕсли;
		СтруктураПоиска = Новый Структура(ПоляПоиска);
		ДополнительныйИндекс = СписокНоменклатуры.Индексы.Добавить(ПоляПоиска);
		
		Если НЕ ПустаяСтрока(ПоляГруппировки) Тогда
			Для каждого Элемент Из СтрРазделить(ПоляГруппировки, ",", Ложь) Цикл
				ПоляГруппировкиМассив.Добавить(СокрЛП(Элемент));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Результат = Новый Массив;
	
	Для Индекс = 0 По СписокНоменклатуры.Количество()-1 Цикл
		
		Строка = СписокНоменклатуры[Индекс];
		
		Если Строка.Спецификация.Пустая() Тогда
			Результат.Добавить(Неопределено);
			Продолжить;
		ИначеЕсли Строка.Идентификатор = -1 Тогда
			Продолжить; // строки, обработанные в процессе группировки данных, получают идентификатор -1
		КонецЕсли;
		
		ДанныеСпецификации   = ДанныеСпецификаций[Строка.Идентификатор];
		ДанныеПоНоменклатуре = ДанныеПоНоменклатуреРасширенный();
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Строка);
		
		// Расчет партии выпуска
		Если ГруппироватьДанные Тогда
			
			ПартияВыпуска = ПартияВыпуска(0,1);
			
			#Область ГруппировкаДанных
			
			Если ДанныеСпецификации.ОсновноеИзделие.ЭтоОсновноеИзделие Тогда
				Номенклатура = Строка.Номенклатура;
				Характеристика = Строка.Характеристика;
			Иначе
				Номенклатура = Неопределено;
				Характеристика = Неопределено;
			КонецЕсли;
			
			// Поиск строк для группировки
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
			НайденныеСтроки = СписокНоменклатуры.НайтиСтроки(СтруктураПоиска);
			
			Для Сч1 = 0 По НайденныеСтроки.ВГраница() Цикл
				
				Если НайденныеСтроки[Сч1].Идентификатор = -1 Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеСпецификацииНов = ДанныеСпецификаций[НайденныеСтроки[Сч1].Идентификатор];
				
				// Ограничение по номенклатуре и характеристике
				Если ДанныеСпецификации.ЕстьУточняемоеОсновноеИзделие
					И ДанныеСпецификацииНов.ОсновноеИзделие.ЭтоОсновноеИзделие Тогда
					
					Если Номенклатура = Неопределено Тогда
						Номенклатура = НайденныеСтроки[Сч1].Номенклатура;
						Характеристика = НайденныеСтроки[Сч1].Характеристика;
						ДанныеСпецификации = ДанныеСпецификацииНов;
					ИначеЕсли Номенклатура <> НайденныеСтроки[Сч1].Номенклатура
						ИЛИ Характеристика <> НайденныеСтроки[Сч1].Характеристика Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				ДанныеПоНоменклатуреНов = ДанныеПоНоменклатуреРасширенный();
				ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуреНов, НайденныеСтроки[Сч1]);
				
				// Суммирование количества если Н и Х идентичные
				Для Сч2 = Сч1+1 По НайденныеСтроки.ВГраница() Цикл
					
					Если НайденныеСтроки[Сч2].Идентификатор <> -1
						И НайденныеСтроки[Сч1].Номенклатура = НайденныеСтроки[Сч2].Номенклатура
						И НайденныеСтроки[Сч1].Характеристика = НайденныеСтроки[Сч2].Характеристика Тогда
						
						ДанныеПоНоменклатуреНов.Количество = ДанныеПоНоменклатуреНов.Количество + НайденныеСтроки[Сч2].Количество;
						НайденныеСтроки[Сч2].Идентификатор = -1;
						
					КонецЕсли;
					
				КонецЦикла;
				
				НайденныеСтроки[Сч1].Идентификатор = -1;
				
				// Расчет макс. партии
				ПартияВыпускаНов = РассчитатьПартиюВыпускаПоНоменклатуре(
					ДанныеПоНоменклатуреНов, ДанныеСпецификацииНов, ПараметрыВыборки);
				Если СравнитьПартииВыпуска(ПартияВыпускаНов, ПартияВыпуска) > 0 Тогда
					ПартияВыпуска = ПартияВыпускаНов;
					ДанныеПоНоменклатуре = ДанныеПоНоменклатуреНов;
				КонецЕсли;
				
			КонецЦикла;
			
			// Копирование полей группировки в результат
			Для каждого Поле Из ПоляГруппировкиМассив Цикл
				ДанныеСпецификации.Вставить(Поле, Строка[Поле]);
			КонецЦикла;
			
			#КонецОбласти
			
		Иначе
			
			ПартияВыпуска = РассчитатьПартиюВыпускаПоНоменклатуре(
				ДанныеПоНоменклатуре, ДанныеСпецификации, ПараметрыВыборки);
			
		КонецЕсли;
		
		// Расчет количества
		РассчитатьКоличествоНаПартиюВыпуска(ПартияВыпуска, ДанныеСпецификации, ДанныеПоНоменклатуре);
		
		Результат.Добавить(ДанныеСпецификации);
		
	КонецЦикла;
	
	СписокНоменклатуры.Колонки.Удалить("Идентификатор");
	
	Если ГруппироватьДанные Тогда
		СписокНоменклатуры.Индексы.Удалить(ДополнительныйИндекс);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные спецификации с учетом данных о номенклатуре и спецификаций полуфабрикатов, производимых в процессе.
// 
// Параметры:
// 	ДанныеПоНоменклатуре - см. ДанныеПоНоменклатуреРасширенный
// 	ИсключитьПолуфабрикаты - Булево, Неопределено - Истина, если не требуется добавлять полуфабрикаты в материалы и выходные изделия, Неопределено - если нужно получить весь набор данных..
// 	ПараметрыВыборки - см. ПараметрыВыборкиДанных
// Возвращаемое значение:
// 	см. ДанныеСпецификацииКонструктор
//
Функция ДанныеСпецификацииСПолуфабрикатами(ДанныеПоНоменклатуре, ИсключитьПолуфабрикаты, ПараметрыВыборки) Экспорт
	
	ДанныеСпецификации = ДанныеСпецификацииПоНоменклатуре(ДанныеПоНоменклатуре, ПараметрыВыборки);
	
	Если ДанныеСпецификации = Неопределено Тогда
		
		Если ДанныеПоНоменклатуре.Свойство("Спецификация") И ЗначениеЗаполнено(ДанныеПоНоменклатуре.Спецификация) Тогда
			ТекстИсключения = НСтр("ru = 'Ошибка при чтении данных ресурсной спецификации: %Спецификация%.';
									|en = 'An error occurred when reading data of the %Спецификация% bill of materials.'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Спецификация%", ДанныеПоНоменклатуре.Спецификация);
		Иначе
			ТекстИсключения = НСтр("ru = 'Ошибка при чтении данных ресурсной спецификации: не передана спецификация.';
									|en = 'An error occurred when reading bill of materials data: bill of materials not transferred.'");
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	СписокНоменклатуры = СписокНоменклатуры();
	
	Для Каждого Строка Из ДанныеСпецификации.МатериалыИУслуги Цикл
		
		Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации Тогда
			
			НоваяСтрока = СписокНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура, Характеристика, Количество, ДнейОтПотребности");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоНоменклатуре, "НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности");
			НоваяСтрока.Спецификация = Строка.ИсточникПолученияПолуфабриката;
			
		КонецЕсли;
		
		Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе
			И ЗначениеЗаполнено(Строка.СпецификацияРемонта) Тогда
			
			НоваяСтрока = СписокНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура, Характеристика, Количество, ДнейОтПотребности");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоНоменклатуре, "НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности");
			НоваяСтрока.Спецификация = Строка.СпецификацияРемонта;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыВыборкиКопия = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыВыборки);
	ПараметрыВыборкиКопия.ОбъединитьМатериалыИВходящиеИзделия = Ложь;
	
	Пока СписокНоменклатуры.Количество() > 0 Цикл
		
		СписокНоменклатуры = ДобавитьДанныеПолуфабрикатов(ДанныеСпецификации, СписокНоменклатуры, ПараметрыВыборкиКопия);
		
	КонецЦикла;
	
	Если ИсключитьПолуфабрикаты Тогда
		
		СтруктураОтбора = Новый Структура("ПроизводитсяВПроцессе", Истина);
		НайденныеСтроки = ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе
				И ДанныеСпецификации.Свойство("ВозвратныеОтходы") Тогда
				
				СтруктураОтбораОтходов = Новый Структура("Номенклатура, Характеристика, Этап");
				ЗаполнитьЗначенияСвойств(СтруктураОтбораОтходов, Строка);
				СтруктураОтбораОтходов.Этап = Строка.ИсточникПолученияПолуфабриката;
				
				НайденныеСтрокиОтходов = ДанныеСпецификации.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбораОтходов);
				
				Для Каждого СтрокаОтхода Из НайденныеСтрокиОтходов Цикл
					ДанныеСпецификации.ВозвратныеОтходы.Удалить(СтрокаОтхода);
				КонецЦикла;
				
			КонецЕсли;
			
			ДанныеСпецификации.МатериалыИУслуги.Удалить(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеСпецификации;
	
КонецФункции

// Возвращает ответственное подразделение спецификации.
// 
// Параметры:
//  Спецификация - СправочникСсылка.РесурсныеСпецификации -Спецификация 
// 
// Возвращаемое значение:
//   - СправочникСсылка.СтруктураПредприятия -
Функция ОтветственноеПодразделение(Спецификация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РесурсныеСпецификации.ОтветственноеПодразделение
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|ГДЕ
	|	РесурсныеСпецификации.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Спецификация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ОтветственноеПодразделение;
	Иначе
		Результат = Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОписаниеПроизводственногоПроцесса

// Получает описание партии выпуска по спецификации
//
// Параметры:
//  Спецификация - СправочникОбъект.РесурсныеСпецификации, СправочникСсылка.РесурсныеСпецификации - данные спецификации
// 
// Возвращаемое значение:
//  Структура - описание партии выпуска
//
Функция ОписаниеПартииВыпуска(Спецификация) Экспорт
	
	ОписаниеПартииВыпуска = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураОписаниеПартииВыпуска();
	
	СписокРеквизитовСпецификации = "ТипПроизводственногоПроцесса,ВариантНазначения,ВыпускПроизвольнымиПорциями";
	
	Если ТипЗнч(Спецификация) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
		
		РеквизитыСпецификации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Спецификация, СписокРеквизитовСпецификации);
		
		ДанныеОсновногоИзделия = ДанныеОсновногоИзделияСпецификации(Спецификация);
		ЗаполнитьЗначенияСвойств(ОписаниеПартииВыпуска, ДанныеОсновногоИзделия);
		
	Иначе
		
		РеквизитыСпецификации = Новый Структура(СписокРеквизитовСпецификации);
		ЗаполнитьЗначенияСвойств(РеквизитыСпецификации, Спецификация);
		
		ДанныеОсновногоИзделия = УправлениеДаннымиОбИзделияхКлиентСервер.ДанныеОсновногоИзделияСпецификации(Спецификация);
		ЗаполнитьЗначенияСвойств(ОписаниеПартииВыпуска, ДанныеОсновногоИзделия);
		
	КонецЕсли;
	
	Если (РеквизитыСпецификации.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
			И РеквизитыСпецификации.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры
		) Тогда
		ОписаниеПартииВыпуска.МножественныйВыпуск = Истина;
	Иначе
		ОписаниеПартииВыпуска.МножественныйВыпуск = Ложь;
	КонецЕсли;
	
	Если РеквизитыСпецификации.ВыпускПроизвольнымиПорциями = Истина Тогда
		ОписаниеПартииВыпуска.ВыпускПроизвольнымиПорциями = Истина;
	Иначе
		ОписаниеПартииВыпуска.ВыпускПроизвольнымиПорциями = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеПартииВыпуска.Номенклатура) Тогда
		БазоваяЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеПартииВыпуска.Номенклатура, "ЕдиницаИзмерения");
	Иначе
		БазоваяЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОсновногоИзделия.Упаковка, "Владелец.ЕдиницаИзмерения");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) И ОписаниеПартииВыпуска.Упаковка.Пустая() Тогда
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия = БазоваяЕдиницаИзмерения;
	Иначе
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия = ОписаниеПартииВыпуска.Упаковка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) И РеквизитыСпецификации.ВыпускПроизвольнымиПорциями Тогда
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска = БазоваяЕдиницаИзмерения;
	ИначеЕсли ОписаниеПартииВыпуска.МножественныйВыпуск ИЛИ ОписаниеПартииВыпуска.КоличествоУпаковок <> 1 Тогда // ЕдиницаИзмеренияПартииВыпуска() 
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	Иначе
		ОписаниеПартииВыпуска.ЕдиницаИзмеренияПартииВыпуска = ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия;
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(ОписаниеПартииВыпуска);
	
КонецФункции

// Получает описание производственного процесса
//
// Параметры:
//  Ссылка - СправочникСсылка.РесурсныеСпецификации - ресурсная спецификация
// 
// Возвращаемое значение:
//  Структура - описание производственного процесса
//
Функция ОписаниеПроизводственногоПроцесса(Ссылка) Экспорт
	
	Результат = Новый Структура("НесколькоПервыхЭтапов,НесколькоПоследнихЭтапов");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА НомерСледующегоЭтапа = 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) > 1 КАК НесколькоПоследнихЭтапов,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА НомерЭтапа = 1
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) > 1 КАК НесколькоПервыхЭтапов
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	Владелец = &Ссылка И НЕ ПометкаУдаления");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает структуру данных основного изделия по спецификации
//
// Параметры:
//  Спецификация	 - СправочникСсылка.РесурсныеСпецификации	 - спецификация, данные которой требуется получить
//  Номенклатура	 - СправочникСсылка.Номенклатура			 - Номенклатура выходного изделия, если не указано, то основная
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика выходного изделия, если не указано, 
//																	то основная или любая из характеристик номенклатуры
//
// Возвращаемое значение:
//   Структура   - содержит данные изделия
//
Функция ДанныеОсновногоИзделияСпецификации(Спецификация, Номенклатура = Неопределено, Характеристика = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	0               КАК Идентификатор,
	|	&Спецификация   КАК Спецификация,
	|	&Номенклатура   КАК Номенклатура,
	|	&Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВтДанныеПоНоменклатуре
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|"
	+ ТекстЗапросаДанныеОсновногоИзделияСпецификации();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	Если Номенклатура = Неопределено Тогда
		Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	КонецЕсли;
	
	Если Характеристика = Неопределено Тогда
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УчитыватьВероятностьБрака", Истина);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = РезультатыЗапроса[РезультатыЗапроса.Количество()-1];
	
	ДанныеПоНоменклатуре = СтруктураДанныхОсновногоИзделияСпецификации();
		
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Выборка);
		
		УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВСтрокеНабораДанных(
			ДанныеПоНоменклатуре,
			РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить());
		
		ДанныеПоНоменклатуре.Количество = ОписаниеТипаКоличественногоРеквизита().ПривестиЗначение(
			ДанныеПоНоменклатуре.КоличествоУпаковок
				* ДанныеПоНоменклатуре.ДанныеУпаковки.Числитель / ДанныеПоНоменклатуре.ДанныеУпаковки.Знаменатель);
		
	КонецЕсли;
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

#КонецОбласти

#Область Прочее

//Возвращает параметры выбора спецификаций для изделий, указанных в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров выбора спецификаций.
//
// Возвращаемое значение:
//   Структура - Структура, переопределяющая умолчания, заданные в функции УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций().
//
Функция ПараметрыВыбораСпецификаций(Объект) Экспорт
	
	ПараметрыВыбораСпецификаций = Новый Структура;
	
#Область Сборка

	ПараметрыВыбораСпецификацийТЧ = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.ВРазработке);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыВыбораСпецификаций.Вставить("Сборка", ПараметрыВыбораСпецификацийТЧ);
	
#КонецОбласти
	
#Область Ремонт

	ПараметрыВыбораСпецификацийТЧ = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Ремонт);
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.ВРазработке);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыВыбораСпецификаций.Вставить("Ремонт", ПараметрыВыбораСпецификацийТЧ);
	
#КонецОбласти
	
#Область Разборка

	ПараметрыВыбораСпецификацийТЧ = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Разборка);
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.ВРазработке);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыВыбораСпецификаций.Вставить("Разборка", ПараметрыВыбораСпецификацийТЧ);
	
#КонецОбласти

	Возврат ПараметрыВыбораСпецификаций;

КонецФункции

//Имена реквизитов, от значений которых зависят параметры выбора спецификаций
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций() Экспорт
	
	ИменаРеквизитов = "";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры распределения затрат на выходные изделия.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров распределения затрат.
// 
// Возвращаемое значение:
//  Структура - параметры, уточняющие особенности распределения затрат на выходные изделия.
//
Функция ПараметрыРаспределенияЗатрат(Объект) Экспорт
	
	ПараметрыРаспределенияЗатрат = ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия("ВыходныеИзделия", Объект.СпособРаспределенияЗатратНаВыходныеИзделия);
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка Тогда
		ПараметрыРаспределенияЗатрат.АвтоРасчетЛюбойХарактеристики = Истина;
	КонецЕсли;
	
	ПараметрыРаспределенияЗатрат.ЕстьПараметризацияРесурснойСпецификации = Истина;
	
	ПараметрыРаспределенияЗатрат.РассчитыватьПолеДоляСтоимостиПроцент = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакЕстьОшибкиЗаполнения = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакДоляСтоимостиОбязательна = Истина;
	ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Дата = 
								?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Дата"), 
								Объект.Дата, 
								Дата("00010101"));
	ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Валюта = 
								?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Валюта"), 
								Объект.Валюта, 
								Справочники.Валюты.ПустаяСсылка());
	
	ПараметрыРаспределенияЗатрат.ПоляСвязи = "Номенклатура,Характеристика,ЭтапРедактирование";
	ПараметрыРаспределенияЗатрат.ТолькоПросмотр = Истина;
	
	Возврат ПараметрыРаспределенияЗатрат;
	
КонецФункции

// Возвращает спецификации, в которые входит полуфабрикат производимый / обрабатываемый по указанной спецификации
//
// Параметры:
//  Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация полуфабриката
// 
// Возвращаемое значение:
//  Массив - зависимые спецификации
//
Функция ЗависимыеСпецификации(Спецификация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	(
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|	И Таблица.ОбработатьПоСпецификации
	|	И Таблица.Спецификация = &Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|	И Таблица.ОбработатьПоСпецификации
	|	И Таблица.Спецификация = &Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|	И Таблица.ПроизводитсяВПроцессе
	|	И Таблица.ИсточникПолученияПолуфабриката = &Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|	И Таблица.ПроизводитсяВПроцессе
	|	И Таблица.СпецификацияРемонта = &Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.СпецификацииИзделий КАК СпецификацииИзделий
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Таблица
	|		ПО СпецификацииИзделий.ВидНоменклатуры = Таблица.Номенклатура.ВидНоменклатуры
	|			И СпецификацииИзделий.Номенклатура В (Таблица.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|			И СпецификацииИзделий.Характеристика В (ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка), Таблица.Характеристика)
	|			И Таблица.ПроизводитсяВПроцессе
	|			И Таблица.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
	|			И Таблица.ИсточникПолученияПолуфабриката = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|			И Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			
	|ГДЕ
	|	СпецификацииИзделий.Спецификация = &Спецификация
	|	И СпецификацииИзделий.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка)
	|	И СпецификацииИзделий.ПобочныйВыход = ЛОЖЬ
	|
	|) КАК Таблица");
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Возвращает ссылку на этап спецификации у которой производственный процесс одноэтапный
//
// Параметры:
//  Спецификация	- СправочникСсылка.РесурсныеСпецификации - спецификация, этапы которой требуется проверить
//
// Возвращаемое значение:
//   СправочникСсылка.ЭтапыПроизводства - этап одноэтапной спецификации
//
Функция ПолучитьЭтапОдногоЭтапногоПроцесса(Спецификация) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Этапы.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК Этапы
	|ГДЕ
	|	НЕ Этапы.ПометкаУдаления
	|	И Этапы.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа,
	|	Ссылка");
	Запрос.УстановитьПараметр("Владелец", Спецификация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;

КонецФункции

// Проверяет соответствие количества заказанного изделия, ограничениям на размер партии:
// минимальнаый и оптимальный размер партии, кратность партии.
// 
// Параметры:
// 	ДанныеСпецификации - см. Справочники.РесурсныеСпецификации.ДанныеСпецификации
// 	Количество - Число - размер партии в базовых единицах заказанного изделия (ДанныеСпецификации.ОсновноеИзделие).
// 	Отказ - Булево - результат проверки: если проверка не пройдена, переменной присваивается значение Истина.
// 	СообщенияОтказ - Массив - в массив помещаются тексты ошибок проверки.
//
Процедура ПроверитьРазмерПартии(ДанныеСпецификации, Количество, Отказ, СообщенияОтказ) Экспорт
	
	// Проверка на оптимальную / минимальную партию
	Если ДанныеСпецификации.ВыпускПроизвольнымиПорциями Тогда
		Коэффициент = ДанныеСпецификации.ОсновноеИзделие.КоэффициентПересчетаВОсновноеИзделие;
	Иначе
		ДанныеУпаковки = ДанныеСпецификации.ОсновноеИзделие.ДанныеУпаковки;
		Коэффициент = ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
			* ДанныеУпаковки.Числитель / ДанныеУпаковки.Знаменатель;
	КонецЕсли;
	
	МинимальныйВыпуск    = Окр(ДанныеСпецификации.МинимальнаяПартияВыпуска * Коэффициент, 3);
	ОптимальныйВыпуск    = Окр(ДанныеСпецификации.ОптимальнаяПартияВыпуска * Коэффициент, 3);
	ДопустимоеПревышение = Окр(ДанныеСпецификации.ДопустимоеПревышениеОптимальнойПартииВыпуска * Коэффициент, 3);
	
	Если МинимальныйВыпуск <> 0
		И Количество < МинимальныйВыпуск Тогда
		
		Отказ = Истина;
		СообщенияОтказ.Добавить(
			СтрШаблон(
				НСтр("ru = 'Размер партии меньше минимально допустимого значения по спецификации (%1 %2).';
					|en = 'Lot size is less than minimum allowable value according to BOM (%1 %2).'"),
				Формат(МинимальныйВыпуск, "ЧГ="),
				ДанныеСпецификации.ОсновноеИзделие.ЕдиницаИзмерения));
		
	ИначеЕсли ОптимальныйВыпуск <> 0
		И Количество > (ОптимальныйВыпуск + ДопустимоеПревышение) Тогда
		
		Отказ = Истина;
		СообщенияОтказ.Добавить(
			СтрШаблон(
				НСтр("ru = 'Размер партии больше оптимального значения по спецификации (%1 %2).';
					|en = 'Lot size is greater than optimum value according to BOM (%1 %2).'"),
				Формат(ОптимальныйВыпуск + ДопустимоеПревышение, "ЧГ="),
				ДанныеСпецификации.ОсновноеИзделие.ЕдиницаИзмерения));
		
	КонецЕсли;
	
	// Проверка на кратность выпуска
	Если НЕ ДанныеСпецификации.ВыпускПроизвольнымиПорциями
		И НЕ Отказ Тогда
		
		КоличествоНаЕдиницуПартииВыпуска = ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
			* ДанныеУпаковки.Числитель / ДанныеУпаковки.Знаменатель;
		
		Если Количество % КоличествоНаЕдиницуПартииВыпуска <> 0 Тогда
			
			Отказ = Истина;
			СообщенияОтказ.Добавить(
				СтрШаблон(
					НСтр("ru = 'Размер партии не кратен нормативному значению по спецификации (%1 %2).';
						|en = 'Lot size is not a multiple of the normative value according to BOM (%1 %2).'"),
					Формат(КоличествоНаЕдиницуПартииВыпуска, "ЧГ="),
					ДанныеСпецификации.ОсновноеИзделие.ЕдиницаИзмерения));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Тип строки данных спецификации.
// 
// Возвращаемое значение:
//  Строка
//
Функция ТипСтрокиМатериал() Экспорт
	Возврат "Материал";
КонецФункции

// Тип строки данных спецификации.
// 
// Возвращаемое значение:
//  Строка
//
Функция ТипСтрокиПолуфабрикат() Экспорт
	Возврат "Полуфабрикат";
КонецФункции

// Тип строки данных спецификации.
// 
// Возвращаемое значение:
//  Строка
//
Функция ТипСтрокиПромежуточныйПолуфабрикат() Экспорт
	Возврат "ПромежуточныйПолуфабрикат";
КонецФункции

// Тип строки данных спецификации.
// 
// Возвращаемое значение:
//  Строка
//
Функция ТипСтрокиВходящееИзделие() Экспорт
	Возврат "ВходящееИзделие";
КонецФункции

// Тип строки данных спецификации.
// 
// Возвращаемое значение:
//  Строка
//
Функция ТипСтрокиПобочныйВыход() Экспорт
	Возврат "ПобочныйВыход";
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	УправлениеДаннымиОбИзделияхВызовСервера.РесурсныеСпецификацииОбработкаПолученияДанныхВыбора(
				ДанныеВыбора,
				Параметры, 
				СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	УправлениеДаннымиОбИзделияхВызовСервера.РесурсныеСпецификацииОбработкаПолученияФормы(
				ВидФормы,
				Параметры,
				ВыбраннаяФорма,
				СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаЗаполнения

//++ НЕ УТКА

// Производит проверку вложенных спецификаций
// 
// Параметры:
// 	Объект - СправочникОбъект.РесурсныеСпецификации - текущая спецификация
// 	Отказ - Булево - флаг отказа
//
Процедура ПроверитьВложенныеСпецификации(Объект, Отказ) Экспорт
	
	Список = Новый Массив();
	СоответствиеСтрок = Новый Соответствие;
	
	Для каждого Строка Из Объект.ВыходныеИзделия Цикл
		Если Строка.ОбработатьПоСпецификации Тогда
			ДобавитьВложеннуюСпецификациюВСписок(Список, СоответствиеСтрок, "ВыходныеИзделия", Строка, "Спецификация");
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Объект.ВозвратныеОтходы Цикл
		Если Строка.ОбработатьПоСпецификации Тогда
			ДобавитьВложеннуюСпецификациюВСписок(Список, СоответствиеСтрок, "ВозвратныеОтходы", Строка, "Спецификация");
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Объект.МатериалыИУслуги Цикл
		Если Строка.ПроизводитсяВПроцессе Тогда
			Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации Тогда
				ДобавитьВложеннуюСпецификациюВСписок(
					Список,
					СоответствиеСтрок,
					"МатериалыИУслуги",
					Строка,
					"ИсточникПолученияПолуфабриката");
			ИначеЕсли Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе
				И ЗначениеЗаполнено(Строка.СпецификацияРемонта)
				И Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт Тогда
				ДобавитьВложеннуюСпецификациюВСписок(
					Список,
					СоответствиеСтрок,
					"МатериалыИУслуги",
					Строка,
					"СпецификацияРемонта");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Список.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.СтатусНеДействует КАК СтатусНеДействует
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА Таблица.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СтатусНеДействует
	|	ИЗ
	|		Справочник.РесурсныеСпецификации КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка В(&Спецификации)) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.СтатусНеДействует
	|	И ВложенныйЗапрос.Ссылка <> &Спецификация");
	Запрос.УстановитьПараметр("Спецификация", Объект.Ссылка);
	Запрос.УстановитьПараметр("Спецификации", Список);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл

			СтрокаТЧ = СоответствиеСтрок[Выборка.Ссылка][0]; // СтрокаТабличнойЧасти
			ИмяСписка = Метаданные.Справочники.РесурсныеСпецификации.ТабличныеЧасти[СтрокаТЧ.ИмяТЧ].Синоним;
			
			ТекстОшибки = НСтр("ru = 'Внимание! Спецификация ""%1"" не является действующей (см. список ""%2"", строка %3)';
								|en = 'Warning. The %1 BOM is invalid. See the %2 list, line %3'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Выборка.Ссылка, ИмяСписка, СтрокаТЧ.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				СтрокаТЧ.ИмяТЧ,
				СтрокаТЧ.НомерСтроки,
				СтрокаТЧ.ИмяПоля);
		
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				Поле);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьЗацикливаниеСпецификаций(Объект.Ссылка, Список, Отказ);
	
КонецПроцедуры

Процедура ПроверитьЗацикливаниеСпецификаций(Спецификация, ВложенныеСпецификации = Неопределено, Отказ)
	
	СписокОшибок    = Новый Массив(2);
	Очередь         = Новый Массив();
	Граф            = УправлениеПроизводством.Граф();
	ЕстьЦиклыВГрафе = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка       КАК Вершина,
	|	Таблица.Спецификация КАК СмежнаяВершина
	|ИЗ
	|	&Таблица КАК Таблица");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", "("+ТекстЗапросаВложенныеСпецификации()+")");
	
	Если ВложенныеСпецификации <> Неопределено Тогда // обслуживание незаписанного объекта
		ЗапросОбъект = Новый Запрос(
		"ВЫБРАТЬ
		|	&Спецификация  КАК Вершина,
		|	Таблица.Ссылка КАК СмежнаяВершина
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Спецификации)");
		ЗапросОбъект.УстановитьПараметр("Спецификация", Спецификация);
		ЗапросОбъект.УстановитьПараметр("Спецификации", ВложенныеСпецификации);
		Выборка = ЗапросОбъект.Выполнить().Выбрать();
	Иначе
		Запрос.УстановитьПараметр("Спецификации", Спецификация);
		Выборка = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
	Пока Выборка.Количество() > 0 Цикл
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Вершина = Выборка.СмежнаяВершина Тогда
				СписокОшибок[0] = Выборка.Вершина;
				СписокОшибок[1] = Выборка.Вершина;
				ЕстьЦиклыВГрафе = Истина;
				Прервать;
			Иначе
				ТекущаяВершина = УправлениеПроизводством.ПолучитьВершинуГрафаПоСсылке(Граф, Выборка.Вершина);
				УправлениеПроизводством.ДобавитьСмежнуюВершинуВСписокСмежности(ТекущаяВершина, Выборка.СмежнаяВершина);
				УправлениеПроизводством.ПолучитьВершинуГрафаПоСсылке(Граф, Выборка.СмежнаяВершина);
			КонецЕсли;
			
			Очередь.Добавить(Выборка.СмежнаяВершина);
		
		КонецЦикла;
		
		Если ЕстьЦиклыВГрафе ИЛИ УправлениеПроизводством.ЕстьЦиклыВГрафе(Граф, СписокОшибок[0], СписокОшибок[1]) Тогда
			ЕстьЦиклыВГрафе = Истина;
			Прервать;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Спецификации", Очередь);
		Выборка = Запрос.Выполнить().Выбрать();
		Очередь.Очистить();
		
	КонецЦикла;
	
	Если ЕстьЦиклыВГрафе Тогда
		ТекстОшибки = НСтр("ru = 'Использование в спецификации ""%1"" спецификации ""%2"" приводит к зацикливанию.';
							|en = 'Using the ""%2"" BOM in the ""%1"" BOM causes looping.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, СписокОшибок[0], СписокОшибок[1]);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВложеннуюСпецификациюВСписок(Список, СоответствиеСтрок, ИмяТЧ, Строка, ИмяПоля = "Спецификация")
	
	Список.Добавить(Строка[ИмяПоля]);
	ПутьКСтроке = Новый Структура("ИмяТЧ, НомерСтроки, ИмяПоля", ИмяТЧ, Строка.НомерСтроки, ИмяПоля);
	
	Если СоответствиеСтрок[Строка[ИмяПоля]] = Неопределено Тогда
		ПутиКДанным = Новый Массив;
		ПутиКДанным.Добавить(ПутьКСтроке);
		СоответствиеСтрок.Вставить(Строка[ИмяПоля], ПутиКДанным);
	Иначе
		ПутиКДанным = СоответствиеСтрок[Строка[ИмяПоля]]; // Массив
		ПутиКДанным.Добавить(ПутьКСтроке);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность указания маршрутной карты в этапе спецификации
// 
// Параметры:
// 	НачалоДействия - Дата - начало действия спецификации
// 	КонецДействия - Дата - конец действия спецификации
// 	МаршрутнаяКарта - СправочникОбъект.МаршрутныеКарты
// 	Этап - СправочникСсылка.ЭтапыПроизводства
// 	ЭтапПредставление - Строка
// 	Отказ - Булево
Процедура ПроверитьКорректностьУказанияМаршрутнойКарты(
	НачалоДействия, КонецДействия, МаршрутнаяКарта, Этап, ЭтапПредставление, Отказ) Экспорт
	
	ШаблонСообщения = НСтр("ru = 'В этапе ""%1"" необходимо указать действующую маршрутную карту.';
							|en = 'Specify a valid route sheet for stage ""%1"".'");
	КлючДанных = Этап;
	
	Если МаршрутнаяКарта.Статус <> Перечисления.СтатусыМаршрутныхКарт.Действует
		
		// Начало действия маршрутной карты должно быть 
		// не позже чем конец действия спецификации
		ИЛИ МаршрутнаяКарта.НачалоДействия <> '000101010000'
			И КонецДействия <> '000101010000'
			И МаршрутнаяКарта.НачалоДействия > КонецДействия
			
		// Конец действия маршрутной карты должен быть 
		// не раньше чем начало действия спецификации
		ИЛИ МаршрутнаяКарта.КонецДействия <> '000101010000'
			И НачалоДействия <> '000101010000'
			И МаршрутнаяКарта.КонецДействия <= НачалоДействия Тогда 
			
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СокрЛП(ЭтапПредставление));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, "МаршрутнаяКарта",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область ДанныеСпецификаций

#Область Основное

// Конструктор структуры данных спецификации
// 
// Возвращаемое значение:
// 	Структура - из:
//		* Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация
//		* СпецификацияПредставление - Строка - представление спецификации
//		* СпособРаспределенияЗатратНаВыходныеИзделия - ПеречислениеСсылка.СпособыРаспределенияЗатратНаВыходныеИзделия - способ распределения затрат
//		* ТипПроизводственногоПроцесса - ПеречислениеСсылка.ТипыПроизводственныхПроцессов - тип производственного процесса
//		* ВариантНазначения - ПеречислениеСсылка.ВариантыНазначенияСпецификации - вариант назначения
//		* МногоэтапныйПроизводственныйПроцесс - Булево - признак многоэтапного процесса
//		* ВыпускПроизвольнымиПорциями - Булево - признак выпуска произвольными порциями
//		* ОптимальнаяПартияВыпуска - Число - размер оптимальной партии
//		* ДопустимоеПревышениеОптимальнойПартииВыпуска - Число - размер допустимого превышения
//		* МинимальнаяПартияВыпуска - Число - размер минимальной партии
//		* ОсновноеИзделие - см. СтруктураДанныхОсновногоИзделияСпецификации
//		* ОграниченСрокПролеживания - Булево - признак ограничения срока пролеживания
//		* МаксимальныйСрокПролеживанияВДнях - Число - максимальный срок пролеживания
//		* ОптимальноеКоличествоПередачиМеждуЭтапами - Число - оптимальное количество передачи между этапами
//		* Этапы - ТаблицаЗначений - таблица этапов
//		* ВыходныеИзделия - ТаблицаЗначений - таблица выходных изделий:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//		* ВозвратныеОтходы - ТаблицаЗначений - таблица возвратных отходов:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//		* МатериалыИУслуги - ТаблицаЗначений - таблица материалов:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//		* ВходящиеИзделия - ТаблицаЗначений - таблица входящих изделий:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//		* Трудозатраты - ТаблицаЗначений - таблица трудозатрат:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//		* ВидыРабочихЦентров - ТаблицаЗначений - таблица видов рабочих центров:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//		* АльтернативныеВидыРабочихЦентров - ТаблицаЗначений - таблица альтернативных видов рабочих центров:
//			** НомерСтроки - Число - номер строки таблицы
//			** КлючСвязи - УникальныйИдентификатор - ключ связи таблицы
//
Функция ДанныеСпецификацииКонструктор() Экспорт
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("Спецификация");
	СтруктураДанных.Вставить("СпецификацияПредставление", "");
	
	СтруктураДанных.Вставить("Код", "");
	СтруктураДанных.Вставить("ИдентификаторВерсииДанных", "");
	
	СтруктураДанных.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия");
	
	СтруктураДанных.Вставить("ТипПроизводственногоПроцесса");
	СтруктураДанных.Вставить("ВариантНазначения");
	
	СтруктураДанных.Вставить("МногоэтапныйПроизводственныйПроцесс",  Ложь);
	
	СтруктураДанных.Вставить("ВыпускПроизвольнымиПорциями",          Ложь);
	СтруктураДанных.Вставить("ОптимальнаяПартияВыпуска", 0);
	СтруктураДанных.Вставить("ДопустимоеПревышениеОптимальнойПартииВыпуска", 0);
	СтруктураДанных.Вставить("МинимальнаяПартияВыпуска", 0);
	
	СтруктураДанных.Вставить("ОсновноеИзделие", СтруктураДанныхОсновногоИзделияСпецификации());
	
	СтруктураДанных.Вставить("ОграниченСрокПролеживания", Ложь);
	СтруктураДанных.Вставить("МаксимальныйСрокПролеживанияВДнях", 0);
	
	СтруктураДанных.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами", 0);
	
	СтруктураДанных.Вставить("ЕстьУточняемоеОсновноеИзделие", Ложь);
	СтруктураДанных.Вставить("ЕстьПараметризацияРесурсов",    Ложь);
	СтруктураДанных.Вставить("ЕстьВложенныеСпецификации",     Ложь);
	СтруктураДанных.Вставить("ЕстьРасчетВероятности",         Ложь);
	СтруктураДанных.Вставить("ЕстьНекратныеНормативыВРЦ",     Ложь);
	
	СтруктураДанных.Вставить("ОтветственноеПодразделение");
	
	СтруктураДанных.Вставить("СостояниеДанныхНаборов", "Отсутствуют"); // Свернуты, Распакованы
	
	Возврат СтруктураДанных;
	
КонецФункции

// Получает данные спецификаций по заданному списку данных по номенклатуре
// 
// Параметры:
// 	СписокСтруктураДанных - см. СписокНоменклатуры
// 	ПараметрыВыборки - см. ПараметрыВыборкиДанных
// 
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
// * Ключ - Число
// * Значение - см. ДанныеСпецификацииКонструктор
//
Функция ДанныеСпецификации(СписокСтруктураДанных, ПараметрыВыборки) Экспорт
	
	ПереченьДанных = Неопределено;
	Если НЕ ПараметрыВыборки.Свойство("ПереченьДанных", ПереченьДанных) ИЛИ НЕ ЗначениеЗаполнено(ПереченьДанных) Тогда
		ПереченьДанных = ПереченьДанныхСпецификации();
	КонецЕсли;
	
	ИсточникиПараметризацииРесурсов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		СтрРазделить("ВыходныеИзделия,МатериалыИУслуги",","), ПереченьДанных);
	Если ИсточникиПараметризацииРесурсов.ВГраница() <> -1 Тогда
		ПереченьДанных = ОбщегоНазначения.СкопироватьРекурсивно(ПереченьДанных, Ложь);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПереченьДанных, ИсточникиПараметризацииРесурсов);
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Неопределено;
	Если НЕ ПараметрыВыборки.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц)
		ИЛИ МенеджерВременныхТаблиц = Неопределено
		Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустойКлючСвязи",  Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	СписокТаблицДляУдаления = Новый Массив;
	
	РазделительЗапросовВПакете = ОбщегоНазначения.РазделительПакетаЗапросов();
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	#Область ВтДанныеПоНоменклатуре
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.Идентификатор             КАК Идентификатор,
	|	Т.Спецификация              КАК Спецификация,
	|	Т.Номенклатура              КАК Номенклатура,
	|	Т.Характеристика            КАК Характеристика,
	|	Т.Количество                КАК Количество,
	|	Т.ПодразделениеДиспетчер    КАК ПодразделениеДиспетчер,
	|	Т.ПодразделениеИсполнитель  КАК ПодразделениеИсполнитель,
	|	Т.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	Т.Распоряжение              КАК Распоряжение,
	|	Т.Назначение                КАК Назначение,
	|	Т.НачалоПроизводства        КАК НачалоПроизводства
	|
	|ПОМЕСТИТЬ ВтДанныеПоНоменклатуре
	|ИЗ
	|	&НаборДанныхПоНоменклатуре КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация, Идентификатор
	|
	|";
	
	Если ТипЗнч(СписокСтруктураДанных) = Тип("ТаблицаЗначений") Тогда
		НаборДанныхПоНоменклатуре = СписокСтруктураДанных;
	Иначе
		НаборДанныхПоНоменклатуре = СписокНоменклатуры();
		ЗаполнитьЗначенияСвойств(НаборДанныхПоНоменклатуре.Добавить(), СписокСтруктураДанных);
	КонецЕсли;
	
	Если НаборДанныхПоНоменклатуре.Количество() = 1 Тогда
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Справочник.РесурсныеСпецификации.МодульМенеджера.ДанныеСпецификации_1");
		ВесЗамера = 1;
	Иначе
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Справочник.РесурсныеСпецификации.МодульМенеджера.ДанныеСпецификации");
		ВесЗамера = НаборДанныхПоНоменклатуре.Количество() / 10;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаборДанныхПоНоменклатуре", НаборДанныхПоНоменклатуре);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Идентификатор",            0);
	ДополнительныеПараметры.Вставить("ПодразделениеДиспетчер",   Справочники.СтруктураПредприятия.ПустаяСсылка());
	ДополнительныеПараметры.Вставить("ПодразделениеИсполнитель", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ДополнительныеПараметры.Вставить("НаправлениеДеятельности",  Справочники.НаправленияДеятельности.ПустаяСсылка());
	ДополнительныеПараметры.Вставить("Распоряжение",             Справочники.РесурсныеСпецификации.ПустаяСсылка());
	ДополнительныеПараметры.Вставить("Назначение",               Справочники.Назначения.ПустаяСсылка());
	ДополнительныеПараметры.Вставить("НачалоПроизводства",       Дата(1,1,1));
	
	Для каждого КлючИЗначение Из ДополнительныеПараметры Цикл
		ИмяПараметра = КлючИЗначение.Ключ;
		Если НаборДанныхПоНоменклатуре.Колонки.Найти(ИмяПараметра) = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Т."+ИмяПараметра, "&"+ИмяПараметра);
			Запрос.УстановитьПараметр(ИмяПараметра, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете);
	
	СписокТаблицДляУдаления.Добавить("ВтДанныеПоНоменклатуре");
	
	#КонецОбласти
	
	#Область ВтИзделия
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	// 0 - Выходное, 1 - Входное, 2 - Побочное
	|	0                                                   КАК ВидИзделия,
	|	ВтДанныеПоНоменклатуре.Идентификатор                КАК Идентификатор,
	|	ВтДанныеПоНоменклатуре.Спецификация                 КАК Спецификация,
	|	ВтДанныеПоНоменклатуре.ПодразделениеДиспетчер       КАК ПодразделениеДиспетчер,
	|	ВтДанныеПоНоменклатуре.ПодразделениеИсполнитель     КАК ПодразделениеИсполнитель,
	|	ВтДанныеПоНоменклатуре.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	ВтДанныеПоНоменклатуре.Распоряжение                 КАК Распоряжение,
	|	ВтДанныеПоНоменклатуре.Назначение                   КАК Назначение,
	|	ВтДанныеПоНоменклатуре.НачалоПроизводства           КАК НачалоПроизводства,
	|
	|	ВыходныеИзделия.НомерСтроки                         КАК НомерСтроки,
	|
	|	ВыходныеИзделия.ВидНоменклатуры                     КАК ВидНоменклатуры,
	|	&ВыходныеИзделияИсточникНоменклатуры                КАК Номенклатура,
	|	&ВыходныеИзделияИсточникХарактеристики              КАК Характеристика,
	|	
	|	&ВыходныеИзделияИсточникХарактеристикиЦО            КАК ХарактеристикаЦО,
	|	&ВыходныеИзделияИсточникСерииЦО                     КАК СерияЦО,
	|	&ВыходныеИзделияИсточникУпаковкиЦО                  КАК УпаковкаЦО,
	|	
	|	ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать)                   КАК СпособПолученияМатериала,
	|	ЛОЖЬ                                                                                          КАК Обособленно,
	|
	|	ВыходныеИзделия.Этап                                КАК Этап,
	|	ВыходныеИзделия.Операция                            КАК Операция,
	|
	|	ВЫРАЗИТЬ(ВыходныеИзделия.КоличествоУпаковок * ЕСТЬNULL(&ВыходныеИзделияКоэффициентУпаковки, 1) КАК ЧИСЛО(15,3)) КАК Количество,
	|	ВыходныеИзделия.КоличествоУпаковок                                                                              КАК КоличествоУпаковок,
	|
	|	ВыходныеИзделия.Упаковка                            КАК Упаковка,
	|	ЕСТЬNULL(&ВыходныеИзделияКоэффициентУпаковки, 1)    КАК КоэффициентУпаковки,
	|
	|	ВыходныеИзделия.ПроцентБрака                        КАК ПроцентБрака,
	|
	|	ВыходныеИзделия.ДоляСтоимости                       КАК ДоляСтоимости,
	|	НЕОПРЕДЕЛЕНО                                        КАК СтатьяКалькуляции,
	|	ВыходныеИзделия.Ссылка.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	ВыходныеИзделия.ОбработатьПоСпецификации            КАК ОбработатьПоСпецификации,
	|	ВыходныеИзделия.Спецификация                        КАК ОбработатьПоСпецификацииСпецификация,
	|	ВыходныеИзделия.СпособАвтовыбораНоменклатуры        КАК СпособАвтовыбораНоменклатуры,
	|	ВыходныеИзделия.СпособАвтовыбораХарактеристики      КАК СпособАвтовыбораХарактеристики,
	|	ВыходныеИзделия.СвойствоСодержащееНоменклатуру      КАК СвойствоСодержащееНоменклатуру,
	|	ВыходныеИзделия.АлгоритмАвтовыбораХарактеристики    КАК АлгоритмАвтовыбораХарактеристики,
	|	ВыходныеИзделия.АлгоритмРасчетаКоличества           КАК АлгоритмРасчетаКоличества,
	|	ВыходныеИзделия.ОписаниеИзделия                     КАК ОписаниеИзделия,
	|	ВыходныеИзделия.КлючСвязи                           КАК КлючСвязи,
	|
	|	ВЫБОР КОГДА ВыходныеИзделия.Ссылка.ТипПроизводственногоПроцесса В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|		И (ВыходныеИзделия.НомерСтроки = 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                               КАК ЭтоОсновноеИзделие,
	|
	|	ВЫБОР КОГДА ВыходныеИзделия.Ссылка.ТипПроизводственногоПроцесса В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|		И (ВыходныеИзделия.Номенклатура = ВтДанныеПоНоменклатуре.Номенклатура
	|			ИЛИ ВтДанныеПоНоменклатуре.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ВыходныеИзделия.НомерСтроки = 1
	|			ИЛИ ВыходныеИзделия.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ВыходныеИзделия.ВидНоменклатуры = ВтДанныеПоНоменклатуре.Номенклатура.ВидНоменклатуры
	|				И ВыходныеИзделия.НомерСтроки = 1)
	|		И (ВтДанныеПоНоменклатуре.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И ВыходныеИзделия.НомерСтроки = 1
	|			ИЛИ ВыходныеИзделия.Характеристика = ВтДанныеПоНоменклатуре.Характеристика
	|			ИЛИ ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                               КАК СоответствуетДаннымПоНоменклатуре,
	|
	|	ВыходныеИзделия.Ссылка.ВариантПромежуточногоВыпуска КАК ВариантПромежуточногоВыпуска
	|
	|ПОМЕСТИТЬ ВтИзделия
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО ВыходныеИзделия.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1                                               КАК ВидИзделия,
	|	ВтДанныеПоНоменклатуре.Идентификатор            КАК Идентификатор,
	|	ВтДанныеПоНоменклатуре.Спецификация             КАК Спецификация,
	|	ВтДанныеПоНоменклатуре.ПодразделениеДиспетчер   КАК ПодразделениеДиспетчер,
	|	ВтДанныеПоНоменклатуре.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель,
	|	ВтДанныеПоНоменклатуре.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	ВтДанныеПоНоменклатуре.Распоряжение             КАК Распоряжение,
	|	ВтДанныеПоНоменклатуре.Назначение               КАК Назначение,
	|	ВтДанныеПоНоменклатуре.НачалоПроизводства       КАК НачалоПроизводства,
	|
	|	0                                               КАК НомерСтроки,
	|
	|	ВходныеИзделия.ОсновноеИзделиеВидНоменклатуры   КАК ВидНоменклатуры,
	|	&ВходныеИзделияИсточникНоменклатуры             КАК Номенклатура,
	|	&ВходныеИзделияИсточникХарактеристики           КАК Характеристика,
	|
	|	НЕОПРЕДЕЛЕНО                                    КАК ХарактеристикаЦО,
	|	НЕОПРЕДЕЛЕНО                                    КАК СерияЦО,
	|	НЕОПРЕДЕЛЕНО                                    КАК УпаковкаЦО,
	|	
	|	ВходныеИзделия.ОсновноеИзделиеХарактеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать)                                 КАК СпособПолученияМатериала,
	|	ЛОЖЬ                                                                                                        КАК Обособленно,
	|
	|	ВходныеИзделия.ОсновноеИзделиеЭтап КАК Этап,
	|	НЕОПРЕДЕЛЕНО                       КАК Операция,
	|
	|	ВЫРАЗИТЬ(ВходныеИзделия.ОсновноеИзделиеКоличествоУпаковок * ЕСТЬNULL(&ВходныеИзделияКоэффициентУпаковки, 1) КАК ЧИСЛО(15,3)) КАК Количество,
	|	ВходныеИзделия.ОсновноеИзделиеКоличествоУпаковок                                                                             КАК КоличествоУпаковок,
	|
	|	ВходныеИзделия.ОсновноеИзделиеУпаковка          КАК Упаковка,
	|	ЕСТЬNULL(&ВходныеИзделияКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|
	|	0                                               КАК ПроцентБрака,
	|
	|	1                                               КАК ДоляСтоимости,
	|	НЕОПРЕДЕЛЕНО                                    КАК СтатьяКалькуляции,
	|	ВходныеИзделия.ТипПроизводственногоПроцесса     КАК ТипПроизводственногоПроцесса,
	|	ЛОЖЬ                                            КАК ОбработатьПоСпецификации,
	|	НЕОПРЕДЕЛЕНО                                    КАК ОбработатьПоСпецификацииСпецификация,
	|	НЕОПРЕДЕЛЕНО                                    КАК СпособАвтовыбораНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                    КАК СпособАвтовыбораХарактеристики,
	|	НЕОПРЕДЕЛЕНО                                    КАК СвойствоСодержащееНоменклатуру,
	|	""""                                            КАК АлгоритмАвтовыбораХарактеристики,
	|	""""                                            КАК АлгоритмРасчетаКоличества,
	|	""""                                            КАК ОписаниеИзделия,
	|	&ПустойКлючСвязи                                КАК КлючСвязи,
	|
	|	ВходныеИзделия.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка) КАК ЭтоОсновноеИзделие,
	|
	|	ВЫБОР КОГДА ВходныеИзделия.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			И (ВходныеИзделия.ОсновноеИзделиеНоменклатура = ВтДанныеПоНоменклатуре.Номенклатура
	|				ИЛИ ВтДанныеПоНоменклатуре.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ИЛИ ВходныеИзделия.ОсновноеИзделиеНоменклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ВходныеИзделия.ОсновноеИзделиеВидНоменклатуры = ВтДанныеПоНоменклатуре.Номенклатура.ВидНоменклатуры)
	|			И (ВтДанныеПоНоменклатуре.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ИЛИ ВходныеИзделия.ОсновноеИзделиеХарактеристика = ВтДанныеПоНоменклатуре.Характеристика
	|				ИЛИ ВходныеИзделия.ОсновноеИзделиеХарактеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                           КАК СоответствуетДаннымПоНоменклатуре,
	|
	|	ВходныеИзделия.ВариантПромежуточногоВыпуска     КАК ВариантПромежуточногоВыпуска
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК ВходныеИзделия
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО ВходныеИзделия.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
	|			И ВходныеИзделия.ТипПроизводственногоПроцесса В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                   КАК ВидИзделия,
	|	ВтДанныеПоНоменклатуре.Идентификатор                КАК Идентификатор,
	|	ВтДанныеПоНоменклатуре.Спецификация                 КАК Спецификация,
	|	ВтДанныеПоНоменклатуре.ПодразделениеДиспетчер       КАК ПодразделениеДиспетчер,
	|	ВтДанныеПоНоменклатуре.ПодразделениеИсполнитель     КАК ПодразделениеИсполнитель,
	|	ВтДанныеПоНоменклатуре.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	ВтДанныеПоНоменклатуре.Распоряжение                 КАК Распоряжение,
	|	ВтДанныеПоНоменклатуре.Назначение                   КАК Назначение,
	|	ВтДанныеПоНоменклатуре.НачалоПроизводства           КАК НачалоПроизводства,
	|
	|	ВозвратныеОтходы.НомерСтроки                        КАК НомерСтроки,
	|
	|	ВозвратныеОтходы.Номенклатура.ВидНоменклатуры       КАК ВидНоменклатуры,
	|	ВозвратныеОтходы.Номенклатура                       КАК Номенклатура,
	|	ВозвратныеОтходы.Характеристика                     КАК Характеристика,
	|	
	|	НЕОПРЕДЕЛЕНО                                        КАК ХарактеристикаЦО,
	|	НЕОПРЕДЕЛЕНО                                        КАК СерияЦО,
	|	НЕОПРЕДЕЛЕНО                                        КАК УпаковкаЦО,
	|	
	|	ВозвратныеОтходы.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать)                    КАК СпособПолученияМатериала,
	|	ЛОЖЬ                                                                                           КАК Обособленно,
	|
	|	ВозвратныеОтходы.Этап                               КАК Этап,
	|	ВозвратныеОтходы.Операция                           КАК Операция,
	|
	|	ВЫРАЗИТЬ(ВозвратныеОтходы.КоличествоУпаковок * ЕСТЬNULL(&ВозвратныеОтходыКоэффициентУпаковки, 1) КАК ЧИСЛО(15,3)) КАК Количество,
	|	ВозвратныеОтходы.КоличествоУпаковок                                                                               КАК КоличествоУпаковок,
	|
	|	ВозвратныеОтходы.Упаковка                            КАК Упаковка,
	|	ЕСТЬNULL(&ВозвратныеОтходыКоэффициентУпаковки, 1)    КАК КоэффициентУпаковки,
	|
	|	0                                                    КАК ПроцентБрака,
	|
	|	1                                                    КАК ДоляСтоимости,
	|	ВозвратныеОтходы.СтатьяКалькуляции                   КАК СтатьяКалькуляции,
	|	ВозвратныеОтходы.Ссылка.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	ВозвратныеОтходы.ОбработатьПоСпецификации            КАК ОбработатьПоСпецификации,
	|	ВозвратныеОтходы.Спецификация                        КАК ОбработатьПоСпецификацииСпецификация,
	|	ВозвратныеОтходы.СпособАвтовыбораНоменклатуры        КАК СпособАвтовыбораНоменклатуры,
	|	ВозвратныеОтходы.СпособАвтовыбораХарактеристики      КАК СпособАвтовыбораХарактеристики,
	|	ВозвратныеОтходы.СвойствоСодержащееНоменклатуру      КАК СвойствоСодержащееНоменклатуру,
	|	ВозвратныеОтходы.АлгоритмАвтовыбораХарактеристики    КАК АлгоритмАвтовыбораХарактеристики,
	|	ВозвратныеОтходы.АлгоритмРасчетаКоличества           КАК АлгоритмРасчетаКоличества,
	|	ВозвратныеОтходы.ОписаниеИзделия                     КАК ОписаниеИзделия,
	|	ВозвратныеОтходы.КлючСвязи                           КАК КлючСвязи,
	|
	|	ЛОЖЬ                                                 КАК ЭтоОсновноеИзделие,
	|
	|	ВЫБОР КОГДА ВозвратныеОтходы.Номенклатура = ВтДанныеПоНоменклатуре.Номенклатура
	|				И ВозвратныеОтходы.Характеристика = ВтДанныеПоНоменклатуре.Характеристика
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                КАК СоответствуетДаннымПоНоменклатуре,
	|
	|	ВозвратныеОтходы.Ссылка.ВариантПромежуточногоВыпуска КАК ВариантПромежуточногоВыпуска
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ВозвратныеОтходы
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО ВозвратныеОтходы.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация, ЭтоОсновноеИзделие
	|
	|";
	
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВыходныеИзделия.Упаковка",
		"ВЫРАЗИТЬ(&ВыходныеИзделияИсточникНоменклатуры КАК Справочник.Номенклатура)");
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ВыходныеИзделияКоэффициентУпаковки",
		ТекстЗапросаКоэффициентУпаковки);
	
	ПараметрыПодстановкиВыходныеИзделия = ПараметрыПодстановкиНоменклатураХарактеристикаОсновногоИзделия(
		"ВыходныеИзделия",
		"ВидНоменклатуры",
		"Номенклатура",
		"Характеристика");

	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	
	Если ИспользуетсяЦенообразование25 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникХарактеристикиЦО", 
											ТекстПоляВыражениеХарактеристикаЦООсновногоИзделия("ВыходныеИзделия"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникСерииЦО",
											"ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникУпаковкиЦО",
											ТекстПоляВыражениеУпаковкаЦООсновногоИзделия("ВыходныеИзделия"));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникХарактеристикиЦО", "НЕОПРЕДЕЛЕНО");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникСерииЦО",          "НЕОПРЕДЕЛЕНО");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникУпаковкиЦО",       "НЕОПРЕДЕЛЕНО");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникНоменклатуры",   ПараметрыПодстановкиВыходныеИзделия.ИсточникНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникХарактеристики", ПараметрыПодстановкиВыходныеИзделия.ИсточникХарактеристика);
	
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВходныеИзделия.ОсновноеИзделиеУпаковка",
		"ВЫРАЗИТЬ(&ВходныеИзделияИсточникНоменклатуры КАК Справочник.Номенклатура)");
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ВходныеИзделияКоэффициентУпаковки",
		ТекстЗапросаКоэффициентУпаковки);
	
	ПараметрыПодстановкиВходныеИзделия  = ПараметрыПодстановкиНоменклатураХарактеристикаОсновногоИзделия(
		"ВходныеИзделия",
		"ОсновноеИзделиеВидНоменклатуры",
		"ОсновноеИзделиеНоменклатура",
		"ОсновноеИзделиеХарактеристика");
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВходныеИзделияИсточникНоменклатуры",   ПараметрыПодстановкиВходныеИзделия.ИсточникНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВходныеИзделияИсточникХарактеристики", ПараметрыПодстановкиВходныеИзделия.ИсточникХарактеристика);
	
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВозвратныеОтходы.Упаковка",
		"ВЫРАЗИТЬ(ВозвратныеОтходы.Номенклатура КАК Справочник.Номенклатура)");
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ВозвратныеОтходыКоэффициентУпаковки",
		ТекстЗапросаКоэффициентУпаковки);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете);
	
	СписокТаблицДляУдаления.Добавить("ВтИзделия");
	
	#КонецОбласти

//++ НЕ УТКА
	
	#Область ПромежуточныйВыпуск
	
	Если ПараметрыВыборки.ПолучитьПромежуточныйВыпуск Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьПромежуточныйВыпуск
		|ИЗ
		|	ВТИзделия КАК Изделия
		|ГДЕ
		|	Изделия.ВариантПромежуточногоВыпуска В (
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыПромежуточногоВыпуска.ТоварДругогоКачества),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыПромежуточногоВыпуска.НастраиваетсяВручную))";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ПромежуточныйВыпуск");
		
	КонецЕсли;
	
	#КонецОбласти
	
//-- НЕ УТКА
	
	УстановитьПривилегированныйРежим(Истина);
	Таблицы = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса, , Ложь, Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстыЗапроса = Новый СписокЗначений;
	
//++ НЕ УТКА

	#Область ВтПромежуточныйВыпуск
	
	ЕстьПромежуточныйВыпуск = Ложь;
	
	Если ПараметрыВыборки.ПолучитьПромежуточныйВыпуск Тогда
		ЕстьПромежуточныйВыпуск = Таблицы.ПромежуточныйВыпуск.Количество() > 0;
	КонецЕсли;
	
	Если ЕстьПромежуточныйВыпуск Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Изделия.Номенклатура                            КАК Номенклатура,
		|	Изделия.Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	Изделия.Номенклатура.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
		|	Изделия.Номенклатура.ИспользоватьУпаковки       КАК ИспользоватьУпаковки,
		|	Изделия.ВидНоменклатуры                         КАК ВидНоменклатуры,
		|	Изделия.Характеристика                          КАК Характеристика,
		|	Изделия.Характеристика.Наименование             КАК ХарактеристикаНаименование
		|ПОМЕСТИТЬ ВтИзделияКПодборуПромежуточногоВыпуска
		|ИЗ
		|	ВтИзделия КАК Изделия
		|ГДЕ
		|	Изделия.ЭтоОсновноеИзделие
		|	И (Изделия.ВариантПромежуточногоВыпуска = ЗНАЧЕНИЕ(Перечисление.ВариантыПромежуточногоВыпуска.ТоварДругогоКачества)
		|		ИЛИ ИСТИНА В (
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Справочник.РесурсныеСпецификации.ПромежуточныйВыпуск КАК Т
		|			ГДЕ
		|				Т.Ссылка = Изделия.Спецификация
		|				И Т.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)))
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ВидНоменклатуры,
		|	ИспользованиеХарактеристик,
		|	ЕдиницаИзмерения,
		|	ИспользоватьУпаковки";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВтИзделияКПодборуПромежуточногоВыпуска");
		
		//
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТоварыДругогоКачества.Номенклатура                                КАК Номенклатура,
		|	ТоварыДругогоКачества.НоменклатураБрак                            КАК НоменклатураБрак,
		|	ТоварыДругогоКачества.НоменклатураБрак.ВидНоменклатуры            КАК НоменклатураБракВидНоменклатуры,
		|	ТоварыДругогоКачества.НоменклатураБрак.ИспользованиеХарактеристик КАК НоменклатураБракИспользованиеХарактеристик,
		|	ТоварыДругогоКачества.НоменклатураБрак.ЕдиницаИзмерения           КАК НоменклатураБракЕдиницаИзмерения,
		|	ТоварыДругогоКачества.НоменклатураБрак.ИспользоватьУпаковки       КАК НоменклатураБракИспользоватьУпаковки
		|ПОМЕСТИТЬ ВТТоварыДругогоКачества
		|ИЗ
		|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
		|ГДЕ
		|	ТоварыДругогоКачества.Номенклатура В (
		|		ВЫБРАТЬ
		|			Т.Номенклатура
		|		ИЗ
		|			ВтИзделияКПодборуПромежуточногоВыпуска КАК Т)
		|	И ТоварыДругогоКачества.ГрадацияКачества = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ОграниченноГоден)
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	НоменклатураБракВидНоменклатуры,
		|	НоменклатураБракИспользованиеХарактеристик,
		|	НоменклатураБракЕдиницаИзмерения,
		|	НоменклатураБракИспользоватьУпаковки";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВтТоварыДругогоКачества");
		
		//
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Изделия.Номенклатура                   КАК Номенклатура,
		|	Изделия.Характеристика                 КАК Характеристика,
		|	ТоварыДругогоКачества.НоменклатураБрак КАК НоменклатураПромежуточногоВыпуска,
		|	ВЫБОР
		|		КОГДА Изделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА Изделия.Характеристика
		|		КОГДА Изделия.ИспользованиеХарактеристик В (
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|			ТОГДА Изделия.Характеристика
		|		КОГДА ХарактеристикиТоваровДругогоКачества.Ссылка ЕСТЬ НЕ NULL
		|			ТОГДА ХарактеристикиТоваровДругогоКачества.Ссылка
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                  КАК ХарактеристикаПромежуточногоВыпуска,
		|	АВТОНОМЕРЗАПИСИ()                      КАК Порядок
		|ПОМЕСТИТЬ ВтПодборПромежуточногоВыпуска
		|ИЗ
		|	ВтИзделияКПодборуПромежуточногоВыпуска КАК Изделия
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоварыДругогоКачества КАК ТоварыДругогоКачества
		|	ПО Изделия.Номенклатура = ТоварыДругогоКачества.Номенклатура
		|		И Изделия.ВидНоменклатуры = ТоварыДругогоКачества.НоменклатураБракВидНоменклатуры
		|		И Изделия.ИспользованиеХарактеристик = ТоварыДругогоКачества.НоменклатураБракИспользованиеХарактеристик
		|		И Изделия.ЕдиницаИзмерения = ТоварыДругогоКачества.НоменклатураБракЕдиницаИзмерения
		|		И Изделия.ИспользоватьУпаковки = ТоварыДругогоКачества.НоменклатураБракИспользоватьУпаковки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиТоваровДругогоКачества
		|	ПО Изделия.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И Изделия.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|		И ТоварыДругогоКачества.НоменклатураБрак = ХарактеристикиТоваровДругогоКачества.Владелец
		|		И Изделия.ХарактеристикаНаименование = ХарактеристикиТоваровДругогоКачества.Наименование
		|		И НЕ ХарактеристикиТоваровДругогоКачества.ПометкаУдаления
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВтПодборПромежуточногоВыпуска");
		
		//
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПромежуточныйВыпуск.Номенклатура                        КАК Номенклатура,
		|	ПромежуточныйВыпуск.Характеристика                      КАК Характеристика,
		|	ПромежуточныйВыпуск.НоменклатураПромежуточногоВыпуска   КАК НоменклатураПромежуточногоВыпуска,
		|	ПромежуточныйВыпуск.ХарактеристикаПромежуточногоВыпуска КАК ХарактеристикаПромежуточногоВыпуска
		|ПОМЕСТИТЬ ВтНоменклатураПромежуточногоВыпускаПодобранная
		|ИЗ
		|	ВтПодборПромежуточногоВыпуска КАК ПромежуточныйВыпуск
		|ГДЕ
		|	ПромежуточныйВыпуск.Порядок В (
		|		ВЫБРАТЬ
		|			МИНИМУМ(Т.Порядок) КАК Порядок
		|		ИЗ
		|			ВтПодборПромежуточногоВыпуска КАК Т
		|		ГДЕ
		|			Т.Номенклатура = ПромежуточныйВыпуск.Номенклатура
		|			И Т.Характеристика = ПромежуточныйВыпуск.Характеристика)
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете);
		СписокТаблицДляУдаления.Добавить("ВтНоменклатураПромежуточногоВыпускаПодобранная");
		
		//
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Изделия.Номенклатура                                КАК Номенклатура,
		|	Изделия.Характеристика                              КАК Характеристика,
		|	ЕСТЬNULL(ПодобраннаяНоменклатура.НоменклатураПромежуточногоВыпуска,
		|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураПромежуточногоВыпуска,
		|	ЕСТЬNULL(ПодобраннаяНоменклатура.ХарактеристикаПромежуточногоВыпуска,
		|		Изделия.Характеристика)                         КАК ХарактеристикаПромежуточногоВыпуска,
		|	Изделия.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И Изделия.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|		И ЕСТЬNULL(ПодобраннаяНоменклатура.ХарактеристикаПромежуточногоВыпуска, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК СоздатьХарактеристику
		|ИЗ
		|	ВтИзделияКПодборуПромежуточногоВыпуска КАК Изделия
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтНоменклатураПромежуточногоВыпускаПодобранная КАК ПодобраннаяНоменклатура
		|	ПО Изделия.Номенклатура = ПодобраннаяНоменклатура.Номенклатура
		|		И Изделия.Характеристика = ПодобраннаяНоменклатура.Характеристика
		|ГДЕ
		|	ПодобраннаяНоменклатура.НоменклатураПромежуточногоВыпуска ЕСТЬ NULL
		|	ИЛИ Изделия.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И Изделия.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|		И ЕСТЬNULL(ПодобраннаяНоменклатура.ХарактеристикаПромежуточногоВыпуска, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатыЗапроса = ОбщегоНазначенияУТ.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса, Ложь, Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
		КэшСсылокПромежуточногоВыпуска = Новый Соответствие;
		НоменклатураПромежуточногоВыпускаНовая = РезультатыЗапроса[ТекстыЗапроса.Количество() - 1].Выгрузить();
		Для каждого Строка Из НоменклатураПромежуточногоВыпускаНовая Цикл
			СоздатьПромежуточнуюНоменклатуруХарактеристику(Строка, КэшСсылокПромежуточногоВыпуска);
		КонецЦикла;
		
		ТекстыЗапроса = Новый СписокЗначений;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПромежуточныйВыпуск.Номенклатура                        КАК Номенклатура,
		|	ПромежуточныйВыпуск.Характеристика                      КАК Характеристика,
		|	ПромежуточныйВыпуск.НоменклатураПромежуточногоВыпуска   КАК НоменклатураПромежуточногоВыпуска,
		|	ПромежуточныйВыпуск.ХарактеристикаПромежуточногоВыпуска КАК ХарактеристикаПромежуточногоВыпуска
		|ПОМЕСТИТЬ ВтНоменклатураПромежуточногоВыпускаНовая
		|ИЗ
		|	&НоменклатураПромежуточногоВыпускаНовая КАК ПромежуточныйВыпуск
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВтНоменклатураПромежуточногоВыпускаНовая");
		Запрос.УстановитьПараметр("НоменклатураПромежуточногоВыпускаНовая", НоменклатураПромежуточногоВыпускаНовая);
		
		//
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПромежуточныйВыпуск.Ссылка              КАК Ссылка,
		|	ПромежуточныйВыпуск.НомерСтроки         КАК НомерСтроки,
		|	ПромежуточныйВыпуск.ЭтапОтправитель     КАК ЭтапОтправитель,
		|	ПромежуточныйВыпуск.ОперацияОтправитель КАК ОперацияОтправитель,
		|	ПромежуточныйВыпуск.ЭтапПолучатель      КАК ЭтапПолучатель,
		|	ПромежуточныйВыпуск.ОперацияПолучатель  КАК ОперацияПолучатель,
		|	ПромежуточныйВыпуск.Номенклатура        КАК Номенклатура,
		|	ПромежуточныйВыпуск.Характеристика      КАК Характеристика,
		|	ПромежуточныйВыпуск.КлючСвязи           КАК КлючСвязи
		|ПОМЕСТИТЬ ВтПромежуточныйВыпуск
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ПромежуточныйВыпуск КАК ПромежуточныйВыпуск
		|ГДЕ
		|	ПромежуточныйВыпуск.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Спецификация ИЗ ВтДанныеПоНоменклатуре КАК Т)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РесурсныеСпецификации.Ссылка                                 КАК Ссылка,
		|	0                                                            КАК НомерСтроки,
		|	ЭтапОтправитель.Ссылка                                       КАК ЭтапОтправитель,
		|	ЕСТЬNULL(ОперацияОтправитель.Ссылка, ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка)) КАК ОперацияОтправитель,
		|	ЭтапПолучатель.Ссылка                                        КАК ЭтапПолучатель,
		|	ЕСТЬNULL(ОперацияПолучатель.Ссылка, ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка))  КАК ОперацияПолучатель,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ЭтапОтправитель.Ссылка)              КАК КлючСвязи
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапОтправитель
		|	ПО РесурсныеСпецификации.Ссылка = ЭтапОтправитель.Владелец
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапПолучатель
		|	ПО РесурсныеСпецификации.Ссылка = ЭтапПолучатель.Владелец
		|		И ЭтапОтправитель.НомерСледующегоЭтапа = ЭтапПолучатель.НомерЭтапа
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК ОперацияОтправитель
		|	ПО ЭтапОтправитель.Ссылка = ОперацияОтправитель.Владелец
		|		И ОперацияОтправитель.НомерСледующейОперации = 0
		|		И НЕ ОперацияОтправитель.ПометкаУдаления
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК ОперацияПолучатель
		|	ПО ЭтапПолучатель.Ссылка = ОперацияПолучатель.Владелец
		|		И ОперацияПолучатель.НомерОперации = 1
		|		И НЕ ОперацияПолучатель.ПометкаУдаления
		|ГДЕ
		|	РесурсныеСпецификации.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Спецификация ИЗ ВтДанныеПоНоменклатуре КАК Т)
		|	И РесурсныеСпецификации.ВариантПромежуточногоВыпуска = ЗНАЧЕНИЕ(Перечисление.ВариантыПромежуточногоВыпуска.ТоварДругогоКачества)
		|	И НЕ ЭтапОтправитель.ПометкаУдаления
		|	И НЕ ЭтапПолучатель.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВтПромежуточныйВыпуск");
		
	КонецЕсли;
	
	#КонецОбласти

//-- НЕ УТКА

	#Область ВтСпособыПолученияМатериалов
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтСпособыПолученияМатериалов") = Неопределено Тогда
	
		ТекстыЗапроса.Добавить(ОбеспечениеПроизводства.ТекстЗапросаВТСпособыПолученияМатериаловПустая());
		СписокТаблицДляУдаления.Добавить("ВтСпособыПолученияМатериалов");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВтФорматыСкладов
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтФорматыСкладов") = Неопределено Тогда
	
		ТекстыЗапроса.Добавить(Справочники.ФорматыМагазинов.ТекстЗапросаВтФорматыСкладов(Ложь));
		СписокТаблицДляУдаления.Добавить("ВтФорматыСкладов");
	
	КонецЕсли;
	
	#КонецОбласти
	
//++ НЕ УТКА
	
	#Область ВтВремяРаботыВидовРабочихЦентров
	
	Если ПереченьДанных.Найти("ВидыРабочихЦентров") <> Неопределено
		ИЛИ ПереченьДанных.Найти("АльтернативныеВидыРабочихЦентров") <> Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка КАК Этап,
		|	ТабличнаяЧасть.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
		|	ВЫБОР
		|		КОГДА ВидыРЦ.ИспользуютсяВариантыНаладки
		|			ТОГДА ВариантыНаладки.ВремяРаботы
		|		ИНАЧЕ ВидыРЦ.ВремяРаботы
		|	КОНЕЦ КАК ВремяРаботы,
		|	ВЫБОР
		|		КОГДА ВидыРЦ.ИспользуютсяВариантыНаладки
		|			ТОГДА ВариантыНаладки.ЕдиницаИзмерения
		|		ИНАЧЕ ВидыРЦ.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ВидыРЦ.ИспользуютсяВариантыНаладки
		|			ТОГДА ВЫБОР ВариантыНаладки.ЕдиницаИзмерения
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|						ТОГДА ВариантыНаладки.ВремяРаботы * 60
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|						ТОГДА ВариантыНаладки.ВремяРаботы * 3600
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|						ТОГДА ВариантыНаладки.ВремяРаботы * 86400
		|					ИНАЧЕ ВариантыНаладки.ВремяРаботы
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР ВидыРЦ.ЕдиницаИзмерения
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|					ТОГДА ВидыРЦ.ВремяРаботы * 60
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|					ТОГДА ВидыРЦ.ВремяРаботы * 3600
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|					ТОГДА ВидыРЦ.ВремяРаботы * 86400
		|				ИНАЧЕ ВидыРЦ.ВремяРаботы
		|			КОНЕЦ
		|	КОНЕЦ КАК ВремяРаботыВСекундах,
		|	ЭтапыПроизводства.ПорядокРаботыВидовРабочихЦентров = ЗНАЧЕНИЕ(Перечисление.ПорядокРаботыВидовРабочихЦентров.Одновременно) КАК ОдновременнаяРабота
		|
		|ПОМЕСТИТЬ ВТСинхроннаяРабота
		|ИЗ
		|	Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ТабличнаяЧасть
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ПО ТабличнаяЧасть.Ссылка = ЭтапыПроизводства.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРабочихЦентров КАК ВидыРЦ
		|		ПО ТабличнаяЧасть.ВидРабочегоЦентра = ВидыРЦ.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыНаладки КАК ВариантыНаладки
		|		ПО ТабличнаяЧасть.ВариантНаладки = ВариантыНаладки.Ссылка
		|ГДЕ
		|	ЭтапыПроизводства.Владелец В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Спецификация ИЗ ВтДанныеПоНоменклатуре КАК Т)
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления
		|	И ВидыРЦ.ПараллельнаяЗагрузка
		|	И ВидыРЦ.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка КАК Этап,
		|	ТабличнаяЧасть.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
		|	ВЫБОР
		|		КОГДА ВидыРЦ.ИспользуютсяВариантыНаладки
		|			ТОГДА ВариантыНаладки.ВремяРаботы
		|		ИНАЧЕ ВидыРЦ.ВремяРаботы
		|	КОНЕЦ КАК ВремяРаботы,
		|	ВЫБОР
		|		КОГДА ВидыРЦ.ИспользуютсяВариантыНаладки
		|			ТОГДА ВариантыНаладки.ЕдиницаИзмерения
		|		ИНАЧЕ ВидыРЦ.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ВидыРЦ.ИспользуютсяВариантыНаладки
		|			ТОГДА ВЫБОР ВариантыНаладки.ЕдиницаИзмерения
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|						ТОГДА ВариантыНаладки.ВремяРаботы * 60
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|						ТОГДА ВариантыНаладки.ВремяРаботы * 3600
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|						ТОГДА ВариантыНаладки.ВремяРаботы * 86400
		|					ИНАЧЕ ВариантыНаладки.ВремяРаботы
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР ВидыРЦ.ЕдиницаИзмерения
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|					ТОГДА ВидыРЦ.ВремяРаботы * 60
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|					ТОГДА ВидыРЦ.ВремяРаботы * 3600
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|					ТОГДА ВидыРЦ.ВремяРаботы * 86400
		|				ИНАЧЕ ВидыРЦ.ВремяРаботы
		|			КОНЕЦ
		|	КОНЕЦ КАК ВремяРаботыВСекундах,
		|	ЭтапыПроизводства.ПорядокРаботыВидовРабочихЦентров = ЗНАЧЕНИЕ(Перечисление.ПорядокРаботыВидовРабочихЦентров.Одновременно) КАК ОдновременнаяРабота
		|
		|ИЗ
		|	Справочник.ЭтапыПроизводства.АльтернативныеВидыРабочихЦентров КАК ТабличнаяЧасть
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ПО ТабличнаяЧасть.Ссылка = ЭтапыПроизводства.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРабочихЦентров КАК ВидыРЦ
		|		ПО ТабличнаяЧасть.ВидРабочегоЦентра = ВидыРЦ.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыНаладки КАК ВариантыНаладки
		|		ПО ТабличнаяЧасть.ВариантНаладки = ВариантыНаладки.Ссылка
		|ГДЕ
		|	ЭтапыПроизводства.Владелец В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Спецификация ИЗ ВтДанныеПоНоменклатуре КАК Т)
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления
		|	И ВидыРЦ.ПараллельнаяЗагрузка
		|	И ВидыРЦ.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Этап,
		|	ВидРабочегоЦентра";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВТСинхроннаяРабота");
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТСинхроннаяРабота.Этап КАК Этап,
		|	МАКСИМУМ(ВТСинхроннаяРабота.ВремяРаботыВСекундах) КАК ВремяРаботыВСекундах
		|ПОМЕСТИТЬ ВТМаксВремяРаботы
		|ИЗ
		|	ВТСинхроннаяРабота КАК ВТСинхроннаяРабота
		|ГДЕ
		|	ВТСинхроннаяРабота.ОдновременнаяРабота
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСинхроннаяРабота.Этап
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Этап,
		|	ВремяРаботыВСекундах";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВТМаксВремяРаботы");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВТСинхроннаяРабота.Этап КАК Этап,
		|	МАКСИМУМ(ВТСинхроннаяРабота.ВидРабочегоЦентра) КАК ВидРабочегоЦентра
		|ПОМЕСТИТЬ ВТВидыРЦ
		|ИЗ
		|	ВТСинхроннаяРабота КАК ВТСинхроннаяРабота
		|ГДЕ
		|	ВТСинхроннаяРабота.ОдновременнаяРабота
		|	И (ВТСинхроннаяРабота.Этап, ВТСинхроннаяРабота.ВремяРаботыВСекундах) В
		|			(ВЫБРАТЬ
		|				ВТМаксВремяРаботы.Этап КАК Этап,
		|				ВТМаксВремяРаботы.ВремяРаботыВСекундах КАК ВремяРаботыВСекундах
		|			ИЗ
		|				ВТМаксВремяРаботы КАК ВТМаксВремяРаботы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСинхроннаяРабота.Этап";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВТВидыРЦ");
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТСинхроннаяРабота.Этап КАК Этап,
		|	ВТСинхроннаяРабота.ВремяРаботы КАК ВремяРаботы,
		|	ВТСинхроннаяРабота.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ВТСинхроннаяОдновременнаяРабота
		|ИЗ
		|	ВТСинхроннаяРабота КАК ВТСинхроннаяРабота
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыРЦ КАК ВТВидыРЦ
		|		ПО ВТСинхроннаяРабота.Этап = ВТВидыРЦ.Этап
		|			И ВТСинхроннаяРабота.ВидРабочегоЦентра = ВТВидыРЦ.ВидРабочегоЦентра
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Этап";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВТСинхроннаяОдновременнаяРабота");
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка КАК Этап,
		|	ТабличнаяЧасть.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
		|	ВЫБОР
		|		КОГДА ВТСинхроннаяРабота.Этап ЕСТЬ НЕ NULL 
		|			ТОГДА ВТСинхроннаяРабота.ВремяРаботы
		|		КОГДА ВТСинхроннаяОдновременнаяРабота.Этап ЕСТЬ НЕ NULL 
		|			ТОГДА ВТСинхроннаяОдновременнаяРабота.ВремяРаботы
		|		ИНАЧЕ ТабличнаяЧасть.ВремяРаботы
		|	КОНЕЦ КАК ВремяРаботы,
		|	ВЫБОР
		|		КОГДА ВТСинхроннаяРабота.Этап ЕСТЬ НЕ NULL 
		|			ТОГДА ВТСинхроннаяРабота.ЕдиницаИзмерения
		|		КОГДА ВТСинхроннаяОдновременнаяРабота.Этап ЕСТЬ НЕ NULL 
		|			ТОГДА ВТСинхроннаяОдновременнаяРабота.ЕдиницаИзмерения
		|		ИНАЧЕ ТабличнаяЧасть.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ВидыРЦ.ПараллельнаяЗагрузка
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РассчитатьЗанятость
		|ПОМЕСТИТЬ ВТВремяРаботыВидовРабочихЦентров
		|ИЗ
		|	Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ТабличнаяЧасть
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ПО ТабличнаяЧасть.Ссылка = ЭтапыПроизводства.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРабочихЦентров КАК ВидыРЦ
		|		ПО ТабличнаяЧасть.ВидРабочегоЦентра = ВидыРЦ.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСинхроннаяОдновременнаяРабота КАК ВТСинхроннаяОдновременнаяРабота
		|		ПО ТабличнаяЧасть.Ссылка = ВТСинхроннаяОдновременнаяРабота.Этап
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСинхроннаяРабота КАК ВТСинхроннаяРабота
		|		ПО ТабличнаяЧасть.Ссылка = ВТСинхроннаяРабота.Этап
		|			И ТабличнаяЧасть.ВидРабочегоЦентра = ВТСинхроннаяРабота.ВидРабочегоЦентра
		|			И ТабличнаяЧасть.КлючСвязи = ВТСинхроннаяРабота.КлючСвязи
		|ГДЕ
		|	ЭтапыПроизводства.Владелец В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Спецификация ИЗ ВтДанныеПоНоменклатуре КАК Т)
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка КАК Этап,
		|	ТабличнаяЧасть.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
		|	ВЫБОР
		|		КОГДА ВТСинхроннаяРабота.Этап ЕСТЬ НЕ NULL 
		|			ТОГДА ВТСинхроннаяРабота.ВремяРаботы
		|		КОГДА ВТСинхроннаяОдновременнаяРабота.Этап ЕСТЬ НЕ NULL 
		|			ТОГДА ВТСинхроннаяОдновременнаяРабота.ВремяРаботы
		|		ИНАЧЕ ТабличнаяЧасть.ВремяРаботы
		|	КОНЕЦ КАК ВремяРаботы,
		|	ВЫБОР
		|		КОГДА ВТСинхроннаяРабота.Этап ЕСТЬ НЕ NULL 
		|			ТОГДА ВТСинхроннаяРабота.ЕдиницаИзмерения
		|		КОГДА ВТСинхроннаяОдновременнаяРабота.Этап ЕСТЬ НЕ NULL 
		|			ТОГДА ВТСинхроннаяОдновременнаяРабота.ЕдиницаИзмерения
		|		ИНАЧЕ ТабличнаяЧасть.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ЛОЖЬ КАК РассчитатьЗанятость
		|ИЗ
		|	Справочник.ЭтапыПроизводства.АльтернативныеВидыРабочихЦентров КАК ТабличнаяЧасть
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ПО ТабличнаяЧасть.Ссылка = ЭтапыПроизводства.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСинхроннаяОдновременнаяРабота КАК ВТСинхроннаяОдновременнаяРабота
		|		ПО ТабличнаяЧасть.Ссылка = ВТСинхроннаяОдновременнаяРабота.Этап
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСинхроннаяРабота КАК ВТСинхроннаяРабота
		|		ПО ТабличнаяЧасть.Ссылка = ВТСинхроннаяРабота.Этап
		|			И ТабличнаяЧасть.ВидРабочегоЦентра = ВТСинхроннаяРабота.ВидРабочегоЦентра
		|			И ТабличнаяЧасть.КлючСвязи = ВТСинхроннаяРабота.КлючСвязи
		|
		|ГДЕ
		|	ЭтапыПроизводства.Владелец В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Спецификация ИЗ ВтДанныеПоНоменклатуре КАК Т)
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВТВремяРаботыВидовРабочихЦентров");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВтТехнологическиеПроцессы
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВтДанныеПоНоменклатуре.Идентификатор                                    КАК Идентификатор,
	|
	|	Операции.Спецификация                                                   КАК Спецификация,
	|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.ЭтапыПроизводства)            КАК Этап,
	|	Операции.Ссылка                                                         КАК Операция,
	|	Операции.ТехнологическийПроцесс                                         КАК ТехнологическийПроцесс,
	|	Операции.ТехнологическийПроцесс.ЕстьПараметризацияРесурсов              КАК ЕстьПараметризацияРесурсов,
	|	Операции.КоэффициентТехнологическогоПроцесса                            КАК Коэффициент,
	|
	|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.ЭтапыПроизводства).НомерЭтапа           КАК НомерЭтапа,
	|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.ЭтапыПроизводства).НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|	Операции.НомерОперации                                                            КАК НомерОперации
	|
	|ПОМЕСТИТЬ ВтТехнологическиеПроцессы
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК Операции
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО Операции.Спецификация = ВтДанныеПоНоменклатуре.Спецификация
	|
	|ГДЕ
	|	&ИспользоватьТехнологическиеПроцессы
	|	И Операции.СодержитТехнологическийПроцесс
	|	И НЕ Операции.ПометкаУдаления 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВтТехнологическиеПроцессы");
	
	#КонецОбласти
	
	#Область ВтОтборПоСвойствам
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВтДанныеПоНоменклатуре.Идентификатор            КАК Идентификатор,
	|
	|	РесурсныеСпецификацииОтборПоСвойствам.КлючСвязи КАК КлючСвязи,
	|	РесурсныеСпецификацииОтборПоСвойствам.Свойство  КАК Свойство,
	|	РесурсныеСпецификацииОтборПоСвойствам.Условие   КАК Условие,
	|	РесурсныеСпецификацииОтборПоСвойствам.Значение  КАК ЗначениеОтбор,
	|
	|	ВЫБОР
	|		КОГДА НЕ СвойстваХарактеристики.Значение ЕСТЬ NULL
	|			ТОГДА СвойстваХарактеристики.Значение
	|		КОГДА НЕ СвойстваНоменклатуры.Значение ЕСТЬ NULL
	|			ТОГДА СвойстваНоменклатуры.Значение
	|		КОГДА НЕ СвойстваНаправленияДеятельности.Значение ЕСТЬ NULL
	|			ТОГДА СвойстваНаправленияДеятельности.Значение
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(РесурсныеСпецификацииОтборПоСвойствам.Значение) = ТИП(БУЛЕВО)
	|					ТОГДА ЛОЖЬ
	|				КОГДА ТИПЗНАЧЕНИЯ(РесурсныеСпецификацииОтборПоСвойствам.Значение) = ТИП(ЧИСЛО)
	|					ТОГДА 0
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ                                           КАК ЗначениеСвойства
	|
	|ПОМЕСТИТЬ ВТОтборПоСвойствамНастройки
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ОтборПоСвойствам КАК РесурсныеСпецификацииОтборПоСвойствам
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО РесурсныеСпецификацииОтборПоСвойствам.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК СвойстваНоменклатуры
	|		ПО РесурсныеСпецификацииОтборПоСвойствам.Свойство = СвойстваНоменклатуры.Свойство
	|			И (СвойстваНоменклатуры.Ссылка = ВтДанныеПоНоменклатуре.Номенклатура)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК СвойстваХарактеристики
	|		ПО РесурсныеСпецификацииОтборПоСвойствам.Свойство = СвойстваХарактеристики.Свойство
	|			И (СвойстваХарактеристики.Ссылка = ВтДанныеПоНоменклатуре.Характеристика)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности.ДополнительныеРеквизиты КАК СвойстваНаправленияДеятельности
	|		ПО РесурсныеСпецификацииОтборПоСвойствам.Свойство = СвойстваНаправленияДеятельности.Свойство
	|			И (СвойстваНаправленияДеятельности.Ссылка = ВтДанныеПоНоменклатуре.НаправлениеДеятельности)
	|
	|ГДЕ
	|	&ИспользоватьПараметризацию
	|	И НЕ РесурсныеСпецификацииОтборПоСвойствам.КлючСвязи В (&КлючСвязиНоменклатура, &КлючСвязиХарактеристика)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтДанныеПоНоменклатуре.Идентификатор        КАК Идентификатор,
	|
	|	ЭтапыПроизводстваОтборПоСвойствам.КлючСвязи КАК КлючСвязи,
	|	ЭтапыПроизводстваОтборПоСвойствам.Свойство  КАК Свойство,
	|	ЭтапыПроизводстваОтборПоСвойствам.Условие   КАК Условие,
	|	ЭтапыПроизводстваОтборПоСвойствам.Значение  КАК ЗначениеОтбор,
	|
	|	ВЫБОР
	|		КОГДА НЕ СвойстваХарактеристики.Значение ЕСТЬ NULL
	|			ТОГДА СвойстваХарактеристики.Значение
	|		КОГДА НЕ СвойстваНоменклатуры.Значение ЕСТЬ NULL
	|			ТОГДА СвойстваНоменклатуры.Значение
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ЭтапыПроизводстваОтборПоСвойствам.Значение) = ТИП(БУЛЕВО)
	|					ТОГДА ЛОЖЬ
	|				КОГДА ТИПЗНАЧЕНИЯ(ЭтапыПроизводстваОтборПоСвойствам.Значение) = ТИП(ЧИСЛО)
	|					ТОГДА 0
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ                                       КАК ЗначениеСвойства
	|
	|ИЗ
	|	Справочник.ЭтапыПроизводства.ОтборПоСвойствам КАК ЭтапыПроизводстваОтборПоСвойствам
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ПО ЭтапыПроизводстваОтборПоСвойствам.Ссылка = ЭтапыПроизводства.Ссылка
	|			И (НЕ ЭтапыПроизводства.ПометкаУдаления)
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО (ЭтапыПроизводства.Владелец = ВтДанныеПоНоменклатуре.Спецификация)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК СвойстваНоменклатуры
	|		ПО ЭтапыПроизводстваОтборПоСвойствам.Свойство = СвойстваНоменклатуры.Свойство
	|			И (СвойстваНоменклатуры.Ссылка = ВтДанныеПоНоменклатуре.Номенклатура)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК СвойстваХарактеристики
	|		ПО ЭтапыПроизводстваОтборПоСвойствам.Свойство = СвойстваХарактеристики.Свойство
	|			И (СвойстваХарактеристики.Ссылка = ВтДанныеПоНоменклатуре.Характеристика)
	|
	|ГДЕ
	|	&ИспользоватьПараметризацию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтДанныеПоНоменклатуре.Идентификатор                 КАК Идентификатор,
	|
	|	ТехнологическиеПроцессыОтборПоСвойствам.КлючСвязи    КАК КлючСвязи,
	|	ТехнологическиеПроцессыОтборПоСвойствам.Свойство     КАК Свойство,
	|	ТехнологическиеПроцессыОтборПоСвойствам.Условие      КАК Условие,
	|	ТехнологическиеПроцессыОтборПоСвойствам.Значение     КАК ЗначениеОтбор,
	|
	|	ВЫБОР
	|		КОГДА НЕ СвойстваХарактеристики.Значение ЕСТЬ NULL
	|			ТОГДА СвойстваХарактеристики.Значение
	|		КОГДА НЕ СвойстваНоменклатуры.Значение ЕСТЬ NULL
	|			ТОГДА СвойстваНоменклатуры.Значение
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ТехнологическиеПроцессыОтборПоСвойствам.Значение) = ТИП(БУЛЕВО)
	|					ТОГДА ЛОЖЬ
	|				КОГДА ТИПЗНАЧЕНИЯ(ТехнологическиеПроцессыОтборПоСвойствам.Значение) = ТИП(ЧИСЛО)
	|					ТОГДА 0
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ                                                КАК ЗначениеСвойства
	|
	|ИЗ
	|	ВтТехнологическиеПроцессы КАК ВтТехнологическиеПроцессы
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеПроцессы.ОтборПоСвойствам КАК ТехнологическиеПроцессыОтборПоСвойствам
	|		ПО ТехнологическиеПроцессыОтборПоСвойствам.Ссылка = ВтТехнологическиеПроцессы.ТехнологическийПроцесс
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО ВтТехнологическиеПроцессы.Идентификатор = ВтДанныеПоНоменклатуре.Идентификатор
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК СвойстваНоменклатуры
	|		ПО ТехнологическиеПроцессыОтборПоСвойствам.Свойство = СвойстваНоменклатуры.Свойство
	|			И (СвойстваНоменклатуры.Ссылка = ВтДанныеПоНоменклатуре.Номенклатура)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК СвойстваХарактеристики
	|		ПО ТехнологическиеПроцессыОтборПоСвойствам.Свойство = СвойстваХарактеристики.Свойство
	|			И (СвойстваХарактеристики.Ссылка = ВтДанныеПоНоменклатуре.Характеристика)
	|
	|ГДЕ
	|	&ИспользоватьПараметризацию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязи,
	|	Свойство
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВТОтборПоСвойствамНастройки");
	
	ТекстЗапроса = УправлениеДаннымиОбИзделиях.ТекстЗапросаОтборНоменклатурыПоСвойствам("ВТОтборПоСвойствамНастройки");
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВТОтборПоСвойствам");
	
	#КонецОбласти
	
//-- НЕ УТКА

	#Область ДанныеПоНоменклатуре
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеПоНоменклатуре.Идентификатор             КАК Идентификатор,
	|	ДанныеПоНоменклатуре.Спецификация              КАК Спецификация,
	|	ДанныеПоНоменклатуре.Номенклатура              КАК Номенклатура,
	|	ДанныеПоНоменклатуре.Характеристика            КАК Характеристика,
	|	ДанныеПоНоменклатуре.Количество                КАК Количество,
	|	ДанныеПоНоменклатуре.ПодразделениеДиспетчер    КАК ПодразделениеДиспетчер,
	|	ДанныеПоНоменклатуре.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	ДанныеПоНоменклатуре.Распоряжение              КАК Распоряжение,
	|	ДанныеПоНоменклатуре.Назначение                КАК Назначение,
	|	ДанныеПоНоменклатуре.НачалоПроизводства        КАК НачалоПроизводства
	|ИЗ
	|	ВтДанныеПоНоменклатуре КАК ДанныеПоНоменклатуре
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ДанныеПоНоменклатуре");
	
	#КонецОбласти
	
//++ НЕ УТКА

	#Область Автовыбор

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВтДанныеПоНоменклатуре.Номенклатура                         КАК Номенклатура,
	|	ВтДанныеПоНоменклатуре.Характеристика                       КАК Характеристика,
	|	НоменклатураДополнительныеРеквизиты.Свойство                КАК Свойство,
	|	&ВыражениеИдентификатораСвойствНоменклатураДопРеквизиты     КАК СвойствоИдентификатор,
	|	ПРЕДСТАВЛЕНИЕ(НоменклатураДополнительныеРеквизиты.Свойство) КАК СвойствоПредставление,
	|	НоменклатураДополнительныеРеквизиты.Значение                КАК Значение
	|ИЗ
	|	ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ПО ВтДанныеПоНоменклатуре.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
	|ГДЕ
	|	&ИспользоватьПараметризацию
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВтДанныеПоНоменклатуре.Номенклатура,
	|	ВтДанныеПоНоменклатуре.Характеристика,
	|	ХарактеристикаДополнительныеРеквизиты.Свойство,
	|	&ВыражениеИдентификатораСвойствХарактеристикиДопРеквизиты,
	|	ПРЕДСТАВЛЕНИЕ(ХарактеристикаДополнительныеРеквизиты.Свойство),
	|	ХарактеристикаДополнительныеРеквизиты.Значение
	|ИЗ
	|	ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикаДополнительныеРеквизиты
	|		ПО ВтДанныеПоНоменклатуре.Характеристика = ХарактеристикаДополнительныеРеквизиты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ПО ВтДанныеПоНоменклатуре.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
	|			И ХарактеристикаДополнительныеРеквизиты.Свойство = НоменклатураДополнительныеРеквизиты.Свойство
	|ГДЕ
	|	&ИспользоватьПараметризацию
	|	И НоменклатураДополнительныеРеквизиты.Свойство ЕСТЬ NULL";
	
	ПолеИдентификатораДляФормул = РаботаСФормулами.ПолеИдентификатораДополнительныхРеквизитовИСведений();
	ВыражениеИдентификатораСвойствНоменклатураДопРеквизиты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"НоменклатураДополнительныеРеквизиты.Свойство.%1",
		ПолеИдентификатораДляФормул);
	ВыражениеИдентификатораСвойствХарактеристикиДопРеквизиты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ХарактеристикаДополнительныеРеквизиты.Свойство.%1",
		ПолеИдентификатораДляФормул);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеИдентификатораСвойствНоменклатураДопРеквизиты", ВыражениеИдентификатораСвойствНоменклатураДопРеквизиты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеИдентификатораСвойствХарактеристикиДопРеквизиты", ВыражениеИдентификатораСвойствХарактеристикиДопРеквизиты);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ЗначенияСвойствИзделий");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СоответствиеСвойств.Ссылка                           КАК Спецификация,
	|	СоответствиеСвойств.КлючСвязи                        КАК КлючСвязи,
	|	СоответствиеСвойств.СпособПодбораЗначения            КАК СпособПодбораЗначения,
	|	СоответствиеСвойств.СвойствоМатериала                КАК СвойствоМатериала,
	|	&ВыражениеИдентификатораСвойстваМатериала            КАК СвойствоИдентификатор,
	|	ПРЕДСТАВЛЕНИЕ(СоответствиеСвойств.СвойствоМатериала) КАК СвойствоПредставление,
	|	СоответствиеСвойств.СвойствоПродукции                КАК СвойствоПродукции,
	|	СоответствиеСвойств.ЗначениеСвойства                 КАК Значение,
	|	СоответствиеСвойств.АлгоритмРасчетаЗначения          КАК АлгоритмРасчетаЗначения
	|ИЗ
	|	Справочник.РесурсныеСпецификации.СоответствиеСвойств КАК СоответствиеСвойств
	|		
	|ГДЕ
	|	&ИспользоватьПараметризацию
	|	И СоответствиеСвойств.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Спецификация ИЗ ВтДанныеПоНоменклатуре КАК Т)
	|	И СоответствиеСвойств.СпособПодбораЗначения <> ЗНАЧЕНИЕ(Перечисление.СпособыПодбораЗначенияСвойстваНоменклатуры.ЛюбоеЗначение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоответствиеСвойств.Ссылка                           КАК Спецификация,
	|	СоответствиеСвойств.КлючСвязи                        КАК КлючСвязи,
	|	СоответствиеСвойств.СпособПодбораЗначения            КАК СпособПодбораЗначения,
	|	СоответствиеСвойств.СвойствоМатериала                КАК СвойствоМатериала,
	|	&ВыражениеИдентификатораСвойстваМатериала            КАК СвойствоИдентификатор,
	|	ПРЕДСТАВЛЕНИЕ(СоответствиеСвойств.СвойствоМатериала) КАК СвойствоПредставление,
	|	СоответствиеСвойств.СвойствоПродукции                КАК СвойствоПродукции,
	|	СоответствиеСвойств.ЗначениеСвойства                 КАК Значение,
	|	СоответствиеСвойств.АлгоритмРасчетаЗначения          КАК АлгоритмРасчетаЗначения
	|ИЗ
	|	Справочник.ТехнологическиеПроцессы.СоответствиеСвойств КАК СоответствиеСвойств
	|		
	|ГДЕ
	|	&ИспользоватьПараметризацию
	|	И СоответствиеСвойств.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ТехнологическийПроцесс ИЗ ВтТехнологическиеПроцессы КАК Т)
	|	И СоответствиеСвойств.СпособПодбораЗначения <> ЗНАЧЕНИЕ(Перечисление.СпособыПодбораЗначенияСвойстваНоменклатуры.ЛюбоеЗначение)
	|
	|";
	
	ИмяПоляИдентификатора = РаботаСФормулами.ПолеИдентификатораДополнительныхРеквизитовИСведений();
	ВыражениеИдентификатораСвойстваМатериала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"СоответствиеСвойств.СвойствоМатериала.%1",
		ИмяПоляИдентификатора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеИдентификатораСвойстваМатериала", ВыражениеИдентификатораСвойстваМатериала);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "СоответствиеСвойств");
	
	#КонецОбласти

//-- НЕ УТКА
	
	#Область РеквизитыСпецификации
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВтДанныеПоНоменклатуре.Идентификатор КАК Идентификатор,
	|
	|	РесурсныеСпецификации.Ссылка        КАК Спецификация,
	|	РесурсныеСпецификации.Представление КАК СпецификацияПредставление,
	|
	|	РесурсныеСпецификации.Код КАК Код,
	|	РесурсныеСпецификации.ИдентификаторВерсииДанных КАК ИдентификаторВерсииДанных,
	|
	|	РесурсныеСпецификации.СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатратНаВыходныеИзделия,
	|
	|	РесурсныеСпецификации.ТипПроизводственногоПроцесса         КАК ТипПроизводственногоПроцесса,
	|	РесурсныеСпецификации.ВариантНазначения                    КАК ВариантНазначения,
	|	РесурсныеСпецификации.МногоэтапныйПроизводственныйПроцесс  КАК МногоэтапныйПроизводственныйПроцесс,
	|
	|	ВЫБОР
	|		КОГДА &ПереопределятьНастройкуПартииВыпуска
	|			ТОГДА &ВыпускПроизвольнымиПорциями
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &ДоступноОписаниеПартииВыпуска
	|					ТОГДА РесурсныеСпецификации.ВыпускПроизвольнымиПорциями
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ                                                         КАК ВыпускПроизвольнымиПорциями,
	|	ВЫБОР
	|		КОГДА &ПереопределятьНастройкуПартииВыпуска
	|			ТОГДА 0
	|		ИНАЧЕ РесурсныеСпецификации.ОптимальнаяПартияВыпуска
	|	КОНЕЦ                                                         КАК ОптимальнаяПартияВыпуска,
	|	ВЫБОР
	|		КОГДА &ПереопределятьНастройкуПартииВыпуска
	|			ТОГДА 0
	|		ИНАЧЕ РесурсныеСпецификации.ДопустимоеПревышениеОптимальнойПартииВыпуска
	|	КОНЕЦ                                                         КАК ДопустимоеПревышениеОптимальнойПартииВыпуска,
	|	ВЫБОР
	|		КОГДА &ПереопределятьНастройкуПартииВыпуска
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &ДоступноОписаниеПартииВыпуска
	|					ТОГДА РесурсныеСпецификации.МинимальнаяПартияВыпуска
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ                                                         КАК МинимальнаяПартияВыпуска,
	|	
	|	РесурсныеСпецификации.ОграниченСрокПролеживанияВыходныхИзделий    КАК ОграниченСрокПролеживания,
	|	РесурсныеСпецификации.МаксимальныйСрокПролеживанияВыходныхИзделий КАК МаксимальныйСрокПролеживанияВДнях,
	|	РесурсныеСпецификации.ОптимальноеКоличествоПередачиМеждуЭтапами   КАК ОптимальноеКоличествоПередачиМеждуЭтапами,
	|	
	|	РесурсныеСпецификации.ЕстьУточняемоеОсновноеИзделие                                  КАК ЕстьУточняемоеОсновноеИзделие,
	|	РесурсныеСпецификации.ЕстьВложенныеСпецификации                                      КАК ЕстьВложенныеСпецификации,
	|	РесурсныеСпецификации.ЕстьРасчетВероятности                                          КАК ЕстьРасчетВероятности,
	|	РесурсныеСпецификации.ЕстьНекратныеНормативыВРЦ                                      КАК ЕстьНекратныеНормативыВРЦ,
	|	РесурсныеСпецификации.ЕстьПараметризацияРесурсов ИЛИ &ЕстьПараметризацияТехпроцессов КАК ЕстьПараметризацияРесурсов,
	|	
	|	РесурсныеСпецификации.ОтветственноеПодразделение КАК ОтветственноеПодразделение
	|	
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО РесурсныеСпецификации.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	
	ТекстПоляЕстьПараметризацияТехпроцессов = "ЛОЖЬ";
	//++ НЕ УТКА
	ТекстПоляЕстьПараметризацияТехпроцессов = "ИСТИНА В (
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	ВтТехнологическиеПроцессы КАК Т
	|ГДЕ
	|	Т.Спецификация = РесурсныеСпецификации.Ссылка
	|	И Т.ЕстьПараметризацияРесурсов
	|)";
	//-- НЕ УТКА
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьПараметризацияТехпроцессов", ТекстПоляЕстьПараметризацияТехпроцессов);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "РеквизитыСпецификации");
	
	#КонецОбласти
	
	#Область ОсновноеИзделие
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВтИзделия.Идентификатор                            КАК Идентификатор,
	|
	|	ВтИзделия.ВидНоменклатуры                          КАК ВидНоменклатуры,
	|	ВтИзделия.Номенклатура                             КАК Номенклатура,
	|	ВтИзделия.Характеристика                           КАК Характеристика,
	|	
	|	0                                                  КАК Количество,
	|	ВтИзделия.КоличествоУпаковок                       КАК КоличествоУпаковок,
	|	ВтИзделия.КоличествоУпаковок                       КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
	|	ВтИзделия.Номенклатура.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
	|	ВтИзделия.Упаковка                                 КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО                                       КАК ДанныеУпаковки,
	|
	|	ВтИзделия.Номенклатура.ТипНоменклатуры             КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВтИзделия.Номенклатура.ИспользованиеХарактеристик В (
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                              КАК ХарактеристикиИспользуются,
	|
	|	ВтИзделия.ЛюбаяХарактеристика                      КАК ЛюбаяХарактеристика,
	|	ВтИзделия.Спецификация                             КАК Спецификация,
	|	ВтИзделия.Спецификация.ВариантНазначения           КАК ВариантНазначения,
	|	ВЫБОР
	|		КОГДА &УчитыватьВероятностьБрака
	|			ТОГДА ВтИзделия.ПроцентБрака / 100
	|		ИНАЧЕ 0
	|	КОНЕЦ                                              КАК КоэффициентБрака,
	|	ВтИзделия.ЭтоОсновноеИзделие                       КАК ЭтоОсновноеИзделие,
	|	
	|	ЕСТЬNULL(ВтИзделияОсновноеИзделие.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))         КАК ОсновноеИзделиеНоменклатура,
	|	ЕСТЬNULL(ВтИзделияОсновноеИзделие.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ОсновноеИзделиеУпаковка,
	|	ЕСТЬNULL(ВтИзделияОсновноеИзделие.КоличествоУпаковок, 0)                                                КАК ОсновноеИзделиеКоличествоУпаковокНаЕдиницуПартииВыпуска,
	|
	|	ЕСТЬNULL(ВтИзделия.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК ЕдиницаИзмеренияШтучная,
	|	ЕСТЬNULL(&ТекстЗапросаТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК УпаковкаШтучная,
	|	ЕСТЬNULL(ВтИзделия.Номенклатура.ГруппаАналитическогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)) КАК ГруппаАналитическогоУчета
	|
	|ИЗ ВтИзделия КАК ВтИзделия
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИзделия КАК ВтИзделияОсновноеИзделие
	|		ПО ВтИзделия.Идентификатор = ВтИзделияОсновноеИзделие.Идентификатор
	|			И НЕ ВтИзделия.ЭтоОсновноеИзделие
	|			И ВтИзделияОсновноеИзделие.ЭтоОсновноеИзделие
	|
	|ГДЕ
	|	ВтИзделия.СоответствуетДаннымПоНоменклатуре
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВтИзделия.Идентификатор,
	|	ВтИзделия.ВидИзделия
	|";
	
	ТекстПоляТипИзмеряемойВеличины = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
		"ТипИзмеряемойВеличины",
		"ВтИзделия.Упаковка",
		"ВтИзделия.Номенклатура");
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаТипИзмеряемойВеличины",
		ТекстПоляТипИзмеряемойВеличины);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ОсновноеИзделие");
	
	#КонецОбласти
	
	#Область Этапы
	
	Если ПереченьДанных.Найти("Этапы") <> Неопределено Тогда
	
		//++ НЕ УТКА
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЭтапыПроизводства.Ссылка                                             КАК Этап,
			|	ВтДанныеПоНоменклатуре.Идентификатор                                 КАК Идентификатор,
			|	ЗНАЧЕНИЕ(Перечисление.ПорядокРаботыВидовРабочихЦентров.ПустаяСсылка) КАК ПорядокРаботыВидовРабочихЦентров
			|ПОМЕСТИТЬ ВтПереопределениеПорядкаРаботыВидовРабочихЦентров
			|ИЗ
			|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ТабличнаяЧасть
			|		ПО ТабличнаяЧасть.Ссылка = ЭтапыПроизводства.Ссылка
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
			|		ПО ЭтапыПроизводства.Владелец = ВтДанныеПоНоменклатуре.Спецификация
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
			|		ПО ТабличнаяЧасть.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
			|			И ВтДанныеПоНоменклатуре.Идентификатор = ВТОтборПоСвойствам.Идентификатор
			|
			|ГДЕ
			|	НЕ ЭтапыПроизводства.ПометкаУдаления
			|	И ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
			|	И ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			ВТОтборПоСвойствам КАК Отбор
			|		ГДЕ
			|			Отбор.Идентификатор = ВтДанныеПоНоменклатуре.Идентификатор)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭтапыПроизводства.Ссылка,
			|	ВтДанныеПоНоменклатуре.Идентификатор
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(ТабличнаяЧасть.ВидРабочегоЦентра) <= 1
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Этап, Идентификатор";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВтПереопределениеПорядкаРаботыВидовРабочихЦентров");
		//-- НЕ УТКА
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&ЭтапыПроизводства_Представления,
		|	ОсновноеВыходноеИзделие.Идентификатор                                    КАК Идентификатор,
		|	ЭтапыПроизводства.Ссылка                                                 КАК Этап,
		|	ЭтапыПроизводства.Владелец                                               КАК Спецификация,
		|	ЭтапыПроизводства.Представление                                          КАК ЭтапПредставление,
		|	ЭтапыПроизводства.НомерЭтапа                                             КАК НомерЭтапа,
		|	ЭтапыПроизводства.НомерСледующегоЭтапа                                   КАК НомерСледующегоЭтапа,
		|	ЭтапыПроизводства.Подразделение                                          КАК Подразделение,
		|	1                                                                        КАК Количество,
		|	1                                                                        КАК КоличествоНаЕдиницуПартииВыпуска,
		|	ОсновноеВыходноеИзделие.Количество                                       КАК КоличествоИзделие,
		|
		|	ЭтапыПроизводства.ПланироватьРаботуВидовРабочихЦентров                   КАК ПланироватьРаботуВидовРабочихЦентров,
		|	ЭтапыПроизводства.Непрерывный                                            КАК Непрерывный,
		|	ЭтапыПроизводства.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий  КАК ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
		|	ЭтапыПроизводства.ДлительностьЭтапа                                      КАК ДлительностьЭтапа,
		|	ЭтапыПроизводства.ЕдиницаИзмеренияДлительностиЭтапа                      КАК ЕдиницаИзмеренияДлительностиЭтапа,
		|	ЭтапыПроизводства.ПредварительныйБуфер                                   КАК ПредварительныйБуфер,
		|	ЭтапыПроизводства.ЗавершающийБуфер                                       КАК ЗавершающийБуфер,
		|	ЭтапыПроизводства.ЕдиницаИзмеренияПредварительногоБуфера                 КАК ЕдиницаИзмеренияПредварительногоБуфера,
		|	ЭтапыПроизводства.ЕдиницаИзмеренияЗавершающегоБуфера                     КАК ЕдиницаИзмеренияЗавершающегоБуфера,
		|	ЭтапыПроизводства.Описание                                               КАК Описание,
		|	ЭтапыПроизводства.ПроизводствоНаСтороне                                  КАК ПроизводствоНаСтороне,
		|	ЭтапыПроизводства.Партнер                                                КАК Партнер,
		|	ЭтапыПроизводства.ГрафикРаботыПартнера                                   КАК ГрафикРаботыПартнера,
		|	ЭтапыПроизводства.УслугиПереработчика.(
		|		НомерСтроки       КАК НомерСтроки,
		|		Номенклатура      КАК Номенклатура,
		|		Характеристика    КАК Характеристика,
		|		Количество        КАК Количество,
		|		Количество        КАК КоличествоНаЕдиницуПартииВыпуска,
		|		СтатьяКалькуляции КАК СтатьяКалькуляции)                             КАК УслугиПереработчика,
		|
		|	&ТекстПоляМаршрутнойКарты,
		|
		//++ НЕ УТКА
		|	ЕСТЬNULL(ПереопределениеПорядкаРаботы.ПорядокРаботыВидовРабочихЦентров,
		|				ЭтапыПроизводства.ПорядокРаботыВидовРабочихЦентров)          КАК ПорядокРаботыВидовРабочихЦентров,
		|	ЭтапыПроизводства.ЕстьПараметризацияРесурсов                             КАК ЕстьПараметризацияРесурсов,
		//-- НЕ УТКА
		|
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)             КАК ДлительностьЭтапаВДнях,
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВСекундах, 0)         КАК ДлительностьЭтапаВСекундах,
		|
		|	ВЫБОР РесурсныеСпецификации.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
		|	КОНЕЦ                                                                    КАК ДнейОтПотребности,
		|
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьДоВыпуска, 0)         КАК ДлительностьДоВыпуска
		|
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
		|		ПО ЭтапыПроизводства.Владелец = ОсновноеВыходноеИзделие.Спецификация
		|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|		ПО ЭтапыПроизводства.Владелец = РесурсныеСпецификации.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = ЭтапыПроизводства.Ссылка
		|
		//++ НЕ УТКА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПереопределениеПорядкаРаботыВидовРабочихЦентров КАК ПереопределениеПорядкаРаботы
		|		ПО ПереопределениеПорядкаРаботы.Этап = ЭтапыПроизводства.Ссылка
		|			И ПереопределениеПорядкаРаботы.Идентификатор = ОсновноеВыходноеИзделие.Идентификатор
		//-- НЕ УТКА
		|
		|ГДЕ
		|	НЕ ЭтапыПроизводства.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор, НомерЭтапа";
		
		Если ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях") Тогда
			ТекстПоляМаршрутнойКарты = "
			|	""""                                                КАК МаршрутнаяКарта,";
			//++ НЕ УТКА
			ТекстПоляМаршрутнойКарты = "
			|	ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)   КАК МаршрутнаяКарта,";
			//-- НЕ УТКА
			ТекстПоляМаршрутнойКарты = ТекстПоляМаршрутнойКарты + "
			|	0                                                   КАК КоэффициентМаршрутнойКарты,
			|	0                                                   КАК КоэффициентМаршрутнойКартыНаЕдиницуПартииВыпуска";
		Иначе
			ТекстПоляМаршрутнойКарты = "
			|	ЭтапыПроизводства.МаршрутнаяКарта                   КАК МаршрутнаяКарта,
			|	ЭтапыПроизводства.КоэффициентМаршрутнойКарты        КАК КоэффициентМаршрутнойКарты,
			|	ЭтапыПроизводства.КоэффициентМаршрутнойКарты        КАК КоэффициентМаршрутнойКартыНаЕдиницуПартииВыпуска";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляМаршрутнойКарты", ТекстПоляМаршрутнойКарты);
		
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "Этапы");
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВыходныеИзделия
	
	Если ПереченьДанных.Найти("ВыходныеИзделия") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ВыходныеИзделия_Представления,
		|	ВтИзделия.Идентификатор                         КАК Идентификатор,
		|	ВтИзделия.НомерСтроки                           КАК НомерСтроки,
		|	ВтИзделия.ВидНоменклатуры                       КАК ВидНоменклатуры,
		|	ВтИзделия.Номенклатура                          КАК Номенклатура,
		|	ВтИзделия.Характеристика                        КАК Характеристика,
		|	ВтИзделия.ЛюбаяХарактеристика                   КАК ЛюбаяХарактеристика,
		|
		|	ВтИзделия.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК ЕдиницаИзмеренияШтучная,
		|	ЕСТЬNULL(&ТекстЗапросаТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ)            КАК УпаковкаШтучная,
		|
		|	0                                               КАК Количество,
		|	ВтИзделия.КоличествоУпаковок                    КАК КоличествоУпаковок,
		|	ВтИзделия.КоличествоУпаковок                    КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	ВтИзделия.Номенклатура.ЕдиницаИзмерения         КАК ЕдиницаИзмерения,
		|	ВтИзделия.Упаковка                              КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО                                    КАК ДанныеУпаковки,
		|
		|	ОсновноеВыходноеИзделие.Количество              КАК КоличествоИзделие,
		|
		|	&ДоляСтоимости                                  КАК ДоляСтоимости,
		|	&ДоляСтоимостиНаЕдиницу                         КАК ДоляСтоимостиНаЕдиницу,
		|
		|	ВтИзделия.Этап                                  КАК Этап,
		|	ВтИзделия.Этап.Подразделение                    КАК ПодразделениеЭтапа,
		|	ВтИзделия.Операция                              КАК Операция,
		|
		|	&ТекстПолеСклад                                 КАК Склад,
		|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)       КАК ЭтоЦеховаяКладовая,
		|	ВтИзделия.Номенклатура.ТипНоменклатуры          КАК ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА ВтИзделия.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                           КАК ХарактеристикиИспользуются,
		|	ВтИзделия.ОбработатьПоСпецификации              КАК ОбработатьПоСпецификации,
		|	ВтИзделия.ОбработатьПоСпецификацииСпецификация  КАК Спецификация,
		|
		|	ВЫБОР
		|		КОГДА &УчитыватьВероятностьБрака
		|			ТОГДА ВтИзделия.ПроцентБрака / 100
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК КоэффициентБрака,
		|
		|	ВЫБОР 
		|		КОГДА (ВтИзделия.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|				ИЛИ ВтИзделия.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|				И &ИспользоватьПараметризацию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                           КАК ИспользуетсяАвтовыбор,
		|	ПРЕДСТАВЛЕНИЕ("""")                             КАК СведенияАвтовыбора,
		|	ВтИзделия.СпособАвтовыбораНоменклатуры          КАК СпособАвтовыбораНоменклатуры,
		|	ВтИзделия.СпособАвтовыбораХарактеристики        КАК СпособАвтовыбораХарактеристики,
		|	ВтИзделия.СвойствоСодержащееНоменклатуру        КАК СвойствоСодержащееНоменклатуру,
		|	ВтИзделия.АлгоритмАвтовыбораХарактеристики      КАК АлгоритмАвтовыбораХарактеристики,
		|	ВтИзделия.ОписаниеИзделия                       КАК ОписаниеИзделия,
		|
		// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА ВтИзделия.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                           КАК АлгоритмРасчетаКоличества,
		|	ПРЕДСТАВЛЕНИЕ("""")                             КАК Формула,
		|	ПРЕДСТАВЛЕНИЕ("""")                             КАК ФормулаОшибкаРасчета,
		|
		// округление:
		|	ЕСТЬNULL(&ОкруглятьКоличествоШтучныхТоваров
		|		И ВтИзделия.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		И ВтИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		И &ТекстЗапросаТипИзмеряемойВеличины В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)), ЛОЖЬ)    КАК Округлить,
		|
		|	ВЫБОР ВтИзделия.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
		|	КОНЕЦ                                             КАК ДнейОтПотребности,
		|
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьДоВыпуска, 0) КАК ДлительностьДоВыпуска,
		|
		|	ВтИзделия.КлючСвязи                             КАК КлючСвязи
		|
		|ИЗ
		|	ВтИзделия КАК ВтИзделия
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
		|		ПО ВтИзделия.Идентификатор = ОсновноеВыходноеИзделие.Идентификатор
		|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
		|
		//++ НЕ УТКА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
		|		ПО ВтИзделия.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
		|			И ВтИзделия.Идентификатор = ВТОтборПоСвойствам.Идентификатор
		//-- НЕ УТКА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = ВтИзделия.Этап
		|
		|		,ТекстСоединенияНастройкиПередачиМатериалов
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО &ТекстПолеСклад = СпрСклады.Ссылка
		|
		|		,СоединениеДоляСтоимости
		|
		|ГДЕ
		|	ВтИзделия.ВидИзделия = 0
		//++ НЕ УТКА
		|		И ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
		//-- НЕ УТКА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор, НомерСтроки";
		
		// Для совместимости с 2.1, получение склада по основному выходному изделию
		ИмяТаблицыТовары =
			?(ПараметрыВыборки.ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения,
			"ВтИзделия",
			"ОсновноеВыходноеИзделие");
		
		ТекстЗапросаДляПолученияСклада = ОбеспечениеПроизводства.ТекстЗапросаНастройкиПередачиМатериалов(
			ИмяТаблицыТовары,
			"Этап.Подразделение",
			ПараметрыВыборки.ВариантЗаполненияОбеспечения);
			
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							",ТекстСоединенияНастройкиПередачиМатериалов",
							ТекстЗапросаДляПолученияСклада.ТекстСоединения);
							
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПолеСклад",
							ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
		
		ТекстПоляТипИзмеряемойВеличины = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
							"ТипИзмеряемойВеличины",
							"ВтИзделия.Упаковка",
							"ВтИзделия.Номенклатура");
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстЗапросаТипИзмеряемойВеличины",
							ТекстПоляТипИзмеряемойВеличины);

		Если ПараметрыВыборки.РассчитыватьДолиСтоимостиВыходныхИзделий Тогда
		
			Если ИспользуетсяЦенообразование25 Тогда
				ПараметрыПодстановки = ПроизводствоСервер.ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости(
					"ВтИзделия",
					"ВтИзделия.Спецификация.СпособРаспределенияЗатратНаВыходныеИзделия",
					"(Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО) В (
					|	Выбрать
					|		Т.Номенклатура,
					|		Т.ХарактеристикаЦО,
					|		Т.СерияЦО,
					|		Т.УпаковкаЦО
					|	ИЗ
					|		ВтИзделия КАК Т
					|	ГДЕ
					|		Т.ВидИзделия = 0
					|		И Т.Спецификация.СпособРаспределенияЗатратНаВыходныеИзделия =
					|			ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости))",
					ИспользуетсяЦенообразование25);
			Иначе
				ПараметрыПодстановки = ПроизводствоСервер.ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости(
					"ВтИзделия",
					"ВтИзделия.Спецификация.СпособРаспределенияЗатратНаВыходныеИзделия",
					"(Номенклатура, Характеристика) В (
					|	Выбрать
					|		Т.Номенклатура,
					|		Т.Характеристика
					|	ИЗ
					|		ВтИзделия КАК Т
					|	ГДЕ
					|		Т.ВидИзделия = 0
					|		И Т.Спецификация.СпособРаспределенияЗатратНаВыходныеИзделия =
					|			ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости))");
			КонецЕсли;
			
			ПроизводствоСервер.ВыполнитьПодстановкуАлгоритмаРасчетаДолейСтоимости(ТекстЗапроса, ПараметрыПодстановки, ИспользуетсяЦенообразование25);
			
		Иначе
			
			ПараметрыПодстановки = ПроизводствоСервер.ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости("ВтИзделия");
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПараметрыПодстановки.СоединениеДоляСтоимости, "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПараметрыПодстановки.ДоляСтоимостиНаЕдиницу, "0");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПараметрыПодстановки.ДоляСтоимости, ПараметрыПодстановки.ИсточникДоляСтоимости);
		
		КонецЕсли;
		
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВыходныеИзделия");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВозвратныеОтходы
	
	Если ПереченьДанных.Найти("ВозвратныеОтходы") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ВозвратныеОтходы_Представления,
		|	ВтИзделия.Идентификатор                            КАК Идентификатор,
		|	ВтИзделия.НомерСтроки                              КАК НомерСтроки,
		|	ВтИзделия.ВидНоменклатуры                          КАК ВидНоменклатуры,
		|	ВтИзделия.Номенклатура                             КАК Номенклатура,
		|	ВтИзделия.Характеристика                           КАК Характеристика,
		|	ВтИзделия.ЛюбаяХарактеристика                      КАК ЛюбаяХарактеристика,
		|
		|	ВтИзделия.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК ЕдиницаИзмеренияШтучная,
		|	ЕСТЬNULL(&ТекстЗапросаТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ)            КАК УпаковкаШтучная,
		|
		|	0                                                  КАК Количество,
		|	ВтИзделия.КоличествоУпаковок                       КАК КоличествоУпаковок,
		|	ВтИзделия.КоличествоУпаковок                       КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	ВтИзделия.Номенклатура.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
		|	ВтИзделия.Упаковка                                 КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО                                       КАК ДанныеУпаковки,
		|
		|	ЕСТЬNULL(ОсновноеВыходноеИзделие.Количество, 0)    КАК КоличествоИзделие,
		|
		|	ВтИзделия.Этап                                     КАК Этап,
		|	ВтИзделия.Этап.Подразделение                       КАК ПодразделениеЭтапа,
		|	ВтИзделия.Этап.НомерЭтапа                          КАК НомерЭтапа,
		|	ВтИзделия.Этап.НомерСледующегоЭтапа                КАК НомерСледующегоЭтапа,
		|	ВтИзделия.Операция                                 КАК Операция,
		|
		|	&ТекстПолеСклад                                    КАК Склад,
		|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)          КАК ЭтоЦеховаяКладовая,
		|	ВтИзделия.Номенклатура.ТипНоменклатуры             КАК ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА ВтИзделия.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ХарактеристикиИспользуются,
		|	ВтИзделия.ОбработатьПоСпецификации                 КАК ОбработатьПоСпецификации,
		|	ВтИзделия.ОбработатьПоСпецификацииСпецификация     КАК Спецификация,
		|
		|	ВтИзделия.СтатьяКалькуляции                        КАК СтатьяКалькуляции,
		|
		|	ВЫБОР 
		|		КОГДА (ВтИзделия.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|				ИЛИ ВтИзделия.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|				И &ИспользоватьПараметризацию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ИспользуетсяАвтовыбор,
		|	ПРЕДСТАВЛЕНИЕ("""")                                КАК СведенияАвтовыбора,
		|	ВтИзделия.СпособАвтовыбораНоменклатуры             КАК СпособАвтовыбораНоменклатуры,
		|	ВтИзделия.СпособАвтовыбораХарактеристики           КАК СпособАвтовыбораХарактеристики,
		|	ВтИзделия.СвойствоСодержащееНоменклатуру           КАК СвойствоСодержащееНоменклатуру,
		|	ВтИзделия.АлгоритмАвтовыбораХарактеристики         КАК АлгоритмАвтовыбораХарактеристики,
		|	ВтИзделия.ОписаниеИзделия                          КАК ОписаниеИзделия,
		|
		// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА ВтИзделия.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                              КАК АлгоритмРасчетаКоличества,
		|	ПРЕДСТАВЛЕНИЕ("""")                                КАК Формула,
		|	ПРЕДСТАВЛЕНИЕ("""")                                КАК ФормулаОшибкаРасчета,
		|
		// округление:
		|	ЕСТЬNULL(&ОкруглятьКоличествоШтучныхТоваров
		|		И ВтИзделия.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		И ВтИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		И &ТекстЗапросаТипИзмеряемойВеличины В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)), ЛОЖЬ)      КАК Округлить,
		|
		|	ВЫБОР ВтИзделия.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
		|	КОНЕЦ                                             КАК ДнейОтПотребности,
		|
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьДоВыпуска, 0) КАК ДлительностьДоВыпуска,
		|
		|	&ТипСтрокиПобочныйВыход                     КАК ТипСтроки,
		|
		|	ВтИзделия.КлючСвязи                         КАК КлючСвязи
		|
		|ИЗ
		|	ВтИзделия КАК ВтИзделия
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
		|		ПО ВтИзделия.Идентификатор = ОсновноеВыходноеИзделие.Идентификатор
		|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
		|
		//++ НЕ УТКА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
		|		ПО ВтИзделия.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
		|			И ВтИзделия.Идентификатор = ВТОтборПоСвойствам.Идентификатор
		//-- НЕ УТКА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = ВтИзделия.Этап
		|
		|		,ТекстСоединенияНастройкиПередачиМатериалов
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО &ТекстПолеСклад = СпрСклады.Ссылка
		|
		|ГДЕ
		|	ВтИзделия.ВидИзделия = 2
		//++ НЕ УТКА
		|	И ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
		//-- НЕ УТКА
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"&ТекстЗапросаТипИзмеряемойВеличины",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"ТипИзмеряемойВеличины",
				"ВтИзделия.Упаковка",
				"ВтИзделия.Номенклатура"));
		
		// Для совместимости с 2.1, получение склада по основному выходному изделию
		ИмяТаблицыТовары =
			?(ПараметрыВыборки.ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения,
			"ВтИзделия",
			"ОсновноеВыходноеИзделие");
		
		ТекстЗапросаДляПолученияСклада = ОбеспечениеПроизводства.ТекстЗапросаНастройкиПередачиМатериалов(
			ИмяТаблицыТовары,
			"Этап.Подразделение",
			ПараметрыВыборки.ВариантЗаполненияОбеспечения);
			
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							",ТекстСоединенияНастройкиПередачиМатериалов",
							ТекстЗапросаДляПолученияСклада.ТекстСоединения);
							
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПолеСклад",
							ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
		
		//++ НЕ УТКА
		Если ЕстьПромежуточныйВыпуск Тогда
			
			ТекстЗапросаДанныеПВ = "
			|ВЫБРАТЬ
			|	&ПромежуточныйВыпуск_Представления,
			|	ОсновноеВыходноеИзделие.Идентификатор                             КАК Идентификатор,
			|	ВЫРАЗИТЬ(ПромежуточныйВыпуск.НомерСтроки КАК ЧИСЛО(10,0)) + 10000 КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПромежуточныйВыпуск.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА ПромежуточныйВыпуск.Номенклатура.ВидНоменклатуры
			|		ИНАЧЕ ОсновноеВыходноеИзделие.ВидНоменклатуры
			|	КОНЕЦ КАК ВидНоменклатуры,
			|	ВЫБОР
			|		КОГДА ПромежуточныйВыпуск.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА ПромежуточныйВыпуск.Номенклатура
			|		КОГДА НоменклатураНовая.НоменклатураПромежуточногоВыпуска ЕСТЬ НЕ NULL
			|			ТОГДА НоменклатураНовая.НоменклатураПромежуточногоВыпуска
			|		ИНАЧЕ ЕСТЬNULL(НоменклатураПодобранная.НоменклатураПромежуточногоВыпуска, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
			|	КОНЕЦ КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ПромежуточныйВыпуск.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА ПромежуточныйВыпуск.Характеристика
			|		КОГДА НоменклатураНовая.НоменклатураПромежуточногоВыпуска ЕСТЬ НЕ NULL
			|			ТОГДА НоменклатураНовая.ХарактеристикаПромежуточногоВыпуска
			|		ИНАЧЕ ЕСТЬNULL(НоменклатураПодобранная.ХарактеристикаПромежуточногоВыпуска, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
			|	КОНЕЦ КАК Характеристика,
			|	ВЫБОР
			|		КОГДА ПромежуточныйВыпуск.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЛюбаяХарактеристика,
			|	
			|	ВЫБОР
			|		КОГДА ПромежуточныйВыпуск.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА ПромежуточныйВыпуск.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
			|		ИНАЧЕ ОсновноеВыходноеИзделие.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
			|	КОНЕЦ КАК ЕдиницаИзмеренияШтучная,
			|	ЛОЖЬ КАК УпаковкаШтучная,
			|
			|	ОсновноеВыходноеИзделие.Количество                КАК Количество,
			|	ОсновноеВыходноеИзделие.Количество                КАК КоличествоУпаковок,
			|	ОсновноеВыходноеИзделие.Количество                КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
			|	ВЫБОР
			|		КОГДА ПромежуточныйВыпуск.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА ПромежуточныйВыпуск.Номенклатура.ЕдиницаИзмерения
			|		ИНАЧЕ ОсновноеВыходноеИзделие.Номенклатура.ЕдиницаИзмерения
			|	КОНЕЦ КАК ЕдиницаИзмерения,
			|
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
			|	НЕОПРЕДЕЛЕНО КАК ДанныеУпаковки,
			|
			|	ОсновноеВыходноеИзделие.Количество КАК КоличествоИзделие,
			|
			|	ПромежуточныйВыпуск.ЭтапОтправитель                      КАК Этап,
			|	ПромежуточныйВыпуск.ЭтапОтправитель.Подразделение        КАК ПодразделениеЭтапа,
			|	ПромежуточныйВыпуск.ЭтапОтправитель.НомерЭтапа           КАК НомерЭтапа,
			|	ПромежуточныйВыпуск.ЭтапОтправитель.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
			|	ПромежуточныйВыпуск.ОперацияОтправитель                  КАК Операция,
			|
			|	&ТекстПолеСклад                           КАК Склад,
			|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ) КАК ЭтоЦеховаяКладовая,
			|
			|	ВЫБОР
			|		КОГДА ПромежуточныйВыпуск.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА ПромежуточныйВыпуск.Номенклатура.ТипНоменклатуры
			|		ИНАЧЕ ОсновноеВыходноеИзделие.Номенклатура.ТипНоменклатуры
			|	КОНЕЦ КАК ТипНоменклатуры,
			|	ВЫБОР
			|		КОГДА ПромежуточныйВыпуск.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА ПромежуточныйВыпуск.Номенклатура.ИспользованиеХарактеристик В (
			|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
			|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
			|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
			|		ИНАЧЕ ОсновноеВыходноеИзделие.Номенклатура.ИспользованиеХарактеристик В (
			|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
			|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
			|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
			|	КОНЕЦ КАК ХарактеристикиИспользуются,
			|
			|	ЛОЖЬ КАК ОбработатьПоСпецификации,
			|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка) КАК Спецификация,
			|
			|	ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе) КАК СтатьяКалькуляции,
			|
			|	ЛОЖЬ                КАК ИспользуетсяАвтовыбор,
			|	ПРЕДСТАВЛЕНИЕ("""") КАК СведенияАвтовыбора,
			|	НЕОПРЕДЕЛЕНО        КАК СпособАвтовыбораНоменклатуры,
			|	НЕОПРЕДЕЛЕНО        КАК СпособАвтовыбораХарактеристики,
			|	НЕОПРЕДЕЛЕНО        КАК СвойствоСодержащееНоменклатуру,
			|	""""                КАК АлгоритмАвтовыбораХарактеристики,
			|	""""                КАК ОписаниеИзделия,
			|
			// расчет по формуле:
			|	""""                КАК АлгоритмРасчетаКоличества,
			|	ПРЕДСТАВЛЕНИЕ("""") КАК Формула,
			|	ПРЕДСТАВЛЕНИЕ("""") КАК ФормулаОшибкаРасчета,
			|
			// округление:
			|	ЛОЖЬ КАК Округлить,
			|
			|	ВЫБОР ОсновноеВыходноеИзделие.ТипПроизводственногоПроцесса
			|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
			|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
			|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0)
			|	КОНЕЦ КАК ДнейОтПотребности,
			|
			|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьДоВыпуска, 0) КАК ДлительностьДоВыпуска,
			|
			|	&ТипСтрокиПромежуточныйПолуфабрикат КАК ТипСтроки,
			|
			|	ПромежуточныйВыпуск.КлючСвязи КАК КлючСвязи
			|ИЗ
			|	ВтПромежуточныйВыпуск КАК ПромежуточныйВыпуск
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
			|		ПО ПромежуточныйВыпуск.Ссылка = ОсновноеВыходноеИзделие.Спецификация
			|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтНоменклатураПромежуточногоВыпускаНовая КАК НоменклатураНовая
			|		ПО ОсновноеВыходноеИзделие.Номенклатура = НоменклатураНовая.Номенклатура
			|			И ОсновноеВыходноеИзделие.Характеристика = НоменклатураНовая.Характеристика
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтНоменклатураПромежуточногоВыпускаПодобранная КАК НоменклатураПодобранная
			|		ПО ОсновноеВыходноеИзделие.Номенклатура = НоменклатураПодобранная.Номенклатура
			|			И ОсновноеВыходноеИзделие.Характеристика = НоменклатураПодобранная.Характеристика
			|
					// Сюда подставляется запрос для получения склада
			|		,ТекстСоединенияНастройкиПередачиМатериалов
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
			|		ПО НормативнаяДлительностьЭтапов.Этап = ПромежуточныйВыпуск.ЭтапОтправитель
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
			|		ПО &ТекстПолеСклад = СпрСклады.Ссылка
			|";
			
			ТекстЗапросаДляПолученияСклада = ОбеспечениеПроизводства.ТекстЗапросаНастройкиПередачиМатериалов(
				"ОсновноеВыходноеИзделие",
				"&Подразделение",
				ПараметрыВыборки.ВариантЗаполненияОбеспечения);
			ТекстЗапросаДанныеПВ = СтрЗаменить(
								ТекстЗапросаДанныеПВ, 
								",ТекстСоединенияНастройкиПередачиМатериалов",
								ТекстЗапросаДляПолученияСклада.ТекстСоединения);
			ТекстЗапросаДанныеПВ = СтрЗаменить(
								ТекстЗапросаДанныеПВ, 
								"&ТекстПолеСклад",
								ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
			ТекстЗапросаДанныеПВ = СтрЗаменить(
								ТекстЗапросаДанныеПВ, 
								"&Подразделение",
								"ПромежуточныйВыпуск.ЭтапОтправитель.Подразделение");
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстЗапросаДанныеПВ;
			
		КонецЕсли;
		//-- НЕ УТКА
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор, НомерСтроки";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВозвратныеОтходы");
		
	КонецЕсли;
	
	#КонецОбласти
	
//++ НЕ УТКА

	#Область ВходящиеИзделия
	
	Если ПереченьДанных.Найти("ВходящиеИзделия") <> Неопределено ИЛИ ПараметрыВыборки.ОбъединитьМатериалыИВходящиеИзделия Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВтИзделия.Идентификатор                         КАК Идентификатор,
		|	ВтИзделия.Спецификация                          КАК Ссылка,
		|	1                                               КАК НомерСтроки,
		|
		|	ВтИзделия.Номенклатура                          КАК Номенклатура,
		|	ВтИзделия.Характеристика                        КАК Характеристика,
		|
		|	ВтИзделия.Номенклатура.ТипНоменклатуры          КАК ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА ВтИзделия.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                           КАК ХарактеристикиИспользуются,
		|
		|	ВтИзделия.ЛюбаяХарактеристика                   КАК ЛюбаяХарактеристика,
		|
		|	0                                               КАК Количество,
		|	ВтИзделия.КоличествоУпаковок                    КАК КоличествоУпаковок,
		|	ВтИзделия.КоличествоУпаковок                    КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	ВтИзделия.Номенклатура.ЕдиницаИзмерения         КАК ЕдиницаИзмерения,
		|	ВтИзделия.Упаковка                              КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО                                    КАК ДанныеУпаковки,
		|
		|	ОсновноеВыходноеИзделие.Количество              КАК КоличествоИзделие,
		|
		|	ЛОЖЬ                                            КАК Производится,
		|
		|	&ТекстПолеСклад                                 КАК Склад,
		|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)       КАК ЭтоЦеховаяКладовая,
		|	&ТекстПолеВариантОбеспечения                    КАК ВариантОбеспечения,
		|	&ТекстПолеОбособленно                           КАК Обособленно,
		|	ВтИзделия.СпособПолученияМатериала              КАК СпособПолученияМатериала,
		|	ВЫБОР
		|		КОГДА ВтИзделия.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.РемонтируемыеИзделия)
		|		КОГДА ВтИзделия.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.РазбираемыеИзделия)
		|	КОНЕЦ                                           КАК СтатьяКалькуляции,
		|
		|	ВтИзделия.Этап                                  КАК Этап,
		|	ВтИзделия.Этап                                  КАК ЭтапРедактирование,
		|
		|	ВтИзделия.Этап.Подразделение                    КАК ПодразделениеЭтапа,
		|
		|	ВтИзделия.Операция                              КАК Операция,
		|
		|	ВЫБОР ВтИзделия.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
		|	КОНЕЦ КАК ДнейОтПотребности,
		|
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьДоВыпуска, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВСекундах, 0) КАК ДлительностьДоВыпуска,
		|
		|	1                                               КАК КоэффициентВероятности,
		|	ВтИзделия.НачалоПроизводства                    КАК НачалоПроизводства,
		|
		// округление:
		|	ЕСТЬNULL(&ОкруглятьКоличествоШтучныхТоваров
		|		И ВтИзделия.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		И ВтИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		И &ТекстЗапросаТипИзмеряемойВеличины В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)), ЛОЖЬ)      КАК Округлить,
		|
		|	&ТипСтрокиВходящееИзделие                        КАК ТипСтроки,
		|
		|	&ПустойКлючСвязи                                 КАК КлючСвязи
		|
		|ИЗ
		|	ВтИзделия КАК ВтИзделия
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
		|		ПО ВтИзделия.Идентификатор = ОсновноеВыходноеИзделие.Идентификатор
		|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО ВтИзделия.Этап = НормативнаяДлительностьЭтапов.Этап
		|
				// Сюда подставляется запрос для получения склада, варианта обеспечения
		|		,ТекстСоединенияПараметрыОбеспечения
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО &ТекстПолеСклад = СпрСклады.Ссылка
		|
		|ГДЕ
		|	ВтИзделия.ВидИзделия = 1
		|
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор";
		
		ТекстПоляТипИзмеряемойВеличины = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"ТипИзмеряемойВеличины",
			"ВтИзделия.Упаковка",
			"ВтИзделия.Номенклатура");
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаТипИзмеряемойВеличины",
			ТекстПоляТипИзмеряемойВеличины);
			
		ОбеспечениеПроизводства.ВыполнитьПодстановкуПараметровОбеспеченияМатериалов(ТекстЗапроса,
			"ВтИзделия",
			"СпособПолученияМатериала",
			"Этап.Подразделение",
			Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения);
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Распоряжение", "ВтИзделия.Распоряжение");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Назначение"  , "ВтИзделия.Назначение");
			
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВходящиеИзделия");
		
	КонецЕсли;
	
	#КонецОбласти
	
//-- НЕ УТКА

	#Область МатериалыИУслуги
	
	Если ПереченьДанных.Найти("МатериалыИУслуги") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&МатериалыИУслуги_Представления,
		|	ОсновноеВыходноеИзделие.Идентификатор                  КАК Идентификатор,
		|	ВЫРАЗИТЬ(МатериалыИУслуги.НомерСтроки КАК ЧИСЛО(10,0)) КАК НомерСтроки,
		|	МатериалыИУслуги.Номенклатура                          КАК Номенклатура,
		|	МатериалыИУслуги.Характеристика                        КАК Характеристика,
		|	МатериалыИУслуги.Номенклатура.ТипНоменклатуры          КАК ТипНоменклатуры,
		|	ВЫБОР 
		|		КОГДА МатериалыИУслуги.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ЛюбаяХарактеристика,
		|
		|	0                                                 КАК Количество,
		|	МатериалыИУслуги.КоличествоУпаковок               КАК КоличествоУпаковок,
		|	МатериалыИУслуги.КоличествоУпаковок               КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
		|	МатериалыИУслуги.Упаковка                         КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО                                      КАК ДанныеУпаковки,
		|
		|	МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК ЕдиницаИзмеренияШтучная,
		|	ЕСТЬNULL(&ТекстЗапросаТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ)                   КАК УпаковкаШтучная,
		|
		|	ОсновноеВыходноеИзделие.Количество                КАК КоличествоИзделие,
		|
		|	МатериалыИУслуги.Этап                             КАК Этап,
		|	МатериалыИУслуги.Операция                         КАК Операция,
		|
		|	&ТекстПолеСклад                                   КАК Склад,
		|	&ТекстПолеВариантОбеспечения                      КАК ВариантОбеспечения,
		|	&ТекстПолеОбособленно                             КАК Обособленно,
		|	МатериалыИУслуги.Этап.Подразделение               КАК ПодразделениеЭтапа,
		|	МатериалыИУслуги.Этап.ПроизводствоНаСтороне       КАК ПроизводствоНаСтороне,
		|	МатериалыИУслуги.Этап.НомерЭтапа                  КАК НомерЭтапа,
		|	МатериалыИУслуги.Этап.НомерСледующегоЭтапа        КАК НомерСледующегоЭтапа,
		|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)         КАК ЭтоЦеховаяКладовая,
		|
		|	&ТекстПолеЗаказатьНаСклад                         КАК ЗаказатьНаСклад,
		|
		|	&ТекстПолеЗапланировать                           КАК Запланировать,
		|
		|	МатериалыИУслуги.СтатьяКалькуляции                КАК СтатьяКалькуляции,
		|
		|	ВЫБОР 
		|		КОГДА (МатериалыИУслуги.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|				ИЛИ МатериалыИУслуги.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|				И &ИспользоватьПараметризацию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ИспользуетсяАвтовыбор,
		|	ПРЕДСТАВЛЕНИЕ("""")                                КАК СведенияАвтовыбора,
		|	МатериалыИУслуги.СпособАвтовыбораНоменклатуры      КАК СпособАвтовыбораНоменклатуры,
		|	МатериалыИУслуги.СпособАвтовыбораХарактеристики    КАК СпособАвтовыбораХарактеристики,
		|	МатериалыИУслуги.СвойствоСодержащееНоменклатуру    КАК СвойствоСодержащееНоменклатуру,
		|	МатериалыИУслуги.АлгоритмАвтовыбораХарактеристики  КАК АлгоритмАвтовыбораХарактеристики,
		|
		// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА МатериалыИУслуги.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                              КАК АлгоритмРасчетаКоличества,
		|	ПРЕДСТАВЛЕНИЕ("""")                                КАК Формула,
		|	ПРЕДСТАВЛЕНИЕ("""")                                КАК ФормулаОшибкаРасчета,
		|
		// округление:
		|	ЕСТЬNULL(&ОкруглятьКоличествоШтучныхТоваров
		|		И МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		И МатериалыИУслуги.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		И &ТекстЗапросаТипИзмеряемойВеличины В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)) , ЛОЖЬ) КАК Округлить,
		|	
		|	МатериалыИУслуги.ПроизводитсяВПроцессе КАК Производится,
		|	МатериалыИУслуги.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе,
		|	МатериалыИУслуги.СпособПолученияМатериала КАК СпособПолученияМатериала,
		|	МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
		|
		//++ Устарело_Производство21
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
		|				И МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации)
		|		КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
		|				И МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПустаяСсылка)
		|	КОНЕЦ КАК СпособПолученияПолуфабриката,
		//-- Устарело_Производство21
		|
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.СпецификацияРемонта <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|			ТОГДА МатериалыИУслуги.СпецификацияРемонта
		|		ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.РесурсныеСпецификации), ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))
		|	КОНЕЦ КАК Спецификация,
		|
		|	МатериалыИУслуги.ПланироватьНеРанее  КАК ПланироватьНеРанее,
		|	МатериалыИУслуги.СпецификацияРемонта КАК СпецификацияРемонта,
		|
		|	ВЫБОР МатериалыИУслуги.Ссылка.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
		|	КОНЕЦ КАК ДнейОтПотребности,
		|
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьДоВыпуска, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВСекундах, 0) КАК ДлительностьДоВыпуска,
		|
		|	МатериалыИУслуги.ПрименениеМатериала КАК ПрименениеМатериала,
		|	МатериалыИУслуги.Альтернативный      КАК Альтернативный,
		|
		|	МатериалыИУслуги.Вероятность         КАК Вероятность,
		|	ВЫБОР
		|		КОГДА (МатериалыИУслуги.Альтернативный ИЛИ &СпособРасчетаМатериалов = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаМатериалов.ВероятноеПотребление))
		|				И МатериалыИУслуги.Вероятность > 0
		|			ТОГДА МатериалыИУслуги.Вероятность / 100
		|		ИНАЧЕ 1
		|	КОНЕЦ                                                     КАК КоэффициентВероятности,
		|
		|	ЛОЖЬ                                                      КАК ВходящееИзделие,
		|
		|	ОсновноеВыходноеИзделие.НачалоПроизводства                КАК НачалоПроизводства,
		|	ОсновноеВыходноеИзделие.ПодразделениеДиспетчер            КАК ПодразделениеДиспетчер,
		|
		|	ЛОЖЬ                                                      КАК Вспомогательный,
		//++ НЕ УТКА
		|	0                                                         КАК Порядок,
		|	ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка) КАК ОперацияРодитель,
		//-- НЕ УТКА
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
		|			ТОГДА &ТипСтрокиПолуфабрикат
		|		ИНАЧЕ &ТипСтрокиМатериал
		|	КОНЕЦ                                                     КАК ТипСтроки,
		|
		|	&ПустойКлючСвязи                                          КАК КлючСвязиНабор,
		|
		|	МатериалыИУслуги.КлючСвязи                                КАК КлючСвязи
		|ИЗ
		|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК МатериалыИУслуги
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
		|		ПО МатериалыИУслуги.Ссылка = ОсновноеВыходноеИзделие.Спецификация
		|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
		|
		|		,ТекстСоединенияЗаказатьНаСклад
		|
				// Сюда подставляется запрос для получения склада, варианта обеспечения
		|		,ТекстСоединенияПараметрыОбеспечения
		|
		//++ НЕ УТКА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
		|		ПО МатериалыИУслуги.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
		|			И ОсновноеВыходноеИзделие.Идентификатор = ВТОтборПоСвойствам.Идентификатор
		//-- НЕ УТКА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = МатериалыИУслуги.Этап
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО &ТекстПолеСклад = СпрСклады.Ссылка
		|
		|		,ТекстСоединенияСпособыОбеспечения
		|
		|ГДЕ
		|	(НЕ МатериалыИУслуги.Альтернативный ИЛИ &СпособРасчетаМатериалов В (
		|													ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаМатериалов.ВероятноеПотребление),
		|													ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаМатериалов.МаксимальноеПотребление)))
		//++ НЕ УТКА
		|	И ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
		//-- НЕ УТКА
		|
		|";
		
		ПолеЗаказатьНаСклад = ПараметрыПодстановкиПоляЗаказатьНаСклад("МатериалыИУслуги",, ПараметрыВыборки.ВариантЗаполненияОбеспечения);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолеЗаказатьНаСклад"      , ПолеЗаказатьНаСклад.ТекстПоля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",ТекстСоединенияЗаказатьНаСклад", ПолеЗаказатьНаСклад.ТекстСоединения);
		
		ОбеспечениеПроизводства.ВыполнитьПодстановкуПараметровОбеспеченияМатериалов(ТекстЗапроса,
			"МатериалыИУслуги",
			"СпособПолученияМатериала",
			"&Подразделение",
			ПараметрыВыборки.ВариантЗаполненияОбеспечения);
			
		ТекстПоляПодразделение = "
		|	(ВЫБОР
		|		КОГДА ОсновноеВыходноеИзделие.ПодразделениеИсполнитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА МатериалыИУслуги.Этап.Подразделение
		|		ИНАЧЕ ОсновноеВыходноеИзделие.ПодразделениеИсполнитель
		|	КОНЕЦ)
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Подразделение", ТекстПоляПодразделение);
		
		ТекстПолеЗапланировать = "ЛОЖЬ";
		ТекстСоединенияСпособыОбеспечения = "";
		Если ПараметрыВыборки.РассчитыватьПризнакЗапланироватьПроизводство Тогда
			ТекстПолеЗапланировать = ТекстПодстановкиПоляЗапланировать("ОсновноеВыходноеИзделие.ПодразделениеДиспетчер");
			ТекстСоединенияСпособыОбеспечения = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
				"ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособОбеспечения
				|	ПО &ПодстановкаОсновногоСпособаОбеспечения",
				"ПодстановкаОсновногоСпособаОбеспечения",
				"МатериалыИУслуги.Номенклатура, МатериалыИУслуги.Характеристика, СпрСклады.Ссылка");
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолеЗапланировать"           , ТекстПолеЗапланировать);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",ТекстСоединенияСпособыОбеспечения", ТекстСоединенияСпособыОбеспечения);
		
		//++ НЕ УТКА
		
		ТекстЗапросаДанныеТП = "
		|ВЫБРАТЬ
		|	&МатериалыИУслугиТП_Представления,
		|	ВтТехнологическиеПроцессы.Идентификатор                КАК Идентификатор,
		|	ВЫРАЗИТЬ(МатериалыИУслуги.НомерСтроки КАК ЧИСЛО(10,0)) КАК НомерСтроки,
		|	МатериалыИУслуги.Номенклатура                          КАК Номенклатура,
		|	МатериалыИУслуги.Характеристика                        КАК Характеристика,
		|	МатериалыИУслуги.Номенклатура.ТипНоменклатуры          КАК ТипНоменклатуры,
		|	ВЫБОР 
		|		КОГДА МатериалыИУслуги.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ЛюбаяХарактеристика,
		|
		|	0                                                                           КАК Количество,
		|	МатериалыИУслуги.КоличествоУпаковок * ВтТехнологическиеПроцессы.Коэффициент КАК КоличествоУпаковок,
		|	МатериалыИУслуги.КоличествоУпаковок * ВтТехнологическиеПроцессы.Коэффициент КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения                              КАК ЕдиницаИзмерения,
		|	МатериалыИУслуги.Упаковка                                                   КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО                                                                КАК ДанныеУпаковки,
		|
		|	МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК ЕдиницаИзмеренияШтучная,
		|	ЕСТЬNULL(&ТекстЗапросаТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ)                   КАК УпаковкаШтучная,
		|
		|	ОсновноеВыходноеИзделие.Количество                КАК КоличествоИзделие,
		|
		|	ВтТехнологическиеПроцессы.Этап                    КАК Этап,
		|	МатериалыИУслуги.Операция                         КАК Операция,
		|
		|	&ТекстПолеСклад                                   КАК Склад,
		|	&ТекстПолеВариантОбеспечения                      КАК ВариантОбеспечения,
		|	&ТекстПолеОбособленно                             КАК Обособленно,
		|	ВтТехнологическиеПроцессы.Этап.Подразделение      КАК ПодразделениеЭтапа,
		|	ЛОЖЬ                                              КАК ПроизводствоНаСтороне,
		|	ВтТехнологическиеПроцессы.НомерЭтапа              КАК НомерЭтапа,
		|	ВтТехнологическиеПроцессы.НомерСледующегоЭтапа    КАК НомерСледующегоЭтапа,
		|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)         КАК ЭтоЦеховаяКладовая,
		|
		|	ЛОЖЬ                                              КАК ЗаказатьНаСклад,
		|
		|	&ТекстПолеЗапланировать                           КАК Запланировать,
		|
		|	МатериалыИУслуги.СтатьяКалькуляции                КАК СтатьяКалькуляции,
		|
		|	ВЫБОР 
		|		КОГДА (МатериалыИУслуги.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|				ИЛИ МатериалыИУслуги.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ))
		|				И &ИспользоватьПараметризацию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ИспользуетсяАвтовыбор,
		|	ПРЕДСТАВЛЕНИЕ("""")                                КАК СведенияАвтовыбора,
		|	МатериалыИУслуги.СпособАвтовыбораНоменклатуры      КАК СпособАвтовыбораНоменклатуры,
		|	МатериалыИУслуги.СпособАвтовыбораХарактеристики    КАК СпособАвтовыбораХарактеристики,
		|	МатериалыИУслуги.СвойствоСодержащееНоменклатуру    КАК СвойствоСодержащееНоменклатуру,
		|	МатериалыИУслуги.АлгоритмАвтовыбораХарактеристики  КАК АлгоритмАвтовыбораХарактеристики,
		|
		// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА МатериалыИУслуги.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                              КАК АлгоритмРасчетаКоличества,
		|	ПРЕДСТАВЛЕНИЕ("""")                                КАК Формула,
		|	ПРЕДСТАВЛЕНИЕ("""")                                КАК ФормулаОшибкаРасчета,
		|
		// округление:
		|	ЕСТЬNULL(&ОкруглятьКоличествоШтучныхТоваров
		|		И МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		И МатериалыИУслуги.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		И &ТекстЗапросаТипИзмеряемойВеличины В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)), ЛОЖЬ)     КАК Округлить,
		|
		|	ЛОЖЬ                                                                         КАК Производится,
		|	ЛОЖЬ                                                                         КАК ПроизводитсяВПроцессе,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать)  КАК СпособПолученияМатериала,
		|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)                      КАК ИсточникПолученияПолуфабриката,
		//++ Устарело_Производство21
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПустаяСсылка) КАК СпособПолученияПолуфабриката,
		//-- Устарело_Производство21
		|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)                      КАК Спецификация,
		|	
		|	ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)                          КАК ПланироватьНеРанее,
		|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)                      КАК СпецификацияРемонта,
		|
		|	ВЫБОР ВтТехнологическиеПроцессы.Спецификация.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
		|	КОНЕЦ КАК ДнейОтПотребности,
		|
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьДоВыпуска, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВСекундах, 0) КАК ДлительностьДоВыпуска,
		|
		|	МатериалыИУслуги.ПрименениеМатериала           КАК ПрименениеМатериала,
		|	ЛОЖЬ                                           КАК Альтернативный,
		|
		|	0                                              КАК Вероятность,
		|	1                                              КАК КоэффициентВероятности,
		|	ЛОЖЬ                                           КАК ВходящееИзделие,
		|
		|	ОсновноеВыходноеИзделие.НачалоПроизводства     КАК НачалоПроизводства,
		|	ОсновноеВыходноеИзделие.ПодразделениеДиспетчер КАК ПодразделениеДиспетчер,
		|
		|	ИСТИНА                                                                                   КАК Вспомогательный,
		|	100000 * ВтТехнологическиеПроцессы.НомерЭтапа + ВтТехнологическиеПроцессы.НомерОперации  КАК Порядок,
		|	ВтТехнологическиеПроцессы.Операция                                                       КАК ОперацияРодитель,
		|	&ТипСтрокиМатериал                                                                       КАК ТипСтроки,
		|	&ПустойКлючСвязи                                                                         КАК КлючСвязиНабор,
		|
		|	МатериалыИУслуги.КлючСвязи                     КАК КлючСвязи
		|
		|ИЗ
		|	ВтТехнологическиеПроцессы КАК ВтТехнологическиеПроцессы
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеПроцессы.МатериалыИУслуги КАК МатериалыИУслуги
		|		ПО МатериалыИУслуги.Ссылка = ВтТехнологическиеПроцессы.ТехнологическийПроцесс
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
		|		ПО ВтТехнологическиеПроцессы.Идентификатор = ОсновноеВыходноеИзделие.Идентификатор
		|			И ВтТехнологическиеПроцессы.Спецификация = ОсновноеВыходноеИзделие.Спецификация
		|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
		|		ПО МатериалыИУслуги.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
		|			И ВтТехнологическиеПроцессы.Идентификатор = ВТОтборПоСвойствам.Идентификатор
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = ВтТехнологическиеПроцессы.Этап
		|
				// Сюда подставляется запрос для получения склада, варианта обеспечения
		|		,ТекстСоединенияПараметрыОбеспечения
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО &ТекстПолеСклад = СпрСклады.Ссылка
		|
		|		,ТекстСоединенияСпособыОбеспечения
		|
		|ГДЕ
		|	ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
		|
		|";
		
		ОбеспечениеПроизводства.ВыполнитьПодстановкуПараметровОбеспеченияМатериалов(ТекстЗапросаДанныеТП,
			"МатериалыИУслуги",
			,
			"&Подразделение",
			ПараметрыВыборки.ВариантЗаполненияОбеспечения);
			
		ТекстПоляПодразделение = "
		|	(ВЫБОР
		|		КОГДА ОсновноеВыходноеИзделие.ПодразделениеИсполнитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА ВтТехнологическиеПроцессы.Этап.Подразделение
		|		ИНАЧЕ ОсновноеВыходноеИзделие.ПодразделениеИсполнитель
		|	КОНЕЦ)
		|";
			
		ТекстЗапросаДанныеТП = СтрЗаменить(ТекстЗапросаДанныеТП, "&Подразделение", ТекстПоляПодразделение);
		ТекстЗапросаДанныеТП = СтрЗаменить(ТекстЗапросаДанныеТП, "МатериалыИУслуги.СпособПолученияМатериала", "ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать)");
		ТекстЗапросаДанныеТП = СтрЗаменить(ТекстЗапросаДанныеТП, "МатериалыИУслуги.Обособленно", "ЛОЖЬ");
		
		ТекстПолеЗапланировать = "ЛОЖЬ";
		ТекстСоединенияСпособыОбеспечения = "";
		Если ПараметрыВыборки.РассчитыватьПризнакЗапланироватьПроизводство Тогда
			ТекстПолеЗапланировать = ТекстПодстановкиПоляЗапланировать(
				"ОсновноеВыходноеИзделие.ПодразделениеДиспетчер",,
				"ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)");
			ТекстСоединенияСпособыОбеспечения = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
				"ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособОбеспечения
				|	ПО &ПодстановкаОсновногоСпособаОбеспечения",
				"ПодстановкаОсновногоСпособаОбеспечения",
				"МатериалыИУслуги.Номенклатура, МатериалыИУслуги.Характеристика, СпрСклады.Ссылка");
		КонецЕсли;
		ТекстЗапросаДанныеТП = СтрЗаменить(ТекстЗапросаДанныеТП, "&ТекстПолеЗапланировать"           , ТекстПолеЗапланировать);
		ТекстЗапросаДанныеТП = СтрЗаменить(ТекстЗапросаДанныеТП, ",ТекстСоединенияСпособыОбеспечения", ТекстСоединенияСпособыОбеспечения);
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + ТекстЗапросаДанныеТП;
		
		Если ЕстьПромежуточныйВыпуск Тогда
			
			ТекстЗапросаДанныеПВ = "
			|ВЫБРАТЬ
			|	&МатериалыПВ_Представления,
			|	ОсновноеВыходноеИзделие.Идентификатор КАК Идентификатор,
			|	ВЫРАЗИТЬ(Материалы.НомерСтроки КАК ЧИСЛО(10,0)) + 10000 КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА Материалы.Номенклатура
			|		КОГДА НоменклатураНовая.НоменклатураПромежуточногоВыпуска ЕСТЬ НЕ NULL
			|			ТОГДА НоменклатураНовая.НоменклатураПромежуточногоВыпуска
			|		ИНАЧЕ ЕСТЬNULL(НоменклатураПодобранная.НоменклатураПромежуточногоВыпуска, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
			|	КОНЕЦ КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА Материалы.Характеристика
			|		КОГДА НоменклатураНовая.НоменклатураПромежуточногоВыпуска ЕСТЬ НЕ NULL
			|			ТОГДА НоменклатураНовая.ХарактеристикаПромежуточногоВыпуска
			|		ИНАЧЕ ЕСТЬNULL(НоменклатураПодобранная.ХарактеристикаПромежуточногоВыпуска, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
			|	КОНЕЦ КАК Характеристика,
			|
			|	ВЫБОР
			|		КОГДА Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА Материалы.Номенклатура.ТипНоменклатуры
			|		ИНАЧЕ ОсновноеВыходноеИзделие.Номенклатура.ТипНоменклатуры
			|	КОНЕЦ КАК ТипНоменклатуры,
			|	ВЫБОР
			|		КОГДА Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА Материалы.Номенклатура.ИспользованиеХарактеристик В (
			|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
			|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
			|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
			|		ИНАЧЕ ОсновноеВыходноеИзделие.Номенклатура.ИспользованиеХарактеристик В (
			|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
			|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
			|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
			|	КОНЕЦ КАК ХарактеристикиИспользуются,
			|	ВЫБОР
			|		КОГДА Материалы.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЛюбаяХарактеристика,
			|
			|	ОсновноеВыходноеИзделие.Количество      КАК Количество,
			|	ОсновноеВыходноеИзделие.Количество      КАК КоличествоУпаковок,
			|	ОсновноеВыходноеИзделие.Количество      КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
			|	ВЫБОР
			|		КОГДА Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА Материалы.Номенклатура.ЕдиницаИзмерения
			|		ИНАЧЕ ОсновноеВыходноеИзделие.Номенклатура.ЕдиницаИзмерения
			|	КОНЕЦ КАК ЕдиницаИзмерения,
			|
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
			|	НЕОПРЕДЕЛЕНО КАК ДанныеУпаковки,
			|
			|	ВЫБОР
			|		КОГДА Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА Материалы.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
			|		ИНАЧЕ ОсновноеВыходноеИзделие.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
			|	КОНЕЦ КАК ЕдиницаИзмеренияШтучная,
			|	ЛОЖЬ КАК УпаковкаШтучная,
			|
			|	ОсновноеВыходноеИзделие.Количество КАК КоличествоИзделие,
			|
			|	Материалы.ЭтапПолучатель     КАК Этап,
			|	Материалы.ОперацияПолучатель КАК Операция,
			|
			|	&ТекстПолеСклад                                         КАК Склад,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению) КАК ВариантОбеспечения,
			|	ИСТИНА                                                  КАК Обособленно,
			|
			|	Материалы.ЭтапПолучатель.Подразделение         КАК ПодразделениеЭтапа,
			|	Материалы.ЭтапПолучатель.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
			|	Материалы.ЭтапПолучатель.НомерЭтапа            КАК НомерЭтапа,
			|	Материалы.ЭтапПолучатель.НомерСледующегоЭтапа  КАК НомерСледующегоЭтапа,
			|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)  КАК ЭтоЦеховаяКладовая,
			|
			|	ЛОЖЬ КАК ЗаказатьНаСклад,
			|
			|	ЛОЖЬ КАК Запланировать,
			|
			|	ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе) КАК СтатьяКалькуляции,
			|
			|	ЛОЖЬ                КАК ИспользуетсяАвтовыбор,
			|	ПРЕДСТАВЛЕНИЕ("""") КАК СведенияАвтовыбора,
			|	НЕОПРЕДЕЛЕНО        КАК СпособАвтовыбораНоменклатуры,
			|	НЕОПРЕДЕЛЕНО        КАК СпособАвтовыбораХарактеристики,
			|	НЕОПРЕДЕЛЕНО        КАК СвойствоСодержащееНоменклатуру,
			|	""""                КАК АлгоритмАвтовыбораХарактеристики,
			|
			// расчет по формуле:
			|	""""                КАК АлгоритмРасчетаКоличества,
			|	ПРЕДСТАВЛЕНИЕ("""") КАК Формула,
			|	ПРЕДСТАВЛЕНИЕ("""") КАК ФормулаОшибкаРасчета,
			|
			// округление:
			|	ЛОЖЬ КАК Округлить,
			|
			|	ИСТИНА КАК Производится,
			|	ИСТИНА КАК ПроизводитсяВПроцессе,
			|	ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе) КАК СпособПолученияМатериала,
			|	Материалы.ЭтапОтправитель КАК ИсточникПолученияПолуфабриката,
			|
			//++ Устарело_Производство21
			|	ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПустаяСсылка) КАК СпособПолученияПолуфабриката,
			//-- Устарело_Производство21
			|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка) КАК Спецификация,
			|	
			|	ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)     КАК ПланироватьНеРанее,
			|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка) КАК СпецификацияРемонта,
			|
			|	ВЫБОР ОсновноеВыходноеИзделие.ТипПроизводственногоПроцесса
			|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
			|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
			|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
			|	КОНЕЦ КАК ДнейОтПотребности,
			|
			|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьДоВыпуска, 0) + ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВСекундах, 0) КАК ДлительностьДоВыпуска,
			|
			|	""""                                           КАК ПрименениеМатериала,
			|	ЛОЖЬ                                           КАК Альтернативный,
			|
			|	0                                              КАК Вероятность,
			|	1                                              КАК КоэффициентВероятности,
			|	ЛОЖЬ                                           КАК ВходящееИзделие,
			|
			|	ОсновноеВыходноеИзделие.НачалоПроизводства     КАК НачалоПроизводства,
			|	ОсновноеВыходноеИзделие.ПодразделениеДиспетчер КАК ПодразделениеДиспетчер,
			|
			|	ЛОЖЬ                                                      КАК Вспомогательный,
			|	0                                                         КАК Порядок,
			|	ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка) КАК ОперацияРодитель,
			|	&ТипСтрокиПромежуточныйПолуфабрикат                       КАК ТипСтроки,
			|	&ПустойКлючСвязи                                          КАК КлючСвязиНабор,
			|	Материалы.КлючСвязи                                       КАК КлючСвязи
			|ИЗ
			|	ВтПромежуточныйВыпуск КАК Материалы
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
			|		ПО Материалы.Ссылка = ОсновноеВыходноеИзделие.Спецификация
			|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтНоменклатураПромежуточногоВыпускаНовая КАК НоменклатураНовая
			|		ПО ОсновноеВыходноеИзделие.Номенклатура = НоменклатураНовая.Номенклатура
			|			И ОсновноеВыходноеИзделие.Характеристика = НоменклатураНовая.Характеристика
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтНоменклатураПромежуточногоВыпускаПодобранная КАК НоменклатураПодобранная
			|		ПО ОсновноеВыходноеИзделие.Номенклатура = НоменклатураПодобранная.Номенклатура
			|			И ОсновноеВыходноеИзделие.Характеристика = НоменклатураПодобранная.Характеристика
			|
					// Сюда подставляется запрос для получения склада
			|		,ТекстСоединенияПараметрыОбеспечения
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
			|		ПО НормативнаяДлительностьЭтапов.Этап = Материалы.ЭтапПолучатель
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
			|		ПО &ТекстПолеСклад = СпрСклады.Ссылка
			|";
			
			ОбеспечениеПроизводства.ВыполнитьПодстановкуПараметровОбеспеченияМатериалов(ТекстЗапросаДанныеПВ,
				"ОсновноеВыходноеИзделие",
				,
				"&Подразделение",
				ПараметрыВыборки.ВариантЗаполненияОбеспечения);
			ТекстПоляПодразделение = "
			|	(ВЫБОР
			|		КОГДА ОсновноеВыходноеИзделие.ПодразделениеИсполнитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|			ТОГДА Материалы.ЭтапПолучатель.Подразделение
			|		ИНАЧЕ ОсновноеВыходноеИзделие.ПодразделениеИсполнитель
			|	КОНЕЦ)
			|";
			ТекстЗапросаДанныеПВ = СтрЗаменить(ТекстЗапросаДанныеПВ, "&Подразделение", ТекстПоляПодразделение);
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстЗапросаДанныеПВ;
			
		КонецЕсли;
		//-- НЕ УТКА
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор,
		//++ НЕ УТКА
		|	Порядок,
		//-- НЕ УТКА
		|	НомерСтроки";
		
		ТекстПоляТипИзмеряемойВеличины = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"ТипИзмеряемойВеличины",
			"МатериалыИУслуги.Упаковка",
			"МатериалыИУслуги.Номенклатура");
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаТипИзмеряемойВеличины",
			ТекстПоляТипИзмеряемойВеличины);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Распоряжение", "ОсновноеВыходноеИзделие.Распоряжение");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Назначение",   "ОсновноеВыходноеИзделие.Назначение"); 
		
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "МатериалыИУслуги");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Трудозатраты
	
	Если ПереченьДанных.Найти("Трудозатраты") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОсновноеВыходноеИзделие.Идентификатор           КАК Идентификатор,
		|	Трудозатраты.НомерСтроки                        КАК НомерСтроки,
		|	Трудозатраты.ВидРабот                           КАК ВидРабот,
		|	Трудозатраты.ВидРабот.ЕдиницаИзмерения          КАК ЕдиницаИзмерения,
		|	ОсновноеВыходноеИзделие.Количество              КАК КоличествоИзделие,
		|	Трудозатраты.СтатьяКалькуляции                  КАК СтатьяКалькуляции,
		|	Трудозатраты.НазначениеРабот                    КАК НазначениеРабот,
		|
		|	Трудозатраты.Количество КАК Количество,
		|	Трудозатраты.Количество КАК КоличествоНаЕдиницуПартииВыпуска,
		|
		|	ВЫБОР Трудозатраты.Ссылка.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
		|	КОНЕЦ КАК ДнейОтПотребности,
		|
		|	Трудозатраты.Этап                                            КАК Этап,
		|	Трудозатраты.Операция                                        КАК Операция,
		|
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0) КАК ДлительностьЭтапаВДнях,
		|
		|	Трудозатраты.Этап.ДлительностьЭтапа                          КАК ДлительностьЭтапа,
		|	Трудозатраты.Этап.Подразделение                              КАК ПодразделениеЭтапа,
		|
		// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА Трудозатраты.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                                        КАК АлгоритмРасчетаКоличества,
		|	ПРЕДСТАВЛЕНИЕ("""")                                          КАК Формула,
		|	ПРЕДСТАВЛЕНИЕ("""")                                          КАК ФормулаОшибкаРасчета,
		|
		|	Трудозатраты.КлючСвязи КАК КлючСвязи,
		//++ НЕ УТКА
		|	0                                                            КАК Порядок,
		|	ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка)    КАК ОперацияРодитель,
		//-- НЕ УТКА
		|	ЛОЖЬ                                                         КАК Вспомогательный
		|
		|ИЗ
		|	Справочник.РесурсныеСпецификации.Трудозатраты КАК Трудозатраты
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
		|		ПО Трудозатраты.Ссылка = ОсновноеВыходноеИзделие.Спецификация
		|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
		|
		//++ НЕ УТКА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
		|		ПО Трудозатраты.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
		|			И ОсновноеВыходноеИзделие.Идентификатор = ВТОтборПоСвойствам.Идентификатор
		//-- НЕ УТКА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = Трудозатраты.Этап
		|
		//++ НЕ УТКА
		|ГДЕ
		|	ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтТехнологическиеПроцессы.Идентификатор         КАК Идентификатор,
		|	Трудозатраты.НомерСтроки                        КАК НомерСтроки,
		|	Трудозатраты.ВидРабот                           КАК ВидРабот,
		|	Трудозатраты.ВидРабот.ЕдиницаИзмерения          КАК ЕдиницаИзмерения,
		|	ОсновноеВыходноеИзделие.Количество              КАК КоличествоИзделие,
		|	Трудозатраты.СтатьяКалькуляции                  КАК СтатьяКалькуляции,
		|	Трудозатраты.НазначениеРабот                    КАК НазначениеРабот,
		|
		|	Трудозатраты.Количество * ВтТехнологическиеПроцессы.Коэффициент КАК Количество,
		|	Трудозатраты.Количество * ВтТехнологическиеПроцессы.Коэффициент КАК КоличествоНаЕдиницуПартииВыпуска,
		|
		|	ВЫБОР ВтТехнологическиеПроцессы.Спецификация.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
		|	КОНЕЦ КАК ДнейОтПотребности,
		|
		|	ВтТехнологическиеПроцессы.Этап                               КАК Этап,
		|	Трудозатраты.Операция                                        КАК Операция,
		|
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0) КАК ДлительностьЭтапаВДнях,
		|
		|	ВтТехнологическиеПроцессы.Этап.ДлительностьЭтапа             КАК ДлительностьЭтапа,
		|	ВтТехнологическиеПроцессы.Этап.Подразделение                 КАК ПодразделениеЭтапа,
		|
		|	// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА Трудозатраты.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                                        КАК АлгоритмРасчетаКоличества,
		|	ПРЕДСТАВЛЕНИЕ("""")                                          КАК Формула,
		|	ПРЕДСТАВЛЕНИЕ("""")                                          КАК ФормулаОшибкаРасчета,
		|
		|	Трудозатраты.КлючСвязи КАК КлючСвязи,
		|
		|	100000 * ВтТехнологическиеПроцессы.НомерЭтапа + ВтТехнологическиеПроцессы.НомерОперации  КАК Порядок,
		|	ВтТехнологическиеПроцессы.Операция                                                       КАК ОперацияРодитель,
		|
		|	ИСТИНА                                                       КАК Вспомогательный
		|
		|ИЗ
		|	ВтТехнологическиеПроцессы КАК ВтТехнологическиеПроцессы
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеПроцессы.Трудозатраты КАК Трудозатраты
		|		ПО Трудозатраты.Ссылка = ВтТехнологическиеПроцессы.ТехнологическийПроцесс
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
		|		ПО ВтТехнологическиеПроцессы.Идентификатор = ОсновноеВыходноеИзделие.Идентификатор
		|			И ВтТехнологическиеПроцессы.Спецификация = ОсновноеВыходноеИзделие.Спецификация
		|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
		|		ПО Трудозатраты.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
		|			И ВтТехнологическиеПроцессы.Идентификатор = ВТОтборПоСвойствам.Идентификатор
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = ВтТехнологическиеПроцессы.Этап
		|
		|ГДЕ
		|	ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
		|
		//-- НЕ УТКА
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор,
		//++ НЕ УТКА
		|	Порядок,
		//-- НЕ УТКА
		|	НомерСтроки
		|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "Трудозатраты");
		
	КонецЕсли;
	
	#КонецОбласти
	
//++ НЕ УТКА

	#Область ВидыРабочихЦентров
	
	Если ПереченьДанных.Найти("ВидыРабочихЦентров") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ВидыРабочихЦентров_Представления,
		|	ОсновноеВыходноеИзделие.Идентификатор           КАК Идентификатор,
		|	ТабличнаяЧасть.ВидРабочегоЦентра                КАК ВидРабочегоЦентра,
		|	ТабличнаяЧасть.КлючСвязи                        КАК КлючСвязи,
		|	ОсновноеВыходноеИзделие.Количество              КАК КоличествоИзделие,
		|
		|	ВТВремяРаботы.ВремяРаботы                       КАК ВремяРаботы,
		|	ВТВремяРаботы.ВремяРаботы                       КАК ВремяРаботыНаЕдиницуПартииВыпуска,
		|	ВТВремяРаботы.ЕдиницаИзмерения                  КАК ЕдиницаИзмерения,
		|	ВТВремяРаботы.РассчитатьЗанятость               КАК РассчитатьЗанятость,
		|	0                                               КАК Занятость,
		|	0                                               КАК ЗанятостьНаЕдиницуПартииВыпуска,
		|
		|	ТабличнаяЧасть.ВариантНаладки                   КАК ВариантНаладки,
		|	ТабличнаяЧасть.Загрузка                         КАК Загрузка,
		|	ЭтапыПроизводства.ДлительностьЭтапа             КАК ДлительностьЭтапа,
		|
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДлительностьВДнях, 0) КАК ДлительностьЭтапаВДнях,
		|
		|	ВЫБОР РесурсныеСпецификации.ТипПроизводственногоПроцесса
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|			ТОГДА ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейОтНачала, 0)
		|		ИНАЧЕ - ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания, 0)
		|	КОНЕЦ                                                        КАК ДнейОтПотребности,
		|
		// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА ТабличнаяЧасть.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                                                   КАК АлгоритмРасчетаКоличества,
		|	ПРЕДСТАВЛЕНИЕ("""")                                                     КАК Формула,
		|	ПРЕДСТАВЛЕНИЕ("""")                                                     КАК ФормулаОшибкаРасчета,
		|
		|	ЭтапыПроизводства.Ссылка                                                КАК Этап,
		|	ЭтапыПроизводства.Подразделение                                         КАК ПодразделениеЭтапа,
		|	ЭтапыПроизводства.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий КАК ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ТабличнаяЧасть
		|		ПО ТабличнаяЧасть.Ссылка = ЭтапыПроизводства.Ссылка
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИзделия КАК ОсновноеВыходноеИзделие
		|		ПО ЭтапыПроизводства.Владелец = ОсновноеВыходноеИзделие.Спецификация
		|			И ОсновноеВыходноеИзделие.ЭтоОсновноеИзделие
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяРаботыВидовРабочихЦентров КАК ВТВремяРаботы
		|		ПО ТабличнаяЧасть.Ссылка = ВТВремяРаботы.Этап
		|			И ТабличнаяЧасть.ВидРабочегоЦентра = ВТВремяРаботы.ВидРабочегоЦентра
		|			И ТабличнаяЧасть.КлючСвязи = ВТВремяРаботы.КлючСвязи
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|		ПО РесурсныеСпецификации.Ссылка = ЭтапыПроизводства.Владелец
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
		|		ПО ТабличнаяЧасть.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
		|			И ОсновноеВыходноеИзделие.Идентификатор = ВТОтборПоСвойствам.Идентификатор
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = ЭтапыПроизводства.Ссылка
		|
		|ГДЕ
		|	НЕ ЭтапыПроизводства.ПометкаУдаления
		|	И ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор, ТабличнаяЧасть.НомерСтроки";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВидыРабочихЦентров");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область АльтернативныеВидыРабочихЦентров
	
	Если ПереченьДанных.Найти("АльтернативныеВидыРабочихЦентров") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВтДанныеПоНоменклатуре.Идентификатор                     КАК Идентификатор,
		|	ТабличнаяЧастьАльтернативные.ВидРабочегоЦентра           КАК ВидРабочегоЦентра,
		|	ТабличнаяЧастьАльтернативные.КлючСвязиВидыРабочихЦентров КАК КлючСвязиВидыРабочихЦентров,
		|
		|	ВТВремяРаботы.ВремяРаботы                                КАК ВремяРаботы,
		|	ВТВремяРаботы.ВремяРаботы                                КАК ВремяРаботыНаЕдиницуПартииВыпуска,
		|	ВТВремяРаботы.ЕдиницаИзмерения                           КАК ЕдиницаИзмерения,
		|
		|	ТабличнаяЧастьАльтернативные.ВариантНаладки              КАК ВариантНаладки,
		|	ТабличнаяЧастьАльтернативные.Загрузка                    КАК Загрузка,
		|	ТабличнаяЧасть.ВидРабочегоЦентра                         КАК ОсновнойВидРабочегоЦентра,
		|
		// расчет по формуле:
		|	ВЫБОР
		|		КОГДА &ИспользоватьПараметризацию
		|			ТОГДА ТабличнаяЧастьАльтернативные.АлгоритмРасчетаКоличества
		|		ИНАЧЕ """" 
		|	КОНЕЦ                                                                   КАК АлгоритмРасчетаКоличества,
		|	ПРЕДСТАВЛЕНИЕ("""")                                                     КАК Формула,
		|	ПРЕДСТАВЛЕНИЕ("""")                                                     КАК ФормулаОшибкаРасчета,
		|
		|	ЭтапыПроизводства.Ссылка                                                КАК Этап,
		|	ЭтапыПроизводства.Подразделение                                         КАК ПодразделениеЭтапа,
		|	ЭтапыПроизводства.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий КАК ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ТабличнаяЧасть
		|		ПО ЭтапыПроизводства.Ссылка = ТабличнаяЧасть.Ссылка
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.АльтернативныеВидыРабочихЦентров КАК ТабличнаяЧастьАльтернативные
		|		ПО ТабличнаяЧасть.Ссылка = ТабличнаяЧастьАльтернативные.Ссылка
		|			И ТабличнаяЧасть.КлючСвязи = ТабличнаяЧастьАльтернативные.КлючСвязиВидыРабочихЦентров
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
		|		ПО ЭтапыПроизводства.Владелец = ВтДанныеПоНоменклатуре.Спецификация
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяРаботыВидовРабочихЦентров КАК ВТВремяРаботы
		|		ПО ТабличнаяЧастьАльтернативные.Ссылка = ВТВремяРаботы.Этап
		|			И ТабличнаяЧастьАльтернативные.ВидРабочегоЦентра = ВТВремяРаботы.ВидРабочегоЦентра
		|			И ТабличнаяЧастьАльтернативные.КлючСвязи = ВТВремяРаботы.КлючСвязи
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствам
		|		ПО ТабличнаяЧасть.КлючСвязи = ВТОтборПоСвойствам.КлючСвязи
		|			И ВтДанныеПоНоменклатуре.Идентификатор = ВТОтборПоСвойствам.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборПоСвойствам КАК ВТОтборПоСвойствамАльтернативные
		|		ПО ТабличнаяЧастьАльтернативные.КлючСвязи = ВТОтборПоСвойствамАльтернативные.КлючСвязи
		|			И ВтДанныеПоНоменклатуре.Идентификатор = ВТОтборПоСвойствамАльтернативные.Идентификатор
		|
		|ГДЕ
		|	НЕ ЭтапыПроизводства.ПометкаУдаления
		|	И ЕСТЬNULL(ВТОтборПоСвойствам.Используется, ИСТИНА)
		|	И ЕСТЬNULL(ВТОтборПоСвойствамАльтернативные.Используется, ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор, ТабличнаяЧасть.НомерСтроки";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "АльтернативныеВидыРабочихЦентров");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ТехнологическиеОперации
	
	Если ПереченьДанных.Найти("Операции") <> Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВтДанныеПоНоменклатуре.Идентификатор          КАК Идентификатор,
		|
		|	Операции.Ссылка                 КАК Операция,
		|	Операции.Представление          КАК ОперацияПредставление,
		|	Операции.Идентификатор          КАК ОперацияИдентификатор,
		|	Операции.ВидОперации            КАК ВидОперации,
		|	Операции.ЕдиницаИзмерения       КАК ЕдиницаИзмерения,
		|	Операции.Загрузка               КАК Загрузка,
		|	Операции.Непрерывная            КАК Непрерывная,
		|	Операции.МожноПовторить         КАК МожноПовторить,
		|	Операции.МожноПропустить        КАК МожноПропустить,
		|	Операции.Контроль               КАК Контроль,
		|
		|	Операции.РабочийЦентр      КАК РабочийЦентр,
		|	Операции.ВариантНаладки    КАК ВариантНаладки,
		|	Операции.ВремяШтучное      КАК ВремяШтучное,
		|	Операции.ВремяШтучноеЕдИзм КАК ВремяШтучноеЕдИзм,
		|	Операции.ВремяПЗ           КАК ВремяПЗ,
		|	Операции.ВремяПЗЕдИзм      КАК ВремяПЗЕдИзм,
		|
		|	Операции.НомерОперации                  КАК ИсходныйНомерОперации,
		|	Операции.НомерСледующейОперации         КАК ИсходныйНомерСледующейОперации,
		|
		|	Операции.Количество                     КАК Количество,
		|
		|	Операции.ТехнологическийПроцесс         КАК ТехнологическийПроцесс,
		|	1                                       КАК КоэффициентТехнологическогоПроцесса,
		|	Операции.СодержитТехнологическийПроцесс КАК СодержитТехнологическийПроцесс,
		|	Операции.СодержитТехнологическийПроцесс КАК СодержитВложенныйМаршрут,
		|
		|	ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка)               КАК ОперацияРодитель,
		|	0                                                                       КАК ОперацияРодительИдентификатор,
		|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.ЭтапыПроизводства)            КАК Этап,
		|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.ЭтапыПроизводства).НомерЭтапа КАК НомерЭтапа
		|
		|ПОМЕСТИТЬ ВтОперации
		|
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК Операции
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
		|		ПО Операции.Спецификация = ВтДанныеПоНоменклатуре.Спецификация
		|			И НЕ Операции.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтДанныеПоНоменклатуре.Идентификатор          КАК Идентификатор,
		|
		|	ОперацииТП.Ссылка                 КАК Операция,
		|	ОперацииТП.Представление          КАК ОперацияПредставление,
		|	ОперацииТП.Идентификатор          КАК ОперацияИдентификатор,
		|	ОперацииТП.ВидОперации            КАК ВидОперации,
		|	ОперацииТП.ЕдиницаИзмерения       КАК ЕдиницаИзмерения,
		|	ОперацииТП.Загрузка               КАК Загрузка,
		|	ОперацииТП.Непрерывная            КАК Непрерывная,
		|	ОперацииТП.МожноПовторить         КАК МожноПовторить,
		|	ОперацииТП.МожноПропустить        КАК МожноПропустить,
		|	ОперацииТП.Контроль               КАК Контроль,
		|
		|	ОперацииТП.РабочийЦентр      КАК РабочийЦентр,
		|	ОперацииТП.ВариантНаладки    КАК ВариантНаладки,
		|	ОперацииТП.ВремяШтучное      КАК ВремяШтучное,
		|	ОперацииТП.ВремяШтучноеЕдИзм КАК ВремяШтучноеЕдИзм,
		|	ОперацииТП.ВремяПЗ           КАК ВремяПЗ,
		|	ОперацииТП.ВремяПЗЕдИзм      КАК ВремяПЗЕдИзм,
		|
		|	ОперацииТП.НомерОперации          КАК ИсходныйНомерОперации,
		|	ОперацииТП.НомерСледующейОперации КАК ИсходныйНомерСледующейОперации,
		|
		|	ОперацииТП.Количество             КАК Количество,
		|
		|	Операции.ТехнологическийПроцесс              КАК ТехнологическийПроцесс,
		|	Операции.КоэффициентТехнологическогоПроцесса КАК КоэффициентТехнологическогоПроцесса,
		|	ЛОЖЬ                                         КАК СодержитТехнологическийПроцесс,
		|	ЛОЖЬ                                         КАК СодержитВложенныйМаршрут,
		|
		|	Операции.Ссылка                                                         КАК ОперацияРодитель,
		|	Операции.Идентификатор                                                  КАК ОперацияРодительИдентификатор,
		|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.ЭтапыПроизводства)            КАК Этап,
		|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.ЭтапыПроизводства).НомерЭтапа КАК НомерЭтапа
		|
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК Операции
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
		|		ПО Операции.Спецификация = ВтДанныеПоНоменклатуре.Спецификация
		|			И НЕ Операции.ПометкаУдаления
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК ОперацииТП
		|		ПО Операции.СодержитТехнологическийПроцесс
		|			И Операции.ТехнологическийПроцесс = ОперацииТП.Владелец
		|			И НЕ ОперацииТП.ПометкаУдаления
		|
		|";
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ВтОперации");

		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Операции.Идентификатор          КАК Идентификатор,
		|
		|	Операции.Операция               КАК Операция,
		|	Операции.Операция.Представление КАК ОперацияПредставление,
		|	Операции.ОперацияИдентификатор  КАК ОперацияИдентификатор,
		|	Операции.ВидОперации            КАК ВидОперации,
		|	Операции.ЕдиницаИзмерения       КАК ЕдиницаИзмерения,
		|	Операции.Загрузка               КАК Загрузка,
		|	Операции.Непрерывная            КАК Непрерывная,
		|	Операции.МожноПовторить         КАК МожноПовторить,
		|	Операции.МожноПропустить        КАК МожноПропустить,
		|	Операции.Контроль               КАК Контроль,
		|
		|	Операции.ИсходныйНомерОперации          КАК ИсходныйНомерОперации,
		|	Операции.ИсходныйНомерСледующейОперации КАК ИсходныйНомерСледующейОперации,
		|
		|	Операции.Количество                     КАК Количество,
		|
		|	Операции.ТехнологическийПроцесс              КАК ТехнологическийПроцесс,
		|	Операции.КоэффициентТехнологическогоПроцесса КАК КоэффициентТехнологическогоПроцесса,
		|	Операции.СодержитТехнологическийПроцесс      КАК СодержитТехнологическийПроцесс,
		|	Операции.СодержитВложенныйМаршрут            КАК СодержитВложенныйМаршрут,
		|
		|	Операции.ОперацияРодитель              КАК ОперацияРодитель,
		|	Операции.ОперацияРодительИдентификатор КАК ОперацияРодительИдентификатор,
		|	Операции.Этап                          КАК Этап,
		|	Операции.НомерЭтапа                    КАК НомерЭтапа,
		|
		|	0                                   КАК ИдентификаторОперации,
		|	0                                   КАК НомерОперации,
		|	0                                   КАК НомерСледующейОперации,
		|	Операции.ВариантНаладки             КАК ВариантНаладки,
		|	&ПустойКлючСвязи                    КАК КлючСвязи,
		|	&ПустойКлючСвязи                    КАК КлючСвязиРодитель,
		|
		|	&ТекстРеквизитыИсполнителяОперации,
		|	&ТекстРеквизитыРасчетаВремениВыполненияОперации
		|
		|ИЗ
		|	ВтОперации КАК Операции
		|
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор,
		|	НомерЭтапа,
		|	ОперацияРодитель <> ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка),
		|	ИсходныйНомерОперации
		|";
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстРеквизитыИсполнителяОперации",
			Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыИсполнителяОперации("Операции"));
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстРеквизитыРасчетаВремениВыполненияОперации",
			Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыРасчетаВремениВыполненияОперации("Операции"));
		
		ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "Операции");
		
	КонецЕсли;
	
	#КонецОбласти
	
//-- НЕ УТКА

	#Область ДанныеУпаковок
	
	ОписаниеТаблиц = Новый Массив;
	ОписаниеТаблиц.Добавить("ВтИзделия");
	Если ПереченьДанных.Найти("МатериалыИУслуги") <> Неопределено Тогда
		ОписаниеТаблицы = УправлениеДаннымиОбИзделиях.ОписаниеТаблицыТекстаЗапросаДанныеУпаковок();
		ОписаниеТаблицы.ИмяТаблицы = "Справочник.РесурсныеСпецификации.МатериалыИУслуги";
		ОписаниеТаблицы.ТекстСоединения = "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
			|		ПО Т.Ссылка = ВтДанныеПоНоменклатуре.Спецификация";
		ОписаниеТаблиц.Добавить(ОписаниеТаблицы);
		//++ НЕ УТКА
		ОписаниеТаблицы = УправлениеДаннымиОбИзделиях.ОписаниеТаблицыТекстаЗапросаДанныеУпаковок();
		ОписаниеТаблицы.ИмяТаблицы = "Справочник.ТехнологическиеПроцессы.МатериалыИУслуги";
		ОписаниеТаблицы.ТекстСоединения = "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТехнологическиеПроцессы КАК ВтТехнологическиеПроцессы
			|		ПО Т.Ссылка = ВтТехнологическиеПроцессы.ТехнологическийПроцесс";
		ОписаниеТаблиц.Добавить(ОписаниеТаблицы);
		//-- НЕ УТКА
	КонецЕсли;
		
	ТекстЗапроса = УправлениеДаннымиОбИзделиях.ТекстЗапросаДанныеУпаковок(ОписаниеТаблиц);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса + РазделительЗапросовВПакете, "ДанныеУпаковок");
	
	#КонецОбласти

	Для каждого Элемент Из ТекстыЗапроса Цикл
		ДобавитьПредставленияВЗапрос(Элемент.Значение, ПараметрыВыборки.ПолучитьПредставления);
		Если ПараметрыВыборки.СпособРасчетаМатериалов <> Перечисления.СпособыРасчетаМатериалов.МинимальноеПотребление Тогда
			Элемент.Значение = СтрЗаменить(Элемент.Значение,
				"НормативнаяДлительностьЭтапов.ДнейОтНачала",
				"НормативнаяДлительностьЭтапов.ДнейОтНачалаМакс");
			Элемент.Значение = СтрЗаменить(Элемент.Значение,
				"НормативнаяДлительностьЭтапов.ДнейДоОкончания",
				"НормативнаяДлительностьЭтапов.ДнейДоОкончанияМакс");
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("УчитыватьВероятностьБрака",  ПараметрыВыборки.УчитыватьВероятностьБрака);
	Запрос.УстановитьПараметр("СпособРасчетаМатериалов", ПараметрыВыборки.СпособРасчетаМатериалов);
	Запрос.УстановитьПараметр("ОкруглятьКоличествоШтучныхТоваров", ПараметрыВыборки.ОкруглятьКоличествоШтучныхТоваров);
	
	Запрос.УстановитьПараметр("СкладПоУмолчанию", Справочники.Склады.СкладПоУмолчанию());
	
	ИспользоватьПараметризацию = ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций");
	ОтключитьРасчетПараметрическихФормул = Ложь;
	Если ПараметрыВыборки.Свойство("ОтключитьРасчетПараметрическихФормул", ОтключитьРасчетПараметрическихФормул)
			И ОтключитьРасчетПараметрическихФормул Тогда
		ИспользоватьПараметризацию = Ложь;
	КонецЕсли;
	Запрос.УстановитьПараметр("ИспользоватьПараметризацию", ИспользоватьПараметризацию);
	
	//++ НЕ УТКА
	Запрос.УстановитьПараметр("ИспользоватьТехнологическиеПроцессы", ПолучитьФункциональнуюОпцию("ИспользоватьТехнологическиеПроцессы"));
	//-- НЕ УТКА
	
	Если ПараметрыВыборки.Свойство("ПереопределениеНастройкиПартииВыпуска")
		И ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.Использовать Тогда
		Запрос.УстановитьПараметр("ПереопределятьНастройкуПартииВыпуска", Истина);
		Запрос.УстановитьПараметр("ВыпускПроизвольнымиПорциями", ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.ВыпускПроизвольнымиПорциями);
	Иначе
		Запрос.УстановитьПараметр("ПереопределятьНастройкуПартииВыпуска", Ложь);
		Запрос.УстановитьПараметр("ВыпускПроизвольнымиПорциями", Ложь);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДоступноОписаниеПартииВыпуска", УправлениеДаннымиОбИзделиях.ДоступноОписаниеПартииВыпуска());
	Запрос.УстановитьПараметр("ВидЦены", ПроизводствоСерверПовтИсп.ВидЦеныПлановойСтоимости());
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Валюта", ПроизводствоСерверПовтИсп.ВалютаПлановойСебестоимостиПродукции());
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	Запрос.УстановитьПараметр("ТипСтрокиМатериал", ТипСтрокиМатериал());
	Запрос.УстановитьПараметр("ТипСтрокиПолуфабрикат", ТипСтрокиПолуфабрикат());
	Запрос.УстановитьПараметр("ТипСтрокиПромежуточныйПолуфабрикат", ТипСтрокиПромежуточныйПолуфабрикат());
	Запрос.УстановитьПараметр("ТипСтрокиВходящееИзделие", ТипСтрокиВходящееИзделие());
	Запрос.УстановитьПараметр("ТипСтрокиПобочныйВыход", ТипСтрокиПобочныйВыход());
	//++ НЕ УТКА
	Запрос.УстановитьПараметр("КлючСвязиНоменклатура", УправлениеДаннымиОбИзделияхКлиентСервер.ОтборПоСвойствамКлючСвязиПредопределенный("Номенклатура"));
	Запрос.УстановитьПараметр("КлючСвязиХарактеристика", УправлениеДаннымиОбИзделияхКлиентСервер.ОтборПоСвойствамКлючСвязиПредопределенный("Характеристика"));
	Запрос.УстановитьПараметр("ДинамическаяСтруктураЗаказовНаПроизводство",  ПолучитьФункциональнуюОпцию("ДинамическаяСтруктураЗаказовНаПроизводство"));
	//-- НЕ УТКА
	
	УстановитьПривилегированныйРежим(Истина);
	Таблицы = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса, , Ложь, Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Соответствие;
	
	Для каждого ИмяНабораДанных Из СтрРазделить("ОсновноеИзделие,РеквизитыСпецификации", ",") Цикл
		Таблица = Таблицы[ИмяНабораДанных]; // ТаблицаЗначений
		Таблица.Индексы.Добавить("Идентификатор");
	КонецЦикла;
	Для каждого ИмяНабораДанных Из ПереченьДанных Цикл
		Таблица = Таблицы[ИмяНабораДанных]; // ТаблицаЗначений
		Таблица.Индексы.Добавить("Идентификатор");
	КонецЦикла;
	
	//++ НЕ УТКА
	ОбработатьНастройкиАвтовыбора(Таблицы, МенеджерВременныхТаблиц, ПараметрыВыборки);
	//-- НЕ УТКА
	
	ЗаполнитьПараметрыОбеспеченияМатериалов(Запрос, Таблицы, ПараметрыВыборки);
	
	ЗаполнитьПараметрыОбеспеченияВыходныхИзделий(Запрос, Таблицы, ПараметрыВыборки);
	
	//++ НЕ УТКА
	#Область ДанныеДляРасчетаПоФормулам
	
	ОписаниеИсточниковДанныхОперандов = Неопределено;
	ИсточникиЗначенийПараметров       = Неопределено;
	
	#КонецОбласти
	//-- НЕ УТКА
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(
		Таблицы.ОсновноеИзделие,
		Таблицы.ДанныеУпаковок);
	
	ОсновноеИзделиеСпецификации  = Новый Структура("Номенклатура,Упаковка,КоличествоУпаковокНаЕдиницуПартииВыпуска,ДанныеУпаковки");
	СтруктураОтбораИдентификатор = Новый Структура("Идентификатор");
	СтруктураУпаковкиПоУмолчанию = УправлениеДаннымиОбИзделияхПовтИсп.СтруктураДанныхУпаковки();
	
	//++ НЕ УТКА
	ПромежуточныйВыпускКэш = Новый Соответствие;
	//-- НЕ УТКА
	
	ТаблицаДанныеПоНоменклатуре = Таблицы.ДанныеПоНоменклатуре; // см. СписокНоменклатуры
	Для каждого Строка Из ТаблицаДанныеПоНоменклатуре Цикл
		
		Идентификатор = Строка.Идентификатор;
		СтруктураОтбораИдентификатор.Идентификатор = Идентификатор;
		
		СтруктураДанных = ДанныеСпецификацииКонструктор();
		
		ДанныеШапки = Таблицы.РеквизитыСпецификации.Найти(Идентификатор, "Идентификатор");
		Если ДанныеШапки <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеШапки);
		КонецЕсли;
		
		СтрокаНабораДанных = Таблицы.ОсновноеИзделие.Найти(Идентификатор, "Идентификатор");
		Если СтрокаНабораДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных.ОсновноеИзделие, СтрокаНабораДанных);
			Если НЕ СтруктураДанных.ОсновноеИзделие.ЭтоОсновноеИзделие Тогда
				ОсновноеИзделиеСпецификации.Номенклатура   = СтрокаНабораДанных.ОсновноеИзделиеНоменклатура;
				ОсновноеИзделиеСпецификации.Упаковка       = СтрокаНабораДанных.ОсновноеИзделиеУпаковка;
				ОсновноеИзделиеСпецификации.ДанныеУпаковки = СтруктураУпаковкиПоУмолчанию;
				ОсновноеИзделиеСпецификации.КоличествоУпаковокНаЕдиницуПартииВыпуска =
											СтрокаНабораДанных.ОсновноеИзделиеКоличествоУпаковокНаЕдиницуПартииВыпуска;
				Если ЗначениеЗаполнено(ОсновноеИзделиеСпецификации.Упаковка) Тогда
					УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВСтрокеНабораДанных(
						ОсновноеИзделиеСпецификации, Таблицы.ДанныеУпаковок);
				КонецЕсли;
				УправлениеДаннымиОбИзделиях.ЗаполнитьКоэффициентПересчетаВОсновноеИзделие(
					СтруктураДанных.ОсновноеИзделие, ОсновноеИзделиеСпецификации);
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ИмяНабораДанных Из ПереченьДанных Цикл
			
			НаборДанных = Таблицы[ИмяНабораДанных].Скопировать(СтруктураОтбораИдентификатор);
			
			Если ИмяНабораДанных = "МатериалыИУслуги" Тогда
				УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(
					НаборДанных,
					Таблицы.ДанныеУпаковок);
				ПрименитьОтборПоПараметрамВыбораДанных(
					НаборДанных,
					ПараметрыВыборки);
				ЗаполнитьИнформациюПоПрименениюМатериала(
					НаборДанных,
					ПараметрыВыборки);
				ВключитьДанныеНаборовВСтруктуруДанныхСпецификации(
					СтруктураДанных,
					Таблицы,
					ПараметрыВыборки,
					СтруктураОтбораИдентификатор);
			ИначеЕсли ИмяНабораДанных = "ВходящиеИзделия" Тогда
				УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(
					НаборДанных,
					Таблицы.ДанныеУпаковок);
			ИначеЕсли ИмяНабораДанных = "ВыходныеИзделия" Тогда
				УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(
					НаборДанных,
					Таблицы.ДанныеУпаковок);
			ИначеЕсли ИмяНабораДанных = "ВозвратныеОтходы" Тогда
				УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(
					НаборДанных,
					Таблицы.ДанныеУпаковок);
			//++ НЕ УТКА
			ИначеЕсли ИмяНабораДанных = "Операции" Тогда
				ПодготовитьТаблицуОпераций(НаборДанных);
			//-- НЕ УТКА
			КонецЕсли;
			
			СтруктураДанных.Вставить(ИмяНабораДанных, НаборДанных);
			
		КонецЦикла;
		
		//++ НЕ УТКА
		ОбработатьДанныеТехнологическихПроцессов(СтруктураДанных);
		
		ПодготовитьПараметрыДляРасчетаПоФормулам(
			Строка,
			СтруктураДанных,
			Таблицы,
			ОписаниеИсточниковДанныхОперандов,
			ПереченьДанных,
			ИсточникиЗначенийПараметров);
		//-- НЕ УТКА
		
		Результат.Вставить(Идентификатор, СтруктураДанных);
		
	КонецЦикла;
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделиях.ЗаполнитьЗначенияПараметровДляРасчетаПоФормулам(ИсточникиЗначенийПараметров);
	//-- НЕ УТКА
	
	Если СписокТаблицДляУдаления.Количество() > 0 Тогда
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, СтрСоединить(СписокТаблицДляУдаления,","));
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ПараметрыВыборки.ОбъединитьМатериалыИВходящиеИзделия И Таблицы.Свойство("МатериалыИУслуги") Тогда
		ОбъединитьМатериалыИВходящиеИзделия(Результат, Таблицы);
	КонецЕсли;
	//-- НЕ УТКА
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ВесЗамера);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПереченьДанных

Функция ПереченьДанныхСпецификации() Экспорт
	
	ПереченьДанных = Новый Массив;
	ПереченьДанных.Добавить("Этапы");
	ПереченьДанных.Добавить("ВыходныеИзделия");
	ПереченьДанных.Добавить("ВозвратныеОтходы");
	//++ НЕ УТКА
	ПереченьДанных.Добавить("ВходящиеИзделия"); //(ремонт,разборка)

	//-- НЕ УТКА
	ПереченьДанных.Добавить("МатериалыИУслуги");
	ПереченьДанных.Добавить("Трудозатраты");
	//++ НЕ УТКА
	ПереченьДанных.Добавить("ВидыРабочихЦентров");
	ПереченьДанных.Добавить("АльтернативныеВидыРабочихЦентров");
	//-- НЕ УТКА
	
	Возврат ПереченьДанных;
	
КонецФункции

#КонецОбласти

#Область РасчетКоличества

Функция РассчитатьПартиюВыпускаПоНоменклатуре(ДанныеПоНоменклатуре, ДанныеСпецификации, ПараметрыВыборки) Экспорт
	
	Количество = ДанныеПоНоменклатуре.Количество;
	
	Если ПараметрыВыборки.ОкруглятьКоличествоШтучныхТоваров
		И Цел(Количество) <> Количество
		И ДанныеСпецификации.ОсновноеИзделие.ЕдиницаИзмеренияШтучная
		И Не ЗначениеЗаполнено(ДанныеСпецификации.ОсновноеИзделие.Упаковка)
		И ДанныеСпецификации.ВыпускПроизвольнымиПорциями
		И Цел(ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска)
			= ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
		И ДанныеСпецификации.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		И ДанныеСпецификации.Свойство("ВыходныеИзделия")
		И ДанныеСпецификации.ВыходныеИзделия.Количество() = 1 Тогда
		Количество = Цел(Количество) + 1;
	КонецЕсли;
	
	МассивПартий = РазбитьНаОптимальныеПартииВыпуска(Количество, ДанныеСпецификации);
	
	// Суммирование дробей
	Числитель = 0;
	Знаменатель = ПроизводствоСервер.НаименьшееОбщееКратноеВКоллекции(МассивПартий, "Знаменатель");
	Брак = Неопределено;
	Для каждого Партия Из МассивПартий Цикл
		
		Числитель = Числитель + Партия.Числитель * Знаменатель / Партия.Знаменатель;
		
		Если Партия.Брак <> Неопределено Тогда
			Если Брак = Неопределено Тогда
				Брак = Новый Соответствие;
			КонецЕсли;
			Для каждого КлючИЗначение Из Партия.Брак Цикл
				Если Брак[КлючИЗначение.Ключ] = Неопределено Тогда
					Брак.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				Иначе
					Брак[КлючИЗначение.Ключ] = Брак[КлючИЗначение.Ключ] + КлючИЗначение.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Сокращение дроби
	НаибольшийОбщийДелитель = ПроизводствоСервер.НаибольшийОбщийДелитель(Числитель, Знаменатель);
	Числитель   = Числитель / НаибольшийОбщийДелитель;
	Знаменатель = Знаменатель / НаибольшийОбщийДелитель;
		
	Результат = ПартияВыпуска(Числитель, Знаменатель, Брак, МассивПартий);
	
	Возврат Результат;
	
КонецФункции

Функция РазбитьНаОптимальныеПартииВыпуска(Знач Количество, ДанныеСпецификации) Экспорт
	
	Результат  = Новый Массив;
	
	ЕстьВыпускПроизвольнымиПорциями = ДанныеСпецификации.ВыпускПроизвольнымиПорциями;
	ЕстьНастройкиРазбивкиНаПартии   = ДанныеСпецификации.ОптимальнаяПартияВыпуска <> 0;
	ЕстьБрак = ДанныеСпецификации.ОсновноеИзделие.КоэффициентБрака <> 0;
	
	ДанныеУпаковки = ДанныеСпецификации.ОсновноеИзделие.ДанныеУпаковки;
	
	Если (ЕстьВыпускПроизвольнымиПорциями И ЕстьНастройкиРазбивкиНаПартии)
			ИЛИ ЕстьБрак Тогда
		КоличествоПартия = ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
			* ДанныеУпаковки.Числитель / ДанныеУпаковки.Знаменатель;
		ДанныеУпаковки   = УправлениеДаннымиОбИзделияхПовтИсп.СтруктураДанныхУпаковки();
	Иначе
		КоличествоПартия = ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска;
	КонецЕсли;
	
	Если КоличествоПартия = 0 Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПартияВыпуска(0, 1));
	КонецЕсли;
	
	Остаток = ПроверитьОкруглитьДоЦелыхПартий(
					Количество * ДанныеУпаковки.Знаменатель / ДанныеУпаковки.Числитель,
					КоличествоПартия,
					ДанныеСпецификации);
					
	Если ЕстьВыпускПроизвольнымиПорциями Тогда
		КоэффициентПересчетаПартииЗапуска = ДанныеСпецификации.ОсновноеИзделие.КоэффициентПересчетаВОсновноеИзделие;
	Иначе
		КоэффициентПересчетаПартииЗапуска = КоличествоПартия;
	КонецЕсли;
	
	МинимальныйВыпуск = Окр(ДанныеСпецификации.МинимальнаяПартияВыпуска * КоэффициентПересчетаПартииЗапуска, 3);
	
	Если НЕ ЕстьБрак
		И НЕ ЕстьНастройкиРазбивкиНаПартии Тогда
			
		Результат.Добавить(ПартияВыпуска(
					Макс(Остаток, МинимальныйВыпуск),
					КоличествоПартия));
	Иначе
		
		ОптимальныйВыпуск    = Окр(ДанныеСпецификации.ОптимальнаяПартияВыпуска * КоэффициентПересчетаПартииЗапуска, 3);
		ДопустимоеПревышение = Окр(ДанныеСпецификации.ДопустимоеПревышениеОптимальнойПартииВыпуска * КоэффициентПересчетаПартииЗапуска, 3);
		
		Если ОптимальныйВыпуск <> 0 И МинимальныйВыпуск > ОптимальныйВыпуск Тогда
			МинимальныйВыпуск = ОптимальныйВыпуск;
		КонецЕсли;
		ДельтаМинимумОптимум = ОптимальныйВыпуск - МинимальныйВыпуск;
		Изделие              = ДанныеСпецификации.ОсновноеИзделие;
		
		Если ОптимальныйВыпуск > 0 Тогда
			
			БракСумма = 0;
			Если Изделие.КоэффициентБрака = 0 Тогда
				ОстатокБрак = 0;
			Иначе
				ОстатокБрак = ПроверитьОкруглитьДоЦелыхПартий(
					Окр(Остаток / (1-Изделие.КоэффициентБрака), ?(Изделие.ЕдиницаИзмеренияШтучная, 0, 3)),
					КоличествоПартия,
					ДанныеСпецификации);
			КонецЕсли;
			
			Пока Остаток >= ОптимальныйВыпуск ИЛИ ОстатокБрак >= ОптимальныйВыпуск Цикл
				
				Результат.Добавить(ОптимальныйВыпуск);
				
				Если Изделие.КоэффициентБрака = 0 Тогда
					Остаток = Остаток - ОптимальныйВыпуск;
				Иначе
					БракСумма = БракСумма + (ОптимальныйВыпуск * Изделие.КоэффициентБрака);
					БракЗачет = Окр(БракСумма, ?(Изделие.ЕдиницаИзмеренияШтучная, 0, 3));
					Если БракЗачет > 0 Тогда
						Остаток   = Остаток - (ОптимальныйВыпуск - БракЗачет);
						БракСумма = БракСумма - БракЗачет;
					Иначе
						Остаток = Остаток - ОптимальныйВыпуск;
					КонецЕсли;
					ОстатокБрак = ПроверитьОкруглитьДоЦелыхПартий(
						Окр((Остаток / (1-Изделие.КоэффициентБрака)) + БракСумма, ?(Изделие.ЕдиницаИзмеренияШтучная, 0, 3)),
						КоличествоПартия,
						ДанныеСпецификации);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОстатокБрак > 0 И ОстатокБрак > Остаток Тогда
				Остаток = ОстатокБрак; // остаток с поправкой на брак
			КонецЕсли;
			
			Если Остаток > 0 Тогда
				
				Если Остаток < МинимальныйВыпуск Тогда
					
					// если можем покрыть остаток за счет допустимого превышения
					Если Остаток <= Результат.Количество() * ДопустимоеПревышение Тогда
						
						Если ДанныеСпецификации.ВыпускПроизвольнымиПорциями Тогда
							
							Для Х = -Результат.ВГраница() По 0 Цикл
								Если Остаток <= 0 Тогда
									Прервать;
								КонецЕсли;
								Результат[-Х] = Результат[-Х] + Мин(ДопустимоеПревышение, Остаток);
								Остаток = Остаток - Мин(ДопустимоеПревышение, Остаток);
							КонецЦикла;
							
						Иначе
							
							ОстатокНаПартию = Цел(Остаток / Результат.Количество());
							Если ОстатокНаПартию > 0 Тогда
								Для Х = 0 По Результат.ВГраница() Цикл
									Результат[Х] = Результат[Х] + ОстатокНаПартию;
								КонецЦикла;
							КонецЕсли;
							
							Остаток = Остаток % Результат.Количество();
							
							Для Х = -Результат.ВГраница() По 0 Цикл
								Если Остаток <= 0 Тогда
									Прервать;
								КонецЕсли;
								Результат[-Х] = Результат[-Х] + Мин(1, Остаток);
								Остаток = Остаток - 1;
							КонецЦикла;
							
						КонецЕсли;
						
					// если можем покрыть остаток за счет сокращения оптимальных партий до минимальных
					Иначе
						
						Для Х = -Результат.ВГраница() По 0 Цикл
							Если Остаток >= МинимальныйВыпуск Тогда
								Прервать;
							КонецЕсли;
							Результат[-Х] = Результат[-Х] - Мин(ДельтаМинимумОптимум, МинимальныйВыпуск - Остаток);
							Остаток = Остаток + Мин(ДельтаМинимумОптимум, МинимальныйВыпуск - Остаток);
						КонецЦикла;
						Результат.Добавить(Макс(Остаток, МинимальныйВыпуск));
						
					КонецЕсли;
					
				Иначе
					Результат.Добавить(Остаток);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Если Изделие.КоэффициентБрака <> 0 Тогда
				Остаток = ПроверитьОкруглитьДоЦелыхПартий(
							Окр(Количество / (1-Изделие.КоэффициентБрака), ?(Изделие.ЕдиницаИзмеренияШтучная, 0, 3)),
							КоличествоПартия,
							ДанныеСпецификации);
			КонецЕсли;
			Результат.Добавить(Макс(Остаток, МинимальныйВыпуск));
		КонецЕсли;
		
		СтрокиБрак = Неопределено;
		Если ДанныеСпецификации.Свойство("ВыходныеИзделия") Тогда
			Для Индекс = 0 По ДанныеСпецификации.ВыходныеИзделия.Количество()-1 Цикл
				Если ДанныеСпецификации.ВыходныеИзделия[Индекс].КоэффициентБрака <> 0 Тогда
					Если СтрокиБрак = Неопределено Тогда
						СтрокиБрак = Новый Соответствие;
					КонецЕсли;
					СтрокиБрак.Вставить(Индекс, 0);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Х = 0 По Результат.ВГраница() Цикл
			
			Если СтрокиБрак = Неопределено Тогда
				Брак = Неопределено;
			Иначе
				
				Брак = Новый Соответствие;
				Для каждого КлючИЗначение Из СтрокиБрак Цикл
					
					Изделие = ДанныеСпецификации.ВыходныеИзделия[КлючИЗначение.Ключ];
					
					СтрокиБрак[КлючИЗначение.Ключ] = СтрокиБрак[КлючИЗначение.Ключ]
						+ (Изделие.КоличествоУпаковокНаЕдиницуПартииВыпуска * Изделие.ДанныеУпаковки.Числитель
							* Результат[Х] / (КоличествоПартия * Изделие.ДанныеУпаковки.Знаменатель) // партия
							* Изделие.КоэффициентБрака);
					
					КоличествоБрак = Окр(СтрокиБрак[КлючИЗначение.Ключ], ?(Изделие.ЕдиницаИзмеренияШтучная, 0, 3));
					
					Если КоличествоБрак > 0 Тогда
						Брак.Вставить(КлючИЗначение.Ключ, КоличествоБрак);
						СтрокиБрак[КлючИЗначение.Ключ] = СтрокиБрак[КлючИЗначение.Ключ] - КоличествоБрак;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Результат[Х] = ПартияВыпуска(Результат[Х], КоличествоПартия, Брак);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьКоличествоНаПартиюВыпуска(ПартияВыпуска, ДанныеСпецификации, ДанныеПоНоменклатуре) Экспорт
	
	ПереченьДанных = ПереченьДанныхСпецификации();
	
	ОбработатьДанныеНаборов(ПартияВыпуска, ДанныеСпецификации, "ПередРасчетом");
	
	ДанныеДляРасчета = Неопределено;
	//++ НЕ УТКА
	ДанныеДляРасчета = ДанныеДляРасчетаПоФормулам(ПартияВыпуска, ДанныеСпецификации, ДанныеПоНоменклатуре);
	//-- НЕ УТКА

	Если ДанныеСпецификации.Свойство("ОсновноеИзделие") Тогда
		РассчитатьКоличествоВСтроке(ПартияВыпуска, ДанныеСпецификации.ОсновноеИзделие, Истина, Ложь, Ложь);
		Если ПартияВыпуска.Брак <> Неопределено Тогда
			Для каждого КлючИЗначение Из ПартияВыпуска.Брак Цикл
				Строка = ДанныеСпецификации.ВыходныеИзделия[КлючИЗначение.Ключ];
				Если ДанныеСпецификации.ОсновноеИзделие.Номенклатура <> Строка.Номенклатура
					ИЛИ ДанныеСпецификации.ОсновноеИзделие.Характеристика <> Строка.Характеристика Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеСпецификации.ОсновноеИзделие.Количество = ДанныеСпецификации.ОсновноеИзделие.Количество - КлючИЗначение.Значение;
				Если ДанныеСпецификации.ОсновноеИзделие.ДанныеУпаковки.Числитель <> 0 Тогда
					ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковок = ДанныеСпецификации.ОсновноеИзделие.Количество
						* ДанныеСпецификации.ОсновноеИзделие.ДанныеУпаковки.Знаменатель
						/ ДанныеСпецификации.ОсновноеИзделие.ДанныеУпаковки.Числитель;
				Иначе
					ДанныеСпецификации.ОсновноеИзделие.Количество = 0;
					ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковок = 0;
				КонецЕсли;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("ВыходныеИзделия")
		И ПереченьДанных.Найти("ВыходныеИзделия") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.ВыходныеИзделия,
			Истина, Ложь, Истина, Истина, Истина, ДанныеДляРасчета);
		Если ПартияВыпуска.Брак <> Неопределено Тогда
			Для каждого КлючИЗначение Из ПартияВыпуска.Брак Цикл
				Строка = ДанныеСпецификации.ВыходныеИзделия[КлючИЗначение.Ключ];
				Строка.Количество = Строка.Количество - КлючИЗначение.Значение;
				Если Строка.ДанныеУпаковки.Числитель <> 0 Тогда
					Строка.КоличествоУпаковок = Строка.Количество * Строка.ДанныеУпаковки.Знаменатель / Строка.ДанныеУпаковки.Числитель;
				Иначе
					Строка.Количество = 0;
					Строка.КоличествоУпаковок = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		РассчитатьДнейОтПотребности(ДанныеПоНоменклатуре, ДанныеСпецификации.ВыходныеИзделия);
		ПроизводствоКлиентСервер.РассчитатьДолюСтоимостиВКоллекции(ДанныеСпецификации.ВыходныеИзделия, ДанныеСпецификации.СпособРаспределенияЗатратНаВыходныеИзделия);
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("МатериалыИУслуги")
		И ПереченьДанных.Найти("МатериалыИУслуги") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.МатериалыИУслуги,
			Истина, Истина, Истина, Ложь, Истина, ДанныеДляРасчета);
		РассчитатьДнейОтПотребности(ДанныеПоНоменклатуре, ДанныеСпецификации.МатериалыИУслуги);
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("ВозвратныеОтходы")
		И ПереченьДанных.Найти("ВозвратныеОтходы") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.ВозвратныеОтходы,
			Истина, Ложь, Истина, Истина, Истина, ДанныеДляРасчета);
		РассчитатьДнейОтПотребности(ДанныеПоНоменклатуре, ДанныеСпецификации.ВозвратныеОтходы);
	КонецЕсли;
//++ НЕ УТКА
	Если ДанныеСпецификации.Свойство("ВходящиеИзделия")
		И ПереченьДанных.Найти("ВходящиеИзделия") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.ВходящиеИзделия,
			Истина, Ложь, Истина, Ложь, Ложь);
		РассчитатьДнейОтПотребности(ДанныеПоНоменклатуре, ДанныеСпецификации.ВходящиеИзделия);
	КонецЕсли;
//-- НЕ УТКА
	Если ДанныеСпецификации.Свойство("Трудозатраты")
		И ПереченьДанных.Найти("Трудозатраты") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.Трудозатраты,
			Ложь, Ложь, Ложь, Ложь, Истина, ДанныеДляРасчета);
		РассчитатьДнейОтПотребности(ДанныеПоНоменклатуре, ДанныеСпецификации.Трудозатраты);
	КонецЕсли;
//++ НЕ УТКА
	Если ДанныеСпецификации.Свойство("ВидыРабочихЦентров")
		И ПереченьДанных.Найти("ВидыРабочихЦентров") <> Неопределено Тогда
		РассчитатьВремяРаботы(ПартияВыпуска, ДанныеСпецификации, ДанныеСпецификации.ВидыРабочихЦентров, ДанныеДляРасчета);
		РассчитатьЗанятость(ПартияВыпуска, ДанныеСпецификации.ВидыРабочихЦентров, ДанныеДляРасчета);
		РассчитатьДнейОтПотребности(ДанныеПоНоменклатуре, ДанныеСпецификации.ВидыРабочихЦентров);
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("АльтернативныеВидыРабочихЦентров")
		И ПереченьДанных.Найти("АльтернативныеВидыРабочихЦентров") <> Неопределено Тогда
		РассчитатьВремяРаботы(ПартияВыпуска, ДанныеСпецификации, ДанныеСпецификации.АльтернативныеВидыРабочихЦентров, ДанныеДляРасчета);
	КонецЕсли;
	Если ДанныеСпецификации.Свойство("Операции") Тогда
		РассчитатьКоличествоВремяОпераций(ПартияВыпуска, ДанныеСпецификации.Операции);
	КонецЕсли;
//-- НЕ УТКА
	
	Если ДанныеСпецификации.Свойство("Этапы")
		И ПереченьДанных.Найти("Этапы") <> Неопределено Тогда
		РассчитатьКоличество(ПартияВыпуска, ДанныеСпецификации.Этапы,
			Ложь, Ложь, Ложь, Ложь, Ложь);
		//++ НЕ УТКА
		ПересчитатьДлительность(ДанныеСпецификации, ПереченьДанных);
		РассчитатьКоэффициентМаршрутнойКарты(ПартияВыпуска, ДанныеСпецификации.Этапы);
		//-- НЕ УТКА
		Для каждого ДанныеЭтапа Из ДанныеСпецификации.Этапы Цикл
			Если ДанныеЭтапа.ПроизводствоНаСтороне Тогда
				РассчитатьКоличество(ПартияВыпуска, ДанныеЭтапа.УслугиПереработчика,
					Ложь, Ложь, Ложь, Ложь, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработатьДанныеНаборов(ПартияВыпуска, ДанныеСпецификации, "ПослеРасчета");
	
КонецПроцедуры

Процедура РассчитатьКоличество(ПартияВыпуска, Коллекция, ЕстьУпаковки, ЕстьВероятность, Округлить, КонтрольОкругленияВверх, РассчитатьФормулы, ДанныеДляРасчета = Неопределено)
	
	Для каждого Строка Из Коллекция Цикл
		
		РассчитатьКоличествоВСтроке(ПартияВыпуска, Строка, ЕстьУпаковки, ЕстьВероятность, РассчитатьФормулы, ДанныеДляРасчета);
		
		Если Округлить Тогда
			ОкруглитьКоличествоВСтроке(ПартияВыпуска, Строка, ЕстьУпаковки, КонтрольОкругленияВверх);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьКоличествоВСтроке(ПартияВыпуска, Строка, ЕстьУпаковки, ЕстьВероятность, РассчитатьФормулы, ДанныеДляРасчета = Неопределено)
	
	// Расчет количества на партию

//++ НЕ УТКА
	Если РассчитатьФормулы И НЕ ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) Тогда
		УправлениеДаннымиОбИзделиях.РассчитатьКоличествоПоФормуле(Строка, ДанныеДляРасчета, "Количество");
	Иначе
//-- НЕ УТКА
		Если ЕстьУпаковки Тогда
			Если Строка.ДанныеУпаковки.Знаменатель <> 0 Тогда
				Строка.Количество = Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска 
					* Строка.ДанныеУпаковки.Числитель * ПартияВыпуска.Числитель 
					/ (Строка.ДанныеУпаковки.Знаменатель * ПартияВыпуска.Знаменатель);
			Иначе
				Строка.Количество = 0;
			КонецЕсли;
		Иначе
			Строка.Количество = Строка.КоличествоНаЕдиницуПартииВыпуска * ПартияВыпуска.Числитель / ПартияВыпуска.Знаменатель;
		КонецЕсли;
//++ НЕ УТКА
	КонецЕсли;
//-- НЕ УТКА
	
	// Поправка на вероятность
	Если ЕстьВероятность И Строка.КоэффициентВероятности <> 1 Тогда
		Строка.Количество = Строка.Количество * Строка.КоэффициентВероятности;
	КонецЕсли;
	
	// Пересчет количества упаковок
	Если ЕстьУпаковки Тогда
		Если Строка.ДанныеУпаковки.Числитель <> 0 Тогда
			Строка.КоличествоУпаковок = Строка.Количество * Строка.ДанныеУпаковки.Знаменатель / Строка.ДанныеУпаковки.Числитель;
			Строка.Количество         = ОписаниеТипаКоличественногоРеквизита().ПривестиЗначение(Строка.Количество);
		Иначе
			Строка.КоличествоУпаковок = 0;
			Строка.Количество         = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОкруглитьКоличествоВСтроке(ПартияВыпуска, Строка, ЕстьУпаковки, КонтрольОкругленияВверх)
	
	Если НЕ Строка.Округлить 
		ИЛИ Строка.Количество = Цел(Строка.Количество) Тогда
		Возврат;
	КонецЕсли;
	
	Количество = Окр(Строка.Количество);
	
	ДопустимоеОтклонение = ОбщегоНазначенияУТПовтИсп.ДопустимоеОтклонениеПриОкругленииКоличества();
	
	Отклонение = ?(Количество > Строка.Количество,
		(Количество - Строка.Количество)/Строка.Количество * 100,
		(Строка.Количество - Количество)/Строка.Количество * 100);
			
	Если Строка.ЭтоЦеховаяКладовая Тогда
		
		Если Отклонение <= ДопустимоеОтклонение Тогда
			
			Строка.Количество = Количество;
			
			Если ЕстьУпаковки Тогда
				Если Строка.ДанныеУпаковки.Числитель <> 0 Тогда
					Строка.КоличествоУпаковок = Строка.Количество * Строка.ДанныеУпаковки.Знаменатель / Строка.ДанныеУпаковки.Числитель;
				Иначе
					Строка.Количество         = 0;
					Строка.КоличествоУпаковок = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Отклонение > ДопустимоеОтклонение Тогда
			
			Если КонтрольОкругленияВверх
				И Количество > Строка.Количество Тогда
				
				Количество = Количество - 1;
				
			ИначеЕсли НЕ КонтрольОкругленияВверх
				И Количество < Строка.Количество Тогда
				
				Количество = Количество + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Строка.Количество = Количество;
		
		Если ЕстьУпаковки Тогда
			Если Строка.ДанныеУпаковки.Числитель <> 0 Тогда
				Строка.КоличествоУпаковок = Строка.Количество * Строка.ДанныеУпаковки.Знаменатель / Строка.ДанныеУпаковки.Числитель;
			Иначе
				Строка.Количество         = 0;
				Строка.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьОкруглитьДоЦелыхПартий(Количество, КоличествоПартия, ДанныеСпецификации)
	
	Если ДанныеСпецификации.ВыпускПроизвольнымиПорциями Тогда
		
		Возврат Количество;
		
	Иначе
		
		Коэффициент = Количество / КоличествоПартия;
		
		Если Цел(Коэффициент) = Коэффициент Тогда
			Возврат Количество;
		Иначе
			Возврат КоличествоПартия * (Цел(Коэффициент) + 1);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ОписаниеТипаКоличественногоРеквизита()
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный));
	
КонецФункции

//++ НЕ УТКА

Процедура РассчитатьВремяРаботы(ПартияВыпуска, ДанныеСпецификации, Коллекция, ДанныеДляРасчета = Неопределено)
	
	Для каждого Строка Из Коллекция Цикл
		
		Если ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) Тогда
			
			Если ДанныеСпецификации.ВыпускПроизвольнымиПорциями Тогда
				
				ОсновноеИзделие = ДанныеСпецификации.ОсновноеИзделие;
				Если ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска > 0 Тогда
					ОдновременноПроизводимое = Строка.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий * ОсновноеИзделие.ДанныеУпаковки.Знаменатель
						/ (ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска * ОсновноеИзделие.ДанныеУпаковки.Числитель);
				Иначе
					ОдновременноПроизводимое = 0;
				КонецЕсли;
				
			Иначе
				
				ОдновременноПроизводимое = Строка.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий;
				
			КонецЕсли;
			
			Если ОдновременноПроизводимое > 0 Тогда
				
				Коэффициент = Цел(ПартияВыпуска.Числитель / (ПартияВыпуска.Знаменатель * ОдновременноПроизводимое))
					+ ?((ПартияВыпуска.Числитель / ПартияВыпуска.Знаменатель) % ОдновременноПроизводимое > 0, 1, 0);
					
				Строка.ВремяРаботы = Строка.ВремяРаботыНаЕдиницуПартииВыпуска * Коэффициент;
				
			Иначе
				
				Строка.ВремяРаботы = Строка.ВремяРаботыНаЕдиницуПартииВыпуска
					* ПартияВыпуска.Числитель / ПартияВыпуска.Знаменатель;
				
			КонецЕсли;
			
		Иначе
			
			УправлениеДаннымиОбИзделиях.РассчитатьКоличествоПоФормуле(Строка, ДанныеДляРасчета, "ВремяРаботы");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьЗанятость(ПартияВыпуска, ИсходнаяТаблица, ДанныеДляРасчета = Неопределено)

	Для каждого Строка Из ИсходнаяТаблица Цикл
		
		Если НЕ Строка.РассчитатьЗанятость Тогда
			Продолжить;
		КонецЕсли;
			
		Если ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) Тогда
			
			Строка.Занятость = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
				Строка.ВремяРаботы,
				Строка.ЕдиницаИзмерения);
			Строка.ЗанятостьНаЕдиницуПартииВыпуска = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
				Строка.ВремяРаботыНаЕдиницуПартииВыпуска,
				Строка.ЕдиницаИзмерения);
			
		Иначе
			
			УправлениеДаннымиОбИзделиях.РассчитатьКоличествоПоФормуле(Строка, ДанныеДляРасчета, "Занятость");
			Строка.Занятость = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
				Строка.Занятость, 
				Строка.ЕдиницаИзмерения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьДлительность(ДанныеСпецификации, ПереченьДанных)
	
	Настройки = ПроизводствоСерверПовтИсп.НастройкиПодсистемыПроизводство();
	Если
		(
			ДанныеСпецификации.Свойство("ВидыРабочихЦентров")
			И ПереченьДанных.Найти("ВидыРабочихЦентров") <> Неопределено
		)
		И (
			Настройки.ИспользуетсяПланированиеПоПроизводственнымРесурсам
				ИЛИ (Настройки.ИспользуетсяПроизводство21
					И НЕ Настройки.ИспользуетсяПланированиеПоМатериальнымРесурсам)
		) Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ПланироватьРаботуВидовРабочихЦентров", Истина);
		СтруктураПоиска.Вставить("ЕстьПараметризацияРесурсов", Истина);
		Для каждого Строка Из ДанныеСпецификации.Этапы.НайтиСтроки(СтруктураПоиска) Цикл
			
			УправлениеДаннымиОбИзделиях.ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ(
				Строка,
				ДанныеСпецификации.ВидыРабочихЦентров.НайтиСтроки(Новый Структура("Этап", Строка.Этап)),
				Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьКоэффициентМаршрутнойКарты(ПартияВыпуска, Этапы)
	
	Для каждого Строка Из Этапы Цикл
		Строка.КоэффициентМаршрутнойКарты = Строка.КоэффициентМаршрутнойКартыНаЕдиницуПартииВыпуска
			* ПартияВыпуска.Числитель / ПартияВыпуска.Знаменатель; 
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьКоличествоВремяОпераций(ПартияВыпуска, Операции)
	
	Для каждого СтрокаОперация Из Операции Цикл
		
		СтрокаОперация.КоличествоНаПартию = СтрокаОперация.Количество
			* СтрокаОперация.КоэффициентТехнологическогоПроцесса
			* ПартияВыпуска.Числитель / ПартияВыпуска.Знаменатель;
		
		ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
			СтрокаОперация,
			СтрокаОперация.КоэффициентТехнологическогоПроцесса
				* ПартияВыпуска.Числитель / ПартияВыпуска.Знаменатель);
		
	КонецЦикла;
	
КонецПроцедуры

//-- НЕ УТКА

Процедура РассчитатьДнейОтПотребности(ДанныеПоНоменклатуре, ИсходнаяТаблица)

	Если ДанныеПоНоменклатуре <> Неопределено 
		И ДанныеПоНоменклатуре.Свойство("ДнейОтПотребности") Тогда
		
		Если ДанныеПоНоменклатуре.ДнейОтПотребности <> Неопределено Тогда
			Для каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
				СтрокаТаблицы.ДнейОтПотребности = СтрокаТаблицы.ДнейОтПотребности + ДанныеПоНоменклатуре.ДнейОтПотребности;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПартияВыпуска(Числитель, Знаменатель, Брак = Неопределено, Расшифровка = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Числитель",      Числитель);
	Результат.Вставить("Знаменатель",    Знаменатель);
	
	Результат.Вставить("Значение",       Числитель / Знаменатель);
	
	// Неопределено либо Соответствие, где Ключ - индекс ТЧ ВыходныеИзделия, Значение - кол-во бракованных изделий
	Результат.Вставить("Брак",           Брак);
	
	// Неопределено либо Массив, детализирующий данную партию до оптимальных партий (элементы массива также партии выпуска)
	Результат.Вставить("Расшифровка",    Расшифровка);
	
	Возврат Результат;
	
КонецФункции

Функция СравнитьПартииВыпуска(Партия1, Партия2) Экспорт
	
	Если Партия1.Значение > Партия2.Значение Тогда
		Возврат 1;
	ИначеЕсли Партия1.Значение < Партия2.Значение Тогда
		Возврат -1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

#Область РасчетПоФормулам

#Область ДанныеДляРасчета

Функция ДанныеДляРасчетаПоФормулам(ПартияВыпуска, ДанныеСпецификации, ДанныеПоНоменклатуре)
	
	ДанныеДляРасчета = Неопределено;
	
#Область ПараметрыДляРасчета

	ПараметрыДляРасчета = Неопределено;
	Если ДанныеСпецификации.Свойство("ПараметрыДляРасчетаПоФормулам") Тогда
		ПараметрыДляРасчета = ДанныеСпецификации.ПараметрыДляРасчетаПоФормулам.Скопировать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыДляРасчета) Тогда
		Возврат ДанныеДляРасчета;
	КонецЕсли;
	
#КонецОбласти

	СтруктураДанных = Новый Структура("ОсновноеИзделие,ВыходныеИзделия,ВозвратныеОтходы,МатериалыИУслуги");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеСпецификации);
	
	ДанныеПоНоменклатуреКопия = ДанныеПоНоменклатуреРасширенный();
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуреКопия, ДанныеПоНоменклатуре);

#Область ИсточникиДанных
	ИсточникиДанных = СтруктураИсточниковДляРасчетаПоФормулам();
	
	// данные распоряжения по номенклатуре
	ИсточникиДанных.ДанныеПоНоменклатуре = ДанныеПоНоменклатуреКопия;
	
	// основное изделие спецификации
	ОсновноеИзделие = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных.ОсновноеИзделие);
	РассчитатьКоличествоВСтроке(ПартияВыпуска, ОсновноеИзделие, Истина, Ложь, Ложь);
	ИсточникиДанных.ОсновноеИзделие = ОсновноеИзделие;
	
	// табличная часть ВыходныеИзделия
	Если СтруктураДанных.ВыходныеИзделия <> Неопределено Тогда
		
		Для каждого Строка Из СтруктураДанных.ВыходныеИзделия Цикл
			
			РассчитатьКоличествоВСтроке(ПартияВыпуска, Строка, Истина, Ложь, Ложь);
			ЗаполнитьЗначенияСвойств(ИсточникиДанных.ВыходныеИзделия.Добавить(), Строка);
			
		КонецЦикла;
		
	КонецЕсли;

	// табличная часть МатериалыИУслуги
	Если СтруктураДанных.МатериалыИУслуги <> Неопределено Тогда
		
		Для каждого Строка Из СтруктураДанных.МатериалыИУслуги Цикл
			
			РассчитатьКоличествоВСтроке(ПартияВыпуска, Строка, Истина, Ложь, Ложь);
			ЗаполнитьЗначенияСвойств(ИсточникиДанных.МатериалыИУслуги.Добавить(), Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// табличная часть ВозвратныеОтходы
	Если СтруктураДанных.ВозвратныеОтходы <> Неопределено Тогда
		
		Для каждого Строка Из СтруктураДанных.ВозвратныеОтходы Цикл
			
			РассчитатьКоличествоВСтроке(ПартияВыпуска, Строка, Истина, Ложь, Ложь);
			ЗаполнитьЗначенияСвойств(ИсточникиДанных.ВозвратныеОтходы.Добавить(), Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти

	ОписаниеИсточников = ОписаниеИсточниковДанныхОперандов();

	ДанныеДляРасчета = УправлениеДаннымиОбИзделиях.ДанныеДляРасчетаПоФормулам(
		Справочники.РесурсныеСпецификации, ПараметрыДляРасчета, ОписаниеИсточников, ИсточникиДанных);
	Возврат ДанныеДляРасчета;
	
КонецФункции

Функция ВыгрузитьДанныеДляКонструктораФормул(ОбъектИлиСсылка, ИмяТЧ, ДанныеСтроки = Неопределено) Экспорт
	
	ОписаниеИсточников = ОписаниеИсточниковДанныхОперандов();
	
	ОсновноеИзделие = УправлениеДаннымиОбИзделияхКлиентСервер.ОсновнойРеквизитОсновногоИзделияСпецификации(ОбъектИлиСсылка);
	
	ОписаниеИсточников["ОсновноеИзделие"].ИсточникСвойствНоменклатуры = ОсновноеИзделие.Значение;
	
	Если НЕ ПустаяСтрока(ИмяТЧ) 
		И ИмяТЧ <> "ВозвратныеОтходы" Тогда
		ОписаниеИсточников.Удалить("ВозвратныеОтходы");
		ОписаниеИсточников.Удалить("ВозвратныйОтход");
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ОписаниеИсточников.Удалить("МатериалыИУслуги");
		ОписаниеИсточников.Удалить("Материал");
	КонецЕсли;
	
	УправлениеДаннымиОбИзделиях.ДополнитьОписаниеИсточниковСоставомОперандов(
		ОписаниеИсточников, ОбъектИлиСсылка, ИмяТЧ, ДанныеСтроки);
	
	Возврат ОписаниеИсточников;
	
КонецФункции

Процедура ПодготовитьПараметрыДляРасчетаПоФормулам(ДанныеПоНоменклатуре, СтруктураДанных, Таблицы, ОписаниеИсточников, ПереченьДанных, ИсточникиЗначенийПараметров)
	
	Если НЕ СтруктураДанных.ЕстьПараметризацияРесурсов Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеИсточников = Неопределено Тогда
		ОписаниеИсточников = ОписаниеИсточниковДанныхОперандов();
	КонецЕсли;
	
	Если ИсточникиЗначенийПараметров = Неопределено Тогда
		ИсточникиЗначенийПараметров = УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковЗначенийПараметровДляРасчетаПоФормулам();
	КонецЕсли;

	СтруктураОтбора = Новый Структура("АлгоритмРасчетаКоличества", "");	
	НаборыДанных = Новый Массив;
	Для каждого ИмяТаблицы Из ПереченьДанных Цикл
		Таблица = СтруктураДанных[ИмяТаблицы];
		Если Таблица.Колонки.Найти("Формула") <> Неопределено
			И Таблица.НайтиСтроки(СтруктураОтбора).Количество() <> Таблица.Количество() Тогда	
			НаборыДанных.Добавить(Таблица);
		КонецЕсли;
	КонецЦикла;
	
	Если НаборыДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДляРасчета = УправлениеДаннымиОбИзделиях.ПараметрыДляРасчетаПоФормулам(ОписаниеИсточников, НаборыДанных);
	Если ПараметрыДляРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Идентификатор", ДанныеПоНоменклатуре.Идентификатор);
	ИсточникиДанных = СтруктураИсточниковДляРасчетаПоФормулам();
	Для каждого КлючИЗначение Из ИсточникиДанных Цикл
		Если СтруктураДанных.Свойство(КлючИЗначение.Ключ) Тогда
			ИсточникиДанных[КлючИЗначение.Ключ] = СтруктураДанных[КлючИЗначение.Ключ];
		ИначеЕсли Таблицы.Свойство(КлючИЗначение.Ключ) Тогда
			ИсточникиДанных[КлючИЗначение.Ключ] = Таблицы[КлючИЗначение.Ключ].Скопировать(СтруктураОтбора);
		КонецЕсли;
	КонецЦикла;
	ИсточникиДанных.ДанныеПоНоменклатуре = ДанныеПоНоменклатуре;
	
	УправлениеДаннымиОбИзделиях.ДополнитьТаблицуИсточниковЗначенийПараметровДляРасчетаПоФормулам(
		Справочники.РесурсныеСпецификации,
		ИсточникиЗначенийПараметров,
		ИсточникиДанных,
		ОписаниеИсточников,
		ПараметрыДляРасчета);
	
	СтруктураДанных.Вставить("ПараметрыДляРасчетаПоФормулам", ПараметрыДляРасчета);
	
КонецПроцедуры

#КонецОбласти

#Область ИсточникиДанных

// Конструктор структуры источников для расчета по формулам
// 
// Возвращаемое значение:
// 	Структура - из:
// * ДанныеПоНоменклатуре - см. ДанныеПоНоменклатуреРасширенный
// * МатериалыИУслуги - см. УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам
// * ВозвратныеОтходы - см. УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам
// * ВыходныеИзделия - см. УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам
// * ОсновноеИзделие - Структура - основное изделие
//
Функция СтруктураИсточниковДляРасчетаПоФормулам() Экспорт
	
	ИсточникиДанных = Новый Структура;
	
	ИсточникиДанных.Вставить("ОсновноеИзделие");
	
	ИсточникиДанных.Вставить("ВыходныеИзделия",  УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам());
	ИсточникиДанных.Вставить("ВозвратныеОтходы", УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам());
	ИсточникиДанных.Вставить("МатериалыИУслуги", УправлениеДаннымиОбИзделиях.СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам());
	
	ИсточникиДанных.Вставить("ДанныеПоНоменклатуре"); // данные по номенклатуре распоряжения
	
	Возврат ИсточникиДанных;
	
КонецФункции

// Описание источников операндов для формул
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура,Неопределено - данные объекта
// Возвращаемое значение:
// 	Структура - из:
// 		* ОсновноеИзделие - см. УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов
// 		* ВыходныеИзделия - см. УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов
// 		* ВыходноеИзделие - см. УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов
// 		* МатериалыИУслуги - см. УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов
// 		* Материал - см. УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов
// 		* ВозвратныеОтходы - см. УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов
// 		* ВозвратныйОтход - см. УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов
// 		* Подразделение - см. УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов
// 		* Распоряжение - см. УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов
// 		* НаправлениеДеятельности - см. УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов
//
Функция ОписаниеИсточниковДанныхОперандов(Объект = Неопределено) Экспорт
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	
	Результат = Новый Структура;
	
	// [Основное изделие]
	ПредставлениеИсточника = НСтр("ru = 'Основное изделие';
									|en = 'Main product'");
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"ОсновноеИзделие", ПредставлениеИсточника);
	
	ПредставлениеИсточника = НСтр("ru = 'Количество';
									|en = 'Quantity'");
	НовыйРеквизит = УправлениеДаннымиОбИзделиях.СоздатьОписанияРеквизитаИсточникаДанныхОперандов(
		"Количество", ОписаниеТипаЧисло, ПредставлениеИсточника);
	Описание.Реквизиты.Добавить(НовыйРеквизит);
	
	Описание.СодержитСвойстваНоменклатуры = Истина;
	
	Результат.Вставить("ОсновноеИзделие", Описание);
	
	// [ВыходныеИзделия]
	Если Объект = Неопределено
		ИЛИ Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка Тогда
		
		ПредставлениеИсточника = НСтр("ru = 'Выходные изделия';
										|en = 'Finished products'");
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
			"ВыходныеИзделия", ПредставлениеИсточника);
		
		ПредставлениеИсточника = НСтр("ru = 'Количество';
										|en = 'Quantity'");
		НовыйРеквизит = УправлениеДаннымиОбИзделиях.СоздатьОписанияРеквизитаИсточникаДанныхОперандов(
			"Количество", ОписаниеТипаЧисло, ПредставлениеИсточника);
		Описание.Реквизиты.Добавить(НовыйРеквизит);
		
		Описание.СодержитСвойстваНоменклатуры = Истина;
		Описание.Коллекция                    = Истина;
		
		Результат.Вставить("ВыходныеИзделия", Описание);
		
		ПредставлениеИсточника = НСтр("ru = 'Выходное изделие (текущая строка)';
										|en = 'Finished product (current line)'");
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
			"ВыходноеИзделие", ПредставлениеИсточника);
		
		Описание.СодержитСвойстваНоменклатуры = Истина;
		Описание.ИмяТЧ = "ВыходныеИзделия";
		
		Результат.Вставить("ВыходноеИзделие", Описание);
	
	КонецЕсли;
		
	// [МатериалыИУслуги]
	ПредставлениеИсточника = НСтр("ru = 'Материалы и работы';
									|en = 'Materials and works'");
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"МатериалыИУслуги", ПредставлениеИсточника);
	
	ПредставлениеИсточника = НСтр("ru = 'Количество';
									|en = 'Quantity'");
	НовыйРеквизит = УправлениеДаннымиОбИзделиях.СоздатьОписанияРеквизитаИсточникаДанныхОперандов(
		"Количество", ОписаниеТипаЧисло, ПредставлениеИсточника);
	Описание.Реквизиты.Добавить(НовыйРеквизит);
	
	Описание.СодержитСвойстваНоменклатуры = Истина;
	Описание.Коллекция                    = Истина;
	
	Результат.Вставить("МатериалыИУслуги", Описание);
	
	// [Материал]
	ПредставлениеИсточника = НСтр("ru = 'Материал (текущая строка)';
									|en = 'Material (current line)'");
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"Материал", ПредставлениеИсточника);
	
	Описание.СодержитСвойстваНоменклатуры = Истина;
	Описание.ИмяТЧ = "МатериалыИУслуги";
	
	Результат.Вставить("Материал", Описание);
	
	// [ВозвратныеОтходы]
	ПредставлениеИсточника = НСтр("ru = 'Побочный выход';
									|en = 'By-product'");
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"ВозвратныеОтходы", ПредставлениеИсточника);
	
	ПредставлениеИсточника = НСтр("ru = 'Количество';
									|en = 'Quantity'");
	НовыйРеквизит = УправлениеДаннымиОбИзделиях.СоздатьОписанияРеквизитаИсточникаДанныхОперандов(
		"Количество", ОписаниеТипаЧисло, ПредставлениеИсточника);
	Описание.Реквизиты.Добавить(НовыйРеквизит);
	
	Описание.СодержитСвойстваНоменклатуры = Истина;
	Описание.Коллекция                    = Истина;
	
	Результат.Вставить("ВозвратныеОтходы", Описание);
	
	// [ВозвратныйОтход]
	ПредставлениеИсточника = НСтр("ru = 'Побочный выход (текущая строка)';
									|en = 'By-product (current line)'");
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"ВозвратныйОтход", ПредставлениеИсточника);
	
	Описание.СодержитСвойстваНоменклатуры = Истина;
	Описание.ИмяТЧ = "ВозвратныеОтходы";
	
	Результат.Вставить("ВозвратныйОтход", Описание);
	
	// [Подразделение]
	ПредставлениеИсточника = НСтр("ru = 'Подразделение';
									|en = 'Business unit'");
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"Подразделение", ПредставлениеИсточника);
	
	Описание.СодержитСвойства = Истина;
	Описание.НаборСвойств     = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_СтруктураПредприятия");
	
	Результат.Вставить("Подразделение", Описание);
	
	// [Распоряжение]
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством") Тогда
		
		ПредставлениеИсточника = НСтр("ru = 'Заказ на производство';
										|en = 'Production order'");
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
			"Распоряжение", ПредставлениеИсточника);
		
		Описание.СодержитСвойства = Истина;
		Описание.НаборСвойств     = УправлениеСвойствами.НаборСвойствПоИмени("Документ_ЗаказНаПроизводство2_2");
		
		Результат.Вставить("Распоряжение", Описание);
		
	КонецЕсли;
	
	// [НаправлениеДеятельности]
	Если ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат") Тогда
	
		ПредставлениеИсточника = НСтр("ru = 'Направление деятельности';
										|en = 'Line of business'");
		Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
			"НаправлениеДеятельности", ПредставлениеИсточника);
		
		Описание.СодержитСвойства = Истина;
		Описание.НаборСвойств     = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_НаправленияДеятельности");
		
		Результат.Вставить("НаправлениеДеятельности", Описание);
	
	КонецЕсли;
	
	// [Спецификация]
	ПредставлениеИсточника = НСтр("ru = 'Спецификация';
									|en = 'bill of materials'");
	Описание = УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов(
		"Спецификация", ПредставлениеИсточника);
		
	Описание.СодержитСвойства = Истина;
	Описание.НаборСвойств     = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_РесурсныеСпецификации");
	
	Результат.Вставить("Спецификация", Описание);
	
	Возврат Результат;
	
КонецФункции

// Конструктор источника данных для расчета по формулам
// 
// Параметры:
// 	ПутьКДанным - см. УправлениеДаннымиОбИзделиях.ПараметрыДляРасчетаПоФормулам
// 	ИсточникиДанных - см. СтруктураИсточниковДляРасчетаПоФормулам
// Возвращаемое значение:
// 	см. УправлениеДаннымиОбИзделиях.СоздатьСтруктуруДанныхИсточникаДляРасчетаПоФормулам
//
Функция ИсточникДанныхДляРасчетаПоФормулам(ПутьКДанным, ИсточникиДанных) Экспорт
	
	Источник = Неопределено;
	
	Если ПутьКДанным.Ключ = "ОсновноеИзделие" Тогда
		
		Источник = УправлениеДаннымиОбИзделиях.СоздатьСтруктуруДанныхИсточникаДляРасчетаПоФормулам();
		ЗаполнитьЗначенияСвойств(Источник, ИсточникиДанных.ОсновноеИзделие);
		
	ИначеЕсли ПутьКДанным.Ключ = "ВыходныеИзделия"
		ИЛИ ПутьКДанным.Ключ = "ВозвратныеОтходы"
		ИЛИ ПутьКДанным.Ключ = "МатериалыИУслуги" Тогда
		
		ДанныеСтроки = ИсточникиДанных[ПутьКДанным.Ключ].Найти(ПутьКДанным.НомерСтроки, "НомерСтроки");
		Если ДанныеСтроки <> Неопределено Тогда
			Источник = УправлениеДаннымиОбИзделиях.СоздатьСтруктуруДанныхИсточникаДляРасчетаПоФормулам();
			ЗаполнитьЗначенияСвойств(Источник, ДанныеСтроки);
		КонецЕсли;
		
	ИначеЕсли ПутьКДанным.Ключ = "ВыходноеИзделие"
		ИЛИ ПутьКДанным.Ключ = "ВозвратныйОтход"
		ИЛИ ПутьКДанным.Ключ = "Материал" Тогда
		
		Источник = УправлениеДаннымиОбИзделиях.СоздатьСтруктуруДанныхИсточникаДляРасчетаПоФормулам();
		ЗаполнитьЗначенияСвойств(Источник, ПутьКДанным.ДанныеСтроки);
		
	Иначе
		
		Структура = Новый Структура(ПутьКДанным.Ключ);
		
		Если ПутьКДанным.Ключ = "Подразделение" Тогда
			
			ЗаполнитьЗначенияСвойств(Структура, ПутьКДанным.ДанныеСтроки);
			
		ИначеЕсли ПутьКДанным.Ключ = "Распоряжение"
			ИЛИ ПутьКДанным.Ключ = "Спецификация"
			ИЛИ ПутьКДанным.Ключ = "НаправлениеДеятельности" Тогда
			
			ЗаполнитьЗначенияСвойств(Структура, ИсточникиДанных.ДанныеПоНоменклатуре);
			
		КонецЕсли;
		Источник = Структура[ПутьКДанным.Ключ];
		
	КонецЕсли;
	
	Возврат Источник;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область НастройкиАвтовыбораИПотребленияНоменклатуры

Процедура ОбработатьНастройкиАвтовыбора(Таблицы, МенеджерВременныхТаблиц, ПараметрыВыборки)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыАвтовыбора = Неопределено;
	
	Для каждого ИмяНабораДанных Из СтрРазделить("МатериалыИУслуги,ВозвратныеОтходы,ВыходныеИзделия",",") Цикл
		
		НаборДанных = Неопределено;
		Если НЕ Таблицы.Свойство(ИмяНабораДанных, НаборДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыАвтовыбора = Неопределено Тогда
			ПараметрыАвтовыбора = ПолучитьПараметрыАвтовыбора(Таблицы, МенеджерВременныхТаблиц, ПараметрыВыборки);
		КонецЕсли;
		ПараметрыАвтовыбора.ИмяТЧ = ИмяНабораДанных;
		
		УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораНоменклатуры(НаборДанных, ПараметрыАвтовыбора);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПараметрыАвтовыбора(Таблицы, МенеджерВременныхТаблиц, ПараметрыВыборки)
	
	ПараметрыАвтовыбора = УправлениеДаннымиОбИзделиях.ПолучитьПараметрыАвтовыбора();
	
	ПараметрыАвтовыбора.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаДанныхПоНоменклатуре = Таблицы.ДанныеПоНоменклатуре; // ТаблицаЗначений
	ТаблицаДанныхПоНоменклатуре.Индексы.Добавить("Идентификатор");
	ПараметрыАвтовыбора.ТаблицаДанныхПоНоменклатуре = ТаблицаДанныхПоНоменклатуре;
	
	ЗначенияСвойствИзделий = Таблицы.ЗначенияСвойствИзделий; // ТаблицаЗначений
	ЗначенияСвойствИзделий.Индексы.Добавить("Номенклатура,Характеристика");
	ЗначенияСвойствИзделий.Индексы.Добавить("Свойство");
	ЗначенияСвойствИзделий.Индексы.Добавить("СвойствоИдентификатор");
	ПараметрыАвтовыбора.ЗначенияСвойствИзделий = ЗначенияСвойствИзделий;
	
	СоответствиеСвойств = Таблицы.СоответствиеСвойств; // ТаблицаЗначений
	СоответствиеСвойств.Индексы.Добавить("Спецификация");
	СоответствиеСвойств.Индексы.Добавить("Спецификация,КлючСвязи");
	ПараметрыАвтовыбора.СоответствиеСвойств = СоответствиеСвойств;
	
	ПараметрыАвтовыбора.ПолучитьПредставления      = ПараметрыВыборки.ПолучитьПредставления;
	ПараметрыАвтовыбора.ПолучитьСведенияАвтовыбора = ПараметрыВыборки.ПолучитьСведенияАвтовыбора;
	
	Возврат ПараметрыАвтовыбора;
	
КонецФункции

#КонецОбласти

#Область ПараметрыНазначения

Функция ЗначенияПараметровНазначенияСпецификаций(Спецификации) Экспорт
	
	Результат = Новый Соответствие;
	
	ШаблонТаблицы = Новый ТаблицаЗначений;
	ШаблонТаблицы.Колонки.Добавить("ВидПараметра", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПараметровНазначенияСпецификаций"));
	ШаблонТаблицы.Колонки.Добавить("Реквизит",     Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ШаблонТаблицы.Колонки.Добавить("ТипЗначения",  Новый ОписаниеТипов("ОписаниеТипов"));
	ШаблонТаблицы.Колонки.Добавить("СтруктураЗначения");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Значения.Спецификация             КАК Спецификация,
	|	Значения.ВидПараметра             КАК ВидПараметра,
	|	Значения.Реквизит                 КАК Реквизит,
	|	Значения.Реквизит.ТипЗначения     КАК РеквизитТипЗначения,
	|	Значения.НомерВСписке             КАК НомерВСписке,
	|	Значения.Условие                  КАК Условие,
	|	Значения.Значение                 КАК Значение,
	|	ЕСТЬNULL(Настройки.Приоритет, -1) КАК Приоритет
	|ИЗ
	|	РегистрСведений.ЗначенияПараметровНазначенияСпецификаций КАК Значения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНазначенияСпецификаций КАК Настройки
	|	ПО Значения.ВидПараметра = Настройки.ВидПараметра
	|		И Значения.Реквизит = Настройки.Реквизит
	|
	|ГДЕ
	|	Значения.Спецификация В (&Спецификации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(Настройки.Приоритет, -1) УБЫВ,
	|	Значения.Условие,
	|	Значения.НомерВСписке
	|ИТОГИ ПО
	|	Значения.Спецификация,
	|	Значения.ВидПараметра,
	|	Значения.Реквизит";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Спецификации", Спецификации);
	
	СтруктураУсловий = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураУсловийОтбораПоСвойствамНоменклатуры();
	
	ВыборкаСпецификации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Спецификация");
	Для каждого Спецификация Из Спецификации Цикл
		
		ПараметрыНазначенияСпецификации = ШаблонТаблицы.СкопироватьКолонки();
		
		ВыборкаСпецификации.Сбросить();
		ВыборкаСпецификации.НайтиСледующий(Спецификация);
		
		ВыборкаВидПараметра = ВыборкаСпецификации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидПараметра");
		Пока ВыборкаВидПараметра.Следующий() Цикл
			
			ВыборкаРеквизит = ВыборкаВидПараметра.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Реквизит");
			Пока ВыборкаРеквизит.Следующий() Цикл
				
				Условие           = Неопределено; // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураУсловияОтбораПоСвойствамНоменклатуры
				СтруктураЗначения = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураЗначенияПараметраНазначенияСпецификаций();
				
				Выборка = ВыборкаРеквизит.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					
					Если НЕ СтруктураУсловий.Свойство(Выборка.Условие, Условие) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Условие.Список Тогда
						
						Если НЕ ЗначениеЗаполнено(СтруктураЗначения.Значение) Тогда
							СтруктураЗначения.Значение = Новый СписокЗначений;
						КонецЕсли;
						СтруктураЗначения.Значение.Добавить(Выборка.Значение);
						
					ИначеЕсли Выборка.НомерВСписке > 0 Тогда
						
						Если СтрНайти(Условие.Идентификатор, "Больше") Тогда
							СтруктураЗначения.Значение1 = Выборка.Значение;
						ИначеЕсли СтрНайти(Условие.Идентификатор, "Меньше") Тогда
							СтруктураЗначения.Значение2 = Выборка.Значение;
						КонецЕсли;
						Условие = СтруктураУсловий[?(СтрНайти(Условие.Идентификатор, "Равно"),"ВИнтервалеВключая","ВИнтервале")];
						
					Иначе
						
						СтруктураЗначения.Значение = Выборка.Значение;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Условие <> Неопределено Тогда
					СтруктураЗначения.Условие = Условие;
					НоваяСтрока = ПараметрыНазначенияСпецификации.Добавить();
					НоваяСтрока.ВидПараметра      = ВыборкаВидПараметра.ВидПараметра;
					НоваяСтрока.Реквизит          = ВыборкаРеквизит.Реквизит;
					НоваяСтрока.СтруктураЗначения = СтруктураЗначения;
					НоваяСтрока.ТипЗначения       = УправлениеДаннымиОбИзделияхКлиентСервер.ТипЗначенияПараметраНазначения(
														ВыборкаВидПараметра.ВидПараметра,
														ВыборкаРеквизит.РеквизитТипЗначения);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПараметрыНазначенияСпецификации.Индексы.Добавить("ВидПараметра");
		ПараметрыНазначенияСпецификации.Индексы.Добавить("ВидПараметра,Реквизит");
		
		Результат.Вставить(Спецификация, ПараметрыНазначенияСпецификации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Конструктор параметров вызова фонового задания для опеределения списка вытесняющих спецификаций
// 
// Параметры:
// 	Объект - СправочникОбъект.РесурсныеСпецификации - объект спецификации
// Возвращаемое значение:
// 	Структура - параметры:
// * Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация
// * ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры
// * Номенклатура - СправочникСсылка.Номенклатура - номенклатура
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика
// * ПараметрыВыбораСпецификаций - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
//
Функция СписокВытесняющихСпецификацийПараметрыВызова(Объект) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	
	ОсновноеИзделие = УправлениеДаннымиОбИзделияхКлиентСервер.ДанныеОсновногоИзделияСпецификации(Объект);
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	ПараметрыВыбораСпецификаций.ДоступныеТипы.Добавить(Объект.ТипПроизводственногоПроцесса);
	ПараметрыВыбораСпецификаций.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыПроцедуры.Вставить("Спецификация",                Объект.Ссылка);
	ПараметрыПроцедуры.Вставить("ВидНоменклатуры",             ОсновноеИзделие.ВидНоменклатуры);
	ПараметрыПроцедуры.Вставить("Номенклатура",                ОсновноеИзделие.Номенклатура);
	ПараметрыПроцедуры.Вставить("Характеристика",              ОсновноеИзделие.Характеристика);
	ПараметрыПроцедуры.Вставить("ПараметрыВыбораСпецификаций", ПараметрыВыбораСпецификаций);
	
	Возврат ПараметрыПроцедуры;
	
КонецФункции

Процедура СписокВытесняющихСпецификацийВФоне(Параметры, АдресХранилища) Экспорт
	
	Спецификация = Параметры.Спецификация;
	
	Спецификации = СписокВытесняющихСпецификаций(Спецификация, Параметры);
	
	ПоместитьВоВременноеХранилище(Спецификации, АдресХранилища);
	
КонецПроцедуры

Функция СписокВытесняющихСпецификаций(Спецификация, ДополнительныеПараметры = Неопределено) Экспорт
	
	ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	Номенклатура    = Справочники.Номенклатура.ПустаяСсылка();
	Характеристика  = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПараметрыВыбораСпецификаций = Неопределено;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ВидНоменклатуры") Тогда
			ВидНоменклатуры = ДополнительныеПараметры.ВидНоменклатуры;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("Номенклатура") Тогда
			Номенклатура = ДополнительныеПараметры.Номенклатура;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("Характеристика") Тогда
			Характеристика = ДополнительныеПараметры.Характеристика;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ПараметрыВыбораСпецификаций") Тогда
			ПараметрыВыбораСпецификаций = ДополнительныеПараметры.ПараметрыВыбораСпецификаций;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыТекстаЗапроса = УправлениеДаннымиОбИзделиях.ПараметрыТекстаЗапросаСпецификацийИзделий();
	ПараметрыТекстаЗапроса.ТолькоПриоритетные = Истина;
	ПараметрыТекстаЗапроса.ИмяВыходнойТаблицы = "ВтСпецификации";
	
	Если ПараметрыВыбораСпецификаций = Неопределено Тогда
		ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
		ПараметрыВыбораСпецификаций.ДоступныеТипы.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Спецификация,"ТипПроизводственногоПроцесса"));
		ПараметрыВыбораСпецификаций.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.Ссылка.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	Таблица.ВидНоменклатуры                     КАК ВидНоменклатуры,
	|	Таблица.Номенклатура                        КАК Номенклатура,
	|	Таблица.Характеристика                      КАК Характеристика,
	|	Таблица.Ссылка.НачалоДействия               КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА Таблица.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3999, 1, 1)
	|		ИНАЧЕ Таблица.Ссылка.КонецДействия
	|	КОНЕЦ                                       КАК КонецДействия
	|ПОМЕСТИТЬ ВтДанныеТекущейСпецификации
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Спецификация
	|	И Таблица.Ссылка.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка), ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|	И (Таблица.ВидНоменклатуры = &ВидНоменклатуры
	|			ИЛИ &ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка))
	|	И (Таблица.Номенклатура = &Номенклатура
	|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И (Таблица.Характеристика = &Характеристика
	|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Таблица.ТипПроизводственногоПроцесса,
	|	Таблица.ОсновноеИзделиеВидНоменклатуры,
	|	Таблица.ОсновноеИзделиеНоменклатура,
	|	Таблица.ОсновноеИзделиеХарактеристика,
	|	Таблица.НачалоДействия,
	|	ВЫБОР
	|		КОГДА Таблица.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3999, 1, 1)
	|		ИНАЧЕ Таблица.КонецДействия
	|	КОНЕЦ
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Спецификация
	|	И Таблица.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|	И (Таблица.ОсновноеИзделиеВидНоменклатуры = &ВидНоменклатуры
	|			ИЛИ &ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) 
	|	И (Таблица.ОсновноеИзделиеНоменклатура = &Номенклатура
	|			ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И (Таблица.ОсновноеИзделиеХарактеристика = &Характеристика
	|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка                 КАК Спецификация,
	|	Таблица.Ссылка.Код             КАК Код,
	|	Таблица.Ссылка.НачалоДействия  КАК НачалоДействия,
	|	Таблица.Ссылка = &Спецификация КАК ЭтоТекущая
	|ПОМЕСТИТЬ ВтДанныеКонкурирующихСпецификаций
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеТекущейСпецификации КАК ТекущаяСпецификация
	|		ПО Таблица.Ссылка.ТипПроизводственногоПроцесса = ТекущаяСпецификация.ТипПроизводственногоПроцесса
	|			И Таблица.Ссылка.ВариантПодбораВДокументы = ЗНАЧЕНИЕ(Перечисление.ВариантыПодбораСпецификацииВДокументы.Автоматически)
	|			И (Таблица.Ссылка.Статус В (&ДоступныеСтатусы))
	|			И Таблица.ВидНоменклатуры = ТекущаяСпецификация.ВидНоменклатуры
	|			И (Таблица.Номенклатура = ТекущаяСпецификация.Номенклатура
	|				ИЛИ ТекущаяСпецификация.Номенклатура = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка))
	|			И (Таблица.Характеристика = ТекущаяСпецификация.Характеристика
	|				ИЛИ ТекущаяСпецификация.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	Таблица.Ссылка.НачалоДействия <= ТекущаяСпецификация.КонецДействия
	|	И ВЫБОР
	|			КОГДА Таблица.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДАТАВРЕМЯ(3999, 1, 1)
	|			ИНАЧЕ Таблица.Ссылка.КонецДействия
	|		КОНЕЦ >= ТекущаяСпецификация.НачалоДействия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.Код,
	|	Таблица.НачалоДействия,
	|	Таблица.Ссылка = &Спецификация
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеТекущейСпецификации КАК ТекущаяСпецификация
	|		ПО Таблица.ТипПроизводственногоПроцесса = ТекущаяСпецификация.ТипПроизводственногоПроцесса
	|			И Таблица.ВариантПодбораВДокументы = ЗНАЧЕНИЕ(Перечисление.ВариантыПодбораСпецификацииВДокументы.Автоматически)
	|			И (Таблица.Статус В (&ДоступныеСтатусы))
	|			И Таблица.ОсновноеИзделиеВидНоменклатуры = ТекущаяСпецификация.ВидНоменклатуры
	|			И (Таблица.ОсновноеИзделиеНоменклатура = ТекущаяСпецификация.Номенклатура
	|				ИЛИ ТекущаяСпецификация.Номенклатура = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка))
	|			И (Таблица.ОсновноеИзделиеХарактеристика = ТекущаяСпецификация.Характеристика
	|				ИЛИ ТекущаяСпецификация.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	Таблица.НачалоДействия <= ТекущаяСпецификация.КонецДействия
	|	И ВЫБОР
	|			КОГДА Таблица.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДАТАВРЕМЯ(3999, 1, 1)
	|			ИНАЧЕ Таблица.КонецДействия
	|		КОНЕЦ >= ТекущаяСпецификация.НачалоДействия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.*
	|ИЗ
	|	ВтДанныеКонкурирующихСпецификаций КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.ЭтоТекущая УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Свойство КАК Свойство
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ОтборПоСвойствам КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеКонкурирующихСпецификаций КАК ТаблицаОтбор
	|		ПО Таблица.Ссылка = ТаблицаОтбор.Спецификация
	|			И Таблица.КлючСвязи В (&КлючСвязиНоменклатура, &КлючСвязиХарактеристика)
	|ГДЕ
	|	&ИспользоватьДополнительныеРеквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ВидПараметра КАК ВидПараметра,
	|	Таблица.Реквизит     КАК Реквизит,
	|	Таблица.Приоритет    КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПараметрыНазначенияСпецификаций КАК Таблица
	|ГДЕ
	|	&ИспользоватьПараметрыНазначения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ
	|";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Спецификация",     Спецификация);
	Запрос.УстановитьПараметр("ВидНоменклатуры",  ВидНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура",     Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",   Характеристика);
	Запрос.УстановитьПараметр("ДоступныеСтатусы", ПараметрыВыбораСпецификаций.ДоступныеСтатусы);
	Запрос.УстановитьПараметр("КлючСвязиНоменклатура", УправлениеДаннымиОбИзделияхКлиентСервер.ОтборПоСвойствамКлючСвязиПредопределенный("Номенклатура"));
	Запрос.УстановитьПараметр("КлючСвязиХарактеристика", УправлениеДаннымиОбИзделияхКлиентСервер.ОтборПоСвойствамКлючСвязиПредопределенный("Характеристика"));
	Запрос.УстановитьПараметр("ИспользоватьПараметрыНазначения", ПолучитьФункциональнуюОпцию("ИспользоватьПараметрыНазначенияСпецификаций"));
	Запрос.УстановитьПараметр("ИспользоватьДополнительныеРеквизиты", ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения"));
	Запрос.Текст = ТекстЗапроса;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Спецификации                    = РезультатыЗапроса[РезультатыЗапроса.Количество()-3].Выгрузить();
	УточненияПрименения             = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить();
	УточненияПримененияИспользуются = УточненияПрименения.Количество() > 0;
	ПараметрыНазначения             = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
	ПараметрыНазначенияИспользуются = ПараметрыНазначения.Количество() > 0;
	
	Результат = Новый Массив;
	Если Спецификации.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекущаяСпецификация = Спецификации[0];
	
	// Проверка условий уточнения применения.
	Если УточненияПримененияИспользуются Тогда
		
		ЗначенияУточненийПрименения = УправлениеДаннымиОбИзделиях.ЗначенияУточненийПримененияСпецификаций(Спецификации.ВыгрузитьКолонку("Спецификация"));
		ЗначенияУточненийПримененияТекущейСпецификации = ЗначенияУточненийПрименения.Получить(ТекущаяСпецификация.Спецификация);
		
		СпецификацииСтрокиУдалить = Новый Массив;
		Для Индекс = 1 По Спецификации.Количество() - 1 Цикл
			
			ЗначенияУточненийСтроки = ЗначенияУточненийПрименения.Получить(Спецификации[Индекс].Спецификация);
			Для каждого УточнениеПрименения Из УточненияПрименения Цикл
				
				ЗначениеТекущей = ЗначенияУточненийПримененияТекущейСпецификации.Найти(УточнениеПрименения.Свойство, "Свойство");
				ЗначениеСтроки  = ЗначенияУточненийСтроки.Найти(УточнениеПрименения.Свойство, "Свойство");
				
				Если ЗначениеТекущей <> Неопределено
					И ЗначениеСтроки <> Неопределено
					И НЕ ЕстьПересечениеПараметровНазначенияСпецификаций(ЗначениеТекущей, ЗначениеСтроки) Тогда
						СпецификацииСтрокиУдалить.Добавить(Спецификации[Индекс]);
						Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого Строка Из СпецификацииСтрокиУдалить Цикл
			Спецификации.Удалить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверка параметров назначения, периода действия, кода.
	СтруктураПоиска                        = Новый Структура("ВидПараметра,Реквизит");
	ЗначенияПараметровНазначения           = Неопределено;
	ПараметрыНазначенияТекущейСпецификации = Неопределено;
	Для Индекс = 1 По Спецификации.Количество() - 1 Цикл
		
		ВытесняющаяСпецификация      = Ложь;
		ПроверятьВытеснениеПоПериоду = Истина;
		
		Если ПараметрыНазначенияИспользуются Тогда
			
			Если ЗначенияПараметровНазначения = Неопределено Тогда
				
				ЗначенияПараметровНазначения           = ЗначенияПараметровНазначенияСпецификаций(Спецификации.ВыгрузитьКолонку("Спецификация"));
				ПараметрыНазначенияТекущейСпецификации = ЗначенияПараметровНазначения.Получить(ТекущаяСпецификация.Спецификация);
				
			КонецЕсли;
			
			ПараметрыНазначенияСтроки = ЗначенияПараметровНазначения.Получить(Спецификации[Индекс].Спецификация);
			Для каждого ПараметрНазначения Из ПараметрыНазначения Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПараметрНазначения);
				
				НайденоПоТекущей = ПараметрыНазначенияТекущейСпецификации.НайтиСтроки(СтруктураПоиска);
				НайденоПоСтроке  = ПараметрыНазначенияСтроки.НайтиСтроки(СтруктураПоиска);
				
				Если НЕ ЗначениеЗаполнено(НайденоПоТекущей) И НЕ ЗначениеЗаполнено(НайденоПоСтроке) Тогда
					Продолжить;
				ИначеЕсли НЕ ЗначениеЗаполнено(НайденоПоТекущей) И ЗначениеЗаполнено(НайденоПоСтроке) Тогда
					ВытесняющаяСпецификация = Истина;
					Прервать;
				ИначеЕсли ЗначениеЗаполнено(НайденоПоТекущей) И НЕ ЗначениеЗаполнено(НайденоПоСтроке) Тогда
					ПроверятьВытеснениеПоПериоду = Ложь;
					Прервать;
				Иначе
					Если ЕстьПересечениеПараметровНазначенияСпецификаций(НайденоПоТекущей[0].СтруктураЗначения, НайденоПоСтроке[0].СтруктураЗначения) Тогда
						Продолжить;
					Иначе
						ПроверятьВытеснениеПоПериоду = Ложь;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ВытесняющаяСпецификация И ПроверятьВытеснениеПоПериоду Тогда
			
			Если Спецификации[Индекс].НачалоДействия > ТекущаяСпецификация.НачалоДействия
				ИЛИ (Спецификации[Индекс].НачалоДействия = ТекущаяСпецификация.НачалоДействия
						И Спецификации[Индекс].Код > ТекущаяСпецификация.Код) Тогда
				ВытесняющаяСпецификация = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВытесняющаяСпецификация Тогда
			Результат.Добавить(Спецификации[Индекс].Спецификация);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет факт наличия пересечения параметров назначения
// 
// Параметры:
// 	СтруктураЗначения1 - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураЗначенияПараметраНазначенияСпецификаций
// 	СтруктураЗначения2 - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураЗначенияПараметраНазначенияСпецификаций
// Возвращаемое значение:
// 	Булево - Признак пересечения параметров
Функция ЕстьПересечениеПараметровНазначенияСпецификаций(СтруктураЗначения1, СтруктураЗначения2)
	
	МассивЗначений1 = ЗначениеПараметраНазначенияСпецификацииВМассив(СтруктураЗначения1);
	МассивЗначений2 = ЗначениеПараметраНазначенияСпецификацииВМассив(СтруктураЗначения2);
	
	Если СтруктураЗначения1.Условие.Заполненность Тогда
		Возврат ЕстьПересечениеПараметровНазначенияПоУсловиямЗаполненности(
			СтруктураЗначения1.Условие, СтруктураЗначения2.Условие, МассивЗначений2);
	КонецЕсли;
	
	Если СтруктураЗначения2.Условие.Заполненность Тогда
		Возврат ЕстьПересечениеПараметровНазначенияПоУсловиямЗаполненности(
			СтруктураЗначения2.Условие, СтруктураЗначения1.Условие, МассивЗначений1);
	КонецЕсли;
	
	Если МассивЗначений1.ВГраница() = -1 ИЛИ МассивЗначений2.ВГраница() = -1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипЗначения1 = ТипЗнч(МассивЗначений1[0]);
	ТипЗначения2 = ТипЗнч(МассивЗначений2[0]);
	
	Если ТипЗначения1 <> ТипЗначения2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗначения1 = Тип("Число") ИЛИ ТипЗначения1 = Тип("Дата") Тогда
		
		Возврат ЕстьПересечениеПараметровНазначенияПоИнтервалам(
			СтруктураЗначения1.Условие, МассивЗначений1, СтруктураЗначения2.Условие, МассивЗначений2);
		
	Иначе
		
		Возврат ЕстьПересечениеПараметровНазначенияПоНеинтервальнымУсловиям(
			СтруктураЗначения1.Условие, МассивЗначений1, СтруктураЗначения2.Условие, МассивЗначений2);
		
	КонецЕсли;
	
КонецФункции

Функция ЗначениеПараметраНазначенияСпецификацииВМассив(СтруктураЗначения)
	
	Результат = Новый Массив;
	
	Если СтруктураЗначения.Условие.Интервал Тогда
		Результат.Добавить(СтруктураЗначения.Значение1);
		Результат.Добавить(СтруктураЗначения.Значение2);
	ИначеЕсли СтруктураЗначения.Условие.Список Тогда
		СтруктураЗначения.Значение.СортироватьПоЗначению();
		Для каждого ЭлементСписка Из СтруктураЗначения.Значение Цикл
			Результат.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
	ИначеЕсли НЕ СтруктураЗначения.Условие.Заполненность Тогда
		Результат.Добавить(СтруктураЗначения.Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразует значение параметра в массив интервальных значений
// 
// Параметры:
// 	Условие - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураУсловияОтбораПоСвойствамНоменклатуры
// 	МассивЗначений - Массив из см. СтруктураЗначенияПараметраНазначенияСпецификаций - массив значений
// Возвращаемое значение:
// 	Массив из см. СтруктураИнтервалаЗначенияПараметраНазначения - массив интервалов
Функция ЗначениеПараметраНазначенияСпецификацииВМассивИнтервалов(Условие, Знач МассивЗначений)
	
	Результат = Новый Массив;
	
	Если Условие.Обратное Тогда // НеРавно, НеВСписке
		
		МассивЗначений.Добавить(ЗначениеГраницыИнтервалаБесконечность(1));
		
		ТекущееНачалоИнтервала = ЗначениеГраницыИнтервалаБесконечность(-1);
		Для Индекс = 0 По МассивЗначений.ВГраница() Цикл
			
			ТекущееЗначение = МассивЗначений[Индекс];
			
			Если ТекущееНачалоИнтервала = ТекущееЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			Интервал = СтруктураИнтервалаЗначенияПараметраНазначения();
			
			Интервал.Начало  = ЗначениеГраницыИнтервалаПоЗначениюПараметраНазначения(ТекущееНачалоИнтервала);
			Интервал.Конец   = ЗначениеГраницыИнтервалаПоЗначениюПараметраНазначения(ТекущееЗначение);
			
			ТекущееНачалоИнтервала = ТекущееЗначение;
			
			Результат.Добавить(Интервал);
			
		КонецЦикла;
		
	ИначеЕсли Условие.Интервал Тогда // ВИнтервале, ВИнтервалеВключая
		
		Интервал = СтруктураИнтервалаЗначенияПараметраНазначения();
		
		Интервал.Начало  = ЗначениеГраницыИнтервалаПоЗначениюПараметраНазначения(МассивЗначений[0]);
		Интервал.Конец   = ЗначениеГраницыИнтервалаПоЗначениюПараметраНазначения(МассивЗначений[1]);
		
		Результат.Добавить(Интервал);
		
	ИначеЕсли Условие.Сравнение Тогда // БольшеИлиРавно, МеньшеИлиРавно, Больше, Меньше
		
		Интервал = СтруктураИнтервалаЗначенияПараметраНазначения();
		
		Если СтрНайти(Условие.Идентификатор, "Больше") > 0 Тогда
			Интервал.Начало = ЗначениеГраницыИнтервалаПоЗначениюПараметраНазначения(МассивЗначений[0]);
		Иначе
			Интервал.Конец  = ЗначениеГраницыИнтервалаПоЗначениюПараметраНазначения(МассивЗначений[0]);
		КонецЕсли;
			
		Результат.Добавить(Интервал);
		
	Иначе // Равно, ВСписке
		
		Для каждого Значение Из МассивЗначений Цикл
			
			Интервал = СтруктураИнтервалаЗначенияПараметраНазначения();
			
			Интервал.Начало = ЗначениеГраницыИнтервалаПоЗначениюПараметраНазначения(Значение);
			Интервал.Конец  = ЗначениеГраницыИнтервалаПоЗначениюПараметраНазначения(Значение);
			
			Результат.Добавить(Интервал);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьПересечениеПараметровНазначенияПоУсловиямЗаполненности(Условие1, Условие2, МассивЗначений2)
	
	Если Условие1.Идентификатор = "Заполнено" Тогда
		
		Если Условие2.Идентификатор = "НеЗаполнено" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если МассивЗначений2.Количество() = 1
			И (НЕ ЗначениеЗаполнено(МассивЗначений2[0]) ИЛИ МассивЗначений2[0] = Ложь)
			И (Условие2.Идентификатор = "Равно" ИЛИ Условие2.Идентификатор = "ВСписке") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если Условие1.Идентификатор = "НеЗаполнено" Тогда
		
		ЕстьНезаполненные = Ложь;
		Для каждого Значение Из МассивЗначений2 Цикл
			Если НЕ ЗначениеЗаполнено(Значение) ИЛИ Значение = Ложь Тогда
				ЕстьНезаполненные = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьНезаполненные
			И (Условие2.Равенство = Истина ИЛИ Условие2.Идентификатор = "ВСписке") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьПересечениеПараметровНазначенияПоИнтервалам(Условие1, МассивЗначений1, Условие2, МассивЗначений2)
	
	МассивИнтервалов1 = ЗначениеПараметраНазначенияСпецификацииВМассивИнтервалов(Условие1, МассивЗначений1);
	МассивИнтервалов2 = ЗначениеПараметраНазначенияСпецификацииВМассивИнтервалов(Условие2, МассивЗначений2);
	
	Дельта = 0.0000000000000000000000000000001;
	
	Для каждого Интервал1 Из МассивИнтервалов1 Цикл
		Для каждого Интервал2 Из МассивИнтервалов2 Цикл
			
			Начало1 = Интервал1.Начало + ?(Условие1.Включая, 0, Дельта);
			Конец1  = Интервал1.Конец  - ?(Условие1.Включая, 0, Дельта);
			
			Начало2 = Интервал2.Начало + ?(Условие2.Включая, 0, Дельта);
			Конец2  = Интервал2.Конец  - ?(Условие2.Включая, 0, Дельта);
			
			Если Начало1 <= Конец2 И Конец1 >= Начало2 Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьПересечениеПараметровНазначенияПоНеинтервальнымУсловиям(Условие1, МассивЗначений1, Условие2, МассивЗначений2)
	
	Если Условие1.Обратное = Условие2.Обратное Тогда
		Если Условие1.Обратное Тогда
			Возврат Истина;
		Иначе
			Возврат (МассивЗначений1.Количество() <> ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивЗначений1, МассивЗначений2).Количество())
		КонецЕсли;
	Иначе
		Если Условие1.Обратное Тогда
			Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивЗначений2, МассивЗначений1).Количество() > 0;
		Иначе
			Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивЗначений1, МассивЗначений2).Количество() > 0;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ЗначениеГраницыИнтервалаБесконечность(Знак)
	
	Возврат Знак * 9999999999999999999999999999999;
	
КонецФункции

Функция ЗначениеГраницыИнтервалаПоЗначениюПараметраНазначения(Значение)
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат (Значение - Дата(1,1,1));
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

// Конструктор структуры интервала значения параметра назначения
// 
// Возвращаемое значение:
// 	Структура - из:
// * Начало - Дата - дата начала
// * Конец - Дата - дата окончания
Функция СтруктураИнтервалаЗначенияПараметраНазначения()
	
	Интервал = Новый Структура("Начало,Конец");
	Интервал.Начало  = ЗначениеГраницыИнтервалаБесконечность(-1);
	Интервал.Конец   = ЗначениеГраницыИнтервалаБесконечность(1);
	
	Возврат Интервал;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#Область Наборы

// Реквизиты строки состава набора.
// 
// Параметры:
//  ТипНабора - Строка - Торговый,Технологический
//  ПараметрыВыборки - см.ПараметрыВыборкиДанных
// 
// Возвращаемое значение:
//  Строка - Реквизиты строки состава набора
Функция РеквизитыСтрокиСоставаНабора(ТипНабора, ПараметрыВыборки = Неопределено)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Идентификатор");
	Реквизиты.Добавить("КлючСвязи");
	Реквизиты.Добавить("НомерСтроки");
	
	Реквизиты.Добавить("ТипНоменклатуры");
	Реквизиты.Добавить("Номенклатура");
	Реквизиты.Добавить("Характеристика");
	Реквизиты.Добавить("ХарактеристикиИспользуются");
	Реквизиты.Добавить("Спецификация");
	//++ НЕ УТКА
	Реквизиты.Добавить("СпособАвтовыбораНоменклатуры");
	Реквизиты.Добавить("СпособАвтовыбораХарактеристики");
	Реквизиты.Добавить("ИспользуетсяАвтовыбор");
	Реквизиты.Добавить("СведенияАвтовыбора");
	Реквизиты.Добавить("АлгоритмАвтовыбораХарактеристики");
	Реквизиты.Добавить("Производится");
	Реквизиты.Добавить("ПроизводитсяВПроцессе");
	//-- НЕ УТКА
	
	Реквизиты.Добавить("Количество");
	Реквизиты.Добавить("ЕдиницаИзмерения");
	Реквизиты.Добавить("ЕдиницаИзмеренияШтучная");
	Реквизиты.Добавить("КоличествоУпаковок");
	Реквизиты.Добавить("Упаковка");
	Реквизиты.Добавить("ДанныеУпаковки");
	Реквизиты.Добавить("УпаковкаШтучная");
	Реквизиты.Добавить("Округлить");
	//++ НЕ УТКА
	Реквизиты.Добавить("АлгоритмРасчетаКоличества");
	//-- НЕ УТКА
	
	Реквизиты.Добавить("Склад");
	Реквизиты.Добавить("ВариантОбеспечения");
	Реквизиты.Добавить("Обособленно");
	Реквизиты.Добавить("Запланировать");
	Реквизиты.Добавить("ЗаказатьНаСклад");
	
	//++ НЕ УТКА
	Реквизиты.Добавить("ОперацияРодитель");
	Реквизиты.Добавить("СпособПолученияМатериала");
	Реквизиты.Добавить("ИсточникПолученияПолуфабриката");
	//-- НЕ УТКА
	
	//++ Устарело_Производство21
	Реквизиты.Добавить("СпособПолученияПолуфабриката");
	//-- Устарело_Производство21
	
	//++ НЕ УТКА
	Если ТипНабора = "Технологический" Тогда
		Реквизиты.Добавить("СтатьяКалькуляции");
		Реквизиты.Добавить("ПрименениеМатериала");
		Реквизиты.Добавить("Альтернативный");
		Реквизиты.Добавить("Вероятность");
		Реквизиты.Добавить("КоэффициентВероятности");
		Реквизиты.Добавить("КлючСвязиНабор");
	КонецЕсли;
	//-- НЕ УТКА
	
	Если ПараметрыВыборки = Неопределено
			ИЛИ ПараметрыВыборки.ПолучитьПредставления Тогда
		Реквизиты.Добавить("ЕдИзм");
		Реквизиты.Добавить("НоменклатураПредставление");
		Реквизиты.Добавить("ХарактеристикаПредставление");
		//++ НЕ УТКА
		Если ТипНабора = "Технологический" Тогда
			Реквизиты.Добавить("ПрименениеМатериалаРедактирование");
		КонецЕсли;
		//-- НЕ УТКА
	КонецЕсли;
	
	Возврат СтрСоединить(Реквизиты,",");
	
КонецФункции

Процедура ВключитьДанныеНаборовВСтруктуруДанныхСпецификации(ДанныеСпецификации, Таблицы, ПараметрыВыборки, СтруктураОтбора)
	
	Если НЕ ПараметрыВыборки.ПолучитьДанныеНаборов Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНаборов = Новый Структура;
	
	ВидыДанныхНаборов = Новый Массив;
	ВидыДанныхНаборов.Добавить("ДанныеТорговыхНаборов");
	//++ НЕ УТКА
	ВидыДанныхНаборов.Добавить("ДанныеТехнологическихНаборов");
	//-- НЕ УТКА
	
	Для каждого ВидДанныхНаборов Из ВидыДанныхНаборов Цикл
		
		СтруктураДанных = Новый Структура("Состояние, Состав, СохраненныеСтроки", "Отсутствуют");
		
		Если Таблицы.Свойство(ВидДанныхНаборов) Тогда
		
			Состав = Таблицы[ВидДанныхНаборов].Скопировать(СтруктураОтбора); // ТаблицаЗначений
			Если Состав.Количество() > 0 Тогда
				
				СтруктураДанных.Состав    = Состав;
				СтруктураДанных.Состояние = "Свернуты";
				
			КонецЕсли;
		
		КонецЕсли;
		
		ДанныеНаборов.Вставить(ВидДанныхНаборов, СтруктураДанных);
		
	КонецЦикла;
	
	ДанныеСпецификации.Вставить("ДанныеНаборов", ДанныеНаборов);
	
КонецПроцедуры

// Производит распаковку / свертку данных наборов внутри структуры данных спецификации
// 
// Параметры:
// 	ПартияВыпуска - Структура - партия выпуска
// 	ДанныеСпецификации - см. ДанныеСпецификацииКонструктор
// 	Стадия - Строка - действие, которое необходимо произвести: Распаковать, Свернуть
//
Процедура ОбработатьДанныеНаборов(ПартияВыпуска, ДанныеСпецификации, Стадия)
	
	Если НЕ ДанныеСпецификации.Свойство("МатериалыИУслуги")
			ИЛИ НЕ ДанныеСпецификации.Свойство("ДанныеНаборов") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОтбора = "КлючСвязи";
	//++ НЕ УТКА
	РеквизитыОтбора = "КлючСвязи,ОперацияРодитель";
	//-- НЕ УТКА
	
	ОтборТипНоменклатуры = Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор);
	ОтборСтрок           = Новый Структура(РеквизитыОтбора);
	
	ИсточникСоставаНаборовВПроизводстве = УправлениеДаннымиОбИзделияхПовтИсп.ИсточникСоставаНаборовВПроизводстве();
	
	МатериалыИУслуги  = ДанныеСпецификации.МатериалыИУслуги;
	
	ВидыДанныхНаборов = Новый Массив;
	//++ НЕ УТКА
	ВидыДанныхНаборов.Добавить("ДанныеТехнологическихНаборов");
	//-- НЕ УТКА
	ВидыДанныхНаборов.Добавить("ДанныеТорговыхНаборов");
	
	#Область Свертка
	
	Если Стадия = "ПередРасчетом" Тогда
		
		Для каждого ВидДанныхНаборов Из ВидыДанныхНаборов Цикл
			ДанныеНаборов = ДанныеСпецификации.ДанныеНаборов[ВидДанныхНаборов];
			
			Если ДанныеНаборов.Состояние = "Распакованы" Тогда
				
				Если НЕ ДанныеСпецификации.ДанныеНаборов.Свойство("МатериалыИУслуги") Тогда
					ДанныеСпецификации.ДанныеНаборов.Вставить("МатериалыИУслуги", МатериалыИУслуги);
					МатериалыИУслуги = МатериалыИУслуги.Скопировать();
				КонецЕсли;
				
				Для каждого СтрокаМатериалы Из ДанныеНаборов.СохраненныеСтроки Цикл
					
					ИндексВставки = МатериалыИУслуги.Количество()-1;
					
					Индекс = 0;
					Пока Индекс < МатериалыИУслуги.Количество() Цикл
						Строка = МатериалыИУслуги[Индекс];
						Если ЗначениеЗаполнено(Строка.КлючСвязиНабор)
								И СтрокаМатериалы.КлючиСвязиНабор.Найти(Строка.КлючСвязиНабор) <> Неопределено Тогда
							ИндексВставки = Мин(ИндексВставки, Индекс);
							МатериалыИУслуги.Удалить(Индекс);
							Продолжить;
						КонецЕсли;
						Индекс = Индекс + 1;
					КонецЦикла;
					
					НоваяСтрока = МатериалыИУслуги.Вставить(ИндексВставки);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериалы);
					
				КонецЦикла;
				
				ДанныеНаборов.Состояние = "Свернуты";
				ДанныеНаборов.СохраненныеСтроки.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Распаковка
	
	Если Стадия = "ПослеРасчета" Тогда
		
		МатериалыИУслугиНаборы = МатериалыИУслуги.НайтиСтроки(ОтборТипНоменклатуры);
		Если МатериалыИУслугиНаборы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		НаборыМатериаловИРабот = УправлениеДаннымиОбИзделиях.НаборыМатериаловИРаботКонструктор();
		
		Для каждого ВидДанныхНаборов Из ВидыДанныхНаборов Цикл
			
			ДанныеНаборов = ДанныеСпецификации.ДанныеНаборов[ВидДанныхНаборов];
			
			Если ДанныеНаборов.Состояние = "Свернуты" Тогда
				
				Если ДанныеНаборов.Состав.Индексы.Количество() = 0 Тогда
					ДанныеНаборов.Состав.Индексы.Добавить(РеквизитыОтбора);
				КонецЕсли;
				
				СохраненныеСтроки = МатериалыИУслуги.СкопироватьКолонки();
				СохраненныеСтроки.Колонки.Добавить("КлючиСвязиНабор");
				
				//++ НЕ УТКА
				Если ВидДанныхНаборов = "ДанныеТехнологическихНаборов" Тогда
					
					СтрокаНабораСтруктурой = Новый Структура(РеквизитыСтрокиСоставаНабора("Технологический"));
					
					Для каждого СтрокаМатериалы Из МатериалыИУслугиНаборы Цикл
						
						Если СтрокаМатериалы.Номенклатура.Пустая() Тогда
							Продолжить;
						КонецЕсли;
						
						КлючиСвязиНабор = Новый Массив;
						
						ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаМатериалы);
						НайденныеСтроки = ДанныеНаборов.Состав.НайтиСтроки(ОтборСтрок);
						Если НайденныеСтроки.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						КлючСвязиНабор             = Новый УникальныйИдентификатор();
						ДанныеСпецификацииНабора   = НайденныеСтроки[0].ДанныеСпецификации;
						ДанныеПоНоменклатуреНабора = ДанныеПоНоменклатуреРасширенный();
						ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуреНабора, СтрокаМатериалы);
						
						ПартияНабора = ПартияВыпуска(СтрокаМатериалы.Количество,
							ДанныеСпецификацииНабора.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
								* ДанныеСпецификацииНабора.ОсновноеИзделие.ДанныеУпаковки.Числитель
									/ ДанныеСпецификацииНабора.ОсновноеИзделие.ДанныеУпаковки.Знаменатель);
						
						РассчитатьКоличествоНаПартиюВыпуска(
							ПартияНабора,
							ДанныеСпецификацииНабора,
							ДанныеПоНоменклатуреНабора);
							
						ИндексВставки = МатериалыИУслуги.Индекс(СтрокаМатериалы)+1;
						Для Индекс = 0 По ДанныеСпецификацииНабора.МатериалыИУслуги.Количество()-1 Цикл
							
							СтрокаНабора = ДанныеСпецификацииНабора.МатериалыИУслуги[Индекс];
							ЗаполнитьЗначенияСвойств(СтрокаНабораСтруктурой, СтрокаНабора);
							
							НоваяСтрока = МатериалыИУслуги.Вставить(ИндексВставки);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериалы);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабораСтруктурой,,"Идентификатор,НомерСтроки,ОперацияРодитель");
							НоваяСтрока.КоличествоУпаковокНаЕдиницуПартииВыпуска = СтрокаНабора.КоличествоУпаковокНаЕдиницуПартииВыпуска
								* СтрокаМатериалы.КоличествоУпаковокНаЕдиницуПартииВыпуска * СтрокаМатериалы.ДанныеУпаковки.Числитель
									/ ДанныеСпецификацииНабора.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска * СтрокаМатериалы.ДанныеУпаковки.Знаменатель;
							Если ИсточникСоставаНаборовВПроизводстве = Перечисления.ИсточникиСоставаНаборовВПроизводстве.Спецификации
									И ЗначениеЗаполнено(СтрокаМатериалы.СтатьяКалькуляции) Тогда
								НоваяСтрока.СтатьяКалькуляции = СтрокаМатериалы.СтатьяКалькуляции;
							КонецЕсли;
							НоваяСтрока.Обособленно = (НоваяСтрока.Обособленно
															ИЛИ СтрокаМатериалы.Обособленно);
							Если НЕ ЗначениеЗаполнено(НоваяСтрока.КлючСвязиНабор) Тогда
								НоваяСтрока.КлючСвязиНабор = КлючСвязиНабор;
							КонецЕсли;
							
							ИндексВставки = ИндексВставки + 1;
							КлючиСвязиНабор.Добавить(НоваяСтрока.КлючСвязиНабор);
							
						КонецЦикла;
						
						НоваяСтрока = НаборыМатериаловИРабот.Добавить();
						НоваяСтрока.КлючСвязи             = КлючСвязиНабор;
						НоваяСтрока.Спецификация          = СтрокаМатериалы.Спецификация;
						НоваяСтрока.СпецификацияРодитель  = ДанныеСпецификации.Спецификация;
						НоваяСтрока.КлючСвязиСпецификация = СтрокаМатериалы.КлючСвязи;
						НоваяСтрока.Этап                  = СтрокаМатериалы.Этап;
						НоваяСтрока.КоличествоСтрок       = ДанныеСпецификацииНабора.МатериалыИУслуги.Количество();
						Если ДанныеСпецификацииНабора.Свойство("НаборыМатериаловИРабот") Тогда
							Для каждого Строка Из ДанныеСпецификацииНабора.НаборыМатериаловИРабот Цикл
								НоваяСтрока = НаборыМатериаловИРабот.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
								Если НЕ ЗначениеЗаполнено(НоваяСтрока.КлючСвязиРодитель) Тогда
									НоваяСтрока.КлючСвязиРодитель = КлючСвязиНабор;
								КонецЕсли;
								Если НЕ ЗначениеЗаполнено(НоваяСтрока.Этап) Тогда
									НоваяСтрока.Этап = СтрокаМатериалы.Этап;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						НоваяСтрока = СохраненныеСтроки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериалы);
						НоваяСтрока.КлючиСвязиНабор = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(КлючиСвязиНабор);
						МатериалыИУслуги.Удалить(СтрокаМатериалы);
						
					КонецЦикла;
					
				КонецЕсли;
				//-- НЕ УТКА
				
				Если ВидДанныхНаборов = "ДанныеТорговыхНаборов" Тогда
					
					СтрокаНабораСтруктурой = Новый Структура(РеквизитыСтрокиСоставаНабора("Торговый"));
					
					Для каждого СтрокаМатериалы Из МатериалыИУслугиНаборы Цикл
						
						Если СтрокаМатериалы.Номенклатура.Пустая() Тогда
							Продолжить;
						КонецЕсли;
						
						КлючиСвязиНабор = Новый Массив;
						
						ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаМатериалы);
						СоставНабора = ДанныеНаборов.Состав.Скопировать(ОтборСтрок);
						Если СоставНабора.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						КлючСвязиНабор = Новый УникальныйИдентификатор();
						ИндексВставки  = МатериалыИУслуги.Индекс(СтрокаМатериалы)+1;
						
						СоставНабора.Сортировать("НомерСтроки");
						Для Индекс = 0 По СоставНабора.Количество() - 1 Цикл
							
							СтрокаНабора = СоставНабора[Индекс];
							ЗаполнитьЗначенияСвойств(СтрокаНабораСтруктурой, СтрокаНабора);
							
							НоваяСтрока = МатериалыИУслуги.Вставить(ИндексВставки);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериалы);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабораСтруктурой,,"Идентификатор,НомерСтроки");
							НоваяСтрока.Количество = СтрокаНабора.Количество * СтрокаМатериалы.Количество;
							НоваяСтрока.КоличествоУпаковок = СтрокаНабора.КоличествоУпаковок * СтрокаМатериалы.Количество;
							НоваяСтрока.КоличествоУпаковокНаЕдиницуПартииВыпуска = СтрокаНабора.КоличествоУпаковок
								* СтрокаМатериалы.КоличествоУпаковокНаЕдиницуПартииВыпуска
									* СтрокаМатериалы.ДанныеУпаковки.Числитель / СтрокаМатериалы.ДанныеУпаковки.Знаменатель;
							Если НЕ ЗначениеЗаполнено(НоваяСтрока.КлючСвязиНабор) Тогда
								НоваяСтрока.КлючСвязиНабор = КлючСвязиНабор;
							КонецЕсли;
							
							ИндексВставки = ИндексВставки + 1;
							КлючиСвязиНабор.Добавить(НоваяСтрока.КлючСвязиНабор);
							
						КонецЦикла;
						
						НоваяСтрока = НаборыМатериаловИРабот.Добавить();
						НоваяСтрока.КлючСвязи             = КлючСвязиНабор;
						НоваяСтрока.Спецификация          = СоставНабора[0].ВариантКомплектации;
						НоваяСтрока.СпецификацияРодитель  = ДанныеСпецификации.Спецификация;
						НоваяСтрока.КлючСвязиСпецификация = СтрокаМатериалы.КлючСвязи;
						НоваяСтрока.Этап                  = СтрокаМатериалы.Этап;
						НоваяСтрока.КоличествоСтрок       = СоставНабора.Количество();
						
						НоваяСтрока = СохраненныеСтроки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериалы);
						НоваяСтрока.КлючиСвязиНабор = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(КлючиСвязиНабор);
						МатериалыИУслуги.Удалить(СтрокаМатериалы);
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДанныеНаборов.СохраненныеСтроки = СохраненныеСтроки;
				ДанныеНаборов.Состояние = "Распакованы";
				
				МатериалыИУслугиНаборы = МатериалыИУслуги.НайтиСтроки(ОтборТипНоменклатуры);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборыМатериаловИРабот.Индексы.Добавить("КлючСвязи");
		ДанныеСпецификации.Вставить("НаборыМатериаловИРабот", НаборыМатериаловИРабот);
		
		Для каждого СтрокаМатериалы Из МатериалыИУслугиНаборы Цикл
			
			Если СтрокаМатериалы.Номенклатура.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаМатериалы.Номенклатура,
					СтрокаМатериалы.Характеристика);
					
			СведенияАвтовыбора = СтрШаблон(НСтр("ru = 'Не удалось определить состав набора ""%1"".%2';
												|en = 'Cannot determine the content of the ""%1"" set.%2'"),
				ПредставлениеНоменклатуры,
				" "+СтрокаМатериалы.СведенияАвтовыбора);
			
			СтрокаМатериалы.Номенклатура                   = Справочники.Номенклатура.ПустаяСсылка();
			СтрокаМатериалы.Характеристика                 = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			СтрокаМатериалы.СпособАвтовыбораНоменклатуры   = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве;
			СтрокаМатериалы.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ;
			СтрокаМатериалы.СведенияАвтовыбора             = СокрЛП(СведенияАвтовыбора);
			СтрокаМатериалы.ИспользуетсяАвтовыбор          = Истина;
			
		КонецЦикла;
		
		Если ДанныеСпецификации.ДанныеНаборов.Свойство("МатериалыИУслуги") Тогда
			Для Индекс = 0 По МатериалыИУслуги.Количество() - 1 Цикл
				ЗаполнитьЗначенияСвойств(ДанныеСпецификации.ДанныеНаборов.МатериалыИУслуги[Индекс], МатериалыИУслуги[Индекс]);
			КонецЦикла;
			МатериалыИУслуги = ДанныеСпецификации.ДанныеНаборов.МатериалыИУслуги;
			ДанныеСпецификации.ДанныеНаборов.Удалить("МатериалыИУслуги");
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	ДанныеСпецификации.МатериалыИУслуги = МатериалыИУслуги;
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ПолучитьДанныеТехнологическихНаборов(СписокНоменклатуры, Таблицы, ПараметрыВыборки)
	
	Если СписокНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки = Неопределено;
	Если НЕ ПараметрыВыборки.Свойство("ПараметрыОбработкиТехнологическихНаборов", ПараметрыОбработки) Тогда
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("Уровень",                      0);
		ПараметрыОбработки.Вставить("ГрафыКонтроляЗацикленности",   Новый Соответствие());
		ПараметрыОбработки.Вставить("ПереченьДанныхКопия",          ПараметрыВыборки.ПереченьДанных);
		ПараметрыОбработки.Вставить("МенеджерВременныхТаблицКопия", ПараметрыВыборки.МенеджерВременныхТаблиц);
		ПараметрыВыборки.ПереченьДанных = СтрРазделить("ВыходныеИзделия,МатериалыИУслуги", ",");
		ПараметрыВыборки.Вставить("ПараметрыОбработкиТехнологическихНаборов", ПараметрыОбработки);
	КонецЕсли;
	ПараметрыОбработки.Уровень = ПараметрыОбработки.Уровень + 1;
	
	РазделительЦепочки  = 100000;
	ГрафыТекущегоУровня = Новый Массив;
	СписокНоменклатуры.Колонки.Добавить("Идентификатор",        Новый ОписаниеТипов("Число"));
	СписокНоменклатуры.Колонки.Добавить("ИдентификаторЦепочки", Новый ОписаниеТипов("Число"));
	
	Для Индекс = 0 По СписокНоменклатуры.Количество() - 1 Цикл
		ТекущаяСтрока = СписокНоменклатуры[Индекс];
		
		Идентификатор = ТекущаяСтрока.СтрокаВладелец["Идентификатор"];
		ТекущаяСтрока.ИдентификаторЦепочки = ?(
			Идентификатор >= РазделительЦепочки, Цел(Идентификатор/РазделительЦепочки), Идентификатор);
		ТекущаяСтрока.Идентификатор = ТекущаяСтрока.ИдентификаторЦепочки * РазделительЦепочки + Индекс;
		
		Граф = ПараметрыОбработки.ГрафыКонтроляЗацикленности.Получить(ТекущаяСтрока.ИдентификаторЦепочки);
		Если Граф = Неопределено Тогда
			Граф = УправлениеПроизводством.Граф();
			ПараметрыОбработки.ГрафыКонтроляЗацикленности.Вставить(ТекущаяСтрока.ИдентификаторЦепочки, Граф);
		КонецЕсли;
		
		ТекущаяВершина = УправлениеПроизводством.ПолучитьВершинуГрафаПоСсылке(Граф, ТекущаяСтрока.СпецификацияВладелец);
		УправлениеПроизводством.ДобавитьСмежнуюВершинуВСписокСмежности(ТекущаяВершина, ТекущаяСтрока.Спецификация);
		УправлениеПроизводством.ПолучитьВершинуГрафаПоСсылке(Граф, ТекущаяСтрока.Спецификация);
		
		Если ГрафыТекущегоУровня.Найти(Граф) = Неопределено Тогда
			ГрафыТекущегоУровня.Добавить(Граф);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокОшибок = Новый Массив(2);
	Для каждого Граф Из ГрафыТекущегоУровня Цикл
		Если УправлениеПроизводством.ЕстьЦиклыВГрафе(Граф, СписокОшибок[0], СписокОшибок[1]) Тогда
			ТекстОшибки = НСтр("ru = 'Обнаружено зацикливание при получении данных производственных наборов (спецификации ""%1"" и ""%2"").';
								|en = 'Looping is detected when receiving the production set data (""%1"" and ""%2"" bills of materials).'");
			ВызватьИсключение СтрШаблон(ТекстОшибки, СписокОшибок[0], СписокОшибок[1]);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыВыборки.МенеджерВременныхТаблиц = Неопределено;
	ДанныеСпецификаций = ДанныеСпецификации(СписокНоменклатуры, ПараметрыВыборки);
	
	ДанныеНаборов = Таблицы.МатериалыИУслуги.СкопироватьКолонки("Идентификатор,КлючСвязи,ОперацияРодитель"); // ТаблицаЗначений
	ДанныеНаборов.Колонки.Добавить("ДанныеСпецификации");
	
	Для Индекс = 0 По СписокНоменклатуры.Количество() - 1 Цикл
		ТекущаяСтрока = СписокНоменклатуры[Индекс];
		НоваяСтрока = ДанныеНаборов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока.СтрокаВладелец);
		НоваяСтрока.ДанныеСпецификации = ДанныеСпецификаций[ТекущаяСтрока.Идентификатор];
	КонецЦикла;
	
	ДанныеНаборов.Индексы.Добавить("Идентификатор");
	Таблицы.Вставить("ДанныеТехнологическихНаборов", ДанныеНаборов);
	
	ПараметрыОбработки.Уровень = ПараметрыОбработки.Уровень - 1;
	Если ПараметрыОбработки.Уровень = 0 Тогда
		ПараметрыВыборки.ПереченьДанных          = ПараметрыОбработки.ПереченьДанныхКопия;
		ПараметрыВыборки.МенеджерВременныхТаблиц = ПараметрыОбработки.МенеджерВременныхТаблицКопия;
		ПараметрыВыборки.Удалить("ПараметрыОбработкиТехнологическихНаборов");
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область Прочее

Процедура ДобавитьПредставленияВЗапрос(ТекстЗапроса, ПолучитьПредставления)
	
	Если ПолучитьПредставления Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтапыПроизводства_Представления,",
										"ЕСТЬNULL(ЭтапыПроизводства.Подразделение.Представление, """") КАК ПодразделениеПредставление,
										|	ЕСТЬNULL(ЭтапыПроизводства.МаршрутнаяКарта.Представление, """") КАК МаршрутнаяКартаПредставление,"); //@Query-part
										
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидыРабочихЦентров_Представления,",
										"ЕСТЬNULL(ТабличнаяЧасть.ВидРабочегоЦентра.Представление, """") КАК ВидРабочегоЦентраПредставление,"); //@Query-part
										
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделия_Представления,",
										"ЕСТЬNULL(ВтИзделия.Этап.Представление, """") КАК ЭтапПредставление,
										|	ВЫБОР
										|		КОГДА ВтИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
										|			ТОГДА ЕСТЬNULL(ВтИзделия.Упаковка.Представление, """")
										|		ИНАЧЕ ЕСТЬNULL(ВтИзделия.Номенклатура.ЕдиницаИзмерения.Представление, """")
										|	КОНЕЦ КАК ЕдИзм,
										|	ЕСТЬNULL(ВтИзделия.ВидНоменклатуры.Представление, """") КАК ВидНоменклатурыПредставление,
										|	ЕСТЬNULL(ВтИзделия.Номенклатура.Представление, """") КАК НоменклатураПредставление,
										|	ЕСТЬNULL(ВтИзделия.Характеристика.Представление, """") КАК ХарактеристикаПредставление,"); //@Query-part
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВозвратныеОтходы_Представления,",
										"ЕСТЬNULL(ВтИзделия.Этап.Представление, """") КАК ЭтапПредставление,
										|	ВЫБОР
										|		КОГДА ВтИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
										|			ТОГДА ЕСТЬNULL(ВтИзделия.Упаковка.Представление, """")
										|		ИНАЧЕ ЕСТЬNULL(ВтИзделия.Номенклатура.ЕдиницаИзмерения.Представление, """")
										|	КОНЕЦ КАК ЕдИзм,
										|	ЕСТЬNULL(ВтИзделия.Номенклатура.Представление, """") КАК НоменклатураПредставление,
										|	ЕСТЬNULL(ВтИзделия.Характеристика.Представление, """") КАК ХарактеристикаПредставление,"); //@Query-part
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МатериалыИУслуги_Представления,",
										"ЕСТЬNULL(МатериалыИУслуги.Этап.Представление, """") КАК ЭтапПредставление,
										|	ВЫБОР
										|		КОГДА МатериалыИУслуги.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
										|			ТОГДА ЕСТЬNULL(МатериалыИУслуги.Упаковка.Представление, """")
										|		ИНАЧЕ ЕСТЬNULL(МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения.Представление, """")
										|	КОНЕЦ КАК ЕдИзм,
										|	ЕСТЬNULL(МатериалыИУслуги.Номенклатура.Представление, """") КАК НоменклатураПредставление,
										|	ЕСТЬNULL(МатериалыИУслуги.Характеристика.Представление, """") КАК ХарактеристикаПредставление,"); //@Query-part
	
		//++ НЕ УТКА
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПромежуточныйВыпуск_Представления,",
										"ЕСТЬNULL(ПромежуточныйВыпуск.ЭтапОтправитель.Представление, """") КАК ЭтапПредставление,
										|	ВЫБОР
										|		КОГДА ПромежуточныйВыпуск.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
										|			ТОГДА ПромежуточныйВыпуск.Номенклатура.ЕдиницаИзмерения.Представление
										|		КОГДА НоменклатураНовая.Номенклатура ЕСТЬ НЕ NULL
										|			ТОГДА НоменклатураНовая.Номенклатура.ЕдиницаИзмерения.Представление
										|		ИНАЧЕ ЕСТЬNULL(НоменклатураПодобранная.Номенклатура.ЕдиницаИзмерения.Представление, """")
										|	КОНЕЦ КАК ЕдИзм,
										|	ВЫБОР
										|		КОГДА ПромежуточныйВыпуск.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
										|			ТОГДА ПромежуточныйВыпуск.Номенклатура.Представление
										|		КОГДА НоменклатураНовая.Номенклатура ЕСТЬ НЕ NULL
										|			ТОГДА НоменклатураНовая.Номенклатура.Представление
										|		ИНАЧЕ ЕСТЬNULL(НоменклатураПодобранная.Номенклатура.Представление, """")
										|	КОНЕЦ КАК НоменклатураПредставление,
										|	ВЫБОР
										|		КОГДА ПромежуточныйВыпуск.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
										|			ТОГДА ПромежуточныйВыпуск.Характеристика.Представление
										|		КОГДА НоменклатураНовая.Номенклатура ЕСТЬ НЕ NULL
										|			ТОГДА НоменклатураНовая.Характеристика.Представление
										|		ИНАЧЕ ЕСТЬNULL(НоменклатураПодобранная.Характеристика.Представление, """")
										|	КОНЕЦ КАК ХарактеристикаПредставление,"); //@Query-part
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МатериалыИУслугиТП_Представления,",
										"ЕСТЬNULL(ВтТехнологическиеПроцессы.Этап.Представление, """") КАК ЭтапПредставление,
										|	ВЫБОР
										|		КОГДА МатериалыИУслуги.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
										|			ТОГДА ЕСТЬNULL(МатериалыИУслуги.Упаковка.Представление, """")
										|		ИНАЧЕ ЕСТЬNULL(МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения.Представление, """")
										|	КОНЕЦ КАК ЕдИзм,
										|	ЕСТЬNULL(МатериалыИУслуги.Номенклатура.Представление, """") КАК НоменклатураПредставление,
										|	ЕСТЬNULL(МатериалыИУслуги.Характеристика.Представление, """") КАК ХарактеристикаПредставление,"); //@Query-part
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МатериалыПВ_Представления,",
										"ЕСТЬNULL(Материалы.ЭтапПолучатель.Представление, """") КАК ЭтапПредставление,
										|	ВЫБОР
										|		КОГДА Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
										|			ТОГДА Материалы.Номенклатура.ЕдиницаИзмерения.Представление
										|		КОГДА НоменклатураНовая.Номенклатура ЕСТЬ НЕ NULL
										|			ТОГДА НоменклатураНовая.Номенклатура.ЕдиницаИзмерения.Представление
										|		ИНАЧЕ ЕСТЬNULL(НоменклатураПодобранная.Номенклатура.ЕдиницаИзмерения.Представление, """")
										|	КОНЕЦ КАК ЕдИзм,
										|	ВЫБОР
										|		КОГДА Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
										|			ТОГДА Материалы.Номенклатура.Представление
										|		КОГДА НоменклатураНовая.Номенклатура ЕСТЬ НЕ NULL
										|			ТОГДА НоменклатураНовая.Номенклатура.Представление
										|		ИНАЧЕ ЕСТЬNULL(НоменклатураПодобранная.Номенклатура.Представление, """")
										|	КОНЕЦ КАК НоменклатураПредставление,
										|	ВЫБОР
										|		КОГДА Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
										|			ТОГДА Материалы.Характеристика.Представление
										|		КОГДА НоменклатураНовая.Номенклатура ЕСТЬ НЕ NULL
										|			ТОГДА НоменклатураНовая.Характеристика.Представление
										|		ИНАЧЕ ЕСТЬNULL(НоменклатураПодобранная.Характеристика.Представление, """")
										|	КОНЕЦ КАК ХарактеристикаПредставление,"); //@Query-part
		
		//-- НЕ УТКА
	
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтапыПроизводства_Представления,", "");
										
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидыРабочихЦентров_Представления,", "");
										
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделия_Представления,", "");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВозвратныеОтходы_Представления,", "");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МатериалыИУслуги_Представления,", "");
		
		//++ НЕ УТКА
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПромежуточныйВыпуск_Представления,", "");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МатериалыИУслугиТП_Представления,", "");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МатериалыПВ_Представления,", "");
		//-- НЕ УТКА
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьОтборПоПараметрамВыбораДанных(МатериалыИУслуги, ПараметрыВыборки)
	
	Если НЕ ПараметрыВыборки.ДоступныРаботы Тогда
		
		Для Х = -МатериалыИУслуги.Количество() + 1 По 0 Цикл
			
			Строка = МатериалыИУслуги[-Х];
			
			Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
				ИЛИ Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара
				ИЛИ Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
				ИЛИ Строка.Номенклатура.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			МатериалыИУслуги.Удалить(-Х);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА
Процедура СоздатьПромежуточнуюНоменклатуруХарактеристику(Строка, КэшСсылокПромежуточногоВыпуска)
	
	Если ЗначениеЗаполнено(Строка.НоменклатураПромежуточногоВыпуска) Тогда
		СоздатьНоменклатуру = Ложь;
	ИначеЕсли КэшСсылокПромежуточногоВыпуска[Строка.Номенклатура] <> Неопределено Тогда
		Строка.НоменклатураПромежуточногоВыпуска = КэшСсылокПромежуточногоВыпуска[Строка.Номенклатура];
		СоздатьНоменклатуру = Ложь;
	Иначе
		СоздатьНоменклатуру = Истина;
	КонецЕсли;
	
	Если НЕ Строка.СоздатьХарактеристику Тогда
		СоздатьХарактеристику = Ложь;
	ИначеЕсли КэшСсылокПромежуточногоВыпуска[Строка.Характеристика] <> Неопределено Тогда
		Строка.ХарактеристикаПромежуточногоВыпуска = КэшСсылокПромежуточногоВыпуска[Строка.Характеристика];
		СоздатьХарактеристику = Ложь;
	Иначе
		СоздатьХарактеристику = Истина;
	КонецЕсли;
	
	Если НЕ СоздатьНоменклатуру И НЕ СоздатьХарактеристику Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ТоварыДругогоКачества");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Номенклатура", Строка.Номенклатура);
		
		БлокировкаДанных.Заблокировать();
		
		Если СоздатьНоменклатуру Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТоварыДругогоКачества.НоменклатураБрак                            КАК НоменклатураБрак,
				|	ТоварыДругогоКачества.НоменклатураБрак.ВидНоменклатуры            КАК НоменклатураБракВидНоменклатуры,
				|	ТоварыДругогоКачества.НоменклатураБрак.ИспользованиеХарактеристик КАК НоменклатураБракИспользованиеХарактеристик,
				|	ТоварыДругогоКачества.НоменклатураБрак.ЕдиницаИзмерения           КАК НоменклатураБракЕдиницаИзмерения,
				|	ТоварыДругогоКачества.НоменклатураБрак.ИспользоватьУпаковки       КАК НоменклатураБракИспользоватьУпаковки
				|ПОМЕСТИТЬ ВТТоварыДругогоКачества
				|ИЗ
				|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
				|ГДЕ
				|	ТоварыДругогоКачества.Номенклатура = &Номенклатура
				|	И ТоварыДругогоКачества.ГрадацияКачества = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ОграниченноГоден)
				|ИНДЕКСИРОВАТЬ ПО
				|	НоменклатураБракВидНоменклатуры,
				|	НоменклатураБракИспользованиеХарактеристик,
				|	НоменклатураБракЕдиницаИзмерения,
				|	НоменклатураБракИспользоватьУпаковки
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	ТоварыДругогоКачества.НоменклатураБрак КАК Номенклатура
				|ИЗ
				|	Справочник.Номенклатура КАК ОсновноеИзделие
				|
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоварыДругогоКачества КАК ТоварыДругогоКачества
				|	ПО ОсновноеИзделие.ВидНоменклатуры = ТоварыДругогоКачества.НоменклатураБракВидНоменклатуры
				|		И ОсновноеИзделие.ИспользованиеХарактеристик = ТоварыДругогоКачества.НоменклатураБракИспользованиеХарактеристик
				|		И ОсновноеИзделие.ЕдиницаИзмерения = ТоварыДругогоКачества.НоменклатураБракЕдиницаИзмерения
				|		И ОсновноеИзделие.ИспользоватьУпаковки = ТоварыДругогоКачества.НоменклатураБракИспользоватьУпаковки
				|ГДЕ
				|	ОсновноеИзделие.Ссылка = &Номенклатура");
			Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Строка.НоменклатураПромежуточногоВыпуска = Выборка.Номенклатура;
				КэшСсылокПромежуточногоВыпуска.Вставить(Строка.Номенклатура, Выборка.Номенклатура);
			Иначе
				УстановитьПривилегированныйРежим(Истина);
				Номенклатура = Строка.Номенклатура.Скопировать();
				Номенклатура.Наименование = Номенклатура.Наименование
					+ ", " + Строка(Перечисления.ГрадацииКачества.ОграниченноГоден);
				Номенклатура.НаименованиеПолное = Номенклатура.НаименованиеПолное
					+ ", " + Строка(Перечисления.ГрадацииКачества.ОграниченноГоден);
				Номенклатура.Качество = Перечисления.ГрадацииКачества.ОграниченноГоден;
				Номенклатура.ФайлКартинки = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
				Номенклатура.ФайлОписанияДляСайта = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
				Номенклатура.Код = "";
				Номенклатура.КодДляПоиска = "";
				Номенклатура.ПометкаУдаления = Ложь;
				Номенклатура.Записать();
				
				РегистрыСведений.ТоварыДругогоКачества.ЗаписатьСвязьСТоваромДругогоКачества(
					Строка.Номенклатура, Номенклатура.Ссылка);
				УстановитьПривилегированныйРежим(Ложь);
				
				Строка.НоменклатураПромежуточногоВыпуска = Номенклатура.Ссылка;
				КэшСсылокПромежуточногоВыпуска.Вставить(Строка.Номенклатура, Номенклатура.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Если СоздатьХарактеристику Тогда
			СтрокаКопия = Новый Структура;
			СтрокаКопия.Вставить("Номенклатура", Строка.НоменклатураПромежуточногоВыпуска);
			СтрокаКопия.Вставить("НоменклатураИсходногоКачества", Строка.Номенклатура);
			СтрокаКопия.Вставить("Характеристика");
			СтрокаКопия.Вставить("ХарактеристикиИспользуются");
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Строка.Характеристика);
			СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара");
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКопия, СтруктураДействий, Неопределено);
			
			Строка.ХарактеристикаПромежуточногоВыпуска = СтрокаКопия.Характеристика;
			КэшСсылокПромежуточногоВыпуска.Вставить(Строка.Характеристика, СтрокаКопия.Характеристика);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ресурсная спецификация';
				|en = 'Bill of materials'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'Не удалось создать номенклатуру промежуточного выпуска';
								|en = 'Cannot create intermediate products'");
		
	КонецПопытки;
	
КонецПроцедуры

// Объединяет таблицы материалов и входящих изделий
// 
// Параметры:
// 	ДанныеСпецификаций - Соответствие - данные спецификации
// 	ТаблицыДанных - Структура - из:
//		* МатериалыИУслуги - ТаблицаЗначений - таблица материалов:
//			** Идентификатор - Число - идентификатор строки
//		* ВходящиеИзделия - ТаблицаЗначений - таблица изделий:
//			** Идентификатор - Число - идентификатор строки
Процедура ОбъединитьМатериалыИВходящиеИзделия(ДанныеСпецификаций, ТаблицыДанных)
	
	ЗначенияВКолонкахПоУмолчанию = Новый Структура();
	Для каждого Колонка Из ТаблицыДанных.МатериалыИУслуги.Колонки Цикл
		Если ТаблицыДанных.ВходящиеИзделия.Колонки.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеПоУмолчанию = Неопределено;
		Для каждого Тип Из Колонка.ТипЗначения.Типы() Цикл
			Если Тип = Тип("Null") Тогда
				Продолжить;
			КонецЕсли;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип);
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
			ЗначениеПоУмолчанию = ОписаниеТипов.ПривестиЗначение(Неопределено);
			Прервать;
		КонецЦикла;
		ЗначенияВКолонкахПоУмолчанию.Вставить(Колонка.Имя, ЗначениеПоУмолчанию);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("Идентификатор");
	
	ТаблицаВходящиеИзделия = ТаблицыДанных.ВходящиеИзделия;
	
	ТаблицаИдентификаторов = ТаблицаВходящиеИзделия.Скопировать(,"Идентификатор");
	ТаблицаИдентификаторов.Свернуть("Идентификатор");
	
	Для каждого СтрокаИдентификатор Из ТаблицаИдентификаторов Цикл
		
		ДанныеСпецификации = ДанныеСпецификаций.Получить(СтрокаИдентификатор.Идентификатор); // см. ДанныеСпецификацииКонструктор
		МатериалыИУслуги   = ДанныеСпецификации.МатериалыИУслуги;
		
		ВходящиеИзделия = Неопределено;
		Если НЕ ДанныеСпецификации.Свойство("ВходящиеИзделия", ВходящиеИзделия) Тогда
			Если ТаблицаВходящиеИзделия.Индексы.Количество() = 0 Тогда
				ТаблицаВходящиеИзделия.Индексы.Добавить("Идентификатор");
			КонецЕсли;
			СтруктураОтбора.Идентификатор = СтрокаИдентификатор.Идентификатор;
			ВходящиеИзделия = ТаблицаВходящиеИзделия.НайтиСтроки(СтруктураОтбора);
			УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(ВходящиеИзделия, ТаблицыДанных.ДанныеУпаковок);
		КонецЕсли;
		
		КоличествоСтрок = МатериалыИУслуги.Количество();
		
		Если КоличествоСтрок > 0 Тогда
			НомерСтроки = МатериалыИУслуги[КоличествоСтрок-1].НомерСтроки + 1;
		Иначе
			НомерСтроки = 1;
		КонецЕсли;
		
		Для каждого Строка Из ВходящиеИзделия Цикл
			
			НоваяСтрока = МатериалыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "НомерСтроки");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияВКолонкахПоУмолчанию);
			
			НоваяСтрока.ВходящееИзделие = Истина;
			НоваяСтрока.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТКА

Процедура ЗаполнитьПараметрыОбеспеченияМатериалов(Запрос, Таблицы, ПараметрыВыборки)
	
	Таблица = Неопределено; // ТаблицаЗначений
	Если НЕ Таблицы.Свойство("МатериалыИУслуги", Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Таблица.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	
	ИндексСтроки = 0;
	СтрокДляОбработки = 0;
	Для каждого Строка Из Таблица Цикл
		Строка.ИндексСтроки = ИндексСтроки;
		Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации
				И Строка.Спецификация.Пустая()
			ИЛИ Строка.ИспользуетсяАвтовыбор
			ИЛИ Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
					И ПараметрыВыборки.ПолучитьДанныеНаборов Тогда
			СтрокДляОбработки = СтрокДляОбработки + 1;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Если СтрокДляОбработки > 0 Тогда
		
		ТекстыЗапросов = Новый Массив;
		
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЛОЖЬ                КАК ДанныеНаборов,
		|
		|	Т.Идентификатор     КАК Идентификатор,
		|	Т.ИндексСтроки      КАК ИндексСтроки,
		|	0                   КАК НомерСтроки,
		|	Т.КлючСвязи         КАК КлючСвязи,
		|
		|	Т.Номенклатура      КАК Номенклатура,
		|	Т.Характеристика    КАК Характеристика,
		|	Т.ТипНоменклатуры   КАК ТипНоменклатуры,
		|	ЛОЖЬ                КАК ХарактеристикиИспользуются,
		|
		|	0                                                          КАК Количество,
		|	0                                                          КАК КоличествоУпаковок,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	0                                                          КАК ДанныеУпаковки,
		|
		|	ЛОЖЬ                                                       КАК ЕдиницаИзмеренияШтучная,
		|	ЛОЖЬ                                                       КАК УпаковкаШтучная,
		|
		|	ЛОЖЬ                                                       КАК Округлить,
		|
		|	Т.Этап                           КАК Этап,
		//++ НЕ УТКА
		|	Т.ОперацияРодитель               КАК ОперацияРодитель,
		//-- НЕ УТКА
		|
		|	Т.СпособПолученияМатериала       КАК СпособПолученияМатериала,
		|	Т.Обособленно                    КАК Обособленно,
		|	Т.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
		|	Т.ПроизводитсяВПроцессе          КАК ПроизводитсяВПроцессе,
		|
		|	ЗНАЧЕНИЕ(Справочник.ВариантыКомплектацииНоменклатуры.ПустаяСсылка) КАК ВариантКомплектации,
		|
		|	Т.ИспользуетсяАвтовыбор
		|		И НЕ Т.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)
		|                                    КАК ПодбиратьОбеспечение,
		|	Т.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|		И (Т.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
		|			ИЛИ Т.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)
		|				И &ДоступноХранениеСоставаНабораВСпецификациях)
		|                                    КАК ПодбиратьСпецификацию
		|
		|ПОМЕСТИТЬ ВтМатериалыИУслуги
		|ИЗ
		|	&МатериалыИУслуги КАК Т
		|
		|ГДЕ
		|	&ОтборСтрок
		|";
		
		Если СтрокДляОбработки / Таблица.Количество() <= 0.7 Тогда
			ОтборСтрок = "
			|	(Т.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
			|			И Т.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))
			|	ИЛИ Т.ИспользуетсяАвтовыбор
			|	ИЛИ Т.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)
			|";
		Иначе
			ОтборСтрок = "ИСТИНА";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборСтрок", ОтборСтрок);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ИСТИНА                                          КАК ДанныеНаборов,
		|
		|	ВтМатериалыИУслуги.Идентификатор                КАК Идентификатор,
		|	ВтМатериалыИУслуги.ИндексСтроки                 КАК ИндексСтроки,
		|	Комплектующие.НомерСтроки                       КАК НомерСтроки,
		|	ВтМатериалыИУслуги.КлючСвязи                    КАК КлючСвязи,
		|
		|	Комплектующие.Номенклатура                      КАК Номенклатура,
		|	Комплектующие.Характеристика                    КАК Характеристика,
		|	Комплектующие.Номенклатура.ТипНоменклатуры      КАК ТипНоменклатуры,
	 	|	ВЫБОР 
		|		КОГДА Комплектующие.Номенклатура.ИспользованиеХарактеристик В (
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                           КАК ХарактеристикиИспользуются,
		|
		|	Комплектующие.Количество                        КАК Количество,
		|	Комплектующие.КоличествоУпаковок                КАК КоличествоУпаковок,
		|	Комплектующие.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	Комплектующие.Упаковка                          КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО                                    КАК ДанныеУпаковки,
		|
		|	Комплектующие.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК ЕдиницаИзмеренияШтучная,
		|	ЕСТЬNULL(&ТекстЗапросаТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ)                КАК УпаковкаШтучная,
		|
		// округление:
		|	ЕСТЬNULL(&ОкруглятьКоличествоШтучныхТоваров
		|		И Комплектующие.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		И Комплектующие.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		И &ТекстЗапросаТипИзмеряемойВеличины В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)), ЛОЖЬ)        КАК Округлить,
		|
		|	ВтМатериалыИУслуги.Этап                         КАК Этап,
		//++ НЕ УТКА
		|	ВтМатериалыИУслуги.ОперацияРодитель             КАК ОперацияРодитель,
		//-- НЕ УТКА
		|
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать) КАК СпособПолученияМатериала,
		|	ВтМатериалыИУслуги.Обособленно                                              КАК Обособленно,
		|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)                     КАК ИсточникПолученияПолуфабриката,
		|	ЛОЖЬ                                                                        КАК ПроизводитсяВПроцессе,
		|
		|	Комплектующие.Ссылка                                                        КАК ВариантКомплектации,
		|
		|	ИСТИНА КАК ПодбиратьОбеспечение,
		|	ЛОЖЬ   КАК ПодбиратьСпецификацию
		|
		|ПОМЕСТИТЬ ВтДанныеНаборов
		|ИЗ
		|	ВтМатериалыИУслуги КАК ВтМатериалыИУслуги
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Комплектующие
		|		ПО ВтМатериалыИУслуги.Номенклатура = Комплектующие.Ссылка.Владелец
		|			И ВтМатериалыИУслуги.Характеристика = Комплектующие.Ссылка.Характеристика
		|			И (Комплектующие.Ссылка.Основной)
		|
		|ГДЕ
		|	ВтМатериалыИУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)
		|	И &ДоступноХранениеСоставаНабораВВариантахКомплектации
		|	И Комплектующие.Номенклатура.ТипНоменклатуры В 
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|";
		
		ТекстПоляТипИзмеряемойВеличины = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"ТипИзмеряемойВеличины",
			"Комплектующие.Упаковка",
			"Комплектующие.Номенклатура");
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаТипИзмеряемойВеличины",
			ТекстПоляТипИзмеряемойВеличины);
			
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Т.*,
		|	Т.ИндексСтроки КАК ИндексДанных
		|ИЗ
		|ВтМатериалыИУслуги КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.*,
		|	NULL
		|ИЗ
		|ВтДанныеНаборов КАК Т
		|
		|";
		
		ТекстЗапроса = СтрЗаменить("
		|ВЫБРАТЬ
		|	Т.*,
		|	&Представления,
		|	Т.Номенклатура.ВидНоменклатуры                 КАК ВидНоменклатуры,
		|
		|	ВтДанныеПоНоменклатуре.Распоряжение            КАК Распоряжение,
		|	ВтДанныеПоНоменклатуре.Назначение              КАК Назначение,
		|	ВтДанныеПоНоменклатуре.НачалоПроизводства      КАК НачалоПроизводства,
		|	ВтДанныеПоНоменклатуре.ПодразделениеДиспетчер  КАК ПодразделениеДиспетчер,
		|	ВтДанныеПоНоменклатуре.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ВтДанныеПоНоменклатуре.Спецификация            КАК Спецификация,
		|	ВЫБОР
		|		КОГДА ВтДанныеПоНоменклатуре.ПодразделениеИсполнитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА Т.Этап.Подразделение
		|		ИНАЧЕ ВтДанныеПоНоменклатуре.ПодразделениеИсполнитель
		|	КОНЕЦ                                          КАК ПодразделениеИсполнитель
		|
		|ПОМЕСТИТЬ ВтСписокНоменклатуры
		|ИЗ &Таблица КАК Т
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
		|	ПО Т.Идентификатор = ВтДанныеПоНоменклатуре.Идентификатор
		|", "&Таблица", "("+ТекстЗапроса+")");
		
		ТекстПредставления = "";
		Если ПараметрыВыборки.ПолучитьПредставления Тогда
			ТекстПредставления = "
			|	ВЫБОР
			|		КОГДА Т.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ЕСТЬNULL(Т.Упаковка.Представление, """")
			|		ИНАЧЕ ЕСТЬNULL(Т.Номенклатура.ЕдиницаИзмерения.Представление, """")
			|	КОНЕЦ                                          КАК ЕдИзм,
			|	ЕСТЬNULL(Т.Номенклатура.Представление, """")   КАК НоменклатураПредставление,
			|	ЕСТЬNULL(Т.Характеристика.Представление, """") КАК ХарактеристикаПредставление,
			|";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Представления,", ТекстПредставления);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		//
		ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
		
		ПараметрыЗапросаСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыТекстаЗапросаСпецификацийИзделий();
		ПараметрыЗапросаСпецификаций.ИмяВыходнойТаблицы         = "ВтСпецификации";
		ПараметрыЗапросаСпецификаций.ТолькоПриоритетные         = Истина;
		ПараметрыЗапросаСпецификаций.РазделительИтоговогоПакета = Ложь;
		ПараметрыЗапросаСпецификаций.УсловияОтбораВходящихДанных.Добавить("СписокНоменклатуры.ПодбиратьСпецификацию = ИСТИНА");
		
		ТекстыЗапросов.Добавить(УправлениеДаннымиОбИзделиях.ТекстЗапросаСпецификацийИзделий(
																ПараметрыЗапросаСпецификаций,
																ПараметрыВыбораСпецификаций));
		
		// Данные упаковок
		ТекстыЗапросов.Добавить(УправлениеДаннымиОбИзделиях.ТекстЗапросаДанныеУпаковок(
																ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВтДанныеНаборов")));
		
		// Приоритетные спецификации
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Т.ИндексСтроки              КАК ИндексСтроки,
		|	Т.ПодбиратьСпецификацию     КАК ПодбиратьСпецификацию,
		|
		|	Т.Распоряжение              КАК Распоряжение,
		|	Т.НаправлениеДеятельности   КАК НаправлениеДеятельности,
		|	Т.ПодразделениеИсполнитель  КАК ПодразделениеИсполнитель,
		|	Т.Спецификация              КАК СпецификацияВладелец,
		|
		|	ВТСпецификации.Спецификация КАК Спецификация
		|
		|ИЗ
		|	ВтСписокНоменклатуры КАК Т
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпецификации КАК ВТСпецификации
		|		ПО Т.ИндексДанных = ВТСпецификации.ИндексДанных
		|
		|ГДЕ
		|	Т.ПодбиратьСпецификацию
		|		И НЕ ВТСпецификации.Спецификация ЕСТЬ NULL
		|	ИЛИ Т.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)
		|		И &ДоступноХранениеСоставаНабораВСпецификациях
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.ИндексСтроки,
		|	Т.НомерСтроки
		|";
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		// Обеспечение
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Т.*,
		|	&ТекстПолеЗаказатьНаСклад    КАК ЗаказатьНаСклад,
		|	&ТекстПолеСклад              КАК Склад,
		|	&ТекстПолеВариантОбеспечения КАК ВариантОбеспечения,
		|	&ТекстПолеОбособленно        КАК Обособленно,
		|	&ТекстПолеЗапланировать      КАК Запланировать
		|ИЗ
		|	ВтСписокНоменклатуры КАК Т
		|
				// Сюда подставляется запрос для получения склада, варианта обеспечения
		|		,ТекстСоединенияПараметрыОбеспечения
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО &ТекстПолеСклад = СпрСклады.Ссылка
		|
		|		,ТекстСоединенияСпособыОбеспечения
		|
		|		,ТекстСоединенияЗаказатьНаСклад
		|
		|ГДЕ
		|	Т.ПодбиратьОбеспечение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.ДанныеНаборов,
		|	Т.ИндексСтроки,
		|	Т.НомерСтроки
		|";
		
		ТекстПолеЗапланировать = "ЛОЖЬ";
		ТекстСоединенияСпособыОбеспечения = "";
		Если ПараметрыВыборки.РассчитыватьПризнакЗапланироватьПроизводство Тогда
			ТекстПолеЗапланировать = ТекстПодстановкиПоляЗапланировать(
				"Т.ПодразделениеДиспетчер",
				"Т.Номенклатура",
				"ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)");
			ТекстСоединенияСпособыОбеспечения = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
				"ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособОбеспечения
				|	ПО &ПодстановкаОсновногоСпособаОбеспечения",
				"ПодстановкаОсновногоСпособаОбеспечения",
				"Т.Номенклатура, Т.Характеристика, СпрСклады.Ссылка");
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолеЗапланировать"            , ТекстПолеЗапланировать);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",ТекстСоединенияСпособыОбеспечения",  ТекстСоединенияСпособыОбеспечения);
		
		ПолеЗаказатьНаСклад = ПараметрыПодстановкиПоляЗаказатьНаСклад("Т",, ПараметрыВыборки.ВариантЗаполненияОбеспечения);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолеЗаказатьНаСклад"      , ПолеЗаказатьНаСклад.ТекстПоля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",ТекстСоединенияЗаказатьНаСклад", ПолеЗаказатьНаСклад.ТекстСоединения);
		
		ОбеспечениеПроизводства.ВыполнитьПодстановкуПараметровОбеспеченияМатериалов(ТекстЗапроса,
			"Т",,
			"ПодразделениеИсполнитель",
			ПараметрыВыборки.ВариантЗаполненияОбеспечения);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Распоряжение", "Т.Распоряжение");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Назначение",   "Т.Назначение");
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		
		ДоступноХранениеСоставаНабораВСпецификациях = УправлениеДаннымиОбИзделияхПовтИсп.ДоступноХранениеСоставаНабораВСпецификациях();
		Запрос.УстановитьПараметр("ДоступноХранениеСоставаНабораВСпецификациях", ДоступноХранениеСоставаНабораВСпецификациях);
		ДоступноХранениеСоставаНабораВВариантахКомплектации = УправлениеДаннымиОбИзделияхПовтИсп.ДоступноХранениеСоставаНабораВВариантахКомплектации();
		Запрос.УстановитьПараметр("ДоступноХранениеСоставаНабораВВариантахКомплектации", ДоступноХранениеСоставаНабораВВариантахКомплектации);
		
		Запрос.УстановитьПараметр("МатериалыИУслуги", Таблица);
		
		Запрос.Текст = ТекстЗапроса;
		
		УправлениеДаннымиОбИзделиях.УстановитьПараметрыЗапросаСпецификацийИзделий(
			Запрос,
			ПараметрыВыбораСпецификаций);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		
		ДанныеУпаковок           = РезультатыЗапроса[РезультатыЗапроса.Количество()-3].Выгрузить();
		Спецификации             = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить();
		ОбеспечениеДанныеНаборов = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
		
		ДанныеНаборов = Таблица.СкопироватьКолонки(РеквизитыСтрокиСоставаНабора("Торговый", ПараметрыВыборки));
		ДанныеНаборов.Колонки.Добавить("ВариантКомплектации");
		
		Для каждого Строка Из ОбеспечениеДанныеНаборов Цикл
			Если Строка.ДанныеНаборов Тогда
				НоваяСтрока = ДанныеНаборов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Спецификация                     = Справочники.РесурсныеСпецификации.ПустаяСсылка();
				//++ НЕ УТКА
				НоваяСтрока.СпособАвтовыбораНоменклатуры     = Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ;
				НоваяСтрока.СпособАвтовыбораХарактеристики   = Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ;
				НоваяСтрока.АлгоритмРасчетаКоличества        = "";
				НоваяСтрока.ИспользуетсяАвтовыбор            = Ложь;
				НоваяСтрока.СведенияАвтовыбора               = "";
				НоваяСтрока.АлгоритмАвтовыбораХарактеристики = "";
				НоваяСтрока.Производится                     = Ложь;
				НоваяСтрока.ПроизводитсяВПроцессе            = Ложь;
				//-- НЕ УТКА

				//++ Устарело_Производство21
				НоваяСтрока.СпособПолученияПолуфабриката   = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПустаяСсылка();
				//-- Устарело_Производство21
			Иначе
				ЗаполнитьЗначенияСвойств(Таблица[Строка.ИндексСтроки],
					Строка,
					"Склад,ВариантОбеспечения,Обособленно,Запланировать,ЗаказатьНаСклад");
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеНаборов.Количество() > 0 Тогда
			ПрименитьОтборПоПараметрамВыбораДанных(ДанныеНаборов, ПараметрыВыборки);
			УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(ДанныеНаборов, ДанныеУпаковок);
			ДанныеНаборов.Индексы.Добавить("Идентификатор");
			Таблицы.Вставить("ДанныеТорговыхНаборов", ДанныеНаборов);
		КонецЕсли;
		
		//++ НЕ УТКА
		ТехнологическиеНаборы = СписокНоменклатуры();
		ТехнологическиеНаборы.Колонки.Добавить("СтрокаВладелец");
		ТехнологическиеНаборы.Колонки.Добавить("СпецификацияВладелец");
		Для каждого Строка Из Спецификации Цикл
			
			СтрокаМатериал = Таблица[Строка.ИндексСтроки];
			
			Если Строка.ПодбиратьСпецификацию Тогда
				СтрокаМатериал.Спецификация                   = Строка.Спецификация;
				СтрокаМатериал.ИсточникПолученияПолуфабриката = Строка.Спецификация;
			КонецЕсли;
			
			Если СтрокаМатериал.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
					И ДоступноХранениеСоставаНабораВСпецификациях
					И ПараметрыВыборки.ПолучитьДанныеНаборов
					И ЗначениеЗаполнено(СтрокаМатериал.Спецификация) Тогда
				НоваяСтрока = ТехнологическиеНаборы.Добавить();
				НоваяСтрока.СтрокаВладелец = СтрокаМатериал;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериал, "Номенклатура,Характеристика,Спецификация,НачалоПроизводства,ПодразделениеДиспетчер");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "НаправлениеДеятельности,Распоряжение,ПодразделениеИсполнитель,СпецификацияВладелец");
			КонецЕсли;
			
		КонецЦикла;
		
		ПолучитьДанныеТехнологическихНаборов(ТехнологическиеНаборы, Таблицы, ПараметрыВыборки);
		//-- НЕ УТКА
		
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц,
			"ВтСписокНоменклатуры,ВтСпецификации,ВтМатериалыИУслуги,ВтДанныеНаборов");
		
	КонецЕсли;
	
	Таблица.Колонки.Удалить("ИндексСтроки");
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОбеспеченияВыходныхИзделий(Запрос, Таблицы, ПараметрыВыборки)
	
	РазделительЗапросаВПакете = ОбщегоНазначения.РазделительПакетаЗапросов();
	
	ИменаНаборовДанных = Новый Массив;
	ТекстыОбъединения  = Новый Массив;
	
	ТекстЗапроса = "";

	Для каждого ИмяНабораДанных Из СтрРазделить("ВыходныеИзделия,ВозвратныеОтходы",",") Цикл
		
		Таблица = Неопределено;
		Если Таблицы.Свойство(ИмяНабораДанных, Таблица) И Таблица.Найти(Истина,"ИспользуетсяАвтовыбор") <> Неопределено Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	""ИмяТаблицы""   КАК ИмяНабораДанных,
			|	Т.Идентификатор  КАК Идентификатор,
			|	Т.НомерСтроки    КАК НомерСтроки,
			|
			|	Т.Номенклатура   КАК Номенклатура,
			|	Т.Характеристика КАК Характеристика,
			|
			|	Т.Этап           КАК Этап
			|
			|ПОМЕСТИТЬ ИмяТаблицы
			|ИЗ
			|	&ИмяТаблицы КАК Т
			|
			|ГДЕ
			|	Т.ИспользуетсяАвтовыбор
			|" + РазделительЗапросаВПакете;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ИмяНабораДанных);
			
			Запрос.УстановитьПараметр(ИмяНабораДанных, Таблица);
			
			ТекстыОбъединения.Добавить(СтрЗаменить("ВЫБРАТЬ Т.* ИЗ ИмяНабораДанных КАК Т", "ИмяНабораДанных", ИмяНабораДанных));
			
			ИменаНаборовДанных.Добавить(ИмяНабораДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИменаНаборовДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Т.*,
	|	&ТекстПолеСклад КАК Склад
	|
	|ИЗ &ИмяТаблицы КАК Т
	|
	|	,ТекстСоединенияНастройкиПередачиМатериалов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.ИмяНабораДанных,
	|	Т.Идентификатор,
	|	Т.НомерСтроки
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", "("+СтрСоединить(ТекстыОбъединения," ОБЪЕДИНИТЬ ВСЕ ")+")");
	
	ТекстЗапросаДляПолученияСклада = ОбеспечениеПроизводства.ТекстЗапросаНастройкиПередачиМатериалов(
		"Т",
		"Этап.Подразделение",
		ПараметрыВыборки.ВариантЗаполненияОбеспечения);
		
	ТекстЗапроса = СтрЗаменить(
						ТекстЗапроса, 
						",ТекстСоединенияНастройкиПередачиМатериалов",
						ТекстЗапросаДляПолученияСклада.ТекстСоединения);
		
	ТекстЗапроса = СтрЗаменить(
						ТекстЗапроса, 
						"&ТекстПолеСклад",
						ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатОбеспечение = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатОбеспечение.Индексы.Добавить("ИмяНабораДанных,Идентификатор,НомерСтроки");
	
	Отбор = Новый Структура("ИмяНабораДанных,Идентификатор,НомерСтроки");
	Для каждого ИмяНабораДанных Из ИменаНаборовДанных Цикл
		Для каждого Строка Из Таблицы[ИмяНабораДанных] Цикл
			Если Строка.ИспользуетсяАвтовыбор Тогда
				Отбор.ИмяНабораДанных = ИмяНабораДанных;
				ЗаполнитьЗначенияСвойств(Отбор, Строка, "Идентификатор,НомерСтроки");
				
				СтрокиРезультата      = РезультатОбеспечение.НайтиСтроки(Отбор);
				Если СтрокиРезультата <> Неопределено Тогда
					Строка.Склад = СтрокиРезультата[0].Склад;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц,
		СтрСоединить(ИменаНаборовДанных,","));
	
КонецПроцедуры

//++ НЕ УТКА

// Производит подготовку таблицы операций спецификации
// 
// Параметры:
// 	Операции - ТаблицаЗначений
//
Процедура ПодготовитьТаблицуОпераций(Операции)
	
	ТаблицаОперации       = Справочники.ТехнологическиеОперации.ТаблицаОперацииКонструктор();
	
	ДлинаИдентификатора   = Справочники.ТехнологическиеОперации.ДлинаИдентификатораОперации();
	ОтборОперацияРодитель = Новый Структура("ОперацияРодитель");
	ОтборОперацииЭтапа    = Новый Структура("Этап");
	МассивЭтапов          = Новый Массив;
	
	Операции.Индексы.Добавить("ОперацияРодитель");
	Операции.Индексы.Добавить("Этап");
	
	Для Индекс = 0 По Операции.Количество() - 1 Цикл
		
		СтрокаОперация = Операции[Индекс];
		
		СтрокаОперация.КлючСвязи = Новый УникальныйИдентификатор;
		
		Если СтрокаОперация.СодержитТехнологическийПроцесс Тогда
			ОтборОперацияРодитель.ОперацияРодитель = СтрокаОперация.Операция;
			НайденныеСтроки = Операции.НайтиСтроки(ОтборОперацияРодитель);
			Для каждого ОперацияТП Из НайденныеСтроки Цикл
				ОперацияТП.КлючСвязиРодитель = СтрокаОперация.КлючСвязи;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОперация.ОперацияРодитель) Тогда
			СтрокаОперация.ИдентификаторОперации = СтрокаОперация.ОперацияРодительИдентификатор * Pow(10, ДлинаИдентификатора);
		КонецЕсли;
		СтрокаОперация.ИдентификаторОперации = СтрокаОперация.ИдентификаторОперации + СтрокаОперация.ОперацияИдентификатор;
		
		МассивЭтапов.Добавить(СтрокаОперация.Этап);
		
	КонецЦикла;
	
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивЭтапов);
	
	Для каждого Этап Из МассивЭтапов Цикл
		
		ОтборОперацииЭтапа.Этап = Этап;
		ОперацииЭтапа = Операции.Скопировать(ОтборОперацииЭтапа);
		
		Справочники.ТехнологическиеОперации.ЗаполнитьПорядокОпераций(ОперацииЭтапа);
		
		Для каждого СтрокаОперация Из ОперацииЭтапа Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаОперации.Добавить(), СтрокаОперация);
		КонецЦикла;
		
	КонецЦикла;
	
	Операции = ТаблицаОперации;
	
КонецПроцедуры

//-- НЕ УТКА

// Заполняет информацию по применению материала
// 
// Параметры:
// 	МатериалыИУслуги - ТаблицаЗначений - таблица материалов
// 	ПараметрыВыборки - см. ПараметрыВыборкиДанных
Процедура ЗаполнитьИнформациюПоПрименениюМатериала(МатериалыИУслуги, ПараметрыВыборки)
	
	Если ПараметрыВыборки.ПолучитьПредставления Тогда
		
		МатериалыИУслуги.Колонки.Добавить("ПрименениеМатериалаРедактирование");
		
		Для каждого Строка Из МатериалыИУслуги Цикл
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьИнформациюПоПрименениюМатериала(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ОбработатьДанныеТехнологическихПроцессов(ДанныеСпецификации)
	
	ИмяИсточникаОперандов = "МатериалыИУслуги";
	
	ТаблицаЗаменыОперандов = Новый ТаблицаЗначений();
	ТаблицаЗаменыОперандов.Колонки.Добавить("ОперацияРодитель");
	ТаблицаЗаменыОперандов.Колонки.Добавить("ОперандСтарый");
	ТаблицаЗаменыОперандов.Колонки.Добавить("НомерСтрокиНовый");
	
	СтруктураОтбора = Новый Структура("ОперацияРодитель,ОперандСтарый");
	
	Для каждого ИмяТаблицы Из СтрРазделить("МатериалыИУслуги,Трудозатраты", ",") Цикл
		
		Таблица = Неопределено; // ТаблицаЗначений
		Если НЕ ДанныеСпецификации.Свойство(ИмяТаблицы, Таблица) Тогда
			Возврат;
		КонецЕсли;
		
		НомерСтрокиНовый = 0;
		
		Для Индекс = 0 По Таблица.Количество() - 1 Цикл
			
			Строка = Таблица[Индекс];
			
			Если НЕ Строка.Вспомогательный Тогда
				НомерСтрокиНовый = Строка.НомерСтроки;
				Продолжить;
			КонецЕсли;
			
			НомерСтрокиТекущий = Строка.НомерСтроки;
			НомерСтрокиНовый   = НомерСтрокиНовый + 1;
			
			Если ИмяТаблицы = ИмяИсточникаОперандов Тогда
				НоваяСтрока = ТаблицаЗаменыОперандов.Добавить();
				НоваяСтрока.ОперацияРодитель = Строка.ОперацияРодитель;
				НоваяСтрока.ОперандСтарый    = СтрШаблон("%1[%2].", ИмяИсточникаОперандов, Формат(НомерСтрокиТекущий,"ЧН=; ЧГ="));
				НоваяСтрока.НомерСтрокиНовый = Формат(НомерСтрокиНовый,"ЧН=; ЧГ=");
			КонецЕсли;
			
			ЗаменитьОперандыВСтрокеНабораДанныхПоТаблице(Строка, ИмяИсточникаОперандов, ТаблицаЗаменыОперандов, СтруктураОтбора);
			
			Строка.НомерСтроки = НомерСтрокиНовый;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьОперандыВСтрокеНабораДанныхПоТаблице(Строка, ИмяИсточникаОперандов, ТаблицаЗаменыОперандов, СтруктураОтбора)
	
	Если ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) Тогда
		Возврат;
	КонецЕсли;
	
	Операнды = Новый Массив;
	
	МаркерОткрытия = СтрНайти(Строка.АлгоритмРасчетаКоличества, ИмяИсточникаОперандов,,1);
	Пока МаркерОткрытия > 0 Цикл
		МаркерЗакрытия = СтрНайти(Строка.АлгоритмРасчетаКоличества, "].",,МаркерОткрытия);
		Если МаркерЗакрытия > 0 Тогда
			Операнд = Сред(Строка.АлгоритмРасчетаКоличества, МаркерОткрытия, МаркерЗакрытия-МаркерОткрытия+2);
			Если Операнды.Найти(Операнд) = Неопределено Тогда
				Операнды.Добавить(Операнд);
			КонецЕсли;
		КонецЕсли;
		МаркерОткрытия = СтрНайти(Строка.АлгоритмРасчетаКоличества, ИмяИсточникаОперандов,,МаркерЗакрытия);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
	Для каждого Операнд Из Операнды Цикл
		СтруктураОтбора.ОперандСтарый = Операнд;
		НайденныеСтроки = ТаблицаЗаменыОперандов.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.ВГраница() <> -1 Тогда
			НомерЗамены = НайденныеСтроки[0].НомерСтрокиНовый;
		Иначе
			НомерЗамены = "0";
		КонецЕсли;
		Строка.АлгоритмРасчетаКоличества = СтрЗаменить(
			Строка.АлгоритмРасчетаКоличества, Операнд, СтрШаблон("%1_[%2].", ИмяИсточникаОперандов, НомерЗамены));
	КонецЦикла;
	
	Строка.АлгоритмРасчетаКоличества = СтрЗаменить(
		Строка.АлгоритмРасчетаКоличества, ИмяИсточникаОперандов+"_", ИмяИсточникаОперандов);
	
КонецПроцедуры

//-- НЕ УТКА

Процедура ПрименитьОтборПоДаннымСпецификации(ДанныеСпецификации, ПараметрыВыборки, Отбор)
	
	ИменаТаблиц = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыВыборки.ПереченьДанных);
	Если ДанныеСпецификации.Свойство("НаборыМатериаловИРабот") Тогда
		ИменаТаблиц.Добавить("НаборыМатериаловИРабот");
	КонецЕсли;
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		Для каждого ИмяТаблицы Из ИменаТаблиц Цикл
			ДанныеСпецификации.Вставить(ИмяТаблицы, ДанныеСпецификации[ИмяТаблицы].Скопировать(Отбор));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключитьПроизводимыеНаЭтапеПолуфабрикаты(МатериалыИУслуги, ВозвратныеОтходы) Экспорт
	
	Если ВозвратныеОтходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("СпособПолученияМатериала",
		Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе);
	СтруктураПоиска.Вставить("СпецификацияРемонта",
		Справочники.РесурсныеСпецификации.ПустаяСсылка());
	
	СтрокиМатериалы = МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаМатериал Из СтрокиМатериалы Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаМатериал.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаМатериал.Характеристика);
		СтруктураПоиска.Вставить("Этап", СтрокаМатериал.ИсточникПолученияПолуфабриката);
		
		СтрокиОтходы = ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
		Остаток = СтрокаМатериал.Количество;
		
		Пока Остаток > 0 И СтрокиОтходы.Количество() > 0 Цикл
			
			Строка = СтрокиОтходы[0];
			Если Остаток >= Строка.Количество Тогда
				Остаток = Остаток - Строка.Количество;
				ВозвратныеОтходы.Удалить(Строка);
				СтрокиОтходы.Удалить(0);
			Иначе
				Строка.Количество = Строка.Количество - Остаток;
				Строка.КоличествоУпаковок = Строка.Количество * Строка.ДанныеУпаковки.Знаменатель / Строка.ДанныеУпаковки.Числитель;
				Остаток = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		МатериалыИУслуги.Удалить(СтрокаМатериал);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьДанныеПолуфабрикатов(ДанныеСпецификацииСводные, СписокНоменклатуры, ПараметрыВыборки)
	
	ПереченьДанных = ПараметрыВыборки.ПереченьДанных;
	
	СписокНоменклатурыНовый = СписокНоменклатуры();
	
	ДанныеСпецификаций = ДанныеСпецификацииПоСпискуНоменклатуры(СписокНоменклатуры, ПараметрыВыборки);
	
	Для Индекс = 0 По ДанныеСпецификаций.ВГраница() Цикл
		
		ДанныеСпецификации = ДанныеСпецификаций[Индекс];
		
		Если ДанныеСпецификации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПереченьДанных.Найти("АльтернативныеВидыРабочихЦентров") <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.АльтернативныеВидыРабочихЦентров, ДанныеСпецификацииСводные.АльтернативныеВидыРабочихЦентров);
		КонецЕсли;
		
		Если ПереченьДанных.Найти("ВидыРабочихЦентров") <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.ВидыРабочихЦентров, ДанныеСпецификацииСводные.ВидыРабочихЦентров);
		КонецЕсли;
		
		Если ПереченьДанных.Найти("ВыходныеИзделия") <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.ВыходныеИзделия, ДанныеСпецификацииСводные.ВыходныеИзделия);
		КонецЕсли;
		
		Если ПереченьДанных.Найти("ВозвратныеОтходы") <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.ВозвратныеОтходы, ДанныеСпецификацииСводные.ВозвратныеОтходы);
		КонецЕсли;
		
		Если ПереченьДанных.Найти("МатериалыИУслуги") <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.МатериалыИУслуги, ДанныеСпецификацииСводные.МатериалыИУслуги);
			
			Для Каждого Строка Из ДанныеСпецификации.МатериалыИУслуги Цикл
				
				Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации Тогда
					
					НоваяСтрока = СписокНоменклатурыНовый.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура, Характеристика, Количество, ДнейОтПотребности");
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СписокНоменклатуры[Индекс], "НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности");
					НоваяСтрока.Спецификация = Строка.ИсточникПолученияПолуфабриката;
					
				КонецЕсли;
				
				Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе
					И ЗначениеЗаполнено(Строка.СпецификацияРемонта) Тогда
				
					НоваяСтрока = СписокНоменклатурыНовый.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура, Характеристика, Количество, ДнейОтПотребности");
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СписокНоменклатуры[Индекс], "НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности");
					НоваяСтрока.Спецификация = Строка.СпецификацияРемонта;
				
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПереченьДанных.Найти("Трудозатраты") <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.Трудозатраты, ДанныеСпецификацииСводные.Трудозатраты);
		КонецЕсли;
		
		Если ПереченьДанных.Найти("Этапы") <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСпецификации.Этапы, ДанныеСпецификацииСводные.Этапы);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокНоменклатурыНовый;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СписокРесурсныхСпецификаций

Функция ТекстЗапросаДинамическогоСпискаРесурсныхСпецификаций() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникРесурсныеСпецификации.Ссылка КАК Ссылка,
	|
	|	СправочникРесурсныеСпецификации.Код КАК Код,
	|	СправочникРесурсныеСпецификации.Наименование КАК Наименование,
	|
	|	СправочникРесурсныеСпецификации.Статус КАК Статус,
	|	СправочникРесурсныеСпецификации.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|
	|	СправочникРесурсныеСпецификации.НачалоДействия КАК НачалоДействия,
	|	СправочникРесурсныеСпецификации.КонецДействия КАК КонецДействия,
	|
	|	СправочникРесурсныеСпецификации.Ответственный КАК Ответственный,
	|	СправочникРесурсныеСпецификации.Описание КАК Описание,
	|
	|	ВЫБОР
	|		КОГДА СправочникРесурсныеСпецификации.ВариантНазначения = ЗНАЧЕНИЕ(Перечисление.ВариантыНазначенияСпецификации.ВидНоменклатуры)
	|			ТОГДА СправочникРесурсныеСпецификации.ОсновноеИзделиеВидНоменклатуры
	|		ИНАЧЕ СправочникРесурсныеСпецификации.ОсновноеИзделиеНоменклатура
	|	КОНЕЦ КАК ОсновноеИзделие
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК СправочникРесурсныеСпецификации
	|	
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Условиное оформление списка ресурсных спецификаций
// 
// Параметры:
// 	УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление
// 	ИмяВладельцаПолейОтбора - Строка - имя элемента
Процедура УстановитьУсловноеОформлениеСпискаРесурсныхСпецификаций(УсловноеОформление, ИмяВладельцаПолейОтбора = "") Экспорт

	ВладелецПолейОтбора = ?(ИмяВладельцаПолейОтбора = "", "", ИмяВладельцаПолейОтбора + ".");
	
	// Оформление спецификации в разработке
	Элемент = УсловноеОформление.Элементы.Добавить();

	Если ИмяВладельцаПолейОтбора <> "" Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВладельцаПолейОтбора);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВладелецПолейОтбора + "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.ВРазработке;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Оформление закрытой спецификации
	Элемент = УсловноеОформление.Элементы.Добавить();

	Если ИмяВладельцаПолейОтбора <> "" Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВладельцаПолейОтбора);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВладелецПолейОтбора + "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.Закрыта;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
КонецПроцедуры

Функция ТекстЗапросаДинамическогоСпискаДоступныхСпецификаций() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РесурсныеСпецификации.Ссылка         КАК Спецификация,
	|
	|	РесурсныеСпецификации.НачалоДействия КАК НачалоДействия,
	|	РесурсныеСпецификации.КонецДействия  КАК КонецДействия,
	|
	|	РесурсныеСпецификации.Статус         КАК Статус,
	|
	|	ЛОЖЬ                                 КАК Приоритетная
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|	
	|ГДЕ
	|	НЕ РесурсныеСпецификации.ПометкаУдаления
	|	И РесурсныеСпецификации.Ссылка В (&СписокСпецификаций)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Условиное оформление списка доступных спецификаций
// 
// Параметры:
// 	УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление
Процедура УстановитьУсловноеОформлениеСпискаДоступныхСпецификаций(УсловноеОформление) Экспорт

	// Оформление спецификации в разработке
	Элемент = УсловноеОформление.Элементы.Добавить();

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.ВРазработке;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Оформление закрытой спецификации
	Элемент = УсловноеОформление.Элементы.Добавить();

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.Закрыта;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА
#Область ЗаполнениеПоМаршрутнымКартам

// Заполняет ресурсную спецификацию данными маршрутных карт ее этапов
// 
// Параметры:
// 	Объект - СправочникОбъект.РесурсныеСпецификации - спецификация
//
Процедура ЗаполнитьПоМаршрутнымКартамЭтапов(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; //временные таблицы используются повторно
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка КАК Этап,
	|	ЭтапыПроизводства.МаршрутнаяКарта           КАК МаршрутнаяКарта,
	|	МаршрутныеКарты.ИспользоватьВыходныеИзделия КАК ИспользоватьВыходныеИзделия,
	|	МаршрутныеКарты.ИспользоватьМатериалы       КАК ИспользоватьМатериалы,
	|	МаршрутныеКарты.ИспользоватьТрудозатраты    КАК ИспользоватьТрудозатраты,
	|	ВЫБОР
	|		КОГДА ЭтапыПроизводства.КоэффициентМаршрутнойКарты = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЭтапыПроизводства.КоэффициентМаршрутнойКарты
	|	КОНЕЦ КАК КоэффициентМаршрутнойКарты,
	|	ЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа,
	|	ВЫБОР
	|		КОГДА ЭтапыПроизводства.НомерЭтапа = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПервыйЭтап,
	|	ВЫБОР
	|		КОГДА ЭтапыПроизводства.НомерСледующегоЭтапа = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПоследнийЭтап
	|ПОМЕСТИТЬ СписокЭтапов
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО ЭтапыПроизводства.МаршрутнаяКарта = МаршрутныеКарты.Ссылка
	|ГДЕ
	|	ЭтапыПроизводства.Владелец = &Спецификация
	|	И НЕ ЭтапыПроизводства.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Спецификация", Объект.Ссылка);
	
	Запрос.УстановитьПараметр("ТипПроизводственногоПроцесса",  Объект.ТипПроизводственногоПроцесса);
	Запрос.УстановитьПараметр("ОсновноеИзделиеНоменклатура",   Объект.ОсновноеИзделиеНоменклатура);
	Запрос.УстановитьПараметр("ОсновноеИзделиеХарактеристика", Объект.ОсновноеИзделиеХарактеристика);
	
	Запрос.Выполнить();
	
	СтруктураДанных = Неопределено;
	ПолучитьДанныеМаршрутнойКарты(Запрос, СтруктураДанных);
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	УдалитьСтрокиГдеДляЭтаповУказаныМК(Объект, "ВыходныеИзделия",  СтруктураДанных.ТаблицаЭтапы, "ЭтоПоследнийЭтап", "ИспользоватьВыходныеИзделия");
	УдалитьСтрокиГдеДляЭтаповУказаныМК(Объект, "ВозвратныеОтходы", СтруктураДанных.ТаблицаЭтапы, "ЭтоПоследнийЭтап", "ИспользоватьВыходныеИзделия");
	УдалитьСтрокиГдеДляЭтаповУказаныМК(Объект, "МатериалыИУслуги", СтруктураДанных.ТаблицаЭтапы, "ЭтоПервыйЭтап",    "ИспользоватьМатериалы");
	УдалитьСтрокиГдеДляЭтаповУказаныМК(Объект, "Трудозатраты",     СтруктураДанных.ТаблицаЭтапы, "ЭтоПервыйЭтап",    "ИспользоватьТрудозатраты");
	
	МассивПроверок = Новый Массив;
	СкорректироватьОперандыАлгоритмаРасчетаКоличества(Объект, СтруктураДанных, МассивПроверок);
	
	ИсключитьРеквизиты = "";
	Если НЕ Объект.МногоэтапныйПроизводственныйПроцесс Тогда
		ИсключитьРеквизиты = "Этап, ЭтапРедактирование";
	КонецЕсли;
	
	Если СтруктураДанных.ВыходныеИзделия <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.ВыходныеИзделия Цикл
			ЗаполнитьЗначенияСвойств(Объект.ВыходныеИзделия.Добавить(), ЭлементКоллекции,, ИсключитьРеквизиты);
		КонецЦикла; 
	КонецЕсли;
	
	Если СтруктураДанных.ВозвратныеОтходы <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.ВозвратныеОтходы Цикл
			ЗаполнитьЗначенияСвойств(Объект.ВозвратныеОтходы.Добавить(), ЭлементКоллекции,, ИсключитьРеквизиты);
		КонецЦикла; 
	КонецЕсли;
	
	Если СтруктураДанных.МатериалыИУслуги <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.МатериалыИУслуги Цикл
			НоваяСтрока = Объект.МатериалыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции,, ИсключитьРеквизиты);
			УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьСпособПолученияМатериалаПоУмолчанию(НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.Трудозатраты <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.Трудозатраты Цикл
			ЗаполнитьЗначенияСвойств(Объект.Трудозатраты.Добавить(), ЭлементКоллекции,, ИсключитьРеквизиты);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.СоответствиеСвойств <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.СоответствиеСвойств Цикл
			ЗаполнитьЗначенияСвойств(Объект.СоответствиеСвойств.Добавить(), ЭлементКоллекции);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.ОтборПоСвойствам <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.ОтборПоСвойствам Цикл
			ЗаполнитьЗначенияСвойств(Объект.ОтборПоСвойствам.Добавить(), ЭлементКоллекции);
		КонецЦикла;
	КонецЕсли;
	
	КоличествоИзделий = Объект.ВыходныеИзделия.Количество();
	Если КоличествоИзделий = 1 Тогда
		Если ЗначениеЗаполнено(Объект.ВыходныеИзделия[0].Номенклатура) Тогда
			Объект.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.Номенклатура;
		КонецЕсли;
	ИначеЕсли КоличествоИзделий > 1 Тогда
		Объект.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСтрокиГдеДляЭтаповУказаныМК(Объект, ИмяТаблицы, ТаблицаЭтапы, ПолеАвтовыбораЭтапа, ИмяРеквизитаСостава)

	СтрокиКУдалению = Новый Массив;
	Для каждого ДанныеСтроки Из Объект[ИмяТаблицы] Цикл
		
		Если НЕ ДанныеСтроки.ЭтапРедактирование.Пустая() Тогда
			СтрокаЭтап = ТаблицаЭтапы.Найти(ДанныеСтроки.ЭтапРедактирование, "Этап");
		Иначе
			СтрокаЭтап = ТаблицаЭтапы.Найти(Истина, ПолеАвтовыбораЭтапа);
		КонецЕсли;
		
		Если СтрокаЭтап <> Неопределено 
			И НЕ СтрокаЭтап.МаршрутнаяКарта.Пустая() 
			И СтрокаЭтап[ИмяРеквизитаСостава] Тогда
			
			СтрокиКУдалению.Добавить(ДанныеСтроки);
		КонецЕсли; 
		
	КонецЦикла; 

	Для каждого ДанныеСтроки Из СтрокиКУдалению Цикл
		
		Найдено = Объект.СоответствиеСвойств.НайтиСтроки(Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи));
		Для каждого Строка Из Найдено Цикл
			Объект.СоответствиеСвойств.Удалить(Строка);
		КонецЦикла;
		
		Найдено = Объект.ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи));
		Для каждого Строка Из Найдено Цикл
			Объект.ОтборПоСвойствам.Удалить(Строка);
		КонецЦикла;
		
		Объект[ИмяТаблицы].Удалить(ДанныеСтроки);
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ИнициализироватьСтруктуруДанныхДляЗаполнения()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВыходныеИзделия",     Неопределено);
	СтруктураДанных.Вставить("ВозвратныеОтходы",    Неопределено);
	СтруктураДанных.Вставить("МатериалыИУслуги",    Неопределено);
	СтруктураДанных.Вставить("Трудозатраты",        Неопределено);
	СтруктураДанных.Вставить("СоответствиеСвойств", Неопределено);
	СтруктураДанных.Вставить("ОтборПоСвойствам",    Неопределено);
	
	СтруктураДанных.Вставить("ТаблицаЭтапы",        Неопределено);
	
	ТаблицаКлючейСвязи = Новый ТаблицаЗначений;
	ТаблицаКлючейСвязи.Колонки.Добавить("Этап");
	ТаблицаКлючейСвязи.Колонки.Добавить("МаршрутнаяКарта");
	ТаблицаКлючейСвязи.Колонки.Добавить("КлючСвязи");
	ТаблицаКлючейСвязи.Колонки.Добавить("КлючСвязиНовый");
	
	ТаблицаКлючейСвязи.Индексы.Добавить("Этап,МаршрутнаяКарта,КлючСвязи");
	
	СтруктураДанных.Вставить("ТаблицаКлючейСвязи",  ТаблицаКлючейСвязи);
	
	ТаблицаКорректировкиОперандов = Новый ТаблицаЗначений;
	ТаблицаКорректировкиОперандов.Колонки.Добавить("Этап");
	ТаблицаКорректировкиОперандов.Колонки.Добавить("МаршрутнаяКарта");
	ТаблицаКорректировкиОперандов.Колонки.Добавить("ИмяТаблицы");
	ТаблицаКорректировкиОперандов.Колонки.Добавить("ИндексСтроки");
	
	ТаблицаКорректировкиОперандов.Индексы.Добавить("Этап,МаршрутнаяКарта");
	
	СтруктураДанных.Вставить("ТаблицаКорректировкиОперандов", ТаблицаКорректировкиОперандов);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Конструктор таблицы структуры данных для заполнения
// 
// Параметры:
// 	ТаблицаИсточник - ТаблицаЗначений - источник колонок для таблицы структуры данных
// Возвращаемое значение:
// 	ТаблицаЗначений - из:
// 		* НомерСтроки - Число - номер строки таблицы
// 		* КлючСвязи - УникальныйИдентификатор - идентификатор строки таблицы
//
Функция ТаблицаСтруктурыДанныхДляЗаполнения(ТаблицаИсточник)
	
	Возврат ТаблицаИсточник.СкопироватьКолонки();
	
КонецФункции

Процедура ПолучитьДанныеМаршрутнойКарты(Запрос, СтруктураДанных, ВключитьВложенныеМК = Истина)

	Если СтруктураДанных = Неопределено Тогда
		СтруктураДанных = ИнициализироватьСтруктуруДанныхДляЗаполнения();
	КонецЕсли;
	
	Поля = СтрРазделить("ИспользоватьВыходныеИзделия,ИспользоватьМатериалы,ИспользоватьТрудозатраты",",");
	
	СписокЭтапов = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("СписокЭтапов").ПолучитьДанные().Выгрузить();
	Если СтруктураДанных.ТаблицаЭтапы = Неопределено Тогда
		СписокЭтапов.Индексы.Добавить("Этап");
		СтруктураДанных.ТаблицаЭтапы = СписокЭтапов;
	Иначе
		Для каждого СтрокаЭтап Из СписокЭтапов Цикл
			Найдено = СтруктураДанных.ТаблицаЭтапы.Найти(СтрокаЭтап.Этап, "Этап");
			Для каждого Поле Из Поля Цикл
				Найдено[Поле] = Макс(Найдено[Поле], СтрокаЭтап[Поле]);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СписокЭтапов.Этап,
	|	СписокЭтапов.ЭтоПервыйЭтап КАК ЭтоПервыйЭтап,
	|	СписокЭтапов.ЭтоПоследнийЭтап КАК ЭтоПоследнийЭтап,
	|	СписокЭтапов.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	СписокЭтапов.КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты
	|ПОМЕСТИТЬ СписокМаршрутныхКарт
	|ИЗ
	|	СписокЭтапов КАК СписокЭтапов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутнаяКарта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1. ВыходныеИзделия
	|ВЫБРАТЬ
	|	СписокМаршрутныхКарт.Этап,
	|	СписокМаршрутныхКарт.Этап КАК ЭтапРедактирование,
	|	СписокМаршрутныхКарт.ЭтоПоследнийЭтап КАК ЭтоПоследнийЭтап,
	|	СписокМаршрутныхКарт.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	МаршрутныеКартыВыходныеИзделия.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	МаршрутныеКартыВыходныеИзделия.Номенклатура,
	|	МаршрутныеКартыВыходныеИзделия.Характеристика,
	|	МаршрутныеКартыВыходныеИзделия.КоличествоУпаковок * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК КоличествоУпаковок,
	|	МаршрутныеКартыВыходныеИзделия.Упаковка,
	|	МаршрутныеКартыВыходныеИзделия.ДоляСтоимости,
	|	ВЫБОР 
	|		КОГДА &ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			ТОГДА МаршрутныеКартыВыходныеИзделия.СпособАвтовыбораНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
	|	КОНЕЦ КАК СпособАвтовыбораНоменклатуры,
	|	ВЫБОР 
	|		КОГДА &ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			ТОГДА МаршрутныеКартыВыходныеИзделия.СпособАвтовыбораХарактеристики
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ)
	|	КОНЕЦ КАК СпособАвтовыбораХарактеристики,
	|	ВЫБОР 
	|		КОГДА &ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			ТОГДА МаршрутныеКартыВыходныеИзделия.СвойствоСодержащееНоменклатуру
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)
	|	КОНЕЦ КАК СвойствоСодержащееНоменклатуру,
	|	ВЫБОР 
	|		КОГДА &ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			ТОГДА МаршрутныеКартыВыходныеИзделия.АлгоритмРасчетаКоличества
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АлгоритмРасчетаКоличества,
	|	МаршрутныеКартыВыходныеИзделия.ОписаниеИзделия,
	|	МаршрутныеКартыВыходныеИзделия.НомерСтроки,
	|	МаршрутныеКартыВыходныеИзделия.КлючСвязи
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ВыходныеИзделия КАК МаршрутныеКартыВыходныеИзделия
	|		ПО (МаршрутныеКартыВыходныеИзделия.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|ГДЕ
	|	МаршрутныеКарты.ИспользоватьВыходныеИзделия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2. ВозвратныеОтходы
	|ВЫБРАТЬ
	|	СписокМаршрутныхКарт.Этап,
	|	СписокМаршрутныхКарт.Этап КАК ЭтапРедактирование,
	|	СписокМаршрутныхКарт.ЭтоПоследнийЭтап КАК ЭтоПоследнийЭтап,
	|	СписокМаршрутныхКарт.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	МаршрутныеКартыВозвратныеОтходы.Номенклатура,
	|	МаршрутныеКартыВозвратныеОтходы.Характеристика,
	|	МаршрутныеКартыВозвратныеОтходы.КоличествоУпаковок * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК КоличествоУпаковок,
	|	МаршрутныеКартыВозвратныеОтходы.Упаковка,
	|	МаршрутныеКартыВозвратныеОтходы.СтатьяКалькуляции,
	|	МаршрутныеКартыВозвратныеОтходы.СпособАвтовыбораНоменклатуры,
	|	МаршрутныеКартыВозвратныеОтходы.СпособАвтовыбораХарактеристики,
	|	МаршрутныеКартыВозвратныеОтходы.СвойствоСодержащееНоменклатуру,
	|	МаршрутныеКартыВозвратныеОтходы.АлгоритмРасчетаКоличества,
	|	МаршрутныеКартыВозвратныеОтходы.ОписаниеИзделия,
	|	МаршрутныеКартыВозвратныеОтходы.НомерСтроки,
	|	МаршрутныеКартыВозвратныеОтходы.КлючСвязи
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ВозвратныеОтходы КАК МаршрутныеКартыВозвратныеОтходы
	|		ПО (МаршрутныеКартыВозвратныеОтходы.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|ГДЕ
	|	МаршрутныеКарты.ИспользоватьВыходныеИзделия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3. МатериалыИУслуги
	|ВЫБРАТЬ
	|	СписокМаршрутныхКарт.Этап,
	|	СписокМаршрутныхКарт.Этап КАК ЭтапРедактирование,
	|	СписокМаршрутныхКарт.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	МаршрутныеКартыМатериалыИУслуги.Номенклатура,
	|	МаршрутныеКартыМатериалыИУслуги.Характеристика,
	|	МаршрутныеКартыМатериалыИУслуги.КоличествоУпаковок * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК КоличествоУпаковок,
	|	МаршрутныеКартыМатериалыИУслуги.Упаковка,
	|	МаршрутныеКартыМатериалыИУслуги.СтатьяКалькуляции,
	|	МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораНоменклатуры,
	|	МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораХарактеристики,
	|	МаршрутныеКартыМатериалыИУслуги.СвойствоСодержащееНоменклатуру,
	|	МаршрутныеКартыМатериалыИУслуги.АлгоритмРасчетаКоличества,
	|	ВЫБОР
	|		КОГДА МаршрутныеКартыМатериалыИУслуги.ПрименениеМатериала = """"
	|			ТОГДА МаршрутныеКартыМатериалыИУслуги.Операция
	|		ИНАЧЕ МаршрутныеКартыМатериалыИУслуги.ПрименениеМатериала
	|	КОНЕЦ КАК ПрименениеМатериала,
	|	МаршрутныеКартыМатериалыИУслуги.НомерСтроки,
	|	МаршрутныеКартыМатериалыИУслуги.КлючСвязи
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.МатериалыИУслуги КАК МаршрутныеКартыМатериалыИУслуги
	|		ПО (МаршрутныеКартыМатериалыИУслуги.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|ГДЕ
	|	МаршрутныеКарты.ИспользоватьМатериалы
	|	И ВЫБОР
	|			КОГДА &ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт), ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|				ТОГДА НЕ(МаршрутныеКартыМатериалыИУслуги.Номенклатура = &ОсновноеИзделиеНоменклатура
	|						И МаршрутныеКартыМатериалыИУслуги.Характеристика = &ОсновноеИзделиеХарактеристика)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4. Трудозатраты
	|ВЫБРАТЬ
	|		СписокМаршрутныхКарт.Этап,
	|		СписокМаршрутныхКарт.Этап КАК ЭтапРедактирование,
	|		СписокМаршрутныхКарт.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|		МаршрутныеКартыТрудозатраты.ВидРабот,
	|		МаршрутныеКартыТрудозатраты.Количество * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК Количество,
	|		МаршрутныеКартыТрудозатраты.СтатьяКалькуляции,
	|		МаршрутныеКартыТрудозатраты.АлгоритмРасчетаКоличества,
	|		МаршрутныеКартыТрудозатраты.НомерСтроки,
	|		МаршрутныеКартыТрудозатраты.КлючСвязи
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.Трудозатраты КАК МаршрутныеКартыТрудозатраты
	|		ПО (МаршрутныеКартыТрудозатраты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|ГДЕ
	|	МаршрутныеКарты.ИспользоватьТрудозатраты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 5. СоответствиеСвойств
	|ВЫБРАТЬ
	|		СписокМаршрутныхКарт.Этап КАК Этап,
	|		СписокМаршрутныхКарт.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|		МаршрутныеКартыСоответствиеСвойств.СвойствоМатериала,
	|		МаршрутныеКартыСоответствиеСвойств.СвойствоПродукции,
	|		МаршрутныеКартыСоответствиеСвойств.ЗначениеСвойства,
	|		МаршрутныеКартыСоответствиеСвойств.АлгоритмРасчетаЗначения,
	|		МаршрутныеКартыСоответствиеСвойств.СпособПодбораЗначения,
	|		МаршрутныеКартыСоответствиеСвойств.КлючСвязи
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.СоответствиеСвойств КАК МаршрутныеКартыСоответствиеСвойств
	|		ПО (МаршрутныеКартыСоответствиеСвойств.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 6. ОтборПоСвойствам
	|ВЫБРАТЬ
	|		СписокМаршрутныхКарт.Этап КАК Этап,
	|		СписокМаршрутныхКарт.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|		МаршрутныеКартыОтборПоСвойствам.Свойство,
	|		МаршрутныеКартыОтборПоСвойствам.Условие,
	|		МаршрутныеКартыОтборПоСвойствам.Значение,
	|		МаршрутныеКартыОтборПоСвойствам.КлючСвязи
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ОтборПоСвойствам КАК МаршрутныеКартыОтборПоСвойствам
	|		ПО (МаршрутныеКартыОтборПоСвойствам.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 7.
	|УНИЧТОЖИТЬ СписокЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 8. Тех. операции
	|ВЫБРАТЬ
	|	СписокМаршрутныхКарт.Этап,
	|	СписокМаршрутныхКарт.ЭтоПервыйЭтап КАК ЭтоПервыйЭтап,
	|	СписокМаршрутныхКарт.ЭтоПоследнийЭтап КАК ЭтоПоследнийЭтап,
	|	СпрОперации.ВложенныйМаршрут КАК МаршрутнаяКарта,
	|	МаршрутныеКартыВложенные.ИспользоватьВыходныеИзделия КАК ИспользоватьВыходныеИзделия,
	|	МаршрутныеКартыВложенные.ИспользоватьМатериалы КАК ИспользоватьМатериалы,
	|	МаршрутныеКартыВложенные.ИспользоватьТрудозатраты КАК ИспользоватьТрудозатраты,
	|	СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты,
	|	СпрОперации.Наименование КАК НаименованиеОперации
	|ПОМЕСТИТЬ СписокЭтапов
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК СпрОперации
	|		ПО (СпрОперации.Владелец = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|			И СпрОперации.СодержитВложенныйМаршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКартыВложенные
	|		ПО (МаршрутныеКартыВложенные.Ссылка = СпрОперации.ВложенныйМаршрут)
	|ГДЕ 
	|	НЕ СпрОперации.Ссылка.ПометкаУдаления
	|	И МаршрутныеКарты.ИспользоватьОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокМаршрутныхКарт";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	// Результат[0] - СписокМаршрутныхКарт
	// Результат[1] - ВыходныеИзделия
	// Результат[2] - ВозвратныеОтходы
	// Результат[3] - МатериалыИУслуги
	// Результат[4] - Трудозатраты
	// Результат[5] - СоответствиеСвойств
	// Результат[6] - ОтборПоСвойствам
	// Результат[8] - СписокЭтапов по данным вложенных МК, который будет использоваться на следующей итерации выполнения процедуры
	
	ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, Результат[1].Выгрузить(), "ВыходныеИзделия" , Истина);
	ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, Результат[2].Выгрузить(), "ВозвратныеОтходы", Истина);
	ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, Результат[3].Выгрузить(), "МатериалыИУслуги", Истина);
	ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, Результат[4].Выгрузить(), "Трудозатраты");
	ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, Результат[5].Выгрузить(), "СоответствиеСвойств");
	ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, Результат[6].Выгрузить(), "ОтборПоСвойствам");
	
	Если ВключитьВложенныеМК И Результат[8].Выгрузить()[0].Количество > 0 Тогда
		ПолучитьДанныеМаршрутнойКарты(Запрос, СтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, ТаблицаИсточник, ИмяТаблицыСтруктурыДанных, ИсточникОперандов = Ложь)
	
	Если СтруктураДанных[ИмяТаблицыСтруктурыДанных] = Неопределено Тогда
		СтруктураДанных[ИмяТаблицыСтруктурыДанных] = ТаблицаСтруктурыДанныхДляЗаполнения(ТаблицаИсточник);
	КонецЕсли;
	ТаблицаСтруктурыДанных = СтруктураДанных[ИмяТаблицыСтруктурыДанных]; // см. ТаблицаСтруктурыДанныхДляЗаполнения
	
	СтруктураПоиска = Новый Структура("Этап,МаршрутнаяКарта,КлючСвязи");
	
	Для каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		
		НоваяСтрока = ТаблицаСтруктурыДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИсточник);
		
		НайденныеСтроки = СтруктураДанных.ТаблицаКлючейСвязи.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			КлючСвязиНовый = НайденныеСтроки[0].КлючСвязиНовый;
		Иначе
			КлючСвязиНовый = Новый УникальныйИдентификатор;
			НоваяСтрокаКлюч = СтруктураДанных.ТаблицаКлючейСвязи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКлюч, СтруктураПоиска);
			НоваяСтрокаКлюч.КлючСвязиНовый = КлючСвязиНовый;
		КонецЕсли;
		
		НоваяСтрока.КлючСвязи = КлючСвязиНовый;
		
		Если ИсточникОперандов Тогда
			СтрокаКорректировка = СтруктураДанных.ТаблицаКорректировкиОперандов.Добавить();
			СтрокаКорректировка.Этап            = НоваяСтрока.Этап;
			СтрокаКорректировка.МаршрутнаяКарта = НоваяСтрока.МаршрутнаяКарта;
			СтрокаКорректировка.ИмяТаблицы      = ИмяТаблицыСтруктурыДанных;
			СтрокаКорректировка.ИндексСтроки    = ТаблицаСтруктурыДанных.Индекс(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьОперандыАлгоритмаРасчетаКоличества(Объект, СтруктураДанных, МассивПроверок)
	
	Для каждого ИмяТЧ Из СтрРазделить("ВыходныеИзделия,МатериалыИУслуги,ВозвратныеОтходы,Трудозатраты",",") Цикл
		Если СтруктураДанных[ИмяТЧ] <> Неопределено Тогда
			МассивПроверок.Добавить(Новый Структура("ИмяТЧ,Представление", ИмяТЧ));
		КонецЕсли;
	КонецЦикла;
	
	Отбор = Новый Структура("Этап,МаршрутнаяКарта");
	ТаблицаКорректировкиОперандов = Неопределено;
	
	Для каждого Проверка Из МассивПроверок Цикл
		
		Для каждого Строка Из СтруктураДанных[Проверка.ИмяТЧ] Цикл
			
			Если ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Отбор.Этап <> Строка.Этап ИЛИ Отбор.МаршрутнаяКарта <> Строка.МаршрутнаяКарта Тогда
				ЗаполнитьЗначенияСвойств(Отбор, Строка);
				ТаблицаКорректировкиОперандов = СтруктураДанных.ТаблицаКорректировкиОперандов.Скопировать(Отбор);
				ТаблицаКорректировкиОперандов.Сортировать("ИмяТаблицы, ИндексСтроки Убыв");
			КонецЕсли;
			
			Для каждого СтрокаКорректировка Из ТаблицаКорректировкиОперандов Цикл
				
				ИмяТаблицы    = СтрокаКорректировка.ИмяТаблицы;
				Таблица       = СтруктураДанных[ИмяТаблицы]; // см. ТаблицаСтруктурыДанныхДляЗаполнения
				СтрокаТаблицы = Таблица.Получить(СтрокаКорректировка.ИндексСтроки);
				
				ОперандСтарый = СтрШаблон("%1[%2].", ИмяТаблицы, Формат(СтрокаТаблицы.НомерСтроки,"ЧН=; ЧГ="));
				ОперандНовый  = СтрШаблон("%1[%2].", ИмяТаблицы, Формат(Объект[ИмяТаблицы].Количество()+СтрокаКорректировка.ИндексСтроки+1,"ЧН=; ЧГ="));
				
				Если ОперандСтарый <> ОперандНовый Тогда
					Строка.АлгоритмРасчетаКоличества = СтрЗаменить(Строка.АлгоритмРасчетаКоличества, ОперандСтарый, ОперандНовый);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТКА

#Область ЗагрузкаИзФайлаВТЧ

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//      * Идентификатор - Число - порядковый номер строки;
//        остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа,
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько подходящих вариантов:
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность
//     * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - Структура - содержит:
//      * КоллекцияНоменклатуры  - СправочникСсылка.КоллекцииНоменклатуры - коллекция номенклатуры.
//
Процедура СопоставитьЗагружаемыеДанныеНоменклатура(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры)
	
	МатериалыИУслуги  = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);// ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаВтЗагружаемыеДанныеМатериалыИУслуги());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеШтрихкодов());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеНоменклатуры());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеХарактеристик());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеУпаковок());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеСтатейКалькуляции());
	Если ДополнительныеПараметры.ИспользуютсяЭтапы Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеЭтапов());
	КонецЕсли;
	//++ НЕ УТКА
	Если ДополнительныеПараметры.ИспользуютсяОперации Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеОпераций());
	КонецЕсли;
	//-- НЕ УТКА
	ТекстыЗапроса.Добавить(ТекстЗапросаЗагружаемыеДанныеМатериаловИУслуг());
	
	Запрос = СоздатьНастроитьЗапрос(ТекстыЗапроса, ЗагружаемыеДанные, ДополнительныеПараметры);// Запрос
	
	Если ДополнительныеПараметры.ИмяТЧ = "ВозвратныеОтходы" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПрименениеМатериала", "ОписаниеИзделия");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = МатериалыИУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор();
		
		Если Выборка.КоличествоНоменклатуры > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Номенклатура";
		КонецЕсли;
		
		Если Выборка.КоличествоХарактеристик > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Характеристика";
		КонецЕсли;
		
		Если Выборка.КоличествоСтатейКалькуляции > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "СтатьяКалькуляции";
		КонецЕсли;
		
		Если Выборка.КоличествоУпаковки > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Упаковка";
		КонецЕсли;
		Если ДополнительныеПараметры.ИспользуютсяЭтапы И Выборка.КоличествоЭтапов > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Этап";
		КонецЕсли;
		
		//++ НЕ УТКА
		Если ДополнительныеПараметры.ИспользуютсяОперации И Выборка.КоличествоОпераций> 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Операция";
		КонецЕсли;
		//-- НЕ УТКА
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(МатериалыИУслуги, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//      * Идентификатор - Число - порядковый номер строки;
//        остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа,
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько подходящих вариантов:
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность
//     * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - Структура - содержит:
//      * КоллекцияНоменклатуры  - СправочникСсылка.КоллекцииНоменклатуры - коллекция номенклатуры.
//
Процедура СопоставитьЗагружаемыеДанныеТрудозатраты(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры)
	
	Трудозатраты      = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);// ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаВтЗагружаемыеДанныеТрудозатраты());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеВидовРабот());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеСтатейКалькуляции());
	
	Если ДополнительныеПараметры.ИспользуютсяЭтапы Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеЭтапов());
	КонецЕсли;
	//++ НЕ УТКА
	Если ДополнительныеПараметры.ИспользуютсяОперации Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеОпераций());
	КонецЕсли;
	//-- НЕ УТКА
	
	ТекстыЗапроса.Добавить(ТекстЗапросаЗагружаемыеДанныеТрудозатраты());
	
	Запрос = СоздатьНастроитьЗапрос(ТекстыЗапроса, ЗагружаемыеДанные, ДополнительныеПараметры);// Запрос
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Трудозатраты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.КоличествоВидовРабот > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "ВидРабот";
		КонецЕсли;
		
		Если Выборка.КоличествоСтатейКалькуляции > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "СтатьяКалькуляции";
		КонецЕсли;
		
		Если ДополнительныеПараметры.ИспользуютсяЭтапы И Выборка.КоличествоЭтапов > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Этап";
		КонецЕсли;
		
		//++ НЕ УТКА
		Если ДополнительныеПараметры.ИспользуютсяОперации И Выборка.КоличествоОпераций> 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Операция";
		КонецЕсли;
		//-- НЕ УТКА
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Трудозатраты, АдресТаблицыСопоставления);
	
КонецПроцедуры

Процедура ЗаполнитьСписокНеоднозначностейНоменклатура(СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры)
	
	Запрос = Новый Запрос;
	
	Если ИмяКолонки = "Номенклатура" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Штрихкоды.Номенклатура   КАК Номенклатура,
		|	Штрихкоды.Характеристика КАК Характеристика,
		|	Штрихкоды.Упаковка       КАК Упаковка
		|ПОМЕСТИТЬ ВтДанныеШтрихкодов
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|
		|ГДЕ
		|	НЕ &Штрихкод = """"
		|	И Штрихкоды.Штрихкод = &Штрихкод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		СпрНоменклатура.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.Номенклатура КАК СпрНоменклатура
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
		|		ПО ИСТИНА
		|
		|	ГДЕ
		|		НЕ &Артикул = """"
		|		И ДанныеШтрихкодов.Номенклатура ЕСТЬ NULL
		|		И СпрНоменклатура.Артикул = &Артикул
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		СпрНоменклатура.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.Номенклатура КАК СпрНоменклатура
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
		|		ПО ИСТИНА
		|
		|	ГДЕ
		|		НЕ &КодНоменклатуры = """"
		|		И ДанныеШтрихкодов.Номенклатура ЕСТЬ NULL
		|		И СпрНоменклатура.Код = &КодНоменклатуры
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		СпрНоменклатура.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.Номенклатура КАК СпрНоменклатура
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
		|		ПО ИСТИНА
		|
		|	ГДЕ
		|		НЕ &Номенклатура = """"
		|		И ДанныеШтрихкодов.Номенклатура ЕСТЬ NULL
		|		И СпрНоменклатура.Наименование = &Номенклатура
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ДанныеШтрихкодов.Номенклатура КАК Ссылка
		|	ИЗ
		|		ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
		|	) КАК СпрНоменклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	СпрНоменклатура.Ссылка
		|";
		
		Запрос.УстановитьПараметр("Штрихкод",        ЗагружаемыеЗначенияСтрока.Штрихкод);
		Запрос.УстановитьПараметр("Артикул",         ЗагружаемыеЗначенияСтрока.Артикул);
		Запрос.УстановитьПараметр("КодНоменклатуры", ЗагружаемыеЗначенияСтрока.КодНоменклатуры);
		Запрос.УстановитьПараметр("Номенклатура",    ЗагружаемыеЗначенияСтрока.Номенклатура);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Характеристика" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Характеристики.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|
		|ГДЕ
		|	НЕ &Характеристика = """"
		|	И Характеристики.Наименование = &Характеристика
		|";
		
		Запрос.УстановитьПараметр("Характеристика", ЗагружаемыеЗначенияСтрока.Характеристика);
		
	КонецЕсли;
	
	Если ИмяКолонки = "СтатьяКалькуляции" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрСтатьиКалькуляции.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтатьиКалькуляции КАК СпрСтатьиКалькуляции
		|
		|ГДЕ
		|	НЕ &СтатьяКалькуляции = """"
		|	И СпрСтатьиКалькуляции.Наименование = &СтатьяКалькуляции
		|";
		
		Запрос.УстановитьПараметр("СтатьяКалькуляции", ЗагружаемыеЗначенияСтрока.СтатьяКалькуляции);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Упаковка" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Упаковки.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		Упаковки.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
		|
		|	ГДЕ
		|		НЕ &КодУпаковки = """"
		|		И Упаковки.Код = &КодУпаковки
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Упаковки.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
		|
		|	ГДЕ
		|		НЕ &Упаковка = """"
		|		И Упаковки.Наименование = &Упаковка
		|	) КАК Упаковки
		|
		|СГРУППИРОВАТЬ ПО
		|	Упаковки.Ссылка
		|";
		
		Запрос.УстановитьПараметр("КодУпаковки", ЗагружаемыеЗначенияСтрока.КодУпаковки);
		Запрос.УстановитьПараметр("Упаковка",    ЗагружаемыеЗначенияСтрока.Упаковка);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Этап" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Этапы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК Этапы
		|
		|ГДЕ
		|	НЕ &Этап = """"
		|	И Этапы.Владелец = &РесурснаяСпецификация
		|	И Этапы.Наименование = &Этап
		|";
		
		Запрос.УстановитьПараметр("Этап",                  ЗагружаемыеЗначенияСтрока.Этап);
		Запрос.УстановитьПараметр("РесурснаяСпецификация", ДополнительныеПараметры.РесурснаяСпецификация);
		
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ИмяКолонки = "Операция" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Операции.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК Операции
		|
		|ГДЕ
		|	НЕ &Операция = """"
		|	И Операции.Спецификация = &РесурснаяСпецификация
		|	И Операции.Наименование = &Операция
		|";
		
		Запрос.УстановитьПараметр("Операция",              ЗагружаемыеЗначенияСтрока.Операция);
		Запрос.УстановитьПараметр("РесурснаяСпецификация", ДополнительныеПараметры.РесурснаяСпецификация);
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокНеоднозначностейТрудозатраты(СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры)
	
	Запрос = Новый Запрос;
	
	Если ИмяКолонки = "СтатьяКалькуляции" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрСтатьиКалькуляции.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтатьиКалькуляции КАК СпрСтатьиКалькуляции
		|
		|ГДЕ
		|	НЕ &СтатьяКалькуляции = """"
		|	И СпрСтатьиКалькуляции.Наименование = &СтатьяКалькуляции
		|";
		
		Запрос.УстановитьПараметр("СтатьяКалькуляции", ЗагружаемыеЗначенияСтрока.СтатьяКалькуляции);
		
	КонецЕсли;
	
	Если ИмяКолонки = "ВидРабот" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыРабот.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВидыРабот.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ВидыРаботСотрудников КАК ВидыРабот
		|
		|	ГДЕ
		|		НЕ &КодВидаРабот = """"
		|		И ВидыРабот.Код = &КодВидаРабот
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ВидыРабот.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ВидыРаботСотрудников КАК ВидыРабот
		|
		|	ГДЕ
		|		НЕ &ВидРабот = """"
		|		И ВидыРабот.Наименование = &ВидРабот
		|	) КАК ВидыРабот
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыРабот.Ссылка
		|";
		
		Запрос.УстановитьПараметр("КодВидаРабот", ЗагружаемыеЗначенияСтрока.КодВидаРабот);
		Запрос.УстановитьПараметр("ВидРабот",     ЗагружаемыеЗначенияСтрока.ВидРабот);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Этап" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Этапы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК Этапы
		|
		|ГДЕ
		|	НЕ &Этап = """"
		|	И Этапы.Владелец = &РесурснаяСпецификация
		|	И Этапы.Наименование = &Этап
		|";
		
		Запрос.УстановитьПараметр("Этап",                  ЗагружаемыеЗначенияСтрока.Этап);
		Запрос.УстановитьПараметр("РесурснаяСпецификация", ДополнительныеПараметры.РесурснаяСпецификация);
		
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ИмяКолонки = "Операция" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Операции.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК Операции
		|
		|ГДЕ
		|	НЕ &Этап = """"
		|	И Операции.Спецификация = &РесурснаяСпецификация
		|	И Операции.Наименование = &Операция
		|";
		
		Запрос.УстановитьПараметр("Операция",              ЗагружаемыеЗначенияСтрока.Операция);
		Запрос.УстановитьПараметр("РесурснаяСпецификация", ДополнительныеПараметры.РесурснаяСпецификация);
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область ТекстыЗапросовЗагрузкиИзФайлаВТЧ

Функция СоздатьНастроитьЗапрос(ТекстыЗапроса, ЗагружаемыеДанные, ДополнительныеПараметры)
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	// Используются этапы
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеЭтап,",
		?(ДополнительныеПараметры.ИспользуютсяЭтапы, "ЗагружаемыеДанные.НомерЭтапа КАК НомерЭтапа,
													|ЗагружаемыеДанные.Этап КАК Этап,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Этап,", ?(ДополнительныеПараметры.ИспользуютсяЭтапы, "
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеЭтапов.КоличествоЭтапов, 0) = 1
		|			ТОГДА ДанныеЭтапов.Этап
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|	КОНЕЦ КАК Этап,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоЭтапов,", 
		?(ДополнительныеПараметры.ИспользуютсяЭтапы, "ЕСТЬNULL(ДанныеЭтапов.КоличествоЭтапов, 0) КАК КоличествоЭтапов,", ""));
	
	ТекстЗапроса = ТекстЗапроса + ?(ДополнительныеПараметры.ИспользуютсяЭтапы, "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеЭтапов КАК ДанныеЭтапов
		|	ПО ДанныеЭтапов.Идентификатор = ЗагружаемыеДанные.Идентификатор", "");
	
	//++ НЕ УТКА

	// Используются операции
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ", &ВтДанныеЭтапов",
		?(ДополнительныеПараметры.ИспользуютсяОперации И ДополнительныеПараметры.ИспользуютсяЭтапы,
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеЭтапов КАК Этапы
			|ПО ЗагружаемыеДанные.Идентификатор = Этапы.Идентификатор", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ОтборПоЭтапу",
		?(ДополнительныеПараметры.ИспользуютсяОперации И ДополнительныеПараметры.ИспользуютсяЭтапы,
			"И Операции.Владелец = Этапы.Этап", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеОперация,",
		?(ДополнительныеПараметры.ИспользуютсяОперации, "ЗагружаемыеДанные.НомерОперации КАК НомерОперации,
														|ЗагружаемыеДанные.Операция КАК Операция,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Операция,", ?(ДополнительныеПараметры.ИспользуютсяОперации, "
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеОпераций.КоличествоОпераций, 0) = 1
		|			ТОГДА ДанныеОпераций.Операция
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка)
		|	КОНЕЦ КАК Операция,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоОпераций,", 
		?(ДополнительныеПараметры.ИспользуютсяОперации, "ЕСТЬNULL(ДанныеОпераций.КоличествоОпераций, 0) КАК КоличествоОпераций,", ""));
	
	ТекстЗапроса = ТекстЗапроса + ?(ДополнительныеПараметры.ИспользуютсяОперации, "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеОпераций КАК ДанныеОпераций
		|	ПО ДанныеОпераций.Идентификатор = ЗагружаемыеДанные.Идентификатор", "");
	//-- НЕ УТКА
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗагружаемыеДанные",     ЗагружаемыеДанные);
	Запрос.УстановитьПараметр("ДоступныеТипыНоменклатуры", ДополнительныеПараметры.ДоступныеТипыНоменклатуры);

	Если ДополнительныеПараметры.ИспользуютсяЭтапы
		//++ НЕ УТКА
		ИЛИ ДополнительныеПараметры.ИспользуютсяОперации
		//-- НЕ УТКА
		Тогда
		
		ДанныеПроизводственногоПроцесса = Неопределено;
		
		Если ЭтоАдресВременногоХранилища(ДополнительныеПараметры.АдресЭлементовПроизводственногоПроцесса) Тогда
			
			ДанныеПроизводственногоПроцесса = ПолучитьИзВременногоХранилища(ДополнительныеПараметры.АдресЭлементовПроизводственногоПроцесса);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("РесурснаяСпецификация", ДополнительныеПараметры.РесурснаяСпецификация);
		Запрос.УстановитьПараметр("ДанныеПроизводственногоПроцесса", ДанныеПроизводственногоПроцесса);
		
	КонецЕсли;

	Возврат Запрос;
	
КонецФункции

Функция ТекстЗапросаВтДанныеЭтапов()
	
	ТекстЗапроса ="
	|ВЫБРАТЬ
	|	ДанныеЭтаповКэш.Ссылка КАК Ссылка,
	|	ДанныеЭтаповКэш.Номер КАК НомерЭтапа,
	|	ДанныеЭтаповКэш.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВтДанныеЭтаповКэш
	|ИЗ &ДанныеПроизводственногоПроцесса КАК ДанныеЭтаповКэш
	|
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеЭтаповКэш.Ссылка) = ТИП(Справочник.ЭтапыПроизводства)
	|
	|;
	|///////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Этапы.Идентификатор                КАК Идентификатор,
	|	МАКСИМУМ(Этапы.Ссылка)             КАК Этап,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Этапы.Ссылка) КАК КоличествоЭтапов
	|ПОМЕСТИТЬ ВтДанныеЭтапов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Этапы.Ссылка                    КАК Ссылка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК Этапы
	|		ПО Этапы.НомерЭтапа = ЗагружаемыеДанные.НомерЭтапа
	|		И Этапы.Наименование = ЗагружаемыеДанные.Этап
	|
	|	ГДЕ
	|		Этапы.Владелец = &РесурснаяСпецификация
	|		И НЕ Этапы.ПометкаУдаления
	|		И НЕ ЗагружаемыеДанные.НомерЭтапа = 0
	|		И НЕ ЗагружаемыеДанные.Этап = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Этапы.Ссылка                    КАК Ссылка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК Этапы
	|		ПО Этапы.НомерЭтапа = ЗагружаемыеДанные.НомерЭтапа
	|
	|	ГДЕ
	|		Этапы.Владелец = &РесурснаяСпецификация
	|		И НЕ Этапы.ПометкаУдаления
	|		И НЕ ЗагружаемыеДанные.НомерЭтапа = 0
	|		И ЗагружаемыеДанные.Этап = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Этапы.Ссылка                    КАК Ссылка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК Этапы
	|		ПО Этапы.Наименование = ЗагружаемыеДанные.Этап
	|
	|	ГДЕ
	|		Этапы.Владелец = &РесурснаяСпецификация
	|		И НЕ Этапы.ПометкаУдаления
	|		И НЕ ЗагружаемыеДанные.Этап = """"
	|		И ЗагружаемыеДанные.НомерЭтапа = 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Этапы.Ссылка                    КАК Ссылка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеЭтаповКэш КАК Этапы
	|		ПО Этапы.НомерЭтапа = ЗагружаемыеДанные.НомерЭтапа
	|		И Этапы.Наименование = ЗагружаемыеДанные.Этап
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.НомерЭтапа = 0
	|		И НЕ ЗагружаемыеДанные.Этап = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Этапы.Ссылка                    КАК Ссылка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеЭтаповКэш КАК Этапы
	|		ПО Этапы.НомерЭтапа = ЗагружаемыеДанные.НомерЭтапа
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.НомерЭтапа = 0
	|		И ЗагружаемыеДанные.Этап = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Этапы.Ссылка                    КАК Ссылка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеЭтаповКэш КАК Этапы
	|		ПО Этапы.Наименование = ЗагружаемыеДанные.Этап
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.Этап = """"
	|		И ЗагружаемыеДанные.НомерЭтапа = 0
	|	) КАК Этапы
	|
	|СГРУППИРОВАТЬ ПО
	|	Этапы.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции
//++ НЕ УТКА
Функция ТекстЗапросаВтДанныеОпераций()
	
	ТекстЗапроса ="
	|ВЫБРАТЬ
	|	ДанныеОперацийКэш.Ссылка КАК Ссылка,
	|	ДанныеОперацийКэш.Номер КАК НомерОперации,
	|	ДанныеОперацийКэш.Наименование КАК Наименование,
	|	ДанныеОперацийКэш.Владелец КАК Владелец
	|ПОМЕСТИТЬ ВтДанныеОперацийКэш
	|ИЗ &ДанныеПроизводственногоПроцесса КАК ДанныеОперацийКэш
	|
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеОперацийКэш.Ссылка) = ТИП(Справочник.ТехнологическиеОперации)
	|;
	|///////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Операции.Идентификатор                КАК Идентификатор,
	|	МАКСИМУМ(Операции.Ссылка)             КАК Операция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Операции.Ссылка) КАК КоличествоОпераций
	|ПОМЕСТИТЬ ВтДанныеОпераций
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Операции.Ссылка                 КАК Ссылка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК Операции
	|		ПО Операции.НомерОперации = ЗагружаемыеДанные.НомерОперации
	|		И Операции.Наименование = ЗагружаемыеДанные.Операция
	|
	|		, &ВтДанныеЭтапов
	|
	|	ГДЕ
	|		Операции.Спецификация = &РесурснаяСпецификация
	|		И НЕ Операции.ПометкаУдаления
	|		И НЕ ЗагружаемыеДанные.НомерОперации = 0
	|		И НЕ ЗагружаемыеДанные.Операция = """"
	|		И &ОтборПоЭтапу
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Операции.Ссылка                 КАК Ссылка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК Операции
	|		ПО Операции.НомерОперации = ЗагружаемыеДанные.НомерОперации
	|		
	|		, &ВтДанныеЭтапов
	|
	|	ГДЕ
	|		Операции.Спецификация = &РесурснаяСпецификация
	|		И НЕ Операции.ПометкаУдаления
	|		И НЕ ЗагружаемыеДанные.НомерОперации = 0
	|		И ЗагружаемыеДанные.Операция = """"
	|		И &ОтборПоЭтапу
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Операции.Ссылка                 КАК Ссылка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК Операции
	|		ПО Операции.Наименование = ЗагружаемыеДанные.Операция
	|
	|		, &ВтДанныеЭтапов
	|
	|	ГДЕ
	|		Операции.Спецификация = &РесурснаяСпецификация
	|		И НЕ Операции.ПометкаУдаления
	|		И НЕ ЗагружаемыеДанные.Операция = """"
	|		И ЗагружаемыеДанные.НомерОперации = 0
	|		И &ОтборПоЭтапу
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Операции.Ссылка                 КАК Ссылка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеОперацийКэш КАК Операции
	|		ПО Операции.НомерОперации = ЗагружаемыеДанные.НомерОперации
	|		И Операции.Наименование = ЗагружаемыеДанные.Операция
	|
	|		, &ВтДанныеЭтапов
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.НомерОперации = 0
	|		И НЕ ЗагружаемыеДанные.Операция = """"
	|		И &ОтборПоЭтапу
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Операции.Ссылка                 КАК Ссылка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеОперацийКэш КАК Операции
	|		ПО Операции.НомерОперации = ЗагружаемыеДанные.НомерОперации
	|
	|		, &ВтДанныеЭтапов
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.НомерОперации = 0
	|		И ЗагружаемыеДанные.Операция = """"
	|		И &ОтборПоЭтапу
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Операции.Ссылка                 КАК Ссылка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеОперацийКэш КАК Операции
	|		ПО Операции.Наименование = ЗагружаемыеДанные.Операция
	|
	|		, &ВтДанныеЭтапов
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.Операция = """"
	|		И ЗагружаемыеДанные.НомерОперации = 0
	|		И &ОтборПоЭтапу) КАК Операции
	|
	|СГРУППИРОВАТЬ ПО
	|	Операции.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- НЕ УТКА

Функция ТекстЗапросаВтДанныеСтатейКалькуляции()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор                   КАК Идентификатор,
	|	МАКСИМУМ(СпрСтатьиКалькуляции.Ссылка)             КАК СтатьяКалькуляции,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпрСтатьиКалькуляции.Ссылка) КАК КоличествоСтатейКалькуляции
	|ПОМЕСТИТЬ ВтДанныеСтатейКалькуляции
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиКалькуляции КАК СпрСтатьиКалькуляции
	|	ПО СпрСтатьиКалькуляции.Наименование = ЗагружаемыеДанные.СтатьяКалькуляции
	|
	|ГДЕ
	|	НЕ ЗагружаемыеДанные.СтатьяКалькуляции = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗагружаемыеДанные.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ТекстыЗапросовЗагрузкиИзФайлаВТЧМатериалыИУслуги

Функция ТекстЗапросаВтЗагружаемыеДанныеМатериалыИУслуги()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор       КАК Идентификатор,
	|	ЗагружаемыеДанные.Штрихкод            КАК Штрихкод,
	|	ЗагружаемыеДанные.Артикул             КАК Артикул,
	|	ЗагружаемыеДанные.КодНоменклатуры     КАК КодНоменклатуры,
	|	ЗагружаемыеДанные.Номенклатура        КАК Номенклатура,
	|	ЗагружаемыеДанные.Характеристика      КАК Характеристика,
	|	ЗагружаемыеДанные.КодУпаковки         КАК КодУпаковки,
	|	ЗагружаемыеДанные.Упаковка            КАК Упаковка,
	|	ЗагружаемыеДанные.КоличествоУпаковок  КАК КоличествоУпаковок,
	|	&ЗагружаемыеДанныеЭтап,
	//++ НЕ УТКА
	|	&ЗагружаемыеДанныеОперация,
	//-- НЕ УТКА
	|	ЗагружаемыеДанные.СтатьяКалькуляции   КАК СтатьяКалькуляции,
	|	ЗагружаемыеДанные.ПрименениеМатериала КАК ПрименениеМатериала
	|ПОМЕСТИТЬ ВтЗагружаемыеДанные
	|ИЗ
	|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеШтрихкодов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	Штрихкоды.Номенклатура          КАК Номенклатура,
	|	Штрихкоды.Характеристика        КАК Характеристика,
	|	Штрихкоды.Упаковка              КАК Упаковка
	|ПОМЕСТИТЬ ВтДанныеШтрихкодов
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|	ПО Штрихкоды.Штрихкод = ЗагружаемыеДанные.Штрихкод
	|
	|ГДЕ
	|	НЕ ЗагружаемыеДанные.Штрихкод = """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеНоменклатуры()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Идентификатор                      КАК Идентификатор,
	|	МАКСИМУМ(СпрНоменклатура.Номенклатура)             КАК Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпрНоменклатура.Номенклатура) КАК КоличествоНоменклатуры
	|ПОМЕСТИТЬ ВтДанныеНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		СпрНоменклатура.Ссылка          КАК Номенклатура
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Артикул = ЗагружаемыеДанные.Артикул
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.Артикул = """"
	|		И СпрНоменклатура.ТипНоменклатуры В (&ДоступныеТипыНоменклатуры)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		СпрНоменклатура.Ссылка          КАК Номенклатура
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Код = ЗагружаемыеДанные.КодНоменклатуры
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.КодНоменклатуры = """"
	|		И СпрНоменклатура.ТипНоменклатуры В (&ДоступныеТипыНоменклатуры)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		СпрНоменклатура.Ссылка          КАК Номенклатура
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Наименование = ЗагружаемыеДанные.Номенклатура
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.Номенклатура = """"
	|		И СпрНоменклатура.ТипНоменклатуры В (&ДоступныеТипыНоменклатуры)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеШтрихкодов.Идентификатор КАК Идентификатор,
	|		ДанныеШтрихкодов.Номенклатура  КАК Номенклатура
	|	ИЗ
	|		ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	) КАК СпрНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрНоменклатура.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	Номенклатура
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеХарактеристик()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Характеристики.Идентификатор                        КАК Идентификатор,
	|	МАКСИМУМ(Характеристики.Характеристика)             КАК Характеристика,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Характеристики.Характеристика) КАК КоличествоХарактеристик
	|ПОМЕСТИТЬ ВтДанныеХарактеристик
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Характеристики.Ссылка           КАК Характеристика
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|		ПО Характеристики.Владелец = ДанныеНоменклатуры.Номенклатура
	|		И Характеристики.Наименование = ЗагружаемыеДанные.Характеристика
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.Характеристика = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Характеристики.Ссылка           КАК Характеристика
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|		ПО Характеристики.Владелец = ДанныеНоменклатуры.Номенклатура.ВидНоменклатуры
	|		И Характеристики.Наименование = ЗагружаемыеДанные.Характеристика
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.Характеристика = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеШтрихкодов.Идентификатор КАК Идентификатор,
	|		ДанныеШтрихкодов.Характеристика КАК Характеристика
	|	ИЗ
	|		ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	) КАК Характеристики
	|
	|СГРУППИРОВАТЬ ПО
	|	Характеристики.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеУпаковок()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Упаковки.Идентификатор                  КАК Идентификатор,
	|	МАКСИМУМ(Упаковки.Упаковка)             КАК Упаковка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Упаковки.Упаковка) КАК КоличествоУпаковки
	|ПОМЕСТИТЬ ВтДанныеУпаковок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Упаковки.Ссылка                 КАК Упаковка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура
	|		И Упаковки.Наименование = ЗагружаемыеДанные.Упаковка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.Упаковка = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Упаковки.Ссылка                 КАК Упаковка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура.НаборУпаковок
	|		И Упаковки.Наименование = ЗагружаемыеДанные.Упаковка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.Упаковка = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Упаковки.Ссылка                 КАК Упаковка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура
	|		И Упаковки.Код = ЗагружаемыеДанные.КодУпаковки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.КодУпаковки = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Упаковки.Ссылка                 КАК Упаковка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура.НаборУпаковок
	|		И Упаковки.Код = ЗагружаемыеДанные.КодУпаковки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.КодУпаковки = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеШтрихкодов.Идентификатор КАК Идентификатор,
	|		ДанныеШтрихкодов.Упаковка      КАК Упаковка
	|	ИЗ
	|		ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	) КАК Упаковки
	|
	|СГРУППИРОВАТЬ ПО
	|	Упаковки.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗагружаемыеДанныеМатериаловИУслуг()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор                          КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеСтатейКалькуляции.КоличествоСтатейКалькуляции, 0) = 1
	|			ТОГДА ДанныеСтатейКалькуляции.СтатьяКалькуляции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	КОНЕЦ                                                    КАК СтатьяКалькуляции,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеНоменклатуры.КоличествоНоменклатуры, 0) = 1
	|			ТОГДА ДанныеНоменклатуры.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ                                                    КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеХарактеристик.КоличествоХарактеристик, 0) = 1
	|			ТОГДА ДанныеХарактеристик.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                    КАК Характеристика,
	|	&Этап,
	//++ НЕ УТКА
	|	&Операция,
	//-- НЕ УТКА
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеУпаковок.КоличествоУпаковки, 0) = 1
	|			ТОГДА ДанныеУпаковок.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ                                                    КАК Упаковка,
	|	ЕСТЬNULL(ДанныеНоменклатуры.КоличествоНоменклатуры, 0)   КАК КоличествоНоменклатуры,
	|	ЕСТЬNULL(ДанныеХарактеристик.КоличествоХарактеристик, 0) КАК КоличествоХарактеристик,
	|	&КоличествоЭтапов,
	//++ НЕ УТКА
	|	&КоличествоОпераций,
	//-- НЕ УТКА
	|	ЕСТЬNULL(ДанныеУпаковок.КоличествоУпаковки, 0)           КАК КоличествоУпаковки,
	|	ЕСТЬNULL(ДанныеСтатейКалькуляции.КоличествоСтатейКалькуляции, 0) КАК КоличествоСтатейКалькуляции,
	|	ЗагружаемыеДанные.КоличествоУпаковок                     КАК КоличествоУпаковок,
	|	ЗагружаемыеДанные.ПрименениеМатериала                    КАК ПрименениеМатериала
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеСтатейКалькуляции КАК ДанныеСтатейКалькуляции
	|	ПО ДанныеСтатейКалькуляции.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|	ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеХарактеристик КАК ДанныеХарактеристик
	|	ПО ДанныеХарактеристик.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУпаковок КАК ДанныеУпаковок
	|	ПО ДанныеУпаковок.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовЗагрузкиИзФайлаВТЧТрудозатраты

Функция ТекстЗапросаВтЗагружаемыеДанныеТрудозатраты()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор     КАК Идентификатор,
	|	ЗагружаемыеДанные.КодВидаРабот      КАК КодВидаРабот,
	|	ЗагружаемыеДанные.ВидРабот          КАК ВидРабот,
	|	ЗагружаемыеДанные.Количество        КАК Количество,
	|	ЗагружаемыеДанные.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	&ЗагружаемыеДанныеЭтап,
	//++ НЕ УТКА
	|	&ЗагружаемыеДанныеОперация,
	//-- НЕ УТКА
	|	ЗагружаемыеДанные.НазначениеРабот   КАК НазначениеРабот
	|ПОМЕСТИТЬ ВтЗагружаемыеДанные
	|ИЗ
	|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеВидовРабот()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыРабот.Идентификатор                  КАК Идентификатор,
	|	МАКСИМУМ(ВидыРабот.ВидРабот)             КАК ВидРабот,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыРабот.ВидРабот) КАК КоличествоВидовРабот
	|ПОМЕСТИТЬ ВтДанныеВидовРабот
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		ВидыРабот.Ссылка                КАК ВидРабот
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРаботСотрудников КАК ВидыРабот
	|		ПО ВидыРабот.Код = ЗагружаемыеДанные.КодВидаРабот
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.КодВидаРабот = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		ВидыРабот.Ссылка                КАК ВидРабот
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРаботСотрудников КАК ВидыРабот
	|		ПО ВидыРабот.Наименование = ЗагружаемыеДанные.ВидРабот
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.ВидРабот = """"
	|	) КАК ВидыРабот
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыРабот.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	ВидРабот
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗагружаемыеДанныеТрудозатраты()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор                             КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеСтатейКалькуляции.КоличествоСтатейКалькуляции, 0) = 1
	|			ТОГДА ДанныеСтатейКалькуляции.СтатьяКалькуляции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	КОНЕЦ                                                       КАК СтатьяКалькуляции,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеВидовРабот.КоличествоВидовРабот, 0) = 1
	|			ТОГДА ДанныеВидовРабот.ВидРабот
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыРаботСотрудников.ПустаяСсылка)
	|	КОНЕЦ                                                       КАК ВидРабот,
	|	&Этап,
	//++ НЕ УТКА
	|	&Операция,
	//-- НЕ УТКА
	|	ЕСТЬNULL(ДанныеВидовРабот.КоличествоВидовРабот, 0)          КАК КоличествоВидовРабот,
	|	ЕСТЬNULL(ДанныеСтатейКалькуляции.КоличествоСтатейКалькуляции, 0) КАК КоличествоСтатейКалькуляции,
	|	ЗагружаемыеДанные.Количество                                КАК Количество,
	|	&КоличествоЭтапов,
	//++ НЕ УТКА
	|	&КоличествоОпераций,
	//-- НЕ УТКА
	|	ЗагружаемыеДанные.НазначениеРабот                           КАК НазначениеРабот
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеСтатейКалькуляции КАК ДанныеСтатейКалькуляции
	|	ПО ДанныеСтатейКалькуляции.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеВидовРабот КАК ДанныеВидовРабот
	|	ПО ДанныеВидовРабот.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаДанныеОсновногоИзделияСпецификации()
	
	ТекстыЗапросов = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыходныеИзделия.Ссылка                   КАК Спецификация,
	|	ВыходныеИзделия.Ссылка.ВариантНазначения КАК ВариантНазначения,
	|
	|	ВыходныеИзделия.ВидНоменклатуры          КАК ВидНоменклатуры,
	|	&ВыходныеИзделияИсточникНоменклатуры     КАК Номенклатура,
	|	&ВыходныеИзделияИсточникХарактеристики   КАК Характеристика,
	|
	|	ВыходныеИзделия.КоличествоУпаковок       КАК КоличествоУпаковок,
	|
	|	ВЫБОР
	|		КОГДА &УчитыватьВероятностьБрака
	|			ТОГДА ВыходныеИзделия.ПроцентБрака / 100
	|		ИНАЧЕ 0
	|	КОНЕЦ                                    КАК КоэффициентБрака,
	|
	|	ВыходныеИзделия.Упаковка                 КАК Упаковка,
	|	ВыходныеИзделия.Этап КАК Этап,
	|	ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика,
	|	ВыходныеИзделия.НомерСтроки = 1 КАК ЭтоОсновноеИзделие
	|
	|ПОМЕСТИТЬ ВтОсновноеИзделие
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО ВыходныеИзделия.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
	|			И ВыходныеИзделия.Ссылка.ТипПроизводственногоПроцесса В (
	|									ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|									ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|			И (ВыходныеИзделия.Номенклатура = ВтДанныеПоНоменклатуре.Номенклатура
	|				ИЛИ ВтДанныеПоНоменклатуре.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ВыходныеИзделия.НомерСтроки = 1
	|				ИЛИ ВыходныеИзделия.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ВыходныеИзделия.ВидНоменклатуры = ВтДанныеПоНоменклатуре.Номенклатура.ВидНоменклатуры
	|					И ВыходныеИзделия.НомерСтроки = 1)
	|			И (ВтДанныеПоНоменклатуре.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И ВыходныеИзделия.НомерСтроки = 1
	|				ИЛИ ВыходныеИзделия.Характеристика = ВтДанныеПоНоменклатуре.Характеристика
	|				ИЛИ ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВходныеИзделия.Ссылка,
	|	ВходныеИзделия.ВариантНазначения,
	|	
	|	ВходныеИзделия.ОсновноеИзделиеВидНоменклатуры,
	|	&ВходныеИзделияИсточникНоменклатуры,
	|	&ВходныеИзделияИсточникХарактеристики,
	|
	|	ВходныеИзделия.ОсновноеИзделиеКоличествоУпаковок,
	|
	|	0,
	|
	|	ВходныеИзделия.ОсновноеИзделиеУпаковка,
	|	ВходныеИзделия.ОсновноеИзделиеЭтап,
	|	ВходныеИзделия.ОсновноеИзделиеХарактеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ИСТИНА
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК ВходныеИзделия
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|		ПО ВходныеИзделия.Ссылка = ВтДанныеПоНоменклатуре.Спецификация
	|			И ВходныеИзделия.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			И (ВходныеИзделия.ОсновноеИзделиеНоменклатура = ВтДанныеПоНоменклатуре.Номенклатура
	|				ИЛИ ВтДанныеПоНоменклатуре.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ИЛИ ВходныеИзделия.ОсновноеИзделиеНоменклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ВходныеИзделия.ОсновноеИзделиеВидНоменклатуры = ВтДанныеПоНоменклатуре.Номенклатура.ВидНоменклатуры)
	|			И (ВтДанныеПоНоменклатуре.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ИЛИ ВходныеИзделия.ОсновноеИзделиеХарактеристика = ВтДанныеПоНоменклатуре.Характеристика
	|				ИЛИ ВходныеИзделия.ОсновноеИзделиеХарактеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|";
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	ТекстыЗапросов.Добавить(УправлениеДаннымиОбИзделиях.ТекстЗапросаДанныеУпаковок(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВтОсновноеИзделие")));
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.*,
	|	Т.КоличествоУпаковок               КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
	|	Т.ВидНоменклатуры.ТипНоменклатуры  КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА Т.ВидНоменклатуры.ИспользованиеХарактеристик В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ЕСТЬNULL(Т.Номенклатура.ГруппаАналитическогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка))         КАК ГруппаАналитическогоУчета,
	|	ЕСТЬNULL(Т.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))                               КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(Т.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК ЕдиницаИзмеренияШтучная
	|
	|ИЗ
	|	ВтОсновноеИзделие КАК Т
	|";
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ПараметрыПодстановкиВыходныеИзделия = ПараметрыПодстановкиНоменклатураХарактеристикаОсновногоИзделия(
		"ВыходныеИзделия",
		"ВидНоменклатуры",
		"Номенклатура",
		"Характеристика");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникНоменклатуры",   ПараметрыПодстановкиВыходныеИзделия.ИсточникНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыходныеИзделияИсточникХарактеристики", ПараметрыПодстановкиВыходныеИзделия.ИсточникХарактеристика);
	
	ПараметрыПодстановкиВходныеИзделия  = ПараметрыПодстановкиНоменклатураХарактеристикаОсновногоИзделия(
		"ВходныеИзделия",
		"ОсновноеИзделиеВидНоменклатуры",
		"ОсновноеИзделиеНоменклатура",
		"ОсновноеИзделиеХарактеристика");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВходныеИзделияИсточникНоменклатуры",   ПараметрыПодстановкиВходныеИзделия.ИсточникНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВходныеИзделияИсточникХарактеристики", ПараметрыПодстановкиВходныеИзделия.ИсточникХарактеристика);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПараметрыПодстановкиНоменклатураХарактеристикаОсновногоИзделия(
	ИмяТаблицы,
	ИсточникВидНоменклатуры = "ВидНоменклатуры",
	ИсточникНоменклатура = "Номенклатура",
	ИсточникХарактеристика = "Характеристика")
	
	Результат = Новый Структура;
	
	ТекстПоляНоменклатура = ТекстПоляВыражениеНоменклатураОсновногоИзделия(
		ИмяТаблицы,
		ИсточникВидНоменклатуры,
		ИсточникНоменклатура);
		
	ТекстПоляХарактеристика = ТекстПоляВыражениеХарактеристикаОсновногоИзделия(
		ИмяТаблицы,
		ИсточникВидНоменклатуры,
		ИсточникНоменклатура,
		ИсточникХарактеристика);
		
	Результат.Вставить("ИсточникНоменклатура",   ТекстПоляНоменклатура);
	Результат.Вставить("ИсточникХарактеристика", ТекстПоляХарактеристика);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстПоляВыражениеНоменклатураОсновногоИзделия(
	ИмяТаблицы,
	ИсточникВидНоменклатуры = "ВидНоменклатуры",
	ИсточникНоменклатура = "Номенклатура")

	ТекстПоля = "
	|ВЫБОР
	|	КОГДА ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И ТабличнаяЧасть.ВидНоменклатуры = ВтДанныеПоНоменклатуре.Номенклатура.ВидНоменклатуры
	|		ТОГДА ВтДанныеПоНоменклатуре.Номенклатура
	|	ИНАЧЕ ТабличнаяЧасть.Номенклатура
	|КОНЕЦ
	|";
	
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.ВидНоменклатуры", ИмяТаблицы + "." + ИсточникВидНоменклатуры);
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.Номенклатура",    ИмяТаблицы + "." + ИсточникНоменклатура);
	
	Возврат ТекстПоля;
	
КонецФункции

Функция ТекстПоляВыражениеХарактеристикаОсновногоИзделия(
	ИмяТаблицы,
	ИсточникВидНоменклатуры = "ВидНоменклатуры",
	ИсточникНоменклатура = "Номенклатура",
	ИсточникХарактеристика = "Характеристика")
	
	ТекстПоля = "
	|ВЫБОР
	|	КОГДА ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И ТабличнаяЧасть.ВидНоменклатуры = ВтДанныеПоНоменклатуре.Номенклатура.ВидНоменклатуры
	|		ТОГДА ВтДанныеПоНоменклатуре.Характеристика
	|	КОГДА ТабличнаяЧасть.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ТОГДА ТабличнаяЧасть.Характеристика
	|	КОГДА ТабличнаяЧасть.Номенклатура = ВтДанныеПоНоменклатуре.Номенклатура
	|		ТОГДА ВтДанныеПоНоменклатуре.Характеристика
	|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|КОНЕЦ"; 
	
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.ВидНоменклатуры", ИмяТаблицы + "." + ИсточникВидНоменклатуры);
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.Номенклатура",    ИмяТаблицы + "." + ИсточникНоменклатура);
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.Характеристика",  ИмяТаблицы + "." + ИсточникХарактеристика);
	
	Возврат ТекстПоля;
	
КонецФункции

Функция ТекстПоляВыражениеХарактеристикаЦООсновногоИзделия(
	ИмяТаблицы,
	ИсточникВидНоменклатуры = "ВидНоменклатуры",
	ИсточникНоменклатура = "Номенклатура",
	ИсточникХарактеристика = "Характеристика")
	
	ТекстПоля = "
	|ЕСТЬNULL(ВЫБОР
	|	КОГДА
	|		ТабличнаяЧасть.ВидНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|	ИНАЧЕ ВЫБОР
	|	КОГДА ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И ТабличнаяЧасть.ВидНоменклатуры = ВтДанныеПоНоменклатуре.Номенклатура.ВидНоменклатуры
	|		ТОГДА ВтДанныеПоНоменклатуре.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
	|	КОГДА ТабличнаяЧасть.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ТОГДА ТабличнаяЧасть.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
	|	КОГДА ТабличнаяЧасть.Номенклатура = ВтДанныеПоНоменклатуре.Номенклатура
	|		ТОГДА ВтДанныеПоНоменклатуре.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
	|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|КОНЕЦ
	|КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка))"; 
	
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.ВидНоменклатуры", ИмяТаблицы + "." + ИсточникВидНоменклатуры);
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.Номенклатура",    ИмяТаблицы + "." + ИсточникНоменклатура);
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.Характеристика",  ИмяТаблицы + "." + ИсточникХарактеристика);
	
	Возврат ТекстПоля;
	
КонецФункции

Функция ТекстПоляВыражениеУпаковкаЦООсновногоИзделия(
	ИмяТаблицы,
	ИсточникВидНоменклатуры = "ВидНоменклатуры",
	ИсточникНоменклатура = "Номенклатура",
	ИсточникУпаковка = "Упаковка")
	
	ТекстПоля = "
	|ВЫБОР
	|	КОГДА ТабличнаяЧасть.ВидНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	ИНАЧЕ ТабличнаяЧасть.Упаковка
	|КОНЕЦ"; 
	
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.ВидНоменклатуры", ИмяТаблицы + "." + ИсточникВидНоменклатуры);
	ТекстПоля = СтрЗаменить(ТекстПоля, "ТабличнаяЧасть.Упаковка",  ИмяТаблицы + "." + ИсточникУпаковка);
	
	Возврат ТекстПоля;
	
КонецФункции

//++ НЕ УТКА

Функция ТекстЗапросаВложенныеСпецификации()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.Спецификация КАК Спецификация
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В (&Спецификации)
	|	И Таблица.ОбработатьПоСпецификации
	|	И Таблица.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.Спецификация КАК Спецификация
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В (&Спецификации)
	|	И Таблица.ОбработатьПоСпецификации
	|	И Таблица.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ИсточникПолученияПолуфабриката КАК Спецификация
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В (&Спецификации)
	|	И Таблица.ПроизводитсяВПроцессе
	|	И Таблица.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
	|	И Таблица.ИсточникПолученияПолуфабриката <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.СпецификацияРемонта КАК Спецификация
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В (&Спецификации)
	|	И Таблица.ПроизводитсяВПроцессе
	|	И Таблица.СпецификацияРемонта <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- НЕ УТКА
	
Функция ТекстЗапросаМатериалыСпецификацийВключаяСоставНаборов(ИмяТаблицы) Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РесурсныеСпецификацииМатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	РесурсныеСпецификацииМатериалыИУслуги.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ВариантыКомплектацииНоменклатуры.Ссылка) КАК ВариантКомплектацииНоменклатуры
	|ПОМЕСТИТЬ ВТОсновныеКомплектацииНоменклатуры
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаСпецификаций КАК ТаблицаСпецификаций
	|		ПО (ТаблицаСпецификаций.Спецификация = РесурсныеСпецификацииМатериалыИУслуги.Ссылка)
	|			И (РесурсныеСпецификацииМатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО РесурсныеСпецификацииМатериалыИУслуги.Номенклатура = ВариантыКомплектацииНоменклатуры.Владелец
	|			И РесурсныеСпецификацииМатериалыИУслуги.Характеристика = ВариантыКомплектацииНоменклатуры.Характеристика
	|			И (НЕ ВариантыКомплектацииНоменклатуры.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	РесурсныеСпецификацииМатериалыИУслуги.Номенклатура,
	|	РесурсныеСпецификацииМатериалыИУслуги.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновныеКомплектацииНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВТОсновныеКомплектацииНоменклатуры.Характеристика КАК Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Комплектующая,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК ХарактеристикаКомплектующей,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка КАК Упаковка,
	|	ВариантыКомплектацииНоменклатурыТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВариантыКомплектацииНоменклатурыТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ВТСоставНаборов
	|ИЗ
	|	ВТОсновныеКомплектацииНоменклатуры КАК ВТОсновныеКомплектацииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ПО ВТОсновныеКомплектацииНоменклатуры.ВариантКомплектацииНоменклатуры = ВариантыКомплектацииНоменклатурыТовары.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РесурсныеСпецификацииМатериалыИУслуги.Ссылка КАК Ссылка,
	|	РесурсныеСпецификацииМатериалыИУслуги.Этап КАК Этап,
	|	ЕСТЬNULL(ВТСоставНаборов.Комплектующая, РесурсныеСпецификацииМатериалыИУслуги.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ВТСоставНаборов.Характеристика, РесурсныеСпецификацииМатериалыИУслуги.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ВТСоставНаборов.Упаковка, РесурсныеСпецификацииМатериалыИУслуги.Упаковка) КАК Упаковка,
	|	РесурсныеСпецификацииМатериалыИУслуги.КоличествоУпаковок
	|		* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|		* ЕСТЬNULL(ВТСоставНаборов.КоличествоУпаковок, 1)                              КАК КоличествоУпаковок,
	|	РесурсныеСпецификацииМатериалыИУслуги.КоличествоУпаковок
	|		* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|		* ЕСТЬNULL(ВТСоставНаборов.Количество, 1)                                      КАК Количество
	|ПОМЕСТИТЬ МатериалыИУслугиСпецификаций
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаСпецификаций КАК ТаблицаСпецификаций
	|		ПО (ТаблицаСпецификаций.Спецификация = РесурсныеСпецификацииМатериалыИУслуги.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоставНаборов КАК ВТСоставНаборов
	|		ПО РесурсныеСпецификацииМатериалыИУслуги.Номенклатура = ВТСоставНаборов.Номенклатура
	|			И РесурсныеСпецификацииМатериалыИУслуги.Характеристика = ВТСоставНаборов.Характеристика
	|			И (РесурсныеСпецификацииМатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОсновныеКомплектацииНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСоставНаборов";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"РесурсныеСпецификацииМатериалыИУслуги.Упаковка",
			"РесурсныеСпецификацииМатериалыИУслуги.Номенклатура"));
			
	Возврат СтрЗаменить(ТекстЗапроса, "&ТаблицаСпецификаций", ИмяТаблицы);
	
КонецФункции

Функция ПараметрыПодстановкиПоляЗаказатьНаСклад(ИмяТаблицы = "ТабличнаяЧасть", ИсточникНоменклатуры = "",  ВариантЗаполненияОбеспечения = Неопределено)
	
	ТекстПоля       = "ЛОЖЬ";
	ТекстСоединения = "";
	
	//++ Устарело_Производство21
	Если ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоНастройкамПередачиВПроизводство
		ИЛИ ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоНастройкамПередачиВПроизводствоДляПланов Тогда
		
		ТекстПоля = "
		|	ВЫБОР 
		|		КОГДА ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
		|																	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|			ТОГДА ЛОЖЬ
		|		КОГДА ТабличнаяЧасть.ПроизводитсяВПроцессе ТОГДА
		|			ВЫБОР
		|				КОГДА ТабличнаяЧасть.Этап.Подразделение.СпособПолученияПолуфабрикатов = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияПолуфабрикатовПроизводимыхВПроцессе.Напрямую)
		|					ТОГДА ЛОЖЬ
		|				КОГДА ТабличнаяЧасть.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|						И ВЫРАЗИТЬ(ТабличнаяЧасть.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение = ТабличнаяЧасть.Этап.Подразделение
		|					ТОГДА ЛОЖЬ
		|				КОГДА ТабличнаяЧасть.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|						И ВЫРАЗИТЬ(ТабличнаяЧасть.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение <> ТабличнаяЧасть.Этап.Подразделение
		|					ТОГДА ИСТИНА
		|				КОГДА ТабличнаяЧасть.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
		|						И ПроизводимоеВПроцессеИзделие.Этап.Подразделение <> ТабличнаяЧасть.Этап.Подразделение
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|		КОГДА &ТекстПолеОснование = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
		|				ИЛИ ТабличнаяЧасть.Этап.ПроизводствоНаСтороне 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ";
		
		ТекстСоединения = "
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ПроизводимоеВПроцессеИзделие
		|		ПО ПроизводимоеВПроцессеИзделие.Ссылка = ТабличнаяЧасть.ИсточникПолученияПолуфабриката
		|			И ТабличнаяЧасть.ПроизводитсяВПроцессе
		|			И ПроизводимоеВПроцессеИзделие.Номенклатура = ТабличнаяЧасть.Номенклатура
		|			И (ПроизводимоеВПроцессеИзделие.Характеристика = ТабличнаяЧасть.Характеристика
		|				ИЛИ ПроизводимоеВПроцессеИзделие.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))";
		
		Если НЕ ПустаяСтрока(ИсточникНоменклатуры) Тогда
			ТекстПоля       = СтрЗаменить(ТекстПоля      , "ТабличнаяЧасть.Номенклатура"  , ИсточникНоменклатуры+".Номенклатура");
			ТекстПоля       = СтрЗаменить(ТекстПоля      , "ТабличнаяЧасть.Характеристика", ИсточникНоменклатуры+".Характеристика");
			ТекстСоединения = СтрЗаменить(ТекстСоединения, "ТабличнаяЧасть.Номенклатура"  , ИсточникНоменклатуры+".Номенклатура");
			ТекстСоединения = СтрЗаменить(ТекстСоединения, "ТабличнаяЧасть.Характеристика", ИсточникНоменклатуры+".Характеристика");
		КонецЕсли;
		
		Если ИмяТаблицы <> "ТабличнаяЧасть" Тогда
			ТекстПоля       = СтрЗаменить(ТекстПоля      , "ТабличнаяЧасть.", ИмяТаблицы+".");
			ТекстСоединения = СтрЗаменить(ТекстСоединения, "ТабличнаяЧасть.", ИмяТаблицы+".");
		КонецЕсли;
	
	КонецЕсли;
	//-- Устарело_Производство21
	
	Возврат Новый Структура("ТекстПоля, ТекстСоединения", ТекстПоля, ТекстСоединения);
	
КонецФункции

Функция ТекстПодстановкиПоляЗапланировать(ИсточникПодразделенияДиспетчера = "", ИсточникНоменклатуры = "", ИсточникПолученияПолуфабриката = "")
	
	ТекстПоля = "
	|	ВЫБОР 
	|		КОГДА (&ПодразделениеДиспетчер = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) 
	|				ИЛИ ЕСТЬNULL(СпрСпособОбеспечения.ИсточникОбеспеченияПотребностей, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|					В (&ПодразделениеДиспетчер,
	|						НЕОПРЕДЕЛЕНО,
	|						ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)))
	|				И ЕСТЬNULL(СпрСпособОбеспечения.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	Если НЕ ПустаяСтрока(ИсточникНоменклатуры) Тогда
		
		ТекстПоля = СтрЗаменить(ТекстПоля, "МатериалыИУслуги.Номенклатура", ИсточникНоменклатуры);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИсточникПолученияПолуфабриката) Тогда
		
		ТекстПоля = СтрЗаменить(ТекстПоля, "МатериалыИУслуги.ИсточникПолученияПолуфабриката", ИсточникПолученияПолуфабриката);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИсточникПодразделенияДиспетчера) Тогда
		
		ТекстПоля = СтрЗаменить(ТекстПоля, "&ПодразделениеДиспетчер", ИсточникПодразделенияДиспетчера);
		
	КонецЕсли;
	
	Возврат ТекстПоля;
	
КонецФункции

Функция ТекстЗапросаДоступныеУпаковкиСпецификацииНаВидНоменклатуры(АвтоПодбор = Ложь) Экспорт
	
	ТекстыЗапроса = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Владелец      КАК НаборУпаковок,
	|	УпаковкиЕдиницыИзмерения.Ссылка        КАК Ссылка,
	|	УпаковкиЕдиницыИзмерения.Представление КАК Представление
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
	|	И &ОтборСтрокаПоиска
	|
	|";
	
	Если НЕ АвтоПодбор Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Представление
		|";
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Владелец      КАК НаборУпаковок,
	|	УпаковкиЕдиницыИзмерения.Ссылка        КАК Ссылка,
	|	УпаковкиЕдиницыИзмерения.Представление КАК Представление
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	ВЫРАЗИТЬ(УпаковкиЕдиницыИзмерения.Владелец КАК Справочник.НаборыУпаковок).Предопределенный = ЛОЖЬ
	|	И &ИспользоватьУпаковкиНоменклатуры
	|	И &ОтборСтрокаПоиска
	|
	|";
	
	Если АвтоПодбор Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Представление
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	НаборУпаковок,
		|	Ссылка ИЕРАРХИЯ,
		|	Представление
		|АВТОУПОРЯДОЧИВАНИЕ
		|";
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Если АвтоПодбор Тогда
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборСтрокаПоиска", "УпаковкиЕдиницыИзмерения.Наименование ПОДОБНО &СтрокаПоиска");
	Иначе
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Символы.ПС + ";" + Символы.ПС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборСтрокаПоиска", "ИСТИНА");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстПодстановкиРасчетПризнакаЕстьПараметризацияРесурсов(ИсточникСпецификации = "") Экспорт
	
	ТекстЗапроса = " ЛОЖЬ ";
	//++ НЕ УТКА
	ТекстЗапроса = "
	|	(
	|			ИСТИНА В (
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И (
	|						ВЫРАЗИТЬ(ТабличнаяЧасть.АлгоритмРасчетаКоличества КАК СТРОКА(100)) <> """"
	|						ИЛИ ВЫБОР
	|							КОГДА ТабличнаяЧасть.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции)
	|								ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции)
	|								ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму)
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ)
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|			
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И (
	|						ВЫРАЗИТЬ(ТабличнаяЧасть.АлгоритмРасчетаКоличества КАК СТРОКА(100)) <> """"
	|						ИЛИ ВЫБОР
	|							КОГДА ТабличнаяЧасть.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции)
	|								ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции)
	|								ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму)
	|									ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ)
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|			
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И (
	|						ВЫРАЗИТЬ(ТабличнаяЧасть.АлгоритмРасчетаКоличества КАК СТРОКА(100)) <> """"
	|						ИЛИ ВЫБОР
	|							КОГДА ТабличнаяЧасть.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции)
	|								ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции)
	|								ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму)
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ)
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|			
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.Трудозатраты КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|					И ВЫРАЗИТЬ(ТабличнаяЧасть.АлгоритмРасчетаКоличества КАК СТРОКА(100)) <> """"
	|				
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.РесурсныеСпецификации.ОтборПоСвойствам КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|			
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ТабличнаяЧасть
	|					ГДЕ
	|						Таблица.Ссылка = ТабличнаяЧасть.Ссылка.Владелец
	|						И НЕ (ВЫРАЗИТЬ(ТабличнаяЧасть.АлгоритмРасчетаКоличества КАК СТРОКА(100))) = """"
	|						И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|	
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.ЭтапыПроизводства.АльтернативныеВидыРабочихЦентров КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка.Владелец
	|					И НЕ (ВЫРАЗИТЬ(ТабличнаяЧасть.АлгоритмРасчетаКоличества КАК СТРОКА(100))) = """"
	|					И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|			)
	|			
	|			ИЛИ ИСТИНА В (
	|
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.ЭтапыПроизводства.ОтборПоСвойствам КАК ТабличнаяЧасть
	|				ГДЕ
	|					Таблица.Ссылка = ТабличнаяЧасть.Ссылка.Владелец
	|			)
	|	)
	|";
	
	Если НЕ ПустаяСтрока(ИсточникСпецификации) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Таблица.Ссылка", ИсточникСпецификации);
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Получение данных спецификации';
				|en = 'Receiving BOM data'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция СтруктураДанныхОсновногоИзделияСпецификации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВидНоменклатуры", ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка"));
	Результат.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	Результат.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	
	Результат.Вставить("Количество", 0);
	Результат.Вставить("КоличествоУпаковок", 0);
	
	Результат.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	Результат.Вставить("ДанныеУпаковки", УправлениеДаннымиОбИзделияхПовтИсп.СтруктураДанныхУпаковки());
	
	Результат.Вставить("ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	Результат.Вставить("ЕдиницаИзмеренияШтучная", Ложь);
	Результат.Вставить("УпаковкаШтучная", Ложь);
	
	Результат.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	Результат.Вставить("ГруппаАналитическогоУчета", ПредопределенноеЗначение("Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка"));
	
	Результат.Вставить("ХарактеристикиИспользуются", Ложь);
	Результат.Вставить("ЛюбаяХарактеристика", Ложь);
	
	Результат.Вставить("Спецификация", ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"));
	Результат.Вставить("ВариантНазначения", ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.ПустаяСсылка"));
	
	Результат.Вставить("КоэффициентБрака", 0);
	
	Результат.Вставить("ЭтоОсновноеИзделие", Ложь);
	
	// служебные реквизиты
	Результат.Вставить("КоличествоУпаковокНаЕдиницуПартииВыпуска", 0);
	Результат.Вставить("КоэффициентПересчетаВОсновноеИзделие", 1);
	
	// реквизиты для совместимости
	Результат.Вставить("Подразделение", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	Результат.Вставить("ПодразделениеДиспетчер", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	Результат.Вставить("НаправлениеДеятельности", ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ПустаяСсылка"));
	Результат.Вставить("НачалоПроизводства", '00010101');
	Результат.Вставить("ДатаПотребности", '00010101');
	Результат.Вставить("ДнейОтПотребности", 0);
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьПервыйИПоследнийЭтап(Владелец, ПервыйЭтап, ПоследнийЭтап, СписокРеквизитов = "") Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка,
	|	&СписокРеквизитов,
	|	ЭтапыПроизводства.НомерЭтапа,
	|	ЭтапыПроизводства.НомерСледующегоЭтапа
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	(ЭтапыПроизводства.НомерЭтапа = 1
	|			ИЛИ ЭтапыПроизводства.НомерСледующегоЭтапа = 0)
	|	И ЭтапыПроизводства.Владелец = &Владелец
	|	И (НЕ ЭтапыПроизводства.ПометкаУдаления)
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ТекстРеквизиты     = "";
	Если ЗначениеЗаполнено(СписокРеквизитов) Тогда
		Для каждого ИмяРеквизита Из СтрРазделить(СписокРеквизитов, ",") Цикл
			ТекстРеквизиты = ТекстРеквизиты + СтрШаблон("ЭтапыПроизводства.%1,", ИмяРеквизита);
			ПервыйЭтап.Вставить(ИмяРеквизита);
			ПоследнийЭтап.Вставить(ИмяРеквизита);
		КонецЦикла;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СписокРеквизитов,", ТекстРеквизиты);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НомерЭтапа = 1 Тогда
			ЗаполнитьЗначенияСвойств(ПервыйЭтап, Выборка);
		КонецЕсли; 
		
		Если Выборка.НомерСледующегоЭтапа = 0 Тогда
			ЗаполнитьЗначенияСвойств(ПоследнийЭтап, Выборка);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА
Процедура ПолучитьПервыеИПоследниеОперации(Ссылка, ПервыеОперации, ПоследниеОперации) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка КАК Этап,
	|	
	|	МАКСИМУМ(ВЫБОР КОГДА ТехнологическиеОперации.НомерОперации = 1 ТОГДА
	|		ТехнологическиеОперации.Ссылка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка)
	|	КОНЕЦ)                   КАК ПерваяОперация,
	|	МАКСИМУМ(ВЫБОР КОГДА ТехнологическиеОперации.НомерСледующейОперации = 0 ТОГДА
	|		ТехнологическиеОперации.Ссылка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка)
	|	КОНЕЦ)                   КАК ПоследняяОперация
	|	
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
	|		ПО ЭтапыПроизводства.Ссылка = ТехнологическиеОперации.Владелец
	|			И НЕ ТехнологическиеОперации.ПометкаУдаления
	|			И (ТехнологическиеОперации.НомерОперации = 1
	|				ИЛИ ТехнологическиеОперации.НомерСледующейОперации = 0)
	|ГДЕ
	|	ЭтапыПроизводства.Владелец = &Владелец
	|	И НЕ ЭтапыПроизводства.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПроизводства.Ссылка");
	
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПервыеОперации.Вставить(Выборка.Этап, Выборка.ПерваяОперация);
		ПоследниеОперации.Вставить(Выборка.Этап, Выборка.ПоследняяОперация);
		
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТКА

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.РесурсныеСпецификации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.16.27";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("91978b90-bc3f-4e31-82fb-4aa28c051930");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.РесурсныеСпецификации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новый реквизит ""Вариант промежуточного выпуска"".';
									|en = 'Fills a new ""Intermediate release option"" attribute.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.РесурсныеСпецификации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.РесурсныеСпецификации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
КонецПроцедуры

// Регистрирует ссылки к обработке обновления.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.РесурсныеСпецификации";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РесурсныеСпецификации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|ГДЕ
		|	РесурсныеСпецификации.ВариантПромежуточногоВыпуска = ЗНАЧЕНИЕ(Перечисление.ВариантыПромежуточногоВыпуска.ПустаяСсылка)");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.РесурсныеСпецификации";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			Блокировка.Добавить(ПолноеИмяОбъекта).УстановитьЗначение("Ссылка", Строка.Ссылка);
			Блокировка.Заблокировать();
			
			СправочникОбъект = Строка.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Строка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если СправочникОбъект.ВариантПромежуточногоВыпуска.Пустая() Тогда
				СправочникОбъект.ВариантПромежуточногоВыпуска = Перечисления.ВариантыПромежуточногоВыпуска.НеИспользуется;
			КонецЕсли;
			
			Если СправочникОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СправочникОбъект);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Строка.Ссылка);
		КонецПопытки;
		
	КонецЦикла;

	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
