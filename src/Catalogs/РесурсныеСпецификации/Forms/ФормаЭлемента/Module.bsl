
&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.НачалоДействия = ТекущаяДатаСеанса();
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НачатьОбновлениеИнформационнойПанели();
	
	НачатьОжиданиеЗаполненияПроизводственногоПроцесса();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьПроизводственныйПроцесс(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//++ НЕ УТКА
	ЗаписатьПараметрыНазначенияСпецификации(ТекущийОбъект);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СтатусЗаписанногоОбъекта = ТекущийОбъект.Статус;
	
	Если ЭтоТехнологическийНабор(ЭтотОбъект) Тогда
		ПроизводственныйПроцессОчистить();
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьЭлементыФормы();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_РесурсныеСпецификации");
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СтатусЗаписанногоОбъекта = ТекущийОбъект.Статус;
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора <> Неопределено 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВводДолиСтоимости" Тогда
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		ОбработкаВводаДолиСтоимости(ТекущийЭлемент, ТекущиеДанные, ВыбранноеЗначение);
		
//++ НЕ УТКА
	ИначеЕсли ИсточникВыбора <> Неопределено 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаАвтовыбораНоменклатуры" Тогда
		
		ОбработкаВыбораНастройкаАвтовыбораНоменклатуры(ИсточникВыбора.ИмяТЧ, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора <> Неопределено 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаОтбораПоСвойствамИРасчетаПоФормулам" Тогда
		
		ОбработкаВыбораНастройкаОтбораПоСвойствамИРасчетаПоФормулам(ИсточникВыбора.ИмяТЧ, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора <> Неопределено
		И (ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ФормаВыбораСпособаПолученияМатериала") Тогда
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		ОбработкаВыбораСпособаПолученияМатериала(ТекущиеДанные, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора <> Неопределено
		И (ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ФормаНастройкиПримененияМатериала") Тогда
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		ОбработкаВыбораНастройкиПримененияМатериала(ТекущиеДанные, ВыбранноеЗначение);
		
//-- НЕ УТКА
	ИначеЕсли ИсточникВыбора <> Неопределено
		И (ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ФормаВыбораЭлементаПроизводственногоПроцесса") Тогда
		
		Модифицированность = Истина;
		ОбработкаВыбораЭлементаПроизводственногоПроцесса(ИсточникВыбора.ИмяТЧ, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_РесурсныеСпецификации" Тогда
		
		НачатьОбновлениеИнформационнойПанели();
		
	ИначеЕсли ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьРеквизитов);
		
	ИначеЕсли ИмяСобытия = "Запись_СтруктураПредприятия" Тогда
		
		ОбновитьПараметрыПроизводственногоПодразделения(Источник);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеПроизводственногоПроцесса(Отказ);
	
	//++ НЕ УТКА
	ПроверитьЗаполнениеПараметровНазначенияСпецификации(Отказ);
	//-- НЕ УТКА
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		
	Если РежимПроверкиЗаполненияВСтатусеДействует Тогда
		ТекущийОбъект.Статус = Перечисления.СтатусыСпецификаций.Действует;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДополнительныеСвойства = ТекущийОбъект.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ИнтерактивнаяПроверкаПройдена");
	ДополнительныеСвойства.Вставить("ОписаниеПроизводственногоПроцесса", ОписаниеПроизводственногоПроцесса());
	ДополнительныеСвойства.Вставить("ЭтоТехнологическийНабор", ЭтоТехнологическийНабор(ЭтотОбъект));
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОсновноеИзделиеСпецификации

&НаКлиенте
Процедура ВариантНазначенияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ВариантНазначенияПриИзмененииНаСервере();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеИзделиеВидНоменклатурыПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ОсновноеИзделиеВидНоменклатурыПриИзмененииНаСервере();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеИзделиеНоменклатураПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ОсновноеИзделиеНоменклатураПриИзмененииНаСервере(КэшированныеЗначения);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеИзделиеХарактеристикаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ОсновноеИзделиеХарактеристикаПриИзмененииНаСервере();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеИзделиеКоличествоУпаковокПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ОсновноеИзделиеУпаковкаКоличествоУпаковокПриИзмененииНаСервере(КэшированныеЗначения);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеИзделиеУпаковкаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ОсновноеИзделиеУпаковкаКоличествоУпаковокПриИзмененииНаСервере(КэшированныеЗначения);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

//++ НЕ УТКА
&НаСервере
Процедура ВариантНазначенияПриИзмененииНаСервере();
	
	ПрочитатьДанныеОсновногоИзделияСпецификации();
	
	ПроверитьОчиститьРеквизитыПриИзмененииВариантаНазначения();
	
	ОбработатьИзменениеДанныхОсновногоИзделия(ЭтаФорма);
	
	УстановитьДоступностьЭлементовРедактированияИзделий();
	
	ОбновитьИнформациюПоОсновномуИзделиюСпецификации();
	
	Если Объект.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры Тогда
		ЗаполнитьСлужебныеРеквизитыВыходныеИзделия();
	КонецЕсли;
	
	РеквизитОписанияПартииВыпускаПриИзменении();
	
	ПроверитьОчиститьВариантПромежуточногоВыпуска(ЭтотОбъект);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ВариантНазначения,ВариантПромежуточногоВыпуска");
	
КонецПроцедуры

&НаСервере
Процедура ОсновноеИзделиеВидНоменклатурыПриИзмененииНаСервере()
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ОсновноеИзделиеВидНоменклатуры, "ТипНоменклатуры,ЕдиницаИзмерения");
	
	ОсновноеИзделиеТипНоменклатуры = ЗначенияРеквизитов.ТипНоменклатуры;
	Если НЕ ЗначениеЗаполнено(ОсновноеИзделиеУпаковка) Тогда
		ОсновноеИзделиеУпаковка = ЗначенияРеквизитов.ЕдиницаИзмерения;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыИспользованияСвойствХарактеристик();
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ОчиститьНастройкиУточненияПримененияСпецификации(Объект);
	
	ОбработатьИзменениеДанныхОсновногоИзделия(ЭтотОбъект);
	
	ОбновитьИнформациюПоОсновномуИзделиюСпецификации();
	
	РеквизитОписанияПартииВыпускаПриИзменении();
	
	ПроверитьОчиститьВариантПромежуточногоВыпуска(ЭтотОбъект);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОсновноеИзделие,ПроизводственныйПроцесс,ВариантПромежуточногоВыпуска");
	
КонецПроцедуры

&НаСервере
Процедура ОсновноеИзделиеНоменклатураПриИзмененииНаСервере(КэшированныеЗначения)
	
	СтруктураСтроки = ОсновноеИзделиеСпецификацииСтруктурой(ЭтотОбъект);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", СтруктураСтроки.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", СтруктураСтроки.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВидНоменклатуры", Новый Структура("Номенклатура", "ВидНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));

	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураСтроки, СтруктураДействий, КэшированныеЗначения);
	
	ОбработатьИзменениеДанныхОсновногоИзделия(ЭтотОбъект, СтруктураСтроки);
	
	ЗаполнитьСлужебныеРеквизитыИспользованияСвойствХарактеристик();
	 
	УправлениеДаннымиОбИзделияхКлиентСервер.ОчиститьНастройкиУточненияПримененияСпецификации(Объект, "Характеристика");
	
	ОбновитьИнформациюПоОсновномуИзделиюСпецификации();
	
	РеквизитОписанияПартииВыпускаПриИзменении();
	
	ПроверитьОчиститьВариантПромежуточногоВыпуска(ЭтотОбъект);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОсновноеИзделие,ПроизводственныйПроцесс,ВариантПромежуточногоВыпуска");
	
КонецПроцедуры

&НаСервере
Процедура ОсновноеИзделиеХарактеристикаПриИзмененииНаСервере()
	
	ОбработатьИзменениеДанныхОсновногоИзделия(ЭтотОбъект);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ОчиститьНастройкиУточненияПримененияСпецификации(Объект, "Характеристика");
	УстановитьНастройкиЭлементовУточненияПрименения(ЭтотОбъект, "Характеристика");
	
	РеквизитОписанияПартииВыпускаПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ОсновноеИзделиеУпаковкаКоличествоУпаковокПриИзмененииНаСервере(КэшированныеЗначения)
	
	СтруктураСтроки = ОсновноеИзделиеСпецификацииСтруктурой(ЭтотОбъект);
	
	РассчитатьКоличествоОсновногоИзделия(СтруктураСтроки, КэшированныеЗначения);
	
	ОбработатьИзменениеДанныхОсновногоИзделия(ЭтотОбъект, СтруктураСтроки);
	
	РеквизитОписанияПартииВыпускаПриИзменении();
	
КонецПроцедуры
//-- НЕ УТКА

&НаКлиенте
Процедура ОсновноеИзделиеУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	Если НЕ (Объект.ВариантНазначения = ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.ВидНоменклатуры")) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОсновноеИзделиеУпаковкаНачалоВыбораЗавершение",
		ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УпаковкаЕдиницаИзмерения", ОсновноеИзделиеУпаковка);
	
	ОткрытьФорму(
		"Справочник.РесурсныеСпецификации.Форма.ФормаВыбораУпаковкиНаВидНоменклатуры",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
		
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура ОсновноеИзделиеУпаковкаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОсновноеИзделиеУпаковка = Результат;
	
	ОсновноеИзделиеУпаковкаКоличествоУпаковокПриИзмененииНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура ОсновноеИзделиеУпаковкаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	Если НЕ (Объект.ВариантНазначения = ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.ВидНоменклатуры")) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновноеИзделиеУпаковкаАвтоПодборНаСервере(Текст, ДанныеВыбора);
	
	СтандартнаяОбработка = Ложь;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеИзделиеПроцентБракаПриИзменении(Элемент)
	
	ОбработатьИзменениеДанныхОсновногоИзделия(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СтруктураПроизводственногоПроцесса

&НаКлиенте
Процедура ОписаниеПартииВыпускаПриИзменении(Элемент)
	
	Если Объект.ВыпускПроизвольнымиПорциями <> ВыпускПроизвольнымиПорциямиДоИзменения Тогда
		
		СписокРеквизитов = Новый Массив;
		Если ТребуетсяОчиститьРеквизитыПриИзмененииОписанияПартииВыпуска(СписокРеквизитов) Тогда
			
			ТекстШаблона = НСтр("ru = 'При изменении кратности выпуска будут очищены реквизиты: %1
				|Продолжить?';
				|en = 'If the release multiplier is changed, attributes will be cleared: %1
				|Continue?'");
			ТекстВопроса = СтрШаблон(ТекстШаблона, СтрСоединить(СписокРеквизитов, ", "));
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьРеквизитыПриИзмененииОписанияПартииВыпуска", ЭтотОбъект);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
		ЗаполнитьОписаниеПартииВыпуска();
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ВыпускПроизвольнымиПорциями,МинимальнаяПартияВыпуска,ОптимальнаяПартияВыпуска");
		НастроитьЗависимыеЭлементыФормыЭтапа(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МинимальнаяПартияВыпускаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "МинимальнаяПартияВыпуска");
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальнаяПартияВыпускаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОптимальнаяПартияВыпуска");
	
КонецПроцедуры

&НаКлиенте
Процедура ОграниченСрокПролеживанияВыходныхИзделийПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "НастройкаМаксимальныйСрокПролеживания");
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьПромежуточныйВыпускПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Если ЕстьПромежуточныйВыпуск Тогда
		Если ИспользоватьКачествоТоваров Тогда
			Объект.ВариантПромежуточногоВыпуска = ПредопределенноеЗначение(
				"Перечисление.ВариантыПромежуточногоВыпуска.ТоварДругогоКачества");
		Иначе
			Объект.ВариантПромежуточногоВыпуска = ПредопределенноеЗначение(
				"Перечисление.ВариантыПромежуточногоВыпуска.НастраиваетсяВручную");
		КонецЕсли;
	Иначе
		Объект.ВариантПромежуточногоВыпуска = ПредопределенноеЗначение(
			"Перечисление.ВариантыПромежуточногоВыпуска.НеИспользуется");
	КонецЕсли;
	
	Модифицированность = Истина;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ВариантПромежуточногоВыпуска");
	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтотОбъект, "ВариантПромежуточногоВыпуска");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПромежуточногоВыпускаТоварДругогоКачестваПриИзменении(Элемент)
	
	//++ НЕ УТКА
	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтотОбъект, "ВариантПромежуточногоВыпуска");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПромежуточногоВыпускаНастраиваетсяВручнуюПриИзменении(Элемент)
	
	//++ НЕ УТКА
	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтотОбъект, "ВариантПромежуточногоВыпуска");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область ПараметрыНазначения

// Обработчик при изменении использования параметра назначения
// 
// Параметры:
// 	Элемент - ПолеФормы - элемент формы
&НаКлиенте
Процедура Подключаемый_ИспользованиеПараметраНазначенияПриИзменении(Элемент)
	
	Идентификатор = СтрЗаменить(Элемент.Имя, "_Использование", "");
	
	Параметр = ПараметрыНазначения.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор))[0];
	
	НастроитьЭлементыПараметраНазначения(ЭтотОбъект, Параметр);
	
	ОбновитьЗаголовокГруппыПараметровНазначения(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УсловиеПараметраНазначенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик при изменении условия параметра назначения
// 
// Параметры:
// 	Элемент - ПолеФормы - элемент формы
&НаКлиенте
Процедура Подключаемый_УсловиеПараметраНазначенияПриИзменении(Элемент)
	
	Идентификатор = СтрЗаменить(Элемент.Имя, "_Условие", "");
	
	Параметр = ПараметрыНазначения.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор))[0];
	
	Условие = УсловияПараметровНазначения[ЭтотОбъект[Элемент.Имя]];
	
	ПараметрТипЗначения = СкорректированныйТипПараметраНазначенияПоУсловию(Параметр.ТипЗначения, Условие);
	
	Если Условие.Список Тогда
		
		ЭтотОбъект[Параметр.РеквизитЗначение] = Новый СписокЗначений;
		ЭтотОбъект[Параметр.РеквизитЗначение].ТипЗначения = ПараметрТипЗначения;
		
	Иначе
		
		ЗначениеПараметра = ЭтотОбъект[Параметр.РеквизитЗначение];
		Если Условие.Интервал ИЛИ Условие.Заполненность Тогда
			ЗначениеПараметра = Неопределено;
		КонецЕсли;
		ЭтотОбъект[Параметр.РеквизитЗначение] = ПараметрТипЗначения.ПривестиЗначение(ЗначениеПараметра);
		
	КонецЕсли;
	
	Если Параметр.ДоступенИнтервал Тогда
		ЭтотОбъект[Параметр.РеквизитЗначение+"1"] = ПараметрТипЗначения.ПривестиЗначение(Неопределено);
		ЭтотОбъект[Параметр.РеквизитЗначение+"2"] = ПараметрТипЗначения.ПривестиЗначение(Неопределено);
	КонецЕсли;
	
	ОбновитьОбязательностьЗаполненияПараметраНазначения(Параметр, Условие, ПараметрТипЗначения);
	
	НастроитьЭлементыПараметраНазначения(ЭтотОбъект, Параметр);
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик при изменении значения параметра назначения
// 
// Параметры:
// 	Элемент - ПолеФормы - элемент формы
&НаКлиенте
Процедура Подключаемый_ЗначениеПараметраНазначенияПриИзменении(Элемент)
	
	Идентификатор = Сред(Элемент.Имя, 1, СтрНайти(Элемент.Имя, "_Значение")-1);
	
	Параметр = ПараметрыНазначения.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор))[0];
	
	Условие = УсловияПараметровНазначения[ЭтотОбъект[Параметр.РеквизитУсловие]];
	
	Если Условие.Интервал Тогда
		ПараметрТипЗначения = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЭтотОбъект[Элемент.Имя])));
		Для Индекс = 1 По 2 Цикл
			ЭтотОбъект[Параметр.РеквизитЗначение+Индекс] = ПараметрТипЗначения.ПривестиЗначение(ЭтотОбъект[Параметр.РеквизитЗначение+Индекс]);
		КонецЦикла;
	КонецЕсли;
	
	НастроитьЭлементыПараметраНазначения(ЭтотОбъект, Параметр);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область Прочее

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзменении(Элемент)
	
	ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяСтрокаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВытесняющиеСпецификацииИзделия" Тогда
		
		ОткрытьФормуВытесняющихСпецификаций();
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьИнформационнуюПанельНажатие(Элемент)
	
	Элементы.ИнформационнаяПанельСтраницы.ТекущаяСтраница = Элементы.ИнформационнаяПанельСтраницаСкрыть;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНадписьОсновноеИзделиеНажатие(Элемент)
	
	СвернутаГруппаОсновноеИзделие = НЕ СвернутаГруппаОсновноеИзделие;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ГруппаОсновноеИзделие,
		Элементы.ГиперссылкаНадписьОсновноеИзделие,
		СвернутаГруппаОсновноеИзделие);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНадписьПараметрыПроизводственногоПроцессаНажатие(Элемент)
	
	СвернутаГруппаПараметрыПроизводственногоПроцесса = НЕ СвернутаГруппаПараметрыПроизводственногоПроцесса;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ГруппаПараметрыПроизводственногоПроцесса,
		Элементы.ГиперссылкаНадписьПараметрыПроизводственногоПроцесса,
		СвернутаГруппаПараметрыПроизводственногоПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНадписьПараметрыНазначенияНажатие(Элемент)
	
	СвернутаГруппаПараметрыНазначения = НЕ СвернутаГруппаПараметрыНазначения;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ГруппаПараметрыНазначения,
		Элементы.ГиперссылкаНадписьПараметрыНазначения,
		СвернутаГруппаПараметрыНазначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьАвтоматическийВыборВДокументахПриИзменении(Элемент)
	
	Объект.ВариантПодбораВДокументы = ?(ИсключитьАвтоматическийВыборВДокументах,
		ПредопределенноеЗначение("Перечисление.ВариантыПодбораСпецификацииВДокументы.Вручную"),
		ПредопределенноеЗначение("Перечисление.ВариантыПодбораСпецификацииВДокументы.Автоматически"));
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("Продукция", Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриАктивизацииСтроки(Элемент)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	УстановитьДоступностьКомандПараметризацииСтрокиПродукции(ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиАвтовыбораНоменклатуры(
		Элементы.Продукция,
		Элементы.Продукция.ВыделенныеСтроки,
		Объект.СоответствиеСвойств);
		
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
		Элементы.Продукция,
		Элементы.Продукция.ВыделенныеСтроки,
		Объект.ОтборПоСвойствам);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТЧ = Элемент.Имя;
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы[ИмяТЧ], ЭтотОбъект);
	
	Если НоваяСтрока Тогда
		
		ПриВводеНовойСтрокиСпецификации(ЭтотОбъект, ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные, Копирование);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент)
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
	ОбновитьДанныеОсновногоИзделияСпецификацииПриСборке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ПроверитьОчиститьНастройкиПараметризацииПродукции();
	
	УстановитьДоступностьКомандПараметризацииСтрокиПродукции(ТекущиеДанные);
	
	//-- НЕ УТКА
	
	ОбновитьДанныеОсновногоИзделияСпецификацииПриСборке(ЭтотОбъект);
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элемент, ПараметрыРаспределенияЗатрат, РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Продукция, ЭтотОбъект)) Тогда
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
	КонецЕсли;
	
	//++ НЕ УТКА
	ПроверитьОчиститьВариантПромежуточногоВыпуска(ЭтотОбъект);
	//-- НЕ УТКА
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОсновноеИзделие,ВариантПромежуточногоВыпуска");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущаяСтрока;
	
	ПродукцияНоменклатураПриИзмененииНаСервере(ТекущаяСтрока, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияНоменклатураПриИзмененииНаСервере(ТекущаяСтрока, КэшированныеЗначения)
	
	ТекущиеДанные = Объект.ВыходныеИзделия.НайтиПоИдентификатору(ТекущаяСтрока);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииНоменклатурыВСтрокеСАвтовыбором(
		ТекущиеДанные,
		Объект);
		
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(
		ТекущиеДанные,
		Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВидНоменклатуры", Новый Структура("Номенклатура", "ВидНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ИмяФормы, "ВыходныеИзделия"));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"ВыходныеИзделия",
		ТекущиеДанные.Номенклатура,
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтотОбъект);
		
	РеквизитОписанияПартииВыпускаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущаяСтрока;
	
	ПродукцияХарактеристикаПриИзмененииНаСервере(ТекущаяСтрока, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияХарактеристикаПриИзмененииНаСервере(ТекущаяСтрока, КэшированныеЗначения)
	
	ТекущиеДанные = Объект.ВыходныеИзделия.НайтиПоИдентификатору(ТекущаяСтрока);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущиеДанные, Объект);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	РеквизитОписанияПартииВыпускаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущаяСтрока;
	
	ПродукцияУпаковкаКоличествоУпаковокПриИзмененииНаСервере(ТекущаяСтрока, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущаяСтрока;
	
	ПродукцияУпаковкаКоличествоУпаковокПриИзмененииНаСервере(ТекущаяСтрока, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияУпаковкаКоличествоУпаковокПриИзмененииНаСервере(ТекущаяСтрока, КэшированныеЗначения)
	
	ТекущиеДанные = Объект.ВыходныеИзделия.НайтиПоИдентификатору(ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	РеквизитОписанияПартииВыпускаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияТребуетсяУказыватьСерииПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущаяСтрока;
	ПродукцияТребуетсяУказыватьСерииПриИзмененииНаСервере(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияТребуетсяУказыватьСерииПриИзмененииНаСервере(Идентификатор)

	ТекущиеДанные = Объект.ВыходныеИзделия.НайтиПоИдентификатору(Идентификатор);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"ВыходныеИзделия",
		ТекущиеДанные.Номенклатура,
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("Продукция", "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("Продукция", "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЭлементПроизводственногоПроцессаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораЭлементаПроизводственногоПроцесса("Продукция", Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЭлементПроизводственногоПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаВыбораЭлементаПроизводственногоПроцесса("Продукция", ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЭлементПроизводственногоПроцессаОчистка(Элемент, СтандартнаяОбработка)
	
	ПроизводственныйПроцессОчиститьВыбранныйЭлемент(ЭтотОбъект, Элементы.Продукция.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЭлементПроизводственногоПроцессаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроизводственныйПроцессОткрытьФормуЭлемента(Элементы.Продукция.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЭлементПроизводственногоПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяТЧ = "Продукция";
	ПроизводственныйПроцессОткрытьФормуВыбораЭлемента(ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЭлементПроизводственногоПроцессаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИмяТЧ = "Продукция";
	ОбработкаВыбораЭлементаПроизводственногоПроцессаПоПредставлению(ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("ВыходныеИзделия", Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТЧ = Элемент.Имя;
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы[ИмяТЧ], ЭтотОбъект);
	
	Если НоваяСтрока Тогда
		
		ПриВводеНовойСтрокиСпецификации(ЭтотОбъект, ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные, Копирование);
		
		РассчитатьКоличествоВыходныеПобочныеИзделия(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВидНоменклатуры", Новый Структура("Номенклатура", "ВидНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ИмяФормы, "ВыходныеИзделия"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииНоменклатурыВСтрокеВыходныхИзделий(ТекущиеДанные);
	
	//++ НЕ УТКА
	Если Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка") Тогда
		УправлениеДаннымиОбИзделияхКлиентСервер.ОчиститьНастройкиУточненияПримененияСпецификации(Объект);
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиАвтовыбораНоменклатуры(
		Элементы.ВыходныеИзделия,
		Элементы.ВыходныеИзделия.ВыделенныеСтроки,
		Объект.СоответствиеСвойств);
		
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
		Элементы.ВыходныеИзделия,
		Элементы.ВыходныеИзделия.ВыделенныеСтроки,
		Объект.ОтборПоСвойствам);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущиеДанные, Объект);
	
	//++ НЕ УТКА
	Если Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка") Тогда
		УправлениеДаннымиОбИзделияхКлиентСервер.ОчиститьНастройкиУточненияПримененияСпецификации(Объект, "Характеристика");
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элемент, ПараметрыРаспределенияЗатрат, РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.ВыходныеИзделия, ЭтотОбъект), НоваяСтрока) Тогда
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	
	РассчитатьКоличествоВыходныеПобочныеИзделия(ЭтаФорма);
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЭлементПроизводственногоПроцессаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораЭлементаПроизводственногоПроцесса("ВыходныеИзделия", Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЭлементПроизводственногоПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаВыбораЭлементаПроизводственногоПроцесса("ВыходныеИзделия", ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЭлементПроизводственногоПроцессаОчистка(Элемент, СтандартнаяОбработка)
	
	ПроизводственныйПроцессОчиститьВыбранныйЭлемент(ЭтотОбъект, Элементы.ВыходныеИзделия.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЭлементПроизводственногоПроцессаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПроизводственныйПроцессОткрытьФормуЭлемента(Элементы.ВыходныеИзделия.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЭлементПроизводственногоПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяТЧ = "ВыходныеИзделия";
	ПроизводственныйПроцессОткрытьФормуВыбораЭлемента(ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЭлементПроизводственногоПроцессаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИмяТЧ = "ВыходныеИзделия";
	ОбработкаВыбораЭлементаПроизводственногоПроцессаПоПредставлению(ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("ВозвратныеОтходы", Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииНоменклатурыВСтрокеВыходныхИзделий(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущаяСтрока, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиАвтовыбораНоменклатуры(
		Элементы.ВозвратныеОтходы,
		Элементы.ВозвратныеОтходы.ВыделенныеСтроки,
		Объект.СоответствиеСвойств);
		
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
		Элементы.ВозвратныеОтходы,
		Элементы.ВозвратныеОтходы.ВыделенныеСтроки,
		Объект.ОтборПоСвойствам);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ПриВводеНовойСтрокиСпецификации(ЭтотОбъект, Элемент.Имя, Элементы[Элемент.Имя].ТекущиеДанные, Копирование);
		
		РассчитатьКоличествоВыходныеПобочныеИзделия(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПослеУдаления(Элемент)
	
	РассчитатьКоличествоВыходныеПобочныеИзделия(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходы_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходы_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЭлементПроизводственногоПроцессаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораЭлементаПроизводственногоПроцесса("ВозвратныеОтходы", Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЭлементПроизводственногоПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаВыбораЭлементаПроизводственногоПроцесса("ВозвратныеОтходы", ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЭлементПроизводственногоПроцессаОчистка(Элемент, СтандартнаяОбработка)
	
	ПроизводственныйПроцессОчиститьВыбранныйЭлемент(ЭтотОбъект, Элементы.ВозвратныеОтходы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЭлементПроизводственногоПроцессаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяТЧ = "ВозвратныеОтходы";
	ПроизводственныйПроцессОткрытьФормуЭлемента(Элементы[ИмяТЧ].ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЭлементПроизводственногоПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяТЧ = "ВозвратныеОтходы";
	ПроизводственныйПроцессОткрытьФормуВыбораЭлемента(ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЭлементПроизводственногоПроцессаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИмяТЧ = "ВозвратныеОтходы";
	ОбработкаВыбораЭлементаПроизводственногоПроцессаПоПредставлению(ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИУслуги

&НаКлиенте
Процедура МатериалыИУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "МатериалыИУслугиСпособПолученияМатериалаРедактирование" Тогда
		
		ДанныеСтроки = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если (ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации")
				И ЗначениеЗаполнено(ДанныеСтроки.ИсточникПолученияПолуфабриката)
			ИЛИ ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе")
				И ЗначениеЗаполнено(ДанныеСтроки.СпецификацияРемонта)
			)Тогда
			Поле.КнопкаОткрытия = Истина;
		Иначе
			
			Поле.КнопкаОткрытия = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	ОбработатьВыборПоляВТаблице("МатериалыИУслуги", Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиАвтовыбораНоменклатуры(
				Элементы.МатериалыИУслуги,
				Элементы.МатериалыИУслуги.ВыделенныеСтроки,
				Объект.СоответствиеСвойств);
				
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
				Элементы.МатериалыИУслуги,
				Элементы.МатериалыИУслуги.ВыделенныеСтроки,
				Объект.ОтборПоСвойствам);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ПриВводеНовойСтрокиСпецификации(ЭтотОбъект, Элемент.Имя, Элементы[Элемент.Имя].ТекущиеДанные, Копирование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ИмяФормы, "МатериалыИУслуги"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииНоменклатурыВСтрокеМатериалов(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущаяСтрока, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСпособПолученияМатериалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораСпособаПолученияМатериала(ТекущиеДанные);
//-- НЕ УТКА

	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиТребуетсяУказыватьСерииПриИзменении(Элемент)
	
	МатериалыИУслугиТребуетсяУказыватьСерииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура МатериалыИУслугиТребуетсяУказыватьСерииПриИзмененииНаСервере()

	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущаяСтрока;
	ТекущиеДанные = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"МатериалыИУслуги", 
		ТекущиеДанные.Номенклатура, 
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСпособПолученияМатериалаРедактированиеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьСпособПолученияМатериалаПоУмолчанию(ТекущиеДанные);
//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСпособПолученияМатериалаРедактированиеОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	Если ТекущиеДанные.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации")
			И ЗначениеЗаполнено(ТекущиеДанные.ИсточникПолученияПолуфабриката) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ИсточникПолученияПолуфабриката);
	ИначеЕсли ТекущиеДанные.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе")
			И ЗначениеЗаполнено(ТекущиеДанные.СпецификацияРемонта) Тогда
		ПоказатьЗначение(, ТекущиеДанные.СпецификацияРемонта);
	КонецЕсли;
//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПрименениеМатериалаРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуНастройкиПримененияМатериала(ТекущиеДанные);
//-- НЕ УТКА

	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПрименениеМатериалаРедактированиеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные.ПрименениеМатериала = "";
	
	ТекущиеДанные.Вероятность = 0;
	ТекущиеДанные.Альтернативный = Ложь;
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьИнформациюПоПрименениюМатериала(ТекущиеДанные);
//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиЭлементПроизводственногоПроцессаПриИзменении(Элемент)
	
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить(Элементы.МатериалыИУслуги.ТекущаяСтрока);
	ОбработатьИзменениеЭтапаМатериалыИУслуги(Идентификаторы);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиЭлементПроизводственногоПроцессаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораЭлементаПроизводственногоПроцесса("МатериалыИУслуги", Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиЭлементПроизводственногоПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаВыбораЭлементаПроизводственногоПроцесса("МатериалыИУслуги", ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиЭлементПроизводственногоПроцессаОчистка(Элемент, СтандартнаяОбработка)
	
	ПроизводственныйПроцессОчиститьВыбранныйЭлемент(ЭтотОбъект, Элементы.МатериалыИУслуги.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиЭлементПроизводственногоПроцессаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроизводственныйПроцессОткрытьФормуЭлемента(Элементы.МатериалыИУслуги.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиЭлементПроизводственногоПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяТЧ = "МатериалыИУслуги";
	ПроизводственныйПроцессОткрытьФормуВыбораЭлемента(ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиЭлементПроизводственногоПроцессаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИмяТЧ = "МатериалыИУслуги";
	ОбработкаВыбораЭлементаПроизводственногоПроцессаПоПредставлению(ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПроизвестиПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные.Произвести Тогда
		ТекущиеДанные.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации");
	Иначе
		ТекущиеДанные.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать");
		ТекущиеДанные.ИсточникПолученияПолуфабриката = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
	КонецЕсли;
	
	ТекущиеДанные.ПроизводитсяВПроцессе = УправлениеДаннымиОбИзделияхКлиентСервер.ПолуфабрикатПроизводимыйВПроцессе(ТекущиеДанные);
	ПроверитьЗаполнитьСтатьюКалькуляцииПоУмолчанию(ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("Трудозатраты", Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
		Элементы.Трудозатраты,
		Элементы.Трудозатраты.ВыделенныеСтроки,
		Объект.ОтборПоСвойствам);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ПриВводеНовойСтрокиСпецификации(ЭтотОбъект, Элемент.Имя, Элементы[Элемент.Имя].ТекущиеДанные, Копирование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЭлементПроизводственногоПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяТЧ = "Трудозатраты";
	ПроизводственныйПроцессОткрытьФормуВыбораЭлемента(ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЭлементПроизводственногоПроцессаОчистка(Элемент, СтандартнаяОбработка)
	
	ПроизводственныйПроцессОчиститьВыбранныйЭлемент(ЭтотОбъект, Элементы.Трудозатраты.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЭлементПроизводственногоПроцессаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроизводственныйПроцессОткрытьФормуЭлемента(Элементы.Трудозатраты.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЭлементПроизводственногоПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаВыбораЭлементаПроизводственногоПроцесса("Трудозатраты", ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЭлементПроизводственногоПроцессаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораЭлементаПроизводственногоПроцесса("Трудозатраты", Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЭлементПроизводственногоПроцессаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИмяТЧ = "Трудозатраты";
	ОбработкаВыбораЭлементаПроизводственногоПроцессаПоПредставлению(ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПроизводственныйПроцесс

&НаКлиенте
Процедура ПроизводственныйПроцессПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ПроизводственныйПроцесс.ТекущиеДанные = Неопределено Тогда
		Элементы.ПроизводственныйПроцессСвойстваСтраницы.ТекущаяСтраница = Элементы.ПроизводственныйПроцессПустая;
		Возврат;
	КонецЕсли;
	
	Если ПроизводственныйПроцессАктивизацияЭлемента
		ИЛИ Элементы.ПроизводственныйПроцесс.ТекущиеДанные.Ссылка = ПроизводственныйПроцессТекущаяСсылка Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроизводственныйПроцессПриАктивизацииЭлемента", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
	Если СтатусЗаписанногоОбъекта = СтатусДействующейСпецификации Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПроизводственныйПроцесс.ТекущиеДанные;
	
	Если Копирование Тогда
		ПроизводственныйПроцессНачатьКопированиеЭлемента(ТекущиеДанные);
	ИначеЕсли ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ВидЭлемента = "Этап" Тогда
		ПроизводственныйПроцессНачатьДобавлениеЭтапа();
	//++ НЕ УТКА
	ИначеЕсли ТекущиеДанные.ВидЭлемента = "Операция" Тогда
		ПроизводственныйПроцессНачатьДобавлениеОперации();
	//-- НЕ УТКА
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если СтатусЗаписанногоОбъекта = СтатусДействующейСпецификации Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ПроизводственныйПроцесс.ВыделенныеСтроки;
	
	Если ПроверитьВозможностьУдаленияЭлементовПроизводственногоПроцесса(ВыделенныеСтроки) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторыСтрок", ВыделенныеСтроки);
		
		Если ВыделенныеСтроки.Количество() = 1 Тогда
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Удалить ""%1""?';
											|en = 'Delete ""%1""?'"), Элементы.ПроизводственныйПроцесс.ТекущиеДанные.Наименование);
		Иначе
			ТекстВопроса = НСтр("ru = 'Удалить выделенные элементы?';
								|en = 'Delete the selected items?'");
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПроизводственныйПроцессПередУдалениемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессСвернуть(Команда)
	
	ПроизводственныйПроцессСвертка(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессРазвернуть(Команда)
	
	ПроизводственныйПроцессСвертка(Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессПереместитьВверх(Команда)
	
	ПроизводственныйПроцессПереместитьЭлемент(Элементы.ПроизводственныйПроцесс.ТекущиеДанные, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессПереместитьВниз(Команда)
	
	ПроизводственныйПроцессПереместитьЭлемент(Элементы.ПроизводственныйПроцесс.ТекущиеДанные, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессДобавитьЭтап(Команда)
	
	ПроизводственныйПроцессНачатьДобавлениеЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессДобавитьОперацию(Команда)
	
	//++ НЕ УТКА
	ПроизводственныйПроцессНачатьДобавлениеОперации();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессДобавитьГруппуОпераций(Команда)
	
	//++ НЕ УТКА
	ВыбратьТехнологическийПроцесс("Шаблон");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессДобавитьТиповой(Команда)
	
	//++ НЕ УТКА
	ВыбратьТехнологическийПроцесс("Типовой");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессСвойстваСвернуть(Команда)
	
	ПроизводственныйПроцессСвойстваСвертка(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессСвойстваРазвернуть(Команда)
	
	ПроизводственныйПроцессСвойстваСвертка(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессДополнительныеСведения(Команда)
	
	ПроизводственныйПроцессРедактироватьДопСведения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессВыделитьВТехнологическийПроцесс(Команда)
	
	//++ НЕ УТКА
	ВыделенныеСтроки = Элементы.ПроизводственныйПроцесс.ВыделенныеСтроки;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	
	Если ПроверитьВозможностьВыделитьВТехнологическийПроцесс(ВыделенныеСтроки, ДополнительныеПараметры) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыделитьВТехнологическийПроцессЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
		ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаВыделитьВТехнологическийПроцесс",
			ПараметрыФормыВыделитьВТехнологическийПроцесс(ВыделенныеСтроки),
			ЭтотОбъект,,,, Оповещение);
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессЗаполнитьПодразделение(Команда)
	
	Если СтатусЗаписанногоОбъекта = СтатусДействующейСпецификации Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ПроизводственныйПроцесс.ВыделенныеСтроки;
	
	Если ПроверитьВозможностьЗаполненияПодразделенияЭтапов(ВыделенныеСтроки) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ПроизводственноеПодразделение", Истина);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаполнитьПодразделениеЭтаповЗавершение", ЭтотОбъект, ВыделенныеСтроки);
		
		ОткрытьФорму(
			"Справочник.СтруктураПредприятия.Форма.ФормаВыбора",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПромежуточныйВыпуск

&НаКлиенте
Процедура ПромежуточныйВыпускПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//++ НЕ УТКА
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ПромежуточныйВыпуск.ТекущиеДанные;
		ТекущиеДанные.ЭтапОтправитель = ПроизводственныйПроцессТекущаяСсылка;
		ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор;
		ПромежуточныйВыпускКоличествоСтрок = ПромежуточныйВыпускКоличествоСтрок + 1;
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныйВыпускПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ПромежуточныйВыпуск.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ЭтапПолучатель <> ТекущиеДанные.ЭтапРедактирование Тогда
		ТекущиеДанные.ЭтапПолучатель = ТекущиеДанные.ЭтапРедактирование;
	КонецЕсли;
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ПромежуточныйВыпускКоличествоСтрок = ПромежуточныйВыпускКоличествоСтрок - 1;
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныйВыпускПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	ПромежуточныйВыпускКоличествоСтрок = ПромежуточныйВыпускКоличествоСтрок - 1;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныйВыпускВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	Если НЕ ТолькоПросмотр И ДоступностьРеквизитов Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПромежуточныйВыпуск.ТекущиеДанные;
	
	Если (Поле.Имя = "ПромежуточныйВыпускНоменклатураАртикул"
			Или Поле.Имя = "ПромежуточныйВыпускНоменклатура")
		И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		
	ИначеЕсли Поле.Имя = "ПромежуточныйВыпускХарактеристика"
		И ЗначениеЗаполнено(ТекущиеДанные.Характеристика)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Характеристика);
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныйВыпускЭлементПроизводственногоПроцессаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	Если НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораЭлементаПроизводственногоПроцесса("ПромежуточныйВыпуск", Текст);
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныйВыпускЭлементПроизводственногоПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	ОбработкаВыбораЭлементаПроизводственногоПроцесса("ПромежуточныйВыпуск", ВыбранноеЗначение);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныйВыпускЭлементПроизводственногоПроцессаОчистка(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	ПроизводственныйПроцессОчиститьВыбранныйЭлемент(ЭтотОбъект, Элементы.ПромежуточныйВыпуск.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныйВыпускЭлементПроизводственногоПроцессаОткрытие(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	ПроизводственныйПроцессОткрытьФормуЭлемента(Элементы.ПромежуточныйВыпуск.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныйВыпускЭлементПроизводственногоПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	
	ИмяТЧ = "ПромежуточныйВыпуск";
	ПроизводственныйПроцессОткрытьФормуВыбораЭлемента(ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныйВыпускЭлементПроизводственногоПроцессаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	ИмяТЧ = "ПромежуточныйВыпуск";
	ОбработкаВыбораЭлементаПроизводственногоПроцессаПоПредставлению(
		ИмяТЧ, Элементы[ИмяТЧ].ТекущиеДанные, Текст, СтандартнаяОбработка);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныйВыпускНоменклатураПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ПромежуточныйВыпуск.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЭтапа

&НаКлиенте
Процедура ЭтапНаименованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПроизводственныйПроцесс.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗначенияРеквизитовОбъектаВДереве(ЭтотОбъект, ТекущиеДанные, "Наименование");
	
	ПроизводственныйПроцессОбновитьПредставления("Этап", ТекущиеДанные.Ссылка, ТекущиеДанные.Наименование, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПодразделениеПриИзменении(Элемент)
	
	ЭтапПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапНомерЭтапаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПроизводственныйПроцесс.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗначенияРеквизитовОбъектаВДереве(ЭтотОбъект, ТекущиеДанные, "Номер");
	
	ПроизводственныйПроцессСкорректироватьПозициюСтроки(ЭтотОбъект, ТекущиеДанные);
	
	ОбработатьИзменениеПроизводственногоПроцесса(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапНомерСледующегоЭтапаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПроизводственныйПроцесс.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗначенияРеквизитовОбъектаВДереве(ЭтотОбъект, ТекущиеДанные, "НомерСледующего");
	
	ОбработатьИзменениеПроизводственногоПроцесса(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапСпособПроизводстваПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ПроизводственныйПроцесс.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 // есть операции
		И Булево(ЭтапСпособПроизводства) Тогда
			
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Для этапов, выполняющихся силами переработчика, использование операций недоступно.
								|Существующие операции будут удалены. Продолжить?';
								|en = 'Using operations for stages performed by the subcontractor is not available.
								|Existing operations will be deleted. Continue?'"));
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЭтапСпособПроизводстваПриИзмененииЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
	КонецЕсли;
	//-- НЕ УТКА
	
	ЭтапСпособПроизводстваПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПланироватьРаботуВидовРабочихЦентровПриИзменении(Элемент)
	
	//++ НЕ УТКА
	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтотОбъект, "ПланироватьРаботуВидовРабочихЦентров");
	
	РассчитатьДлительностьЭтапа();
	
	РедакторПроизводственногоПроцессаКлиентСервер.ЗаполнитьПояснениеОсновныхНастроек(ПроизводственныйПроцессЭтап, ЭтотОбъект, "Этап");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПорядокРаботыВидовРабочихЦентровПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	РедакторПроизводственногоПроцессаКлиент.ПорядокРаботыВидовРабочихЦентровПриИзменении(
		ЭтапВидыРабочихЦентров,
		ПроизводственныйПроцессЭтап.ПорядокРаботыВидовРабочихЦентров,
		ЭтапЕстьСинхроннаяЗагрузка,
		Истина);
	
	РассчитатьДлительностьЭтапа();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапЕдиницаИзмеренияДлительностиЭтапаПриИзменении(Элемент)
	
	Если ПроизводственныйПроцессЭтап.ЕдиницаИзмеренияДлительностиЭтапа.Пустая() Тогда
		ПроизводственныйПроцессЭтап.ЕдиницаИзмеренияДлительностиЭтапа = ЭтапОсновнаяЕдиницаВремениДлительностиЭтапаУББВ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПредварительныйБуферПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтотОбъект);
	
	РассчитатьДлительностьЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапЕдиницаИзмеренияПредварительногоБуфераПриИзменении(Элемент)
	
	Если ПроизводственныйПроцессЭтап.ЕдиницаИзмеренияПредварительногоБуфера.Пустая() Тогда
		
		ПроизводственныйПроцессЭтап.ЕдиницаИзмеренияПредварительногоБуфера = ЭтапОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли;
	
	РассчитатьДлительностьЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапЗавершающийБуферПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтотОбъект);
	
	РассчитатьДлительностьЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапЕдиницаИзмеренияЗавершающегоБуфераПриИзменении(Элемент)
	
	Если ПроизводственныйПроцессЭтап.ЕдиницаИзмеренияЗавершающегоБуфера.Пустая() Тогда
		
		ПроизводственныйПроцессЭтап.ЕдиницаИзмеренияЗавершающегоБуфера = ЭтапОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли;
	
	РассчитатьДлительностьЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапУслугиПереработчикаПриИзменении(Элемент)
	
	// Очистим старые настройки
	Если ЗначениеЗаполнено(ПроизводственныйПроцессЭтап.УдалитьУслугаПереработчика) Тогда
		Объект.УдалитьУслугаПереработчика               = Неопределено;
		Объект.УдалитьХарактеристикаУслугиПереработчика = Неопределено;
		Объект.УдалитьСтатьяКалькуляции                 = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапУслугиПереработчикаНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапУслугиПереработчика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапМаршрутнаяКартаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	МаршрутнаяКартаПриИзмененииНаСервере();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапРассчитатьКоэффициентМаршрутнойКарты(Команда)
	
	//++ НЕ УТКА
	ПроизводственныйПроцессЭтап.КоэффициентМаршрутнойКарты =
		КоэффициентМаршрутнойКарты(ПроизводственныйПроцессЭтап.МаршрутнаяКарта);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапРазбиватьМаршрутныеЛистыПриИзменении(Элемент)
	
	РедакторПроизводственногоПроцессаКлиент.УстановитьМаксимальноеКоличествоЕдиницПартийИзделия(
		ЭтапРазбиватьМаршрутныеЛисты, ЭтапМаксимальноеКоличествоЕдиницПартийИзделия);
	
	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтотОбъект, "РазбиватьМаршрутныеЛисты");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапДополнительныеРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроизводственныйПроцессРедактироватьДопРеквизиты();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыРабочихЦентров

&НаКлиенте
Процедура ЭтапВидыРабочихЦентровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ЭтапВидыРабочихЦентров.ТекущиеДанные;
	
	РедакторПроизводственногоПроцессаКлиент.ВидыРабочихЦентровПередНачаломДобавления(
		ТекущиеДанные,
		ЭтапВидыРабочихЦентров,
		Элементы.ЭтапВидыРабочихЦентров,
		ПроизводственныйПроцессЭтап.ПорядокРаботыВидовРабочихЦентров,
		ЭтапЕстьСинхроннаяЗагрузка,
		Отказ,
		ИспользуетсяПроизводство22);
	
	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтотОбъект, "ВидыРабочихЦентров");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВидыРабочихЦентровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//++ НЕ УТКА
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ЭтапВидыРабочихЦентров.ТекущиеДанные;
		ТекущиеДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");
		Если НЕ ТекущиеДанные.Альтернативный Тогда
			ТекущиеДанные.Использовать = Истина;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВидыРабочихЦентровПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//++ НЕ УТКА
	Если НЕ ОтменаРедактирования Тогда
		РассчитатьДлительностьЭтапа();
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВидыРабочихЦентровПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	РедакторПроизводственногоПроцессаКлиент.ВидыРабочихЦентровОчиститьНастройкиОтбораПоСвойствам(
		Элементы.ЭтапВидыРабочихЦентров, ПроизводственныйПроцессЭтап.ОтборПоСвойствам);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВидыРабочихЦентровПослеУдаления(Элемент)
	
	//++ НЕ УТКА
	
	КоллекцияОсновныхВидовРЦ = ЭтапВидыРабочихЦентров.ПолучитьЭлементы();
	
	РедакторПроизводственногоПроцессаКлиент.ВидыРабочихЦентровУстановитьИспользование(КоллекцияОсновныхВидовРЦ);
	
	ПриИзмененииСоставаВидовРабочихЦентров();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВидыРабочихЦентровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	Если НЕ ТолькоПросмотр И ДоступностьРеквизитов Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЭтапВидыРабочихЦентров.ТекущиеДанные;
	
	Если (Поле.Имя = "ЭтапВидыРабочихЦентровВидРабочегоЦентра")
		И ЗначениеЗаполнено(ТекущиеДанные.ВидРабочегоЦентра)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВидРабочегоЦентра);
		
	ИначеЕсли (Поле.Имя = "ЭтапВидыРабочихЦентровВариантНаладки")
		И ЗначениеЗаполнено(ТекущиеДанные.ВариантНаладки)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВариантНаладки);
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВидыРабочихЦентровИспользоватьПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ЭтапВидыРабочихЦентров.ТекущиеДанные;
	
	РедакторПроизводственногоПроцессаКлиент.ВидыРабочихЦентровИспользоватьПриИзменении(ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВидыРабочихЦентровВидРабочегоЦентраПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ЭтапВидыРабочихЦентровВидРабочегоЦентраПриИзмененииНаСервере();
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ЭтапВидыРабочихЦентров.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВидыРабочихЦентровВариантНаладкиПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ЭтапВидыРабочихЦентровВариантНаладкиПриИзмененииНаСервере();
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ЭтапВидыРабочихЦентров.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВидыРабочихЦентровВремяРаботыПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ЭтапВидыРабочихЦентров.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВидыРабочихЦентровЕдиницаИзмеренияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ЭтапВидыРабочихЦентров.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапДобавитьАльтернативныйВидРЦ(Команда)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ЭтапВидыРабочихЦентров.ТекущиеДанные;
	
	РедакторПроизводственногоПроцессаКлиент.ДобавитьАльтернативныйВидРЦ(
				ТекущиеДанные, 
				ЭтапВидыРабочихЦентров, 
				Элементы.ЭтапВидыРабочихЦентров,
				ПроизводственныйПроцессЭтап.ПорядокРаботыВидовРабочихЦентров,
				ЭтапЕстьСинхроннаяЗагрузка,
				ИспользуетсяПроизводство22);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапНастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ЭтапВидыРабочихЦентров.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Виды рабочих центров"".';
								|en = 'No line of the ""Work center types"" table is selected.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ВидыРабочихЦентров");
		
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "ЭтапВидыРабочихЦентров");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапЗаполнитьВидыРабочихЦентров(Команда)
	
	//++ НЕ УТКА
	Если ХранитьОперацииВРесурсныхСпецификациях Тогда
		ЭтапЗаполнитьВидыРабочихЦентровПоОперациямНаСервере();
	Иначе
		ЭтапЗаполнитьВидыРабочихЦентровПоМаршрутнойКартеНаСервере();
	КонецЕсли;
	
	ПриИзмененииСоставаВидовРабочихЦентров();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовОперации

&НаКлиенте
Процедура ОперацияНаименованиеПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ПроизводственныйПроцесс.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗначенияРеквизитовОбъектаВДереве(ЭтотОбъект, ТекущиеДанные, "Наименование");
	
	ПроизводственныйПроцессОбновитьПредставления("Операция", ТекущиеДанные.Ссылка, ТекущиеДанные.Наименование, ЭтотОбъект);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияНомерОперацииПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ПроизводственныйПроцесс.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗначенияРеквизитовОбъектаВДереве(ЭтотОбъект, ТекущиеДанные, "Номер");
	
	ПроизводственныйПроцессСкорректироватьПозициюСтроки(ЭтотОбъект, ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияНомерСледующейОперацииПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ПроизводственныйПроцесс.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗначенияРеквизитовОбъектаВДереве(ЭтотОбъект, ТекущиеДанные, "НомерСледующего");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияРабочийЦентрПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ПроизводственныйПроцесс.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗначенияРеквизитовОбъектаВДереве(ЭтотОбъект, ТекущиеДанные, "РабочийЦентр");
	
	ОперацияРабочийЦентрПриИзмененииНаСервере();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

//++ НЕ УТКА
&НаСервере
Процедура ОперацияРабочийЦентрПриИзмененииНаСервере()
	
	РедакторПроизводственногоПроцесса.РабочийЦентрПриИзменении(ПроизводственныйПроцессОперация, ЭтотОбъект, "Операция");
	
КонецПроцедуры
//-- НЕ УТКА

&НаКлиенте
Процедура ОперацияУчастокПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ОперацияУчастокПриИзмененииНаСервере();
	
	Элементы.ПроизводственныйПроцесс.ТекущиеДанные.РабочийЦентр = ПроизводственныйПроцессОперация.РабочийЦентр;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

//++ НЕ УТКА
&НаСервере
Процедура ОперацияУчастокПриИзмененииНаСервере()
	
	РедакторПроизводственногоПроцесса.УчастокПриИзменении(ПроизводственныйПроцессОперация, ЭтотОбъект, "Операция"); 
	
КонецПроцедуры
//-- НЕ УТКА

&НаКлиенте
Процедура ОперацияВариантНаладкиПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ОперацияВариантНаладкиПриИзмененииНаСервере();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

//++ НЕ УТКА
&НаСервере
Процедура ОперацияВариантНаладкиПриИзмененииНаСервере()
	
	РедакторПроизводственногоПроцесса.ВариантНаладкиПриИзменении(ПроизводственныйПроцессОперация, ЭтотОбъект, "Операция");
	
КонецПроцедуры
//-- НЕ УТКА

&НаКлиенте
Процедура ОперацияВариантНаладкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	Если ЗначениеЗаполнено(ПроизводственныйПроцессОперация.РабочийЦентр) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		РедакторПроизводственногоПроцессаКлиент.ОткрытьФормуВыбораВариантаНаладки(
			ПроизводственныйПроцессОперация.РабочийЦентр,
			ПроизводственныйПроцессОперация.ВариантНаладки,
			Элемент);
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияВидОперацииПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ОперацияВидОперацииПриИзмененииНаСервере();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

//++ НЕ УТКА
&НаСервере
Процедура ОперацияВидОперацииПриИзмененииНаСервере()
	
	РедакторПроизводственногоПроцесса.ВидОперацииПриИзменении(ПроизводственныйПроцессОперация, ЭтотОбъект, "Операция");
	
	НастроитьЗависимыеЭлементыФормыОперации(ЭтотОбъект, "ВидОперации");
	
КонецПроцедуры
//-- НЕ УТКА

&НаКлиенте
Процедура ОперацияКоличествоПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Элементы.ОперацияЕдиницаИзмерения.ПодсказкаВвода = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
		ПроизводственныйПроцессОперация.ЕдиницаИзмерения, ПроизводственныйПроцессОперация.Количество);
	РедакторПроизводственногоПроцессаКлиентСервер.ЗаполнитьЕдиницуИзмеренияПередаточнойПартии(
		ПроизводственныйПроцессОперация, ОперацияЕдиницаИзмеренияПередаточнойПартии);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияЕдиницаИзмеренияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	РедакторПроизводственногоПроцессаКлиентСервер.ЗаполнитьЕдиницуИзмеренияПередаточнойПартии(
		ПроизводственныйПроцессОперация, ОперацияЕдиницаИзмеренияПередаточнойПартии);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПередаточнаяПартияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	РедакторПроизводственногоПроцессаКлиентСервер.ЗаполнитьЕдиницуИзмеренияПередаточнойПартии(
		ПроизводственныйПроцессОперация, ОперацияЕдиницаИзмеренияПередаточнойПартии);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияРассчитатьКоэффициентТехнологическогоПроцесса(Команда)
	
	//++ НЕ УТКА
	ПроизводственныйПроцессОперация.КоэффициентТехнологическогоПроцесса =
		КоэффициентТехнологическогоПроцесса(ПроизводственныйПроцессОперация.ТехнологическийПроцесс);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияДополнительныеРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//++ НЕ УТКА
	ПроизводственныйПроцессРедактироватьДопРеквизиты();
	//-- НЕ УТКА
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыДопРеквизиты

&НаКлиенте
Процедура ОперацияДопРеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	Если Поле.Имя = "ОперацияДопРеквизитыЗаголовок" Тогда
		
		СтандартнаяОбработка = Ложь;
	
		ПоказатьЗначение(, Элементы.ОперацияДопРеквизиты.ТекущиеДанные.Свойство);
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияДопРеквизитыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//++ НЕ УТКА
	РедакторПроизводственногоПроцессаКлиент.ДопРеквизитыУстановитьФорматРедактированияНормативов(ЭтотОбъект, "Операция");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияДопРеквизитыЗначениеМинПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.ОперацияДопРеквизиты.ТекущиеДанные;
	
	РедакторПроизводственногоПроцессаКлиент.ДопРеквизитыЗначениеНормативаПриИзменении(ТекущиеДанные, "ЗначениеМин");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияДопРеквизитыЗначениеМаксПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.ОперацияДопРеквизиты.ТекущиеДанные;
	
	РедакторПроизводственногоПроцессаКлиент.ДопРеквизитыЗначениеНормативаПриИзменении(ТекущиеДанные, "ЗначениеМакс");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#Область Основное

&НаКлиенте
Процедура ФормаЗаписать(Команда)
	
	ЗаписатьСпецификацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаписатьИЗакрыть(Команда)
	
	Если ЗаписатьСпецификацию() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаСкопировать(Команда)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Будет создана и записана копия ресурсной спецификации.';
								|en = 'A BOM copy will be created and saved.'"));
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		МассивСтрок.Добавить(НСтр("ru = 'Перед выполнением операции, текущая спецификация будет записана.';
									|en = 'Before executing the operation, the current BOM will be saved.'"));
	КонецЕсли;
	МассивСтрок.Добавить(НСтр("ru = 'Скопировать?';
								|en = 'Do you want to copy?'"));
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ФормаСкопироватьЗавершение", ЭтотОбъект),
		СтрСоединить(МассивСтрок, " "),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСпецификацииИзделия(Команда)
	
	//++ НЕ УТКА
	Номенклатура = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФормуПрименениеНоменклатурыВПроизводстве(Номенклатура);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоМаршрутнымКартамЭтапов(Команда)
	
	//++ НЕ УТКА
	
	ТекстВопроса = НСтр("ru = 'Заполнить спецификацию по маршрутным картам этапов?';
						|en = 'Fill in BOM using the route sheets for stages?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоМаршрутнымКартамЭтаповЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусВРазработке(Команда)
	
	Если НЕ ДоступностьРеквизитов Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикУстановитьСтатусВРазработке", ЭтотОбъект);
		ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.РазблокированиеРеквизитов", 
								Новый Структура("Объект", Объект.Ссылка),,,,,
								ОписаниеОповещения,
								РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусДействует(Команда)
	
	УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусЗакрыта(Команда)
	
	УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Закрыта"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьЗаполнение(Команда)
	
	ОчиститьСообщения();
	
	ТекстЗаголовка = НСтр("ru = 'Проверка спецификации';
							|en = 'Check bill of materials'");
	
	Если Объект.ПометкаУдаления Тогда
		ТекстПредупреждения = НСтр("ru = 'Помеченная на удаление спецификация не может быть действующей.';
									|en = 'The bill of materials marked for deletion cannot be valid.'");
		ПоказатьПредупреждение(,ТекстПредупреждения,, ТекстЗаголовка);
		Возврат;
	КонецЕсли;
	
	Если КомандаПроверитьЗаполнениеВСтатусеДействует() Тогда
		ТекстПредупреждения = НСтр("ru = 'Спецификацию можно сделать действующей.';
									|en = 'Bill of materials can be made valid.'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Спецификация не может быть действующей.
										|Необходимо заполнить указанные реквизиты.';
										|en = 'Bill of materials cannot be valid. 
										|Fill in the specified attributes.'");
	КонецЕсли;
	
	ПоказатьПредупреждение(,ТекстПредупреждения,, ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПериодДействия(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала = Объект.НачалоДействия;
	Диалог.Период.ДатаОкончания = Объект.КонецДействия;
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьПериодДействияЗавершение", 
		ЭтотОбъект,
		Новый Структура());
	
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

// Оповещение при изменении периода действия
// 
// Параметры:
// 	Период - СтандартныйПериод - новый период
// 	Контекст - Структура - прочие параметры оповещения
&НаКлиенте
Процедура УстановитьПериодДействияЗавершение(Период, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(Период) <> Тип("СтандартныйПериод") Тогда
		Возврат;
	КонецЕсли;
	Объект.НачалоДействия = Период.ДатаНачала;
	Объект.КонецДействия = Период.ДатаОкончания;
	
	Модифицированность = Истина;
	ЗаполнитьПредставлениеСтатусаСпецификации();
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_НастроитьПодборНоменклатуры(Команда)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Продукция"".';
								|en = 'Line of the ""Manufactured products"" table is not selected.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ВыходныеИзделия", "Объект");
		
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОсновноеИзделиеСпецификации = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если ОсновноеИзделиеСпецификации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСвойств = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.СоответствиеСвойств,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаСоответствияСвойств());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатуры(
							ЭтотОбъект,
							"Продукция",
							СоответствиеСвойств, 
							ОсновноеИзделиеСпецификации,
							НСтр("ru = 'Указывается в спецификации';
								|en = 'Specified in specification'"),
							НЕ ДоступностьРеквизитов);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Продукция"".';
								|en = 'Line of the ""Manufactured products"" table is not selected.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Продукция", "Объект");
		
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "Продукция");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеПримененияНоменклатура(Команда)
	
	//++ НЕ УТКА
	ОткрытьНастройкуУточненияПримененияСпецификации("Номенклатура");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеПримененияХарактеристика(Команда)
	
	//++ НЕ УТКА
	ОткрытьНастройкуУточненияПримененияСпецификации("Характеристика");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделия_НастроитьПодборНоменклатуры(Команда)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Выходные изделия"".';
								|en = 'Line of the ""Finished products"" table is not selected.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ВыходныеИзделия", "Объект");
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнениеОсновногоИзделия() Тогда
		Возврат;
	КонецЕсли;
	
	ОсновноеИзделиеСпецификации = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если ОсновноеИзделиеСпецификации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСвойств = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.СоответствиеСвойств,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаСоответствияСвойств());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатуры(
							ЭтотОбъект,
							"ВыходныеИзделия",
							СоответствиеСвойств, 
							ОсновноеИзделиеСпецификации,
							НСтр("ru = 'Указывается в спецификации';
								|en = 'Specified in specification'"),
							НЕ ДоступностьРеквизитов);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Выходные изделия"".';
								|en = 'Line of the ""Finished products"" table is not selected.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ВыходныеИзделия", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "ВыходныеИзделия");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ЗаполнитьЭтап(Команда)
	
	ЗаполнитьЭтапВСтроках("ВыходныеИзделия");
	
КонецПроцедуры

#КонецОбласти

#Область ВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходы_НастроитьПодборНоменклатуры(Команда)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не выбрана строка таблицы ""%1"".';
				|en = 'The ""%1"" table row is not selected.'"),
			ПредставлениеТабличнойЧастиВозвратныеОтходы(ЭтотОбъект));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ВозвратныеОтходы", "Объект");
		Возврат;
	КонецЕсли;
	
	ОсновноеИзделиеСпецификации = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если ОсновноеИзделиеСпецификации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСвойств = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.СоответствиеСвойств,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаСоответствияСвойств());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатуры(
							ЭтотОбъект,
							"ВозвратныеОтходы",
							СоответствиеСвойств, 
							ОсновноеИзделиеСпецификации,
							НСтр("ru = 'Указывается в спецификации';
								|en = 'Specified in specification'"),
							НЕ ДоступностьРеквизитов);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходы_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не выбрана строка таблицы ""%1"".';
				|en = 'The ""%1"" table row is not selected.'"),
			ПредставлениеТабличнойЧастиВозвратныеОтходы(ЭтотОбъект));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ВозвратныеОтходы", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "ВозвратныеОтходы");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходы_ЗаполнитьЭтап(Команда)
	
	ЗаполнитьЭтапВСтроках("ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходы_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляцииВСтроках("ВозвратныеОтходы");
	
КонецПроцедуры

#КонецОбласти

#Область МатериалыИУслуги

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.МатериалыИУслуги;
	ДанныеТаблицы = Объект.МатериалыИУслуги;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	Если НоваяСтрока <> Неопределено Тогда
		
		ИмяТЧ = "МатериалыИУслуги";
		
		ПриВводеНовойСтрокиСпецификации(ЭтотОбъект, ИмяТЧ, НоваяСтрока, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРазрешениеНаЗамену(Команда)
	
	//++ НЕ УТКА
	
	ОсновноеИзделиеСпецификации = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если ОсновноеИзделиеСпецификации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.МатериалыИУслуги.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	Материалы = Новый Массив;
	
	ТипыНоменклатуры = Новый Массив;
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	
	Для каждого ЭлКоллекции из Элементы.МатериалыИУслуги.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.МатериалыИУслуги.ДанныеСтроки(ЭлКоллекции);
		
		Если ДанныеСтроки.СпособАвтовыбораХарактеристики <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ")
			ИЛИ ДанныеСтроки.СпособАвтовыбораНоменклатуры <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ") Тогда
			
			Отказ = Истина;
			Прервать;
			
		КонецЕсли;
		
		Если ТипыНоменклатуры.Найти(ДанныеСтроки.ТипНоменклатуры) = Неопределено Тогда
			
			Отказ = Истина;
			Прервать;
			
		КонецЕсли;
		
		СтруктураМатериала = Новый Структура;
		
		СтруктураМатериала.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
		СтруктураМатериала.Вставить("Характеристика", ДанныеСтроки.Характеристика);
		СтруктураМатериала.Вставить("КоличествоУпаковок", ДанныеСтроки.КоличествоУпаковок);
		СтруктураМатериала.Вставить("Упаковка", ДанныеСтроки.Упаковка);
		
		Материалы.Добавить(СтруктураМатериала);
		
	КонецЦикла;
	
	Если Отказ Тогда
		
		ТекстСообщения = НСтр("ru = 'Выбранные строки должны удовлетворять следующим условиям:
		|	- не используется автовыбор номенклатуры или характеристики;
		|	- тип номенклатуры: товар, тара или работа;';
		|en = 'Selected lines must meet the following conditions:
		|	- auto selection of the item or variant is not used;
		|	- item type: goods, reusable packaging, or work.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		
		Возврат;
		
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Спецификация", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("Материалы", Материалы);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.РазрешениеНаЗаменуМатериалов.ФормаОбъекта", ПараметрыФормы, , Истина);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_НастроитьПодборНоменклатуры(Команда)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Материалы и работы"".';
								|en = 'Row of the ""Materials and works"" table is not selected.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		Возврат;
	КонецЕсли;
	
	ОсновноеИзделиеСпецификации = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если ОсновноеИзделиеСпецификации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСвойств = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.СоответствиеСвойств,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаСоответствияСвойств());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатуры(
							ЭтотОбъект,
							"МатериалыИУслуги",
							СоответствиеСвойств, 
							ОсновноеИзделиеСпецификации,
							НСтр("ru = 'Указывается в спецификации';
								|en = 'Specified in specification'"),
							НЕ ДоступностьРеквизитов);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Материалы и работы"".';
								|en = 'Row of the ""Materials and works"" table is not selected.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "МатериалыИУслуги");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПодборМатериалов(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам",                      Истина);
	 
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", УправлениеДаннымиОбИзделияхКлиентСервер.МассивДоступныхТиповНоменклатуры(ЭтотОбъект, "МатериалыИУслуги"));
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);

	ОткрытьФорму("Обработка.ПодборТоваровВДокументЗакупки.Форма",
			ПараметрыФормы,
			Элементы.МатериалыИУслуги,
			УникальныйИдентификатор,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("МатериалыИУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("МатериалыИУслуги");

КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_ЗаполнитьЭтап(Команда)
	
	ЗаполнитьЭтапВСтроках("МатериалыИУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляцииВСтроках("МатериалыИУслуги");
	
КонецПроцедуры

#КонецОбласти

#Область Трудозатраты

&НаКлиенте
Процедура Трудозатраты_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Трудозатраты"".';
								|en = 'Line of the ""Labor costs"" table is not selected.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Трудозатраты", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "Трудозатраты");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ЗаполнитьЭтап(Команда)
	
	ЗаполнитьЭтапВСтроках("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляцииВСтроках("Трудозатраты");
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеМеханизмы

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура МатериалыИУслугиЗагрузитьИзФайла(Команда)
	
	ЗагрузитьИзФайла("МатериалыИУслуги", НСтр("ru = 'Материалы и услуги';
												|en = 'Materials and services'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЗагрузитьИзФайла(Команда)
	
	ЗагрузитьИзФайла("Трудозатраты", НСтр("ru = 'Трудозатраты';
											|en = 'Labor costs'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЗагрузитьИзФайла(Команда)
	
	ЗагрузитьИзФайла("ВозвратныеОтходы", ПредставлениеТабличнойЧастиВозвратныеОтходы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(ИмяТЧ, СинонимТЧ)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТЧ",                              ИмяТЧ);
	ДополнительныеПараметры.Вставить("СинонимТЧ",                          СинонимТЧ);
	ДополнительныеПараметры.Вставить("РесурснаяСпецификация",              Объект.Ссылка);
	ДополнительныеПараметры.Вставить("ИспользуютсяЭтапы",                  Объект.МногоэтапныйПроизводственныйПроцесс);
	//++ НЕ УТКА
	ДополнительныеПараметры.Вставить("ИспользуютсяОперации",               ХранитьОперацииВРесурсныхСпецификациях);
	//-- НЕ УТКА
	ДополнительныеПараметры.Вставить("АдресЭлементовПроизводственногоПроцесса", ТаблицаЭлементовПроизводственногоПроцессаВХранилище());
	
	МассивТиповНоменклатуры = УправлениеДаннымиОбИзделияхКлиентСервер.МассивДоступныхТиповНоменклатуры(ЭтотОбъект, ИмяТЧ);
	ДоступныеТипыНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	
	ДополнительныеПараметры.Вставить("ДоступныеТипыНоменклатуры", ДоступныеТипыНоменклатуры);
	
	Если Не Объект[ИмяТЧ].Количество() = 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Таблица %1 будет перезаполнена. Продолжить?';
							|en = 'The table %1 will be refilled. Continue?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, СинонимТЧ);
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПоказатьФормуЗагрузкиИзФайла(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьФормуЗагрузкиИзФайла(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УниверсальныеМеханизмы

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаКлиенте
Процедура СкопироватьСтрокиТЧ(Знач ИмяТЧ, Знач ПутьКДанным = "")

	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы[ИмяТЧ]) Тогда
		СкопироватьСтрокиНаСервере(ИмяТЧ, ПутьКДанным);
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы[ИмяТЧ].ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(Знач ИмяТЧ, Знач ПутьКДанным = "")
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки);
	Иначе
		РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект[ПутьКДанным], Элементы[ИмяТЧ].ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтрокиИзБуфераОбмена(Знач ИмяТЧ, Знач ПутьКДанным = "")
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		Приемник = Объект[ИмяТЧ];
	Иначе
		Приемник = Объект[ПутьКДанным]
	КонецЕсли;
	
	КоличествоСтрокДоВставки = Приемник.Количество();
	
	ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ, ПутьКДанным);
	
	КоличествоВставленных = Приемник.Количество() - КоличествоСтрокДоВставки;
	
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ, ПутьКДанным = "")
	
	СоставСтрок     = Неопределено;
	ПараметрыОтбора = Неопределено;
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		Приемник = Объект[ИмяТЧ]; // ТабличнаяЧасть
	Иначе
		Приемник = Объект[ПутьКДанным];
	КонецЕсли;
	
	Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "ВыходныеИзделия" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "МатериалыИУслуги" ИЛИ ИмяТЧ = "ВозвратныеОтходы" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,СтатьяКалькуляции";
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		СоставСтрок = "ВидРабот,Количество,СтатьяКалькуляции";
	КонецЕсли;
	
	ПодборТоваров = ИмяТЧ <> "Трудозатраты";
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Если ПодборТоваров Тогда
		
		МассивТиповНоменклатуры = УправлениеДаннымиОбИзделияхКлиентСервер.МассивДоступныхТиповНоменклатуры(ЭтотОбъект, ИмяТЧ);
		ПараметрыОтбора = Новый Соответствие;
		ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры", МассивТиповНоменклатуры);
		
		Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "ВыходныеИзделия" Тогда
			СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
			СтруктураДействий.Вставить("ЗаполнитьПризнакВидНоменклатуры", Новый Структура("Номенклатура", "ВидНоменклатуры"));
		КонецЕсли;
		
		Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "МатериалыИУслуги" Тогда
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		
	КонецЕсли;
	
	СтрокиИзБуфера = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, СоставСтрок);
	
	Если Не ЗначениеЗаполнено(СтрокиИзБуфера) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаИзБуфера Из СтрокиИзБуфера Цикл
		
		НоваяСтрока = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзБуфера);
		
		ПриВводеНовойСтрокиСпецификации(ЭтотОбъект, ИмяТЧ, НоваяСтрока);
		
		Если ПодборТоваров Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяТЧ = "Продукция" Тогда
		ОбновитьДанныеОсновногоИзделияСпецификацииПриСборке(ЭтотОбъект);
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, РеквизитыДоступны)
	
	Форма.Элементы.Продукция_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюПродукция_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
	Форма.Элементы.ВыходныеИзделия_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюВыходныеИзделия_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
	Форма.Элементы.ВозвратныеОтходы_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюВозвратныеОтходы_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
	Форма.Элементы.МатериалыИУслуги_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюМатериалыИУслуги_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
	Форма.Элементы.Трудозатраты_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюТрудозатраты_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводственныйПроцесс

&НаСервере
Процедура ПриИзмененииСтруктурыПроизводственногоПроцесса()
	
	Если Не Объект.МногоэтапныйПроизводственныйПроцесс Тогда
		Для каждого Строка Из Объект.МатериалыИУслуги Цикл
			Если Строка.ПроизводитсяВПроцессе Тогда
				Если Строка.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе")
					ИЛИ ЗначениеЗаполнено(Строка.ПланироватьНеРанее) Тогда
					УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьСпособПолученияМатериалаПоУмолчанию(Строка);
					ЗаполнитьПризнакОбособленноВСтрокеМатериалов(Строка);
					ЗаполнитьСтатьюКалькуляцииПоУмолчанию(Строка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяОчиститьРеквизитыПриИзмененииОписанияПартииВыпуска(СписокРеквизитов)
	
	Если НЕ Объект.ВыпускПроизвольнымиПорциями Тогда
		
		Если Объект.МинимальнаяПартияВыпуска <> 0 Тогда
			СписокРеквизитов.Добавить(НСтр("ru = '""Минимальный выпуск""';
											|en = '""Minimum release""'"));
		КонецЕсли;
		
		Если Объект.ОптимальнаяПартияВыпуска <> 0 Тогда
			СписокРеквизитов.Добавить(НСтр("ru = '""Оптимальный выпуск""';
											|en = '""Optimal release""'"));
		КонецЕсли;
		
		Если Объект.ДопустимоеПревышениеОптимальнойПартииВыпуска <> 0 Тогда
			СписокРеквизитов.Добавить(НСтр("ru = '""Допустимое превышение оптимальной партии выпуска""';
											|en = '""Permissible excess of the economic release lot""'"));
		КонецЕсли;
		
		//++ НЕ УТКА
		Если ТребуетсяОчиститьРеквизитОдновременноПроизводимоеКоличество(Объект.Ссылка) Тогда
			СписокРеквизитов.Добавить(НСтр("ru = '""Одновременно производимое количество""';
											|en = '""Simultaneously manufactured quantity""'"));
		КонецЕсли;
		//-- НЕ УТКА
		
	КонецЕсли;
	
	Возврат СписокРеквизитов.Количество() > 0;
	
КонецФункции

//++ НЕ УТКА
&НаСервереБезКонтекста
Функция ТребуетсяОчиститьРеквизитОдновременноПроизводимоеКоличество(Спецификация)
	
	Если Спецификация.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокЭтапов = Справочники.ЭтапыПроизводства.СписокЭтаповДляКоторыхЗаданоОдновременноПроизводимоеКоличество(Спецификация);
	Возврат СписокЭтапов.Количество() > 0;
	
КонецФункции
//-- НЕ УТКА

&НаКлиенте
Процедура ОчиститьРеквизитыПриИзмененииОписанияПартииВыпуска(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Объект.ВыпускПроизвольнымиПорциями = ВыпускПроизвольнымиПорциямиДоИзменения;
		Возврат;
	КонецЕсли;
	ОчиститьРеквизитыПриИзмененииОписанияПартииВыпускаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРеквизитыПриИзмененииОписанияПартииВыпускаНаСервере()
	
	//++ НЕ УТКА
	ИмяПроцедуры = "Справочники.ЭтапыПроизводства.ОчиститьРеквизитОдновременноПроизводимоеКоличество";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, Объект.Ссылка, ПараметрыВыполнения);
	//-- НЕ УТКА
	
	Если Объект.МинимальнаяПартияВыпуска <> 0 Тогда
		Объект.МинимальнаяПартияВыпуска = 0;
	КонецЕсли;
	
	Если Объект.ОптимальнаяПартияВыпуска <> 0 Тогда
		Объект.ОптимальнаяПартияВыпуска = 0;
	КонецЕсли;
	
	Если Объект.ДопустимоеПревышениеОптимальнойПартииВыпуска <> 0 Тогда
		Объект.ДопустимоеПревышениеОптимальнойПартииВыпуска = 0;
	КонецЕсли;
	
	ЗаполнитьОписаниеПартииВыпуска();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ВыпускПроизвольнымиПорциями,МинимальнаяПартияВыпуска,ОптимальнаяПартияВыпуска");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПроизводственногоПроцесса()
	
	// Технологический процесс
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроизводственныйПроцесс.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроизводственныйПроцесс.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	
	//++ НЕ УТКА
	
	// Номер операции
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроизводственныйПроцессНомер.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроизводственныйПроцессНомерСледующего.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроизводственныйПроцесс.ВидЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Операция";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
	
	// Рабочий центр
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроизводственныйПроцессРабочийЦентр.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроизводственныйПроцесс.ВидЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Операция";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	
	// Виды рабочих центров
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтотОбъект, "", "ЭтапВидыРабочихЦентров", "ВремяРаботы");
	РедакторПроизводственногоПроцесса.УстановитьУсловноеОформлениеВидыРабочихЦентров(
		ЭтотОбъект, "ЭтапВидыРабочихЦентров");
	РедакторПроизводственногоПроцесса.УстановитьУсловноеОформлениеРеквизитовПриСинхроннойЗагрузке(
		ЭтотОбъект, "ЭтапВидыРабочихЦентров", "ПроизводственныйПроцессЭтап", "Этап");
		
	//-- НЕ УТКА
	
	// Переработка
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
		"ЭтапУслугиПереработчикаХарактеристика",
		"ПроизводственныйПроцессЭтап.УслугиПереработчика.ХарактеристикиИспользуются");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПроизводственногоПроцесса()
	
	ДоступныОперации = (УправлениеПредприятием И ХранитьОперацииВРесурсныхСпецификациях);
	
	Элементы.ПроизводственныйПроцессДобавить.Видимость                      = НЕ ДоступныОперации;
	Элементы.ПроизводственныйПроцессКонтекстноеМенюДобавить.Видимость       = НЕ ДоступныОперации;
	Элементы.ПроизводственныйПроцессГруппаДобавить.Видимость                = ДоступныОперации;
	Элементы.ПроизводственныйПроцессКонтекстноеМенюГруппаДобавить.Видимость = ДоступныОперации;
	//++ НЕ УТКА
	Если ДоступныОперации Тогда
		Элементы.ПроизводственныйПроцессНаименование.Заголовок          = НСтр("ru = 'Этап / Операция';
																				|en = 'Stage / Operation'");
		Элементы.ПроизводственныйПроцессГруппаПодразделениеРЦ.Заголовок = НСтр("ru = 'Подразделение / Рабочий центр';
																				|en = 'Business unit / Work center'");
		Для каждого КлючИЗначение Из НазванияЭлементовРедактирования() Цикл
			Элементы[КлючИЗначение.Значение].Заголовок = НСтр("ru = 'Этап / Операция';
																|en = 'Stage / Operation'");
		КонецЦикла;
		Для каждого КлючИЗначение Из НазванияКомандВыбораЭлементаПроизводственногоПроцесса() Цикл
			Элементы[КлючИЗначение.Значение].Заголовок = НСтр("ru = 'Этап / Операцию';
																|en = 'Stage / Operation'");
		КонецЦикла;
	КонецЕсли;
	//-- НЕ УТКА
	
	ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	
	Для каждого ВидЭлемента Из РедакторПроизводственногоПроцессаКлиентСервер.ВидыЭлементов() Цикл
		СвойстваЭлементов = ОписаниеСвойствЭлементов.Получить(ВидЭлемента);
		Для каждого ДопРеквизитыЭлемент Из СвойстваЭлементов["ДополнительныеРеквизитыЭлементы"] Цикл
			Элементы[ДопРеквизитыЭлемент].Видимость = ПроизводственныйПроцессКэш[СвойстваЭлементов["ИспользоватьДопРеквизиты"]];
		КонецЦикла;
	КонецЦикла;
	
	Элементы.ПроизводственныйПроцессДополнительныеСведения.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	ИспользоватьТехнологическиеПроцессы = Ложь;
	//++ НЕ УТКА
	ИспользоватьТехнологическиеПроцессы = ПолучитьФункциональнуюОпцию("ИспользоватьТехнологическиеПроцессы");
	//-- НЕ УТКА
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПроизводственныйПроцессДобавитьГруппуОпераций");
	МассивЭлементов.Добавить("ПроизводственныйПроцессКонтекстноеМенюДобавитьГруппуОпераций");
	МассивЭлементов.Добавить("ПроизводственныйПроцессДобавитьТиповой");
	МассивЭлементов.Добавить("ПроизводственныйПроцессКонтекстноеМенюДобавитьТиповой");
	МассивЭлементов.Добавить("ПроизводственныйПроцессВыделитьВТехнологическийПроцесс");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "Видимость", ИспользоватьТехнологическиеПроцессы);
	
	УстановитьДоступностьЭлементовПроизводственногоПроцесса();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПроизводственногоПроцесса()
	
	ДоступностьРеквизитовПП = ДоступностьРеквизитов И ПроизводственныйПроцессПрочитан;
	
	Элементы.ПроизводственныйПроцесс.ИзменятьСоставСтрок = ДоступностьРеквизитовПП;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПроизводственныйПроцессДобавитьЭтап");
	МассивЭлементов.Добавить("ПроизводственныйПроцессКонтекстноеМенюДобавитьЭтап");
	МассивЭлементов.Добавить("ПроизводственныйПроцессДобавитьОперацию");
	МассивЭлементов.Добавить("ПроизводственныйПроцессКонтекстноеМенюДобавитьОперацию");
	МассивЭлементов.Добавить("ПроизводственныйПроцессДобавитьГруппуОпераций");
	МассивЭлементов.Добавить("ПроизводственныйПроцессКонтекстноеМенюДобавитьГруппуОпераций");
	МассивЭлементов.Добавить("ПроизводственныйПроцессДобавитьТиповой");
	МассивЭлементов.Добавить("ПроизводственныйПроцессКонтекстноеМенюДобавитьТиповой");
	МассивЭлементов.Добавить("ПроизводственныйПроцессПереместитьВверх");
	МассивЭлементов.Добавить("ПроизводственныйПроцессПереместитьВниз");
	МассивЭлементов.Добавить("ПроизводственныйПроцессВыделитьВТехнологическийПроцесс");
	МассивЭлементов.Добавить("ПроизводственныйПроцессЗаполнитьПодразделение");
	МассивЭлементов.Добавить("ВыходныеИзделия_ЗаполнитьЭтап");
	МассивЭлементов.Добавить("ВозвратныеОтходы_ЗаполнитьЭтап");
	МассивЭлементов.Добавить("МатериалыИУслуги_ЗаполнитьЭтап");
	МассивЭлементов.Добавить("Трудозатраты_ЗаполнитьЭтап");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "Доступность", ДоступностьРеквизитовПП);
	
КонецПроцедуры

&НаСервере
Процедура НачатьЗаполнениеПроизводственногоПроцесса()
	
	ПроизводственныйПроцессИнициализироватьКэш();
	
	ПроизводственныйПроцессДерево = РеквизитФормыВЗначение("ПроизводственныйПроцесс"); // ДеревоЗначений
	ПроизводственныйПроцессДерево.Строки.Очистить();
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьНеВФоне            = ПроизводственныйПроцессПрочитан ИЛИ ЭтоФайловаяБаза;
	ПараметрыВыполнения.ЗапуститьВФоне              = НЕ ПроизводственныйПроцессПрочитан И НЕ ЭтоФайловаяБаза;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение дерева производственного процесса.';
															|en = 'Production process tree population.'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Спецификация", Объект.Ссылка);
	ПараметрыПроцедуры.Вставить("ПроизводственныйПроцессДерево", ПроизводственныйПроцессДерево);
	
	ПроизводственныйПроцессДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"РедакторПроизводственногоПроцесса.СтруктураПроизводственногоПроцессаВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Если ПроизводственныйПроцессДлительнаяОперация.Статус <> "Выполняется" Тогда
		
		ОбработатьРезультатЗаполненияПроизводственногоПроцесса(ПроизводственныйПроцессДлительнаяОперация);
		ПроизводственныйПроцессДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеЗаполненияПроизводственногоПроцесса()
	
	Если ПроизводственныйПроцессДлительнаяОперация <> Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"НачатьОжиданиеЗаполненияПроизводственногоПроцессаЗавершение",
			ЭтотОбъект);
			
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ПроизводственныйПроцессДлительнаяОперация,
			ОписаниеОповещения,
			ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеЗаполненияПроизводственногоПроцессаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Справочник.РесурсныеСпецификации.Форма.ФормаЭлемента.НачатьОжиданиеЗаполненияПроизводственногоПроцессаЗавершение");
	
	ПроизводственныйПроцессДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		ОбработатьРезультатЗаполненияПроизводственногоПроцесса(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЗаполненияПроизводственногоПроцесса(Результат)
	
	Если НЕ Результат.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРезультата = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ЗначениеЗаполнено(ДанныеРезультата) Тогда
		
		ЗначениеВРеквизитФормы(ДанныеРезультата.ПроизводственныйПроцессДерево, "ПроизводственныйПроцесс");
		
		МассивПодразделений = ДанныеРезультата.МассивПодразделений; // Массив
		Если ЗначениеЗаполнено(МассивПодразделений) Тогда
			ПроизводственныйПроцессКэш.ПараметрыПодразделений =
				ПроизводствоСервер.ПараметрыПроизводственныхПодразделений(МассивПодразделений);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПроизводственныйПроцессКэш, ДанныеРезультата);
		
		ПроизводственныйПроцессПрочитан = Истина;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОписаниеПроизводственногоПроцесса());
		
		УстановитьДоступностьЭлементовПроизводственногоПроцесса();
		
		ПроизводственныйПроцессОбновитьИнформационныеПанели();
		
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПроизводственныйПроцесс");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПроизводственногоПроцесса(Отказ = Ложь)
	
	Если НЕ ПроизводственныйПроцессПрочитан
			ИЛИ ЭтоТехнологическийНабор(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиЭтапы             = Производственныйпроцесс.ПолучитьЭлементы();
	Сообщения               = Новый Массив;
	МассивЭтапов            = Новый Массив;
	МассивЭтаповНаСтороне   = Новый Массив;
	ТаблицаПроверкиЭтапов   = Неопределено;
	ТаблицаПроверкиОпераций = Неопределено;
	СтатусСпецификации      = ?(РежимПроверкиЗаполненияВСтатусеДействует, Перечисления.СтатусыСпецификаций.Действует, Объект.Статус);
	
	Если СтатусСпецификации = Перечисления.СтатусыСпецификаций.Действует Тогда
		Если СтрокиЭтапы.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо создать этап производства.';
									|en = 'Create a production stage.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		ИначеЕсли СтрокиЭтапы.Количество() > 1
				И НЕ УправлениеДаннымиОбИзделияхКлиентСервер.МногоэтапныйПроизводственныйПроцессДоступен()
				И НЕ СтатусСпецификации = СтатусЗаписанногоОбъекта Тогда
			ТекстСообщения = УправлениеДаннымиОбИзделияхКлиентСервер.МногоэтапныйПроизводственныйПроцессТекстОшибки();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;
		ТаблицаПроверкиЭтапов   = РедакторПроизводственногоПроцесса.ТаблицаПроверкиПорядкаЭлементовПроизводственногоПроцессаКонструктор();
		ТаблицаПроверкиОпераций = РедакторПроизводственногоПроцесса.ТаблицаПроверкиПорядкаЭлементовПроизводственногоПроцессаКонструктор();
	КонецЕсли;
	
	КэшЭлементов = ПроизводственныйПроцессПолучитьКэшЭлементов();
	
	ПроизводственныйПроцессЗакэшироватьТекущийЭлемент(КэшЭлементов);
	
	Для ИндексЭтап = 0 По СтрокиЭтапы.Количество() - 1 Цикл
			
		СтрокаЭтап = СтрокиЭтапы[ИндексЭтап];
		
		ЭтапОбъект = ПроизводственныйПроцессПолучитьКэшЭлемента(КэшЭлементов, СтрокаЭтап, Истина).Объект; // СправочникОбъект.ЭтапыПроизводства
		
		ЭтапОбъект.ДополнительныеСвойства.Вставить("СтатусСпецификации", СтатусСпецификации);
		РедакторПроизводственногоПроцесса.ПроверитьЗаполнениеРеквизитовЭтапа(
			ЭтапОбъект, Отказ, Сообщения);
		
		//++ НЕ УТКА
		
		ПараметрыПодразделения = ПроизводственныйПроцессПолучитьПараметрыПодразделения(ЭтотОбъект, ЭтапОбъект.Подразделение);
		
		СтрокиОперации = СтрокаЭтап.ПолучитьЭлементы();
		Для ИндексОперация = 0 По СтрокиОперации.Количество() - 1 Цикл
			
			СтрокаОперация = СтрокиОперации[ИндексОперация];
			
			ОперацияОбъект = ПроизводственныйПроцессПолучитьКэшЭлемента(КэшЭлементов, СтрокаОперация, Истина).Объект; // СправочникОбъект.ТехнологическиеОперации
			
			ОперацияОбъект.ДополнительныеСвойства.Вставить("СтатусСпецификации", СтатусСпецификации);
			РедакторПроизводственногоПроцесса.ПроверитьЗаполнениеРеквизитовОперации(
				ОперацияОбъект, ЭтапОбъект, ПараметрыПодразделения, Отказ, Сообщения);
				
			Если СтатусСпецификации <> Перечисления.СтатусыСпецификаций.Действует Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПроверкиОпераций.Добавить();
			НоваяСтрока.Объект                 = ОперацияОбъект;
			НоваяСтрока.Операция               = СтрокаОперация.Ссылка;
			НоваяСтрока.Представление          = СтрокаОперация.Наименование;
			НоваяСтрока.НомерОперации          = СтрокаОперация.Номер;
			НоваяСтрока.НомерСледующейОперации = СтрокаОперация.НомерСледующего;
			
		КонецЦикла;
		
		//-- НЕ УТКА
		
		Если СтатусСпецификации <> Перечисления.СтатусыСпецификаций.Действует Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЭтапов.Добавить(ЭтапОбъект);
		
		Если ЭтапОбъект.ПроизводствоНаСтороне Тогда
			МассивЭтаповНаСтороне.Добавить(ЭтапОбъект);
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПроверкиЭтапов.Добавить();
		НоваяСтрока.Объект                 = ЭтапОбъект;
		НоваяСтрока.Операция               = СтрокаЭтап.Ссылка;
		НоваяСтрока.Представление          = СтрокаЭтап.Наименование;
		НоваяСтрока.НомерОперации          = СтрокаЭтап.Номер;
		НоваяСтрока.НомерСледующейОперации = СтрокаЭтап.НомерСледующего;
		
		//++ НЕ УТКА
		РедакторПроизводственногоПроцесса.ПроверитьПорядокЭлементовПроизводственногоПроцесса(
			ТаблицаПроверкиОпераций,
			РедакторПроизводственногоПроцесса.СтруктураПроверокПоследовательностиОпераций(, ПараметрыПодразделения),
			Отказ,
			Сообщения,
			ЭтапОбъект);
			
		ТаблицаПроверкиОпераций.Очистить();
		//-- НЕ УТКА
		
	КонецЦикла;
	
	Если СтатусСпецификации = Перечисления.СтатусыСпецификаций.Действует Тогда
		
		СпецификацияОбъект = РеквизитФормыВЗначение("Объект");
		
		РедакторПроизводственногоПроцесса.ПроверитьПорядокЭлементовПроизводственногоПроцесса(
			ТаблицаПроверкиЭтапов,
			РедакторПроизводственногоПроцесса.СтруктураПроверокПоследовательностиЭтапов(СпецификацияОбъект.ТипПроизводственногоПроцесса),
			Отказ,
			Сообщения);
		
		Если МассивЭтаповНаСтороне.Количество() Тогда
			РедакторПроизводственногоПроцесса.ПроверитьЭтапыПроизводстваНаСтороне(
				МассивЭтаповНаСтороне, СпецификацияОбъект, Отказ, Сообщения);
		КонецЕсли;
		
		//++ НЕ УТКА
		Если ИспользоватьПараметризациюРесурсныхСпецификаций Тогда
			РедакторПроизводственногоПроцесса.ПроверитьСоответствиеОтбораПоСвойствам(
				МассивЭтапов, СпецификацияОбъект, Отказ, Сообщения);
			РедакторПроизводственногоПроцесса.ПроверитьАлгоритмРасчетаКоличества(
				МассивЭтапов, СпецификацияОбъект, Отказ, Сообщения);
		КонецЕсли;
		
		Если НЕ ХранитьОперацииВРесурсныхСпецификациях Тогда
			РедакторПроизводственногоПроцесса.ПроверитьМаршрутныеКартыЭтапов(
				МассивЭтапов, Объект.НачалоДействия, Объект.КонецДействия, Отказ, Сообщения);
		КонецЕсли;
		
		СпецификацияОбъект.ПроверитьЗаполнениеПромежуточногоВыпускаВСтатусеДействует(Отказ);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сообщения, ПолучитьСообщенияПользователю(Истина));
		//-- НЕ УТКА
		
	КонецЕсли;
	
	ПроизводственныйПроцессОбработатьСообщенияПользователю(Сообщения);
	
	ПроизводственныйПроцессСохранитьКэшЭлементов(КэшЭлементов);
	
КонецПроцедуры

&НаСервере
Процедура ПроизводственныйПроцессОбработатьСообщенияПользователю(СообщенияПользователю)
	
	СообщенияКлючи = Новый Соответствие;
	
	Для каждого Сообщение Из СообщенияПользователю Цикл
		
		КлючДанных     = Неопределено;
		ТипКлючаДанных = ТипЗнч(Сообщение.КлючДанных);
		
		Если ЗначениеЗаполнено(Сообщение.КлючДанных)
			И (ТипКлючаДанных= Тип("СправочникСсылка.ЭтапыПроизводства")
				//++ НЕ УТКА
				ИЛИ ТипКлючаДанных= Тип("СправочникСсылка.ТехнологическиеОперации")
				//-- НЕ УТКА
				) Тогда
				
			КлючДанных = Сообщение.КлючДанных;
				
		ИначеЕсли ЗначениеЗаполнено(Сообщение.КлючДанных)
			И (ТипКлючаДанных= Тип("СправочникОбъект.ЭтапыПроизводства")
				//++ НЕ УТКА
				ИЛИ ТипКлючаДанных= Тип("СправочникОбъект.ТехнологическиеОперации")
				//-- НЕ УТКА
				) Тогда
				
			Если Сообщение.КлючДанных.ЭтоНовый() Тогда
				КлючДанных = Сообщение.КлючДанных.ПолучитьСсылкуНового();
			Иначе
				КлючДанных = Сообщение.КлючДанных.Ссылка;
			КонецЕсли;
				
		Иначе
			
			Сообщение.КлючДанных  = Неопределено;
			Сообщение.Поле        = "";
			Сообщение.ПутьКданным = "ПроизводственныйПроцесс";
			Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
			Сообщение.Сообщить();
			Продолжить;
			
		КонецЕсли;
		
		МассивСообщений = СообщенияКлючи.Получить(КлючДанных); // Массив
		Если МассивСообщений = Неопределено Тогда
			МассивСообщений = Новый Массив;
			СообщенияКлючи.Вставить(КлючДанных, МассивСообщений);
		КонецЕсли;
		МассивСообщений.Добавить(Сообщение);
		
	КонецЦикла;
	
	ШаблонЭтап     = НСтр("ru = '%1 (этап: %2)';
							|en = '%1 (stage: %2)'");
	//++ НЕ УТКА
	ШаблонОперация = НСтр("ru = '%1 (этап: %2, операция: %3)';
							|en = '%1 (stage: %2, operation: %3)'");
	//-- НЕ УТКА
	
	СтрокиЭтапы = Производственныйпроцесс.ПолучитьЭлементы();
	Для каждого СтрокаЭтап Из СтрокиЭтапы Цикл
		
		Сообщения = СообщенияКлючи.Получить(СтрокаЭтап.Ссылка);
		Если Сообщения <> Неопределено Тогда
			
			Для каждого Сообщение Из Сообщения Цикл
				
				ТекстСообщения = ?(СтрНайти(Сообщение.Текст, СтрокаЭтап.Наименование) > 0,
					Сообщение.Текст,
					СтрШаблон(ШаблонЭтап, Сообщение.Текст, СтрокаЭтап.Наименование));
				
				Сообщение.Текст = ТекстСообщения;
				Сообщение.КлючДанных  = Неопределено;
				Сообщение.Поле        = "";
				Сообщение.ПутьКданным = "ПроизводственныйПроцесс";
				Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
				Сообщение.Сообщить();
			
			КонецЦикла;
			
		КонецЕсли;
		
		//++ НЕ УТКА
		
		СтрокиОперации = СтрокаЭтап.ПолучитьЭлементы();
		Для каждого СтрокаОперация Из СтрокиОперации Цикл
			
			Сообщения = СообщенияКлючи.Получить(СтрокаОперация.Ссылка);
			Если Сообщения <> Неопределено Тогда
				
				Для каждого Сообщение Из Сообщения Цикл
				
					Сообщение.Текст = СтрШаблон(ШаблонОперация, Сообщение.Текст, СтрокаЭтап.Наименование, СтрокаОперация.Наименование);
					Сообщение.КлючДанных  = Неопределено;
					Сообщение.Поле        = "";
					Сообщение.ПутьКданным = "ПроизводственныйПроцесс";
					Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
					Сообщение.Сообщить();
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//-- НЕ УТКА
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПроизводственныйПроцесс(Отказ = Ложь)
	
	Если НЕ ПроизводственныйПроцессПрочитан
			ИЛИ ЭтоТехнологическийНабор(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	КэшЭлементов = ПроизводственныйПроцессПолучитьКэшЭлементов();
	
	ОбъектыЗаписать = Новый Структура;
	ОбъектыУдалить  = Новый Массив;
	
	Для каждого КлючИЗначение Из КэшЭлементов Цикл
		
		КэшЭлемента = КлючИЗначение.Значение;
		ВидЭлемента = РедакторПроизводственногоПроцессаКлиентСервер.ВидЭлементаПоСсылке(КлючИЗначение.Ключ);
		
		Если КэшЭлемента.Записывать
			И НЕ КэшЭлемента.Удален Тогда
			
			МассивОбъектов = Неопределено;
			Если НЕ ОбъектыЗаписать.Свойство(ВидЭлемента, МассивОбъектов) Тогда
				МассивОбъектов = Новый Массив;
				ОбъектыЗаписать.Вставить(ВидЭлемента, МассивОбъектов);
			КонецЕсли;
			МассивОбъектов.Добавить(КэшЭлемента.Объект);
			
		ИначеЕсли КэшЭлемента.Удален
			И НЕ (КэшЭлемента.Объект <> Неопределено И КэшЭлемента.Объект.ЭтоНовый()) Тогда
			
			ЭлементОбъект = КлючИЗначение.Ключ.ПолучитьОбъект();
			//++ НЕ УТКА
			Если ВидЭлемента = "Операция" Тогда
				КэшВладельца = КэшЭлементов.Получить(ЭлементОбъект.Владелец);
				Если КэшВладельца <> Неопределено И КэшВладельца.Удален Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			//-- НЕ УТКА
			ЭлементОбъект.ДополнительныеСвойства.Вставить("РазрешитьЗапись");
			
			ОбъектыУдалить.Добавить(ЭлементОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		ВидыЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.ВидыЭлементов();
		Для Индекс = 0 По ВидыЭлементов.ВГраница() Цикл
			МассивОбъектов = Неопределено;
			Если ОбъектыЗаписать.Свойство(ВидыЭлементов[Индекс], МассивОбъектов) Тогда
				Для каждого ТекущийОбъект из МассивОбъектов Цикл // СправочникОбъект.ЭтапыПроизводства
					ТекущийОбъект.Записать();
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекущийОбъект Из ОбъектыУдалить Цикл
			ТекущийОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
		ПроизводственныйПроцессОчиститьКэшЭлементов();
		
		ПроизводственныйПроцессТекущаяСсылка = Неопределено;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось записать производственный процесс.';
				|en = 'Cannot save production process.'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроизводственныйПроцессПриАктивизацииЭлемента()
	
	ПроизводственныйПроцессАктивизацияЭлемента = Истина;
	
	ТекущаяСтрока = Элементы.ПроизводственныйПроцесс.ТекущаяСтрока;
	
	ПроизводственныйПроцессПриАктивизацииЭлементаНаСервере();
	
	Если Элементы.ПроизводственныйПроцесс.ТекущаяСтрока <> ТекущаяСтрока Тогда
		Элементы.ПроизводственныйПроцесс.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	ПроизводственныйПроцессАктивизацияЭлемента = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПроизводственныйПроцессПриАктивизацииЭлементаНаСервере()
	
	КэшЭлементов = ПроизводственныйПроцессПолучитьКэшЭлементов();
	
	ПроизводственныйПроцессЗакэшироватьТекущийЭлемент(КэшЭлементов);
	
	ПроизводственныйПроцессИнициализироватьНовыйЭлемент(КэшЭлементов);
	
	ПроизводственныйПроцессСохранитьКэшЭлементов(КэшЭлементов);
	
КонецПроцедуры

&НаСервере
Процедура ПроизводственныйПроцессЗакэшироватьТекущийЭлемент(КэшЭлементов)
	
	Если НЕ ЗначениеЗаполнено(ПроизводственныйПроцессТекущаяСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	ВидЭлемента              = РедакторПроизводственногоПроцессаКлиентСервер.ВидЭлементаПоСсылке(ПроизводственныйПроцессТекущаяСсылка);
	СвойстваЭлемента         = ОписаниеСвойствЭлементов.Получить(ВидЭлемента);
	ИмяРеквизитаОбъекта      = СвойстваЭлемента.ИмяРеквизитаОбъекта;
	
	КэшЭлемента = КэшЭлементов.Получить(ПроизводственныйПроцессТекущаяСсылка);
	Если КэшЭлемента <> Неопределено Тогда
		
		Попытка
			ТекущийОбъект = РеквизитФормыВЗначение(ИмяРеквизитаОбъекта);
		Исключение
			ДанныеОбъекта = ЭтотОбъект[ИмяРеквизитаОбъекта]; // СправочникОбъект.ЭтапыПроизводства 
			Шаблон = НСтр("ru = 'Объект ""%1"" возможно был изменен другим пользователем. Данные объекта будут прочитаны повторно.';
							|en = 'Object ""%1"" may have been modified by another user. The object data will be re-read.'");
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(Шаблон, ДанныеОбъекта.Наименование));
			КэшЭлементов.Удалить(ПроизводственныйПроцессТекущаяСсылка);
			Возврат;
		КонецПопытки;
			
		Если ТекущийОбъект.ЭтоНовый() Тогда
			ТекущийОбъект.УстановитьСсылкуНового(ПроизводственныйПроцессТекущаяСсылка);
		КонецЕсли;
		
		Если ВидЭлемента = "Этап" Тогда
		
			ТекущийОбъект.МаксимальноеКоличествоЕдиницПартийИзделия = ЭтапМаксимальноеКоличествоЕдиницПартийИзделия;
		
		//++ НЕ УТКА
			РедакторПроизводственногоПроцесса.СохранитьВидыРабочихЦентров(
						ЭтапВидыРабочихЦентров,
						ТекущийОбъект.ПланироватьРаботуВидовРабочихЦентров,
						ТекущийОбъект.ВидыРабочихЦентров,
						ТекущийОбъект.АльтернативныеВидыРабочихЦентров);
			
		ИначеЕсли ВидЭлемента = "Операция" Тогда
			
			РедакторПроизводственногоПроцессаКлиентСервер.ЗагрузитьНормативыВидаОперации(ТекущийОбъект, ОперацияДопРеквизиты);
			
		//-- НЕ УТКА
		КонецЕсли;
		
		КэшЭлемента.Объект = ТекущийОбъект;
		ПроизводственныйПроцессЗакэшироватьРеквизитыФормы(КэшЭлемента);
		КэшЭлементов.Вставить(ПроизводственныйПроцессТекущаяСсылка, КэшЭлемента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизводственныйПроцессИнициализироватьНовыйЭлемент(КэшЭлементов)
	
	ТекущаяСтрока = Элементы.ПроизводственныйПроцесс.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ПроизводственныйПроцесс.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	СвойстваЭлемента    = ОписаниеСвойствЭлементов.Получить(ТекущиеДанные.ВидЭлемента);
	ИмяРеквизитаОбъекта = СвойстваЭлемента.ИмяРеквизитаОбъекта;
	
	КэшЭлемента = КэшЭлементов.Получить(ТекущиеДанные.Ссылка);
	Если КэшЭлемента = Неопределено Тогда
		ТекущийОбъект = ТекущиеДанные.Ссылка.ПолучитьОбъект();
		КэшЭлемента = ПроизводственныйПроцессКэшЭлементаКонструктор(ТекущиеДанные.ВидЭлемента);
		КэшЭлемента.Объект = ТекущийОбъект;
		КэшЭлементов.Вставить(ТекущиеДанные.Ссылка, КэшЭлемента);
	Иначе
		ТекущийОбъект = КэшЭлемента.Объект;
	КонецЕсли;
	КэшЭлемента.Записывать = КэшЭлемента.Записывать ИЛИ (ДоступностьРеквизитов И НЕ ТекущиеДанные.ТолькоПросмотр);
	
	ПроизводственныйПроцессТекущаяСсылка = ТекущиеДанные.Ссылка;
	ЗначениеВРеквизитФормы(ТекущийОбъект, ИмяРеквизитаОбъекта);
	
	ОбновитьЗначенияРеквизитовОбъектаВДереве(ЭтотОбъект, ТекущиеДанные);
	
	Если ТекущиеДанные.ВидЭлемента = "Этап" Тогда
		
		ПроизводственныйПроцессИнициализироватьЭтап(ТекущиеДанные, КэшЭлемента);
	//++ НЕ УТКА
	
	ИначеЕсли ТекущиеДанные.ВидЭлемента = "Операция" Тогда
		
		ПроизводственныйПроцессИнициализироватьОперацию(ТекущиеДанные, КэшЭлемента);
		
	//-- НЕ УТКА
	КонецЕсли;
	
	Элементы[ИмяРеквизитаОбъекта].ТолькоПросмотр = НЕ ДоступностьРеквизитов ИЛИ ТекущиеДанные.ТолькоПросмотр;
	Элементы.ПроизводственныйПроцессСвойстваСтраницы.ТекущаяСтраница = Элементы[ИмяРеквизитаОбъекта];
	
КонецПроцедуры

&НаСервере
Процедура ПроизводственныйПроцессОчиститьТекущийЭлемент(ТолькоТекущаяСсылка = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ПроизводственныйПроцессТекущаяСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	
	Если НЕ ТолькоТекущаяСсылка Тогда
	
		ВидЭлемента       = РедакторПроизводственногоПроцессаКлиентСервер.ВидЭлементаПоСсылке(ПроизводственныйПроцессТекущаяСсылка);
		СвойстваЭлемента  = ОписаниеСвойствЭлементов.Получить(ВидЭлемента);
		ТипЭлементаОбъект = Новый ОписаниеТипов("СправочникОбъект."+СвойстваЭлемента.ИмяТипаЭлемента);
		
		ЗначениеВРеквизитФормы(ТипЭлементаОбъект.ПривестиЗначение(Неопределено), СвойстваЭлемента.ИмяРеквизитаОбъекта);
	
	КонецЕсли;
	
	ПроизводственныйПроцессТекущаяСсылка = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПроизводственныйПроцессИнициализироватьЭтап(ДанныеСтроки, КэшЭлемента)
	
	ВидЭлемента = ДанныеСтроки.ВидЭлемента;
	
	Если КэшЭлемента.Заполнен Тогда
		ПроизводственныйПроцессВосстановитьРеквизитыФормыИзКэша(КэшЭлемента);
	Иначе
		//++ НЕ УТКА
		ЭтапИнтервалПланирования = ПроизводственныйПроцессПолучитьПараметрыПодразделения(
			ЭтотОбъект, ПроизводственныйПроцессЭтап.Подразделение).ИнтервалПланирования;
		ПрочитатьНастройкиМаршрутнойКарты(ПроизводственныйПроцессЭтап, ЭтотОбъект);
		//-- НЕ УТКА
	КонецЕсли;
	
	ЭтапСпособПроизводства = Число(ПроизводственныйПроцессЭтап.ПроизводствоНаСтороне);
	
	ЗаполнитьВыборЕдиницыИзмеренияБуферов(Истина);
	//++ НЕ УТКА
	РедакторПроизводственногоПроцесса.ЗаполнитьВидыРабочихЦентров(
		ПроизводственныйПроцессЭтап, ЭтапВидыРабочихЦентров, ЭтапЕстьСинхроннаяЗагрузка);
	Если Объект.ВариантПромежуточногоВыпуска = Перечисления.ВариантыПромежуточногоВыпуска.НастраиваетсяВручную Тогда
		СтруктураПоиска = Новый Структура("ЭтапОтправитель", ПроизводственныйПроцессТекущаяСсылка);
		Элементы.ПромежуточныйВыпуск.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
		ПромежуточныйВыпускКоличествоСтрок = Объект.ПромежуточныйВыпуск.НайтиСтроки(СтруктураПоиска).Количество();
	КонецЕсли;
	//-- НЕ УТКА
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтотОбъект);
	
	ЗаполнитьСлужебныеРеквизитыУслугиПереработчика();
	
	РедакторПроизводственногоПроцессаКлиентСервер.ЗаполнитьПояснениеОсновныхНастроек(ПроизводственныйПроцессЭтап, ЭтотОбъект, ВидЭлемента);
	
	РедакторПроизводственногоПроцесса.УстановитьДоступностьЭлементовЭтапаПоСтатусу(ЭтотОбъект, ДоступностьРеквизитов, СпецификацияЗакрыта, ВидЭлемента);
	
	НастроитьЭлементыФормыЭтапа(ПроизводственныйПроцессЭтап, ДанныеСтроки);
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура ПроизводственныйПроцессИнициализироватьОперацию(ДанныеСтроки, КэшЭлемента)
	
	ВидЭлемента       = ДанныеСтроки.ВидЭлемента;
	ДанныеСтрокиЭтапа = ПроизводственныйПроцессПолучитьТекущийЭтап(ЭтотОбъект);
	Если ДанныеСтрокиЭтапа <> Неопределено Тогда
		Подразделение = ДанныеСтрокиЭтапа.Подразделение;
	КонецЕсли;
	
	Если КэшЭлемента.Заполнен Тогда
		ПроизводственныйПроцессВосстановитьРеквизитыФормыИзКэша(КэшЭлемента);
		РедакторПроизводственногоПроцесса.УстановитьУсловноеОформлениеРеквизитовВидаОперации(ЭтотОбъект, ВидЭлемента);
	Иначе
		РедакторПроизводственногоПроцесса.ПрочитатьРеквизитыВидаОперации(
			ПроизводственныйПроцессОперация, ЭтотОбъект, ВидЭлемента);
		РедакторПроизводственногоПроцесса.ПрочитатьРеквизитыРабочегоЦентра(
			ПроизводственныйПроцессОперация, ЭтотОбъект, ВидЭлемента);
		ПрочитатьНастройкиТехнологическогоПроцесса(ПроизводственныйПроцессОперация, ЭтотОбъект);
	КонецЕсли;
	
	ОперацияДоступностьЭлементов = РедакторПроизводственногоПроцесса.ОпределитьДоступностьЭлементовОперации(Объект.Статус);
	
	РедакторПроизводственногоПроцесса.НастроитьВидимостьДоступностьЭлементовОперации(
		ПроизводственныйПроцессОперация,
		ЭтотОбъект,
		ПроизводственныйПроцессПолучитьПараметрыПодразделения(ЭтотОбъект, Подразделение),
		ВидЭлемента);
		
	РедакторПроизводственногоПроцесса.НастроитьПараметрыВыбораРабочихЦентров(
		ПроизводственныйПроцессОперация,
		ЭтотОбъект,
		Подразделение,
		ВидЭлемента);
		
	РедакторПроизводственногоПроцесса.НастроитьПараметрыВыбораУчасток(
		ПроизводственныйПроцессОперация,
		ЭтотОбъект,
		Подразделение,
		ВидЭлемента);
	
	Элементы.ОперацияУчасток.ПодсказкаВвода = РедакторПроизводственногоПроцесса.ПредставлениеУчастка(ПроизводственныйПроцессОперация, Элементы.ОперацияУчасток.Видимость);
	
	Элементы.ОперацияЕдиницаИзмерения.ПодсказкаВвода = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
		ПроизводственныйПроцессОперация.ЕдиницаИзмерения, ПроизводственныйПроцессОперация.Количество);
	РедакторПроизводственногоПроцессаКлиентСервер.ЗаполнитьЕдиницуИзмеренияПередаточнойПартии(
		ПроизводственныйПроцессОперация, ОперацияЕдиницаИзмеренияПередаточнойПартии);
	
	ОперацияВидОперации = ПроизводственныйПроцессОперация.ВидОперации;
	
	НастроитьЭлементыФормыОперации(ПроизводственныйПроцессОперация, ДанныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочитатьНастройкиТехнологическогоПроцесса(Объект, Форма)
	
	РассчитыватьКоэффициент = Справочники.ТехнологическиеПроцессы.КоэффициентТехнологическогоПроцессаРассчитывается(
		Объект.ТехнологическийПроцесс);
		
	Форма.ОперацияРассчитыватьКоэффициент = РассчитыватьКоэффициент;
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Функция ПроизводственныйПроцессОписаниеСвойствЭлемента(ВидЭлемента)
	
	Результат = Новый Структура("ВидЭлемента", ВидЭлемента);
	
	Если ВидЭлемента = "Этап" Тогда
		
		Результат.Вставить("ИмяТипаЭлемента",             "ЭтапыПроизводства");
		Результат.Вставить("ВидЭлементаПредставление",    НСтр("ru = 'Этап';
																|en = 'Stage'"));
		Результат.Вставить("ИмяРеквизитаОбъекта",         "ПроизводственныйПроцессЭтап");
		Результат.Вставить("Номер",                       "НомерЭтапа");
		Результат.Вставить("НомерСледующего",             "НомерСледующегоЭтапа");
		
		Результат.Вставить("Редактирование",              "ЭтапРедактирование");
		Результат.Вставить("РедактированиеПредставление", "ЭтапРедактированиеПредставление");
		Результат.Вставить("Счетчик",                     "ЭтапКоличество");
		
		Результат.Вставить("ЕдиницаИзмеренияЗавершающегоБуфера",        "ЭтапЕдиницаИзмеренияЗавершающегоБуфера");
		Результат.Вставить("ЕдиницаИзмеренияПредварительногоБуфера",    "ЭтапЕдиницаИзмеренияПредварительногоБуфера");
		Результат.Вставить("МаксимальноеКоличествоЕдиницПартийИзделия", "ЭтапМаксимальноеКоличествоЕдиницПартийИзделия");
		Результат.Вставить("РазбиватьМаршрутныеЛисты",                  "ЭтапРазбиватьМаршрутныеЛисты");
		Результат.Вставить("РассчитыватьКоэффициент",                   "ЭтапРассчитыватьКоэффициент");
		Результат.Вставить("РазбиватьМаршрутныеЛистыПоМаршрутнойКарте", "ЭтапРазбиватьМаршрутныеЛистыПоМаршрутнойКарте");
		
		Результат.Вставить("РеквизитыДерева",                           "Наименование,Номер,НомерСледующего,Подразделение");
		
		ДопРеквизитыЭлементы = Новый Массив;
		ДопРеквизитыЭлементы.Добавить("ЭтапДополнительныеРеквизиты");
		Результат.Вставить("ДополнительныеРеквизитыЭлементы", ДопРеквизитыЭлементы);
		Результат.Вставить("ДополнительныеРеквизиты",         "ЭтапДополнительныеРеквизиты");
		Результат.Вставить("ИспользоватьДопРеквизиты",        "ЭтапИспользоватьДопРеквизиты");
		
	//++ НЕ УТКА
	ИначеЕсли ВидЭлемента = "Операция" Тогда
		
		Результат.Вставить("ИмяТипаЭлемента",             "ТехнологическиеОперации");
		Результат.Вставить("ВидЭлементаПредставление",     НСтр("ru = 'Операция';
																|en = 'Operation'"));
		Результат.Вставить("ИмяРеквизитаОбъекта",         "ПроизводственныйПроцессОперация");
		Результат.Вставить("Номер",                       "НомерОперации");
		Результат.Вставить("НомерСледующего",             "НомерСледующейОперации");
		
		Результат.Вставить("Редактирование",              "ОперацияРедактирование");
		Результат.Вставить("РедактированиеПредставление", "ОперацияРедактированиеПредставление");
		Результат.Вставить("Счетчик",                     "ОперацияКоличество");
		
		Результат.Вставить("РеквизитыДерева",             "Наименование,Номер,НомерСледующего,РабочийЦентр");
		
		ДопРеквизитыЭлементы = Новый Массив;
		ДопРеквизитыЭлементы.Добавить("ОперацияДополнительныеРеквизиты");
		ДопРеквизитыЭлементы.Добавить("ОперацияДополнительныеРеквизитыТП");
		Результат.Вставить("ДополнительныеРеквизитыЭлементы", ДопРеквизитыЭлементы);
		Результат.Вставить("ДополнительныеРеквизиты",         "ОперацияДополнительныеРеквизиты");
		Результат.Вставить("ИспользоватьДопРеквизиты",        "ОперацияИспользоватьДопРеквизиты");
		
	//-- НЕ УТКА
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроизводственныйПроцессСвертка(Свернуть = Истина, КоллекцияСтрок = Неопределено)
	
	Если КоллекцияСтрок = Неопределено Тогда
		КоллекцияСтрок = ПроизводственныйПроцесс;
	КонецЕсли;
	
	Для каждого СтрокаДерева Из КоллекцияСтрок.ПолучитьЭлементы() Цикл
		Если Свернуть Тогда
			ПроизводственныйПроцессСвертка(Свернуть, СтрокаДерева);
			Элементы.ПроизводственныйПроцесс.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		Иначе
			Элементы.ПроизводственныйПроцесс.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессСвойстваСвертка(Свернуть = Истина)
	
	ТекущиеДанные = Элементы.ПроизводственныйПроцесс.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	ИмяРаздела = ОписаниеСвойствЭлементов.Получить(ТекущиеДанные.ВидЭлемента).ИмяРеквизитаОбъекта;
	ПроизводственныйПроцессСвернутьВложенныеГруппы(Элементы[ИмяРаздела], Свернуть);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессСвернутьВложенныеГруппы(Элемент, Свернуть)
	
	Для каждого ЭлементФормы из Элемент.ПодчиненныеЭлементы Цикл
		
		Если НЕ ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементФормы.Вид = ВидГруппыФормы.Страницы Тогда
			ПроизводственныйПроцессСвернутьВложенныеГруппы(ЭлементФормы.ТекущаяСтраница, Свернуть);
		Иначе
			Если Свернуть Тогда
				ЭлементФормы.Скрыть();
			Иначе
				ЭлементФормы.Показать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Функция ПроизводственныйПроцессПроверитьОчиститьИспользованиеЭлемента(ВидЭлемента, Ссылка, Очистить = Ложь)
	
	ИменаТЧ = ИменаТабличныхЧастей();
	
	ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	СвойстваЭлементов = ОписаниеСвойствЭлементов.Получить(ВидЭлемента);
	
	СтруктураПоиска = Новый Структура(СвойстваЭлементов["Редактирование"], Ссылка);
	
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если Очистить Тогда
				Для каждого Строка Из НайденныеСтроки Цикл
					Строка[СвойстваЭлементов["Редактирование"]]              = Неопределено;
					Строка[СвойстваЭлементов["РедактированиеПредставление"]] = "";
					Строка.ЭлементПроизводственногоПроцессаПредставление     = ПредставлениеЭлементаПроизводтвенногоПроцесса(ЭтотОбъект, Строка);
				КонецЦикла;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

//-- НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Функция ПроизводственныйПроцессПолучитьНовыйНомер(КоллекцияЭлементов)
	
	НовыйНомер = 1;
	
	Если КоллекцияЭлементов.Количество() > 0 Тогда
		НовыйНомер = КоллекцияЭлементов[КоллекцияЭлементов.Количество()-1].Номер + 1;
	КонецЕсли;
	
	Возврат НовыйНомер;
	
КонецФункции

&НаСервере
Процедура ПроизводственныйПроцессОбновитьИнформационныеПанели()
	
	ИнформационнаяСтрокаМатериалы    = "";
	ИнформационнаяСтрокаТрудозатраты = "";
	
	//++ НЕ УТКА
	
	ТехнологическиеПроцессы = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТехнологическиеПроцессы") Тогда
		Для каждого СтрокаЭтап Из ПроизводственныйПроцесс.ПолучитьЭлементы() Цикл
			Для каждого СтрокаОперация Из СтрокаЭтап.ПолучитьЭлементы() Цикл
				Если ЗначениеЗаполнено(СтрокаОперация.ТехнологическийПроцесс) Тогда
					ТехнологическиеПроцессы.Добавить(СтрокаОперация.ТехнологическийПроцесс);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ТехнологическиеПроцессы.Количество() > 0 Тогда
		
		ШаблонНадписи = НСтр("ru = '+ еще %1 согласно технологическим процессам';
							|en = '+ %1 more according to technological processes'"); 
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика
		|ИЗ
		|	Справочник.ТехнологическиеПроцессы.МатериалыИУслуги КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&ТехнологическиеПроцессы)
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.ВидРабот
		|ИЗ
		|	Справочник.ТехнологическиеПроцессы.Трудозатраты КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&ТехнологическиеПроцессы)
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ТехнологическиеПроцессы", ТехнологическиеПроцессы);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		
		КоличествоМатериалов = РезультатыЗапроса[0].Выбрать().Количество();
		Если КоличествоМатериалов > 0 Тогда
			ИнформационнаяСтрокаМатериалы = СтрШаблон(ШаблонНадписи, КоличествоМатериалов); 
		КонецЕсли;
		
		КоличествоТрудозатрат = РезультатыЗапроса[1].Выбрать().Количество();
		Если КоличествоТрудозатрат > 0 Тогда
			ИнформационнаяСтрокаТрудозатраты = СтрШаблон(ШаблонНадписи, КоличествоТрудозатрат); 
		КонецЕсли;
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Элементы.ИнформационнаяПанельМатериалы.Видимость    = ЗначениеЗаполнено(ИнформационнаяСтрокаМатериалы);
	Элементы.ИнформационнаяПанельТрудозатраты.Видимость = ЗначениеЗаполнено(ИнформационнаяСтрокаТрудозатраты);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитМногоэтапныйПроизводственныйПроцесс()
	
	МногоэтапныйПроизводственныйПроцесс = ?(ПроизводственныйПроцессКэш.ЭтапКоличество > 1, Истина, Ложь);
	
	Если МногоэтапныйПроизводственныйПроцесс <> Объект.МногоэтапныйПроизводственныйПроцесс Тогда
		
		Объект.МногоэтапныйПроизводственныйПроцесс = МногоэтапныйПроизводственныйПроцесс;
		ПриИзмененииСтруктурыПроизводственногоПроцесса();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессОткрытьФормуЭлемента(ДанныеСтроки)
	
	ТекущаяСсылка = ДанныеСтроки.ЭтапРедактирование;
	//++ НЕ УТКА
	Если ЗначениеЗаполнено(ДанныеСтроки.ОперацияРедактирование)
			И ХранитьОперацииВРесурсныхСпецификациях Тогда
		ТекущаяСсылка = ДанныеСтроки.ОперацияРедактирование;
	КонецЕсли;
	//-- НЕ УТКА
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроизводственныйПроцессЭлементЗаписан(ТекущаяСсылка) Тогда
		ПараметрыФормы = Новый Структура("Ключ,ТолькоПросмотр", ТекущаяСсылка, Истина);
		ИмяФормыЭлемента = СтрШаблон("Справочник.%1.ФормаОбъекта", РедакторПроизводственногоПроцессаКлиентСервер.ИмяТипаЭлементаПоСсылке(ТекущаяСсылка));
		ОткрытьФорму(ИмяФормыЭлемента, ПараметрыФормы);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Открыть элемент можно только после его записи.';
										|en = 'Element can be opened after it has been saved.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроизводственныйПроцессЭлементЗаписан(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка";
	
	ИмяТипа = РедакторПроизводственногоПроцессаКлиентСервер.ИмяТипаЭлементаПоСсылке(Ссылка);
	Если ИмяТипа <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", "Справочник."+ИмяТипа);
		Возврат (Запрос.Выполнить().Пустой() = Ложь);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаЭлементовПроизводственногоПроцессаКонструктор()
	
	СписокТипов = СтрСоединить(РедакторПроизводственногоПроцессаКлиентСервер.ИменаТиповЭлементов("СправочникСсылка."),",");
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Ссылка",                Новый ОписаниеТипов(СписокТипов));
	Результат.Колонки.Добавить("Номер",                 Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("НомерСледующего",       Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Наименование",          Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	Результат.Колонки.Добавить("Подразделение",         Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Результат.Колонки.Добавить("ПроизводствоНаСтороне", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Владелец",              Новый ОписаниеТипов(СписокТипов));
	//++ НЕ УТКА
	Результат.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров,СправочникСсылка.РабочиеЦентры"));
	//-- НЕ УТКА
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТаблицаЭлементовПроизводственногоПроцесса(Отбор)
	
	Результат = ТаблицаЭлементовПроизводственногоПроцессаКонструктор();
	
	ДобавитьСтрокиВТаблицуЭлементовПроизводственногоПроцесса(
		Результат,
		ДеревоЭлементовПроизводственногоПроцессаДляВыбора(Отбор).Строки);
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокиВТаблицуЭлементовПроизводственногоПроцесса(ТаблицаЭлементов, СтрокиДерева)
	
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		НоваяСтрока = ТаблицаЭлементов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Если СтрокаДерева.Родитель <> Неопределено Тогда
			НоваяСтрока.Владелец = СтрокаДерева.Родитель.Ссылка;
		КонецЕсли;
		
		ДобавитьСтрокиВТаблицуЭлементовПроизводственногоПроцесса(ТаблицаЭлементов, СтрокаДерева.Строки);
	
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Функция ТаблицаЭтаповПредшественников(ТекущийЭтап)
	
	ТаблицаЭтапов = ТаблицаЭлементовПроизводственногоПроцессаКонструктор();
	ТаблицаЭтапов.Колонки.Добавить("Предшественник", Новый ОписаниеТипов("Булево"));
	
	СтруктураПоиска = Новый Структура("НомерСледующего,Предшественник", -1, Ложь);
	
	Для каждого СтрокаЭтап Из ПроизводственныйПроцесс.ПолучитьЭлементы() Цикл
		
		Если СтрокаЭтап.Ссылка = ТекущийЭтап Тогда
			СтруктураПоиска.НомерСледующего = СтрокаЭтап.Номер;
			Прервать;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаЭтапов.Добавить(), СтрокаЭтап);
		
	КонецЦикла;
	
	ТаблицаЭтапов.Индексы.Добавить("НомерСледующего");
	
	НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(СтруктураПоиска);
	Пока НайденныеСтроки.Количество() > 0 Цикл
		
		СтруктураПоиска.НомерСледующего = НайденныеСтроки[0].Номер;
		Для каждого НайденнаяСтрока Из ТаблицаЭтапов.НайтиСтроки(СтруктураПоиска) Цикл
			Если НайденныеСтроки.Найти(НайденнаяСтрока) = Неопределено Тогда
				НайденныеСтроки.Добавить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		НайденныеСтроки[0].Предшественник = Истина;
		НайденныеСтроки.Удалить(0);
		
	КонецЦикла;
	
	Возврат ТаблицаЭтапов.Скопировать(Новый Структура("Предшественник", Истина));
	
КонецФункции

//-- НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Процедура ПроизводственныйПроцессОбновитьПредставления(ВидЭлемента, Ссылка, Представление, Форма)
	
	ОписаниеСвойствЭлементов = Форма.ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	СвойстваЭлементов = ОписаниеСвойствЭлементов.Получить(ВидЭлемента);
	
	ИменаТЧ = ИменаТабличныхЧастей();
	
	Объект          = Форма.Объект;
	ИмяРеквизита    = СвойстваЭлементов["Редактирование"];
	СтруктураПоиска = Новый Структура(ИмяРеквизита, Ссылка);
	
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		
		НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		Для каждого Строка Из НайденныеСтроки Цикл
			Строка[СвойстваЭлементов["РедактированиеПредставление"]] = Представление;
			Строка.ЭлементПроизводственногоПроцессаПредставление = ПредставлениеЭлементаПроизводтвенногоПроцесса(Форма, Строка);
		КонецЦикла;
		
		Если ИмяТЧ = "МатериалыИУслуги" И ВидЭлемента = "Этап" Тогда
			НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("ИсточникПолученияПолуфабриката", Ссылка));
			Для каждого Строка Из НайденныеСтроки Цикл
				Строка.ИсточникПолученияПолуфабрикатаПредставление = Представление;
				ЗаполнитьПредставлениеСпособаПолученияМатериала(Строка, Форма);
			КонецЦикла;
			НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("ПланироватьНеРанее", Ссылка));
			Для каждого Строка Из НайденныеСтроки Цикл
				Строка.ПланироватьНеРанееПредставление = Представление;
				ЗаполнитьПредставлениеСпособаПолученияМатериала(Строка, Форма);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура ПроизводственныйПроцессУдалитьОперацииЭтапа(ДанныеСтрокиЭтапа)
	
	СтрокиОперации = ДанныеСтрокиЭтапа.ПолучитьЭлементы();
	Если СтрокиОперации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КэшЭлементов = ПроизводственныйПроцессПолучитьКэшЭлементов();
	КоличествоОпераций = СтрокиОперации.Количество();
	
	Для каждого СтрокаОперация Из СтрокиОперации Цикл
		
		КэшЭлемента = ПроизводственныйПроцессПолучитьКэшЭлемента(КэшЭлементов, СтрокаОперация);
		КэшЭлемента.Удален = Истина;
		
		ПроизводственныйПроцессПроверитьОчиститьИспользованиеЭлемента("Операция", СтрокаОперация.Ссылка, Истина);
		
	КонецЦикла;
	
	СтрокиОперации.Очистить();
	
	ПроизводственныйПроцессСкорректироватьСчетчикЭлементов("Операция", -КоличествоОпераций);
	
	ПроизводственныйПроцессСохранитьКэшЭлементов(КэшЭлементов);
	
КонецПроцедуры

//-- НЕ УТКА

#Область ОбработкаВыбораЭлементов

&НаКлиентеНаСервереБезКонтекста
Функция НазванияЭлементовРедактирования()
	
	Результат = Новый Соответствие();
	
	Результат.Вставить("Продукция",        "ПродукцияЭлементПроизводственногоПроцесса");
	Результат.Вставить("ВыходныеИзделия",  "ВыходныеИзделияЭлементПроизводственногоПроцесса");
	Результат.Вставить("ВозвратныеОтходы", "ВозвратныеОтходыЭлементПроизводственногоПроцесса");
	Результат.Вставить("МатериалыИУслуги", "МатериалыИУслугиЭлементПроизводственногоПроцесса");
	Результат.Вставить("Трудозатраты",     "ТрудозатратыЭлементПроизводственногоПроцесса");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НазванияКомандВыбораЭлементаПроизводственногоПроцесса()
	
	Результат = Новый Соответствие();
	
	Результат.Вставить("ВыходныеИзделия",  "ВыходныеИзделия_ЗаполнитьЭтап");
	Результат.Вставить("ВозвратныеОтходы", "ВозвратныеОтходы_ЗаполнитьЭтап");
	Результат.Вставить("МатериалыИУслуги", "МатериалыИУслуги_ЗаполнитьЭтап");
	Результат.Вставить("Трудозатраты",     "Трудозатраты_ЗаполнитьЭтап");
	
	Возврат Результат;
	
КонецФункции

// Формирует дерево элементов производственного процесса для выбора с учетом заданного отбора.
// 
// Параметры:
//  Отбор - Неопределено, Структура - структура отбора:
//   * ИмяТЧ - Строка - табличная часть
//   * ВидЭлемента - Строка - вид элемента
//   * Этап - СправочникСсылка.ЭтапыПроизводства - этап-владелец
//  ПоместитьВХранилище - Булево - Определяет необходимость поместить результат в хранилище
// 
// Возвращаемое значение:
//  Строка, ДеревоЗначений - Дерево элементов производственного процесса:
//	* Ссылка - СправочникСсылка.ЭтапыПроизводства
&НаСервере
Функция ДеревоЭлементовПроизводственногоПроцессаДляВыбора(Отбор = Неопределено)
	
	ДеревоЭлементов = РеквизитФормыВЗначение("ПроизводственныйПроцесс"); // ДеревоЗначений
	
	Если ЗначениеЗаполнено(Отбор) Тогда
	
		Результат = ДеревоЭлементов.Скопировать();
		Результат.Строки.Очистить();
		
		Для каждого СтрокаЭтап Из ДеревоЭлементов.Строки Цикл
			
			Если Отбор.Свойство("ИмяТЧ") Тогда
				Если Отбор.ИмяТЧ = "ВыходныеИзделия" И СтрокаЭтап.НомерСледующего <> 0 Тогда
					Продолжить;
				КонецЕсли;
				Если Отбор.ИмяТЧ = "Продукция" И СтрокаЭтап.НомерСледующего <> 0 Тогда
					Продолжить;
				КонецЕсли;
				Если Отбор.ИмяТЧ = "Трудозатраты" И СтрокаЭтап.ПроизводствоНаСтороне <> Ложь Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Отбор.Свойство("МинимальныйНомерЭтапа")
				И СтрокаЭтап.Номер < Отбор.МинимальныйНомерЭтапа Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ Отбор.Свойство("ВидЭлемента") ИЛИ Отбор.ВидЭлемента = "Этап" Тогда
				НоваяСтрокаЭтап = Результат.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтап, СтрокаЭтап);
			Иначе
				НоваяСтрокаЭтап = Результат;
			КонецЕсли;
			
			//++ НЕ УТКА
			Если (НЕ Отбор.Свойство("ВидЭлемента") ИЛИ Отбор.ВидЭлемента = "Операция")
					И (НЕ Отбор.Свойство("Этап") ИЛИ Отбор.Этап = СтрокаЭтап.Ссылка) Тогда
				Для каждого СтрокаОперация Из СтрокаЭтап.Строки Цикл
					НоваяСтрокаОперация = НоваяСтрокаЭтап.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОперация, СтрокаОперация);
				КонецЦикла;
			КонецЕсли;
			//-- НЕ УТКА
			
		КонецЦикла;
	
	Иначе
		
		Результат = ДеревоЭлементов;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТаблицаЭлементовПроизводственногоПроцессаВХранилище(Отбор = Неопределено)
	
	Возврат ПоместитьВоВременноеХранилище(
		ТаблицаЭлементовПроизводственногоПроцесса(Отбор),
		УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ДеревоЭлементовПроизводственногоПроцессаДляВыбораВХранилище(Отбор = Неопределено)
	
	Возврат ПоместитьВоВременноеХранилище(
		ДеревоЭлементовПроизводственногоПроцессаДляВыбора(Отбор),
		УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЭлементаПроизводтвенногоПроцесса(Форма, ДанныеСтроки, АвтоПодбор = Ложь)
	
	Результат = "";
	Шаблон    = ?(АвтоПодбор, "%2 (%1)", "%1 / %2");
	
	Если ТипЗнч(ДанныеСтроки) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ЭтапРедактирование) Тогда
			Результат = ДанныеСтроки.ЭтапРедактированиеПредставление;
		КонецЕсли;
		//++ НЕ УТКА
		Если ЗначениеЗаполнено(ДанныеСтроки.ОперацияРедактирование)
				И Форма.ХранитьОперацииВРесурсныхСпецификациях Тогда
			Результат = СтрШаблон(Шаблон, Результат, ДанныеСтроки.ОперацияРедактированиеПредставление);
		КонецЕсли;
		//-- НЕ УТКА
		
	Иначе
		
		Если ДанныеСтроки.ВидЭлемента = "Этап" Тогда
			
			Результат = ДанныеСтроки.Наименование;
			
		//++ НЕ УТКА
		ИначеЕсли Форма.ХранитьОперацииВРесурсныхСпецификациях Тогда
			
			Результат = СтрШаблон(Шаблон, ДанныеСтроки.Родитель.Наименование, ДанныеСтроки.Наименование);
			
		//-- НЕ УТКА
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеЭлементаПроизводственногоПроцессаВСтроке(Форма, ДанныеСтроки, ВыбранноеЗначение)
	
	ДанныеСтроки.ЭтапРедактирование                  = ВыбранноеЗначение.Этап;
	ДанныеСтроки.ЭтапРедактированиеПредставление     = ВыбранноеЗначение.ЭтапПредставление;
	//++ НЕ УТКА
	ДанныеСтроки.ОперацияРедактирование              = ВыбранноеЗначение.Операция;
	ДанныеСтроки.ОперацияРедактированиеПредставление = ВыбранноеЗначение.ОперацияПредставление;
	//-- НЕ УТКА
	ДанныеСтроки.ЭлементПроизводственногоПроцессаПредставление = ПредставлениеЭлементаПроизводтвенногоПроцесса(Форма, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Функция ДанныеВыбораЭлементаПроизводственногоПроцесса(ИмяТЧ, СтрокаПоиска, Сопоставление = Ложь)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяТЧ", ИмяТЧ);
	//++ НЕ УТКА
	Если ИмяТЧ = "ПромежуточныйВыпуск" Тогда
		Отбор.Вставить("ВидЭлемента", "Этап");
		Отбор.Вставить("МинимальныйНомерЭтапа", ПроизводственныйПроцессЭтап.НомерЭтапа + 1);
	КонецЕсли;
	//-- НЕ УТКА
	
	Результат = Новый СписокЗначений();
	
	Для каждого СтрокаЭтап Из ДеревоЭлементовПроизводственногоПроцессаДляВыбора(Отбор).Строки Цикл
		
		Если Результат.Количество() > ?(Сопоставление, 0, 49) Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаПредставление = ПредставлениеЭлементаПроизводтвенногоПроцесса(ЭтотОбъект, СтрокаЭтап, Истина);
		
		СтруктураЗначения = РедакторПроизводственногоПроцессаКлиентСервер.СтруктураЗначенияЭлементаПроизводственногоПроцессаКонструктор();
		СтруктураЗначения.Этап              = СтрокаЭтап.Ссылка;
		СтруктураЗначения.ЭтапПредставление = СтрокаЭтап.Наименование;
		
		Если Сопоставление Тогда
			Если НРег(СтрокаПредставление) = НРег(СтрокаПоиска) Тогда
				Результат.Добавить(СтруктураЗначения, СтрокаПредставление);
				Продолжить;
			КонецЕсли;
		Иначе
			Если НРег(Лев(СтрокаЭтап.Наименование, СтрДлина(СтрокаПоиска))) = НРег(СтрокаПоиска) Тогда
				Результат.Добавить(СтруктураЗначения, СтрокаПредставление,, СтрокаЭтап.Картинка);
			КонецЕсли;
		КонецЕсли;
		
		//++ НЕ УТКА
		Для каждого СтрокаОперация Из СтрокаЭтап.Строки Цикл
			
			СтрокаПредставление = ПредставлениеЭлементаПроизводтвенногоПроцесса(ЭтотОбъект, СтрокаОперация, Истина);
			
			СтруктураЗначения = РедакторПроизводственногоПроцессаКлиентСервер.СтруктураЗначенияЭлементаПроизводственногоПроцессаКонструктор();
			СтруктураЗначения.Этап                  = СтрокаЭтап.Ссылка;
			СтруктураЗначения.ЭтапПредставление     = СтрокаЭтап.Наименование;
			СтруктураЗначения.Операция              = СтрокаОперация.Ссылка;
			СтруктураЗначения.ОперацияПредставление = СтрокаОперация.Наименование;
			
			Если Сопоставление Тогда
				Если НРег(СтрокаПредставление) = НРег(СтрокаПоиска) Тогда
					Результат.Добавить(СтруктураЗначения, СтрокаПредставление);
					Прервать;
				КонецЕсли;
			Иначе
				Если НРег(Лев(СтрокаОперация.Наименование, СтрДлина(СтрокаПоиска))) = НРег(СтрокаПоиска) Тогда
					Результат.Добавить(СтруктураЗначения, СтрокаПредставление, , СтрокаОперация.Картинка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		//-- НЕ УТКА
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораЭлементаПроизводственногоПроцесса(ИмяТЧ, ВыбранноеЗначение)
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	ТабличнаяЧасть = Объект[СоответствиеТаблицФормыИменамТЧ()[ИмяТЧ]];
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			ДанныеСтроки = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
			УстановитьЗначениеЭлементаПроизводственногоПроцессаВСтроке(ЭтотОбъект, ДанныеСтроки, ВыбранноеЗначение);
			
		Иначе
			
			ПроизводственныйПроцессОчиститьВыбранныйЭлемент(ЭтотОбъект, ДанныеСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяТЧ = "МатериалыИУслуги" Тогда
		
		ОбработатьИзменениеЭтапаМатериалыИУслуги(ВыделенныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЭлементаПроизводственногоПроцессаПоПредставлению(ИмяТЧ, ДанныеСтроки, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") И НЕ ПустаяСтрока(ВыбранноеЗначение) Тогда
		
		ДанныеВыбора = ДанныеВыбораЭлементаПроизводственногоПроцесса(ИмяТЧ, ВыбранноеЗначение, Истина);
		
		Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
			ВыбранноеЗначение = ДанныеВыбора[0].Значение;
			УстановитьЗначениеЭлементаПроизводственногоПроцессаВСтроке(ЭтотОбъект, ДанныеСтроки, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ОбработкаВыбораЭлементаПроизводственногоПроцесса(ИмяТЧ, ВыбранноеЗначение);
		
	Иначе
		
		ПроизводственныйПроцессОчиститьВыбранныйЭлемент(ЭтотОбъект, ДанныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроизводственныйПроцессОчиститьВыбранныйЭлемент(Форма, ДанныеСтроки)
	
	УстановитьЗначениеЭлементаПроизводственногоПроцессаВСтроке(
		Форма,
		ДанныеСтроки,
		РедакторПроизводственногоПроцессаКлиентСервер.СтруктураЗначенияЭлементаПроизводственногоПроцессаКонструктор());
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессОткрытьФормуВыбораЭлемента(ИмяТЧ, ДанныеСтроки)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяТЧ", ИмяТЧ);
	СтруктураПараметров.Вставить("ТекущаяСсылка", ДанныеСтроки.ЭтапРедактирование);
	//++ НЕ УТКА
	Если ЗначениеЗаполнено(ДанныеСтроки.ОперацияРедактирование)
			И ХранитьОперацииВРесурсныхСпецификациях Тогда
		СтруктураПараметров.Вставить("ТекущаяСсылка", ДанныеСтроки.ОперацияРедактирование);
	КонецЕсли;
	Если ИмяТЧ = "ПромежуточныйВыпуск" Тогда
		СтруктураПараметров.Вставить("ВидЭлемента", "Этап");
		СтруктураПараметров.Вставить("МинимальныйНомерЭтапа", ПроизводственныйПроцессЭтап.НомерЭтапа + 1);
	КонецЕсли;
	//-- НЕ УТКА
	СтруктураПараметров.Вставить("АдресВХранилище", ДеревоЭлементовПроизводственногоПроцессаДляВыбораВХранилище(СтруктураПараметров));
	
	ОткрытьФорму(
		"Справочник.РесурсныеСпецификации.Форма.ФормаВыбораЭлементаПроизводственногоПроцесса",
		СтруктураПараметров,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область Кэш

&НаСервере
Процедура ПроизводственныйПроцессИнициализироватьКэш()
	
	ПроизводственныйПроцессКэш = Новый Структура;
	
	ПроизводственныйПроцессКэш.Вставить("АдресДополнительныхДанных", Неопределено);
	ПроизводственныйПроцессКэш.Вставить("ПараметрыПодразделений",    Новый Соответствие());
	ПроизводственныйПроцессКэш.Вставить("ЭтапКоличество",            0);
	ПроизводственныйПроцессКэш.Вставить("ОперацияКоличество",        0);
	ПроизводственныйПроцессКэш.Вставить("ЕстьМногооперационныйЭтап", Ложь);
	
	СвойстваДоступны = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения")
		И УправлениеСвойствами.СвойстваДоступны();
	
	ОписаниеСвойствЭлементов = Новый Соответствие();
	Для каждого ВидЭлемента Из РедакторПроизводственногоПроцессаКлиентСервер.ВидыЭлементов() Цикл
		
		ОписаниеСвойств = ПроизводственныйПроцессОписаниеСвойствЭлемента(ВидЭлемента);
		ОписаниеСвойствЭлементов.Вставить(ВидЭлемента, ОписаниеСвойств);
		
		Если СвойстваДоступны Тогда
			ЗначениеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				УправлениеСвойствами.НаборСвойствПоИмени("Справочник_"+ОписаниеСвойств.ИмяТипаЭлемента), "ДополнительныеРеквизиты");
			ИспользоватьДопРеквизиты = ЗначениеЗаполнено(ЗначениеРеквизитов.ДополнительныеРеквизиты)
				И НЕ ЗначениеРеквизитов.ДополнительныеРеквизиты.Пустой();
		Иначе
			ИспользоватьДопРеквизиты = Ложь;
		КонецЕсли;
		ПроизводственныйПроцессКэш.Вставить(ОписаниеСвойств["ИспользоватьДопРеквизиты"], ИспользоватьДопРеквизиты);
		
	КонецЦикла;
	ПроизводственныйПроцессКэш.Вставить("ОписаниеСвойствЭлементов", Новый ФиксированноеСоответствие(ОписаниеСвойствЭлементов));
	
КонецПроцедуры

&НаСервере
Функция ПроизводственныйПроцессПолучитьКэшЭлементов()
	
	Если ЭтоАдресВременногоХранилища(ПроизводственныйПроцессКэш.АдресДополнительныхДанных) Тогда
		КэшЭлементов = ПолучитьИзВременногоХранилища(ПроизводственныйПроцессКэш.АдресДополнительныхДанных); // Соответствие
		Для каждого КлючИЗначение Из КэшЭлементов Цикл
			КэшЭлемента = КлючИЗначение.Значение;
			Если ЗначениеЗаполнено(КэшЭлемента.ОбъектСериализованный) Тогда
				КэшЭлемента.Объект = ПроизводственныйПроцессДесериализовать(КэшЭлемента.ОбъектСериализованный);
			КонецЕсли;
		КонецЦикла;
	Иначе
		КэшЭлементов = Новый Соответствие;
	КонецЕсли;
	
	Возврат КэшЭлементов;
	
КонецФункции

&НаСервере
Процедура ПроизводственныйПроцессСохранитьКэшЭлементов(КэшЭлементов)
	
	Для каждого КлючИЗначение Из КэшЭлементов Цикл
		КэшЭлемента = КлючИЗначение.Значение;
		Если КэшЭлемента.Объект <> Неопределено Тогда
			КэшЭлемента.ОбъектСериализованный = ПроизводственныйПроцессСериализовать(КэшЭлемента.Объект);
			КэшЭлемента.Объект = Неопределено;
		КонецЕсли;
	КонецЦикла;
	ПроизводственныйПроцессКэш.АдресДополнительныхДанных = ПоместитьВоВременноеХранилище(КэшЭлементов, УникальныйИдентификатор);
	КэшЭлементов = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПроизводственныйПроцессОчиститьКэшЭлементов()
	
	ПроизводственныйПроцессКэш.АдресДополнительныхДанных = ПоместитьВоВременноеХранилище(Новый Соответствие, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПроизводственныйПроцессКэшЭлементаКонструктор(ВидЭлемента)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Объект",                Неопределено);
	Результат.Вставить("ОбъектСериализованный", Неопределено);
	Результат.Вставить("Заполнен",              Ложь);
	Результат.Вставить("Удален",                Ложь);
	Результат.Вставить("Записывать",            Ложь);
	
	РеквизитыФормы = Новый Структура;
	
	Если ВидЭлемента = "Этап" Тогда
		
		РеквизитыФормы.Вставить("ЭтапИнтервалПланирования");
		
		// Реквизиты МК
		РеквизитыФормы.Вставить("ЭтапРассчитыватьКоэффициент");
		РеквизитыФормы.Вставить("ЭтапРазбиватьМаршрутныеЛисты");
		РеквизитыФормы.Вставить("ЭтапРазбиватьМаршрутныеЛистыПоМаршрутнойКарте");
		РеквизитыФормы.Вставить("ЭтапМаксимальноеКоличествоЕдиницПартийИзделия");
		
	//++ НЕ УТКА
	ИначеЕсли ВидЭлемента = "Операция" Тогда
		
		// Реквизиты вида рабочего центра
		РеквизитыФормы.Вставить("ОперацияИспользуютсяВариантыНаладки");
		РеквизитыФормы.Вставить("ОперацияПараллельнаяЗагрузка");
		РеквизитыФормы.Вставить("ОперацияВремяРаботыПриСинхроннойЗагрузке");
		РеквизитыФормы.Вставить("ОперацияЕдиницаИзмеренияПриСинхроннойЗагрузке");
		РеквизитыФормы.Вставить("ОперацияЕдиницаИзмеренияЗагрузки");
		РеквизитыФормы.Вставить("ОперацияСинхроннаяЗагрузка");
		
		// Реквизиты ТП
		РеквизитыФормы.Вставить("ОперацияРассчитыватьКоэффициент");
		
		// Доп. реквизиты
		РеквизитыФормы.Вставить("ОперацияДопРеквизиты");
		РеквизитыФормы.Вставить("ОперацияДопРеквизитыКоличество");
		
	//-- НЕ УТКА
	КонецЕсли;
	
	Результат.Вставить("РеквизитыФормы", РеквизитыФормы);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроизводственныйПроцессПолучитьКэшЭлемента(КэшЭлементов, ДанныеСтроки, ПолучитьОбъект = Ложь)
	
	КэшЭлемента = КэшЭлементов.Получить(ДанныеСтроки.Ссылка);
	Если КэшЭлемента = Неопределено Тогда
		
		КэшЭлемента = ПроизводственныйПроцессКэшЭлементаКонструктор(ДанныеСтроки.ВидЭлемента);
		Если ПолучитьОбъект Тогда
			КэшЭлемента.Объект = ДанныеСтроки.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		КэшЭлементов.Вставить(ДанныеСтроки.Ссылка, КэшЭлемента);
		
	КонецЕсли;
	
	Возврат КэшЭлемента;
	
КонецФункции

&НаСервере
Процедура ПроизводственныйПроцессЗакэшироватьРеквизитыФормы(КэшЭлемента)
	
	РеквизитыФормы = КэшЭлемента.РеквизитыФормы;
	
	Для каждого КлючИЗначение Из РеквизитыФормы Цикл
		
		ИмяРеквизита = КлючИЗначение.Ключ;
		
		Если ТипЗнч(ЭтотОбъект[ИмяРеквизита]) = Тип("ДанныеФормыКоллекция") Тогда
			РеквизитыФормы[ИмяРеквизита] = ЭтотОбъект[ИмяРеквизита].Выгрузить();
		Иначе
			РеквизитыФормы[ИмяРеквизита] = ЭтотОбъект[ИмяРеквизита];
		КонецЕсли;
		
	КонецЦикла;
	
	КэшЭлемента.Заполнен = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПроизводственныйПроцессВосстановитьРеквизитыФормыИзКэша(КэшЭлемента)
	
	Для каждого КлючИЗначение Из КэшЭлемента.РеквизитыФормы Цикл
		
		ИмяРеквизита      = КлючИЗначение.Ключ;
		ЗначениеРеквизита = КлючИЗначение.Значение;
		
		Если ТипЗнч(ЗначениеРеквизита) = Тип("ТаблицаЗначений") Тогда
			ЭтотОбъект[ИмяРеквизита].Загрузить(ЗначениеРеквизита);
		Иначе
			ЭтотОбъект[ИмяРеквизита] = ЗначениеРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроизводственныйПроцессПолучитьПараметрыПодразделения(Форма, Подразделение)
	
	ПараметрыПодразделений = Форма.ПроизводственныйПроцессКэш.ПараметрыПодразделений; // Соответствие
	ПараметрыПодразделения = ПараметрыПодразделений.Получить(Подразделение);
	
	Если ПараметрыПодразделения = Неопределено Тогда
		
		ПараметрыПодразделения = ПроизводственныйПроцессПолучитьПараметрыПодразделенияНаСервере(Подразделение);
		ПараметрыПодразделений.Вставить(Подразделение, ПараметрыПодразделения);
		
		Форма.ПроизводственныйПроцессКэш.ПараметрыПодразделений = ПараметрыПодразделений;
		
	КонецЕсли;
	
	Возврат ПараметрыПодразделения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроизводственныйПроцессПолучитьПараметрыПодразделенияНаСервере(Подразделение)
	
	Возврат ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПараметрыПроизводственногоПодразделения(Подразделение)
	
	ПараметрыПодразделения = ПроизводственныйПроцессКэш.ПараметрыПодразделений.Получить(Подразделение);
	Если ПараметрыПодразделения <> Неопределено Тогда
		ПроизводственныйПроцессКэш.ПараметрыПодразделений.Удалить(Подразделение);
		ПроизводственныйПроцессПолучитьПараметрыПодразделения(ЭтотОбъект, Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроизводственныйПроцессСериализовать(Объект)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписатьXML(ЗаписьXML, Объект);
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

&НаСервере
Функция ПроизводственныйПроцессДесериализовать(ОбъектСериализованный)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОбъектСериализованный);
	Возврат ПрочитатьXML(ЧтениеXML);
	
КонецФункции

#КонецОбласти

#Область ДополнительныеРеквизитыИСведения

&НаКлиенте
Процедура ПроизводственныйПроцессРедактироватьДопРеквизиты()
	
	ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	ТекущиеДанные = Элементы.ПроизводственныйПроцесс.ТекущиеДанные;
	СвойстваЭлемента = ОписаниеСвойствЭлементов.Получить(ТекущиеДанные.ВидЭлемента);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидЭлемента",            ТекущиеДанные.ВидЭлемента);
	ПараметрыФормы.Вставить("ТолькоПросмотр",         ТекущиеДанные.ТолькоПросмотр ИЛИ ТолькоПросмотр);
	ПараметрыФормы.Вставить("Заголовок",              ТекущиеДанные.Наименование);
	ПараметрыФормы.Вставить("ИмяТипаЭлемента",        СвойстваЭлемента.ИмяТипаЭлемента);
	ПараметрыФормы.Вставить("АдресТаблицыСвойств",    ПроизводственныйПроцессПоместитьДопРеквизиты());
	ПараметрыФормы.Вставить("ИдентификаторВладельца", УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроизводственныйПроцессПослеРедактированияДопРеквизитов",
		ЭтотОбъект);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаРедактированияДополнительныхРеквизитов",
		ПараметрыФормы, ЭтотОбъект, ТекущиеДанные.Ссылка,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция ПроизводственныйПроцессПоместитьДопРеквизиты()
	
	ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	ТекущаяСтрока    = Элементы.ПроизводственныйПроцесс.ТекущаяСтрока;
	ТекущиеДанные    = ПроизводственныйПроцесс.НайтиПоИдентификатору(ТекущаяСтрока);
	СвойстваЭлемента = ОписаниеСвойствЭлементов.Получить(ТекущиеДанные.ВидЭлемента);
	
	ТекущийОбъект = ЭтотОбъект[СвойстваЭлемента.ИмяРеквизитаОбъекта];
	ДополнительныеРеквизиты = ТекущийОбъект.ДополнительныеРеквизиты.Выгрузить();
	
	Возврат ПоместитьВоВременноеХранилище(ДополнительныеРеквизиты, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПроизводственныйПроцессПослеРедактированияДопРеквизитов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ЭтоАдресВременногоХранилища(Результат) Тогда
		
		ПроизводственныйПроцессПослеРедактированияДопРеквизитовНаСервере(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизводственныйПроцессПослеРедактированияДопРеквизитовНаСервере(АдресРезультата)
	
	ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	ТекущаяСтрока    = Элементы.ПроизводственныйПроцесс.ТекущаяСтрока;
	ТекущиеДанные    = ПроизводственныйПроцесс.НайтиПоИдентификатору(ТекущаяСтрока);
	СвойстваЭлемента = ОписаниеСвойствЭлементов.Получить(ТекущиеДанные.ВидЭлемента);
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ТекущийОбъект = ЭтотОбъект[СвойстваЭлемента.ИмяРеквизитаОбъекта];
	ТекущийОбъект.ДополнительныеРеквизиты.Загрузить(Результат);
	
	КэшЭлементов = ПроизводственныйПроцессПолучитьКэшЭлементов();
	КэшЭлемента = ПроизводственныйПроцессПолучитьКэшЭлемента(КэшЭлементов, ТекущиеДанные);
	КэшЭлемента.Записывать = Истина;
	ПроизводственныйПроцессСохранитьКэшЭлементов(КэшЭлементов);
	
	НастроитьЭлементыДополнительныхРеквизитовИСведений(ТекущийОбъект, ТекущиеДанные.ВидЭлемента);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыДополнительныхРеквизитовИСведений(ТекущийОбъект, ВидЭлемента)
	
	ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	СвойстваЭлементов = ОписаниеСвойствЭлементов.Получить(ВидЭлемента);
	
	Если ПроизводственныйПроцессКэш[СвойстваЭлементов["ИспользоватьДопРеквизиты"]] Тогда
		
		ТекстСсылки = НСтр("ru = 'Дополнительные реквизиты';
							|en = 'Additional attributes'")
			+ ?(ТекущийОбъект.ДополнительныеРеквизиты.Количество() > 0,
				СтрШаблон(" (%1)", ТекущийОбъект.ДополнительныеРеквизиты.Количество()),
				"");
		
		ЭтотОбъект[СвойстваЭлементов["ДополнительныеРеквизиты"]] = Новый ФорматированнаяСтрока(
			ТекстСсылки,,,,"#ДополнительныеРеквизиты");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессРедактироватьДопСведения()
	
	ТекущиеДанные = Элементы.ПроизводственныйПроцесс.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроизводственныйПроцессЭлементЗаписан(ТекущиеДанные.Ссылка) Тогда
		ПроизводственныйПроцессРедактироватьДопСведенияЭлемента(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Элемент ""%1"" не записан.
	|Редактирование дополнительных сведений возможно только после записи производственного процесса.
	|Записать и продолжить?';
	|en = 'Element ""%1"" is not saved yet.
	|Editing additional information records is only available after the production process has been saved.
	|Save and continue?'"), ТекущиеДанные.Наименование);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроизводственныйПроцессРедактироватьДопСведенияЗавершение",
		ЭтотОбъект, ТекущиеДанные.Ссылка);
		
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессРедактироватьДопСведенияЗавершение(РезультатВопроса, Параметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если Записать() Тогда
			
			ПроизводственныйПроцессРедактироватьДопСведенияЭлемента(Параметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессРедактироватьДопСведенияЭлемента(Ссылка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка", Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеДополнительныхСведений",
		ПараметрыФормы, ЭтотОбъект, Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеДереваЭлементов

&НаСервере
Процедура ПроизводственныйПроцессДобавитьЭтапНаСервере()
	
	КоллекцияЭлементов = ПроизводственныйПроцесс.ПолучитьЭлементы();
	
	НомерЭтапа = ПроизводственныйПроцессПолучитьНовыйНомер(КоллекцияЭлементов);
	
	КэшЭлементов = ПроизводственныйПроцессПолучитьКэшЭлементов();
	
	ЭтапОбъект = Справочники.ЭтапыПроизводства.СоздатьЭлемент();
	ЭтапОбъект.Заполнить(Неопределено);
	ЭтапОбъект.Владелец             = Объект.Ссылка;
	ЭтапОбъект.НомерЭтапа           = НомерЭтапа;
	ЭтапОбъект.НомерСледующегоЭтапа = 0;
	ЭтапОбъект.Партнер              = Справочники.Организации.ПустаяСсылка();
	ЭтапОбъект.Наименование         = СтрШаблон(НСтр("ru = 'Новый этап %1';
													|en = 'New stage %1'"), НомерЭтапа);
	ЭтапОбъект.УстановитьСсылкуНового(Справочники.ЭтапыПроизводства.ПолучитьСсылку());
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("СкорректироватьНумерацию");
	
	НоваяСтрока = ПроизводственныйПроцессДобавитьНовыйЭтап(
		ЭтапОбъект, КэшЭлементов, КоллекцияЭлементов, ПараметрыДобавления);
	
	Элементы.ПроизводственныйПроцесс.ТекущаяСтрока = НоваяСтрока;
	
	ПроизводственныйПроцессСохранитьКэшЭлементов(КэшЭлементов);
	
	ОбработатьИзменениеПроизводственногоПроцесса(НоваяСтрока);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПроизводственныйПроцесс");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПроизводственныйПроцессДобавитьНовыйЭтап(ЭтапОбъект, КэшЭлементов, Коллекция, Параметры)
	
	НоваяСтрока = Коллекция.Добавить();
	НоваяСтрока.Наименование    = ЭтапОбъект.Наименование;
	НоваяСтрока.Номер           = ЭтапОбъект.НомерЭтапа;
	НоваяСтрока.НомерСледующего = ЭтапОбъект.НомерСледующегоЭтапа;
	НоваяСтрока.Ссылка          = ЭтапОбъект.ПолучитьСсылкуНового();
	НоваяСтрока.ВидЭлемента     = РедакторПроизводственногоПроцессаКлиентСервер.ВидЭлементаПоСсылке(НоваяСтрока.Ссылка);
	
	РедакторПроизводственногоПроцессаКлиентСервер.УстановитьКартинкуЭлемента(НоваяСтрока);
	
	КэшЭлемента  = ПроизводственныйПроцессКэшЭлементаКонструктор(НоваяСтрока.ВидЭлемента);
	КэшЭлемента.Объект     = ЭтапОбъект;
	КэшЭлемента.Записывать = Истина;
	КэшЭлементов.Вставить(НоваяСтрока.Ссылка, КэшЭлемента);
	
	Если Параметры.Свойство("СкорректироватьНумерацию") Тогда
		ПроизводственныйПроцессСкорректироватьНумерациюПослеДобавленияЭлемента(КэшЭлементов, Коллекция, ЭтапОбъект.НомерЭтапа);
	КонецЕсли;
	
	ПроизводственныйПроцессСкорректироватьСчетчикЭлементов(НоваяСтрока.ВидЭлемента, 1);
	
	Возврат НоваяСтрока.ПолучитьИдентификатор();
	
КонецФункции

//++ НЕ УТКА

&НаСервере
Процедура ПроизводственныйПроцессДобавитьОперациюНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные = Производственныйпроцесс.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	КоллекцияЭлементов = ТекущиеДанные.ПолучитьЭлементы();
	
	НомерОперации = ПроизводственныйПроцессПолучитьНовыйНомер(КоллекцияЭлементов);
	
	КэшЭлементов = ПроизводственныйПроцессПолучитьКэшЭлементов();
	
	ОперацияОбъект = Справочники.ТехнологическиеОперации.СоздатьЭлемент();
	ОперацияОбъект.Заполнить(Неопределено);
	ОперацияОбъект.Владелец               = ТекущиеДанные.Ссылка;
	ОперацияОбъект.НомерОперации          = НомерОперации;
	ОперацияОбъект.НомерСледующейОперации = 0;
	ОперацияОбъект.Наименование           = СтрШаблон(НСтр("ru = 'Новая операция %1';
															|en = 'New operation %1'"), НомерОперации);
	ОперацияОбъект.УстановитьСсылкуНового(Справочники.ТехнологическиеОперации.ПолучитьСсылку());
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("СкорректироватьНумерацию");
	
	НоваяСтрока = ПроизводственныйПроцессДобавитьНовуюОперацию(
		ОперацияОбъект, КэшЭлементов, КоллекцияЭлементов, ПараметрыДобавления);
	
	Элементы.ПроизводственныйПроцесс.ТекущаяСтрока = НоваяСтрока;
	
	ПроизводственныйПроцессСохранитьКэшЭлементов(КэшЭлементов);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПроизводственныйПроцесс");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПроизводственныйПроцессДобавитьНовуюОперацию(ОперацияОбъект, КэшЭлементов, Коллекция, Параметры)
	
	НоваяСтрока = Коллекция.Добавить();
	НоваяСтрока.Наименование    = ОперацияОбъект.Наименование;
	НоваяСтрока.Номер           = ОперацияОбъект.НомерОперации;
	НоваяСтрока.НомерСледующего = ОперацияОбъект.НомерСледующейОперации;
	НоваяСтрока.РабочийЦентр    = ОперацияОбъект.РабочийЦентр;
	НоваяСтрока.Ссылка          = ОперацияОбъект.ПолучитьСсылкуНового();
	НоваяСтрока.ВидЭлемента     = РедакторПроизводственногоПроцессаКлиентСервер.ВидЭлементаПоСсылке(НоваяСтрока.Ссылка);
	
	Если ОперацияОбъект.СодержитТехнологическийПроцесс Тогда
		НоваяСтрока.ТехнологическийПроцесс = ОперацияОбъект.ТехнологическийПроцесс;
	КонецЕсли;
	
	РедакторПроизводственногоПроцессаКлиентСервер.УстановитьКартинкуЭлемента(НоваяСтрока);
	
	КэшЭлемента  = ПроизводственныйПроцессКэшЭлементаКонструктор(НоваяСтрока.ВидЭлемента);
	КэшЭлемента.Объект     = ОперацияОбъект;
	КэшЭлемента.Записывать = Истина;
	КэшЭлементов.Вставить(НоваяСтрока.Ссылка, КэшЭлемента);
	
	Если Параметры.Свойство("СкорректироватьНумерацию") Тогда
		ПроизводственныйПроцессСкорректироватьНумерациюПослеДобавленияЭлемента(КэшЭлементов, Коллекция, ОперацияОбъект.НомерОперации);
	КонецЕсли;
	
	ПроизводственныйПроцессСкорректироватьСчетчикЭлементов(НоваяСтрока.ВидЭлемента, 1);
	
	Возврат НоваяСтрока.ПолучитьИдентификатор();
	
КонецФункции

//-- НЕ УТКА

&НаСервере
Процедура ПроизводственныйПроцессКопироватьЭлементНаСервере(ИдентификаторСтроки)
	
	ДанныеСтроки = Производственныйпроцесс.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	КэшЭлементов = ПроизводственныйПроцессПолучитьКэшЭлементов();
	
	ПроизводственныйПроцессЗакэшироватьТекущийЭлемент(КэшЭлементов);
	
	НоваяСтрока = ПроизводственныйПроцессКопироватьЭлементРекурсивно(
		ДанныеСтроки, ДанныеСтроки.ПолучитьРодителя(), КэшЭлементов);
	
	ПроизводственныйПроцессСохранитьКэшЭлементов(КэшЭлементов);
	
	Элементы.ПроизводственныйПроцесс.ТекущаяСтрока = НоваяСтрока;
	
	ОбработатьИзменениеПроизводственногоПроцесса(НоваяСтрока);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПроизводственныйПроцессКопироватьЭлементРекурсивно(ДанныеСтрокиИсточника, ДанныеСтрокиРодителя, КэшЭлементов)
	
	КоллекцияЭлементов = ?(ДанныеСтрокиРодителя = Неопределено, ПроизводственныйПроцесс.ПолучитьЭлементы(), ДанныеСтрокиРодителя.ПолучитьЭлементы());
	
	НоваяСтрока = КоллекцияЭлементов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиИсточника);
	
	Если НЕ НоваяСтрока.ТолькоПросмотр Тогда
		
		ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
		СвойстваЭлемента = ОписаниеСвойствЭлементов.Получить(ДанныеСтрокиИсточника.ВидЭлемента);
		
		КэшЭлементаИсточника = КэшЭлементов.Получить(ДанныеСтрокиИсточника.Ссылка);
		Если КэшЭлементаИсточника = Неопределено Тогда
			НовыйОбъект = ДанныеСтрокиИсточника.Ссылка.Скопировать();
		Иначе
			НовыйОбъект = КэшЭлементаИсточника.Объект.Скопировать();
			ЗаполнитьЗначенияСвойств(НовыйОбъект,
				КэшЭлементаИсточника.Объект,
				СвойстваЭлемента.Номер+","+СвойстваЭлемента.НомерСледующего);
		КонецЕсли;
		//++ НЕ УТКА
		Если ДанныеСтрокиИсточника.ВидЭлемента = "Операция" Тогда
			НовыйОбъект.Владелец = ДанныеСтрокиРодителя.Ссылка;
		КонецЕсли;
		//-- НЕ УТКА
		НовыйОбъект.УстановитьСсылкуНового(Справочники[СвойстваЭлемента.ИмяТипаЭлемента].ПолучитьСсылку());
		
		КэшНовогоЭлемента = ПроизводственныйПроцессКэшЭлементаКонструктор(ДанныеСтрокиИсточника.ВидЭлемента);
		КэшНовогоЭлемента.Записывать = Истина;
		КэшНовогоЭлемента.Объект     = НовыйОбъект;
		
		НоваяСтрока.Ссылка = КэшНовогоЭлемента.Объект.ПолучитьСсылкуНового();
		КэшЭлементов.Вставить(НоваяСтрока.Ссылка, КэшНовогоЭлемента);
		
		ПроизводственныйПроцессСкорректироватьПозициюСтроки(ЭтотОбъект, НоваяСтрока);
		
		ПодчиненныеСтроки = ДанныеСтрокиИсточника.ПолучитьЭлементы();
		Для Индекс = 0 По ПодчиненныеСтроки.Количество() - 1 Цикл
			ПроизводственныйПроцессКопироватьЭлементРекурсивно(ПодчиненныеСтроки[Индекс], НоваяСтрока, КэшЭлементов);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НоваяСтрока.ПолучитьИдентификатор();
	
КонецФункции

&НаКлиенте
Процедура ВопросПроизводственныйПроцессПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПроизводственныйПроцессУдалитьЭлементы(ДополнительныеПараметры.ИдентификаторыСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизводственныйПроцессУдалитьЭлементы(ИдентификаторыСтрок)
	
	КэшЭлементов = ПроизводственныйПроцессПолучитьКэшЭлементов();
	СчетчикУдаленных = Новый Структура;
	//++ НЕ УТКА
	ЕстьТП = Ложь;
	СтруктураОтбораОтправитель = Новый Структура("ЭтапОтправитель");
	//-- НЕ УТКА
	
	Пока ИдентификаторыСтрок.Количество() > 0 Цикл
		
		ТекущийИдентификатор = ИдентификаторыСтрок[0];
		
		ДанныеСтроки = ПроизводственныйПроцесс.НайтиПоИдентификатору(ТекущийИдентификатор);
		Если ДанныеСтроки <> Неопределено И НЕ ДанныеСтроки.ТолькоПросмотр Тогда
			
			ВидЭлемента = ДанныеСтроки.ВидЭлемента;
			
			ПодчиненныеСтроки = ДанныеСтроки.ПолучитьЭлементы();
			Если ПодчиненныеСтроки.Количество() > 0 Тогда
				Для каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
					Если НЕ ПодчиненнаяСтрока.ТолькоПросмотр Тогда
						ИдентификаторыСтрок.Вставить(0, ПодчиненнаяСтрока.ПолучитьИдентификатор())
					КонецЕсли;
				КонецЦикла;
				Если ИдентификаторыСтрок[0] <> ТекущийИдентификатор Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			КэшЭлемента = ПроизводственныйПроцессПолучитьКэшЭлемента(КэшЭлементов, ДанныеСтроки);
			КэшЭлемента.Удален = Истина;
			
			Если СчетчикУдаленных.Свойство(ВидЭлемента) Тогда
				СчетчикУдаленных[ВидЭлемента] = СчетчикУдаленных[ВидЭлемента] + 1;
			Иначе
				СчетчикУдаленных.Вставить(ВидЭлемента, 1);
			КонецЕсли;
			
			//++ НЕ УТКА
			Если ЗначениеЗаполнено(ДанныеСтроки.ТехнологическийПроцесс) Тогда
				ЕстьТП = Истина;
			КонецЕсли;
			
			Если ВидЭлемента = "Этап"
				И Объект.ПромежуточныйВыпуск.Количество() > 0 Тогда
				СтруктураОтбораОтправитель.ЭтапОтправитель = ДанныеСтроки.Ссылка;
				Для каждого Строка Из Объект.ПромежуточныйВыпуск.НайтиСтроки(СтруктураОтбораОтправитель) Цикл
					Объект.ПромежуточныйВыпуск.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
			//-- НЕ УТКА
			
			ПроизводственныйПроцессПолучитьРодителя(ЭтотОбъект, ДанныеСтроки).ПолучитьЭлементы().Удалить(ДанныеСтроки);
			
		КонецЕсли;
		
		ИдентификаторыСтрок.Удалить(0);
		
	КонецЦикла;
	
	ПроизводственныйПроцессСохранитьКэшЭлементов(КэшЭлементов);
	
	ПроизводственныйПроцессОчиститьТекущийЭлемент(Истина);
	
	//++ НЕ УТКА
	Если ЕстьТП Тогда
		ПроизводственныйПроцессОбновитьИнформационныеПанели();
	КонецЕсли;
	//-- НЕ УТКА
	
	Для каждого КлючИЗначение Из СчетчикУдаленных Цикл
		ПроизводственныйПроцессСкорректироватьСчетчикЭлементов(КлючИЗначение.Ключ, -КлючИЗначение.Значение);
	КонецЦикла;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПроизводственныйПроцесс");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйПроцессПереместитьЭлемент(ДанныеСтроки, Смещение)
	
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ПроизводственныйПроцессПереместитьЭлементНаСервере(ДанныеСтроки.ПолучитьИдентификатор(), Смещение);
	
КонецПроцедуры

&НаСервере
Процедура ПроизводственныйПроцессПереместитьЭлементНаСервере(ИдентификаторСтроки, Смещение)
	
	ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	ТекущиеДанные            = ПроизводственныйПроцесс.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	КоллекцияЭлементов      = ПроизводственныйПроцессПолучитьРодителя(ЭтотОбъект, ТекущиеДанные).ПолучитьЭлементы();
	ИндексЭлемента          = КоллекцияЭлементов.Индекс(ТекущиеДанные);
	ИндексЭлементаГраничный = ?(Смещение < 0, 0, КоллекцияЭлементов.Количество()-1);
	
	Если ИндексЭлемента = ИндексЭлементаГраничный
			ИЛИ (Смещение < 0 И ТекущиеДанные.Номер = 1) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваЭлемента     = ОписаниеСвойствЭлементов.Получить(ТекущиеДанные.ВидЭлемента);
	КэшЭлементов         = ПроизводственныйПроцессПолучитьКэшЭлементов();
	НовыйНомер           = ТекущиеДанные.Номер + Смещение;
	НовыйНомерСледующего = ТекущиеДанные.НомерСледующего;
	ШагСмещения          = ?(Смещение < 0, -1, 1);
	
	Пока Истина Цикл
		
		ИндексЭлемента = ИндексЭлемента + ШагСмещения;
		Если ИндексЭлемента = (ИндексЭлементаГраничный + ШагСмещения)
				ИЛИ КоллекцияЭлементов[ИндексЭлемента].Номер <> НовыйНомер Тогда
			Прервать;
		КонецЕсли;
		
		Строка = КоллекцияЭлементов[ИндексЭлемента];
		Если ТекущиеДанные.НомерСледующего = Строка.Номер
				ИЛИ ТекущиеДанные.Номер = Строка.НомерСледующего Тогда
			НовыйНомерСледующего = Строка.НомерСледующего;
			Строка.НомерСледующего = ТекущиеДанные.НомерСледующего;
		КонецЕсли;
		Строка.Номер = Строка.Номер - ШагСмещения;
		
		КэшЭлемента = ПроизводственныйПроцессПолучитьКэшЭлемента(КэшЭлементов, Строка, Истина);
		КэшЭлемента.Объект[СвойстваЭлемента.Номер]           = Строка.Номер;
		КэшЭлемента.Объект[СвойстваЭлемента.НомерСледующего] = Строка.НомерСледующего;
		КэшЭлемента.Записывать = Истина;
		
	КонецЦикла;
	
	ТекущиеДанные.Номер           = НовыйНомер;
	ТекущиеДанные.НомерСледующего = НовыйНомерСледующего;
	
	ТекущийОбъект = ЭтотОбъект[СвойстваЭлемента.ИмяРеквизитаОбъекта];
	ТекущийОбъект[СвойстваЭлемента.Номер]           = ТекущиеДанные.Номер;
	ТекущийОбъект[СвойстваЭлемента.НомерСледующего] = ТекущиеДанные.НомерСледующего;
	
	ПроизводственныйПроцессСкорректироватьПозициюСтроки(ЭтотОбъект, ТекущиеДанные);
	
	ПроизводственныйПроцессСохранитьКэшЭлементов(КэшЭлементов);
	
	ОбработатьИзменениеПроизводственногоПроцесса(ИдентификаторСтроки);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроизводственныйПроцессСкорректироватьПозициюСтроки(Форма, ДанныеСтроки)
	
	РодительЭлемента       = ПроизводственныйПроцессПолучитьРодителя(Форма, ДанныеСтроки);
	КоллекцияЭлементов     = РодительЭлемента.ПолучитьЭлементы();
	КоличествоЭлементов    = КоллекцияЭлементов.Количество();
	ИндексТекущегоЭлемента = КоллекцияЭлементов.Индекс(ДанныеСтроки);
	
	Пока ИндексТекущегоЭлемента > 0
		И (КоллекцияЭлементов[ИндексТекущегоЭлемента-1].Номер > ДанныеСтроки.Номер
			ИЛИ (КоллекцияЭлементов[ИндексТекущегоЭлемента-1].Номер = ДанныеСтроки.Номер
				И ПроизводственныйПроцессСравнитьСсылки(КоллекцияЭлементов[ИндексТекущегоЭлемента-1].Ссылка, ДанныеСтроки.Ссылка) > 0)) Цикл
		КоллекцияЭлементов.Сдвинуть(ИндексТекущегоЭлемента,-1);
		ИндексТекущегоЭлемента = ИндексТекущегоЭлемента - 1;
	КонецЦикла;
	
	Пока ИндексТекущегоЭлемента < (КоличествоЭлементов - 1)
		И (КоллекцияЭлементов[ИндексТекущегоЭлемента+1].Номер < ДанныеСтроки.Номер
			ИЛИ (КоллекцияЭлементов[ИндексТекущегоЭлемента+1].Номер = ДанныеСтроки.Номер
				И ПроизводственныйПроцессСравнитьСсылки(КоллекцияЭлементов[ИндексТекущегоЭлемента+1].Ссылка, ДанныеСтроки.Ссылка) < 0)) Цикл
		КоллекцияЭлементов.Сдвинуть(ИндексТекущегоЭлемента,1);
		ИндексТекущегоЭлемента = ИндексТекущегоЭлемента + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроизводственныйПроцессСравнитьСсылки(Ссылка1, Ссылка2)
	
	СравнениеСсылок = Новый СравнениеЗначений();
	Возврат СравнениеСсылок.Сравнить(Ссылка1, Ссылка2);
	
КонецФункции

&НаСервере
Процедура ПроизводственныйПроцессСкорректироватьНумерациюПослеДобавленияЭлемента(КэшЭлементов, Коллекция, НомерСледующего)
	
	Если Коллекция.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Коллекция[Коллекция.Количество()-2];
	
	Если ДанныеСтроки.НомерСледующего <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	СвойстваЭлемента = ОписаниеСвойствЭлементов.Получить(ДанныеСтроки.ВидЭлемента);
	
	Если ПроизводственныйПроцессТекущаяСсылка = ДанныеСтроки.Ссылка Тогда
		
		ДанныеОбъекта = ЭтотОбъект[СвойстваЭлемента.ИмяРеквизитаОбъекта];
		ДанныеОбъекта[СвойстваЭлемента.НомерСледующего] = НомерСледующего;
		
	Иначе
		
		КэшЭлемента = ПроизводственныйПроцессПолучитьКэшЭлемента(КэшЭлементов, ДанныеСтроки, Истина);
		КэшЭлемента.Объект[СвойстваЭлемента.НомерСледующего] = НомерСледующего;
		КэшЭлемента.Записывать = Истина;
		
	КонецЕсли;
	
	ДанныеСтроки.НомерСледующего = НомерСледующего;
	
КонецПроцедуры

&НаСервере
Процедура ПроизводственныйПроцессСкорректироватьСчетчикЭлементов(ВидЭлемента, Изменение)
	
	ОписаниеСвойствЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	СвойстваЭлементов = ОписаниеСвойствЭлементов.Получить(ВидЭлемента);
	
	ПроизводственныйПроцессКэш[СвойстваЭлементов.Счетчик] =
		ПроизводственныйПроцессКэш[СвойстваЭлементов.Счетчик] + Изменение;
	
	Если ВидЭлемента = "Этап" Тогда
		
		ОбновитьРеквизитМногоэтапныйПроизводственныйПроцесс();
	
	//++ НЕ УТКА
	ИначеЕсли ВидЭлемента = "Операция" Тогда
		
		ЕстьМногооперационныйЭтап = ПроизводственныйПроцессКэш.ЕстьМногооперационныйЭтап;
		СвойстваЭлементовЭтапа = ОписаниеСвойствЭлементов.Получить("Этап");
		
		Если ПроизводственныйПроцессКэш[СвойстваЭлементов.Счетчик] > ПроизводственныйПроцессКэш[СвойстваЭлементовЭтапа.Счетчик] Тогда
			
			ЕстьМногооперационныйЭтап = Истина;
			
		ИначеЕсли (ЕстьМногооперационныйЭтап И Изменение < 0)
			ИЛИ (НЕ ЕстьМногооперационныйЭтап И Изменение > 0) Тогда
			
			ЕстьМногооперационныйЭтап = Ложь;
			Для каждого СтрокаЭтап Из ПроизводственныйПроцесс.ПолучитьЭлементы() Цикл
				Если СтрокаЭтап.ПолучитьЭлементы().Количество() > 1 Тогда
					ЕстьМногооперационныйЭтап = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьМногооперационныйЭтап <> ПроизводственныйПроцессКэш.ЕстьМногооперационныйЭтап Тогда
			ПроизводственныйПроцессКэш.ЕстьМногооперационныйЭтап = ЕстьМногооперационныйЭтап;
			Если НЕ ЕстьМногооперационныйЭтап Тогда
				Для каждого ИмяТЧ Из ИменаТабличныхЧастей() Цикл
					Для каждого Строка Из Объект[ИмяТЧ] Цикл
						Строка.ОперацияРедактирование              = Неопределено;
						Строка.ОперацияРедактированиеПредставление = "";
						Строка.ЭлементПроизводственногоПроцессаПредставление = ПредставлениеЭлементаПроизводтвенногоПроцесса(ЭтотОбъект, Строка);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	//-- НЕ УТКА
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура ВыбратьТехнологическийПроцесс(Режим)
	
	ДанныеСтрокиЭтапа = ПроизводственныйПроцессПолучитьТекущийЭтап(ЭтотОбъект);
	
	Если НЕ ПроверитьВозможностьДобавленияОперации(ДанныеСтрокиЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Статусы = Новый Массив;
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыТехнологическихПроцессов.Действует"));
	Если Режим = "Шаблон" Тогда
		Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыТехнологическихПроцессов.ВРазработке"));
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Подразделение", ДанныеСтрокиЭтапа.Подразделение);
	СтруктураОтбора.Вставить("Статус",        Статусы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("Режим", Режим);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Режим", Режим);
	ПараметрыОповещения.Вставить("ИдентификаторСтроки", ДанныеСтрокиЭтапа.ПолучитьИдентификатор());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьТехнологическийПроцессЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("Справочник.ТехнологическиеПроцессы.ФормаВыбора", ПараметрыФормы,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТехнологическийПроцессЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьТехнологическийПроцессЗавершениеНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьТехнологическийПроцессЗавершениеНаСервере(ТехнологическийПроцесс, Параметры)
	
	КэшЭлементов      = ПроизводственныйПроцессПолучитьКэшЭлементов();
	ДанныеСтрокиЭтапа = ПроизводственныйПроцесс.НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	ПоШаблону         = (Параметры.Режим = "Шаблон");
	ПереченьДанных    = ?(ПоШаблону, "", "Операции");
	
	ДанныеТП = Справочники.ТехнологическиеПроцессы.ДанныеТехнологическогоПроцесса(
		ТехнологическийПроцесс,
		ПереченьДанных,
		Объект.МатериалыИУслуги.Количество());
		
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("СкорректироватьНумерацию");
		
	Если ПоШаблону Тогда
		ИдентификаторСтроки = ДобавитьГруппуОперацийПоШаблону(
			КэшЭлементов, ДанныеСтрокиЭтапа, ДанныеТП, ПараметрыДобавления);
	Иначе
		ИдентификаторСтроки = ДобавитьТиповойТехнологическийПроцесс(
			КэшЭлементов, ДанныеСтрокиЭтапа, ДанныеТП, ПараметрыДобавления);
	КонецЕсли;
	
	ПроизводственныйПроцессСохранитьКэшЭлементов(КэшЭлементов);
	
	Элементы.ПроизводственныйПроцесс.ТекущаяСтрока = ИдентификаторСтроки;
	
	ПроизводственныйПроцессОбновитьИнформационныеПанели();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПроизводственныйПроцесс");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьГруппуОперацийПоШаблону(КэшЭлементов, ДанныеСтрокиЭтапа, ДанныеТП, Параметры)
	
	Операции = ДанныеТП.Операции;
	
	КоллекцияЭлементов     = ДанныеСтрокиЭтапа.ПолучитьЭлементы(); // ДанныеФормыКоллекция
	КоличествоЭлементов    = КоллекцияЭлементов.Количество();
	СоответствиеОпераций   = Новый Соответствие;
	ИдентификаторСтроки    = Неопределено;
	НомерОперацииПоследний = ?(КоличествоЭлементов = 0, 0, КоллекцияЭлементов[КоличествоЭлементов-1].Номер);
	ПерваяОперация         = ?(Операции.Количество(), Операции[0].Операция, Справочники.ТехнологическиеОперации.ПустаяСсылка());
	
	Для Индекс = 0 По Операции.Количество() - 1 Цикл
		
		ОперацияОбъект = Операции[Индекс].Операция.Скопировать();
		
		НомерОперации          = ОперацияОбъект.НомерОперации + НомерОперацииПоследний;
		НомерСледующейОперации = ?(ОперацияОбъект.НомерСледующейОперации = 0, 0, ОперацияОбъект.НомерСледующейОперации + НомерОперацииПоследний);
		
		ОперацияОбъект.Владелец               = ДанныеСтрокиЭтапа.Ссылка;
		ОперацияОбъект.НомерОперации          = НомерОперации;
		ОперацияОбъект.НомерСледующейОперации = НомерСледующейОперации;
		ОперацияОбъект.Основание              = ДанныеТП.ТехнологическийПроцесс;
		ОперацияОбъект.УстановитьСсылкуНового(Справочники.ТехнологическиеОперации.ПолучитьСсылку());
		
		ИдентификаторСтроки = ПроизводственныйПроцессДобавитьНовуюОперацию(
			ОперацияОбъект, КэшЭлементов, КоллекцияЭлементов, Параметры);
		
		СоответствиеОпераций.Вставить(Операции[Индекс].Операция, ОперацияОбъект);
		
	КонецЦикла;
	
	Для каждого ИмяТЧ Из СтрРазделить("СоответствиеСвойств,ОтборПоСвойствам", ",") Цикл
		Таблица = Объект[ИмяТЧ]; // ТабличнаяЧасть
		Для каждого Строка Из ДанныеТП[ИмяТЧ] Цикл
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Строка);
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ИмяТЧ Из СтрРазделить("МатериалыИУслуги,Трудозатраты", ",") Цикл
		
		Таблица = Объект[ИмяТЧ]; // ТабличнаяЧасть
		
		ЕстьАвтовыбор = Ложь;
		Для каждого Строка Из ДанныеТП[ИмяТЧ] Цикл
			
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,,"Операция");
			НоваяСтрока.ЭтапРедактирование = ДанныеСтрокиЭтапа.Ссылка;
			НоваяСтрока.ЭтапРедактированиеПредставление = ДанныеСтрокиЭтапа.Наименование;
			ОперацияОбъект = СоответствиеОпераций.Получить(
				?(ЗначениеЗаполнено(Строка.Операция), Строка.Операция, ПерваяОперация));
			Если ОперацияОбъект <> Неопределено Тогда
				НоваяСтрока.ОперацияРедактирование = ОперацияОбъект.ПолучитьСсылкуНового();
				НоваяСтрока.ОперацияРедактированиеПредставление = ОперацияОбъект.Наименование;
			КонецЕсли;
			НоваяСтрока.ЭлементПроизводственногоПроцессаПредставление = ПредставлениеЭлементаПроизводтвенногоПроцесса(ЭтотОбъект, НоваяСтрока);
			
			Если ИмяТЧ = "МатериалыИУслуги" Тогда
				УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьСпособПолученияМатериалаПоУмолчанию(НоваяСтрока);
				ЕстьАвтовыбор = Истина;
			КонецЕсли;
					
		КонецЦикла;
		
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Таблица,
			ЕстьАвтовыбор,
			Истина,
			Объект.ОтборПоСвойствам);
		
	КонецЦикла;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

// Добавить типовой технологический процесс.
// 
// Параметры:
//  КэшЭлементов - Соответствие из Структура
//  ДанныеСтрокиЭтапа - ДанныеФормыЭлементДерева -  Данные строки этапа
//  ДанныеТП - см. Справочники.ТехнологическиеПроцессы.ДанныеТехнологическогоПроцесса
//  Параметры - Структура - дополнительные параметры
// 
// Возвращаемое значение:
//  Число -  Добавить типовой технологический процесс
&НаСервере
Функция ДобавитьТиповойТехнологическийПроцесс(КэшЭлементов, ДанныеСтрокиЭтапа, ДанныеТП, Параметры)
	
	КоллекцияЭлементов     = ДанныеСтрокиЭтапа.ПолучитьЭлементы(); // ДанныеФормыКоллекция
	ТехнологическийПроцесс = ДанныеТП.ТехнологическийПроцесс;
	
	НомерОперации = ?(Параметры.Свойство("НомерОперации"),
		Параметры.НомерОперации,
		ПроизводственныйПроцессПолучитьНовыйНомер(КоллекцияЭлементов));
	НомерСледующейОперации = ?(Параметры.Свойство("НомерСледующейОперации"),
		Параметры.НомерСледующейОперации,
		0);
	
	// Операция технологического процесса
	ОперацияОбъект = Справочники.ТехнологическиеОперации.СоздатьЭлемент();
	ОперацияОбъект.Заполнить(Неопределено);
	ОперацияОбъект.Владелец                       = ДанныеСтрокиЭтапа.Ссылка;
	ОперацияОбъект.Наименование                   = Строка(ТехнологическийПроцесс);
	ОперацияОбъект.НомерОперации                  = НомерОперации;
	ОперацияОбъект.НомерСледующейОперации         = НомерСледующейОперации;
	ОперацияОбъект.ТехнологическийПроцесс         = ТехнологическийПроцесс;
	ОперацияОбъект.СодержитТехнологическийПроцесс = Истина;
	ОперацияОбъект.УстановитьСсылкуНового(Справочники.ТехнологическиеОперации.ПолучитьСсылку());
	
	ОперацияОбъект.КоэффициентТехнологическогоПроцесса = КоэффициентТехнологическогоПроцесса(ТехнологическийПроцесс);
	
	ИдентификаторСтроки = ПроизводственныйПроцессДобавитьНовуюОперацию(
		ОперацияОбъект, КэшЭлементов, КоллекцияЭлементов, Параметры);
	
	// Операции технологического процесса
	Операции = ДанныеТП.Операции;
	Если Операции.Количество() Тогда
		
		КоллекцияЭлементов  = Производственныйпроцесс.НайтиПоИдентификатору(ИдентификаторСтроки).ПолучитьЭлементы(); // ДанныеФормыКоллекция
		
		Для Индекс = 0 По Операции.Количество() - 1 Цикл
			
			ДанныеСтроки = Операции[Индекс];
			
			НоваяСтрока = КоллекцияЭлементов.Добавить();
			НоваяСтрока.Ссылка          = ДанныеСтроки.Операция;
			НоваяСтрока.Наименование    = ДанныеСтроки.Наименование;
			НоваяСтрока.Номер           = ДанныеСтроки.НомерОперации;
			НоваяСтрока.НомерСледующего = ДанныеСтроки.НомерСледующейОперации;
			НоваяСтрока.РабочийЦентр    = ДанныеСтроки.РабочийЦентр;
			НоваяСтрока.ТолькоПросмотр  = Истина;
			НоваяСтрока.ВидЭлемента     = РедакторПроизводственногоПроцессаКлиентСервер.ВидЭлементаПоСсылке(НоваяСтрока.Ссылка);
			РедакторПроизводственногоПроцессаКлиентСервер.УстановитьКартинкуЭлемента(НоваяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

// Получает строку текущего этапа
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// Возвращаемое значение:
// 	ДанныеФормыЭлементКоллекции - Строка этапа
&НаКлиентеНаСервереБезКонтекста
Функция ПроизводственныйПроцессПолучитьТекущийЭтап(Форма)
	
	ТекущаяСтрока = Форма.Элементы.ПроизводственныйПроцесс.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущиеДанные = Форма.ПроизводственныйПроцесс.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Пока ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ВидЭлемента <> "Этап" Цикл
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат ТекущиеДанные;
	
КонецФункции

//-- НЕ УТКА

// Получает родителя заданной строки дерева
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 	ДанныеСтроки - ДанныеФормыЭлементДерева
// Возвращаемое значение:
// 	ДанныеФормыЭлементДерева - родитель заданной строки
&НаКлиентеНаСервереБезКонтекста
Функция ПроизводственныйПроцессПолучитьРодителя(Форма, ДанныеСтроки)
	
	РодительЭлемента = ДанныеСтроки.ПолучитьРодителя();
	Если РодительЭлемента = Неопределено Тогда
		РодительЭлемента = Форма.ПроизводственныйПроцесс;
	КонецЕсли;
	Возврат РодительЭлемента;
	
КонецФункции

&НаКлиенте
Процедура ПроизводственныйПроцессНачатьДобавлениеЭтапа()
	
	Если НЕ ПроверитьВозможностьДобавленияЭтапа() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Ввод этапов возможен только после записи спецификации.
		|Записать и продолжить?';
		|en = 'You can enter stage only after saving BOM. 
		|Save and continue?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроизводственныйПроцессНачатьДобавлениеЭтапаЗавершение",
			ЭтотОбъект, Новый Структура);
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	ПроизводственныйПроцессДобавитьЭтапНаСервере();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьДобавленияЭтапа()
	
	ТекстПредупреждения = "";
	
	Если ПроизводственныйПроцессКэш.ЭтапКоличество > 0
			И НЕ УправлениеДаннымиОбИзделияхКлиентСервер.МногоэтапныйПроизводственныйПроцессДоступен() Тогда
		ТекстПредупреждения = УправлениеДаннымиОбИзделияхКлиентСервер.МногоэтапныйПроизводственныйПроцессТекстОшибки();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроизводственныйПроцессНачатьДобавлениеЭтапаЗавершение(РезультатВопроса, Параметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		
		ПроизводственныйПроцессДобавитьЭтапНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьЗаполненияПодразделенияЭтапов(ИдентификаторыСтрок)
	
	ТекстПредупреждения = "";
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторыСтрок) Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выделить этапы для заполнения подразделения.';
									|en = 'Select the stage to fill the business unit.'");
	Иначе
		Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
			Если ПроизводственныйПроцесс.НайтиПоИдентификатору(ИдентификаторСтроки).ВидЭлемента <> "Этап" Тогда
				ТекстПредупреждения = НСтр("ru = 'Заполнение подразделения доступно только для этапов.';
											|en = 'Business unit filling is only available for stages.'");
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьУдаленияЭлементовПроизводственногоПроцесса(ИдентификаторыСтрок)
	
	ТекстПредупреждения = "";
	ИменаТЧ = ИменаТабличныхЧастей();
	
	ИспользуемыеЭлементы = Новый Структура;
	Для каждого ВидЭлемента Из РедакторПроизводственногоПроцессаКлиентСервер.ВидыЭлементов() Цикл
		ИспользуемыеЭлементы.Вставить(ВидЭлемента, Новый Массив);
	КонецЦикла;
	
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Необходимо выделить элементы для удаления.';
									|en = 'Select the items to delete.'");
		
	Иначе
		
		Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
			
			ДанныеСтроки = ПроизводственныйПроцесс.НайтиПоИдентификатору(ИдентификаторСтроки);
			ВидЭлемента  = ДанныеСтроки.ВидЭлемента;
			
			СвойстваЭлементов = ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов.Получить(ВидЭлемента);
			СтруктураОтбора = Новый Структура(СвойстваЭлементов["Редактирование"], ДанныеСтроки.Ссылка);
			
			Для каждого ИмяТЧ Из ИменаТЧ Цикл
				Если Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора).Количество() > 0 Тогда
					ИспользуемыеЭлементы[ВидЭлемента].Добавить(ДанныеСтроки.Наименование);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого ВидЭлемента Из РедакторПроизводственногоПроцессаКлиентСервер.ВидыЭлементов() Цикл
			КоличествоИспользуемых = ИспользуемыеЭлементы[ВидЭлемента].Количество();
			Если КоличествоИспользуемых > 0 Тогда
				Если КоличествоИспользуемых = 1 Тогда
					ТекстПредупреждения = СтрШаблон(НСтр("ru = '""%1"" используется в спецификации. Удаление невозможно.';
														|en = '""%1"" is used in the bill of materials. It cannot be deleted.'"),
						ИспользуемыеЭлементы[ВидЭлемента][0]);
				Иначе
					ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Нижеследующие элементы используется в спецификации:
						|%1
						|
						|Удаление невозможно.';
						|en = 'The following items are used in the bill of materials:
						|%1
						|
						|They cannot be deleted.'"), СтрСоединить(ИспользуемыеЭлементы[ВидЭлемента], Символы.ПС));
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроизводственныйПроцессНачатьКопированиеЭлемента(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ВидЭлемента = "Этап"
		И НЕ ПроверитьВозможностьДобавленияЭтапа() Тогда
		Возврат;
	КонецЕсли;
	
	ПроизводственныйПроцессКопироватьЭлементНаСервере(ДанныеСтроки.ПолучитьИдентификатор());
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура ПроизводственныйПроцессНачатьДобавлениеОперации()
	
	ДанныеСтрокиЭтапа = ПроизводственныйПроцессПолучитьТекущийЭтап(ЭтотОбъект);
	
	Если НЕ ПроверитьВозможностьДобавленияОперации(ДанныеСтрокиЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроизводственныйПроцессДобавитьОперациюНаСервере(ДанныеСтрокиЭтапа.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьДобавленияОперации(ДанныеСтрокиЭтапа)
	
	ТекстПредупреждения = "";
	
	Если ДанныеСтрокиЭтапа = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Сначала необходимо создать этап производства.';
									|en = 'Create a production stage first.'");
	ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеСтрокиЭтапа.Подразделение) Тогда
		ТекстПредупреждения = НСтр("ru = 'Перед добавлением операций необходимо указать подразделение этапа.';
									|en = 'Specify the stage business unit before adding operations.'");
	ИначеЕсли ДанныеСтрокиЭтапа.ПроизводствоНаСтороне Тогда
		ТекстПредупреждения = НСтр("ru = 'Добавление операций возможно только для этапов собственного производства.';
									|en = 'Adding operations is only available for in-house production stages.'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьВыделитьВТехнологическийПроцесс(ИдентификаторыСтрок, ДополнительныеПараметры)
	
	ТекстПредупреждения = "";
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторыСтрок) Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выделить операции.';
									|en = 'Select operations.'");
	Иначе
		МассивРодителей   = Новый Массив;
		МассивИндексов    = Новый Массив;
		Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
			ДанныеСтроки = ПроизводственныйПроцесс.НайтиПоИдентификатору(ИдентификаторСтроки);
			ДанныеСтрокиРодителя = ДанныеСтроки.ПолучитьРодителя();
			Если ДанныеСтроки.ВидЭлемента <> "Операция"
					ИЛИ ДанныеСтрокиРодителя = Неопределено Тогда
				ТекстПредупреждения = НСтр("ru = 'Необходимо выделить только строки с операциями.';
											|en = 'Select only the lines with operations.'");
				Прервать;
			ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.ТехнологическийПроцесс)
					ИЛИ ЗначениеЗаполнено(ДанныеСтрокиРодителя.ТехнологическийПроцесс) Тогда
				ТекстПредупреждения = НСтр("ru = 'Действие не применимо для операций технологического процесса.';
											|en = 'The action is not applicable for technological process operations.'");
				Прервать;
			КонецЕсли;
			Если МассивРодителей.Найти(ДанныеСтрокиРодителя) = Неопределено Тогда
				МассивРодителей.Добавить(ДанныеСтрокиРодителя);
			КонецЕсли;
			МассивИндексов.Добавить(ДанныеСтрокиРодителя.ПолучитьЭлементы().Индекс(ДанныеСтроки));
		КонецЦикла;
		Если ПустаяСтрока(ТекстПредупреждения) Тогда
			Если МассивРодителей.Количество() > 1 Тогда
				ТекстПредупреждения = НСтр("ru = 'Нельзя выделять строки, принадлежащие разным этапам.';
											|en = 'Cannot select the lines belonging to different stages.'");
			Иначе
				ОбщегоНазначенияУТКлиентСервер.СортироватьМассив(МассивИндексов);
				Для Индекс = 0 По МассивИндексов.ВГраница() Цикл
					Если МассивИндексов[0]+Индекс <> МассивИндексов[Индекс] Тогда
						ТекстПредупреждения = НСтр("ru = 'Необходимо выделить последовательно расположенные операции.';
													|en = 'Select consecutive operations.'");
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	Иначе
		ДополнительныеПараметры.Вставить("ИдентификаторСтрокиЭтапа", МассивРодителей[0].ПолучитьИдентификатор());
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыВыделитьВТехнологическийПроцесс(ИдентификаторыСтрок)
	
	СтруктураОтбора = Новый Структура("ОперацияРедактирование");
	ЕстьСвязанныеМатериалы    = Ложь;
	ЕстьСвязанныеТрудозатраты = Ложь;
	
	ДанныеСтрокиРодителя = Неопределено;
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		ДанныеСтроки = ПроизводственныйПроцесс.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтрокиРодителя = Неопределено Тогда
			ДанныеСтрокиРодителя = ДанныеСтроки.ПолучитьРодителя();
		КонецЕсли;
		
		СтруктураОтбора.ОперацияРедактирование = ДанныеСтроки.Ссылка;
		
		Если НЕ	ЕстьСвязанныеМатериалы
			И Объект.МатериалыИУслуги.НайтиСтроки(СтруктураОтбора).Количество() > 0 Тогда
			ЕстьСвязанныеМатериалы = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьСвязанныеТрудозатраты
			И Объект.Трудозатраты.НайтиСтроки(СтруктураОтбора).Количество() > 0 Тогда
			ЕстьСвязанныеТрудозатраты = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДоступностьРеквизитовСпецификации", ДоступностьРеквизитов);
	ПараметрыФормы.Вставить("ЕстьСвязанныеМатериалы",            ЕстьСвязанныеМатериалы);
	ПараметрыФормы.Вставить("ЕстьСвязанныеТрудозатраты",         ЕстьСвязанныеТрудозатраты);
	ПараметрыФормы.Вставить("НаименованиеЭтапа",                 ДанныеСтрокиРодителя.Наименование);
	ПараметрыФормы.Вставить("Подразделение",                     ДанныеСтрокиРодителя.Подразделение);
	ПараметрыФормы.Вставить("ДляВидаИзделий",                    ОсновноеИзделиеВидНоменклатуры);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ВыделитьВТехнологическийПроцессЗавершение(ДанныеЗаполнения, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Результат = ВыделитьВТехнологическийПроцессЗавершениеНаСервере(ДанныеЗаполнения, ДополнительныеПараметры);
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Если НЕ ДанныеЗаполнения.ПодключитьКЭтапу
				ИЛИ Результат.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыТехнологическихПроцессов.Действует") Тогда
				ПоказатьЗначение(, Результат.ТехнологическийПроцесс);
			КонецЕсли;
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Не удалось создать технологический процесс.
			|Подробности см. в журнале регистрации.';
			|en = 'Cannot create the technological process.
			|For more information, see the event log.'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыделитьВТехнологическийПроцессЗавершениеНаСервере(Знач ДанныеЗаполнения, ДополнительныеПараметры)
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки; // Массив
	
	ТехПроцессОперации = Новый ТаблицаЗначений;
	ТехПроцессОперации.Колонки.Добавить("ИсходнаяОперация");
	ТехПроцессОперации.Колонки.Добавить("ИсходныйНомерОперации");
	ТехПроцессОперации.Колонки.Добавить("ИсходныйНомерСледующейОперации");
	ТехПроцессОперации.Колонки.Добавить("ОперацияОбъект");
	ТехПроцессОперации.Колонки.Добавить("Операция");
	ТехПроцессОперации.Колонки.Добавить("Наименование");
	ТехПроцессОперации.Колонки.Добавить("НомерОперации");
	ТехПроцессОперации.Колонки.Добавить("НомерСледующейОперации");
	ТехПроцессОперации.Колонки.Добавить("РабочийЦентр");
	
	ОтборИсходныйНомерОперации = Новый Структура("ИсходныйНомерОперации");
	ОтборКлючСвязи             = Новый Структура("КлючСвязи");
	
	КэшЭлементов = ПроизводственныйПроцессПолучитьКэшЭлементов();
	ПроизводственныйПроцессЗакэшироватьТекущийЭлемент(КэшЭлементов);
	
	ТехПроцессСсылка = Справочники.ТехнологическиеПроцессы.ПолучитьСсылку();
	
	ТехПроцессОбъект = Справочники.ТехнологическиеПроцессы.СоздатьЭлемент();
	ТехПроцессОбъект.УстановитьСсылкуНового(ТехПроцессСсылка);
	ТехПроцессОбъект.Заполнить(ДанныеЗаполнения);
	
	#Область ФормированиеСпискаОперацийТехпроцесса
	
	ДанныеСтрокиЭтапа = ПроизводственныйПроцесс.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтрокиЭтапа);
	ОперацииЭтапа = ДанныеСтрокиЭтапа.ПолучитьЭлементы(); // ДанныеФормыКоллекцияЭлементовДерева
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПроизводственныйПроцесс.НайтиПоИдентификатору(ИдентификаторСтроки);
		КэшЭлемента = ПроизводственныйПроцессПолучитьКэшЭлемента(КэшЭлементов, ДанныеСтроки, Истина);
		
		ОперацияОбъект = КэшЭлемента.Объект.Скопировать(); // СправочникОбъект.ТехнологическиеОперации
		ОперацияОбъект.Владелец = ТехПроцессСсылка;
		
		НоваяСтрока = ТехПроцессОперации.Добавить();
		НоваяСтрока.ИсходнаяОперация               = ДанныеСтроки.Ссылка;
		НоваяСтрока.ИсходныйНомерОперации          = ДанныеСтроки.Номер;
		НоваяСтрока.ИсходныйНомерСледующейОперации = ДанныеСтроки.НомерСледующего;
		НоваяСтрока.ОперацияОбъект                 = ОперацияОбъект;
		
		Если ДанныеЗаполнения.ПодключитьКЭтапу Тогда
			КэшЭлемента.Удален = Истина;
			ОперацииЭтапа.Удалить(ДанныеСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	ТехПроцессОперации.Сортировать("ИсходныйНомерОперации,ИсходныйНомерСледующейОперации");
	ТехПроцессОперации.Индексы.Добавить("ИсходныйНомерОперации");
	ТехПроцессОперации.Индексы.Добавить("ИсходнаяОперация");
	
	#КонецОбласти
	
	#Область ОбработкаСвязанныхРесурсов
	
	СвязанныеРесурсы = ДанныеЗаполнения.СвязанныеРесурсы;
	Для каждого КлючИЗначение Из СвязанныеРесурсы Цикл
		ИмяТЧ = КлючИЗначение.Ключ;
		СвязанныеСтроки = Новый Структура(ИмяТЧ, Новый Массив);
		Для каждого Строка Из Объект[ИмяТЧ] Цикл
			ТехПроцессОперацииСтрока = ТехПроцессОперации.Найти(Строка.ОперацияРедактирование, "ИсходнаяОперация");
			Если ЗначениеЗаполнено(Строка.ОперацияРедактирование) И ТехПроцессОперацииСтрока <> Неопределено Тогда
				СвязанныеСтроки[ИмяТЧ].Добавить(Строка);
				Если КлючИЗначение.Значение.ДобавитьВТехпроцесс Тогда
					Таблица = ТехПроцессОбъект[ИмяТЧ]; // ТабличнаяЧасть
					НоваяСтрока = Таблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НоваяСтрока.ОперацияРедактирование = ТехПроцессОперацииСтрока.Операция;
					НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор();
					Для каждого ИмяЗависимойТЧ Из СтрРазделить("СоответствиеСвойств,ОтборПоСвойствам", ",") Цикл
						ОтборКлючСвязи.КлючСвязи = Строка.КлючСвязи;
						НайденныеСтроки = Объект[ИмяЗависимойТЧ].НайтиСтроки(ОтборКлючСвязи);
						ЗависимаяТаблица = ТехПроцессОбъект[ИмяЗависимойТЧ]; // ТабличнаяЧасть
						Для каждого ЗависимаяСтрока Из НайденныеСтроки Цикл
							НоваяЗависимаяСтрока = ЗависимаяТаблица.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяЗависимаяСтрока, ЗависимаяСтрока);
							НоваяЗависимаяСтрока.КлючСвязи = НоваяСтрока.КлючСвязи;
						КонецЦикла;
						СвязанныеСтроки.Вставить(ИмяЗависимойТЧ, НайденныеСтроки);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		СвязанныеРесурсы[ИмяТЧ].Вставить("СвязанныеСтроки", СвязанныеСтроки);
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ЗаписьДанных
	
	НачатьТранзакцию();
	Попытка
		
		ТехПроцессОбъект.Записать();
		
		Смещение       = ТехПроцессОперации[0].ИсходныйНомерОперации - 1;
		НомерПоследней = ТехПроцессОперации[ТехПроцессОперации.Количество()-1].ИсходныйНомерСледующейОперации;
		Для каждого Строка Из ТехПроцессОперации Цикл
			ОперацияОбъект = Строка.ОперацияОбъект;
			ОперацияОбъект.НомерОперации = Строка.ИсходныйНомерОперации - Смещение;
			ОперацияОбъект.НомерСледующейОперации = ?(Строка.ИсходныйНомерСледующейОперации = НомерПоследней,
				0, Строка.ИсходныйНомерСледующейОперации - Смещение);
			ОперацияОбъект.Записать();
			Строка.Операция = ОперацияОбъект.Ссылка;
			ЗаполнитьЗначенияСвойств(Строка, ОперацияОбъект);
		КонецЦикла;
		
		ТехПроцессОбъект.Статус = Перечисления.СтатусыТехнологическихПроцессов.Действует;
		Если ТехПроцессОбъект.ПроверитьЗаполнение() Тогда
			ТехПроцессОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru = 'Не удалось записать технологический процесс.';
							|en = 'Cannot save the technological process.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Неопределено;
		
	КонецПопытки;
	
	#КонецОбласти
	
	#Область ПодключениеКЭтапу
	
	Если ДанныеЗаполнения.ПодключитьКЭтапу Тогда
		
		ВыбывшиеНомера = ТехПроцессОперации.ВыгрузитьКолонку("ИсходныйНомерОперации");
		ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ВыбывшиеНомера);
		
		НомерОперацииТП = ТехПроцессОперации[0].ИсходныйНомерОперации;
		НомерСледующейОперацииТП = ТехПроцессОперации[ТехПроцессОперации.Количество()-1].ИсходныйНомерСледующейОперации
			- ВыбывшиеНомера.ВГраница();
		
		ДанныеТП = Новый Структура;
		ДанныеТП.Вставить("ТехнологическийПроцесс", ТехПроцессСсылка);
		ДанныеТП.Вставить("Операции",               ТехПроцессОперации);
		
		ПараметрыДобавления = Новый Структура;
		ПараметрыДобавления.Вставить("НомерОперации",          НомерОперацииТП);
		ПараметрыДобавления.Вставить("НомерСледующейОперации", НомерСледующейОперацииТП);
		
		ИдентификаторСтроки = ДобавитьТиповойТехнологическийПроцесс(
			КэшЭлементов, ДанныеСтрокиЭтапа, ДанныеТП, ПараметрыДобавления);
			
		ДанныеСтрокиТП = ПроизводственныйПроцесс.НайтиПоИдентификатору(ИдентификаторСтроки);
		ПроизводственныйПроцессСкорректироватьПозициюСтроки(ЭтотОбъект, ДанныеСтрокиТП);
		ИндексСтрокиТП = ОперацииЭтапа.Индекс(ДанныеСтрокиТП);
		
		Для Индекс = 0 По ОперацииЭтапа.Количество() - 1 Цикл
		
			Если Индекс = ИндексСтрокиТП Тогда
				Продолжить;
			КонецЕсли;
		
			ДанныеСтроки = ОперацииЭтапа[Индекс];
			
			НомерОперации          = ДанныеСтроки.Номер;
			НомерСледующейОперации = ДанныеСтроки.НомерСледующего;
			
			ОтборИсходныйНомерОперации.ИсходныйНомерОперации = ДанныеСтроки.НомерСледующего;
			Если Индекс < ИндексСтрокиТП
				И ТехПроцессОперации.НайтиСтроки(ОтборИсходныйНомерОперации).Количество() > 0 Тогда
				НомерСледующейОперации = ДанныеСтрокиТП.Номер;
			ИначеЕсли Индекс > ИндексСтрокиТП Тогда
				НомерОперации = НомерОперации - ВыбывшиеНомера.ВГраница();
				НомерСледующейОперации = НомерСледующейОперации - ВыбывшиеНомера.ВГраница();
			КонецЕсли;
			
			Если НомерОперации <> ДанныеСтроки.Номер
					ИЛИ НомерСледующейОперации <> ДанныеСтроки.НомерСледующего Тогда
				ДанныеСтроки.Номер                        = НомерОперации;
				ДанныеСтроки.НомерСледующего              = НомерСледующейОперации;
				КэшЭлемента = ПроизводственныйПроцессПолучитьКэшЭлемента(КэшЭлементов, ДанныеСтроки, Истина);
				КэшЭлемента.Объект.НомерОперации          = НомерОперации;
				КэшЭлемента.Объект.НомерСледующейОперации = НомерСледующейОперации;
				КэшЭлемента.Записывать = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого КлючИЗначение Из СвязанныеРесурсы Цикл
			ИмяТЧ = КлючИЗначение.Ключ;
			СвязанныеСтроки = КлючИЗначение.Значение.СвязанныеСтроки;
			Если КлючИЗначение.Значение.ДобавитьВТехпроцесс Тогда
				Для каждого КлючИЗначение2 Из СвязанныеСтроки Цикл
					Для каждого Строка Из КлючИЗначение2.Значение Цикл
						Объект[КлючИЗначение2.Ключ].Удалить(Строка);
					КонецЦикла;
				КонецЦикла;
			Иначе
				Для каждого СвязаннаяСтрока Из СвязанныеСтроки[ИмяТЧ] Цикл
					СвязаннаяСтрока.ОперацияРедактирование = ДанныеСтрокиТП.Ссылка;
					СвязаннаяСтрока.ОперацияРедактированиеПредставление = ДанныеСтрокиТП.Наименование;
					СвязаннаяСтрока.ЭлементПроизводственногоПроцессаПредставление = ПредставлениеЭлементаПроизводтвенногоПроцесса(ЭтотОбъект, СвязаннаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ПроизводственныйПроцессСкорректироватьСчетчикЭлементов(ДанныеСтрокиТП.ВидЭлемента, -ТехПроцессОперации.Количество());
		ПроизводственныйПроцессОбновитьИнформационныеПанели();
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПроизводственныйПроцесс");
		
		Элементы.ПроизводственныйПроцесс.ТекущаяСтрока = ИдентификаторСтроки;
		Модифицированность = Истина;
		
		ПроизводственныйПроцессСохранитьКэшЭлементов(КэшЭлементов);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Результат = Новый Структура;
	Результат.Вставить("ТехнологическийПроцесс", ТехПроцессСсылка);
	Результат.Вставить("Статус",                 ТехПроцессОбъект.Статус);
	
	Возврат Результат;
	
КонецФункции

//-- НЕ УТКА

&НаСервере
Процедура ПроизводственныйПроцессОчистить()
	
	ПроизводственныйПроцесс.ПолучитьЭлементы().Очистить();
	
	ПроизводственныйПроцессОчиститьКэшЭлементов();
	
	ПроизводственныйПроцессКэш.ЭтапКоличество            = 0;
	ПроизводственныйПроцессКэш.ОперацияКоличество        = 0;
	ПроизводственныйПроцессКэш.ЕстьМногооперационныйЭтап = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначенияРеквизитовОбъектаВДереве(Форма, ДанныеСтроки, СписокРеквизитов = "")
	
	ОписаниеСвойствЭлементов = Форма.ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	СвойстваЭлементов = ОписаниеСвойствЭлементов.Получить(ДанныеСтроки.ВидЭлемента);
	
	Если ПустаяСтрока(СписокРеквизитов) Тогда
		СтруктураРеквизитов = СтрРазделить(СвойстваЭлементов.РеквизитыДерева, ",");
	Иначе
		СтруктураРеквизитов = СтрРазделить(СписокРеквизитов, ",");
	КонецЕсли;
	
	ИмяРеквизитаВОбъекте = Неопределено;
	Для каждого ИмяРеквизита Из СтруктураРеквизитов Цикл
		
		Если НЕ СвойстваЭлементов.Свойство(ИмяРеквизита, ИмяРеквизитаВОбъекте) Тогда
			ИмяРеквизитаВОбъекте = ИмяРеквизита;
		КонецЕсли;
		
		ДанныеСтроки[ИмяРеквизита] = Форма[СвойстваЭлементов.ИмяРеквизитаОбъекта][ИмяРеквизитаВОбъекте];
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеСвойствЭтапа

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуНезаполненногоДляБуферов(Форма)
	
	ОбязательностьЗаполнения = РедакторПроизводственногоПроцессаКлиентСервер.ОбязательностьЗаполненияЕдиницИзмеренияБуферов(
		Форма.ПроизводственныйПроцессЭтап);
	
	ОписаниеСвойствЭлементов = Форма.ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	СвойстваЭлементов = ОписаниеСвойствЭлементов.Получить("Этап");
	
	Для каждого КлючИЗначение Из ОбязательностьЗаполнения Цикл
		Форма.Элементы[СвойстваЭлементов[КлючИЗначение.Ключ]].ОтметкаНезаполненного = КлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДлительностьЭтапа()
	
	//++ НЕ УТКА
	
	Если РедакторПроизводственногоПроцессаКлиентСервер.РассчитыватьДлительностьАвтоматически(ПроизводственныйПроцессЭтап,
		ИспользуетсяПроизводство21,
		ИспользуетсяПланированиеПоМатериальнымРесурсам,
		ИспользуетсяПланированиеПоПроизводственнымРесурсам) Тогда
		РассчитатьДлительностьЭтапаНаСервере();
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыборЕдиницыИзмеренияБуферов(ЭтоЧтениеОбъекта)
	
	РедакторПроизводственногоПроцесса.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
		ЭтапИнтервалПланирования,
		Элементы.ЭтапЕдиницаИзмеренияПредварительногоБуфера.СписокВыбора);
	
	РедакторПроизводственногоПроцесса.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
		ЭтапИнтервалПланирования,
		Элементы.ЭтапЕдиницаИзмеренияЗавершающегоБуфера.СписокВыбора);
	
	РедакторПроизводственногоПроцесса.ПроверитьВыборЕдиницыИзмеренияБуферов(
		ПроизводственныйПроцессЭтап, ЭтотОбъект, НЕ ЭтоЧтениеОбъекта, "Этап");
	
КонецПроцедуры

&НаСервере
Процедура ЭтапСпособПроизводстваПриИзмененииНаСервере()
	
	ПроизводственныйПроцессЭтап.ПроизводствоНаСтороне = Булево(ЭтапСпособПроизводства);
	СписокРеквизитов = "СпособПроизводства";
	
	Если ПроизводственныйПроцессЭтап.ПроизводствоНаСтороне Тогда
		
		ПроизводственныйПроцессЭтап.ПланироватьРаботуВидовРабочихЦентров = Ложь;
		ПроизводственныйПроцессЭтап.МаршрутнаяКарта  = Неопределено;
		ПроизводственныйПроцессЭтап.КоэффициентМаршрутнойКарты = 0;
		
		СписокРеквизитов = СписокРеквизитов+",ПланироватьРаботуВидовРабочихЦентров,МаршрутнаяКарта";
		
		ПолеПартнер = Элементы.ЭтапПартнер;
		
	Иначе
		ПолеПартнер = Элементы.ЭтапОрганизация;
	КонецЕсли;
	
	ПроизводственныйПроцессЭтап.Партнер = ПолеПартнер.ОграничениеТипа.ПривестиЗначение(ПроизводственныйПроцессЭтап.Партнер);
	
	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтотОбъект, СписокРеквизитов);
	
	РедакторПроизводственногоПроцессаКлиентСервер.ЗаполнитьПояснениеОсновныхНастроек(ПроизводственныйПроцессЭтап, ЭтотОбъект, "Этап");
	
	ТекущаяСтрока = Элементы.ПроизводственныйПроцесс.ТекущаяСтрока;
	ТекущиеДанные = ПроизводственныйПроцесс.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ТекущиеДанные.ПроизводствоНаСтороне = ПроизводственныйПроцессЭтап.ПроизводствоНаСтороне;
	
	//++ НЕ УТКА
	Если ТекущиеДанные.ПроизводствоНаСтороне
		И ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
			
			ПроизводственныйПроцессУдалитьОперацииЭтапа(ТекущиеДанные);
			
	КонецЕсли;
	//-- НЕ УТКА
	
	ОбработатьИзменениеПроизводственногоПроцесса(ТекущаяСтрока);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПроизводственныйПроцесс");
	
КонецПроцедуры

&НаСервере
Процедура ЭтапПодразделениеПриИзмененииНаСервере(ПроверитьОчиститьВРЦ = Истина)
	
	ТекущаяСтрока = Элементы.ПроизводственныйПроцесс.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = ПроизводственныйПроцесс.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ОбновитьЗначенияРеквизитовОбъектаВДереве(ЭтотОбъект, ТекущиеДанные, "Подразделение");
	
	//++ НЕ УТКА
	ПараметрыПодразделения      = ПроизводственныйПроцессПолучитьПараметрыПодразделения(ЭтотОбъект, ТекущиеДанные.Подразделение);
	ЭтапИнтервалПланирования    = ПараметрыПодразделения.ИнтервалПланирования;
	
	Если ПроверитьОчиститьВРЦ Тогда	
		РедакторПроизводственногоПроцесса.ПроверитьОчиститьВидыРабочихЦентров(
			ПроизводственныйПроцессЭтап, ЭтапВидыРабочихЦентров, ЭтапЕстьСинхроннаяЗагрузка);
	КонецЕсли;
	//-- НЕ УТКА
	ЗаполнитьВыборЕдиницыИзмеренияБуферов(Ложь);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПроизводственныйПроцесс");
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура ЭтапВидыРабочихЦентровВидРабочегоЦентраПриИзмененииНаСервере()
	
	ТекущаяСтрока = Элементы.ЭтапВидыРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = ЭтапВидыРабочихЦентров.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ТекущиеДанные.ВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();
	
	РедакторПроизводственногоПроцесса.ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
		Неопределено,
		Неопределено,
		Истина,
		ТекущиеДанные);
	
	РедакторПроизводственногоПроцессаКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ЭтапВидыРабочихЦентров,
		ЭтапЕстьСинхроннаяЗагрузка);
	
КонецПроцедуры

&НаСервере
Процедура ЭтапВидыРабочихЦентровВариантНаладкиПриИзмененииНаСервере()
	
	ТекущаяСтрока = Элементы.ЭтапВидыРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = ЭтапВидыРабочихЦентров.НайтиПоИдентификатору(ТекущаяСтрока);
	
	РедакторПроизводственногоПроцесса.ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
		Неопределено,
		Неопределено,
		Истина,
		ТекущиеДанные);
	
	РедакторПроизводственногоПроцессаКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ЭтапВидыРабочихЦентров,
		ЭтапЕстьСинхроннаяЗагрузка);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДлительностьЭтапаНаСервере()
	
	РедакторПроизводственногоПроцесса.РассчитатьДлительностьЭтапа(ПроизводственныйПроцессЭтап, ЭтапВидыРабочихЦентров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСоставаВидовРабочихЦентров()
	
	РедакторПроизводственногоПроцессаКлиент.ПриИзмененииСоставаВидовРабочихЦентров(
		ЭтапВидыРабочихЦентров,
		ПроизводственныйПроцессЭтап.ПорядокРаботыВидовРабочихЦентров,
		ИспользуетсяПроизводство22);
	
	РассчитатьДлительностьЭтапа();
	
	РедакторПроизводственногоПроцессаКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ЭтапВидыРабочихЦентров,
		ЭтапЕстьСинхроннаяЗагрузка);
	
	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтотОбъект, "ВидыРабочихЦентров");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПересчитатьВремяРаботы(ТекущиеДанные)
	
	РедакторПроизводственногоПроцессаКлиент.ВидыРабочихЦентровПересчитатьВремяРаботы(
			ТекущиеДанные,
			ЭтапВидыРабочихЦентров,
			ПроизводственныйПроцессЭтап.ПорядокРаботыВидовРабочихЦентров,
			ЭтапЕстьСинхроннаяЗагрузка,
			ИспользуетсяПроизводство22,
			Истина);
	
КонецПроцедуры

//-- НЕ УТКА

&НаСервере
Процедура НастроитьЭлементыФормыЭтапа(ЭтапОбъект, ДанныеСтроки)
	
	Элементы.ЭтапСпособПроизводства.Видимость =
		(ИспользуетсяПроизводствоНаСтороне2_5
			//++ Устарело_Переработка24
			ИЛИ ИспользуетсяПроизводствоНаСтороне
			//-- Устарело_Переработка24
			ИЛИ Ложь)
		И Не Объект.МногоэтапныйПроизводственныйПроцесс;
	//++ НЕ УТКА
	Если (ИспользуетсяПроизводствоНаСтороне2_5
			//++ Устарело_Переработка24
			ИЛИ ИспользуетсяПроизводствоНаСтороне
			//-- Устарело_Переработка24
			ИЛИ Ложь)
		И (Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
			ИЛИ ЭтапОбъект.ПроизводствоНаСтороне) Тогда
		Элементы.ЭтапСпособПроизводства.Видимость = Истина;
	Иначе
		Элементы.ЭтапСпособПроизводства.Видимость = Ложь;
	КонецЕсли;
	
	Если ХранитьОперацииВРесурсныхСпецификациях Тогда
		Элементы.ЭтапЗаполнитьВидыРабочихЦентров.Доступность = ДанныеСтроки.ПолучитьЭлементы().Количество() > 0 И ДоступностьРеквизитов;
		Элементы.ЭтапЗаполнитьВидыРабочихЦентров.Заголовок = НСтр("ru = 'Заполнить по операциям';
																	|en = 'Fill in according to operations'");
	Иначе
		Элементы.ЭтапЗаполнитьВидыРабочихЦентров.Заголовок = НСтр("ru = 'Заполнить по маршрутной карте';
																	|en = 'Fill in from route sheet'");
	КонецЕсли;
	//-- НЕ УТКА
	
	Элементы.ЭтапНастройкаОтбораПоСвойствамИРасчетаПоФормулам.Видимость = НЕ ИспользуетсяПроизводство21;
	
	Элементы.ЭтапГруппаМаршрутнаяКарта.ТолькоПросмотр = ХранитьОперацииВРесурсныхСпецификациях;
	
	Элементы.ЭтапОрганизация.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
	Элементы.ЭтапПартнер.ОграничениеТипа     = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
	
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВводаКоличестваЕдиницПартий(
		Объект.ВыпускПроизвольнымиПорциями И ДоступноОписаниеПартииВыпуска,
		Элементы.ЭтапОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
		
	НастроитьЭлементыДополнительныхРеквизитовИСведений(ЭтапОбъект, ДанныеСтроки.ВидЭлемента);
	
	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыЭтапа(Форма, СписокРеквизитов = "")
	
	Если НЕ ЗначениеЗаполнено(Форма.ПроизводственныйПроцессТекущаяСсылка)
		ИЛИ ТипЗнч(Форма.ПроизводственныйПроцессТекущаяСсылка) <> Тип("СправочникСсылка.ЭтапыПроизводства") Тогда
			Возврат;
	КонецЕсли;
	
	Объект = Форма.ПроизводственныйПроцессЭтап;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ Инициализация Тогда
		
		СобственноеПроизводство = НЕ Объект.ПроизводствоНаСтороне;
		
		Элементы.ЭтапСтраницаПереработка.Видимость = НЕ СобственноеПроизводство;
		
		Элементы.ЭтапПланироватьРаботуВидовРабочихЦентров.Видимость = СобственноеПроизводство;
		
		Элементы.ЭтапГруппаМаршрутнаяКарта.Видимость = Форма.УправлениеПредприятием
			И Форма.ИспользоватьМаршрутныеКарты
			И СобственноеПроизводство;
			
		Элементы.ЭтапСтраницыРазбиватьМаршрутныеЛисты.Видимость = Форма.УправлениеПредприятием
			И Форма.ИспользуетсяПроизводство21
			И СобственноеПроизводство;
		
		Элементы.ЭтапОрганизация.Видимость = Ложь;
		//++ НЕ УТКА
		Элементы.ЭтапОрганизация.Видимость =
			СобственноеПроизводство
			И Форма.ИспользоватьВнутреннююПереработку;
		//-- НЕ УТКА
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПланироватьРаботуВидовРабочихЦентров")
		ИЛИ Инициализация Тогда
			
		РедакторПроизводственногоПроцессаКлиентСервер.НастроитьЭлементыГруппыВидыРабочихЦентров(Объект, Форма, "Этап");
		
		РедакторПроизводственногоПроцессаКлиентСервер.НастроитьЭлементыГруппыДлительностьЭтапа(Объект, Форма, "Этап");
		
	КонецЕсли;
	
	//++ НЕ УТКА
	Если СтруктураРеквизитов.Свойство("ВидыРабочихЦентров")
		ИЛИ Инициализация Тогда
			
		РедакторПроизводственногоПроцессаКлиентСервер.НастроитьЭлементПорядокРаботыВидовРабочихЦентров(Объект, Форма, "Этап");
			
	КонецЕсли;
	//-- НЕ УТКА
	
	Если СтруктураРеквизитов.Свойство("РазбиватьМаршрутныеЛисты")
		ИЛИ Инициализация Тогда
		
		Элементы.ЭтапМаксимальноеКоличествоЕдиницПартийИзделия.ТолькоПросмотр = 
			НЕ (Форма.ЭтапРазбиватьМаршрутныеЛисты И НЕ Форма.СпецификацияЗакрыта);
		
	КонецЕсли;
	
	//++ НЕ УТКА
	Если СтруктураРеквизитов.Свойство("МаршрутнаяКарта")
		ИЛИ Инициализация Тогда
		
		РедакторПроизводственногоПроцессаКлиентСервер.НастроитьЭлементыГруппыМаршрутнаяКарта(Объект, Форма, "Этап");
		
		Если НЕ Форма.ХранитьОперацииВРесурсныхСпецификациях Тогда
			Элементы.ЭтапЗаполнитьВидыРабочихЦентров.Видимость = Форма.ИспользоватьМаршрутныеКарты;
			Элементы.ЭтапЗаполнитьВидыРабочихЦентров.Доступность = ЗначениеЗаполнено(Объект.МаршрутнаяКарта)
																		И Форма.ДоступностьРеквизитов;
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ УТКА
	
	// Одновременно производимое количество единиц/партий изделий
	Если СтруктураРеквизитов.Свойство("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий")
		ИЛИ Инициализация Тогда
		
		Элементы.ЭтапОдновременноПроизводимоеКоличествоЕдиницПартийИзделий.Подсказка =
			УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЕдиницыИзмеренияПартииВыпуска(
				Форма.ОписаниеПартииВыпуска,
				Объект.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ВариантПромежуточногоВыпуска")
		ИЛИ Инициализация Тогда
		
		Элементы.ПромежуточныйВыпуск.Видимость = ДоступенПромежуточныйВыпуск(Форма)
			И Форма.Объект.ВариантПромежуточногоВыпуска = ПредопределенноеЗначение(
				"Перечисление.ВариантыПромежуточногоВыпуска.НастраиваетсяВручную");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыУслугиПереработчика()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ПроизводственныйПроцессЭтап.УслугиПереработчика, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделениеЭтаповЗавершение(Подразделение, ИдентификаторыСтрок) Экспорт
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		ЗаполнитьПодразделениеЭтаповЗавершениеНаСервере(Подразделение, ИдентификаторыСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодразделениеЭтаповЗавершениеНаСервере(Подразделение, ИдентификаторыСтрок)
	
	КэшЭлементов = ПроизводственныйПроцессПолучитьКэшЭлементов();
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		Если ИдентификаторСтроки = Элементы.ПроизводственныйПроцесс.ТекущаяСтрока Тогда
			
			ПроизводственныйПроцессЭтап.Подразделение = Подразделение;
			ЭтапПодразделениеПриИзмененииНаСервере(Ложь);
			
		Иначе
			
			ДанныеСтроки = ПроизводственныйПроцесс.НайтиПоИдентификатору(ИдентификаторСтроки);
			ДанныеСтроки.Подразделение = Подразделение;
			
			КэшЭлемента = ПроизводственныйПроцессПолучитьКэшЭлемента(КэшЭлементов, ДанныеСтроки, Истина);
			КэшЭлемента.Объект.Подразделение = Подразделение;
			
			КэшЭлемента.Заполнен = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроизводственныйПроцессСохранитьКэшЭлементов(КэшЭлементов);
	
КонецПроцедуры

//++ НЕ УТКА


&НаКлиенте
Процедура ВопросЭтапСпособПроизводстваПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЭтапСпособПроизводстваПриИзмененииНаСервере();
		
	Иначе
		
		ЭтапСпособПроизводства = Число(ПроизводственныйПроцессЭтап.ПроизводствоНаСтороне);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЭтапЗаполнитьВидыРабочихЦентровПоОперациямНаСервере()
	
	ДанныеСтроки  = Производственныйпроцесс.НайтиПоИдентификатору(Элементы.ПроизводственныйПроцесс.ТекущаяСтрока);
	КэшЭлементов  = ПроизводственныйПроцессПолучитьКэшЭлементов();
	
	ДанныеОпераций  = РедакторПроизводственногоПроцесса.ЗаполнитьВидыРабочихЦентровПоОперациямКонструктор();
	
	Для каждого СтрокаОперация Из ДанныеСтроки.ПолучитьЭлементы() Цикл
		НоваяСтрока = ДанныеОпераций.Добавить();
		КэшЭлемента = КэшЭлементов.Получить(СтрокаОперация.Ссылка);
		Если КэшЭлемента = Неопределено Тогда
			НоваяСтрока.Ссылка        = СтрокаОперация.Ссылка;
			НоваяСтрока.НомерОперации = СтрокаОперация.Номер;
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КэшЭлемента.Объект);
			НоваяСтрока.Заполнена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	РедакторПроизводственногоПроцесса.ЗаполнитьВидыРабочихЦентровПоОперациям(
		ПроизводственныйПроцессЭтап, ДанныеОпераций);
		
	// По умолчанию используем основные виды РЦ
	Для каждого СтрокаОсновнойВидРЦ Из ПроизводственныйПроцессЭтап.ВидыРабочихЦентров Цикл
		СтрокаОсновнойВидРЦ.Использовать = Истина;
	КонецЦикла;
		
	РедакторПроизводственногоПроцесса.ПроверитьВыборЕдиницыИзмеренияБуферов(
		ПроизводственныйПроцессЭтап, ЭтотОбъект, Истина, "Этап");
	РедакторПроизводственногоПроцесса.ЗаполнитьВидыРабочихЦентров(
		ПроизводственныйПроцессЭтап, ЭтапВидыРабочихЦентров, ЭтапЕстьСинхроннаяЗагрузка);
	
КонецПроцедуры

&НаСервере
Процедура ЭтапЗаполнитьВидыРабочихЦентровПоМаршрутнойКартеНаСервере()
	
	РедакторПроизводственногоПроцесса.ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте(
		ПроизводственныйПроцессЭтап, ЭтотОбъект, ЭтапВидыРабочихЦентров, ЭтапЕстьСинхроннаяЗагрузка, "Этап");
	
КонецПроцедуры

&НаСервере
Процедура МаршрутнаяКартаПриИзмененииНаСервере()
	
	ПрочитатьНастройкиМаршрутнойКарты(ПроизводственныйПроцессЭтап, ЭтотОбъект);
	
	Если ЭтапРассчитыватьКоэффициент Тогда
		
		ПроизводственныйПроцессЭтап.КоэффициентМаршрутнойКарты =
			КоэффициентМаршрутнойКарты(ПроизводственныйПроцессЭтап.МаршрутнаяКарта);
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ПроизводственныйПроцессЭтап.МаршрутнаяКарта) Тогда
			ПроизводственныйПроцессЭтап.КоэффициентМаршрутнойКарты = 0;
		ИначеЕсли ПроизводственныйПроцессЭтап.КоэффициентМаршрутнойКарты = 0 Тогда
			ПроизводственныйПроцессЭтап.КоэффициентМаршрутнойКарты = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтотОбъект, "МаршрутнаяКарта");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьНастройкиМаршрутнойКарты(Объект, Форма)
	
	НастройкиМК = РедакторПроизводственногоПроцессаКлиентСервер.ПолучитьНастройкиМаршрутнойКарты(Объект);
	
	ОписаниеСвойствЭлементов = Форма.ПроизводственныйПроцессКэш.ОписаниеСвойствЭлементов; // Соответствие
	СвойстваЭлементов = ОписаниеСвойствЭлементов.Получить("Этап");
	
	Для каждого КлючИЗначение Из НастройкиМК Цикл
		Форма[СвойстваЭлементов[КлючИЗначение.Ключ]] = КлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КоэффициентМаршрутнойКарты(МаршрутнаяКарта)

	ДанныеОсновногоИзделия = ОсновноеИзделиеСпецификацииСтруктурой(ЭтотОбъект);
	
	РассчитатьКоличествоОсновногоИзделия(ДанныеОсновногоИзделия, Неопределено);
	
	Возврат Справочники.МаршрутныеКарты.КоэффициентМаршрутнойКартыДляСпецификации(
		ДанныеОсновногоИзделия, МаршрутнаяКарта);
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

//++ НЕ УТКА

#Область РедактированиеСвойствОперации

&НаСервере
Функция КоэффициентТехнологическогоПроцесса(ТехнологическийПроцесс)
	
	СтруктураСтроки = ОсновноеИзделиеСпецификацииСтруктурой(ЭтотОбъект);
	
	РассчитатьКоличествоОсновногоИзделия(СтруктураСтроки, Неопределено);
	
	Возврат Справочники.ТехнологическиеПроцессы.КоэффициентТехнологическогоПроцессаДляСпецификации(СтруктураСтроки.Количество, ТехнологическийПроцесс);
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормыОперации(ОперацияОбъект, ДанныеСтроки)
	
	НастроитьЭлементыДополнительныхРеквизитовИСведений(ОперацияОбъект, ДанныеСтроки.ВидЭлемента);
	
	Если ОперацияОбъект.СодержитТехнологическийПроцесс Тогда
		
		Элементы.ОперацияРассчитатьКоэффициентТехнологическогоПроцесса.Доступность = ОперацияРассчитыватьКоэффициент И ДоступностьРеквизитов;
		Элементы.ПроизводственныйПроцессОперацияСтраницы.ТекущаяСтраница = Элементы.ПроизводственныйПроцессОперацияТП;
		
	Иначе
		
		Элементы.ПроизводственныйПроцессОперацияСтраницы.ТекущаяСтраница = Элементы.ПроизводственныйПроцессОперацияОбычная;
		
	КонецЕсли;
	
	Элементы.ОперацияОснование.Видимость = ЗначениеЗаполнено(ОперацияОбъект.Основание);
	
	НастроитьЗависимыеЭлементыФормыОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыОперации(Форма, СписокРеквизитов = "")
	
	Если НЕ ЗначениеЗаполнено(Форма.ПроизводственныйПроцессТекущаяСсылка)
		ИЛИ ТипЗнч(Форма.ПроизводственныйПроцессТекущаяСсылка) <> Тип("СправочникСсылка.ТехнологическиеОперации") Тогда
			Возврат;
	КонецЕсли;
	
	Объект = Форма.ПроизводственныйПроцессОперация;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ВидОперации")
		ИЛИ Инициализация Тогда
			
			Элементы.ОперацияСтраницаКонтролируемыеПараметры.Видимость = ЗначениеЗаполнено(Объект.ВидОперации);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

#Область СпособыРаспределенияЗатрат

&НаСервере
Процедура ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия()
	
	ПараметрыРаспределенияЗатратСтруктура = Справочники.РесурсныеСпецификации.ПараметрыРаспределенияЗатрат(Объект);
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(ПараметрыРаспределенияЗатратСтруктура);
	
	ПроизводствоСервер.РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат);
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

#КонецОбласти

#Область ОсновноеИзделие

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуетсяРежимРедактированияОсновногоИзделия(Форма)
	
//++ НЕ УТКА
	Если (Форма.Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
			И Форма.Объект.ВариантНазначения = ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.СписокНоменклатуры")
				ИЛИ Форма.ИспользуетсяПроизводство21)Тогда
//-- НЕ УТКА
		Возврат Ложь;
//++ НЕ УТКА
	Иначе
		Возврат Истина;
	КонецЕсли;
//-- НЕ УТКА
	
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеОсновногоИзделияСпецификации()
	
	Если Не ИспользуетсяРежимРедактированияОсновногоИзделия(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		ИЛИ Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт Тогда
		
		СписокРеквизитов = СписокРеквизитовОсновноеВыходноеИзделие();
		
		Если Объект.ВыходныеИзделия.Количество() <> 0 Тогда
			
			Для каждого КлючЗначение Из СписокРеквизитов Цикл
				ЭтотОбъект[КлючЗначение.Значение] = Объект.ВыходныеИзделия[0][КлючЗначение.Ключ];
			КонецЦикла;
			
		Иначе
			
			Для каждого КлючЗначение Из СписокРеквизитов Цикл
				ЭтотОбъект[КлючЗначение.Значение] = Неопределено;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		СписокРеквизитов = СписокРеквизитовОсновноеИзделиеСпецификации();
		Для каждого КлючЗначение Из СписокРеквизитов Цикл
			ЭтотОбъект[КлючЗначение.Значение] = Объект[КлючЗначение.Значение];
		КонецЦикла;
		
	КонецЕсли;
	
	ОсновноеИзделиеТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновноеИзделиеВидНоменклатуры, "ТипНоменклатуры");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокРеквизитовФормыОсновноеИзделиеСпецификации()
	
	СтруктураВозврата = Новый Соответствие;
	СтруктураВозврата.Вставить("ТипНоменклатуры",            "ОсновноеИзделиеТипНоменклатуры");
	СтруктураВозврата.Вставить("ВидНоменклатуры",            "ОсновноеИзделиеВидНоменклатуры");
	СтруктураВозврата.Вставить("Номенклатура",               "ОсновноеИзделиеНоменклатура");
	СтруктураВозврата.Вставить("НоменклатураЕстьСвойства",   "ОсновноеИзделиеНоменклатураЕстьСвойства");
	СтруктураВозврата.Вставить("ХарактеристикиИспользуются", "ОсновноеИзделиеХарактеристикиИспользуются");
	СтруктураВозврата.Вставить("Характеристика",             "ОсновноеИзделиеХарактеристика");
	СтруктураВозврата.Вставить("ХарактеристикаЕстьСвойства", "ОсновноеИзделиеХарактеристикаЕстьСвойства");
	СтруктураВозврата.Вставить("Упаковка",                   "ОсновноеИзделиеУпаковка");
	СтруктураВозврата.Вставить("КоличествоУпаковок",         "ОсновноеИзделиеКоличествоУпаковок");
	СтруктураВозврата.Вставить("Количество",                 "ОсновноеИзделиеКоличество");
	СтруктураВозврата.Вставить("ПроцентБрака",               "ОсновноеИзделиеПроцентБрака");
	Возврат СтруктураВозврата;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокРеквизитовОсновноеВыходноеИзделие()
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВидНоменклатуры",    "ОсновноеИзделиеВидНоменклатуры");
	СтруктураВозврата.Вставить("Номенклатура",       "ОсновноеИзделиеНоменклатура");
	СтруктураВозврата.Вставить("Характеристика",     "ОсновноеИзделиеХарактеристика");
	СтруктураВозврата.Вставить("Упаковка",           "ОсновноеИзделиеУпаковка");
	СтруктураВозврата.Вставить("КоличествоУпаковок", "ОсновноеИзделиеКоличествоУпаковок");
	СтруктураВозврата.Вставить("Количество",         "ОсновноеИзделиеКоличество");
	СтруктураВозврата.Вставить("ПроцентБрака",       "ОсновноеИзделиеПроцентБрака");
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокРеквизитовОсновноеИзделиеСпецификации()
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВидНоменклатуры",    "ОсновноеИзделиеВидНоменклатуры");
	СтруктураВозврата.Вставить("Номенклатура",       "ОсновноеИзделиеНоменклатура");
	СтруктураВозврата.Вставить("Характеристика",     "ОсновноеИзделиеХарактеристика");
	СтруктураВозврата.Вставить("Упаковка",           "ОсновноеИзделиеУпаковка");
	СтруктураВозврата.Вставить("КоличествоУпаковок", "ОсновноеИзделиеКоличествоУпаковок");
	Возврат СтруктураВозврата;

КонецФункции

//++ НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Функция ОсновноеИзделиеСпецификацииСтруктурой(Форма)
	
	СтруктураСтроки = Новый Структура();
	
	СписокРеквизитов = СписокРеквизитовФормыОсновноеИзделиеСпецификации();
	
	Для каждого КлючЗначение Из СписокРеквизитов Цикл
		СтруктураСтроки.Вставить(КлючЗначение.Ключ,  Форма[КлючЗначение.Значение]);
	КонецЦикла;
	
	Возврат СтруктураСтроки;
	
КонецФункции

//-- НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеДанныхОсновногоИзделия(Форма, СтруктураСтроки = Неопределено) 
	
	СписокРеквизитов = СписокРеквизитовФормыОсновноеИзделиеСпецификации();
	
	Если СтруктураСтроки <> Неопределено Тогда
		Для каждого КлючИЗначение Из СтруктураСтроки Цикл
			Форма[СписокРеквизитов.Получить(КлючИЗначение.Ключ)] = КлючИЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьРеквизитыОбъектаПоДаннымОсновногоИзделия(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыОбъектаПоДаннымОсновногоИзделия(Форма)
	
	Объект = Форма.Объект;
	
	ЭтоСборка = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка"));
	ЭтоРемонт = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Ремонт"));
	ИмяТЧ     = "ВыходныеИзделия";
	
	Если (ЭтоСборка ИЛИ ЭтоРемонт) Тогда
		
		СписокРеквизитов = СписокРеквизитовОсновноеВыходноеИзделие();
		
		Если Объект[ИмяТЧ].Количество() <> 0 Тогда
			ДанныеСтроки = Объект[ИмяТЧ][0];
		Иначе
			ДанныеСтроки = Объект[ИмяТЧ].Добавить();
			ПриВводеНовойСтрокиСпецификации(Форма, ИмяТЧ, ДанныеСтроки);
		КонецЕсли;
		
		Для каждого КлючЗначение Из СписокРеквизитов Цикл
			ДанныеСтроки[КлючЗначение.Ключ] = Форма[КлючЗначение.Значение];
		КонецЦикла;
	
	КонецЕсли;
	
	СписокРеквизитов = СписокРеквизитовОсновноеИзделиеСпецификации();
	Для каждого КлючЗначение Из СписокРеквизитов Цикл
		Объект[КлючЗначение.Значение] = Форма[КлючЗначение.Значение];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоОсновномуИзделиюСпецификации()
	
	Если Не ИспользуетсяРежимРедактированияОсновногоИзделия(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТКА
	ДоступностьУточненийПрименения = Новый Структура("Номенклатура,Характеристика",Истина,Истина);
	СвязиПараметровВыбораУпаковки  = Новый Массив;
	
	ВариантНазначенияВидНоменклатуры = (Объект.ВариантНазначения = ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.ВидНоменклатуры"));
	ВариантНазначенияНоменклатура = (Объект.ВариантНазначения = ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.Номенклатура"));
	
	Элементы.ГруппаОсновноеИзделиеХарактеристика.Видимость     = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Элементы.ОсновноеИзделиеВидНоменклатуры.Видимость          = ВариантНазначенияВидНоменклатуры;
	Элементы.ОсновноеИзделиеНоменклатура.Доступность           = НЕ ВариантНазначенияВидНоменклатуры;
	Элементы.ОсновноеИзделиеУпаковка.ОтметкаНезаполненного     = Ложь;
	Элементы.ОсновноеИзделиеУпаковка.АвтоОтметкаНезаполненного = ВариантНазначенияВидНоменклатуры;
	
	Если ВариантНазначенияВидНоменклатуры Тогда
		Элементы.ОсновноеИзделиеНоменклатура.ПодсказкаВвода    = НСтр("ru = '<любая номенклатура>';
																		|en = '<any items>'");
	Иначе
		Элементы.ОсновноеИзделиеНоменклатура.ПодсказкаВвода    = "";
		ДоступностьУточненийПрименения.Номенклатура            = Ложь;
		СвязиПараметровВыбораУпаковки                          = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			Новый СвязьПараметраВыбора(
				"Номенклатура",
				"ОсновноеИзделиеНоменклатура",
				РежимИзмененияСвязанногоЗначения.Очищать));
	КонецЕсли;
	
	Если ОсновноеИзделиеХарактеристикиИспользуются Тогда
		Элементы.ОсновноеИзделиеХарактеристика.Доступность     = ВариантНазначенияНоменклатура;
		Элементы.ОсновноеИзделиеХарактеристика.ПодсказкаВвода  = НСтр("ru = '<любая характеристика>';
																		|en = '<any variant>'");
	Иначе
		Элементы.ОсновноеИзделиеХарактеристика.Доступность     = Ложь;
		Элементы.ОсновноеИзделиеХарактеристика.ПодсказкаВвода  = НСтр("ru = '<характеристики не используются>';
																		|en = '<variants are not used>'");
		ДоступностьУточненийПрименения.Характеристика          = Ложь;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ДоступностьУточненийПрименения Цикл
		
		УстановитьНастройкиЭлементовУточненияПрименения(ЭтотОбъект, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Элементы.ОсновноеИзделиеУпаковка.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбораУпаковки);
	Справочники.УпаковкиЕдиницыИзмерения.ОтобразитьИнформациюОЕдиницеХранения(ОсновноеИзделиеНоменклатура, Элементы.ОсновноеИзделиеУпаковка);
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеОсновногоИзделия()
	
	ЕстьОшибки = Ложь;
	
	Если ИспользуетсяРежимРедактированияОсновногоИзделия(ЭтотОбъект) Тогда
		
		ВариантНазначенияВидНоменклатуры =
			(Объект.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.ВидНоменклатуры);
		
		Если НЕ ЗначениеЗаполнено(ОсновноеИзделиеНоменклатура) 
			И НЕ ВариантНазначенияВидНоменклатуры Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номенклатура';
																											|en = 'Items'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ОсновноеИзделиеНоменклатура",, ЕстьОшибки);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОсновноеИзделиеВидНоменклатуры)
			И ВариантНазначенияВидНоменклатуры Тогда
				
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Вид номенклатуры';
																											|en = 'Item kind'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ОсновноеИзделиеВидНоменклатуры",, ЕстьОшибки);
				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОсновноеИзделиеКоличествоУпаковок) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Количество';
																											|en = 'Quantity'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ОсновноеИзделиеКоличествоУпаковок",, ЕстьОшибки);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОсновноеИзделиеУпаковка)
			И ВариантНазначенияВидНоменклатуры Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Единица измерения';
																											|en = 'Unit of measure'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ОсновноеИзделиеУпаковка",, ЕстьОшибки);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеОсновногоИзделияСпецификацииПриСборке(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОсновноеИзделие = (Объект.ВыходныеИзделия.Количество() > 0);
	
	СписокРеквизитов = СписокРеквизитовОсновноеИзделиеСпецификации();
	Для каждого КлючЗначение Из СписокРеквизитов Цикл
		Объект[КлючЗначение.Значение] = ?(ЕстьОсновноеИзделие, Объект.ВыходныеИзделия[0][КлючЗначение.Ключ], Неопределено);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоТехнологическийНабор(Форма)
	
	Результат = Ложь;
	//++ НЕ УТКА
	Результат = Форма.ОсновноеИзделиеТипНоменклатуры
		= ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор");
	//-- НЕ УТКА
	
	Возврат Результат;
	
КонецФункции

//++ НЕ УТКА

&НаСервереБезКонтекста
Процедура ОсновноеИзделиеУпаковкаАвтоПодборНаСервере(СтрокаПоиска, ДанныеВыбора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = Справочники.РесурсныеСпецификации.ТекстЗапросаДоступныеУпаковкиСпецификацииНаВидНоменклатуры(Истина);
	Запрос.УстановитьПараметр("ИспользоватьУпаковкиНоменклатуры", ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры"));
	Запрос.УстановитьПараметр("СтрокаПоиска", СокрЛП(СтрокаПоиска)+"%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОчиститьРеквизитыПриИзмененииВариантаНазначения()
	
	Если Объект.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.ВидНоменклатуры Тогда
		ОсновноеИзделиеНоменклатура   = Неопределено;
		ОсновноеИзделиеХарактеристика = Неопределено;
		ОсновноеИзделиеУпаковка       = Неопределено;
	Иначе
		Если НЕ ЗначениеЗаполнено(ОсновноеИзделиеНоменклатура) Тогда
			ОсновноеИзделиеУпаковка = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.Номенклатура Тогда
		Если НЕ ЗначениеЗаполнено(ОсновноеИзделиеНоменклатура) Тогда
			УправлениеДаннымиОбИзделияхКлиентСервер.ОчиститьНастройкиУточненияПримененияСпецификации(Объект);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыИспользованияСвойствХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоОсновногоИзделия(СтруктураСтроки, КэшированныеЗначения)
	
	Если Объект.ВариантНазначения = ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.ВидНоменклатуры") Тогда
	
		Если ЗначениеЗаполнено(СтруктураСтроки.Упаковка) Тогда
			
			ЗначениеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураСтроки.Упаковка, "Числитель,Знаменатель");
			
			Коэффициент = ?(ЗначениеРеквизитов.Знаменатель = 0, 1, ЗначениеРеквизитов.Числитель / ЗначениеРеквизитов.Знаменатель);
			
		Иначе
			
			Коэффициент = 1;
			
		КонецЕсли;
		
		СтруктураСтроки.Количество = СтруктураСтроки.КоличествоУпаковок * Коэффициент;
		
	Иначе
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураСтроки, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьОчиститьВариантПромежуточногоВыпуска(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ВариантПромежуточногоВыпуска <> ПредопределенноеЗначение("Перечисление.ВариантыПромежуточногоВыпуска.НеИспользуется")
		И Не ДоступенПромежуточныйВыпуск(Форма) Тогда
		Объект.ВариантПромежуточногоВыпуска = ПредопределенноеЗначение("Перечисление.ВариантыПромежуточногоВыпуска.НеИспользуется");
		Форма.ЕстьПромежуточныйВыпуск = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

//++ НЕ УТКА
#Область Продукция

&НаКлиенте
Процедура ПроверитьОчиститьНастройкиПараметризацииПродукции()
	
	Если Объект.ВыходныеИзделия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОсновногоИзделия = Объект.ВыходныеИзделия[0];
	СтрокаИдентификатор    = СтрокаОсновногоИзделия.ПолучитьИдентификатор();
	
	Если СтрокаОсновногоИзделия.СпособАвтовыбораНоменклатуры <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ") Тогда
		СтрокаОсновногоИзделия.СвойствоСодержащееНоменклатуру = Неопределено;
		СтрокаОсновногоИзделия.СпособАвтовыбораНоменклатуры   = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
	КонецЕсли;
	
	Если СтрокаОсновногоИзделия.СпособАвтовыбораХарактеристики <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ") Тогда
		УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиАвтовыбораНоменклатуры(
			Элементы.Продукция,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаИдентификатор),
			Объект.СоответствиеСвойств);
		СтрокаОсновногоИзделия.АлгоритмАвтовыбораХарактеристики = "";
		СтрокаОсновногоИзделия.СпособАвтовыбораХарактеристики   = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
	КонецЕсли;
	
	Если СтрокаОсновногоИзделия.УстановленОтборПоСвойствам Тогда
		УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
			Элементы.Продукция,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаИдентификатор),
			Объект.ОтборПоСвойствам);
		СтрокаОсновногоИзделия.УстановленОтборПоСвойствам = Ложь;
	КонецЕсли;
	
	Если СтрокаОсновногоИзделия.РасчетПоФормуле Тогда
		СтрокаОсновногоИзделия.АлгоритмРасчетаКоличества = "";
		СтрокаОсновногоИзделия.РасчетПоФормуле           = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандПараметризацииСтрокиПродукции(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоступнаПараметризацияСтроки = (ТекущиеДанные.НомерСтроки > 1);
	
	Элементы.Продукция_НастроитьПодборНоменклатуры.Доступность                  = ДоступнаПараметризацияСтроки;
	Элементы.Продукция_НастройкаОтбораПоСвойствамИРасчетаПоФормулам.Доступность = ДоступнаПараметризацияСтроки;
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТКА

#Область ВыходныеИзделия

&НаКлиенте
Процедура ПриИзмененииНоменклатурыВСтрокеВыходныхИзделий(ТекущиеДанные)
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииНоменклатурыВСтрокеСАвтовыбором(ТекущиеДанные, Объект);
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущиеДанные, Объект);
	
	ОчиститьНастройкуОбработатьПоСпецификации(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область МатериалыИУслуги

#Область СпособПолученияМатериала

//++ НЕ УТКА

&НаКлиенте
Процедура ОбработкаВыбораСпособаПолученияМатериала(ДанныеСтроки, ВыбранноеЗначение)
	
	СпособПолученияМатериалаДоИзменения = ДанныеСтроки.СпособПолученияМатериала;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыбранноеЗначение);
	ЗаполнитьСлужебныеРеквизитыВСтрокеМатериалыИУслуги(ДанныеСтроки);
	
	ЗаполнитьПризнакОбособленноВСтрокеМатериалов(ДанныеСтроки, СпособПолученияМатериалаДоИзменения <> ДанныеСтроки.СпособПолученияМатериала);
	ПроверитьЗаполнитьСтатьюКалькуляцииПоУмолчанию(ДанныеСтроки);
	ПроверитьДобавитьВыпускПромежуточногоПолуфабриката(ДанныеСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьЗаполнитьСпособПолученияМатериалаПоУмолчанию(Строка)
	
	Если (Строка.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции")
			И Строка.ПроизводитсяВПроцессе
			И Строка.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе")
		
		ИЛИ Строка.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве")
			И Строка.ПроизводитсяВПроцессе
		) Тогда
	
		УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьСпособПолученияМатериалаПоУмолчанию(Строка);
		
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеСпособаПолученияМатериала(Строка, Форма)
	
	Если НЕ Форма.Элементы.МатериалыИУслугиСпособПолученияМатериалаРедактирование.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Результат = "";
	
//++ НЕ УТКА
	Если Строка.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации") Тогда
		
		Если ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) ИЛИ Форма.ИспользуетсяПроизводство21 Тогда
			
			Результат = СтрШаблон(НСтр("ru = 'Произвести по спецификации ""%1""';
										|en = 'Produce by the ""%1"" BOM'"), Строка.ИсточникПолученияПолуфабрикатаПредставление);
			
		Иначе
			
			Результат = НСтр("ru = 'Произвести';
							|en = 'Produce'");
			
		КонецЕсли;
		
		Если Не Форма.ДинамическаяСтруктураЗаказовНаПроизводство // устаревшая настройка "Планировать после этапа"
			И ЗначениеЗаполнено(Строка.ПланироватьНеРанее) Тогда
			
			Результат = Результат + СтрШаблон(НСтр("ru = ', планировать после этапа ""%1""';
													|en = ', schedule after the ""%1"" stage'"), Строка.ПланироватьНеРанееПредставление);
			
		КонецЕсли;
		
	ИначеЕсли Строка.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе") Тогда
		
		Если ЗначениеЗаполнено(Строка.СпецификацияРемонта) Тогда
			
			Результат = СтрШаблон(НСтр("ru = 'Ремонт по спецификации ""%1""';
										|en = 'R&M according to the ""%1"" BOM'"), Строка.СпецификацияРемонтаПредставление);
			
		Иначе
			
			Результат = СтрШаблон(НСтр("ru = 'Получить с этапа ""%1""';
										|en = 'Receive from the stage ""%1""'"), Строка.ИсточникПолученияПолуфабрикатаПредставление);
			
		КонецЕсли;
		
	ИначеЕсли Строка.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать")
		И Строка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")
		И ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) Тогда
		
		Результат = СтрШаблон(НСтр("ru = 'Состав по спецификации ""%1""';
									|en = 'Content by the ""%1"" bill of materials'"), Строка.ИсточникПолученияПолуфабрикатаПредставление);
		
	Иначе
		
		Результат = НСтр("ru = 'Обеспечивать';
						|en = 'Supply'");
		
	КонецЕсли;
		
//-- НЕ УТКА
	Строка.СпособПолученияМатериалаРедактирование = Результат;
	
КонецПроцедуры

#КонецОбласти

#Область СтатьяКалькуляции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтатьюКалькуляцииПоУмолчанию(ДанныеСтроки)
	
	Если УправлениеДаннымиОбИзделияхКлиентСервер.ПолуфабрикатПроизводимыйВПроцессе(ДанныеСтроки) Тогда
		
		ДанныеСтроки.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе");
		
	Иначе
		
		ДанныеСтроки.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПустаяСсылка");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьЗаполнитьСтатьюКалькуляцииПоУмолчанию(ДанныеСтроки)
	
	Если (ДанныеСтроки.СтатьяКалькуляции <> ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе")
			И УправлениеДаннымиОбИзделияхКлиентСервер.ПолуфабрикатПроизводимыйВПроцессе(ДанныеСтроки)
			
		ИЛИ ДанныеСтроки.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе")
			И НЕ УправлениеДаннымиОбИзделияхКлиентСервер.ПолуфабрикатПроизводимыйВПроцессе(ДанныеСтроки))
			
		Тогда
		ЗаполнитьСтатьюКалькуляцииПоУмолчанию(ДанныеСтроки);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ПриВводеНовойСтрокиСпецификации(Форма, ИмяТЧ, СтрокаТабличнойЧасти, Копирование = Ложь)
	
	КлючСвязиИсточника = ?(Копирование, СтрокаТабличнойЧасти.КлючСвязи, Неопределено);
	
	СтрокаТабличнойЧасти.КлючСвязи = Новый УникальныйИдентификатор;
	
	Если ИмяТЧ <> "Трудозатраты" Тогда
	
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(
				СтрокаТабличнойЧасти,
				КлючСвязиИсточника,
				Форма.Объект.СоответствиеСвойств);
			
	КонецЕсли;
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСОтборомПоСвойствам(
			СтрокаТабличнойЧасти,
			КлючСвязиИсточника,
			Форма.Объект.ОтборПоСвойствам);
			
	Если ИмяТЧ = "МатериалыИУслуги" Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Форма.ДанныеПервогоЭтапа, "ЭтоПервыйЭтап,ПроизводствоНаСтороне");
		УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьСпособПолученияМатериалаПоУмолчанию(СтрокаТабличнойЧасти);
		
		ПроверитьЗаполнитьСтатьюКалькуляцииПоУмолчанию(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатурыВСтрокеМатериалов(ТекущиеДанные)
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииНоменклатурыВСтрокеСАвтовыбором(
		ТекущиеДанные,
		Объект);
		
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(
		ТекущиеДанные,
		Объект);

	УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьСпособПолученияМатериалаПоУмолчанию(ТекущиеДанные);
	ЗаполнитьПризнакОбособленноВСтрокеМатериалов(ТекущиеДанные);
	ЗаполнитьПризнакПроизвестиВСтрокеМатериалов(ЭтотОбъект, ТекущиеДанные);
	ПроверитьЗаполнитьСтатьюКалькуляцииПоУмолчанию(ТекущиеДанные);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"МатериалыИУслуги", 
		ТекущиеДанные.Номенклатура, 
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеЭтапаМатериалыИУслуги(Идентификаторы)
	
	ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги(Идентификаторы);
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		
		Строка = Объект.МатериалыИУслуги.НайтиПоИдентификатору(Идентификатор);
		
		Если Не Строка.ПроизводитсяВПроцессе Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ЭтоПервыйЭтап И Строка.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе")
			ИЛИ Строка.ЭтоПервыйЭтап И ЗначениеЗаполнено(Строка.ПланироватьНеРанее)
			ИЛИ Строка.ПроизводствоНаСтороне И Не ИспользуетсяПроизводство22 Тогда
			УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьСпособПолученияМатериалаПоУмолчанию(Строка);
			ЗаполнитьПризнакОбособленноВСтрокеМатериалов(Строка);
			ЗаполнитьСтатьюКалькуляцииПоУмолчанию(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакОбособленноВСтрокеМатериалов(ДанныеСтроки, Сбросить = Истина)
	
	Если ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе") Тогда
		ДанныеСтроки.Обособленно = Истина;
	ИначеЕсли Сбросить Тогда
		ДанныеСтроки.Обособленно = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакПроизвестиВСтрокеМатериалов(Форма, ДанныеСтроки)
	
	Произвести = Ложь;
	
	Если ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации") Тогда
		Произвести = Истина;
	КонецЕсли;
	
	Если ДанныеСтроки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")
		И (Форма.ИсточникСоставаНаборовВПроизводстве = ПредопределенноеЗначение("Перечисление.ИсточникиСоставаНаборовВПроизводстве.Спецификации")
				ИЛИ Форма.ИсточникСоставаНаборовВПроизводстве = ПредопределенноеЗначение("Перечисление.ИсточникиСоставаНаборовВПроизводстве.СпецификацииИлиВариантыКомплектации")
				ИЛИ ЗначениеЗаполнено(ДанныеСтроки.ИсточникПолученияПолуфабриката)) Тогда
		Произвести = Истина;
	КонецЕсли;
	
	ДанныеСтроки.Произвести = Произвести;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//++ НЕ УТКА

#Область ПараметрыНазначения

&НаСервере
Процедура ОбработатьПараметрыНазначенияСпецификации()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПараметрыНазначенияСпецификаций") Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьПараметрыНазначенияСпецификации();
	
	СоздатьРеквизитыФормыПараметровНазначенияСпецификации();
	
	СоздатьЭлементыФормыПараметровНазначенияСпецификации();
	
	ЗаполнитьЗначенияПараметровНазначенияСпецификации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПараметрыНазначенияСпецификации(ТекущийОбъект)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПараметрыНазначенияСпецификаций") Тогда
		Возврат;
	КонецЕсли;
	
	Спецификация = ТекущийОбъект.Ссылка;
	
	НаборЗаписей = РегистрыСведений.ЗначенияПараметровНазначенияСпецификаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Спецификация.Установить(Спецификация);
	
	Для каждого Параметр Из ПараметрыНазначения Цикл
		
		Если НЕ ЭтотОбъект[Параметр.РеквизитИспользование] Тогда
			Продолжить;
		КонецЕсли;
		
		Условие = УсловияПараметровНазначения[ЭтотОбъект[Параметр.РеквизитУсловие]]; // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураУсловияОтбораПоСвойствамНоменклатуры
		
		Если Условие.Интервал Тогда
			
			ДобавитьПараметрНазначенияВНаборЗаписей(НаборЗаписей, Спецификация, Параметр,
				?(Условие.Идентификатор = "ВИнтервалеВключая","БольшеИлиРавно","Больше"),
				ЭтотОбъект[Параметр.РеквизитЗначение+"1"], 1);
				
			ДобавитьПараметрНазначенияВНаборЗаписей(НаборЗаписей, Спецификация, Параметр,
				?(Условие.Идентификатор = "ВИнтервалеВключая","МеньшеИлиРавно","Меньше"),
				ЭтотОбъект[Параметр.РеквизитЗначение+"2"], 2);
				
		Иначе
			
			Если Условие.Список Тогда
				Для Индекс = 0 По ЭтотОбъект[Параметр.РеквизитЗначение].Количество()-1 Цикл
					ДобавитьПараметрНазначенияВНаборЗаписей(НаборЗаписей, Спецификация,
						Параметр, Условие.Идентификатор, ЭтотОбъект[Параметр.РеквизитЗначение][Индекс].Значение, Индекс+1);
				КонецЦикла;
			Иначе
				ДобавитьПараметрНазначенияВНаборЗаписей(НаборЗаписей, Спецификация,
					Параметр, Условие.Идентификатор, ЭтотОбъект[Параметр.РеквизитЗначение]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПараметровНазначенияСпецификации(Отказ = Ложь)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПараметрыНазначенияСпецификаций") Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонНеЗаполнено      = НСтр("ru = 'Не заполнено %1значение параметра ""%2"".';
									|en = 'The %1 value of the ""%2"" parameter is not filled in.'");
	ШаблонНеверныйИнтервал = НСтр("ru = 'Левое значение параметра ""%1"" не может быть больше правого.';
									|en = 'The left value of the parameter ""%1"" cannot be greater than the right value.'");
	
	Для каждого Параметр Из ПараметрыНазначения Цикл
		
		Если НЕ ЭтотОбъект[Параметр.РеквизитИспользование] Тогда
			Продолжить;
		КонецЕсли;
		
		Условие = УсловияПараметровНазначения[ЭтотОбъект[Параметр.РеквизитУсловие]];
		
		Если Условие.Интервал Тогда
			
			Для Индекс = 1 По 2 Цикл
				Если Параметр.ЗаполнениеОбязательно И НЕ ЗначениеЗаполнено(ЭтотОбъект[Параметр.РеквизитЗначение+Индекс]) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(ШаблонНеЗаполнено,?(Индекс=1,НСтр("ru = 'левое';
																	|en = 'left'"),НСтр("ru = 'правое';
																						|en = 'right'"))+" ",Параметр.Представление),,
						Параметр.РеквизитЗначение+Индекс,,
						Отказ);
				КонецЕсли;
			КонецЦикла;
			
			Если ЭтотОбъект[Параметр.РеквизитЗначение+"1"] <> Неопределено
				И ЭтотОбъект[Параметр.РеквизитЗначение+"2"] <> Неопределено
				И ЭтотОбъект[Параметр.РеквизитЗначение+"1"] > ЭтотОбъект[Параметр.РеквизитЗначение+"2"] Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(ШаблонНеверныйИнтервал,Параметр.Представление),,
					Параметр.РеквизитЗначение+"1",,
					Отказ);
			КонецЕсли;
			
		Иначе
			
			Если Параметр.ЗаполнениеОбязательно И НЕ ЗначениеЗаполнено(ЭтотОбъект[Параметр.РеквизитЗначение]) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(ШаблонНеЗаполнено,"",Параметр.Представление),,
					Параметр.РеквизитЗначение,,
					Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПараметрыНазначенияСпецификации()
	
	Если ПараметрыНазначения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьРеквизиты = Новый Массив;
	УдалитьЭлементы  = Новый Массив;
	Для каждого Параметр Из ПараметрыНазначения Цикл
		
		УдалитьЭлементы.Добавить("Группа"+Параметр.Идентификатор);
		УдалитьРеквизиты.Добавить(Параметр.РеквизитИспользование);
		УдалитьРеквизиты.Добавить(Параметр.РеквизитУсловие);
		УдалитьРеквизиты.Добавить(Параметр.РеквизитЗначение);
		Если Параметр.ДоступенИнтервал Тогда
			УдалитьЭлементы.Добавить("ГруппаИнтервал"+Параметр.Идентификатор);
			УдалитьРеквизиты.Добавить(Параметр.РеквизитЗначение+"1");
			УдалитьРеквизиты.Добавить(Параметр.РеквизитЗначение+"2");
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(,УдалитьРеквизиты);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдалитьЭлементы, УдалитьРеквизиты);
	
	Для каждого ИмяЭлемента Из УдалитьЭлементы Цикл
		Элемент = Элементы.Найти(ИмяЭлемента);
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыНазначения.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормыПараметровНазначенияСпецификации()
	
	Реквизиты = Новый Массив;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("Дата");
	МассивТипов.Добавить("Число");
	
	ТипРеквизитаЗначенияСравниваемый = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов.Добавить("ЛюбаяСсылка");
	МассивТипов.Добавить("СписокЗначений");
	МассивТипов.Добавить("Булево");
	МассивТипов.Добавить("Строка");
	
	ТипРеквизитаЗначенияОбщий        = Новый ОписаниеТипов(МассивТипов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Т.Реквизит.Заголовок КАК Заголовок
	|ПОМЕСТИТЬ
	|	ПолноеПредставление
	|ИЗ
	|	РегистрСведений.ПараметрыНазначенияСпецификаций КАК Т
	|ГДЕ
	|	Т.Реквизит <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Т.Реквизит.Заголовок
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(1) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заголовок
	|;
	|
	|ВЫБРАТЬ
	|	Т.ВидПараметра                                  КАК ВидПараметра,
	|	Т.Реквизит                                      КАК Реквизит,
	|	Т.Реквизит.ТипЗначения                          КАК РеквизитТипЗначения,
	|	(НЕ ПолноеПредставление.Заголовок ЕСТЬ NULL)    КАК ПолноеПредставление
	|ИЗ
	|	РегистрСведений.ПараметрыНазначенияСпецификаций КАК Т
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПолноеПредставление КАК ПолноеПредставление
	|		ПО Т.Реквизит.Заголовок = ПолноеПредставление.Заголовок
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Приоритет УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйПараметр = ПараметрыНазначения.Добавить();
		НовыйПараметр.ВидПараметра     = Выборка.ВидПараметра;
		НовыйПараметр.Реквизит         = ?(ЗначениеЗаполнено(Выборка.Реквизит), Выборка.Реквизит, Выборка.ВидПараметра);
		НовыйПараметр.ТипЗначения      = УправлениеДаннымиОбИзделияхКлиентСервер.ТипЗначенияПараметраНазначения(
												Выборка.ВидПараметра,
												Выборка.РеквизитТипЗначения);
		НовыйПараметр.Представление    = УправлениеДаннымиОбИзделиях.ПредставлениеПараметраНазначения(
												Выборка.ВидПараметра,
												Выборка.Реквизит,
												Выборка.ПолноеПредставление);
		НовыйПараметр.ДоступенИнтервал = УправлениеДаннымиОбИзделияхКлиентСервер.ДоступенИнтервалПараметраНазначения(
												НовыйПараметр.ТипЗначения);
		
		Идентификатор = "ПараметрНазначения_"+ПараметрыНазначения.Количество();
		
		НовыйПараметр.Идентификатор         = Идентификатор;
		НовыйПараметр.РеквизитИспользование = Идентификатор+"_Использование";
		НовыйПараметр.РеквизитУсловие       = Идентификатор+"_Условие";
		НовыйПараметр.РеквизитЗначение      = Идентификатор+"_Значение";
		
		Реквизиты.Добавить(Новый РеквизитФормы(НовыйПараметр.РеквизитИспользование, Новый ОписаниеТипов("Булево"),,,Истина));
		Реквизиты.Добавить(Новый РеквизитФормы(НовыйПараметр.РеквизитУсловие,       Новый ОписаниеТипов("Строка"),,,Истина));
		Реквизиты.Добавить(Новый РеквизитФормы(НовыйПараметр.РеквизитЗначение,      ТипРеквизитаЗначенияОбщий,,,Истина));
		
		Если НовыйПараметр.ДоступенИнтервал Тогда
			Реквизиты.Добавить(Новый РеквизитФормы(НовыйПараметр.РеквизитЗначение+"1", ТипРеквизитаЗначенияСравниваемый,,,Истина));
			Реквизиты.Добавить(Новый РеквизитФормы(НовыйПараметр.РеквизитЗначение+"2", ТипРеквизитаЗначенияСравниваемый,,,Истина));
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(Реквизиты);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормыПараметровНазначенияСпецификации()
	
	Для каждого Параметр Из ПараметрыНазначения Цикл
		
		// элемент использования
		Элемент = Элементы.Добавить(Параметр.РеквизитИспользование, Тип("ПолеФормы"), Элементы.ПараметрыНазначенияЛево);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = Параметр.РеквизитИспользование;
		Элемент.Заголовок = Параметр.Представление;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИспользованиеПараметраНазначенияПриИзменении");
		
		// группа параметра
		ГруппаПараметраНазначения = Элементы.Добавить("Группа"+Параметр.Идентификатор, Тип("ГруппаФормы"), Элементы.ПараметрыНазначенияПраво);
		ГруппаПараметраНазначения.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаПараметраНазначения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаПараметраНазначения.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаПараметраНазначения.ОтображатьЗаголовок = Ложь;
		ГруппаПараметраНазначения.РазрешитьИзменениеСостава = Ложь;
		
		// элемент условия
		Элемент = Элементы.Добавить(Параметр.РеквизитУсловие, Тип("ПолеФормы"), ГруппаПараметраНазначения);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = Параметр.РеквизитУсловие;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.РедактированиеТекста = Ложь;
		Элемент.РежимВыбораИзСписка = Истина;
		Элемент.Ширина = 14;
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.КнопкаВыпадающегоСписка = Истина;
		
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_УсловиеПараметраНазначенияПриИзменении");
		Элемент.УстановитьДействие("Очистка"     , "Подключаемый_УсловиеПараметраНазначенияОчистка");
		
		ЗаполнитьСписокВыбораЭлементаУсловие(Элемент.СписокВыбора, Параметр.ТипЗначения);
		
		// элемент значения
		Элемент = Элементы.Добавить(Параметр.РеквизитЗначение, Тип("ПолеФормы"), ГруппаПараметраНазначения);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = Параметр.РеквизитЗначение;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.Ширина = 32;
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.КнопкаВыбора   = Истина;
		Элемент.КнопкаОчистки  = Истина;
		Элемент.КнопкаОткрытия = Ложь;
		
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеПараметраНазначенияПриИзменении");
		
		ПараметрыВыбораЭлемента = Новый Массив;
		Если Параметр.ВидПараметра = Перечисления.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер Тогда
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.ПодразделениеДиспетчер",Истина));
		ИначеЕсли Параметр.ВидПараметра = Перечисления.ВидыПараметровНазначенияСпецификаций.НаправлениеДеятельности Тогда
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыНаправленияДеятельности.Используется));
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.УчетЗатрат", Истина));
		ИначеЕсли Параметр.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Параметр.Реквизит));
		КонецЕсли;
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
		
		// элементы интервала
		Если Параметр.ДоступенИнтервал Тогда
			
			ГруппаИнтервал = Элементы.Добавить("ГруппаИнтервал"+Параметр.Идентификатор, Тип("ГруппаФормы"), ГруппаПараметраНазначения);
			ГруппаИнтервал.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаИнтервал.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаИнтервал.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаИнтервал.ОтображатьЗаголовок = Ложь;
			ГруппаИнтервал.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
			ГруппаИнтервал.РазрешитьИзменениеСостава = Ложь;
			
			Для Индекс = 1 По 2 Цикл
				
				Элемент = Элементы.Добавить(Параметр.РеквизитЗначение+Индекс, Тип("ПолеФормы"), ГруппаИнтервал);
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				Элемент.ПутьКДанным = Параметр.РеквизитЗначение+Индекс;
				Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				Элемент.Ширина = 14;
				Элемент.РастягиватьПоГоризонтали = Ложь;
				Элемент.КнопкаВыбора   = Истина;
				Элемент.КнопкаОчистки  = Истина;
				
				Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеПараметраНазначенияПриИзменении");
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПараметровНазначенияСпецификации()
	
	ЗначенияПараметровНазначения = Справочники.РесурсныеСпецификации.ЗначенияПараметровНазначенияСпецификаций(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка)).Получить(Объект.Ссылка);
	
	СтруктураПоиска = Новый Структура("ВидПараметра,Реквизит");
	
	Для каждого Параметр Из ПараметрыНазначения Цикл
		
		Условие = УсловияПараметровНазначения["Равно"]; // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураУсловияОтбораПоСвойствамНоменклатуры
		
		РеквизитыЗначений = Новый Структура("Значение", Параметр.ТипЗначения.ПривестиЗначение(Неопределено));
		Если Параметр.ДоступенИнтервал Тогда
			РеквизитыЗначений.Вставить("Значение1", Параметр.ТипЗначения.ПривестиЗначение(Неопределено));
			РеквизитыЗначений.Вставить("Значение2", Параметр.ТипЗначения.ПривестиЗначение(Неопределено));
		КонецЕсли;
		
		СтруктураПоиска.ВидПараметра = Параметр.ВидПараметра;
		СтруктураПоиска.Реквизит     = ?(Параметр.ВидПараметра = Параметр.Реквизит,
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка(), Параметр.Реквизит);
		
		НайденныеСтроки = ЗначенияПараметровНазначения.НайтиСтроки(СтруктураПоиска);
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			
			ЗначениеПараметра = НайденныеСтроки[0].СтруктураЗначения;
			
			Условие = ЗначениеПараметра.Условие; // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураУсловияОтбораПоСвойствамНоменклатуры
			
			Если Условие.Список Тогда
				РеквизитыЗначений.Значение = Новый СписокЗначений;
				РеквизитыЗначений.Значение.ТипЗначения = Параметр.ТипЗначения;
				РеквизитыЗначений.Значение.ЗагрузитьЗначения(ЗначениеПараметра.Значение.ВыгрузитьЗначения());
			Иначе
				Для каждого КлючИЗначение Из РеквизитыЗначений Цикл
					РеквизитыЗначений[КлючИЗначение.Ключ] = Параметр.ТипЗначения.ПривестиЗначение(ЗначениеПараметра[КлючИЗначение.Ключ]);
				КонецЦикла;
			КонецЕсли;
			
			ЭтотОбъект[Параметр.РеквизитИспользование] = Истина;
			
		Иначе
			
			ЭтотОбъект[Параметр.РеквизитИспользование] = Ложь;
			
		КонецЕсли;
		
		ЭтотОбъект[Параметр.РеквизитУсловие] = Условие.Идентификатор;
		Для каждого КлючИЗначение Из РеквизитыЗначений Цикл
			ЭтотОбъект[Параметр.Идентификатор+"_"+КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		
		ОбновитьОбязательностьЗаполненияПараметраНазначения(Параметр, Условие, Параметр.ТипЗначения);
		
		НастроитьЭлементыПараметраНазначения(ЭтотОбъект, Параметр);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список выбора условий
// 
// Параметры:
// 	СписокВыбора - СписокЗначений из Строка - список выбора для заполнения
// 	ТипЗначения - ОписаниеТипов - тип значения
&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементаУсловие(СписокВыбора, ТипЗначения)
	
	Если УсловияПараметровНазначения = Неопределено Тогда
		
		УсловияПараметровНазначения = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураУсловийОтбораПоСвойствамНоменклатуры();
		
	КонецЕсли;
	
	Для каждого КлючИЗначение Из УсловияПараметровНазначения Цикл
		Условие = КлючИЗначение.Значение; // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураУсловияОтбораПоСвойствамНоменклатуры
		Если Условие.Сравнение 
			И НЕ ТипЗначения.СодержитТип(Тип("Число"))
			И НЕ ТипЗначения.СодержитТип(Тип("Дата"))
		Тогда
			Продолжить;
		КонецЕсли;
		СписокВыбора.Добавить(Условие.Идентификатор, Условие.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Производит настройку элемента параметра назначения спецификаций
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма
// 	Параметр - ДанныеФормыЭлементКоллекции - данные параметра назначения
//
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыПараметраНазначения(Форма, Параметр)
	
	Элементы = Форма.Элементы; // ВсеЭлементыФормы
	
	ЭлементГруппы = Элементы["Группа"+Параметр.Идентификатор]; // ГруппаФормы
	ЭлементГруппы.Доступность = Форма[Параметр.РеквизитИспользование];
	
	Условие = Форма.УсловияПараметровНазначения[Форма[Параметр.РеквизитУсловие]];
	
	ПараметрТипЗначения = СкорректированныйТипПараметраНазначенияПоУсловию(Параметр.ТипЗначения, Условие);
	
	Если Условие.Интервал Тогда
		
		Для Индекс = 1 По 2 Цикл
			ЭлементЗначение = Элементы[Параметр.РеквизитЗначение+Индекс]; // ПолеВвода
			ЭлементЗначение.ОграничениеТипа           = ПараметрТипЗначения;
			ЭлементЗначение.АвтоОтметкаНезаполненного = Параметр.ЗаполнениеОбязательно;
		КонецЦикла;
		
	Иначе
		
		ЭлементЗначение = Элементы[Параметр.РеквизитЗначение]; // ПолеВвода
		ЭлементЗначение.Доступность               = НЕ Условие.Заполненность;
		ЭлементЗначение.АвтоОтметкаНезаполненного = Параметр.ЗаполнениеОбязательно;
		
		Если Условие.Список Тогда
			ЭлементЗначение.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Иначе
			ЭлементЗначение.ОграничениеТипа = ПараметрТипЗначения;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметр.ДоступенИнтервал Тогда
		Элементы[Параметр.РеквизитЗначение].Видимость               = НЕ Условие.Интервал;
		Элементы["ГруппаИнтервал"+Параметр.Идентификатор].Видимость = Условие.Интервал;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрНазначенияВНаборЗаписей(НаборЗаписей, Спецификация, Параметр, Условие, Значение, НомерВСписке = 0)
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	
	ЗаписьНабора.Спецификация = Спецификация;
	ЗаписьНабора.ВидПараметра = Параметр.ВидПараметра;
	ЗаписьНабора.Реквизит     = Параметр.Реквизит;
	ЗаписьНабора.Условие      = Условие;
	ЗаписьНабора.Значение     = Значение;
	ЗаписьНабора.НомерВСписке = НомерВСписке;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СкорректированныйТипПараметраНазначенияПоУсловию(ТипПараметра, Условие = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Условие) Тогда
		Возврат ТипПараметра;
	КонецЕсли;
	
	Если НЕ Условие.Сравнение Тогда
		Возврат ТипПараметра;
	КонецЕсли;
	
	Возврат ТипаПараметраБезНесравниваемыхТипов(ТипПараметра);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипаПараметраБезНесравниваемыхТипов(ТипПараметра)
	
	ВычитаемыеТипы = Новый Массив;
	Для каждого Тип Из ТипПараметра.Типы() Цикл
		Если НЕ Тип = Тип("Дата") И НЕ Тип = Тип("Число") Тогда
			ВычитаемыеТипы.Добавить(Тип);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ОписаниеТипов(ТипПараметра,,ВычитаемыеТипы);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокГруппыПараметровНазначения(Форма)
	
	ВидимостьГруппы = (Форма.ПараметрыНазначения.Количество() > 0);
	Если ВидимостьГруппы <> Форма.Элементы.ГруппаПараметрыНазначенияЗаголовок.Видимость Тогда
		Форма.Элементы.ГруппаПараметрыНазначенияЗаголовок.Видимость = ВидимостьГруппы;
	КонецЕсли;
	
	Если НЕ ВидимостьГруппы Тогда
		Возврат;
	КонецЕсли;
	
	Использование = 0;
	Для каждого Параметр Из Форма.ПараметрыНазначения Цикл
		Использование = Использование + ?(Форма[Параметр.РеквизитИспользование],1,0);
	КонецЦикла;
	
	Форма.НадписьПараметрыНазначения =
		СтрШаблон("%1%2", НСтр("ru = 'Параметры назначения';
								|en = 'Assignment parameters'"), ?(Использование > 0," ("+Использование+")", ""));
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОбязательностьЗаполненияПараметраНазначения(Параметр, Условие, ПараметрТипЗначения)
	
	Параметр.ЗаполнениеОбязательно =
		УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнениеЗначенияПараметраНазначенияОбязательно(Условие, ПараметрТипЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Автовыбор_ОтборПоСвойствам_РасчетКоличества

&НаКлиенте
Процедура ОбработкаВыбораНастройкаАвтовыбораНоменклатуры(ИмяТЧ, ВыбранноеЗначение)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СпособАвтовыбораНоменклатуры = ТекущиеДанные.СпособАвтовыбораНоменклатуры;
	
	Если УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатурыЗавершение(
			ВыбранноеЗначение,
			ТекущиеДанные,
			Объект.СоответствиеСвойств) Тогда
			
		Если СпособАвтовыбораНоменклатуры <> ТекущиеДанные.СпособАвтовыбораНоменклатуры Тогда
			
			Если ИмяТЧ = "МатериалыИУслуги" Тогда
				ПроверитьЗаполнитьСпособПолученияМатериалаПоУмолчанию(ТекущиеДанные);
				ЗаполнитьПризнакОбособленноВСтрокеМатериалов(ТекущиеДанные);
				ЗаполнитьПризнакПроизвестиВСтрокеМатериалов(ЭтотОбъект, ТекущиеДанные);
			ИначеЕсли ИмяТЧ = "ВыходныеИзделия" Тогда
				ОчиститьНастройкуОбработатьПоСпецификации(ТекущиеДанные);
			ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
				ОчиститьНастройкуОбработатьПоСпецификации(ТекущиеДанные);
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
		
		Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "МатериалыИУслуги" Тогда
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		КонецЕсли;
		
		Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "ВыходныеИзделия" Тогда
			СтруктураДействий.Вставить("ЗаполнитьПризнакВидНоменклатуры", Новый Структура("Номенклатура", "ВидНоменклатуры"));
			СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
			РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		Иначе
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
		
		Если ИмяТЧ = "МатериалыИУслуги" Тогда
			УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьИнформациюПоПрименениюМатериала(ТекущиеДанные);
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораНастройкаОтбораПоСвойствамИРасчетаПоФормулам(ИмяТЧ, ВыбранноеЗначение)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	ОтборПоСвойствам = ?(ИмяТЧ = "ЭтапВидыРабочихЦентров",
		ПроизводственныйПроцессЭтап.ОтборПоСвойствам,
		Объект.ОтборПоСвойствам);
	
	Если УправлениеДаннымиОбИзделияхКлиент.НастроитьОтборПоСвойствамИРасчетПоФормуламЗавершение(
		ВыбранноеЗначение,
		ТекущиеДанные,
		ОтборПоСвойствам) Тогда
		
		Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "ВыходныеИзделия" Тогда
			Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
					И ВыбранноеЗначение.Свойство("АлгоритмРасчетаКоличества")
					И НЕ ПустаяСтрока(ВыбранноеЗначение.АлгоритмРасчетаКоличества) Тогда
					
				ТекущиеДанные.Количество = 0;
				ТекущиеДанные.КоличествоУпаковок = 0;
				Если Объект.СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
					ТекущиеДанные.ДоляСтоимости = 0;
				КонецЕсли;
				
			КонецЕсли;
			РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		КонецЕсли;
		
		Если ИмяТЧ = "ЭтапВидыРабочихЦентров" Тогда
			ВидыРабочихЦентровПересчитатьВремяРаботы(ТекущиеДанные);
			РассчитатьДлительностьЭтапа();
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, ИмяТЧ)
	
	ОсновноеИзделиеСпецификации = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если ОсновноеИзделиеСпецификации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьДанныеДляРасчетаПоФормуламВХранилище(ИмяТЧ);

	ОтборПоСвойствам = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		?(ИмяТЧ = "ЭтапВидыРабочихЦентров", ПроизводственныйПроцессЭтап.ОтборПоСвойствам, Объект.ОтборПоСвойствам),
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаОтбораПоСвойствам());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьОтборПоСвойствамИРасчетПоФормулам(
						ЭтотОбъект,
						ИмяТЧ,
						ОтборПоСвойствам,
						ОсновноеИзделиеСпецификации,
						НЕ ДоступностьРеквизитов,
						,
						АдресВХранилище);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеДляРасчетаПоФормуламВХранилище(ИмяТаблицы)
	
	ИмяТЧ = СтрЗаменить(Элементы[ИмяТаблицы].ПутьКДанным,"Объект.","");
	
	ТекущаяСтрока = ?(ИмяТаблицы = "ЭтапВидыРабочихЦентров", Неопределено, Объект[ИмяТЧ].НайтиПоИдентификатору(Элементы[ИмяТаблицы].ТекущаяСтрока));
	
	ДанныеДляРасчета = Справочники.РесурсныеСпецификации.ВыгрузитьДанныеДляКонструктораФормул(
		Объект,
		ИмяТЧ,
		ТекущаяСтрока);
	
	Результат = ПоместитьВоВременноеХранилище(ДанныеДляРасчета, УникальныйИдентификатор);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#Область ИнформационнаяПанель

&НаКлиенте
Процедура НачатьОбновлениеИнформационнойПанели()
	
	ИнформационнаяСтрока = Неопределено;
	Элементы.ИнформационнаяПанельСтраницы.ТекущаяСтраница = Элементы.ИнформационнаяПанельСтраницаСкрыть;
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВариантПодбораВДокументы <> ПредопределенноеЗначение("Перечисление.ВариантыПодбораСпецификацииВДокументы.Автоматически") Тогда
		ИнформационнаяСтрока = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Спецификация исключена из автоматического выбора в документы.';
				|en = 'Specification is excluded from the automatic selection to documents.'"),,
			WebЦвета.Кирпичный);
		Элементы.ИнформационнаяПанельСтраницы.ТекущаяСтраница = Элементы.ИнформационнаяПанельСтраницаОтобразить;
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТКА
	НачатьОбновлениеИнформационнойПанелиНаСервере();
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"НачатьОбновлениеИнформационнойПанелиЗавершение",
			ЭтотОбъект);
			
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			ОписаниеОповещения,
			ПараметрыОжидания);
		
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура НачатьОбновлениеИнформационнойПанелиНаСервере()
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
		ДлительнаяОперация = Неопределено;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение списка вытесняющих спецификаций.';
															|en = 'Receipt of pushing-out specification list.'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Справочники.РесурсныеСпецификации.СписокВытесняющихСпецификацийВФоне",
		Справочники.РесурсныеСпецификации.СписокВытесняющихСпецификацийПараметрыВызова(Объект),
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		
		ОбработатьРезультатОбновленияИнформационнойПанели(ЭтотОбъект, ДлительнаяОперация);
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбновлениеИнформационнойПанелиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		ОбработатьРезультатОбновленияИнформационнойПанели(ЭтотОбъект, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьРезультатОбновленияИнформационнойПанели(Форма, Результат)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	ТекстСообщения = "";
	
	Если Результат.Статус = "Выполнено"
		И ОбработатьРезультатОбновленияИнформационнойПанелиНаСервере(Объект.Ссылка, Результат, ТекстСообщения) Тогда
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстСообщения,, WebЦвета.Кирпичный));
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '(подробнее)';
																	|en = '(more details)'"),,,,"ВытесняющиеСпецификацииИзделия"));
			
			Форма.ИнформационнаяСтрока = Новый ФорматированнаяСтрока(МассивСтрок);
			Элементы.ИнформационнаяПанельСтраницы.ТекущаяСтраница = Элементы.ИнформационнаяПанельСтраницаОтобразить;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьРезультатОбновленияИнформационнойПанелиНаСервере(ТекущаяСпецификация, Результат, ТекстСообщения)
	
	Спецификации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если НЕ ЗначениеЗаполнено(Спецификации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Спецификация может быть вытеснена более приоритетными';
							|en = 'Specification may be pushed out by more prioritized specifications'");
	
	Возврат Истина;
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

//++ НЕ УТКА

#Область УточненияПрименения

&НаКлиенте
Процедура ОткрытьНастройкуУточненияПримененияСпецификации(ВидНастройки)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("КлючСвязи", УправлениеДаннымиОбИзделияхКлиентСервер.ОтборПоСвойствамКлючСвязиПредопределенный(ВидНастройки));
	
	ОтборПоСвойствам = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ПараметрыФормы,
		Объект.ОтборПоСвойствам,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаОтбораПоСвойствам());
		
	ПараметрыФормы.Вставить("ТолькоПросмотр",   НЕ ДоступностьРеквизитов);
	ПараметрыФормы.Вставить("ОтборПоСвойствам", ОтборПоСвойствам);
	ПараметрыФормы.Вставить("ВидНоменклатуры",  ОсновноеИзделиеВидНоменклатуры);
	ПараметрыФормы.Вставить("ВидНастройки",     ВидНастройки);
	ПараметрыФормы.Вставить("Описание",         Объект.ОписаниеУточненияПрименения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьНастройкуУточненияПримененияСпецификацииЗавершение",
		ЭтотОбъект,
		ВидНастройки);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаНастройкиУточненияПримененияСпецификации",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

// Оповещение о завершении настройки уточнения применения
// 
// Параметры:
// 	РезультатНастройки - Структура - из:
// 		* ОтборПоСвойствам - ТаблицаЗначений - таблица отбора по свойствам
// 		* Описание - Строка - описание настройки
// 	ДополнительныеПараметры - Структура - дополнительные параметры
&НаКлиенте
Процедура ОткрытьНастройкуУточненияПримененияСпецификацииЗавершение(РезультатНастройки, ДополнительныеПараметры) Экспорт
	
	Если РезультатНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	КлючСвязи = УправлениеДаннымиОбИзделияхКлиентСервер.ОтборПоСвойствамКлючСвязиПредопределенный(ДополнительныеПараметры);
	
	УправлениеДаннымиОбИзделияхКлиент.ОбновитьНастройкиОтбораПоСвойствамПоКлючу(
		Объект.ОтборПоСвойствам,
		РезультатНастройки.ОтборПоСвойствам,
		КлючСвязи);
		
	Объект.ОписаниеУточненияПрименения = РезультатНастройки.Описание;
	
	ОбновитьИнформациюПоОсновномуИзделиюСпецификации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыИспользованияСвойствХарактеристик()
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить("
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Т.ИспользованиеХарактеристик В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ           КАК ОсновноеИзделиеХарактеристикиИспользуются,
	|
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НаборСвойстваНоменклатуры.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ)          КАК ОсновноеИзделиеНоменклатураЕстьСвойства,
	|
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Т.ИспользованиеХарактеристик В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА (НЕ НаборСвойстваХарактеристики.Ссылка ЕСТЬ NULL)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)          КАК ОсновноеИзделиеХарактеристикаЕстьСвойства
	|
	|ИЗ
	|	&Таблица КАК Т
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборСвойстваНоменклатуры
	|		ПО &ИспользоватьДополнительныеРеквизитыИСведения
	|			И НЕ НаборСвойстваНоменклатуры.ПометкаУдаления
	|			И (НаборСвойстваНоменклатуры.Ссылка = &ВидНоменклатурыНаборСвойств1
	|				ИЛИ НаборСвойстваНоменклатуры.Ссылка = &Набор_Справочник_Номенклатура_Общие)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборСвойстваХарактеристики
	|		ПО &ИспользоватьДополнительныеРеквизитыИСведения
	|			И НЕ НаборСвойстваХарактеристики.ПометкаУдаления
	|			И (НаборСвойстваХарактеристики.Ссылка =
	|					ВЫБОР
	|						КОГДА Т.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|							ТОГДА Т.ВладелецХарактеристик.НаборСвойствХарактеристик
	|						ИНАЧЕ &ВидНоменклатурыНаборСвойств2
	|					КОНЕЦ
	|				ИЛИ НаборСвойстваХарактеристики.Ссылка = &Набор_Справочник_ХарактеристикиНоменклатуры_Общие)
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Т.ИспользованиеХарактеристик В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ");
	
	Если Объект.ВариантНазначения = ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.ВидНоменклатуры") Тогда
		ИмяТаблицы = "ВидыНоменклатуры";
		ИмяРеквизита = "ОсновноеИзделиеВидНоменклатуры";
		ИсточникДанныхВидНоменклатуры = "Т";
	Иначе
		ИмяТаблицы = "Номенклатура";
		ИмяРеквизита = "ОсновноеИзделиеНоменклатура";
		ИсточникДанныхВидНоменклатуры = "Т.ВидНоменклатуры";
		Если ИспользоватьКачествоТоваров Тогда
			ТекстыЗапроса.Добавить("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОсновноеИзделие.Представление КАК ОсновноеИзделиеПредставление,
			|	ЕСТЬNULL(ТоварыДругогоКачества.НоменклатураБрак.Представление, """") КАК ОсновноеИзделиеНоменклатураДругогоКачестваПредставление
			|ИЗ
			|	Справочник.Номенклатура КАК ОсновноеИзделие
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
			|	ПО ОсновноеИзделие.Ссылка = ТоварыДругогоКачества.Номенклатура
			|		И ОсновноеИзделие.ВидНоменклатуры = ТоварыДругогоКачества.НоменклатураБрак.ВидНоменклатуры
			|		И ОсновноеИзделие.ИспользованиеХарактеристик = ТоварыДругогоКачества.НоменклатураБрак.ИспользованиеХарактеристик
			|		И ОсновноеИзделие.ЕдиницаИзмерения = ТоварыДругогоКачества.НоменклатураБрак.ЕдиницаИзмерения
			|		И ОсновноеИзделие.ИспользоватьУпаковки = ТоварыДругогоКачества.НоменклатураБрак.ИспользоватьУпаковки
			|		И НЕ ТоварыДругогоКачества.НоменклатураБрак.ПометкаУдаления
			|		И ТоварыДругогоКачества.ГрадацияКачества = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ОграниченноГоден)
			|ГДЕ
			|	ОсновноеИзделие.Ссылка = &Ссылка");
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = УправлениеПроизводством.ОбъединитьТекстыЗапросаВПакет(ТекстыЗапроса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица",                      СтрШаблон("Справочник.%1", ИмяТаблицы));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидНоменклатурыНаборСвойств1", СтрШаблон("%1.НаборСвойств", ИсточникДанныхВидНоменклатуры));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидНоменклатурыНаборСвойств2", СтрШаблон("%1.НаборСвойствХарактеристик", ИсточникДанныхВидНоменклатуры));
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект[ИмяРеквизита]);
	Запрос.УстановитьПараметр("ИспользоватьДополнительныеРеквизитыИСведения", ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения"));
	Запрос.УстановитьПараметр("Набор_Справочник_Номенклатура_Общие", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие"));
	Запрос.УстановитьПараметр("Набор_Справочник_ХарактеристикиНоменклатуры_Общие", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_ХарактеристикиНоменклатуры_Общие"));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	Иначе
		ОсновноеИзделиеНоменклатураЕстьСвойства   = Ложь;
		ОсновноеИзделиеХарактеристикаЕстьСвойства = Ложь;
		ОсновноеИзделиеХарактеристикиИспользуются = Ложь;
	КонецЕсли;
	
	Если Объект.ВариантНазначения = ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.Номенклатура")
		И ИспользоватьКачествоТоваров Тогда
		Выборка = РезультатыЗапроса[1].Выбрать();
		Если Выборка.Следующий() Тогда
			ОсновноеИзделиеНоменклатураДругогоКачестваПредставление = ?(ПустаяСтрока(Выборка.ОсновноеИзделиеНоменклатураДругогоКачестваПредставление),
				СтрШаблон(НСтр("ru = '%1, Ограниченно годен';
								|en = '%1, Suitable to a limited extent'"), Выборка.ОсновноеИзделиеПредставление),
				Выборка.ОсновноеИзделиеНоменклатураДругогоКачестваПредставление);
		Иначе
			ОсновноеИзделиеНоменклатураДругогоКачестваПредставление = "";
		КонецЕсли;
	Иначе
		ОсновноеИзделиеНоменклатураДругогоКачестваПредставление = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНастройкиЭлементовУточненияПрименения(Форма, ВидНастройки, Доступность = Истина)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	НазванияЭлементов = НазванияЭлементовПоВидуНастройки(ВидНастройки);
	
	ТекущаяКоманда = Элементы[НазванияЭлементов.УточнениеПрименения]; // КнопкаФормы
	
	КлючСвязи = УправлениеДаннымиОбИзделияхКлиентСервер.ОтборПоСвойствамКлючСвязиПредопределенный(ВидНастройки);
		
	СписокСтрокОтбора = Объект.ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	ЕстьВеденныеНастройки = (СписокСтрокОтбора.Количество() > 0);
	
	ТекущаяКоманда.Доступность = НЕ ЗначениеЗаполнено(Форма[НазванияЭлементов.ОсновноеИзделие])
		И (Форма[НазванияЭлементов.ЕстьСвойства] ИЛИ ЕстьВеденныеНастройки)
		И Доступность;
		
	Если ЕстьВеденныеНастройки Тогда
		Элементы[НазванияЭлементов.ОсновноеИзделие].ПодсказкаВвода = НСтр("ru = '<с отбором по свойствам>';
																			|en = '<with filter by properties>'");
		ТекущаяКоманда.Картинка = БиблиотекаКартинок.ФильтрПоВидамИСвойствамНоменклатуры;
	Иначе
		ТекущаяКоманда.Картинка = БиблиотекаКартинок.Отборы;
	КонецЕсли;
	УстановитьТекстПодсказкиУточненияПримененияСпецификации(Форма, ВидНастройки, ТекущаяКоманда, СписокСтрокОтбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НазванияЭлементовПоВидуНастройки(ВидНастройки)
	
	СтруктураВозврата = Новый Структура;
	
	Если ВидНастройки = "Номенклатура" Тогда
		СтруктураВозврата.Вставить("УточнениеПрименения", "УточнениеПримененияНоменклатура");
		СтруктураВозврата.Вставить("ОсновноеИзделие", "ОсновноеИзделиеНоменклатура");
		СтруктураВозврата.Вставить("ЕстьСвойства", "ОсновноеИзделиеНоменклатураЕстьСвойства");
	ИначеЕсли ВидНастройки = "Характеристика" Тогда
		СтруктураВозврата.Вставить("УточнениеПрименения", "УточнениеПримененияХарактеристика");
		СтруктураВозврата.Вставить("ОсновноеИзделие", "ОсновноеИзделиеХарактеристика");
		СтруктураВозврата.Вставить("ЕстьСвойства", "ОсновноеИзделиеХарактеристикаЕстьСвойства");
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстПодсказкиУточненияПримененияСпецификации(Форма, ВидНастройки, Команда, СписокСтрокОтбора)
	
	ТекстПодсказки = "";
	
	Если Команда.Доступность Тогда
		
		Если СписокСтрокОтбора.Количество() > 0 Тогда
			
			МассивСвойств = Новый Массив;
			Для каждого Строка Из СписокСтрокОтбора Цикл
				Если МассивСвойств.Найти(Строка.Свойство) = Неопределено Тогда
					МассивСвойств.Добавить(Строка.Свойство);
				КонецЕсли;
			КонецЦикла;
			
			ТекстПодсказки = СтрШаблон(НСтр("ru = 'Установлен отбор по %1: %2';
											|en = 'Filter by %1: %2 is set'"),
				?(МассивСвойств.Количество()>1, НСтр("ru = 'свойствам';
													|en = 'properties'"), НСтр("ru = 'свойству';
																				|en = 'property'")),
				СтрСоединить(МассивСвойств, "; "));
				
		Иначе
			
			ТекстПодсказки = НСтр("ru = 'Установить отбор по свойствам';
									|en = 'Set filter by properties'");
			
		КонецЕсли;
		
	Иначе
		
		ВариантНазначенияВидНоменклатуры = (Форма.Объект.ВариантНазначения = ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.ВидНоменклатуры"));
		НазванияЭлементов = НазванияЭлементовПоВидуНастройки(ВидНастройки);
		
		Если ВидНастройки = "Номенклатура" И НЕ ВариантНазначенияВидНоменклатуры Тогда
			ТекстПодсказки = НСтр("ru = 'Отбор по свойствам номенклатуры доступен для спецификаций на вид номенклатуры';
									|en = 'Filter by item properties is available for bills of materials per item kind'");
		ИначеЕсли ВидНастройки = "Характеристика" И НЕ Форма.ОсновноеИзделиеХарактеристикиИспользуются Тогда
			ТекстПодсказки = НСтр("ru = 'Характеристики не используются, отбор по свойствам недоступен';
									|en = 'Variants are not used, filter by properties is not available'");
		ИначеЕсли НЕ Форма[НазванияЭлементов.ЕстьСвойства] Тогда
			ТекстПодсказки = НСтр("ru = 'Отсутствуют свойства для установки отбора';
									|en = 'Missing properties for setting filter'");
		КонецЕсли;
			
	КонецЕсли;
	
	Команда.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ПоказатьФормуЗагрузкиИзФайла(ДополнительныеПараметры)
	
	ПолноеИмяТабличнойЧасти = "РесурсныеСпецификации.%1";
	ПолноеИмяТабличнойЧасти = СтрШаблон(ПолноеИмяТабличнойЧасти, ДополнительныеПараметры.ИмяТЧ);
	
	ЗаголовокФормыЗагрузки = НСтр("ru = 'Загрузка таблицы ""%1"" из файла';
									|en = 'Download the table ""%1"" from the file'");
	ЗаголовокФормыЗагрузки = СтрШаблон(ЗаголовокФормыЗагрузки, ДополнительныеПараметры.СинонимТЧ);
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = ПолноеИмяТабличнойЧасти;
	ПараметрыЗагрузки.Заголовок               = ЗаголовокФормыЗагрузки;
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Если ДополнительныеПараметры.ИмяТЧ = "Трудозатраты" Тогда
		ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаДляЗагрузкиТрудозатрат();
	Иначе
		ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаДляЗагрузкиНоменклатуры(ДополнительныеПараметры.ИмяТЧ);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьФормуЗагрузкиИзФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуЗагрузкиИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеКолонокМакетаДляЗагрузкиНоменклатуры(ИмяТЧ);
	
	КолонкиМакета = Новый Массив;
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Штрихкод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)), НСтр("ru = 'Штрихкод';
																																						|en = 'Barcode'"), 10);
	Колонка.Позиция = 1;
	Колонка.Родитель = "Номенклатура";
	КолонкиМакета.Добавить(Колонка);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Артикул", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)), НСтр("ru = 'Артикул';
																																					|en = 'Item ID'"), 10);
	Колонка.Позиция = 2;
	Колонка.Родитель = "Номенклатура";
	КолонкиМакета.Добавить(Колонка);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("КодНоменклатуры", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)), НСтр("ru = 'Код номенклатуры';
																																							|en = 'Items code'"), 15);
	Колонка.Позиция = 3;
	Колонка.Родитель = "Номенклатура";
	КолонкиМакета.Добавить(Колонка);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Номенклатура", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)), НСтр("ru = 'Номенклатура';
																																							|en = 'Item'"), 15);
	Колонка.Позиция = 4;
	КолонкиМакета.Добавить(Колонка);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Характеристика", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)), НСтр("ru = 'Характеристика';
																																							|en = 'Variant'"), 15);
	Колонка.Позиция = 5;
	КолонкиМакета.Добавить(Колонка);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("КоличествоУпаковок", Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(15, 3)), НСтр("ru = 'Количество';
																																								|en = 'Quantity'"), 10);
	Колонка.Позиция = 6;
	КолонкиМакета.Добавить(Колонка);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("КодУпаковки", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(4)), НСтр("ru = 'Код упаковки';
																																						|en = 'Packaging unit code'"), 12);
	Колонка.Позиция = 7;
	Колонка.Родитель = "Упаковка";
	КолонкиМакета.Добавить(Колонка);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Упаковка", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)), НСтр("ru = 'Упаковка';
																																						|en = 'Packaging unit'"), 10);
	Колонка.Позиция = 8;
	КолонкиМакета.Добавить(Колонка);
	
	Позиция = 8;
	
	Если Объект.МногоэтапныйПроизводственныйПроцесс Тогда
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("НомерЭтапа", Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(5, 0)), НСтр("ru = 'Номер этапа';
																																							|en = 'Stage number'"), 10);
		Колонка.Позиция = Позиция + 1;
		Колонка.Родитель = "Этап";
		КолонкиМакета.Добавить(Колонка);
		
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Этап", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)), НСтр("ru = 'Этап';
																																						|en = 'Stage'"), 15);
		Колонка.Позиция = Позиция + 2;
		КолонкиМакета.Добавить(Колонка);
		
		Позиция = Позиция + 2;
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ХранитьОперацииВРесурсныхСпецификациях Тогда
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("НомерОперации", Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(5, 0)), НСтр("ru = 'Номер операции';
																																								|en = 'Operation number'"), 13);
		Колонка.Позиция = Позиция + 1;
		Колонка.Родитель = "Операция";
		КолонкиМакета.Добавить(Колонка);
		
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Операция", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)), НСтр("ru = 'Операция';
																																							|en = 'Operation'"), 15);
		Колонка.Позиция = Позиция + 2;
		КолонкиМакета.Добавить(Колонка);
		
		Позиция = Позиция + 2;
	КонецЕсли;
	//-- НЕ УТКА
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("СтатьяКалькуляции", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)), НСтр("ru = 'Статья калькуляции';
																																								|en = 'Product cost element'"), 17);
	Колонка.Позиция = Позиция + 1;
	КолонкиМакета.Добавить(Колонка);
	
	Позиция = Позиция + 1;
	
	Если ИмяТЧ = "МатериалыИУслуги" Тогда
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("ПрименениеМатериала", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)), НСтр("ru = 'Применение материала';
																																									|en = 'Material application'"), 20);
		Колонка.Позиция = Позиция + 1;
		КолонкиМакета.Добавить(Колонка);
	Иначе
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("ОписаниеИзделия", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)), НСтр("ru = 'Описание изделия';
																																								|en = 'Product description'"), 20);
		Колонка.Позиция = Позиция + 1;
		КолонкиМакета.Добавить(Колонка);
	КонецЕсли;
	
	Возврат КолонкиМакета;
	
КонецФункции

&НаКлиенте
Функция ОписаниеКолонокМакетаДляЗагрузкиТрудозатрат();
	
	КолонкиМакета = Новый Массив;
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("КодВидаРабот", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)), НСтр("ru = 'Код вида работ';
																																							|en = 'Activity kind code'"), 15);
	Колонка.Позиция = 1;
	Колонка.Родитель = "ВидРабот";
	КолонкиМакета.Добавить(Колонка);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("ВидРабот", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)), НСтр("ru = 'Вид работ';
																																						|en = 'Activity kind'"), 15);
	Колонка.Позиция = 2;
	КолонкиМакета.Добавить(Колонка);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Количество", Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(15, 3)), НСтр("ru = 'Количество';
																																						|en = 'Quantity'"), 10);
	Колонка.Позиция = 3;
	КолонкиМакета.Добавить(Колонка);
	
	Позиция = 3;
	
	Если Объект.МногоэтапныйПроизводственныйПроцесс Тогда
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("НомерЭтапа", Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(5, 0)), НСтр("ru = 'Номер этапа';
																																							|en = 'Stage number'"), 10);
		Колонка.Позиция = Позиция + 1;
		Колонка.Родитель = "Этап";
		КолонкиМакета.Добавить(Колонка);
		
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Этап", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)), НСтр("ru = 'Этап';
																																						|en = 'Stage'"), 15);
		Колонка.Позиция = Позиция + 2;
		КолонкиМакета.Добавить(Колонка);
		
		Позиция = Позиция + 2;
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ХранитьОперацииВРесурсныхСпецификациях Тогда
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("НомерОперации", Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(5, 0)), НСтр("ru = 'Номер операции';
																																								|en = 'Operation number'"), 12);
		Колонка.Позиция = Позиция + 1;
		Колонка.Родитель = "Операция";
		КолонкиМакета.Добавить(Колонка);
		
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Операция", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)), НСтр("ru = 'Операция';
																																							|en = 'Operation'"), 15);
		Колонка.Позиция = Позиция + 2;
		КолонкиМакета.Добавить(Колонка);
		
		Позиция = Позиция + 2;
	КонецЕсли;
	//-- НЕ УТКА
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("СтатьяКалькуляции", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)), НСтр("ru = 'Статья калькуляции';
																																								|en = 'Product cost element'"), 17);
	Колонка.Позиция = Позиция + 1;
	КолонкиМакета.Добавить(Колонка);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("НазначениеРабот", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)), НСтр("ru = 'Назначение работ';
																																							|en = 'Work assignment'"), 20);
	Колонка.Позиция = Позиция + 2;
	КолонкиМакета.Добавить(Колонка);
	
	Возврат КолонкиМакета;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ДополнительныеПараметры)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных); //ТаблицаЗначений
	
	ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	
	ТабличнаяЧасть = Объект[ИмяТЧ];// ТабличнаяЧасть
	ТабличнаяЧасть.Очистить();
	
	Для Каждого Строка Из ЗагруженныеДанные Цикл
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.ЭтапРедактированиеПредставление = Строка.Этап;
		НоваяСтрока.ЭтапРедактирование               = Строка.Этап;
		
		//++ НЕ УТКА
		НоваяСтрока.ОперацияРедактированиеПредставление = Строка.Операция;
		НоваяСтрока.ОперацияРедактирование              = Строка.Операция;
		//-- НЕ УТКА
		
		НоваяСтрока.ЭлементПроизводственногоПроцессаПредставление = ПредставлениеЭлементаПроизводтвенногоПроцесса(ЭтотОбъект, НоваяСтрока);
		
		ПриВводеНовойСтрокиСпецификации(ЭтотОбъект, ИмяТЧ, НоваяСтрока);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НачатьЗаполнениеПроизводственногоПроцесса();
	
	СтатусДействующейСпецификации = Перечисления.СтатусыСпецификаций.Действует;
	СтатусСпецификацииВРазработке = Перечисления.СтатусыСпецификаций.ВРазработке;
	
	ИспользоватьПараметризациюРесурсныхСпецификаций = 
		ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций");
	
	ХранитьОперацииВРесурсныхСпецификациях = ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях");
	ИспользоватьМаршрутныеКарты            = ПолучитьФункциональнуюОпцию("ИспользоватьМаршрутныеКарты");
	ИспользоватьКачествоТоваров            = ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров");
	
	ПрочитатьДанныеОсновногоИзделияСпецификации();
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Справочники.РесурсныеСпецификации);
	Массив = Новый Массив;
	Массив.Добавить(Элементы.ВыходныеИзделияСпецификация);
	Массив.Добавить(Элементы.ВозвратныеОтходыСпецификация);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Массив, ПараметрыВыбораСпецификаций.Разборка);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.МатериалыИУслугиИсточникПолученияПолуфабриката, ПараметрыВыбораСпецификаций.Сборка);
	
	УстановитьПараметрыВыбораОтветственногоПодразделения();
	
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(Справочники.РесурсныеСпецификации.ПараметрыРаспределенияЗатрат(Объект));
	
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Продукция);
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.ВыходныеИзделия);
	
	//++ НЕ УТКА
	ИспользоватьВнутреннююПереработку = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннююПереработку");
	ОбработатьПараметрыНазначенияСпецификации();
	//-- НЕ УТКА
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Стандартное оформление номенклатуры
	#Область СтандартноеОформление
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект, 
																   "ПродукцияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВыходныеИзделия.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект, 
																   "ВыходныеИзделияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВыходныеИзделия.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект, 
																   "ВозвратныеОтходыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВозвратныеОтходы.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект, 
																   "МатериалыИУслугиНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.МатериалыИУслуги.Упаковка");
	
	УстановитьУсловноеОформлениеТабличныхЧастейСАвтовыбором();
	
	#КонецОбласти
	
	// Жирный шрифт для первой строки изделий
	#Область ЖирнымПерваяСтрока
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Продукция.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НомерСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));
	#КонецОбласти

	#Область ТолькоПросмотрПриНепрочитанномПроизводственномПроцессе
	
	НазванияЭлементовРедактирования = НазванияЭлементовРедактирования();
	
	Для каждого ИмяТЧ Из СтрРазделить("Продукция,ВыходныеИзделия,ВозвратныеОтходы,МатериалыИУслуги,Трудозатраты",",") Цикл
			
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы[НазванияЭлементовРедактирования[ИмяТЧ]].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроизводственныйПроцессПрочитан");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЦикла;
	
//++ НЕ УТКА
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПромежуточныйВыпускЭлементПроизводственногоПроцесса.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроизводственныйПроцессПрочитан");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
//-- НЕ УТКА
	
	#КонецОбласти

	// Текст <последний этап> или <первый этап>
	// при разборке возможно несколько последних этапов
	// при сборке возможно несколько первых этапов
	
	#Область ОформлениеЭлементовПроизводственногоПроцесса
	
	СтруктураЭлементов = Новый Соответствие();
	СтруктураЭлементов.Вставить("ПродукцияЭлементПроизводственногоПроцесса",        "ВыходныеИзделия");
	СтруктураЭлементов.Вставить("ВыходныеИзделияЭлементПроизводственногоПроцесса",  "ВыходныеИзделия");
	СтруктураЭлементов.Вставить("ВозвратныеОтходыЭлементПроизводственногоПроцесса", "ВозвратныеОтходы");
	
	Для каждого КлючИЗначение Из СтруктураЭлементов Цикл
	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы[КлючИЗначение.Ключ].Имя);
	
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("Объект.%1.ЭтапРедактирование", КлючИЗначение.Значение));
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		//++ НЕ УТКА
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ХранитьОперацииВРесурсныхСпецификациях");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		//-- НЕ УТКА
		
		ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НесколькоПоследнихЭтапов");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.Разборка;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<последний этап>';
																	|en = '<last stage>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
		//++ НЕ УТКА
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы[КлючИЗначение.Ключ].Имя);
	
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("Объект.%1.ЭтапРедактирование", КлючИЗначение.Значение));
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ХранитьОперацииВРесурсныхСпецификациях");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НесколькоПоследнихЭтапов");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.Разборка;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<последний этап / операция>';
																	|en = '<last stage / operation>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
		//-- НЕ УТКА
	
	КонецЦикла;
	
	СтруктураЭлементов = Новый Соответствие();
	СтруктураЭлементов.Вставить("МатериалыИУслугиЭлементПроизводственногоПроцесса", "МатериалыИУслуги");
	СтруктураЭлементов.Вставить("ТрудозатратыЭлементПроизводственногоПроцесса",     "Трудозатраты");
	
	Для каждого КлючИЗначение Из СтруктураЭлементов Цикл

		Элемент = УсловноеОформление.Элементы.Добавить();
	
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы[КлючИЗначение.Ключ].Имя);
	
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("Объект.%1.ЭтапРедактирование", КлючИЗначение.Значение));
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		//++ НЕ УТКА
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ХранитьОперацииВРесурсныхСпецификациях");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		//-- НЕ УТКА
		
		ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НесколькоПервыхЭтапов");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.Сборка;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<первый этап>';
																	|en = '<first stage>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
		//++ НЕ УТКА
		Элемент = УсловноеОформление.Элементы.Добавить();
	
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы[КлючИЗначение.Ключ].Имя);
	
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("Объект.%1.ЭтапРедактирование", КлючИЗначение.Значение));
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ХранитьОперацииВРесурсныхСпецификациях");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НесколькоПервыхЭтапов");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.Сборка;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<первый этап / операция>';
																	|en = '<first stage / operation>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		//-- НЕ УТКА
	
	КонецЦикла;
	
	#КонецОбласти
	
	// Текст <любая характеристика>
	#Область ТекстЛюбаяХарактеристика
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияХарактеристика.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	Список.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Ремонт);
	ОтборЭлемента.ПравоеЗначение = Список;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НомерСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<любая характеристика>';
																|en = '<any variant>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти

	// Требуется заполнить доли стоимости
	#Область ДолиСтоимости
	
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(ЭтотОбъект, "Объект", "ВыходныеИзделия", "Продукция");
	
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(ЭтотОбъект, "Объект", "ВыходныеИзделия", "ВыходныеИзделия");
	
	УстановитьУсловноеОформлениеПоляДоляСтоимостиВыходныхИзделий("Продукция");
	УстановитьУсловноеОформлениеПоляДоляСтоимостиВыходныхИзделий("ВыходныеИзделия");
	
	#КонецОбласти
	
	// Запрет редактирования флага "Регистрировать серии"
	#Область СерииИспользуются
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияТребуетсяУказыватьСерии.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиТребуетсяУказыватьСерии.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область СтатьяКалькуляции
	
//++ НЕ УТКА
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСтатьяКалькуляции.Имя);
	
	// Запрет редактирования предопределенной статьи калькуляции
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
//-- НЕ УТКА
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСтатьяКалькуляции.Имя);
	
	ГруппаИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор");
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СтатьяКалькуляции");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсточникСоставаНаборовВПроизводстве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ИсточникиСоставаНаборовВПроизводстве.Спецификации;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<указывается в составе набора>';
																|en = '<specified in the set>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	//++ НЕ УТКА
	
	#Область ИсточникПолученияПолуфабриката
	
	// Ограничение доступности флага Производится
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиПроизвести.Имя);
	
	СписокТипов = Новый СписокЗначений();
	СписокТипов.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	СписокТипов.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокТипов.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокТипов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Органичение доступности поля Спецификация
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиИсточникПолученияПолуфабриката.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.Произвести");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиИсточникПолученияПолуфабриката.Имя);
	
	ГруппаИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.Произвести");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ИсточникПолученияПолуфабриката");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<подбирается автоматически>';
																|en = '<picked automatically>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	#КонецОбласти
	
	#Область Обособленно
	
	// Запрет редактирования признака обособленно при производстве на этапе
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиОбособленно.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособПолученияМатериала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Оформление признака "Обособленно" при выключенном динамическом планировании
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиОбособленно.Имя);
	
	ГруппаИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	СпособыПолученияМатериала = Новый СписокЗначений;
	СпособыПолученияМатериала.Добавить(Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе);
	СпособыПолученияМатериала.Добавить(Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации);
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособПолученияМатериала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СпособыПолученияМатериала;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПолуфабрикатыПроизводимыеНаЭтапе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти
	
	// Доступность колонки "Спецификация" выходных изделий
	#Область ОбработатьПоСпецификации
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияСпецификация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ОбработатьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСпецификация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ОбработатьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтотОбъект,
		"Объект",
		"Продукция",
		"КоличествоУпаковок");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтотОбъект,
		"Объект",
		"ВыходныеИзделия",
		"КоличествоУпаковок");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтотОбъект,
		"Объект",
		"ВозвратныеОтходы",
		"КоличествоУпаковок");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтотОбъект,
		"Объект",
		"МатериалыИУслуги",
		"КоличествоУпаковок");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтотОбъект,
		"Объект",
		"Трудозатраты",
		"Количество");
	
	#Область ПромежуточныйВыпуск
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ПромежуточныйВыпускХарактеристика",
		"Объект.ПромежуточныйВыпуск.ХарактеристикиИспользуются");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПромежуточныйВыпускНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПромежуточныйВыпуск.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОсновноеИзделиеНоменклатураДругогоКачестваПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ОсновноеИзделиеНоменклатураДругогоКачестваПредставление"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПромежуточныйВыпускНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПромежуточныйВыпуск.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОсновноеИзделиеНоменклатураДругогоКачестваПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьКачествоТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Продукция с качеством ""Ограниченно годен""';
																|en = 'Manufactured products with the Suitable to a limited extent quality'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПромежуточныйВыпускХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПромежуточныйВыпуск.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПромежуточныйВыпуск.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОсновноеИзделиеНоменклатураДругогоКачестваПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОсновноеИзделиеХарактеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ОсновноеИзделиеХарактеристика"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПромежуточныйВыпускХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПромежуточныйВыпуск.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПромежуточныйВыпуск.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьКачествоТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОсновноеИзделиеХарактеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОсновноеИзделиеХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<любая характеристика>';
																|en = '<any variant>'"));
	
	#КонецОбласти
	
	//-- НЕ УТКА
	
	УстановитьУсловноеОформлениеПоВерсииПодсистемыПроизводство();
	
	УстановитьУсловноеОформлениеПроизводственногоПроцесса();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораОтветственногоПодразделения()
	
	ПараметрыОтветственногоПодразделения = Новый Массив;
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ПодразделениеДиспетчерИлиПроизводственноеПодразделение", Истина);
	ПараметрыОтветственногоПодразделения.Добавить(ПараметрВыбора);
	ПараметрыОтветственногоПодразделения = Новый ФиксированныйМассив(ПараметрыОтветственногоПодразделения);
	Элементы.ОтветственноеПодразделение.ПараметрыВыбора = ПараметрыОтветственногоПодразделения;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТабличныхЧастейСАвтовыбором()
	
//++ НЕ УТКА
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеАвтовыбораНоменклатуры(ЭтотОбъект, "Объект", "Продукция");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеАвтовыбораНоменклатуры(ЭтотОбъект, "Объект", "ВыходныеИзделия");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеАвтовыбораНоменклатуры(ЭтотОбъект, "Объект", "ВозвратныеОтходы");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеАвтовыбораНоменклатуры(ЭтотОбъект, "Объект", "МатериалыИУслуги");
	Возврат;
//-- НЕ УТКА

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
																			 "ПродукцияХарактеристика",
																		     "Объект.ВыходныеИзделия.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
																			 "ВыходныеИзделияХарактеристика",
																		     "Объект.ВыходныеИзделия.ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
																			 "ВозвратныеОтходыХарактеристика",
																		     "Объект.ВозвратныеОтходы.ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
																			 "МатериалыИУслугиХарактеристика",
																		     "Объект.МатериалыИУслуги.ХарактеристикиИспользуются");
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоВерсииПодсистемыПроизводство()
	
	// Оформление таблицы "Выходные изделия"
	#Область ВыходныеИзделия
	
	// В новой концепции управления производством выпуск продукции 
	// по рассчитываемой стоимости возможен только на последнем этапе
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияЭлементПроизводственногоПроцесса.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступноУказаниеЭтаповВВыходныхИзделиях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	// Оформление таблицы "Материалы и работы"
	#Область МатериалыИУслуги
	
	// если производство на стороне, то производство в процессе недоступно
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСпособПолученияМатериалаРедактирование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	// для наборов и тары редактирование варианта обеспечения запрещено
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСпособПолученияМатериалаРедактирование.Имя);
	
	ГруппаИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособПолученияМатериала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
	
	ГруппаИЛИ = ГруппаИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИ = ГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор");
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ИсточникПолученияПолуфабриката");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить(Перечисления.ИсточникиСоставаНаборовВПроизводстве.НеИспользовать);
	СписокВариантов.Добавить(Перечисления.ИсточникиСоставаНаборовВПроизводстве.ВариантыКомплектации);
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсточникСоставаНаборовВПроизводстве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокВариантов;
	
	ГруппаИ = ГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара");
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоляДоляСтоимостиВыходныхИзделий(ИмяТаблицы)
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеТаблицы = ПолеДолейСтоимостиВыходныхИзделий(ЭтотОбъект, ИмяТаблицы, "ДоляСтоимостиНедоступна");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ПолеТаблицы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ДоляСтоимостиНедоступна");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<недоступна>';
																|en = '<unavailable>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеТаблицы = ПолеДолейСтоимостиВыходныхИзделий(ЭтотОбъект, ИмяТаблицы, "ДоляСтоимостиНедоступна");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ПолеТаблицы.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СпособРаспределенияЗатратНаВыходныеИзделия");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ДоляСтоимостиНедоступна");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ЕстьОшибкиЗаполненияДолиСтоимости");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ДоляСтоимостиПроцент");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеТаблицы = ПолеДолейСтоимостиВыходныхИзделий(ЭтотОбъект, ИмяТаблицы, "ЕстьОшибкиЗаполненияДолиСтоимости");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ПолеТаблицы.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ЕстьОшибкиЗаполненияДолиСтоимости");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ДоляСтоимостиНедоступна");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолеДолейСтоимостиВыходныхИзделий(Форма, ИмяТаблицы, ИмяРеквизита)
	
	Результат = Неопределено; // ПолеФормы
	ПоляФормы = Новый Структура;
	
	Если ИмяТаблицы = "Продукция" Тогда
		
		ПоляФормы.Вставить("ДоляСтоимостиНедоступна",           Форма.Элементы["ПродукцияДоляСтоимостиНедоступна"]);
		ПоляФормы.Вставить("ЕстьОшибкиЗаполненияДолиСтоимости", Форма.Элементы["ПродукцияЕстьОшибкиЗаполненияДолиСтоимости"]);
		
		Результат = ПоляФормы[ИмяРеквизита];
		
	КонецЕсли;
	
	Если ИмяТаблицы = "ВыходныеИзделия" Тогда
		
		ПоляФормы.Вставить("ДоляСтоимостиНедоступна",           Форма.Элементы["ВыходныеИзделияДоляСтоимостиНедоступна"]);
		ПоляФормы.Вставить("ЕстьОшибкиЗаполненияДолиСтоимости", Форма.Элементы["ВыходныеИзделияЕстьОшибкиЗаполненияДолиСтоимости"]);
		
		Результат = ПоляФормы[ИмяРеквизита];
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	НастройкиПодсистемыПроизводство = ПроизводствоСерверПовтИсп.НастройкиПодсистемыПроизводство();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиПодсистемыПроизводство);
	
	ИспользоватьПланированиеПроизводства = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПроизводства");
	ИсточникСоставаНаборовВПроизводстве = УправлениеДаннымиОбИзделияхПовтИсп.ИсточникСоставаНаборовВПроизводстве();
	
	//++ НЕ УТКА
	Если ИспользоватьПараметризациюРесурсныхСпецификаций Тогда
		
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.ВыходныеИзделия,
			Истина,
			Истина,
			Объект.ОтборПоСвойствам);
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.ВозвратныеОтходы,
			Истина,
			Истина,
			Объект.ОтборПоСвойствам);
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.МатериалыИУслуги,
			Истина,
			Истина,
			Объект.ОтборПоСвойствам);
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.Трудозатраты,
			Ложь,
			Истина,
			Объект.ОтборПоСвойствам);
		
	КонецЕсли;
	//-- НЕ УТКА

	ЗаполнитьСлужебныеРеквизитыВыходныеИзделия();
	
	СтруктураДействий = СтруктураДействийДляЗаполненияСлужебныхРеквизитов();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВозвратныеОтходы, СтруктураДействий);
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.МатериалыИУслуги, СтруктураДействий);
	
	//++ НЕ УТКА
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ПромежуточныйВыпуск, СтруктураДействий);
	//-- НЕ УТКА
	
	ДоступноОписаниеПартииВыпуска = УправлениеДаннымиОбИзделиях.ДоступноОписаниеПартииВыпуска();
	ЗаполнитьОписаниеПартииВыпуска();
	
	ЗаполнитьСлужебныеРеквизитыПроизводственногоПроцесса();
	//++ НЕ УТКА
	ЗаполнитьСлужебныеРеквизитыИспользованияСвойствХарактеристик();
	//-- НЕ УТКА
	ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги();
	
	ЗаполнитьПредставлениеСтатусаСпецификации();
	
	РассчитатьДоступноУказаниеЭтаповВВыходныхИзделиях();
	РассчитатьКоличествоВыходныеПобочныеИзделия(ЭтотОбъект);
	
	ИспользоватьПолуфабрикатыПроизводимыеНаЭтапе = УправлениеДаннымиОбИзделиях.ИспользоватьПолуфабрикатыПроизводимыеНаЭтапе(Объект);
	
	ИсключитьАвтоматическийВыборВДокументах = ?(Объект.ВариантПодбораВДокументы = Перечисления.ВариантыПодбораСпецификацииВДокументы.Автоматически, Ложь, Истина);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	УправлениеПредприятием = Ложь;
//++ НЕ УТКА
	УправлениеПредприятием = Истина;
	УстановитьЗаголовокФормы();
//-- НЕ УТКА
	
#Область УП_КА_21_22

	// Сворачиваемые группы
	Элементы.ГруппаОсновноеИзделиеЗаголовок.Видимость = УправлениеПредприятием;
	Элементы.ГруппаПараметрыНазначенияЗаголовок.Видимость = УправлениеПредприятием;
	
	// Параметры производственного процесса
	НадписьПараметрыПроизводственногоПроцесса = НСтр("ru = 'Параметры производственного процесса';
													|en = 'Production process parameters'");
	
	Элементы.ВыпускПроизвольнымиПорциями.Видимость = ДоступноОписаниеПартииВыпуска;
	Элементы.МинимальнаяПартияВыпуска.Видимость = ДоступноОписаниеПартииВыпуска;
	
	Элементы.ОптимальнаяПартияВыпуска.Видимость = УправлениеПредприятием И ИспользуетсяПроизводство22;
	Элементы.ДопустимоеПревышениеОптимальнойПартииВыпуска.Видимость = УправлениеПредприятием И ИспользуетсяПроизводство22;
	
	Элементы.ОграниченСрокПролеживанияВыходныхИзделий.Видимость    = УправлениеПредприятием И ИспользуетсяПроизводство22;
	Элементы.МаксимальныйСрокПролеживанияВыходныхИзделий.Видимость = УправлениеПредприятием И ИспользуетсяПроизводство22;
	
	// Ответственное подразделение
	Элементы.ОтветственноеПодразделение.Видимость = УправлениеПредприятием И ИспользуетсяПроизводство22;
	
	// Разрешения на замену
	Элементы.МатериалыИУслугиВвестиРазрешениеНаЗамену.Видимость = УправлениеПредприятием;
	
	// Серии
	Элементы.ПродукцияТребуетсяУказыватьСерии.Видимость = УправлениеПредприятием И ИспользуетсяПроизводство21;
	Элементы.МатериалыИУслугиТребуетсяУказыватьСерии.Видимость = УправлениеПредприятием И ИспользуетсяПроизводство21;
	
	// Подбор номенклатуры, расчет по формулам
	Элементы.Продукция_НастроитьПодборНоменклатуры.Видимость                         = УправлениеПредприятием;
	Элементы.Продукция_НастройкаОтбораПоСвойствамИРасчетаПоФормулам.Видимость        = УправлениеПредприятием;
	Элементы.ВыходныеИзделия_НастроитьПодборНоменклатуры.Видимость                   = УправлениеПредприятием;
	Элементы.ВыходныеИзделия_НастройкаОтбораПоСвойствамИРасчетаПоФормулам.Видимость  = УправлениеПредприятием;
	Элементы.ВозвратныеОтходы_НастроитьПодборНоменклатуры.Видимость                  = УправлениеПредприятием;
	Элементы.ВозвратныеОтходы_НастройкаОтбораПоСвойствамИРасчетаПоФормулам.Видимость = УправлениеПредприятием;
	Элементы.МатериалыИУслуги_НастроитьПодборНоменклатуры.Видимость                  = УправлениеПредприятием;
	Элементы.МатериалыИУслуги_НастройкаОтбораПоСвойствамИРасчетаПоФормулам.Видимость = УправлениеПредприятием;
	Элементы.ТрудозатратыНастройкаОтбораПоСвойствамИРасчетаПоФормулам.Видимость      = УправлениеПредприятием;
	
	УстановитьДоступностьЭлементовСпособаПолученияМатериала();
	
	// Применение материала
	ДоступноОписаниеВероятностиПримененияМатериалов = УправлениеДаннымиОбИзделиях.ДоступноОписаниеВероятностиПримененияМатериалов();
	Элементы.МатериалыИУслугиПрименениеМатериалаРедактирование.Видимость = ДоступноОписаниеВероятностиПримененияМатериалов;
	Элементы.МатериалыИУслугиПрименениеМатериала.Видимость               = НЕ ДоступноОписаниеВероятностиПримененияМатериалов;
	
	// Маршрутные карты
	Элементы.ГруппаПечатьМаршрутнойКарты.Видимость            = УправлениеПредприятием И ИспользуетсяПроизводство21;
	Элементы.ФормаЗаполнитьПоМаршрутнымКартамЭтапов.Видимость = УправлениеПредприятием И НЕ ХранитьОперацииВРесурсныхСпецификациях;
	
	// Добавление элементов производственного процесса
	Элементы.ПроизводственныйПроцессДобавить.Видимость                      = НЕ УправлениеПредприятием;
	Элементы.ПроизводственныйПроцессКонтекстноеМенюДобавить.Видимость       = НЕ УправлениеПредприятием;
	Элементы.ПроизводственныйПроцессГруппаДобавить.Видимость                = УправлениеПредприятием;
	Элементы.ПроизводственныйПроцессКонтекстноеМенюГруппаДобавить.Видимость = УправлениеПредприятием;
	
#КонецОбласти
	
//++ НЕ УТКА
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.РазрешениеНаЗаменуМатериалов) Тогда
		Элементы.МатериалыИУслугиВвестиРазрешениеНаЗамену.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.ПрименениеНоменклатурыВПроизводстве) Тогда
		Элементы.ФормаОткрытьСпецификацииИзделия.Доступность = Ложь;
		Элементы.ПродукцияОткрытьСпецификацииИзделия.Доступность = Ложь;
	КонецЕсли; 
	
	ЕстьПромежуточныйВыпуск = Объект.ВариантПромежуточногоВыпуска = Перечисления.ВариантыПромежуточногоВыпуска.ТоварДругогоКачества
		Или Объект.ВариантПромежуточногоВыпуска = Перечисления.ВариантыПромежуточногоВыпуска.НастраиваетсяВручную;
	
	ОбновитьЗаголовокГруппыПараметровНазначения(ЭтотОбъект);
//-- НЕ УТКА
	
	УстановитьДоступностьЭлементовПоТипуПроизводственногоПроцессаСервер();
	УстановитьДоступностьЭлементовРедактированияИзделий();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьДоступностьКомандИзмененияСтатуса();
	
	НастроитьЭлементыПроизводственногоПроцесса();
	
	ОбновитьИнформациюПоОсновномуИзделиюСпецификации();
	
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораМатериалов(
		Элементы.МатериалыИУслугиНоменклатура, ЭтотОбъект);
	
	УстановитьКлючСохраненияПоложенияОкна();
	
	Элементы.ГруппаДополнительно.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Описание);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	ОписаниеПартииВыпуска = Форма.ОписаниеПартииВыпуска;
	
	Если СтруктураРеквизитов.Свойство("ОсновноеИзделие")
		ИЛИ Инициализация Тогда
		
		ЭтоТехнологическийНабор = ЭтоТехнологическийНабор(Форма);
		
		Элементы.ГруппаВыходныеПобочныеИзделия.Видимость = НЕ ЭтоТехнологическийНабор;
		Элементы.ГруппаТрудозатраты.Видимость            = НЕ ЭтоТехнологическийНабор;
		ЭЛементы.ГруппаПроизводственныйПроцесс.Видимость = НЕ ЭтоТехнологическийНабор;
		
		Элементы.ГруппаПараметрыПроизводственногоПроцессаЗаголовок.Видимость = НЕ ЭтоТехнологическийНабор;
		Элементы.ГруппаПараметрыПроизводственногоПроцесса.Видимость          = НЕ ЭтоТехнологическийНабор;
		
		Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Видимость =        НЕ ЭтоТехнологическийНабор
			И (Форма.ИспользуетсяПроизводство22 И НЕ Форма.ИспользуетсяПроизводство21);
		
		НастроитьВариантыНазначенияСпецификации(Форма);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ОсновноеИзделие")
		ИЛИ СтруктураРеквизитов.Свойство("ВариантНазначения")
		ИЛИ Инициализация Тогда
		
		ВидимостьПромежуточныйВыпуск = ДоступенПромежуточныйВыпуск(Форма);
		
		Элементы.ЕстьПромежуточныйВыпуск.Видимость = ВидимостьПромежуточныйВыпуск;
		Элементы.ВариантПромежуточногоВыпускаТоварДругогоКачества.Видимость = ВидимостьПромежуточныйВыпуск;
		Элементы.ВариантПромежуточногоВыпускаНастраиваетсяВручную.Видимость = ВидимостьПромежуточныйВыпуск;
		
	КонецЕсли;
	
	// Настройка формы для многоэтапного производственного процесса
	Если СтруктураРеквизитов.Свойство("ПроизводственныйПроцесс")
		ИЛИ Инициализация Тогда
		
		Элементы.ДлительнаяОперацияИнформацияСтатус.Видимость = НЕ Форма.ПроизводственныйПроцессПрочитан;
		Элементы.ОписаниеПроизводственногоПроцесса.ТекущаяСтраница = ?(
			Форма.ПроизводственныйПроцессПрочитан,
			Элементы.СтраницаРедакторПроизводственногоПроцесса,
			Элементы.СтраницаРедакторПроизводственногоПроцессаЗагрузка);
		
		ДоступностьРеквизитов = Форма.ДоступностьРеквизитов;
		ЭтоТехнологическийНабор = ЭтоТехнологическийНабор(Форма);
		ЕстьЭтапы = (Форма.ПроизводственныйПроцессКэш.ЭтапКоличество > 0);
		
		Элементы.ПроизводственныйПроцессСвойстваПанель.Доступность   = ЕстьЭтапы;
		Элементы.ПроизводственныйПроцессСвернуть.Доступность         = ЕстьЭтапы;
		Элементы.ПроизводственныйПроцессРазвернуть.Доступность       = ЕстьЭтапы;
		Элементы.ПроизводственныйПроцессПереместитьВверх.Доступность = ЕстьЭтапы И ДоступностьРеквизитов;
		Элементы.ПроизводственныйПроцессПереместитьВниз.Доступность  = ЕстьЭтапы И ДоступностьРеквизитов;
		
		Если НЕ ЕстьЭтапы Тогда
			Элементы.ПроизводственныйПроцессСвойстваСтраницы.ТекущаяСтраница = Элементы.ПроизводственныйПроцессПустая;
		КонецЕсли;
		
		Элементы.КомандыИзмененияСтатуса.Доступность = Форма.ПроизводственныйПроцессПрочитан;
		
		ДоступенВыборЭлементаПроизводственногоПроцесса = НЕ ЭтоТехнологическийНабор
			И УправлениеДаннымиОбИзделияхКлиентСервер.МногоэтапныйПроизводственныйПроцессДоступен();
		Для каждого КлючИЗначение Из НазванияЭлементовРедактирования() Цикл
			Элементы[КлючИЗначение.Значение].Видимость = ДоступенВыборЭлементаПроизводственногоПроцесса;
		КонецЦикла;
		Для каждого КлючИЗначение Из НазванияКомандВыбораЭлементаПроизводственногоПроцесса() Цикл
			Элементы[КлючИЗначение.Значение].Видимость = ДоступенВыборЭлементаПроизводственногоПроцесса;
		КонецЦикла;
		
		//++ Устарело_Производство21
		Элементы.ОптимальноеКоличествоПередачиМеждуЭтапами.Видимость = Форма.УправлениеПредприятием
			И НЕ Форма.ИспользуетсяПроизводство22
			И Объект.МногоэтапныйПроизводственныйПроцесс;
		Элементы.ГруппаПараметрыПроизводственногоПроцессаЗаголовок.Видимость = (
			Форма.ДоступноОписаниеПартииВыпуска
				ИЛИ (Форма.УправлениеПредприятием И Форма.ИспользуетсяПроизводство22)
				ИЛИ Элементы.ОптимальноеКоличествоПередачиМеждуЭтапами.Видимость)
			И НЕ ЭтоТехнологическийНабор;
		//-- Устарело_Производство21
		
	КонецЕсли;
	
	// Настройка списка выбора вариантов описания ресурсных спецификаций
	Если СтруктураРеквизитов.Свойство("ОписаниеПартииВыпуска")
		ИЛИ Инициализация Тогда
		
		СписокВыбора = Элементы.ВыпускПроизвольнымиПорциями.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Истина).Представление = НСтр("ru = 'в произвольном количестве';
															|en = 'Any quantity'");
		Если ОписаниеПартииВыпуска <> Неопределено
			И ОписаниеПартииВыпуска.КоличествоУпаковок > 0
			И Не ОписаниеПартииВыпуска.МножественныйВыпуск
			И Не ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия.Пустая()
			Тогда
			КоличествоПредставление = Формат(ОписаниеПартииВыпуска.КоличествоУпаковок, "ЧН=; ЧГ=");
			СписокВыбора.Добавить(Ложь).Представление = СтрШаблон(НСтр("ru = 'кратно %1 %2';
																		|en = 'Multiple of %1 %2'"), КоличествоПредставление, ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия);
		Иначе
			СписокВыбора.Добавить(Ложь).Представление = НСтр("ru = 'кратными партиями';
															|en = 'Multiple lots'");
		КонецЕсли;
		
	КонецЕсли;
	
	// Выпуск произвольными порциями
	Если СтруктураРеквизитов.Свойство("ВыпускПроизвольнымиПорциями")
		ИЛИ Инициализация Тогда
		
		УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВводаКоличестваЕдиницПартий(
			Объект.ВыпускПроизвольнымиПорциями,
			Элементы.МинимальнаяПартияВыпуска);
		
		УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВводаКоличестваЕдиницПартий(
			Объект.ВыпускПроизвольнымиПорциями,
			Элементы.ОптимальнаяПартияВыпуска);
			
		УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВводаКоличестваЕдиницПартий(
			Объект.ВыпускПроизвольнымиПорциями,
			Элементы.ДопустимоеПревышениеОптимальнойПартииВыпуска);
		
		Форма.ВыпускПроизвольнымиПорциямиДоИзменения = Объект.ВыпускПроизвольнымиПорциями;
		
	КонецЕсли;
	
	// Минимальная партия выпуска
	Если СтруктураРеквизитов.Свойство("МинимальнаяПартияВыпуска")
		ИЛИ СтруктураРеквизитов.Свойство("ОписаниеПартииВыпуска")
		ИЛИ Инициализация Тогда
		
		ПодсказкаВвода = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЕдиницыИзмеренияПартииВыпуска(
			Форма.ОписаниеПартииВыпуска,
			Объект.МинимальнаяПартияВыпуска);
		Элементы.МинимальнаяПартияВыпуска.Подсказка = ПодсказкаВвода;
		
	КонецЕсли;
	
//++ НЕ УТКА
	
	// Оптимальная партия выпуска
	Если СтруктураРеквизитов.Свойство("ОптимальнаяПартияВыпуска")
		ИЛИ СтруктураРеквизитов.Свойство("ОписаниеПартииВыпуска")
		ИЛИ Инициализация Тогда
		
		ПодсказкаВвода = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЕдиницыИзмеренияПартииВыпуска(
			Форма.ОписаниеПартииВыпуска, 
			Объект.ОптимальнаяПартияВыпуска);
		Элементы.ОптимальнаяПартияВыпуска.Подсказка = ПодсказкаВвода;
		Элементы.ДопустимоеПревышениеОптимальнойПартииВыпуска.Подсказка = ПодсказкаВвода;
		
	КонецЕсли;
	
	// Максимальный срок пролеживания выходных изделий
	Если СтруктураРеквизитов.Свойство("НастройкаМаксимальныйСрокПролеживания")
		ИЛИ Инициализация Тогда
		
		Элементы.МаксимальныйСрокПролеживанияВыходныхИзделий.Видимость = Объект.ОграниченСрокПролеживанияВыходныхИзделий;
		
	КонецЕсли;
	
	// Промежуточный выпуск
	Если СтруктураРеквизитов.Свойство("ВариантПромежуточногоВыпуска")
		ИЛИ Инициализация Тогда
		
		ПромежуточныйВыпускИспользуется = 
			Объект.ВариантПромежуточногоВыпуска = ПредопределенноеЗначение(
				"Перечисление.ВариантыПромежуточногоВыпуска.ТоварДругогоКачества")
			Или Объект.ВариантПромежуточногоВыпуска = ПредопределенноеЗначение(
				"Перечисление.ВариантыПромежуточногоВыпуска.НастраиваетсяВручную");
		
		Элементы.ВариантПромежуточногоВыпускаТоварДругогоКачества.Доступность = Форма.ДоступностьРеквизитов
			И ПромежуточныйВыпускИспользуется
			И Форма.ИспользоватьКачествоТоваров;
		
		Элементы.ВариантПромежуточногоВыпускаНастраиваетсяВручную.Доступность = Форма.ДоступностьРеквизитов
			И ПромежуточныйВыпускИспользуется;
		
	КонецЕсли;
	
//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступенПромежуточныйВыпуск(Форма)
	
	Объект = Форма.Объект;
	
	ЭтоТараИлиРабота = Ложь;
	Если Объект.ВариантНазначения <> ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.СписокНоменклатуры") Тогда
		ЭтоТараИлиРабота = Форма.ОсновноеИзделиеТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")
			Или Форма.ОсновноеИзделиеТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа");
	ИначеЕсли Объект.ВыходныеИзделия.Количество() > 0 Тогда
		ЭтоТараИлиРабота = Объект.ВыходныеИзделия[0].ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")
			Или Объект.ВыходныеИзделия[0].ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа");
	КонецЕсли;
	
	ДоступенПромежуточныйВыпуск = Форма.ДинамическаяСтруктураЗаказовНаПроизводство
		И Не Форма.ИспользоватьПолуфабрикатыПроизводимыеНаЭтапе
		И Не ЭтоТараИлиРабота;
	
	Возврат ДоступенПромежуточныйВыпуск;
	
КонецФункции

//++ НЕ УТКА

&НаСервере
Функция ДоступноПроизводствоВПроцессеДляПереработки()
	
	Возврат ИспользуетсяПроизводство22;
		
КонецФункции

&НаСервере
Функция ДоступнаКолонкаПроцентБрака()
	
	Результат = Ложь;
	
	Для каждого Строка из Объект.ВыходныеИзделия Цикл
		Если Строка.ПроцентБрака <> 0 Тогда
			Результат = НЕ ИспользуетсяПроизводство21 И НЕ ДинамическаяСтруктураЗаказовНаПроизводство;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ИспользуетсяПроизводство21 Тогда
		Возврат;
	КонецЕсли;
	АвтоЗаголовок = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаголовокФормы = СтрШаблон(НСтр("ru = 'Ресурсная спецификация (%1) (создание)';
										|en = 'Bill of materials (%1) (Create)'"),
			Объект.ТипПроизводственногоПроцесса);
	Иначе
		ЗаголовокФормы = СтрШаблон(НСтр("ru = '%1 (%2) (Ресурсная спецификация)';
										|en = '%1 (%2) (Bill of materials)'"),
			Объект.Наименование,
			Объект.ТипПроизводственногоПроцесса);
	КонецЕсли;
	Заголовок = ЗаголовокФормы;
	
КонецПроцедуры

//-- НЕ УТКА

&НаСервере
Процедура РеквизитОписанияПартииВыпускаПриИзменении()
	
	ЗаполнитьОписаниеПартииВыпуска();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОписаниеПартииВыпуска,ВыпускПроизвольнымиПорциями");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеПартииВыпуска()
	
	Если Не ДоступноОписаниеПартииВыпуска Тогда
		Возврат;
	КонецЕсли;
	ОписаниеПартииВыпуска = Справочники.РесурсныеСпецификации.ОписаниеПартииВыпуска(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСтатусаСпецификации()
	
	Если Объект.Статус <> Перечисления.СтатусыСпецификаций.Действует Тогда
		СтатусСтрока = Строка(Объект.Статус);
	КонецЕсли;
	
	СтатусСтрока = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеСтатусаСпецификации(Объект.Статус);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПроизводственногоПроцесса()
	
	ЭтапОсновнаяЕдиницаВремениБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
	ЭтапОсновнаяЕдиницаВремениДлительностиЭтапаУББВ = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ();
	
	//++ НЕ УТКА
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ХранитьОперацииВРесурсныхСпецификациях
		И НЕ ПроизводственныйПроцессПрочитан Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК Т
		|ГДЕ
		|	НЕ Т.ПометкаУдаления
		|	И Т.Спецификация = &Спецификация
		|СГРУППИРОВАТЬ ПО
		|	Т.Владелец
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.Ссылка) > 1
		|";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Спецификация", Объект.Ссылка);
		
		ПроизводственныйПроцессКэш.ЕстьМногооперационныйЭтап = НЕ Запрос.Выполнить().Пустой();
	
	КонецЕсли;
	
	Для каждого Строка Из Объект.ПромежуточныйВыпуск Цикл
		Строка.ЭтапРедактирование = Строка.ЭтапПолучатель;
	КонецЦикла;
	//-- НЕ УТКА
	
	ЗаполнитьПредставлениеРеквизитовЭтапОперация();
	
	ЗаполнитьДанныеПервогоИПоследнегоЭтапа();
	
КонецПроцедуры

&НаСервере
Функция ОписаниеПроизводственногоПроцесса()
		
	КоличествоПервыхЭтапов = 0;
	КоличествоПоследнихЭтапов = 0;
	
	СтрокиЭтапы = ПроизводственныйПроцесс.ПолучитьЭлементы();
	Для каждого СтрокаЭтап Из СтрокиЭтапы Цикл
		Если СтрокаЭтап.Номер = 1 Тогда
			КоличествоПервыхЭтапов = КоличествоПервыхЭтапов + 1;
		КонецЕсли;
		Если СтрокаЭтап.НомерСледующего =  0 Тогда
			КоличествоПоследнихЭтапов = КоличествоПоследнихЭтапов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НесколькоПервыхЭтапов,НесколькоПоследнихЭтапов", КоличествоПервыхЭтапов > 1, КоличествоПоследнихЭтапов > 1);
	
КонецФункции

// Конструктор структуры данных первого/последнего этапа спецификации
// 
// Возвращаемое значение:
// 	Структура - данные этапа:
//		* Ссылка  - СправочникСсылка.ЭтапыПроизводства - ссылка на этап
//		* Наименование - Строка - наименование этапа
//		* Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение этапа
//		* ПроизводствоНаСтороне - Булево - признак производства на стороне
//
&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЭтапаКонструктор()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЭтоПервыйЭтап",         Ложь);
	Результат.Вставить("Ссылка",                ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка"));
	Результат.Вставить("Наименование",          "");
	Результат.Вставить("Подразделение",         ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	Результат.Вставить("ПроизводствоНаСтороне", Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПервогоИПоследнегоЭтапа()
	
	ДанныеПервогоЭтапа    = ДанныеЭтапаКонструктор();
	ДанныеПоследнегоЭтапа = ДанныеЭтапаКонструктор();
	
	Если ПроизводственныйПроцессПрочитан Тогда
	
		Этапы = ПроизводственныйПроцесс.ПолучитьЭлементы();
		
		Для Индекс = 0 По Этапы.Количество() - 1 Цикл
			Если Этапы[Индекс].Номер = 1 Тогда
				ЗаполнитьЗначенияСвойств(ДанныеПервогоЭтапа, Этапы[Индекс]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
		Для Индекс = -Этапы.Количество() + 1 По 0 Цикл
			Если Этапы[-Индекс].НомерСледующего = 0 Тогда
				ЗаполнитьЗначенияСвойств(ДанныеПоследнегоЭтапа, Этапы[-Индекс]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Справочники.РесурсныеСпецификации.ПолучитьПервыйИПоследнийЭтап(
			Объект.Ссылка,
			ДанныеПервогоЭтапа,
			ДанныеПоследнегоЭтапа,
			"Наименование,Подразделение,ПроизводствоНаСтороне");
	КонецЕсли;
	
	ДанныеПервогоЭтапа.ЭтоПервыйЭтап = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеРеквизитовЭтапОперация()
	
	ИменаТЧ = Новый Соответствие();
	ИменаТЧ.Вставить("ВыходныеИзделия",  Ложь);
	ИменаТЧ.Вставить("ВозвратныеОтходы", Ложь);
	ИменаТЧ.Вставить("МатериалыИУслуги", Ложь);
	ИменаТЧ.Вставить("Трудозатраты",     Ложь);
	//++ НЕ УТКА
	ИменаТЧ.Вставить("ПромежуточныйВыпуск", Ложь);
	//-- НЕ УТКА
	
	МассивСсылок = Новый Массив; // Массив из СправочникСсылка.ЭтапыПроизводства
	
	Для каждого КлючИЗначение Из ИменаТЧ Цикл
		
		ИмяТЧ = КлючИЗначение.Ключ;
		
		Для каждого Строка Из Объект[ИмяТЧ] Цикл
			
			Если ЗначениеЗаполнено(Строка.ЭтапРедактирование) Тогда
				МассивСсылок.Добавить(Строка.ЭтапРедактирование);
				ИменаТЧ[ИмяТЧ] = Истина;
			Иначе
				Строка.ЭтапРедактированиеПредставление = "";
			КонецЕсли;
			
			//++ НЕ УТКА
			Если ЗначениеЗаполнено(Строка.ОперацияРедактирование) Тогда
				МассивСсылок.Добавить(Строка.ОперацияРедактирование);
				ИменаТЧ[ИмяТЧ] = Истина;
			Иначе
				Строка.ОперацияРедактированиеПредставление = "";
			КонецЕсли;
			//-- НЕ УТКА
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивСсылок);
	
	Если ПроизводственныйПроцессПрочитан Тогда
		
		Представления    = Новый Соответствие;
		КоличествоСсылок = МассивСсылок.Количество();
		
		Этапы = ПроизводственныйПроцесс.ПолучитьЭлементы();
		Для каждого Этап Из Этапы Цикл
			Если МассивСсылок.Найти(Этап.Ссылка) <> Неопределено Тогда
				Представления.Вставить(Этап.Ссылка, Этап.Наименование);
			КонецЕсли;
			//++ НЕ УТКА
			Для каждого Операция Из Этап.ПолучитьЭлементы() Цикл
				Если МассивСсылок.Найти(Операция.Ссылка) <> Неопределено Тогда
					Представления.Вставить(Операция.Ссылка, Операция.Наименование);
				КонецЕсли;
			КонецЦикла;
			//-- НЕ УТКА
			Если Представления.Количество() = КоличествоСсылок Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
	
		Представления = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, "Наименование");
		
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ИменаТЧ Цикл
		
		Если НЕ КлючИЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТЧ = КлючИЗначение.Ключ;
		
		Для каждого Строка Из Объект[ИмяТЧ] Цикл
			
			Если ЗначениеЗаполнено(Строка.ЭтапРедактирование) Тогда
				Строка.ЭтапРедактированиеПредставление = Представления.Получить(Строка.ЭтапРедактирование);
			КонецЕсли;
			
			//++ НЕ УТКА
			Если ЗначениеЗаполнено(Строка.ОперацияРедактирование) Тогда
				Строка.ОперацияРедактированиеПредставление = Представления.Получить(Строка.ОперацияРедактирование);
			КонецЕсли;
			//-- НЕ УТКА
			
			Строка.ЭлементПроизводственногоПроцессаПредставление = ПредставлениеЭлементаПроизводтвенногоПроцесса(ЭтотОбъект, Строка);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПроизводственногоПроцесса(ТекущаяСтрока)
	
	ТекущиеДанные = ПроизводственныйПроцесс.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено
			ИЛИ ТекущиеДанные.ВидЭлемента <> "Этап" Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйЭтап    = ДанныеПервогоЭтапа; // см. ДанныеЭтапаКонструктор
	ПоследнийЭтап = ДанныеПоследнегоЭтапа; // см. ДанныеЭтапаКонструктор
	
	ОбновитьПервыйЭтап = ТекущиеДанные.Номер = 1
		ИЛИ ТекущиеДанные.Ссылка = ПервыйЭтап.Ссылка
		ИЛИ НЕ ЗначениеЗаполнено(ПервыйЭтап.Ссылка);
		
	ОбновитьПоследнийЭтап = ТекущиеДанные.НомерСледующего = 0
		ИЛИ ТекущиеДанные.Ссылка = ПоследнийЭтап.Ссылка
		ИЛИ НЕ ЗначениеЗаполнено(ПоследнийЭтап.Ссылка);
	
	Если ОбновитьПервыйЭтап ИЛИ ОбновитьПоследнийЭтап Тогда
		ЗаполнитьДанныеПервогоИПоследнегоЭтапа();
	КонецЕсли;
	
	ОбновитьРеквизитМногоэтапныйПроизводственныйПроцесс();
	
	Идентификаторы = Новый Массив();
	
	СписокОтборов = Новый Массив;
	СписокОтборов.Добавить(ТекущиеДанные.Ссылка);
	Если ОбновитьПервыйЭтап Тогда
		СписокОтборов.Добавить(Справочники.ЭтапыПроизводства.ПустаяСсылка());
	КонецЕсли;
	Для каждого ЗначениеОтбора Из СписокОтборов Цикл
		
		Отбор = Новый Структура("ЭтапРедактирование", ЗначениеОтбора);
		НайденныеСтроки = Объект.МатериалыИУслуги.НайтиСтроки(Отбор);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			Идентификаторы.Добавить(Строка.ПолучитьИдентификатор());
		КонецЦикла;
		
	КонецЦикла;
	
	Если Идентификаторы.Количество() > 0 Тогда
		ОбработатьИзменениеЭтапаМатериалыИУслуги(Идентификаторы);
	КонецЕсли;
	
//++ НЕ УТКА
	Если ТекущиеДанные.НомерСледующего = 0
		И Объект.ПромежуточныйВыпуск.Количество() > 0 Тогда
		Отбор = Новый Структура("ЭтапОтправитель", ТекущиеДанные.Ссылка);
		Для каждого Строка Из Объект.ПромежуточныйВыпуск.НайтиСтроки(Отбор) Цикл
			Объект.ПромежуточныйВыпуск.Удалить(Строка);
		КонецЦикла;
		ПромежуточныйВыпускКоличествоСтрок = 0;
	КонецЕсли;
//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокКолонокЗаполнитьСлужебныеРеквизитыМатериалыИУслуги()
	
	СоставПолей = "НомерСтроки,ЭтапРедактирование,СпособПолученияМатериала,ИсточникПолученияПолуфабриката,СпецификацияРемонта,ПланироватьНеРанее";
	Возврат СоставПолей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИменаТабличныхЧастей()
	
	Результат = Новый Массив;
	Результат.Добавить("ВыходныеИзделия");
	Результат.Добавить("ВозвратныеОтходы");
	Результат.Добавить("МатериалыИУслуги");
	Результат.Добавить("Трудозатраты");
	//++ НЕ УТКА
	Результат.Добавить("ПромежуточныйВыпуск");
	//-- НЕ УТКА
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СоответствиеТаблицФормыИменамТЧ()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Продукция",        "ВыходныеИзделия");
	Результат.Вставить("ВыходныеИзделия",  "ВыходныеИзделия");
	Результат.Вставить("ВозвратныеОтходы", "ВозвратныеОтходы");
	Результат.Вставить("МатериалыИУслуги", "МатериалыИУслуги");
	Результат.Вставить("Трудозатраты",     "Трудозатраты");
	//++ НЕ УТКА
	Результат.Вставить("ПромежуточныйВыпуск", "ПромежуточныйВыпуск");
	//-- НЕ УТКА
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги(Идентификаторы = Неопределено)
	
	СписокКолонок = СписокКолонокЗаполнитьСлужебныеРеквизитыМатериалыИУслуги();
	
	Если Идентификаторы <> Неопределено Тогда
		СписокСтрок = Новый Массив;
		Для каждого Идентификатор Из Идентификаторы Цикл
			СписокСтрок.Добавить(Объект.МатериалыИУслуги.НайтиПоИдентификатору(Идентификатор));
		КонецЦикла;
		ТабличнаяЧасть = Объект.МатериалыИУслуги.Выгрузить(СписокСтрок, СписокКолонок);
	Иначе
		ТабличнаяЧасть = Объект.МатериалыИУслуги.Выгрузить(, СписокКолонок);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабличнаяЧасть",        ТабличнаяЧасть);
	Запрос.УстановитьПараметр("ПроизводствоНаСтороне", ДанныеПервогоЭтапа.ПроизводствоНаСтороне);
	
	ТекстЗапроса = СтрЗаменить("
	|ВЫБРАТЬ
	|	&СписокКолонок
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|", "&СписокКолонок", СписокКолонок);
	
	Если ПроизводственныйПроцессПрочитан Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТаблицаЭтапов.Ссылка                КАК Ссылка,
		|	ТаблицаЭтапов.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	ТаблицаЭтапов.Номер                 КАК НомерЭтапа,
		|	ТаблицаЭтапов.Наименование          КАК Представление
		|ПОМЕСТИТЬ ТаблицаЭтапов
		|ИЗ
		|	&ТаблицаЭтапов КАК ТаблицаЭтапов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки                          КАК НомерСтроки,
		|
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ЭтапРедактирование = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ТаблицаЭтапРедактирование.НомерЭтапа = 1
		|	КОНЕЦ                                               КАК ЭтоПервыйЭтап,
		|
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ЭтапРедактирование = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|			ТОГДА &ПроизводствоНаСтороне
		|		ИНАЧЕ ТаблицаЭтапРедактирование.ПроизводствоНаСтороне
		|	КОНЕЦ                                               КАК ПроизводствоНаСтороне,
		|
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаИсточникПолученияПолуфабриката.Представление КАК СТРОКА(100))
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ(ТабличнаяЧасть.ИсточникПолученияПолуфабриката КАК Справочник.РесурсныеСпецификации).Наименование
		|	КОНЕЦ                                               КАК ИсточникПолученияПолуфабрикатаПредставление,
		|	ТаблицаПланироватьНеРанее.Представление             КАК ПланироватьНеРанееПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ТабличнаяЧасть.СпецификацияРемонта)   КАК СпецификацияРемонтаПредставление
		|
		|ИЗ
		|	ВТ КАК ТабличнаяЧасть
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЭтапов КАК ТаблицаЭтапРедактирование
		|	ПО ТабличнаяЧасть.ЭтапРедактирование = ТаблицаЭтапРедактирование.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЭтапов КАК ТаблицаИсточникПолученияПолуфабриката
		|	ПО ТабличнаяЧасть.ИсточникПолученияПолуфабриката = ТаблицаИсточникПолученияПолуфабриката.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЭтапов КАК ТаблицаПланироватьНеРанее
		|	ПО ТабличнаяЧасть.ПланироватьНеРанее = ТаблицаПланироватьНеРанее.Ссылка
		|
		|";
		
		Запрос.УстановитьПараметр("ТаблицаЭтапов", ТаблицаЭлементовПроизводственногоПроцесса(Новый Структура("ВидЭлемента","Этап")));
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ЭтапРедактирование = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ВЫРАЗИТЬ(ТабличнаяЧасть.ЭтапРедактирование КАК Справочник.ЭтапыПроизводства).НомерЭтапа = 1
		|
		|	КОНЕЦ КАК ЭтоПервыйЭтап,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ЭтапРедактирование = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|			ТОГДА &ПроизводствоНаСтороне
		|		ИНАЧЕ ВЫРАЗИТЬ(ТабличнаяЧасть.ЭтапРедактирование КАК Справочник.ЭтапыПроизводства).ПроизводствоНаСтороне
		|
		|	КОНЕЦ КАК ПроизводствоНаСтороне,
		|
		|	ПРЕДСТАВЛЕНИЕ(ТабличнаяЧасть.ИсточникПолученияПолуфабриката) КАК ИсточникПолученияПолуфабрикатаПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ТабличнаяЧасть.ПланироватьНеРанее)             КАК ПланироватьНеРанееПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ТабличнаяЧасть.СпецификацияРемонта)            КАК СпецификацияРемонтаПредставление
		|
		|ИЗ
		|	ВТ КАК ТабличнаяЧасть
		|";
	
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеСтроки = Объект.МатериалыИУслуги[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка,, "НомерСтроки");
		ЗаполнитьПредставлениеСпособаПолученияМатериала(ДанныеСтроки, ЭтотОбъект);
		УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьИнформациюПоПрименениюМатериала(ДанныеСтроки);
		ЗаполнитьПризнакПроизвестиВСтрокеМатериалов(ЭтотОбъект, ДанныеСтроки);
	КонецЦикла;

КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура ЗаполнитьСлужебныеРеквизитыВСтрокеМатериалыИУслуги(Строка)
	
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить(Строка.ПолучитьИдентификатор());
	ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги(Идентификаторы);

КонецПроцедуры

//-- НЕ УТКА

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВыходныеИзделия()
	
	СтруктураДействий = СтруктураДействийДляЗаполненияСлужебныхРеквизитов();
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ВыходныеИзделия, СтруктураДействий, Неопределено);
	
	ПроизводствоСервер.РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат);
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();

КонецПроцедуры

&НаСервере
Функция СтруктураДействийДляЗаполненияСлужебныхРеквизитов()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	Возврат СтруктураДействий;
	
КонецФункции

&НаСервере
Процедура РассчитатьДоступноУказаниеЭтаповВВыходныхИзделиях()
	
	ДоступноУказаниеЭтаповВВыходныхИзделиях = Ложь;
	
	Для каждого Строка Из Объект.ВыходныеИзделия Цикл
		
		Если ЗначениеЗаполнено(Строка.ЭтапРедактирование) Тогда
			
			ДоступноУказаниеЭтаповВВыходныхИзделиях = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьКоличествоВыходныеПобочныеИзделия(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка") Тогда
		ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	Иначе
		ВсегоИзделий = Объект.ВозвратныеОтходы.Количество();
	КонецЕсли;
	
	Форма.ВсегоВыходныеПобочныеИзделия = ВсегоИзделий;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия()
	
	ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Объект, ПараметрыРаспределенияЗатрат);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВводаДолиСтоимости(ТекущиеДанныеИдентификатор)
	
	ПараметрыФормы = ПроизводствоСервер.ПараметрыФормыВводаДолейСтоимости(Объект, ПараметрыРаспределенияЗатрат, ТекущиеДанныеИдентификатор);
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ПолучитьБлокируемыеРеквизитыОбъекта()
	
	Результат = Новый Массив;
	
	// Элементы шапки
	Результат.Добавить("Код");
	
	Результат.Добавить("ВыпускПроизвольнымиПорциями");
	Результат.Добавить("ВариантНазначения");
	Результат.Добавить("СпособРаспределенияЗатратНаВыходныеИзделия");
	
	// Основное изделие
	Результат.Добавить("ОсновноеИзделиеВидНоменклатуры");
	Результат.Добавить("ОсновноеИзделиеНоменклатура");
	Результат.Добавить("ОсновноеИзделиеХарактеристика");
	Результат.Добавить("ОсновноеИзделиеКоличествоУпаковок");
	Результат.Добавить("ОсновноеИзделиеУпаковка");
	Результат.Добавить("ОсновноеИзделиеПроцентБрака");
	
	// Элементы табличных частей
	Результат.Добавить("Продукция");
	Результат.Добавить("ВыходныеИзделия");
	Результат.Добавить("ВозвратныеОтходы");
	Результат.Добавить("МатериалыИУслуги");
	Результат.Добавить("Трудозатраты");
	//++ НЕ УТКА
	Результат.Добавить("ПромежуточныйВыпуск");
	//-- НЕ УТКА
	
	// Команды
	Результат.Добавить("ФормаЗаполнитьПоМаршрутнымКартамЭтапов");
	Результат.Добавить("МатериалыИУслугиРазбитьСтроку");
	Результат.Добавить("МатериалыИУслугиОткрытьПодборМатериалов");
	Результат.Добавить("МатериалыИУслуги_ЗаполнитьСтатьюКалькуляции");
	Результат.Добавить("МатериалыИУслугиЗагрузитьИзФайла");
	Результат.Добавить("ВозвратныеОтходы_ЗаполнитьСтатьюКалькуляции");
	Результат.Добавить("ВозвратныеОтходыЗагрузитьИзФайла");
	Результат.Добавить("Трудозатраты_ЗаполнитьСтатьюКалькуляции");
	Результат.Добавить("ТрудозатратыЗагрузитьИзФайла");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовПоТипуПроизводственногоПроцессаСервер()
	
	ЭтоСборка   = Истина;
	ЭтоРемонт   = Ложь;
	ЭтоРазборка = Ложь;
//++ НЕ УТКА
	ЭтоСборка   = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка"));
	ЭтоРемонт   = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Ремонт"));
	ЭтоРазборка = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка"));
//-- НЕ УТКА
	
	ДоступностьРеквизитов = (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.ВРазработке"));
	
//++ НЕ УТКА

	// Заголовки
	Если ЭтоСборка Тогда
		НадписьОсновноеИзделие = НСтр("ru = 'Продукция';
										|en = 'Manufactured products'");
	ИначеЕсли ЭтоРемонт Тогда
		НадписьОсновноеИзделие = НСтр("ru = 'Ремонтируемое изделие';
										|en = 'Product under R&M'");
	ИначеЕсли ЭтоРазборка Тогда
		НадписьОсновноеИзделие = НСтр("ru = 'Разбираемое изделие';
										|en = 'Product being disassembled'");
	КонецЕсли;
//-- НЕ УТКА
	УстановитьЗаголовокГруппыВыходныеПобочныеИзделия();
	
	Элементы.ГруппаВыходныеИзделия.Видимость = ЭтоРазборка;
	Элементы.ГруппаВыходныеИзделия.ОтображатьЗаголовок = ЭтоРазборка;
	
	Элементы.ГруппаВозвратныеОтходы.Видимость = ЭтоСборка ИЛИ ЭтоРазборка ИЛИ ЭтоРемонт;
	Элементы.ГруппаВозвратныеОтходы.ОтображатьЗаголовок = ЭтоРазборка;
	УстановитьЗаголовокТабличнойЧастиВозвратныеОтходы();
	
	// "обработать по спецификации"
	Элементы.ВыходныеИзделияГруппаСпецификация.Видимость = ЭтоРазборка;
	Элементы.ВозвратныеОтходыГруппаСпецификация.Видимость = ЭтоРазборка;
	
	// "% брака"
	ДоступнаКолонкаПроцентБрака = Ложь;
//++ НЕ УТКА
	ДоступнаКолонкаПроцентБрака = ДоступнаКолонкаПроцентБрака();
//-- НЕ УТКА
	Элементы.ПродукцияПроцентБрака.Видимость       = (ЭтоСборка   И ДоступнаКолонкаПроцентБрака);
	Элементы.ОсновноеИзделиеПроцентБрака.Видимость = (ЭтоСборка   И ДоступнаКолонкаПроцентБрака);
	Элементы.ВыходныеИзделияПроцентБрака.Видимость = (ЭтоРазборка И ДоступнаКолонкаПроцентБрака);
	
//++ НЕ УТКА

	// Максимальный срок пролеживания изделий при ремонте ограничен этапами
	Элементы.ОграниченСрокПролеживанияВыходныхИзделий.Видимость = (ЭтоСборка ИЛИ ЭтоРазборка) И ИспользуетсяПроизводство22;
//-- НЕ УТКА
	
//++ НЕ УТКА

	// Определяем тип номенклатуры основного изделия
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ОсновноеИзделиеВидНоменклатуры);
	МассивЭлементов.Добавить(Элементы.ОсновноеИзделиеНоменклатура);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(МассивЭлементов, ЭтотОбъект);
//-- НЕ УТКА
	
	// Разрешить запуск изделий по фиксированной стоимости
	Элементы.РазрешитьВыборДляИзделийПобочногоВыхода.Видимость = УправлениеПредприятием И ИспользуетсяПроизводство22 И ЭтоСборка;
	Элементы.РазрешитьВыборДляИзделийПобочногоВыхода.Доступность = НЕ Объект.ЕстьПараметризацияРесурсов;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовРедактированияИзделий()
	
	РежимРедактированияОсновногоИзделия = ИспользуетсяРежимРедактированияОсновногоИзделия(ЭтотОбъект);
	
//++ НЕ УТКА

	// Команда "Спецификации изделий"
	Элементы.ФормаОткрытьСпецификацииИзделия.Видимость     = РежимРедактированияОсновногоИзделия
		И НЕ (Объект.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.ВидНоменклатуры);
	Элементы.ПродукцияОткрытьСпецификацииИзделия.Видимость = Не РежимРедактированияОсновногоИзделия;
//-- НЕ УТКА
	
	// Одно (несколько) выходных изделий
	Элементы.ГруппаОдноИзделие.Видимость      = РежимРедактированияОсновногоИзделия;
	Элементы.ГруппаНесколькоИзделий.Видимость = Не РежимРедактированияОсновногоИзделия;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьРеквизитов = (Объект.Статус = Перечисления.СтатусыСпецификаций.ВРазработке);
	СпецификацияЗакрыта = (Объект.Статус = Перечисления.СтатусыСпецификаций.Закрыта);
	
	МассивЭлементов = ПолучитьБлокируемыеРеквизитыОбъекта();
	МассивЭлементов.Добавить("ЕстьПромежуточныйВыпуск");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", НЕ ДоступностьРеквизитов);
	
	// Элементы доступные только в действующей спецификации
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("МатериалыИУслугиВвестиРазрешениеНаЗамену");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", ДоступностьРеквизитов);
	
	// Если спецификация закрыта то сделаем недоступными остальные реквизиты
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("НачалоДействия");
	МассивЭлементов.Добавить("КонецДействия");
	МассивЭлементов.Добавить("ПечатьМаршрутнойКартыПоЭтапам");
	МассивЭлементов.Добавить("ПечатьМаршрутнойКартыПоМаршрутнымКартам");
	МассивЭлементов.Добавить("Ответственный");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", СпецификацияЗакрыта);
	
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена() И ДоступностьРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовСпособаПолученияМатериала()
	
	Если ИспользоватьПолуфабрикатыПроизводимыеНаЭтапе Тогда
		Элементы.МатериалыИУслугиСпособПолученияМатериалаРедактирование.Видимость = УправлениеПредприятием;
		Элементы.МатериалыИУслугиГруппаПроизвести.Видимость                       = Ложь;
	Иначе
		Элементы.МатериалыИУслугиСпособПолученияМатериалаРедактирование.Видимость = Ложь;
		Элементы.МатериалыИУслугиГруппаПроизвести.Видимость                       = УправлениеПредприятием;
	КонецЕсли;
	
	Элементы.МатериалыИУслугиИсточникПолученияПолуфабриката.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокГруппыВыходныеПобочныеИзделия()
	
	ЭтоСборка   = Истина;
	ЭтоРемонт   = Ложь;
	//++ НЕ УТКА
	ЭтоСборка   = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка"));
	ЭтоРемонт   = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Ремонт"));
	//-- НЕ УТКА
	
	Если ЭтоСборка ИЛИ ЭтоРемонт Тогда
		Если ИспользоватьПолуфабрикатыПроизводимыеНаЭтапе Тогда
			Результат = НСтр("ru = 'Побочный и промежуточный выход';
							|en = 'Side and intermediate products'");
		Иначе
			Результат = НСтр("ru = 'Побочный выход';
							|en = 'By-product'");
		КонецЕсли;
	Иначе
		Результат = НСтр("ru = 'Выходные изделия';
						|en = 'Finished products'");
	КонецЕсли;
	
	Элементы.ГруппаВыходныеПобочныеИзделия.Заголовок = Результат;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокТабличнойЧастиВозвратныеОтходы()
	
	Если ИспользоватьПолуфабрикатыПроизводимыеНаЭтапе Тогда
		Результат = НСтр("ru = 'Побочный и промежуточный выход по фиксированной стоимости';
						|en = 'Side and intermediate product at fixed cost'");
	Иначе
		Результат = НСтр("ru = 'Побочный выход по фиксированной стоимости';
						|en = 'By-products at fixed cost'");
	КонецЕсли;
	
	Элементы.ГруппаВозвратныеОтходы.Заголовок = Результат;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКлючСохраненияПоложенияОкна()
	
	МассивПризнаков = Новый Массив;
	МассивПризнаков.Добавить(ИспользуетсяПроизводство21);
	МассивПризнаков.Добавить(ИспользуетсяПроизводство22);
	МассивПризнаков.Добавить(ИспользоватьПолуфабрикатыПроизводимыеНаЭтапе);
	
	КлючСохраненияПоложенияОкна = СтрШаблон("%1_%2", ИмяФормы, СтрСоединить(МассивПризнаков));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТабличнойЧастиВозвратныеОтходы(Форма)
	
	Возврат ?(Форма.Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка"),
		Форма.Элементы.ГруппаВозвратныеОтходы.Заголовок,
		Форма.Элементы.ГруппаВыходныеПобочныеИзделия.Заголовок);
	
КонецФункции

&НаСервере
Функция КомандаПроверитьЗаполнениеВСтатусеДействует()
	
	Результат = Ложь;
	РежимПроверкиЗаполненияВСтатусеДействует = Истина;
	
	Если ПроверитьЗаполнениеОсновногоИзделия()
			И ПроверитьЗаполнение() Тогда
		Результат = Истина;
	КонецЕсли;
	
	РежимПроверкиЗаполненияВСтатусеДействует = Ложь;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандИзмененияСтатуса()
	
	Элементы.УстановитьСтатусДействует.Доступность   = (Объект.Статус <> Перечисления.СтатусыСпецификаций.Действует);
	Элементы.УстановитьСтатусаЗакрыта.Доступность    = (Объект.Статус <> Перечисления.СтатусыСпецификаций.Закрыта);
	Элементы.УстановитьСтатусВРазработке.Доступность = (Объект.Статус <> Перечисления.СтатусыСпецификаций.ВРазработке);
	Элементы.ПроверитьЗаполнение.Доступность         = (Объект.Статус <> Перечисления.СтатусыСпецификаций.Действует);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйСтатусИЗаписать(Статус)
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя изменить статус помеченной на удаление спецификации.';
									|en = 'Cannot change a status of the bill of materials marked for deletion.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует") Тогда
		
		Если Не ПроверитьЗаполнениеОсновногоИзделия() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Закрыта") 
		И НЕ ЗначениеЗаполнено(Объект.КонецДействия) Тогда
		Объект.КонецДействия = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	ЗаписатьСпецификацию(Статус);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьСпецификацию(Статус = Неопределено)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Справочник.РесурсныеСпецификации.Форма.ФормаЭлемента.ЗаписатьСпецификацию");
	
	ОчиститьСообщения();
	
	Результат = ЗаписатьСпецификациюНаСервере(Статус);
	Если Результат Тогда
		Оповестить("Запись_РесурсныеСпецификации");
		ОповеститьОбИзменении(Объект.Ссылка);
		ОповеститьОбИзменении(Тип("СправочникСсылка.ЭтапыПроизводства"));
		//++ НЕ УТКА
		ОповеститьОбИзменении(Тип("СправочникСсылка.ТехнологическиеОперации"));
		//-- НЕ УТКА
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаписатьСпецификациюНаСервере(Знач Статус = Неопределено)
	
	Результат      = Ложь;
	ИзменитьСтатус = Статус <> Неопределено И Объект.Статус <> Статус;
	
	Если ИзменитьСтатус Тогда
		ТекущийСтатус = Объект.Статус;
		Объект.Статус = Статус;
	КонецЕсли;
	
	Попытка
		
		Результат = Записать();
		
	Исключение
		
		Если ИзменитьСтатус Тогда
			СобытиеЖурналаРегистрации = НСтр("ru = 'Не удалось изменить статус спецификации';
											|en = 'Cannot change the BOM status'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			СобытиеЖурналаРегистрации = НСтр("ru = 'Не удалось записать спецификацию';
											|en = 'Cannot save bill of materials'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если ИзменитьСтатус И НЕ Результат Тогда
		Объект.Статус = ТекущийСтатус;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОбработчикУстановитьСтатусВРазработке(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Истина Тогда
		
		УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.ВРазработке"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("АдресТоваровВХранилище")
		И ЭтоАдресВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище) Тогда
		СписокТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	Иначе
		Возврат;
	КонецЕсли;
	
	ИмяТЧ = "МатериалыИУслуги";
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из СписокТоваров Цикл
		
		Таблица = Объект[ИмяТЧ]; // ТабличнаяЧасть
		
		ТекущаяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ПриВводеНовойСтрокиСпецификации(ЭтотОбъект, ИмяТЧ, ТекущаяСтрока);
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаДолиСтоимости(Элемент, ТекущиеДанные, ВыбранноеЗначение)
	
	Если ТекущиеДанные.ДоляСтоимости <> ВыбранноеЗначение.ДоляСтоимости Тогда
		
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(
			ТекущиеДанные,
			ВыбранноеЗначение);
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура ПроверитьДобавитьВыпускПромежуточногоПолуфабриката(ДанныеСтроки, ВыбранноеЗначение)
	
	Если ВыбранноеЗначение.Свойство("ДобавитьПромежуточныйВыпускПриВыборе") И ВыбранноеЗначение.ДобавитьПромежуточныйВыпускПриВыборе Тогда
		
		Шаблон = НСтр("ru = 'Добавить промежуточный выпуск полуфабриката на этап ""%1""?';
						|en = 'Add intermediate release of semi-finished product to the ""%1"" stage?'");
		ТекстВопроса = СтрШаблон(Шаблон, ДанныеСтроки.ИсточникПолученияПолуфабрикатаПредставление);
		
		ПараметрыОповещения = Новый Структура("ДанныеСтроки", ДанныеСтроки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПромежуточныйВыпускПриВыбореЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПромежуточныйВыпускПриВыбореЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧ = "ВозвратныеОтходы";
	
	ИсключитьКолонки = Новый Массив;
	ИсключитьКолонки.Добавить("Этап");
	ИсключитьКолонки.Добавить("ЭтапРедактирование");
	ИсключитьКолонки.Добавить("ЭтапРедактированиеПредставление");
	ИсключитьКолонки.Добавить("Операция");
	ИсключитьКолонки.Добавить("ОперацияРедактирование");
	ИсключитьКолонки.Добавить("ОперацияРедактированиеПредставление");
	ИсключитьКолонки.Добавить("ЭлементПроизводственногоПроцессаПредставление");
	
	СтрокаИсточник = ДополнительныеПараметры.ДанныеСтроки;
	
	ПромежуточныйВыпуск = Объект.ВозвратныеОтходы.Добавить();
	ПромежуточныйВыпуск.ЭтапРедактирование              = СтрокаИсточник.ИсточникПолученияПолуфабриката;
	ПромежуточныйВыпуск.ЭтапРедактированиеПредставление = СтрокаИсточник.ИсточникПолученияПолуфабрикатаПредставление;
	ПромежуточныйВыпуск.ЭлементПроизводственногоПроцессаПредставление = ПредставлениеЭлементаПроизводтвенногоПроцесса(ЭтотОбъект, ПромежуточныйВыпуск);
	ЗаполнитьЗначенияСвойств(ПромежуточныйВыпуск, СтрокаИсточник,, СтрСоединить(ИсключитьКолонки, ","));
	
	ПриВводеНовойСтрокиСпецификации(ЭтотОбъект, ИмяТЧ, ПромежуточныйВыпуск, Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ПромежуточныйВыпуск.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ПромежуточныйВыпуск.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ПромежуточныйВыпуск, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьКоличествоВыходныеПобочныеИзделия(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМаршрутнымКартамЭтаповЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоМаршрутнымКартамЭтапов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоМаршрутнымКартамЭтапов()

	Справочники.РесурсныеСпецификации.ЗаполнитьПоМаршрутнымКартамЭтапов(Объект);
	
	ПрочитатьДанныеОсновногоИзделияСпецификации();
	
	ЗаполнитьРеквизитыОбъектаПоДаннымОсновногоИзделия(ЭтотОбъект);
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьПредставлениеРеквизитовЭтапОперация();
	УстановитьДоступностьЭлементовРедактированияИзделий();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура ОбработатьВыборПоляВТаблице(ИмяТаблицы, Поле, СтандартнаяОбработка)

	Если ДоступностьРеквизитов И НЕ (ТолькоПросмотр ИЛИ Поле.ТолькоПросмотр) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоля = Поле.Имя;
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если (СтрНайти(ИмяПоля, "Номенклатура") > 0
			ИЛИ СтрНайти(ИмяПоля, "Артикул") > 0)
		И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		
	ИначеЕсли СтрНайти(ИмяПоля, "Спецификация") > 0
		И ЗначениеЗаполнено(ТекущиеДанные.Спецификация) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Спецификация);
		
	ИначеЕсли СтрНайти(ИмяПоля, "ЭтапРедактирование") > 0
		И ЗначениеЗаполнено(ТекущиеДанные.ЭтапРедактирование) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ЭтапРедактирование);
		
//++ НЕ УТКА
	
	ИначеЕсли СтрНайти(ИмяПоля, "ОперацияРедактирование") > 0
		И ЗначениеЗаполнено(ТекущиеДанные.ОперацияРедактирование) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ОперацияРедактирование);

	ИначеЕсли ИмяПоля = "МатериалыИУслугиСпособПолученияМатериалаРедактирование" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбораСпособаПолученияМатериала(ТекущиеДанные);

	ИначеЕсли ИмяПоля = "МатериалыИУслугиПрименениеМатериалаРедактирование"
		И ЗначениеЗаполнено(ТекущиеДанные.ПрименениеМатериалаРедактирование) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуНастройкиПримененияМатериала(ТекущиеДанные);
		
	ИначеЕсли ИмяПоля = "МатериалыИУслугиИсточникПолученияПолуфабриката" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ИсточникПолученияПолуфабриката);
		
//-- НЕ УТКА
	
	ИначеЕсли ИмяПоля = "ТрудозатратыСтатьяКалькуляции"
		И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.СтатьяКалькуляции);
		
	ИначеЕсли ИмяПоля = "МатериалыИУслугиСтатьяКалькуляции"
		И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции)
		И Не ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.СтатьяКалькуляции);
		
	ИначеЕсли (ИмяПоля = "ТрудозатратыВидРабот")
		И ЗначениеЗаполнено(ТекущиеДанные.ВидРабот)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВидРабот);
		
	ИначеЕсли (СтрНайти(ИмяПоля, "ДоляСтоимостиПроцент") > 0 ИЛИ СтрНайти(ИмяПоля, "ЕстьОшибкиЗаполненияДолиСтоимости") > 0)
		И Объект.СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФлагТребуетсяУказыватьСерии(СписокТЧ, Номенклатура, НовоеЗначение, Форма)
	
	МассивТЧ = СтрРазделить(СписокТЧ, ",");
	Для каждого ИмяТЧ Из МассивТЧ Цикл
		Для каждого ДанныеСтроки Из Форма.Объект[ИмяТЧ] Цикл
			Если ДанныеСтроки.Номенклатура = Номенклатура Тогда
				ДанныеСтроки.ТребуетсяУказыватьСерии = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура ОткрытьФормуПрименениеНоменклатурыВПроизводстве(Номенклатура)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура",             Номенклатура);
	ПараметрыФормы.Вставить("ТекущаяСпецификация",      Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимСпецификацииИзделия");
	
	ОткрытьФорму("ОбщаяФорма.ПрименениеНоменклатурыВПроизводстве", ПараметрыФормы,, КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПолучитьОсновноеИзделиеСпецификации()
	
	ОсновнойРеквизит = УправлениеДаннымиОбИзделияхКлиентСервер.ОсновнойРеквизитОсновногоИзделияСпецификации(Объект);
	
	Если ОсновнойРеквизит.Значение.Пустая() Тогда
	
		ТекстСообщения = НСтр("ru = 'Необходимо указать основное изделие спецификации.';
								|en = 'Specify main BOM product.'");
		
		Если Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
			И Объект.ВариантНазначения = ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.СписокНоменклатуры") Тогда
			Поле = "Объект.ВыходныеИзделия";
		Иначе
			Поле = ?(ОсновнойРеквизит.Имя = "ВидНоменклатуры", "ОсновноеИзделиеВидНоменклатуры", "ОсновноеИзделиеНоменклатура");
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле);
		
	КонецЕсли;
	
	Возврат ОсновнойРеквизит.Значение;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораСпособаПолученияМатериала(ДанныеСтроки)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ТипПроизводственногоПроцесса", Объект.ТипПроизводственногоПроцесса);
	
	ПараметрыФормы.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ДанныеСтроки.Характеристика);
	
	ПараметрыФормы.Вставить("СпособАвтовыбораНоменклатуры", ДанныеСтроки.СпособАвтовыбораНоменклатуры);
	
	ПараметрыФормы.Вставить("СпособПолученияМатериала", ДанныеСтроки.СпособПолученияМатериала);
	ПараметрыФормы.Вставить("ИсточникПолученияПолуфабриката", ДанныеСтроки.ИсточникПолученияПолуфабриката);
	ПараметрыФормы.Вставить("ИсточникПолученияПолуфабрикатаПредставление", ДанныеСтроки.ИсточникПолученияПолуфабрикатаПредставление);
	
	ПараметрыФормы.Вставить("СпецификацияРемонта", ДанныеСтроки.СпецификацияРемонта);
	ПараметрыФормы.Вставить("ПланироватьНеРанее", ДанныеСтроки.ПланироватьНеРанее);
	ПараметрыФормы.Вставить("ПланироватьНеРанееПредставление", ДанныеСтроки.ПланироватьНеРанееПредставление);
	
	ПараметрыФормы.Вставить("НачалоПроизводства", Объект.НачалоДействия);
	
	ПараметрыФормы.Вставить("Этап", ДанныеСтроки.ЭтапРедактирование);
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	
	ПараметрыФормы.Вставить("АдресПолуфабрикаты", ПоместитьВХранилищеПолуфабрикатыПредшествующихЭтапов(ДанныеСтроки.ПолучитьИдентификатор()));
	ПараметрыФормы.Вставить("ТолькоПросмотр", НЕ ДоступностьРеквизитов);
	
	ДанныеЭтапа = ДанныеПервогоЭтапа; // см. ДанныеЭтапаКонструктор
	ПараметрыФормы.Вставить("ЭтоПервыйЭтап", ДанныеСтроки.ЭтапРедактирование.Пустая() ИЛИ ДанныеСтроки.ЭтапРедактирование = ДанныеЭтапа.Ссылка);
	ПараметрыФормы.Вставить("ЭтоМатериалНабор", ДанныеСтроки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
	ПараметрыФормы.Вставить("ЭтоТехнологическийНабор", ЭтоТехнологическийНабор(ЭтотОбъект));
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаВыбораСпособаПолученияМатериала", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилищеПолуфабрикатыПредшествующихЭтапов(Идентификатор)
	
	АдресХранилища = Неопределено;
	
	ДанныеСтроки = Объект.МатериалыИУслуги.НайтиПоИдентификатору(Идентификатор);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ЭтапРедактирование) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
		
		Если ДанныеСтроки.ХарактеристикиИспользуются Тогда
			
			ПараметрыОтбора.Вставить("Характеристика", ДанныеСтроки.Характеристика);
			
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Этапы.Ссылка                КАК Этап,
		|	Этапы.Наименование          КАК НаименованиеЭтапа,
		|	Этапы.Номер                 КАК НомерЭтапа,
		|	Этапы.НомерСледующего       КАК НомерСледующегоЭтапа,
		|	Этапы.Подразделение         КАК Подразделение,
		|	Этапы.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|
		|	//
		|	Этапы.Номер                 КАК Номер,
		|	Этапы.НомерСледующего       КАК НомерСледующего,
		|	Этапы.Наименование          КАК Наименование,
		|	Этапы.Ссылка                КАК Ссылка
		|
		|ПОМЕСТИТЬ ВТТаблицаЭтаповПредшественников
		|
		|ИЗ
		|	&ТаблицаЭтапов КАК Этапы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ЭтапРедактирование КАК Справочник.ЭтапыПроизводства) КАК Этап,
		|	ВЫРАЗИТЬ(Таблица.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)    КАК Упаковка,
		|	Таблица.КоличествоУпаковок                                            КАК КоличествоУпаковок,
		|	ВЫРАЗИТЬ(Таблица.АлгоритмРасчетаКоличества КАК СТРОКА(100)) <> """"   КАК РасчетПоФормуле
		|ПОМЕСТИТЬ ВТТаблицаПолуфабрикатов
		|ИЗ
		|	&ТаблицаПолуфабрикатов КАК Таблица
		|ГДЕ
		|	Таблица.ЭтапРедактирование <> ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|;
		|
		|ВЫБРАТЬ
		|	Таблица.Этап КАК Этап,
		|	Таблица.РасчетПоФормуле КАК РасчетПоФормуле,
		|	СУММА(ВЫРАЗИТЬ(Таблица.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15,3))) КАК Количество
		|ПОМЕСТИТЬ ВТТаблицаПолуфабрикатовНаЭтапах
		|ИЗ
		|	ВТТаблицаПолуфабрикатов КАК Таблица
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Этап,
		|	Таблица.РасчетПоФормуле
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыПроизводства.*,
		|	ВЫБОР
		|		КОГДА &Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление
		|		ИНАЧЕ ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаПредставление,
		|	ЕСТЬNULL(ТаблицаПолуфабрикатов.Количество, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаПолуфабрикатов.Количество, 0) >= ВЫРАЗИТЬ(&КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(15,3))
		|				ИЛИ ЕСТЬNULL(ТаблицаПолуфабрикатов.РасчетПоФормуле, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КоличествоДостаточно,
		|	ЕСТЬNULL(ТаблицаПолуфабрикатов.РасчетПоФормуле, ЛОЖЬ) КАК РасчетПоФормуле,
		|	ВЫБОР
		|		КОГДА ТаблицаПолуфабрикатов.Количество ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДобавитьПромежуточныйВыпускПриВыборе
		|ИЗ
		|	ВТТаблицаЭтаповПредшественников КАК ЭтапыПроизводства
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаПолуфабрикатовНаЭтапах КАК ТаблицаПолуфабрикатов
		|		ПО ЭтапыПроизводства.Этап = ТаблицаПолуфабрикатов.Этап
		|ГДЕ
		|	(&ДоступноПроизводствоВПроцессеДляПереработки 
		|		ИЛИ НЕ &ДоступноПроизводствоВПроцессеДляПереработки И НЕ ЭтапыПроизводства.ПроизводствоНаСтороне)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЭтапа
		|";
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"Таблица.Упаковка",
				"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
				"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
		
		// ТаблицаПолуфабрикатов
		ТаблицаПолуфабрикатов = Объект.ВозвратныеОтходы.Выгрузить(
			ПараметрыОтбора,
			"ЭтапРедактирование, Упаковка, КоличествоУпаковок, АлгоритмРасчетаКоличества");
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("ТаблицаЭтапов", ТаблицаЭтаповПредшественников(ДанныеСтроки.ЭтапРедактирование));
		Запрос.УстановитьПараметр("ТаблицаПолуфабрикатов", ТаблицаПолуфабрикатов);
	
		// Полуфабрикат
		Запрос.УстановитьПараметр("Номенклатура",       ДанныеСтроки.Номенклатура);
		Запрос.УстановитьПараметр("Упаковка",           ДанныеСтроки.Упаковка);
		Запрос.УстановитьПараметр("КоличествоУпаковок", ДанныеСтроки.КоличествоУпаковок);
		
		Запрос.УстановитьПараметр("ДоступноПроизводствоВПроцессеДляПереработки", ДоступноПроизводствоВПроцессеДляПереработки());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			АдресХранилища = ПоместитьВоВременноеХранилище(РезультатЗапроса.Выгрузить(), УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат АдресХранилища;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастройкиПримененияМатериала(ДанныеСтроки)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ДанныеСтроки.Характеристика);
	
	ПараметрыФормы.Вставить("ПрименениеМатериала", ДанныеСтроки.ПрименениеМатериала);
	ПараметрыФормы.Вставить("Альтернативный", ДанныеСтроки.Альтернативный);
	ПараметрыФормы.Вставить("Вероятность", ДанныеСтроки.Вероятность);
	
	ПараметрыФормы.Вставить("ТолькоПросмотр", НЕ ДоступностьРеквизитов);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаНастройкиПримененияМатериала", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораНастройкиПримененияМатериала(ДанныеСтроки, ВыбранноеЗначение)
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыбранноеЗначение);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьИнформациюПоПрименениюМатериала(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВытесняющихСпецификаций()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контекст", Объект);
	
	ОткрытьФорму(
		"Справочник.РесурсныеСпецификации.Форма.ФормаВытесняющиеСпецификации",
		ПараметрыФормы,
		ЭтотОбъект);
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные)
	
	НетОшибок = ПроизводствоКлиент.ПроверитьЗаполнениеПередВводомДолиСтоимости(ТекущиеДанные, ПараметрыРаспределенияЗатрат);
	
	Если НетОшибок Тогда
		ПараметрыФормы = ПараметрыФормыВводаДолиСтоимости(ТекущиеДанные.ПолучитьИдентификатор());
		ОткрытьФорму("ОбщаяФорма.ВводДолиСтоимости",
			ПараметрыФормы,
			ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНастройкуОбработатьПоСпецификации(ТекущиеДанные)
	
	Если ТекущиеДанные.ОбработатьПоСпецификации Тогда
		ТекущиеДанные.ОбработатьПоСпецификации = Ложь;
		ТекущиеДанные.Спецификация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваСворачиваемойГруппы(ЭлементГруппа, КартинкаГруппы, ГруппаСвернута)

	ЭлементГруппа.Видимость = НЕ ГруппаСвернута;
	
	Если ГруппаСвернута Тогда
		КартинкаГруппы.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		КартинкаГруппы.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВариантыНазначенияСпецификации(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЭтоСборка = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка"));
	
	Элементы.ВариантНазначения.Видимость = Ложь;
	//++ НЕ УТКА
	Элементы.ВариантНазначения.Видимость = Форма.ДоступностьРеквизитов И НЕ Форма.ИспользуетсяПроизводство21;
	//-- НЕ УТКА
	
	СписокВыбора = Элементы.ВариантНазначения.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.ВидНоменклатуры"), НСтр("ru = 'вид номенклатуры';
																														|en = 'item kind'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.Номенклатура"),    НСтр("ru = 'номенклатура';
																														|en = 'item'"));
	Если ЭтоСборка И НЕ ЭтоТехнологическийНабор(Форма) Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.СписокНоменклатуры"), НСтр("ru = 'список номенклатуры';
																																|en = 'item list'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапВСтроках(ИмяТЧ)
	
	Если НЕ РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы[ИмяТЧ]) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТЧ", ИмяТЧ);
	ПараметрыФормы.Вставить("АдресВХранилище", ДеревоЭлементовПроизводственногоПроцессаДляВыбораВХранилище(ПараметрыФормы));
	
	ОткрытьФорму(
		"Справочник.РесурсныеСпецификации.Форма.ФормаВыбораЭлементаПроизводственногоПроцесса",
		ПараметрыФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляцииВСтроках(ИмяТЧ)
	
	Если НЕ РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы[ИмяТЧ]) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипЗатрат", ПроизводствоКлиент.ТипыЗатратДляВыбораСтатьиКалькуляции(ИмяТЧ));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьСтатьюКалькуляцииВСтрокахЗавершение", ЭтотОбъект, ИмяТЧ);
	
	ОткрытьФорму(
		"Справочник.СтатьиКалькуляции.ФормаВыбора",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляцииВСтрокахЗавершение(РезультатЗакрытия, ИмяТЧ) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	ТабличнаяЧасть = Объект[ИмяТЧ];
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		//++ НЕ УТКА
		Если ИмяТЧ = "МатериалыИУслуги"
			И ТекущиеДанные.ПроизводитсяВПроцессе Тогда
				Продолжить;
		КонецЕсли;
		//-- НЕ УТКА
		
		ТекущиеДанные.СтатьяКалькуляции = РезультатЗакрытия;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаСкопироватьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаРезультат = ФормаСкопироватьЗавершениеНаСервере();
	УправлениеДаннымиОбИзделияхКлиент.КопироватьРесурснуюСпецификациюПослеКопирования(СсылкаРезультат);
	
КонецПроцедуры

&НаСервере
Функция ФормаСкопироватьЗавершениеНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат УправлениеДаннымиОбИзделияхВызовСервера.КопироватьРесурснуюСпецификацию(Объект.Ссылка);
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти