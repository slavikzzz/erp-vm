
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	//++ НЕ УТКА
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроизводствоСервер.ИспользуетсяПроизводство22() Тогда
		ТекстИсключения = НСтр("ru = 'Для открытия формы необходимо включить управление производством версии 2.2';
								|en = 'To open the form, enable production management, version 2.2'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Спецификация = Параметры.Спецификация;
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ЗаполнитьСписокЗаказов();

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//++ НЕ УТКА
	Если СтрНайти("Запись_ЗаказНаПроизводство, Запись_ЭтапыПроизводства, Запись_ГрафикПроизводства", ИмяСобытия) > 0
		И Источник <> "ПрименениеСпецификацииВЗаказах" Тогда
		ЗаполнитьСписокЗаказов();
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	//++ НЕ УТКА
	Если ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ФормаВыбораПоНоменклатуре" Тогда
		ЗаменитьСпецификациюЗавершение(ВыбранноеЗначение);
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗаказов

&НаКлиенте
Процедура СписокЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтапПроизводства.Пустая() Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Заказ);
		
	Иначе
		
		ПоказатьЗначение(, ТекущиеДанные.ЭтапПроизводства);
		
	КонецЕсли;

	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовПриАктивизацииСтроки(Элемент)
	
	//++ НЕ УТКА
	
	ПодключитьОбработчикОжидания("УстановитьВидимостьКоманд", 0.2, Истина);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаменитьСпецификацию(Команда)
	
//++ НЕ УТКА

	ИсключитьИзВыбораСпецификацию = Неопределено;
	
	ДанныеВыбранныхСтрок = Новый Массив;
	Для каждого ДанныеСтроки Из СписокЗаказов Цикл
		
		ИдентификаторСтроки = ДанныеСтроки.ПолучитьИдентификатор();
		Если Элементы.СписокЗаказов.ВыделенныеСтроки.Найти(ИдентификаторСтроки) = Неопределено Тогда
			ДанныеСтроки.Заменить = Ложь;
			Продолжить;
		КонецЕсли;
		ДанныеСтроки.Заменить = Истина;
		
		СтруктураДанных = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации();
		СтруктураДанных.Номенклатура            = ДанныеСтроки.Номенклатура;
		СтруктураДанных.Характеристика          = ДанныеСтроки.Характеристика;
		СтруктураДанных.НачалоПроизводства      = ДанныеСтроки.НачалоПроизводства;
		СтруктураДанных.ПодразделениеДиспетчер  = ДанныеСтроки.Подразделение;
		СтруктураДанных.НаправлениеДеятельности = ДанныеСтроки.НаправлениеДеятельности;
		ДанныеВыбранныхСтрок.Добавить(СтруктураДанных);
		
		Если Не ДанныеСтроки.ДоступнаЗамена Тогда
			ТекстСообщения = НСтр("ru = 'Замена спецификации для выбранных строк недоступна
			| - не допускается замена спецификации, если производство уже запущено,
			| - не поддерживается замена спецификации для полуфабрикатов производимых в процессе с предустановленной спецификацией.';
			|en = 'Replacement of the bill of materials for the selected lines is not available
			| - replacement of the bill of materials is not allowed if production has already started,
			| - replacement of the bill of materials for semi-finished products manufactured throughout the process with the predefined bill of materials is not supported.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если НЕ ДанныеСтроки.ТекущаяСпецификацияБольшеНеИспользуется Тогда
			// выбрана строка для которой используется текущая спецификация
			// поэтому запретим выбор текущей спецификации для замены
			ИсключитьИзВыбораСпецификацию = Спецификация;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбранныхСтрок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать строки, в которых требуется выполнить замену.';
										|en = 'Select lines in which replacement should be made.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ДоступныеТипы = ПараметрыВыбораСпецификаций.ДоступныеТипы; // Массив
	ДоступныеТипы.Добавить(ТипПроизводственногоПроцесса);
	
	ДоступныеСтатусы = ПараметрыВыбораСпецификаций.ДоступныеСтатусы; // Массив
	ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует"));
	
	ПараметрыВыбораСпецификаций.Вставить("ИсключитьСпецификацию", ИсключитьИзВыбораСпецификацию);
	
	УправлениеДаннымиОбИзделияхКлиент.ОткрытьФормуВыбораСпецификацийПоСпискуНоменклатуры(ДанныеВыбранныхСтрок, ПараметрыВыбораСпецификаций, ЭтаФорма);
//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Перезаполнить(Команда)
	
//++ НЕ УТКА
	ЗаказыНаПроизводствоПересчет       = Новый Массив();
	ЗаказыНаПроизводствоПерезаполнение = Новый Массив();
	
	ВыделенныеСтроки = Элементы.СписокЗаказов.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ДанныеСтроки.ПартииСформированы Тогда
			ЗаказыНаПроизводствоПерезаполнение.Добавить(ДанныеСтроки.Заказ);
		ИначеЕсли ДанныеСтроки.ДоступенПересчет Тогда
			ЗаказыНаПроизводствоПересчет.Добавить(ДанныеСтроки.Заказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаказыНаПроизводствоПересчет.Количество() = 0
			И ЗаказыНаПроизводствоПерезаполнение.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать заказы, для которых требуется пересчитать потребность в материалах, трудозатраты.';
										|en = 'Select the orders for which you need to recalculate the demand for materials, labor costs.'"));
		Возврат;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() = 1
		И ЗаказыНаПроизводствоПерезаполнение.Количество() = 1
		И СписокЗаказов.НайтиПоИдентификатору(ВыделенныеСтроки[0]).ПартииЗапущены Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПерезаполнитьЗавершение", ЭтотОбъект, ЗаказыНаПроизводствоПерезаполнение),
			НСтр("ru = 'По выбранному заказу есть начатые/завершенные этапы. Продолжить перезаполнение по спецификации?.';
				|en = 'The selected order has started/completed stages. Continue refilling by the BOM?'"),
			РежимДиалогаВопрос.ДаНет);
			
	Иначе
		
		Если ЗаказыНаПроизводствоПересчет.Количество() > 0 Тогда
			СтруктураЗаказаКлиент.ЗапуститьПересчетСтруктурыЗаказаПоСпецификации(Спецификация, ЗаказыНаПроизводствоПересчет);
		КонецЕсли;
		
		Если ЗаказыНаПроизводствоПерезаполнение.Количество() > 0 Тогда
			ПерезаполнитьПартииПоСпецификации(ЗаказыНаПроизводствоПерезаполнение);
		КонецЕсли;
		
	КонецЕсли;
	
//-- НЕ УТКА

	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	//++ НЕ УТКА
	ЗаполнитьСписокЗаказов();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЭтапы(Команда)
	
	//++ НЕ УТКА
	
	ПоказыватьЭтапы = Не ПоказыватьЭтапы;
	
	Элементы.СписокЗаказовПоказатьЭтапы.Пометка = ПоказыватьЭтапы;
	
	ЗаполнитьСписокЗаказов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Оформление строк, по которым производство уже запущено
	#Область ПартииСформированы
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.ПартииСформированы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(191, 97, 12));
	
	#КонецОбласти
	
	// Оформление продукции, для которой выполнена замена
	#Область ТекущаяСпецификацияБольшеНеИспользуется
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.ТекущаяСпецификацияБольшеНеИспользуется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	
	#КонецОбласти
	
	// Стандартное оформление номенклатуры
	#Область Номенклатура

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "СписокЗаказовНоменклатураЕдиницаИзмерения", 
                                                                   "СписокЗаказов.Упаковка");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "СписокЗаказовХарактеристика",
																		     "СписокЗаказов.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовНазначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без назначения>';
																|en = '<No assignment>'"));
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.ТипПроизводственногоПроцесса                                                                   КАК ТипПроизводственногоПроцесса,
	|	Т.ОсновноеИзделиеВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор) КАК ЭтоТехнологическийНабор
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Т
	|
	|ГДЕ
	|	Т.Ссылка = &Спецификация
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЗаказов()

	СписокЗаказов.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("ПоказыватьЭтапы", ПоказыватьЭтапы);
	Запрос.УстановитьПараметр("ЭтоТехнологическийНабор", ЭтоТехнологическийНабор);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|
	|	Таблица.Ссылка КАК Заказ,
	|
	|	Таблица.НомерСтроки КАК НомерСтрокиПродукция,
	|
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Таблица.Номенклатура.ТипНоменклатуры В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) 
	|				И НЕ Таблица.СписатьНаРасходы ТОГДА
	|			Таблица.Склад
	|		КОГДА Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|			  ИЛИ Таблица.СписатьНаРасходы ТОГДА
	|			Таблица.Подразделение
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                  КАК Склад,
	|	Таблица.Назначение     КАК Назначение,
	|
	|	ЛОЖЬ КАК ЭтоПолуфабрикат,
	|
	|	NULL КАК ЭтапПроизводства,
	|	NULL КАК ПредставлениеЭтапа,
	|
	|	ВЫБОР
	|		КОГДА Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)
	|			И ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Документ.ЭтапПроизводства2_2 КАК Этапы
	|				ГДЕ
	|					Этапы.Распоряжение = Таблица.Ссылка
	|					И Этапы.Проведен)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДоступнаЗамена,
	|	ВЫБОР
	|		КОГДА Таблица.Ссылка.ДинамическаяСтруктура
	|			И Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)
	|			И Таблица.Ссылка.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступенПересчет,
	|
	|	ВЫБОР
	|		КОГДА Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)
	|			И ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Документ.ЭтапПроизводства2_2 КАК Этапы
	|				ГДЕ
	|					Этапы.Распоряжение = Таблица.Ссылка
	|					И Этапы.Проведен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПартииСформированы,
	|
	|	Таблица.Количество КАК Количество
	|
	|ПОМЕСТИТЬ ПрименениеВЗаказахНаПроизводство
	|
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2.Продукция КАК Таблица
	|
	|ГДЕ
	|	Таблица.Спецификация = &Спецификация
	|	И Таблица.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)
	|	И НЕ Таблица.Ссылка.ПометкаУдаления
	|	И НЕ Таблица.Отменено
	|	И НЕ &ЭтоТехнологическийНабор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	План.ЗаказНаПроизводство КАК Заказ,
	|
	|	-1 КАК НомерСтрокиПродукция,
	|
	|	План.Номенклатура        КАК Номенклатура,
	|	План.Характеристика      КАК Характеристика,
	|	План.Склад               КАК Склад,
	|	План.Назначение          КАК Назначение,
	|
	|	ИСТИНА КАК ЭтоПолуфабрикат,
	|
	|	NULL КАК ЭтапПроизводства,
	|	NULL КАК ПредставлениеЭтапа,
	|
	|	НЕ МАКСИМУМ(КэшНСИ.Предопределенная) КАК ДоступнаЗамена,
	|	ИСТИНА КАК ДоступенПересчет,
	|
	|	ЛОЖЬ КАК ПартииСформированы,
	|
	|	СУММА(План.Запланировано) КАК Количество
	|
	|ИЗ
	|
	|	РегистрСведений.СтруктураЗаказа КАК План
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
	|		ПО КэшНСИ.Номенклатура        = План.Номенклатура
	|		 И КэшНСИ.Характеристика      = План.Характеристика
	|		 И КэшНСИ.Склад               = План.Склад
	|		 И КэшНСИ.Назначение          = План.Назначение
	|		 И КэшНСИ.ЗаказНаПроизводство = План.ЗаказНаПроизводство
	|		 И План.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката)
	|
	|ГДЕ
	|	КэшНСИ.Спецификация = &Спецификация
	|	И НЕ &ЭтоТехнологическийНабор
	|
	|СГРУППИРОВАТЬ ПО
	|	План.Номенклатура,
	|	План.Характеристика,
	|	План.Склад,
	|	План.Назначение,
	|	План.ЗаказНаПроизводство
	|
	|ИМЕЮЩИЕ
	|	СУММА(План.Запланировано) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	Таблица.Ссылка.Распоряжение КАК Заказ,
	|	
	|	-1 КАК НомерСтрокиПродукция,
	|
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Получатель     КАК Склад,
	|	Таблица.Назначение     КАК Назначение,
	|	
	|	ЛОЖЬ КАК ЭтоПолуфабрикат,
	|
	|	Таблица.Ссылка      КАК ЭтапПроизводства,
	|	&ПредставлениеЭтапа КАК ПредставлениеЭтапа,
	|
	|	ЛОЖЬ КАК ДоступнаЗамена,
	|	ЛОЖЬ КАК ДоступенПересчет,
	|
	|	ИСТИНА КАК ПартииСформированы,
	|
	|	Таблица.Количество КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Спецификация = &Спецификация
	|	И Таблица.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|	И Таблица.Ссылка.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|														ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|	И Таблица.Номенклатура = Таблица.Ссылка.ПартияПроизводства.ОсновноеИзделиеНоменклатура
	|	И Таблица.Характеристика = Таблица.Ссылка.ПартияПроизводства.ОсновноеИзделиеХарактеристика
	|	И НЕ Таблица.Отменено
	|	И НЕ Таблица.Ссылка.ПометкаУдаления
	|	И &ПоказыватьЭтапы
	|	И НЕ &ЭтоТехнологическийНабор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	Таблица.Ссылка.Распоряжение КАК Заказ,
	|	
	|	-1 КАК НомерСтрокиПродукция,
	|
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Склад          КАК Склад,
	|	Таблица.Назначение     КАК Назначение,
	|	
	|	ЛОЖЬ КАК ЭтоПолуфабрикат,
	|
	|	Таблица.Ссылка      КАК ЭтапПроизводства,
	|	&ПредставлениеЭтапа КАК ПредставлениеЭтапа,
	|
	|	ЛОЖЬ КАК ДоступнаЗамена,
	|	ЛОЖЬ КАК ДоступенПересчет,
	|
	|	ИСТИНА КАК ПартииСформированы,
	|
	|	Таблица.Количество КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Спецификация = &Спецификация
	|	И Таблица.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|	И Таблица.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|	И Таблица.Номенклатура = Таблица.Ссылка.ПартияПроизводства.ОсновноеИзделиеНоменклатура
	|	И Таблица.Характеристика = Таблица.Ссылка.ПартияПроизводства.ОсновноеИзделиеХарактеристика
	|	И НЕ Таблица.Отменено
	|	И НЕ Таблица.Ссылка.ПометкаУдаления
	|	И &ПоказыватьЭтапы
	|	И НЕ &ЭтоТехнологическийНабор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	Таблица.Ссылка.Распоряжение КАК Заказ,
	|	
	|	-1 КАК НомерСтрокиПродукция,
	|	
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Склад          КАК Склад,
	|	Таблица.Назначение     КАК Назначение,
	|
	|	ЛОЖЬ КАК ЭтоПолуфабрикат,
	|
	|	Таблица.Ссылка      КАК ЭтапПроизводства,
	|	&ПредставлениеЭтапа КАК ПредставлениеЭтапа,
	|
	|	ЛОЖЬ КАК ДоступнаЗамена,
	|	ЛОЖЬ КАК ДоступенПересчет,
	|
	|	ИСТИНА КАК ПартииСформированы,
	|
	|	Таблица.Количество КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица
	|ГДЕ
	|	Таблица.Спецификация = &Спецификация
	|	И Таблица.Производится
	|	И Таблица.Ссылка.Распоряжение.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)
	|	И НЕ Таблица.Ссылка.ПометкаУдаления
	|	И &ПоказыватьЭтапы
	|	И НЕ &ЭтоТехнологическийНабор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	Таблица.Ссылка.Распоряжение        КАК Заказ,
	|
	|	-1 КАК НомерСтрокиПродукция,
	|
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                     КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                 КАК Назначение,
	|
	|	ЛОЖЬ                КАК ЭтоПолуфабрикат,
	|
	|	Таблица.Ссылка      КАК ЭтапПроизводства,
	|	&ПредставлениеЭтапа КАК ПредставлениеЭтапа,
	|
	|	ЛОЖЬ КАК ДоступнаЗамена,
	|	ЛОЖЬ КАК ДоступенПересчет,
	|
	|	ИСТИНА КАК ПартииСформированы,
	|
	|	0                                                            КАК Количество
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.НаборыМатериаловИРабот КАК Таблица
	|ГДЕ
	|	Таблица.Спецификация = &Спецификация
	|	И Таблица.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|	И НЕ Таблица.Ссылка.ПометкаУдаления
	|	И &ПоказыватьЭтапы
	|	И &ЭтоТехнологическийНабор
	|
	|;
	|
	|";
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("Таблица.Ссылка"));
		
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|
	|	Таблица.Заказ КАК Заказ,
	|
	|	Таблица.Заказ.Номер  КАК Номер,
	|	Таблица.Заказ.Дата   КАК Дата,
	|	Таблица.Заказ.Статус КАК Статус,
	|
	|	Таблица.Заказ.НачатьНеРанее     КАК НачалоПроизводства,
	|	Таблица.Заказ.ДатаПотребности   КАК ОкончаниеПроизводства,
	|
	|	Таблица.Заказ.Подразделение           КАК Подразделение,
	|	Таблица.Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	Таблица.ДоступнаЗамена   КАК ДоступнаЗамена,
	|	Таблица.ДоступенПересчет КАК ДоступенПересчет,
	|
	|	Таблица.ПартииСформированы КАК ПартииСформированы,
	|	ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЭтапПроизводства2_2 КАК Этапы
	|			ГДЕ
	|				Этапы.Распоряжение = Таблица.Заказ
	|				И Этапы.Проведен
	|				И Этапы.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|									ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))) КАК ПартииЗапущены,
	|
	|	Таблица.ЭтапПроизводства КАК ЭтапПроизводства,
	|	Таблица.ПредставлениеЭтапа КАК ПредставлениеЭтапа,
	|
	|	Таблица.НомерСтрокиПродукция КАК НомерСтрокиПродукция,
	|
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Склад          КАК Склад,
	|	Таблица.Назначение     КАК Назначение,
	|
	|	Таблица.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|
	|	Таблица.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|
	|	ВЫБОР
	|		КОГДА Таблица.Номенклатура.ИспользованиеХарактеристик В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), 
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), 
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                КАК ХарактеристикиИспользуются,
	|
	|	Таблица.Количество КАК Количество
	|
	|ИЗ
	|	ПрименениеВЗаказахНаПроизводство КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Заказ,
	|	ЭтапПроизводства,
	|	Номенклатура,
	|	Характеристика";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СписокЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НомерЗаказа = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер);
		ДатаЗаказа = Формат(Выборка.Дата, "ДЛФ=D");
		Если ЗначениеЗаполнено(Выборка.ЭтапПроизводства) Тогда
			
			ПредставлениеЗаказа = СтрШаблон(НСтр("ru = '№%1 от %2 (%3)';
												|en = 'No.%1 dated %2 (%3)'"),
											НомерЗаказа,
											ДатаЗаказа,
											Выборка.ПредставлениеЭтапа);
											
		ИначеЕсли Выборка.НомерСтрокиПродукция > 0 Тогда
			
			ПредставлениеЗаказа = СтрШаблон(НСтр("ru = '№%1 от %2 (строка № %3)';
												|en = 'No.%1 dated %2 (line No. %3)'"),
								НомерЗаказа,
								ДатаЗаказа,
								Выборка.НомерСтрокиПродукция);
								
		ИначеЕсли ЭтоТехнологическийНабор Тогда
			
			ПредставлениеЗаказа = СтрШаблон(НСтр("ru = '№%1 от %2 (%3)';
												|en = 'No.%1 dated %2 (%3)'"), 
											НомерЗаказа, 
											Формат(Выборка.Дата, "ДЛФ=D"),
											Выборка.ПредставлениеЭтапа);
			
		Иначе
			
			ПредставлениеЗаказа = СтрШаблон(НСтр("ru = '№%1 от %2';
												|en = '#%1, %2'"), НомерЗаказа, ДатаЗаказа);
			
		КонецЕсли;
		
		НоваяСтрока.ПредставлениеЗаказа = ПредставлениеЗаказа;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКоманд() Экспорт
	
	ЗаменитьСпецификациюДоступна = Истина;
	ПерезаполнитьДоступна        = Истина;
	
	ВыделенныеСтроки = Элементы.СписокЗаказов.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = СписокЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если НЕ ДанныеСтроки.ДоступнаЗамена Тогда
			ЗаменитьСпецификациюДоступна = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ЭтапПроизводства) Тогда
			ПерезаполнитьДоступна = Ложь;
		КонецЕсли;
		
		Если ДанныеСтроки.ПартииЗапущены И ВыделенныеСтроки.Количество() > 1 Тогда
			ПерезаполнитьДоступна = Ложь;
		КонецЕсли;
		
		Если НЕ ЗаменитьСпецификациюДоступна И НЕ ПерезаполнитьДоступна Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.СписокЗаказовЗаменитьСпецификацию.Доступность = ЗаменитьСпецификациюДоступна;
	Элементы.СписокЗаказовПерезаполнить.Доступность        = ПерезаполнитьДоступна;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьСпецификациюЗавершение(НоваяСпецификация)
	
	ВыполнитьЗаменуВЗаказахНаСервере(НоваяСпецификация);
	
	ОповеститьОбИзменениях = Ложь;
	
	Если ВсегоЗамен = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать строки, в которых требуется выполнить замену.';
										|en = 'Select lines in which replacement should be made.'"));
		Возврат;
		
	ИначеЕсли ВыполненоЗамен = ВсегоЗамен Тогда
		
		// Успешно заменили во всех заказах
		ТекстЗавершеннойОперации = НСтр("ru = 'Выполнена замена во всех выбранных строках';
										|en = 'Replacement is made in all selected lines'");
		ТекстПоясненияЗавершеннойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Изменено строк заказов: %1 из %2';
															|en = 'Order lines changed: %1 out of %2'"),
														Формат(ВыполненоЗамен, "ЧГ=0"),
														Формат(ВсегоЗамен, "ЧГ=0"));
														
		ПоказатьОповещениеПользователя(ТекстЗавершеннойОперации,, ТекстПоясненияЗавершеннойОперации);
		
		ОповеститьОбИзменениях = Истина;
		
	ИначеЕсли ВыполненоЗамен = 0 Тогда
		
		// Ни в одном заказе не смогли заменить
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить замену.';
									|en = 'Cannot replace.'"));
		Возврат;
		
	Иначе
		
		// В некоторых заказах не смогли заменить
		ТекстЗавершеннойОперации = НСтр("ru = 'Замена выполнена не во всех выбранных строках';
										|en = 'Replacement is made not in all selected lines'");
		ТекстПоясненияЗавершеннойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Изменено строк заказов: %1 из %2';
															|en = 'Order lines changed: %1 out of %2'"),
														Формат(ВыполненоЗамен, "ЧГ=0"),
														Формат(ВсегоЗамен, "ЧГ=0"));
														
		ПоказатьОповещениеПользователя(ТекстЗавершеннойОперации,, ТекстПоясненияЗавершеннойОперации);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Замена выполнена не во всех строках заказов (в %1 из %2).';
											|en = 'Replacement is not made in all order lines (in %1 out of %2).'"), 
										Формат(ВыполненоЗамен, "ЧГ=0"), 
										Формат(ВсегоЗамен, "ЧГ=0"));
										
		ПоказатьПредупреждение(, ТекстСообщения);
		
		ОповеститьОбИзменениях = Истина;
		
	КонецЕсли; 
	
	Если ОповеститьОбИзменениях Тогда
		
		ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство2_2"));
		
		Оповестить("Запись_ЗаказНаПроизводство",, "ПрименениеСпецификацииВЗаказах");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаменуВЗаказахНаСервере(Знач НоваяСпецификация)
	
	// Определим для каких изделий подходит данная спецификация
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Таблица.Номенклатура    КАК Номенклатура,
	|	Таблица.Характеристика  КАК Характеристика
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Спецификация
	|	И Таблица.Ссылка.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|															ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.ОсновноеИзделиеВидНоменклатуры,
	|	Таблица.ОсновноеИзделиеНоменклатура,
	|	Таблица.ОсновноеИзделиеХарактеристика
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Спецификация
	|	И Таблица.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)");
	
	Запрос.УстановитьПараметр("Спецификация", НоваяСпецификация);
	
	ИзделияДляКоторыхПодходитСпецификация = Запрос.Выполнить().Выгрузить();
	ИзделияДляКоторыхПодходитСпецификация.Индексы.Добавить("ВидНоменклатуры,Номенклатура,Характеристика");
	
	СтруктураПоиска = Новый Структура("Заменить, ПартииСформированы", Истина, Ложь);
	
	ТаблицаЗаказы = СписокЗаказов.Выгрузить(СтруктураПоиска);
	ТаблицаЗаказы.Свернуть("Заказ");
	
	ДанныеЗамены = Документы.ЗаказНаПроизводство2_2.ДанныеЗаменыСпецификаций();
	
	ВсегоЗамен = 0;
	ВыполненоЗамен = 0;
	
	Для каждого СтрокаЗаказ Из ТаблицаЗаказы Цикл
		
		// Получим данные замены в заказе
		СтрокиВКоторыхВыполняетсяЗамена = Новый Массив;
		СтруктураПоиска = Новый Структура("Заказ,Заменить,ПартииСформированы", СтрокаЗаказ.Заказ, Истина, Ложь);
		СписокСтрок = СписокЗаказов.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			
			ВсегоЗамен = ВсегоЗамен + 1;
			
			// Нужно убедиться, что спецификация подходит для указанной строки заказа
			СтруктураПоискаПоИзделию = Новый Структура("ВидНоменклатуры,Номенклатура,Характеристика",
				ДанныеСтроки.ВидНоменклатуры,
				Справочники.Номенклатура.ПустаяСсылка(),
				Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			
			НайденныеСтроки = ИзделияДляКоторыхПодходитСпецификация.НайтиСтроки(СтруктураПоискаПоИзделию);
			Если НайденныеСтроки.ВГраница() = -1 Тогда
				СтруктураПоискаПоИзделию.Номенклатура = ДанныеСтроки.Номенклатура;
				НайденныеСтроки = ИзделияДляКоторыхПодходитСпецификация.НайтиСтроки(СтруктураПоискаПоИзделию);
				Если НайденныеСтроки.ВГраница() = -1 Тогда
					Если ЗначениеЗаполнено(ДанныеСтроки.Характеристика) Тогда
						СтруктураПоискаПоИзделию.Характеристика = ДанныеСтроки.Характеристика;
						НайденныеСтроки = ИзделияДляКоторыхПодходитСпецификация.НайтиСтроки(СтруктураПоискаПоИзделию);
						Если НайденныеСтроки.ВГраница() = -1 Тогда
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Замена = ДанныеЗамены.Добавить();
			ЗаполнитьЗначенияСвойств(Замена, ДанныеСтроки);
			Замена.ЗаказНаПроизводство = ДанныеСтроки.Заказ;
			Замена.Спецификация = НоваяСпецификация;
			СтрокиВКоторыхВыполняетсяЗамена.Добавить(ДанныеСтроки);
			
		КонецЦикла;
		
		РезультатЗамены = Документы.ЗаказНаПроизводство2_2.ЗаменитьСпецификацииБезКонтроля(ДанныеЗамены);
		
		Если Не РезультатЗамены.ЕстьОшибки Тогда
			
			Для каждого ДанныеСтроки Из СтрокиВКоторыхВыполняетсяЗамена Цикл
				ДанныеСтроки.ТекущаяСпецификацияБольшеНеИспользуется = (НоваяСпецификация <> Спецификация);
			КонецЦикла;
			
			ВыполненоЗамен = ВыполненоЗамен + РезультатЗамены.ВыполненоЗамен;
			
		КонецЕсли;
		
		ДанныеЗамены.Очистить();
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьПартииПоСпецификации(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПартииПоСпецификации(Заказы)
	
	ПоказатьОповещениеПользователя(
		ПерезаполнитьПартииИмяЗадания(),,
		НСтр("ru = 'Запущено перезаполнение партий выбранных заказов по выбранной спецификации.';
			|en = 'Selected order lot refilling by the selected BOM is started.'"),
		БиблиотекаКартинок.Информация32);
	ПерезаполнитьПартииПоСпецификацииСервер(Заказы);
		
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ПерезаполнитьПартииПоСпецификацииВФонеЗавершение", ЭтотОбъект),
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПартииПоСпецификацииСервер(Заказы)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Этапы.ПартияПроизводства КАК ПартияПроизводства,
	|	ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка) КАК Этап
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Этапы
	|ГДЕ
	|	Этапы.Распоряжение В (&Заказы)
	|	И Этапы.Спецификация = &Спецификация
	|	И Этапы.Проведен";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	ТаблицаПартий = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Партии", ТаблицаПартий);
	ПараметрыПроцедуры.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = ПерезаполнитьПартииИмяЗадания();
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ЭтапПроизводства2_2.ПерезаполнитьПартииВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПартииПоСпецификацииВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		РезультатСтруктура = ОбработатьРезультатПерезаполненияПартийПоСпецификации(Результат);
		Если РезультатСтруктура.Отказ Тогда
			МассивРезультатов = РезультатСтруктура.МассивРезультатов;
			Если МассивРезультатов.Количество() = 1 И ЗначениеЗаполнено(МассивРезультатов[0].Сообщения) Тогда
				ТекстСообщения = МассивРезультатов[0].Сообщения[0];
			Иначе
				ТекстСообщения = НСтр("ru = 'При выполнении операции возникли ошибки. Подробности см. в журнале регистрации.';
										|en = 'Errors occurred when executing the operation. For more information, see the event log.'");
			КонецЕсли;
			ПоказатьОповещениеПользователя(ПерезаполнитьПартииИмяЗадания(),, ТекстСообщения, БиблиотекаКартинок.Предупреждение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатПерезаполненияПартийПоСпецификации(Результат)
	
	РезультатСтруктура = Неопределено;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		РезультатСтруктура = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
	КонецЕсли;
	
	Возврат РезультатСтруктура;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПерезаполнитьПартииИмяЗадания()
	
	Возврат НСтр("ru = 'Перезаполнение партий по спецификации';
				|en = 'Refill lots by BOM'");
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА
