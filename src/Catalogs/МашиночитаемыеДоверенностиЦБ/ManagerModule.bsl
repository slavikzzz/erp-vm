#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ЗагрузкаЭлементаСправочника

Функция ДанныеИзФайлаОбмена(ВходящиеДанные, ОбновлятьСуществующийИлиСсылка = Ложь, Подпись = Неопределено) Экспорт
	
	ДанныеДоверенности = Новый Структура;
	
	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;
	ДокументОбработки = ПодготовитьДокументDOM(ТекущиеДанные);
	
	Если ЭтоФайл Тогда
		ТекущиеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	ДанныеДоверенности.Вставить("ДанныеВыгрузки", ТекущиеДанные);
	
	ТекущиеДанные = Подпись;
	Если Подпись <> Неопределено Тогда
		Если ТипЗнч(Подпись) = Тип("ДвоичныеДанные") Тогда
			ТекущиеДанные = Подпись;
		ИначеЕсли ЭтоАдресВременногоХранилища(Подпись) Тогда
			ТекущиеДанные = ПолучитьИзВременногоХранилища(Подпись);
		ИначеЕсли ТипЗнч(Подпись) = Тип("Строка") И НайтиФайлы(Подпись).Количество() > 0 Тогда
			ТекущиеДанные = Новый ДвоичныеДанные(Подпись);
		КонецЕсли;
	КонецЕсли;
	ДанныеДоверенности.Вставить("ДанныеПодписи", ТекущиеДанные);
	
	СведенияФайла = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/dover:Form_Data");
	Если СведенияФайла.Количество() = 1 Тогда
		ЭлементВыборки = СведенияФайла[0];
		ИмяФайлаВыгрузки = ПолучитьЗначениеДокумента(ЭлементВыборки, "@FileID");
		Если ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
			ДанныеДоверенности.Вставить("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки + ".xml");
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("ПолномочияПредставителя", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);
	ДанныеДоверенности.Вставить("ТипОрганизации", "");
	
	СведенияДокумента = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/dover:Form_Data/dover:Document");
	Если СведенияДокумента.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДокумента[0];
		ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "@ISReview", ""));
	КонецЕсли;
	
	СведенияДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
		"/dover:Form_Data/dover:Document/dover:ProxyInfo");
	Если СведенияДоверенности.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверенности[0];
		ДанныеДоверенности.Вставить("НомерДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ProxyNum"));
		ДанныеДоверенности.Вставить("ДатаВыдачи", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ProxyDateBegin", '00010101'));
		ДанныеДоверенности.Вставить("ДатаОкончания", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ProxyDateEnd", '00010101'));
	КонецЕсли;
	
	СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
		"/dover:Form_Data/dover:Document/dover:PrincipalInfo/dover:Entity");
	СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
		"/dover:Form_Data/dover:Document/dover:PrincipalInfo/dover:Individual");
	СведенияДоверителяИО = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
		"/dover:Form_Data/dover:Document/dover:PrincipalInfo/dover:ForeignOrganization");
	
	Если СведенияДоверителяЮЛ.Количество() = 1 ИЛИ СведенияДоверителяФЛ.Количество() = 0
		И СведенияДоверителяИО.Количество() = 0 Тогда
		
		ДанныеДоверенности.ТипОрганизации = "ЮЛ";
		СведенияДоверителя = СведенияДоверителяЮЛ;
		
	ИначеЕсли СведенияДоверителяФЛ.Количество() = 1 Тогда
		ДанныеДоверенности.ТипОрганизации = "ФЛ";
		СведенияДоверителя = СведенияДоверителяФЛ;
		
	Иначе
		ДанныеДоверенности.ТипОрганизации = "ИО";
		СведенияДоверителя = СведенияДоверителяИО;
	КонецЕсли;
	
	РеквизитыПоискаОрганизации = Новый Соответствие;
	
	Если СведенияДоверителя.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверителя[0];
		Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@CompanyName"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@INN"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@OGRN"));
			
			ДанныеДоверенности.Вставить("ДоверительЮЛ_АдрРус", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"dover:Address/dover:AddressRu"));
			
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"dover:PersonInfoWithoutProxy/@SNILS"));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"dover:PersonInfoWithoutProxy/@Citizenship", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Должность", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"dover:PersonInfoWithoutProxy/@Position"));
			
			Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС) Тогда
				ДанныеДоверенности.Вставить("ЛицоБезДовФЛ",
					ПодыскатьИнформациюВладельца("Контрагенты,ФизическиеЛица",,, ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС));
			КонецЕсли;
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
			
		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИО" Тогда
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@CompanyName"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@INN"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_СтрРег", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@RegistrationCountry", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимРегОрг", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@RegistrationAuthorityName"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_РегНомер", ПолучитьЗначениеДокумента(ЭлементВыборки, "@RegNum"));
			
			ДанныеДоверенности.Вставить("ДоверительЮЛ_АдрЛат",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "dover:Address/dover:AddressLat"));
			
			ПризнакГражданства = ПолучитьЗначениеДокумента(ЭлементВыборки, "dover:LeaderInfo/@CitizenshipSign");
			Если ПризнакГражданства = "1" Тогда
				ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.Россия);
			ИначеЕсли ПризнакГражданства = "2" Тогда
				ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство",
					ПолучитьЗначениеДокумента(ЭлементВыборки, "dover:LeaderInfo/@Citizenship", Справочники.СтраныМира.ПустаяСсылка()));
			Иначе
				ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.ПустаяСсылка());
			КонецЕсли;
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
			
		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@INN"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@OGRNIP"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки, "@SNILS"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@Citizenship", Справочники.СтраныМира.ПустаяСсылка()));
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);
		КонецЕсли;
	КонецЕсли;
	
	СведенияУполномоченных = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/dover:Form_Data/dover:Document/dover:AuthorizedRepresentativeInfo");
	Для Каждого СтрокаМассива Из СведенияУполномоченных Цикл
		НоваяСтрока = Новый Структура;
		ПолномочияПредставителя = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "dover:AuthoritySign");
		СоответствиеПолномочий = Неопределено;
		Для каждого ПолномочиеПредставителя Из ПолномочияПредставителя Цикл
			Если СоответствиеПолномочий = Неопределено Тогда
				СоответствиеПолномочий = Новый Соответствие;
				СоответствиеПолномочий[ДокументооборотСКОКлиентСервер.ОбозначениеПолномочияМЧДЦБПоКоду("99")] = "99";
				Для ВидПолномочия = 1 По ДокументооборотСКОКлиентСервер.КоличествоПолномочийМЧДЦБ() Цикл
					ПредставлениеВида = Формат(ВидПолномочия, "ЧЦ=2; ЧВН=");
					СоответствиеПолномочий[ДокументооборотСКОКлиентСервер.ОбозначениеПолномочияМЧДЦБПоКоду(ПредставлениеВида)] =
						ПредставлениеВида;
				КонецЦикла;
			КонецЕсли;
			
			ПредставлениеВида = СоответствиеПолномочий[СокрЛП(ПолномочиеПредставителя.ТекстовоеСодержимое)];
			
			Если ПредставлениеВида = "99" Тогда
				НоваяСтрока.Вставить("ПризнакПолныеПолномочия", Истина);
			ИначеЕсли СтрДлина(ПредставлениеВида) = 2 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПредставлениеВида) Тогда
				ВидПолномочия = Число(ПредставлениеВида);
				Если ВидПолномочия >= 1 И ВидПолномочия <= ДокументооборотСКОКлиентСервер.КоличествоПолномочийМЧДЦБ() Тогда
					НоваяСтрока.Вставить("Признак" + ПредставлениеВида, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеДоверенности.ПолномочияПредставителя.Добавить(НоваяСтрока);
		
		ТипВладельца = Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ;
		СведенияФЛ = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "dover:RepresentativeInfo/dover:IndividualInfo");
		Если СведенияФЛ.Количество() > 0 Тогда
			СведенияФЛ = СведенияФЛ[0];
			ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", ПолучитьЗначениеДокумента(СведенияФЛ, "@INN"));
			ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", ПолучитьЗначениеДокумента(СведенияФЛ, "@SNILS"));
			ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", ПолучитьЗначениеДокумента(СведенияФЛ,
				"@Citizenship", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ПредставительФЛ_Должность", ПолучитьЗначениеДокумента(СведенияФЛ, "@Position"));
			
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(СведенияФЛ, "dover:FIO/@Surname"));
			НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(СведенияФЛ, "dover:FIO/@Name"));
			НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(СведенияФЛ, "dover:FIO/@SecondName"));
			НоваяСтрока.Вставить("Владелец", ТипВладельца);
			ДанныеДоверенности.ФИО.Добавить(НоваяСтрока);
			
			ДокументИП = Новый Структура;
			
			СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(СведенияФЛ,
				"dover:DocumentInfo/@DocumentNumber"));
			ДокументИП.Вставить("ВидДок", ПолучитьЗначениеДокумента(СведенияФЛ,
				"dover:DocumentInfo/@TypeOfDocument", Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
			ДокументИП.Вставить("СерДок", СерияНомер.Серия);
			ДокументИП.Вставить("НомДок", СерияНомер.Номер);
			ДокументИП.Вставить("ДатаДок", ПолучитьЗначениеДокумента(СведенияФЛ, "dover:DocumentInfo/@DocumentDate", '00010101'));
			ДокументИП.Вставить("ВыдДок", ПолучитьЗначениеДокумента(СведенияФЛ, "dover:DocumentInfo/@AuthorityNameIssuedDocument"));
			ДокументИП.Вставить("КодВыдДок", ПолучитьЗначениеДокумента(СведенияФЛ, "dover:DocumentInfo/@AuthoritySubdivisionCode"));
			ДокументИП.Вставить("Владелец", ТипВладельца);
			ДанныеДоверенности.УдостоверенияЛичности.Добавить(ДокументИП);
		КонецЕсли;
		
		Представитель = Неопределено;
		Если ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_ИНН) Тогда
			Представитель = ПодыскатьИнформациюВладельца("Контрагенты", ДанныеДоверенности.ПредставительФЛ_ИНН);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Представитель) Тогда
			Представитель = ПодыскатьИнформациюВладельца("ФизическиеЛица", ДанныеДоверенности.ПредставительФЛ_ИНН);
		КонецЕсли;
		
		ДанныеДоверенности.Вставить("Представитель", Представитель);
	КонецЦикла;
	
	ДанныеДоверенности.Вставить("Доверитель",
		НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(), РеквизитыПоискаОрганизации));
	Если НЕ ЗначениеЗаполнено(ДанныеДоверенности.Доверитель) И ДанныеДоверенности.Свойство("ДоверительЮЛ_НаимОрг")
		И ЗначениеЗаполнено(ДанныеДоверенности.ДоверительЮЛ_НаимОрг) Тогда
		
		ДанныеДоверенности.Доверитель = ДанныеДоверенности.ДоверительЮЛ_НаимОрг;
	КонецЕсли;
	
	ДанныеДоверенности.Вставить("Организация", ?(Подпись = Неопределено
		ИЛИ НЕ ДанныеДоверенности.Свойство("Представитель")
		ИЛИ ТипЗнч(ДанныеДоверенности.Представитель) <> Тип("СправочникСсылка.Организации"),
		ДанныеДоверенности.Доверитель, ДанныеДоверенности.Представитель));
	
	Возврат ДанныеДоверенности;
	
КонецФункции

Функция ЗагрузитьЭлементИзФайлаОбмена(
		ВходящиеДанные,
		ОбновлятьСуществующийИлиСсылка = Ложь,
		Подпись = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("Ошибка", "");
	
	ДанныеПодготовленны = 0;
	КлючевыеРеквизиты = "";
	ТекстОшибки = "";
	Успешно = Истина;
	
	Попытка
		ДанныеДоверенности = ДанныеИзФайлаОбмена(ВходящиеДанные, ОбновлятьСуществующийИлиСсылка, Подпись);
	Исключение
		Результат.Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Успешно = Ложь;
	КонецПопытки;
	
	
	Если Успешно Тогда
		Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
			КлючевыеРеквизиты = "ДоверительЮЛ_ИНН";
		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			КлючевыеРеквизиты = "ДоверительФЛ_ИНН, ДоверительФЛ_СНИЛС";
		Иначе
			КлючевыеРеквизиты = "ДоверительЮЛ_ИНН";
		КонецЕсли;
		
		КлючевыеРеквизиты = КлючевыеРеквизиты + ", НомерДоверенности, ДатаВыдачи";
		КлючевыеРеквизиты = КлючевыеРеквизиты + ", ПредставительФЛ_ИНН";
		
		КлючевыеРеквизиты = Новый Структура(КлючевыеРеквизиты);
		
		Для Каждого СтрокаКлюча Из КлючевыеРеквизиты Цикл
			Если ДанныеДоверенности.Свойство(СтрокаКлюча.Ключ) 
				И ЗначениеЗаполнено(ДанныеДоверенности[СтрокаКлюча.Ключ]) Тогда
				ДанныеПодготовленны = ДанныеПодготовленны + 1;
			ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнены реквизиты справочника';
									|en = 'Не заполнены реквизиты справочника'") + ":  " + СтрокаКлюча.Ключ;
			Иначе
				ТекстОшибки = ТекстОшибки + ", " + СтрокаКлюча.Ключ;
			КонецЕсли;
		КонецЦикла;
		
		Если КлючевыеРеквизиты.Количество() = ДанныеПодготовленны Тогда
			ТекущийЭлемент = ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующийИлиСсылка);
			Результат.Ссылка = ТекущийЭлемент;
			Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
				Результат.Выполнено = Истина;
			Иначе
				Результат.Ошибка = НСтр("ru = 'Не удалось запись элемент справочника. Подробности в журнале регистрации';
										|en = 'Не удалось запись элемент справочника. Подробности в журнале регистрации'");
			КонецЕсли;
		Иначе
			Результат.Ошибка = ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

Функция ВыгрузитьЭлементВФайлОбмена(
		СправочникСсылка,
		ПроверитьВыгрузку = Ложь,
		ПараметрыВозврата = Неопределено) Экспорт
	
	ПараметрыВозвратаВызова = Новый Структура;
	ПараметрыВозвратаВызова.Вставить("ВозвращатьАдресВоВременномХранилище", Ложь);
	ПараметрыВозвратаВызова.Вставить("ВозвращатьИмяФайлаСРасширением", 		Ложь);
	ПараметрыВозвратаВызова.Вставить("ВозвращатьПриложеннуюПодпись", 		Ложь);
	Если ПараметрыВозврата <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВозвратаВызова, ПараметрыВозврата);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Содержимое", 	"");
	Результат.Вставить("ИмяФайла", 		"");
	
	Если ПараметрыВозвратаВызова.ВозвращатьПриложеннуюПодпись Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СправочникСсылка,
			"ИмяФайлаВыгрузки, ФайлВырузки, ЭлектроннаяПодпись");
		ДанныеВыгрузки = РеквизитыОбъекта.ФайлВырузки.Получить();
		ДанныеПодписи = РеквизитыОбъекта.ЭлектроннаяПодпись.Получить();
		Если ЗначениеЗаполнено(РеквизитыОбъекта.ИмяФайлаВыгрузки) И ДанныеВыгрузки <> Неопределено
			И ДанныеПодписи <> Неопределено Тогда
			
			Результат = Новый Массив;
			
			АдресВыгрузки = ПоместитьВоВременноеХранилище(ДанныеВыгрузки, Новый УникальныйИдентификатор);
			Результат.Добавить(Новый Структура("Имя, Адрес", РеквизитыОбъекта.ИмяФайлаВыгрузки, АдресВыгрузки));
			
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
				РеквизитыОбъекта.ИмяФайлаВыгрузки).ИмяБезРасширения + ".sig";
			АдресПодписи = ПоместитьВоВременноеХранилище(ДанныеПодписи, Новый УникальныйИдентификатор);
			Результат.Добавить(Новый Структура("Имя, Адрес", ИмяФайлаПодписи, АдресПодписи));
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьВыгрузку Тогда
		РезультатыПроверки = ПроверитьВозможностьВыгрузки(СправочникСсылка);
		
		Если РезультатыПроверки.Количество() <> 0 Тогда
			Для каждого РезультатПроверки Из РезультатыПроверки Цикл
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(РезультатПроверки.ТекстОшибки);
			КонецЦикла;
			
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
				НСтр("ru = 'Не удалось сформировать машиночитаемую доверенность ЦБ';
					|en = 'Не удалось сформировать машиночитаемую доверенность ЦБ'"));
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСправочника = ДанныеИзИнформационнойБазы(СправочникСсылка);
	
	ИННДоверителя = ?(ЗначениеЗаполнено(ДанныеСправочника.ДоверительЮЛ_ИНН),
		СокрЛП(ДанныеСправочника.ДоверительЮЛ_ИНН), СокрЛП(ДанныеСправочника.ДоверительФЛ_ИНН));
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Результат.ИмяФайла = "DOVER_CBR_"
		+ ИННДоверителя
		+ "_" + Формат(ДатаСеанса, "ДФ=ггггММдд")
		+ "_" + СокрЛП(ДанныеСправочника.Номер);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("utf-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("dover:Form");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xmlns:dover", "urn:cbr-ru:dover:v1.0.2");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xmlns:cmn", "urn:cbr-ru:dover_cmnt:v1.0.0");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xmlns:ai", "urn:cbr-ru:e-forms-app-info:v1.0");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xsi:schemaLocation", "urn:cbr-ru:dover:v1.0.2 main.xsd");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("dover:Form_Data");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "FileID", Результат.ИмяФайла);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Version", "1.00");
	
	// фомирование раздела Сведедения о доверенности
	ЗаписьXML.ЗаписатьНачалоЭлемента("dover:Document");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ISReview", ДанныеСправочника.СведенияОбИнформационнойСистеме, Ложь);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("dover:ProxyInfo");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ProxyNum", ДанныеСправочника.Номер);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ProxyDateBegin", ДанныеСправочника.ДатаВыдачи);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ProxyDateEnd", ДанныеСправочника.ДатаОкончания);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// фомирование раздела Сведения о доверителе
	ЗаписьXML.ЗаписатьНачалоЭлемента("dover:PrincipalInfo");
	
	Если ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ИО" Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("dover:ForeignOrganization");
		
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "CompanyName", ДанныеСправочника.ДоверительЮЛ_НаимОрг);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "INN", ДанныеСправочника.ДоверительЮЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "RegistrationCountry", ДанныеСправочника.ДоверительЮЛ_СтрРег);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "RegistrationAuthorityName", ДанныеСправочника.ДоверительЮЛ_НаимРегОрг);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "RegNum", ДанныеСправочника.ДоверительЮЛ_РегНомер);
		
		ВыгрузитьАдресУзла(ЗаписьXML, "", ДанныеСправочника.ДоверительЮЛ_АдрЛат, "dover:Address");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("dover:LeaderInfo");
		Если ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "CitizenshipSign", "1");
		Иначе
			Если ЗначениеЗаполнено(ДанныеСправочника.ДоверительФЛ_Гражданство) Тогда
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "CitizenshipSign", "2");
			Иначе
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "CitizenshipSign", "3");
			КонецЕсли;
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Citizenship", ДанныеСправочника.ДоверительФЛ_Гражданство, Ложь);
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ИначеЕсли ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ЮЛ" Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("dover:Entity");
		
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "CompanyName", ДанныеСправочника.ДоверительЮЛ_НаимОрг);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "INN", ДанныеСправочника.ДоверительЮЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "OGRN", ДанныеСправочника.ДоверительЮЛ_ОГРН);
		
		ВыгрузитьАдресУзла(ЗаписьXML, ДанныеСправочника.ДоверительЮЛ_АдрРус, "", "dover:Address");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("dover:PersonInfoWithoutProxy");
		
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "SNILS", ДанныеСправочника.ЛицоБезДовФЛ_СНИЛС);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Citizenship", ДанныеСправочника.ЛицоБезДовФЛ_Гражданство, Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Position", ДанныеСправочника.ЛицоБезДовФЛ_Должность);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("dover:Individual");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "INN", ДанныеСправочника.ДоверительФЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "OGRNIP", ДанныеСправочника.ДоверительФЛ_ОГРН, Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "SNILS", ДанныеСправочника.ДоверительФЛ_СНИЛС);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Citizenship", ДанныеСправочника.ДоверительФЛ_Гражданство, Ложь);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// фомирование раздела Сведения об уполномоченном представителе
	ЗаписьXML.ЗаписатьНачалоЭлемента("dover:AuthorizedRepresentativeInfo");
	
	Для каждого ПолномочиеПредставителя Из ДанныеСправочника.ПолномочияПредставителя Цикл
		ОбозначениеПолномочия = ДокументооборотСКОКлиентСервер.ОбозначениеПолномочияМЧДЦБПоКоду(ПолномочиеПредставителя);
		ЗаписатьУзелXML(ЗаписьXML, "dover:AuthoritySign", ОбозначениеПолномочия);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("dover:RepresentativeInfo");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("dover:IndividualInfo");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "INN", ДанныеСправочника.ПредставительФЛ_ИНН);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "SNILS", ДанныеСправочника.ПредставительФЛ_СНИЛС);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Citizenship", ДанныеСправочника.ПредставительФЛ_Гражданство, Ложь);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Position", ДанныеСправочника.ПредставительФЛ_Должность);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("dover:FIO");
	ВыгрузитьФИОУзла(ЗаписьXML, ДанныеСправочника.ПредставительФЛ_Фамилия, ДанныеСправочника.ПредставительФЛ_Имя, ДанныеСправочника.ПредставительФЛ_Отчество);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ВыгрузитьУдостоверениеУзла(ЗаписьXML, 
			ДанныеСправочника.ПредставительФЛ_ВидДок,
			ДанныеСправочника.ПредставительФЛ_СерДок,
			ДанныеСправочника.ПредставительФЛ_НомДок,
			ДанныеСправочника.ПредставительФЛ_ДатаДок,
			ДанныеСправочника.ПредставительФЛ_ВыдДок,
			ДанныеСправочника.ПредставительФЛ_КодВыдДок);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Результат.Содержимое = ЗаписьXML.Закрыть();
	
	Если ПараметрыВозвратаВызова.ВозвращатьИмяФайлаСРасширением Тогда
		Результат.ИмяФайла = Результат.ИмяФайла + ".xml";
	КонецЕсли;
	
	Если ПараметрыВозвратаВызова.ВозвращатьАдресВоВременномХранилище Тогда
		ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(Результат.Содержимое, "windows-1251");
		АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
		Результат = Новый Структура("Имя, Адрес", Результат.ИмяФайла, АдресФайла);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ПроверитьВозможностьВыгрузки(ОбъектИлиСсылка) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектИлиСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиЦБ") Тогда
		Доверенность = ОбъектИлиСсылка.ПолучитьОбъект();
	Иначе
		Доверенность = ОбъектИлиСсылка;
	КонецЕсли;
	
	// основные
	
	Если НЕ ЗначениеЗаполнено(Доверенность.НомерДоверенности) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан номер доверенности';
				|en = 'Не задан номер доверенности'"), "НомерДоверенности"));
	КонецЕсли;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ГодДатыСеанса = Год(ДатаСеанса);
	МинимальнаяДата = Дата(1900, 1, 1);
	ГодМаксимальнойДаты = Цел((ГодДатыСеанса + 50) / 100) * 100 + 99;
	МаксимальнаяДата = Дата(ГодМаксимальнойДаты, 1, 1);
	МаксимальнаяДата = КонецГода(МаксимальнаяДата);
	
	Если НЕ ЗначениеЗаполнено(Доверенность.ДатаВыдачи) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана дата выдачи';
				|en = 'Не задана дата выдачи'"), "ДатаВыдачи"));
	ИначеЕсли Доверенность.ДатаВыдачи < МинимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата выдачи не может быль раньше %1';
					|en = 'Дата выдачи не может быль раньше %1'"),
				Формат(МинимальнаяДата, "ДЛФ=Д")),
			"ДатаВыдачи"));
	ИначеЕсли Доверенность.ДатаВыдачи > МаксимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата выдачи не может быль позднее %1';
					|en = 'Дата выдачи не может быль позднее %1'"),
				Формат(МаксимальнаяДата, "ДЛФ=Д")),
			"ДатаВыдачи"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Доверенность.ДатаОкончания) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана дата окончания';
				|en = 'Не задана дата окончания'"), "ДатаОкончания"));
	ИначеЕсли ЗначениеЗаполнено(Доверенность.ДатаОкончания) И Доверенность.ДатаОкончания < МинимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата окончания действия не может быль раньше %1';
					|en = 'Дата окончания действия не может быль раньше %1'"),
				Формат(МинимальнаяДата, "ДЛФ=Д")),
			"ДатаОкончания"));
	ИначеЕсли ЗначениеЗаполнено(Доверенность.ДатаОкончания) И Доверенность.ДатаОкончания > МаксимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата окончания действия не может быль позднее %1';
					|en = 'Дата окончания действия не может быль позднее %1'"),
				Формат(МаксимальнаяДата, "ДЛФ=Д")),
			"ДатаОкончания"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Доверенность.ДатаВыдачи) И ЗначениеЗаполнено(Доверенность.ДатаОкончания)
		И Доверенность.ДатаОкончания < Доверенность.ДатаВыдачи Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Дата выдачи доверенности не может быть больше даты окончания действия';
				|en = 'Дата выдачи доверенности не может быть больше даты окончания действия'"), "ДатаОкончания"));
	КонецЕсли;
	
	// доверитель
	
	Доверитель_ЮридическоеЛицо = ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_ИНН);
	
	Если Доверитель_ЮридическоеЛицо Тогда
		Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_НаимОрг) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано наименование организации доверителя';
					|en = 'Не задано наименование организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН организации доверителя';
					|en = 'Не задан ИНН организации доверителя'"), "Доверитель"));
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			Доверенность.ДоверительЮЛ_ИНН, Ложь) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН организации доверителя';
					|en = 'Указан некорректный ИНН организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если Доверенность.ДоверительЮЛ_ИностраннаяОрганизация Тогда
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_АдрРус)
				И НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_АдрЛат) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан адрес организации доверителя';
						|en = 'Не задан адрес организации доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_СтрРег) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана страна регистрации организации доверителя';
						|en = 'Не задана страна регистрации организации доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_НаимРегОрг) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано наименование регистрирующего органа организации';
						|en = 'Не задано наименование регистрирующего органа организации'"), "Доверитель"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_РегНомер) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан регистрационный номер организации доверителя';
						|en = 'Не задан регистрационный номер организации доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ИНН)
				И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				Доверенность.ДоверительФЛ_ИНН, Истина) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ИНН руководителя обособленного подразделения доверителя';
						|en = 'Указан некорректный ИНН руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
			
		Иначе
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_АдрРус) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан адрес организации доверителя';
						|en = 'Не задан адрес организации доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительЮЛ_ОГРН) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан ОГРН организации доверителя';
						|en = 'Не задан ОГРН организации доверителя'"), "Доверитель"));
			ИначеЕсли СтрДлина(Доверенность.ДоверительЮЛ_ОГРН) <> 13 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ОГРН организации доверителя';
						|en = 'Указан некорректный ОГРН организации доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ЛицоБезДовФЛ_СНИЛС) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан СНИЛС физического лица со стороны доверителя';
						|en = 'Не задан СНИЛС физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			ИначеЕсли СтрДлина(Доверенность.ЛицоБезДовФЛ_СНИЛС) <> 14 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный СНИЛС физического лица со стороны доверителя';
						|en = 'Указан некорректный СНИЛС физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Доверенность.ЛицоБезДовФЛ_Должность) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана должность физического лица со стороны доверителя';
						|en = 'Не задана должность физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		СтрокиУдостоверений = Доверенность.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
		
		Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВидДок) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан вид документа доверителя';
					|en = 'Не задан вид документа доверителя'"), "Доверитель"));
		КонецЕсли;
		
		КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
			?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].ВидДок));
		Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
			И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
			И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Вид документа доверителя не поддерживается';
					|en = 'Вид документа доверителя не поддерживается'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтрокиУдостоверений[0].СерДок)
			+ СокрЛП(СтрокиУдостоверений[0].НомДок)) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не заданы серия и номер документа доверителя';
					|en = 'Не заданы серия и номер документа доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиУдостоверений.Количество() <> 0 И СтрДлина(СокрЛП(СтрокиУдостоверений[0].СерДок)
			+ СокрЛП(СтрокиУдостоверений[0].НомДок)) > 25 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Длина серии и номера документа доверителя больше 25 символов';
					|en = 'Длина серии и номера документа доверителя больше 25 символов'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ДатаДок) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана дата выдачи документа доверителя';
					|en = 'Не задана дата выдачи документа доверителя'"), "Доверитель"));
		ИначеЕсли СтрокиУдостоверений[0].ДатаДок < МинимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата выдачи документа доверителя не может быль раньше %1';
						|en = 'Дата выдачи документа доверителя не может быль раньше %1'"),
					Формат(МинимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		ИначеЕсли СтрокиУдостоверений[0].ДатаДок > МаксимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата выдачи документа доверителя не может быль позднее %1';
						|en = 'Дата выдачи документа доверителя не может быль позднее %1'"),
					Формат(МаксимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		КонецЕсли;
		
		Если (СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].КодВыдДок))
			И КодВидаДокумента = "21" Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано наименование органа, выдавшего документ доверителя';
					|en = 'Не задано наименование органа, выдавшего документ доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН доверителя';
					|en = 'Не задан ИНН доверителя'"), "Доверитель"));
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			Доверенность.ДоверительФЛ_ИНН, Истина) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН доверителя';
					|en = 'Указан некорректный ИНН доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Доверенность.ДоверительФЛ_ОГРН) И СтрДлина(Доверенность.ДоверительФЛ_ОГРН) <> 15 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ОГРНИП доверителя';
					|en = 'Указан некорректный ОГРНИП доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Доверенность.ДоверительФЛ_СНИЛС) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан СНИЛС доверителя';
					|en = 'Не задан СНИЛС доверителя'"), "Доверитель"));
		ИначеЕсли СтрДлина(Доверенность.ДоверительФЛ_СНИЛС) <> 14 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный СНИЛС доверителя';
					|en = 'Указан некорректный СНИЛС доверителя'"), "Доверитель"));
		КонецЕсли;
	КонецЕсли;
	
	// представитель
	
	ТребоватьОГРНДляПредставителяФЛ = Ложь;
	СтрокиФИО = Доверенность.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
	
	Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана фамилия представителя';
				|en = 'Не задана фамилия представителя'"), "ПредставительФЛ_ФИО"));
	КонецЕсли;
	
	Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задано имя физлица-представителя';
				|en = 'Не задано имя физлица-представителя'"), "ПредставительФЛ_ФИО"));
	КонецЕсли;
	
	СтрокиУдостоверений = Доверенность.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
	
	Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВидДок) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан вид документа физлица-представителя';
				|en = 'Не задан вид документа физлица-представителя'"), "Доверитель"));
	КонецЕсли;
	
	КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
		?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].ВидДок));
	Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
		И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
		И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
		
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Вид документа физлица-представителя не поддерживается';
				|en = 'Вид документа физлица-представителя не поддерживается'"), "ПредставительФЛ_Удостоверение"));
	КонецЕсли;
	
	Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтрокиУдостоверений[0].СерДок)
		+ СокрЛП(СтрокиУдостоверений[0].НомДок)) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не заданы серия и номер документа физлица-представителя';
				|en = 'Не заданы серия и номер документа физлица-представителя'"), "ПредставительФЛ_Удостоверение"));
	КонецЕсли;
	
	Если СтрокиУдостоверений.Количество() <> 0 И СтрДлина(СокрЛП(СтрокиУдостоверений[0].СерДок)
		+ СокрЛП(СтрокиУдостоверений[0].НомДок)) > 25 Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Длина серии и номера документа физлица-представителя больше 25 символов';
				|en = 'Длина серии и номера документа физлица-представителя больше 25 символов'"), "ПредставительФЛ_Удостоверение"));
	КонецЕсли;
	
	Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ДатаДок) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана дата выдачи документа физлица-представителя';
				|en = 'Не задана дата выдачи документа физлица-представителя'"), "ПредставительФЛ_Удостоверение"));
	ИначеЕсли СтрокиУдостоверений[0].ДатаДок < МинимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата выдачи документа физлица-представителя не может быль раньше %1';
					|en = 'Дата выдачи документа физлица-представителя не может быль раньше %1'"),
				Формат(МинимальнаяДата, "ДЛФ=Д")),
			"ПредставительФЛ_Удостоверение"));
	ИначеЕсли СтрокиУдостоверений[0].ДатаДок > МаксимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата выдачи документа физлица-представителя не может быль позднее %1';
					|en = 'Дата выдачи документа физлица-представителя не может быль позднее %1'"),
				Формат(МаксимальнаяДата, "ДЛФ=Д")),
			"ПредставительФЛ_Удостоверение"));
	КонецЕсли;
	
	Если (СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].КодВыдДок))
		И КодВидаДокумента = "21" Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задано наименование органа, выдавшего документ физлица-представителя';
				|en = 'Не задано наименование органа, выдавшего документ физлица-представителя'"), "ПредставительФЛ_Удостоверение"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Доверенность.ПредставительФЛ_ИНН) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан ИНН физлица-представителя';
				|en = 'Не задан ИНН физлица-представителя'"), "ПредставительФЛ_ИНН"));
	ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
		Доверенность.ПредставительФЛ_ИНН, Истина) Тогда
		
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Указан некорректный ИНН физлица-представителя';
				|en = 'Указан некорректный ИНН физлица-представителя'"), "ПредставительФЛ_ИНН"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Доверенность.ПредставительФЛ_СНИЛС) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан СНИЛС физлица-представителя';
				|en = 'Не задан СНИЛС физлица-представителя'"), "ПредставительФЛ_СНИЛС"));
	ИначеЕсли СтрДлина(Доверенность.ПредставительФЛ_СНИЛС) <> 14 Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Указан некорректный СНИЛС физлица-представителя';
				|en = 'Указан некорректный СНИЛС физлица-представителя'"), "ПредставительФЛ_СНИЛС"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Доверенность.ПредставительФЛ_Должность) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана должность физлица-представителя';
				|en = 'Не задана должность физлица-представителя'"), "ПредставительФЛ_Должность"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
		"ПрисоединитьДополнительныеТаблицы
		|ЭтотСписок КАК ЭтотСписок
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Владельцы
		|	ПО Владельцы.Ссылка = ЭтотСписок.Организация
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения
		|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = Владельцы.Ссылка
		|;
		|РазрешитьЧтение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)
		|ИЛИ ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
		|;
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БазовыйФункционалDOM

// https://soltau.ru/index.php/themes/dev/item/413

Функция ПодготовитьДокументDOM(ВходящиеДанные)
	
	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Если ТипЗнч(ТекущиеДанные) = Тип("ДвоичныеДанные") Тогда
		БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ТекущиеДанные);
		ЧтениеXML.ОткрытьПоток(Новый ПотокВПамяти(БуферДанных));
	ИначеЕсли ЭтоФайл Тогда
		ЧтениеXML.ОткрытьФайл(ТекущиеДанные);
	Иначе	
		ЧтениеXML.УстановитьСтроку(ТекущиеДанные);
	КонецЕсли;
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Возврат ДокументDOM;
	
КонецФункции

Функция ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска)
	
	Результат = Новый Массив;
	
	ДокументИлиУзелВладелец = УзелВладелец;
	
	ИменаУзлов = СтрРазделить(ТекстПоиска, "/");
	КоличествоУзлов = ИменаУзлов.Количество();
	Для ИндексУзла = 0 По КоличествоУзлов - 1 Цикл
		ИмяУзла = ИменаУзлов[ИндексУзла];
		Если ИндексУзла = 0 И ИмяУзла = "" Тогда
			ДокументИлиУзелВладелец = УзелВладелец.ДокументВладелец;
		Иначе
			Если Лев(ИмяУзла, 1) = "@" Тогда
				ИмяАтрибута = Сред(ИмяУзла, 2);
				УзелАтрибута = ДокументИлиУзелВладелец.ПолучитьУзелАтрибута(ИмяАтрибута);
				МассивУзлов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УзелАтрибута);
			Иначе
				МассивУзлов = ДокументИлиУзелВладелец.ПолучитьЭлементыПоИмени(ИмяУзла);
			КонецЕсли;
			Если МассивУзлов.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если ИндексУзла = КоличествоУзлов - 1 Тогда
				Результат = МассивУзлов;
			Иначе
				ДокументИлиУзелВладелец = МассивУзлов[0];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеДаты(ПредставлениеДаты)
	
	Результат = ПредставлениеДаты;
	
	МассивСтроки = СтрРазделить(ПредставлениеДаты, "-", Ложь);
	
	Если МассивСтроки.Количество() = 3 И СтрДлина(МассивСтроки[0]) = 4 Тогда
		Результат = МассивСтроки[0] + МассивСтроки[1] + МассивСтроки[2];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеСтраны(ПредставлениеСтраны)
	
	Результат = Справочники.СтраныМира.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеСтраны) Тогда
		Результат = Справочники.СтраныМира.НайтиПоКоду(ПредставлениеСтраны);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеВидаДокумента(ПредставлениеДокумента)
	
	ВсеВарианты = Новый Соответствие;
	ВсеВарианты.Вставить("07", "Военный билет");
	ВсеВарианты.Вставить("10", "Паспорт иностранного гражданина");
	ВсеВарианты.Вставить("11", "Свидетельство о рассмотрении ходатайства о признании лица беженцем на территории Российской Федерации по существу");
	ВсеВарианты.Вставить("12", "Вид на жительство в Российской Федерации");
	ВсеВарианты.Вставить("13", "Удостоверение беженца");
	ВсеВарианты.Вставить("15", "Разрешение на временное проживание в Российской Федерации");
	ВсеВарианты.Вставить("19", "Свидетельство о предоставлении временного убежища на территории Российской Федерации");
	ВсеВарианты.Вставить("21", "Паспорт гражданина Российской Федерации");
	ВсеВарианты.Вставить("24", "Удостоверение личности военнослужащего Российской Федерации");
	
	Результат = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеДокумента) Тогда
		МассивыВидовДокументов = ВидовДокументовИКодыДокументовЦБ();
		ИндексКодаДокументаЦБ = МассивыВидовДокументов.КодыДокументовЦБ.Найти(ПредставлениеДокумента);
		ПредставлениеДокументаПриведенное = ?(ИндексКодаДокументаЦБ = Неопределено, Неопределено,
			МассивыВидовДокументов.ВидыДокументов[ИндексКодаДокументаЦБ]);
		
		Если ЗначениеЗаполнено(ПредставлениеДокументаПриведенное) Тогда
			Если Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодМВД") <> Неопределено Тогда
				Результат = Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодМВД", ПредставлениеДокументаПриведенное);
			ИначеЕсли Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодФНС") <> Неопределено Тогда
				Результат = Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодФНС", ПредставлениеДокументаПриведенное);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеСерияНомер(ПредставлениеСерияНомер)
	
	Результат = Новый Структура;
	Результат.Вставить("Серия", ПредставлениеСерияНомер);
	Результат.Вставить("Номер", "");
	
	МассивСтроки = СтрРазделить(ПредставлениеСерияНомер, " ", Ложь);
	
	Если МассивСтроки.Количество() > 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0] + " " + МассивСтроки[1]);
		МассивСтроки.Удалить(0);
		МассивСтроки.Удалить(0);
		Результат.Вставить("Номер", СтрСоединить(МассивСтроки, " "));
	ИначеЕсли МассивСтроки.Количество() = 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0]);
		Результат.Вставить("Номер", МассивСтроки[1]);
	ИначеЕсли МассивСтроки.Количество() = 1 Тогда
		Результат.Вставить("Серия", Лев(МассивСтроки[0], 4));
		Результат.Вставить("Номер", Сред(МассивСтроки[0], 5));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиЭлементИБ(ЗначениеПоУмолчанию, ФильтрыПоиска)
	
	Результат = ЗначениеПоУмолчанию;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектПоиска.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиЦБ КАК ОбъектПоиска
	|ГДЕ
	|	НЕ ОбъектПоиска.ПометкаУдаления
	|{ГДЕ
	|	ОбъектПоиска.Ссылка.*}";
	
	МетаданныеОбъекта = ЗначениеПоУмолчанию.Метаданные();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.МашиночитаемыеДоверенностиЦБ", МетаданныеОбъекта.ПолноеИмя());
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст = ТекстЗапроса;
	Построитель.ЗаполнитьНастройки();
	
	Для Каждого СтрокаКлюча Из ФильтрыПоиска Цикл
		НовыйОтбор = Построитель.Отбор.Добавить("Ссылка." + СтрокаКлюча.Ключ);
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
		НовыйОтбор.Значение = СтрокаКлюча.Значение;
	КонецЦикла;
	
	Запрос = Построитель.ПолучитьЗапрос();
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() И Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодыскатьИнформациюВладельца(СписокСправочников, ИНН = "", КПП = "", СНИЛС = "")
	
	Результат = Неопределено;
	
	МассивСправочников = СтрРазделить(СписокСправочников, ",", Ложь);
	
	Если ЗначениеЗаполнено(ИНН) И МассивСправочников.Найти("Организации") <> Неопределено Тогда
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("ИНН", ИНН);
		СправочникОрганизации = Метаданные.Справочники.Найти("Организации");
		РеквизитКПП = ?(СправочникОрганизации = Неопределено, Неопределено, СправочникОрганизации.Реквизиты.Найти("КПП"));
		Если РеквизитКПП <> Неопределено Тогда
			СтрокаПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		Результат = НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(), СтрокаПоиска);
	КонецЕсли;
	
	ИмяСправочникаКонтрагенты = "Контрагенты";
	Если НЕ ЗначениеЗаполнено(Результат) И ЗначениеЗаполнено(ИНН)
		И МассивСправочников.Найти(ИмяСправочникаКонтрагенты) <> Неопределено
		И ЭлектронныйДокументооборотСКонтролирующимиОрганами.РеквизитыСправочникаКонтрагентовДоступны(Истина, Истина) Тогда
		
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("ИНН", ИНН);
		Если ЗначениеЗаполнено(КПП) Тогда
			СтрокаПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		Результат = НайтиЭлементИБ(Справочники[ИмяСправочникаКонтрагенты].ПустаяСсылка(), СтрокаПоиска);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) И (ЗначениеЗаполнено(ИНН) ИЛИ ЗначениеЗаполнено(СНИЛС))
		И МассивСправочников.Найти("ФизическиеЛица") <> Неопределено Тогда
		
		СправочникФизическиеЛица = Метаданные.Справочники.Найти("ФизическиеЛица");
		Если СправочникФизическиеЛица <> Неопределено И СправочникФизическиеЛица.Реквизиты.Найти("ИНН") <> Неопределено Тогда
			СтрокаПоиска = Новый Структура;
			Если ЗначениеЗаполнено(ИНН) Тогда
				СтрокаПоиска.Вставить("ИНН", ИНН);
			КонецЕсли;
			Если ЗначениеЗаполнено(СНИЛС) Тогда
				Если СправочникФизическиеЛица.Реквизиты.Найти("СтраховойНомерПФР") <> Неопределено Тогда
					СтрокаПоиска.Вставить("СтраховойНомерПФР", СНИЛС);
				ИначеЕсли СправочникФизическиеЛица.Реквизиты.Найти("СНИЛС") <> Неопределено Тогда
					СтрокаПоиска.Вставить("СНИЛС", СНИЛС);
				КонецЕсли;
			КонецЕсли;
			Результат = НайтиЭлементИБ(Справочники.ФизическиеЛица.ПустаяСсылка(), СтрокаПоиска);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит элемент документа DOM, проверяет что он один и пытается получить значение и привести тип.
Функция ПолучитьЗначениеДокумента(УзелВладелец, ТекстПоиска, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	
	ВыборкаЭлементов = ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска);
	
	Если ВыборкаЭлементов.Количество() = 1 Тогда
		
		ЭлементВыборки = ВыборкаЭлементов[0];
		Если ТипЗнч(ЭлементВыборки) = Тип("АтрибутDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.Значение;
		ИначеЕсли ТипЗнч(ЭлементВыборки) = Тип("ЭлементDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.ТекстовоеСодержимое;
		Иначе
			ПредставлениеЗначения = ?(ЭлементВыборки = Неопределено, "", ЭлементВыборки.ЗначениеУзла);
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Дата") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеДаты(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.СтраныМира") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеСтраны(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеВидаДокумента(ПредставлениеЗначения);
		КонецЕсли;
		
		Если ЗначениеПоУмолчанию <> Неопределено Тогда
			МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЗначениеПоУмолчанию));
			ТекущийТип = Новый ОписаниеТипов(МассивТипов);
			Результат = ТекущийТип.ПривестиЗначение(ПредставлениеЗначения);
		Иначе
			Результат = ПредставлениеЗначения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьУзелXML(данныеXML, ИмяУзла, ЗначениеУзла, ВыгружатьПустые = Истина)
	
	ПредставлениеЗначения = ЗначениеВыгрузкиXML(ЗначениеУзла);
	
	Если ВыгружатьПустые ИЛИ ЗначениеЗаполнено(ПредставлениеЗначения) Тогда 
		данныеXML.ЗаписатьНачалоЭлемента(ИмяУзла);
		данныеXML.ЗаписатьТекст(ПредставлениеЗначения);
		данныеXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьАтрибутУзлаXML(данныеXML, ИмяАтрибута, ЗначениеАтрибута, ВыгружатьПустые = Истина)
	
	ПредставлениеЗначения = ЗначениеВыгрузкиXML(ЗначениеАтрибута);
	
	Если ВыгружатьПустые ИЛИ ЗначениеЗаполнено(ЗначениеАтрибута) Тогда 
		данныеXML.ЗаписатьНачалоАтрибута(ИмяАтрибута);
		данныеXML.ЗаписатьТекст(ПредставлениеЗначения);
		данныеXML.ЗаписатьКонецАтрибута();
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеВыгрузкиXML(ЗначениеВыгрузки)
	
	Результат = Строка(ЗначениеВыгрузки);
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВыгрузки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеВыгрузки) = Тип("Строка") Тогда
		Результат = СокрЛП(Результат);
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("Дата") Тогда
		Результат = Формат(ЗначениеВыгрузки, "ДФ=гггг-ММ-дд");
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("СправочникСсылка.СтраныМира") Тогда
		Результат = ЗначениеВыгрузки.Код;
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
		Если Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодМВД") <> Неопределено Тогда
			Результат = ЗначениеВыгрузки.КодМВД;
		ИначеЕсли Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодФНС") <> Неопределено Тогда
			Результат = ЗначениеВыгрузки.КодФНС;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
		Если ЗначениеВыгрузки = Перечисления.ПолФизическогоЛица.Женский Тогда
			Результат = "2";
		Иначе	
			Результат = "1";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаЭлементаСправочника

Функция ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующийИлиСсылка)
	
	Результат = Неопределено;
	НашлиЭлемент = Неопределено;
	
	Если ТипЗнч(ОбновлятьСуществующийИлиСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиЦБ") Тогда
		НашлиЭлемент = ОбновлятьСуществующийИлиСсылка;
		
	ИначеЕсли ОбновлятьСуществующийИлиСсылка = Истина Тогда
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);
		СтрокаПоиска.Вставить("ДатаВыдачи", ДанныеДоверенности.ДатаВыдачи);
		СтрокаПоиска.Вставить("Организация", ДанныеДоверенности.Организация);
		НашлиЭлемент = НайтиЭлементИБ(Справочники.МашиночитаемыеДоверенностиЦБ.ПустаяСсылка(), СтрокаПоиска);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НашлиЭлемент) Тогда
		ОбъектСправочника = Справочники.МашиночитаемыеДоверенностиЦБ.СоздатьЭлемент();
	Иначе
		ОбъектСправочника = НашлиЭлемент.ПолучитьОбъект();
		Для Каждого СтрокаРеквизита Из ОбъектСправочника.Метаданные().Реквизиты Цикл
			ОбъектСправочника[СтрокаРеквизита.Имя] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	// здесь переносим значения реквизитов
	ЗаполнитьЗначенияСвойств(ОбъектСправочника, ДанныеДоверенности);
	
	ТабличныеЧасти = Новый Структура;
	ТабличныеЧасти.Вставить("ФИО", ДанныеДоверенности.ФИО);
	ТабличныеЧасти.Вставить("ПолномочияПредставителя", ДанныеДоверенности.ПолномочияПредставителя);
	ТабличныеЧасти.Вставить("УдостоверенияЛичности", ДанныеДоверенности.УдостоверенияЛичности);
	
	Для Каждого СтрокаТЧ Из ТабличныеЧасти Цикл
		ТекущаяТЧ = ОбъектСправочника[СтрокаТЧ.Ключ];
		ТекущаяТЧ.Очистить();
		Для Каждого НоваяСтрока Из СтрокаТЧ.Значение Цикл
			ДобавленнаяСтрока = ТекущаяТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НоваяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеДоверенности.Свойство("ДанныеВыгрузки") И ДанныеДоверенности.ДанныеВыгрузки <> Неопределено Тогда
		ОбъектСправочника.ФайлВырузки = Новый ХранилищеЗначения(ДанныеДоверенности.ДанныеВыгрузки, Новый СжатиеДанных(9));
	КонецЕсли;
	Если ДанныеДоверенности.Свойство("ДанныеПодписи") И ДанныеДоверенности.ДанныеПодписи <> Неопределено Тогда
		ОбъектСправочника.ЭлектроннаяПодпись = Новый ХранилищеЗначения(ДанныеДоверенности.ДанныеПодписи,
			Новый СжатиеДанных(9));
		ОбъектСправочника.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.Подписано;
	Иначе
		ОбъектСправочника.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.ВРаботе;
	КонецЕсли;
	
	Удачно = Ложь;
	
	Если ОбъектСправочника.ПроверитьЗаполнение() Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.МашиночитаемыеДоверенностиЦБ");
		Если НЕ ОбъектСправочника.ЭтоНовый() Тогда
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектСправочника.Ссылка);
		КонецЕсли;	
		
		Удачно = Истина;
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка.Заблокировать();
			ОбъектСправочника.Записать();
			
		Исключение
			ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Ошибка изменения МЧД.';
								|en = 'Электронный документооборот с контролирующими органами. Ошибка изменения МЧД.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,,,
				ДанныеОшибки);
			Удачно = Ложь;
		КонецПопытки;
		
		Если Удачно Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Удачно Тогда
		Результат = ОбъектСправочника.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

Функция ДанныеИзИнформационнойБазы(СправочникСсылка)
	
	Результат = Новый Структура;
	
	ТекстЗапросаРеквизитовПолномочий = "";
	Для ВидПолномочия = 1 По ДокументооборотСКОКлиентСервер.КоличествоПолномочийМЧДЦБ() Цикл
		ПредставлениеВида = Формат(ВидПолномочия, "ЧЦ=2; ЧВН=");
		ТекстЗапросаРеквизитовПолномочий = ТекстЗапросаРеквизитовПолномочий + "
			|	МашиночитаемыеДоверенностиЦБПолномочияПредставителя.Признак" + ПредставлениеВида
			+ " КАК Признак" + ПредставлениеВида + ?(ВидПолномочия = ДокументооборотСКОКлиентСервер.КоличествоПолномочийМЧДЦБ(),
					"", ",");
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиЦБПолномочияПредставителя.Ссылка КАК Доверенность,
		|	МашиночитаемыеДоверенностиЦБПолномочияПредставителя.ПризнакПолныеПолномочия КАК ПризнакПолныеПолномочия,"
		+ ТекстЗапросаРеквизитовПолномочий + "
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиЦБ.ПолномочияПредставителя КАК МашиночитаемыеДоверенностиЦБПолномочияПредставителя
		|ГДЕ
		|	МашиночитаемыеДоверенностиЦБПолномочияПредставителя.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиЦБФИО.Владелец КАК Владелец,
		|	МашиночитаемыеДоверенностиЦБФИО.Фамилия КАК Фамилия,
		|	МашиночитаемыеДоверенностиЦБФИО.Имя КАК Имя,
		|	МашиночитаемыеДоверенностиЦБФИО.Отчество КАК Отчество
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиЦБ.ФИО КАК МашиночитаемыеДоверенностиЦБФИО
		|ГДЕ
		|	МашиночитаемыеДоверенностиЦБФИО.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиЦБ.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиЦБ.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиЦБ.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиЦБ.СведенияОбИнформационнойСистеме КАК СведенияОбИнформационнойСистеме,
		|	МашиночитаемыеДоверенностиЦБ.НомерРодительскойДоверенности КАК НомерРодительскойДоверенности,
		|	МашиночитаемыеДоверенностиЦБ.Организация КАК Организация,
		|	МашиночитаемыеДоверенностиЦБ.ДоверительЮЛ_ИностраннаяОрганизация КАК ДоверительЮЛ_ИностраннаяОрганизация,
		|	МашиночитаемыеДоверенностиЦБ.ДоверительЮЛ_ИНН КАК ДоверительЮЛ_ИНН,
		|	МашиночитаемыеДоверенностиЦБ.ДоверительЮЛ_ОГРН КАК ДоверительЮЛ_ОГРН,
		|	МашиночитаемыеДоверенностиЦБ.ДоверительЮЛ_СтрРег КАК ДоверительЮЛ_СтрРег,
		|	МашиночитаемыеДоверенностиЦБ.ДоверительЮЛ_НаимРегОрг КАК ДоверительЮЛ_НаимРегОрг,
		|	МашиночитаемыеДоверенностиЦБ.ДоверительЮЛ_РегНомер КАК ДоверительЮЛ_РегНомер,
		|	МашиночитаемыеДоверенностиЦБ.ДоверительЮЛ_АдрРус КАК ДоверительЮЛ_АдрРус,
		|	МашиночитаемыеДоверенностиЦБ.ДоверительЮЛ_АдрЛат КАК ДоверительЮЛ_АдрЛат,
		|	МашиночитаемыеДоверенностиЦБ.ДоверительФЛ_ИНН КАК ДоверительФЛ_ИНН,
		|	МашиночитаемыеДоверенностиЦБ.ДоверительФЛ_ОГРН КАК ДоверительФЛ_ОГРН,
		|	МашиночитаемыеДоверенностиЦБ.ДоверительФЛ_СНИЛС КАК ДоверительФЛ_СНИЛС,
		|	МашиночитаемыеДоверенностиЦБ.ДоверительФЛ_Гражданство КАК ДоверительФЛ_Гражданство,
		|	МашиночитаемыеДоверенностиЦБ.ДоверительЮЛ_НаимОрг КАК ДоверительЮЛ_НаимОрг,
		|	МашиночитаемыеДоверенностиЦБ.ЛицоБезДовФЛ_СНИЛС КАК ЛицоБезДовФЛ_СНИЛС,
		|	МашиночитаемыеДоверенностиЦБ.ЛицоБезДовФЛ_Гражданство КАК ЛицоБезДовФЛ_Гражданство,
		|	МашиночитаемыеДоверенностиЦБ.ЛицоБезДовФЛ_Должность КАК ЛицоБезДовФЛ_Должность,
		|	МашиночитаемыеДоверенностиЦБ.ПредставительФЛ_ИНН КАК ПредставительФЛ_ИНН,
		|	МашиночитаемыеДоверенностиЦБ.ПредставительФЛ_СНИЛС КАК ПредставительФЛ_СНИЛС,
		|	МашиночитаемыеДоверенностиЦБ.ПредставительФЛ_Гражданство КАК ПредставительФЛ_Гражданство,
		|	МашиночитаемыеДоверенностиЦБ.ПредставительФЛ_Должность КАК ПредставительФЛ_Должность
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиЦБ КАК МашиночитаемыеДоверенностиЦБ
		|ГДЕ
		|	МашиночитаемыеДоверенностиЦБ.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиЦБУдостоверенияЛичности.Владелец КАК Владелец,
		|	МашиночитаемыеДоверенностиЦБУдостоверенияЛичности.ВидДок КАК ВидДок,
		|	МашиночитаемыеДоверенностиЦБУдостоверенияЛичности.СерДок КАК СерДок,
		|	МашиночитаемыеДоверенностиЦБУдостоверенияЛичности.НомДок КАК НомДок,
		|	МашиночитаемыеДоверенностиЦБУдостоверенияЛичности.ДатаДок КАК ДатаДок,
		|	МашиночитаемыеДоверенностиЦБУдостоверенияЛичности.ВыдДок КАК ВыдДок,
		|	МашиночитаемыеДоверенностиЦБУдостоверенияЛичности.КодВыдДок КАК КодВыдДок
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиЦБ.УдостоверенияЛичности КАК МашиночитаемыеДоверенностиЦБУдостоверенияЛичности
		|ГДЕ
		|	МашиночитаемыеДоверенностиЦБУдостоверенияЛичности.Ссылка = &СправочникСсылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СправочникСсылка", СправочникСсылка);
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	ВыборкаПолномочий = ПакетЗапросов[0].Выгрузить();
	
	ПолномочияПредставителя = Новый Массив;
	Если ВыборкаПолномочий.Количество() = 0 ИЛИ ВыборкаПолномочий[0].ПризнакПолныеПолномочия Тогда
		ПолномочияПредставителя.Добавить("99");
	Иначе
		Для ВидПолномочия = 1 По ДокументооборотСКОКлиентСервер.КоличествоПолномочийМЧДЦБ() Цикл
			ПредставлениеВида = Формат(ВидПолномочия, "ЧЦ=2; ЧВН=");
			Если ВыборкаПолномочий[0]["Признак" + ПредставлениеВида] Тогда
				ПолномочияПредставителя.Добавить(ПредставлениеВида);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Результат.Вставить("ПолномочияПредставителя", ПолномочияПредставителя);
	
	ВыборкаПодписантов = ПакетЗапросов[1].Выгрузить();
	ВыборкаДокументов = ПакетЗапросов[3].Выгрузить();
	
	ПустойПодписант = Новый Структура("Имя, Отчество, Фамилия", "", "", "");
	ПустойДокумент = Новый Структура("ВидДок, СерДок, НомДок, ДатаДок, ВыдДок, КодВыдДок", "", "", "", "", "", "", "");
	
	ВыборкаИнформации = ПакетЗапросов[2].Выбрать();
	Если ВыборкаИнформации.Следующий() Тогда
		Результат.Вставить("Номер", ВыборкаИнформации.НомерДоверенности);
		Результат.Вставить("ДатаВыдачи", ВыборкаИнформации.ДатаВыдачи);
		Результат.Вставить("ДатаОкончания", ВыборкаИнформации.ДатаОкончания);
		Результат.Вставить("СведенияОбИнформационнойСистеме", ВыборкаИнформации.СведенияОбИнформационнойСистеме);
		Результат.Вставить("ПредыдующийНомер", ВыборкаИнформации.НомерРодительскойДоверенности);
		
		// информация об доверителе
		Результат.Вставить("Организация", ВыборкаИнформации.Организация);
		Результат.Вставить("ИностраннаяОрганизация", ВыборкаИнформации.ДоверительЮЛ_ИностраннаяОрганизация);
		Результат.Вставить("ДоверительЮЛ_ИНН", ВыборкаИнформации.ДоверительЮЛ_ИНН);
		Результат.Вставить("ДоверительЮЛ_ОГРН", ВыборкаИнформации.ДоверительЮЛ_ОГРН);
		Результат.Вставить("ДоверительЮЛ_СтрРег", ВыборкаИнформации.ДоверительЮЛ_СтрРег);
		Результат.Вставить("ДоверительЮЛ_НаимРегОрг", ВыборкаИнформации.ДоверительЮЛ_НаимРегОрг);
		Результат.Вставить("ДоверительЮЛ_РегНомер", ВыборкаИнформации.ДоверительЮЛ_РегНомер);
		Результат.Вставить("ДоверительЮЛ_АдрРус", ВыборкаИнформации.ДоверительЮЛ_АдрРус);
		Результат.Вставить("ДоверительЮЛ_АдрЛат", ВыборкаИнформации.ДоверительЮЛ_АдрЛат);
		Результат.Вставить("ДоверительФЛ_ИНН", ВыборкаИнформации.ДоверительФЛ_ИНН);
		Результат.Вставить("ДоверительФЛ_ОГРН", ВыборкаИнформации.ДоверительФЛ_ОГРН);
		Результат.Вставить("ДоверительФЛ_СНИЛС", ВыборкаИнформации.ДоверительФЛ_СНИЛС);
		Результат.Вставить("ДоверительФЛ_Гражданство", ВыборкаИнформации.ДоверительФЛ_Гражданство);
		Результат.Вставить("ДоверительЮЛ_НаимОрг", ВыборкаИнформации.ДоверительЮЛ_НаимОрг);
		
		Если Результат.ИностраннаяОрганизация Тогда
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ИО");
		ИначеЕсли ЗначениеЗаполнено(Результат.ДоверительЮЛ_ИНН) Тогда
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ЮЛ");
		Иначе
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ФЛ");
		КонецЕсли;
		
		// информация об подписанте
		Результат.Вставить("ЛицоБезДовФЛ_СНИЛС", ВыборкаИнформации.ЛицоБезДовФЛ_СНИЛС);
		Результат.Вставить("ЛицоБезДовФЛ_Гражданство", ВыборкаИнформации.ЛицоБезДовФЛ_Гражданство);
		Результат.Вставить("ЛицоБезДовФЛ_Должность", ВыборкаИнформации.ЛицоБезДовФЛ_Должность);
		
		// информация о представителе
		Результат.Вставить("ПредставительФЛ_ИНН", ВыборкаИнформации.ПредставительФЛ_ИНН);
		Результат.Вставить("ПредставительФЛ_СНИЛС", ВыборкаИнформации.ПредставительФЛ_СНИЛС);
		Результат.Вставить("ПредставительФЛ_Гражданство", ВыборкаИнформации.ПредставительФЛ_Гражданство);
		Результат.Вставить("ПредставительФЛ_Должность", ВыборкаИнформации.ПредставительФЛ_Должность);
		
		ТипВладельца = Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ;
		НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец", ТипВладельца));
		
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиФИО = ПустойПодписант;
		Иначе
			НашлиФИО = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ПредставительФЛ_Имя", НашлиФИО.Имя);
		Результат.Вставить("ПредставительФЛ_Отчество", НашлиФИО.Отчество);
		Результат.Вставить("ПредставительФЛ_Фамилия", НашлиФИО.Фамилия);
		
		НашлиСтроки = ВыборкаДокументов.НайтиСтроки(Новый Структура("Владелец", ТипВладельца));
		
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиДок = ПустойДокумент;
		Иначе
			НашлиДок = НашлиСтроки[0];
		КонецЕсли;
		
		Результат.Вставить("ПредставительФЛ_ВидДок", НашлиДок.ВидДок);
		Результат.Вставить("ПредставительФЛ_СерДок", НашлиДок.СерДок);
		Результат.Вставить("ПредставительФЛ_НомДок", НашлиДок.НомДок);
		Результат.Вставить("ПредставительФЛ_ДатаДок", НашлиДок.ДатаДок);
		Результат.Вставить("ПредставительФЛ_ВыдДок", НашлиДок.ВыдДок);
		Результат.Вставить("ПредставительФЛ_КодВыдДок", НашлиДок.КодВыдДок);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыгрузитьФИОУзла(ЗаписьXML, Фамилия, Имя, Отчество)
	
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Surname", Фамилия);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Name", Имя);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "SecondName", Отчество, Ложь);
	
КонецПроцедуры

Процедура ВыгрузитьАдресУзла(ЗаписьXML, АдресРФ, АдресЛат, ВыделитьВУзел = "")
	
	Если ЗначениеЗаполнено(ВыделитьВУзел) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента(ВыделитьВУзел);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресЛат) Тогда
		ЗаписатьУзелXML(ЗаписьXML, "dover:AddressLat", АдресЛат);
	ИначеЕсли ЗначениеЗаполнено(АдресРФ) Тогда
		ЗаписатьУзелXML(ЗаписьXML, "dover:AddressRu", АдресРФ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыделитьВУзел) Тогда
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьУдостоверениеУзла(
				ЗаписьXML,
				ВидДокумента,
				СерияДокумента,
				НомерДокумента,
				ДатаВыдачи,
				Выдан,
				КодПодразделения)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("dover:DocumentInfo");
	
	КодВидаДокумента = ВидДокумента;
	Если ТипЗнч(КодВидаДокумента) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
		Если Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодМВД") <> Неопределено Тогда
			КодВидаДокумента = КодВидаДокумента.КодМВД;
		ИначеЕсли Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодФНС") <> Неопределено Тогда
			КодВидаДокумента = КодВидаДокумента.КодФНС;
		КонецЕсли;
	КонецЕсли;
	МассивыВидовДокументов = ВидовДокументовИКодыДокументовЦБ();
	ИндексВидаДокумента = МассивыВидовДокументов.ВидыДокументов.Найти(КодВидаДокумента);
	
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "TypeOfDocument", ?(ИндексВидаДокумента = Неопределено, Неопределено,
		МассивыВидовДокументов.КодыДокументовЦБ[ИндексВидаДокумента]));
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "DocumentNumber", СокрЛП(СерияДокумента + " " + НомерДокумента));
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "DocumentDate", ДатаВыдачи);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "AuthorityNameIssuedDocument", Выдан);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "AuthoritySubdivisionCode", КодПодразделения, Ложь);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ВидовДокументовИКодыДокументовЦБ()
	
	Результат = Новый Структура;
	Результат.Вставить("ВидыДокументов", 	Новый Массив);
	Результат.Вставить("КодыДокументовЦБ", 	Новый Массив);
	
	Результат.ВидыДокументов.Добавить("21");
	Результат.КодыДокументовЦБ.Добавить("01");
	
	Результат.ВидыДокументов.Добавить("26");
	Результат.КодыДокументовЦБ.Добавить("02");
	
	Результат.ВидыДокументов.Добавить("24");
	Результат.КодыДокументовЦБ.Добавить("03");
	
	Результат.ВидыДокументов.Добавить("10");
	Результат.КодыДокументовЦБ.Добавить("04");
	
	Результат.ВидыДокументов.Добавить("12");
	Результат.КодыДокументовЦБ.Добавить("05");
	
	Результат.ВидыДокументов.Добавить("15");
	Результат.КодыДокументовЦБ.Добавить("06");
	
	Результат.ВидыДокументов.Добавить("13");
	Результат.КодыДокументовЦБ.Добавить("07");
	
	Результат.ВидыДокументов.Добавить("91");
	Результат.КодыДокументовЦБ.Добавить("08");
	
	Результат.ВидыДокументов.Добавить("18");
	Результат.КодыДокументовЦБ.Добавить("09");
	
	Результат.ВидыДокументов.Добавить("11");
	Результат.КодыДокументовЦБ.Добавить("10");
	
	Результат.ВидыДокументов.Добавить("14");
	Результат.КодыДокументовЦБ.Добавить("13");
	
	Результат.ВидыДокументов.Добавить("09");
	Результат.КодыДокументовЦБ.Добавить("14");
	
	Результат.ВидыДокументов.Добавить("22");
	Результат.КодыДокументовЦБ.Добавить("15");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
