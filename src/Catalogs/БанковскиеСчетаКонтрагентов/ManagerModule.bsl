#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция определяет банковский счет выбранного контрагента или физического лица.
//
// Возвращает банковский счет получателя, если найден один банковский счет.
// Возвращает Неопределено, если банковский счет не найден или счетов больше одного.
//
// Параметры:
//	Получатель - СправочникСсылка.Контрагенты, СправочникСсылка.ФизическиеЛица - Ссылка на получателя
//	Валюта - СправочникСсылка.Валюты - Валюта банковского счета.
//
// Возвращаемое значение:
//	СправочникСсылка.БанковскиеСчетаКонтрагентов - Найденный банковский счет получателя.
//
Функция ПолучитьБанковскийСчетПоУмолчанию(Получатель, Валюта = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчетПолучателя
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
	|	И НЕ БанковскиеСчетаКонтрагентов.Закрыт
	|	И БанковскиеСчетаКонтрагентов.Владелец = &Получатель
	|	И (БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = &Валюта
	|		ИЛИ &Валюта = Неопределено)
	|");
	
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("Валюта", ?(ЗначениеЗаполнено(Валюта), Валюта, Неопределено));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 
	   И Выборка.Следующий()
	Тогда
		БанковскийСчетПолучателя = Выборка.БанковскийСчетПолучателя;
	Иначе
		БанковскийСчетПолучателя = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат БанковскийСчетПолучателя;

КонецФункции

// Функция проверяет соответствие владельца банковского счета выбранному контрагенту или физическому лицу.
//
// Параметры:
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаКонтрагентов - Ссылка на банковский счет
//  Владелец - СправочникСсылка.Контрагенты, СправочникСсылка.ФизическиеЛица - Ссылка на владельца.
//
// Возвращаемое значение:
//	Булево - Признак принадлежности банковского счета указанному владельцу.
//
Функция ПроверитьВладельцаБанковскогоСчета(БанковскийСчет, Владелец) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчетПолучателя
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	БанковскиеСчетаКонтрагентов.Ссылка = &БанковскийСчет
	|	И БанковскиеСчетаКонтрагентов.Владелец = &Владелец
	|");
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СчетСоответствуетВладельцу = Ложь;
	Иначе
		СчетСоответствуетВладельцу = Истина;
	КонецЕсли;
	
	Возврат СчетСоответствуетВладельцу;

КонецФункции

// Функция получает реквизиты банковского счета.
//
// Параметры:
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаКонтрагентов - Ссылка на банковский счет.
//
// Возвращаемое значение:
//	Структура - реквизиты банковского счета контрагента:
//	*Валюта - СправочникСсылка.Валюты - валюта банковского счета.
//	*ТекстНазначения - Строка - назначение платежа по счету.
//	*НомерСчета - Строка - номер банковского счета.
//	*Банк - СправочникСсылка.КлассификаторБанков, Строка, Неопределено - банк банковского счета.
//	*БИК - Строка - БИК банка банковского счета.
//	*КоррСчет - Строка - корреспонденский счет.
//	*АдресБанка - Строка - адрес банка в банковскогом счете.
//	*БИКРКЦ - СправочникСсылка.КлассификаторБанков, Неопределено - БИК расчетно-кассового центра.
//
Функция ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.ВалютаДенежныхСредств КАК Валюта,
	|	БанковскиеСчета.ТекстНазначения КАК ТекстНазначения,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчета.НаименованиеБанка
	|		ИНАЧЕ БанковскиеСчета.Банк
	|	КОНЕЦ КАК Банк,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчета.БИКБанка
	|		ИНАЧЕ БанковскиеСчета.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчета.КоррСчетБанка
	|		ИНАЧЕ БанковскиеСчета.Банк.КоррСчет
	|	КОНЕЦ КАК КоррСчет,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчета.АдресБанка
	|		ИНАЧЕ БанковскиеСчета.Банк.Адрес
	|	КОНЕЦ КАК АдресБанка,
	|	БанковскиеСчета.Банк.БИКРКЦ КАК БИКРКЦ
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчет";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Валюта 			= Выборка.Валюта;
		ТекстНазначения = Выборка.ТекстНазначения;
		НомерСчета 		= Выборка.НомерСчета;
		Банк 			= Выборка.Банк;
		БИК 			= Выборка.БИК;
		КоррСчет 		= Выборка.КоррСчет;
		АдресБанка 		= Выборка.АдресБанка;
		БИКРКЦ 			= Выборка.БИКРКЦ;
	Иначе
		Валюта 			= Справочники.Валюты.ПустаяСсылка();
		ТекстНазначения = "";
		НомерСчета 		= "";
		Банк 			= Неопределено;
		БИК 			= "";
		КоррСчет 		= "";
		АдресБанка 		= "";
		БИКРКЦ 			= Выборка.БИКРКЦ;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Валюта", Валюта);
	СтруктураРеквизитов.Вставить("ТекстНазначения", ТекстНазначения);
	СтруктураРеквизитов.Вставить("НомерСчета", НомерСчета);
	СтруктураРеквизитов.Вставить("Банк", Банк);
	СтруктураРеквизитов.Вставить("БИК", БИК);
	СтруктураРеквизитов.Вставить("КоррСчет", КоррСчет);
	СтруктураРеквизитов.Вставить("АдресБанка", АдресБанка);
	СтруктураРеквизитов.Вставить("БИКРКЦ", БИКРКЦ);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Определяет свойства полей формы в зависимости от данных
// 
// Возвращаемое значение:
//  см. ДенежныеСредстваСервер.ИнициализироватьНастройкиПолейФормы.
//
Функция НастройкиПолейФормы() Экспорт
	
	Финансы = ФинансоваяОтчетностьСервер;
	Настройки = ДенежныеСредстваСервер.ИнициализироватьНастройкиПолейФормы();
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Владелец");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.СчетФизЛица", Истина);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Физическое лицо';
												|en = 'Person'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Владелец");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.СчетФизЛица", Ложь);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Контрагент';
												|en = 'Counterparty'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ТекстКорреспондента");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьТекстКорреспондента", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	ДенежныеСредстваСервер.НастройкиЭлементовБанков(Настройки);
	
	Возврат Настройки;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияПартнеров КАК Т2 
	|	ПО Т2.Родитель = Т.Владелец.Партнер
	|;
	|РазрешитьЧтение
	|ГДЕ
	|	( ТипЗначения(Т.Владелец) = Тип(Справочник.Контрагенты)
	|	И ЗначениеРазрешено(Т2.Партнер)
	|	)ИЛИ( ТипЗначения(Т.Владелец) = Тип(Справочник.ФизическиеЛица)
	|	И( ЗначениеРазрешено(Т.Владелец)
	|	)) 
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	( ТипЗначения(Владелец) = Тип(Справочник.Контрагенты)
	|	И ЗначениеРазрешено(Владелец.Партнер)
	|	)ИЛИ( ТипЗначения(Владелец) = Тип(Справочник.ФизическиеЛица)
	|	И( ЗначениеРазрешено(Владелец)
	|	ИЛИ ЗначениеРазрешено(Владелец)
	|	)) ";
	
	Ограничение.ТекстДляВнешнихПользователей =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров 
	|	ПО ИерархияПартнеров.Родитель = ЭтотСписок.Владелец.Партнер
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователиПартнеры
	|	ПО ВнешниеПользователиПартнеры.ОбъектАвторизации = ИерархияПартнеров.Партнер
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров 
	|	ПО КонтактныеЛицаПартнеров.Владелец = ЭтотСписок.Владелец.Партнер
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователиКонтактныеЛица 
	|	ПО ВнешниеПользователиКонтактныеЛица.ОбъектАвторизации = КонтактныеЛицаПартнеров.Ссылка
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ВнешниеПользователиПартнеры.Ссылка)
	|	ИЛИ ЗначениеРазрешено(ВнешниеПользователиКонтактныеЛица.Ссылка)";

КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	НовКоманда = КомандыПечати.Добавить();
	НовКоманда.Идентификатор = "РеквизитыБанковскогоСчета";
	НовКоманда.Представление = Нстр("ru = 'Реквизиты';
									|en = 'Attributes'");
	НовКоманда.ЗаголовокФормы = Нстр("ru = 'Печать реквизитов банковского счета';
									|en = 'Print bank account details'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеквизитыБанковскогоСчета") Тогда
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "РеквизитыБанковскогоСчета");
		Если ПечатнаяФорма <> Неопределено Тогда
			ПечатнаяФорма.ТабличныйДокумент = ПечатьРеквизитовСчета(МассивОбъектов, ОбъектыПечати);
			ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Реквизиты банковского счета';
												|en = 'Bank account details'");
			ПечатнаяФорма.ПолныйПутьКМакету = "ОбщийМакет.ПФ_MXL_РеквизитыСчета";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#Область ОбновлениеИнформационнойБазы

//++ Локализация

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.БанковскиеСчетаКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.13.51";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f7745cf2-298b-4959-89c1-227fffa09479");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.БанковскиеСчетаКонтрагентов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "Справочники.БанковскиеСчетаКонтрагентов.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение текста корреспондента получателя налоговых платежей';
									|en = 'Fill the text of a correspondent tax payee'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.БанковскиеСчетаКонтрагентов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.БанковскиеСчетаКонтрагентов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.БанковскиеСчетаКонтрагентов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчетаКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	БанковскиеСчетаКонтрагентов.НомерСчета = &НомерСчета
	|	И БанковскиеСчетаКонтрагентов.ТекстКорреспондента <> &ТекстКорреспондента
	|	И БанковскиеСчетаКонтрагентов.Владелец.ИНН = &ИНН
	|";
	
	РеквизитыМИДол = ЕдиныйНалоговыйСчет.РеквизитыМИДол();
	Запрос.УстановитьПараметр("НомерСчета", РеквизитыМИДол.ПлатежныеРеквизиты.РасчетныйСчет);
	Запрос.УстановитьПараметр("ТекстКорреспондента", РеквизитыМИДол.ПлатежныеРеквизиты.ПолучательПлатежа);
	Запрос.УстановитьПараметр("ИНН", РеквизитыМИДол.ИНН);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
		Параметры.Очередь, "Справочник.БанковскиеСчетаКонтрагентов");
		
	РеквизитыМИДол = ЕдиныйНалоговыйСчет.РеквизитыМИДол();
	
	ОбработанныхОбъектов = 0; ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Записать = Ложь;
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.БанковскиеСчетаКонтрагентов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ОбъектОбработки = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ОбъектОбработки <> Неопределено Тогда
				Если ОбъектОбработки.ТекстКорреспондента <> РеквизитыМИДол.ПлатежныеРеквизиты.ПолучательПлатежа Тогда
					ОбъектОбработки.ТекстКорреспондента = РеквизитыМИДол.ПлатежныеРеквизиты.ПолучательПлатежа;
					Записать = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектОбработки);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ТекстСообщения = НСтр("ru = 'Не удалось обработать справочник: %Регистратор% по причине: %Причина%';
									|en = 'Cannot process the catalog: %Регистратор%. Reason: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.Ссылка);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки);
			СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.БанковскиеСчетаКонтрагентов, , ТекстСообщения);
			Продолжить;
		КонецПопытки;
	КонецЦикла;

	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые банковские счета контрагентов (пропущены): %1';
								|en = 'Cannot process some counterparty bank accounts (skipped): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		МетаданныеОбъекта = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция банковских счетов контрагентов: %1';
								|en = 'Another batch of counterparty bank accounts is processed: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработанныхОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация, МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбработанныхОбъектов;

	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, "Справочник.БанковскиеСчетаКонтрагентов");

КонецПроцедуры

//-- Локализация

// См. ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы.
Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Возврат ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор);
	
КонецФункции

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновленияУТ(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.БанковскиеСчетаКонтрагентов.ЗаполнитьРеквизитыБанков";
	Обработчик.Версия = "11.5.15.31";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4ed1d199-b82a-4f12-8d31-3a88c1f965e9");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.БанковскиеСчетаКонтрагентов.ЗарегистрироватьДанныеДляЗаполненияРеквизитовБанков";
	Обработчик.ПроцедураПроверки = "Справочники.БанковскиеСчетаКонтрагентов.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов банков в справочнике ""Банковские счета контрагентов"":
		|- данных иностранных банков и иностранных банков корреспондентов - БИК, SWIFT, корр. счет, наименование банка, город банка, адрес банка, телефон и т.д., с последующей очисткой полей ""Банк"" и ""Банк корреспондент"";
		|- полей ""Банк"" и ""Банк корреспондент"", страна которых не заполнена или указано значение ""Россия"".';
		|en = 'Fills bank details in the ""Counterparty bank accounts"" catalog:
		|- Details of foreign banks and foreign correspondent banks: BIC, SWIFT, corr. account, bank name, bank city, bank address, phone number, and other, and then clears the ""Bank"" and ""Correspondent bank"" fields.
		|- The ""Bank"" and ""Correspondent bank"" fields whose country is not filled or if ""Russia"" is specified.'");
	Обработчик.Многопоточный = Истина;
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.БанковскиеСчетаКонтрагентов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.БанковскиеСчетаКонтрагентов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.БанковскиеСчетаКонтрагентов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Регистрирует элементы справочника к обработке.
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеДляЗаполненияРеквизитовБанков(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.БанковскиеСчетаКонтрагентов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторБанков.Ссылка КАК Банк
	|ПОМЕСТИТЬ ИностранныеБанки
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанков
	|ГДЕ
	|	КлассификаторБанков.Страна <> &ОсновнаяСтрана
	|	И КлассификаторБанков.Страна <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Банк
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК Ссылка,
	|	БанковскиеСчетаКонтрагентов.БИКБанка КАК БИК,
	|	БанковскиеСчетаКонтрагентов.СВИФТБанка КАК СВИФТ,
	|	БанковскиеСчетаКонтрагентов.КоррСчетБанка КАК КоррСчет,
	|	БанковскиеСчетаКонтрагентов.СтранаБанка КАК Страна
	|ПОМЕСТИТЬ БанковскиеСчетаБезСсылкиБанка
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	БанковскиеСчетаКонтрагентов.Банк = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|	И (БанковскиеСчетаКонтрагентов.БИКБанка <> """"
	|		ИЛИ БанковскиеСчетаКонтрагентов.СВИФТБанка <> """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчетаКонтрагентов.Ссылка,
	|	БанковскиеСчетаКонтрагентов.БИКБанкаДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.СВИФТБанкаДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.КоррСчетБанкаДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.СтранаБанкаДляРасчетов
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|	И (БанковскиеСчетаКонтрагентов.БИКБанкаДляРасчетов <> """"
	|		ИЛИ БанковскиеСчетаКонтрагентов.СВИФТБанкаДляРасчетов <> """")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Страна
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчетаБезСсылкиБанка.Ссылка КАК Ссылка,
	|	БанковскиеСчетаБезСсылкиБанка.БИК КАК БИК,
	|	БанковскиеСчетаБезСсылкиБанка.СВИФТ КАК СВИФТ,
	|	БанковскиеСчетаБезСсылкиБанка.КоррСчет КАК КоррСчет
	|ПОМЕСТИТЬ ЛокальныеСчетаБезБанка
	|ИЗ
	|	БанковскиеСчетаБезСсылкиБанка КАК БанковскиеСчетаБезСсылкиБанка
	|ГДЕ
	|	БанковскиеСчетаБезСсылкиБанка.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчетаБезСсылкиБанка.Ссылка,
	|	БанковскиеСчетаБезСсылкиБанка.БИК,
	|	БанковскиеСчетаБезСсылкиБанка.СВИФТ,
	|	БанковскиеСчетаБезСсылкиБанка.КоррСчет
	|ИЗ
	|	БанковскиеСчетаБезСсылкиБанка КАК БанковскиеСчетаБезСсылкиБанка
	|ГДЕ
	|	БанковскиеСчетаБезСсылкиБанка.Страна.Код = ""643""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Счет КАК Счет
	|ИЗ
	|	(ВЫБРАТЬ
	|		БанковскиеСчетаКонтрагентов.Ссылка КАК Счет
	|	ИЗ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИностранныеБанки КАК ИностранныеБанки
	|			ПО БанковскиеСчетаКонтрагентов.Банк = ИностранныеБанки.Банк
	|	ГДЕ
	|		БанковскиеСчетаКонтрагентов.Банк <> ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БанковскиеСчетаКонтрагентов.Ссылка
	|	ИЗ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИностранныеБанки КАК ИностранныеБанки
	|			ПО БанковскиеСчетаКонтрагентов.БанкДляРасчетов = ИностранныеБанки.Банк
	|	ГДЕ
	|		БанковскиеСчетаКонтрагентов.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛокальныеСчетаБезБанка.Ссылка
	|	ИЗ
	|		ЛокальныеСчетаБезБанка КАК ЛокальныеСчетаБезБанка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|			ПО ЛокальныеСчетаБезБанка.БИК = КлассификаторБанков.Код
	|				И ЛокальныеСчетаБезБанка.СВИФТ = КлассификаторБанков.СВИФТБИК
	|				И ЛокальныеСчетаБезБанка.КоррСчет = КлассификаторБанков.КоррСчет
	|				И НЕ КлассификаторБанков.ПометкаУдаления) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИностранныеБанки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ БанковскиеСчетаБезСсылкиБанка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЛокальныеСчетаБезБанка";
	
	Запрос.УстановитьПараметр("ОсновнаяСтрана", Константы.ОсновнаяСтрана.Получить());
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	СписокСчетов = ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокСчетов);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗаполнитьРеквизитыБанков(Параметры) Экспорт
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Если ВыбранныеДанные.Количество() <> 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК Ссылка,
		|	БанковскиеСчетаКонтрагентов.Банк КАК Банк,
		|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов КАК БанкДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.БИКБанка КАК БИКБанка,
		|	БанковскиеСчетаКонтрагентов.СВИФТБанка КАК СВИФТБанка,
		|	БанковскиеСчетаКонтрагентов.КоррСчетБанка КАК КоррСчетБанка,
		|	БанковскиеСчетаКонтрагентов.БИКБанкаДляРасчетов КАК БИКБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.СВИФТБанкаДляРасчетов КАК СВИФТБанкаДляРасчетов,
		|	БанковскиеСчетаКонтрагентов.КоррСчетБанкаДляРасчетов КАК КоррСчетБанкаДляРасчетов
		|ПОМЕСТИТЬ СписокСчетовКОбработке
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|ГДЕ
		|	БанковскиеСчетаКонтрагентов.Ссылка В(&Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Банк КАК Банк
		|ПОМЕСТИТЬ БанкиСчетовКОбработке
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписокСчетовКОбработке.Банк КАК Банк
		|	ИЗ
		|		СписокСчетовКОбработке КАК СписокСчетовКОбработке
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СписокСчетовКОбработке.БанкДляРасчетов
		|	ИЗ
		|		СписокСчетовКОбработке КАК СписокСчетовКОбработке) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.БИКБанка КАК БИК,
		|	ВложенныйЗапрос.СВИФТБанка КАК СВИФТ,
		|	ВложенныйЗапрос.КоррСчетБанка КАК КоррСчет
		|ПОМЕСТИТЬ РеквизитыБанковВСчетах
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписокСчетовКОбработке.БИКБанка КАК БИКБанка,
		|		СписокСчетовКОбработке.СВИФТБанка КАК СВИФТБанка,
		|		СписокСчетовКОбработке.КоррСчетБанка КАК КоррСчетБанка
		|	ИЗ
		|		СписокСчетовКОбработке КАК СписокСчетовКОбработке
		|	ГДЕ
		|		(СписокСчетовКОбработке.БИКБанка <> """"
		|				ИЛИ СписокСчетовКОбработке.СВИФТБанка <> """")
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СписокСчетовКОбработке.БИКБанкаДляРасчетов,
		|		СписокСчетовКОбработке.СВИФТБанкаДляРасчетов,
		|		СписокСчетовКОбработке.КоррСчетБанкаДляРасчетов
		|	ИЗ
		|		СписокСчетовКОбработке КАК СписокСчетовКОбработке
		|	ГДЕ
		|		(СписокСчетовКОбработке.БИКБанкаДляРасчетов <> """"
		|				ИЛИ СписокСчетовКОбработке.СВИФТБанкаДляРасчетов <> """")) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлассификаторБанков.Ссылка КАК Банк,
		|	КлассификаторБанков.Наименование КАК Наименование,
		|	КлассификаторБанков.КоррСчет КАК КоррСчет,
		|	КлассификаторБанков.Город КАК Город,
		|	КлассификаторБанков.Адрес КАК Адрес,
		|	КлассификаторБанков.Телефоны КАК Телефоны,
		|	КлассификаторБанков.Код КАК БИК,
		|	КлассификаторБанков.СВИФТБИК КАК СВИФТ,
		|	КлассификаторБанков.МеждународноеНаименование КАК МеждународноеНаименование,
		|	КлассификаторБанков.ГородМеждународный КАК ГородМеждународный,
		|	КлассификаторБанков.АдресМеждународный КАК АдресМеждународный,
		|	КлассификаторБанков.Страна КАК Страна,
		|	ИСТИНА КАК РучноеИзменениеРеквизитовБанка
		|ИЗ
		|	БанкиСчетовКОбработке КАК БанкиСчетовКОбработке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|		ПО БанкиСчетовКОбработке.Банк = КлассификаторБанков.Ссылка
		|			И (КлассификаторБанков.Страна <> &ОсновнаяСтрана)
		|			И (КлассификаторБанков.Страна <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлассификаторБанков.Ссылка КАК Банк,
		|	РеквизитыБанковВСчетах.БИК КАК БИК,
		|	РеквизитыБанковВСчетах.СВИФТ КАК СВИФТ,
		|	РеквизитыБанковВСчетах.КоррСчет КАК КоррСчет
		|ИЗ
		|	РеквизитыБанковВСчетах КАК РеквизитыБанковВСчетах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|		ПО РеквизитыБанковВСчетах.БИК = КлассификаторБанков.Код
		|			И РеквизитыБанковВСчетах.СВИФТ = КлассификаторБанков.СВИФТБИК
		|			И РеквизитыБанковВСчетах.КоррСчет = КлассификаторБанков.КоррСчет
		|			И НЕ КлассификаторБанков.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ОсновнаяСтрана", Константы.ОсновнаяСтрана.Получить());
		Запрос.УстановитьПараметр("Ссылка", ВыбранныеДанные.ВыгрузитьКолонку("Ссылка"));
		
		ПакетЗапросов = Запрос.ВыполнитьПакет();
		РеквизитыБанков = ПакетЗапросов[ПакетЗапросов.ВГраница() - 1].Выгрузить();
		СписокБанков = ПакетЗапросов[ПакетЗапросов.ВГраница()].Выгрузить();
		
		РеквизитыБанков.Индексы.Добавить("Банк");
		СписокБанков.Индексы.Добавить("БИК, СВИФТ, КоррСчет");
		
		ПодобиеРеквизитовБанка = ДенежныеСредстваСервер.РавнозначностьРеквизитовБанкаПоСправочнику();
		ПодобиеРеквизитовБанкаДляРасчетов = ДенежныеСредстваСервер.РавнозначностьРеквизитовБанкаДляРасчетовПоСправочнику();
						
		Для Каждого ТекущийСчет Из ВыбранныеДанные Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Записать = Ложь;
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.БанковскиеСчетаКонтрагентов");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущийСчет.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				СправочникОбъект = ТекущийСчет.Ссылка.ПолучитьОбъект();
				
				Если СправочникОбъект <> Неопределено Тогда
					
					Если ЗначениеЗаполнено(СправочникОбъект.Банк) Тогда
						
						РеквизитыБанка = РеквизитыБанков.Найти(СправочникОбъект.Банк, "Банк");
						
						Если РеквизитыБанка <> Неопределено Тогда
							Записать = ДенежныеСредстваСервер.РеквизитыБанкаИзменены(СправочникОбъект, ПодобиеРеквизитовБанка, РеквизитыБанка);
							СправочникОбъект.Банк = Справочники.КлассификаторБанков.ПустаяСсылка();
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СправочникОбъект.БанкДляРасчетов) Тогда
					
						РеквизитыБанкаДляРасчетов = РеквизитыБанков.Найти(СправочникОбъект.БанкДляРасчетов, "Банк");
						
						Если РеквизитыБанкаДляРасчетов <> Неопределено Тогда
							Записать = ДенежныеСредстваСервер.РеквизитыБанкаИзменены(СправочникОбъект, ПодобиеРеквизитовБанкаДляРасчетов, РеквизитыБанкаДляРасчетов);
							СправочникОбъект.БанкДляРасчетов = Справочники.КлассификаторБанков.ПустаяСсылка();
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СправочникОбъект.Банк)
						И (СправочникОбъект.БИКБанка <> ""
						ИЛИ СправочникОбъект.СВИФТБанка <> "") Тогда
						
						Отбор = Новый Структура;
						Отбор.Вставить("БИК", СправочникОбъект.БИКБанка);
						Отбор.Вставить("СВИФТ", СправочникОбъект.СВИФТБанка);
						Отбор.Вставить("КоррСчет", СправочникОбъект.КоррСчетБанка);
						СсылкаБанка = СписокБанков.НайтиСтроки(Отбор);
						
						Если СсылкаБанка.Количество() <> 0 Тогда
							СправочникОбъект.Банк = СсылкаБанка[0].Банк;
							СправочникОбъект.РучноеИзменениеРеквизитовБанка = Ложь;
							Записать = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СправочникОбъект.БанкДляРасчетов)
						И (СправочникОбъект.БИКБанкаДляРасчетов <> ""
						ИЛИ СправочникОбъект.СВИФТБанкаДляРасчетов <> "")Тогда
					
						Отбор = Новый Структура;
						Отбор.Вставить("БИК", СправочникОбъект.БИКБанкаДляРасчетов);
						Отбор.Вставить("СВИФТ", СправочникОбъект.СВИФТБанкаДляРасчетов);
						Отбор.Вставить("КоррСчет", СправочникОбъект.КоррСчетБанкаДляРасчетов);
						СсылкаБанкаДляРасчетов = СписокБанков.НайтиСтроки(Отбор);
						
						Если СсылкаБанкаДляРасчетов.Количество() <> 0 Тогда
							СправочникОбъект.БанкДляРасчетов = СсылкаБанкаДляРасчетов[0].Банк;
							СправочникОбъект.РучноеИзменениеРеквизитовБанкаДляРасчетов = Ложь;
							Записать = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Записать Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТекущийСчет.Ссылка);
				КонецЕсли;
				
				ОбъектовОбработано = ОбъектовОбработано + 1;
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ТекущийСчет.Ссылка);
				
			КонецПопытки;
		
		КонецЦикла;
		
	КонецЕсли;

	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, "Справочник.БанковскиеСчетаКонтрагентов");
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Не удалось заполнить реквизиты банков в справочнике ""Банковские счета контрагентов"" (пропущены): %1';
								|en = 'Cannot fill the bank details in the ""Counterparty bank accounts"" catalog (skipped): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		ШаблонСообщения = НСтр("ru = 'Обработана порция банковских счетов контрагентов: %1';
								|en = 'A batch of counterparty bank accounts is processed: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация, , ,
			ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ВалютаДенежныхСредств");
	Результат.Добавить("Владелец");
	Результат.Добавить("ИностранныйБанк; ИностранныйБанк");
	Результат.Добавить("ОтдельныйСчетГОЗ");
	Результат.Добавить("ГосударственныйКонтракт");
	
	Возврат Результат;
	
КонецФункции

Функция ПечатьРеквизитовСчета(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеквизитыБанковскогоСчетаКонтрагента";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщиеМакеты.ПФ_MXL_РеквизитыСчета");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПечати();
	Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектов);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПервыйЭлемент = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщиеМакеты.ПФ_MXL_РеквизитыСчета");
		
		Если ПервыйЭлемент Тогда
			ПервыйЭлемент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		Если Выборка.ЭтоIBAN Тогда
			ВывестиРеквизитыIBAN(Выборка, Макет, ТабличныйДокумент);
		Иначе
			ВывестиРеквизиты(Выборка, Макет, ТабличныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиРеквизиты(Выборка, Макет, ТабличныйДокумент)
	
	Область = Макет.ПолучитьОбласть("Шапка");
	ТабличныйДокумент.Вывести(Область);
	
	НациональныеРеквизитыБанковскихСчетов = ПолучитьФункциональнуюОпцию("НациональныеРеквизитыБанковскихСчетов");
	МеждународныеРеквизитыБанковскихСчетов = ПолучитьФункциональнуюОпцию("МеждународныеРеквизитыБанковскихСчетов");
	
	Если ЗначениеЗаполнено(Выборка.БанкДляРасчетов)
		Или ЗначениеЗаполнено(Выборка.БИКБанкаДляРасчетов)
		Или ЗначениеЗаполнено(Выборка.СВИФТБанкаДляРасчетов) Тогда
		ИспользуетсяБанкДляРасчетов = Истина;
	Иначе
		ИспользуетсяБанкДляРасчетов = Ложь;
	КонецЕсли;

	Если НациональныеРеквизитыБанковскихСчетов Тогда
		ЗаполнитьНациональныеРеквизиты(ИспользуетсяБанкДляРасчетов, Макет, Выборка, ТабличныйДокумент);
	КонецЕсли;
	
	Если МеждународныеРеквизитыБанковскихСчетов Тогда
		ЗаполнитьМеждународныеРеквизиты(ИспользуетсяБанкДляРасчетов, Макет, Выборка, ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМеждународныеРеквизиты(ИспользуетсяБанкДляРасчетов, Макет, Выборка, ТабличныйДокумент)
	
	Если ИспользуетсяБанкДляРасчетов Тогда
		Область = Макет.ПолучитьОбласть("МеждународныеРеквизитыНепрямыеРасчеты");
	Иначе
		Область = Макет.ПолучитьОбласть("МеждународныеРеквизиты");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, Выборка);
	
	ЧастиАдреса = Новый Массив;
	Если Выборка.РучноеИзменениеРеквизитовБанка Тогда
		Банк = Выборка.НаименованиеБанкаМеждународное;
		SWIFT = Выборка.СВИФТБанка;
		Если ЗначениеЗаполнено(Выборка.СтранаБанкаМеждународноеНаименование) Тогда
			ЧастиАдреса.Добавить(Выборка.СтранаБанкаМеждународноеНаименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ГородБанкаМеждународный) Тогда
			ЧастиАдреса.Добавить(Выборка.ГородБанкаМеждународный);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.АдресБанкаМеждународный) Тогда
			ЧастиАдреса.Добавить(Выборка.АдресБанкаМеждународный);
		КонецЕсли;
	Иначе
		Банк = Выборка.БанкМеждународноеНаименование;
		SWIFT = Выборка.БанкСВИФТБИК;
		Если ЗначениеЗаполнено(Выборка.БанкСтранаМеждународноеНаименование) Тогда
			ЧастиАдреса.Добавить(Выборка.БанкСтранаМеждународноеНаименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.БанкГородМеждународный) Тогда
			ЧастиАдреса.Добавить(Выборка.БанкГородМеждународный);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.БанкАдресМеждународный) Тогда
			ЧастиАдреса.Добавить(Выборка.БанкАдресМеждународный);
		КонецЕсли;
	КонецЕсли;
	Область.Параметры.МеждународноеНаименованиеБанка = Банк;
	Область.Параметры.SWIFT = SWIFT;
	Область.Параметры.АдресБанкаМеждународный = СтрСоединить(ЧастиАдреса, " ,");
	
	Если ИспользуетсяБанкДляРасчетов Тогда
		ЧастиАдреса = Новый Массив;
		Если Выборка.РучноеИзменениеРеквизитовБанкаДляРасчетов Тогда
			БанкДляРасчетов = Выборка.НаименованиеБанкаДляРасчетовМеждународное;
			SWIFTБанкаДляРасчетов = Выборка.СВИФТБанкаДляРасчетов;
			Если ЗначениеЗаполнено(Выборка.СтранаБанкаДляРасчетовМеждународноеНаименование) Тогда
				ЧастиАдреса.Добавить(Выборка.СтранаБанкаДляРасчетовМеждународноеНаименование);
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ГородБанкаДляРасчетовМеждународный) Тогда
				ЧастиАдреса.Добавить(Выборка.ГородБанкаДляРасчетовМеждународный);
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.АдресБанкаДляРасчетовМеждународный) Тогда
				ЧастиАдреса.Добавить(Выборка.АдресБанкаДляРасчетовМеждународный);
			КонецЕсли;
		Иначе
			БанкДляРасчетов = Выборка.БанкДляРасчетовМеждународноеНаименование;
			SWIFTБанкаДляРасчетов = Выборка.БанкДляРасчетовСВИФТБИК;
			Если ЗначениеЗаполнено(Выборка.БанкДляРасчетовСтранаМеждународноеНаименование) Тогда
				ЧастиАдреса.Добавить(Выборка.БанкДляРасчетовСтранаМеждународноеНаименование);
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.БанкДляРасчетовГородМеждународный) Тогда
				ЧастиАдреса.Добавить(Выборка.БанкДляРасчетовГородМеждународный);
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.БанкДляРасчетовАдресМеждународный) Тогда
				ЧастиАдреса.Добавить(Выборка.БанкДляРасчетовАдресМеждународный);
			КонецЕсли;
		КонецЕсли;
		Область.Параметры.БанкДляРасчетовМеждународный = БанкДляРасчетов;
		Область.Параметры.SWIFTБанкаДляРасчетов = SWIFTБанкаДляРасчетов;
		Область.Параметры.АдресБанкаДляРасчетовМеждународный = СтрСоединить(ЧастиАдреса, " ,");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Область);

КонецПроцедуры

Процедура ЗаполнитьНациональныеРеквизиты(ИспользуетсяБанкДляРасчетов, Макет, Выборка, ТабличныйДокумент)

	Если ИспользуетсяБанкДляРасчетов Тогда
		Область = Макет.ПолучитьОбласть("НациональныеРеквизитыНепрямыеРасчеты");
	Иначе
		Область = Макет.ПолучитьОбласть("НациональныеРеквизиты");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, Выборка);
	
	Если ЗначениеЗаполнено(Выборка.ТекстКорреспондента) Тогда
		Получатель = Выборка.ТекстКорреспондента
	Иначе
		Получатель = Выборка.ВладелецНаименованиеПолное;
	КонецЕсли;
	Область.Параметры.Получатель = Получатель;
	
	Если ЗначениеЗаполнено(Выборка.ИННКорреспондента) Тогда
		ИНН = Выборка.ИННКорреспондента
	Иначе
		ИНН = Выборка.ИНН;
	КонецЕсли;
	Область.Параметры.ИНН = ИНН;
	
	Если Выборка.РучноеИзменениеРеквизитовБанка Тогда
		Банк = Выборка.НаименованиеБанка;
		БИК = Выборка.БИКБанка
	Иначе
		Банк = Выборка.БанкНаименование;
		БИК = Выборка.БанкКод
	КонецЕсли;
	Область.Параметры.Банк = Банк;
	Область.Параметры.БИК = БИК;
	
	Если ИспользуетсяБанкДляРасчетов Тогда
		Если Выборка.РучноеИзменениеРеквизитовБанкаДляРасчетов Тогда
			БанкДляРасчетов = Выборка.НаименованиеБанкаДляРасчетов;
			БИКБанкаДляРасчетов = Выборка.БИКБанкаДляРасчетов
		Иначе
			БанкДляРасчетов = Выборка.БанкДляРасчетовНаименование;
			БИКБанкаДляРасчетов = Выборка.БанкДляРасчетовКод
		КонецЕсли;
		Область.Параметры.БанкКорреспондент = БанкДляРасчетов;
		Область.Параметры.БИКБанкаКорреспондента = БИКБанкаДляРасчетов;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

Процедура ВывестиРеквизитыIBAN(Выборка, Макет, ТабличныйДокумент)
	
	CAC = Сред(Выборка.НомерСчета, 5);
	IBANPaper = "IBAN";
	НомерСчета = Выборка.НомерСчета;
	Пока СтрДлина(НомерСчета) > 0 Цикл
		IBANPaper = IBANPaper + " " + Сред(НомерСчета, 1, 4);
		НомерСчета = Сред(НомерСчета, 5);
	КонецЦикла;
	
	Если Выборка.РучноеИзменениеРеквизитовБанка Тогда
		SWIFT = Выборка.СВИФТБанка
	Иначе
		SWIFT = Выборка.БанкСВИФТБИК
	КонецЕсли;
		
	Область = Макет.ПолучитьОбласть("IBAN");
	
	Область.Параметры.CAC = CAC;
	Область.Параметры.IBAN = Выборка.НомерСчета;
	Область.Параметры.IBANPaper = IBANPaper;
	Область.Параметры.SWIFT = SWIFT;
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

Функция ТекстЗапросаПечати()
	
	Возврат
	"ВЫБРАТЬ
	|	БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК ТекстКорреспондента,
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеПолное КАК ВладелецНаименованиеПолное,
	|	БанковскиеСчетаКонтрагентов.Владелец.ИНН КАК ИНН,
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаКонтрагентов.Банк.Наименование КАК БанкНаименование,
	|	БанковскиеСчетаКонтрагентов.Банк.МеждународноеНаименование КАК БанкМеждународноеНаименование,
	|	БанковскиеСчетаКонтрагентов.Банк.Код КАК БанкКод,
	|	БанковскиеСчетаКонтрагентов.КоррСчетБанка КАК КоррСчетБанка,
	|	БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка КАК РучноеИзменениеРеквизитовБанка,
	|	БанковскиеСчетаКонтрагентов.БИКБанка КАК БИКБанка,
	|	БанковскиеСчетаКонтрагентов.КоррСчетБанка КАК КоррСчетБанкаВСчете,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов КАК БанкДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.БИКБанкаДляРасчетов КАК БИКБанкаДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.СВИФТБанкаДляРасчетов КАК СВИФТБанкаДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеМеждународное КАК МеждународноеНаименованиеПолучателя,
	|	БанковскиеСчетаКонтрагентов.НаименованиеБанка КАК НаименованиеБанка,
	|	БанковскиеСчетаКонтрагентов.НаименованиеБанкаМеждународное КАК НаименованиеБанкаМеждународное,
	|	БанковскиеСчетаКонтрагентов.АдресБанкаМеждународный КАК АдресБанкаМеждународный,
	|	БанковскиеСчетаКонтрагентов.Банк.АдресМеждународный КАК БанкАдресМеждународный,
	|	БанковскиеСчетаКонтрагентов.Банк.СВИФТБИК КАК БанкСВИФТБИК,
	|	БанковскиеСчетаКонтрагентов.СВИФТБанка КАК СВИФТБанка,
	|	БанковскиеСчетаКонтрагентов.НаименованиеБанкаДляРасчетовМеждународное КАК НаименованиеБанкаДляРасчетовМеждународное,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.МеждународноеНаименование КАК БанкДляРасчетовМеждународноеНаименование,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.АдресМеждународный КАК БанкДляРасчетовАдресМеждународный,
	|	БанковскиеСчетаКонтрагентов.Банк.Страна КАК БанкСтрана,
	|	БанковскиеСчетаКонтрагентов.СтранаБанка КАК СтранаБанка,
	|	БанковскиеСчетаКонтрагентов.СтранаБанкаДляРасчетов КАК СтранаБанкаДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК ЭтоIBAN,
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК Ссылка,
	|	БанковскиеСчетаКонтрагентов.НаименованиеБанкаДляРасчетов КАК НаименованиеБанкаДляРасчетов,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Наименование КАК БанкДляРасчетовНаименование,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Код КАК БанкДляРасчетовКод,
	|	БанковскиеСчетаКонтрагентов.ГородБанкаМеждународный КАК ГородБанкаМеждународный,
	|	БанковскиеСчетаКонтрагентов.Банк.ГородМеждународный КАК БанкГородМеждународный,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.СВИФТБИК КАК БанкДляРасчетовСВИФТБИК,
	|	БанковскиеСчетаКонтрагентов.СтранаБанка.МеждународноеНаименование КАК СтранаБанкаМеждународноеНаименование,
	|	БанковскиеСчетаКонтрагентов.СтранаБанкаДляРасчетов.МеждународноеНаименование КАК
	|		СтранаБанкаДляРасчетовМеждународноеНаименование,
	|	БанковскиеСчетаКонтрагентов.Банк.Страна.МеждународноеНаименование КАК БанкСтранаМеждународноеНаименование,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Страна.МеждународноеНаименование КАК
	|		БанкДляРасчетовСтранаМеждународноеНаименование,
	|	БанковскиеСчетаКонтрагентов.ГородБанкаДляРасчетовМеждународный КАК ГородБанкаДляРасчетовМеждународный,
	|	БанковскиеСчетаКонтрагентов.АдресБанкаДляРасчетовМеждународный КАК АдресБанкаДляРасчетовМеждународный,
	|	БанковскиеСчетаКонтрагентов.БанкДляРасчетов.ГородМеждународный КАК БанкДляРасчетовГородМеждународный,
	|	БанковскиеСчетаКонтрагентов.ИННКорреспондента КАК ИННКорреспондента,
	|	БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	БанковскиеСчетаКонтрагентов.Ссылка В (&МассивСсылок)";

КонецФункции

#КонецОбласти

#КонецЕсли
