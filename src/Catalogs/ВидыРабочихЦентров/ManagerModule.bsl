#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Подразделение");
	Результат.Добавить("ИспользуютсяВариантыНаладки");
	Результат.Добавить("ЕдиницаВремениПереналадки");
	Результат.Добавить("ПараллельнаяЗагрузка");
	Результат.Добавить("ЕдиницаИзмеренияЗагрузки");
	Результат.Добавить("ВариантЗагрузки;ВариантЗагрузкиАсинхронный,ВариантЗагрузкиСинхронный1,ВариантЗагрузкиСинхронный2");
	
	Возврат Результат;
	
КонецФункции

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	НеРедактируемыеРеквизиты.Добавить("Подразделение");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Возвращает максимальную доступность видов РЦ в интервале планирования.
//
// Параметры:
//  ВидыРабочихЦентров	 - Массив - ссылки на виды рабочих центров.
// 
// Возвращаемое значение:
//  Соответствие - ключ - ссылка на вид РЦ, значение - максимальная доступность.
//
Функция МаксимальнаяДоступностьВСекундах(ВидыРабочихЦентров) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыРабочихЦентров.Ссылка КАК Ссылка,
		|	ВидыРабочихЦентров.МаксимальнаяДоступностьРЦ КАК МаксимальнаяДоступность,
		|	ВидыРабочихЦентров.ЕдиницаИзмеренияДоступностиРЦ КАК ЕдиницаИзмеренияДоступности,
		|	ВидыРабочихЦентров.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования
		|ИЗ
		|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
		|ГДЕ
		|	ВидыРабочихЦентров.Ссылка В(&Ссылки)");
	
	Запрос.УстановитьПараметр("Ссылки", ВидыРабочихЦентров);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
		
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.МаксимальнаяДоступность) Тогда
			
			Доступность = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
				Выборка.МаксимальнаяДоступность,
				Выборка.ЕдиницаИзмеренияДоступности);
				
		Иначе
			
			Если Выборка.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
				Доступность = 3600;
			ИначеЕсли Выборка.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
				Доступность = 86400;
			ИначеЕсли Выборка.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
				Доступность = 604800;
			ИначеЕсли Выборка.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
				Доступность = 2592000; // 30 дней
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Вставить(Выборка.Ссылка, Доступность);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения реквизитов вида рабочего центра
// 
// Параметры:
// 	ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров,СправочникСсылка.РабочиеЦентры
// 	ВариантНаладки - СправочникСсылка.ВариантыНаладки
// Возвращаемое значение:
// 	См. СтруктураРеквизитовВидаРабочегоЦентра
Функция ЗначенияРеквизитовВидаРабочегоЦентра(ВидРабочегоЦентра, ВариантНаладки = Неопределено) Экспорт
	
	Результат = СтруктураРеквизитовВидаРабочегоЦентра();
	
	Если ЗначениеЗаполнено(ВидРабочегоЦентра) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВидыРабочихЦентров.ИспользуютсяВариантыНаладки      КАК ИспользуютсяВариантыНаладки,
		|	ВидыРабочихЦентров.ПараллельнаяЗагрузка             КАК ПараллельнаяЗагрузка,
		|	ВидыРабочихЦентров.ЕдиницаИзмеренияЗагрузки         КАК ЕдиницаИзмеренияЗагрузки,
		|	ВидыРабочихЦентров.ВариантЗагрузки                  КАК ВариантЗагрузки,
		|	ВЫБОР
		|		КОГДА ВидыРабочихЦентров.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|					И ВидыРабочихЦентров.ИспользуютсяВариантыНаладки
		|			ТОГДА ЕСТЬNULL(ВариантыНаладки.ВремяРаботы, 0)
		|		ИНАЧЕ ВидыРабочихЦентров.ВремяРаботы
		|	КОНЕЦ                                               КАК ВремяРаботы,
		|	ВЫБОР
		|		КОГДА ВидыРабочихЦентров.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|					И ВидыРабочихЦентров.ИспользуютсяВариантыНаладки
		|			ТОГДА ЕСТЬNULL(ВариантыНаладки.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка))
		|		ИНАЧЕ ВидыРабочихЦентров.ЕдиницаИзмерения
		|	КОНЕЦ                                               КАК ЕдиницаИзмерения
		|
		|ИЗ
		|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыНаладки КАК ВариантыНаладки
		|		ПО ВариантыНаладки.Владелец = ВидыРабочихЦентров.Ссылка
		|			И ВариантыНаладки.Ссылка = &ВариантНаладки
		|
		|ГДЕ
		|	ВидыРабочихЦентров.Ссылка = &ВидРабочегоЦентра
		|		ИЛИ ИСТИНА В (
		|				ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					Справочник.РабочиеЦентры КАК Т
		|				ГДЕ
		|					Т.Ссылка= &ВидРабочегоЦентра
		|					И Т.ВидРабочегоЦентра = ВидыРабочихЦентров.Ссылка)
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидРабочегоЦентра", ВидРабочегоЦентра);
		Запрос.УстановитьПараметр("ВариантНаладки",    ВариантНаладки);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру реквизитов вида рабочего центра
//
// Возвращаемое значение:
//  Структура - содержит:
//   * ИспользуютсяВариантыНаладки - Булево
//   * ПараллельнаяЗагрузка - Булево
//   * ВремяРаботы - Число
//   * ЕдиницаИзмерения - ПеречислениеСсылка.ЕдиницыИзмеренияВремени
//   * ВариантЗагрузки - ПеречислениеСсылка.ВариантыЗагрузкиРабочихЦентров
//   * ЕдиницаИзмеренияЗагрузки - Строка
Функция СтруктураРеквизитовВидаРабочегоЦентра()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИспользуютсяВариантыНаладки", Ложь);
	Результат.Вставить("ПараллельнаяЗагрузка",        Ложь);
	
	Результат.Вставить("ВремяРаботы",                 0);
	Результат.Вставить("ЕдиницаИзмерения",            Перечисления.ЕдиницыИзмеренияВремени.ПустаяСсылка());
	
	Результат.Вставить("ВариантЗагрузки",             Перечисления.ВариантыЗагрузкиРабочихЦентров.ПустаяСсылка());
	Результат.Вставить("ЕдиницаИзмеренияЗагрузки",    "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли