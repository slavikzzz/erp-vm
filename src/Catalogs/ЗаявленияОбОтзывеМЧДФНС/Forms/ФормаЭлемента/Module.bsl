&НаКлиенте
Перем КонтекстЭДОКлиент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	Если ЭтоНовый Тогда
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
				Объект.Организация = Параметры.Организация;
				Объект.Доверитель = Параметры.Организация;
				ПодставитьРеквизитыДоверителя(ЭтаФорма);
				
			Иначе
				УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
				Элементы.Доверитель.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
				
				ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
				
				КонтекстЭДОСервер = КонтекстЭДОСервер();
				
				Если ЗначениеЗаполнено(ОргПоУмолчанию)
					И ?(КонтекстЭДОСервер = Неопределено, Истина,
					КонтекстЭДОСервер.СписокДопустимыхОрганизацийВОбъектахОбмена().Найти(ОргПоУмолчанию) <> Неопределено)
					И ((ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ УчетПоВсемОрганизациям)
					ИЛИ (НЕ ЗначениеЗаполнено(Объект.Организация) И УчетПоВсемОрганизациям
					И (ЗначениеЗаполнено(ОргПоУмолчанию)))) Тогда
					
					Объект.Организация = ОргПоУмолчанию;
					Объект.Доверитель = ОргПоУмолчанию;
					ПодставитьРеквизитыДоверителя(ЭтаФорма);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СведенияОВерсииФормата = ДокументооборотСКОВызовСервера.СведенияОВерсииФорматаЗаявленияОбОтзывеМЧДФНС();
		Объект.ВерсияФормата 	= СведенияОВерсииФормата.ВерсияФормата;
		ОтправкаРазрешена 		= СведенияОВерсииФормата.ОтправкаРазрешена;
		
		ЗаполнитьНаОснованииДоверенности(Параметры.Доверенность);
	КонецЕсли;
	
	УведомлениеОтправлено = УведомлениеОтправлено(Объект.Ссылка);
	
	Инициализация(ЭтоНовый);
	
	УправлениеФормой(ЭтаФорма);
	ПрорисоватьСтатус(ЭтаФорма);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииПослеПолученияКонтекстаЭДО", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗаявлениеОбОтзывеМЧДФНС",, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьСтатусОтправкиУведомления();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ЗначениеЗаполнено(Объект.Доверитель) И ИмяСобытия = "Запись_Организации"
		И (Параметр = Объект.Доверитель ИЛИ Источник = Объект.Доверитель) Тогда
		
		ПодставитьРеквизитыДоверителя(ЭтаФорма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЛицоБезДовЮЛ) И (ИмяСобытия = "Запись_Организации"
		ИЛИ ИмяСобытия = "Запись_Контрагенты" ИЛИ ИмяСобытия = "Запись_Контрагента")
		И (Параметр = Объект.ЛицоБезДовЮЛ ИЛИ Источник = Объект.ЛицоБезДовЮЛ) Тогда
		
		ПодставитьРеквизитыЛицаБезДоверенностиЮЛ();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЛицоБезДовФЛ) И (ИмяСобытия = "Запись_Контрагенты"
		ИЛИ ИмяСобытия = "Запись_Контрагента" ИЛИ ИмяСобытия = "Запись_ФизическиеЛица"
		ИЛИ ИмяСобытия = "Запись_ВладельцаИлиБухгалтера")
		И (Параметр = Объект.ЛицоБезДовФЛ ИЛИ Источник = Объект.ЛицоБезДовФЛ) Тогда
		
		ПодставитьРеквизитыЛицаБезДоверенностиФЛ();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ ЗначениеЗаполнено(Объект.ДатаВыдачи) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена дата выдачи",,
					"ДатаВыдачи");	
				
		Отказ = Истина;
	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДоверительПриИзменении(Элемент)
	
	ПодставитьРеквизитыДоверителя(ЭтаФорма);
	
	Если НЕ ПодписьЗагружена И ТипЗнч(Объект.Доверитель) = Тип("Строка") Тогда
		Объект.ДоверительЮЛ_НаимОрг = Объект.Доверитель;
		ВвестиРеквизитыДоверителя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверительОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ПодписьЗагружена ИЛИ ТипОтправителя <> "1" Тогда
		Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	КонецЕсли;
	
	Если ПодписьЗагружена Тогда
		Возврат;
	КонецЕсли;
	
	Доверитель_ЮридическоеЛицо 					= Истина;
	Объект.ДоверительЮЛ_ИностраннаяОрганизация 	= Ложь;
	Объект.ДоверительЮЛ_НаимОрг 				= "";
	Объект.ДоверительЮЛ_ИНН 					= "";
	Объект.ДоверительЮЛ_КПП 					= "";
	Объект.ДоверительЮЛ_ОГРН 					= "";
	Объект.ДоверительЮЛ_НаимРегОрг 				= "";
	Объект.ДоверительЮЛ_РегНомер 				= "";
	Объект.ДоверительЮЛ_КодНПРег 				= "";
	
	ОбновитьПредставителей(ЭтаФорма);
	
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
	КоличествоСтрокФИО = СтрокиФИО.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокФИО Цикл
		Объект.ФИО.Удалить(СтрокиФИО[КоличествоСтрокФИО - НомерСКонца]);
	КонецЦикла;
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
	КоличествоСтрокФИО = СтрокиФИО.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокФИО Цикл
		Объект.ФИО.Удалить(СтрокиФИО[КоличествоСтрокФИО - НомерСКонца]);
	КонецЦикла;
	
	СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
	КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокУдостоверений Цикл
		Объект.УдостоверенияЛичности.Удалить(СтрокиУдостоверений[КоличествоСтрокУдостоверений - НомерСКонца]);
	КонецЦикла;
	СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
	КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокУдостоверений Цикл
		Объект.УдостоверенияЛичности.Удалить(СтрокиУдостоверений[КоличествоСтрокУдостоверений - НомерСКонца]);
	КонецЦикла;
	
	Объект.ДоверительФЛ_ИНН 			= "";
	Объект.ДоверительФЛ_НомЕРН 			= "";
	Объект.ДоверительФЛ_ОГРН 			= "";
	Объект.ДоверительФЛ_СНИЛС 			= "";
	Объект.ДоверительФЛ_Гражданство 	= ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
	Объект.ДоверительФЛ_ДатаРождения 	= Неопределено;
	
	Объект.ЛицоБезДовЮЛ 		= Неопределено;
	Объект.ЛицоБезДовЮЛ_НаимОрг = "";
	Объект.ЛицоБезДовЮЛ_ИНН 	= "";
	Объект.ЛицоБезДовЮЛ_КПП 	= "";
	Объект.ЛицоБезДовЮЛ_ОГРН 	= "";
	
	Объект.ЛицоБезДовФЛ 				= Неопределено;
	Объект.ЛицоБезДовФЛ_ИНН 			= "";
	Объект.ЛицоБезДовФЛ_НомЕРН 			= "";
	Объект.ЛицоБезДовФЛ_ОГРН 			= "";
	Объект.ЛицоБезДовФЛ_СНИЛС 			= "";
	Объект.ЛицоБезДовФЛ_Гражданство 	= ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
	Объект.ЛицоБезДовФЛ_ДатаРождения 	= Неопределено;
	Объект.ЛицоБезДовФЛ_Должность 		= "";
	
	Объект.КодНалоговогоОрганаПредставления = "";
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыДоверителяНажатие(Элемент)
	
	ВвестиРеквизитыДоверителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицоБезДовЮЛПриИзменении(Элемент)
	
	ПодставитьРеквизитыЛицаБезДоверенностиЮЛ();
	
	Если НЕ ПодписьЗагружена И ТипЗнч(Объект.ЛицоБезДовЮЛ) = Тип("Строка") Тогда
		Объект.ЛицоБезДовЮЛ_НаимОрг = Объект.ЛицоБезДовЮЛ;
		ВвестиРеквизитыЛицаБезДоверенностиЮЛ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицоБезДовЮЛОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ЛицоБезДовЮЛ_НаимОрг = "";
	Объект.ЛицоБезДовЮЛ_ИНН 	= "";
	Объект.ЛицоБезДовЮЛ_КПП 	= "";
	Объект.ЛицоБезДовЮЛ_ОГРН 	= "";
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыЛицаБезДоверенностиЮЛНажатие(Элемент)
	
	ВвестиРеквизитыЛицаБезДоверенностиЮЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицоБезДовФЛПриИзменении(Элемент)
	
	ПодставитьРеквизитыЛицаБезДоверенностиФЛ();
	
	Если НЕ ПодписьЗагружена И ТипЗнч(Объект.ЛицоБезДовФЛ) = Тип("Строка") Тогда
		СтруктураФИО = ДокументооборотСКОВызовСервера.РазложитьФИО(Объект.ЛицоБезДовФЛ);
		
		СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
		КоличествоСтрокФИО = СтрокиФИО.Количество();
		Если КоличествоСтрокФИО = 0 Тогда
			СтрокаФИО = Объект.ФИО.Добавить();
			СтрокаФИО.Владелец = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук");
		Иначе
			СтрокаФИО = СтрокиФИО[0];
		КонецЕсли;
		СтрокаФИО.Фамилия 	= СокрЛП(СтруктураФИО.Фамилия);
		СтрокаФИО.Имя 		= СокрЛП(СтруктураФИО.Имя);
		СтрокаФИО.Отчество 	= СокрЛП(СтруктураФИО.Отчество);
		
		ВвестиРеквизитыЛицаБезДоверенностиФЛ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицоБезДовФЛОчистка(Элемент, СтандартнаяОбработка)
	
	ЭтоВерсия5_02 = ЗначениеЗаполнено(Объект.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Объект.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
	КоличествоСтрокФИО = СтрокиФИО.Количество();
	Для НомерСКонца = 1 По КоличествоСтрокФИО Цикл
		Объект.ФИО.Удалить(СтрокиФИО[КоличествоСтрокФИО - НомерСКонца]);
	КонецЦикла;
	
	Если ЭтоВерсия5_02 Тогда
		СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
		КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
		Для НомерСКонца = 1 По КоличествоСтрокУдостоверений Цикл
			Объект.УдостоверенияЛичности.Удалить(СтрокиУдостоверений[КоличествоСтрокУдостоверений - НомерСКонца]);
		КонецЦикла;
	КонецЕсли;
	
	Объект.ЛицоБезДовФЛ 				= Неопределено;
	Объект.ЛицоБезДовФЛ_ИНН 			= "";
	Объект.ЛицоБезДовФЛ_НомЕРН 			= "";
	Объект.ЛицоБезДовФЛ_ОГРН 			= "";
	Объект.ЛицоБезДовФЛ_СНИЛС 			= "";
	Объект.ЛицоБезДовФЛ_Гражданство 	= ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
	Объект.ЛицоБезДовФЛ_ДатаРождения 	= Неопределено;
	Объект.ЛицоБезДовФЛ_Должность 		= "";
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыЛицаБезДоверенностиФЛНажатие(Элемент)
	
	ВвестиРеквизитыЛицаБезДоверенностиФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаПредставленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОчиститьСообщения();
		Если НЕ ЗначениеЗаполнено(Объект.Доверитель) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите доверителя из справочника ""Организации""';
															|en = 'Выберите доверителя из справочника ""Организации""'"),, "Доверитель");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП",
		Объект.КодНалоговогоОрганаПредставления, ?(ПодписьЗагружена, Объект.ДоверительЮЛ_КПП, "")));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
		"ФормаВыбораНалоговогоОргана",
		ПараметрыФормы,
		ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КодНалоговогоОрганаПредставленияНачалоВыбораПослеВвода", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Код налогового органа необходимо задать в справочнике ""Организации""';
				|en = 'Код налогового органа необходимо задать в справочнике ""Организации""'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьИлиИзменитьПредставителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредставителиПередУдалением(Элемент, Отказ)
	ОТказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредставители

&НаКлиенте
Процедура ПредставителиПредставительИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Представители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПредставителей = Объект.Представители.НайтиСтроки(Новый Структура("Идентификатор",
		ТекущиеДанные.Идентификатор));
	Для каждого СтрокаПредставителя Из СтрокиПредставителей Цикл
		СтрокаПредставителя.ПредставительИспользуется = ТекущиеДанные.ПредставительИспользуется;
	КонецЦикла;
	ОбновитьПредставителиПредставление(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отправить(Команда)
	
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ПодписьЗагружена Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите доверителя из справочника ""Организации""';
															|en = 'Выберите доверителя из справочника ""Организации""'"),,
				"Доверитель");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПослеПодтвержденияПриПредупреждении", ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.ДатаОтзыва)
		И Объект.ДатаОтзыва < НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Дата отзыва доверенности меньше текущей, продолжить отправку?';
				|en = 'Дата отзыва доверенности меньше текущей, продолжить отправку?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПодписьЗагружена Тогда
		РезультатыПроверки = ДокументооборотСКОВызовСервера.ПроверитьЗаявлениеОбОтзывеМЧДФНС(Объект);
		
		Если РезультатыПроверки.Количество() <> 0 Тогда
			Для каждого РезультатПроверки Из РезультатыПроверки Цикл
				ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПроверки.ТекстОшибки,,
					РезультатПроверки.Поле);
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодтвержденияВыгрузкиПодписи", ЭтотОбъект);
	Если ПодписьЗагружена Тогда
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Будут выгружены файлы заявления об отзыве доверенности и подписи доверителя, продолжить?';
				|en = 'Будут выгружены файлы заявления об отзыве доверенности и подписи доверителя, продолжить?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Да);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПослеПодтвержденияВыгрузкиПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДокументооборотСКОКлиент.ПроверитьИЗаписать(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОпределятьКодНалоговогоОрганаПолучателя = Истина;
	ФорматДоверенностиПоПриказуФНС 			= Истина;
	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("ВозвращатьАдресВоВременномХранилище", 	Истина);
	ПараметрыВозврата.Вставить("ВозвращатьИмяФайлаСРасширением", 		Истина);
	ПараметрыВозврата.Вставить("ВозвращатьПриложеннуюПодпись", 			Истина);
	РезультатВыгрузки = ДокументооборотСКОВызовСервера.ВыгрузитьЗаявлениеОбОтзывеМЧДФНС(
		Объект.Ссылка,,,
		ОпределятьКодНалоговогоОрганаПолучателя,
		ФорматДоверенностиПоПриказуФНС,
		Ложь,
		ПараметрыВозврата);
	
	Если ЗначениеЗаполнено(РезультатВыгрузки) Тогда
		ОперацииСФайламиЭДКОКлиент.СохранитьФайлы(РезультатВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьПослеЗагрузки", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.ЗаявленияОбОтзывеМЧДФНС.Форма.ФормаЗагрузкиИзФайла",
		Новый Структура("СсылкаНаДоверенность", Объект.Ссылка),
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru = 'Вы уверены, что уведомление уже зарегистрировано?';
													|en = 'Вы уверены, что уведомление уже зарегистрировано?'"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДобавитьПредставителя(Команда)
	
	Если Объект.Представители.Количество() >= 1 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Может быть указано не более одного представителя. Для отзыва всех представителей машиночитаемой доверенности оставьте список представителей пустым';
										|en = 'Может быть указано не более одного представителя. Для отзыва всех представителей машиночитаемой доверенности оставьте список представителей пустым'"));
		Возврат;
	КонецЕсли;
	
	ДобавитьИлиИзменитьПредставителя(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПредставителя(Команда)
	
	ТекущиеДанные = Элементы.Представители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПредставителей = Объект.Представители.НайтиСтроки(Новый Структура("Идентификатор",
		ТекущиеДанные.Идентификатор));
	Для каждого СтрокаПредставителя Из СтрокиПредставителей Цикл
		Объект.Представители.Удалить(СтрокаПредставителя);
	КонецЦикла;
	ОбновитьПредставителиПредставление(ЭтаФорма);
	
	СтрокиПредставителей = Представители.НайтиСтроки(Новый Структура("Идентификатор",
		ТекущиеДанные.Идентификатор));
	Для каждого СтрокаПредставителя Из СтрокиПредставителей Цикл
		Представители.Удалить(СтрокаПредставителя);
	КонецЦикла;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для каждого СтрокаПредставителя Из Объект.Представители Цикл
		СтрокаПредставителя.ПредставительИспользуется = Истина;
	КонецЦикла;
	
	Для каждого СтрокаПредставителя Из Представители Цикл
		СтрокаПредставителя.ПредставительИспользуется = Истина;
	КонецЦикла;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для каждого СтрокаПредставителя Из Объект.Представители Цикл
		СтрокаПредставителя.ПредставительИспользуется = Ложь;
	КонецЦикла;
	
	Для каждого СтрокаПредставителя Из Представители Цикл
		СтрокаПредставителя.ПредставительИспользуется = Ложь;
	КонецЦикла;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура Инициализация(ЭтоНовый = Истина)
	
	Если ТипЗнч(Объект.Доверитель) <> Тип("Строка") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
		Элементы.Доверитель.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Если ТипЗнч(Объект.ЛицоБезДовЮЛ) <> Тип("Строка") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
		Элементы.ЛицоБезДовЮЛ.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Если ТипЗнч(Объект.ЛицоБезДовФЛ) <> Тип("Строка") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		Элементы.ЛицоБезДовФЛ.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Доверитель_ЮридическоеЛицо = НЕ ЗначениеЗаполнено(Объект.Доверитель)
			И (ЗначениеЗаполнено(Объект.ДоверительЮЛ_НаимОрг) ИЛИ ЗначениеЗаполнено(Объект.ДоверительЮЛ_ИНН)
			ИЛИ (НЕ ЗначениеЗаполнено(Объект.ДоверительФЛ_ИНН) И НЕ ЗначениеЗаполнено(Объект.ДоверительФЛ_СНИЛС)))
		ИЛИ ЗначениеЗаполнено(Объект.Доверитель) И ДокументооборотСКОВызовСервера.ЭтоЮридическоеЛицо(Объект.Доверитель);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ИмяФайлаВыгрузки) Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "ФайлВырузки, ЭлектроннаяПодпись");
		ПодписьЗагружена = (РеквизитыОбъекта.ФайлВырузки.Получить() <> Неопределено
			И РеквизитыОбъекта.ЭлектроннаяПодпись.Получить() <> Неопределено);
	Иначе
		ПодписьЗагружена = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ТипОтправителя = ?(Объект.Организация = Объект.Доверитель, "0", "1");
	Иначе
		ТипОтправителя = ?(ПодписьЗагружена, "1", "0");
	КонецЕсли;
	
	ЭтоВерсия5_02 = ЗначениеЗаполнено(Объект.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Объект.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	Если НЕ ЭтоНовый Тогда
		ОтправкаРазрешена = ДокументооборотСКОВызовСервера.СведенияОВерсииФорматаЗаявленияОбОтзывеМЧДФНС(
			Истина, Объект.ВерсияФормата).ОтправкаРазрешена;
	КонецЕсли;
	
	Если ЭтоВерсия5_02 Тогда
		Для каждого СтрокаПредставителя Из Объект.Представители Цикл
			ВставитьПредставителяВТаблицу(ЭтаФорма, СтрокаПредставителя);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрорисоватьСтатус(Форма)
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(
		Форма.Объект.Ссылка,
		Форма.Объект.Организация,
		"ФНС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(
		Форма,
		ПараметрыПрорисовкиПанелиОтправки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ТолькоПросмотрФормы = Форма.УведомлениеОтправлено ИЛИ Форма.ПодписьЗагружена;
	
	ЭтоВерсия5_02 = ЗначениеЗаполнено(Форма.Объект.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Форма.Объект.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	
	Форма.Элементы.Отправить.Видимость = НЕ Форма.УведомлениеОтправлено И Форма.ОтправкаРазрешена;
	Форма.Элементы.Записать.ТолькоВоВсехДействиях = Форма.УведомлениеОтправлено;
	Форма.Элементы.Загрузить.Видимость = НЕ Форма.УведомлениеОтправлено;
	
	Если НЕ ЭтоВерсия5_02 Тогда
		Форма.Элементы.ДекорацияНомер.Заголовок = НСтр("ru = 'Номер доверенности';
														|en = 'Номер доверенности'") + ":";
	КонецЕсли;
	
	Форма.Элементы.ГруппаЛицоБезДоверенностиЮЛ.Видимость = Форма.Доверитель_ЮридическоеЛицо
		И НЕ Форма.Объект.ДоверительЮЛ_ИностраннаяОрганизация;
	Форма.Элементы.ГруппаЛицоБезДоверенностиФЛ.Видимость = Форма.Доверитель_ЮридическоеЛицо
		И НЕ Форма.Объект.ДоверительЮЛ_ИностраннаяОрганизация;
				
	Форма.Элементы.ГруппаТипОтправителя.Видимость 			= Форма.ПодписьЗагружена;
	
	Форма.Элементы.ДекорацияОтступДоверитель.Видимость				= ЭтоВерсия5_02;
	Форма.Элементы.ГруппаПредставители.Видимость					= ЭтоВерсия5_02;
	Форма.Элементы.ГруппаТаблицаПредставителей.Видимость			= ЭтоВерсия5_02;
	Форма.Элементы.ПредставителиПредставительИспользуется.Видимость =
		НЕ ТолькоПросмотрФормы И ЗначениеЗаполнено(Форма.Объект.РодительскаяДоверенность);
	Форма.Элементы.УстановитьФлажки.Видимость =
		НЕ ТолькоПросмотрФормы И ЗначениеЗаполнено(Форма.Объект.РодительскаяДоверенность);
	Форма.Элементы.СнятьФлажки.Видимость =
		НЕ ТолькоПросмотрФормы И ЗначениеЗаполнено(Форма.Объект.РодительскаяДоверенность);
	ПредставителиКоманднаяПанель = Форма.Элементы.Представители.КоманднаяПанель.ПодчиненныеЭлементы;
	ПредставителиКоманднаяПанель.ДобавитьПредставителя.Видимость =
		НЕ ТолькоПросмотрФормы И НЕ ЗначениеЗаполнено(Форма.Объект.РодительскаяДоверенность);
	ПредставителиКоманднаяПанель.УдалитьПредставителя.Видимость =
		НЕ ТолькоПросмотрФормы И НЕ ЗначениеЗаполнено(Форма.Объект.РодительскаяДоверенность);
	Форма.Элементы.ДекорацияТаблицаПредставителей.ОтображениеПодсказки =
		?(ЗначениеЗаполнено(Форма.Объект.РодительскаяДоверенность),
		ОтображениеПодсказки.Нет, ОтображениеПодсказки.Кнопка);
	
	Форма.Элементы.РодительскаяДоверенность.ТолькоПросмотр 				= ТолькоПросмотрФормы;
	Форма.Элементы.РегистрационныйНомерДоверенности.ТолькоПросмотр 		= ТолькоПросмотрФормы;
	Форма.Элементы.ДоверенностьВыданаВПорядкеПередоверия.ТолькоПросмотр = ТолькоПросмотрФормы;
	Форма.Элементы.НомерДоверенности.ТолькоПросмотр 					= ТолькоПросмотрФормы;
	Форма.Элементы.НомерДоверенности.ТолькоПросмотр 					= ТолькоПросмотрФормы;
	Форма.Элементы.ДатаВыдачи.ТолькоПросмотр 							= ТолькоПросмотрФормы;
	Форма.Элементы.Доверитель.ТолькоПросмотр 							= Форма.УведомлениеОтправлено;
	Форма.Элементы.ЛицоБезДовЮЛ.ТолькоПросмотр 							= ТолькоПросмотрФормы;
	Форма.Элементы.ЛицоБезДовФЛ.ТолькоПросмотр 							= ТолькоПросмотрФормы;
	Форма.Элементы.Представители.ПоложениеКоманднойПанели 				= ?(ТолькоПросмотрФормы,
																		  ПоложениеКоманднойПанелиЭлементаФормы.Нет,
																		  ПоложениеКоманднойПанелиЭлементаФормы.Авто);
	Форма.Элементы.КодНалоговогоОрганаПредставления.ТолькоПросмотр 		= ТолькоПросмотрФормы;
	Форма.Элементы.НомерРодительскойДоверенности.ТолькоПросмотр 		= ТолькоПросмотрФормы;
	Форма.Элементы.ТипОтправителя.ТолькоПросмотр 						= Форма.УведомлениеОтправлено;
	Форма.Элементы.ПричинаОтзыва.ТолькоПросмотр 						= ТолькоПросмотрФормы;
	
	Если ЗначениеЗаполнено(Форма.Объект.РодительскаяДоверенность) Тогда
		Форма.Элементы.ГруппаУИДДоверенности.Видимость 					= Ложь;
		Форма.Элементы.ГруппаРегистрационныйНомер.Видимость 			= ЭтоВерсия5_02;
		Форма.Элементы.НомерДоверенности.ТолькоПросмотр					= Истина;
	Иначе
		Форма.Элементы.ГруппаУИДДоверенности.Видимость 					= НЕ ЭтоВерсия5_02;
		Форма.Элементы.ГруппаРегистрационныйНомер.Видимость 			= ЭтоВерсия5_02;
		Форма.Элементы.НомерДоверенности.ТолькоПросмотр					= Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодставитьРеквизитыДоверителя(Форма)
	
	ЭтоВерсия5_02 = ЗначениеЗаполнено(Форма.Объект.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Форма.Объект.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	
	Если НЕ Форма.ПодписьЗагружена И ТипЗнч(Форма.Объект.Доверитель) = Тип("СправочникСсылка.Организации")
		И Форма.Объект.Доверитель <> ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		
		Если НЕ Форма.ПодписьЗагружена ИЛИ Форма.ТипОтправителя <> "1" Тогда
			Форма.Объект.Организация = Форма.Объект.Доверитель;
		КонецЕсли;
		
		СвойстваОрганизации = ДокументооборотСКОВызовСервера.ПолучитьСвойстваОрганизации(Форма.Объект.Доверитель);
		
		Форма.Доверитель_ЮридическоеЛицо = СвойстваОрганизации.ЭтоЮридическоеЛицо;
		Форма.Объект.ДоверительЮЛ_ИностраннаяОрганизация = НЕ СвойстваОрганизации.ЭтоРоссийскаяОрганизация;
		
		Форма.Объект.ДоверительЮЛ_НаимОрг = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			?(НЕ СвойстваОрганизации.ЭтоРоссийскаяОрганизация И ЗначениеЗаполнено(СвойстваОрганизации.НаимИОПол),
			СвойстваОрганизации.НаимИОПол, СвойстваОрганизации.НаимЮЛПол), "");
		Форма.Объект.ДоверительЮЛ_ИНН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ИННЮЛ, "");
		Форма.Объект.ДоверительЮЛ_КПП = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.КППЮЛ, "");
		Форма.Объект.ДоверительЮЛ_ОГРН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И СвойстваОрганизации.ЭтоРоссийскаяОрганизация, СвойстваОрганизации.ОГРН, "");
		
		ОбновитьПредставителей(Форма);
		
		СубъектДоверенности = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук"),
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ"));
		СтрокиФИО = Форма.Объект.ФИО.НайтиСтроки(Новый Структура("Владелец", СубъектДоверенности));
		КоличествоСтрокФИО = СтрокиФИО.Количество();
		Если КоличествоСтрокФИО = 0 Тогда
			СтрокаФИО = Форма.Объект.ФИО.Добавить();
			СтрокаФИО.Владелец = СубъектДоверенности;
		Иначе
			СтрокаФИО = СтрокиФИО[0];
		КонецЕсли;
		СтрокаФИО.Фамилия = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			СвойстваОрганизации.ФамилияРук, СвойстваОрганизации.ФамилияИП);
		СтрокаФИО.Имя = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			СвойстваОрганизации.ИмяРук, СвойстваОрганизации.ИмяИП);
		СтрокаФИО.Отчество = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			СвойстваОрганизации.ОтчествоРук, СвойстваОрганизации.ОтчествоИП);
		
		СтрокиУдостоверений = Форма.Объект.УдостоверенияЛичности.НайтиСтроки(
			Новый Структура("Владелец", СубъектДоверенности));
		КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
		Если КоличествоСтрокУдостоверений = 0 Тогда
			Если НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо Тогда
				СтрокаУдостоверения = Форма.Объект.УдостоверенияЛичности.Добавить();
				СтрокаУдостоверения.Владелец = СубъектДоверенности;
			КонецЕсли;
		Иначе
			Если НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо Тогда
				СтрокаУдостоверения = СтрокиУдостоверений[0];
			Иначе
				Для НомерСКонца = 1 По КоличествоСтрокУдостоверений Цикл
					Форма.Объект.УдостоверенияЛичности.Удалить(СтрокиУдостоверений[КоличествоСтрокУдостоверений - НомерСКонца]);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо Тогда
			СтрокаУдостоверения.ВидДок = СвойстваОрганизации.ВидУдостоверения;
			СтрокаУдостоверения.СерДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.СерияУдЛичнРук, СвойстваОрганизации.СерияУдЛичн);
			СтрокаУдостоверения.НомДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.НомерУдЛичнРук, СвойстваОрганизации.НомерУдЛичн);
			СтрокаУдостоверения.ДатаДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.ДатаУдЛичнРук, СвойстваОрганизации.ДатаУдЛичн);
			СтрокаУдостоверения.ВыдДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.ОрганВыданУдЛичнРук, СвойстваОрганизации.ОрганВыданУдЛичн);
			СтрокаУдостоверения.КодВыдДок = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
				СвойстваОрганизации.КодПодрУдЛичнРук, СвойстваОрганизации.КодПодрУдЛичн);
		КонецЕсли;
		
		Форма.Объект.ДоверительФЛ_ИНН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И НЕ СвойстваОрганизации.ЭтоРоссийскаяОрганизация, СвойстваОрганизации.ИННРук,
			?(НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ИННФЛ, ""));
		Форма.Объект.ДоверительФЛ_НомЕРН = "";
		Форма.Объект.ДоверительФЛ_ОГРН = ?(НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ОГРН, "");
		Форма.Объект.ДоверительФЛ_СНИЛС = ?(НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо И ЭтоВерсия5_02,
			СвойстваОрганизации.СНИЛС, "");
		Форма.Объект.ДоверительФЛ_Гражданство = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И НЕ СвойстваОрганизации.ЭтоРоссийскаяОрганизация ИЛИ НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо,
			СвойстваОрганизации.Гражданство, ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка"));
		Форма.Объект.ДоверительФЛ_ДатаРождения = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И НЕ СвойстваОрганизации.ЭтоРоссийскаяОрганизация, СвойстваОрганизации.ДатаРождРук,
			?(НЕ СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ДатаРожд, Неопределено));
		
		Форма.Объект.ЛицоБезДовФЛ = СвойстваОрганизации.Руководитель;
		Форма.Объект.ЛицоБезДовФЛ_ИНН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И СвойстваОрганизации.ЭтоРоссийскаяОрганизация, СвойстваОрганизации.ИННРук, "");
		Форма.Объект.ЛицоБезДовФЛ_СНИЛС = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И СвойстваОрганизации.ЭтоРоссийскаяОрганизация, СвойстваОрганизации.СНИЛС, "");
		Форма.Объект.ЛицоБезДовФЛ_Гражданство = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И СвойстваОрганизации.ЭтоРоссийскаяОрганизация,
			СвойстваОрганизации.Гражданство, ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка"));
		Форма.Объект.ЛицоБезДовФЛ_ДатаРождения = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И СвойстваОрганизации.ЭтоРоссийскаяОрганизация, СвойстваОрганизации.ДатаРождРук, Неопределено);
		Форма.Объект.ЛицоБезДовФЛ_Должность = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо
			И СвойстваОрганизации.ЭтоРоссийскаяОрганизация, СвойстваОрганизации.Должность, "");
		
		Форма.Объект.КодНалоговогоОрганаПредставления = СвойстваОрганизации.КодНО;
		
		Форма.Модифицированность = Истина;
		
		УправлениеФормой(Форма);
		
	ИначеЕсли НЕ Форма.ПодписьЗагружена ИЛИ Форма.ТипОтправителя <> "1" Тогда
		Форма.Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРеквизитыДоверителя()
	
	ЭтоВерсия5_02 = ЗначениеЗаполнено(Объект.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Объект.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВерсияФормата", Объект.ВерсияФормата);
	СтруктураДанных.Вставить("ЭтоПередоверие", ЭтоВерсия5_02 И Объект.ДоверенностьВыданаВПорядкеПередоверия);
	
	СтруктураДанных.Вставить("Доверитель_ЮридическоеЛицо", Доверитель_ЮридическоеЛицо);
	СтруктураДанных.Вставить("ДоверительЮЛ_РоссийскаяОрганизация", НЕ Объект.ДоверительЮЛ_ИностраннаяОрганизация);
	СтруктураДанных.Вставить("ДоверительЮЛ_НаимОрг", Объект.ДоверительЮЛ_НаимОрг);
	СтруктураДанных.Вставить("ДоверительЮЛ_ИНН", Объект.ДоверительЮЛ_ИНН);
	СтруктураДанных.Вставить("ДоверительЮЛ_КПП", Объект.ДоверительЮЛ_КПП);
	СтруктураДанных.Вставить("ДоверительЮЛ_ОГРН", Объект.ДоверительЮЛ_ОГРН);
	СтруктураДанных.Вставить("ДоверительЮЛ_РегНомер", Объект.ДоверительЮЛ_РегНомер);
	СтруктураДанных.Вставить("ДоверительЮЛ_КодНПРег", Объект.ДоверительЮЛ_КодНПРег);
	
	СубъектДоверенности = ?(Доверитель_ЮридическоеЛицо И Объект.ДоверительЮЛ_ИностраннаяОрганизация,
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук"),
		?(НЕ Доверитель_ЮридическоеЛицо,
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ"),
		Неопределено));
	СтрокиФИО = ?(СубъектДоверенности = Неопределено, Новый Массив,
		Объект.ФИО.НайтиСтроки(Новый Структура("Владелец", СубъектДоверенности)));
	СтруктураДанных.Вставить("ДоверительФЛ_Фамилия", ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Фамилия, ""));
	СтруктураДанных.Вставить("ДоверительФЛ_Имя", ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Имя, ""));
	СтруктураДанных.Вставить("ДоверительФЛ_Отчество", ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Отчество, ""));
	ФИО = ?(СтрокиФИО.Количество() <> 0, ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(СтрокиФИО[0]), "");
	СтруктураДанных.Вставить("ДоверительФЛ_ФИО", ФИО);
	
	СубъектДоверенности = ?(НЕ Доверитель_ЮридическоеЛицо,
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ"),
		Неопределено);
	СтрокиУдостоверений = ?(СубъектДоверенности = Неопределено, Новый Массив,
		Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец", СубъектДоверенности)));
	СтруктураДанных.Вставить("ДоверительФЛ_ВидДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].ВидДок, ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка")));
	СтруктураДанных.Вставить("ДоверительФЛ_СерДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].СерДок, ""));
	СтруктураДанных.Вставить("ДоверительФЛ_НомДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].НомДок, ""));
	СтруктураДанных.Вставить("ДоверительФЛ_ДатаДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].ДатаДок, Неопределено));
	СтруктураДанных.Вставить("ДоверительФЛ_ВыдДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].ВыдДок, ""));
	СтруктураДанных.Вставить("ДоверительФЛ_КодВыдДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].КодВыдДок, ""));
	ДоверительФЛ_Удостоверение = ?(СтрокиУдостоверений.Количество() <> 0,
		ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеУдостоверение(СтрокиУдостоверений[0]), "");
	СтруктураДанных.Вставить("ДоверительФЛ_Удостоверение", ДоверительФЛ_Удостоверение);
	
	СтруктураДанных.Вставить("ДоверительФЛ_ИНН", Объект.ДоверительФЛ_ИНН);
	СтруктураДанных.Вставить("ДоверительФЛ_НомЕРН", Объект.ДоверительФЛ_НомЕРН);
	СтруктураДанных.Вставить("ДоверительФЛ_ОГРН", Объект.ДоверительФЛ_ОГРН);
	СтруктураДанных.Вставить("ДоверительФЛ_СНИЛС", Объект.ДоверительФЛ_СНИЛС);
	СтруктураДанных.Вставить("ДоверительФЛ_ДатаРождения", Объект.ДоверительФЛ_ДатаРождения);
	СтруктураДанных.Вставить("ДоверительФЛ_Гражданство", Объект.ДоверительФЛ_Гражданство);
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_Телефон", Объект.ЛицоБезДовФЛ_Телефон);
	
	СтруктураДанных.Вставить("ТолькоПросмотрФормы", УведомлениеОтправлено ИЛИ ПодписьЗагружена);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиРеквизитыДоверителяПослеВвода", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.ЗаявленияОбОтзывеМЧДФНС.Форма.ФормаДоверителя",
		Новый Структура("СтруктураДанных", СтруктураДанных),
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРеквизитыДоверителяПослеВвода(
		СтруктураДанных,
		ДополнительныеПараметры) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанных.ДоверительЮЛ_НаимОрг) И НЕ ЗначениеЗаполнено(Объект.Доверитель) Тогда
		Элементы.Доверитель.ОграничениеТипа = Новый ОписаниеТипов;
		Объект.Доверитель = СтруктураДанных.ДоверительЮЛ_НаимОрг;
	КонецЕсли;
	
	Доверитель_ЮридическоеЛицо = СтруктураДанных.Доверитель_ЮридическоеЛицо;
	Объект.ДоверительЮЛ_ИностраннаяОрганизация = Доверитель_ЮридическоеЛицо
		И НЕ СтруктураДанных.ДоверительЮЛ_РоссийскаяОрганизация;
	Объект.ДоверительЮЛ_НаимОрг = СтруктураДанных.ДоверительЮЛ_НаимОрг;
	Объект.ДоверительЮЛ_ИНН = ?(Доверитель_ЮридическоеЛицо, СтруктураДанных.ДоверительЮЛ_ИНН, "");
	Объект.ДоверительЮЛ_КПП = СтруктураДанных.ДоверительЮЛ_КПП;
	Объект.ДоверительЮЛ_ОГРН = СтруктураДанных.ДоверительЮЛ_ОГРН;
	
	ОбновитьПредставителей(ЭтаФорма);
	
	Если Доверитель_ЮридическоеЛицо И НЕ СтруктураДанных.ДоверительЮЛ_РоссийскаяОрганизация
		ИЛИ НЕ Доверитель_ЮридическоеЛицо Тогда
		
		СубъектДоверенности = ?(Доверитель_ЮридическоеЛицо,
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук"),
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ"));
		СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец", СубъектДоверенности));
		Если СтрокиФИО.Количество() = 0 Тогда
			СтрокаФИО = Объект.ФИО.Добавить();
			СтрокаФИО.Владелец = СубъектДоверенности;
		Иначе
			СтрокаФИО = СтрокиФИО[0];
		КонецЕсли;
		СтрокаФИО.Фамилия 	= СтруктураДанных.ДоверительФЛ_Фамилия;
		СтрокаФИО.Имя 		= СтруктураДанных.ДоверительФЛ_Имя;
		СтрокаФИО.Отчество 	= СтруктураДанных.ДоверительФЛ_Отчество;
		
		Если НЕ Доверитель_ЮридическоеЛицо Тогда
			СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец", СубъектДоверенности));
			Если СтрокиУдостоверений.Количество() = 0 Тогда
				СтрокаУдостоверения = Объект.УдостоверенияЛичности.Добавить();
				СтрокаУдостоверения.Владелец = СубъектДоверенности;
			Иначе
				СтрокаУдостоверения = СтрокиУдостоверений[0];
			КонецЕсли;
			СтрокаУдостоверения.ВидДок 		= СтруктураДанных.ДоверительФЛ_ВидДок;
			СтрокаУдостоверения.СерДок 		= СтруктураДанных.ДоверительФЛ_СерДок;
			СтрокаУдостоверения.НомДок 		= СтруктураДанных.ДоверительФЛ_НомДок;
			СтрокаУдостоверения.ДатаДок 	= СтруктураДанных.ДоверительФЛ_ДатаДок;
			СтрокаУдостоверения.ВыдДок 		= СтруктураДанных.ДоверительФЛ_ВыдДок;
			СтрокаУдостоверения.КодВыдДок 	= СтруктураДанных.ДоверительФЛ_КодВыдДок;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ДоверительФЛ_ИНН 			= СтруктураДанных.ДоверительФЛ_ИНН;
	Объект.ДоверительФЛ_НомЕРН 			= СтруктураДанных.ДоверительФЛ_НомЕРН;
	Объект.ДоверительФЛ_ОГРН 			= СтруктураДанных.ДоверительФЛ_ОГРН;
	Объект.ДоверительФЛ_СНИЛС 			= СтруктураДанных.ДоверительФЛ_СНИЛС;
	Объект.ДоверительФЛ_Гражданство 	= СтруктураДанных.ДоверительФЛ_Гражданство;
	Объект.ДоверительФЛ_ДатаРождения 	= СтруктураДанных.ДоверительФЛ_ДатаРождения;
	Объект.ЛицоБезДовФЛ_Телефон 		= СтруктураДанных.ЛицоБезДовФЛ_Телефон;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодставитьРеквизитыЛицаБезДоверенностиЮЛ()
	
	Если ТипЗнч(Объект.ЛицоБезДовЮЛ) = Тип("СправочникСсылка.Организации")
		И Объект.ЛицоБезДовЮЛ <> ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		
		СвойстваОрганизации = ДокументооборотСКОВызовСервера.ПолучитьСвойстваОрганизации(Объект.ЛицоБезДовЮЛ);
		
		Объект.ЛицоБезДовЮЛ_НаимОрг = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			?(НЕ СвойстваОрганизации.ЭтоРоссийскаяОрганизация И ЗначениеЗаполнено(СвойстваОрганизации.НаимИОПол),
			СвойстваОрганизации.НаимИОПол, СвойстваОрганизации.НаимЮЛПол), "");
		Объект.ЛицоБезДовЮЛ_ИНН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ИННЮЛ, "");
		Объект.ЛицоБезДовЮЛ_КПП = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.КППЮЛ, "");
		Объект.ЛицоБезДовЮЛ_ОГРН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо, СвойстваОрганизации.ОГРН, "");
		
		СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
		КоличествоСтрокФИО = СтрокиФИО.Количество();
		Если КоличествоСтрокФИО = 0 Тогда
			СтрокаФИО = Объект.ФИО.Добавить();
			СтрокаФИО.Владелец = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук");
		Иначе
			СтрокаФИО = СтрокиФИО[0];
		КонецЕсли;
		СтрокаФИО.Фамилия = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			СвойстваОрганизации.ФамилияРук, СвойстваОрганизации.ФамилияИП);
		СтрокаФИО.Имя = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			СвойстваОрганизации.ИмяРук, СвойстваОрганизации.ИмяИП);
		СтрокаФИО.Отчество = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			СвойстваОрганизации.ОтчествоРук, СвойстваОрганизации.ОтчествоИП);
		
		Объект.ЛицоБезДовФЛ = СвойстваОрганизации.Руководитель;
		Объект.ЛицоБезДовФЛ_ИНН = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			СвойстваОрганизации.ИННРук, СвойстваОрганизации.ИННФЛ);
		Объект.ЛицоБезДовФЛ_Гражданство = СвойстваОрганизации.Гражданство;
		Объект.ЛицоБезДовФЛ_ДатаРождения = ?(СвойстваОрганизации.ЭтоЮридическоеЛицо,
			СвойстваОрганизации.ДатаРождРук, СвойстваОрганизации.ДатаРожд);
		Объект.ЛицоБезДовФЛ_Должность = СвойстваОрганизации.Должность;
		
		Модифицированность = Истина;
		
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли ТипЗнч(Объект.ЛицоБезДовЮЛ) = Тип("СправочникСсылка.Контрагенты")
		И Объект.ЛицоБезДовЮЛ <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
		
		СвойстваКонтрагента = ДокументооборотСКОВызовСервера.ПолучитьСвойстваКонтрагента(Объект.ЛицоБезДовЮЛ);
		
		Объект.ЛицоБезДовЮЛ_НаимОрг = ?(СвойстваКонтрагента.ЭтоЮридическоеЛицо = Истина,
			СвойстваКонтрагента.НаименованиеПолное, "");
		Объект.ЛицоБезДовЮЛ_ИНН = ?(СвойстваКонтрагента.ЭтоЮридическоеЛицо = Истина, СвойстваКонтрагента.ИНН, "");
		Объект.ЛицоБезДовЮЛ_КПП = ?(СвойстваКонтрагента.ЭтоЮридическоеЛицо = Истина, СвойстваКонтрагента.КПП, "");
		Объект.ЛицоБезДовЮЛ_ОГРН = "";
		
		Если СвойстваКонтрагента.ЭтоЮридическоеЛицо = Ложь Тогда
			СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
			КоличествоСтрокФИО = СтрокиФИО.Количество();
			Если КоличествоСтрокФИО = 0 Тогда
				СтрокаФИО = Объект.ФИО.Добавить();
				СтрокаФИО.Владелец = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук");
			Иначе
				СтрокаФИО = СтрокиФИО[0];
			КонецЕсли;
			СтрокаФИО.Фамилия 	= СвойстваКонтрагента.Фамилия;
			СтрокаФИО.Имя 		= СвойстваКонтрагента.Имя;
			СтрокаФИО.Отчество 	= СвойстваКонтрагента.Отчество;
			
			Объект.ЛицоБезДовФЛ 				= Объект.ЛицоБезДовЮЛ;
			Объект.ЛицоБезДовЮЛ 				= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			Объект.ЛицоБезДовФЛ_ИНН 			= СвойстваКонтрагента.ИНН;
			Объект.ЛицоБезДовФЛ_НомЕРН 			= "";
			Объект.ЛицоБезДовФЛ_ОГРН 			= "";
			Объект.ЛицоБезДовФЛ_СНИЛС 			= "";
			Объект.ЛицоБезДовФЛ_Гражданство 	= ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
			Объект.ЛицоБезДовФЛ_ДатаРождения 	= Неопределено;
			Объект.ЛицоБезДовФЛ_Должность 		= "";
			
			ТекущийЭлемент = Элементы.ЛицоБезДовФЛ;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРеквизитыЛицаБезДоверенностиЮЛ()
	
	Если НЕ Доверитель_ЮридическоеЛицо ИЛИ Объект.ДоверительЮЛ_ИностраннаяОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ЛицоБезДовЮЛ_НаимОрг", 	Объект.ЛицоБезДовЮЛ_НаимОрг);
	СтруктураДанных.Вставить("ЛицоБезДовЮЛ_ИНН", 		Объект.ЛицоБезДовЮЛ_ИНН);
	СтруктураДанных.Вставить("ЛицоБезДовЮЛ_КПП", 		Объект.ЛицоБезДовЮЛ_КПП);
	СтруктураДанных.Вставить("ЛицоБезДовЮЛ_ОГРН", 		Объект.ЛицоБезДовЮЛ_ОГРН);
	СтруктураДанных.Вставить("ТолькоПросмотрФормы", 	УведомлениеОтправлено ИЛИ ПодписьЗагружена);

	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиРеквизитыЛицаБезДоверенностиЮЛПослеВвода",
		ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.ЗаявленияОбОтзывеМЧДФНС.Форма.ФормаЛицаБезДоверенностиЮЛ",
		Новый Структура("СтруктураДанных", СтруктураДанных),
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРеквизитыЛицаБезДоверенностиЮЛПослеВвода(
		СтруктураДанных,
		ДополнительныеПараметры) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанных.ЛицоБезДовЮЛ_НаимОрг) И НЕ ЗначениеЗаполнено(Объект.ЛицоБезДовЮЛ) Тогда
		Элементы.ЛицоБезДовЮЛ.ОграничениеТипа = Новый ОписаниеТипов;
		Объект.ЛицоБезДовЮЛ = СтруктураДанных.ЛицоБезДовЮЛ_НаимОрг;
	КонецЕсли;
	Объект.ЛицоБезДовЮЛ_НаимОрг = СтруктураДанных.ЛицоБезДовЮЛ_НаимОрг;
	Объект.ЛицоБезДовЮЛ_ИНН = СтруктураДанных.ЛицоБезДовЮЛ_ИНН;
	Объект.ЛицоБезДовЮЛ_КПП = СтруктураДанных.ЛицоБезДовЮЛ_КПП;
	Объект.ЛицоБезДовЮЛ_ОГРН = СтруктураДанных.ЛицоБезДовЮЛ_ОГРН;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодставитьРеквизитыЛицаБезДоверенностиФЛ()
	
	ЭтоВерсия5_02 = ЗначениеЗаполнено(Объект.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Объект.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	
	Если ТипЗнч(Объект.ЛицоБезДовФЛ) = Тип("СправочникСсылка.Контрагенты")
		И Объект.ЛицоБезДовФЛ <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
		
		СвойстваКонтрагента = ДокументооборотСКОВызовСервера.ПолучитьСвойстваКонтрагента(Объект.ЛицоБезДовФЛ);
		
		Если СвойстваКонтрагента.ЭтоЮридическоеЛицо = Истина Тогда
			Объект.ЛицоБезДовЮЛ 		= Объект.ЛицоБезДовФЛ;
			Объект.ЛицоБезДовФЛ 		= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			Объект.ЛицоБезДовЮЛ_НаимОрг = СвойстваКонтрагента.НаименованиеПолное;
			Объект.ЛицоБезДовЮЛ_ИНН 	= СвойстваКонтрагента.ИНН;
			Объект.ЛицоБезДовЮЛ_КПП 	= СвойстваКонтрагента.КПП;
			Объект.ЛицоБезДовЮЛ_ОГРН 	= "";
			
			ТекущийЭлемент = Элементы.ЛицоБезДовЮЛ;
		КонецЕсли;
		
		СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
		КоличествоСтрокФИО = СтрокиФИО.Количество();
		Если КоличествоСтрокФИО = 0 Тогда
			Если СвойстваКонтрагента.ЭтоЮридическоеЛицо = Ложь Тогда
				СтрокаФИО = Объект.ФИО.Добавить();
				СтрокаФИО.Владелец = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук");
			КонецЕсли;
		Иначе
			Если СвойстваКонтрагента.ЭтоЮридическоеЛицо = Ложь Тогда
				СтрокаФИО = СтрокиФИО[0];
			Иначе
				Для НомерСКонца = 1 По КоличествоСтрокФИО Цикл
					Объект.ФИО.Удалить(СтрокиФИО[КоличествоСтрокФИО - НомерСКонца]);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если СвойстваКонтрагента.ЭтоЮридическоеЛицо = Ложь Тогда
			СтрокаФИО.Фамилия 	= СвойстваКонтрагента.Фамилия;
			СтрокаФИО.Имя 		= СвойстваКонтрагента.Имя;
			СтрокаФИО.Отчество 	= СвойстваКонтрагента.Отчество;
		КонецЕсли;
		
		СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
		КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
		Если КоличествоСтрокУдостоверений = 0 Тогда
			Если СвойстваКонтрагента.ЭтоЮридическоеЛицо = Ложь Тогда
				СтрокаУдостоверения = Объект.УдостоверенияЛичности.Добавить();
				СтрокаУдостоверения.Владелец =
					ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ");
			КонецЕсли;
		Иначе
			Если СвойстваКонтрагента.ЭтоЮридическоеЛицо = Ложь Тогда
				СтрокаУдостоверения = СтрокиУдостоверений[0];
			Иначе
				Для НомерСКонца = 1 По КоличествоСтрокУдостоверений Цикл
					Объект.УдостоверенияЛичности.Удалить(СтрокиУдостоверений[КоличествоСтрокУдостоверений - НомерСКонца]);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если СвойстваКонтрагента.ЭтоЮридическоеЛицо = Ложь Тогда
			СтрокаУдостоверения.ЛицоБезДовФЛ_ВидДок =
				ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка");
			СтрокаУдостоверения.ЛицоБезДовФЛ_СерДок = "";
			СтрокаУдостоверения.ЛицоБезДовФЛ_НомДок = "";
			СтрокаУдостоверения.ЛицоБезДовФЛ_ДатаДок = Неопределено;
			СтрокаУдостоверения.ЛицоБезДовФЛ_ВыдДок = "";
			СтрокаУдостоверения.ЛицоБезДовФЛ_КодВыдДок = "";
		КонецЕсли;
		
		Объект.ЛицоБезДовФЛ_ИНН 			= ?(СвойстваКонтрагента.ЭтоЮридическоеЛицо = Ложь, СвойстваКонтрагента.ИНН, "");
		Объект.ЛицоБезДовФЛ_НомЕРН 			= "";
		Объект.ЛицоБезДовФЛ_ОГРН 			= "";
		Объект.ЛицоБезДовФЛ_СНИЛС 			= "";
		Объект.ЛицоБезДовФЛ_Гражданство 	= ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
		Объект.ЛицоБезДовФЛ_ДатаРождения 	= Неопределено;
		Объект.ЛицоБезДовФЛ_Должность 		= "";
		
		Модифицированность = Истина;
		
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли ТипЗнч(Объект.ЛицоБезДовФЛ) = Тип("СправочникСсылка.ФизическиеЛица")
		И Объект.ЛицоБезДовФЛ <> ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка") Тогда
		
		СвойстваФизическогоЛица = ДокументооборотСКОВызовСервера.ПолучитьСвойстваФизическогоЛица(Объект.ЛицоБезДовФЛ);
		
		СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
		КоличествоСтрокФИО = СтрокиФИО.Количество();
		Если КоличествоСтрокФИО = 0 Тогда
			СтрокаФИО = Объект.ФИО.Добавить();
			СтрокаФИО.Владелец = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук");
		Иначе
			СтрокаФИО = СтрокиФИО[0];
		КонецЕсли;
		СтрокаФИО.Фамилия 	= СвойстваФизическогоЛица.ФИО.Фамилия;
		СтрокаФИО.Имя 		= СвойстваФизическогоЛица.ФИО.Имя;
		СтрокаФИО.Отчество 	= СвойстваФизическогоЛица.ФИО.Отчество;
		
		Если ЭтоВерсия5_02 Тогда
			СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
			КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
			Если КоличествоСтрокУдостоверений = 0 Тогда
				СтрокаУдостоверения = Объект.УдостоверенияЛичности.Добавить();
				СтрокаУдостоверения.Владелец =
					ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ");
			Иначе
				СтрокаУдостоверения = СтрокиУдостоверений[0];
			КонецЕсли;
			СтрокаУдостоверения.ВидДок 		= СвойстваФизическогоЛица.ВидДокумента;
			СтрокаУдостоверения.СерДок 		= СвойстваФизическогоЛица.Серия;
			СтрокаУдостоверения.НомДок 		= СвойстваФизическогоЛица.Номер;
			СтрокаУдостоверения.ДатаДок 	= СвойстваФизическогоЛица.ДатаВыдачи;
			СтрокаУдостоверения.ВыдДок 		= СвойстваФизическогоЛица.КемВыдан;
			СтрокаУдостоверения.КодВыдДок 	= СвойстваФизическогоЛица.КодПодразделения;
		КонецЕсли;
		
		Объект.ЛицоБезДовФЛ_ИНН 			= СвойстваФизическогоЛица.ИНН;
		Объект.ЛицоБезДовФЛ_НомЕРН 			= "";
		Объект.ЛицоБезДовФЛ_ОГРН 			= "";
		Объект.ЛицоБезДовФЛ_СНИЛС 			= СвойстваФизическогоЛица.СНИЛС;
		Объект.ЛицоБезДовФЛ_Гражданство 	= СвойстваФизическогоЛица.Гражданство;
		Объект.ЛицоБезДовФЛ_ДатаРождения 	= СвойстваФизическогоЛица.ДатаРождения;
		Объект.ЛицоБезДовФЛ_Должность 		= СвойстваФизическогоЛица.Должность;
		
		Модифицированность = Истина;
		
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРеквизитыЛицаБезДоверенностиФЛ()
	
	Если НЕ Доверитель_ЮридическоеЛицо ИЛИ Объект.ДоверительЮЛ_ИностраннаяОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВерсия5_02 = ЗначениеЗаполнено(Объект.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Объект.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВерсияФормата", Объект.ВерсияФормата);
	СтруктураДанных.Вставить("ЭтоПередоверие", ЭтоВерсия5_02 И Объект.ДоверенностьВыданаВПорядкеПередоверия);
	
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_Фамилия", ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Фамилия, ""));
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_Имя", ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Имя, ""));
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_Отчество", ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Отчество, ""));
	ФИО = ?(СтрокиФИО.Количество() <> 0, ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(СтрокиФИО[0]), "");
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_ФИО", ФИО);
	
	СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_ВидДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].ВидДок, ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка")));
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_СерДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].СерДок, ""));
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_НомДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].НомДок, ""));
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_ДатаДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].ДатаДок, Неопределено));
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_ВыдДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].ВыдДок, ""));
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_КодВыдДок", ?(СтрокиУдостоверений.Количество() <> 0,
		СтрокиУдостоверений[0].КодВыдДок, ""));
	ЛицоБезДовФЛ_Удостоверение = ?(СтрокиУдостоверений.Количество() <> 0,
		ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеУдостоверение(СтрокиУдостоверений[0]), "");
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_Удостоверение", ЛицоБезДовФЛ_Удостоверение);
	
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_ИНН", Объект.ЛицоБезДовФЛ_ИНН);
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_НомЕРН", Объект.ЛицоБезДовФЛ_НомЕРН);
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_ОГРН", Объект.ЛицоБезДовФЛ_ОГРН);
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_СНИЛС", Объект.ЛицоБезДовФЛ_СНИЛС);
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_Гражданство", Объект.ЛицоБезДовФЛ_Гражданство);
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_ДатаРождения", Объект.ЛицоБезДовФЛ_ДатаРождения);
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_Должность", Объект.ЛицоБезДовФЛ_Должность);
	СтруктураДанных.Вставить("ЛицоБезДовФЛ_Телефон", Объект.ЛицоБезДовФЛ_Телефон);
	
	СтруктураДанных.Вставить("ТолькоПросмотрФормы", УведомлениеОтправлено ИЛИ ПодписьЗагружена);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиРеквизитыЛицаБезДоверенностиФЛПослеВвода",
		ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.ЗаявленияОбОтзывеМЧДФНС.Форма.ФормаЛицаБезДоверенностиФЛ",
		Новый Структура("СтруктураДанных", СтруктураДанных),
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРеквизитыЛицаБезДоверенностиФЛПослеВвода(
		СтруктураДанных,
		ДополнительныеПараметры) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВерсия5_02 = ЗначениеЗаполнено(Объект.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Объект.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	
	Если ЗначениеЗаполнено(СтруктураДанных.ЛицоБезДовФЛ_Фамилия) ИЛИ ЗначениеЗаполнено(СтруктураДанных.ЛицоБезДовФЛ_Имя)
		ИЛИ ЗначениеЗаполнено(СтруктураДанных.ЛицоБезДовФЛ_Отчество) И НЕ ЗначениеЗаполнено(Объект.ЛицоБезДовФЛ) Тогда
		Элементы.ЛицоБезДовФЛ.ОграничениеТипа = Новый ОписаниеТипов;
		Объект.ЛицоБезДовФЛ = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(
			Новый Структура("Фамилия, Имя, Отчество",
			СтруктураДанных.ЛицоБезДовФЛ_Фамилия, СтруктураДанных.ЛицоБезДовФЛ_Имя, СтруктураДанных.ЛицоБезДовФЛ_Отчество));
	КонецЕсли;
	
	СтрокиФИО = Объект.ФИО.НайтиСтроки(Новый Структура("Владелец",
		ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
	Если СтрокиФИО.Количество() = 0 Тогда
		СтрокаФИО = Объект.ФИО.Добавить();
		СтрокаФИО.Владелец = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук");
	Иначе
		СтрокаФИО = СтрокиФИО[0];
	КонецЕсли;
	СтрокаФИО.Фамилия = СтруктураДанных.ЛицоБезДовФЛ_Фамилия;
	СтрокаФИО.Имя = СтруктураДанных.ЛицоБезДовФЛ_Имя;
	СтрокаФИО.Отчество = СтруктураДанных.ЛицоБезДовФЛ_Отчество;
	
	Если ЭтоВерсия5_02 И Объект.ДоверенностьВыданаВПорядкеПередоверия Тогда
		СтрокиУдостоверений = Объект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
		Если СтрокиУдостоверений.Количество() = 0 Тогда
			СтрокаУдостоверения = Объект.УдостоверенияЛичности.Добавить();
			СтрокаУдостоверения.Владелец = ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ");
		Иначе
			СтрокаУдостоверения = СтрокиУдостоверений[0];
		КонецЕсли;
		СтрокаУдостоверения.ВидДок = СтруктураДанных.ЛицоБезДовФЛ_ВидДок;
		СтрокаУдостоверения.СерДок = СтруктураДанных.ЛицоБезДовФЛ_СерДок;
		СтрокаУдостоверения.НомДок = СтруктураДанных.ЛицоБезДовФЛ_НомДок;
		СтрокаУдостоверения.ДатаДок = СтруктураДанных.ЛицоБезДовФЛ_ДатаДок;
		СтрокаУдостоверения.ВыдДок = СтруктураДанных.ЛицоБезДовФЛ_ВыдДок;
		СтрокаУдостоверения.КодВыдДок = СтруктураДанных.ЛицоБезДовФЛ_КодВыдДок;
		
		Объект.ЛицоБезДовФЛ_ИНН = СтруктураДанных.ЛицоБезДовФЛ_ИНН;
		Объект.ЛицоБезДовФЛ_НомЕРН = СтруктураДанных.ЛицоБезДовФЛ_НомЕРН;
		Объект.ЛицоБезДовФЛ_ОГРН = СтруктураДанных.ЛицоБезДовФЛ_ОГРН;
		Объект.ЛицоБезДовФЛ_СНИЛС = СтруктураДанных.ЛицоБезДовФЛ_СНИЛС;
		Объект.ЛицоБезДовФЛ_Гражданство = СтруктураДанных.ЛицоБезДовФЛ_Гражданство;
		Объект.ЛицоБезДовФЛ_ДатаРождения = СтруктураДанных.ЛицоБезДовФЛ_ДатаРождения;
	КонецЕсли;
	
	Объект.ЛицоБезДовФЛ_Должность = СтруктураДанных.ЛицоБезДовФЛ_Должность;
	Объект.ЛицоБезДовФЛ_Телефон = СтруктураДанных.ЛицоБезДовФЛ_Телефон;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИлиИзменитьПредставителя(ДобавитьПредставителя = Ложь)
	
	Если ДобавитьПредставителя Тогда
		СтрокаПредставителя = Неопределено;
		Представитель_ЮридическоеЛицо = Ложь;
		
	Иначе
		ТекущиеДанные = Элементы.Представители.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокиПредставителей = Объект.Представители.НайтиСтроки(Новый Структура("Идентификатор",
			ТекущиеДанные.Идентификатор));
		Если СтрокиПредставителей.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		СтрокаПредставителя = СтрокиПредставителей[0];
		
		Представитель_ЮридическоеЛицо = ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН)
			И (СтрокаПредставителя.ПредставительЮЛ_ИНН <> Объект.ДоверительЮЛ_ИНН
			ИЛИ СтрокаПредставителя.ПредставительЮЛ_КПП <> Объект.ДоверительЮЛ_КПП);
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВерсияФормата", Объект.ВерсияФормата);
	СтруктураДанных.Вставить("Доверитель", Объект.Доверитель);
	СтруктураДанных.Вставить("Доверитель_ЮридическоеЛицо", Доверитель_ЮридическоеЛицо);
	
	СтруктураДанных.Вставить("ДоверительЮЛ_НаимОрг", Объект.ДоверительЮЛ_НаимОрг);
	СтруктураДанных.Вставить("ДоверительЮЛ_ИНН", Объект.ДоверительЮЛ_ИНН);
	СтруктураДанных.Вставить("ДоверительЮЛ_КПП", Объект.ДоверительЮЛ_КПП);
	СтруктураДанных.Вставить("ДоверительЮЛ_ОГРН", Объект.ДоверительЮЛ_ОГРН);
	
	СтруктураДанных.Вставить("Представитель", ?(СтрокаПредставителя = Неопределено,
		Неопределено, СтрокаПредставителя.Представитель));
	СтруктураДанных.Вставить("Представитель_ЮридическоеЛицо", Представитель_ЮридическоеЛицо);
	
	СтруктураДанных.Вставить("ПредставительЮЛ_НаимОрг", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительЮЛ_НаимОрг));
	СтруктураДанных.Вставить("ПредставительЮЛ_ИНН", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительЮЛ_ИНН));
	СтруктураДанных.Вставить("ПредставительЮЛ_КПП", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительЮЛ_КПП));
	СтруктураДанных.Вставить("ПредставительЮЛ_ОГРН", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительЮЛ_ОГРН));
	СтруктураДанных.Вставить("ТолькоПросмотрФормы", НЕ ДобавитьПредставителя
		И (УведомлениеОтправлено ИЛИ ПодписьЗагружена));
	
	ПредставительФЛ_ФИО = ?(ДобавитьПредставителя, "",
		ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(СтрокаПредставителя, "ПредставительФЛ_"));
	
	СтруктураДанных.Вставить("ПредставительФЛ_Фамилия", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительФЛ_Фамилия));
	СтруктураДанных.Вставить("ПредставительФЛ_Имя", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительФЛ_Имя));
	СтруктураДанных.Вставить("ПредставительФЛ_Отчество", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительФЛ_Отчество));
	СтруктураДанных.Вставить("ПредставительФЛ_ФИО", ПредставительФЛ_ФИО);
	
	СтруктураДанных.Вставить("ПредставительФЛ_ИНН", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительФЛ_ИНН));
	СтруктураДанных.Вставить("ПредставительФЛ_НомЕРН", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительФЛ_НомЕРН));
	СтруктураДанных.Вставить("ПредставительФЛ_ОГРН", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительФЛ_ОГРН));
	СтруктураДанных.Вставить("ПредставительФЛ_СНИЛС", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительФЛ_СНИЛС));
	СтруктураДанных.Вставить("ПредставительФЛ_Гражданство", ?(СтрокаПредставителя = Неопределено,
		ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка"), СтрокаПредставителя.ПредставительФЛ_Гражданство));
	СтруктураДанных.Вставить("ПредставительФЛ_ДатаРождения", ?(СтрокаПредставителя = Неопределено,
		Неопределено, СтрокаПредставителя.ПредставительФЛ_ДатаРождения));
	
	ПредставительФЛ_Удостоверение = ?(ДобавитьПредставителя, "",
		ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеУдостоверение(СтрокаПредставителя, "ПредставительФЛ_"));
	
	СтруктураДанных.Вставить("ПредставительФЛ_ВидДок", ?(СтрокаПредставителя = Неопределено,
		ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка"),
		СтрокаПредставителя.ПредставительФЛ_ВидДок));
	СтруктураДанных.Вставить("ПредставительФЛ_СерДок", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительФЛ_СерДок));
	СтруктураДанных.Вставить("ПредставительФЛ_НомДок", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительФЛ_НомДок));
	СтруктураДанных.Вставить("ПредставительФЛ_ДатаДок", ?(СтрокаПредставителя = Неопределено,
		Неопределено, СтрокаПредставителя.ПредставительФЛ_ДатаДок));
	СтруктураДанных.Вставить("ПредставительФЛ_ВыдДок", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительФЛ_ВыдДок));
	СтруктураДанных.Вставить("ПредставительФЛ_КодВыдДок", ?(СтрокаПредставителя = Неопределено,
		"", СтрокаПредставителя.ПредставительФЛ_КодВыдДок));
	СтруктураДанных.Вставить("ПредставительФЛ_Удостоверение", ПредставительФЛ_Удостоверение);
	
	СтруктураДанных.Вставить("ПредставительЯвляетсяСотрудником", ?(СтрокаПредставителя = Неопределено,
		Истина, СтрокаПредставителя.ПредставительЯвляетсяСотрудником));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДобавитьПредставителя", ДобавитьПредставителя);
	Если НЕ ДобавитьПредставителя Тогда
		ДополнительныеПараметры.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИлиИзменитьПредставителяПослеВвода",
		ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(
		"Справочник.МашиночитаемыеДоверенностиФНС.Форма.ФормаПредставителяФЛ",
		Новый Структура("СтруктураДанных", СтруктураДанных),
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьИлиИзменитьПредставителяПослеВвода(
		СтруктураДанных,
		ДополнительныеПараметры) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ДобавитьПредставителя Тогда
		СтрокаПредставителя = Объект.Представители.Добавить();
		ОбновитьПредставителиПредставление(ЭтаФорма);
		СтрокаПредставителя.Идентификатор = Новый УникальныйИдентификатор;
		СтрокаПредставителя.ПредставительИспользуется = Истина;
		
	Иначе
		СтрокиПредставителей = Объект.Представители.НайтиСтроки(Новый Структура("Идентификатор",
			ДополнительныеПараметры.Идентификатор));
		Если СтрокиПредставителей.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		СтрокаПредставителя = СтрокиПредставителей[0];
	КонецЕсли;
	
	СтрокаПредставителя.Представитель = СтруктураДанных.Представитель;
	СтрокаПредставителя.ПредставительЮЛ_НаимОрг = СтруктураДанных.ПредставительЮЛ_НаимОрг;
	СтрокаПредставителя.ПредставительЮЛ_ИНН = СтруктураДанных.ПредставительЮЛ_ИНН;
	СтрокаПредставителя.ПредставительЮЛ_КПП = СтруктураДанных.ПредставительЮЛ_КПП;
	СтрокаПредставителя.ПредставительЮЛ_ОГРН = СтруктураДанных.ПредставительЮЛ_ОГРН;
	
	СтрокаПредставителя.ПредставительФЛ_Фамилия = СтруктураДанных.ПредставительФЛ_Фамилия;
	СтрокаПредставителя.ПредставительФЛ_Имя = СтруктураДанных.ПредставительФЛ_Имя;
	СтрокаПредставителя.ПредставительФЛ_Отчество = СтруктураДанных.ПредставительФЛ_Отчество;
	
	СтрокаПредставителя.ПредставительФЛ_ИНН = СтруктураДанных.ПредставительФЛ_ИНН;
	СтрокаПредставителя.ПредставительФЛ_НомЕРН = СтруктураДанных.ПредставительФЛ_НомЕРН;
	СтрокаПредставителя.ПредставительФЛ_ОГРН = СтруктураДанных.ПредставительФЛ_ОГРН;
	СтрокаПредставителя.ПредставительФЛ_СНИЛС = СтруктураДанных.ПредставительФЛ_СНИЛС;
	СтрокаПредставителя.ПредставительФЛ_Гражданство = СтруктураДанных.ПредставительФЛ_Гражданство;
	СтрокаПредставителя.ПредставительФЛ_ДатаРождения = СтруктураДанных.ПредставительФЛ_ДатаРождения;
	
	СтрокаПредставителя.ПредставительФЛ_ВидДок = СтруктураДанных.ПредставительФЛ_ВидДок;
	СтрокаПредставителя.ПредставительФЛ_СерДок = СтруктураДанных.ПредставительФЛ_СерДок;
	СтрокаПредставителя.ПредставительФЛ_НомДок = СтруктураДанных.ПредставительФЛ_НомДок;
	СтрокаПредставителя.ПредставительФЛ_ДатаДок = СтруктураДанных.ПредставительФЛ_ДатаДок;
	СтрокаПредставителя.ПредставительФЛ_ВыдДок = СтруктураДанных.ПредставительФЛ_ВыдДок;
	СтрокаПредставителя.ПредставительФЛ_КодВыдДок = СтруктураДанных.ПредставительФЛ_КодВыдДок;
	
	СтрокаПредставителя.ПредставительЯвляетсяСотрудником = СтруктураДанных.ПредставительЯвляетсяСотрудником;
	
	ВставитьПредставителяВТаблицу(
		ЭтаФорма,
		СтрокаПредставителя,
		?(ДополнительныеПараметры.ДобавитьПредставителя, Неопределено, ДополнительныеПараметры.Идентификатор));
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставителей(Форма)
	
	ЭтоВерсия5_02 = ЗначениеЗаполнено(Форма.Объект.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Форма.Объект.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	
	Если ЭтоВерсия5_02 Тогда
		Для каждого ПредставительСтрока Из Форма.Объект.Представители Цикл
			Если ПредставительСтрока.ПредставительЯвляетсяСотрудником Тогда
				ПредставительСтрока.ПредставительЮЛ_НаимОрг = Форма.Объект.ДоверительЮЛ_НаимОрг;
				ПредставительСтрока.ПредставительЮЛ_ИНН 	= Форма.Объект.ДоверительЮЛ_ИНН;
				ПредставительСтрока.ПредставительЮЛ_КПП 	= Форма.Объект.ДоверительЮЛ_КПП;
				ПредставительСтрока.ПредставительЮЛ_ОГРН 	= Форма.Объект.ДоверительЮЛ_ОГРН;
				ВставитьПредставителяВТаблицу(Форма, ПредставительСтрока, ПредставительСтрока.Идентификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьПредставителяВТаблицу(Форма, СтрокаПредставителя, ИндексИлиИдентификатор = Неопределено)
	
	Если ИндексИлиИдентификатор = Неопределено Тогда
		СтрокаТаблицы = Форма.Представители.Добавить();
	ИначеЕсли ТипЗнч(ИндексИлиИдентификатор) = Тип("Число") Тогда
		СтрокаТаблицы = Форма.Представители[ИндексИлиИдентификатор];
	Иначе
		СтрокиТаблицы = Форма.Представители.НайтиСтроки(Новый Структура("Идентификатор", ИндексИлиИдентификатор));
		Если СтрокиТаблицы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		СтрокаТаблицы = СтрокиТаблицы[0];
	КонецЕсли;
	
	ДанныеПредставителя = СтрокаПредставителя.ПредставительЮЛ_НаимОрг;
	ФИО = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(СтрокаПредставителя, "ПредставительФЛ_");
	ДокументооборотСКОКлиентСервер.ДобавитьРеквизит(ДанныеПредставителя, ФИО, "
		|");
	
	СтрокаТаблицы.ПредставительИспользуется = СтрокаПредставителя.ПредставительИспользуется;
	СтрокаТаблицы.ДанныеПредставителя = ДанныеПредставителя
		+ ?(ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ИНН),
			", " + НСтр("ru = 'ИНН: ';
						|en = 'ИНН: '") + СтрокаПредставителя.ПредставительФЛ_ИНН, "")
		+ ?(ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_СНИЛС),
			", " + НСтр("ru = 'СНИЛС: ';
						|en = 'СНИЛС: '") + СтрокаПредставителя.ПредставительФЛ_СНИЛС, "")
		+ ?(ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ДатаРождения),
			", " + НСтр("ru = 'дата рождения: ';
						|en = 'дата рождения: '")
			+ Формат(СтрокаПредставителя.ПредставительФЛ_ДатаРождения, "ДФ='дд.ММ.гггг'"), "");
	СтрокаТаблицы.Идентификатор = СтрокаПредставителя.Идентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаПредставленияНачалоВыбораПослеВвода(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.КодНалоговогоОрганаПредставления = РезультатВыбора.КодНО;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНалоговыеОрганыДействияНажатиеПослеВвода(
		СтруктураДанных,
		ДополнительныеПараметры) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НалоговыеОрганыДействия.Очистить();
	Для каждого КодНалоговогоОрганаДействия Из СтруктураДанных.КодыНалоговыхОргановДействия Цикл
		НалоговыйОрганДействия = Объект.НалоговыеОрганыДействия.Добавить();
		НалоговыйОрганДействия.КодНалоговогоОргана = КодНалоговогоОрганаДействия;
	КонецЦикла;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПослеПодтвержденияПриПредупреждении(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодписьЗагружена Тогда
		РезультатыПроверки = ДокументооборотСКОВызовСервера.ПроверитьЗаявлениеОбОтзывеМЧДФНС(Объект);
		
		Если РезультатыПроверки.Количество() <> 0 Тогда
			Для каждого РезультатПроверки Из РезультатыПроверки Цикл
				ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПроверки.ТекстОшибки,,
					РезультатПроверки.Поле);
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДокументооборотСКОКлиент.ПроверитьИЗаписать(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПослеОтправки", ЭтотОбъект);
	КонтекстЭДОКлиент.ОтправкаРегламентированногоОтчетаВФНС(Объект.Ссылка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПослеОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	УведомлениеОтправлено = ПослеОтправкиНаСервере();
	
	// Перерисовка статуса отправки в форме Отчетность
	ПараметрыОповещения = Новый Структура(); 
	ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	Оповестить("Завершение отправки", ПараметрыОповещения, Объект.Ссылка);
	
	Если Открыта() И УведомлениеОтправлено Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПослеЗагрузки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		Прочитать();
		Инициализация(Ложь);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПослеОтправкиНаСервере()
	
	УведомлениеОтправлено = УведомлениеОтправлено(Объект.Ссылка);
	УправлениеФормой(ЭтаФорма);
	ПрорисоватьСтатус(ЭтаФорма);
	
	Возврат УведомлениеОтправлено;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтекстЭДОСервер()
	
	Возврат ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
КонецФункции

&НаСервереБезКонтекста
Функция УведомлениеОтправлено(Ссылка)
	
	СтатусОтправки = КонтекстЭДОСервер().ПолучитьСтатусОтправкиОбъекта(Ссылка);
	
	УведомлениеОтправлено =
		ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> Перечисления.СтатусыОтправки.ВКонверте;
	
	Возврат УведомлениеОтправлено;
	
КонецФункции

&НаСервере
Процедура СохранитьСтатусОтправкиУведомления()
	
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиУведомления(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУникальныйИдентификаторДоверенности(Доверенность)
	
	УникальныйИдентификаторДоверенности = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦиклыОбмена.Ссылка КАК Ссылка,
	               |	ЦиклыОбмена.Тип КАК Тип
	               |ПОМЕСТИТЬ ВТЦиклОбмена
	               |ИЗ
	               |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
	               |ГДЕ
	               |	ЦиклыОбмена.Предмет = &Предмет
	               |	И ЦиклыОбмена.Тип = &Тип
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТранспортноеСообщение.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТТранспортныеСообщения
	               |ИЗ
	               |	ВТЦиклОбмена КАК ВТЦиклОбмена
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	               |		ПО ВТЦиклОбмена.Ссылка = ТранспортноеСообщение.ЦиклОбмена
	               |ГДЕ
	               |	ТранспортноеСообщение.Тип = &ТипТС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение КАК ТранспортноеСообщение,
	               |	СодержимоеТранспортныхКонтейнеров.ИмяФайла КАК ИмяФайла,
	               |	СодержимоеТранспортныхКонтейнеров.Тип КАК Тип
	               |ИЗ
	               |	ВТТранспортныеСообщения КАК ВТТранспортныеСообщения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	               |		ПО ВТТранспортныеСообщения.Ссылка = СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение
	               |ГДЕ
	               |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипТК";
	
	Запрос.УстановитьПараметр("Предмет", Доверенность);	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыЦикловОбмена.Представление);
	Запрос.УстановитьПараметр("ТипТС", Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП);
	Запрос.УстановитьПараметр("ТипТК", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Представление);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ СтрНайти(Выборка.ИмяФайла, "xml") = 0 Тогда
			УникальныйИдентификаторДоверенности = Лев(Прав(Выборка.ИмяФайла, 40), 36);
		КонецЕсли;

	КонецЦикла;
		
	Возврат УникальныйИдентификаторДоверенности;
КонецФункции 

&НаСервере
Процедура РодительскаяДоверенностьПриИзмененииНаСервере()
	
	// перед заполнением, очистим реквизиты
	Реквизиты = Метаданные.Справочники.ЗаявленияОбОтзывеМЧДФНС.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.Имя = "Организация" ИЛИ Реквизит.Имя = "ВерсияФормата" ИЛИ Реквизит.Имя = "РодительскаяДоверенность"
			ИЛИ ТипЗнч(Реквизит.Имя) = Тип("ХранилищеЗначения") Тогда
			
			Продолжить;
		КонецЕсли;
		Если Объект.Свойство(Реквизит.Имя) Тогда
			Объект[Реквизит.Имя] = "";
		КонецЕсли;
	КонецЦикла;
	
	Объект.УдостоверенияЛичности.Очистить();
	Объект.ФИО.Очистить();
	Объект.Представители.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.РодительскаяДоверенность) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаОснованииДоверенности(Объект.РодительскаяДоверенность);
	
	ЭтоВерсия5_02 = ЗначениеЗаполнено(Объект.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Объект.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	
	Если ЭтоВерсия5_02 Тогда
		Представители.Очистить();
		Для каждого СтрокаПредставителя Из Объект.Представители Цикл
			ВставитьПредставителяВТаблицу(ЭтаФорма, СтрокаПредставителя, СтрокаПредставителя.Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительскаяДоверенностьПриИзменении(Элемент)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, "Значения полей заявления будут перезаполнены. Продолжить?", Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Представители.Очистить();
	РодительскаяДоверенностьПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаОснованииДоверенности(Доверенность)
	
	Если ЗначениеЗаполнено(Доверенность) Тогда
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		// заполнить общие данные
		ЗаполнитьЗначенияСвойств(ДокОбъект, Доверенность,
			"ДатаВыдачи, НомерДоверенности, Организация, КодНалоговогоОрганаПредставления,
			|Комментарий, НомерКорневойДоверенности, РегистрационныйНомерДоверенности");
		
		// заполнить данные доверителя
		ЗаполнитьЗначенияСвойств(ДокОбъект, Доверенность, "Доверитель, ДоверительФЛ_Гражданство,
			| ДоверительФЛ_ДатаРождения, ДоверительФЛ_ИНН, ДоверительФЛ_НомЕРН, ДоверительФЛ_ОГРН, ДоверительФЛ_СНИЛС,
			| ДоверительЮЛ_ИНН, ДоверительЮЛ_ИностраннаяОрганизация, ДоверительЮЛ_КодНПРег, ДоверительЮЛ_КПП, ДоверительЮЛ_НаимОрг,
			| ДоверительЮЛ_НаимРегОрг, ДоверительЮЛ_ОГРН, ДоверительЮЛ_РегНомер");
		
		// заполнить данные лица-представителя доверителя
		ЗаполнитьЗначенияСвойств(ДокОбъект, Доверенность,
			"ЛицоБезДовФЛ, ЛицоБезДовФЛ_Гражданство, ЛицоБезДовФЛ_ДатаРождения, ЛицоБезДовФЛ_Должность,
			| ЛицоБезДовФЛ_ИНН, ЛицоБезДовФЛ_НомЕРН, ЛицоБезДовФЛ_ОГРН, ЛицоБезДовФЛ_СНИЛС, ЛицоБезДовЮЛ, ЛицоБезДовЮЛ_ИНН,
			| ЛицоБезДовЮЛ_КПП, ЛицоБезДовЮЛ_НаимОрг, ЛицоБезДовЮЛ_ОГРН");
		
		Для каждого Стр из Доверенность.ФИО Цикл
			НоваяСтрока = ДокОбъект.ФИО.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		КонецЦикла;
		Для каждого Стр из Доверенность.УдостоверенияЛичности Цикл
			НоваяСтрока = ДокОбъект.УдостоверенияЛичности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		КонецЦикла;
		
		ПредставителиТЧ = ПолучитьПредставителейИзТЧДоверенности(Доверенность);
		
		Если ПредставителиТЧ.Количество() = 0 Тогда
			НоваяСтрока = ДокОбъект.Представители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Доверенность);
			
			СтрокиФИО = ДокОбъект.ФИО.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
			НоваяСтрока.ПредставительФЛ_Фамилия = ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Фамилия, "");
			НоваяСтрока.ПредставительФЛ_Имя = ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Имя, "");
			НоваяСтрока.ПредставительФЛ_Отчество = ?(СтрокиФИО.Количество() <> 0, СтрокиФИО[0].Отчество, "");
			КоличествоСтрокФИО = СтрокиФИО.Количество();
			Для НомерСКонца = 1 По КоличествоСтрокФИО Цикл
				ДокОбъект.ФИО.Удалить(СтрокиФИО[КоличествоСтрокФИО - НомерСКонца]);
			КонецЦикла;
			СтрокиУдостоверений = ДокОбъект.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ")));
			КоличествоСтрокУдостоверений = СтрокиУдостоверений.Количество();
			НоваяСтрока.ПредставительФЛ_ВидДок = ?(СтрокиУдостоверений.Количество() <> 0,
				СтрокиУдостоверений[0].ВидДок, ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка"));
			НоваяСтрока.ПредставительФЛ_СерДок = ?(СтрокиУдостоверений.Количество() <> 0,
				СтрокиУдостоверений[0].СерДок, "");
			НоваяСтрока.ПредставительФЛ_НомДок = ?(СтрокиУдостоверений.Количество() <> 0,
				СтрокиУдостоверений[0].НомДок, "");
			НоваяСтрока.ПредставительФЛ_ДатаДок = ?(СтрокиУдостоверений.Количество() <> 0,
				СтрокиУдостоверений[0].ДатаДок, Неопределено);
			НоваяСтрока.ПредставительФЛ_ВыдДок = ?(СтрокиУдостоверений.Количество() <> 0,
				СтрокиУдостоверений[0].ВыдДок, "");
			НоваяСтрока.ПредставительФЛ_КодВыдДок = ?(СтрокиУдостоверений.Количество() <> 0,
				СтрокиУдостоверений[0].КодВыдДок, "");
			НоваяСтрока.ПредставительИспользуется = Истина;
			Для НомерСКонца = 1 По КоличествоСтрокУдостоверений Цикл
				ДокОбъект.УдостоверенияЛичности.Удалить(СтрокиУдостоверений[КоличествоСтрокУдостоверений - НомерСКонца]);
			КонецЦикла;
			
		Иначе
			Для каждого Стр из ПредставителиТЧ Цикл
				НоваяСтрока = ДокОбъект.Представители.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
				НоваяСтрока.ПредставительИспользуется = Истина;
			КонецЦикла;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
		
		ЭтоВерсия5_02 = ЗначениеЗаполнено(Объект.ВерсияФормата)
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Объект.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
		
		Объект.ДоверенностьВыданаВПорядкеПередоверия = ЗначениеЗаполнено(Объект.НомерКорневойДоверенности);
		
		ОбновитьПредставителиПредставление(ЭтаФорма);
		ОбновитьПредставителей(ЭтаФорма);
		
		Объект.ДатаОтзыва = ТекущаяДата();
		Если НЕ ЗначениеЗаполнено(Объект.РодительскаяДоверенность) Тогда
			Объект.РодительскаяДоверенность = Доверенность;
		КонецЕсли;
		Объект.УникальныйИдентификаторДоверенности = ПолучитьУникальныйИдентификаторДоверенности(Доверенность);
		Если ЭтоВерсия5_02 И НЕ ЗначениеЗаполнено(Объект.РегистрационныйНомерДоверенности) Тогда
			Объект.РегистрационныйНомерДоверенности = Объект.УникальныйИдентификаторДоверенности;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставителиПредставление(Форма)
	
	Для каждого СтрокаПредставителя Из Форма.Объект.Представители Цикл
		Если СтрокаПредставителя.ПредставительИспользуется Тогда
			Форма.Объект.ПредставителиПредставление = Строка(СтрокаПредставителя.Представитель);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставителейИзТЧДоверенности(Доверенность);
	
	ПредставителиТЧ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиФНСПредставители.Ссылка КАК Ссылка,
	|	МашиночитаемыеДоверенностиФНСПредставители.НомерСтроки КАК НомерСтроки,
	|	МашиночитаемыеДоверенностиФНСПредставители.Представитель КАК Представитель,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительЮЛ_НаимОрг КАК ПредставительЮЛ_НаимОрг,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительЮЛ_ИНН КАК ПредставительЮЛ_ИНН,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительЮЛ_КПП КАК ПредставительЮЛ_КПП,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительЮЛ_ОГРН КАК ПредставительЮЛ_ОГРН,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_Фамилия КАК ПредставительФЛ_Фамилия,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_Имя КАК ПредставительФЛ_Имя,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_Отчество КАК ПредставительФЛ_Отчество,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_ИНН КАК ПредставительФЛ_ИНН,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_НомЕРН КАК ПредставительФЛ_НомЕРН,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_ОГРН КАК ПредставительФЛ_ОГРН,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_СНИЛС КАК ПредставительФЛ_СНИЛС,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_Гражданство КАК ПредставительФЛ_Гражданство,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_ДатаРождения КАК ПредставительФЛ_ДатаРождения,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_ВидДок КАК ПредставительФЛ_ВидДок,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_СерДок КАК ПредставительФЛ_СерДок,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_НомДок КАК ПредставительФЛ_НомДок,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_ДатаДок КАК ПредставительФЛ_ДатаДок,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_ВыдДок КАК ПредставительФЛ_ВыдДок,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_КодВыдДок КАК ПредставительФЛ_КодВыдДок,
	|	МашиночитаемыеДоверенностиФНСПредставители.Статус КАК Статус,
	|	МашиночитаемыеДоверенностиФНСПредставители.ПредставительЯвляетсяСотрудником КАК ПредставительЯвляетсяСотрудником,
	|	МашиночитаемыеДоверенностиФНСПредставители.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиФНС.Представители КАК МашиночитаемыеДоверенностиФНСПредставители
	|ГДЕ
	|	МашиночитаемыеДоверенностиФНСПредставители.Ссылка = &Доверенность";
	
	Запрос.УстановитьПараметр("Доверенность", Доверенность);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПредставительШаблон = ПолучитьШаблонПредставителя();
			ЗаполнитьЗначенияСвойств(ПредставительШаблон, Выборка);
			ПредставителиТЧ.Добавить(ПредставительШаблон);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПредставителиТЧ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьШаблонПредставителя()
	
	ШаблонПредставителя = Новый Структура;
	
	МетаданныеМашиночитаемыеДоверенностиФНС = Метаданные.Справочники.МашиночитаемыеДоверенностиФНС;
	МетаданныеМашиночитаемыеДоверенностиФНСТЧ = МетаданныеМашиночитаемыеДоверенностиФНС.ТабличныеЧасти.Представители.Реквизиты;
	
	Для каждого Элемент из МетаданныеМашиночитаемыеДоверенностиФНСТЧ Цикл
		ШаблонПредставителя.Вставить(Элемент.Имя, "");
	КонецЦикла;
	
	Возврат ШаблонПредставителя;
	
КонецФункции

#КонецОбласти