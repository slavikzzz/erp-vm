#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ЗагрузкаЭлементаСправочника

Функция ДанныеИзФайлаОбмена(ВходящиеДанные, ОбновлятьСуществующийИлиСсылка = Ложь, Подпись = Неопределено) Экспорт
	
	ДанныеЗаявления = Новый Структура;
	
	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;
	ДокументОбработки = ПодготовитьДокументDOM(ТекущиеДанные);
	
	Если ЭтоФайл Тогда
		ТекущиеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	ДанныеЗаявления.Вставить("ДанныеВыгрузки", ТекущиеДанные);
	
	ТекущиеДанные = Подпись;
	Если Подпись <> Неопределено Тогда
		Если ТипЗнч(Подпись) = Тип("ДвоичныеДанные") Тогда
			ТекущиеДанные = Подпись;
		ИначеЕсли ЭтоАдресВременногоХранилища(Подпись) Тогда
			ТекущиеДанные = ПолучитьИзВременногоХранилища(Подпись);
		ИначеЕсли ТипЗнч(Подпись) = Тип("Строка") И НайтиФайлы(Подпись).Количество() > 0 Тогда
			ТекущиеДанные = Новый ДвоичныеДанные(Подпись);
		КонецЕсли;
	КонецЕсли;
	ДанныеЗаявления.Вставить("ДанныеПодписи", ТекущиеДанные);
	
	СведенияФайла = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл");
	Если СведенияФайла.Количество() = 1 Тогда
		ЭлементВыборки = СведенияФайла[0];
		ИмяФайлаВыгрузки = ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИдФайл");
		Если ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
			ДанныеЗаявления.Вставить("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки + ".xml");
		КонецЕсли;
		ДанныеЗаявления.Вставить("ВерсияФормата", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ВерсФорм"));
	КонецЕсли;
	
	ЭтоВерсия5_02 = ДанныеЗаявления.Свойство("ВерсияФормата") И ЗначениеЗаполнено(ДанныеЗаявления.ВерсияФормата)
		И ОбщегоНазначенияЭДКОКлиентСервер.ЭтоВерсия(ДанныеЗаявления.ВерсияФормата, 2)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДанныеЗаявления.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	
	СведенияДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвЗаяв");
	Если СведенияДоверенности.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверенности[0];
		ДанныеЗаявления.Вставить("НомерДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НомДовер"));
		Если ЭтоВерсия5_02 Тогда
			ДанныеЗаявления.Вставить("РегистрационныйНомерДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@РегНомДовер"));
		Иначе
			ДанныеЗаявления.Вставить("УникальныйИдентификаторДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИдДовер"));
		КонецЕсли;
		ДанныеЗаявления.Вставить("ДатаВыдачи", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаНач", '00010101'));
		ДанныеЗаявления.Вставить("ДатаОтзыва", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаОтз", '00010101'));
		ДанныеЗаявления.Вставить("СведенияОбИнформационнойСистеме", ПолучитьЗначениеДокумента(ЭлементВыборки, "СведСистОтм", ""));
		ДанныеЗаявления.Вставить("ПричинаОтзыва", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ПричОтз", ""));
		ДанныеЗаявления.Вставить("КодНалоговогоОрганаПредставления", ПолучитьЗначениеДокумента(ДокументОбработки, "//Файл/Документ/@КодНО", ""));
	КонецЕсли;
	
	ДанныеЗаявления.Вставить("ФИО", Новый Массив);
	ДанныеЗаявления.Вставить("УдостоверенияЛичности", Новый Массив);
	ДанныеЗаявления.Вставить("ТипОрганизации", "");
	СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/НПЮЛ");
	СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/НПФЛ");
	СведенияДоверителяИО = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/ИО");
	СведенияДоверителяП = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/СвДоверщП");
	
	Если СведенияДоверителяЮЛ.Количество() = 1 Тогда
		ДанныеЗаявления.ТипОрганизации = "ЮЛ";
		СведенияДоверителя = СведенияДоверителяЮЛ;
	ИначеЕсли СведенияДоверителяФЛ.Количество() = 1 Тогда
		ДанныеЗаявления.ТипОрганизации = "ФЛ";
		СведенияДоверителя = СведенияДоверителяФЛ;
	ИначеЕсли НЕ ЭтоВерсия5_02 ИЛИ СведенияДоверителяИО.Количество() = 1 Тогда
		ДанныеЗаявления.ТипОрганизации = "ИО";
		СведенияДоверителя = СведенияДоверителяИО;
	Иначе
		ДанныеЗаявления.ТипОрганизации = "П";
		СведенияДоверителя = СведенияДоверителяП;
	КонецЕсли;
	ДанныеЗаявления.Вставить("ДоверенностьВыданаВПорядкеПередоверия", ДанныеЗаявления.ТипОрганизации = "П");
	
	РеквизитыПоискаОрганизации = Новый Соответствие;
	
	Если СведенияДоверителя.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверителя[0];
		Если ДанныеЗаявления.ТипОрганизации = "ЮЛ" Тогда
			ДанныеЗаявления.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимОрг"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРН"));
			
			ДанныеЗаявления.Вставить("ЛицоБезДовФЛ_Должность", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОрг/@Должность"));
			
			СведенияЛицоБезДовЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
				"/Файл/Документ/СвДоверит/НПЮЛ/СвРукОрг/СвОрг");
			ЭлементВыборкиЛицоБезДовЮЛ = ?(СведенияЛицоБезДовЮЛ.Количество() = 1,
				СведенияЛицоБезДовЮЛ[0], Неопределено);
			
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_НаимОрг", ?(ЭлементВыборкиЛицоБезДовЮЛ = Неопределено, "",
				ПолучитьЗначениеДокумента(ЭлементВыборкиЛицоБезДовЮЛ, "@НаимОрг")));
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_ИНН", ?(ЭлементВыборкиЛицоБезДовЮЛ = Неопределено, "",
				ПолучитьЗначениеДокумента(ЭлементВыборкиЛицоБезДовЮЛ, "@ИННЮЛ")));
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_КПП", ?(ЭлементВыборкиЛицоБезДовЮЛ = Неопределено, "",
				ПолучитьЗначениеДокумента(ЭлементВыборкиЛицоБезДовЮЛ, "@КПП")));
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_ОГРН", ?(ЭлементВыборкиЛицоБезДовЮЛ = Неопределено, "",
				ПолучитьЗначениеДокумента(ЭлементВыборкиЛицоБезДовЮЛ, "@ОГРН", "")));
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеЗаявления.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеЗаявления.ДоверительЮЛ_КПП);
			
		ИначеЕсли ДанныеЗаявления.ТипОрганизации = "ИО" Тогда
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
			ДанныеЗаявления.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимИО"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			
			ПризнакГражданства = ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ПрГражд");
			Если ПризнакГражданства = 1 Тогда
				ДанныеЗаявления.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.Россия);
			ИначеЕсли ПризнакГражданства = 3 Тогда
				ДанныеЗаявления.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.ПустаяСсылка());
			Иначе
				ДанныеЗаявления.Вставить("ДоверительФЛ_Гражданство",
				ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			КонецЕсли;
			ДанныеЗаявления.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ИННФЛ", ""));
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеЗаявления.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеЗаявления.ДоверительЮЛ_КПП);
			
		ИначеЕсли ДанныеЗаявления.ТипОрганизации = "ФЛ" Тогда
			ДанныеЗаявления.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННФЛ", ""));
			ДанныеЗаявления.Вставить("ДоверительФЛ_НомЕРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НомЕРН", ""));
			ДанныеЗаявления.Вставить("ДоверительФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки, "@СНИЛС", ""));
			ДанныеЗаявления.Вставить("ДоверительФЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРНИП", ""));
			ДанныеЗаявления.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Гражданство",
				Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеЗаявления.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаРожд",
				'00010101'));
			
			ДокументИП = Новый Структура;
			СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@СерНомДок"));
			ДокументИП.Вставить("СерДок", СерияНомер.Серия);
			ДокументИП.Вставить("НомДок", СерияНомер.Номер);
			ДокументИП.Вставить("ДатаДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@ДатаДок", '00010101'));
			ДокументИП.Вставить("ВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@ВыдДок"));
			ДокументИП.Вставить("КодВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@КодВыдДок"));
			ДокументИП.Вставить("ВидДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@КодВидДок",
				Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
			ДокументИП.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ);
			ДанныеЗаявления.УдостоверенияЛичности.Добавить(ДокументИП);
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеЗаявления.ДоверительФЛ_ИНН);
			
		ИначеЕсли ДанныеЗаявления.ТипОрганизации = "П" Тогда
			СведенияОрганизацииДоверителя = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
				"/Файл/Документ/СвДоверит/СвДоверщП/СвОрг");
			ЭлементВыборкиОрганизаци = ?(СведенияОрганизацииДоверителя.Количество() = 1,
				СведенияОрганизацииДоверителя[0], Неопределено);
			
			ДанныеЗаявления.Вставить("ДоверительЮЛ_НаимОрг", ?(ЭлементВыборкиОрганизаци = Неопределено, "",
				ПолучитьЗначениеДокумента(ЭлементВыборкиОрганизаци, "@НаимОрг")));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ИНН", ?(ЭлементВыборкиОрганизаци = Неопределено, "",
				ПолучитьЗначениеДокумента(ЭлементВыборкиОрганизаци, "@ИННЮЛ")));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_КПП", ?(ЭлементВыборкиОрганизаци = Неопределено, "",
				ПолучитьЗначениеДокумента(ЭлементВыборкиОрганизаци, "@КПП")));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ОГРН", ?(ЭлементВыборкиОрганизаци = Неопределено, "",
				ПолучитьЗначениеДокумента(ЭлементВыборкиОрганизаци, "@ОГРН", "")));
			
			ДанныеЗаявления.Вставить(?(ЭлементВыборкиОрганизаци = Неопределено, "ДоверительФЛ_ИНН", "ЛицоБезДовФЛ_ИНН"),
				ПолучитьЗначениеДокумента(ЭлементВыборки, "СвФЛ/@ИННФЛ", ""));
			ДанныеЗаявления.Вставить(?(ЭлементВыборкиОрганизаци = Неопределено, "ДоверительФЛ_НомЕРН", "ЛицоБезДовФЛ_НомЕРН"),
				ПолучитьЗначениеДокумента(ЭлементВыборки, "СвФЛ/@НомЕРН", ""));
			ДанныеЗаявления.Вставить(?(ЭлементВыборкиОрганизаци = Неопределено, "ДоверительФЛ_СНИЛС", "ЛицоБезДовФЛ_СНИЛС"),
				ПолучитьЗначениеДокумента(ЭлементВыборки, "СвФЛ/@СНИЛС"));
			ДанныеЗаявления.Вставить(?(ЭлементВыборкиОрганизаци = Неопределено, "ДоверительФЛ_ОГРН", "ЛицоБезДовФЛ_ОГРН"),
				ПолучитьЗначениеДокумента(ЭлементВыборки, "СвФЛ/@ОГРНИП", ""));
			ДанныеЗаявления.Вставить(?(ЭлементВыборкиОрганизаци = Неопределено,
				"ДоверительФЛ_Гражданство", "ЛицоБезДовФЛ_Гражданство"),
				ПолучитьЗначениеДокумента(ЭлементВыборки, "СвФЛ/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеЗаявления.Вставить(?(ЭлементВыборкиОрганизаци = Неопределено,
				"ДоверительФЛ_ДатаРождения", "ЛицоБезДовФЛ_ДатаРождения"),
				ПолучитьЗначениеДокумента(ЭлементВыборки, "СвФЛ/@ДатаРожд", '00010101'));
			
			ДокументФЛ = Новый Структура;
			СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(ЭлементВыборки, "СвФЛ/УдЛичн/@СерНомДок"));
			ДокументФЛ.Вставить("СерДок", СерияНомер.Серия);
			ДокументФЛ.Вставить("НомДок", СерияНомер.Номер);
			ДокументФЛ.Вставить("ДатаДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвФЛ/УдЛичн/@ДатаДок", '00010101'));
			ДокументФЛ.Вставить("ВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвФЛ/УдЛичн/@ВыдДок"));
			ДокументФЛ.Вставить("КодВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвФЛ/УдЛичн/@КодВыдДок"));
			ДокументФЛ.Вставить("ВидДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвФЛ/УдЛичн/@КодВидДок",
				Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
			ДокументФЛ.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ);
			ДанныеЗаявления.УдостоверенияЛичности.Добавить(ДокументФЛ);
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеЗаявления.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеЗаявления.ДоверительЮЛ_КПП);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоВерсия5_02 Тогда
		ДанныеЗаявления.Вставить("Представители", Новый Массив);
	КонецЕсли;
	СведенияПредставителей = ?(ЭтоВерсия5_02,
		ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвЗаяв/СвПдтвУП"), Неопределено);
	Если СведенияПредставителей <> Неопределено И СведенияПредставителей.Количество() = 1 Тогда
		ЭлементВыборки = СведенияПредставителей[0];
		
		СтрокаПредставителя = Новый Структура;
		
		СведенияОрганизацииПредставителя = ПолучитьВыборкуЭлементовDOM(ДокументОбработки,
			"/Файл/Документ/СвЗаяв/СвПдтвУП/СвОрг");
		ЭлементВыборкиОрганизациПредставителя = ?(СведенияОрганизацииПредставителя.Количество() = 1,
			СведенияОрганизацииПредставителя[0], Неопределено);
		
		СтрокаПредставителя.Вставить("ПредставительЮЛ_НаимОрг", ?(ЭлементВыборкиОрганизациПредставителя = Неопределено, "",
			ПолучитьЗначениеДокумента(ЭлементВыборкиОрганизациПредставителя, "@НаимОрг")));
		СтрокаПредставителя.Вставить("ПредставительЮЛ_ИНН", ?(ЭлементВыборкиОрганизациПредставителя = Неопределено, "",
			ПолучитьЗначениеДокумента(ЭлементВыборкиОрганизациПредставителя, "@ИННЮЛ")));
		СтрокаПредставителя.Вставить("ПредставительЮЛ_КПП", ?(ЭлементВыборкиОрганизациПредставителя = Неопределено, "",
			ПолучитьЗначениеДокумента(ЭлементВыборкиОрганизациПредставителя, "@КПП")));
		СтрокаПредставителя.Вставить("ПредставительЮЛ_ОГРН", ?(ЭлементВыборкиОрганизациПредставителя = Неопределено, "",
			ПолучитьЗначениеДокумента(ЭлементВыборкиОрганизациПредставителя, "@ОГРН", "")));
		
		СтрокаПредставителя.Вставить("ПредставительФЛ_ИНН",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "СведФизЛ/@ИННФЛ", ""));
		СтрокаПредставителя.Вставить("ПредставительФЛ_НомЕРН",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "СведФизЛ/@НомЕРН", ""));
		СтрокаПредставителя.Вставить("ПредставительФЛ_ОГРН",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "СведФизЛ/@ОГРНИП", ""));
		СтрокаПредставителя.Вставить("ПредставительФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки, "СведФизЛ/@СНИЛС"));
		СтрокаПредставителя.Вставить("ПредставительФЛ_Гражданство",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "СведФизЛ/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
		СтрокаПредставителя.Вставить("ПредставительФЛ_ДатаРождения",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "СведФизЛ/@ДатаРожд", '00010101'));
		
		СтрокаПредставителя.Вставить("ПредставительФЛ_Фамилия",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "СведФизЛ/ФИО/@Фамилия"));
		СтрокаПредставителя.Вставить("ПредставительФЛ_Имя",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "СведФизЛ/ФИО/@Имя"));
		СтрокаПредставителя.Вставить("ПредставительФЛ_Отчество",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "СведФизЛ/ФИО/@Отчество", ""));
		
		СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(ЭлементВыборки,
			"СведФизЛ/УдЛичн/@СерНомДок"));
		СтрокаПредставителя.Вставить("ПредставительФЛ_ВидДок",
			ПолучитьЗначениеДокумента(ЭлементВыборки, "СведФизЛ/УдЛичн/@КодВидДок",
			Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
		СтрокаПредставителя.Вставить("ПредставительФЛ_СерДок", СерияНомер.Серия);
		СтрокаПредставителя.Вставить("ПредставительФЛ_НомДок", СерияНомер.Номер);
		СтрокаПредставителя.Вставить("ПредставительФЛ_ДатаДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "СведФизЛ/УдЛичн/@ДатаДок", '00010101'));
		СтрокаПредставителя.Вставить("ПредставительФЛ_ВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "СведФизЛ/УдЛичн/@ВыдДок", ""));
		СтрокаПредставителя.Вставить("ПредставительФЛ_КодВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "СведФизЛ/УдЛичн/@КодВыдДок", ""));
		
		ПредставительЯвляетсяСотрудником =
			ДанныеЗаявления.Свойство("ДоверительЮЛ_НаимОрг") И СтрокаПредставителя.Свойство("ПредставительЮЛ_НаимОрг")
			И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_НаимОрг)
			И ДанныеЗаявления.ДоверительЮЛ_НаимОрг = СтрокаПредставителя.ПредставительЮЛ_НаимОрг
			И ДанныеЗаявления.Свойство("ДоверительЮЛ_ИНН") И СтрокаПредставителя.Свойство("ПредставительЮЛ_ИНН")
			И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН)
			И ДанныеЗаявления.ДоверительЮЛ_ИНН = СтрокаПредставителя.ПредставительЮЛ_ИНН
			И ДанныеЗаявления.Свойство("ДоверительЮЛ_КПП") И СтрокаПредставителя.Свойство("ПредставительЮЛ_КПП")
			И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_КПП)
			И ДанныеЗаявления.ДоверительЮЛ_КПП = СтрокаПредставителя.ПредставительЮЛ_КПП
			И ?(ДанныеЗаявления.Свойство("ДоверительЮЛ_ОГРН"), ДанныеЗаявления.ДоверительЮЛ_ОГРН, "") =
			?(СтрокаПредставителя.Свойство("ПредставительЮЛ_ОГРН"), СтрокаПредставителя.ПредставительЮЛ_ОГРН, "");
		
		Представитель = Неопределено;
		Если НЕ ПредставительЯвляетсяСотрудником И СтрокаПредставителя.Свойство("ПредставительЮЛ_ИНН")
			И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН) Тогда
			
			Представитель = ПодыскатьИнформациюВладельца("Контрагенты,Организации",
				СтрокаПредставителя.ПредставительЮЛ_ИНН, СтрокаПредставителя.ПредставительЮЛ_КПП);
		КонецЕсли;
		
		Если НЕ СтрокаПредставителя.Свойство("ПредставительЮЛ_ИНН")
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН)
			И НЕ ЗначениеЗаполнено(Представитель) И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ОГРН) Тогда
			
			Представитель = ПодыскатьИнформациюВладельца("Контрагенты", СтрокаПредставителя.ПредставительФЛ_ИНН);
		КонецЕсли;
		
		Если НЕ СтрокаПредставителя.Свойство("ПредставительЮЛ_ИНН")
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН) ИЛИ ПредставительЯвляетсяСотрудником)
			И НЕ ЗначениеЗаполнено(Представитель) Тогда
			
			Представитель = ПодыскатьИнформациюВладельца("ФизическиеЛица", СтрокаПредставителя.ПредставительФЛ_ИНН);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Представитель) И СтрокаПредставителя.Свойство("ПредставительЮЛ_НаимОрг")
			И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_НаимОрг) Тогда
			
			Представитель = СтрокаПредставителя.ПредставительЮЛ_НаимОрг;
		КонецЕсли;
		
		Представитель_ЮридическоеЛицо = СтрокаПредставителя.Свойство("ПредставительЮЛ_ИНН")
			И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН);
		
		СтрокаПредставителя.Вставить("Представитель", Представитель);
		СтрокаПредставителя.Вставить("ПредставительЯвляетсяСотрудником", ПредставительЯвляетсяСотрудником);
		СтрокаПредставителя.Вставить("Идентификатор", Новый УникальныйИдентификатор);
		СтрокаПредставителя.Вставить("ПредставительИспользуется", Истина);
		
		ДанныеЗаявления.Представители.Добавить(СтрокаПредставителя);
	КонецЕсли;
	
	СведенияПодписанта = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Подписант");
	Если СведенияПодписанта.Количество() = 1 Тогда
		ЭлементВыборки = СведенияПодписанта[0];
		
		НоваяСтрока = Новый Структура;
		
		ДанныеЗаявления.Вставить("ЛицоБезДовФЛ", "");
		ДанныеЗаявления.Вставить("ЛицоБезДовФЛ_Телефон", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Тлф"));
		НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(ЭлементВыборки, "ФИО/@Фамилия"));
		НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(ЭлементВыборки, "ФИО/@Имя"));
		НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(ЭлементВыборки, "ФИО/@Отчество"));
		Если ДанныеЗаявления.ТипОрганизации = "ФЛ"
			ИЛИ (ДанныеЗаявления.ТипОрганизации = "П" И ЭлементВыборкиОрганизаци = Неопределено) Тогда
			
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ);
		Иначе
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительРук);
			Если ДанныеЗаявления.ТипОрганизации = "ЮЛ" И ДанныеЗаявления.Свойство("ЛицоБезДовФЛ")
				И НЕ ЗначениеЗаполнено(ДанныеЗаявления.ЛицоБезДовФЛ) И (ЗначениеЗаполнено(НоваяСтрока.Фамилия)
				ИЛИ ЗначениеЗаполнено(НоваяСтрока.Имя) ИЛИ ЗначениеЗаполнено(НоваяСтрока.Отчество)) Тогда
				ДанныеЗаявления.ЛицоБезДовФЛ = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
				
		ДанныеЗаявления.ФИО.Добавить(НоваяСтрока);
	КонецЕсли;
	
	ДанныеЗаявления.Вставить("Доверитель",
		НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(), РеквизитыПоискаОрганизации));
	Если НЕ ЗначениеЗаполнено(ДанныеЗаявления.Доверитель) И ДанныеЗаявления.Свойство("ДоверительЮЛ_НаимОрг")
		И ЗначениеЗаполнено(ДанныеЗаявления.ДоверительЮЛ_НаимОрг) Тогда
		ДанныеЗаявления.Доверитель = ДанныеЗаявления.ДоверительЮЛ_НаимОрг;
	КонецЕсли;
	
	ДанныеЗаявления.Вставить("Организация", ?(Подпись = Неопределено
		ИЛИ НЕ ДанныеЗаявления.Свойство("Представитель")
		ИЛИ ТипЗнч(ДанныеЗаявления.Представитель) <> Тип("СправочникСсылка.Организации"),
		ДанныеЗаявления.Доверитель, ДанныеЗаявления.Представитель));
		
	Возврат ДанныеЗаявления;
	
КонецФункции

Функция ЗагрузитьЭлементИзФайлаОбмена(
		ВходящиеДанные,
		ОбновлятьСуществующийИлиСсылка = Ложь,
		Подпись = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("Ошибка", "");
	
	ДанныеПодготовленны = 0;
	КлючевыеРеквизиты = "";
	ТекстОшибки = "";
	Успешно = Истина;
	
	Попытка
		ДанныеЗаявления = ДанныеИзФайлаОбмена(ВходящиеДанные, ОбновлятьСуществующийИлиСсылка, Подпись);
	Исключение
		Результат.Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Успешно = Ложь;
	КонецПопытки;
	
	
	Если Успешно Тогда
		ЭтоВерсия5_02 = ЗначениеЗаполнено(ДанныеЗаявления.ВерсияФормата)
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДанныеЗаявления.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
		
		Если ДанныеЗаявления.ТипОрганизации = "ЮЛ" Тогда
			КлючевыеРеквизиты = "ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП";
		ИначеЕсли ДанныеЗаявления.ТипОрганизации = "ФЛ" Тогда
			КлючевыеРеквизиты = ?(ЭтоВерсия5_02, "ДоверительФЛ_СНИЛС", "ДоверительФЛ_ИНН");
		ИначеЕсли НЕ ЭтоВерсия5_02 ИЛИ ДанныеЗаявления.ТипОрганизации = "ИО" Тогда
			КлючевыеРеквизиты = "ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП";
		ИначеЕсли ЗначениеЗаполнено(ДанныеЗаявления.ДоверительЮЛ_НаимОрг)
			ИЛИ ЗначениеЗаполнено(ДанныеЗаявления.ДоверительЮЛ_ИНН)
			ИЛИ ЗначениеЗаполнено(ДанныеЗаявления.ДоверительЮЛ_КПП)
			ИЛИ ЗначениеЗаполнено(ДанныеЗаявления.ДоверительЮЛ_ОГРН) Тогда
			
			КлючевыеРеквизиты = "ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП";
		Иначе
			КлючевыеРеквизиты = "ДоверительФЛ_СНИЛС";
		КонецЕсли;
		
		КлючевыеРеквизиты = КлючевыеРеквизиты + ", ДатаВыдачи";
		
		КлючевыеРеквизиты = Новый Структура(КлючевыеРеквизиты);
		
		Для Каждого СтрокаКлюча Из КлючевыеРеквизиты Цикл
			Если ДанныеЗаявления.Свойство(СтрокаКлюча.Ключ) 
				И ЗначениеЗаполнено(ДанныеЗаявления[СтрокаКлюча.Ключ]) Тогда
				ДанныеПодготовленны = ДанныеПодготовленны + 1;
			ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнены реквизиты справочника';
									|en = 'Не заполнены реквизиты справочника'") + ":  " + СтрокаКлюча.Ключ;
			Иначе
				ТекстОшибки = ТекстОшибки + ", " + СтрокаКлюча.Ключ;
			КонецЕсли;
		КонецЦикла;
		
		Если КлючевыеРеквизиты.Количество() = ДанныеПодготовленны Тогда
			ТекущийЭлемент = ЗаписатьЭлементСправочника(ДанныеЗаявления, ОбновлятьСуществующийИлиСсылка);
			Результат.Ссылка = ТекущийЭлемент;
			Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
				Результат.Выполнено = Истина;
			Иначе
				Результат.Ошибка = НСтр("ru = 'Не удалось запись элемент справочника. Подробности в журнале регистрации';
										|en = 'Не удалось запись элемент справочника. Подробности в журнале регистрации'");
			КонецЕсли;
		Иначе
			Результат.Ошибка = ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

Функция ВыгрузитьЭлементВФайлОбмена(
		СправочникСсылка,
		ИдентификаторФайла = "",
		КодНалоговогоОрганаПолучателя = "",
		ОпределятьКодНалоговогоОрганаПолучателя = Ложь,
		ФорматДоверенностиПоПриказуФНС = Ложь,
		ПроверитьВыгрузку = Ложь,
		ПараметрыВозврата = Неопределено) Экспорт
	
	ПараметрыВозвратаВызова = Новый Структура;
	ПараметрыВозвратаВызова.Вставить("ВозвращатьАдресВоВременномХранилище", Ложь);
	ПараметрыВозвратаВызова.Вставить("ВозвращатьИмяФайлаСРасширением", 		Ложь);
	ПараметрыВозвратаВызова.Вставить("ВозвращатьПриложеннуюПодпись", 		Ложь);
	Если ПараметрыВозврата <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВозвратаВызова, ПараметрыВозврата);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Содержимое", 	"");
	Результат.Вставить("ИмяФайла", 		"");
	
	Если ПараметрыВозвратаВызова.ВозвращатьПриложеннуюПодпись Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СправочникСсылка,
			"ИмяФайлаВыгрузки, ФайлВырузки, ЭлектроннаяПодпись");
		ДанныеВыгрузки = РеквизитыОбъекта.ФайлВырузки.Получить();
		ДанныеПодписи = РеквизитыОбъекта.ЭлектроннаяПодпись.Получить();
		Если ЗначениеЗаполнено(РеквизитыОбъекта.ИмяФайлаВыгрузки) И ДанныеВыгрузки <> Неопределено
			И ДанныеПодписи <> Неопределено Тогда
			
			Результат = Новый Массив;
			
			АдресВыгрузки = ПоместитьВоВременноеХранилище(ДанныеВыгрузки, Новый УникальныйИдентификатор);
			Результат.Добавить(Новый Структура("Имя, Адрес", РеквизитыОбъекта.ИмяФайлаВыгрузки, АдресВыгрузки));
			
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
				РеквизитыОбъекта.ИмяФайлаВыгрузки).ИмяБезРасширения + "_SGN_"
				+ нрег(Строка(Новый УникальныйИдентификатор())) + ".sgn";
			АдресПодписи = ПоместитьВоВременноеХранилище(ДанныеПодписи, Новый УникальныйИдентификатор);
			Результат.Добавить(Новый Структура("Имя, Адрес", ИмяФайлаПодписи, АдресПодписи));
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьВыгрузку Тогда
		РезультатыПроверки = ПроверитьВозможностьВыгрузки(СправочникСсылка);
		
		Если РезультатыПроверки.Количество() <> 0 Тогда
			Для каждого РезультатПроверки Из РезультатыПроверки Цикл
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(РезультатПроверки.ТекстОшибки);
			КонецЦикла;
			
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
				НСтр("ru = 'Не удалось сформировать заявление на отзыв доверенности';
					|en = 'Не удалось сформировать заявление на отзыв доверенности'"));
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСправочника = ДанныеИзИнформационнойБазы(СправочникСсылка);
	
	ЭтоВерсия5_02 = ЗначениеЗаполнено(ДанныеСправочника.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДанныеСправочника.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	ЭтоВерсия5_03 = ЗначениеЗаполнено(ДанныеСправочника.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДанныеСправочника.ВерсияФормата + ".0.0", "5.03.0.0") >= 0;
	
	ИдентификаторФайла = ?(ЗначениеЗаполнено(ИдентификаторФайла), ИдентификаторФайла,
		?(ЭтоВерсия5_02, ДанныеСправочника.РегНомДовер, СправочникСсылка.УникальныйИдентификатор()));
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОрганаПолучателя) Тогда
		Если ОпределятьКодНалоговогоОрганаПолучателя И ЗначениеЗаполнено(ДанныеСправочника.Организация) Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ЭтоКрупнейший    = ДокументооборотСКО.ЭтоКрупнейший(ДанныеСправочника.Организация);
			КодНОКрупнейшего = ДокументооборотСКО.КодНОКрупнейшего(ДанныеСправочника.Организация);
			
			УстановитьПривилегированныйРежим(Ложь);
			КодНалоговогоОрганаПолучателя = ?(ЭтоКрупнейший,
				СокрЛП(КодНОКрупнейшего), ДанныеСправочника.КодНО);
		Иначе
			КодНалоговогоОрганаПолучателя = ДанныеСправочника.КодНО;
		КонецЕсли;
	КонецЕсли;
	ИННКПП = ?(ЗначениеЗаполнено(ДанныеСправочника.ДоверительЮЛ_ИНН),
		СокрЛП(ДанныеСправочника.ДоверительЮЛ_ИНН) + СокрЛП(ДанныеСправочника.ДоверительЮЛ_КПП),
		СокрЛП(ДанныеСправочника.ДоверительФЛ_ИНН));
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Результат.ИмяФайла = "ON_OFFDOVER_"
		+ КодНалоговогоОрганаПолучателя
		+ "_" + СокрЛП(ДанныеСправочника.КодНО)
		+ "_" + ИННКПП
		+ "_" + Формат(ДатаСеанса, "ДФ=yyyyMMdd")
		+ "_" + СокрЛП(ИдентификаторФайла);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// фомирование раздела Файл
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИдФайл", Результат.ИмяФайла);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВерсФорм", ?(ЭтоВерсия5_03, "5.03", ?(ЭтоВерсия5_02, "5.02", "5.01")));
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xsi:noNamespaceSchemaLocation",
		?(ЭтоВерсия5_03, "ON_OFFDOVER_1_884_00_05_03_01.xsd", ?(ЭтоВерсия5_02, "ON_OFFDOVER_1_884_00_05_02_01.xsd",
		"ON_OFFDOVER_1_884_00_05_01_01.xsd")), Ложь);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance", Ложь);

	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КодНО", СокрЛП(ДанныеСправочника.КодНО));
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КНД", ДанныеСправочника.КНД);
	
	// фомирование раздела Сведения о заявлении
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвЗаяв");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НомДовер", СокрЛП(ДанныеСправочника.Номер), Ложь);
	Если ЭтоВерсия5_02 Тогда
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "РегНомДовер", ДанныеСправочника.РегНомДовер);
	Иначе
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИдДовер", СокрЛП(ДанныеСправочника.УникальныйИдентификаторДоверенности));
	КонецЕсли;
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаНач", ДанныеСправочника.ДатаВыдачи);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаОтз", ДанныеСправочника.ДатаОтзыва);
	Если ЗначениеЗаполнено(ДанныеСправочника.ПричинаОтзыва) Тогда
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПричОтз", СокрЛП(ДанныеСправочника.ПричинаОтзыва), Истина);
	КонецЕсли;
	
	ОтзывПолномочийУВсехПредставителей = ОтзывПолномочийУВсехПредставителей(ДанныеСправочника);
	Если ЭтоВерсия5_02 И НЕ ОтзывПолномочийУВсехПредставителей Тогда
		// При отзыве доверенности в отношении всех уполномоченных представителей "СвПдтвУП" не заполняется
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвПдтвУП");
		
		Для каждого Представитель из ДанныеСправочника.Представители Цикл
			Если НЕ Представитель.ПредставительИспользуется Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Представитель.ПредставительЮЛ_ИНН) Тогда
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("СвОрг");
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", Представитель.ПредставительЮЛ_НаимОрг);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", Представитель.ПредставительЮЛ_ИНН);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", Представитель.ПредставительЮЛ_КПП);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", Представитель.ПредставительЮЛ_ОГРН);
				
				ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвОрг"
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Представитель.ПредставительФЛ_ИНН) Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("СведФизЛ");
				
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", Представитель.ПредставительФЛ_ИНН);
				Если ЭтоВерсия5_03 Тогда
					ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НомЕРН", Представитель.ПредставительФЛ_НомЕРН, Ложь);
				КонецЕсли;
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРНИП", Представитель.ПредставительФЛ_ОГРН, Ложь);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", Представитель.ПредставительФЛ_ДатаРождения, Ложь);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СНИЛС", Представитель.ПредставительФЛ_СНИЛС, Ложь);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", Представитель.ПредставительФЛ_Гражданство, Ложь);
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Фамилия", Представитель.ПредставительФЛ_Фамилия);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Имя", Представитель.ПредставительФЛ_Имя);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Отчество", Представитель.ПредставительФЛ_Отчество);
				ЗаписьXML.ЗаписатьКонецЭлемента(); // "ФИО"
				
				Если ТипЗнч(Представитель.ПредставительФЛ_ВидДок) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
					КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
					Представитель.ПредставительФЛ_ВидДок);
				Иначе
					КодВидаДокумента = Представитель.ПредставительФЛ_ВидДок;
				КонецЕсли;
				ВыгрузитьУдостоверениеУзла(ЗаписьXML,
					СокрЛП(КодВидаДокумента),
					СокрЛП(Представитель.ПредставительФЛ_СерДок),
					СокрЛП(Представитель.ПредставительФЛ_НомДок),
					Формат(Представитель.ПредставительФЛ_ДатаДок, "ДФ=dd.MM.yyyy"),
					СокрЛП(Представитель.ПредставительФЛ_ВыдДок),
					СокрЛП(Представитель.ПредставительФЛ_КодВыдДок));
				
				ЗаписьXML.ЗаписатьКонецЭлемента(); // "СведФизЛ"
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвПдтвУП"
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвЗаяв"
	
	// фомирование раздела Сведения о доверителе
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвДоверит");
	
	Если (ЭтоВерсия5_02 И НЕ ДанныеСправочника.ДоверенностьВыданаВПорядкеПередоверия)
		ИЛИ НЕ ЭтоВерсия5_02 Тогда
		
		Если ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ИО" Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("ИО");
			
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимИО", СокрЛП(ДанныеСправочника.ДоверительЮЛ_НаимОрг));
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ДоверительЮЛ_ИНН);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ДоверительЮЛ_КПП);
				
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвРукОП");
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.ДоверительФЛ_ИНН, Ложь);
			
			Если ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "1");
			ИначеЕсли ЗначениеЗаполнено(ДанныеСправочника.ДоверительФЛ_Гражданство) Тогда
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "2");
			Иначе
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "3");
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		ИначеЕсли ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ЮЛ" Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("НПЮЛ");
			
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", СокрЛП(ДанныеСправочника.ДоверительЮЛ_НаимОрг));
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ДоверительЮЛ_ИНН);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ДоверительЮЛ_КПП);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.ДоверительЮЛ_ОГРН);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвРукОрг");
		
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Должность", СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_Должность), Ложь);
			Если ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовЮЛ_ИНН) Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("СвОрг");
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", СокрЛП(ДанныеСправочника.ЛицоБезДовЮЛ_НаимОрг));
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ЛицоБезДовЮЛ_ИНН);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ЛицоБезДовЮЛ_КПП);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.ЛицоБезДовЮЛ_ОГРН, Ложь);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвРукОрг"
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "НПЮЛ"
			
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("НПФЛ");
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.ДоверительФЛ_ИНН);
			Если ЭтоВерсия5_03 Тогда
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НомЕРН", ДанныеСправочника.ДоверительФЛ_НомЕРН, Ложь);
			КонецЕсли;
			Если ЭтоВерсия5_02 Тогда
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СНИЛС", ДанныеСправочника.ДоверительФЛ_СНИЛС, Ложь);
			КонецЕсли;
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРНИП", ДанныеСправочника.ДоверительФЛ_ОГРН, Ложь);
			Если ЭтоВерсия5_02 Тогда
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", ДанныеСправочника.ДоверительФЛ_Гражданство, Ложь);
			КонецЕсли;
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ДанныеСправочника.ДоверительФЛ_ДатаРождения, Ложь);
			
			Если ТипЗнч(ДанныеСправочника.ЛицоБезДовФЛ_ВидДок) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
				КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
					ДанныеСправочника.ЛицоБезДовФЛ_ВидДок);
			Иначе
				КодВидаДокумента = ДанныеСправочника.ЛицоБезДовФЛ_ВидДок;
			КонецЕсли;
			ВыгрузитьУдостоверениеУзла(ЗаписьXML,
					СокрЛП(КодВидаДокумента),
					СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_СерДок),
					СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_НомДок),
					Формат(ДанныеСправочника.ЛицоБезДовФЛ_ДатаДок, "ДФ=dd.MM.yyyy"),
					СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_ВыдДок),
					СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_КодВыдДок));
					
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
	КонецЕсли;
	Если ЭтоВерсия5_02 И ДанныеСправочника.ДоверенностьВыданаВПорядкеПередоверия Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвДоверщП");
		
		ДоверительЭтоОрганизация = (ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ИО"
			ИЛИ ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ЮЛ");
		
		Если ДоверительЭтоОрганизация Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвОрг");
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", СокрЛП(ДанныеСправочника.ДоверительЮЛ_НаимОрг));
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ДоверительЮЛ_ИНН);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ДоверительЮЛ_КПП);
				ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.ДоверительЮЛ_ОГРН);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвОрг"
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвФЛ");
		
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ",
			?(ДоверительЭтоОрганизация, ДанныеСправочника.ЛицоБезДовФЛ_ИНН, ДанныеСправочника.ДоверительФЛ_ИНН), Ложь);
		Если ЭтоВерсия5_03 Тогда
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НомЕРН",
				?(ДоверительЭтоОрганизация, ДанныеСправочника.ЛицоБезДовФЛ_НомЕРН, ДанныеСправочника.ДоверительФЛ_НомЕРН), Ложь);
		КонецЕсли;
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРНИП",
			?(ДоверительЭтоОрганизация, ДанныеСправочника.ЛицоБезДовФЛ_ОГРН, ДанныеСправочника.ДоверительФЛ_ОГРН), Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СНИЛС",
			?(ДоверительЭтоОрганизация, ДанныеСправочника.ЛицоБезДовФЛ_СНИЛС, ДанныеСправочника.ДоверительФЛ_СНИЛС));
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ?(ДоверительЭтоОрганизация,
			ДанныеСправочника.ЛицоБезДовФЛ_ДатаРождения, ДанныеСправочника.ДоверительФЛ_ДатаРождения), Ложь);
		
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", ?(ДоверительЭтоОрганизация,
			ДанныеСправочника.ЛицоБезДовФЛ_Гражданство, ДанныеСправочника.ДоверительФЛ_Гражданство), Ложь);
		
		Если ТипЗнч(ДанныеСправочника.ЛицоБезДовФЛ_ВидДок) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
			КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
			ДанныеСправочника.ЛицоБезДовФЛ_ВидДок);
		Иначе
			КодВидаДокумента = ДанныеСправочника.ЛицоБезДовФЛ_ВидДок;
		КонецЕсли;
		ВыгрузитьУдостоверениеУзла(ЗаписьXML,
			СокрЛП(КодВидаДокумента),
			СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_СерДок),
			СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_НомДок),
			Формат(ДанныеСправочника.ЛицоБезДовФЛ_ДатаДок, "ДФ=dd.MM.yyyy"),
			СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_ВыдДок),
			СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_КодВыдДок));
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвФЛ"
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // "СвДоверщП"
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// фомирование раздела Сведения об подписанте доверителя
	ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
	Если ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовФЛ_Телефон) Тогда
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Тлф", СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_Телефон));
	КонецЕсли;
	ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
	ВыгрузитьФИОУзла(ЗаписьXML, СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_Фамилия),
		СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_Имя), СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_Отчество));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Результат.Содержимое = ЗаписьXML.Закрыть();
	
	Если ПараметрыВозвратаВызова.ВозвращатьИмяФайлаСРасширением Тогда
		Результат.ИмяФайла = Результат.ИмяФайла + ".xml";
	КонецЕсли;
	
	Если ПараметрыВозвратаВызова.ВозвращатьАдресВоВременномХранилище Тогда
		ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(Результат.Содержимое, "windows-1251");
		АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
		Результат = Новый Структура("Имя, Адрес", Результат.ИмяФайла, АдресФайла);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ПроверитьВозможностьВыгрузки(ОбъектИлиСсылка) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектИлиСсылка) = Тип("СправочникСсылка.ЗаявленияОбОтзывеМЧДФНС") Тогда
		Заявление = ОбъектИлиСсылка.ПолучитьОбъект();
	Иначе
		Заявление = ОбъектИлиСсылка;
	КонецЕсли;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ГодДатыСеанса = Год(ДатаСеанса);
	МинимальнаяДата = Дата(1900, 1, 1);
	ГодМаксимальнойДаты = Цел((ГодДатыСеанса + 50) / 100) * 100 + 99;
	МаксимальнаяДата = Дата(ГодМаксимальнойДаты, 1, 1);
	МаксимальнаяДата = КонецГода(МаксимальнаяДата);
	
	ЭтоВерсия5_02 = ЗначениеЗаполнено(Заявление.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Заявление.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
	ЭтоВерсия5_03 = ЗначениеЗаполнено(Заявление.ВерсияФормата)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Заявление.ВерсияФормата + ".0.0", "5.03.0.0") >= 0;
	
	// основные
	Если ЭтоВерсия5_02 И НЕ ЗначениеЗаполнено(Заявление.РегистрационныйНомерДоверенности) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан единый регистрационный номер доверенности';
				|en = 'Не задан единый регистрационный номер доверенности'"), "РегистрационныйНомерДоверенности"));
		
	ИначеЕсли ЭтоВерсия5_02 И СтрДлина(Заявление.РегистрационныйНомерДоверенности) <> 36 Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Длина единого регистрационного номера доверенности не 36 символов';
				|en = 'Длина единого регистрационного номера доверенности не 36 символов'"),
			"РегистрационныйНомерДоверенности"));
	КонецЕсли;
	
	Если НЕ ЭтоВерсия5_02 И НЕ ЗначениеЗаполнено(Заявление.УникальныйИдентификаторДоверенности) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан уникальный идентификатор доверенности';
				|en = 'Не задан уникальный идентификатор доверенности'"), "УникальныйИдентификаторДоверенности"));
	КонецЕсли;
	
	Если НЕ ЭтоВерсия5_02 И НЕ СтрДлина(СокрЛП(Заявление.УникальныйИдентификаторДоверенности)) = 36 Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Уникальный идентификатор доверенности указан не верно. Он должен содержать 36 символов.';
				|en = 'Уникальный идентификатор доверенности указан не верно. Он должен содержать 36 символов.'"), "УникальныйИдентификаторДоверенности"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заявление.ДатаВыдачи) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана дата выдачи';
				|en = 'Не задана дата выдачи'"), "ДатаВыдачи"));
	ИначеЕсли Заявление.ДатаВыдачи < МинимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата выдачи не может быль раньше %1';
					|en = 'Дата выдачи не может быль раньше %1'"),
				Формат(МинимальнаяДата, "ДЛФ=Д")),
			"ДатаВыдачи"));
	ИначеЕсли Заявление.ДатаВыдачи > МаксимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата выдачи не может быль позднее %1';
					|en = 'Дата выдачи не может быль позднее %1'"),
				Формат(МаксимальнаяДата, "ДЛФ=Д")),
			"ДатаВыдачи"));
	КонецЕсли; 
	
	//Дата отзыва доверенности, проверить что бы она не была раньше, чем текущий день
	Если НЕ ЗначениеЗаполнено(Заявление.ДатаОтзыва) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана дата отзыва';
				|en = 'Не задана дата отзыва'"), "ДатаОтзыва"));
	КонецЕсли;
		
		//Дата отзыва доверенности, проверить что бы она не была раньше, чем Дата выдачи
	Если Заявление.ДатаОтзыва < Заявление.ДатаВыдачи Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Дата отзыва не может быть раньше даты выдачи';
				|en = 'Дата отзыва не может быть раньше даты выдачи'"), "ДатаОтзыва"));
	КонецЕсли;
	
	// доверитель
	
	Доверитель_ЮридическоеЛицо = ЗначениеЗаполнено(Заявление.ДоверительЮЛ_ИНН);
	
	Если Доверитель_ЮридическоеЛицо Тогда
		Если НЕ ЗначениеЗаполнено(Заявление.ДоверительЮЛ_НаимОрг) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано наименование организации доверителя';
					|en = 'Не задано наименование организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Заявление.ДоверительЮЛ_ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН организации доверителя';
					|en = 'Не задан ИНН организации доверителя'"), "Доверитель"));
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			Заявление.ДоверительЮЛ_ИНН, Ложь) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН организации доверителя';
					|en = 'Указан некорректный ИНН организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Заявление.ДоверительЮЛ_КПП) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан КПП организации доверителя';
					|en = 'Не задан КПП организации доверителя'"), "Доверитель"));
		ИначеЕсли СтрДлина(Заявление.ДоверительЮЛ_КПП) <> 9 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный КПП организации доверителя';
					|en = 'Указан некорректный КПП организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если (НЕ ЭтоВерсия5_02 ИЛИ НЕ Заявление.ДоверенностьВыданаВПорядкеПередоверия)
			И Заявление.ДоверительЮЛ_ИностраннаяОрганизация Тогда
			
			СтрокиФИО = Заявление.ФИО.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана фамилия руководителя обособленного подразделения доверителя';
						|en = 'Не задана фамилия руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано имя руководителя обособленного подразделения доверителя';
						|en = 'Не задано имя руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Заявление.ДоверительФЛ_ИНН)
				И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				Заявление.ДоверительФЛ_ИНН, Истина) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ИНН руководителя обособленного подразделения доверителя';
						|en = 'Указан некорректный ИНН руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
			
		Иначе
			Если (НЕ ЭтоВерсия5_02 ИЛИ НЕ Заявление.ДоверенностьВыданаВПорядкеПередоверия) И
				НЕ ЗначениеЗаполнено(Заявление.ДоверительЮЛ_ОГРН) Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан ОГРН организации доверителя';
						|en = 'Не задан ОГРН организации доверителя'"), "Доверитель"));
				
			ИначеЕсли ЗначениеЗаполнено(Заявление.ДоверительЮЛ_ОГРН) И СтрДлина(Заявление.ДоверительЮЛ_ОГРН) <> 13 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ОГРН организации доверителя';
						|en = 'Указан некорректный ОГРН организации доверителя'"), "Доверитель"));
			КонецЕсли;
			
			ЛицоБезДов_ЮридическоеЛицо = ЗначениеЗаполнено(Заявление.ЛицоБезДовЮЛ_ИНН);
			
			Если (НЕ ЭтоВерсия5_02 ИЛИ НЕ Заявление.ДоверенностьВыданаВПорядкеПередоверия) И ЛицоБезДов_ЮридическоеЛицо Тогда
				Если НЕ ЗначениеЗаполнено(Заявление.ЛицоБезДовЮЛ_НаимОрг) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задано наименование управляющей организации, действующей без доверенности';
							|en = 'Не задано наименование управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Заявление.ЛицоБезДовЮЛ_ИНН) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан ИНН управляющей организации, действующей без доверенности';
							|en = 'Не задан ИНН управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
					Заявление.ЛицоБезДовЮЛ_ИНН, Ложь) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ИНН управляющей организации, действующей без доверенности';
							|en = 'Указан некорректный ИНН управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Заявление.ЛицоБезДовЮЛ_КПП) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан КПП управляющей организации, действующей без доверенности';
							|en = 'Не задан КПП управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				ИначеЕсли СтрДлина(Заявление.ЛицоБезДовЮЛ_КПП) <> 9 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный КПП управляющей организации, действующей без доверенности';
							|en = 'Указан некорректный КПП управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Заявление.ЛицоБезДовЮЛ_ОГРН) И СтрДлина(Заявление.ЛицоБезДовЮЛ_ОГРН) <> 13 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ОГРН управляющей организации, действующей без доверенности';
							|en = 'Указан некорректный ОГРН управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
			КонецЕсли;
			
			Если (НЕ ЭтоВерсия5_02 ИЛИ НЕ Заявление.ДоверенностьВыданаВПорядкеПередоверия)
				И НЕ ЗначениеЗаполнено(Заявление.ЛицоБезДовФЛ_Должность) Тогда
				
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана должность физического лица со стороны доверителя';
						|en = 'Не задана должность физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			КонецЕсли;
			
			СтрокиФИО = Заявление.ФИО.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана фамилия физического лица со стороны доверителя';
						|en = 'Не задана фамилия физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			КонецЕсли;
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано имя физического лица со стороны доверителя';
						|en = 'Не задано имя физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			КонецЕсли;
			
			Если ЭтоВерсия5_02 И Заявление.ДоверенностьВыданаВПорядкеПередоверия Тогда
				СтрокиУдостоверений = Заявление.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
					ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
				
				Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВидДок) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан вид документа физического лица со стороны доверителя';
							|en = 'Не задан вид документа физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
				КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
					?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].ВидДок));
				Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
					И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
					И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Вид документа физического лица со стороны доверителя не поддерживается';
							|en = 'Вид документа физического лица со стороны доверителя не поддерживается'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
				Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтрокиУдостоверений[0].СерДок)
					+ СокрЛП(СтрокиУдостоверений[0].НомДок)) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не заданы серия и номер документа физического лица со стороны доверителя';
							|en = 'Не заданы серия и номер документа физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
				Если СтрокиУдостоверений.Количество() <> 0 И СтрДлина(СокрЛП(СтрокиУдостоверений[0].СерДок)
					+ СокрЛП(СтрокиУдостоверений[0].НомДок)) > 25 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Длина серии и номера документа физического лица со стороны доверителя больше 25 символов';
							|en = 'Длина серии и номера документа физического лица со стороны доверителя больше 25 символов'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
				Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ДатаДок) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задана дата выдачи документа физического лица со стороны доверителя';
							|en = 'Не задана дата выдачи документа физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				ИначеЕсли СтрокиУдостоверений[0].ДатаДок < МинимальнаяДата Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						СтрШаблон(
							НСтр("ru = 'Дата выдачи документа физического лица со стороны доверителя не может быль раньше %1';
								|en = 'Дата выдачи документа физического лица со стороны доверителя не может быль раньше %1'"),
							Формат(МинимальнаяДата, "ДЛФ=Д")),
						"ЛицоБезДовФЛ"));
				ИначеЕсли СтрокиУдостоверений[0].ДатаДок > МаксимальнаяДата Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						СтрШаблон(
							НСтр("ru = 'Дата выдачи документа физического лица со стороны доверителя не может быль позднее %1';
								|en = 'Дата выдачи документа физического лица со стороны доверителя не может быль позднее %1'"),
							Формат(МаксимальнаяДата, "ДЛФ=Д")),
						"ЛицоБезДовФЛ"));
				КонецЕсли;
				
				Если (СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].КодВыдДок))
					И КодВидаДокумента = "21" Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задано наименование органа, выдавшего документ физического лица со стороны доверителя';
							|en = 'Не задано наименование органа, выдавшего документ физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Заявление.ЛицоБезДовФЛ_ИНН)
					И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
					Заявление.ЛицоБезДовФЛ_ИНН, Истина) Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ИНН физического лица со стороны доверителя';
							|en = 'Указан некорректный ИНН физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Заявление.ЛицоБезДовФЛ_СНИЛС) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан СНИЛС физического лица со стороны доверителя';
							|en = 'Не задан СНИЛС физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
					
				ИначеЕсли СтрДлина(СокрЛП(Заявление.ЛицоБезДовФЛ_СНИЛС)) <> 14 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный СНИЛС физического лица со стороны доверителя';
							|en = 'Указан некорректный СНИЛС физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
				Если ЭтоВерсия5_03 И ЗначениеЗаполнено(Заявление.ЛицоБезДовФЛ_НомЕРН)
					И СтрДлина(СокрЛП(Заявление.ЛицоБезДовФЛ_НомЕРН)) <> 15 Тогда
					
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный номер ЕРН физического лица со стороны доверителя';
							|en = 'Указан некорректный номер ЕРН физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Заявление.ЛицоБезДовФЛ_ОГРН) И СтрДлина(Заявление.ЛицоБезДовФЛ_ОГРН) <> 15 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ОГРНИП физического лица со стороны доверителя';
							|en = 'Указан некорректный ОГРНИП физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Заявление.ЛицоБезДовФЛ_ДатаРождения) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задана дата рождения физического лица со стороны доверителя';
							|en = 'Не задана дата рождения физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
					
				ИначеЕсли Заявление.ЛицоБезДовФЛ_ДатаРождения < МинимальнаяДата Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						СтрШаблон(
							НСтр("ru = 'Дата рождения физического лица со стороны доверителя не может быль раньше %1';
								|en = 'Дата рождения физического лица со стороны доверителя не может быль раньше %1'"),
							Формат(МинимальнаяДата, "ДЛФ=Д")),
						"ЛицоБезДовФЛ"));
				ИначеЕсли Заявление.ЛицоБезДовФЛ_ДатаРождения > МаксимальнаяДата Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						СтрШаблон(
							НСтр("ru = 'Дата рождения физического лица со стороны доверителя не может быль позднее %1';
								|en = 'Дата рождения физического лица со стороны доверителя не может быль позднее %1'"),
							Формат(МаксимальнаяДата, "ДЛФ=Д")),
						"ЛицоБезДовФЛ"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		СтрокиФИО = Заявление.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
		
		Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана фамилия доверителя';
					|en = 'Не задана фамилия доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано имя доверителя';
					|en = 'Не задано имя доверителя'"), "Доверитель"));
		КонецЕсли;
		
		СтрокиУдостоверений = Заявление.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
		
		Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВидДок) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан вид документа доверителя';
					|en = 'Не задан вид документа доверителя'"), "Доверитель"));
		КонецЕсли;
		
		КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
			?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].ВидДок));
		Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
			И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
			И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Вид документа доверителя не поддерживается';
					|en = 'Вид документа доверителя не поддерживается'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтрокиУдостоверений[0].СерДок)
			+ СокрЛП(СтрокиУдостоверений[0].НомДок)) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не заданы серия и номер документа доверителя';
					|en = 'Не заданы серия и номер документа доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиУдостоверений.Количество() <> 0 И СтрДлина(СокрЛП(СтрокиУдостоверений[0].СерДок)
			+ СокрЛП(СтрокиУдостоверений[0].НомДок)) > 25 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Длина серии и номера документа доверителя больше 25 символов';
					|en = 'Длина серии и номера документа доверителя больше 25 символов'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ДатаДок) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана дата выдачи документа доверителя';
					|en = 'Не задана дата выдачи документа доверителя'"), "Доверитель"));
		ИначеЕсли СтрокиУдостоверений[0].ДатаДок < МинимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата выдачи документа доверителя не может быль раньше %1';
						|en = 'Дата выдачи документа доверителя не может быль раньше %1'"),
					Формат(МинимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		ИначеЕсли СтрокиУдостоверений[0].ДатаДок > МаксимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата выдачи документа доверителя не может быль позднее %1';
						|en = 'Дата выдачи документа доверителя не может быль позднее %1'"),
					Формат(МаксимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		КонецЕсли;
		
		Если (СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].КодВыдДок))
			И КодВидаДокумента = "21" Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано наименование органа, выдавшего документ доверителя';
					|en = 'Не задано наименование органа, выдавшего документ доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЭтоВерсия5_02 И НЕ ЗначениеЗаполнено(Заявление.ДоверительФЛ_ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН доверителя';
					|en = 'Не задан ИНН доверителя'"), "Доверитель"));
			
		ИначеЕсли ЗначениеЗаполнено(Заявление.ДоверительФЛ_ИНН)
			И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			Заявление.ДоверительФЛ_ИНН, Истина) Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН доверителя';
					|en = 'Указан некорректный ИНН доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если ЭтоВерсия5_02 И НЕ ЗначениеЗаполнено(Заявление.ДоверительФЛ_СНИЛС) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан СНИЛС доверителя';
					|en = 'Не задан СНИЛС доверителя'"), "Доверитель"));
			
		ИначеЕсли ЭтоВерсия5_02 И СтрДлина(СокрЛП(Заявление.ДоверительФЛ_СНИЛС)) <> 14 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный СНИЛС доверителя';
					|en = 'Указан некорректный СНИЛС доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если ЭтоВерсия5_03 И ЗначениеЗаполнено(Заявление.ДоверительФЛ_НомЕРН)
			И СтрДлина(СокрЛП(Заявление.ДоверительФЛ_НомЕРН)) <> 15 Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный номер ЕРН доверителя';
					|en = 'Указан некорректный номер ЕРН доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЭтоВерсия5_02 И НЕ ЗначениеЗаполнено(Заявление.ДоверительФЛ_ОГРН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ОГРНИП доверителя';
					|en = 'Не задан ОГРНИП доверителя'"), "Доверитель"));
			
		ИначеЕсли ЗначениеЗаполнено(Заявление.ДоверительФЛ_ОГРН) И СтрДлина(Заявление.ДоверительФЛ_ОГРН) <> 15 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ОГРНИП доверителя';
					|en = 'Указан некорректный ОГРНИП доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если ЭтоВерсия5_02 И НЕ ЗначениеЗаполнено(Заявление.ДоверительФЛ_ДатаРождения) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана дата рождения доверителя';
					|en = 'Не задана дата рождения доверителя'"), "Доверитель"));
			
		ИначеЕсли ЗначениеЗаполнено(Заявление.ДоверительФЛ_ДатаРождения)
			И Заявление.ДоверительФЛ_ДатаРождения < МинимальнаяДата Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата рождения доверителя не может быль раньше %1';
						|en = 'Дата рождения доверителя не может быль раньше %1'"),
					Формат(МинимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		ИначеЕсли ЗначениеЗаполнено(Заявление.ДоверительФЛ_ДатаРождения)
			И Заявление.ДоверительФЛ_ДатаРождения > МаксимальнаяДата Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата рождения доверителя не может быль позднее %1';
						|en = 'Дата рождения доверителя не может быль позднее %1'"),
					Формат(МаксимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		КонецЕсли;
	КонецЕсли;
	
	КоличествоПредставителей = ?(ЭтоВерсия5_02, Заявление.Представители.Количество(), 0);
	Если КоличествоПредставителей > 0 Тогда
		КоличествоИспользуемыхПредставителей = 0;
		Для каждого СтрокаПредставителя Из Заявление.Представители Цикл
			Если СтрокаПредставителя.ПредставительИспользуется Тогда
				КоличествоИспользуемыхПредставителей = КоличествоИспользуемыхПредставителей + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоИспользуемыхПредставителей <> 1 И (КоличествоИспользуемыхПредставителей < КоличествоПредставителей
			ИЛИ НЕ ЗначениеЗаполнено(Заявление.РодительскаяДоверенность)) Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				?(ЗначениеЗаполнено(Заявление.РодительскаяДоверенность),
				НСтр("ru = 'Должен быть выбран только один представитель или выбраны все представители';
					|en = 'Должен быть выбран только один представитель или выбраны все представители'"),
				НСтр("ru = 'Может быть указан только один представитель. Для отзыва всех представителей машиночитаемой доверенности оставьте список представителей пустым';
					|en = 'Может быть указан только один представитель. Для отзыва всех представителей машиночитаемой доверенности оставьте список представителей пустым'")), ""));
		КонецЕсли;
		
		
		Для ИндексПредставителя = 0 По КоличествоПредставителей - 1 Цикл
			СтрокаПредставителя = Заявление.Представители[ИндексПредставителя];
			
			ДобавляемыйНомерПредставителя = ?(КоличествоПредставителей > 1, " " + Строка(ИндексПредставителя + 1), "");
			
			Представитель_ЮридическоеЛицо = ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН);
			
			Если Представитель_ЮридическоеЛицо Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_НаимОрг) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не задано наименование организации представителя%1';
							|en = 'Не задано наименование организации представителя%1'"),
						ДобавляемыйНомерПредставителя);
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						ТекстОшибки, ?(КоличествоПредставителей > 1, "", "Представитель")));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ИНН) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не задан ИНН организации представителя%1';
							|en = 'Не задан ИНН организации представителя%1'"),
						ДобавляемыйНомерПредставителя);
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						ТекстОшибки, ?(КоличествоПредставителей > 1, "", "Представитель")));
					
				ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
					СтрокаПредставителя.ПредставительЮЛ_ИНН, Ложь) Тогда
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Указан некорректный ИНН организации представителя%1';
							|en = 'Указан некорректный ИНН организации представителя%1'"),
						ДобавляемыйНомерПредставителя);
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						ТекстОшибки, ?(КоличествоПредставителей > 1, "", "Представитель")));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_КПП) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не задан КПП организации представителя%1';
							|en = 'Не задан КПП организации представителя%1'"),
						ДобавляемыйНомерПредставителя);
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						ТекстОшибки, ?(КоличествоПредставителей > 1, "", "Представитель")));
					
				ИначеЕсли СтрДлина(СокрЛП(СтрокаПредставителя.ПредставительЮЛ_КПП)) <> 9 Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Указан некорректный КПП организации представителя%1';
							|en = 'Указан некорректный КПП организации представителя%1'"),
						ДобавляемыйНомерПредставителя);
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						ТекстОшибки, ?(КоличествоПредставителей > 1, "", "Представитель")));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаПредставителя.ПредставительЮЛ_ОГРН)
					И СтрДлина(СокрЛП(СтрокаПредставителя.ПредставительЮЛ_ОГРН)) <> 13 Тогда
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Указан некорректный ОГРН организации представителя%1';
							|en = 'Указан некорректный ОГРН организации представителя%1'"),
						ДобавляемыйНомерПредставителя);
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						ТекстОшибки, ?(КоличествоПредставителей > 1, "", "Представитель")));
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_Фамилия) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задана фамилия представителя%1';
						|en = 'Не задана фамилия представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ФИО")));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_Имя) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задано имя физлица-представителя%1';
						|en = 'Не задано имя физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ФИО")));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ВидДок) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задан вид документа физлица-представителя%1';
						|en = 'Не задан вид документа физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
				СтрокаПредставителя.ПредставительФЛ_ВидДок);
			Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
				И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
				И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Вид документа физлица-представителя%1 не поддерживается';
						|en = 'Вид документа физлица-представителя%1 не поддерживается'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаПредставителя.ПредставительФЛ_СерДок)
				+ СокрЛП(СтрокаПредставителя.ПредставительФЛ_НомДок)) Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не заданы серия и номер документа физлица-представителя%1';
						|en = 'Не заданы серия и номер документа физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			Если СтрДлина(СокрЛП(СтрокаПредставителя.ПредставительФЛ_СерДок)
				+ СокрЛП(СтрокаПредставителя.ПредставительФЛ_НомДок)) > 25 Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Длина серии и номера документа физлица-представителя%1 больше 25 символов';
						|en = 'Длина серии и номера документа физлица-представителя%1 больше 25 символов'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ДатаДок) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задана дата выдачи документа физлица-представителя%1';
						|en = 'Не задана дата выдачи документа физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
					
			ИначеЕсли СтрокаПредставителя.ПредставительФЛ_ДатаДок < МинимальнаяДата Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Дата выдачи документа физлица-представителя%1 не может быль раньше %2';
						|en = 'Дата выдачи документа физлица-представителя%1 не может быль раньше %2'"),
					ДобавляемыйНомерПредставителя,
					Формат(МинимальнаяДата, "ДЛФ=Д"));
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
					
			ИначеЕсли СтрокаПредставителя.ПредставительФЛ_ДатаДок > МаксимальнаяДата Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Дата выдачи документа физлица-представителя%1 не может быль позднее %2';
						|en = 'Дата выдачи документа физлица-представителя%1 не может быль позднее %2'"),
					ДобавляемыйНомерПредставителя,
					Формат(МаксимальнаяДата, "ДЛФ=Д"));
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ВыдДок) И КодВидаДокумента = "21" Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задано наименование органа, выдавшего документ физлица-представителя%1';
						|en = 'Не задано наименование органа, выдавшего документ физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_КодВыдДок)
				И СтрДлина(СокрЛП(СтрокаПредставителя.ПредставительФЛ_КодВыдДок)) <> 7 Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Длина кода подразделения документа физлица-представителя%1 не 7 символов';
						|en = 'Длина кода подразделения документа физлица-представителя%1 не 7 символов'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_Удостоверение")));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ИНН)
				И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				СтрокаПредставителя.ПредставительФЛ_ИНН, Истина) Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Указан некорректный ИНН физлица-представителя%1';
						|en = 'Указан некорректный ИНН физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ИНН")));
			КонецЕсли;
			
			Если ЭтоВерсия5_03 И ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_НомЕРН)
				И СтрДлина(СокрЛП(СтрокаПредставителя.ПредставительФЛ_НомЕРН)) <> 15 Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Указан некорректный номер ЕРН физлица-представителя%1';
						|en = 'Указан некорректный номер ЕРН физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_НомЕРН")));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ОГРН)
				И СтрДлина(СокрЛП(СтрокаПредставителя.ПредставительФЛ_ОГРН)) <> 15 Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Указан некорректный ОГРНИП физлица-представителя%1';
						|en = 'Указан некорректный ОГРНИП физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ОГРН")));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_СНИЛС) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не задан СНИЛС физлица-представителя%1';
						|en = 'Не задан СНИЛС физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_СНИЛС")));
				
			ИначеЕсли СтрДлина(СокрЛП(СтрокаПредставителя.ПредставительФЛ_СНИЛС)) <> 14 Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Указан некорректный СНИЛС физлица-представителя%1';
						|en = 'Указан некорректный СНИЛС физлица-представителя%1'"),
					ДобавляемыйНомерПредставителя);
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_СНИЛС")));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ДатаРождения)
				И СтрокаПредставителя.ПредставительФЛ_ДатаРождения < МинимальнаяДата Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Дата рождения физлица-представителя%1 не может быль раньше %2';
						|en = 'Дата рождения физлица-представителя%1 не может быль раньше %2'"),
					ДобавляемыйНомерПредставителя,
					Формат(МинимальнаяДата, "ДЛФ=Д"));
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ДатаРождения")));
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаПредставителя.ПредставительФЛ_ДатаРождения)
				И СтрокаПредставителя.ПредставительФЛ_ДатаРождения > МаксимальнаяДата Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Дата рождения физлица-представителя%1 не может быль позднее %2';
						|en = 'Дата рождения физлица-представителя%1 не может быль позднее %2'"),
					ДобавляемыйНомерПредставителя,
					Формат(МаксимальнаяДата, "ДЛФ=Д"));
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					ТекстОшибки, ?(КоличествоПредставителей > 1, "", "ПредставительФЛ_ДатаРождения")));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// налоговые органы
	
	Если НЕ ЗначениеЗаполнено(Заявление.КодНалоговогоОрганаПредставления) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан код налогового органа - получателя';
				|en = 'Не задан код налогового органа - получателя'"), "КодНалоговогоОрганаПредставления"));
	ИначеЕсли СтрДлина(Заявление.КодНалоговогоОрганаПредставления) <> 4 Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Указан некорректный код налогового органа - получателя';
				|en = 'Указан некорректный код налогового органа - получателя'"), "КодНалоговогоОрганаПредставления"));
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ОтзывПолномочийУВсехПредставителей(ДанныеСправочника)
	
	ОтзывПолномочийУВсехПредставителей = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеСправочника.РодительскаяДоверенность) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиФНСПредставители.Идентификатор КАК Идентификатор
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиФНС.Представители КАК МашиночитаемыеДоверенностиФНСПредставители
		|ГДЕ
		|	НЕ МашиночитаемыеДоверенностиФНСПредставители.Идентификатор В (&Идентификаторы)
		|	И МашиночитаемыеДоверенностиФНСПредставители.Ссылка = &Ссылка";
		
		ИдентификаторыПредставителей = Новый Массив;
		Для каждого Представитель Из ДанныеСправочника.Представители Цикл
			Если Представитель.ПредставительИспользуется Тогда
				ИдентификаторыПредставителей.Добавить(Представитель.Идентификатор);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеСправочника.РодительскаяДоверенность);
		Запрос.УстановитьПараметр("Идентификаторы", ИдентификаторыПредставителей);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ОтзывПолномочийУВсехПредставителей = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОтзывПолномочийУВсехПредставителей;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
		"ПрисоединитьДополнительныеТаблицы
		|ЭтотСписок КАК ЭтотСписок
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Владельцы
		|	ПО Владельцы.Ссылка = ЭтотСписок.Организация
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения
		|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = Владельцы.Ссылка
		|;
		|РазрешитьЧтение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)
		|ИЛИ ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
		|;
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БазовыйФункционалDOM

// https://soltau.ru/index.php/themes/dev/item/413

Функция ПодготовитьДокументDOM(ВходящиеДанные)
	
	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Если ТипЗнч(ТекущиеДанные) = Тип("ДвоичныеДанные") Тогда
		БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ТекущиеДанные);
		ЧтениеXML.ОткрытьПоток(Новый ПотокВПамяти(БуферДанных));
	ИначеЕсли ЭтоФайл Тогда
		ЧтениеXML.ОткрытьФайл(ТекущиеДанные);
	Иначе	
		ЧтениеXML.УстановитьСтроку(ТекущиеДанные);
	КонецЕсли;
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Возврат ДокументDOM;
	
КонецФункции

Функция ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска)
	
	Результат = Новый Массив;

	ДокументВладелец = УзелВладелец.ДокументВладелец;
	РазыменовательИмен = Новый РазыменовательПространствИменDOM(ДокументВладелец);
	НашлиЭлементы = ДокументВладелец.ВычислитьВыражениеXPath(ТекстПоиска, УзелВладелец, РазыменовательИмен);
	
	ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	Пока ОчереднойЭлемент <> Неопределено Цикл
		Результат.Добавить(ОчереднойЭлемент);
		ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеДаты(ПредставлениеДаты)
	
	Результат = ПредставлениеДаты;
	
	МассивСтроки = СтрРазделить(ПредставлениеДаты, ".", Ложь);
	
	Если МассивСтроки.Количество() = 3 И СтрДлина(МассивСтроки[2]) = 4 Тогда
		Результат = МассивСтроки[2] + МассивСтроки[1] + МассивСтроки[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеПола(ПредставлениеПола)
	
	Если ПредставлениеПола = "2" Тогда
		Результат = Перечисления.ПолФизическогоЛица.Женский;
	Иначе
		Результат = Перечисления.ПолФизическогоЛица.Мужской;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеСтраны(ПредставлениеСтраны)
	
	Результат = Справочники.СтраныМира.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеСтраны) Тогда
		Результат = Справочники.СтраныМира.НайтиПоКоду(ПредставлениеСтраны);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеВидаДокумента(ПредставлениеДокумента)
	
	ВсеВарианты = Новый Соответствие;
	ВсеВарианты.Вставить("07", "Военный билет");
	ВсеВарианты.Вставить("10", "Паспорт иностранного гражданина");
	ВсеВарианты.Вставить("11", "Свидетельство о рассмотрении ходатайства о признании лица беженцем на территории Российской Федерации по существу");
	ВсеВарианты.Вставить("12", "Вид на жительство в Российской Федерации");
	ВсеВарианты.Вставить("13", "Удостоверение беженца");
	ВсеВарианты.Вставить("15", "Разрешение на временное проживание в Российской Федерации");
	ВсеВарианты.Вставить("19", "Свидетельство о предоставлении временного убежища на территории Российской Федерации");
	ВсеВарианты.Вставить("21", "Паспорт гражданина Российской Федерации");
	ВсеВарианты.Вставить("24", "Удостоверение личности военнослужащего Российской Федерации");
	
	Результат = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеДокумента) Тогда
		Если Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодМВД") <> Неопределено Тогда
			Результат = Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодМВД", ПредставлениеДокумента);
		ИначеЕсли Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодФНС") <> Неопределено Тогда
			Результат = Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодФНС", ПредставлениеДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеСерияНомер(ПредставлениеСерияНомер)
	
	Результат = Новый Структура;
	Результат.Вставить("Серия", ПредставлениеСерияНомер);
	Результат.Вставить("Номер", "");
	
	МассивСтроки = СтрРазделить(ПредставлениеСерияНомер, " ", Ложь);
	
	Если МассивСтроки.Количество() > 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0] + " " + МассивСтроки[1]);
		МассивСтроки.Удалить(0);
		МассивСтроки.Удалить(0);
		Результат.Вставить("Номер", СтрСоединить(МассивСтроки, " "));
	ИначеЕсли МассивСтроки.Количество() = 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0]);
		Результат.Вставить("Номер", МассивСтроки[1]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиЭлементИБ(ЗначениеПоУмолчанию, ФильтрыПоиска)
	
	Результат = ЗначениеПоУмолчанию;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектПоиска.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗаявленияОбОтзывеМЧДФНС КАК ОбъектПоиска
	|ГДЕ
	|	НЕ ОбъектПоиска.ПометкаУдаления
	|{ГДЕ
	|	ОбъектПоиска.Ссылка.*}";
	
	МетаданныеОбъекта = ЗначениеПоУмолчанию.Метаданные();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.ЗаявленияОбОтзывеМЧДФНС", МетаданныеОбъекта.ПолноеИмя());
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст = ТекстЗапроса;
	Построитель.ЗаполнитьНастройки();
	
	Для Каждого СтрокаКлюча Из ФильтрыПоиска Цикл
		НовыйОтбор = Построитель.Отбор.Добавить("Ссылка." + СтрокаКлюча.Ключ);
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
		НовыйОтбор.Значение = СтрокаКлюча.Значение;
	КонецЦикла;
	
	Запрос = Построитель.ПолучитьЗапрос();
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() И Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодыскатьИнформациюВладельца(СписокСправочников, ИНН, КПП = "", СНИЛС = "")
	
	Результат = Неопределено;
	
	МассивСправочников = СтрРазделить(СписокСправочников, ",", Ложь);
	
	Если МассивСправочников.Найти("Организации") <> Неопределено Тогда
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("ИНН", ИНН);
		СправочникОрганизации = Метаданные.Справочники.Найти("Организации");
		РеквизитКПП = ?(СправочникОрганизации = Неопределено, Неопределено, СправочникОрганизации.Реквизиты.Найти("КПП"));
		Если РеквизитКПП <> Неопределено Тогда
			СтрокаПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		Результат = НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(), СтрокаПоиска);
	КонецЕсли;
	
	ИмяСправочникаКонтрагенты = "Контрагенты";
	Если НЕ ЗначениеЗаполнено(Результат) И МассивСправочников.Найти(ИмяСправочникаКонтрагенты) <> Неопределено
		И ЭлектронныйДокументооборотСКонтролирующимиОрганами.РеквизитыСправочникаКонтрагентовДоступны(Истина, Истина) Тогда
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("ИНН", ИНН);
		Если ЗначениеЗаполнено(КПП) Тогда
			СтрокаПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		Результат = НайтиЭлементИБ(Справочники[ИмяСправочникаКонтрагенты].ПустаяСсылка(), СтрокаПоиска);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) И МассивСправочников.Найти("ФизическиеЛица") <> Неопределено Тогда
		СправочникФизическиеЛица = Метаданные.Справочники.Найти("ФизическиеЛица");
		Если СправочникФизическиеЛица <> Неопределено И СправочникФизическиеЛица.Реквизиты.Найти("ИНН") <> Неопределено Тогда
			СтрокаПоиска = Новый Структура;
			СтрокаПоиска.Вставить("ИНН", ИНН);
			Если ЗначениеЗаполнено(СНИЛС) Тогда
				Если СправочникФизическиеЛица.Реквизиты.Найти("СтраховойНомерПФР") <> Неопределено Тогда
					СтрокаПоиска.Вставить("СтраховойНомерПФР", СНИЛС);
				ИначеЕсли СправочникФизическиеЛица.Реквизиты.Найти("СНИЛС") <> Неопределено Тогда
					СтрокаПоиска.Вставить("СНИЛС", СНИЛС);
				КонецЕсли;
			КонецЕсли;
			Результат = НайтиЭлементИБ(Справочники.ФизическиеЛица.ПустаяСсылка(), СтрокаПоиска);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит элемент документа DOM, проверяет что оно одно и пытается получить значение и привести тип.
//
Функция ПолучитьЗначениеДокумента(УзелВладелец, ТекстПоиска, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	
	ВыборкаЭлементов = ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска);
	
	Если ВыборкаЭлементов.Количество() = 1 Тогда
		
		ЭлементВыборки = ВыборкаЭлементов[0];
		Если ТипЗнч(ЭлементВыборки) = Тип("АтрибутDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.Значение;
		ИначеЕсли ТипЗнч(ЭлементВыборки) = Тип("ЭлементDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.ТекстовоеСодержимое;
		Иначе
			ПредставлениеЗначения = ЭлементВыборки.ЗначениеУзла;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Дата") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеДаты(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеПола(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.СтраныМира") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеСтраны(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеВидаДокумента(ПредставлениеЗначения);
		КонецЕсли;
		
		Если ЗначениеПоУмолчанию <> Неопределено Тогда
			МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЗначениеПоУмолчанию));
			ТекущийТип = Новый ОписаниеТипов(МассивТипов);
			Результат = ТекущийТип.ПривестиЗначение(ПредставлениеЗначения);
		Иначе
			Результат = ПредставлениеЗначения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьАтрибутУзлаXML(данныеXML, ИмяАтрибута, ЗначениеАтрибута, ВыгружатьПустые = Истина)
	
	ПредставлениеЗначения = ЗначениеВыгрузкиXML(ЗначениеАтрибута);
	
	Если ВыгружатьПустые ИЛИ ЗначениеЗаполнено(ЗначениеАтрибута) Тогда 
		данныеXML.ЗаписатьНачалоАтрибута(ИмяАтрибута);
		данныеXML.ЗаписатьТекст(ПредставлениеЗначения);
		данныеXML.ЗаписатьКонецАтрибута();
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеВыгрузкиXML(ЗначениеВыгрузки)
	
	Результат = Строка(ЗначениеВыгрузки);
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВыгрузки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеВыгрузки) = Тип("Дата") Тогда
		Результат = Формат(ЗначениеВыгрузки, "ДФ=dd.MM.yyyy");
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("СправочникСсылка.СтраныМира") Тогда
		Результат = ЗначениеВыгрузки.Код;
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
		Если Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодМВД") <> Неопределено Тогда
			Результат = ЗначениеВыгрузки.КодМВД;
		ИначеЕсли Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодФНС") <> Неопределено Тогда
			Результат = ЗначениеВыгрузки.КодФНС;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
		Если ЗначениеВыгрузки = Перечисления.ПолФизическогоЛица.Женский Тогда
			Результат = "2";
		Иначе	
			Результат = "1";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаЭлементаСправочника

Функция ЗаписатьЭлементСправочника(ДанныеЗаявления, ОбновлятьСуществующийИлиСсылка)
	
	Результат = Неопределено;
	НашлиЭлемент = Неопределено;
	
	Если ТипЗнч(ОбновлятьСуществующийИлиСсылка) = Тип("СправочникСсылка.ЗаявленияОбОтзывеМЧДФНС") Тогда
		НашлиЭлемент = ОбновлятьСуществующийИлиСсылка;
		
	ИначеЕсли ОбновлятьСуществующийИлиСсылка = Истина Тогда
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("НомерДоверенности", ДанныеЗаявления.НомерДоверенности);
		СтрокаПоиска.Вставить("ДатаВыдачи", ДанныеЗаявления.ДатаВыдачи);
		СтрокаПоиска.Вставить("Организация", ДанныеЗаявления.Организация);
		НашлиЭлемент = НайтиЭлементИБ(Справочники.ЗаявленияОбОтзывеМЧДФНС.ПустаяСсылка(), СтрокаПоиска);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НашлиЭлемент) Тогда
		ОбъектСправочника = Справочники.ЗаявленияОбОтзывеМЧДФНС.СоздатьЭлемент();
	Иначе
		ОбъектСправочника = НашлиЭлемент.ПолучитьОбъект();
		Для Каждого СтрокаРеквизита Из ОбъектСправочника.Метаданные().Реквизиты Цикл
			ОбъектСправочника[СтрокаРеквизита.Имя] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	// здесь переносим значения реквизитов
	ЗаполнитьЗначенияСвойств(ОбъектСправочника, ДанныеЗаявления);
	
	ТабличныеЧасти = Новый Структура;
	ТабличныеЧасти.Вставить("ФИО", ДанныеЗаявления.ФИО);
	ТабличныеЧасти.Вставить("УдостоверенияЛичности", ДанныеЗаявления.УдостоверенияЛичности);
	Если ДанныеЗаявления.Свойство("Представители") Тогда
		ТабличныеЧасти.Вставить("Представители", ДанныеЗаявления.Представители);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТабличныеЧасти Цикл
		ТекущаяТЧ = ОбъектСправочника[СтрокаТЧ.Ключ];
		ТекущаяТЧ.Очистить();
		Для Каждого НоваяСтрока Из СтрокаТЧ.Значение Цикл
			ДобавленнаяСтрока = ТекущаяТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НоваяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеЗаявления.Свойство("ДанныеВыгрузки") И ДанныеЗаявления.ДанныеВыгрузки <> Неопределено Тогда
		ОбъектСправочника.ФайлВырузки = Новый ХранилищеЗначения(ДанныеЗаявления.ДанныеВыгрузки, Новый СжатиеДанных(9));
	КонецЕсли;
	Если ДанныеЗаявления.Свойство("ДанныеПодписи") И ДанныеЗаявления.ДанныеПодписи <> Неопределено Тогда
		ОбъектСправочника.ЭлектроннаяПодпись = Новый ХранилищеЗначения(ДанныеЗаявления.ДанныеПодписи,
			Новый СжатиеДанных(9));
	КонецЕсли;
	
	Удачно = Ложь;
	
	Если ОбъектСправочника.ПроверитьЗаполнение() Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ЗаявленияОбОтзывеМЧДФНС");
		Если НЕ ОбъектСправочника.ЭтоНовый() Тогда
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектСправочника.Ссылка);
		КонецЕсли;	
		
		Удачно = Истина;
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка.Заблокировать();
			ОбъектСправочника.Записать();
			
		Исключение
			ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Ошибка изменения заявления об отзыве доверенности.';
								|en = 'Электронный документооборот с контролирующими органами. Ошибка изменения заявления об отзыве доверенности.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,,,
				ДанныеОшибки);
			Удачно = Ложь;
		КонецПопытки;
		
		Если Удачно Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Удачно Тогда
		Результат = ОбъектСправочника.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

Функция ДанныеИзИнформационнойБазы(СправочникСсылка)

	Результат = Новый Структура;
	Результат.Вставить("КодНО", "");
	Результат.Вставить("КНД", "1110311");
	Результат.Вставить("КодыНО", Новый Массив);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаявленияОбОтзывеМЧДФНСФИО.Владелец КАК Владелец,
		|	ЗаявленияОбОтзывеМЧДФНСФИО.Фамилия КАК Фамилия,
		|	ЗаявленияОбОтзывеМЧДФНСФИО.Имя КАК Имя,
		|	ЗаявленияОбОтзывеМЧДФНСФИО.Отчество КАК Отчество
		|ИЗ
		|	Справочник.ЗаявленияОбОтзывеМЧДФНС.ФИО КАК ЗаявленияОбОтзывеМЧДФНСФИО
		|ГДЕ
		|	ЗаявленияОбОтзывеМЧДФНСФИО.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявленияОбОтзывеМЧДФНС.НомерДоверенности КАК НомерДоверенности,
		|	ЗаявленияОбОтзывеМЧДФНС.РодительскаяДоверенность КАК РодительскаяДоверенность,
		|	ЗаявленияОбОтзывеМЧДФНС.РегистрационныйНомерДоверенности КАК РегистрационныйНомерДоверенности,
		|	ЗаявленияОбОтзывеМЧДФНС.НомерКорневойДоверенности КАК НомерКорневойДоверенности,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверенностьВыданаВПорядкеПередоверия КАК ДоверенностьВыданаВПорядкеПередоверия,
		|	ЗаявленияОбОтзывеМЧДФНС.ДатаВыдачи КАК ДатаВыдачи,
		|	ЗаявленияОбОтзывеМЧДФНС.ДатаОтзыва КАК ДатаОтзыва,
		|	ЗаявленияОбОтзывеМЧДФНС.КодНалоговогоОрганаПредставления КАК КодНалоговогоОрганаПредставления,
		|	ЗаявленияОбОтзывеМЧДФНС.СведенияОбИнформационнойСистеме КАК СведенияОбИнформационнойСистеме,
		|	ЗаявленияОбОтзывеМЧДФНС.УникальныйИдентификаторДоверенности КАК УникальныйИдентификаторДоверенности,
		|	ЗаявленияОбОтзывеМЧДФНС.НомерРодительскойДоверенности КАК НомерРодительскойДоверенности,
		|	ЗаявленияОбОтзывеМЧДФНС.ВерсияФормата КАК ВерсияФормата,
		|	ЗаявленияОбОтзывеМЧДФНС.ПричинаОтзыва КАК ПричинаОтзыва,
		|	ЗаявленияОбОтзывеМЧДФНС.Организация КАК Организация,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_ИностраннаяОрганизация КАК ДоверительЮЛ_ИностраннаяОрганизация,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_ИНН КАК ДоверительЮЛ_ИНН,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_КПП КАК ДоверительЮЛ_КПП,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_ОГРН КАК ДоверительЮЛ_ОГРН,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_НаимРегОрг КАК ДоверительЮЛ_НаимРегОрг,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_РегНомер КАК ДоверительЮЛ_РегНомер,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_КодНПРег КАК ДоверительЮЛ_КодНПРег,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительФЛ_ИНН КАК ДоверительФЛ_ИНН,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительФЛ_НомЕРН КАК ДоверительФЛ_НомЕРН,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительФЛ_СНИЛС КАК ДоверительФЛ_СНИЛС,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительФЛ_ОГРН КАК ДоверительФЛ_ОГРН,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительФЛ_Гражданство КАК ДоверительФЛ_Гражданство,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительФЛ_ДатаРождения КАК ДоверительФЛ_ДатаРождения,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_НаимОрг КАК ДоверительЮЛ_НаимОрг,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовЮЛ_НаимОрг КАК ЛицоБезДовЮЛ_НаимОрг,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовЮЛ_ИНН КАК ЛицоБезДовЮЛ_ИНН,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовЮЛ_КПП КАК ЛицоБезДовЮЛ_КПП,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовЮЛ_ОГРН КАК ЛицоБезДовЮЛ_ОГРН,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_ИНН КАК ЛицоБезДовФЛ_ИНН,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_НомЕРН КАК ЛицоБезДовФЛ_НомЕРН,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_СНИЛС КАК ЛицоБезДовФЛ_СНИЛС,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_ОГРН КАК ЛицоБезДовФЛ_ОГРН,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_Гражданство КАК ЛицоБезДовФЛ_Гражданство,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_ДатаРождения КАК ЛицоБезДовФЛ_ДатаРождения,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_Должность КАК ЛицоБезДовФЛ_Должность,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_Телефон КАК ЛицоБезДовФЛ_Телефон
		|ИЗ
		|	Справочник.ЗаявленияОбОтзывеМЧДФНС КАК ЗаявленияОбОтзывеМЧДФНС
		|ГДЕ
		|	ЗаявленияОбОтзывеМЧДФНС.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.Владелец КАК Владелец,
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.ВидДок КАК ВидДок,
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.СерДок КАК СерДок,
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.НомДок КАК НомДок,
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.ДатаДок КАК ДатаДок,
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.ВыдДок КАК ВыдДок,
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.КодВыдДок КАК КодВыдДок
		|ИЗ
		|	Справочник.ЗаявленияОбОтзывеМЧДФНС.УдостоверенияЛичности КАК ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности
		|ГДЕ
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.Представитель КАК Представитель,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительЮЛ_НаимОрг КАК ПредставительЮЛ_НаимОрг,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительЮЛ_ИНН КАК ПредставительЮЛ_ИНН,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительЮЛ_КПП КАК ПредставительЮЛ_КПП,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительЮЛ_ОГРН КАК ПредставительЮЛ_ОГРН,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_Фамилия КАК ПредставительФЛ_Фамилия,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_Имя КАК ПредставительФЛ_Имя,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_Отчество КАК ПредставительФЛ_Отчество,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_ИНН КАК ПредставительФЛ_ИНН,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_НомЕРН КАК ПредставительФЛ_НомЕРН,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_ОГРН КАК ПредставительФЛ_ОГРН,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_СНИЛС КАК ПредставительФЛ_СНИЛС,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_Гражданство КАК ПредставительФЛ_Гражданство,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_ДатаРождения КАК ПредставительФЛ_ДатаРождения,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_ВидДок КАК ПредставительФЛ_ВидДок,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_СерДок КАК ПредставительФЛ_СерДок,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_НомДок КАК ПредставительФЛ_НомДок,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_ДатаДок КАК ПредставительФЛ_ДатаДок,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_ВыдДок КАК ПредставительФЛ_ВыдДок,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительФЛ_КодВыдДок КАК ПредставительФЛ_КодВыдДок,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительЯвляетсяСотрудником КАК ПредставительЯвляетсяСотрудником,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.Идентификатор КАК Идентификатор,
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.ПредставительИспользуется КАК ПредставительИспользуется
		|ИЗ
		|	Справочник.ЗаявленияОбОтзывеМЧДФНС.Представители КАК ЗаявленияОбОтзывеМЧДФНСПредставители
		|ГДЕ
		|	ЗаявленияОбОтзывеМЧДФНСПредставители.Ссылка = &СправочникСсылка";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СправочникСсылка", СправочникСсылка);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
		
	ВыборкаПодписантов = ПакетЗапросов[0].Выгрузить();
	ВыборкаДокументов = ПакетЗапросов[2].Выгрузить();
	
	ПустойПодписант = Новый Структура("Имя, Отчество, Фамилия", "", "", "");
	ПустойДокумент = Новый Структура("ВидДок, СерДок, НомДок, ДатаДок, ВыдДок, КодВыдДок", "", "", "", "", "", "", "");
	
	ВыборкаИнформации = ПакетЗапросов[1].Выбрать();
	Если ВыборкаИнформации.Следующий() Тогда
		Результат.Вставить("КодНО", ВыборкаИнформации.КодНалоговогоОрганаПредставления);
		Результат.Вставить("Номер", ВыборкаИнформации.НомерДоверенности);
		Результат.Вставить("РегНомДовер", ВыборкаИнформации.РегистрационныйНомерДоверенности);
		Результат.Вставить("НомерКорневойДоверенности", ВыборкаИнформации.НомерКорневойДоверенности);
		Результат.Вставить("ДоверенностьВыданаВПорядкеПередоверия", ВыборкаИнформации.ДоверенностьВыданаВПорядкеПередоверия);
		Результат.Вставить("РодительскаяДоверенность", ВыборкаИнформации.РодительскаяДоверенность);
		Результат.Вставить("ДатаОтзыва", ВыборкаИнформации.ДатаОтзыва);
		Результат.Вставить("ДатаВыдачи", ВыборкаИнформации.ДатаВыдачи);
		Результат.Вставить("УникальныйИдентификаторДоверенности", ВыборкаИнформации.УникальныйИдентификаторДоверенности);
		Результат.Вставить("СведенияОбИнформационнойСистеме", ВыборкаИнформации.СведенияОбИнформационнойСистеме);
		Результат.Вставить("ПричинаОтзыва", ВыборкаИнформации.ПричинаОтзыва);
		Результат.Вставить("ВерсияФормата", ВыборкаИнформации.ВерсияФормата);
		
		// информация об доверителе
		Результат.Вставить("Организация", ВыборкаИнформации.Организация);
		Результат.Вставить("ИностраннаяОрганизация", ВыборкаИнформации.ДоверительЮЛ_ИностраннаяОрганизация);
		Результат.Вставить("ДоверительЮЛ_ИНН", ВыборкаИнформации.ДоверительЮЛ_ИНН);
		Результат.Вставить("ДоверительЮЛ_КПП", ВыборкаИнформации.ДоверительЮЛ_КПП);
		Результат.Вставить("ДоверительЮЛ_ОГРН", ВыборкаИнформации.ДоверительЮЛ_ОГРН);
		Результат.Вставить("ДоверительФЛ_ИНН", ВыборкаИнформации.ДоверительФЛ_ИНН);
		Результат.Вставить("ДоверительФЛ_НомЕРН", ВыборкаИнформации.ДоверительФЛ_НомЕРН);
		Результат.Вставить("ДоверительФЛ_СНИЛС", ВыборкаИнформации.ДоверительФЛ_СНИЛС);
		Результат.Вставить("ДоверительФЛ_ОГРН", ВыборкаИнформации.ДоверительФЛ_ОГРН);
		Результат.Вставить("ДоверительФЛ_Гражданство", ВыборкаИнформации.ДоверительФЛ_Гражданство);
		Результат.Вставить("ДоверительФЛ_ДатаРождения", ВыборкаИнформации.ДоверительФЛ_ДатаРождения);
		Результат.Вставить("ДоверительЮЛ_НаимОрг", ВыборкаИнформации.ДоверительЮЛ_НаимОрг);
		
		Если Результат.ИностраннаяОрганизация Тогда
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ИО");
		ИначеЕсли ЗначениеЗаполнено(Результат.ДоверительЮЛ_ИНН) Тогда
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ЮЛ");
		Иначе
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ФЛ");
		КонецЕсли;
		
		// информация об подписанте
		Результат.Вставить("ЛицоБезДовЮЛ_НаимОрг", ВыборкаИнформации.ЛицоБезДовЮЛ_НаимОрг);
		Результат.Вставить("ЛицоБезДовЮЛ_ИНН", ВыборкаИнформации.ЛицоБезДовЮЛ_ИНН);
		Результат.Вставить("ЛицоБезДовЮЛ_КПП", ВыборкаИнформации.ЛицоБезДовЮЛ_КПП);
		Результат.Вставить("ЛицоБезДовЮЛ_ОГРН", ВыборкаИнформации.ЛицоБезДовЮЛ_ОГРН);
		Результат.Вставить("ЛицоБезДовФЛ_ИНН", ВыборкаИнформации.ЛицоБезДовФЛ_ИНН);
		Результат.Вставить("ЛицоБезДовФЛ_НомЕРН", ВыборкаИнформации.ЛицоБезДовФЛ_НомЕРН);
		Результат.Вставить("ЛицоБезДовФЛ_СНИЛС", ВыборкаИнформации.ЛицоБезДовФЛ_СНИЛС);
		Результат.Вставить("ЛицоБезДовФЛ_ОГРН", ВыборкаИнформации.ЛицоБезДовФЛ_ОГРН);
		Результат.Вставить("ЛицоБезДовФЛ_Гражданство", ВыборкаИнформации.ЛицоБезДовФЛ_Гражданство);
		Результат.Вставить("ЛицоБезДовФЛ_ДатаРождения", ВыборкаИнформации.ЛицоБезДовФЛ_ДатаРождения);
		Результат.Вставить("ЛицоБезДовФЛ_Должность", ВыборкаИнформации.ЛицоБезДовФЛ_Должность);
		Результат.Вставить("ЛицоБезДовФЛ_Телефон", ВыборкаИнформации.ЛицоБезДовФЛ_Телефон);
		
		Если Результат.ДоверительЮЛ_ТипОрганизации = "ФЛ" Тогда
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
		Иначе
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительРук));
		КонецЕсли;
		
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиФИО = ПустойПодписант;
		Иначе
			НашлиФИО = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ЛицоБезДовФЛ_Имя", НашлиФИО.Имя);
		Результат.Вставить("ЛицоБезДовФЛ_Отчество", НашлиФИО.Отчество);
		Результат.Вставить("ЛицоБезДовФЛ_Фамилия", НашлиФИО.Фамилия);
		
		НашлиСтроки = ВыборкаДокументов.НайтиСтроки(Новый Структура("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиДок = ПустойДокумент;
		Иначе
			НашлиДок = НашлиСтроки[0];
		КонецЕсли;
		
		Результат.Вставить("ЛицоБезДовФЛ_ВидДок", НашлиДок.ВидДок);
		Результат.Вставить("ЛицоБезДовФЛ_СерДок", НашлиДок.СерДок);
		Результат.Вставить("ЛицоБезДовФЛ_НомДок", НашлиДок.НомДок);
		Результат.Вставить("ЛицоБезДовФЛ_ДатаДок", НашлиДок.ДатаДок);
		Результат.Вставить("ЛицоБезДовФЛ_ВыдДок", НашлиДок.ВыдДок);
		Результат.Вставить("ЛицоБезДовФЛ_КодВыдДок", НашлиДок.КодВыдДок);

		Результат.Вставить("Представители", Новый Массив);
		ВыборкаПредставителей = ПакетЗапросов[3].Выбрать();
		Пока ВыборкаПредставителей.Следующий() Цикл
			СтрокаПредставителя = Новый Структура;
			СтрокаПредставителя.Вставить("Представитель", 						ВыборкаПредставителей.Представитель);
			СтрокаПредставителя.Вставить("ПредставительЮЛ_НаимОрг", 			ВыборкаПредставителей.ПредставительЮЛ_НаимОрг);
			СтрокаПредставителя.Вставить("ПредставительЮЛ_ИНН", 				ВыборкаПредставителей.ПредставительЮЛ_ИНН);
			СтрокаПредставителя.Вставить("ПредставительЮЛ_КПП", 				ВыборкаПредставителей.ПредставительЮЛ_КПП);
			СтрокаПредставителя.Вставить("ПредставительЮЛ_ОГРН", 				ВыборкаПредставителей.ПредставительЮЛ_ОГРН);
			СтрокаПредставителя.Вставить("ПредставительФЛ_Фамилия", 			ВыборкаПредставителей.ПредставительФЛ_Фамилия);
			СтрокаПредставителя.Вставить("ПредставительФЛ_Имя", 				ВыборкаПредставителей.ПредставительФЛ_Имя);
			СтрокаПредставителя.Вставить("ПредставительФЛ_Отчество", 			ВыборкаПредставителей.ПредставительФЛ_Отчество);
			СтрокаПредставителя.Вставить("ПредставительФЛ_ИНН", 				ВыборкаПредставителей.ПредставительФЛ_ИНН);
			СтрокаПредставителя.Вставить("ПредставительФЛ_НомЕРН", 				ВыборкаПредставителей.ПредставительФЛ_НомЕРН);
			СтрокаПредставителя.Вставить("ПредставительФЛ_ОГРН", 				ВыборкаПредставителей.ПредставительФЛ_ОГРН);
			СтрокаПредставителя.Вставить("ПредставительФЛ_СНИЛС", 				ВыборкаПредставителей.ПредставительФЛ_СНИЛС);
			СтрокаПредставителя.Вставить("ПредставительФЛ_Гражданство", 		ВыборкаПредставителей.ПредставительФЛ_Гражданство);
			СтрокаПредставителя.Вставить("ПредставительФЛ_ДатаРождения", 		ВыборкаПредставителей.ПредставительФЛ_ДатаРождения);
			СтрокаПредставителя.Вставить("ПредставительФЛ_ВидДок", 				ВыборкаПредставителей.ПредставительФЛ_ВидДок);
			СтрокаПредставителя.Вставить("ПредставительФЛ_СерДок", 				ВыборкаПредставителей.ПредставительФЛ_СерДок);
			СтрокаПредставителя.Вставить("ПредставительФЛ_НомДок", 				ВыборкаПредставителей.ПредставительФЛ_НомДок);
			СтрокаПредставителя.Вставить("ПредставительФЛ_ДатаДок", 			ВыборкаПредставителей.ПредставительФЛ_ДатаДок);
			СтрокаПредставителя.Вставить("ПредставительФЛ_ВыдДок", 				ВыборкаПредставителей.ПредставительФЛ_ВыдДок);
			СтрокаПредставителя.Вставить("ПредставительФЛ_КодВыдДок", 			ВыборкаПредставителей.ПредставительФЛ_КодВыдДок);
			СтрокаПредставителя.Вставить("ПредставительЯвляетсяСотрудником", 	ВыборкаПредставителей.ПредставительЯвляетсяСотрудником);
			СтрокаПредставителя.Вставить("Идентификатор", 						ВыборкаПредставителей.Идентификатор);
			СтрокаПредставителя.Вставить("ПредставительИспользуется", 			ВыборкаПредставителей.ПредставительИспользуется);
			
			Результат.Представители.Добавить(СтрокаПредставителя);
		КонецЦикла;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура ВыгрузитьФИОУзла(ЗаписьXML, Фамилия, Имя, Отчество)
	
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Фамилия", Фамилия);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Имя", Имя);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Отчество", Отчество, Ложь);
	
КонецПроцедуры

Процедура ВыгрузитьУдостоверениеУзла(
				ЗаписьXML, 
				ВидДокумента,
				СерияДокумента,
				НомерДокумента,
				ДатаВыдачи,
				Выдан,
				КодПодразделения)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("УдЛичн");
	
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КодВидДок", ВидДокумента);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СерНомДок", СокрЛП(СерияДокумента + " " + НомерДокумента));
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаДок", ДатаВыдачи);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВыдДок", Выдан, Ложь);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КодВыдДок", КодПодразделения, Ложь);
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
