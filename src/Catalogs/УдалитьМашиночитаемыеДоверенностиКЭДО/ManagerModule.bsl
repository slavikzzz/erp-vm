#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ИмяВыгружаемогоФайла(Знач ИмяФайлаДоверенности, ДатаДоверенности, Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяФайлаДоверенности) Тогда
		ИмяФайлаДоверенности = ИдентификаторФайла(ДатаДоверенности, Ссылка) + ".xml";
	КонецЕсли;
	
	Возврат КадровыйЭДОВызовСервера.ИмяФайлаКЭДО(ИмяФайлаДоверенности);
	
КонецФункции

Функция ИмяВыгружаемогоФайлаПоСсылке(МЧД) Экспорт
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, "ИмяФайлаДоверенности,Дата");
	Возврат ИмяВыгружаемогоФайла(ЗначенияРеквизитов.ИмяФайлаДоверенности, ЗначенияРеквизитов.Дата, МЧД);
КонецФункции

Функция ИдентификаторФайла(ДатаДоверенности, Ссылка)
	
	Возврат СтрШаблон("ON_EMCHD_%1_%2",
		Формат(ДатаДоверенности, "ДФ=ггггММдд"),
		Ссылка.УникальныйИдентификатор());
	
КонецФункции

#Область ИмпортИзФайла

Функция СвойстваДоверенностиИзФайла(АдресХранилища) Экспорт
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьПоток(ПолучитьИзВременногоХранилища(АдресХранилища).ОткрытьПотокДляЧтения());
		ДеревоXML = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
		ВызватьИсключение НСтр("ru = 'Не удалось прочитать файл.';
								|en = 'Не удалось прочитать файл.'");
	КонецПопытки;
	
	ВерсияФормата = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "ВерсФорм");
	Если ВерсияФормата = "002" Тогда
		СвойстваДоверенности = СвойстваДоверенностиВФорматеИФНС002(ДеревоXML);
	ИначеЕсли СтрНачинаетсяС(ВерсияФормата, "EMCHD_1") Тогда
		СвойстваДоверенности = СвойстваДоверенностиВФорматеИФНС003(ДеревоXML);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не поддерживаемый формат файла.';
								|en = 'Не поддерживаемый формат файла.'");
	КонецЕсли;
	
	Возврат СвойстваДоверенности;
	
КонецФункции

Функция СвойстваДоверенностиВФорматеИФНС003(ДеревоXML)
	
	СвойстваДоверенности = Новый Структура;
	ТэгДоверенности = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СвДов");
	
	СвойстваДоверенности.Вставить("Номер",  ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверенности, "ВнНомДовер", Ложь));
	СвойстваДоверенности.Вставить("НомерВРеестре",  ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверенности, "НомДовер", Ложь));
	Если ЗначениеЗаполнено(СвойстваДоверенности.НомерВРеестре) Тогда
		Если Не Справочники.УдалитьМашиночитаемыеДоверенностиКЭДО.НайтиПоРеквизиту("НомерВРеестре", СвойстваДоверенности.НомерВРеестре).Пустая() Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В справочнике уже есть доверенность с номером в реестре %1';
											|en = 'В справочнике уже есть доверенность с номером в реестре %1'"), СвойстваДоверенности.НомерВРеестре);
		КонецЕсли;
	КонецЕсли;
	
	СвойстваДоверенности.Вставить("Дата", ДатаИзXML(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверенности, "ДатаВыдДовер", Ложь)));
	СвойстваДоверенности.Вставить("ДатаНачала", ДатаИзXML(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверенности, "ДатаВыдДовер", Ложь)));
	СвойстваДоверенности.Вставить("ДатаОкончания", ДатаИзXML(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверенности, "СрокДейст", Ложь)));
	СвойстваДоверенности.Вставить("Передоверие", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверенности, "ПрПередов", Ложь) <> 1);
	
	ТэгПолномочий = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СвПолн");
	СвойстваДоверенности.Вставить("Комментарий", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгПолномочий, "ТекстПолн", Ложь));
	
	СвойстваДоверенности.Вставить("Доверитель", Новый Структура);
	ТэгДоверитель = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СвДоверит", Истина);
	ТипДоверителя = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверитель, "ТипДоверит");
	Если ТипДоверителя = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не поддерживаемый формат файла.';
								|en = 'Не поддерживаемый формат файла.'");
	КонецЕсли;
	
	ТекстИсключенияНеизвестныйДоверитель = "";
	СвойстваДоверенности.Доверитель.Вставить("Тип", ТипДоверителя);
	Если ТипДоверителя = "1" Тогда
		
		// Юридическое лицо
		ДанныеДоверителя = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверитель, "СвРосОрг");
		СвойстваДоверенности.Доверитель.Вставить("Наименование", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеДоверителя, "НаимОрг"));
		СвойстваДоверенности.Доверитель.Вставить("ИНН", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеДоверителя, "ИННЮЛ"));
		СвойстваДоверенности.Доверитель.Вставить("ОГРН", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеДоверителя, "ОГРН"));
		
		Если Справочники.Организации.НайтиПоРеквизиту("ИНН", СвойстваДоверенности.Доверитель.ИНН).Пустая() Тогда
			ТекстИсключенияНеизвестныйДоверитель = СтрШаблон(НСтр("ru = 'В справочнике Организации не найден доверитель %1 (ИНН: %2)';
																	|en = 'В справочнике Организации не найден доверитель %1 (ИНН: %2)'"),
				СвойстваДоверенности.Доверитель.Наименование,
				СвойстваДоверенности.Доверитель.ИНН);
		КонецЕсли;
		
		ДанныеФизлицаДоверителя = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверитель, "ЛицоБезДов");
		Если ТипЗнч(ДанныеФизлицаДоверителя) = Тип("СписокXDTO") Тогда
			Коллекция = ДанныеФизлицаДоверителя;
		Иначе
			Коллекция = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеФизлицаДоверителя);
		КонецЕсли;
		Для Каждого ЭлементКоллекции Из Коллекция Цикл
			ДанныеФизлица = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ЭлементКоллекции, "СвФЛ");
			Если ФизическоеЛицоСИННЕстьВБазеДанных(ДанныеФизлица.ИННФЛ) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьДанныеФизлица(СвойстваДоверенности.Доверитель, ДанныеФизлица);
		
		Если СвойстваДоверенности.Доверитель.Свойство("ИННФЛ")
			И ЗначениеЗаполнено(СвойстваДоверенности.Доверитель.ИННФЛ)
			И Не ФизическоеЛицоСИННЕстьВБазеДанных(СвойстваДоверенности.Доверитель.ИННФЛ) Тогда
			
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В справочнике ""Физические лица"" не найден ответственный доверителя %1 (ИНН: %2)';
											|en = 'В справочнике ""Физические лица"" не найден ответственный доверителя %1 (ИНН: %2)'"),
				СвойстваДоверенности.Доверитель.ФИО,
				СвойстваДоверенности.Доверитель.ИННФЛ);
		
		ИначеЕсли СвойстваДоверенности.Доверитель.Свойство("СНИЛС")
			И ЗначениеЗаполнено(СвойстваДоверенности.Доверитель.СНИЛС)
			И Не ФизическоеЛицоСоСНИЛСЕстьВБазеДанных(СвойстваДоверенности.Доверитель.СНИЛС) Тогда
			
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В справочнике ""Физические лица"" не найден ответственный доверителя %1 (СНИЛС: %2)';
											|en = 'В справочнике ""Физические лица"" не найден ответственный доверителя %1 (СНИЛС: %2)'"),
				СвойстваДоверенности.Доверитель.ФИО,
				СвойстваДоверенности.Доверитель.СНИЛС);
		
		КонецЕсли;
			
	ИначеЕсли ТипДоверителя = "3" Тогда
		
		// Индивидуальный предприниматель
		ДанныеДоверителя = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверитель, "ИПДовер");
		СвойстваДоверенности.Доверитель.Вставить("Наименование", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеДоверителя, "НаимИП"));
		СвойстваДоверенности.Доверитель.Вставить("ИНН", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеДоверителя, "ИННФЛ"));
		СвойстваДоверенности.Доверитель.Вставить("ОГРН", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеДоверителя, "ОГРНИП"));
		
		Если Справочники.Организации.НайтиПоРеквизиту("ИНН", СвойстваДоверенности.Доверитель.ИНН).Пустая() Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В справочнике ""Организации"" не найден доверитель %1 (ИНН: %2)';
											|en = 'В справочнике ""Организации"" не найден доверитель %1 (ИНН: %2)'"),
				СвойстваДоверенности.Доверитель.Наименование,
				СвойстваДоверенности.Доверитель.ИНН);
		КонецЕсли;
		
		ДанныеФизлица = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверитель, "СведФЛ");
		ЗаполнитьДанныеФизлица(СвойстваДоверенности.Доверитель, ДанныеФизлица);
		
	ИначеЕсли ТипДоверителя = "4" Тогда
		
		// Физическое лицо
		ДанныеДоверителя = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверитель, "ФЛДовер");
		
		ДанныеФизлица = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверитель, "СведФЛ");
		ЗаполнитьДанныеФизлица(СвойстваДоверенности.Доверитель, ДанныеФизлица);
		
		Если СвойстваДоверенности.Доверитель.Свойство("ИННФЛ")
			И Не ФизическоеЛицоСИННЕстьВБазеДанных(СвойстваДоверенности.Доверитель.ИННФЛ) Тогда
			
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В справочнике ""Физические лица"" не найден доверитель %1 (ИНН: %2)';
											|en = 'В справочнике ""Физические лица"" не найден доверитель %1 (ИНН: %2)'"),
				СвойстваДоверенности.Доверитель.ФИО,
				СвойстваДоверенности.Доверитель.ИННФЛ);
		КонецЕсли;
		
	КонецЕсли;
	
	СвойстваДоверенности.Вставить("Представитель", Новый Структура);
	
	Представитель = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СвУпПред");
	Если ТипЗнч(Представитель) = Тип("СписокXDTO") Тогда
		Представитель = Представитель[0];
	КонецЕсли;
	ТипПредставителя = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Представитель, "ТипПред");
	СвойстваДоверенности.Представитель.Вставить("Тип", ТипПредставителя);
	Если СвойстваДоверенности.Представитель.Тип = "1" Тогда
		
		// Юридическое лицо
		ДанныеПредставителя = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Представитель, "СвРосОрг");
		СвойстваДоверенности.Представитель.Вставить("Наименование", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеПредставителя, "НаимОрг"));
		СвойстваДоверенности.Представитель.Вставить("ИНН", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеПредставителя, "ИННЮЛ"));
		СвойстваДоверенности.Представитель.Вставить("ОГРН", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеПредставителя, "ОГРН"));
		
		Если Справочники.Организации.НайтиПоРеквизиту("ИНН", СвойстваДоверенности.Представитель.ИНН).Пустая() Тогда
			Если Не ПустаяСтрока(ТекстИсключенияНеизвестныйДоверитель) Тогда
				ВызватьИсключение ТекстИсключенияНеизвестныйДоверитель;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Не ПустаяСтрока(ТекстИсключенияНеизвестныйДоверитель) Тогда
		ВызватьИсключение ТекстИсключенияНеизвестныйДоверитель;
	ИначеЕсли СвойстваДоверенности.Представитель.Тип = "3" Тогда
		
		// ФизическоеЛицо
		ЗаполнитьДанныеФизлица(СвойстваДоверенности.Представитель, Представитель);
		
		Если СвойстваДоверенности.Представитель.Свойство("ИННФЛ")
			И Не ФизическоеЛицоСИННЕстьВБазеДанных(СвойстваДоверенности.Представитель.ИННФЛ) Тогда
			
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В справочнике ""Физические лица"" не найден представитель %1 (ИНН: %2)';
											|en = 'В справочнике ""Физические лица"" не найден представитель %1 (ИНН: %2)'"),
				СвойстваДоверенности.Представитель.ФИО,
				СвойстваДоверенности.Представитель.ИННФЛ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СвойстваДоверенности;
	
КонецФункции

Функция СвойстваДоверенностиВФорматеИФНС002(ДеревоXML)
	
	СвойстваДоверенности = Новый Структура;
	ТэгДоверенности = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СвДов");
	
	СвойстваДоверенности.Вставить("Номер",  ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверенности, "ВнНомДовер", Ложь));
	СвойстваДоверенности.Вставить("НомерВРеестре",  ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверенности, "НомДовер", Ложь));
	СвойстваДоверенности.Вставить("Дата", ДатаИзXML(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверенности, "ДатаВыдДовер", Ложь)));
	СвойстваДоверенности.Вставить("ДатаНачала", ДатаИзXML(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверенности, "ДатаВыдДовер", Ложь)));
	СвойстваДоверенности.Вставить("ДатаОкончания", ДатаИзXML(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверенности, "ДатаКонДовер", Ложь)));
	СвойстваДоверенности.Вставить("Передоверие", Ложь);
	
	СвойстваДоверенности.Вставить("Доверитель", Новый Структура);
	ТэгДоверитель = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СвДоверит", Истина);
	
	ТипДоверителя = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверитель, "ТипДовер");
	Если ТипДоверителя = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не поддерживаемый формат файла.';
								|en = 'Не поддерживаемый формат файла.'");
	КонецЕсли;
	
	Если ТипДоверителя = "ЮЛ" Тогда
		
		ТегЮрлица = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверитель, "РосОргДовер", Истина);
		СвойстваДоверенности.Доверитель.Вставить("Наименование", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТегЮрлица, "НаимОрг"));
		СвойстваДоверенности.Доверитель.Вставить("ИНН", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТегЮрлица, "ИННЮЛ"));
		СвойстваДоверенности.Доверитель.Вставить("ОГРН", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТегЮрлица, "ОГРН"));
		
		Если Справочники.Организации.НайтиПоРеквизиту("ИНН", СвойстваДоверенности.Доверитель.ИНН).Пустая() Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В справочнике Организации не найден доверитель %1 (ИНН: %2)';
											|en = 'В справочнике Организации не найден доверитель %1 (ИНН: %2)'"),
				СвойстваДоверенности.Доверитель.Наименование,
				СвойстваДоверенности.Доверитель.ИНН);
		КонецЕсли;
		
		ДанныеФизлицаДоверителя = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТегЮрлица, "ЛицоБезДов");
		Если ДанныеФизлицаДоверителя <> Неопределено Тогда
			
			СведенияФизлица = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТегЮрлица, "СвФЛ");
			СвойстваДоверенности.Доверитель.Вставить("ИННФЛ", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(СведенияФизлица, "ИННФЛ"));
			
			Подписант = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "Подписант", Истина);
			ЧастиИмени = Новый Структура("Фамилия,Имя,Отчество", "", "", "");
			ЗаполнитьЗначенияСвойств(ЧастиИмени, Подписант);
			СвойстваДоверенности.Доверитель.Вставить("ФИО", ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФИОИзЧастей(ЧастиИмени));
		КонецЕсли;
		
		Если СвойстваДоверенности.Доверитель.Свойство("ИННФЛ")
			И Не ФизическоеЛицоСИННЕстьВБазеДанных(СвойстваДоверенности.Доверитель.ИННФЛ) Тогда
			
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В справочнике ""Физические лица"" не найден ответственный доверителя %1 (ИНН: %2)';
											|en = 'В справочнике ""Физические лица"" не найден ответственный доверителя %1 (ИНН: %2)'"),
				СвойстваДоверенности.Доверитель.ФИО,
				СвойстваДоверенности.Доверитель.ИННФЛ);
		КонецЕсли;
		
	ИначеЕсли ТипДоверителя = "ИП" Тогда
		
		// Индивидуальный предприниматель
		ДанныеДоверителя = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверитель, "ИПДовер");
		СвойстваДоверенности.Доверитель.Вставить("Наименование", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеДоверителя, "НаимИП"));
		СвойстваДоверенности.Доверитель.Вставить("ИНН", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеДоверителя, "ИННФЛ"));
		СвойстваДоверенности.Доверитель.Вставить("ОГРН", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеДоверителя, "ОГРНИП"));
		
		Если Справочники.Организации.НайтиПоРеквизиту("ИНН", СвойстваДоверенности.Доверитель.ИНН).Пустая() Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В справочнике ""Организации"" не найден доверитель %1 (ИНН: %2)';
											|en = 'В справочнике ""Организации"" не найден доверитель %1 (ИНН: %2)'"),
				СвойстваДоверенности.Доверитель.Наименование,
				СвойстваДоверенности.Доверитель.ИНН);
		КонецЕсли;
		
		ДанныеФизлица = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгДоверитель, "СведФЛ");
		ЗаполнитьДанныеФизлица(СвойстваДоверенности.Доверитель, ДанныеФизлица);
		
	КонецЕсли;
	
	СвойстваДоверенности.Вставить("Представитель", Новый Структура);
	
	ТегПредставитель = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СвУпПред", Истина);
	Если ТегПредставитель <> Неопределено Тогда
		
		ТэгФизлица = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТегПредставитель, "СведФизЛ", Истина);
		Если ТэгФизлица <> Неопределено Тогда
			СвойстваДоверенности.Представитель.Вставить("ИННФЛ", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгФизлица, "ИННФЛ"));
			СвойстваДоверенности.Представитель.Вставить("СНИЛС", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгФизлица, "СНИЛС"));
			СвойстваДоверенности.Представитель.Вставить("ДатаРождения", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгФизлица, "ДатаРожд"));
			ФИО = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ТэгФизлица, "ФИО", Истина);
			ЧастиИмени = Новый Структура("Фамилия,Имя,Отчество", "", "", "");
			ЗаполнитьЗначенияСвойств(ЧастиИмени, ФИО);
			СвойстваДоверенности.Представитель.Вставить("ФИО", ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФИОИзЧастей(ЧастиИмени));
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстыПолномочий = Новый Массив;
	ТэгДовер = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "Довер");
	Если ТэгДовер <> Неопределено Тогда
		КоллекцияПолномочий = ЭлектронныеТрудовыеКнижки.КоллекцияОбъектовXDTO(ТэгДовер, "СвПолн");
		Если КоллекцияПолномочий <> Неопределено Тогда
			Для Каждого ОбъектПолномочия Из КоллекцияПолномочий Цикл
				ТекстыПолномочий.Добавить(ОбъектПолномочия.ТекстПолн);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваДоверенности.Вставить("Комментарий", СтрСоединить(ТекстыПолномочий, Символы.ПС));
	Возврат СвойстваДоверенности;
	
КонецФункции

Функция ФизическоеЛицоСИННЕстьВБазеДанных(ИНН)
	
	Возврат Не Справочники.ФизическиеЛица.НайтиПоРеквизиту("ИНН", ИНН).Пустая();
	
КонецФункции

Функция ФизическоеЛицоСоСНИЛСЕстьВБазеДанных(СНИЛС)
	
	Возврат Не Справочники.ФизическиеЛица.НайтиПоРеквизиту("СтраховойНомерПФР", СНИЛС).Пустая();
	
КонецФункции

Функция ДатаИзXML(Знач ДатаСтрокой)
	
	Если СтрДлина(ДатаСтрокой) < 10 Тогда
		Возврат '00010101';
	КонецЕсли;
	
	ЧастиДатыСтрокой = СтрРазделить(ДатаСтрокой, "-");
	Если ЧастиДатыСтрокой.Количество() < 3 Тогда
		Возврат '00010101';
	КонецЕсли;
	Возврат СтроковыеФункцииКлиентСервер.СтрокаВДату(
		СтрШаблон("%1-%2-%3",
			ЧастиДатыСтрокой[2],
			ЧастиДатыСтрокой[1],
			ЧастиДатыСтрокой[0]));
	
КонецФункции

Процедура ЗаполнитьДанныеФизлица(Контейнер, ДанныеСФизлицомВXML)
	
	Если ДанныеСФизлицомВXML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер.Вставить("ИННФЛ", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеСФизлицомВXML, "ИННФЛ"));
	Контейнер.Вставить("СНИЛС", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеСФизлицомВXML, "СНИЛС"));
	
	ДетальныеДанные = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеСФизлицомВXML, "СведФЛ");
	
	Если ДетальныеДанные <> Неопределено Тогда
		
		Контейнер.Вставить("ДатаРождения", ДатаИзXML(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДетальныеДанные, "ДатаРожд")));
		
		ДанныеФИО = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДетальныеДанные, "ФИО");
		Если ДанныеФИО <> Неопределено Тогда
			ЧастиИмени = Новый Структура("Фамилия,Имя,Отчество", "", "", "");
			ЗаполнитьЗначенияСвойств(ЧастиИмени, ДанныеФИО);
			Контейнер.Вставить("ФИО", ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФИОИзЧастей(ЧастиИмени));
		КонецЕсли;
		
		ДанныеДокумента = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДетальныеДанные, "УдЛичнФЛ");
		Если ДанныеДокумента <> Неопределено Тогда
			Контейнер.Вставить("Документ", Новый Структура);
			Контейнер.Документ.Вставить("Тип", Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодМВД", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеДокумента, "КодВидДок")));
			Контейнер.Документ.Вставить("Номер", ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеДокумента, "СерНомДок"));
			Контейнер.Документ.Вставить("Дата", ДатаИзXML(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДанныеДокумента, "ДатаДок")));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ТелоДоверенности(ДоверенностьОбъект) Экспорт
	
	ДанныеДляВывода = Новый Структура;
	ДанныеДляВывода.Вставить("ДоверенностьОбъект", ДанныеДоверенности(ДоверенностьОбъект));
	
	ДанныеДляВывода.Вставить("ДанныеДоверителя",
		ДанныеОрганизации(ДанныеДляВывода.ДоверенностьОбъект.Доверитель, ДанныеДляВывода.ДоверенностьОбъект.Дата));
	ДанныеДляВывода.Вставить("ДанныеОтветственногоДоверителя",
		ДанныеФизическогоЛица(ДанныеДляВывода.ДоверенностьОбъект.ОтветственныйДоверителя, ДанныеДляВывода.ДоверенностьОбъект.Дата));
	ДанныеДляВывода.Вставить("ДанныеПредставителя",
		ДанныеФизическогоЛица(ДанныеДляВывода.ДоверенностьОбъект.Представитель, ДанныеДляВывода.ДоверенностьОбъект.Дата));
	
	Возврат ПолучитьДвоичныеДанныеИзСтроки(ДанныеДоверенностиВСтрокуXMLВерсия003(ДанныеДляВывода), КодировкаТекста.UTF8);
	
КонецФункции

#Область ГенерацияТекстаМЧД_003

#Область ЭкспортВФайл

// 4.1
Функция ДанныеДоверенностиВСтрокуXMLВерсия003(ДанныеДляВывода) Экспорт
	
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML(, "UTF-8");
	
	URIПространстваИмен = Метаданные.ПакетыXDTO["МашиночитаемаяДоверенность_EMCHD_1"].ПространствоИмен;
	ПакетXDTO = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
	
	ДоверенностьТип = ПакетXDTO.КорневыеСвойства.Получить("Доверенность").Тип;
	ТэгДоверенность = ФабрикаXDTO.Создать(ДоверенностьТип);
	
	ТэгДоверенность.ВерсФорм = "EMCHD_1";
	ТэгДоверенность.ПрЭлФорм = "00000000";
	ТэгДоверенность.ИдФайл = ИдентификаторФайла(
		ДанныеДляВывода.ДоверенностьОбъект.Дата,
		ДанныеДляВывода.ДоверенностьОбъект.Ссылка);
	
	ВывестиВXMLДокумент(ТэгДоверенность, ДанныеДляВывода);
	
	ФабрикаXDTO.ЗаписатьXML(ПотокВыгрузкиXML, ТэгДоверенность, "Доверенность");
	
	ДоверенностьСтрокой = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	ДоверенностьСтрокой = СтрЗаменить(ДоверенностьСтрокой, URIПространстваИмен, "urn://x-artefacts/EMCHD_1");
	
	Возврат ДоверенностьСтрокой;
	
КонецФункции

// 4.2
Процедура ВывестиВXMLДокумент(ТэгДоверенность, ДанныеДляВывода)
	
	ТэгДокумент = ВывестиВXMLСвойство(ТэгДоверенность, "Документ");
	Если ДанныеДляВывода.ДоверенностьОбъект.Передоверие Тогда
		ВывестиВXMLДанныеДоверенностиПриПередоверии(ТэгДокумент, ДанныеДляВывода);
	Иначе
		ВывестиВXMLДанныеДоверенности(ТэгДокумент, ДанныеДляВывода);
	КонецЕсли;
	
КонецПроцедуры

// 4.3
Процедура ВывестиВXMLДанныеДоверенности(ТэгДокумент, ДанныеДляВывода)
	
	ТэгДовер = ВывестиВXMLСвойство(ТэгДокумент, "Довер");
	
	ВывестиВXMLСведенияОДоверенности(ТэгДовер, ДанныеДляВывода, "СвДов");
	ВывестиВXMLДоверителя(ТэгДовер, ДанныеДляВывода);
	ВывестиВXMLСведенияОПредставителях(ТэгДовер, ДанныеДляВывода, "СвУпПред");
	ВывестиВXMLСведенияОПолномочияхПредставителей(ТэгДовер, ДанныеДляВывода, "СвПолн");
	
КонецПроцедуры

// 4.4
Процедура ВывестиВXMLДоверителя(ТэгДовер, ДанныеДляВывода)
	
	ТэгСвДоверит = ВывестиВXMLСвойство(ТэгДовер, "СвДоверит");
	
	ТипДоверителя = 1;
	Если Не ДанныеДляВывода.ДанныеДоверителя.ЭтоЮридическоеЛицо Тогда
		ТипДоверителя = 3;
	КонецЕсли;
	ТэгСвДоверит.ТипДоверит = ТипДоверителя;
	ВывестиВXMLСведенияОДоверителе(ТэгСвДоверит, ДанныеДляВывода, ТипДоверителя);
	
КонецПроцедуры

// 4.5
Процедура ВывестиВXMLСведенияОДоверителе(ТэгСвДоверит, ДанныеДляВывода, ТипДоверителя)
	
	ТэгДоверит = ВывестиВXMLСвойство(ТэгСвДоверит, "Доверит");
	Если ТипДоверителя = 1 Тогда
		ВывестиВXMLСведенияОбОрганизации(ТэгДоверит, ДанныеДляВывода);
	ИначеЕсли ТипДоверителя = 3 Тогда
		ВывестиВXMLСведенияОбИндивидуальномПредпринимателе(ТэгДоверит, ДанныеДляВывода, "ИПДовер")
	КонецЕсли;
	
КонецПроцедуры

// 4.6 *
Процедура ВывестиВXMLСведенияОбОрганизации(ТэгДоверит, ДанныеДляВывода)
	
	ТэгРосОргДовер = ВывестиВXMLСвойство(ТэгДоверит, "РосОргДовер");
	
	ТэгРосОргДовер.ЕИОУК = 0;
	ТэгРосОргДовер.ЕИОФЛ = 1;
	ТэгРосОргДовер.ЕИОИП = 0;
	
	ВывестиВXMLДанныеОрганизации(ТэгРосОргДовер, ДанныеДляВывода, "СвРосОрг");
	ВывестиВXMLДанныеЛицаБезДоверенности(ТэгРосОргДовер, ДанныеДляВывода, "ЛицоБезДов");
	
КонецПроцедуры

// 4.7
Процедура ВывестиВXMLДанныеЛицаБезДоверенности(Родитель, ДанныеДляВывода, ИмяСвойства)
	
	Свойство = ВывестиВXMLСвойство(Родитель, ИмяСвойства);
	
	Свойство.ПолнЮЛ = 1;
	ВывестиВXMLСведенияОФизическомЛицеРуководителе(Свойство, ДанныеДляВывода.ДанныеОтветственногоДоверителя, "СвФЛ");
	
КонецПроцедуры

// 4.9 *
Процедура ВывестиВXMLСведенияОФизическомЛицеРуководителе(Родитель, ДанныеФизическогоЛица, ИмяСвойства)
	
	Свойство = ВывестиВXMLСвойство(Родитель, ИмяСвойства);
	
	Свойство.ИННФЛ = ДанныеФизическогоЛица.ИНН;
	Свойство.СНИЛС = ДанныеФизическогоЛица.СтраховойНомерПФР;
	Свойство.Должность = "Должность";
	
	ВывестиВXMLСведенияОФизическомЛице(Свойство, ДанныеФизическогоЛица, "СведФЛ");
	
КонецПроцедуры

// 4.11 *
Процедура ВывестиВXMLСведенияОбИндивидуальномПредпринимателе(Родитель, ДанныеДляВывода, ИмяСвойства)
	
	Свойство = ВывестиВXMLСвойство(Родитель, ИмяСвойства);
	
	Свойство.НаимИП = ДанныеДляВывода.ДанныеДоверителя.НаимЮЛПол;
	Свойство.ОГРНИП = ДанныеДляВывода.ДанныеДоверителя.ОГРН;
	Свойство.ИННФЛ =  ДанныеДляВывода.ДанныеОтветственногоДоверителя.ИНН;
	Свойство.СНИЛС =  ДанныеДляВывода.ДанныеОтветственногоДоверителя.СтраховойНомерПФР;
	
	ВывестиВXMLСведенияОФизическомЛице(Свойство, ДанныеДляВывода.ДанныеОтветственногоДоверителя, "СведФЛ");
	
КонецПроцедуры

// 4.12
Процедура ВывестиВXMLДанныеДоверенностиПриПередоверии(ТэгДокумент, ДанныеДляВывода)
	
	ТэгПередов = ВывестиВXMLСвойство(ТэгДокумент, "Передов");
	
КонецПроцедуры

// 4.19 *
Процедура ВывестиВXMLСведенияОДоверенности(Родитель, ДанныеДляВывода, ИмяСвойства)
	
	ТэгСвойства = ВывестиВXMLСвойство(Родитель, ИмяСвойства);
	
	ТэгСвойства.ВидДовер = 1;
	Если Не ЗначениеЗаполнено(ДанныеДляВывода.ДоверенностьОбъект.ВозможноПередоверие)
		Или ДанныеДляВывода.ДоверенностьОбъект.ВозможноПередоверие > 3 Тогда
		
		ТэгСвойства.ПрПередов = 1;
	Иначе
		ТэгСвойства.ПрПередов = ДанныеДляВывода.ДоверенностьОбъект.ВозможноПередоверие;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеДляВывода.ДоверенностьОбъект.Номер) Тогда
		ТэгСвойства.ВнНомДовер = ДанныеДляВывода.ДоверенностьОбъект.Номер;
	Иначе
		ТэгСвойства.ВнНомДовер = НСтр("ru = 'б/н';
										|en = 'б/н'");
	КонецЕсли;
	ТэгСвойства.НомДовер = Строка(ДанныеДляВывода.ДоверенностьОбъект.Ссылка.УникальныйИдентификатор()); // Типа обязателен номер в реестре
	ТэгСвойства.ДатаВыдДовер = ФорматДатыДляДоверенности(ДанныеДляВывода.ДоверенностьОбъект.Дата);
	ТэгСвойства.СрокДейст = ФорматДатыДляДоверенности(ДанныеДляВывода.ДоверенностьОбъект.ДатаОкончания);
	ТэгСвойства.СведСист = "https://m4d.nalog.gov.ru";
	
КонецПроцедуры

// 4.20 *
Процедура ВывестиВXMLСведенияОПредставителях(Родитель, ДанныеДляВывода, ИмяСвойства)
	
	Свойство = ВывестиВXMLСвойство(Родитель, ИмяСвойства);
	
	ТипПредставителя = 1;
	Если ТипЗнч(ДанныеДляВывода.ДоверенностьОбъект.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ТипПредставителя = 3;
	ИначеЕсли Не ДанныеДляВывода.ДанныеДоверителя.ЭтоЮридическоеЛицо Тогда
		ТипПредставителя = 2;
	КонецЕсли;
	Свойство.ТипПред = ТипПредставителя;
	ВывестиВXMLСведенияОПредставителе(Свойство, ДанныеДляВывода, ТипПредставителя);
	
КонецПроцедуры

// 4.21
Процедура ВывестиВXMLСведенияОПредставителе(ТэгСвУпПред, ДанныеДляВывода, ТипПредставителя)
	
	ТэгПред = ВывестиВXMLСвойство(ТэгСвУпПред, "Пред");
	Если ТипПредставителя = 1 Тогда
		ВывестиВXMLДанныеОрганизации(ТэгПред, ДанныеДляВывода, "СведОрг");
	ИначеЕсли ТипПредставителя = 2 Тогда
		ВывестиВXMLСведенияОбИндивидуальномПредпринимателе(ТэгПред, ДанныеДляВывода, "СведИП");
	ИначеЕсли ТипПредставителя = 3 Тогда
		ВывестиВXMLСведенияОФизическомЛицеРуководителе(ТэгПред, ДанныеДляВывода.ДанныеПредставителя, "СведФизЛ");
	КонецЕсли;
	
КонецПроцедуры

// 4.22 *
Процедура ВывестиВXMLСведенияОПолномочияхПредставителей(Родитель, ДанныеДляВывода, ИмяСвойства)
	
	Свойство = ВывестиВXMLСвойство(Родитель, ИмяСвойства);
	
	Если ДанныеДляВывода.ДоверенностьОбъект.ВозможноПередоверие > 1 Тогда
		Если ДанныеДляВывода.ДоверенностьОбъект.ПризнакУтратыПолномочийПриПередоверии Тогда
			Свойство.ПрУтрПолн = 2;
		Иначе
			Свойство.ПрУтрПолн = 1;
		КонецЕсли;
	КонецЕсли;
	
	Свойство.ТипПолн = 0;
	Свойство.ПрСовмПолн = 1;
	Свойство.ТекстПолн = ДанныеДляВывода.ДоверенностьОбъект.Комментарий;
	
КонецПроцедуры

// 4.30
Процедура ВывестиВXMLДанныеОрганизации(Родитель, ДанныеДляВывода, ИмяСвойства)
	
	Свойство = ВывестиВXMLСвойство(Родитель, ИмяСвойства);
	
	Свойство.НаимОрг = ДанныеДляВывода.ДанныеДоверителя.НаимЮЛПол;
	Свойство.ИННЮЛ = ДанныеДляВывода.ДанныеДоверителя.ИННЮЛ;
	Свойство.КПП = ДанныеДляВывода.ДанныеДоверителя.КППЮЛ;
	Свойство.ОГРН = ДанныеДляВывода.ДанныеДоверителя.ОГРН;
	
	Если ЗначениеЗаполнено(ДанныеДляВывода.ДанныеДоверителя.АдресЭлектроннойПочтыОрганизации) Тогда
		Свойство.АдрЭлПочт = ДанныеДляВывода.ДанныеДоверителя.АдресЭлектроннойПочтыОрганизации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляВывода.ДанныеДоверителя.ТелОрганизации) Тогда
		Свойство.КонтактТлф = ДанныеДляВывода.ДанныеДоверителя.ТелОрганизации;
	КонецЕсли;
	
	ВывестиВXMLСведенияОбАдресе(Свойство, ДанныеДляВывода.ДанныеДоверителя.АдрЮР_JSON, "АдрРег");
	
КонецПроцедуры

// 4.33 *
Процедура ВывестиВXMLСведенияОФизическомЛице(Родитель, ДанныеФизическогоЛица, ИмяСвойства)
	
	Свойство = ВывестиВXMLСвойство(Родитель, ИмяСвойства);
	
	Если ДанныеФизическогоЛица.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		Свойство.Пол = 2;
	Иначе
		Свойство.Пол = 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.ДатаРождения) Тогда
		Свойство.ДатаРожд = ФорматДатыДляДоверенности(ДанныеФизическогоЛица.ДатаРождения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.МестоРождения) Тогда
		Свойство.МестоРожд = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ДанныеФизическогоЛица.МестоРождения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.Страна) Тогда
		Свойство.Гражданство = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФизическогоЛица.Страна, "Код");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.ТелефонРабочийПредставление) Тогда
		Свойство.КонтактТлф = ДанныеФизическогоЛица.ТелефонРабочийПредставление;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.EMailПредставление) Тогда
		Свойство.АдрЭлПочт = ДанныеФизическогоЛица.EMailПредставление;
	КонецЕсли;
	
	ВывестиВXMLСведенияОФИО(Свойство, ДанныеФизическогоЛица, "ФИО");
	ВывестиВXMLСведенияОбАдресе(Свойство, ДанныеФизическогоЛица.АдресМестаПроживания, "АдрМЖ");
	ВывестиВXMLСведенияОДокументеУдостоверяющемЛичность(Свойство, ДанныеФизическогоЛица);
	
КонецПроцедуры

// 4.36 *
Процедура ВывестиВXMLСведенияОбАдресе(Родитель, Адрес_JSON, ИмяСвойства)
	
	Если ЗначениеЗаполнено(Адрес_JSON) Тогда
		
		Свойство = ВывестиВXMLСвойство(Родитель, ИмяСвойства);
		
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(Адрес_JSON);
		
		Свойство.Регион = СведенияОбАдресе.КодРегиона;
		Свойство.АдрРФ = СведенияОбАдресе.Представление;
		
	КонецЕсли;
	
КонецПроцедуры

// 4.37
Процедура ВывестиВXMLСведенияОДокументеУдостоверяющемЛичность(ТэгСведФЛ, ДанныеФизическогоЛица)
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.ДокументВид) Тогда
		
		ТэгУдЛичнФЛ = ВывестиВXMLСвойство(ТэгСведФЛ, "УдЛичнФЛ");
		ТэгУдЛичнФЛ.КодВидДок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФизическогоЛица.ДокументВид, "КодМВД");
		
		ТэгУдЛичнФЛ.СерНомДок = ДанныеФизическогоЛица.ДокументСерия + ДанныеФизическогоЛица.ДокументНомер;
		
		ТэгУдЛичнФЛ.ДатаДок = ФорматДатыДляДоверенности(ДанныеФизическогоЛица.ДокументДатаВыдачи);
		
		Если ТэгУдЛичнФЛ.КодВидДок <> "10" Тогда
			Если ЗначениеЗаполнено(ДанныеФизическогоЛица.ДокументКемВыдан) Тогда
				ТэгУдЛичнФЛ.ВыдДок = ДанныеФизическогоЛица.ДокументКемВыдан;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеФизическогоЛица.ДокументКодПодразделения) Тогда
				ТэгУдЛичнФЛ.КодВыдДок = ДанныеФизическогоЛица.ДокументКодПодразделения;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеФизическогоЛица.ДокументВид = Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ Тогда
			Если ЗначениеЗаполнено(ДанныеФизическогоЛица.ДокументСрокДействия) Тогда
				ТэгУдЛичнФЛ.expDate = ФорматДатыДляДоверенности(ДанныеФизическогоЛица.ДокументСрокДействия);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// 4.38 *
Процедура ВывестиВXMLСведенияОФИО(Родитель, ДанныеФизическогоЛица, ИмяСвойства)
	
	Свойство = ВывестиВXMLСвойство(Родитель, ИмяСвойства);
	Свойство.Фамилия = ДанныеФизическогоЛица.Фамилия;
	Свойство.Имя = ДанныеФизическогоЛица.Имя;
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.Отчество) Тогда
		Свойство.Отчество = ДанныеФизическогоЛица.Отчество;
	КонецЕсли;
	
КонецПроцедуры

Функция ВывестиВXMLСвойство(Родитель, ИмяСвойства)
	
	Если Родитель[ИмяСвойства] = Неопределено Тогда
		ТипТэга = Родитель.Свойства().Получить(ИмяСвойства).Тип;
		ВыводимыйТэг = ФабрикаXDTO.Создать(ТипТэга);
		Родитель[ИмяСвойства] = ВыводимыйТэг;
	ИначеЕсли ТипЗнч(Родитель[ИмяСвойства]) = Тип("СписокXDTO") Тогда
		ТипТэга = Родитель.Свойства().Получить(ИмяСвойства).Тип;
		ВыводимыйТэг = ФабрикаXDTO.Создать(ТипТэга);
		Родитель[ИмяСвойства].Добавить(ВыводимыйТэг);
	Иначе
		ВыводимыйТэг = Родитель[ИмяСвойства];
	КонецЕсли;
	
	Возврат ВыводимыйТэг;
	
КонецФункции

Функция ФорматДатыДляДоверенности(ДатаВДоверенности)
	
	Возврат Формат(ДатаВДоверенности, "ДФ=гггг-ММ-дд; ДП=");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РегистрацияМЧД

// Получает номер МЧД на сервере МЧД.
// 
// Параметры:
//  ТокенДоступа - Строка - Токен доступа к серверу МЧД.
// 
// Возвращаемое значение:
//  Структура - Результат:
//   * НомерДоверенности - Строка - Номер доверенности
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьНомерМЧД(ТокенДоступа = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Результат = Новый Структура;
	Результат.Вставить("НомерДоверенности", "");
	Результат.Вставить("ТекстОтвета", 		"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен номер доверенности с сервера МЧД распределенного реестра';
			|en = 'Не получен номер доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении номера доверенности с сервера МЧД распределенного реестра. %1';
			|en = 'Ошибка при получении номера доверенности с сервера МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок = КодыОшибокДоступа();
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/number", "/poar-webapp/integration/poa/generate-number");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");		
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать данные при получении номера доверенности с сервера МЧД: %1';
				|en = 'Не удалось разобрать данные при получении номера доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Регистрирует МЧД на сервере МЧД.
// 
// Параметры:
//  ИмяФайлаВыгрузки - Строка - Имя файла выгрузки
//  ДанныеВыгрузки - ДвоичныеДанные - Данные выгрузки
//  ДанныеПодписи - ДвоичныеДанные - Данные подписи
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
//  СсылкаНаДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, Неопределено - Ссылка на доверенность
// 
// Возвращаемое значение:
//  Структура - Результат регистрации:
//   * ИдентификаторТранзакции - Строка - Идентификатор транзакции
//   * НомерДоверенности - Строка - Номер доверенности
//   * ХешДоверенности - Строка - Хеш доверенности
//   * ИННДоверителя - Строка - ИНН доверителя
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ЗарегистрироватьМЧД(ИмяФайлаВыгрузки, ДанныеВыгрузки, ДанныеПодписи, НомерДоверенности = "") Экспорт
	
	ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.РегистрацияМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("НомерДоверенности", 		"");
	Результат.Вставить("ХешДоверенности", 			"");
	Результат.Вставить("ИННДоверителя", 			"");
	Результат.Вставить("ТекстОтвета", 				"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен идентификатор загрузки доверенности на сервер МЧД распределенного реестра';
			|en = 'Не получен идентификатор загрузки доверенности на сервер МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1';
			|en = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1';
			|en = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при загрузке доверенности на сервер МЧД распределенного реестра. %1';
			|en = 'Ошибка при загрузке доверенности на сервер МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/contract/pre_validation/failed",
		СтрШаблон(
			НСтр("ru = 'Регистрационный номер или имя файла регистрируемой доверенности ""%1"" уже используется';
				|en = 'Регистрационный номер или имя файла регистрируемой доверенности ""%1"" уже используется'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unknown-poa-type",
		СтрШаблон(
			НСтр("ru = 'Некорректный префикс имени файла доверенности ""%1"", невозможно определить тип доверенности';
				|en = 'Некорректный префикс имени файла доверенности ""%1"", невозможно определить тип доверенности'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.signature_is_invalid",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка валидности электронной подписи доверенности ""%1""';
				|en = 'Не пройдена проверка валидности электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_cn_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнены фамилия, имя, отчество владельца в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не заполнены фамилия, имя, отчество владельца в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_snils_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен СНИЛС владельца в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не заполнен СНИЛС владельца в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_ogrn_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен ОГРН организации, к которой принадлежит владелец, в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не заполнен ОГРН организации, к которой принадлежит владелец, в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен ОГРНИП в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не заполнен ОГРНИП в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_signer_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка подписанта на соответствие данным сертификата электронной подписи доверенности ""%1"" или в качестве доверителя указан ИП';
				|en = 'Не пройдена проверка подписанта на соответствие данным сертификата электронной подписи доверенности ""%1"" или в качестве доверителя указан ИП'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя не указан в доверенности ""%1""';
				|en = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя не указан в доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_ogrnip_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя в доверенности не совпадает с ОГРНИП в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя в доверенности не совпадает с ОГРНИП в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_ogrn_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРН доверителя в доверенности не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не пройдена проверка правомерности загрузки: ОГРН доверителя в доверенности не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_inner_ogrn_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРН организации-доверителя не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""';
				|en = 'Не пройдена проверка правомерности загрузки: ОГРН организации-доверителя не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_signer_check_failed",
		СтрШаблон(
			НСтр("ru = 'Данные доверителя и подписанта в доверенности не соответствуют данным из ЕГРЮЛ для доверенности ""%1""';
				|en = 'Данные доверителя и подписанта в доверенности не соответствуют данным из ЕГРЮЛ для доверенности ""%1""'"),
			НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poa", "/poar-webapp/integration/poa");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	МассивДвоичныхДанных = Новый Массив();
	
	ШаблонФайла = "--My1cV8bNdr
		|Content-Disposition: form-data; name=""poa""; filename=""%1""
		|Content-Type: text/xml
		|
		|";
	
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));	
	МассивДвоичныхДанных.Добавить(ДанныеВыгрузки);
	
	ШаблонФайла = "
		|--My1cV8bNdr
		|Content-Disposition: form-data; name=""signature""; filename=""%1.sig""
		|Content-Type: text/xml
		|
		|";
		
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	Подпись64 = Base64Строка(ДанныеПодписи);
	Подпись64 = СтрЗаменить(Подпись64, Символы.ВК, "");
	Подпись64 = СтрЗаменить(Подпись64, Символы.ПС, "");
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Подпись64, "windows-1251"));
	
	ШаблонФайла = "
		|--My1cV8bNdr--";
	СодержимоеФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	ПередаваемыеДанные = СоединитьДвоичныеДанные(МассивДвоичныхДанных);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ПередаваемыеДанные);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
		Результат.ХешДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaId"),
			СтруктураОтвета.poaId, "");
		Результат.ИННДоверителя = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("issuerInn"),
			СтруктураОтвета.issuerInn, "");
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при загрузке доверенности на сервер МЧД: %1';
				|en = 'Не удалось разобрать ответ при загрузке доверенности на сервер МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Получает статус транзакции МЧД.
// 
// Параметры:
//  ИдентификаторТранзакции - Строка - Идентификатор транзакции
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
// 
// Возвращаемое значение:
//  Структура - Результат получения статуса транзакции МЧД:
//   * СтатусТранзакции - Строка - Статус транзакции
//   * ИдентификаторТранзакции - Строка - Идентификатор транзакции
//   * ДатаВремяТранзакции - Дата, Неопределено - Дата и время транзакции
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьСтатусТранзакцииМЧД(ИдентификаторТранзакции, ТокенДоступа = "", НомерДоверенности = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеСтатусаТранзакцииМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусТранзакции", 			"");
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("ДатаВремяТранзакции", 		Неопределено);
	Результат.Вставить("ТекстОтвета", 				"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус обработки с сервера МЧД распределенного реестра';
			|en = 'Не получен статус обработки с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1';
			|en = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении статус обработки с сервера МЧД распределенного реестра. %1';
			|en = 'Ошибка при получении статус обработки с сервера МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок,
		КодыОшибокОтзыва(НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/transactions?txId=" + ИдентификаторТранзакции,
		"/poar-webapp/integration/poa/" + ИдентификаторТранзакции + "/status");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.СтатусТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, "");
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		
		Результат.ДатаВремяТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("timestamp"),
			СтруктураОтвета.timestamp, Неопределено);
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1';
				|en = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если ЗначениеЗаполнено(Результат.ДатаВремяТранзакции) Тогда
		Попытка
			Результат.ДатаВремяТранзакции = XMLЗначение(Тип("Дата"), Результат.ДатаВремяТранзакции);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось разобрать дату и время транзакции';
									|en = 'Не удалось разобрать дату и время транзакции'");
			СтруктураПараметров = Новый Структура("ШаблонОшибкиИзИсключения", ТекстСообщения); 
			ВывестиИЗаписатьОшибкуМЧД(СтруктураПараметров, ОтветHTTP, , "ТолькоЗаписатьВЖурналРегистрации");
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураШаблоновОшибокМЧД()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТекстОшибкиПоУмолчанию", 		"");
	Результат.Вставить("ШаблонОшибкиИзИсключения", 		"");
	Результат.Вставить("ШаблонОшибкиДляКодаСостояния", 	"");
	Результат.Вставить("ШаблонОшибкиИзОтвета", 			"");
	Результат.Вставить("ШаблоныДляКодовОшибок", 		Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

// Авторизуется на сервере МЧД.
// 
// Возвращаемое значение:
//  Структура - Результат авторизации:
//   * ТокенДоступа - Строка - Токен доступа
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция АвторизоватьсяНаСервереМЧД()
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.АвторизацияНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ТокенДоступа", "");
	Результат.Вставить("ТекстОтвета", "");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен токен доступа при авторизации на сервере МЧД распределенного реестра';
			|en = 'Не получен токен доступа при авторизации на сервере МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1';
			|en = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1';
			|en = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении токена доступа при авторизации на сервере МЧД распределенного реестра. %1';
			|en = 'Ошибка при получении токена доступа при авторизации на сервере МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/invalid_grant",
		НСтр("ru = 'Некорректная авторизация на сервере МЧД распределенного реестра';
			|en = 'Некорректная авторизация на сервере МЧД распределенного реестра'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unsupported_grant_type",
		НСтр("ru = 'Некорректный тип авторизации на сервере МЧД распределенного реестра';
			|en = 'Некорректный тип авторизации на сервере МЧД распределенного реестра'"));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/token", "/vst-oauth2/oauth/token");

	ПараметрыРесурсаНаСервере = "";
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		ТикетАутентификацииИлиДанныеПользователя =
			ТикетАутентификацииИлиДанныеПользователяНаПорталеПоддержки();
		
		Если ТикетАутентификацииИлиДанныеПользователя = Неопределено Тогда
			ТекстОшибкиПоУмолчанию =
			 	НСтр("ru = 'Авторизация на сервере МЧД распределенного реестра невозможна, так как не заданы логин и пароль авторизации на Портале 1С:ИТС';
						|en = 'Авторизация на сервере МЧД распределенного реестра невозможна, так как не заданы логин и пароль авторизации на Портале 1С:ИТС'"); 
			СтруктураОтвета = Новый Структура("ТекстОшибкиПоУмолчанию", ТекстОшибкиПоУмолчанию);
			ВывестиИЗаписатьОшибкуМЧД(Неопределено, , СтруктураОтвета);
			Возврат Результат;
		КонецЕсли;
		
		Если ТикетАутентификацииИлиДанныеПользователя.Свойство("Тикет") Тогда
			Тикет = КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Тикет,
				СпособКодированияСтроки.КодировкаURL); 
			ПараметрыРесурсаНаСервере = СтрШаблон("?ticket=%1", Тикет);
		Иначе
			Логин = КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Логин,
				СпособКодированияСтроки.КодировкаURL);
			Пароль = КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Пароль,
				СпособКодированияСтроки.КодировкаURL);
			ПараметрыРесурсаНаСервере = СтрШаблон("?login=%1&password=%2", Логин, Пароль);
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере + ПараметрыРесурсаНаСервере, ЗаголовкиHTTP);
	Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("username", СвойстваСервераМЧД.Логин);
		СтруктураЗапроса.Вставить("password", СвойстваСервераМЧД.Пароль);
		СтруктураЗапроса.Вставить("grant_type", "password");
		
		ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
		ЗапросJSON = Новый ЗаписьJSON;
		ЗапросJSON.ОткрытьФайл(ИмяФайлаЗапроса, "utf-8");
		ЗаписатьJSON(ЗапросJSON, СтруктураЗапроса);
		ЗапросJSON.Закрыть();
		
		ЗапросHTTP.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
	КонецЕсли;
	
	Попытка
		ОписаниеСоединения = ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервера, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
		Иначе
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
		КонецЕсли;
	Исключение
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат.ТекстОтвета);
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("access_token") Тогда
			Результат.ТокенДоступа = СтруктураОтвета.access_token;
		Иначе
			Результат.ТокенДоступа = "";
		КонецЕсли;
	Исключение
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1';
				|en = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ТокенДоступа) Тогда
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
	КонецЕсли;

	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваСервераМЧД()
	
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("АдресСервера",				"https://1cpoagate.1c.ru/");
	СтруктураАдреса.Вставить("РесурсКорняAPI",				"/applications/MChD/api/clientpoa");
	СтруктураАдреса.Вставить("ИспользоватьРасширенияAPI",	Истина);

	Результат = СтруктураАдреса;
	Результат.Вставить("АдресСервераБезАутентификации",	СтруктураАдреса.АдресСервера);
	Результат.Вставить("ЛогинОператора", 				"");
	Результат.Вставить("ПарольОператора", 				"");
	
	НачалоПараметровАутентификации = СтрНайти(Результат.АдресСервераБезАутентификации, "://");
	КонецПараметровАутентификации = СтрНайти(Результат.АдресСервераБезАутентификации, "@");
	Если НачалоПараметровАутентификации <> 0 И КонецПараметровАутентификации <> 0 Тогда
		Результат.АдресСервераБезАутентификации =
			Лев(Результат.АдресСервераБезАутентификации, НачалоПараметровАутентификации + 2)
			+ Сред(Результат.АдресСервераБезАутентификации, КонецПараметровАутентификации + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВывестиИЗаписатьОшибкуМЧД(
		ШаблоныОшибок,
		ОтветHTTP = Неопределено,
		СтруктураОтвета = Неопределено,
		РежимВыводаИЗаписи = "")
	
	ШаблоныОшибокВызова = СтруктураШаблоновОшибокМЧД();
	Если ШаблоныОшибок <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ШаблоныОшибокВызова, ШаблоныОшибок);
	КонецЕсли;
	
	КодОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("type"),
		СтруктураОтвета.type, "");
	ЗаголовокОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("title"),
		СтруктураОтвета.title, "");
	ТекстОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("detail"),
		СтруктураОтвета.detail, "");
	
	Если ЗначениеЗаполнено(КодОшибки) И ШаблоныОшибокВызова.ШаблоныДляКодовОшибок <> Неопределено
		И ЗначениеЗаполнено(ШаблоныОшибокВызова.ШаблоныДляКодовОшибок[КодОшибки]) Тогда
		
		ТекстОшибки = ШаблоныОшибокВызова.ШаблоныДляКодовОшибок[КодОшибки];
		
	ИначеЕсли ЗначениеЗаполнено(ЗаголовокОшибки) ИЛИ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтрШаблон(
			ШаблоныОшибокВызова.ШаблонОшибкиИзОтвета,
			ЗаголовокОшибки + ?(ЗначениеЗаполнено(ЗаголовокОшибки) И ЗначениеЗаполнено(ТекстОшибки), ": ", "") + ТекстОшибки);
		
	Иначе
		ТекстОшибки = ?(ОтветHTTP = Неопределено, "", ОписаниеОшибкиHTTP(ОтветHTTP.КодСостояния));
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = СтрШаблон(
				ШаблоныОшибокВызова.ШаблонОшибкиДляКодаСостояния,
				ТекстОшибки);
			
		ИначеЕсли ЗначениеЗаполнено(ШаблоныОшибокВызова.ШаблонОшибкиИзИсключения) Тогда
			ТекстОшибки = СтрШаблон(
				ШаблоныОшибокВызова.ШаблонОшибкиИзИсключения,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Иначе
			ТекстОшибки = ШаблоныОшибокВызова.ТекстОшибкиПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимВыводаИЗаписи <> "ТолькоЗаписатьВЖурналРегистрации" И НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если РежимВыводаИЗаписи <> "ТолькоВывестиОшибку" Тогда
		ИмяСобытия = НСтр("ru = 'Машиночитаемые доверенности';
							|en = 'Машиночитаемые доверенности'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Возвращает коллекцию шаблонов ошибок доступа
// 
// Возвращаемое значение - Коллекция общих шаблонов ошибок:
//  Соответствие:
//   * Ключ - Строка
//   * Значение - Строка
Функция КодыОшибокДоступа()
	
	Результат = Новый Соответствие;
	Результат.Вставить("/errors/unauthenticated",
		НСтр("ru = 'Запрос к серверу МЧД распределенного реестра выполнен от неавторизованного пользователя';
			|en = 'Запрос к серверу МЧД распределенного реестра выполнен от неавторизованного пользователя'"));
	Результат.Вставить("/errors/unauthorized",
		НСтр("ru = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра';
			|en = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра'"));
	Возврат Результат;
	
КонецФункции

// Возвращает коллекцию шаблонов ошибок отзыва
// 
// Возвращаемое значение - Коллекция общих шаблонов ошибок отзыва:
//  Соответствие:
//   * Ключ - Строка
//   * Значение - Строка
Функция КодыОшибокОтзыва(НомерДоверенности)
	
	Результат = Новый Соответствие;
	Результат.Вставить("/errors/not-found",
		СтрШаблон(НСтр("ru = 'Не найдена доверенность с номером ""%1""';
						|en = 'Не найдена доверенность с номером ""%1""'"), НомерДоверенности));
	Возврат Результат;
	
КонецФункции

Функция ОписаниеОшибкиHTTP(КодСостояния)
	
	Если КодСостояния < 300 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 300 Тогда
		Возврат НСтр("ru = 'Множественный выбор при отправке ответа сервера';
					|en = 'Множественный выбор при отправке ответа сервера'");
	ИначеЕсли КодСостояния = 301 Тогда
		Возврат НСтр("ru = 'Ресурс перемещен';
					|en = 'Ресурс перемещен'");
	ИначеЕсли КодСостояния = 302 Тогда
		Возврат НСтр("ru = 'Ресурс временно перемещен';
					|en = 'Ресурс временно перемещен'");
	ИначеЕсли КодСостояния = 303 Тогда
		Возврат НСтр("ru = 'Ресурс перемещен на другой адрес';
					|en = 'Ресурс перемещен на другой адрес'");
	ИначеЕсли КодСостояния = 304 Тогда
		Возврат НСтр("ru = 'Неожиданный ответ об отсутствии изменений страницы';
					|en = 'Неожиданный ответ об отсутствии изменений страницы'");
	ИначеЕсли КодСостояния = 305 Тогда
		Возврат НСтр("ru = 'Для доступа к ресурсу требуется прокси';
					|en = 'Для доступа к ресурсу требуется прокси'");
	ИначеЕсли КодСостояния = 306 Тогда
		Возврат НСтр("ru = 'Неиспользуемый код перенаправления запроса';
					|en = 'Неиспользуемый код перенаправления запроса'");
	ИначеЕсли КодСостояния = 307 Тогда
		Возврат НСтр("ru = 'Временное перенаправление';
					|en = 'Временное перенаправление'");
	ИначеЕсли КодСостояния < 400 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка по перенаправлению запроса с кодом %1';
				|en = 'Ошибка по перенаправлению запроса с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 400 Тогда
		Возврат НСтр("ru = 'Неверный формат запроса';
					|en = 'Неверный формат запроса'");
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат НСтр("ru = 'Требуется аутентификация';
					|en = 'Требуется аутентификация'");
	ИначеЕсли КодСостояния = 402 Тогда
		Возврат НСтр("ru = 'Требуется оплата';
					|en = 'Требуется оплата'");
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат НСтр("ru = 'Доступ к ресурсу запрещен';
					|en = 'Доступ к ресурсу запрещен'");
	ИначеЕсли КодСостояния = 404 Тогда
		Возврат НСтр("ru = 'Запрошенная страница не найдена';
					|en = 'Запрошенная страница не найдена'");
	ИначеЕсли КодСостояния = 405 Тогда
		Возврат НСтр("ru = 'Используемый метод запрещен';
					|en = 'Используемый метод запрещен'");
	ИначеЕсли КодСостояния = 406 Тогда
		Возврат НСтр("ru = 'Отсутствуют подходящие ответы';
					|en = 'Отсутствуют подходящие ответы'");
	ИначеЕсли КодСостояния = 407 Тогда
		Возврат НСтр("ru = 'Требуется аутентификация прокси';
					|en = 'Требуется аутентификация прокси'");
	ИначеЕсли КодСостояния = 408 Тогда
		Возврат НСтр("ru = 'Лимит времени сервера при ожидании запроса исчерпан';
					|en = 'Лимит времени сервера при ожидании запроса исчерпан'");
	ИначеЕсли КодСостояния = 409 Тогда
		Возврат НСтр("ru = 'Конфликт с текущим состоянием ресурса, требуется больше информации';
					|en = 'Конфликт с текущим состоянием ресурса, требуется больше информации'");
	ИначеЕсли КодСостояния = 410 Тогда
		Возврат НСтр("ru = 'Ресурс более недоступен';
					|en = 'Ресурс более недоступен'");
	ИначеЕсли КодСостояния = 411 Тогда
		Возврат НСтр("ru = 'Требуется задание длины содержимого';
					|en = 'Требуется задание длины содержимого'");
	ИначеЕсли КодСостояния = 412 Тогда
		Возврат НСтр("ru = 'Ошибочные условия заголовочных полей';
					|en = 'Ошибочные условия заголовочных полей'");
	ИначеЕсли КодСостояния = 413 Тогда
		Возврат НСтр("ru = 'Слишком большая длина запроса';
					|en = 'Слишком большая длина запроса'");
	ИначеЕсли КодСостояния = 414 Тогда
		Возврат НСтр("ru = 'Запрошенный идентификатор слишком велик';
					|en = 'Запрошенный идентификатор слишком велик'");
	ИначеЕсли КодСостояния = 415 Тогда
		Возврат НСтр("ru = 'Неподдерживаемый тип данных запроса';
					|en = 'Неподдерживаемый тип данных запроса'");
	ИначеЕсли КодСостояния = 416 Тогда
		Возврат НСтр("ru = 'Запрошенный промежуток невыполним';
					|en = 'Запрошенный промежуток невыполним'");
	ИначеЕсли КодСостояния = 417 Тогда
		Возврат НСтр("ru = 'Несоответствие ожиданиям';
					|en = 'Несоответствие ожиданиям'");
	ИначеЕсли КодСостояния = 422 Тогда
		Возврат НСтр("ru = 'Необрабатываемый объект';
					|en = 'Необрабатываемый объект'");
	ИначеЕсли КодСостояния = 423 Тогда
		Возврат НСтр("ru = 'Заблокировано';
					|en = 'Заблокировано'");
	ИначеЕсли КодСостояния = 424 Тогда
		Возврат НСтр("ru = 'Сбой взаимосвязанного вызова';
					|en = 'Сбой взаимосвязанного вызова'");
	ИначеЕсли КодСостояния = 449 Тогда
		Возврат НСтр("ru = 'Возврат запроса после необходимого действия';
					|en = 'Возврат запроса после необходимого действия'");
	ИначеЕсли КодСостояния < 500 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка клиента с кодом %1';
				|en = 'Ошибка клиента с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 500 Тогда
		Возврат НСтр("ru = 'Внутренняя ошибка сервера';
					|en = 'Внутренняя ошибка сервера'");
	ИначеЕсли КодСостояния = 501 Тогда
		Возврат НСтр("ru = 'Процесс для данного запроса не поддерживается сервером';
					|en = 'Процесс для данного запроса не поддерживается сервером'");
	ИначеЕсли КодСостояния = 502 Тогда
		Возврат НСтр("ru = 'Gateway-сервер получил ошибочный ответ';
					|en = 'Gateway-сервер получил ошибочный ответ'");
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат НСтр("ru = 'Сервер временно недоступен';
					|en = 'Сервер временно недоступен'");
	ИначеЕсли КодСостояния = 504 Тогда
		Возврат НСтр("ru = 'Превышено время ожидание ответа на запрос Gateway-сервера';
					|en = 'Превышено время ожидание ответа на запрос Gateway-сервера'");
	ИначеЕсли КодСостояния = 505 Тогда
		Возврат НСтр("ru = 'Версия HTTP не поддерживается сервером';
					|en = 'Версия HTTP не поддерживается сервером'");
	ИначеЕсли КодСостояния = 506 Тогда
		Возврат НСтр("ru = 'Вариантный тип содержит также вариант';
					|en = 'Вариантный тип содержит также вариант'");
	ИначеЕсли КодСостояния = 507 Тогда
		Возврат НСтр("ru = 'Переполнение хранилища';
					|en = 'Переполнение хранилища'");
	ИначеЕсли КодСостояния = 510 Тогда
		Возврат НСтр("ru = 'Отсутствует поддержка расширений';
					|en = 'Отсутствует поддержка расширений'");
	ИначеЕсли КодСостояния < 600 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка сервера с кодом %1';
				|en = 'Ошибка сервера с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 999 Тогда
		Возврат НСтр("ru = 'Разрушительный сбой сервера';
					|en = 'Разрушительный сбой сервера'");
	Иначе
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка с кодом %1';
				|en = 'Ошибка с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	КонецЕсли;

КонецФункции

Функция ИспользуетсяРежимТестирования()
	Возврат Ложь;
КонецФункции

// Получает тикет аутентификации или данные пользователя на портале поддержки.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Тикет аутентификации или данные пользователя на портале поддержки:
Функция ТикетАутентификацииИлиДанныеПользователяНаПорталеПоддержки() Экспорт

	ВидОперации = НСтр("ru = 'Подключение к порталу интернет-поддержки';
						|en = 'Подключение к порталу интернет-поддержки'");
	ТекстЗаголовкаСообщения = НСтр("ru = 'Невозможно подключиться к порталу интернет-поддержки по причине:';
									|en = 'Невозможно подключиться к порталу интернет-поддержки по причине:'");
	ТекстСообщенияДляПользователя = НСтр("ru = 'Ошибка подключения к порталу интернет-поддержки';
										|en = 'Ошибка подключения к порталу интернет-поддержки'");
	ПодсистемаЭлектронноеВзаимодействие = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ЭлектронноеВзаимодействие;

	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		
		ОписаниеОшибки =
			НСтр("ru = 'Библиотека интернет поддержки пользователей не внедрена в конфигурацию.';
				|en = 'Библиотека интернет поддержки пользователей не внедрена в конфигурацию.'");
		ТекстСообщенияДляЖурналаРегистрации = ТекстЗаголовкаСообщения + Символы.ПС + ОписаниеОшибки;
		
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации,
			ПодсистемаЭлектронноеВзаимодействие,
			ТекстСообщенияДляЖурналаРегистрации,
			ТекстСообщенияДляПользователя);
			
		Возврат Неопределено;
		
	КонецЕсли;
	
	МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	
	Если МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Тикет = ИнтеграцияБИПБЭД.БилетНаСайтПоддержки(Ложь, Ложь);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ПустаяСтрока(Тикет) Тогда
			УстановитьПривилегированныйРежим(Истина);
			Результат = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
			УстановитьПривилегированныйРежим(Ложь);
			Если Результат = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			Возврат Новый Структура("Логин, Пароль", Результат.Логин, Результат.Пароль);
		Иначе
			Возврат Новый Структура("Тикет", Тикет);
		КонецЕсли;
		
	Иначе

		ОписаниеОшибки =
			НСтр("ru = 'Не введены данные доступа к порталу интернет-поддержки.';
				|en = 'Не введены данные доступа к порталу интернет-поддержки.'");
		ТекстСообщенияДляЖурналаРегистрации = ТекстЗаголовкаСообщения + Символы.ПС + ОписаниеОшибки;
		
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации,
			ПодсистемаЭлектронноеВзаимодействие,
			ТекстСообщенияДляЖурналаРегистрации,
			ТекстСообщенияДляПользователя);
	
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхФигурантовДоверенности

Функция ДанныеФизическогоЛица(ФизическоеЛицо, ДатаСведений) Экспорт
	
	ИменаКадровыхДанных = 
		"ФИОПолные,
		|Фамилия,
		|Имя,
		|Отчество,
		|ИНН,
		|СтраховойНомерПФР,
		|Пол,
		|ДатаРождения,
		|Страна,
		|МестоРождения,
		|ТелефонРабочийПредставление,
		|EMailПредставление,
		|АдресМестаПроживания,
		|ДокументВид,
		|ДокументКодМВД,
		|ДокументНомер,
		|ДокументСерия,
		|ДокументДатаВыдачи,
		|ДокументКемВыдан,
		|ДокументКодПодразделения,
		|ДокументСрокДействия";
		
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическогоЛица(Истина, ФизическоеЛицо,ИменаКадровыхДанных, ДатаСведений);
	ИменаКадровыхДанных = СтрШаблон("%1,%2", ИменаКадровыхДанных, "ФИОПолныеРодительныйПадеж,ФИОПолныеВинительныйПадеж");
	Если КадровыеДанные = Неопределено Тогда
		Возврат Новый Структура(ИменаКадровыхДанных);
	КонецЕсли;
	
	ПолученныеДанные = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КадровыеДанные);
	ФИОПолныеРодительныйПадеж = ПолученныеДанные.ФИОПолные;
	ФизическиеЛицаЗарплатаКадры.Просклонять(ПолученныеДанные.ФИОПолные, 2, ФИОПолныеРодительныйПадеж,
		?(ПолученныеДанные.Пол = Перечисления.ПолФизическогоЛица.Женский, 2, 1));
	ПолученныеДанные.Вставить("ФИОПолныеРодительныйПадеж", ФИОПолныеРодительныйПадеж);
	
	ФИОПолныеВинительныйПадеж = ПолученныеДанные.ФИОПолные;
	ФизическиеЛицаЗарплатаКадры.Просклонять(ПолученныеДанные.ФИОПолные, 4, ФИОПолныеВинительныйПадеж,
		?(ПолученныеДанные.Пол = Перечисления.ПолФизическогоЛица.Женский, 2, 1));
	ПолученныеДанные.Вставить("ФИОПолныеВинительныйПадеж", ФИОПолныеВинительныйПадеж);
	
	Возврат ПолученныеДанные;
	
КонецФункции

Функция ДанныеОрганизации(Организация, ДатаСведений) Экспорт
	
	ИменаЗапрашиваемыхДанных =
		"ИндивидуальныйПредприниматель,
		|НаимЮЛСокр,
		|НаимЮЛПол,
		|ОГРН,
		|ИННЮЛ,
		|КППЮЛ,
		|ТелОрганизации,
		|АдресЭлектроннойПочтыОрганизации,
		|АдрЮР,
		|АдрЮР_JSON";
	
	Данные = ЗарплатаКадры.СведенияОбОрганизации(Организация, ИменаЗапрашиваемыхДанных, ДатаСведений);
	Данные.Вставить("ЭтоЮридическоеЛицо", РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация));
	Возврат Данные;
	
КонецФункции

Функция ДанныеДоверенности(МЧД) Экспорт
	
	Если ТипЗнч(МЧД) = Тип("СправочникОбъект.УдалитьМашиночитаемыеДоверенностиКЭДО") Тогда
		МЧДСсылка = МЧД.Ссылка;
	Иначе
		МЧДСсылка = МЧД;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МЧДСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоверенностиКЭДО.Ссылка КАК Ссылка,
		|	ДоверенностиКЭДО.Наименование КАК Наименование,
		|	ДоверенностиКЭДО.ДатаНачала КАК ДатаНачала,
		|	ДоверенностиКЭДО.ДатаОкончания КАК ДатаОкончания,
		|	ДоверенностиКЭДО.Доверитель КАК Доверитель,
		|	ДоверенностиКЭДО.ОтветственныйДоверителя КАК ОтветственныйДоверителя,
		|	ДоверенностиКЭДО.Представитель КАК Представитель,
		|	ДоверенностиКЭДО.ОтветственныйПредставителя КАК ОтветственныйПредставителя,
		|	ДоверенностиКЭДО.Передоверие КАК Передоверие,
		|	ДоверенностиКЭДО.Доверенность КАК Доверенность,
		|	ДоверенностиКЭДО.ИмяФайлаДоверенности КАК ИмяФайлаДоверенности,
		|	ДоверенностиКЭДО.ПодписанЭП КАК ПодписанЭП,
		|	ДоверенностиКЭДО.Комментарий КАК Комментарий,
		|	ДоверенностиКЭДО.Номер КАК Номер,
		|	ДоверенностиКЭДО.Дата КАК Дата,
		|	ДоверенностиКЭДО.ВозможноПередоверие КАК ВозможноПередоверие,
		|	ДоверенностиКЭДО.НомерВРеестре КАК НомерВРеестре,
		|	ЕСТЬNULL(СостоянияМЧД.Отозвана, ЛОЖЬ) КАК Отозвана,
		|	ДоверенностиКЭДО.ПризнакУтратыПолномочийПриПередоверии КАК ПризнакУтратыПолномочийПриПередоверии
		|ИЗ
		|	Справочник.УдалитьМашиночитаемыеДоверенностиКЭДО КАК ДоверенностиКЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьСостоянияМЧДКЭДО КАК СостоянияМЧД
		|		ПО ДоверенностиКЭДО.Ссылка = СостоянияМЧД.МЧД
		|ГДЕ
		|	ДоверенностиКЭДО.Ссылка = &Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(ТаблицаРезультата) Тогда
		ЗаполнитьЗначенияСвойств(ТаблицаРезультата.Добавить(), МЧД);
	КонецЕсли;
	СтрокаДанных = ТаблицаРезультата[0];
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДанных);
	
КонецФункции

#КонецОбласти

Процедура ПеренестиДанныеМЧДВОбщийСправочник(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	УдалитьМашиночитаемыеДоверенностиКЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УдалитьМашиночитаемыеДоверенностиКЭДО КАК УдалитьМашиночитаемыеДоверенностиКЭДО
		|ГДЕ
		|	НЕ УдалитьМашиночитаемыеДоверенностиКЭДО.Ссылка В (&МассивОбновленных)
		|	И УдалитьМашиночитаемыеДоверенностиКЭДО.МЧД = ЗНАЧЕНИЕ(Справочник.МашиночитаемыеДоверенности.ПустаяСсылка)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	ТаблицаОбновляемых = Запрос.Выполнить().Выгрузить();
	Если ТаблицаОбновляемых.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Для Каждого ДанныеСправочника Из ТаблицаОбновляемых Цикл
		
		МассивОбновленных.Добавить(ДанныеСправочника.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.УдалитьМашиночитаемыеДоверенностиКЭДО", "Ссылка", ДанныеСправочника.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект = ДанныеСправочника.Ссылка.ПолучитьОбъект();
		ИмяВыгружаемогоФайлаМЧД = СтрШаблон(
			"ON_EMCHD_%1_%2.xml",
			Формат(СправочникОбъект.Дата, "ДФ=yyyyMMdd;"),
			СправочникОбъект.НомерВРеестре);

		ДанныеДоверенности = СправочникОбъект.Доверенность.Получить();
		Если ДанныеДоверенности = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ФайлыДоверенности = Новый Массив;
		ФайлыДоверенности.Добавить(
			Новый Структура(
				"ИмяФайла,Хранение",
				ИмяВыгружаемогоФайлаМЧД,
				ПоместитьВоВременноеХранилище(ДанныеДоверенности)));
				
		ПодписиМЧД = ЭлектроннаяПодписьКЭДО.УстановленныеПодписи(ДанныеСправочника.Ссылка);
		Для Каждого ПодписьМЧД Из ПодписиМЧД Цикл
			ФайлыДоверенности.Добавить(
				Новый Структура(
					"ИмяФайла,Хранение",
					КадровыйЭДОВызовСервера.ИмяФайлаПодписи(ИмяВыгружаемогоФайлаМЧД),
					ПоместитьВоВременноеХранилище(ПодписьМЧД.Подпись)));
		КонецЦикла;
		ДобавленныеДоверенности = Справочники.МашиночитаемыеДоверенности.ЗагрузитьДоверенностиВИнформационнуюБазу(ФайлыДоверенности, Истина);		
		Если Не ЗначениеЗаполнено(ДобавленныеДоверенности.ТекстОшибки) Тогда
			
			МЧДСсылка = ДобавленныеДоверенности.Доверенности[0];
			СправочникОбъект.МЧД = МЧДСсылка;
			МЧДОбъект = ДобавленныеДоверенности.Доверенности[0].Получитьобъект();
			Если Не МЧДОбъект.РегистрироватьВРеестре Тогда
				МЧДОбъект.РегистрироватьВРеестре = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МЧДОбъект);
			КонецЕсли;
			
			СправочникОбъект.МЧД = ДобавленныеДоверенности.Доверенности[0];
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		// Добавление записей ЭлектронныеПодписиМЧД
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МЧД", ДанныеСправочника.Ссылка);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЭлектронныеПодписиКЭДО.ПодписанныйОбъект КАК ПодписанныйОбъект,
			|	ЭлектронныеПодписиКЭДО.РольПодписанта КАК РольПодписанта,
			|	УдалитьМашиночитаемыеДоверенностиКЭДО.МЧД КАК МЧДНовая,
			|	ЭлектронныеПодписи.ИдентификаторПодписи КАК ИдентификаторПодписи
			|ИЗ
			|	РегистрСведений.ЭлектронныеПодписиКЭДО КАК ЭлектронныеПодписиКЭДО
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьМашиночитаемыеДоверенностиКЭДО КАК УдалитьМашиночитаемыеДоверенностиКЭДО
			|		ПО ЭлектронныеПодписиКЭДО.УдалитьМЧД = УдалитьМашиночитаемыеДоверенностиКЭДО.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			|		ПО ЭлектронныеПодписиКЭДО.ПодписанныйОбъект = ЭлектронныеПодписи.ПодписанныйОбъект
			|			И ЭлектронныеПодписиКЭДО.УдалитьОтпечаток = ЭлектронныеПодписи.Отпечаток
			|			И ЭлектронныеПодписиКЭДО.УдалитьДатаПодписи = ЭлектронныеПодписи.ДатаПодписи
			|ГДЕ
			|	ЭлектронныеПодписиКЭДО.УдалитьМЧД = &МЧД";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ИдентификаторПодписи) Тогда
			
				Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
					ПараметрыОбновления, "РегистрСведений.ЭлектронныеПодписиМЧД", "ПодписанныйОбъект", Выборка.ПодписанныйОбъект) Тогда
					
					Продолжить;
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.ЭлектронныеПодписиМЧД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(Выборка.ПодписанныйОбъект);
				НаборЗаписей.Отбор.ИдентификаторПодписи.Установить(Выборка.ИдентификаторПодписи);
				
				Запись = НаборЗаписей.Добавить();
				Запись.ПодписанныйОбъект = Выборка.ПодписанныйОбъект;
				Запись.ИдентификаторПодписи = Выборка.ИдентификаторПодписи;
				Запись.МашиночитаемаяДоверенность = Выборка.МЧДНовая;
			
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавление записей ВыгружаемыеОбъектыКабинетСотрудника
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МЧД", ДанныеСправочника.Ссылка);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВыгружаемыеОбъектыКабинетСотрудника.Ссылка КАК Ссылка,
			|	ВыгружаемыеОбъектыКабинетСотрудника.УсловноВыгружается КАК УсловноВыгружается,
			|	ВыгружаемыеОбъектыКабинетСотрудника.ОкончаниеВыгрузки КАК ОкончаниеВыгрузки
			|ИЗ
			|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъектыКабинетСотрудника
			|ГДЕ
			|	ВыгружаемыеОбъектыКабинетСотрудника.Ссылка = &МЧД";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления, "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника", "Ссылка", Выборка.Ссылка) Тогда
			
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(Выборка.Ссылка);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(МЧДСсылка);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Ссылка = МЧДСсылка;
			Запись.УсловноВыгружается = Выборка.УсловноВыгружается;
			Запись.ОкончаниеВыгрузки = Выборка.ОкончаниеВыгрузки;
		
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
		КонецЕсли;
		
		// Добавление записей ВыгруженныеОбъектыУправлениеПерсоналом
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МЧД", ДанныеСправочника.Ссылка);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВыгруженныеОбъектыУправлениеПерсоналом.Ссылка КАК Ссылка,
			|	ВыгруженныеОбъектыУправлениеПерсоналом.Приложение КАК Приложение,
			|	ВыгруженныеОбъектыУправлениеПерсоналом.ТипОбъекта КАК ТипОбъекта,
			|	ВыгруженныеОбъектыУправлениеПерсоналом.Выгружался КАК Выгружался
			|ИЗ
			|	РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОбъектыУправлениеПерсоналом
			|ГДЕ
			|	ВыгруженныеОбъектыУправлениеПерсоналом.Ссылка = &МЧД";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления, "РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом", "Ссылка", Выборка.Ссылка) Тогда
			
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ВыгруженныеОбъектыУправлениеПерсоналом.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(Выборка.Ссылка);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			НаборЗаписей = РегистрыСведений.ВыгруженныеОбъектыУправлениеПерсоналом.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(МЧДСсылка);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Ссылка = МЧДСсылка;
			Запись.Приложение = Выборка.Приложение;
			Запись.ТипОбъекта = Выборка.ТипОбъекта;
			Запись.Выгружался = Выборка.Выгружался;
		
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
		КонецЕсли;
		
		// Добавление записей ПубличныеИдентификаторыОбъектовУправлениеПерсоналом
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МЧД", ДанныеСправочника.Ссылка);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.Ссылка КАК Ссылка,
			|	ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.ТипОбъекта КАК ТипОбъекта,
			|	ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.Идентификатор КАК Идентификатор
			|ИЗ
			|	РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом КАК ПубличныеИдентификаторыОбъектовУправлениеПерсоналом
			|ГДЕ
			|	ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.Ссылка = &МЧД";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления, "РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом", "Ссылка", Выборка.Ссылка) Тогда
			
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(Выборка.Ссылка);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			НаборЗаписей = РегистрыСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(МЧДСсылка);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Ссылка = МЧДСсылка;
			Запись.ТипОбъекта = Выборка.ТипОбъекта;
			Запись.Идентификатор = Выборка.Идентификатор;
		
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
		КонецЕсли;
		
		// Добавление записей ИзмененияДляОбменаКабинетСотрудника
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МЧД", ДанныеСправочника.Ссылка);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ИзмененияДляОбменаКабинетСотрудника.Ссылка КАК Ссылка,
			|	ИзмененияДляОбменаКабинетСотрудника.ТипОбъекта КАК ТипОбъекта,
			|	ИзмененияДляОбменаКабинетСотрудника.ВерсияДанных КАК ВерсияДанных,
			|	ИзмененияДляОбменаКабинетСотрудника.ВыгружатьУдаление КАК ВыгружатьУдаление
			|ИЗ
			|	РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК ИзмененияДляОбменаКабинетСотрудника
			|ГДЕ
			|	ИзмененияДляОбменаКабинетСотрудника.Ссылка = &МЧД";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления, "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника", "Ссылка", Выборка.Ссылка) Тогда
			
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(Выборка.Ссылка);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(МЧДСсылка);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Ссылка = МЧДСсылка;
			Запись.ТипОбъекта = Выборка.ТипОбъекта;
			Запись.ВерсияДанных = Выборка.ВерсияДанных;
			Запись.ВыгружатьУдаление = Выборка.ВыгружатьУдаление;
		
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
