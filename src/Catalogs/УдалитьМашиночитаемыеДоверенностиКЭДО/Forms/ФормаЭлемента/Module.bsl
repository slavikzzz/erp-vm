#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СоздатьИзФайла = Параметры.СоздатьИзФайла;
	Если Не СоздатьИзФайла Тогда
		
		Если Параметры.Ключ.Пустая() Тогда
			
			Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
				Объект.Дата = ТекущаяДатаСеанса();
			КонецЕсли;
			
			ЗаполняемыеЗначения = Новый Структура;
			ЗаполняемыеЗначения.Вставить("Организация");
			ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ТекущаяДатаСеанса());
			Объект.Доверитель = ЗаполняемыеЗначения.Организация;
			
			Если ЗначениеЗаполнено(Объект.Доверитель) Тогда
				ОтветственныеЛица = ЗарплатаКадры.ОтветственныеЛицаОрганизации(Объект.Доверитель, "Руководитель", Объект.Дата);
				Если ЗначениеЗаполнено(ОтветственныеЛица.Руководитель) Тогда
					Объект.ОтветственныйДоверителя = ОтветственныеЛица.Руководитель;
				КонецЕсли;
			КонецЕсли;
		
			Если Не ЗначениеЗаполнено(Объект.Представитель) Тогда
				Объект.Представитель = Справочники.ФизическиеЛица.ПустаяСсылка();
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
				Объект.ДатаНачала = Объект.Дата;
			КонецЕсли;
			
			Если Объект.ДатаОкончания <= Объект.ДатаНачала Тогда
				Объект.ДатаОкончания = ДобавитьМесяц(Объект.ДатаНачала, 12);
			КонецЕсли;
			
			ПриИзмененииКлючевыхСведений();
			ПриПолученииДанныхНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		Если СоздатьИзФайла Тогда
			
			Оповещение = Новый ОписаниеОповещения("ЗагрузитьДанныеФайла", ЭтотОбъект);
			ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
			ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
			ПараметрыЗагрузки.Диалог.МножественныйВыбор = Ложь;
			ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Выбор файла машиночитаемой доверенности';
														|en = 'Выбор файла машиночитаемой доверенности'");
			ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Файлы доверенностей (*.xml)|*.xml';
													|en = 'Файлы доверенностей (*.xml)|*.xml'")
				+ НСтр("ru = '|Все файлы(*.*)|*.*';
						|en = '|Все файлы(*.*)|*.*'");
			
			ФайловаяСистемаКлиент.ЗагрузитьФайл(Оповещение, ПараметрыЗагрузки);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ПроверитьВозможностьГенерацииФайла") Тогда
		
		Если Не ТекущийОбъект.НеобходимыеДанныеЗаполнены(Истина) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(АдресДоверенности)
		И ЗначениеЗаполнено(ТекущийОбъект.ИмяФайлаДоверенности) Тогда
		
		ТекущийОбъект.Доверенность = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(АдресДоверенности), Новый СжатиеДанных(9));
	Иначе
		ТекущийОбъект.Доверенность = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ИмяФайлаДоверенности) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СформироватьФайлПриЗаписи");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РазблокироватьДанныеДляРедактирования(ТекущийОбъект.Ссылка, УникальныйИдентификатор);
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДоверительПриИзменении(Элемент)
	
	ДоверительПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйДоверителяПриИзменении(Элемент)
	
	ОтветственныйДоверителяПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставительПриИзменении(Элемент)
	
	ПредставительПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПредставителяПриИзменении(Элемент)
	
	ОтветственныйПредставителяПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ДатаНачалаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ДатаОкончанияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередовериеПриИзменении(Элемент)
	
	Если Объект.ВозможноПередоверие < 2 Тогда
		Объект.ПризнакУтратыПолномочийПриПередоверии = Ложь;
	КонецЕсли;
	УстановитьОтображениеПризнакаУтратыПолномочийПриПередоверии(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭлектронныеПодписи

&НаКлиенте
Процедура ЭлектронныеПодписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЭлектроннаяПодписьКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ОбновитьПодключаемыеКоманды(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подписать(Команда)
	
	Если Не ОбъектСохранен() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПриОбновленииПодписи", ЭтотОбъект);
	ПодписатьНаКлиенте(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодпись(Команда)
	
	Если ЭлектронныеПодписи.Количество() = 1 Тогда
		ТекущиеДанные = ЭлектронныеПодписи[0];
	Иначе
		ТекущиеДанные = Элементы.ЭлектронныеПодписи.ТекущиеДанные;
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.ОткрытьПодпись(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭП(Команда)
	
	Если Не ОбъектСохранен() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЭлектронныеПодписи.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПриОбновленииПодписи", ЭтотОбъект);
	ЭлектроннаяПодписьКЭДОКлиент.ПроверитьПодписи(ЭтотОбъект, ОбработчикПродолжения, Элементы.ЭлектронныеПодписи.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	Если Не ОбъектСохранен() Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПриОбновленииПодписи", ЭтотОбъект);
	ЭлектроннаяПодписьКЭДОКлиент.ПроверитьПодписи(ЭтотОбъект, ОбработчикПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭП(Команда)
	
	Если Не ОбъектСохранен() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьЭПОтветПолучен", ЭтотОбъект);
	Если ЭлектронныеПодписи.Количество() = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить подпись?';
							|en = 'Удалить подпись?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выделенные подписи?';
							|en = 'Удалить выделенные подписи?'");
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭПОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПодпись(Команда)
	
	Если ЭлектронныеПодписи.Количество() = 1 Тогда
		ТекущиеДанные = ЭлектронныеПодписи[0];
	Иначе
		ТекущиеДанные = Элементы.ЭлектронныеПодписи.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Объект = Неопределено Или ТекущиеДанные.Объект.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.СохранитьПодпись(ТекущиеДанные.АдресПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродлитьДействиеПодписей(Команда)
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПриОбновленииПодписи", ЭтотОбъект);
	
	ПараметрыПродления = Новый Структура;
	
	Структура = Новый Структура;
	Структура.Вставить("ПодписанныйОбъект", Параметры.Ключ);
	Структура.Вставить("ПорядковыйНомер", Неопределено);
	ПараметрыПродления.Вставить("Подпись", Структура);
	
	РаботаСФайламиСлужебныйКлиент.ПродлитьДействиеПодписей(ЭтотОбъект, ПараметрыПродления, ОбработчикПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодписьСДиска(Команда)
	
	Если Не ОбъектСохранен() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиПодписи", ЭтотОбъект);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ЗаголовокДанных", НСтр("ru = 'Файл подписи';
													|en = 'Файл подписи'"));
	ОписаниеДанных.Вставить("Объект",          Объект.Ссылка);
	ОписаниеДанных.Вставить("Представление",   Объект.Ссылка);
	ОписаниеДанных.Вставить("ВерсияОбъекта",   Объект.ВерсияДанных);
	ОписаниеДанных.Вставить("Данные",          АдресДоверенности);
	
	
	ЭлектроннаяПодписьКлиент.ДобавитьПодписьИзФайла(ОписаниеДанных, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	ОчиститьСообщения();
	Если Не ОбъектСохранен() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлектронныеПодписи.Количество() = 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗарегистрироватьПослеПодписания", ЭтотОбъект);
		ПодписатьНаКлиенте(Оповещение);
	Иначе
		ЗарегистрироватьМЧД();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостояние(Команда)
	
	ОчиститьСообщения();
	Если ЗначениеЗаполнено(Состояние.ИдентификаторТранзакции) Тогда
		ПроверитьСостояниеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьСостояния = РегистрыСведений.УдалитьСостоянияМЧДКЭДО.СоздатьМенеджерЗаписи();
	ЗаписьСостояния.МЧД = Объект.Ссылка;
	ЗаписьСостояния.Прочитать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗначениеВРеквизитФормы(ЗаписьСостояния, "Состояние");
	
	Если ТекущийОбъект <> Неопределено Тогда
		ДанныеДоверенности = ТекущийОбъект.Доверенность.Получить();
		Если ДанныеДоверенности = Неопределено Тогда
			АдресДоверенности = "";
		Иначе
			АдресДоверенности = ПоместитьВоВременноеХранилище(ДанныеДоверенности, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаДоверенности = Объект.ИмяФайлаДоверенности;
	Если ПустаяСтрока(ИмяФайлаДоверенности) Тогда
		ИмяФайлаДоверенности = НСтр("ru = 'Текст доверенности';
									|en = 'Текст доверенности'");
	КонецЕсли;
	
	ЗаполнитьЦифровыеПодписи(Ложь);
	УстановитьОтображениеЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеЭлементов()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписиДобавитьПодписьСДиска",
		"Видимость",
		ЗначениеЗаполнено(Объект.ИмяФайлаДоверенности));
	
	ТолькоПросмотрДоверенности = ЗначениеЗаполнено(Объект.ИмяФайлаДоверенности)
		Или ЭлектронныеПодписи.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТелоГруппа",
		"ТолькоПросмотр",
		ТолькоПросмотрДоверенности);
	
	УстановитьОтображениеПоляВводаДоверителяПредставителя("Доверитель", "ОтветственныйДоверителя");
	УстановитьОтображениеПоляВводаДоверителяПредставителя("Представитель", "ОтветственныйПредставителя");
	
	ДоступностьОтветственногоДоверителя = ЗначениеЗаполнено(Объект.Доверитель)
		И ТипЗнч(Объект.Доверитель) = Тип("СправочникСсылка.Организации");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтветственныйДоверителя",
		"Доступность",
		ДоступностьОтветственногоДоверителя);
	
	ДоступностьПредставительГруппа = ДоступностьОтветственногоДоверителя И ЗначениеЗаполнено(Объект.ОтветственныйДоверителя)
		Или Не ДоступностьОтветственногоДоверителя И ЗначениеЗаполнено(Объект.Доверитель);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПредставительГруппа",
		"Доступность",
		ДоступностьПредставительГруппа);
	
	ДоступностьОтветственногоПредставителя = ЗначениеЗаполнено(Объект.Представитель)
		И ТипЗнч(Объект.Представитель) = Тип("СправочникСсылка.Организации");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтветственныйПредставителя",
		"Доступность",
		ДоступностьОтветственногоПредставителя);
	
	ДоступностьСрокДействияГруппа = ДоступностьОтветственногоПредставителя И ЗначениеЗаполнено(Объект.ОтветственныйПредставителя)
		Или Не ДоступностьОтветственногоПредставителя И ЗначениеЗаполнено(Объект.Представитель);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СрокДействияГруппа",
		"Доступность",
		ДоступностьСрокДействияГруппа);
	
	ДоступностьТелаДоверенности = ДоступностьСрокДействияГруппа
		И ЗначениеЗаполнено(Объект.ДатаНачала) И ЗначениеЗаполнено(Объект.ДатаОкончания);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Комментарий",
		"Доступность",
		ДоступностьТелаДоверенности);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Передоверие",
		"Доступность",
		ДоступностьОтветственногоДоверителя И ЗначениеЗаполнено(Объект.ОтветственныйДоверителя)
			Или Не ДоступностьОтветственногоДоверителя И ЗначениеЗаполнено(Объект.Доверитель));
	
	ДоступностьДанныхОтзыва = ЭлектронныеПодписи.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДанныеОтзываГруппа",
		"Доступность",
		ДоступностьДанныхОтзыва);
	
	УстановитьПодсказки();
	
	ОбновитьЦифровыеПодписи();
	
	ТолькоПросмотр = ЭлектронныеПодписи.Количество() > 0;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписиУдалить",
		"Доступность",
		Не ТолькоПросмотр Или ИзменениеПодписейВозможно());
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписиПродлитьДействиеПодписей",
		"Доступность",
		Не ТолькоПросмотр Или ИзменениеПодписейВозможно());
	
	Если ЗначениеЗаполнено(Объект.ИмяФайлаДоверенности) Тогда
		ТекстСостояния = НСтр("ru = 'Загружена из файла.';
								|en = 'Загружена из файла.'")
	Иначе
		Если Не Объект.Ссылка.Пустая() Тогда
			Если Объект.ДатаОкончания < ТекущаяДатаСеанса() Тогда
				ТекстСостояния = НСтр("ru = 'Истек срок действия';
										|en = 'Истек срок действия'");
			ИначеЕсли Состояние.Отозвана Тогда
				ТекстСостояния = СтрШаблон(
					НСтр("ru = 'Отозвана %1';
						|en = 'Отозвана %1'"),
					Формат(Состояние.ДатаОтзыва, "ДЛФ=DT"));
			ИначеЕсли ЗначениеЗаполнено(Состояние.ДатаОтзыва) Тогда
				ТекстСостояния = СтрШаблон(
					НСтр("ru = 'Отзывается с %1';
						|en = 'Отзывается с %1'"),
					Формат(Состояние.ДатаОтзыва, "ДЛФ=DT"));
			ИначеЕсли ЗначениеЗаполнено(Состояние.ДатаРегистрации) Тогда
				ТекстСостояния = СтрШаблон(
					НСтр("ru = 'Зарегистрирована %1';
						|en = 'Зарегистрирована %1'"),
					Формат(Состояние.ДатаРегистрации, "ДЛФ=DT"));
			ИначеЕсли ЗначениеЗаполнено(Состояние.ИдентификаторТранзакции) Тогда
				ТекстСостояния = НСтр("ru = 'Регистрируется';
										|en = 'Регистрируется'");
			Иначе
				ТекстСостояния = НСтр("ru = 'В работе';
										|en = 'В работе'");
			КонецЕсли;
		Иначе
			ТекстСостояния = НСтр("ru = 'Создание ...';
									|en = 'Создание ...'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НомерВРеестре) Тогда
		ТекстСостояния = СтрШаблон(НСтр("ru = '%1 (номер в реестре %2).';
										|en = '%1 (номер в реестре %2).'"),
			ТекстСостояния,
			Объект.НомерВРеестре);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СостояниеДекорация",
		"Заголовок",
		СтрШаблон(НСтр("ru = 'Состояние: %1';
						|en = 'Состояние: %1'"), ТекстСостояния));
	
	УстановитьОтображениеПризнакаУтратыПолномочийПриПередоверии(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаОтправить",
		"Видимость",
		Не ЗначениеЗаполнено(Состояние.ДатаРегистрации)
			И Не ЗначениеЗаполнено(Состояние.СтатусТранзакции));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПроверитьСостояние",
		"Видимость",
		Не ЗначениеЗаполнено(Состояние.ДатаРегистрации)
			И ЗначениеЗаполнено(Состояние.СтатусТранзакции));
	
КонецПроцедуры

&НаСервере
Функция ИзменениеПодписейВозможно()
	Возврат Не ЗначениеЗаполнено(Состояние.ДатаРегистрации);
КонецФункции

&НаСервере
Процедура УстановитьОтображениеПоляВводаДоверителяПредставителя(ИмяПоля, ИмяПоляОтветственного)
	
	ПолеЗаданоСтрокой = ТипЗнч(Объект[ИмяПоля]) = Тип("Строка") И Не ПустаяСтрока(Объект[ИмяПоля]);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		ИмяПоля,
		"МногострочныйРежим",
		ПолеЗаданоСтрокой);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		ИмяПоля,
		"РасширенноеРедактирование",
		ПолеЗаданоСтрокой);
	
	Если ПолеЗаданоСтрокой Тогда
		ОграничениеТипа = Новый ОписаниеТипов("Строка, СправочникСсылка.Организации, СправочникСсылка.ФизическиеЛица");
	Иначе
		ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации, СправочникСсылка.ФизическиеЛица");
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		ИмяПоля,
		"ОграничениеТипа",
		ОграничениеТипа);
	
	Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ФизическиеЛица")
		Или ПолеЗаданоСтрокой И Не ЗначениеЗаполнено(Объект[ИмяПоляОтветственного]) Тогда
		
		ЗаголовокПоля = НСтр("ru = 'Физическое лицо';
							|en = 'Физическое лицо'");
	ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Организации")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект[ИмяПоля], "ЮридическоеФизическоеЛицо")
			= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		ЗаголовокПоля = НСтр("ru = 'ИП';
							|en = 'ИП'");
	Иначе
		ЗаголовокПоля = НСтр("ru = 'Организация';
							|en = 'Организация'");
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		ИмяПоля,
		"Заголовок",
		ЗаголовокПоля);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		ИмяПоляОтветственного,
		"Видимость",
		ЗначениеЗаполнено(Объект[ИмяПоля])
			И ТипЗнч(Объект[ИмяПоля]) <> Тип("СправочникСсылка.ФизическиеЛица"));
	
	ПолеОтветственногоЗаданоСтрокой = ТипЗнч(Объект[ИмяПоляОтветственного]) = Тип("Строка") И Не ПустаяСтрока(Объект[ИмяПоляОтветственного]);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		ИмяПоляОтветственного,
		"МногострочныйРежим",
		ПолеОтветственногоЗаданоСтрокой);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		ИмяПоляОтветственного,
		"РасширенноеРедактирование",
		ПолеОтветственногоЗаданоСтрокой);
	
	Если ПолеОтветственногоЗаданоСтрокой Тогда
		ОграничениеТипа = Новый ОписаниеТипов("Строка, СправочникСсылка.ФизическиеЛица");
	Иначе
		ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		ИмяПоляОтветственного,
		"ОграничениеТипа",
		ОграничениеТипа);
	
	ВводОтветственногоДоступен = Истина;
	Если ЗначениеЗаполнено(Объект[ИмяПоля])
		И ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Организации") Тогда
		
		ЗначенияРеквизитовОбъекта = ЗначенияРеквизитовОбъектаДоверенности(Объект[ИмяПоля]);
		ВводОтветственногоДоступен = ЗначенияРеквизитовОбъекта.ЭтоЮридическоеЛицо <> Ложь;
	КонецЕсли;
	
	ЗаголовокОтветственного = НСтр("ru = 'Ответственный';
									|en = 'Ответственный'");
	Если Не ВводОтветственногоДоступен Тогда
		ЗаголовокОтветственного = НСтр("ru = 'Физическое лицо';
										|en = 'Физическое лицо'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		ИмяПоляОтветственного,
		"Заголовок",
		ЗаголовокОтветственного);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		ИмяПоляОтветственного,
		"ТолькоПросмотр",
		Не ВводОтветственногоДоступен);
	
КонецПроцедуры

#Область ИмпортДоверенностиИзФайла

&НаКлиенте
Процедура ЗагрузитьДанныеФайла(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныйФайл = Неопределено Тогда
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗагрузитьДанныеФайлаНаСервере(ПомещенныйФайл);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ПоказатьПредупреждение(
			Новый ОписаниеОповещения("ЗакрытьФормуПриНеудачнойПопыткиЗагрузкиИзФайла", ЭтотОбъект),
			КраткоеПредставлениеОшибки(Ошибка));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуПриНеудачнойПопыткиЗагрузкиИзФайла(ДополнительныеПараметры) Экспорт
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеФайлаНаСервере(ПомещенныйФайл)
	
	Файл = Новый Файл(ПомещенныйФайл.Имя);
	Объект.ИмяФайлаДоверенности = Файл.Имя;
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(ПомещенныйФайл.Хранение);
	АдресДоверенности = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
	
	СвойстваДоверенности = Справочники.УдалитьМашиночитаемыеДоверенностиКЭДО.СвойстваДоверенностиИзФайла(АдресДоверенности);
	
	Объект.Номер         = СвойстваДоверенности.Номер;
	Объект.НомерВРеестре = СвойстваДоверенности.НомерВРеестре;
	Объект.Дата          = СвойстваДоверенности.Дата;
	Объект.ДатаНачала    = СвойстваДоверенности.ДатаНачала;
	Объект.ДатаОкончания = СвойстваДоверенности.ДатаОкончания;
	Объект.Комментарий   = СвойстваДоверенности.Комментарий;
	Объект.Передоверие   = СвойстваДоверенности.Передоверие;
	
	СформироватьНаименование(СвойстваДоверенности);
	
	УстановитьТекстДоверителя(СвойстваДоверенности);
	УстановитьТекстПредставителя(СвойстваДоверенности);
	УстановитьОтображениеЭлементов();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СформироватьНаименование(СвойстваДоверенности = Неопределено)
	
	Объект.Наименование = "";
	Если ЗначениеЗаполнено(Объект.Доверитель) Тогда
		Объект.Наименование = Строка(Объект.Доверитель);
	ИначеЕсли СвойстваДоверенности <> Неопределено Тогда
		Если СвойстваДоверенности.Доверитель.Свойство("Наименование") Тогда
			Объект.Наименование = СвойстваДоверенности.Доверитель.Наименование;
		ИначеЕсли СвойстваДоверенности.Доверитель.Свойство("ФИО") Тогда
			Объект.Наименование = СвойстваДоверенности.Доверитель.ФИО;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Представитель) Тогда
		Объект.Наименование = СтрШаблон("%1, %2",
			Объект.Наименование,
			Объект.Представитель);
	ИначеЕсли СвойстваДоверенности <> Неопределено Тогда
		Если СвойстваДоверенности.Представитель.Свойство("Наименование") Тогда
			Объект.Наименование = СтрШаблон("%1, %2",
				Объект.Наименование,
				СвойстваДоверенности.Представитель.Наименование);
		ИначеЕсли СвойстваДоверенности.Представитель.Свойство("ФИО") Тогда
			Объект.Наименование = СтрШаблон("%1, %2",
				Объект.Наименование,
				СвойстваДоверенности.Представитель.ФИО);
		КонецЕсли;
	КонецЕсли;
	
	Объект.Наименование = СтрШаблон(НСтр("ru = '%1 с %2 по %3';
										|en = '%1 с %2 по %3'"),
		Объект.Наименование,
		Формат(Объект.ДатаНачала, "ДЛФ=D"),
		Формат(Объект.ДатаОкончания, "ДЛФ=D"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстДоверителя(СвойстваДоверенности)
	
	Объект.Доверитель = ТекстПредставленияОрганизации(СвойстваДоверенности.Доверитель);
	Если ЗначениеЗаполнено(Объект.Доверитель) Тогда
		Объект.ОтветственныйДоверителя = ТекстПредставленияФизическогоЛица(СвойстваДоверенности.Доверитель);
	Иначе
		Объект.Доверитель = ТекстПредставленияФизическогоЛица(СвойстваДоверенности.Доверитель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПредставителя(СвойстваДоверенности)
	
	Объект.Представитель = ТекстПредставленияОрганизации(СвойстваДоверенности.Представитель);
	Если ЗначениеЗаполнено(Объект.Представитель) Тогда
		Объект.ОтветственныйПредставителя = ТекстПредставленияФизическогоЛица(СвойстваДоверенности.Представитель);
	Иначе
		Объект.Представитель = ТекстПредставленияФизическогоЛица(СвойстваДоверенности.Представитель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстПредставленияОрганизации(Контейнер)
	
	ТекстПредставления = "";
	Наименование = Неопределено;
	Если Контейнер.Свойство("Наименование", Наименование) Тогда
		НайденнаяСсылка = ОрганизацияПоРеквизиту("Наименование,НаименованиеПолное,НаименованиеСокращенное", Наименование);
		Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
			Возврат НайденнаяСсылка;
		КонецЕсли;
		ТекстПредставления = Контейнер.Наименование;
		Реквизиты = Новый Массив;
		ИНН = Неопределено;
		Если Контейнер.Свойство("ИНН", ИНН) Тогда
			НайденнаяСсылка = ОрганизацияПоРеквизиту("ИНН", ИНН);
			Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
				Возврат НайденнаяСсылка;
			КонецЕсли;
			Реквизиты.Добавить(СтрШаблон(НСтр("ru = 'ИНН: %1';
												|en = 'ИНН: %1'"), ИНН));
		КонецЕсли;
		ОГРН = Неопределено;
		Если Контейнер.Свойство("ОГРН", ОГРН) Тогда
			НайденнаяСсылка = ОрганизацияПоРеквизиту("ОГРН", ОГРН);
			Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
				Возврат НайденнаяСсылка;
			КонецЕсли;
			Если Контейнер.Свойство("ЭтоЮридическоеЛицо")
				И Контейнер.ЭтоЮридическоеЛицо = Ложь Тогда
				
				Реквизиты.Добавить(СтрШаблон(НСтр("ru = 'ОГРНИП: %1';
													|en = 'ОГРНИП: %1'"), ОГРН));
			Иначе
				Реквизиты.Добавить(СтрШаблон(НСтр("ru = 'ОГРН: %1';
													|en = 'ОГРН: %1'"), ОГРН));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизиты) Тогда
			ТекстПредставления = СтрШаблон("%1 (%2)",
				ТекстПредставления,
				СтрСоединить(Реквизиты, ", "));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстПредставления;
	
КонецФункции

&НаСервере
Функция ОрганизацияПоРеквизиту(ИмяРеквизитов, Значение)
	Если ЗначениеЗаполнено(Значение) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗначениеРеквизита", Значение);
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	&УсловиеОтбора
			|
			|УПОРЯДОЧИТЬ ПО
			|	Организации.ПометкаУдаления";
		
		УсловиеОтбора = Новый Массив;
		Для Каждого ИмяРеквизита Из СтрРазделить(ИмяРеквизитов, ",") Цикл
			УсловиеОтбора.Добавить("(ВЫРАЗИТЬ(Организации." + ИмяРеквизита + " КАК СТРОКА(1024)) = &ЗначениеРеквизита)");
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", СтрСоединить(УсловиеОтбора, " ИЛИ "));
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ТекстПредставленияФизическогоЛица(Контейнер)
	
	ТекстПредставления = "";
	Если Контейнер.Свойство("ФИО") Тогда
		Если Контейнер.Свойство("ИННФЛ")
			И ЗначениеЗаполнено(Контейнер.ИННФЛ) Тогда
			
			НайденнаяСсылка = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ИНН", Контейнер.ИННФЛ);
			Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
				Возврат НайденнаяСсылка;
			КонецЕсли;
		КонецЕсли;
		ТекстПредставления = Контейнер.ФИО;
		ДатаРождения = Неопределено;
		Если Контейнер.Свойство("ДатаРождения", ДатаРождения) Тогда
			ТекстПредставления = СтрШаблон("%1 (%2)",
				ТекстПредставления,
				Формат(ДатаРождения, "Л=; ДЛФ=D"));
		КонецЕсли;
		Если Контейнер.Свойство("Документ") Тогда
			СвойстваДокумента = Новый Массив;
			СвойстваДокумента.Добавить(Контейнер.Документ.Тип);
			Серия = Неопределено;
			Если Контейнер.Документ.Свойство("Серия", Серия) Тогда
				СвойстваДокумента.Добавить(СтрШаблон(НСтр("ru = 'Серия: %1';
															|en = 'Серия: %1'"), Серия));
			КонецЕсли;
			Номер = Неопределено;
			Если Контейнер.Документ.Свойство("Номер", Номер) Тогда
				СвойстваДокумента.Добавить(СтрШаблон(НСтр("ru = 'Номер: %1';
															|en = 'Номер: %1'"), Номер));
			КонецЕсли;
			Выдан = Неопределено;
			Если Контейнер.Документ.Свойство("Выдан", Выдан) Тогда
				СвойстваДокумента.Добавить(СтрШаблон(НСтр("ru = 'Выдан: %1';
															|en = 'Выдан: %1'"), Выдан));
			КонецЕсли;
			ДатаВыдачи = Неопределено;
			Если Контейнер.Документ.Свойство("Дата", ДатаВыдачи) Тогда
				СвойстваДокумента.Добавить(СтрШаблон(НСтр("ru = 'Дата: %1';
															|en = 'Дата: %1'"), ДатаВыдачи));
			КонецЕсли;
			Если ЗначениеЗаполнено(СвойстваДокумента) Тогда
				ТекстПредставления = СтрШаблон("%1, %2",
					ТекстПредставления,
					СтрСоединить(СвойстваДокумента, "; "));
			КонецЕсли;
			НайденнаяСсылка = ФизическоеЛицоПоДокументу(Контейнер.Документ.Тип, Серия, Номер, ДатаВыдачи);
			Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
				Возврат НайденнаяСсылка;
			КонецЕсли;
		КонецЕсли;
		НайденнаяСсылка = ФизическоеЛицоПоФИОИДатеРождения(Контейнер.ФИО, ДатаРождения);
		Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
			Возврат НайденнаяСсылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстПредставления;
	
КонецФункции

&НаСервере
Функция ФизическоеЛицоПоДокументу(Вид, Серия, Номер, ДатаВыдачи)
	
	Если ЗначениеЗаполнено(Вид)
		И ЗначениеЗаполнено(Серия)
		И ЗначениеЗаполнено(Номер)
		И ЗначениеЗаполнено(ДатаВыдачи)
		И ТипЗнч(Вид) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Вид", Вид);
		Запрос.УстановитьПараметр("Серия", Серия);
		Запрос.УстановитьПараметр("Номер", Номер);
		Запрос.УстановитьПараметр("ДатаВыдачи", ДатаВыдачи);
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДокументыФизическихЛиц.Физлицо КАК Физлицо
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
			|ГДЕ
			|	ДокументыФизическихЛиц.ВидДокумента = &Вид
			|	И ДокументыФизическихЛиц.Серия = &Серия
			|	И ДокументыФизическихЛиц.Номер = &Номер
			|	И ДокументыФизическихЛиц.ДатаВыдачи = &ДатаВыдачи
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДокументыФизическихЛиц.Физлицо.ПометкаУдаления";
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Физлицо;
		КонецЕсли;
		
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ФизическоеЛицоПоФИОИДатеРождения(ФИО, ДатаРождения)
	
	Если ЗначениеЗаполнено(ФИО) И ЗначениеЗаполнено(ДатаРождения) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФИО", ФИО);
		Запрос.УстановитьПараметр("ДатаРождения", ДатаРождения);
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ФизическиеЛица.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.ФИО = &ФИО
			|	И ФизическиеЛица.ДатаРождения = &ДатаРождения
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизическиеЛица.ПометкаУдаления";
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УстановитьПодсказки()
	
	ТекстПодсказки = "";
	Если ЗначениеЗаполнено(Объект.Доверитель) Тогда
		Если ТипЗнч(Объект.Доверитель) = Тип("СправочникСсылка.Организации") Тогда
			ТекстПодсказки = ПодсказкаОрганизации(Объект.Доверитель);
		ИначеЕсли ТипЗнч(Объект.Доверитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТекстПодсказки = ПодсказкаФизическогоЛица(Объект.Доверитель);
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(ЭтотОбъект, "Доверитель", ТекстПодсказки);
	
	ТекстПодсказки = "";
	Если ЗначениеЗаполнено(Объект.ОтветственныйДоверителя) Тогда
		Если ТипЗнч(Объект.ОтветственныйДоверителя) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТекстПодсказки = ПодсказкаФизическогоЛица(Объект.ОтветственныйДоверителя);
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(ЭтотОбъект, "ОтветственныйДоверителя", ТекстПодсказки);
	
	ТекстПодсказки = "";
	Если ЗначениеЗаполнено(Объект.Представитель) Тогда
		Если ТипЗнч(Объект.Представитель) = Тип("СправочникСсылка.Организации") Тогда
			ТекстПодсказки = ПодсказкаОрганизации(Объект.Представитель);
		ИначеЕсли ТипЗнч(Объект.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТекстПодсказки = ПодсказкаФизическогоЛица(Объект.Представитель);
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(ЭтотОбъект, "Представитель", ТекстПодсказки);
	
	ТекстПодсказки = "";
	Если ЗначениеЗаполнено(Объект.ОтветственныйПредставителя) Тогда
		Если ТипЗнч(Объект.ОтветственныйПредставителя) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТекстПодсказки = ПодсказкаФизическогоЛица(Объект.ОтветственныйПредставителя);
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(ЭтотОбъект, "ОтветственныйПредставителя", ТекстПодсказки);
	
КонецПроцедуры

&НаСервере
Функция ПодсказкаОрганизации(Организация)
	
	ТекстПодсказки = "";
	ЗначенияРеквизитов = ЗначенияРеквизитовОбъектаДоверенности(Организация);
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.ИННЮЛ) Тогда
		ИНН = ЗначенияРеквизитов.ИННЮЛ;
	Иначе
		ИНН = НСтр("ru = 'Не задан';
					|en = 'Не задан'");
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.ОГРН) Тогда
		ОГРН = ЗначенияРеквизитов.ОГРН;
	Иначе
		ОГРН = НСтр("ru = 'Не задан';
					|en = 'Не задан'");
	КонецЕсли;
	
	Если ЗначенияРеквизитов.ЭтоЮридическоеЛицо = Ложь Тогда
		Возврат СтрШаблон(НСтр("ru = 'ИНН: %1; ОГРНИП: %2';
								|en = 'ИНН: %1; ОГРНИП: %2'"),
			ИНН, ОГРН);
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = 'ИНН: %1; ОГРН: %2';
							|en = 'ИНН: %1; ОГРН: %2'"),
		ИНН, ОГРН);
	
КонецФункции

&НаСервере
Функция ПодсказкаФизическогоЛица(ФизическоеЛицо)
	
	ТекстПодсказки = "";
	ДатаРождения = "";
	ДокументПредставление = "";
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическоеЛицо, "ДатаРождения,ДокументПредставление");
	Если КадровыеДанные.Количество() > 0 Тогда
		ДатаРождения = КадровыеДанные[0].ДатаРождения;
		ДокументПредставление = КадровыеДанные[0].ДокументПредставление;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
		ДатаРождения = НСтр("ru = 'Не задана';
							|en = 'Не задана'");
	Иначе
		ДатаРождения = Формат(ДатаРождения, "ДЛФ=D");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументПредставление) Тогда
		ДокументПредставление = НСтр("ru = 'Не задан';
									|en = 'Не задан'");
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = 'Дата рождения: %1, Документ: %2';
							|en = 'Дата рождения: %1, Документ: %2'"),
		ДатаРождения, ДокументПредставление);
КонецФункции

&НаСервере
Процедура ДоверительПриИзмененииНаСервере()
	
	Если ТипЗнч(Объект.Доверитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Объект.ОтветственныйДоверителя = Неопределено;
		Объект.Передоверие = Истина;
	КонецЕсли;
	ПриИзмененииКлючевыхСведений();
	
	Если ТипЗнч(Объект.Доверитель) = Тип("СправочникСсылка.Организации") Тогда
		РеквизитыОбъекта = РеквизитыДоверителя();
		Если РеквизитыОбъекта <> Неопределено Тогда
			Если Не РеквизитыОбъекта.ЭтоЮридическоеЛицо
				И Объект.ОтветственныйДоверителя <> РеквизитыОбъекта.ИндивидуальныйПредприниматель Тогда
				
				Объект.ОтветственныйДоверителя = РеквизитыОбъекта.ИндивидуальныйПредприниматель;
				ОтветственныйДоверителяПриИзмененииНаСервере();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтветственныйДоверителяПриИзмененииНаСервере()
	
	ПриИзмененииКлючевыхСведений();
	
КонецПроцедуры

&НаСервере
Процедура ПредставительПриИзмененииНаСервере()
	
	Если ТипЗнч(Объект.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Объект.ОтветственныйПредставителя = Неопределено;
	КонецЕсли;
	ПриИзмененииКлючевыхСведений();
	
КонецПроцедуры

&НаСервере
Процедура ОтветственныйПредставителяПриИзмененииНаСервере()
	
	ПриИзмененииКлючевыхСведений();
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	
	ПриИзмененииКлючевыхСведений();
	
КонецПроцедуры

&НаСервере
Процедура ДатаОкончанияПриИзмененииНаСервере()
	
	ПриИзмененииКлючевыхСведений();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКлючевыхСведений()
	
	СформироватьНаименование();
	СформироватьТелоДоверенности();
	УстановитьОтображениеЭлементов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандСпискаЭП(Форма, ЭтоНовый) Экспорт
	
	Элементы = Форма.Элементы;
	ЕстьПодписи = (Форма.ЭлектронныеПодписи.Количество() > 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписиОткрыть",
		"Доступность",
		ЕстьПодписи);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОткрытьПодпись",
		"Доступность",
		ЕстьПодписи);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписиПроверить",
		"Доступность",
		ЕстьПодписи И Не ЭтоНовый);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПроверитьЭП",
		"Доступность",
		ЕстьПодписи И Не ЭтоНовый);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписиПроверитьВсе",
		"Видимость",
		ЕстьПодписи И Не ЭтоНовый);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписиСохранить",
		"Доступность",
		ЕстьПодписи);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СохранитьПодпись",
		"Доступность",
		ЕстьПодписи);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписиУдалить",
		"Доступность",
		ЕстьПодписи И Не ЭтоНовый);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписиПродлитьДействиеПодписей",
		"Доступность",
		ЕстьПодписи И Не ЭтоНовый);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПризнакаУтратыПолномочийПриПередоверии(УправляемаяФорма)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ПризнакУтратыПолномочийПриПередоверии",
		"Доступность",
		УправляемаяФорма.Объект.ВозможноПередоверие > 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОбновленииПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦифровыеПодписи(ОбновитьОтображение = Истина)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ЭлектроннаяПодписьКЭДО.ЗаполнитьПодписиВФорме(ЭтотОбъект, Объект.Ссылка);
	КонецЕсли;
	
	Если ОбновитьОтображение Тогда
		ОбновитьЦифровыеПодписи();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦифровыеПодписи()
	
	УстановитьДоступностьКомандСпискаЭП(ЭтотОбъект, Объект.Ссылка.Пустая());
	Если ЭлектронныеПодписи.Количество() = 0 Тогда
		ЗаголовокСтраницы = НСтр("ru = 'Подписи';
								|en = 'Подписи'");
	Иначе
		ЗаголовокСтраницы = СтрШаблон(
			НСтр("ru = 'Подписи (%1)';
				|en = 'Подписи (%1)'"),
			ЭлектронныеПодписи.Количество());
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПодписиГруппа",
		"Заголовок",
		ЗаголовокСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодписи()
	
	ИндексыСтрок = Новый Массив;
	
	Если ЭлектронныеПодписи.Количество() = 1 Тогда
		УдаляемаяСтрока = ЭлектронныеПодписи[0];
		ИндексыСтрок.Добавить(УдаляемаяСтрока.ПорядковыйНомер);
	Иначе
		Для Каждого НомерВыделеннойСтроки Из Элементы.ЭлектронныеПодписи.ВыделенныеСтроки Цикл
			УдаляемаяСтрока = ЭлектронныеПодписи.НайтиПоИдентификатору(НомерВыделеннойСтроки);
			ИндексыСтрок.Добавить(УдаляемаяСтрока.ПорядковыйНомер);
		КонецЦикла;
	КонецЕсли;
	
	ЭлектроннаяПодпись.УдалитьПодпись(Объект.Ссылка, ИндексыСтрок, УникальныйИдентификатор, Объект.ВерсияДанных);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Функция ОбъектСохранен()
	
	ПроверитьВозможностьГенерацииФайла = Ложь;
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		ПроверитьВозможностьГенерацииФайла = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(АдресДоверенности) Тогда
		ПроверитьВозможностьГенерацииФайла = Истина;
	КонецЕсли;
	
	Если ПроверитьВозможностьГенерацииФайла Тогда
		ПараметрыЗаписи = Новый Структура;
		Если Не ЗначениеЗаполнено(Объект.ИмяФайлаДоверенности) Тогда
			ПараметрыЗаписи.Вставить("ПроверитьВозможностьГенерацииФайла", Истина);
		КонецЕсли;
		Если Не Записать(ПараметрыЗаписи) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПустаяСтрока(АдресДоверенности) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не удалось подготовить файл довернности';
					|en = 'Не удалось подготовить файл довернности'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗначенияРеквизитовОбъектаДоверенности(ОбъектДоверенности)
	
	ЗначенияРеквизитов = Новый Соответствие;
	Если ЗначенияРеквизитовОбъектов = Неопределено Тогда
		ЗначенияРеквизитовОбъектов = Новый ФиксированноеСоответствие(Новый Соответствие);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДоверенности) Тогда
		ЗначенияРеквизитов = ЗначенияРеквизитовОбъектов.Получить(ОбъектДоверенности);
		Если ЗначенияРеквизитов = Неопределено Тогда
			Если ТипЗнч(ОбъектДоверенности) = Тип("СправочникСсылка.Организации") Тогда
				ЗначенияРеквизитов = Справочники.УдалитьМашиночитаемыеДоверенностиКЭДО.ДанныеОрганизации(
					ОбъектДоверенности, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			ИначеЕсли ТипЗнч(ОбъектДоверенности) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ЗначенияРеквизитов = Справочники.УдалитьМашиночитаемыеДоверенностиКЭДО.ДанныеФизическогоЛица(
					ОбъектДоверенности, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			КонецЕсли;
			ЗначенияРеквизитовОбъектовНовое = Новый Соответствие(ЗначенияРеквизитовОбъектов);
			ЗначенияРеквизитовОбъектовНовое.Вставить(ОбъектДоверенности, ЗначенияРеквизитов);
			ЗначенияРеквизитовОбъектов = Новый ФиксированноеСоответствие(ЗначенияРеквизитовОбъектовНовое);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

&НаСервере
Функция РеквизитыДоверителя()
	Возврат ЗначенияРеквизитовОбъектаДоверенности(Объект.Доверитель);
КонецФункции

&НаСервере
Функция ЗначенияРеквизитовОтветственногоДоверителя()
	Возврат ЗначенияРеквизитовОбъектаДоверенности(Объект.ОтветственныйДоверителя);
КонецФункции

&НаСервере
Функция РеквизитыПредставителя()
	Возврат ЗначенияРеквизитовОбъектаДоверенности(Объект.Представитель);
КонецФункции

&НаСервере
Функция ЗначенияРеквизитовОтветственногоПредставителя()
	Возврат ЗначенияРеквизитовОбъектаДоверенности(Объект.ОтветственныйПредставителя);
КонецФункции

&НаСервере
Процедура ДобавитьДанныеОрганизации(ЧастиТелаДоверенности, ЗначенияРеквизитов, ЗначенияРеквизитовОтветственного)
	ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.НаимЮЛПол);
	Если ЗначенияРеквизитов.ЭтоЮридическоеЛицо = Ложь Тогда
		ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.ОГРН, НСтр("ru = ', ОГРНИП ';
																				|en = ', ОГРНИП '"));
	Иначе
		ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.ОГРН, НСтр("ru = ', ОГРН ';
																				|en = ', ОГРН '"));
	КонецЕсли;
	
	ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.ИННЮЛ, НСтр("ru = ', ИНН ';
																			|en = ', ИНН '"));
	Если ЗначенияРеквизитов.ЭтоЮридическоеЛицо <> Ложь Тогда
		ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.КППЮЛ, НСтр("ru = ', КПП';
																				|en = ', КПП'"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначенияРеквизитовОтветственного) Тогда
		Если ЗначенияРеквизитов.ЭтоЮридическоеЛицо <> Ложь Тогда
			ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитовОтветственного.ФИОПолныеРодительныйПадеж, НСтр("ru = ' в лице ';
																														|en = ' в лице '"));
		КонецЕсли;
		ДобавитьДанныеФизическогоЛица(ЧастиТелаДоверенности, ЗначенияРеквизитовОтветственного, ЗначенияРеквизитов.ЭтоЮридическоеЛицо <> Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеФизическогоЛица(ЧастиТелаДоверенности, ЗначенияРеквизитов, ВыводитьИНН = Истина)
	ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.ДатаРождения, НСтр("ru = ', дата рождения ';
																					|en = ', дата рождения '"));
	ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.СтраховойНомерПФР, НСтр("ru = ', СНИЛС ';
																						|en = ', СНИЛС '"));
	Если ВыводитьИНН Тогда
		ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.ИНН, НСтр("ru = ', ИНН ';
																				|en = ', ИНН '"));
	КонецЕсли;
	ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.ДокументВид, НСтр("ru = ', Документ ';
																					|en = ', Документ '"));
	ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.ДокументСерия, НСтр("ru = ' серия ';
																					|en = ' серия '"));
	ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.ДокументНомер, НСтр("ru = ' номер ';
																					|en = ' номер '"));
	ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.ДокументДатаВыдачи, НСтр("ru = ' выдан ';
																						|en = ' выдан '"));
	ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.ДокументКемВыдан);
	ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.ДокументКодПодразделения, НСтр("ru = ' код подразделения ';
																								|en = ' код подразделения '"));
КонецПроцедуры

&НаСервере
Процедура ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначениеРеквизита, ТекстПрефикса = "")
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		ЧастиТелаДоверенности.Добавить(ТекстПрефикса + Строка(ЗначениеРеквизита));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Успех Тогда
		
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТелоДоверенности()
	
	ЧастиТелаДоверенности = Новый Массив;
	ЗначенияРеквизитовДоверителя = РеквизитыДоверителя();
	ЗначенияРеквизитовПредставителя = РеквизитыПредставителя();
	Если ЗначениеЗаполнено(ЗначенияРеквизитовДоверителя) И ЗначениеЗаполнено(ЗначенияРеквизитовПредставителя) Тогда
		ЗначенияРеквизитов = ЗначенияРеквизитовДоверителя;
		Если ТипЗнч(Объект.Доверитель) = Тип("СправочникСсылка.Организации") Тогда
			ЗначенияРеквизитовОтветственного = ЗначенияРеквизитовОтветственногоДоверителя();
			ДобавитьДанныеОрганизации(ЧастиТелаДоверенности, ЗначенияРеквизитов, ЗначенияРеквизитовОтветственного);
		ИначеЕсли ТипЗнч(Объект.Доверитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.ФИОПолные);
			ДобавитьДанныеФизическогоЛица(ЧастиТелаДоверенности, ЗначенияРеквизитов);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЧастиТелаДоверенности) Тогда
			ЧастиТелаДоверенности.Добавить(НСтр("ru = ', настоящей доверенностью уполномочивает ';
												|en = ', настоящей доверенностью уполномочивает '"));
		КонецЕсли;
		ЗначенияРеквизитов = ЗначенияРеквизитовПредставителя;
		Если ТипЗнч(Объект.Представитель) = Тип("СправочникСсылка.Организации") Тогда
			ЗначенияРеквизитовОтветственного = ЗначенияРеквизитовОтветственногоПредставителя();
			ДобавитьДанныеОрганизации(ЧастиТелаДоверенности, ЗначенияРеквизитов, ЗначенияРеквизитовОтветственного);
		ИначеЕсли ТипЗнч(Объект.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ДобавитьЧастьТела(ЧастиТелаДоверенности, ЗначенияРеквизитов.ФИОПолныеВинительныйПадеж);
			ДобавитьДанныеФизическогоЛица(ЧастиТелаДоверенности, ЗначенияРеквизитов);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЧастиТелаДоверенности) Тогда
		Если ТипЗнч(Объект.Доверитель) = Тип("СправочникСсылка.Организации") Тогда
			ЧастиТелаДоверенности.Добавить(НСтр("ru = ', представлять интересы организации.';
												|en = ', представлять интересы организации.'"));
		Иначе
			ЧастиТелаДоверенности.Добавить(НСтр("ru = ', представлять интересы.';
												|en = ', представлять интересы.'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧастиТелаДоверенности) Тогда
		ЧастиТелаДоверенности.Добавить(НСтр("ru = 'Для выполнения представительских функций предоставляются следующие полномочия:';
											|en = 'Для выполнения представительских функций предоставляются следующие полномочия:'"));
		ЧастиТелаДоверенности.Добавить(Символы.ПС);
		ЧастиТелаДоверенности.Добавить(Символы.ПС);
		ЧастиТелаДоверенности.Добавить(НСтр("ru = '[Впишите предоставляемые полномочия]';
											|en = '[Впишите предоставляемые полномочия]'"));
		ЧастиТелаДоверенности.Добавить(Символы.ПС);
		ЧастиТелаДоверенности.Добавить(Символы.ПС);
		ЧастиТелаДоверенности.Добавить(СтрШаблон(
			НСтр("ru = 'Настоящая доверенность действительна с %1 по %2.';
				|en = 'Настоящая доверенность действительна с %1 по %2.'"),
			Формат(Объект.ДатаНачала, "ДЛФ=D"),
			Формат(Объект.ДатаОкончания, "ДЛФ=D")));
		ЧастиТелаДоверенности.Добавить(Символы.ПС);
		Если Объект.Передоверие = 2 Тогда
			ЧастиТелаДоверенности.Добавить(НСтр("ru = 'Полномочия по данной доверенности могут быть однократно переданы другим лицам.';
												|en = 'Полномочия по данной доверенности могут быть однократно переданы другим лицам.'"));
		ИначеЕсли Объект.Передоверие = 3 Тогда
			ЧастиТелаДоверенности.Добавить(НСтр("ru = 'Полномочия по данной доверенности могут быть переданы другим лицам, с правом последующего передоверия.';
												|en = 'Полномочия по данной доверенности могут быть переданы другим лицам, с правом последующего передоверия.'"));
		Иначе
			ЧастиТелаДоверенности.Добавить(НСтр("ru = 'Полномочия по данной доверенности не могут быть переданы другим лицам.';
												|en = 'Полномочия по данной доверенности не могут быть переданы другим лицам.'"));
		КонецЕсли;
	КонецЕсли;
	
	Объект.Комментарий = СтрСоединить(ЧастиТелаДоверенности);
	
КонецПроцедуры

// КадровыйЭДО

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодключаемыеКоманды(УправляемаяФорма)
	КадровыйЭДОКлиентСервер.ОбновитьКоманды(УправляемаяФорма, УправляемаяФорма.Объект, Истина);
КонецПроцедуры

// Конец КадровыйЭДО

&НаКлиенте
Процедура ПодписатьНаКлиенте(ОповещениеЗавершения)
	
	ДополнительныеПараметры = Новый Структура("ОбработкаРезультата", ОповещениеЗавершения);
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияНомераВРеестре", ЭтотОбъект, ДополнительныеПараметры);
	Если Не ЗначениеЗаполнено(Объект.НомерВРеестре) Тогда
		ПолучитьНомерВРеестреПередПодписанием(Оповещение);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНомерВРеестреПередПодписанием(ОповещениеЗавершения)
	
	НовыйНомерВРеестре = НомерНовойМЧД().НомерДоверенности;
	Если ЗначениеЗаполнено(НовыйНомерВРеестре) Тогда
		Объект.НомерВРеестре = НовыйНомерВРеестре;
		Модифицированность = Истина;
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияНомераВРеестре(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина
		Или Не ОбъектСохранен() Тогда
		
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьКЭДОКлиент.ПодписатьДоверенность(
		ЭтотОбъект, Объект.Ссылка, АдресДоверенности, ДополнительныеПараметры.ОбработкаРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПослеПодписания(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Истина Тогда
		Прочитать();
		ЗарегистрироватьМЧД();
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиРаботыСРеестром

&НаСервереБезКонтекста
Функция НомерНовойМЧД()
	
	Возврат Справочники.УдалитьМашиночитаемыеДоверенностиКЭДО.ПолучитьНомерМЧД();
	
КонецФункции

// Регистрирует МЧД на сервере ФНС
// 
// Параметры:
//  Результат - см. РезультатПодписать
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ЗарегистрироватьМЧД() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗарегистрироватьВРеестреФНС", Истина);
	
	Результат = Новый Структура(
		"ИдентификаторТранзакции,
		|СтатусТранзакции,
		|ДатаВремяТранзакции,
		|ХешДоверенности,
		|НомерДоверенности,
		|ИННДоверителя");
	
	ДополнительныеПараметры.Вставить("Результат", Результат);
	
	ТребуетсяПроверкаМЧДНаКлиенте = Ложь;
	Если ДополнительныеПараметры.ЗарегистрироватьВРеестреФНС Тогда

		Статус = "";
		ДатаОтправки = Дата(1, 1, 1);
		ИдентификаторТранзакции = "";
		
		ИмяФайлаДоверенности = ИмяВыгружаемогоФайлаПоСсылке(Объект.Ссылка);
		РезультатРегистрации = ЗарегистрироватьМЧДНаСервере(
			ИмяФайлаДоверенности, АдресДоверенности, ЭлектронныеПодписи[0].АдресПодписи, Объект.НомерВРеестре);
		
		ОписаниеРезультата = "";
		Если ЗначениеЗаполнено(РезультатРегистрации.ИдентификаторТранзакции) Тогда
			
			ДополнительныеПараметры.Результат.ИдентификаторТранзакции 	= РезультатРегистрации.ИдентификаторТранзакции;
			ДополнительныеПараметры.Результат.СтатусТранзакции 			= "PENDING";
			ДополнительныеПараметры.Результат.ДатаВремяТранзакции 		= Неопределено;
			ДополнительныеПараметры.Результат.ХешДоверенности 			= РезультатРегистрации.ХешДоверенности;
			ДополнительныеПараметры.Результат.НомерДоверенности 		= РезультатРегистрации.НомерДоверенности;
			ДополнительныеПараметры.Результат.ИННДоверителя 			= РезультатРегистрации.ИННДоверителя;
			
			Статус = "Отправлено";
			ДатаОтправки = ОбщегоНазначенияКлиент.ДатаСеанса();
			ИдентификаторТранзакции = РезультатРегистрации.ИдентификаторТранзакции;
			
			Состояние.СтатусТранзакции = ДополнительныеПараметры.Результат.СтатусТранзакции;
			Состояние.ИдентификаторТранзакции = ДополнительныеПараметры.Результат.ИдентификаторТранзакции;
			Состояние.ДатаВремяТранзакции = ОбщегоНазначенияКлиент.ДатаСеанса();
			
			СохранитьСостояние();
			
			ОписаниеРезультата = НСтр("ru = 'Доверенность отправлена на регистрацию';
										|en = 'Доверенность отправлена на регистрацию'");
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Не удалось зарегистрировать доверенность';
									|en = 'Не удалось зарегистрировать доверенность'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеРезультата) Тогда
			ПоказатьПредупреждение(, ОписаниеРезультата);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Статус) Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСостояние()
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РеквизитФормыВЗначение("Состояние");
	МенеджерЗаписи.МЧД = Объект.Ссылка;
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗарегистрироватьМЧДНаСервере(ИмяФайлаДоверенности, АдресДоверенности, АдресПодписи, НомерДоверенности)
	Возврат Справочники.УдалитьМашиночитаемыеДоверенностиКЭДО.ЗарегистрироватьМЧД(
		ИмяФайлаДоверенности,
		ПолучитьИзВременногоХранилища(АдресДоверенности),
		ПолучитьИзВременногоХранилища(АдресПодписи),
		НомерДоверенности);
КонецФункции

&НаСервереБезКонтекста
Функция ИмяВыгружаемогоФайлаПоСсылке(Ссылка)
	Возврат Справочники.УдалитьМашиночитаемыеДоверенностиКЭДО.ИмяВыгружаемогоФайлаПоСсылке(Ссылка);
КонецФункции

&НаКлиенте
Процедура ПроверитьСостояниеНаКлиенте()
	
	Результат = Новый Структура;
	Результат.Вставить("ХешДоверенности", 		"");
	Результат.Вставить("НомерДоверенности", 	"");
	Результат.Вставить("ДатаВыдачи", 			Неопределено);
	Результат.Вставить("ДатаОкончания", 		Неопределено);
	Результат.Вставить("СтатусДоверенности", 	"");
	Результат.Вставить("ПубличныйКлюч", 		"");
	
	СостояниеИзменено = Ложь;
	СтраницаНеНайдена = Ложь;
	Если Не ЗначениеЗаполнено(Состояние.ДатаРегистрации) И ЗначениеЗаполнено(Состояние.ИдентификаторТранзакции) Тогда
		
		СведенияСтатусаТранзакции = ПолучитьСтатусТранзакцииМЧД(
			Состояние.ИдентификаторТранзакции,
			Объект.НомерВРеестре);
		
		ОписаниеРезультата = "";
		Если СведенияСтатусаТранзакции.СтатусТранзакции = "SUCCESS" Тогда
			Состояние.СтатусТранзакции = СведенияСтатусаТранзакции.СтатусТранзакции;
			Состояние.ДатаРегистрации = ОбщегоНазначенияКлиент.ДатаСеанса();
			Состояние.ДатаПроверкиСведений = ОбщегоНазначенияКлиент.ДатаСеанса();
			Состояние.ИдентификаторТранзакции = "";
			СостояниеИзменено = Истина;
			ОписаниеРезультата = НСтр("ru = 'Доверенность зарегистрирована';
										|en = 'Доверенность зарегистрирована'");
		ИначеЕсли СведенияСтатусаТранзакции.СтатусТранзакции = "FAILURE"
			Или СведенияСтатусаТранзакции.СтатусТранзакции = "ERROR" Тогда
			
			Состояние.ИдентификаторТранзакции = "";
			СостояниеИзменено = Истина;
			Результат.СтатусДоверенности = НСтр("ru = 'Ошибка регистрации';
												|en = 'Ошибка регистрации'");
			ОписаниеРезультата = НСтр("ru = 'Ошибка при регистрации доверенности';
										|en = 'Ошибка при регистрации доверенности'");
		ИначеЕсли СведенияСтатусаТранзакции.СтатусТранзакции = 404 Тогда
			СтраницаНеНайдена = Истина;
			ОписаниеРезультата = НСтр("ru = 'Не удалось установить связь с реестром доверенностей';
										|en = 'Не удалось установить связь с реестром доверенностей'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеРезультата) Тогда
		ПоказатьПредупреждение(, ОписаниеРезультата);
	КонецЕсли;
	
	Если СостояниеИзменено Тогда
		СохранитьСостояние();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтатусТранзакцииМЧД(ИдентификаторТранзакции, НомерВРеестре)
	Возврат Справочники.УдалитьМашиночитаемыеДоверенностиКЭДО.ПолучитьСтатусТранзакцииМЧД(
			ИдентификаторТранзакции,
			"",
			НомерВРеестре);
КонецФункции

#КонецОбласти

#КонецОбласти

