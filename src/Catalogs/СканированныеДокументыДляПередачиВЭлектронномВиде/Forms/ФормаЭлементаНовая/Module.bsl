
&НаКлиенте
Перем КонтекстЭДОКлиент;

&НаКлиенте
Перем МенеджерКриптографии;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФормат_ON_DOCNPNO_1_886_00_05_02 = ТребованияФНСКлиентСервер.ЭтоФормат_ON_DOCNPNO_1_886_00_05_02();
	
	РазобратьПараметры(Параметры);

	//заполнение таблиц участников сделки и файлов
	ЗаполнитьТаблицуФайловПередОткрытием();
	
	Если НЕ ЭтоФормат_ON_DOCNPNO_1_886_00_05_02 Тогда
		ЗаполнитьЭП();
	КонецЕсли;
	
	ЗаполнитьКВД();
	
	УправлениеФормойПриСозданииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтоЗагрузкаСканаНапрямуюИзОписи = ЭтотОбъект.ВладелецФормы <> Неопределено;
	УправлениеФормойПриОткрытии();
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Наименование = "Подготовка документа к отправке";
	КонецЕсли;
	
	// инициализируем контекст формы - контейнера клиентских методов
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Справочники.СканированныеДокументыДляПередачиВЭлектронномВиде.ЗаписатьФайлыФормыВБазу(
		Объект.Ссылка, 
		ТаблицаФайлов, 
		УникальныйИдентификатор);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ДобавитьВОтобранные", ДобавитьВОтобранные);
	
	Оповестить("Запись_СканированныеДокументыДляПередачиВЭлектронномВиде", ПараметрыОповещения, Объект.Ссылка);
	
	ДобавитьВОтобранные = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Объект.ВерсияПриказа) 
		И Объект.ВерсияПриказа = Перечисления.ПриказОписиИсходящихДокументов.ПриказММВ_7_6_16 Тогда
	
		Если ЭтоПакетСДопДокументами Тогда
			ПроверяемыеРеквизиты.Добавить("КВД");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Успешно = ПроверитьPDFПередЗаписью();
	Если НЕ Успешно Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТаблицаФайловПредставлениеЭлПодписиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЭлПодпись_ПослеВыбораВида", 
		ЭтотОбъект);

	Если ТекДанные.ВидPDF <> ПредопределенноеЗначение("Перечисление.ВидыPDF.ДокPDF") Тогда
		// нет выбора - встроенная или отдельная ЭП. Всегда будет отдельная
		
		ВыбратьФайлЭП();
		
	Иначе
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(ЭПВстроенная());
		СписокВыбора.Добавить(ЭПОтдельная());
		
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вид эл. подписи';
																	|en = 'Выберите вид эл. подписи'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловВидPDFПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ВидPDF <> ПредопределенноеЗначение("Перечисление.ВидыPDF.ДокPDF")
		И ТекДанные.ЕстьВстроеннаяПодпись Тогда
		ОчиститьЭлПодписьВСтроке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПриИзменении(Элемент)
	
	Если РежимПросмотра Тогда
		ОпределитьНомерВложения();
	КонецЕсли;
		
	ОтработатьИзменениеРежимаПросмотраНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНомерВложения()
	
	ВГранице = 
		Элементы.ТаблицаФайлов.ТекущиеДанные <> Неопределено
		И Элементы.ТаблицаФайлов.ТекущиеДанные.НомерСтраницыФайлаФормы <= ТаблицаФайлов.Количество();
	
	Если ВГранице Тогда
		НомерВложенияПросмотр = Элементы.ТаблицаФайлов.ТекущиеДанные.НомерСтраницыФайлаФормы;
	Иначе
		НомерВложенияПросмотр = ТаблицаФайлов.Количество();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиПросмотрНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьИДобавитьВложения();

КонецПроцедуры

&НаКлиенте
Процедура ПросмотрВРеальномРазмереПриИзменении(Элемент)
	
	УстановитьРазмерКартинкиПоЗначениюПереключателя();	
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВложенияПросмотрПриИзменении(Элемент)
	
	ОбновитьАдресКартинкиПросмотра();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсточник(Элемент, СтандартнаяОбработка)
	
	СменитьДокументИсточник();
	
КонецПроцедуры

&НаКлиенте
Процедура КВДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.КВД = ВыбранноеЗначение;
	
	НайденноеЗначение = Элементы.КВД.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	КВД  = НайденноеЗначение.Представление;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура КВДПриИзменении(Элемент)
	Объект.КВД = КВД;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СведенияДокументаПриИзменении(Элемент)
	СформироватьЗаголовокФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СведенияДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьИсточник(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПодписиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьФайлЭП();

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПодписиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресФайлаПодписи 	= "";
	ИмяФайлаПодписи 	= "";
	РазмерФайлаПодписи 	= 0;
	
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрытьСкан(Команда)
	
	Если Записать() Тогда
	
		Если ЭтоЗагрузкаСканаНапрямуюИзОписи ИЛИ ЭтоПакетСДопДокументами Тогда
			
			Если НЕ ПрограммноеЗакрытие И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Отказ = Истина;
				ПрограммноеЗакрытие = Истина;
				
				МассивСвойствВыбранныхДокументов = Новый Массив;
				
				СтруктураСвойств = Новый Структура;
				
				СтруктураСвойств.Вставить("ВыбранныйДокумент", 	Объект.Ссылка);
				СтруктураСвойств.Вставить("ВидДокументаФНС", 	Объект.ВидДокумента);
				
				МассивСвойствВыбранныхДокументов.Добавить(СтруктураСвойств);
				
				ОповеститьОВыборе(МассивСвойствВыбранныхДокументов);
				
			КонецЕсли;
			
		Иначе
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВРежимеПросмотра(Команда)
	
	ВыбратьИДобавитьВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерВложенияПросмотрНаНачальный(Команда)
	
	Если КоличествоФайловВложений > 0 Тогда
		НомерВложенияПросмотр = 1;
	Иначе
		НомерВложенияПросмотр = 0;
	КонецЕсли;
	
	ОбновитьАдресКартинкиПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерВложенияПросмотрНаКонечный(Команда = Неопределено)
	
	НомерВложенияПросмотр = КоличествоФайловВложений;
	
	ОбновитьАдресКартинкиПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВРежимеПросмотра(Команда)
	
	Если НомерВложенияПросмотр > 0 Тогда
		ТаблицаФайлов.Удалить(НомерВложенияПросмотр - 1);
		Модифицированность = Истина;
		ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
		ПронумероватьСтрокиТаблицыФайлов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ТаблицаФайловПриАктивизацииСтроки(Элемент)
	
	ОпределитьНомерВложения();
	ОбновитьАдресКартинки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьПеретаскиваемыеФайлы(ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекстВопроса = НСтр("ru = 'Удалить выделенные файлы изображений?';
						|en = 'Удалить выделенные файлы изображений?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьФайлыЗавершение", ЭтотОбъект); 
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	МножественныйВыбор = 
		НЕ ЗначениеЗаполнено(ИмяФайлаПодписи)
		ИЛИ ЭтоФормат_ON_DOCNPNO_1_886_00_05_02;
	
	ВыбратьИДобавитьВложения(МножественныйВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлПодпись_ПослеВыбораВида(ВыбранноеЗначение, ВходящийКонтекст) Экспорт
	
	ТекДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
	Если ТекДанные = Неопределено 
		ИЛИ ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Значение = ЭПОтдельная() Тогда
		ВыбратьФайлЭП();
	ИначеЕсли ВыбранноеЗначение.Значение = ЭПВстроенная() Тогда
		ТекДанные.ЕстьВстроеннаяПодпись = Истина;
		ЗаполнитьПредставлениеЭлПодписи(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПредставлениеЭлПодписиОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьЭлПодписьВСтроке();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеЭлПодписи(Строка)
	
	Если Строка.ЕстьВстроеннаяПодпись Тогда
		
		Строка.ПредставлениеЭлПодписи = НСтр("ru = 'Встроена в PDF-файл';
											|en = 'Встроена в PDF-файл'");
		
	ИначеЕсли Строка.РазмерФайлаПодписи > 0 Тогда
		
		ПредставлениеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (%2)';
				|en = '%1 (%2)'"), 
			Строка.ИмяФайлаПодписи, 
			ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(Строка.РазмерФайлаПодписи, 2));
			
		Строка.ПредставлениеЭлПодписи = ПредставлениеФайла;
		
	Иначе
		
		Строка.ПредставлениеЭлПодписи = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПриИзменении(Элемент)
	//Срабатывает при удалении, перемещении
	//При добавлении не срабатывает - стоит отказ и ручная обработка
	
	ПронумероватьСтрокиТаблицыФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПослеУдаления(Элемент)
	
	ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
	//перенумерация происходит в следующем обработчике - ТаблицаФайловПриИзменении
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложение();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОчиститьЭлПодписьВСтроке()
	
	АдресФайлаПодписи  = "";
	ИмяФайлаПодписи    = "";
	РазмерФайлаПодписи = 0;

	ПеренестиПодписьВСтроку();
	
	Модифицированность = Истина;
	
	УправлениеФормойПриИзмененииТаблицыФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Закрыть();
		Возврат;
	КонецЕсли;

	УстановитьРазмерКартинкиПоЗначениюПереключателя();
	
	Если ЗначениеЗаполнено(АдресРезультатаВыбораФайлов) Тогда
		ИмпортироватьВыбранныеФайлы();
	ИначеЕсли ЗначениеЗаполнено(АдресМассиваСвойствФайлов) Тогда
		ПроверитьИИмпортироватьФайлы(АдресМассиваСвойствФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКВД()
	
	Если ЭтоПакетСДопДокументами Тогда
		
		Элементы.КВД.Видимость = Истина;
		
		МакетКВД = Справочники.СканированныеДокументыДляПередачиВЭлектронномВиде.ПолучитьМакет("КВД");
		
		Для НомерСтроки = 1 По МакетКВД.ВысотаТаблицы Цикл
		
			КВД           = СокрЛП(МакетКВД.Область(НомерСтроки, 1).Текст);
			Представление = СокрЛП(МакетКВД.Область(НомерСтроки, 2).Текст);
			
			Элементы.КВД.СписокВыбора.Добавить(КВД, Представление); 
			
		КонецЦикла;
		
	Иначе
		Элементы.КВД.Видимость = Ложь;
		Элементы.КВД.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	КВД = Объект.КВД;
	
	// Представление периода кредитования
	Если ЗначениеЗаполнено(Объект.КВД) Тогда
		НайденноеЗначение = Элементы.КВД.СписокВыбора.НайтиПоЗначению(Объект.КВД);
		Если НайденноеЗначение <> Неопределено Тогда 
			КВД = НайденноеЗначение.Представление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьЭП()
	
	Если ТаблицаФайлов.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныйФайлСсылка = ТаблицаФайлов[0].ПрисоединенныйФайлСсылка;
	
	ЗаполнитьЭППоПрисоединенномуФайлу(ПрисоединенныйФайлСсылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭППоПрисоединенномуФайлу(ПрисоединенныйФайлСсылка)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ЭП = КонтекстЭДОСервер.ЭПДокСкана(ПрисоединенныйФайлСсылка);
	
	ИмяФайлаПодписи    = ЭП.ИмяФайла;
	АдресФайлаПодписи  = ЭП.АдресДанных;
	РазмерФайлаПодписи = ЭП.Размер;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЭП()
	
	МаксимальныйРазмерФайла = 72 * 1024 * 1024; // 72 Мб
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("МаксимальныйРазмерФайла", МаксимальныйРазмерФайла);
	ПараметрыДобавления.Вставить("ВозвращатьРазмер", Истина);
	ПараметрыДобавления.Вставить("МножественныйВыбор", Ложь);
	
	Оповещение = Новый ОписаниеОповещения("ИмяФайлаПодписиПослеВыбора", ЭтотОбъект);
	
	// Здесь не нужно передавать требования к картинке, потому что ЭП - это не картинка.
	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлы(Оповещение, УникальныйИдентификатор, "Выберите файл <Электронная подпись>", ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПодписиПослеВыбора(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И ЗначениеЗаполнено(Результат.ОписанияФайлов) Тогда
		
		Если ТаблицаФайлов.Количество() > 1 И НЕ ЭтоФормат_ON_DOCNPNO_1_886_00_05_02 Тогда
			
			СообщитьОНеобходимостиВыбратьПодписанныйФайл(Результат);
			
		Иначе
			
			АдресФайлаПодписи 	= Результат.ОписанияФайлов[0].Адрес;
			ИмяФайлаПодписи 	= ПроверитьИмяФайлаНаСимволы(Результат.ОписанияФайлов[0].Имя);
			РазмерФайлаПодписи  = ТребованияФНСВызовСервера.РазмерПоАдресу(АдресФайлаПодписи);
		
			Модифицированность = Истина;
			
			ПеренестиПодписьВСтроку();
			
			УправлениеФормойПриИзмененииТаблицыФайлов();
			
		КонецЕсли;
		
	Иначе
		
		ОчиститьЭлПодписьВСтроке();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПодписьВСтроку() Экспорт
	
	Если НЕ ЭтоФормат_ON_DOCNPNO_1_886_00_05_02 Тогда
		Возврат;
	КонецЕсли;
		
	ТекДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
	
	ТекДанные.АдресФайлаПодписи  = АдресФайлаПодписи;
	ТекДанные.ИмяФайлаПодписи 	 = ИмяФайлаПодписи;
	ТекДанные.РазмерФайлаПодписи = РазмерФайлаПодписи;
	
	ТекДанные.ЕстьВстроеннаяПодпись = Ложь;
	
	ЗаполнитьПредставлениеЭлПодписи(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНеобходимостиВыбратьПодписанныйФайл(Результат)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФайла", 	ПроверитьИмяФайлаНаСимволы(Результат.ОписанияФайлов[0].Имя));
	ДополнительныеПараметры.Вставить("АдресДанных", Результат.ОписанияФайлов[0].Адрес);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмяФайлаПодписи_ПослеОтветаНаВопрос",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ТекстВопроса = НСтр("ru = 'Утвержденный ФНС формат позволяет прилагать только одну электронную подпись к сканированному документу.
                         |
                         |Загрузите подписанный файл сканированного документа с диска или выберите из числа загруженных, остальные файлы будут удалены';
                         |en = 'Утвержденный ФНС формат позволяет прилагать только одну электронную подпись к сканированному документу.
                         |
                         |Загрузите подписанный файл сканированного документа с диска или выберите из числа загруженных, остальные файлы будут удалены'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(НСтр("ru = 'Выбрать из числа загруженных';
						|en = 'Выбрать из числа загруженных'"));
	Кнопки.Добавить(НСтр("ru = 'Загрузить с диска';
						|en = 'Загрузить с диска'"));
	Кнопки.Добавить(НСтр("ru = 'Отмена';
						|en = 'Отмена'"));
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПодписи_ПослеОтветаНаВопрос(ОтветНаВопрос, ВходящийКонтекст) Экспорт
	
	Если ОтветНаВопрос = НСтр("ru = 'Загрузить с диска';
								|en = 'Загрузить с диска'") Тогда
		
		АдресФайлаПодписи 	= ВходящийКонтекст.АдресДанных;
		ИмяФайлаПодписи 	= ВходящийКонтекст.ИмяФайла;
		РазмерФайлаПодписи  = ТребованияФНСВызовСервера.РазмерПоАдресу(АдресФайлаПодписи);

		ТаблицаФайлов.Очистить();
		
		ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
		Модифицированность = Истина;
		
		ВыбратьИДобавитьВложения(Ложь);
		
	ИначеЕсли ОтветНаВопрос = НСтр("ru = 'Выбрать из числа загруженных';
									|en = 'Выбрать из числа загруженных'") Тогда
		
		СписокВыбора = Новый СписокЗначений;
		Для каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
			СписокВыбора.Добавить(СтрокаТаблицыФайлов.ИмяФайла);
		КонецЦикла;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИмяФайлаПодписиНотариусаПослеВыбораФайлаИзЧислаЗагруженных", 
			ЭтотОбъект,
			ВходящийКонтекст);
		
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выбор файла из числа загруженных';
																	|en = 'Выбор файла из числа загруженных'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПодписиНотариусаПослеВыбораФайлаИзЧислаЗагруженных(ВыбранныйФайл, ВходящийКонтекст) Экспорт
	
	Если ВыбранныйФайл = Неопределено Тогда
		
		ИмяФайлаПодписиОчистка(Неопределено, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	// Удаляем все строки, кроме одной выбранной
	Индекс = ТаблицаФайлов.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Если ТаблицаФайлов[Индекс].ИмяФайла <> ВыбранныйФайл.Значение Тогда
			ТаблицаФайлов.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
	
	АдресФайлаПодписи 	= ВходящийКонтекст.АдресДанных;
	ИмяФайлаПодписи 	= ВходящийКонтекст.ИмяФайла;
	РазмерФайлаПодписи  = ТребованияФНСВызовСервера.РазмерПоАдресу(АдресФайлаПодписи);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИсточникаПослеПолученияСвойствДокумента(РезультатВыбора, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура")
		И НЕ ЭтоСсылка(РезультатВыбора) 
		И ТипЗнч(РезультатВыбора) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ТипЗнч(РезультатВыбора) = Тип("Массив") Тогда
		
		// Выбрано несколько документов
		Если РезультатВыбора.Количество() = 0 Тогда
			Возврат;
		Иначе
			РезультатВыбора = РезультатВыбора[0];
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЭтоСсылка(РезультатВыбора) Тогда
		
		Если ЭтоСсылка(РезультатВыбора) Тогда
			Объект.Источник          = РезультатВыбора;
			Объект.СведенияДокумента = Строка(РезультатВыбора);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
	
		Если РезультатВыбора.Свойство("Ссылка") Тогда
			Объект.Источник = РезультатВыбора.Ссылка;
		КонецЕсли;
		
		Если РезультатВыбора.Свойство("Описание") Тогда
			Объект.СведенияДокумента = РезультатВыбора.Описание;
		КонецЕсли;
		
		Если РезультатВыбора.Свойство("Основание") Тогда
			Объект.СведенияДокументаОснования = РезультатВыбора.Основание;
		КонецЕсли;
		
		Если ТаблицаФайлов.Количество() = 0 Тогда
			ИмпортироватьФайлыИсточника();
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ЭтоСсылка(Источник) Экспорт
	
	Возврат ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник));
		
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Результат, ВходящийКонтекст) Экспорт

	Если Записать() Тогда
		
		Модифицированность = Ложь;
		
		Закрыть(Истина);
		
	КонецЕсли;

КонецПроцедуры

#Область ТаблицаФайлов

#Область ДобавлениеФайлов

#Область Перетаскивание

&НаКлиенте
Процедура ТаблицаФайловПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивИменФайловИзЗначенияПеретаскивания(ЗначениеПеретаскивания)
	
	МассивПолныхИменФайлов = Новый Массив;
	
	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") Тогда
		//перетаскивают один файл
		
		Если ЗначениеПеретаскивания.Расширение = ".jpg" 
		ИЛИ ЗначениеПеретаскивания.Расширение = ".tif" 
		ИЛИ ЗначениеПеретаскивания.Расширение = ".png" 
		ИЛИ ЗначениеПеретаскивания.Расширение = ".pdf" Тогда
			МассивПолныхИменФайлов.Добавить(ЗначениеПеретаскивания.ПолноеИмя);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
		//перетаскивают несколько файлов
		Для каждого ЭлМассива Из ЗначениеПеретаскивания Цикл
			Если ТипЗнч(ЭлМассива) = Тип("Файл") Тогда
				Если ЭлМассива.Расширение = ".jpg" 
				ИЛИ ЭлМассива.Расширение = ".tif" 
				ИЛИ ЭлМассива.Расширение = ".png" 
				ИЛИ ЭлМассива.Расширение = ".pdf" Тогда
					МассивПолныхИменФайлов.Добавить(ЭлМассива.ПолноеИмя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивПолныхИменФайлов;
	
КонецФункции

&НаКлиенте
Процедура АдресКартинкиПросмотрПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиПросмотрПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьПеретаскиваемыеФайлы(ПараметрыПеретаскивания.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПеретаскиваемыеФайлы(ЗначениеПеретаскивания)
	
	МассивПолныхИмен = ПолучитьМассивИменФайловИзЗначенияПеретаскивания(ЗначениеПеретаскивания);
	
	Если ЗначениеЗаполнено(МассивПолныхИмен) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивПолныхИмен", МассивПолныхИмен);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПеретаскиваниемРасширениеПредложено", ЭтотОбъект, ДополнительныеПараметры);
		ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения, , Истина)
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПеретаскиваниемРасширениеПредложено(Результат, ДополнительныеПараметры) Экспорт
	
	ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами = Результат;	
	
	Если ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами Тогда
		
		МассивПолныхИмен = ДополнительныеПараметры.МассивПолныхИмен;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПослеПолученияСвойствФайлов", ЭтотОбъект);
		КонтекстЭДОКлиент.ПолучитьСвойстваФайлов(ОписаниеОповещения, МассивПолныхИмен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеПолученияСвойствФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Возврат;	
	КонецЕсли;
	
	ТекстСообщения = "";
	Если НЕ ПроверкаДобавляемыхФайловНаСервере(Результат.СвойстваФайлов, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// составляем массив с объектами Файл
	МассивФайлов = Новый Массив;
	
	Для Каждого СвойстваФайла Из Результат.СвойстваФайлов Цикл
		
		Свойства = Новый Структура();
		Свойства.Вставить("Имя",         СвойстваФайла.Имя);
		Свойства.Вставить("ПолноеИмя",   СвойстваФайла.ПолноеИмя);
		Свойства.Вставить("Расширение",  СвойстваФайла.Расширение);
		Свойства.Вставить("Размер",      СвойстваФайла.Размер);
		Свойства.Вставить("Адрес", Неопределено);

		МассивФайлов.Добавить(Свойства);
		
	КонецЦикла;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого ЭлФайл Из МассивФайлов Цикл 
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ЭлФайл.ПолноеИмя); 
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура("МассивФайлов", МассивФайлов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияСЗаменойПослеПомещенияФайлов", ЭтотОбъект, ДополнительныеПараметры); 
	НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияСЗаменойПослеПомещенияФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = ДополнительныеПараметры.МассивФайлов;
	
	Для каждого ЭлФайл Из МассивФайлов Цикл
		Для каждого ОписаниеПереданногоФайла Из ПомещенныеФайлы Цикл
			Если ОписаниеПереданногоФайла.ПолноеИмя = ЭлФайл.ПолноеИмя Тогда
				ЭлФайл.Адрес = ОписаниеПереданногоФайла.Хранение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмпортироватьФайлыИсточника_ПослеПреобразования", 
		ЭтотОбъект);
	
	ТребованияФНСКлиент.ДобавитьСканыВОтветНаТребованиеПоОписаниюФайлов(
		КонтекстЭДОКлиент, 
		УникальныйИдентификатор, 
		МассивФайлов, 
		ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ИмпортироватьФайлыИсточника()
	
	ИсточникСсылка = Объект.Источник;
	
	Если НЕ ЗначениеЗаполнено(ИсточникСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСвойствФайлов = Новый Массив;
	ФайлыИсточников = Новый Соответствие;
	ФайлыИсточников.Вставить(ИсточникСсылка, МассивСвойствФайлов);
	
	КонтекстЭДОКлиент.ПолучитьИзображенияПрисоединенныхФайловИсточников(ФайлыИсточников, УникальныйИдентификатор);
	МассивСвойствФайлов = ФайлыИсточников[ИсточникСсылка];
	
	Если НЕ ЗначениеЗаполнено(МассивСвойствФайлов)Тогда
		//нет присоединенных файлов по БСП механизму
		//попытаемся получить через переопределяемый метод
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьИзображенияПрисоединенныхФайловИсточников(ФайлыИсточников, УникальныйИдентификатор);
		МассивСвойствФайлов = ФайлыИсточников[ИсточникСсылка];
	КонецЕсли;
	
	Для каждого СвойстваФайла Из МассивСвойствФайлов Цикл
		СвойстваФайла.Вставить("Адрес", СвойстваФайла.АдресДанных);
	КонецЦикла;  
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмпортироватьФайлыИсточника_ПослеПреобразования", 
		ЭтотОбъект);
		
	ТребованияФНСКлиент.ДобавитьСканыВОтветНаТребованиеПоОписаниюФайлов(
		КонтекстЭДОКлиент, 
		УникальныйИдентификатор, 
		МассивСвойствФайлов, 
		ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьФайлыИсточника_ПослеПреобразования(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Результат.ОписанияФайлов)Тогда
		ПроверитьИИмпортироватьФайлы(Результат.ОписанияФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МаксКолвоФайлов()
	
	МаксКолвоФайлов = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.МаксимальнойКоличествоФайловОписи();
	
	Возврат МаксКолвоФайлов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксРазмерФайлов()
	
	Возврат 72;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксРазмерФайла()
	
	Возврат 60;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьИДобавитьВложения(МножественныйВыбор = Истина)
	
	Если ЗначениеЗаполнено(ИмяФайлаПодписи)
		И ТаблицаФайлов.Количество() = 1
		И НЕ ЭтоФормат_ON_DOCNPNO_1_886_00_05_02 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Дополнительный сканированный документ не может быть добавлен.
                                    |
                                    |Утвержденный ФНС формат позволяет прилагать электронную подпись
                                    |только к одному сканированному документу.';
                                    |en = 'Дополнительный сканированный документ не может быть добавлен.
                                    |
                                    |Утвержденный ФНС формат позволяет прилагать электронную подпись
                                    |только к одному сканированному документу.'");
		
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьИДобавитьВложения_ПослеВыбора", 
		ЭтотОбъект);
		
	ТребованияФНСКлиент.ВыбратьСканыВОтветНаТребование(КонтекстЭДОКлиент, УникальныйИдентификатор, ОписаниеОповещения, МножественныйВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИДобавитьВложения_ПослеВыбора(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Возврат;	
	КонецЕсли;
	
	МассивФайлов = Результат.ОписанияФайлов;

	// проверяем на пересечение имен с уже имеющимися
	Если ВложенияСПодобнымиИменамиУжеИмеются(МассивФайлов) Тогда
		ТекстВопроса = НСтр("ru = 'Среди выбранных файлов присутствуют такие, имена которых пересекаются с уже имеющимися вложениями.
		|Продолжить действие с заменой имеющихся вложений на выбранные с аналогичными именами?';
		|en = 'Среди выбранных файлов присутствуют такие, имена которых пересекаются с уже имеющимися вложениями.
		|Продолжить действие с заменой имеющихся вложений на выбранные с аналогичными именами?'");
		ДополнительныеПараметры = Новый Структура;					
		ДополнительныеПараметры.Вставить("МассивФайлов", МассивФайлов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПослеВопросаИменаПересекаются", ЭтотОбъект, ДополнительныеПараметры); 
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьВложенияСЗаменой(МассивФайлов);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеВопросаИменаПересекаются(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ДобавитьВложенияСЗаменой(ДополнительныеПараметры.МассивФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияСЗаменой(МассивФайлов) 
	
	//загружаем в ИБ
	ДобавитьВТаблицуФайловПослеПроверок(МассивФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПоштучно(ОписаниеФайла) Экспорт
		
	// составляем массив с объектами Файл
	МассивФайлов = Новый Массив;

	Размер = КонтекстЭДОКлиент.СвойстваФайла(ОписаниеФайла.Адрес, ОписаниеФайла.Имя).Размер;
	
	ОписаниеФайла.Вставить("Размер",      Размер);
	ОписаниеФайла.Вставить("АдресДанных", ОписаниеФайла.Адрес);

	МассивФайлов.Добавить(ОписаниеФайла);
	
	//загружаем в ИБ
	ДобавитьВТаблицуФайловПослеПроверок(МассивФайлов);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИИмпортироватьФайлы(МассивСвойствФайлов)
	
	Если ЭтоАдресВременногоХранилища(МассивСвойствФайлов) Тогда
		МассивСвойствФайлов = ПолучитьИзВременногоХранилища(МассивСвойствФайлов);
	КонецЕсли;
	
	ТекстСообщения = "";
	Если НЕ ПроверкаДобавляемыхФайловНаСервере(МассивСвойствФайлов, ТекстСообщения) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДобавитьВТаблицуФайловПослеПроверок(МассивСвойствФайлов);
	
КонецПроцедуры

&НаСервере
Функция ПроверкаДобавляемыхФайловНаСервере(МассивСвойствФайлов, ТекстСообщения)
	
	ЕстьОшибки = Ложь;
	ПревышенРазмерОтдельныхФайлов 	= Ложь;
	ПревышенОбщийРазмерФайлов 		= Ложь;
	ПревышеноОбщееКолВоФайлов 		= Ложь;
	
	КолвоВыбранныхФайлов = МассивСвойствФайлов.Количество();
	
	ДопустимоеКоличествоФайлов 	= МаксКолвоФайлов() - КоличествоФайловВложений;
	ДопустимыйРазмерВБайтах 	= МаксРазмерФайлов()*1024*1024 - РазмерВБайтахВложений;
	
	//проверка на количество выбранных файлов
	Если КолВоВыбранныхФайлов > ДопустимоеКоличествоФайлов Тогда
		ТекстСообщения = "Общее количество файлов изображений превысило допустимое (" + МаксКолвоФайлов() + " файлов).
		|Рекомендуется использовать многостраничный формат (TIFF или PDF).
		|";	
		ЕстьОшибки = Истина;
		ПревышеноОбщееКолВоФайлов = Истина;
	КонецЕсли;
	
	//проверка на размеры выбранных файлов
	УменьшаемыйДопустимыйРазмер = ДопустимыйРазмерВБайтах;
	
	Для Каждого СвойстваФайла Из МассивСвойствФайлов Цикл
		
		Если СвойстваФайла.Размер > МаксРазмерФайла()*1024*1024 Тогда
			ЕстьОшибки = Истина;
			ПревышенРазмерОтдельныхФайлов = Истина;
			ТекстСообщения = ТекстСообщения + "Размер файла " + СвойстваФайла.Имя + " превышает допустимый (" + МаксРазмерФайла() + " Мб).
			|";
		КонецЕсли;
		
		УменьшаемыйДопустимыйРазмер = УменьшаемыйДопустимыйРазмер - СвойстваФайла.Размер;
		
		Если УменьшаемыйДопустимыйРазмер < 0 Тогда
			ЕстьОшибки = Истина;
			ПревышенОбщийРазмерФайлов = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ТекстСообщения = "Добавление изображений отменено.
		|" + ТекстСообщения;
		Если ПревышенОбщийРазмерФайлов Тогда
			ТекстСообщения = ТекстСообщения + "Общий размер файлов изображений превысил допустимый (" + МаксРазмерФайлов() + " Мб).
			|Убедитесь в том, что добавляемые файлы соответствуют требованиям.";
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ДобавитьВТаблицуФайловПослеПроверок(МассивСвойствФайлов) 
	
	Для каждого СвойстваФайла Из МассивСвойствФайлов Цикл
		
		НовыйФайлИмя = СвойстваФайла.Имя;
		
		Если СвойстваФайла.Свойство("АдресДанных") Тогда
			НовыйФайлАдресДанных = СвойстваФайла.АдресДанных;
		Иначе
			НовыйФайлАдресДанных = СвойстваФайла.Адрес;
		КонецЕсли;
			
		ТекущийФайл = Неопределено;
		Для каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
			Если СтрокаТаблицыФайлов.ИмяФайла = НовыйФайлИмя Тогда
			
				ТекущийФайл = СтрокаТаблицыФайлов;
			    Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущийФайл = Неопределено Тогда
			ТекущийФайл = ТаблицаФайлов.Добавить();
		КонецЕсли;
		
		ДобавитьВТаблицуФайловСвойстваPDFФайлов(ТекущийФайл, СвойстваФайла);
		
		ТекущийФайл.ИмяФайла 				= НовыйФайлИмя;
		ТекущийФайл.АдресДанныхФайлаФормы 	= НовыйФайлАдресДанных;
		ТекущийФайл.Размер 					= СвойстваФайла.Размер;
		
		Если СвойстваФайла.Свойство("АдресФайлаПодписи") Тогда
			
			ТекущийФайл.АдресФайлаПодписи  = СвойстваФайла.АдресФайлаПодписи;
			ТекущийФайл.ИмяФайлаПодписи    = СвойстваФайла.ИмяФайлаПодписи;
			ТекущийФайл.РазмерФайлаПодписи = ТребованияФНСВызовСервера.РазмерПоАдресу(ТекущийФайл.АдресФайлаПодписи);
			
			ЗаполнитьПредставлениеЭлПодписи(ТекущийФайл);
			
		КонецЕсли;
		
		ЗаполнитьВычисляемыеПоляСтрокиТаблицыФайлов(ТекущийФайл);

	КонецЦикла;
	
	ПронумероватьСтрокиТаблицыФайлов();
	
	УправлениеФормойПриИзмененииТаблицыФайлов();
	
	Модифицированность = Истина;
	
	//для режима просмотра нужно показать последнее добавленное изображение
	НомерВложенияПросмотр = КоличествоФайловВложений;
	ОбновитьАдресКартинкиПросмотра();
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицуФайловСвойстваPDFФайлов(РедактируемаяСтрокаТаблицыФайлов, СвойстваФайла) 
	
	Если НЕ ЭтоФормат_ON_DOCNPNO_1_886_00_05_02
		ИЛИ НЕ ОбработкаФайловPDFКлиентСервер.ЭтоPDFФайл(СвойстваФайла.Имя) Тогда
		Возврат;
	КонецЕсли;

	Если СвойстваФайла.Свойство("ВидPDF") Тогда
		ЗаполнитьЗначенияСвойств(РедактируемаяСтрокаТаблицыФайлов, СвойстваФайла, "ЕстьВстроеннаяПодпись, ВидPDF");	
	Иначе
		Свойства = ОбработкаФайловPDF.СвойстваPDFФайла(СвойстваФайла);
		ЗаполнитьЗначенияСвойств(РедактируемаяСтрокаТаблицыФайлов, Свойства, "ЕстьВстроеннаяПодпись, ВидPDF");
	КонецЕсли;
		
КонецПроцедуры


&НаСервере
Функция ВложенияСПодобнымиИменамиУжеИмеются(МассивСвойствФайлов)
	
	МассивИменФайлов = Новый Массив;
	Для Каждого СвойстваФайла Из МассивСвойствФайлов Цикл
		МассивИменФайлов.Добавить(СвойстваФайла.Имя);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
		Если МассивИменФайлов.Найти(СтрокаТаблицыФайлов.ИмяФайла) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ТаблицаФайловПрочее

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВычисляемыеПоляСтрокиТаблицыФайлов(СтрокаТаблицы)
	
	ПредставлениеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 (%2)';
			|en = '%1 (%2)'"), 
		СтрокаТаблицы.ИмяФайла, 
		ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(СтрокаТаблицы.Размер, 2));
	
	СтрокаТаблицы.СоставноеПоле = ПредставлениеФайла;
	
КонецПроцедуры
		
&НаСервере
Процедура ЗаполнитьТаблицуФайловПередОткрытием()
	
	ТаблицаФайлов.Очистить();
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка, МассивФайлов);
	
	Для каждого ПрисоединенныйФайл Из МассивФайлов Цикл
	
		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ДополнительныеПараметры);
		
		НоваяСтрока = ТаблицаФайлов.Добавить();
		НоваяСтрока.ПрисоединенныйФайлСсылка 	= ПрисоединенныйФайл;
		НоваяСтрока.НомерСтраницыФайлаБазы 		= ПрисоединенныйФайл.НомерСтраницы;
		НоваяСтрока.АдресДанныхФайлаБазы 		= ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		
		// при первоначальном заполнении продублируем значения полей базы и формы
		НоваяСтрока.АдресДанныхФайлаФормы 		= НоваяСтрока.АдресДанныхФайлаБазы;
		НоваяСтрока.НомерСтраницыФайлаФормы		= НоваяСтрока.НомерСтраницыФайлаБазы;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПрисоединенныйФайл);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеФайла);

		//заполним составное поле
		ЗаполнитьВычисляемыеПоляСтрокиТаблицыФайлов(НоваяСтрока);
		
		Если ЭтоФормат_ON_DOCNPNO_1_886_00_05_02 Тогда
			
			Если НЕ НоваяСтрока.ЕстьВстроеннаяПодпись Тогда
				
				ЗаполнитьЭППоПрисоединенномуФайлу(ПрисоединенныйФайл);
				
				НоваяСтрока.ИмяФайлаПодписи    = ИмяФайлаПодписи;
				НоваяСтрока.АдресФайлаПодписи  = АдресФайлаПодписи;
				НоваяСтрока.РазмерФайлаПодписи = РазмерФайлаПодписи;
				
			КонецЕсли;
			ЗаполнитьПредставлениеЭлПодписи(НоваяСтрока);
			
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаФайлов.Сортировать("НомерСтраницыФайлаФормы Возр");
	
	УправлениеФормойПриИзмененииТаблицыФайлов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНавигациюПросмотраВложений()
	
	НадписьНавигацияИз = Элементы.НадписьНавигацияИз;
	НадписьНавигацияИз.Заголовок = "из " + КоличествоФайловВложений;
	
	Буфер = НомерВложенияПросмотр;
	СписокНомеров = Элементы.НомерВложенияПросмотр.СписокВыбора;
	СписокНомеров.Очистить();
	Для Счетчик = 1 По КоличествоФайловВложений Цикл
		СписокНомеров.Добавить(Счетчик);	
	КонецЦикла;
	
	Если Буфер <= КоличествоФайловВложений Тогда
		НомерВложенияПросмотр = Буфер;
	Иначе
		НомерВложенияПросмотр = КоличествоФайловВложений;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруРазмеровТаблицыФайлов();
	
	КолвоФайлов = 0;	
	Размер		= 0;
	Для каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
		
		КолвоФайлов = КолвоФайлов 	+ 1;
		Если СтрокаТаблицыФайлов.РазмерФайлаПодписи > 0 Тогда
			КолвоФайлов = КолвоФайлов + 1;
		КонецЕсли;
		
		Размер = Размер + СтрокаТаблицыФайлов.Размер + СтрокаТаблицыФайлов.РазмерФайлаПодписи;
		
	КонецЦикла;
	
	Возврат Новый Структура("КолвоФайлов, Размер", КолвоФайлов, Размер);
	
КонецФункции

&НаСервере
Процедура УправлениеФормойПриИзмененииТаблицыФайлов()
	
	НадписьРазмерыСканДокумента = Элементы.НадписьРазмерыСканДокумента;
	
	СтруктураРазмеров = ПолучитьСтруктуруРазмеровТаблицыФайлов();
	
	КоличествоФайловВложений 	= СтруктураРазмеров.КолвоФайлов;
	РазмерВБайтахВложений 		= СтруктураРазмеров.Размер;
	
	ЗаполнитьНавигациюПросмотраВложений();
	
	//Заполним элементы группы размеров описи
	ДопустимоеКоличествоФайлов = МаксКолвоФайлов() - КоличествоФайловВложений;
	ДопустимыйРазмерВБайтах = МаксРазмерФайлов()*1024*1024 - РазмерВБайтахВложений;
	ДопустимоеКоличествоМегабайт = ОкруглитьРазмер(ДопустимыйРазмерВБайтах);
	
	СодержимоеТекста = "";
	
	Если (ДопустимоеКоличествоФайлов < 0) ИЛИ (ДопустимоеКоличествоМегабайт < 0) Тогда
		
		ЦветТекста = Новый Цвет(178, 34, 34); // красный
		
		Если ДопустимоеКоличествоФайлов < 0 Тогда
			
			СодержимоеТекста = "Допустимое количество файлов превышено на " +(-ДопустимоеКоличествоФайлов) + ".";
			
		ИначеЕсли ДопустимоеКоличествоМегабайт < 0 Тогда
			
			СодержимоеТекста = "Допустимый размер документа превышен на " +(-ДопустимоеКоличествоМегабайт) + " Мб.";
		
		КонецЕсли;
		
	Иначе
		
		ЦветТекста = Новый Цвет(134, 134, 134); //серый
		
		СодержимоеТекста = "Можно добавить еще " + ДопустимоеКоличествоМегабайт + " Мб.";
		
	КонецЕсли;
	
	НадписьРазмерыСканДокумента.ЦветТекста = ЦветТекста;
	НадписьРазмерыСканДокумента.Заголовок = СодержимоеТекста;
	
	ЕстьВложения = (КоличествоФайловВложений > 0);
	УправлениеЭУЕстьНетВложений(ЕстьВложения);
	УправлениеЭУВидPDFиЭП();
	
КонецПроцедуры

&НаСервере
Функция ОкруглитьРазмер(РазмерВБайтах)
	
	РазмерВМегабайтах = Окр(РазмерВБайтах / 1024 / 1024, 2, РежимОкругления.Окр15как20);
	
	Если РазмерВМегабайтах = 0 Тогда
		РазмерВМегабайтах = 0.01;	
	КонецЕсли;
	
	Возврат РазмерВМегабайтах;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьВложение()
	
	ТекДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОперацииСФайламиЭДКОКлиент.ОткрытьФайл(ТекДанные.АдресДанныхФайлаФормы, ТекДанные.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// удалим выделенные файлы изображений
	ВыделенныеСтроки = Новый ФиксированныйМассив(Элементы.ТаблицаФайлов.ВыделенныеСтроки);
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		СтрокаТаблицыФайлов = ТаблицаФайлов.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТаблицаФайлов.Удалить(СтрокаТаблицыФайлов);
	КонецЦикла;
	
	ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
	ПронумероватьСтрокиТаблицыФайлов();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭУПросмотрСписокВложений()
	
	Элементы.ГруппаСписокВложений.Видимость 						= НЕ РежимПросмотра;	
	Элементы.ГруппаПросмотрВложений.Видимость 						= РежимПросмотра;	
	Элементы.ГруппаУправлениеТаблицаФайловРежимСписка.Видимость 	= НЕ РежимПросмотра;
	Элементы.ГруппаУправлениеТаблицаФайловРежимПросмотра.Видимость 	= РежимПросмотра;
	Элементы.АдресКартинкиМиниПросмотр.Видимость 					= НЕ РежимПросмотра;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУЕстьНетВложений(ЕстьВложения)
	
	Элементы.ГруппаПросмотрВложенийНавигация.Видимость 	= ЕстьВложения;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУВидPDFиЭП() 
	
	ПанельУбранаПользователем = ХранилищеОбщихНастроек.Загрузить(КлючНастройкиПроверьтеPDF()) = Истина;
	
	ЕстьPDF = ОбработкаФайловPDFКлиентСервер.ЕстьPDFФайлы(ТаблицаФайлов, "ИмяФайла");
	
	Видимость = 
		ЭтоФормат_ON_DOCNPNO_1_886_00_05_02
		И НЕ ПанельУбранаПользователем
		И ЕстьPDF;

	// Колонки
	Элементы.ТаблицаФайловВидPDF.Видимость = ЭтоФормат_ON_DOCNPNO_1_886_00_05_02 И ЕстьPDF;
	Элементы.ТаблицаФайловПредставлениеЭлПодписи.Видимость = ЭтоФормат_ON_DOCNPNO_1_886_00_05_02;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОтработатьИзменениеРежимаПросмотраНаСервере()
	
	УправлениеЭУПросмотрСписокВложений();
	ОбновитьАдресКартинкиПросмотра();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокФормы(ФормаОбъект)
	
	ТекстЗаголовка = ФормаОбъект.Объект.СведенияДокумента;
	
КонецФункции 

&НаСервере
Процедура ОбновитьАдресКартинкиПросмотра()
	
	Если РежимПросмотра Тогда
		ОбновитьАдресКартинки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресКартинки(ЭтоМиниПросмотр = Ложь)
	
	Если НомерВложенияПросмотр > 0 Тогда
		
		Строка = ТаблицаФайлов[НомерВложенияПросмотр - 1];
		
		ЭтоPDFФайл = ОбработкаФайловPDFКлиентСервер.ЭтоPDFФайл(Строка.ИмяФайла);
		ЗаменитьPDFНаПустышку = ЭтоPDFФайл И ЭтоМиниПросмотр;
		
		Если ЗаменитьPDFНаПустышку Тогда
			АдресКартинкиПросмотр = "";
		Иначе
			НовыйАдресДанных = Строка.АдресДанныхФайлаФормы;
			
			Если АдресКартинкиПросмотр <> НовыйАдресДанных Тогда
				АдресКартинкиПросмотр = НовыйАдресДанных;
			КонецЕсли;

		КонецЕсли;
	Иначе
		АдресКартинкиПросмотр = "";
	КонецЕсли;
	
	ЭтоГиперссылка = НомерВложенияПросмотр = 0;
	
	Элементы.АдресКартинкиПросмотр.Гиперссылка     = ЭтоГиперссылка;
	Элементы.АдресКартинкиМиниПросмотр.Гиперссылка = ЭтоГиперссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазмерКартинкиПоЗначениюПереключателя()

	Элементы.АдресКартинкиПросмотр.РазмерКартинки = 
		?(ПросмотрВРеальномРазмере, РазмерКартинки.РеальныйРазмер, РазмерКартинки.Пропорционально);	

КонецПроцедуры

&НаСервере
Процедура ПронумероватьСтрокиТаблицыФайлов()
	
	Для каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
		СтрокаТаблицыФайлов.НомерСтраницыФайлаФормы = (ТаблицаФайлов.Индекс(СтрокаТаблицыФайлов) + 1);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере()
	
	УправлениеФормойПриИзмененииТаблицыФайлов();
	Если КоличествоФайловВложений = 0 Тогда
		НомерВложенияПросмотр = КоличествоФайловВложений;
	КонецЕсли;
	
	ОбновитьАдресКартинкиПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьВыбранныеФайлы()
	
	РезультатВыбораФайлов = ПолучитьИзВременногоХранилища(АдресРезультатаВыбораФайлов);
	
	Если НЕ ЗначениеЗаполнено(РезультатВыбораФайлов) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыбораФайлов.Свойство("СвойстваВыбранногоДокумента") Тогда
		// Был выбран первичный документ
		ВыборИсточникаПослеПолученияСвойствДокумента(РезультатВыбораФайлов.СвойстваВыбранногоДокумента, Неопределено);
	Иначе
		// Был выбран скан с диска
		
		ОписанияФайлов  = РезультатВыбораФайлов.ОписанияФайлов;
		Выполнено 		= РезультатВыбораФайлов.Выполнено И ОписанияФайлов.Количество()>0;
		
		Если НЕ Выполнено Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого ОписаниеФайла Из ОписанияФайлов Цикл
			
			НовоеИмяФайла = ПроверитьИмяФайлаНаСимволы(ОписаниеФайла.Имя);
			ДобавитьВложенияПоштучно(ОписаниеФайла);
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьИмяФайлаНаСимволы(ТекущееИмяФайла)
	
	ИзмененоИмя = Ложь;
	Результат = ТекущееИмяФайла;
	
	Если ПроверятьНедопустимыеСимволы Тогда
		РезультатПроверки = КонтекстЭДОКлиент.ПроверитьНеДопустимыеСимволыИмениФайла(ТекущееИмяФайла, "windows-1251");
		Если НЕ РезультатПроверки.Пройдена Тогда
			Результат = РезультатПроверки.НовоеИмя;
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'В имени файла недопустимые символы.';
					|en = 'В имени файла недопустимые символы.'"), , 
				НСтр("ru = 'Произведена замена недопустимых символов.';
					|en = 'Произведена замена недопустимых символов.'"), , 
				СтатусОповещенияПользователя.Информация);
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СменитьДокументИсточник()
	
	ВыполняемоеОповещение = Новый ОписаниеОповещения(
		"ВыборИсточникаПослеПолученияСвойствДокумента", 
		ЭтотОбъект);

	КонтекстЭДОКлиент.ВыбратьПервичныйДокументВОтветеНаТребование(ВыполняемоеОповещение, Объект.Организация, Объект.Источник);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойПриСозданииНаСервере()
	
	//ФО Использование одной организации
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "ЗаголовокОрганизация");

	// Кнопки
	ЭтоОткрытиеРанееДобавленного = НЕ (ЗначениеЗаполнено(АдресРезультатаВыбораФайлов) ИЛИ ЗначениеЗаполнено(АдресМассиваСвойствФайлов));
	
	Элементы.ФормаЗаписатьИЗакрыть.Видимость         = ЭтоОткрытиеРанееДобавленного;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = ЭтоОткрытиеРанееДобавленного;
	Элементы.ФормаЗаписатьИЗакрытьСкан.Видимость         = НЕ ЭтоОткрытиеРанееДобавленного;
	Элементы.ФормаЗаписатьИЗакрытьСкан.КнопкаПоУмолчанию = НЕ ЭтоОткрытиеРанееДобавленного;
	Элементы.ФормаЗаписать.Видимость  = ЭтоОткрытиеРанееДобавленного;
	
	Если ЭтоПакетСДопДокументами И НЕ ЭтоОткрытиеРанееДобавленного Тогда
		
		Элементы.ФормаЗаписатьИЗакрытьСкан.Заголовок = 
			НСтр("ru = 'Добавить в ';
				|en = 'Добавить в '") 
			+ ДокументооборотСКОКлиентСервер.ПредставлениеПакетаСДопДокументами(Истина);
			
	КонецЕсли;
		
	Элементы.ГруппаЭП.Видимость = НЕ ЭтоФормат_ON_DOCNPNO_1_886_00_05_02;
	
	//управление видимостью/доступностью элементов формы
	УправлениеЭУПросмотрСписокВложений();
	УправлениеЭУВидPDFиЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормойПриОткрытии()
	
	Элементы.Организация.Видимость = НЕ ЗначениеЗаполнено(Объект.Организация);
	
КонецПроцедуры
	
&НаСервере
Процедура РазобратьПараметры(Параметры)
	
	ПроверятьНедопустимыеСимволы = Параметры.ПроверятьНедопустимыеСимволы;
	
	Параметры.Свойство("АдресРезультатаВыбораФайлов", АдресРезультатаВыбораФайлов);
	Параметры.Свойство("УстановитьПриказММВ_7_6_16",  УстановитьПриказММВ_7_6_16);
	Параметры.Свойство("ЭтоПакетСДопДокументами",     ЭтоПакетСДопДокументами);
	Параметры.Свойство("АдресМассиваСвойствФайлов",   АдресМассиваСвойствФайлов);
	
	Если Параметры.Свойство("Организация") Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если Параметры.Свойство("СведенияДокумента") Тогда
		Объект.СведенияДокумента = Параметры.СведенияДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Заголовок = Объект.Наименование;
		
		Если Объект.ВерсияПриказа <> Перечисления.ПриказОписиИсходящихДокументов.ПриказММВ_7_6_16 
			И УстановитьПриказММВ_7_6_16 = Истина Тогда
			
			Объект.ВерсияПриказа = Перечисления.ПриказОписиИсходящихДокументов.ПриказММВ_7_6_16;
			
		КонецЕсли;
		
	Иначе
		// Создание нового элемента.
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента.
			Заголовок = Объект.Наименование;
		Иначе
			// Добавление элемента.
			Объект.Наименование = "Подготовка документа к отправке";
			Заголовок = "Подготовка документа к отправке";
			
			ДобавитьВОтобранные = Параметры.ДобавитьВОтобранные;
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация)Тогда
				Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
					Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
					Объект.Организация = Модуль.ОрганизацияПоУмолчанию();
				КонецЕсли;
				
				// Если организаций больше одной, то используем основную организацию
				Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
					Объект.Организация = ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОсновнаяОрганизация();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.ВерсияПриказа = Перечисления.ПриказОписиИсходящихДокументов.ПриказММВ_7_6_16;
		Объект.ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ИныеДокументы;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьPDFПередЗаписью()
	
	Возврат Справочники.СканированныеДокументыДляПередачиВЭлектронномВиде.ПроверитьPDFПередЗаписью(ТаблицаФайлов);
	
КонецФункции

&НаСервере
Функция КлючНастройкиПроверьтеPDF()
	
	Возврат "ДокументооборотСКонтролирующимиОрганами_ПроверьтеPDFвСканДоках_УбратьИнформационнуюПанель";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭПОтдельная()

	Возврат НСтр("ru = 'Отдельным файлом';
				|en = 'Отдельным файлом'");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭПВстроенная()

	Возврат НСтр("ru = 'Встроена в PDF-файл';
				|en = 'Встроена в PDF-файл'");

КонецФункции

#КонецОбласти