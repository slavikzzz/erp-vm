#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КлючВарианта = Неопределено;
	Если ЗначениеЗаполнено(Параметры.ШаблонДокумента) Тогда
		
		Заголовок = Строка(Параметры.ШаблонДокумента);
		МакетШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ШаблонДокумента, "МакетДокумента");
		Если МакетШаблона <> Неопределено Тогда
			МакетДокумента = МакетШаблона.Получить();
		КонецЕсли;
		
		КлючВарианта = Справочники.ШаблоныДокументов.КлючВариантаОтчета(Параметры.ШаблонДокумента.УникальныйИдентификатор());
		Если ЗначениеЗаполнено(КлючВарианта) Тогда
			НастройкиПечатнойФормы = ЗарплатаКадрыОтчеты.НастройкиШаблонаДляКабинетаСотрудников(КлючВарианта);
		КонецЕсли;
		
		АдресСхемы = ПоместитьВоВременноеХранилище(НастройкиПечатнойФормы.СхемаКомпоновкиДанных, УникальныйИдентификатор);
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.ВариантШаблона) Тогда
		
		Заголовок = Параметры.Заголовок;
		МакетШаблона = Справочники.ШаблоныДокументов.ШаблонДокументаИзХранилища(Параметры.ВариантШаблона);
		
		МакетДокумента = МакетШаблона.Макет;
		НастройкиПечатнойФормы = МакетШаблона.Настройки;
		АдресСхемы = ПоместитьВоВременноеХранилище(НастройкиПечатнойФормы.СхемаКомпоновкиДанных, УникальныйИдентификатор);
		
	Иначе
		
		Заголовок = Параметры.Заголовок;
		МакетДокумента = Параметры.МакетДокумента;
		АдресСхемы = Параметры.АдресСхемы;
		
		НастройкиПечатнойФормы = ЗарплатаКадрыОтчеты.НоваяСтруктураНастроекПечатнойФормы();
		НастройкиПечатнойФормы.Настройки = Параметры.НастройкиПечатнойФормы;
		НастройкиПечатнойФормы.СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемы);
		
	КонецЕсли;
	
	ЗарплатаКадрыОтчеты.ИнициализироватьИЗагрузитьНастройкиВКомпоновщикКД(КомпоновщикНастроекКД, НастройкиПечатнойФормы);
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Сотрудник = ПервыйДоступныйСотрудник();
	КонецЕсли;
	
	ВывестиМакетДокументаНаСервере();
	
	СтрокиДанныхШаблона = ПараметрыМакета.ПолучитьЭлементы();
	Если СтрокиДанныхШаблона.Количество() > 0 Тогда
		Элементы.ПараметрыМакета.Развернуть(СтрокиДанныхШаблона[0].ПолучитьИдентификатор(), Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ВывестиМакетДокументаНаСервере();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыМакета

&НаКлиенте
Процедура ПараметрыМакетаПриИзменении(Элемент)
	
	ВывестиМакетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыМакетаПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Если Не Элемент.ТекущиеДанные.ТипЗначения.СодержитТип(ТипЗнч(Элемент.ТекущиеДанные.Значение)) Тогда
			ОграничениеТипа = Новый ОписаниеТипов(Элемент.ТекущиеДанные.ТипЗначения,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(Элемент.ТекущиеДанные.Значение)));
		Иначе
			ОграничениеТипа = Элемент.ТекущиеДанные.ТипЗначения;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПараметрыМакетаЗначение",
			"ОграничениеТипа",
			ОграничениеТипа);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПараметрыМакетаЗначение",
			"РежимВыбораИзСписка",
			Элемент.ТекущиеДанные.ДоступныеЗначения.Количество() > 0);
		ЭлементПараметрыМакетаЗначение = Элементы.Найти("ПараметрыМакетаЗначение");
		Если ЭлементПараметрыМакетаЗначение <> Неопределено Тогда
			ЭлементПараметрыМакетаЗначение.СписокВыбора.Очистить();
			Для Каждого ДоступноеЗначение Из Элемент.ТекущиеДанные.ДоступныеЗначения Цикл
				ЭлементПараметрыМакетаЗначение.СписокВыбора.Добавить(
					ДоступноеЗначение.Значение, ДоступноеЗначение.Представление);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыМакетаЗначениеПриИзменении(Элемент)
	
	Если Элементы.ПараметрыМакета.ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(Элементы.ПараметрыМакета.ТекущиеДанные.Значение) = Тип("СправочникСсылка.Организации") Тогда
			ЗаполнитьДанныеОрганизации();
		ИначеЕсли ТипЗнч(Элементы.ПараметрыМакета.ТекущиеДанные.Значение) = Тип("СправочникСсылка.ПодразделенияОрганизаций")
			Или  ТипЗнч(Элементы.ПараметрыМакета.ТекущиеДанные.Значение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ЗаполнитьДанныеПодразделения();
		ИначеЕсли ТипЗнч(Элементы.ПараметрыМакета.ТекущиеДанные.Значение) = Тип("Дата") Тогда
			УстановитьЗначенияЧастейДат(ЭтотОбъект, Элементы.ПараметрыМакета.ТекущиеДанные.Имя, Элементы.ПараметрыМакета.ТекущиеДанные.Значение);
		ИначеЕсли ТипЗнч(Элементы.ПараметрыМакета.ТекущиеДанные.Значение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ДополнитьСклонениямиФизическогоЛица(Элементы.ПараметрыМакета.ТекущиеДанные.Имя, Элементы.ПараметрыМакета.ТекущиеДанные.Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВывестиМакетДокументаНаСервере()
	
	ЗаполнитьЗначенияПараметров();
	ВывестиМакетДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПараметров()
	
	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);
	
	ИменаЭлементовДерева = Новый Структура;
	ПараметрыМакета.ПолучитьЭлементы().Очистить();
	ВывестиПараметры(ПараметрыМакета, КомпоновщикНастроекКД.Настройки.ДоступныеПоляВыбора.Элементы, ИменаЭлементовДерева, Схема);
	ИменаЭлементов = Новый ФиксированнаяСтруктура(ИменаЭлементовДерева);
	Если Не ИменаЭлементов.Свойство("ПараметрыДанных") Тогда
		ВывестиПараметрыСхемы(ПараметрыМакета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПараметры(ВладелецПараметров, Элементы, ИменаЭлементовДерева, Схема)
	
	Для Каждого Элемент Из Элементы Цикл
		Если Не Элемент.Папка Тогда
			Если СтрНайти(Элемент.Поле, ".ЧастиДат") > 0
				И Не СтрЗаканчиваетсяНа(Элемент.Поле, ".ЧастиДат.День")
				И Не СтрЗаканчиваетсяНа(Элемент.Поле, ".ЧастиДат.Месяц")
				И Не СтрЗаканчиваетсяНа(Элемент.Поле, ".ЧастиДат.Год") Тогда
				
				Продолжить;
			КонецЕсли;
			НовыйПараметр = ВладелецПараметров.ПолучитьЭлементы().Добавить();
			НовыйПараметр.Имя = СтрЗаменить(Элемент.Поле, ".", "");
			НовыйПараметр.ТипЗначения = Элемент.ТипЗначения;
			НовыйПараметр.Заголовок = ЗаголовокПараметра(Элемент.Заголовок, ВладелецПараметров);
			НовыйПараметр.Пиктограмма = 3;
			Если СтрНачинаетсяС(Элемент.Поле, "ПараметрыДанных.") Тогда
				ПолеСхемы = Схема.Параметры.Найти(СтрЗаменить(Элемент.Поле, "ПараметрыДанных.", ""));
				Если ПолеСхемы <> Неопределено Тогда
					НовыйПараметр.Значение = ПолеСхемы.Значение;
					ДоступныеЗначения = ПолеСхемы.ПолучитьДоступныеЗначения();
					НовыйПараметр.ДоступныеЗначения = ДоступныеЗначения;
					Если Не ЗначениеЗаполнено(НовыйПараметр.Значение)
						И ЗначениеЗаполнено(НовыйПараметр.ДоступныеЗначения) Тогда
						
						НовыйПараметр.Значение = НовыйПараметр.ДоступныеЗначения[0].Значение;
						НовыйПараметр.Представление = НовыйПараметр.ДоступныеЗначения[0].Представление;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПолеСхемы = Схема.НаборыДанных[0].Поля.Найти(Элемент.Поле);
				Если ПолеСхемы <> Неопределено Тогда
					ДоступныеЗначения = ПолеСхемы.ПолучитьДоступныеЗначения();
					НовыйПараметр.ДоступныеЗначения = ДоступныеЗначения;
					Если ЗначениеЗаполнено(ДоступныеЗначения) Тогда
						НовыйПараметр.Значение = НовыйПараметр.ДоступныеЗначения[0].Значение;
						НовыйПараметр.Представление = НовыйПараметр.ДоступныеЗначения[0].Представление;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			НовыйПараметр.Редактируемый = Не (СтрЗаканчиваетсяНа(Элемент.Поле, ".ЧастиДат.День")
				Или СтрЗаканчиваетсяНа(Элемент.Поле, ".ЧастиДат.Месяц")
				Или СтрЗаканчиваетсяНа(Элемент.Поле, ".ЧастиДат.Год"));
		Иначе
			Если СтрНачинаетсяС(Элемент.Поле, "СистемныеПоля") Тогда
				Продолжить;
			КонецЕсли;
			Если СтрНайти(Элемент.Поле, "ДатыНачала") > 0 Тогда
				Продолжить;
			КонецЕсли;
			Если СтрНайти(Элемент.Поле, "ДатыКонца") > 0 Тогда
				Продолжить;
			КонецЕсли;
			НовыйПараметр = ВладелецПараметров.ПолучитьЭлементы().Добавить();
			НовыйПараметр.Имя = СтрЗаменить(Элемент.Поле, ".", "");
			НовыйПараметр.Заголовок = ЗаголовокПараметра(Элемент.Заголовок, ВладелецПараметров);
		КонецЕсли;	
		ИменаЭлементовДерева.Вставить(НовыйПараметр.Имя,  НовыйПараметр.ПолучитьИдентификатор());
		ВывестиПараметры(НовыйПараметр, Элемент.Элементы, ИменаЭлементовДерева, Схема)
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗаголовокПараметра(Знач ЗаголовокПоля, ВладелецПараметров)
	Если ТипЗнч(ВладелецПараметров) = Тип("ДанныеФормыЭлементДерева") Тогда
		ПозицияИмениРодителя = СтрНайти(ЗаголовокПоля, ВладелецПараметров.Заголовок);
		Если ПозицияИмениРодителя > 0 Тогда
			ЗаголовокПоля = Сред(ЗаголовокПоля, ПозицияИмениРодителя + СтрДлина(ВладелецПараметров.Заголовок));
			Если СтрНачинаетсяС(ЗаголовокПоля, ".") Тогда
				ЗаголовокПоля = Сред(ЗаголовокПоля, 2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ЗаголовокПоля;
КонецФункции

&НаСервере
Процедура ВывестиПараметрыСхемы(ПараметрыМакета)
	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);
	Если Схема.Параметры.Количество() > 0 Тогда
		СтрокаПараметров = ПараметрыМакета.ПолучитьЭлементы().Добавить();
		СтрокаПараметров.Заголовок = "Параметры";
		Для Каждого Параметр Из Схема.Параметры Цикл
			НовыйПараметр = СтрокаПараметров.ПолучитьЭлементы().Добавить();
			НовыйПараметр.Имя = "ПараметрыДанных" + Параметр.Имя;
			НовыйПараметр.Заголовок = Параметр.Заголовок;
			НовыйПараметр.ТипЗначения = Параметр.ТипЗначения;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетДокумента()
	
	Результат.Очистить();
	Отборы = ОтборыОбластей();
	
	КоллекцияЗаполнения = Новый Структура;
	КоллекцияПараметровЗаполнения(ПараметрыМакета.ПолучитьЭлементы(), КоллекцияЗаполнения);
	
	КоллекцияПараметров = ОбщегоНазначения.СкопироватьРекурсивно(КоллекцияЗаполнения);
	
	Области = Новый СписокЗначений;
	Для Каждого Область Из МакетДокумента.Области Цикл
		Области.Добавить(Область.Верх, Область.Имя);
	КонецЦикла;
	Области.СортироватьПоЗначению();
	Для Каждого ОбластьСписка Из Области Цикл
		Если Не Отборы.Свойство(ОбластьСписка.Представление)
			Или УсловияВыполняются(Отборы[ОбластьСписка.Представление], КоллекцияЗаполнения) Тогда
			
			МакетОбласти = МакетДокумента.ПолучитьОбласть(ОбластьСписка.Представление);
			МакетОбласти.Параметры.Заполнить(КоллекцияПараметров);
			Результат.Вывести(МакетОбласти);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияПараметровЗаполнения(КоллекцияЗначений, КоллекцияЗаполнения)
	Для Каждого ЗначениеКоллекции Из КоллекцияЗначений Цикл
		Если ТипЗнч(ЗначениеКоллекции.Значение) = Тип("Дата") Тогда
			КоллекцияЗаполнения.Вставить(ЗначениеКоллекции.Имя, Формат(ЗначениеКоллекции.Значение, "ДЛФ=DD"));
		Иначе
			КоллекцияЗаполнения.Вставить(ЗначениеКоллекции.Имя, ЗначениеКоллекции.Значение);
		КонецЕсли;
		КоллекцияПараметровЗаполнения(ЗначениеКоллекции.ПолучитьЭлементы(), КоллекцияЗаполнения)
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция УсловияВыполняются(ЭлементыОтбора, КоллекцияЗаполнения)
	
	РезультатПроверки = Истина;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			РезультатВыполненияУсловия = УсловиеЭлементаОтбораВыполняется(ЭлементОтбора, КоллекцияЗаполнения);
		ИначеЕсли Не УсловияВыполняются(ЭлементОтбора, КоллекцияЗаполнения) Тогда
			РезультатВыполненияУсловия = Ложь;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			И ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
			И РезультатВыполненияУсловия Тогда
            
            Прервать;
        ИначеЕсли Не РезультатВыполненияУсловия Тогда
            РезультатПроверки = Ложь;
            Прервать;
        КонецЕсли;
	КонецЦикла;
	Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
		И ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
		
        РезультатПроверки = Не РезультатПроверки;
    КонецЕсли;
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция УсловиеЭлементаОтбораВыполняется(ЭлементОтбора, КоллекцияЗаполнения)
	
	РезультатПроверки = Ложь;
	ИмяЛевогоЗначения = СтрЗаменить(ЭлементОтбора.ЛевоеЗначение, ".", "");
	Если ИмяЛевогоЗначения = "ПодразделениеОтбор" Тогда
		ИмяЛевогоЗначения = "ДанныеСотрудникаПодразделение";
	ИначеЕсли ИмяЛевогоЗначения = "ОрганизацияОтбор" Тогда
		ИмяЛевогоЗначения = "ДанныеСотрудникаОрганизация";
	ИначеЕсли ИмяЛевогоЗначения = "ДолжностьОтбор" Тогда
		ИмяЛевогоЗначения = "ДанныеСотрудникаДолжность";
	ИначеЕсли ИмяЛевогоЗначения = "ПозицияОтбор" Тогда
		ИмяЛевогоЗначения = "ДанныеСотрудникаПозиция";
	КонецЕсли;
	ЛевоеЗначение = Неопределено;
	КоллекцияЗаполнения.Свойство(ИмяЛевогоЗначения, ЛевоеЗначение);
	Если ЛевоеЗначение = Неопределено Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		Возврат ЛевоеЗначение = ЭлементОтбора.ПравоеЗначение;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Возврат ЛевоеЗначение <> ЭлементОтбора.ПравоеЗначение;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Возврат ЗначениеЗаполнено(ЛевоеЗначение);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		Возврат Не ЗначениеЗаполнено(ЛевоеЗначение);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
		Возврат СтрНайти(ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение) > 0;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Возврат Не СтрНайти(ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение) = 0;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		Возврат ЛевоеЗначение > ЭлементОтбора.ПравоеЗначение;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Возврат ЛевоеЗначение >= ЭлементОтбора.ПравоеЗначение;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Возврат ЛевоеЗначение < ЭлементОтбора.ПравоеЗначение;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Возврат ЛевоеЗначение <= ЭлементОтбора.ПравоеЗначение;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Тогда
		Возврат СтрНайти(ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение) > 0;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
		Возврат Не СтрНайти(ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение) = 0;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
		Возврат СтрНачинаетсяС(ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
		Возврат Не СтрНачинаетсяС(ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Возврат ЗначениеВСписке(ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение)
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Возврат Не ЗначениеВСписке(ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение)
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Возврат ЗначениеВСпискеПоИерархии(ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение)
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Возврат Не ЗначениеВСпискеПоИерархии(ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение)
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Возврат ЗначениеВИерархии(ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Возврат Не ЗначениеВИерархии(ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
	КонецЕсли;
	
 	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ЗначениеВИерархии(ЛевоеЗначение, ПравоеЗначение)
	Если ТипЗнч(ЛевоеЗначение) = Тип("СправочникСсылка.ПодразделенияОрганизаций")
		И ТипЗнч(ПравоеЗначение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		Возврат ЛевоеЗначение = ПравоеЗначение Или ЛевоеЗначение.ПринадлежитЭлементу(ПравоеЗначение);
	ИначеЕсли ТипЗнч(ЛевоеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия")
		И ТипЗнч(ПравоеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Возврат ЛевоеЗначение = ПравоеЗначение Или ЛевоеЗначение.ПринадлежитЭлементу(ПравоеЗначение);
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ЗначениеВСписке(ЛевоеЗначение, ПравоеЗначение)
	
	Если ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
		Если ПравоеЗначение.НайтиПоЗначению(ЛевоеЗначение) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗначениеВСпискеПоИерархии(ЛевоеЗначение, ПравоеЗначение)
	
	Если ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементСписка Из ПравоеЗначение Цикл
			Если ЗначениеВИерархии(ЛевоеЗначение, ЭлементСписка.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ОтборыОбластей()
	
	Отборы = Новый Структура;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроекКД.Настройки.Отбор.Элементы Цикл
		Если ЗначениеЗаполнено(ЭлементОтбора.Представление) Тогда
			СловаПредставления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ЭлементОтбора.Представление);
			Если СловаПредставления.Количество() = 1 Тогда
				Если СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Лев(ЭлементОтбора.Представление, 1))
					Или СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Лев(ЭлементОтбора.Представление, 1)) Тогда
					
					Отборы.Вставить(ЭлементОтбора.Представление, ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отборы;
	
КонецФункции

&НаСервере 
Процедура ЗаполнитьЗначенияПараметров()
	
	ЗаполнитьТаблицуПараметров();
	
	ДатаДокумента = ТекущаяДатаСеанса();
	Если ИменаЭлементов <> Неопределено И ИменаЭлементов.Свойство("ДанныеДокументаДата") Тогда
		СтрокаДаты = ПараметрыМакета.НайтиПоИдентификатору(ИменаЭлементов.ДанныеДокументаДата);
		Если ЗначениеЗаполнено(СтрокаДаты.Значение) Тогда
			ДатаДокумента = СтрокаДаты.Значение;
		КонецЕсли;
	КонецЕсли;
	УстановитьЗначение(ЭтотОбъект, "ДанныеДокументаДата", ДатаДокумента);
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ВыгружаемыеОбъектыКабинетСотрудника.Ссылка КАК Ссылка
			|ИЗ
			|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъектыКабинетСотрудника
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(ВыгружаемыеОбъектыКабинетСотрудника.Ссылка) = ТИП(Справочник.Сотрудники)";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Сотрудник = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКадровыхДанных =
		"ФИОПолные,
		|Имя,
		|Фамилия,
		|Отчество,
		|Инициалы,
		|Пол,
		|ДатаРождения,
		|ВидЗанятости,
		|Возраст,
		|ДатаПриема,
		|ИНН,
		|Организация,
		|Подразделение,
		|ТабельныйНомер,
		|Должность,
		|СтраховойНомерПФР,
		|ДокументПредставление,
		|ДокументВид,
		|ДокументНомер,
		|ДокументСерия,
		|ДокументКемВыдан,
		|ДокументДатаВыдачи,
		|ДокументКодПодразделения,
		|Страна";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		ИменаКадровыхДанных = ИменаКадровыхДанных + ",ГрафикРаботы,ДолжностьПоШтатномуРасписанию";
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		ИменаКадровыхДанных = ИменаКадровыхДанных + ",МестоВСтруктуреПредприятия";
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(Истина, Сотрудник, ИменаКадровыхДанных, ДатаДокумента);
	Если КадровыеДанные <> Неопределено Тогда
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаФИОФИОПолные", КадровыеДанные.ФИОПолные);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаФИОИмя", КадровыеДанные.Имя);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаФИОФамилия", КадровыеДанные.Фамилия);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаФИООтчество", КадровыеДанные.Отчество);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаФИОИнициалыИмени", КадровыеДанные.Инициалы);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаПол", КадровыеДанные.Пол);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаДатаРождения", КадровыеДанные.ДатаРождения);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаВидЗанятости", КадровыеДанные.ВидЗанятости);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаВозраст", КадровыеДанные.Возраст);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаДатаПриема", КадровыеДанные.ДатаПриема);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаИНН", КадровыеДанные.ИНН);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаОрганизация", КадровыеДанные.Организация);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаПодразделение", КадровыеДанные.Подразделение);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаТабельныйНомер", КадровыеДанные.ТабельныйНомер);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаДолжность", КадровыеДанные.Должность);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаСНИЛС", КадровыеДанные.СтраховойНомерПФР);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаДокумент", КадровыеДанные.ДокументПредставление);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаДокументВидУдостоверенияЛичности", КадровыеДанные.ДокументВид);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаДокументНомер", КадровыеДанные.ДокументНомер);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаДокументСерия", КадровыеДанные.ДокументСерия);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаДокументВыдавшийОрган", КадровыеДанные.ДокументКемВыдан);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаДокументДатаВыдачи", КадровыеДанные.ДокументДатаВыдачи);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаДокументКодВыдавшегоОргана", КадровыеДанные.ДокументКодПодразделения);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаДокументСтрана", КадровыеДанные.Страна);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
			УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаГрафикРаботы", КадровыеДанные.ГрафикРаботы);
			УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаПозиция", КадровыеДанные.ДолжностьПоШтатномуРасписанию);
		КонецЕсли;
		
		Если Не ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
				Если ЗначениеЗаполнено(КадровыеДанные.МестоВСтруктуреПредприятия) Тогда
					УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаПодразделение", КадровыеДанные.МестоВСтруктуреПредприятия);
				КонецЕсли;
			Конецесли;
		КонецЕсли;
		
		ДополнитьСклонениямиФизическогоЛица("ДанныеСотрудникаФИОФИОПолные", КадровыеДанные.ФизическоеЛицо);
		ДополнитьСклонениямиОбъекта("ДанныеСотрудникаДолжность", КадровыеДанные.Должность);
		
	КонецЕсли;
	
	ЗаполнитьДанныеОрганизации();
	ЗаполнитьДанныеПодразделения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОрганизации()
	
	Если ИменаЭлементов = Неопределено
		Или Не ИменаЭлементов.Свойство("ДанныеСотрудникаОрганизация")
		Или Не ЗначениеЗаполнено(ИменаЭлементов.ДанныеСотрудникаОрганизация) Тогда
		
		Возврат;
	КонецЕсли;
	
	СтрокаОрганизации = ПараметрыМакета.НайтиПоИдентификатору(ИменаЭлементов.ДанныеСотрудникаОрганизация);
	Если Не ЗначениеЗаполнено(СтрокаОрганизации.Значение)
		Или ТипЗнч(СтрокаОрганизации.Значение) <> Тип("СправочникСсылка.Организации") Тогда
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтрокаОрганизации.Значение);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.ИНН КАК ИНН,
		|	Организации.ОГРН КАК ОГРН,
		|	Организации.НаименованиеПолное КАК НаименованиеПолное,
		|	Организации.НаименованиеСокращенное КАК НаименованиеСокращенное,
		|	Организации.РегистрацияВНалоговомОргане.КПП КАК РегистрацияВНалоговомОрганеКПП,
		|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаОрганизацияИНН", Выборка.ИНН);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаОрганизацияКПП", Выборка.РегистрацияВНалоговомОрганеКПП);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаОрганизацияОГРН", Выборка.ОГРН);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаОрганизацияНаименованиеПолное", Выборка.НаименованиеПолное);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаОрганизацияНаименованиеСокращенное", Выборка.НаименованиеСокращенное);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаОрганизацияЭтоФилиал", Выборка.ГоловнаяОрганизация <> СтрокаОрганизации.Значение);
		
		ОтветственныеЛица = ЗарплатаКадры.ОтветственныеЛицаОрганизации(СтрокаОрганизации.Значение, "Руководитель,ДолжностьРуководителя", ДатаДокумента);
		Если ЗначениеЗаполнено(ОтветственныеЛица.Руководитель) Тогда
			
			УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаОрганизацияРуководитель", ОтветственныеЛица.Руководитель);
			УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаОрганизацияДолжностьРуководителя", ОтветственныеЛица.ДолжностьРуководителя);
			ДополнитьСклонениямиФизическогоЛица("ДанныеСотрудникаОрганизацияРуководитель", ОтветственныеЛица.Руководитель);
			
			ДополнитьСклонениямиОбъекта("ДанныеСотрудникаОрганизацияДолжностьРуководителя", ОтветственныеЛица.ДолжностьРуководителя);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПодразделения()
	
	Если ИменаЭлементов = Неопределено
		Или Не ИменаЭлементов.Свойство("ДанныеСотрудникаПодразделение")
		Или Не ЗначениеЗаполнено(ИменаЭлементов.ДанныеСотрудникаПодразделение) Тогда
		
		Возврат;
	КонецЕсли;
	
	СтрокаПодразделения = ПараметрыМакета.НайтиПоИдентификатору(ИменаЭлементов.ДанныеСотрудникаПодразделение);
	Если Не ЗначениеЗаполнено(СтрокаПодразделения.Значение)
		Или (ТипЗнч(СтрокаПодразделения.Значение) <> Тип("СправочникСсылка.ПодразделенияОрганизаций")
			И ТипЗнч(СтрокаПодразделения.Значение) <> Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
		
		Возврат;
	КонецЕсли;
	
	ДанныеРуководителей = Новый Соответствие;
	Подразделения = Новый Массив;
	Подразделения.Добавить(СтрокаПодразделения.Значение);
	
	ДополнитьСклонениямиОбъекта("ДанныеСотрудникаПодразделение", СтрокаПодразделения.Значение);
	
	СамоеВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодразделения.Значение, "Родитель");
	Пока ЗначениеЗаполнено(СамоеВышестоящееПодразделение) Цикл
		РодительРодителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СамоеВышестоящееПодразделение, "Родитель");
		Если Не ЗначениеЗаполнено(РодительРодителя) Тогда
			Прервать;
		КонецЕсли;
		СамоеВышестоящееПодразделение = РодительРодителя;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СамоеВышестоящееПодразделение) Тогда
		Подразделения.Добавить(СамоеВышестоящееПодразделение);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений") Тогда
		МодульРуководителиПодразделений = ОбщегоНазначения.ОбщийМодуль("РуководителиПодразделений");
		ОписанияРуководителей = МодульРуководителиПодразделений.ДанныеРуководителей(Подразделения);
		Если ЗначениеЗаполнено(ОписанияРуководителей) Тогда
			Для каждого ЭлементКоллекции Из ОписанияРуководителей Цикл
				ДанныеРуководителей.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение.ФизическоеЛицо);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует(
		"ЗарплатаКадрыРасширеннаяПодсистемы.ИнтеграцияУправлениеПерсоналомРасширенная.КабинетСотрудникаРасширенная") Тогда
		
		МодульКабинетСотрудникаРасширенныйПереопределяемый = ОбщегоНазначения.ОбщийМодуль("КабинетСотрудникаРасширенныйПереопределяемый");
		МодульКабинетСотрудникаРасширенныйПереопределяемый.ЗаполнитьДанныеРуководителей(ДанныеРуководителей, Подразделения);
	КонецЕсли;
	
	Руководители = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеРуководителей, "Значение", Истина);
	Если ЗначениеЗаполнено(Руководители) Тогда
		
		Руководитель = ДанныеРуководителей.Получить(СтрокаПодразделения.Значение);
		УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаПодразделениеРуководитель", Руководитель);
		ДополнитьСклонениямиФизическогоЛица("ДанныеСотрудникаПодразделениеРуководитель", Руководитель);
		
		СамыйВышестоящийРуководитель = Неопределено;
		Если ЗначениеЗаполнено(СамоеВышестоящееПодразделение) Тогда
			СамыйВышестоящийРуководитель = ДанныеРуководителей.Получить(СамоеВышестоящееПодразделение);
			УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаПодразделениеВышестоящийРуководитель", СамыйВышестоящийРуководитель);
			ДополнитьСклонениямиФизическогоЛица("ДанныеСотрудникаПодразделениеВышестоящийРуководитель", СамыйВышестоящийРуководитель);
		КонецЕсли;
		
		ОрганизацияДокумента = Неопределено;
		Если ИменаЭлементов.Свойство("ДанныеСотрудникаОрганизация") Тогда
			СтрокаОрганизации = ПараметрыМакета.НайтиПоИдентификатору(ИменаЭлементов.ДанныеСотрудникаОрганизация);
			Если Не ЗначениеЗаполнено(СтрокаОрганизации.Значение)
				Или ТипЗнч(СтрокаОрганизации.Значение) = Тип("СправочникСсылка.Организации") Тогда
				
				ОрганизацияДокумента = СтрокаОрганизации.Значение;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОрганизацияДокумента) Тогда
			ОрганизацияДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодразделения.Значение, "Владелец");
		КонецЕсли;
	
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолучения.Организация = ОрганизацияДокумента;
		ПараметрыПолучения.СписокФизическихЛиц = Руководители;
		ПараметрыПолучения.КадровыеДанные = "Должность";
		ПараметрыПолучения.НачалоПериода = ДатаДокумента;
		ПараметрыПолучения.ОкончаниеПериода = ДатаДокумента;
		СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
		Для Каждого СотрудникОрганизации Из СотрудникиОрганизации Цикл
			Если СотрудникОрганизации.ФизическоеЛицо = Руководитель Тогда
				УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаПодразделениеДолжностьРуководителя", СотрудникОрганизации.Должность);
				ДополнитьСклонениямиОбъекта("ДанныеСотрудникаПодразделениеДолжностьРуководителя", СотрудникОрганизации.Должность);
			КонецЕсли;
			Если СотрудникОрганизации.ФизическоеЛицо = СамыйВышестоящийРуководитель Тогда
				УстановитьЗначение(ЭтотОбъект, "ДанныеСотрудникаПодразделениеДолжностьВышестоящегоРуководителя", СотрудникОрганизации.Должность);
				ДополнитьСклонениямиОбъекта("ДанныеСотрудникаПодразделениеДолжностьВышестоящегоРуководителя", СотрудникОрганизации.Должность);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСклонениямиФизическогоЛица(ИмяПоля, ФизическоеЛицо)
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		РеквизитыФизическогоЛица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизическоеЛицо, "ФИО,Пол");
		СклоненияПредставления = ИнтеграцияУправлениеПерсоналомОбмен.СклоненияФИО(
			РеквизитыФизическогоЛица.ФИО, ПараметрыМакета.НайтиПоИдентификатору(ИменаЭлементов[ИмяПоля]).Значение, РеквизитыФизическогоЛица.Пол);
		Если ЗначениеЗаполнено(СклоненияПредставления) Тогда
			Для Каждого СклонениеПредставления Из СклоненияПредставления Цикл
				УстановитьЗначение(ЭтотОбъект, СтрШаблон("%1%2Падеж", ИмяПоля, СклонениеПредставления.Ключ), СклонениеПредставления.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнитьСклонениямиОбъекта(ИмяПоля, Объект)
	Если ЗначениеЗаполнено(Объект) Тогда
		Если ЗначениеЗаполнено(Объект) Тогда
			СклоненияПредставления = ИнтеграцияУправлениеПерсоналомОбмен.СклоненияПредставленияОбъекта(Строка(Объект), Объект);
			Для Каждого СклонениеПредставления Из СклоненияПредставления Цикл
				УстановитьЗначение(ЭтотОбъект, СтрШаблон("%1%2Падеж", ИмяПоля, СклонениеПредставления.Ключ), СклонениеПредставления.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначение(УправляемаяФорма, ИмяПараметра, Значение)
	Если УправляемаяФорма.ИменаЭлементов <> Неопределено И УправляемаяФорма.ИменаЭлементов.Свойство(ИмяПараметра) Тогда
		УправляемаяФорма.ПараметрыМакета.НайтиПоИдентификатору(УправляемаяФорма.ИменаЭлементов[ИмяПараметра]).Значение = Значение;
		Если ТипЗнч(Значение) = Тип("Дата") Тогда
			УстановитьЗначенияЧастейДат(УправляемаяФорма, ИмяПараметра, Значение)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияЧастейДат(УправляемаяФорма, ИмяПараметра, ЗначениеДаты)
	УстановитьЗначение(УправляемаяФорма, ИмяПараметра + "ЧастиДатДень", Формат(День(ЗначениеДаты), "ЧЦ=2; ЧВН="));
	УстановитьЗначение(УправляемаяФорма, ИмяПараметра + "ЧастиДатМесяц", Формат(Месяц(ЗначениеДаты), "ЧЦ=2; ЧВН="));
	УстановитьЗначение(УправляемаяФорма, ИмяПараметра + "ЧастиДатГод", Формат(Год(ЗначениеДаты), "ЧЦ=4; ЧВН=; ЧГ="));
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыМакетаЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элемент.СписокВыбора) Тогда
		ВыбранныйЭлемент = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если ВыбранныйЭлемент <> Неопределено Тогда
			Элементы.ПараметрыМакета.ТекущиеДанные.Представление = ВыбранныйЭлемент.Представление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлементы = Элемент.Поля.Элементы.Добавить();
	ПолеЭлементы.Поле = Новый ПолеКомпоновкиДанных("ПараметрыМакетаЗначение");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыМакета.Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый  ПолеКомпоновкиДанных("ПараметрыМакета.Представление"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлементы = Элемент.Поля.Элементы.Добавить();
	ПолеЭлементы.Поле = Новый ПолеКомпоновкиДанных("ПараметрыМакетаЗначение");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыМакета.Редактируемый");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПервыйДоступныйСотрудник()
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.НачалоПериода = НачалоДня(ТекущаяДатаСеанса());
	ПараметрыПолучения.ОкончаниеПериода = КонецДня(ТекущаяДатаСеанса());
	
	ДоступныеСотрудники = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
	Если ДоступныеСотрудники.Количество() > 0 Тогда
		Возврат ДоступныеСотрудники[0].Сотрудник;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

