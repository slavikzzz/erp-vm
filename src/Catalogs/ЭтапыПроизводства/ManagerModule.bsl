#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает новый номер этапа.
//
// Параметры:
//   Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация.
//
// Возвращаемое значение:
//   Число        - Новый номер этапа.
//
Функция НовыйНомерЭтапа(Спецификация) Экспорт

	Если Спецификация.Пустая() Тогда
		
		Возврат 1;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Владелец = &Спецификация
	|	И НЕ ЭтапыПроизводства.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа УБЫВ");
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат 1;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.НомерЭтапа + 1;

КонецФункции

// Возвращает список предшественников
// Этапы должны принадлежать одной спецификации.
//
// Параметры:
//  МассивСсылок - Массив из СправочникСсылка.ЭтапыПроизводства - этап.
// 
// Возвращаемое значение:
//   - Соответствие - соответствие предшественников.
//
Функция Предшественники(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЭтапыПроизводства.Ссылка               КАК Этап,
		|	ЭтапыПроизводства.НомерЭтапа           КАК НомерЭтапа,
		|	ЭтапыПроизводства.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			Т.Владелец
		|		ИЗ
		|			Справочник.ЭтапыПроизводства КАК Т
		|		ГДЕ
		|			Т.Ссылка В (&МассивСсылок)
		|	)
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ТаблицаЭтапов = Запрос.Выполнить().Выгрузить();
	ТаблицаЭтапов.Индексы.Добавить("НомерСледующегоЭтапа");
	
	Предшественники = Новый Соответствие;
	
	Для каждого Ссылка Из МассивСсылок Цикл
		
		Предшественники.Вставить(Ссылка, Новый Массив);
		
		Отбор = Новый Структура("Этап", Ссылка); 
		
		ЭтапыРасчета = ТаблицаЭтапов.НайтиСтроки(Отбор);
		
		Пока ЭтапыРасчета.Количество() > 0 Цикл
			
			ТекущаяСтрока = ЭтапыРасчета[0];
			
			Отбор = Новый Структура("НомерСледующегоЭтапа", ТекущаяСтрока.НомерЭтапа);
			
			Для каждого НайденнаяСтрока Из ТаблицаЭтапов.НайтиСтроки(Отбор) Цикл
				
				ПредшественникиМассив = Предшественники[Ссылка]; // Массив
				ПредшественникиМассив.Добавить(НайденнаяСтрока.Этап);
				
				ЭтапыРасчета.Добавить(НайденнаяСтрока);
				
			КонецЦикла;
			
			ЭтапыРасчета.Удалить(0);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Предшественники;
	
КонецФункции

// Возвращает основную единицу измерения времени этапа.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ЕдиницыИзмеренияВремени - основная единица измерения времени этапа.
//
Функция ОсновнаяЕдиницаВремени() Экспорт

	Возврат Перечисления.ЕдиницыИзмеренияВремени.Минута;

КонецФункции

// Возвращает основную единицу измерения времени буфера.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ЕдиницыИзмеренияВремени - основная единица измерения времени буфера.
//
Функция ОсновнаяЕдиницаВремениБуфера() Экспорт

	Возврат Перечисления.ЕдиницыИзмеренияВремени.День;

КонецФункции

// Возвращает основную единицу измерения времени длительности этапа УББВ.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ЕдиницыИзмеренияВремени - основная единица измерения времени этапа УББВ.
//
Функция ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ() Экспорт
	
	Возврат Перечисления.ЕдиницыИзмеренияВремени.День;
	
КонецФункции

//++ НЕ УТКА

// Заполняет список видов рабочих центров на основании выбранной маршрутной карте
//
// Параметры:
//  ДанныеЭтапа	- ДанныеФормыСтруктура - объект содержащий данные этапа.
//
Процедура ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте(ДанныеЭтапа) Экспорт

	ДанныеЭтапа.ВидыРабочихЦентров.Очистить();
	ДанныеЭтапа.АльтернативныеВидыРабочихЦентров.Очистить();
	ДанныеЭтапа.ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.Последовательно;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; //временные таблицы используются повторно
	
	ТекстЗапросаСписокЭтапов = "
	|ВЫБРАТЬ
	|	&МаршрутнаяКарта КАК МаршрутнаяКарта
	|ПОМЕСТИТЬ СписокЭтапов";
	
	Запрос.УстановитьПараметр("МаршрутнаяКарта", ДанныеЭтапа.МаршрутнаяКарта);
	Запрос.УстановитьПараметр("Подразделение",   ДанныеЭтапа.Подразделение);
	
	ВидыРабочихЦентровПоКоторымНужноПланироватьРаботу(
				Запрос, 
				ТекстЗапросаСписокЭтапов, 
				ДанныеЭтапа);
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	// Заполним значения буферов
	БуферыМаршрутнойКарты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеЭтапа.МаршрутнаяКарта, 
		"ПредварительныйБуфер,ЗавершающийБуфер,ЕдиницаИзмеренияПредварительногоБуфера,ЕдиницаИзмеренияЗавершающегоБуфера");
	ЗаполнитьЗначенияСвойств(ДанныеЭтапа, БуферыМаршрутнойКарты);
	
	Если ДанныеЭтапа.ЕдиницаИзмеренияПредварительногоБуфера.Пустая() Тогда
		ДанныеЭтапа.ЕдиницаИзмеренияПредварительногоБуфера = ОсновнаяЕдиницаВремениБуфера();
	КонецЕсли; 
	Если ДанныеЭтапа.ЕдиницаИзмеренияЗавершающегоБуфера.Пустая() Тогда
		ДанныеЭтапа.ЕдиницаИзмеренияЗавершающегоБуфера = ОсновнаяЕдиницаВремениБуфера();
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТКА

Процедура ВидыРабочихЦентровПоКоторымНужноПланироватьРаботу(Запрос, ТекстЗапросаСписокЭтапов, ДанныеЭтапа)

	ИндексРезультатаЗапроса = 0;
	ТекстЗапроса = "";
	
	СписокВидовРабочихЦентров = ДанныеЭтапа.ВидыРабочихЦентров;
	
	Если ТекстЗапросаСписокЭтапов <> Неопределено Тогда
		ИндексРезультатаЗапроса = 1;
		ТекстЗапроса = ТекстЗапросаСписокЭтапов 
				+ "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|"
	КонецЕсли; 
	ТекстЗапроса = ТекстЗапроса
			+ "ВЫБРАТЬ
			|	СписокЭтапов.МаршрутнаяКарта КАК МаршрутнаяКарта,
			|	КОЛИЧЕСТВО(спрОперации.НомерОперации) = КОЛИЧЕСТВО(РАЗЛИЧНЫЕ спрОперации.НомерОперации) КАК Последовательно
			|ПОМЕСТИТЬ СписокМаршрутныхКарт
			|ИЗ
			|	СписокЭтапов КАК СписокЭтапов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК спрОперации
			|		ПО (спрОперации.Владелец = СписокЭтапов.МаршрутнаяКарта)
			|			И (НЕ спрОперации.ПометкаУдаления)
			|			И (НЕ спрОперации.СодержитВложенныйМаршрут)
			|			И (ВЫБОР
			|				КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
			|					ТОГДА ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).УчитыватьДоступностьПоГрафикуРаботы
			|				КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
			|					ТОГДА ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|
			|СГРУППИРОВАТЬ ПО
			|	СписокЭтапов.МаршрутнаяКарта
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	МаршрутнаяКарта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 1. Виды рабочих центров по которым нужно планировать работу
			|ВЫБРАТЬ 
			|	ВложенныйЗапрос.ВидРабочегоЦентра        КАК ВидРабочегоЦентра,
			|	ВложенныйЗапрос.ВариантНаладки           КАК ВариантНаладки,
			|	ВложенныйЗапрос.ВремяШтучноеЕдИзм        КАК ЕдиницаИзмерения,
			|	СУММА(ВложенныйЗапрос.ВремяШтучное)      КАК ВремяРаботы,
			|	СУММА(ВложенныйЗапрос.Загрузка)          КАК Загрузка,
			|	МИНИМУМ(ВложенныйЗапрос.Последовательно) КАК Последовательно
			|
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
			|				ТОГДА спрОперации.РабочийЦентр
			|			ИНАЧЕ ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра
			|		КОНЕЦ                                             КАК ВидРабочегоЦентра,
			|		спрОперации.ВариантНаладки                        КАК ВариантНаладки,
			|		спрОперации.Загрузка                              КАК Загрузка,
			|		СписокМаршрутныхКарт.Последовательно              КАК Последовательно,
			|		&ТекстРеквизитыРасчетаВремениВыполненияОперации
			|	ИЗ
			|		СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК спрОперации
			|			ПО (спрОперации.Владелец = СписокМаршрутныхКарт.МаршрутнаяКарта)
			|				И (НЕ спрОперации.СодержитВложенныйМаршрут)
			|				И (ВЫБОР 
			|						КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
			|							ТОГДА ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).УчитыватьДоступностьПоГрафикуРаботы
			|						КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
			|							ТОГДА ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы
			|						ИНАЧЕ ЛОЖЬ
			|					КОНЕЦ)
			|	ГДЕ НЕ спрОперации.ПометкаУдаления
			|			И ВЫБОР
			|				КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
			|					ТОГДА ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).Подразделение
			|				ИНАЧЕ ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.Подразделение
			|			КОНЕЦ = &Подразделение) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.ВидРабочегоЦентра,
			|	ВложенныйЗапрос.ВариантНаладки,
			|	ВложенныйЗапрос.ВремяШтучноеЕдИзм
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ СписокЭтапов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	спрОперации.ВложенныйМаршрут КАК МаршрутнаяКарта
			|ПОМЕСТИТЬ СписокЭтапов
			|ИЗ
			|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК спрОперации
			|		ПО (спрОперации.Владелец = СписокМаршрутныхКарт.МаршрутнаяКарта)
			|			И спрОперации.СодержитВложенныйМаршрут
			| ГДЕ НЕ спрОперации.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ СписокМаршрутныхКарт";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ТекстРеквизитыРасчетаВремениВыполненияОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыРасчетаВремениВыполненияОперации("спрОперации"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	// Результат[1] - Виды рабочих центров по которым нужно планировать работу
	
	Если Результат[1 + ИндексРезультатаЗапроса].Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	// Заполним выходные изделия
	Выборка = Результат[1 + ИндексРезультатаЗапроса].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра,ВариантНаладки", Выборка.ВидРабочегоЦентра, Выборка.ВариантНаладки);
		СписокСтрок = СписокВидовРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			СтрокаВидРЦ = СписокВидовРабочихЦентров.Добавить();
			СтрокаВидРЦ.КлючСвязи         = Новый УникальныйИдентификатор;
			СтрокаВидРЦ.ВидРабочегоЦентра = Выборка.ВидРабочегоЦентра;
			СтрокаВидРЦ.ВариантНаладки    = Выборка.ВариантНаладки;
			СтрокаВидРЦ.ЕдиницаИзмерения  = Выборка.ЕдиницаИзмерения;
			РедакторПроизводственногоПроцессаКлиентСервер.ПриВводеНовойСтрокиВидовРабочихЦентров(СтрокаВидРЦ, Ложь);
		Иначе
			СтрокаВидРЦ = СписокСтрок[0];
		КонецЕсли;
		
		Если ДанныеЭтапа.ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.Последовательно Тогда
			Если Выборка.Последовательно Тогда
				
				Если Выборка.ЕдиницаИзмерения = СтрокаВидРЦ.ЕдиницаИзмерения Тогда
					ВремяРаботы = Выборка.ВремяРаботы;
				Иначе
					ВремяРаботы = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
																ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
																			Выборка.ВремяРаботы,
																			Выборка.ЕдиницаИзмерения),
																СтрокаВидРЦ.ЕдиницаИзмерения);
				КонецЕсли;
				СтрокаВидРЦ.ВремяРаботы = СтрокаВидРЦ.ВремяРаботы + ДанныеЭтапа.КоэффициентМаршрутнойКарты * ВремяРаботы;
				СтрокаВидРЦ.Загрузка    = СтрокаВидРЦ.Загрузка + ДанныеЭтапа.КоэффициентМаршрутнойКарты * Выборка.Загрузка;
				
			Иначе
				ДанныеЭтапа.ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.Одновременно;
				Для каждого Строка Из СписокВидовРабочихЦентров Цикл
					Строка.ВремяРаботы = 0;
					Строка.Загрузка    = 0;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВидыРабочихЦентровПоКоторымНужноПланироватьРаботу(Запрос, Неопределено, ДанныеЭтапа);

КонецПроцедуры

Функция СписокЭтаповДляКоторыхЗаданоОдновременноПроизводимоеКоличество(Спецификация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК Т
	|ГДЕ
	|	Т.Владелец = &Ссылка
	|	И НЕ Т.ПометкаУдаления
	|	И Т.ПланироватьРаботуВидовРабочихЦентров
	|	И Т.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий > 0
	|	И Т.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий <> 1
	|");
	Запрос.УстановитьПараметр("Ссылка", Спецификация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

Процедура ОчиститьРеквизитОдновременноПроизводимоеКоличество(Спецификация, АдресРезультата = Неопределено) Экспорт
	
	ЗначениеЗаполнения = Метаданные.Справочники.ЭтапыПроизводства.Реквизиты.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий.ЗначениеЗаполнения;
	
	СписокЭтапов = СписокЭтаповДляКоторыхЗаданоОдновременноПроизводимоеКоличество(Спецификация);
	
	Для каждого СсылкаНаЭтап Из СписокЭтапов Цикл

		НачатьТранзакцию();
		Попытка
	
			ЭтапОбъект = СсылкаНаЭтап.ПолучитьОбъект();
			ЭтапОбъект.Заблокировать();
			
			ЭтапОбъект.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий = ЗначениеЗаполнения;
			
			ЭтапОбъект.ОбменДанными.Загрузка = Истина;
			ЭтапОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
	
		Исключение
			
			ОтменитьТранзакцию();
			
			ИмяСобытия = НСтр("ru = 'Ресурсная спецификация';
								|en = 'Bill of materials'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ТекстСообщения = НСтр("ru = 'Не удалось скорректировать этапы ресурсной спецификации по причине: %Причина%';
									|en = 'Cannot correct the bill of materials stages. Reason: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Предупреждение,
				,
				Спецификация,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоответствиеОтбораПоСвойствам(Спецификация, СписокВсехДоступныхСвойств, СообщитьНазваниеЭтапа, Отказ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Ссылка                         КАК Ссылка,
	|	Таблица.Ссылка.Наименование            КАК СсылкаПредставление,
	|	""ВидыРабочихЦентров""                 КАК ИмяТЧ,
	|	Таблица.ВидРабочегоЦентра.Наименование КАК ВидРабочегоЦентраПредставление
	|ИЗ
	|	Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.ОтборПоСвойствам КАК ОтборПоСвойствам
	|		ПО Таблица.Ссылка = ОтборПоСвойствам.Ссылка
	|			И Таблица.КлючСвязи = ОтборПоСвойствам.КлючСвязи
	|			И НЕ (ОтборПоСвойствам.Свойство В (&СписокВсехДоступныхСвойств))
	|ГДЕ
	|	Таблица.Ссылка.Владелец = &Спецификация
	|	И НЕ Таблица.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.Ссылка.Наименование,
	|	""АльтернативныеВидыРабочихЦентров"",
	|	Таблица.ВидРабочегоЦентра.Наименование
	|ИЗ
	|	Справочник.ЭтапыПроизводства.АльтернативныеВидыРабочихЦентров КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.ОтборПоСвойствам КАК ОтборПоСвойствам
	|		ПО Таблица.Ссылка = ОтборПоСвойствам.Ссылка
	|			И Таблица.КлючСвязи = ОтборПоСвойствам.КлючСвязи
	|			И НЕ (ОтборПоСвойствам.Свойство В (&СписокВсехДоступныхСвойств))
	|ГДЕ
	|	Таблица.Ссылка.Владелец = &Спецификация
	|	И НЕ Таблица.Ссылка.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("СписокВсехДоступныхСвойств", СписокВсехДоступныхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если СообщитьНазваниеЭтапа Тогда
				
				ШаблонСообщения = НСтр("ru = 'В настройках использования указаны неверные свойства, см. вид рабочего центра ""%1"" (%2).';
										|en = 'Invalid properties are specified in usage settings, see work center type ""%1"" (%2).'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ВидРабочегоЦентраПредставление, Выборка.СсылкаПредставление);
				
			Иначе
				
				ШаблонСообщения = НСтр("ru = 'В настройках использования указаны неверные свойства, см. вид рабочего центра ""%1"".';
										|en = 'Invalid properties are specified in usage settings, see work center type ""%1"".'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ВидРабочегоЦентраПредставление);
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Выборка.Ссылка,
				"ВидыРабочихЦентров",
				, 
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьАлгоритмРасчетаКоличества(Спецификация, ОписаниеИсточников, СообщитьНазваниеЭтапа, Отказ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Ссылка                         КАК Ссылка,
	|	Таблица.Ссылка.Наименование            КАК СсылкаПредставление,
	|	""ВидыРабочихЦентров""                 КАК ИмяТЧ,
	|	Таблица.ВидРабочегоЦентра.Наименование КАК ВидРабочегоЦентраПредставление,
	|	Таблица.НомерСтроки                    КАК НомерСтроки,
	|	Таблица.АлгоритмРасчетаКоличества      КАК АлгоритмРасчетаКоличества
	|ИЗ
	|	Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Владелец = &Спецификация
	|	И ВЫРАЗИТЬ(Таблица.АлгоритмРасчетаКоличества КАК СТРОКА(100)) <> """"
	|	И НЕ Таблица.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.Ссылка.Наименование,
	|	""АльтернативныеВидыРабочихЦентров"",
	|	Таблица.ВидРабочегоЦентра.Наименование,
	|	Таблица.НомерСтроки,
	|	Таблица.АлгоритмРасчетаКоличества
	|ИЗ
	|	Справочник.ЭтапыПроизводства.АльтернативныеВидыРабочихЦентров КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Владелец = &Спецификация
	|	И ВЫРАЗИТЬ(Таблица.АлгоритмРасчетаКоличества КАК СТРОКА(100)) <> """"
	|	И НЕ Таблица.Ссылка.ПометкаУдаления
	|");
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляПроверки = РезультатЗапроса.Выгрузить();
	СтрокиДляПроверки.Индексы.Добавить("Ссылка,ИмяТЧ");
	
	ПроверитьАлгоритмРасчетаВремениРаботыВРЦ(СтрокиДляПроверки, ОписаниеИсточников, СообщитьНазваниеЭтапа, Отказ);
	
КонецПроцедуры

Процедура ПроверитьАлгоритмРасчетаВремениРаботыВРЦ(СтрокиДляПроверки, ОписаниеИсточников, СообщитьНазваниеЭтапа, Отказ) Экспорт 
	
	Состав = Новый Массив;
	Состав.Добавить(Новый Структура("ИмяТЧ,Представление", "ВидыРабочихЦентров"));
	Состав.Добавить(Новый Структура("ИмяТЧ,Представление", "АльтернативныеВидыРабочихЦентров"));
	ПараметрыПроверки = Новый Структура("Состав,ВыводитьСообщения,ОчищатьНеНайденные", Состав, Ложь, Ложь);
	
	СписокЭтапов = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(СтрокиДляПроверки, "Ссылка");
	
	Для каждого Ссылка Из СписокЭтапов Цикл
		
		ОбъектПроверки = Новый Структура;
		
		Таблица = СтрокиДляПроверки.Скопировать(Новый Структура("Ссылка,ИмяТЧ", Ссылка, "ВидыРабочихЦентров"));
		ОбъектПроверки.Вставить("ВидыРабочихЦентров", Таблица);
		
		Таблица = СтрокиДляПроверки.Скопировать(Новый Структура("Ссылка,ИмяТЧ", Ссылка, "АльтернативныеВидыРабочихЦентров"));
		ОбъектПроверки.Вставить("АльтернативныеВидыРабочихЦентров", Таблица);
		
		РезультатПроверки = УправлениеДаннымиОбИзделиях.ПроверитьОчиститьАлгоритмРасчетаКоличества(ОбъектПроверки, ОписаниеИсточников, ПараметрыПроверки, Отказ);
		
		Для каждого Элемент Из Состав Цикл
			
			Для каждого НомерСтроки Из РезультатПроверки[Элемент.ИмяТЧ] Цикл
				
				ТаблицаПроверки = ОбъектПроверки[Элемент.ИмяТЧ]; // см. ОписаниеВидовРабочихЦентровКонструктор
				СтрокаПроверки = ТаблицаПроверки.Найти(НомерСтроки, "НомерСтроки");
				
				Если СообщитьНазваниеЭтапа Тогда
					Шаблон = НСтр("ru = 'Алгоритм расчета количества содержит недоступные операнды, см. вид рабочего центра ""%1"" (%2)';
									|en = 'Quantity calculation algorithm contains unavailable operands. See the ""%1"" work center type (%2)'");
					ТекстСообщения = СтрШаблон(Шаблон, СтрокаПроверки.ВидРабочегоЦентраПредставление, СтрокаПроверки.СсылкаПредставление);
				Иначе
					Шаблон = НСтр("ru = 'Алгоритм расчета количества содержит недоступные операнды, см. вид рабочего центра ""%1""';
									|en = 'Quantity calculation algorithm contains unavailable operands, see the ""%1"" work center type'");
					ТекстСообщения = СтрШаблон(Шаблон, СтрокаПроверки.ВидРабочегоЦентраПредставление);
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					Ссылка,
					,
					,
					Отказ);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Конструктор таблицы описания видов рабочих центров
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица описания:
// 		 * Ссылка - СправочникСсылка.ЭтапыПроизводства - ссылка на этап
// 		 * СсылкаПредставление - Строка - представление этапа
// 		 * Наименование - Строка - наименование рабочего центра
// 		 * НомерСтроки - Число - номер строки таблицы
// 		 * АлгоритмРасчетаКоличества - Строка - алгоритм расчета
//
Функция ОписаниеВидовРабочихЦентровКонструктор() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Возврат Результат;
	
КонецФункции

//-- НЕ УТКА

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ЭтапыПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.17.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("112f5d16-3df8-4128-8c8f-6cc9aaa668d1");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ЭтапыПроизводства.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заменяет пустое значение реквизита ""Партнер"" на приведенное к правильному типу.';
									|en = 'Replaces the empty value of the ""Partner"" attribute with the one converted into the correct type.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ЭтапыПроизводства.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ЭтапыПроизводства.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ЭтапыПроизводства.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.ЭтапыПроизводства";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	НЕ ЭтапыПроизводства.ПроизводствоНаСтороне
	|	И ЭтапыПроизводства.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ЭтапыПроизводства";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для каждого ЭлементСправочника Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСправочника.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			СправочникОбъект = ЭлементСправочника.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ЭтапыПроизводства
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если Не СправочникОбъект.ПроизводствоНаСтороне
				И СправочникОбъект.Партнер = Справочники.Партнеры.ПустаяСсылка() Тогда
				СправочникОбъект.Партнер = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ЭлементСправочника.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
