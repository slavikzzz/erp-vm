#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ОсновнаяЕдиницаВремениБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
	ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ();
	
	Параметры.Свойство("Режим", Режим);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
//++ Устарело_Производство21

//++ НЕ УТКА
	Если Режим = "СпецификацияЗаказа" Тогда
		
		ДоступностьРеквизитов = Истина;
		
		СвойстваЭтапа = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
		
		АвтоЗаголовок = Ложь;
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (Этап производства)';
				|en = '%1 (Production stage)'"),
			СвойстваЭтапа.Наименование);
		
		ЗаполнитьЗначенияСвойств(Объект, СвойстваЭтапа, , "ВидыРабочихЦентров, АльтернативныеВидыРабочихЦентров");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваЭтапа, "УслугаПереработчика,ХарактеристикаУслугиПереработчика,СтатьяКалькуляции");
		
		Объект.ВидыРабочихЦентров.Загрузить(СвойстваЭтапа.ВидыРабочихЦентров);
		Объект.АльтернативныеВидыРабочихЦентров.Загрузить(СвойстваЭтапа.АльтернативныеВидыРабочихЦентров);
		
		ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		Элементы.АльтернативнаяКоманднаяПанель.Видимость = Истина;
		Элементы.АльтернативнаяКоманднаяПанель.ПодчиненныеЭлементы.ЗавершитьРедактирование.КнопкаПоУмолчанию = Истина;
		
		Элементы.ГруппаУслугиПереработчика22.Видимость      = Ложь;
		Элементы.ГруппаУслугиПереработчика21Лево.Видимость  = Истина;
		Элементы.ГруппаУслугиПереработчика21Право.Видимость = Истина;
		
		Элементы.ПорядокЭтаповСтраницы.ТекущаяСтраница = Элементы.ПорядокЭтаповСтраницы.ПодчиненныеЭлементы.СтраницаСпецификацияЗаказа;
		
		Если СвойстваЭтапа.Выполняется ИЛИ СвойстваЭтапа.ЕстьКорректировкиМатериалов Тогда
			
			Элементы.СпособПроизводства.ТолькоПросмотр = Истина;
			Элементы.СпособПроизводства.Подсказка = ПолучитьТекстПодсказкиСпособПроизводства(
																	СвойстваЭтапа.Выполняется,
																	СвойстваЭтапа.ЕстьКорректировкиМатериалов); 
			
		КонецЕсли;
		
		НомерЭтапаФорма = Формат(СвойстваЭтапа.НомерЭтапаФорма, "ЧГ=0");
		НомерСледующегоЭтапаФорма = Формат(СвойстваЭтапа.НомерСледующегоЭтапаФорма, "ЧГ=0");
		
		Если ТолькоПросмотр Тогда
			Элементы.ЗавершитьРедактирование.Заголовок = НСтр("ru = 'Закрыть';
																|en = 'Close'");
		КонецЕсли;
		
		// Эти элементы не редактируются в спецификации заказа
		Элементы.РазбиватьМаршрутныеЛисты.Видимость = Ложь;
		Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.Видимость = Ложь;
		Элементы.РазбиватьМаршрутныеЛистыПоМаршрутнойКарте.Видимость = Ложь;
		Элементы.МаксимальноеКоличествоЕдиницПартийИзделияПоМаршрутнойКарте.Видимость = Ложь;
		Элементы.ДекорацияОпределяетсяМаршрутнойКартой.Видимость = Ложь;
		Элементы.НастройкаОтбораПоСвойствамИРасчетаПоФормулам.Видимость = Ложь;
		
		ПриЧтенииСозданииНаСервере();
		
	Иначе
//-- НЕ УТКА

//-- Устарело_Производство21
	
		Элементы.АльтернативнаяКоманднаяПанель.Видимость = Ложь;
		Элементы.ВидыРабочихЦентровИспользовать.Видимость = Ложь;
		
		// СтандартныеПодсистемы.Свойства
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", Объект);
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
		// Конец СтандартныеПодсистемы.Свойства

//++ Устарело_Производство21

//++ НЕ УТКА
	КонецЕсли;
//-- НЕ УТКА

//-- Устарело_Производство21
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//++ НЕ УТКА
	Если Режим <> "СпецификацияЗаказа" Тогда
	//-- НЕ УТКА
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.Свойства
		
	//++ НЕ УТКА
	КонецЕсли;
	//-- НЕ УТКА
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.МаксимальноеКоличествоЕдиницПартийИзделия = МаксимальноеКоличествоЕдиницПартийИзделия;
	
	//++ НЕ УТКА
	РедакторПроизводственногоПроцесса.СохранитьВидыРабочихЦентров(
				ВидыРабочихЦентров, 
				ТекущийОбъект.ПланироватьРаботуВидовРабочихЦентров,
				ТекущийОбъект.ВидыРабочихЦентров,
				ТекущийОбъект.АльтернативныеВидыРабочихЦентров);
	//-- НЕ УТКА
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЭтапыПроизводства",, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСлужебныеРеквизитыУслугиПереработчика();
	
	НастроитьЭлементыФормы();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//++ НЕ УТКА
	Если ИмяСобытия = "Запись_МаршрутныеКарты" И Источник = Объект.МаршрутнаяКарта Тогда
		ПрочитатьНастройкиМаршрутнойКарты(ЭтаФорма);
	КонецЕсли;
	//-- НЕ УТКА
	
	// Некоторые механизмы недоступны в режиме редактирования спецификации заказа
	Если Режим <> "СпецификацияЗаказа" Тогда		
		// Подсистема "Свойства"
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	//++ Устарело_Производство21
	Если Режим = "СпецификацияЗаказа" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Модифицированность Тогда
			
			Отказ = Истина;
			ТекстВопроса = Нстр("ru = 'Данные были изменены. Перенести изменения?';
								|en = 'Data has changed. Transfer the changes?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПередЗакрытием", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		КонецЕсли;
		
	КонецЕсли;
	//-- Устарело_Производство21
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
//++ НЕ УТКА
	Если ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаОтбораПоСвойствамИРасчетаПоФормулам" Тогда
		
		ТекущиеДанные = Элементы[ИсточникВыбора.ИмяТЧ].ТекущиеДанные;
		Если УправлениеДаннымиОбИзделияхКлиент.НастроитьОтборПоСвойствамИРасчетПоФормуламЗавершение(ВыбранноеЗначение, ТекущиеДанные, Объект.ОтборПоСвойствам) Тогда
			
			ВидыРабочихЦентровПересчитатьВремяРаботы(ТекущиеДанные);
			РассчитатьДлительность();
			
			Модифицированность = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
//-- НЕ УТКА
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Режим <> "СпецификацияЗаказа" Тогда
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
		// Конец СтандартныеПодсистемы.Свойства
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ РазбиватьМаршрутныеЛисты 
		//++ НЕ УТКА
		ИЛИ НЕ Объект.МаршрутнаяКарта.Пустая() 
		//-- НЕ УТКА
		Тогда
		МассивНепроверяемыхРеквизитов.Добавить("МаксимальноеКоличествоЕдиницПартийИзделия");
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособПроизводстваПриИзменении(Элемент)

	Объект.ПроизводствоНаСтороне = Булево(СпособПроизводства);
	СписокРеквизитов = "СпособПроизводства";
	
	Если Объект.ПроизводствоНаСтороне Тогда
		
		Объект.ПланироватьРаботуВидовРабочихЦентров = Ложь;
		Объект.МаршрутнаяКарта  = Неопределено;
		Объект.КоэффициентМаршрутнойКарты = 0;
		
		СписокРеквизитов = СписокРеквизитов + ",ПланироватьРаботуВидовРабочихЦентров,МаршрутнаяКарта";
		
		ПолеПартнер = Элементы.Партнер;
		
	Иначе
		ПолеПартнер = Элементы.Организация;
	КонецЕсли;
	
	Объект.Партнер = ПолеПартнер.ОграничениеТипа.ПривестиЗначение(Объект.Партнер);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, СписокРеквизитов);
	
	РедакторПроизводственногоПроцессаКлиентСервер.ЗаполнитьПояснениеОсновныхНастроек(Объект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутнаяКартаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	МаршрутнаяКартаПриИзмененииНаСервере();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьРаботуВидовРабочихЦентровПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПланироватьРаботуВидовРабочихЦентров");
	
	РассчитатьДлительность();
	
	РедакторПроизводственногоПроцессаКлиентСервер.ЗаполнитьПояснениеОсновныхНастроек(Объект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияДлительностиЭтапаПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияДлительностиЭтапа.Пустая() Тогда
		Объект.ЕдиницаИзмеренияДлительностиЭтапа = ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПредварительногоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияПредварительногоБуфера.Пустая() Тогда
		
		Объект.ЕдиницаИзмеренияПредварительногоБуфера = ОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли;
	
	РассчитатьДлительность();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияЗавершающегоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияЗавершающегоБуфера.Пустая() Тогда
		
		Объект.ЕдиницаИзмеренияЗавершающегоБуфера = ОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли;
	
	РассчитатьДлительность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОдновременноПроизводимоеКоличествоЕдиницПартийИзделийПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий");
	
КонецПроцедуры

&НаКлиенте
Процедура РазбиватьМаршрутныеЛистыПриИзменении(Элемент)
	
	РедакторПроизводственногоПроцессаКлиент.УстановитьМаксимальноеКоличествоЕдиницПартийИзделия(
		РазбиватьМаршрутныеЛисты, МаксимальноеКоличествоЕдиницПартийИзделия);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РазбиватьМаршрутныеЛисты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйБуферПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтотОбъект);
	
	РассчитатьДлительность();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершающийБуферПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтотОбъект);
	
	РассчитатьДлительность();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаПереработчикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются");
	ТекущаяСтрока.Номенклатура = УслугаПереработчика;
	ТекущаяСтрока.Характеристика = ХарактеристикаУслугиПереработчика;
	ТекущаяСтрока.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ХарактеристикаУслугиПереработчика);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ХарактеристикиИспользуются = ТекущаяСтрока.ХарактеристикиИспользуются;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Переработка");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРаботыВидовРабочихЦентровПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	РедакторПроизводственногоПроцессаКлиент.ПорядокРаботыВидовРабочихЦентровПриИзменении(
		ВидыРабочихЦентров,
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ЕстьСинхроннаяЗагрузка,
		Истина);
	
	РассчитатьДлительность();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыРабочихЦентров

&НаКлиенте
Процедура ВидыРабочихЦентровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	РедакторПроизводственногоПроцессаКлиент.ВидыРабочихЦентровПередНачаломДобавления(
		ТекущиеДанные, 
		ВидыРабочихЦентров, 
		Элементы.ВидыРабочихЦентров, 
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ЕстьСинхроннаяЗагрузка,
		Отказ,
		ИспользуетсяПроизводство22 И Режим <> "СпецификацияЗаказа");
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ВидыРабочихЦентров");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//++ НЕ УТКА
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
		ТекущиеДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");
		Если НЕ ТекущиеДанные.Альтернативный Тогда
			ТекущиеДанные.Использовать = Истина;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//++ НЕ УТКА
	Если НЕ ОтменаРедактирования Тогда
		РассчитатьДлительность();
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	РедакторПроизводственногоПроцессаКлиент.ВидыРабочихЦентровОчиститьНастройкиОтбораПоСвойствам(
		Элементы.ВидыРабочихЦентров, Объект.ОтборПоСвойствам);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПослеУдаления(Элемент)
	
	//++ НЕ УТКА
	
	КоллекцияОсновныхВидовРЦ = ВидыРабочихЦентров.ПолучитьЭлементы();
	
	РедакторПроизводственногоПроцессаКлиент.ВидыРабочихЦентровУстановитьИспользование(КоллекцияОсновныхВидовРЦ);
	
	ПриИзмененииСоставаВидовРабочихЦентров();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	Если НЕ ТолькоПросмотр И ДоступностьРеквизитов Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	Если (Поле.Имя = "ВидыРабочихЦентровВидРабочегоЦентра")
		И ЗначениеЗаполнено(ТекущиеДанные.ВидРабочегоЦентра)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВидРабочегоЦентра);
		
	ИначеЕсли (Поле.Имя = "ВидыРабочихЦентровВариантНаладки")
		И ЗначениеЗаполнено(ТекущиеДанные.ВариантНаладки)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВариантНаладки);
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровИспользоватьПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	РедакторПроизводственногоПроцессаКлиент.ВидыРабочихЦентровИспользоватьПриИзменении(ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВидРабочегоЦентраПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ВидыРабочихЦентровВидРабочегоЦентраПриИзмененииНаСервере();
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВариантНаладкиПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ВидыРабочихЦентровВариантНаладкиПриИзмененииНаСервере();
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВремяРаботыПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровЕдиницаИзмеренияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслугиПереработчика

&НаКлиенте
Процедура УслугиПереработчикаПриИзменении(Элемент)
	
	// Очистим старые настройки
	Если ЗначениеЗаполнено(Объект.УдалитьУслугаПереработчика) Тогда
		Объект.УдалитьУслугаПереработчика               = Неопределено;
		Объект.УдалитьХарактеристикаУслугиПереработчика = Неопределено;
		Объект.УдалитьСтатьяКалькуляции                 = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПереработчикаНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УслугиПереработчика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте(Команда)
	
//++ НЕ УТКА
	Если Объект.МаршрутнаяКарта.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать маршрутную карту';
								|en = 'Select a route sheet'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.МаршрутнаяКарта");
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте();
	
	ПриИзмененииСоставаВидовРабочихЦентров();
//-- НЕ УТКА
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
//++ НЕ УТКА
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Виды рабочих центров"".';
								|en = 'No line of the ""Work center types"" table is selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ВидыРабочихЦентров");
		
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "ВидыРабочихЦентров");
//-- НЕ УТКА
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	//++ Устарело_Производство21
	ПеренестиДанныеВСпецификациюЗаказаИЗакрыть();
	//-- Устарело_Производство21
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьАльтернативныйВидРЦ(Команда)
	
//++ НЕ УТКА
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	РедакторПроизводственногоПроцессаКлиент.ДобавитьАльтернативныйВидРЦ(
				ТекущиеДанные, 
				ВидыРабочихЦентров, 
				Элементы.ВидыРабочихЦентров,
				Объект.ПорядокРаботыВидовРабочихЦентров,
				ЕстьСинхроннаяЗагрузка,
				ИспользуетсяПроизводство22);
//-- НЕ УТКА
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоэффициентМаршрутнойКарты(Команда)
	
	//++ НЕ УТКА
	
	Объект.КоэффициентМаршрутнойКарты = КоэффициентМаршрутнойКарты(Объект.Владелец, Объект.МаршрутнаяКарта);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Коэффициент рассчитан';
			|en = 'Factor is calculated'"),
		,
		,
		БиблиотекаКартинок.Информация32);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтандартныеПодсистемы

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

//++ НЕ УТКА
#Область Автовыбор_ОтборПоСвойствам_РасчетКоличества

&НаКлиенте
Функция ПроверитьПолучитьОсновноеИзделиеСпецификации(ОсновноеИзделие = Неопределено)

	ДанныеОсновногоИзделия = ДанныеОсновногоИзделияСпецификации(Объект.Владелец);
	
	Если ДанныеОсновногоИзделия <> Неопределено Тогда
		Если ДанныеОсновногоИзделия.ВариантНазначения = ПредопределенноеЗначение("Перечисление.ВариантыНазначенияСпецификации.ВидНоменклатуры") Тогда
			ОсновноеИзделие = ДанныеОсновногоИзделия.ВидНоменклатуры;
		Иначе
			ОсновноеИзделие = ДанныеОсновногоИзделия.Номенклатура;
		КонецЕсли;
	Иначе
		ОсновноеИзделие = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	
	Если ОсновноеИзделие.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо указать основное изделие спецификации.';
								|en = 'Specify main BOM product.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ОсновноеИзделие;

КонецФункции

&НаСервереБезКонтекста
Функция ДанныеОсновногоИзделияСпецификации(Спецификация)
	
	ОсновноеИзделие = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(Спецификация);
	Возврат ОсновноеИзделие;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, ИмяТЧ)
	
	ОсновноеИзделиеСпецификации = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если ОсновноеИзделиеСпецификации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьДанныеДляРасчетаПоФормуламВХранилище(ИмяТЧ);
	
	Если ТекущиеДанные.СинхроннаяЗагрузка ИЛИ ЕстьСинхроннаяЗагрузка Тогда
		СоставНастроек = Новый Структура("ОтборПоСвойствам");
	Иначе
		СоставНастроек = Неопределено;
	КонецЕсли;
	
	ОтборПоСвойствам = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.ОтборПоСвойствам,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаОтбораПоСвойствам());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьОтборПоСвойствамИРасчетПоФормулам(
						ЭтаФорма,
						ИмяТЧ,
						ОтборПоСвойствам,
						ОсновноеИзделиеСпецификации,
						НЕ ДоступностьРеквизитов,
						СоставНастроек,
						АдресВХранилище);
КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеДляРасчетаПоФормуламВХранилище(ИмяТЧ)
	
	ДанныеДляРасчета = Справочники.РесурсныеСпецификации.ВыгрузитьДанныеДляКонструктораФормул(
		Объект.Владелец,
		ИмяТЧ);
	
	Результат = ПоместитьВоВременноеХранилище(ДанныеДляРасчета, УникальныйИдентификатор);
	Возврат Результат;
	
КонецФункции

#КонецОбласти
//-- НЕ УТКА

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиПодсистемыПроизводство);

	ИспользоватьПланированиеПроизводства = Константы.ИспользоватьПланированиеПроизводства.Получить();
	УправлениеПредприятием = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
	ИспользоватьПараметризациюРесурсныхСпецификаций = 
		ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций");
	
	ХранитьОперацииВРесурсныхСпецификациях = ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях");
	ИспользоватьМаршрутныеКарты            = ПолучитьФункциональнуюОпцию("ИспользоватьМаршрутныеКарты");
	
	СпособПроизводства = Число(Объект.ПроизводствоНаСтороне);
	ПрочитатьРеквизитыПодразделения(Истина);
	
	ДоступноОписаниеПартииВыпуска = УправлениеДаннымиОбИзделиях.ДоступноОписаниеПартииВыпуска();
	ЗаполнитьОписаниеПартииВыпуска();
	
//++ НЕ УТКА
	ИспользоватьВнутреннююПереработку = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннююПереработку");
	РедакторПроизводственногоПроцесса.ЗаполнитьВидыРабочихЦентров(Объект, ВидыРабочихЦентров, ЕстьСинхроннаяЗагрузка);
	ПрочитатьНастройкиМаршрутнойКарты(ЭтотОбъект);
//-- НЕ УТКА
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтотОбъект);
	
	//++ Устарело_Производство21
	ХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(УслугаПереработчика);
	Элементы.ХарактеристикаУслугиПереработчика.Доступность = ХарактеристикиИспользуются;
	//-- Устарело_Производство21
	
	ЗаполнитьСлужебныеРеквизитыУслугиПереработчика();
	
	РедакторПроизводственногоПроцессаКлиентСервер.ЗаполнитьПояснениеОсновныхНастроек(Объект, ЭтотОбъект);
	
	УстановитьДоступностьПоСтатусуСервер();
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// ОтметкаНезаполненного для партии маршрутных листов
	#Область МаксимальноеКоличествоЕдиницПартийИзделияОтметка
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазбиватьМаршрутныеЛисты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
//++ НЕ УТКА
	
	#Область ВидыРабочихЦентров
	
	Если Режим <> "СпецификацияЗаказа" Тогда
		
		УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
			ЭтаФорма,
			"",
			"ВидыРабочихЦентров",
			"ВремяРаботы");
		
	КонецЕсли;
	
	РедакторПроизводственногоПроцесса.УстановитьУсловноеОформлениеВидыРабочихЦентров(
		ЭтотОбъект, "ВидыРабочихЦентров");
	РедакторПроизводственногоПроцесса.УстановитьУсловноеОформлениеРеквизитовПриСинхроннойЗагрузке(
		ЭтотОбъект, "ВидыРабочихЦентров");
	
	#КонецОбласти
	
	// ОтметкаНезаполненного для коэффициента маршрутной карты
	#Область КоэффициентМаршрутнойКарты
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КоэффициентМаршрутнойКарты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МаршрутнаяКарта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
//-- НЕ УТКА
	
	#Область Прочее
	
	//++ Устарело_Производство21
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма,
		"ХарактеристикаУслугиПереработчика",
		"ХарактеристикиИспользуются");
	//-- Устарело_Производство21

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма,
		"УслугиПереработчикаХарактеристика",
		"Объект.УслугиПереработчика.ХарактеристикиИспользуются");
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ДанныеСпецификации = ДанныеРесурснойСпецификации();
	
	Элементы.СпособПроизводства.Видимость =
		(ИспользуетсяПроизводствоНаСтороне2_5
			//++ Устарело_Переработка24
			ИЛИ ИспользуетсяПроизводствоНаСтороне
			//-- Устарело_Переработка24
			ИЛИ Ложь)
		И Не ДанныеСпецификации.МногоэтапныйПроизводственныйПроцесс;
	
	//++ НЕ УТКА
	Если ИспользуетсяПроизводствоНаСтороне
		И (ДанныеСпецификации.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
			ИЛИ Объект.ПроизводствоНаСтороне) Тогда
		Элементы.СпособПроизводства.Видимость = Истина;
	Иначе
		Элементы.СпособПроизводства.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ЗаполнитьВидыРабочихЦентров.Видимость = ИспользоватьМаршрутныеКарты;
	//-- НЕ УТКА
	
	Элементы.НастройкаОтбораПоСвойствамИРасчетаПоФормулам.Видимость = НЕ ИспользуетсяПроизводство21;
	
	Элементы.ГруппаМаршрутнаяКарта.ТолькоПросмотр = ХранитьОперацииВРесурсныхСпецификациях;
	
	Элементы.Организация.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
	Элементы.Партнер.ОграничениеТипа     = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
	
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВводаКоличестваЕдиницПартий(
		ДанныеСпецификации.ВыпускПроизвольнымиПорциями И ДоступноОписаниеПартииВыпуска,
		Элементы.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
	
	Элементы.СтраницаОписание.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Описание);

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы; // ЭлементыФормы
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ Инициализация Тогда
		
		СобственноеПроизводство = НЕ Объект.ПроизводствоНаСтороне;
		
		Элементы.СтраницаПереработка.Видимость = НЕ СобственноеПроизводство;
		
		Элементы.ПланироватьРаботуВидовРабочихЦентров.Видимость = СобственноеПроизводство;
		
		Элементы.ГруппаМаршрутнаяКарта.Видимость = Форма.УправлениеПредприятием
			И Форма.ИспользоватьМаршрутныеКарты
			И СобственноеПроизводство;
			
		Элементы.СтраницыРазбиватьМаршрутныеЛисты.Видимость = Форма.УправлениеПредприятием
			И Форма.ИспользуетсяПроизводство21
			И СобственноеПроизводство;
		
		Элементы.Организация.Видимость = Ложь;
		//++ НЕ УТКА
		Элементы.Организация.Видимость =
			СобственноеПроизводство
			И Форма.ИспользоватьВнутреннююПереработку;
		//-- НЕ УТКА
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПланироватьРаботуВидовРабочихЦентров")
		ИЛИ Инициализация Тогда
		
		РедакторПроизводственногоПроцессаКлиентСервер.НастроитьЭлементыГруппыВидыРабочихЦентров(Объект, Форма);
		
		РедакторПроизводственногоПроцессаКлиентСервер.НастроитьЭлементыГруппыДлительностьЭтапа(Объект, Форма);
		
	КонецЕсли;
	
	//++ НЕ УТКА
	Если СтруктураРеквизитов.Свойство("ВидыРабочихЦентров")
		ИЛИ Инициализация Тогда
			
		РедакторПроизводственногоПроцессаКлиентСервер.НастроитьЭлементПорядокРаботыВидовРабочихЦентров(Объект, Форма);
			
	КонецЕсли;
	//-- НЕ УТКА
	
	Если СтруктураРеквизитов.Свойство("РазбиватьМаршрутныеЛисты")
		ИЛИ Инициализация Тогда
		
		Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.ТолькоПросмотр = 
			НЕ (Форма.РазбиватьМаршрутныеЛисты И НЕ Форма.СпецификацияЗакрыта);
		
	КонецЕсли;
	
	//++ НЕ УТКА
	Если СтруктураРеквизитов.Свойство("МаршрутнаяКарта")
		ИЛИ Инициализация Тогда
		
		РедакторПроизводственногоПроцессаКлиентСервер.НастроитьЭлементыГруппыМаршрутнаяКарта(Объект, Форма);
		
	КонецЕсли;
	//-- НЕ УТКА
	
	// Одновременно производимое количество единиц/партий изделий
	Если СтруктураРеквизитов.Свойство("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий")
		ИЛИ Инициализация Тогда
		
		Элементы.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий.Подсказка =
			УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЕдиницыИзмеренияПартииВыпуска(
				Форма.ОписаниеПартииВыпуска,
				Объект.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
		
	КонецЕсли;
	
	// Страница реквизитов переработчика
	Если СтруктураРеквизитов.Свойство("Переработка")
		ИЛИ Инициализация Тогда
		
		Элементы.ХарактеристикаУслугиПереработчика.Доступность = Форма.ХарактеристикиИспользуются;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоСтатусуСервер()
	
	Если Режим = "СпецификацияЗаказа" ИЛИ ТолькоПросмотр ИЛИ Объект.Владелец.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтатусВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Статус");
	ДоступностьРеквизитов = (СтатусВладельца = Перечисления.СтатусыСпецификаций.ВРазработке);
	СпецификацияЗакрыта = (СтатусВладельца = Перечисления.СтатусыСпецификаций.Закрыта);
	
	Элементы.МаршрутнаяКарта.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.КоэффициентМаршрутнойКарты.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	
	Элементы.РазбиватьМаршрутныеЛисты.ТолькоПросмотр = СпецификацияЗакрыта;
	Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.ТолькоПросмотр = СпецификацияЗакрыта;
	
	РедакторПроизводственногоПроцесса.УстановитьДоступностьЭлементовЭтапаПоСтатусу(ЭтотОбъект, ДоступностьРеквизитов, СпецификацияЗакрыта);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеПартииВыпуска()
	
	Если Режим <> "СпецификацияЗаказа" И ДоступноОписаниеПартииВыпуска Тогда
	
		Если Параметры.Свойство("ОписаниеПартииВыпуска")
			И Параметры.ОписаниеПартииВыпуска <> Неопределено Тогда
			
			ОписаниеПартииВыпуска = Параметры.ОписаниеПартииВыпуска;
			
		Иначе
			
			ОписаниеПартииВыпуска = Справочники.РесурсныеСпецификации.ОписаниеПартииВыпуска(Объект.Владелец);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДанныеРесурснойСпецификации()
	
	Если Режим <> "СпецификацияЗаказа" И ЗначениеЗаполнено(Объект.Владелец) Тогда
		СоставРеквизитов = "ТипПроизводственногоПроцесса,ВыпускПроизвольнымиПорциями,МногоэтапныйПроизводственныйПроцесс";
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Владелец, СоставРеквизитов);
	Иначе
		ЗначенияРеквизитов = Новый Структура("
		|ТипПроизводственногоПроцесса,
		|ВыпускПроизвольнымиПорциями,
		|МногоэтапныйПроизводственныйПроцесс",
		Перечисления.ТипыПроизводственныхПроцессов.Сборка, Ложь, Ложь);
	КонецЕсли;
	
	Возврат ЗначенияРеквизитов;

КонецФункции

&НаСервере
Процедура ПрочитатьРеквизитыПодразделения(ЭтоЧтениеОбъекта)

	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Объект.Подразделение);
	
	//++ НЕ УТКА
	ИнтервалПланирования = ПараметрыПодразделения.ИнтервалПланирования;
	
	Если НЕ ЭтоЧтениеОбъекта Тогда
		
		РедакторПроизводственногоПроцесса.ПроверитьОчиститьВидыРабочихЦентров(Объект, ВидыРабочихЦентров, ЕстьСинхроннаяЗагрузка);
		
	КонецЕсли; 
	//-- НЕ УТКА
	
	РедакторПроизводственногоПроцесса.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
			ИнтервалПланирования,
			Элементы.ЕдиницаИзмеренияПредварительногоБуфера.СписокВыбора);
	
	РедакторПроизводственногоПроцесса.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
			ИнтервалПланирования,
			Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.СписокВыбора);
	
	РедакторПроизводственногоПроцесса.ПроверитьВыборЕдиницыИзмеренияБуферов(Объект, ЭтотОбъект, НЕ ЭтоЧтениеОбъекта);
	
КонецПроцедуры

//++ НЕ УТКА

//++ Устарело_Производство21

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекстПодсказкиСпособПроизводства(Выполняется, ЕстьКорректировкиМатериалов)
	
	ТекстПодсказки = НСтр("ru = 'Изменить способ производства невозможно';
							|en = 'Cannot change the production method'");
	
	Если Выполняется Тогда
		ТекстПодсказки = ТекстПодсказки + Символы.ПС + " - " + НСтр("ru = 'начато выполнение этапа';
																	|en = 'stage execution start'");
	КонецЕсли;
	
	Если ЕстьКорректировкиМатериалов Тогда
		ТекстПодсказки = ТекстПодсказки + Символы.ПС + " - " + НСтр("ru = 'по материалам этапа введены корректировки';
																	|en = 'adjusting entries are entered by the stage materials'");
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции

//-- Устарело_Производство21

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьНастройкиМаршрутнойКарты(Форма)

	ЗаполнитьЗначенияСвойств(
		Форма,
		РедакторПроизводственногоПроцессаКлиентСервер.ПолучитьНастройкиМаршрутнойКарты(Форма.Объект));
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуНезаполненногоДляБуферов(Форма)
	
	ОбязательностьЗаполнения = РедакторПроизводственногоПроцессаКлиентСервер.ОбязательностьЗаполненияЕдиницИзмеренияБуферов(
		Форма.Объект);
	Для каждого КлючИЗначение Из ОбязательностьЗаполнения Цикл
		Форма.Элементы[КлючИЗначение.Ключ].ОтметкаНезаполненного = КлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДлительность()
	
	//++ НЕ УТКА
	
	Если РедакторПроизводственногоПроцессаКлиентСервер.РассчитыватьДлительностьАвтоматически(Объект,
		ИспользуетсяПроизводство21,
		ИспользуетсяПланированиеПоМатериальнымРесурсам,
		ИспользуетсяПланированиеПоПроизводственнымРесурсам) Тогда
		РассчитатьДлительностьНаСервере();
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте()
	
	РедакторПроизводственногоПроцесса.ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте(
		Объект,
		ЭтотОбъект,
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);
	
КонецПроцедуры

&НаСервере
Процедура ВидыРабочихЦентровВидРабочегоЦентраПриИзмененииНаСервере()
	
	ТекущиеДанные = ВидыРабочихЦентров.НайтиПоИдентификатору(Элементы.ВидыРабочихЦентров.ТекущаяСтрока);
	
	ТекущиеДанные.ВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();
	
	РедакторПроизводственногоПроцесса.ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
		Неопределено,
		Неопределено,
		Истина,
		ТекущиеДанные);
	
	РедакторПроизводственногоПроцессаКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);
	
КонецПроцедуры
 
&НаСервере
Процедура ВидыРабочихЦентровВариантНаладкиПриИзмененииНаСервере()
	
	ТекущиеДанные = ВидыРабочихЦентров.НайтиПоИдентификатору(Элементы.ВидыРабочихЦентров.ТекущаяСтрока);
	
	РедакторПроизводственногоПроцесса.ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
		Неопределено,
		Неопределено,
		Истина,
		ТекущиеДанные);
	
	РедакторПроизводственногоПроцессаКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);
	
КонецПроцедуры

&НаСервере
Процедура МаршрутнаяКартаПриИзмененииНаСервере()
	
	ПрочитатьНастройкиМаршрутнойКарты(ЭтаФорма);
	
	Если РассчитыватьКоэффициент Тогда
		
		Объект.КоэффициентМаршрутнойКарты = КоэффициентМаршрутнойКарты(Объект.Владелец, Объект.МаршрутнаяКарта);
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Объект.МаршрутнаяКарта) Тогда
			Объект.КоэффициентМаршрутнойКарты = 0;
		ИначеЕсли Объект.КоэффициентМаршрутнойКарты = 0 Тогда
			Объект.КоэффициентМаршрутнойКарты = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "МаршрутнаяКарта");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоэффициентМаршрутнойКарты(РесурснаяСпецификация, МаршрутнаяКарта)
	
	ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(
		РесурснаяСпецификация);
	
	Возврат Справочники.МаршрутныеКарты.КоэффициентМаршрутнойКартыДляСпецификации(
		ДанныеСпецификации, МаршрутнаяКарта);
	
КонецФункции

&НаСервере
Процедура РассчитатьДлительностьНаСервере()
	
	РедакторПроизводственногоПроцесса.РассчитатьДлительностьЭтапа(Объект, ВидыРабочихЦентров);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПересчитатьВремяРаботы(ТекущиеДанные)
	
	РедакторПроизводственногоПроцессаКлиент.ВидыРабочихЦентровПересчитатьВремяРаботы(
			ТекущиеДанные,
			ВидыРабочихЦентров,
			Объект.ПорядокРаботыВидовРабочихЦентров,
			ЕстьСинхроннаяЗагрузка,
			ИспользуетсяПроизводство22,
			Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСоставаВидовРабочихЦентров()
	
	РедакторПроизводственногоПроцессаКлиент.ПриИзмененииСоставаВидовРабочихЦентров(
		ВидыРабочихЦентров, 
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ИспользуетсяПроизводство22 И Режим <> "СпецификацияЗаказа");
	
	РассчитатьДлительность();
	
	РедакторПроизводственногоПроцессаКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ВидыРабочихЦентров");
	
КонецПроцедуры

//-- НЕ УТКА

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыУслугиПереработчика()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.УслугиПереработчика, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()

	ПрочитатьРеквизитыПодразделения(Ложь);

КонецПроцедуры

//++ Устарело_Производство21

&НаКлиенте
Процедура ВопросПередЗакрытием(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПеренестиДанныеВСпецификациюЗаказаИЗакрыть();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеЭтапа()

	//++ НЕ УТКА
	РедакторПроизводственногоПроцесса.СохранитьВидыРабочихЦентров(
				ВидыРабочихЦентров, 
				Объект.ПланироватьРаботуВидовРабочихЦентров,
				Объект.ВидыРабочихЦентров,
				Объект.АльтернативныеВидыРабочихЦентров);
	//-- НЕ УТКА
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ЭтапОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат ЭтапОбъект.ПроверитьЗаполнениеРеквизитов(Ложь);
	
КонецФункции

&НаСервере
Функция ДанныеЭтапаВХранилище()
	
	//++ НЕ УТКА
	РедакторПроизводственногоПроцесса.СохранитьВидыРабочихЦентров(
				ВидыРабочихЦентров, 
				Объект.ПланироватьРаботуВидовРабочихЦентров,
				Объект.ВидыРабочихЦентров,
				Объект.АльтернативныеВидыРабочихЦентров);
	//-- НЕ УТКА
	
	СвойстваЭтапа = Новый Структура;
	
	СвойстваЭтапа.Вставить("Подразделение",                          Объект.Подразделение);
	СвойстваЭтапа.Вставить("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий",         Объект.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
	СвойстваЭтапа.Вставить("МаршрутнаяКарта",                        Объект.МаршрутнаяКарта);
	СвойстваЭтапа.Вставить("ПланироватьРаботуВидовРабочихЦентров",   Объект.ПланироватьРаботуВидовРабочихЦентров);
	СвойстваЭтапа.Вставить("Описание",                               Объект.Описание);
	СвойстваЭтапа.Вставить("ДлительностьЭтапа",                      Объект.ДлительностьЭтапа);
	СвойстваЭтапа.Вставить("ЕдиницаИзмеренияДлительностиЭтапа",      Объект.ЕдиницаИзмеренияДлительностиЭтапа);
	СвойстваЭтапа.Вставить("ПредварительныйБуфер",                   Объект.ПредварительныйБуфер);
	СвойстваЭтапа.Вставить("ЗавершающийБуфер",                       Объект.ЗавершающийБуфер);
	СвойстваЭтапа.Вставить("ЕдиницаИзмеренияПредварительногоБуфера", Объект.ЕдиницаИзмеренияПредварительногоБуфера);
	СвойстваЭтапа.Вставить("ЕдиницаИзмеренияЗавершающегоБуфера",     Объект.ЕдиницаИзмеренияЗавершающегоБуфера);
	СвойстваЭтапа.Вставить("НаименованиеЭтапа",                      Объект.Наименование);
	СвойстваЭтапа.Вставить("Непрерывный",                            Объект.Непрерывный);
	
	СвойстваЭтапа.Вставить("ПроизводствоНаСтороне",                  Объект.ПроизводствоНаСтороне);
	СвойстваЭтапа.Вставить("Партнер",                                Объект.Партнер);
	СвойстваЭтапа.Вставить("ГрафикРаботыПартнера",                   Объект.ГрафикРаботыПартнера);
	
	СвойстваЭтапа.Вставить("УслугаПереработчика",                    УслугаПереработчика);
	СвойстваЭтапа.Вставить("ХарактеристикаУслугиПереработчика",      ХарактеристикаУслугиПереработчика);
	СвойстваЭтапа.Вставить("СтатьяКалькуляции",                      СтатьяКалькуляции);
	 
	СвойстваЭтапа.Вставить("ВидыРабочихЦентров",                     Объект.ВидыРабочихЦентров.Выгрузить());
	СвойстваЭтапа.Вставить("АльтернативныеВидыРабочихЦентров",       Объект.АльтернативныеВидыРабочихЦентров.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СвойстваЭтапа, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПеренестиДанныеВСпецификациюЗаказаИЗакрыть()
	
	Если Модифицированность Тогда
		
		ОчиститьСообщения();
		
		Если НЕ ПроверитьЗаполнениеЭтапа() Тогда
			Возврат;
		КонецЕсли; 
		
		Модифицированность = Ложь;
			
		ВыбранноеЗначение = Новый Структура("ВыполняемаяОперация, АдресВХранилище", "РедактированиеЭтапаПроизводства", ДанныеЭтапаВХранилище());
			
		ОповеститьОВыборе(ВыбранноеЗначение);
		
	Иначе
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

//-- Устарело_Производство21

#КонецОбласти

#КонецОбласти
