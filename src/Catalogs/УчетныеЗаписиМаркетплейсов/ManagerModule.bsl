
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает хеш настроек для переданной структуры настроек.
//
// Параметры:
//   СтруктураНастроек - Структура - структура с ключами настроек: 
//     * ВидМаркетплейса      - ПеречислениеСсылка.ВидыМаркетплейсов - вид маркетплейса для получения учетной записи;
//     * Организация          - СправочникСсылка.Организации - организация;
//     * ИдентификаторКлиента - Строка - идентификатор клиента маркетплейса;
//     * ИсточникКатегории    - ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категорий;
//     * ВалютаУчета          - СправочникСсылка.Валюты - валюта учета;
//     * ВидыЦен              - ТаблицаЗначений - используемые виды цен:
//       ** ИмяНастройки        - Строка - имя настройки;
//       ** ВидЦены             - СправочникСсылка.ВидыЦен - вид цены.
// 
// Возвращаемое значение:
//   Строка - строковое представление хеш суммы.
//
Функция ПолучитьХешНастроек(СтруктураНастроек) Экспорт
	
	Возврат ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьХешСтроки(ЗначениеВСтрокуВнутр(СтруктураНастроек));
	
КонецФункции

// Возвращает хеш настроек для учетной записи.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись, для которой необходимо вернуть хеш настроек.
// 
// Возвращаемое значение:
//   Строка - строковое представление хеш суммы.
//
Функция ПолучитьХешНастроекПоСсылке(УчетнаяЗаписьМаркетплейса) Экспорт 
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	СтруктураНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗаписьМаркетплейса, СтрокаИменНастроекУчетнойЗаписи());
	
	СтруктураНастроек.Вставить("ВидыЦен",                 СтруктураНастроек.ВидыЦен.Выгрузить());
	СтруктураНастроек.Вставить("ДополнительныеНастройки", СтруктураНастроек.ДополнительныеНастройки.Выгрузить());
	
	Возврат ПолучитьХешНастроек(СтруктураНастроек);
	
КонецФункции

// Возвращает доступную учетную запись в случае, если она является единственной в справочнике.
// В случае отсутствия записей или наличия более одной возвращается пустая ссылка.
//
// Параметры:
//   ВидМаркетплейса - ПеречислениеСсылка.ВидыМаркетплейсов - вид маркетплейса для получения учетной записи.
//
// Возвращаемое значение:
//   СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись по-умолчанию.
//
Функция ОсновнаяУчетнаяЗапись(ВидМаркетплейса) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	УчетныеЗаписиМаркетплейсов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
		|ГДЕ
		|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = &ВидМаркетплейса
		|	И УчетныеЗаписиМаркетплейсов.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ВидМаркетплейса", ВидМаркетплейса);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ПредопределенноеЗначение("Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка");
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 2 Тогда
		Возврат ПредопределенноеЗначение("Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка");
	КонецЕсли;

	Выборка.Следующий();
	Возврат Выборка.Ссылка;

КонецФункции

// Возвращает структуру с настройками учетной записи.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись для получения настроек.
//   ТолькоОсновные            - Булево - признак получения только значений основных реквизитов учетной записи.
// 
// Возвращаемое значение:
//   Структура - настройки учетной записи из СтрокаИменНастроекУчетнойЗаписи() и иные настройки:
//     * ВидМаркетплейса                           - ПеречислениеСсылка.ВидыМаркетплейсов - вид маркетплейса;
//     * Организация                               - СправочникСсылка.Организации - организация;
//     * ИдентификаторКлиента                      - Строка - идентификатор клиента;
//     * ИсточникКатегории                         - ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категории;
//     * ВалютаУчета                               - СправочникСсылка.Валюты - валюта учета;
//     * ВидыЦен                                   - Структура - используемые виды цен, где ключ - имя настройки, значение - вид цены;
//     * СхемаРаботы                               - ПеречислениеСсылка.СхемыРаботыТорговыхПлощадок - схема работы;
//     * Партнер                                   - СправочникСсылка.Партнеры - партнер;
//     * Контрагент                                - СправочникСсылка.Контрагенты - контрагент;
//     * Соглашение                                - СправочникСсылка.СоглашенияСКлиентами - соглашение;
//     * ДоговорПродажиЧерезСкладыТорговойПлощадки - СправочникСсылка.ДоговорыКонтрагентов - договор продажи через склады торговой площадки;
//     * ДоговорПродажиЧерезСкладыСобственные      - СправочникСсылка.ДоговорыКонтрагентов - договор продажи через склады собственные;
//     * ПродажиРазделяютсяПоДоговорам             - Булево - признак разделения продаж со складов торговой площадки и собственных складов;
//     * ДополнительныеНастройки                   - Соответствие Из КлючИЗначение - настройки из табличной части ДополнительныеНастройки,
//                                                     см. ОписаниеДополнительныхНастроекУчетнойЗаписи().
//
Функция НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, ТолькоОсновные = Ложь) Экспорт

	ЗначенияНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗаписьМаркетплейса, СтрокаИменНастроекУчетнойЗаписи());

	ЗначенияНастроек.Вставить("ПродажиРазделяютсяПоДоговорам",
		ЗначенияНастроек.ДоговорПродажиЧерезСкладыТорговойПлощадки <> ЗначенияНастроек.ДоговорПродажиЧерезСкладыСобственные);

	ВидыЦен = Новый Структура;
	ДополнительныеНастройки = Новый Структура;

	Если Не ТолькоОсновные Тогда
		ОписаниеВидовЦен = ОписаниеВидовЦенУчетнойЗаписи(ЗначенияНастроек.ВидМаркетплейса);

		Для Каждого ОписаниеВидаЦен Из ОписаниеВидовЦен Цикл
			ВидыЦен.Вставить(ОписаниеВидаЦен.Ключ, ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
		КонецЦикла;

		Если ЗначенияНастроек.ВидыЦен <> Неопределено Тогда
			Выборка = ЗначенияНастроек.ВидыЦен.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ВидыЦен.Свойство(Выборка.ИмяНастройки) Тогда
					ВидыЦен[Выборка.ИмяНастройки] = Выборка.ВидЦены;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ДополнительныеНастройки = ОписаниеДополнительныхНастроекУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	КонецЕсли;

	ЗначенияНастроек.ВидыЦен = ВидыЦен;
	ЗначенияНастроек.Вставить("ДополнительныеНастройки", ДополнительныеНастройки);

	Возврат ЗначенияНастроек;

КонецФункции

// Возвращает для учетной записи признак доступности работы с остатками на торговой площадке.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись для получения настроек.
// 
// Возвращаемое значение:
//   Булево - признак доступности работы с остатками на торговой площадке.
//
Функция ДоступнаРаботаСОстаткамиДляУчетнойЗаписи(УчетнаяЗаписьМаркетплейса) Экспорт

	РеквизитыУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗаписьМаркетплейса, "ВидМаркетплейса, СхемаРаботы");

	Возврат ДоступнаРаботаСОстатками(РеквизитыУчетнойЗаписи.ВидМаркетплейса, РеквизитыУчетнойЗаписи.СхемаРаботы);

КонецФункции

// Возвращает для схемы работы признак доступности работы с остатками на торговой площадке по виду маркетплейса.
//
// Параметры:
//   ВидМаркетплейса - ПеречислениеСсылка.ВидыМаркетплейсов           - вид маркетплейса для проверки признака;
//   СхемаРаботы     - ПеречислениеСсылка.СхемыРаботыТорговыхПлощадок - схема работы для проверки признака.
// 
// Возвращаемое значение:
//   Булево - признак доступности работы с остатками на торговой площадке.
//
Функция ДоступнаРаботаСОстатками(ВидМаркетплейса, СхемаРаботы) Экспорт

	ДоступнаРаботаСОстатками = Ложь;

	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		ДоступнаРаботаСОстатками = (СхемаРаботы = ПредопределенноеЗначение("Перечисление.СхемыРаботыТорговыхПлощадок.FBS")
			Или СхемаРаботы = ПредопределенноеЗначение("Перечисление.СхемыРаботыТорговыхПлощадок.DBS"));
	ИначеЕсли ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет") Тогда
		ДоступнаРаботаСОстатками = (СхемаРаботы = ПредопределенноеЗначение("Перечисление.СхемыРаботыТорговыхПлощадок.FBS")
			Или СхемаРаботы = ПредопределенноеЗначение("Перечисление.СхемыРаботыТорговыхПлощадок.Express"));
	КонецЕсли;

	Возврат ДоступнаРаботаСОстатками;

КонецФункции

// Возвращает информацию по видам цен учетной записи.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись, для которой необходимо вернуть хеш настроек.
// 
// Возвращаемое значение:
//   Структура - ключом является идентификатор вида цены на маркетплейсе, значением информация по виду цены.
//
Функция ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса) Экспорт

	ВидыЦенУчетнойЗаписи = Новый Структура;
	
	НастройкиУчетнойЗаписи = НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	ВидыЦен = НастройкиУчетнойЗаписи.ВидыЦен;
	ОписаниеВидовЦен = ОписаниеВидовЦенУчетнойЗаписи(НастройкиУчетнойЗаписи.ВидМаркетплейса);

	Для Каждого ДанныеВидаЦен Из ВидыЦен Цикл
		ОписаниеВидаЦен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеВидовЦен, ДанныеВидаЦен.Ключ, Неопределено);
		ТребуетсяПроверкаЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеВидаЦен, "ПроверкаЗаполнения", Ложь);
		ПредставлениеВидаЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеВидаЦен, "ПредставлениеВидаЦены", "");

		СтруктураДанныхВидаЦен = Новый Структура;
		СтруктураДанныхВидаЦен.Вставить("ВидЦены", ДанныеВидаЦен.Значение);
		СтруктураДанныхВидаЦен.Вставить("ПроверкаЗаполнения", ТребуетсяПроверкаЗаполнения);
		СтруктураДанныхВидаЦен.Вставить("ПредставлениеВидаЦены", ПредставлениеВидаЦены);

		ВидыЦенУчетнойЗаписи.Вставить(ДанныеВидаЦен.Ключ, СтруктураДанныхВидаЦен);
	КонецЦикла;

	Возврат ВидыЦенУчетнойЗаписи;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет указать объекты метаданных, для которых задана логика ограничения доступа к данным.
//
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		СтандартнаяОбработка = Ложь;
		
		Поля.Добавить("Ссылка");
		Поля.Добавить("ВидМаркетплейса");
		Поля.Добавить("Наименование");
		Поля.Добавить("СхемаРаботы");
		Поля.Добавить("ИдентификаторКлиента");
	#КонецЕсли
								
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)

	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		СтандартнаяОбработка = Ложь;
		Представление        = Данные.Наименование;
		
		Если Данные.ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет Тогда
			ПредставлениеСхемыРаботы = Перечисления.СхемыРаботыТорговыхПлощадок.ПредставлениеСхемыРаботы(Данные.СхемаРаботы, Данные.Ссылка);

			Представление = Представление
							+ ?(ЗначениеЗаполнено(Данные.СхемаРаботы), ", " + ПредставлениеСхемыРаботы, "")
							+ ?(ЗначениеЗаполнено(Данные.ИдентификаторКлиента),
								" " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(номер магазина: %1)';
																									|en = '(store number: %1)'"), Данные.ИдентификаторКлиента),
								"");
		КонецЕсли;
	#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру с именами видов цен и признаком проверки заполнения цены.
//
// Возвращаемое значение:
//  Структура - где ключ - имя настройки с видом цен, значение - структура с ключами:
//								ПредставлениеВидаЦены - Строка - представление вида цены в форме настроек синхронизации,
//								ПроверкаЗаполнения - Булево - признак необходимости проверки заполнения цены.
//
Функция ОписаниеВидовЦенУчетнойЗаписи(ВидМаркетплейса)

	ОписаниеВидовЦен = Новый Структура;
	
	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon")
		Или Не ЗначениеЗаполнено(ВидМаркетплейса) Тогда

		ТипыЦен = ИнтеграцияСМаркетплейсамиСерверЛокализация.ТипыЦенOzon(Истина, Ложь);
		Для Каждого ТипЦен Из ТипыЦен Цикл
			ДанныеВидаЦены = Новый Структура("ПредставлениеВидаЦены, ПроверкаЗаполнения",
					ТипЦен.Наименование, ТипЦен.ОбязательноеЗаполнение);
			ОписаниеВидовЦен.Вставить(ТипЦен.Идентификатор, ДанныеВидаЦены);
		КонецЦикла;
		
	КонецЕсли;

	Возврат ОписаниеВидовЦен;

КонецФункции

// Возвращает соответствие с идентификаторами настроек и их значениями.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
// Возвращаемое значение:
//   Соответствие Из КлючИЗначение - где ключ - идентификатор настройки, значение - произвольное значение, ограниченное 
//     типом реквизитов Справочники.УчетныеЗаписиМаркетплейсов.ТабличныеЧасти.ДополнительныеНастройки.ЗначениеНастройки
//     и Справочники.УчетныеЗаписиМаркетплейсов.ТабличныеЧасти.ДополнительныеНастройки.ЗначениеНастройкиСтрока.
//
Функция ОписаниеДополнительныхНастроекУчетнойЗаписи(УчетнаяЗаписьМаркетплейса)

	ОписаниеНастроек = Новый Соответствие;
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		ДополнительныеНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ДополнительныеНастройки");	// РезультатЗапроса
		ВыборкаНастроек = ДополнительныеНастройки.Выбрать();	// ВыборкаИзРезультатаЗапроса
		Пока ВыборкаНастроек.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаНастроек.ЗначениеНастройкиСсылка) Тогда
				ЗначениеНастройки = ВыборкаНастроек.ЗначениеНастройкиСсылка
			ИначеЕсли Не ПустаяСтрока(ВыборкаНастроек.ЗначениеНастройкиСтрока) Тогда
				ЗначениеНастройки = ВыборкаНастроек.ЗначениеНастройкиСтрока;
			Иначе
				ЗначениеНастройки = ВыборкаНастроек.ЗначениеНастройки;
			КонецЕсли;

			ОписаниеНастроек.Вставить(ВыборкаНастроек.ИдентификаторНастройки, ЗначениеНастройки);
		КонецЦикла;
	КонецЕсли;

	Возврат ОписаниеНастроек;

КонецФункции

// Возвращает список реквизитов настроек учетной записи маркетплейса.
//
// Возвращаемое значение:
//   Строка - список реквизитов, разделенных символом ",".
//
Функция СтрокаИменНастроекУчетнойЗаписи()
	
	СтрокаИменНастроекУчетнойЗаписи =
		"ВидМаркетплейса, Организация, ИдентификаторКлиента, ИсточникКатегории, ВалютаУчета, ВидыЦен, СхемаРаботы,
		|Партнер, Контрагент, Соглашение, ДоговорПродажиЧерезСкладыТорговойПлощадки, ДоговорПродажиЧерезСкладыСобственные, ДополнительныеНастройки";
		
	Возврат СтрокаИменНастроекУчетнойЗаписи;
	
КонецФункции

// Возвращает виды цен учетных записей маркетплейса Ozon.
// 
// Возвращаемое значение:
//   Массив Из СправочникСсылка.ВидыЦен - список видов цен учетных записей маркетплейса Ozon.
//
Функция ВидыЦенУчетныхЗаписейМаркетплейсаOzon() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
    	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    	|	ВидыЦенУчетныхЗаписей.ВидЦены КАК ВидЦены
    	|ИЗ
    	|	Справочник.УчетныеЗаписиМаркетплейсов.ВидыЦен КАК ВидыЦенУчетныхЗаписей
    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
    	|		ПО ВидыЦенУчетныхЗаписей.Ссылка = УчетныеЗаписиМаркетплейсов.Ссылка
    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК СправочникВидыЦен
    	|		ПО (СправочникВидыЦен.Ссылка = ВидыЦенУчетныхЗаписей.ВидЦены)
    	|ГДЕ
    	|	НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления
    	|	И УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
    	|	И НЕ ВидыЦенУчетныхЗаписей.ВидЦены = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка)
    	|	И НЕ СправочникВидыЦен.ПометкаУдаления
    	|
    	|ОБЪЕДИНИТЬ ВСЕ
    	|
    	|ВЫБРАТЬ РАЗЛИЧНЫЕ
    	|	ВидыЦен.Ссылка
    	|ИЗ
    	|	Справочник.ВидыЦен КАК ВидыЦен
    	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов.ВидыЦен КАК ВидыЦенУчетныхЗаписей
    	|		ПО ВидыЦен.Ссылка = ВидыЦенУчетныхЗаписей.ВидЦены
    	|ГДЕ
    	|	НЕ ВидыЦен.ПометкаУдаления
    	|	И ВидыЦен.СпособЗаданияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияЦен.ЗагружаетсяСOzon)
    	|	И ВидыЦенУчетныхЗаписей.ВидЦены ЕСТЬ NULL";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Выгрузка = Результат.Выгрузить();
	Возврат Выгрузка.ВыгрузитьКолонку("ВидЦены");

КонецФункции

// Возвращает количество подключений к площадке маркетплейса.
//
// Параметры:
//   ВидМаркетплейса - ПеречислениеСсылка.ВидыМаркетплейсов - вид маркетплейса.
// 
// Возвращаемое значение:
//   Число - количество подключений.
//
Функция ПолучитьКоличествоПодключений(ВидМаркетплейса) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидМаркетплейса", ВидМаркетплейса);
	Запрос.Текст =
    	"ВЫБРАТЬ
    	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УчетныеЗаписиМаркетплейсов.Ссылка), 0) КАК КоличествоПодключений
    	|ИЗ
    	|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
    	|ГДЕ
    	|	НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления
    	|	И УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = &ВидМаркетплейса";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();

	Возврат ВыборкаДетальныеЗаписи.КоличествоПодключений;

КонецФункции

// Изменяет признак контроля обновления данных торговой площадки.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса         - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//	 НеОбновлятьДанныеТорговойПлощадки - Булево - Истина, если необходимо запретить обновление данных торговой площадки.
// 
// Возвращаемое значение:
//   Булево - результат выполнения действия.
//
Функция ИзменитьКонтрольОбновленияДанныхТорговойПлощадки(УчетнаяЗаписьМаркетплейса, НеОбновлятьДанныеТорговойПлощадки) Экспорт

	Результат = Истина;
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.УчетныеЗаписиМаркетплейсов");
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", УчетнаяЗаписьМаркетплейса);
			БлокировкаДанных.Заблокировать();
			
			Объект = УчетнаяЗаписьМаркетплейса.ПолучитьОбъект();
			Если Объект = Неопределено Тогда 
				Результат = Ложь;
				
			Иначе
				ЗаблокироватьДанныеДляРедактирования(УчетнаяЗаписьМаркетплейса);
				
				Объект.НеОбновлятьДанныеТорговойПлощадки = НеОбновлятьДанныеТорговойПлощадки;
				Объект.Записать();
			КонецЕсли;
                
            ЗафиксироватьТранзакцию();

		Исключение   
			ОтменитьТранзакцию();
			Результат = Ложь;
			
			ШаблонСообщения = НСтр("ru = 'Ошибка изменения контроля обновления данных торговой площадки по причине: %1';
									|en = 'An error occurred while changing the control of the trading platform data update due to: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает признак контроля обновления данных торговой площадки.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   Булево - Истина, если обновление данных торговой площадки разрешено;
//		      Ложь - обновление данных запрещено.
//
Функция ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗаписьМаркетплейса) Экспорт
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "НеОбновлятьДанныеТорговойПлощадки");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик                 = Обработчики.Добавить();
	Обработчик.Процедура       = "Справочники.УчетныеЗаписиМаркетплейсов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.14.15";   
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("65c1b062-d0a0-404f-be16-5c9220c979e3");  
	Обработчик.РежимВыполнения = "Отложенно";  
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.УчетныеЗаписиМаркетплейсов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";   
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий     = НСтр("ru = 'Сохраняет ключи доступа в новом формате, переносит значения организации и идентификатора кампании в данные магазина (в соответствующий элемент справочника ""Учетные записи маркетплейсов""), получает все магазины с Маркета, зарегистрированные для текущего аккаунта.
											|Удаляет регламентные задания без параметров, потерявшие актуальность после перехода на работу с несколькими магазинами.';
											|en = 'Saves access keys in the new format, transfers company and campaign ID values to store data (to a respective item of the ""Marketplace accounts"" catalog), receives all stores registered for the current account from the trading platform.
											|Deletes scheduled jobs without parameters that became obsolete after switching to operations with multiple stores.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.УчетныеЗаписиМаркетплейсов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегламентныеЗадания.ВыгрузкаОстатковТоваровЯндексМаркет.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегламентныеЗадания.ВыгрузкаУстановленныхЦенЯндексМаркет.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегламентныеЗадания.ЗагрузкаРекомендованныхЦенЯндексМаркет.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегламентныеЗадания.ОтправкаНаМодерациюСвязейТоваровЯндексМаркет.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегламентныеЗадания.ПолучениеРекомендацийПоСклейкеТовараЯндексМаркет.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегламентныеЗадания.ПолучениеСтатусовМодерацииТоваровЯндексМаркет.ПолноеИмя());

	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");

	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.УчетныеЗаписиМаркетплейсов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры  

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Владелец = "ЯндексМаркетВитринаПлюсФулфилмент";
	ДанныеАвторизации = "organization_id";
	
	Организация =
	ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации, Ложь);
	
	Если ЗначениеЗаполнено(Организация) И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда 
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры,Организация);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
			
	ПолноеИмяОбъекта = "Справочник.Организации";
	Если Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;  
	
	СсылкиДляОбработки =  ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Если СсылкиДляОбработки.Следующий() Тогда
		Организация = СсылкиДляОбработки.Ссылка;
	КонецЕсли;
	
	Если Организация<>Неопределено Тогда
		
		ИдентификаторОрганизации = Строка(Организация.УникальныйИдентификатор());
		Владелец = ИдентификаторОрганизации + "/ЯндексМаркетВитринаПлюсФулфилмент";
		ДанныеАвторизации = "access_token, access_token_expires, refresh_token, campaign_id";
		
		ТекущиеДанные =
			ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации, Ложь);
		
	КонецЕсли;
	
	Если ТекущиеДанные<>Неопределено Тогда
		
		ИдентификаторКампании = ТекущиеДанные.campaign_id;
		КлючДоступа = ТекущиеДанные.access_token;
		КлючОбновленияДоступа = ТекущиеДанные.refresh_token;
		ДатаДействияКлючаДоступа = ТекущиеДанные.access_token_expires;
		
		Аккаунт = ИнтеграцияСЯндексМаркетСервер.ПолучитьДанныеЛогина(КлючДоступа);
		
		Если Аккаунт<>Неопределено Тогда
			Результат = ИнтеграцияСЯндексМаркетСервер.УстановитьНастройкиАвторизации(ТекущиеДанные, Аккаунт);
		КонецЕсли;
		
		Если Результат = Истина Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	УчетныеЗаписиМаркетплейсов.Ссылка КАК УчетнаяЗапись,
			|	УчетныеЗаписиМаркетплейсов.ИдентификаторМагазина КАК ИдентификаторМагазина
			|ИЗ
			|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
			|ГДЕ
			|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
			|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления
			|	И УчетныеЗаписиМаркетплейсов.ИдентификаторМагазина = """"";
			Результат = Запрос.Выполнить().Выбрать();
			
			Если  Результат.Следующий() Тогда
				УчетнаяЗаписьПоУмолчанию                       = Результат.УчетнаяЗапись.ПолучитьОбъект();
			Иначе  
				УчетнаяЗаписьПоУмолчанию = Справочники.УчетныеЗаписиМаркетплейсов.СоздатьЭлемент(); 
			КонецЕсли;    
			
			УчетнаяЗаписьПоУмолчанию.ВидМаркетплейса       = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет;
			УчетнаяЗаписьПоУмолчанию.Организация           = Организация;
			УчетнаяЗаписьПоУмолчанию.Наименование          = ИдентификаторКампании;
			УчетнаяЗаписьПоУмолчанию.ИдентификаторАккаунта = Аккаунт.Идентификатор;
			УчетнаяЗаписьПоУмолчанию.ИдентификаторМагазина = ИдентификаторКампании;
			УчетнаяЗаписьПоУмолчанию.Записать();
			
			Отказ = Ложь;
			
			Попытка
				
				Магазины = ИнтеграцияСЯндексМаркетСервер.ПолучитьМагазиныЯндексМаркетИзСервиса(ТекущиеДанные, Отказ);
				
				Если Не Отказ Тогда
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	УчетныеЗаписиМаркетплейсов.Ссылка КАК Ссылка,
					|	УчетныеЗаписиМаркетплейсов.ИдентификаторАккаунта КАК ИдентификаторАккаунта,
					|	УчетныеЗаписиМаркетплейсов.ИдентификаторМагазина КАК ИдентификаторМагазина,
					|	ЛОЖЬ КАК Активность
					|ИЗ
					|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
					|ГДЕ
					|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
					|	И УчетныеЗаписиМаркетплейсов.ИдентификаторАккаунта = &ИдентификаторАккаунта";
					
					Запрос.УстановитьПараметр("ИдентификаторАккаунта", Аккаунт.Идентификатор);
					
					УчетныеЗаписи = Запрос.Выполнить().Выгрузить();
					
					Для Каждого ЭлементКоллекции Из Магазины.campaigns Цикл
						СтрокаТаблицыЗначений = УчетныеЗаписи.Найти(Формат(ЭлементКоллекции.id, "ЧН=; ЧГ=0"), "ИдентификаторМагазина");
						Если СтрокаТаблицыЗначений = Неопределено Тогда
							НоваяУчетнаяЗапись                       = Справочники.УчетныеЗаписиМаркетплейсов.СоздатьЭлемент();
							НоваяУчетнаяЗапись.Наименование          = ЭлементКоллекции.domain;
							НоваяУчетнаяЗапись.ВидМаркетплейса       = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет;
							НоваяУчетнаяЗапись.ИдентификаторАккаунта = Аккаунт.Идентификатор;
							НоваяУчетнаяЗапись.ИдентификаторКабинета = Формат(ЭлементКоллекции.business.id, "ЧН=; ЧГ=0");
							НоваяУчетнаяЗапись.ИдентификаторМагазина = Формат(ЭлементКоллекции.id, "ЧН=; ЧГ=0");
							НоваяУчетнаяЗапись.ПометкаУдаления       = Ложь;
							НоваяУчетнаяЗапись.Записать();
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			Исключение
				ЗаписьЖурналаРегистрации(ИнтеграцияСЯндексМаркетСервер.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;  
			
	МассивРегламентныхЗаданий = Новый Массив;
	МассивРегламентныхЗаданий.Добавить(Метаданные.РегламентныеЗадания.ВыгрузкаОстатковТоваровЯндексМаркет);
	МассивРегламентныхЗаданий.Добавить(Метаданные.РегламентныеЗадания.ВыгрузкаУстановленныхЦенЯндексМаркет);
	МассивРегламентныхЗаданий.Добавить(Метаданные.РегламентныеЗадания.ЗагрузкаРекомендованныхЦенЯндексМаркет);
	МассивРегламентныхЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОтправкаНаМодерациюСвязейТоваровЯндексМаркет);
	МассивРегламентныхЗаданий.Добавить(Метаданные.РегламентныеЗадания.ПолучениеРекомендацийПоСклейкеТовараЯндексМаркет);
	МассивРегламентныхЗаданий.Добавить(Метаданные.РегламентныеЗадания.ПолучениеСтатусовМодерацииТоваровЯндексМаркет);

	Для Каждого ВидРегламентногоЗадания Из МассивРегламентныхЗаданий Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", ВидРегламентногоЗадания);
		Результат = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		Для Каждого РегламентноеЗадание Из Результат Цикл
			Если РегламентноеЗадание.Параметры.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;

			Попытка
				РегламентныеЗаданияСервер.УдалитьЗадание(РегламентноеЗадание.УникальныйИдентификатор);
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обновление информационной базы';
						|en = 'Infobase update'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЦикла;
	КонецЦикла; 
	
	ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Организация);
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегламентнымиЗаданиями

// Удаляет регламентное задание по переданному ключу.
//
// Параметры:
//   Ключ - Строка - Ключ регламентного задания.
//
Процедура УдалитьРегламентноеЗадание(Ключ) Экспорт

	Отбор = Новый Структура("Ключ", Ключ);
	РезультатПоиска = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Для Каждого РегламентноеЗадание Из РезультатПоиска Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(РегламентноеЗадание);
	КонецЦикла;

КонецПроцедуры

// Изменяет использование регламентного задания.
//
// Параметры:
//   Ключ           - Строка - ключ регламентного задания.
//   Использование  - Булево - признак использования, который нужно установить регламентному заданию, если оно не удаляется.
//
Процедура УстановитьИспользованиеРегламентногоЗадания(Ключ, Использование) Экспорт

	Отбор = Новый Структура("Ключ, Использование", Ключ, НЕ Использование);

	РезультатПоиска = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Для Каждого РегламентноеЗадание Из РезультатПоиска Цикл
		Параметры = Новый Структура();
		Параметры.Вставить("Использование", Использование);
		РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание, Параметры);
	КонецЦикла;

КонецПроцедуры

// Изменяет наименование регламентного задания.
//
// Параметры:
//   Ключ                              - Строка - ключ регламентного задания.
//   ПредставлениеРегламентногоЗадания - Строка - представление регламентного задания
//                                                для формирования наименования регламентного задания.
//   ПредставлениеУчетнойЗаписи        - Строка - представление учетной записи 
//                                                для формирования наименования регламентного задания.
//
Процедура УстановитьНаименованиеРегламентногоЗадания(Ключ, ПредставлениеРегламентногоЗадания, ПредставлениеУчетнойЗаписи) Экспорт

	ШаблонНаименования = "%1 (%2)";
	НаименованиеРегЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования,
		ПредставлениеРегламентногоЗадания,
		ПредставлениеУчетнойЗаписи);

	Отбор = Новый Структура("Ключ", Ключ);
	РезультатПоиска = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Для Каждого РегламентноеЗадание Из РезультатПоиска Цикл
		Параметры = Новый Структура();
		Параметры.Вставить("Наименование", НаименованиеРегЗадания);
		РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание, Параметры);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
