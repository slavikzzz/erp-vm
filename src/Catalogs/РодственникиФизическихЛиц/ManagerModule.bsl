#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиПравилРегистрации

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульЗарплатаКадрыРасширенныйСинхронизацияДанных = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыРасширенныйСинхронизацияДанных");
		МодульЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляПодчиненногоСправочника(Настройки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Формирует таблицу с составом семьи.
// Члены семьи упорядочиваются по коду степени родства и возрасту и отделяются переносом строки.
//
// Параметры:
//  ФизическоеЛицо	 - СправочникСсылка.ФизическиеЛица - человек, состав семьи которого формируется.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками
//		Ссылка - СправочникСсылка.РодственникиФизическихЛиц - ссылка на члена семьи,
//		Наименование - Строка - наименование элемента справочника родственников,
//		СтепеньРодства - СправочникСсылка.СтепениРодстваФизическихЛиц - степени родства физических лиц,
//		ДатаРождения - Дата - дата рождения родственника,
//		НаИждивении - Булево - признак того, что родственник находится на иждивении,
//		СкрыватьВТ2 - Булево - признак того, что родственник скрывается из формы Т-2.
//
Функция СоставСемьи(ФизическоеЛицо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РодственникиФизическихЛиц.Ссылка КАК Ссылка,
		|	РодственникиФизическихЛиц.Наименование КАК Наименование,
		|	РодственникиФизическихЛиц.СтепеньРодства КАК СтепеньРодства,
		|	РодственникиФизическихЛиц.ДатаРождения КАК ДатаРождения,
		|	РодственникиФизическихЛиц.НаИждивении КАК НаИждивении,
		|	РодственникиФизическихЛиц.СкрыватьВТ2 КАК СкрыватьВТ2,
		|	РодственникиФизическихЛиц.НаходитсяПодОпекой КАК НаходитсяПодОпекой,
		|	РодственникиФизическихЛиц.СтепеньРодства.Код КАК СтепеньРодстваКод
		|ИЗ
		|	Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
		|ГДЕ
		|	РодственникиФизическихЛиц.Владелец = &ФизическоеЛицо
		|	И НЕ РодственникиФизическихЛиц.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтепеньРодстваКод";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует строку с представлением состава семьи.
//
// Параметры:
//  ФизическоеЛицо	 - СправочникСсылка.ФизическиеЛица - человек, состав семьи которого формируется.
//  ВключатьСкрытыхИзТ2	 - Булево - необязательный, по умолчанию Ложь.
//		Если установлено, то состав семьи будет сформирован с учетом лиц, скрываемых из формы Т-2.
// 
// Возвращаемое значение:
//  Строка - представление состава семьи.
//
// Пример:
//	Муж: Виктор, 51 год
//	Сын: Орлов Александр, 29 лет
//	Дочь: Орлова Мария, 26 лет
//
Функция ПредставлениеСоставаСемьи(ФизическоеЛицо, ВключатьСкрытыхИзТ2 = Ложь) Экспорт
	
	Представление = "";
	
	СоставСемьи = СоставСемьи(ФизическоеЛицо);
	Для Каждого ЧленСемьи Из СоставСемьи Цикл
		Если Не ВключатьСкрытыхИзТ2 И ЧленСемьи.СкрыватьВТ2 Тогда
			Продолжить;
		КонецЕсли;
		Если Не ПустаяСтрока(Представление) Тогда
			Представление = Представление + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЧленСемьи.СтепеньРодства) Тогда
			Представление = Представление + Строка(ЧленСемьи.СтепеньРодства) + ": ";
		КонецЕсли;
		Представление = Представление + СокрЛП(Строка(ЧленСемьи.Наименование));
		Если ЗначениеЗаполнено(ЧленСемьи.ДатаРождения) Тогда
			Представление = Представление + ", " + ФизическиеЛицаЗарплатаКадры.ПредставлениеВозраста(ЧленСемьи.ДатаРождения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Заполняет реквизиты Фамилия, Имя, Отчество.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьФИО(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РодственникиФизическихЛиц.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
	|ГДЕ
	|	РодственникиФизическихЛиц.Наименование <> """"
	|	И РодственникиФизическихЛиц.Фамилия = """"";
	ОбработкаЗавершена = Истина;
	
	ОбъектМетаданных = Метаданные.Справочники.РодственникиФизическихЛиц;
	Блокировка = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОписаниеБлокируемыхДанных(ОбъектМетаданных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Блокировка.ПоляБлокировки.Ссылка = Выборка.Ссылка;
		Успех = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.НачатьОбновлениеДанных(Блокировка, ПараметрыОбновления);
		Если Не Успех Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		ФИО = СокрЛП(Объект.Наименование);
		Пока СтрНайти(ФИО, "  ") > 0 Цикл
			ФИО = СтрЗаменить(ФИО, "  ", " ");
		КонецЦикла;
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИО);
		Объект.Фамилия  = СтруктураФИО.Фамилия;
		Объект.Имя      = СтруктураФИО.Имя;
		Объект.Отчество = СтруктураФИО.Отчество;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

// Заполняет реквизиты СНИЛС, КодСвязи.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьСНИЛСКодСвязи(ПараметрыОбновления = Неопределено) Экспорт
	ПричиныНетрудоспособности = Новый Массив;
	ПричиныНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком);
	ПричиныНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПричиныНетрудоспособности", ПричиныНетрудоспособности);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Родственники.Ссылка КАК Ссылка,
	|	Родственники.Владелец КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТРодственники
	|ИЗ
	|	Справочник.РодственникиФизическихЛиц КАК Родственники
	|ГДЕ
	|	(Родственники.СНИЛС = """"
	|			ИЛИ Родственники.КодСвязи = """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛист.Ссылка КАК Ссылка,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход1 КАК РодственникЗаКоторымОсуществляетсяУход1,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход2 КАК РодственникЗаКоторымОсуществляетсяУход2,
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	СведенияОбЭЛН.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	БольничныйЛист.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТБольничные
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО СведенияОбЭЛН.Больничный = БольничныйЛист.Ссылка
	|ГДЕ
	|	СведенияОбЭЛН.ДоступенИсходныйXML
	|	И СведенияОбЭЛН.ПричинаНетрудоспособности В(&ПричиныНетрудоспособности)
	|	И (БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход1 <> ЗНАЧЕНИЕ(Справочник.РодственникиФизическихЛиц.ПустаяСсылка)
	|			ИЛИ БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход2 <> ЗНАЧЕНИЕ(Справочник.РодственникиФизическихЛиц.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТБольничные.Ссылка КАК Больничный,
	|	ВТБольничные.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	ВТБольничные.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТРодственники.Ссылка КАК Родственник,
	|	ВТРодственники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТРодственникиБольничных
	|ИЗ
	|	ВТРодственники КАК ВТРодственники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБольничные КАК ВТБольничные
	|		ПО ВТРодственники.Ссылка = ВТБольничные.РодственникЗаКоторымОсуществляетсяУход1
	|			И ВТРодственники.ФизическоеЛицо = ВТБольничные.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТБольничные.Ссылка,
	|	ВТБольничные.НомерЛисткаНетрудоспособности,
	|	ВТБольничные.ГоловнаяОрганизация,
	|	ВТРодственники.Ссылка,
	|	ВТРодственники.ФизическоеЛицо
	|ИЗ
	|	ВТРодственники КАК ВТРодственники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБольничные КАК ВТБольничные
	|		ПО ВТРодственники.Ссылка = ВТБольничные.РодственникЗаКоторымОсуществляетсяУход2
	|			И ВТРодственники.ФизическоеЛицо = ВТБольничные.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТРодственникиБольничных.Родственник КАК Родственник,
	|	ВТРодственникиБольничных.Больничный КАК Больничный,
	|	ВТРодственникиБольничных.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	ВТРодственникиБольничных.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТРодственникиБольничных.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТРодственникиБольничных КАК ВТРодственникиБольничных
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родственник,
	|	НомерЛисткаНетрудоспособности,
	|	ГоловнаяОрганизация,
	|	Больничный";
	ОбработкаЗавершена = Истина;
	
	ОбъектМетаданных = Метаданные.Справочники.РодственникиФизическихЛиц;
	Блокировка = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОписаниеБлокируемыхДанных(ОбъектМетаданных);
	
	НакопленныеОшибки = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Родственник") Цикл
		Блокировка.ПоляБлокировки.Ссылка = Выборка.Родственник;
		Успех = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.НачатьОбновлениеДанных(Блокировка, ПараметрыОбновления);
		Если Не Успех Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		СНИЛС    = "";
		КодСвязи = "";
		СНИЛСУникален    = Истина;
		КодСвязиУникален = Истина;
		
		Пока Выборка.Следующий() Цикл
			Попытка
				ТекстXML = РегистрыСведений.СведенияОбЭЛН.ИсходныйXML(
					Выборка.НомерЛисткаНетрудоспособности,
					Выборка.ГоловнаяОрганизация);
				ДанныеЭЛН = ЭЛНФСС.ДанныеЭЛНИзXML(ТекстXML);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ДанныеЭЛН = ЭЛНФСС.ПустыеДанныеЭЛН();
				ДанныеЭЛН.Успех = Ложь;
				ДанныеЭЛН.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецПопытки;
			Если Не ДанныеЭЛН.Успех Тогда
				Текст = НСтр("ru = 'При заполнении СНИЛС и кода связи родственника ""%1"" из ЭЛН ""%2"" возникла ошибка:%3';
							|en = 'An error occurred when filling in SNILS and relative relationship code ""%1"" from ESLR ""%2"":%3'");
				Текст = СтрШаблон(Текст, Выборка.Родственник, Выборка.НомерЛисткаНетрудоспособности, Символы.ПС + ДанныеЭЛН.ТекстОшибки);
				НакопленныеОшибки.Добавить(Текст);
				Продолжить;
			КонецЕсли;
			ОбменЛисткамиНетрудоспособностиФСС.ЗаполнитьДатыУходаЗаРодственниками(
				ДанныеЭЛН,
				Выборка.ГоловнаяОрганизация,
				Выборка.ФизическоеЛицо);
			Найденные = ДанныеЭЛН.Родственники.НайтиСтроки(Новый Структура("Ссылка", Выборка.Родственник));
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.СНИЛС) Тогда
					Если СНИЛС = "" Тогда
						СНИЛС = СтрокаТаблицы.СНИЛС;
					ИначеЕсли СНИЛС <> СтрокаТаблицы.СНИЛС Тогда
						СНИЛСУникален = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.КодСвязи) Тогда
					Если КодСвязи = "" Тогда
						КодСвязи = СтрокаТаблицы.КодСвязи;
					ИначеЕсли КодСвязи <> СтрокаТаблицы.КодСвязи Тогда
						КодСвязиУникален = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Попытка
			РодственникОбъект = Выборка.Родственник.ПолучитьОбъект();
			РодственникОбъект.Прочитать();
			Модифицированность = Ложь;
			Если СНИЛСУникален И ЗначениеЗаполнено(СНИЛС) И РодственникОбъект.СНИЛС <> СНИЛС Тогда
				РодственникОбъект.СНИЛС = СНИЛС;
				Модифицированность = Истина;
			КонецЕсли;
			Если КодСвязиУникален И ЗначениеЗаполнено(КодСвязи) И РодственникОбъект.КодСвязи <> КодСвязи Тогда
				РодственникОбъект.КодСвязи = КодСвязи;
				Модифицированность = Истина;
			КонецЕсли;
			Если Модифицированность Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РодственникОбъект);
			КонецЕсли;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Подробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Текст = НСтр("ru = 'При записи СНИЛС и кода связи родственника ""%1"" из ЭЛН ""%2"" возникла ошибка:%3';
						|en = 'An error occurred when recording SNILS and relative relationship code ""%1"" from ESLR ""%2"":%3'");
			Текст = СтрШаблон(Текст, Выборка.Родственник, Выборка.НомерЛисткаНетрудоспособности, Символы.ПС + Подробно);
			НакопленныеОшибки.Добавить(Текст);
		КонецПопытки;
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
	Если НакопленныеОшибки.Количество() > 0 Тогда
		Подробно = Символы.ПС + Символы.ПС + СтрСоединить(НакопленныеОшибки, Символы.ПС + Символы.ПС);
		ТекстОшибки = НСтр("ru = 'Возникли ошибки (%1):%2';
							|en = 'Errors occurred (%1):%2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, НакопленныеОшибки.Количество(), Подробно);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьФИОСлужебныеСБуквамиЕЁ(ПараметрыОбновления) Экспорт 
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ТаблицаДанных.Ссылка КАК Ссылка,
		|	ТаблицаДанных.Наименование КАК Наименование,
		|	ТаблицаДанных.НаименованиеСлужебное КАК НаименованиеСлужебное
		|ИЗ
		|	Справочник.РодственникиФизическихЛиц КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.НаименованиеСлужебное ПОДОБНО ""%ЕЁ%""
		|	И НЕ ТаблицаДанных.Ссылка В (&МассивОбновленных)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл
		МассивОбновленных.Добавить(Выборка.Ссылка);
		НаименованиеСлужебное = ФизическиеЛицаЗарплатаКадры.НаименованиеСлужебное(Выборка.Наименование);
		Если НаименованиеСлужебное <> Выборка.НаименованиеСлужебное Тогда
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
					ПараметрыОбновления, "Справочник.РодственникиФизическихЛиц", "Ссылка", Выборка.Ссылка) Тогда
					
				Продолжить;
			КонецЕсли;
			ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();      
			ОбъектСправочника.НаименованиеСлужебное = НаименованиеСлужебное;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСправочника);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
