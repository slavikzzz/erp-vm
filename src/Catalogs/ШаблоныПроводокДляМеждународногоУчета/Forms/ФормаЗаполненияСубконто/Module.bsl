
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Счет = Параметры.Счет;
	ХозяйственнаяОперация = Параметры.ХозяйственнаяОперация;
	ДанныеСчета = МеждународныйУчетСерверПовтИсп.СвойстваСчета(Счет);
	
	МаксКоличествоСубконто = Метаданные.ПланыСчетов.Международный.МаксКоличествоСубконто;
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		
		ВидСубконто = ДанныеСчета["ВидСубконто"+ИндексСубконто];
		Если ВидСубконто = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЗаполнениеСубконто.Добавить();
		НоваяСтрока.ВидСубконто = ДанныеСчета["ВидСубконто"+ИндексСубконто];
		НоваяСтрока.ЗаполнятьИзИсточника = Истина;
	КонецЦикла;
	
	НастройкаКомпоновки = Неопределено;
	ИнициализироватьКомпоновщикНастроекСервер(НастройкаКомпоновки);
	
	//Элементы.ГруппаНастройкиЗаполнения.Видимость = ЗаполнениеПоСоответствию;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ЗаполнениеСубконтоПредставлениеВыраженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗаполнениеСубконто.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСубконто", ТекущиеДанные.ВидСубконто);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("ТекущееВыражение", ТекущиеДанные.Выражение);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПоляЗаполненияСубконто", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоПредставлениеВыраженияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоПредставлениеВыраженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЗаполнениеСубконто.ТекущиеДанные;
	ТекущиеДанные.Выражение = ВыбранноеЗначение;
	Модифицированность = Истина;
	ИдентификаторСтроки = Элементы.ЗаполнениеСубконто.ТекущаяСтрока;
	ЗаполнениеСубконтоПредставлениеВыраженияОбработкаВыбораНаСервере(ИдентификаторСтроки);
	Элементы.ЗаполнениеСубконто.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеСубконтоПредставлениеВыраженияОбработкаВыбораНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные = ЗаполнениеСубконто.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПроверитьВыражение(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	Настройки = Новый Структура("ЗаполнениеПоСоответствию", ЗаполнениеПоСоответствию);
	Для Каждого Настройка Из ЗаполнениеСубконто Цикл
		Если ЗначениеЗаполнено(Настройка.Выражение) ИЛИ ЗначениеЗаполнено(Настройка.УказанноеЗначение) Тогда
			Настройки.ЗаполнениеПоСоответствию = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Закрыть(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимНастройкиЗаполненияСубконто(Команда)
	
	ЗаполнениеПоСоответствию = НЕ ЗаполнениеПоСоответствию;
	Элементы.ГруппаНастройкиЗаполнения.Видимость = ЗаполнениеПоСоответствию;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоУказанноеЗначение");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоНетВДоступныхПолях");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоПредставлениеВыражения");

	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Указанное значение';
								|en = 'Specified value'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоЗаполнятьИзИсточника");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Из оперативного учета';
								|en = 'From operational accounting'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоЗаполнятьИзИсточника");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ВидСубконто");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Отображать");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ОтметкаНезаполненного");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоЗаполнятьИзИсточника");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоПредставлениеВыражения");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоУказанноеЗначение");
	
	// 
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроекСервер(НастройкаКомпоновки = Неопределено)
	
	СхемаКомпоновкиДанных = ИсточникиДанныхПовтИсп.СхемаПолученияДанных(ХозяйственнаяОперация);
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	Если НастройкаКомпоновки <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаКомпоновки);
	КонецЕсли;
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыражение(СтрокиНастройки)
	
	МеждународныйУчетОбщегоНазначения.ПроверитьВыражениеЗаполненияСубконто(СтрокиНастройки, КомпоновщикНастроек);
	
КонецПроцедуры

#КонецОбласти