
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗначениеНеЗаполняется = НСтр("ru = 'Не заполняется';
								|en = 'Do not fill in'");
	УстановитьУсловноеОформление();

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	Если ТипЗнч(Параметры.ДополнительныеПараметры) = Тип("Структура")
		И Параметры.ДополнительныеПараметры.Свойство("НастройкаФормированияПроводок") Тогда
		НастройкаФормированияПроводок = Параметры.ДополнительныеПараметры.НастройкаФормированияПроводок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗначениеКопирования = Параметры.ЗначениеКопирования;
	КонецЕсли;
	
	СтороныСчета.Добавить("Дт");
	СтороныСчета.Добавить("Кт");
	
	ОбновитьРеквизитыЗависящиеОтОперации();
	
	УстановитьИсточникиИзмеренийПоУмолчанию();
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ЗаполнитьИсточникиИзмеренийПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Или ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Справочники.ШаблоныПроводокДляМеждународногоУчета.ИнициализироватьКомпоновщик(ЭтотОбъект, Объект.Операция);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		СохраненныеНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ДополнительныйОтбор").Получить();
		Справочники.ШаблоныПроводокДляМеждународногоУчета.ЗагрузитьНастройки(ЭтотОбъект, СохраненныеНастройки);
		НаборЗаписей = РегистрыСведений.ПравилаОтраженияВМеждународномУчете.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ШаблонПроводки.Установить(Параметры.ЗначениеКопирования);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 1 Тогда
			НастройкаФормированияПроводок = НаборЗаписей[0].НастройкаФормированияПроводок;
		КонецЕсли;
	КонецЕсли;
	
	ОформитьНастройкуЗаполненияСубконто(ЭтаФорма, Объект.ЗаполнениеСубконтоПоСоответствию);
	ОбновитьСписокСубконтоМеждународногоУчета();
	НастройкаКомпоновки = Неопределено;
	ИнициализироватьКомпоновщикНастроекЗаполненияСубконто(НастройкаКомпоновки);
	
	ПроверитьИспользованиеВПравилахОтраженияВМеждународномУчете();
	
	УстановитьЗаголовкиКомандУточненияСчетов();
	
	УстановитьДоступностьЭлементовФормы();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьТекстУстановленДополнительныйОтбор();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененоИспользованиеВПравилахОтраженияВМеждународномУчете" Тогда
		ПроверитьИспользованиеВПравилахОтраженияВМеждународномУчете();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(НастройкаФормированияПроводок) Тогда
		ОтразитьВУчетнойПолитике(ТекущийОбъект.Ссылка);
		ПроверитьИспользованиеВПравилахОтраженияВМеждународномУчете();
	КонецЕсли;
	ОбновитьСписокСубконтоМеждународногоУчета();
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЗаписьНового") 
			И ТекущийОбъект.ДополнительныеСвойства.ЗаписьНового И ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		СкопироватьНастройкиУточненияСчетов();
	КонецЕсли;
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписанШаблонПроводки", Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ТекущийОбъект.ЗаполнениеСубконтоПоСоответствию Тогда
		СчетаУчета = ЗаполнениеСубконто.ПолучитьЭлементы();
		ТекущийОбъект.НастройкиЗаполненияСубконто.Очистить();
		Для Каждого СчетУчета Из СчетаУчета Цикл
			СоответствияСубконто = СчетУчета.ПолучитьЭлементы();
			Для Каждого Соответствие Из СоответствияСубконто Цикл
				Если Соответствие.ЗаполнятьИзИсточника И НЕ ПустаяСтрока(Соответствие.Выражение) И НЕ ПустаяСтрока(Соответствие.ПредставлениеВыражения)
					ИЛИ НЕ Соответствие.ЗаполнятьИзИсточника И ЗначениеЗаполнено(Соответствие.УказанноеЗначение) Тогда
					НоваяНастройка = ТекущийОбъект.НастройкиЗаполненияСубконто.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяНастройка, Соответствие);
					НоваяНастройка.ПоложениеСубконто = СчетУчета.ПоложениеСубконто;
				КонецЕсли;
			КонецЦикла;// субконто счета
		КонецЦикла;// по счетам
	КонецЕсли;// задано заполнение субконто
	
	Справочники.ШаблоныПроводокДляМеждународногоУчета.ЗаписатьДополнительныйОтбор(ЭтотОбъект, ТекущийОбъект);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьНового", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	Справочники.ШаблоныПроводокДляМеждународногоУчета.ИнициализироватьКомпоновщик(ЭтотОбъект, ТекущийОбъект.Операция);
	
	СохраненныеНастройки = ТекущийОбъект.ДополнительныйОтбор.Получить();
	Справочники.ШаблоныПроводокДляМеждународногоУчета.ЗагрузитьНастройки(ЭтотОбъект, СохраненныеНастройки);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	ИнициализироватьКомпоновщикНастроекЗаполненияСубконто();
	Объект.ТипИсточникаУточненияСчетаДт = "";
	Объект.ТипИсточникаУточненияСчетаКт = "";
	Объект.ИсточникКоличестваДт = "";
	Объект.ИсточникКоличестваКт = "";
	ОперацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДебетаПоУмолчаниюПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы(Элемент.Имя);
	ОбновитьРеквизитыЗависящиеОтСчетаПоУмолчанию("Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКредитаПоУмолчаниюПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы(Элемент.Имя);
	ОбновитьРеквизитыЗависящиеОтСчетаПоУмолчанию("Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИсточникаУточненияСчетаДтПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИсточникаУточненияСчетаКтПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПодразделенияДтПриИзменении(Элемент)
	
	ОбновитьЗаголовкиГруппИзмерений();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПодразделенияКтПриИзменении(Элемент)
	
	ОбновитьЗаголовкиГруппИзмерений();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникНаправленияДтПриИзменении(Элемент)
	
	ОбновитьЗаголовкиГруппИзмерений();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникНаправленияКтПриИзменении(Элемент)
	
	ОбновитьЗаголовкиГруппИзмерений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриИзменении(Элемент)
	
	Объект.УстановленДополнительныйОтбор = Компоновщик.Настройки.Отбор.Элементы.Количество() > 0;
	ОбновитьТекстУстановленДополнительныйОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоПредставлениеВыраженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗаполнениеСубконто.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСубконто", ТекущиеДанные.ВидСубконто);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("ТекущееВыражение", ТекущиеДанные.Выражение);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПоляЗаполненияСубконто", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоПредставлениеВыраженияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоПредставлениеВыраженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЗаполнениеСубконто.ТекущиеДанные;
	ТекущиеДанные.Выражение = ВыбранноеЗначение;
	Модифицированность = Истина;
	ИдентификаторСтроки = Элементы.ЗаполнениеСубконто.ТекущаяСтрока;
	ЗаполнениеСубконтоПредставлениеВыраженияОбработкаВыбораНаСервере(ИдентификаторСтроки);
	Элементы.ЗаполнениеСубконто.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеСубконтоПредставлениеВыраженияОбработкаВыбораНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные = ЗаполнениеСубконто.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПроверитьВыражение(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимНастройкиЗаполненияСубконто(Команда)
	
	Объект.ЗаполнениеСубконтоПоСоответствию = НЕ Объект.ЗаполнениеСубконтоПоСоответствию;
	Элементы.ГруппаНастройкиЗаполнения.Видимость = Объект.ЗаполнениеСубконтоПоСоответствию;
	Элементы.ГруппаНастройкаЗаполненияСубконтоПояснение.Видимость = НЕ Объект.ЗаполнениеСубконтоПоСоответствию;
	ОформитьНастройкуЗаполненияСубконто(ЭтаФорма, Объект.ЗаполнениеСубконтоПоСоответствию);
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьТекстУстановленДополнительныйОтбор()

	ТекстУстановленДополнительныйОтбор = ?(Объект.УстановленДополнительныйОтбор, НСтр("ru = 'Установлен';
																						|en = 'Set'"), "");

КонецПроцедуры

&НаСервере
Функция СчетВалютный(Счет)

	Возврат МеждународныйУчетСерверПовтИсп.СвойстваСчета(Счет).Валютный;

КонецФункции

&НаСервере
Функция СчетКоличественный(Счет)

	Возврат МеждународныйУчетСерверПовтИсп.СвойстваСчета(Счет).Количественный;

КонецФункции

&НаСервере
Процедура ПроверитьИспользованиеВПравилахОтраженияВМеждународномУчете()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПравилаОтраженияВМеждународномУчете.НастройкаФормированияПроводок) КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтраженияВМеждународномУчете
	|ГДЕ
	|	ПравилаОтраженияВМеждународномУчете.ШаблонПроводки = &ШаблонПроводки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПравилаОтраженияВМеждународномУчете.НастройкаФормированияПроводок) > 0";
	
	Запрос.УстановитьПараметр("ШаблонПроводки", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДоступноИзменениеНастроекМФУ = МеждународныйУчетОбщегоНазначения.ДоступноИзменениеНастроекМеждународногоУчета();
	
	Если Выборка.Следующий() Тогда
		СостояниеИспользованияВНастройке = СтрШаблон(" "+НСтр("ru = 'Используется';
																|en = 'Used'")+" (%1)", Выборка.НастройкаФормированияПроводок);
		Если ДоступноИзменениеНастроекМФУ Тогда
			Элементы.НастроитьИспользование.Заголовок = НСтр("ru = 'Изменить';
															|en = 'Change'");
		Иначе
			Элементы.НастроитьИспользование.Заголовок = НСтр("ru = 'Посмотреть';
															|en = 'View'");
		КонецЕсли;
	Иначе
		СостояниеИспользованияВНастройке = " "+ НСтр("ru = 'Не используется';
													|en = 'Not used'");
		Элементы.НастроитьИспользование.Заголовок = НСтр("ru = 'Настроить';
														|en = 'Customize'");
		Элементы.НастроитьИспользование.Видимость = ДоступноИзменениеНастроекМФУ;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтразитьВУчетнойПолитике(ШаблонПроводки)

	НаборЗаписей = РегистрыСведений.ПравилаОтраженияВМеждународномУчете.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаФормированияПроводок.Установить(НастройкаФормированияПроводок);
	НаборЗаписей.Отбор.ШаблонПроводки.Установить(ШаблонПроводки);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.НастройкаФормированияПроводок = НастройкаФормированияПроводок;
	НоваяЗапись.ШаблонПроводки = ШаблонПроводки;
	
	НаборЗаписей.Записать();

КонецПроцедуры

&НаСервере
Процедура СкопироватьНастройкиУточненияСчетов()
	
	НаборЗаписейИсточника = РегистрыСведений.ПравилаУточненияСчетовВМеждународномУчете.СоздатьНаборЗаписей();
	НаборЗаписейИсточника.Отбор.ШаблонПроводки.Установить(ЗначениеКопирования);
	НаборЗаписейИсточника.Прочитать();
	ТаблицаЗаписей = НаборЗаписейИсточника.Выгрузить();
	
	ТаблицаЗаписей.ЗаполнитьЗначения(Объект.Ссылка, "ШаблонПроводки");
	
	НаборЗаписей = РегистрыСведений.ПравилаУточненияСчетовВМеждународномУчете.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ШаблонПроводки.Установить(Объект.Ссылка);
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКомандУточненияСчетов()

	ДоступноИзменениеНастроекМФУ = МеждународныйУчетОбщегоНазначения.ДоступноИзменениеНастроекМеждународногоУчета();
	
	Если НЕ ДоступноИзменениеНастроекМФУ Тогда
		Для каждого СторонаСчета Из СтороныСчета Цикл
			ДтКт = СторонаСчета.Значение;
			Команда = Элементы["НастроитьУточнениеСчета"+ДтКт]; // КомандаФормы - 
			Команда.Заголовок =  СтрШаблон(НСтр("ru = 'Посмотреть уточнение счета %1';
												|en = 'View account specification %1'"),ДтКт);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ИсточникиУточненияСчета()
	
	ИсточникиУточненияСчета = Неопределено;
	
	Если Объект.Операция = Справочники.НастройкиХозяйственныхОпераций.АмортизацияВнеоборотныхАктивов Тогда
		
		ИсточникиУточненияСчета = Новый Соответствие;
		ИсточникиУточненияСчета.Вставить(
			Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходов,
			Новый Структура("ИмяПоля", "ГФУДоходовРасходов"));
		
	Иначе
		
		ИсточникДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Операция, "ИсточникДанных");
		ИсточникиУточненияСчета = МеждународныйУчетСерверПовтИсп.ИсточникиУточненияСчета(ИсточникДанных);
		
	КонецЕсли;
	
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИсточникиИзмеренийПоУмолчанию()

	Если Элементы.ИсточникПодразделенияДт.СписокВыбора.НайтиПоЗначению(ИсточникПодразделенияПоУмолчанию) <> Неопределено Тогда
		Объект.ИсточникПодразделенияДт = ИсточникПодразделенияПоУмолчанию;
		Объект.ИсточникПодразделенияКт = ИсточникПодразделенияПоУмолчанию;
	КонецЕсли;
	
	Для каждого СторонаСчета Из СтороныСчета Цикл
		
		ДтКт = СторонаСчета.Значение;
		
		Если НЕ ЗначениеЗаполнено(Объект["ИсточникНаправления"+ДтКт])Тогда
			Объект["ИсточникНаправления"+ДтКт] = НаправлениеДтПоУмолчанию;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект["ИсточникКоличества"+ДтКт]) Тогда
			Объект["ИсточникКоличества"+ДтКт] = КоличествоДтПоУмолчанию;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИсточникиИзмеренийПоУмолчанию()

	ВидыДвижений = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Операция, "ИсточникДанных,Приход,Расход");
	
	ИсточникДанных = ВидыДвижений.ИсточникДанных;
	ВидыДвижений.Удалить("ИсточникДанных");
	
	Если ПустаяСтрока(ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникПодразделенияПоУмолчанию = Перечисления.ИсточникиПодразделенийАналитическихРегистров.ХозяйственнаяОперация;
	Если СтрНайти("НДСЗаписиКнигиПокупок,НДСЗаписиКнигиПродаж",ИсточникДанных) > 0 Тогда
		ИсточникПодразделенияПоУмолчанию = Перечисления.ИсточникиПодразделенийАналитическихРегистров.ДокументОплаты;
	КонецЕсли;
	
	// Направление деятельности
	ТипыДанныхУчета = Перечисления.ТипыДанныхУчета;
	ИсточникиНаправлений = Перечисления.ИсточникиНаправленийДеятельностиАналитическихРегистров;
	ПустойИсточник = ИсточникиНаправлений.ПустаяСсылка();
	
	НаправлениеДвижения = Новый Соответствие;
	НаправлениеДвижения.Вставить(ТипыДанныхУчета.Номенклатура, ИсточникиНаправлений.НаправлениеДеятельностиНоменклатуры);
	НаправлениеДвижения.Вставить(ТипыДанныхУчета.Контрагенты, ИсточникиНаправлений.НаправлениеДеятельностиКонтрагента);
	НаправлениеДвижения.Вставить(ТипыДанныхУчета.ДенежныеСредства, ИсточникиНаправлений.НаправлениеДеятельностиДС);
	НаправлениеДвижения.Вставить(ТипыДанныхУчета.ДоходыРасходы, ИсточникиНаправлений.НаправлениеДеятельностиСтатьи);
	НаправлениеДвижения.Вставить(ТипыДанныхУчета.ПрочиеАктивыПассивы, ИсточникиНаправлений.НаправлениеДеятельностиСтатьи);
	НаправлениеДвижения.Вставить(ТипыДанныхУчета.ПустаяСсылка(), ПустойИсточник);
	
	СимметричныеРегистры = Новый Структура;
	СимметричныеРегистры.Вставить("ДвиженияДенежныхСредств");
	СимметричныеРегистры.Вставить("ДвиженияДоходыРасходыПрочиеАктивыПассивы");
	СимметричныеРегистры.Вставить("ДвиженияКонтрагентКонтрагент");
	СимметричныеРегистры.Вставить("ДвиженияНоменклатураНоменклатура");
	
	ОстаточныеРегистры = Новый Структура;
	ОстаточныеРегистры.Вставить("АмортизацияОС");
	ОстаточныеРегистры.Вставить("СтоимостьОС");
	ОстаточныеРегистры.Вставить("АмортизацияНМА");
	ОстаточныеРегистры.Вставить("СтоимостьНМА");
	
	НаправлениеДеятельности = ИсточникиНаправлений.НаправлениеДеятельности;
	КорНаправлениеДеятельности = ИсточникиНаправлений.КорНаправлениеДеятельности;
	Для Каждого ВидДвижения Из ВидыДвижений Цикл
		ДтКт = ?(ВидДвижения.Ключ = "Приход", "Дт", "Кт");
		ИсточникНаправления = НаправлениеДвижения[ВидДвижения.Значение];
		Если СимметричныеРегистры.Свойство(ИсточникДанных) Тогда
			ИсточникНаправления = ?(ВидДвижения.Ключ = "Приход", КорНаправлениеДеятельности, НаправлениеДеятельности);
		КонецЕсли;
		Если ОстаточныеРегистры.Свойство(ИсточникДанных) И ЗначениеЗаполнено(ИсточникНаправления)
			ИЛИ СтрНайти("НДСЗаписиКнигиПокупок,НДСЗаписиКнигиПродаж",ИсточникДанных) > 0 Тогда
			ИсточникНаправления = НаправлениеДеятельности;
		КонецЕсли;
		НаправлениеПоУмолчанию = ?(ДтКт = "Дт", "НаправлениеДтПоУмолчанию", "НаправлениеКтПоУмолчанию");
		ЭтаФорма[НаправлениеПоУмолчанию] = ИсточникНаправления;
		ПолеИсточникаНаправления = Элементы["ИсточникНаправления"+ДтКт]; // ПолеФормы -  
		ПолеИсточникаНаправления.Доступность = ИсточникНаправления <> ПустойИсточник;
	КонецЦикла;
	
	ПоказательКоличество = Перечисления.ПоказателиАналитическихРегистров.Количество;
	ПоказательКорКоличество = Перечисления.ПоказателиАналитическихРегистров.КорКоличество;
	Если Элементы.ИсточникКоличестваДт.СписокВыбора.НайтиПоЗначению(ПоказательКоличество) <> Неопределено Тогда
		КоличествоДтПоУмолчанию = ПоказательКоличество;
	КонецЕсли;
	Если Элементы.ИсточникКоличестваКт.СписокВыбора.НайтиПоЗначению(ПоказательКорКоличество) <> Неопределено Тогда
		КоличествоКтПоУмолчанию = ПоказательКорКоличество;
	ИначеЕсли Элементы.ИсточникКоличестваКт.СписокВыбора.НайтиПоЗначению(ПоказательКоличество) <> Неопределено Тогда
		КоличествоКтПоУмолчанию = ПоказательКоличество;
	КонецЕсли;
	
КонецПроцедуры

#Область УправлениеДоступностьюЭлементовФормы

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы(ИмяЭлементаФормы = Неопределено)

	Элементы.ИзменитьРежимНастройкиЗаполненияСубконто.Доступность = ПравоДоступа("Редактирование", Метаданные.Справочники.ШаблоныПроводокДляМеждународногоУчета);
	
	ОбновитьВсе = ИмяЭлементаФормы = Неопределено;
	Если ОбновитьВсе ИЛИ ИмяЭлементаФормы = "Операция" Тогда
		УстановитьДоступностьПриИзмененииОперации();
	КонецЕсли;
	
	Для каждого СторонаСчета Из СтороныСчета Цикл
		
		ДтКт = СторонаСчета.Значение;
		
		Если ОбновитьВсе ИЛИ ИмяЭлементаФормы = "ТипИсточникаУточненияСчета"+ДтКт Тогда
			УстановитьДоступностьПриИзмененииТипаИсточникаУточненияСчета(ДтКт)
		КонецЕсли;
		
		СчетПоУмолчанию = ?(ДтКт = "Дт", "СчетДебетаПоУмолчанию", "СчетКредитаПоУмолчанию");
		Если ОбновитьВсе ИЛИ ИмяЭлементаФормы = СчетПоУмолчанию Тогда
			УстановитьДоступностьИсточникаСуммыВВалюте(ДтКт);
			УстановитьДоступностьИсточникаКоличества(ДтКт);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПриИзмененииОперации()
	
	ОперацияЗаполнена = ЗначениеЗаполнено(Объект.Операция);
	
	УстановитьДоступностьЭлемента("ИсточникБалансовойСуммы", ОперацияЗаполнена);
	
	Для каждого СторонаСчета Из СтороныСчета Цикл
		
		ДтКт = СторонаСчета.Значение;
		
		УстановитьДоступностьЭлемента("ТипИсточникаУточненияСчета"+ДтКт, ОперацияЗаполнена);
		
		УстановитьДоступностьЭлемента("ГруппаИзмерения"+ДтКт, ОперацияЗаполнена);
		
		УстановитьДоступностьЭлемента("ИсточникСуммыВВалюте"+ДтКт, ОперацияЗаполнена);
		
		УстановитьДоступностьИсточникаУточненияСчета(ДтКт);
		
		УстановитьДоступностьНастройкиУточненияСчета(ДтКт);
		
		УстановитьДоступностьИсточникаСуммыВВалюте(ДтКт);
		
		УстановитьДоступностьИсточникаКоличества(ДтКт);
		
	КонецЦикла;
	
	ОперацияАмортизации = Объект.Операция = Справочники.НастройкиХозяйственныхОпераций.АмортизацияВнеоборотныхАктивов;
	
	Элементы.РучноеУточнениеПроводки.Видимость = НЕ ОперацияАмортизации;
	
	Элементы.ГруппаИзмеренияДт.Видимость = НЕ ОперацияАмортизации;
	Элементы.ГруппаИзмеренияКт.Видимость = НЕ ОперацияАмортизации;
	Элементы.ИсточникСуммыВВалютеДт.Видимость = НЕ ОперацияАмортизации;
	Элементы.ДекорацияПояснениеКРесурсуСуммыВВалютеДебета.Видимость = НЕ ОперацияАмортизации;
	Элементы.ИзменятьЗнакОперацииПриОтраженииВУчете.Видимость = НЕ ОперацияАмортизации;
	
	Элементы.ГруппаКредитаСтраницы.ТекущаяСтраница = ?(
		ОперацияАмортизации,
		Элементы.ГруппаКредитаСтраницаАмортизация,
		Элементы.ГруппаКредитаСтраницаПоУмолчанию);
	
	Элементы.ГруппаДополнительныйОтбор.Видимость = ЗначениеЗаполнено(АдресСхемыКомпоновкиДанных);
	
	ОбновитьЗаголовкиГруппИзмерений();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПриИзмененииТипаИсточникаУточненияСчета(ДтКт)

	УстановитьДоступностьНастройкиУточненияСчета(ДтКт);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИсточникаУточненияСчета(ДтКт)

	ДоступностьЭлемента = Элементы["ТипИсточникаУточненияСчета"+ДтКт].СписокВыбора.Количество() > 0;
	УстановитьДоступностьЭлемента("ТипИсточникаУточненияСчета"+ДтКт, ДоступностьЭлемента);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьНастройкиУточненияСчета(ДтКт)

	ДоступностьЭлемента = ЗначениеЗаполнено(Объект.Операция) И ЗначениеЗаполнено(Объект["ТипИсточникаУточненияСчета"+ДтКт]);
	УстановитьДоступностьЭлемента("НастроитьУточнениеСчета"+ДтКт, ДоступностьЭлемента);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИсточникаСуммыВВалюте(ДтКт)

	СчетПоУмолчанию = ?(ДтКт = "Дт", "СчетДебетаПоУмолчанию", "СчетКредитаПоУмолчанию");
	ДоступностьЭлемента = Элементы["ИсточникСуммыВВалюте"+ДтКт].СписокВыбора.Количество() > 0 И СчетВалютный(Объект[СчетПоУмолчанию]);
	УстановитьДоступностьЭлемента("ИсточникСуммыВВалюте"+ДтКт, ДоступностьЭлемента);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИсточникаКоличества(ДтКт)

		СчетПоУмолчанию = ?(ДтКт = "Дт", "СчетДебетаПоУмолчанию", "СчетКредитаПоУмолчанию");
	ИсточникКоличества = "ИсточникКоличества"+ДтКт;
	ДоступностьЭлемента = Элементы[ИсточникКоличества].СписокВыбора.Количество() > 0 И СчетКоличественный(Объект[СчетПоУмолчанию]);
	УстановитьДоступностьЭлемента(ИсточникКоличества, ДоступностьЭлемента);
	Если НЕ ДоступностьЭлемента Тогда
		Объект[ИсточникКоличества] = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлемента(ИмяЭлемента, ДоступностьЭлемента)

	ЭлементФормы = Элементы[ИмяЭлемента]; // ПолеФормы - 
	ЭлементФормы.Доступность = ДоступностьЭлемента;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеРеквизитовИЭлементовФормы

&НаСервере
Процедура ОперацияПриИзмененииНаСервере()
	
	ОбновитьРеквизитыЗависящиеОтОперации();
	УстановитьИсточникиИзмеренийПоУмолчанию();
	ЗаполнитьИсточникиИзмеренийПоУмолчанию();
	УстановитьДоступностьЭлементовФормы("Операция");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыЗависящиеОтОперации()

	ИсточникДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Операция, "ИсточникДанных");
	
	ЗаполнитьСпискиВыбораПоИсточникуДанных(
		"ТипИсточникаУточненияСчетаДт", "ТипИсточникаУточненияСчетаКт", ИсточникДанных);
	ЗаполнитьСпискиВыбораПоИсточникуДанных(
		"ИсточникСуммыВВалютеДт", "ИсточникСуммыВВалютеКт", ИсточникДанных);
	ЗаполнитьСпискиВыбораПоИсточникуДанных(
		"ИсточникПодразделенияДт", "ИсточникПодразделенияКт", ИсточникДанных, "ДобавитьПустоеЗначение");
	ЗаполнитьСпискиВыбораПоИсточникуДанных(
		"ИсточникНаправленияДт", "ИсточникНаправленияДт", ИсточникДанных, "ДобавитьПустоеЗначение");
	ЗаполнитьСпискиВыбораПоИсточникуДанных(
		"ИсточникКоличестваДт", "ИсточникКоличестваКт", ИсточникДанных);
	ЗаполнитьСписокВыбораИсточникаБалансовойСуммы();
	
	Справочники.ШаблоныПроводокДляМеждународногоУчета.ИнициализироватьКомпоновщик(ЭтотОбъект, Объект.Операция);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыЗависящиеОтСчетаПоУмолчанию(ДтКт)

	ПолеИсточникСуммы = Элементы["ИсточникСуммыВВалюте"+ДтКт]; // ПолеВвода - 
	Если НЕ ПолеИсточникСуммы.Доступность Тогда
		ОчиститьИсточникСуммыВВалюте(ДтКт);
	КонецЕсли;
	
	ПолеИсточникКоличества = Элементы["ИсточникКоличества"+ДтКт]; // ПолеВвода -
	Если НЕ ПолеИсточникКоличества.Доступность Тогда
		ОчиститьИсточникКоличества(ДтКт);
	Иначе
		Объект["ИсточникКоличества"+ДтКт] = ?(ДтКт = "Дт", КоличествоДтПоУмолчанию, КоличествоКтПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораИсточникаБалансовойСуммы()

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоказателиРегистра.Показатель КАК Показатель
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций.ПоказателиРегистра КАК ПоказателиРегистра
	|ГДЕ
	|	ПоказателиРегистра.Использование
	|	И ПоказателиРегистра.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Операция);
	
	Элементы.ИсточникБалансовойСуммы.СписокВыбора.ЗагрузитьЗначения(ОбщегоНазначения.ВыгрузитьКолонку(Запрос.Выполнить().Выгрузить(), "Показатель"));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораПоИсточникуДанных(ИмяЭлементаДт, ИмяЭлементаКт, ИсточникДанных, ПустоеЗначение = Неопределено)

	СпискиВыбора = Новый Структура;
	СпискиВыбора.Вставить(ИмяЭлементаДт, Элементы[ИмяЭлементаДт].СписокВыбора);
	СпискиВыбора[ИмяЭлементаДт].Очистить();
	СпискиВыбора.Вставить(ИмяЭлементаКт, Элементы[ИмяЭлементаКт].СписокВыбора);
	СпискиВыбора[ИмяЭлементаКт].Очистить();
	
	Если ИмяЭлементаДт = "ТипИсточникаУточненияСчетаДт" Тогда
		Источники = ИсточникиУточненияСчета();
	ИначеЕсли ИмяЭлементаДт = "ИсточникСуммыВВалютеДт" Тогда
		Источники = МеждународныйУчетСерверПовтИсп.ПоказателиВВалюте(ИсточникДанных);
	ИначеЕсли ИмяЭлементаДт = "ИсточникПодразделенияДт" Тогда
		Источники = МеждународныйУчетСерверПовтИсп.ИсточникиПодразделений(ИсточникДанных);
	ИначеЕсли ИмяЭлементаДт = "ИсточникНаправленияДт" Тогда
		Источники = МеждународныйУчетСерверПовтИсп.ИсточникиНаправлений(ИсточникДанных);
	ИначеЕсли ИмяЭлементаДт = "ИсточникКоличестваДт" Тогда
		Источники = МеждународныйУчетСерверПовтИсп.ПоказателиКоличества(ИсточникДанных);
	КонецЕсли;

	Если Источники = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Источник Из Источники Цикл
		Для Каждого Список Из СпискиВыбора Цикл
			Список.Значение.Добавить(Источник.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Список Из СпискиВыбора Цикл
		Список.Значение.СортироватьПоПредставлению();
	КонецЦикла;
	
	Если ПустоеЗначение <> Неопределено Тогда
		Для Каждого Список Из СпискиВыбора Цикл
			Список.Значение.Добавить(Неопределено, ЗначениеНеЗаполняется);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОчиститьИсточникСуммыВВалюте(ДтКт)

	Объект["ИсточникСуммыВВалюте"+ДтКт] = "";

КонецФункции

&НаКлиенте
Функция ОчиститьИсточникКоличества(ДтКт)

	Объект["ИсточникКоличества"+ДтКт] = "";

КонецФункции

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	ОформитьИсточникиПодразделения(Элементы.ИсточникПодразделенияДт.Имя);
	ОформитьИсточникиПодразделения(Элементы.ИсточникПодразделенияКт.Имя);
	
	#Область ОформлениеТаблицыЗаполненияСубконто
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоУказанноеЗначение");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоНетВДоступныхПолях");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоПредставлениеВыражения");

	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Указанное значение';
								|en = 'Specified value'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоЗаполнятьИзИсточника");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ЗаполнятьИзИсточника");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Из оперативного учета';
								|en = 'From operational accounting'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоЗаполнятьИзИсточника");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконто.ВидСубконто");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Отображать");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ОтметкаНезаполненного");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоЗаполнятьИзИсточника");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоПредставлениеВыражения");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗаполнениеСубконтоУказанноеЗначение");
	
	//
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ОформитьИсточникиПодразделения(ИмяЭлемента)
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяЭлемента);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ЗначениеНеЗаполняется);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьНастройкуЗаполненияСубконто(Форма, Знач ЗаполнениеПоСоответствию)
	
	Элементы = Форма.Элементы;
	Элементы.ГруппаНастройкиЗаполнения.Видимость = ЗаполнениеПоСоответствию;
	Элементы.ГруппаНастройкаЗаполненияСубконтоПояснение.Видимость = НЕ ЗаполнениеПоСоответствию;
	Если ЗаполнениеПоСоответствию Тогда
		Элементы.ИзменитьРежимНастройкиЗаполненияСубконто.Заголовок = НСтр("ru = 'Отключить расширенную настройку заполнения субконто';
																			|en = 'Disable advanced settings of extra dimension population'");
		Элементы.ГруппаЗаполнениеСубконто.Заголовок = НСтр("ru = 'Заполнение субконто (Задано пользователем)';
															|en = 'Populate extra dimension (Specified by the user)'");
	Иначе
		Элементы.ИзменитьРежимНастройкиЗаполненияСубконто.Заголовок = НСтр("ru = 'Изменить режим настройки заполнения субконто';
																			|en = 'Change the mode of extra dimension population setting'");
		Элементы.ГруппаЗаполнениеСубконто.Заголовок = НСтр("ru = 'Заполнение субконто (Автоматически)';
															|en = 'Populate extra dimension (Automatically)'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиГруппИзмерений()
	
	УстановитьЗаголовокГруппыИзмерений(НСтр("ru = 'Источники измерений Дт';
											|en = 'Measurement sources Dr'"), "Дт");
	УстановитьЗаголовокГруппыИзмерений(НСтр("ru = 'Источники измерений Кт';
											|en = 'Measurement sources Cr'"), "Кт");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокГруппыИзмерений(Заголовок, ДтКт)
	
	НаправлениеПоУмолчанию = ?(ДтКт = "Дт", "НаправлениеДтПоУмолчанию", "НаправлениеКтПоУмолчанию");
	Если Объект["ИсточникПодразделения"+ДтКт] <> ИсточникПодразделенияПоУмолчанию
		ИЛИ Объект["ИсточникНаправления"+ДтКт] <> ЭтаФорма[НаправлениеПоУмолчанию] Тогда
		Заголовок = Заголовок + " (" + НСтр("ru = 'Изменены';
											|en = 'Changed'") + ")";
	КонецЕсли;
	ГруппаФормы = Элементы["ГруппаИзмерения"+ДтКт]; // ГруппаФормы - 
	ГруппаФормы.Заголовок = Заголовок;
	ГруппаФормы.ЗаголовокСвернутогоОтображения = Заголовок;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроекЗаполненияСубконто(НастройкаКомпоновки = Неопределено)
	
	СхемаКомпоновкиДанных = ИсточникиДанныхПовтИсп.СхемаПолученияДанных(Объект.Операция);
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		Элементы.ГруппаЗаполнениеСубконто.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ГруппаЗаполнениеСубконто.Видимость = Истина;
	КонецЕсли;
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	КомпоновщикЗаполненияСубконто.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	Если НастройкаКомпоновки <> Неопределено Тогда
		КомпоновщикЗаполненияСубконто.ЗагрузитьНастройки(НастройкаКомпоновки);
	КонецЕсли;
	КомпоновщикЗаполненияСубконто.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыражение(СтрокиНастройки)
	
	МеждународныйУчетОбщегоНазначения.ПроверитьВыражениеЗаполненияСубконто(СтрокиНастройки, КомпоновщикЗаполненияСубконто);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСубконтоМеждународногоУчета(ПоложениеСубконто = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЗаполнения.ПоложениеСубконто КАК ПоложениеСубконто,
	|	НастройкиЗаполнения.ВидСубконто КАК ВидСубконто,
	|	НастройкиЗаполнения.ЗаполнятьИзИсточника КАК ЗаполнятьИзИсточника,
	|	НастройкиЗаполнения.УказанноеЗначение КАК УказанноеЗначение,
	|	НастройкиЗаполнения.Выражение КАК Выражение,
	|	НастройкиЗаполнения.ПредставлениеВыражения КАК ПредставлениеВыражения
	|ПОМЕСТИТЬ втЗаполнениеСубконто
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета.НастройкиЗаполненияСубконто КАК НастройкиЗаполнения
	|ГДЕ
	|	НастройкиЗаполнения.Ссылка = &ШаблонПроводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СчетМеждународногоУчетаДт КАК Счет,
	|	МИНИМУМ(ВидыСубконто.НомерСубконто) КАК НомерСубконто,
	|	ВидыСубконто.ВидСубконто
	|ПОМЕСТИТЬ втСубконтоДебета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВидыСубконто.НомерСтроки КАК НомерСубконто,
	|		ВидыСубконто.ВидСубконто КАК ВидСубконто
	|	ИЗ
	|		ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто
	|	ГДЕ
	|		ВидыСубконто.Ссылка = &СчетМеждународногоУчетаДт
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВидыСубконто.НомерСтроки+10 КАК НомерСубконто,
	|		ВидыСубконто.ВидСубконто КАК ВидСубконто
	|	ИЗ
	|		ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаУточненияСчетовВМеждународномУчете КАК ПравилаУточнения
	|		ПО ВидыСубконто.Ссылка = ПравилаУточнения.СчетУчета
	|	ГДЕ
	|		ПравилаУточнения.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Дебет)
	|		И ПравилаУточнения.ШаблонПроводки = &ШаблонПроводки
	|		И ПравилаУточнения.СчетУчета <> &СчетМеждународногоУчетаДт
	|		И &ИскатьУточняющиеСубконтоДт
	|	)КАК ВидыСубконто
	|СГРУППИРОВАТЬ ПО
	|	ВидыСубконто.ВидСубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СчетМеждународногоУчетаКт КАК Счет,
	|	МИНИМУМ(ВидыСубконто.НомерСубконто) КАК НомерСубконто,
	|	ВидыСубконто.ВидСубконто
	|ПОМЕСТИТЬ втСубконтоКредита
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВидыСубконто.НомерСтроки КАК НомерСубконто,
	|		ВидыСубконто.ВидСубконто КАК ВидСубконто
	|	ИЗ
	|		ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто
	|	ГДЕ
	|		ВидыСубконто.Ссылка = &СчетМеждународногоУчетаКт
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВидыСубконто.НомерСтроки+10 КАК НомерСубконто,
	|		ВидыСубконто.ВидСубконто КАК ВидСубконто
	|	ИЗ
	|		ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаУточненияСчетовВМеждународномУчете КАК ПравилаУточнения
	|		ПО ВидыСубконто.Ссылка = ПравилаУточнения.СчетУчета
	|	ГДЕ
	|		ПравилаУточнения.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит)
	|		И ПравилаУточнения.ШаблонПроводки = &ШаблонПроводки
	|		И ПравилаУточнения.СчетУчета <> &СчетМеждународногоУчетаКт
	|		И &ИскатьУточняющиеСубконтоКт
	|	)КАК ВидыСубконто
	|СГРУППИРОВАТЬ ПО
	|	ВидыСубконто.ВидСубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Дт"" КАК ПоложениеСубконто,
	|	ПРЕДСТАВЛЕНИЕ(СубконтоДебета.Счет) КАК Счет,
	|	СубконтоДебета.НомерСубконто КАК НомерСубконто,
	|	СубконтоДебета.ВидСубконто КАК ВидСубконто,
	|	СубконтоДебета.ВидСубконто.ТипЗначения КАК ОписаниеТипов,
	|	ЕСТЬNULL(ЗаполнениеСубконто.ЗаполнятьИзИсточника, ИСТИНА) КАК ЗаполнятьИзИсточника,
	|	ЗаполнениеСубконто.УказанноеЗначение КАК УказанноеЗначение,
	|	ЗаполнениеСубконто.Выражение КАК Выражение,
	|	ЗаполнениеСубконто.ПредставлениеВыражения КАК ПредставлениеВыражения
	|ИЗ
	|	втСубконтоДебета КАК СубконтоДебета
	|	ЛЕВОЕ СОЕДИНЕНИЕ втЗаполнениеСубконто КАК ЗаполнениеСубконто
	|	ПО СубконтоДебета.ВидСубконто = ЗаполнениеСубконто.ВидСубконто
	|		И ЗаполнениеСубконто.ПоложениеСубконто = ""Дт""
	|ГДЕ
	|	(&ПоложениеСубконто = ""Дт"" ИЛИ &ПоложениеСубконто = НЕОПРЕДЕЛЕНО)
	|УПОРЯДОЧИТЬ ПО
	|	СубконтоДебета.НомерСубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Кт"" КАК ПоложениеСубконто,
	|	ПРЕДСТАВЛЕНИЕ(СубконтоКредита.Счет) КАК Счет,
	|	СубконтоКредита.НомерСубконто КАК НомерСубконто,
	|	СубконтоКредита.ВидСубконто КАК ВидСубконто,
	|	СубконтоКредита.ВидСубконто.ТипЗначения КАК ОписаниеТипов,
	|	ЕСТЬNULL(ЗаполнениеСубконто.ЗаполнятьИзИсточника, ИСТИНА) КАК ЗаполнятьИзИсточника,
	|	ЗаполнениеСубконто.УказанноеЗначение КАК УказанноеЗначение,
	|	ЗаполнениеСубконто.Выражение КАК Выражение,
	|	ЗаполнениеСубконто.ПредставлениеВыражения КАК ПредставлениеВыражения
	|ИЗ
	|	втСубконтоКредита КАК СубконтоКредита
	|	ЛЕВОЕ СОЕДИНЕНИЕ втЗаполнениеСубконто КАК ЗаполнениеСубконто
	|	ПО СубконтоКредита.ВидСубконто = ЗаполнениеСубконто.ВидСубконто
	|		И ЗаполнениеСубконто.ПоложениеСубконто = ""Кт""
	|ГДЕ
	|	(&ПоложениеСубконто = ""Кт"" ИЛИ &ПоложениеСубконто = НЕОПРЕДЕЛЕНО)
	|УПОРЯДОЧИТЬ ПО
	|	СубконтоКредита.НомерСубконто
	|;";
	
	Запрос.УстановитьПараметр("ШаблонПроводки", Объект.Ссылка);
	Запрос.УстановитьПараметр("СчетМеждународногоУчетаДт", Объект.СчетДебетаПоУмолчанию);
	Запрос.УстановитьПараметр("СчетМеждународногоУчетаКт", Объект.СчетКредитаПоУмолчанию);
	Запрос.УстановитьПараметр("ПоложениеСубконто",         ПоложениеСубконто);
	Запрос.УстановитьПараметр("ИскатьУточняющиеСубконтоДт", ЗначениеЗаполнено(Объект.ТипИсточникаУточненияСчетаДт));
	Запрос.УстановитьПараметр("ИскатьУточняющиеСубконтоКт", ЗначениеЗаполнено(Объект.ТипИсточникаУточненияСчетаКт));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаСубконтоДт = РезультатыЗапроса[3].Выбрать();
	ВыборкаСубконтоКт = РезультатыЗапроса[4].Выбрать();
	
	СтрокиКУдалению = Новый Массив; 
	Для каждого Строка Из ЗаполнениеСубконто.ПолучитьЭлементы() Цикл
		Если ПоложениеСубконто = Неопределено Или ПоложениеСубконто = Строка.ПоложениеСубконто Тогда
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из СтрокиКУдалению Цикл
		ЗаполнениеСубконто.ПолучитьЭлементы().Удалить(Строка);
	КонецЦикла;
	
	Шаблон = "%1 %2 " + НСтр("ru = 'и уточненные счета';
							|en = 'and specified accounts'");
	ЗаполнитьСубконтоСчета(ВыборкаСубконтоДт, НСтр("ru = 'Дт';
													|en = 'Dr'"), Шаблон);
	ЗаполнитьСубконтоСчета(ВыборкаСубконтоКт, НСтр("ru = 'Кт';
													|en = 'Cr'"), Шаблон);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСубконтоСчета(ВыборкаСубконто, СторонаСчета, Шаблон)
	
	Если ВыборкаСубконто.Количество() Тогда
		СтрокаСчета = ЗаполнениеСубконто.ПолучитьЭлементы().Добавить();
		СтрокаСчета.ПоложениеСубконто = СторонаСчета;
		Счет = ?(СторонаСчета = НСтр("ru = 'Дт';
									|en = 'Dr'"), Объект.СчетДебетаПоУмолчанию, Объект.СчетКредитаПоУмолчанию);
		СтрокаСчета.ПредставлениеПоложенияСубконто = СтрШаблон(Шаблон, СторонаСчета, Счет);
		СтрокаСчета.ПолучитьЭлементы().Очистить();
		Пока ВыборкаСубконто.Следующий() Цикл
			СтрокаСубконто = СтрокаСчета.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСубконто, ВыборкаСубконто, , "ПоложениеСубконто");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
