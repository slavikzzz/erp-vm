#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

Функция ЭтапЗаявкиПоТочкеМаршрута(ТочкаМаршрута) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭтапыЗаявокСотрудников.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЭтапыЗаявокСотрудников КАК ЭтапыЗаявокСотрудников
	               |ГДЕ
	               |	ЭтапыЗаявокСотрудников.ТочкаМаршрута = &ТочкаМаршрута";
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ЭтапыЗаявокСотрудников.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

Функция ТаблицаАктивныхЭтаповИРолейИсполнителя() Экспорт
	
	ТаблицаАктивныхЭтаповИРолейИсполнителя = Новый ТаблицаЗначений;
	ТаблицаАктивныхЭтаповИРолейИсполнителя.Колонки.Добавить("РольИсполнителя", Новый ОписаниеТипов("СправочникСсылка.РолиИсполнителей"));
	ТаблицаАктивныхЭтаповИРолейИсполнителя.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыЗаявокСотрудников"));
	ТаблицаАктивныхЭтаповИРолейИсполнителя.Колонки.Добавить("ВнешнийСервис", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭтапыЗаявокСотрудников.Ссылка КАК Ссылка,
	               |	ЭтапыЗаявокСотрудников.ТипЗаявки КАК ТипЗаявки,
	               |	ЭтапыЗаявокСотрудников.ВнешнийСервис КАК ВнешнийСервис
	               |ИЗ
	               |	Справочник.ЭтапыЗаявокСотрудников КАК ЭтапыЗаявокСотрудников
	               |ГДЕ
	               |	ЭтапыЗаявокСотрудников.Активен = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ОбработкаОбращенияСотрудника")
			И Не КабинетСотрудника.ИспользуетсяВерсияФормата("2.2") Тогда
			
			Продолжить;
		КонецЕсли;
		
		ТипЗаявки = Выборка.ТипЗаявки;
		Если Выборка.ВнешнийСервис Тогда
			ТипЗаявки = БизнесПроцессыЗаявокСотрудников.СоответствиеЗаявкиИТипаЗаявки()[ТипЗаявки];		
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаАктивныхЭтаповИРолейИсполнителя.Добавить();
		СтрокаТаблицы.РольИсполнителя = БизнесПроцессыЗаявокСотрудников.РолиИсполнителейЗаявокПоТипамЗапросов()[ТипЗаявки];
		СтрокаТаблицы.Этап = Выборка.Ссылка;
		СтрокаТаблицы.ВнешнийСервис = Выборка.ВнешнийСервис;
		
	КонецЦикла;
	
	Возврат ТаблицаАктивныхЭтаповИРолейИсполнителя;
	
КонецФункции

#Область ОбработчикиОбновленияИнформационнойБазы

#Область ЗаполнитьПредопределенныеЭтапы

Процедура ЗаполнитьПредопределенныеЭтапы() Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭтапыЗаявокСотрудников.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЭтапыЗаявокСотрудников КАК ЭтапыЗаявокСотрудников
	               |ГДЕ
	               |	ЭтапыЗаявокСотрудников.Предопределенный = ИСТИНА";
	
	ПредопределенныеЭтапы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	АктивныеЭтапы = СписокАктивныхЭтапов();
	ЭтапыВнешнегоСервиса = СписокЭтаповВнешнегоСервиса();
	СоответствиеЭтапаИТипаЗаявки = СоответствиеЭтапаИТипаЗаявки();
	СоответствиеЭтапаИТочкиМаршрута = СоответствиеЭтапаИТочкиМаршрута(); 
	
	Для Каждого ЭтапСсылка Из ПредопределенныеЭтапы Цикл
		Этап = ЭтапСсылка.ПолучитьОбъект();
		Этап.Активен = (АктивныеЭтапы.Найти(ЭтапСсылка) <> Неопределено);
		Этап.ВнешнийСервис = (ЭтапыВнешнегоСервиса.Найти(ЭтапСсылка) <> Неопределено);
		Этап.ТипЗаявки = СоответствиеЭтапаИТипаЗаявки[ЭтапСсылка];
		Этап.ТочкаМаршрута = СоответствиеЭтапаИТочкиМаршрута[ЭтапСсылка];
		Этап.Записать();
	КонецЦикла;
		
КонецПроцедуры

Функция СписокАктивныхЭтапов()
	
	АктивныеЭтапы = Новый Массив;
	
	АктивныеЭтапы.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыИзменитьЛичныеДанные"));
	АктивныеЭтапы.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыНалоговыйВычет"));
	АктивныеЭтапы.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтпуск"));
	АктивныеЭтапы.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ОформлениеБольничногоЛиста"));
	АктивныеЭтапы.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ФормированиеСправка2НДФЛ"));
	Если КабинетСотрудника.ИспользуетсяВерсияФормата("1.0") Тогда
		АктивныеЭтапы.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКабинетСотрудникаОтпуск"));	
	КонецЕсли;
	АктивныеЭтапы.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ОбработкаОбращенияСотрудника"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(АктивныеЭтапы, БизнесПроцессыЗаявокСотрудниковВнутренний.АктивныеЭтапыЗаявокСотрудников());
	
	Возврат АктивныеЭтапы;
	
КонецФункции

Функция СписокЭтаповВнешнегоСервиса()
	
	ЭтапыВнешнегоСервиса = Новый Массив;
	
	ЭтапыВнешнегоСервиса.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКабинетСотрудникаОтпуск"));
	
	Возврат ЭтапыВнешнегоСервиса;
	
КонецФункции

Функция СоответствиеЭтапаИТипаЗаявки()
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКабинетСотрудникаОтпуск"),
	    ПредопределенноеЗначение("Перечисление.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск"));
		
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыИзменитьЛичныеДанные"),
		Метаданные.БизнесПроцессы.ЗаявкаСотрудникаИзменитьЛичныеДанные.Имя);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыНалоговыйВычет"),
		Метаданные.БизнесПроцессы.ЗаявкаСотрудникаНалоговыйВычет.Имя);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтпуск"),
		Метаданные.БизнесПроцессы.ЗаявкаСотрудникаОтпуск.Имя);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ОформлениеБольничногоЛиста"),
		Метаданные.БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни.Имя);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ФормированиеСправка2НДФЛ"),
		Метаданные.БизнесПроцессы.ЗаявкаСотрудникаСправка2НДФЛ.Имя);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ОбработкаОбращенияСотрудника"),
		Метаданные.БизнесПроцессы.ОбращениеСотрудника.Имя);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		Соответствие,
		БизнесПроцессыЗаявокСотрудниковВнутренний.СоответствиеЭтапаЗаявкиСотрудникаИТипаЗаявки());	
		
	Возврат Соответствие;
	
КонецФункции

Функция СоответствиеЭтапаИТочкиМаршрута()
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыИзменитьЛичныеДанные"),
		БизнесПроцессы.ЗаявкаСотрудникаИзменитьЛичныеДанные.ТочкиМаршрута.Выполнить);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыНалоговыйВычет"),
		БизнесПроцессы.ЗаявкаСотрудникаНалоговыйВычет.ТочкиМаршрута.Выполнить);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтпуск"),
		БизнесПроцессы.ЗаявкаСотрудникаОтпуск.ТочкиМаршрута.Выполнить);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ОформлениеБольничногоЛиста"),
		БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни.ТочкиМаршрута.СоздатьБольничный);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ФормированиеСправка2НДФЛ"),
		БизнесПроцессы.ЗаявкаСотрудникаСправка2НДФЛ.ТочкиМаршрута.Выполнить);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ОбработкаОбращенияСотрудника"),
		БизнесПроцессы.ОбращениеСотрудника.ТочкиМаршрута.Выполнить);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		Соответствие,
		БизнесПроцессыЗаявокСотрудниковВнутренний.СоответствиеЭтапаЗаявкиСотрудникаИТочкиМаршрута());
	
	Возврат Соответствие;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
	
#КонецЕсли