#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает настройку формирования проводок, если она для плана счетов одна. Иначе возвращает Неопределено.
// 
// Параметры:
//   ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - 
//   
// Возвращаемое значение:
//   СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета, Неопределено - 
//
Функция НастройкаФормированияПроводокПоУмолчанию(ПланСчетов) Экспорт
	
	Если Не ЗначениеЗаполнено(ПланСчетов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	НастройкиФормированияПроводок.Ссылка
	|ИЗ
	|	Справочник.НастройкиФормированияПроводокМеждународногоУчета КАК НастройкиФормированияПроводок
	|ГДЕ
	|	НастройкиФормированияПроводок.Владелец = &ПланСчетов
	|	И НЕ НастройкиФормированияПроводок.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Количество = Выборка.Количество();
	
	Если Количество = 0 Тогда
		
		ОсновнаяНастройка = Справочники.НастройкиФормированияПроводокМеждународногоУчета.СоздатьЭлемент();
		ОсновнаяНастройка.Наименование = НСтр("ru = 'Основная';
												|en = 'Main'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОсновнаяНастройка.Владелец = ПланСчетов;
		ОсновнаяНастройка.Заполнить(Неопределено);
		ОсновнаяНастройка.Записать();
		
		Возврат ОсновнаяНастройка.Ссылка;
		
	ИначеЕсли Количество = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // СчетаЗакрытия()

// Структура реквизитов элемента справочника содержащая счета закрытия периода.
//
// Возвращаемое значение:
//   Структура - в ключах структуры имена реквизитов (табличных частей) счетов закрытия.
//
Функция СчетаЗакрытия() Экспорт

	Результат = Новый Структура;
	
	ПустойСчет = ПланыСчетов.Международный.ПустаяСсылка();
	Результат.Вставить("СчетУчетаДоходов",	ПустойСчет);
	Результат.Вставить("СчетУчетаРасходов", ПустойСчет);
	Результат.Вставить("СчетУчетаНераспределеннойПрибылиУбытка", ПустойСчет);
	
	ПустаяТЗ = Новый ТаблицаЗначений;
	ПустаяТЗ.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Международный"));
	Результат.Вставить("СчетаДоходов",	ПустаяТЗ);
	Результат.Вставить("СчетаРасходов",	ПустаяТЗ);
	Результат.Вставить("СчетаПрибылейУбытков",ПустаяТЗ);
	
	Возврат Результат;

КонецФункции // СчетаЗакрытия()

// Структура реквизитов элемента справочника содержащие счета отражения курсовых разниц.
//
// Возвращаемое значение:
//   Структура - в ключах структуры имена реквизитов (табличных частей) счетов отражения курсовых разниц.
//
Функция СчетаКурсовыхРазниц() Экспорт

	Результат = Новый Структура;
	
	ПустойСчет = ПланыСчетов.Международный.ПустаяСсылка();
	Результат.Вставить("ДоходыКР", ПустойСчет);
	Результат.Вставить("СтатьяДоходовКР", Неопределено);
	
	Результат.Вставить("РасходыКР", ПустойСчет);
	Результат.Вставить("СтатьяРасходовКР", Неопределено);
	
	Результат.Вставить("ДоходыОтРазницПриПересчетеВП", ПустойСчет);
	Результат.Вставить("СтатьяДоходовОтРазницПересчета", Неопределено);
	
	Результат.Вставить("РасходыОтРазницПриПересчетеВП", ПустойСчет);
	Результат.Вставить("СтатьяРасходовОтРазницПересчета", Неопределено);
	
	ПустаяТЗ = Новый ТаблицаЗначений;
	ПустаяТЗ.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Международный"));
	Результат.Вставить("ИсключитьИзРасчетаКР",	ПустаяТЗ);
	Результат.Вставить("ИсключитьИзПересчетаВП",ПустаяТЗ);
	
	Возврат Результат;

КонецФункции // СчетаКурсовыхРазниц()

// Возвращает таблицу счетов исключения из расчета курсовых разниц.
// 
// Параметры:
//	ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - 
//	
// Возвращаемое значение:
//  ТаблицаЗначений - счета учета исключаемые из расчета курсовых разниц.
//
Функция СчетаИсключенияРасчетаКР(ПланСчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Международный.Ссылка КАК Счет,
	|	Международный.ИсключитьИзРасчетаКурсовыхРазниц КАК Исключить,
	|	Международный.Порядок КАК Порядок
	|ИЗ
	|	ПланСчетов.Международный КАК Международный
	|ГДЕ
	|	Международный.ПланСчетов = &ПланСчетов
	|	И Международный.ИсключитьИзРасчетаКурсовыхРазниц = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу счетов исключения из расчета курсовых разниц.
// 
// Параметры:
//	ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - 
//	СчетаИсключения - ТаблицаЗначений - Таблица с колонками:
//		* СчетУчета - ПланСчетовСсылка.Международный - 
//
Процедура ЗаписатьСчетаИсключенияРасчетаКР(ПланСчетов, СчетаИсключения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаИсключения.Счет КАК Ссылка
	|ПОМЕСТИТЬ СчетаИсключения
	|ИЗ
	|	&СчетаИсключения КАК СчетаИсключения
	|ГДЕ
	|	СчетаИсключения.Исключить
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	Международный.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Международный.ИсключитьИзРасчетаКурсовыхРазниц
	|				И СчетаИсключения.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ Международный.ИсключитьИзРасчетаКурсовыхРазниц
	|				И НЕ СчетаИсключения.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Международный.ИсключитьИзРасчетаКурсовыхРазниц
	|	КОНЕЦ КАК ИсключитьИзРасчетаКурсовыхРазниц
	|ИЗ
	|	ПланСчетов.Международный КАК Международный
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		СчетаИсключения КАК СчетаИсключения
	|	ПО
	|		Международный.Ссылка = СчетаИсключения.Ссылка
	|ГДЕ
	|	ВЫБОР
	|		КОГДА Международный.ИсключитьИзРасчетаКурсовыхРазниц
	|				И СчетаИсключения.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ Международный.ИсключитьИзРасчетаКурсовыхРазниц
	|				И НЕ СчетаИсключения.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Международный.ИсключитьИзРасчетаКурсовыхРазниц
	|	КОНЕЦ <> Международный.ИсключитьИзРасчетаКурсовыхРазниц  
	|	И Международный.ПланСчетов = &ПланСчетов
	|";
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	Выборка  = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект(); // ПланСчетовОбъект.Международный - 
		Объект.ИсключитьИзРасчетаКурсовыхРазниц = Выборка.ИсключитьИзРасчетаКурсовыхРазниц;
		Объект.Записать();
		
	КонецЦикла
	
КонецПроцедуры

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	БлокируемыеРеквизиты.Добавить("СпособАннулированияПроводок");
	БлокируемыеРеквизиты.Добавить("ИспользоватьВыделениеДолгосрочныхАктивовОбязательств");
	БлокируемыеРеквизиты.Добавить("ПроводкиПоВыручкеБезНДС");
	БлокируемыеРеквизиты.Добавить("ЗакрытиеСчетовДоходовИРасходов");
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Организация") 
		И Параметры.Свойство("Отбор")
		И Параметры.Отбор.Свойство("Владелец") Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений();
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиФормированияПроводок.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ЕСТЬNULL(ПланыСчетовОрганизаций.Период, &ПустаяДата)) КАК ПериодПрименения
		|ПОМЕСТИТЬ ВтНастройкиФормированияПроводок
		|ИЗ
		|	Справочник.НастройкиФормированияПроводокМеждународногоУчета КАК НастройкиФормированияПроводок
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовОрганизаций
		|	ПО
		|		ПланыСчетовОрганизаций.Организация = &Организация
		|		И ПланыСчетовОрганизаций.НастройкаФормированияПроводок = НастройкиФормированияПроводок.Ссылка
		|ГДЕ
		|	НЕ НастройкиФормированияПроводок.ПометкаУдаления
		|	И НастройкиФормированияПроводок.Владелец = &ПланСчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|ВЫБРАТЬ
		|	НастройкиФормированияПроводок.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(НастройкиФормированияПроводок.Ссылка) КАК Представление,
		|	НастройкиФормированияПроводок.ПериодПрименения КАК ПериодПрименения
		|ИЗ
		|	ВтНастройкиФормированияПроводок КАК НастройкиФормированияПроводок
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодПрименения УБЫВ
		|";
		Запрос.УстановитьПараметр("Организация", Параметры.Организация);
		Запрос.УстановитьПараметр("ПланСчетов", Параметры.Отбор.Владелец);
		Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
		Выборка = Запрос.Выполнить().Выбрать();
		Индекс = 0;
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.ПериодПрименения) Тогда
				Представление = Выборка.Представление;
			ИначеЕсли Индекс = 0 Тогда
				Представление = СтрШаблон(НСтр("ru = '%1 (применяется с %2)';
												|en = '%1 (applied since %2)'"), 
					Выборка.Представление, Формат(Выборка.ПериодПрименения, "ДЛФ=D"));
			Иначе
				Представление = СтрШаблон(НСтр("ru = '%1 (применялась с %2)';
												|en = '%1 (has been applied since %2)'"), 
					Выборка.Представление, Формат(Выборка.ПериодПрименения, "ДЛФ=D"));
			КонецЕсли;
			ДанныеВыбора.Добавить(Выборка.Ссылка, Представление);
			Индекс = Индекс + 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру настроек формирования проводок. Если передан элемент справочника настроек, структура заполняется
// значениями реквизитов переданного элемента. Если параметр ЗаполнитьПоВсем имеет значение Истина, выполняется попытка 
// заполнения свойств структуры значениями соответствующих реквизитов, одинаковых во всех элементах справочника.
// 
// Параметры:
//  НастройкаФормированияПроводок - СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета - элемент справочника настроек
//  ЗаполнитьПоВсем - Булево - Определяет необходимость заполнения свойств значениями реквизитов, одинаковых во всех элементах справочника
//
// Возвращаемое значение:
//  Структура:
//   * ВариантФормированияПроводок - Неопределено, ПеречислениеСсылка.ВариантыФормированияПроводок
//   * СпособУчетаНесобственныхЦенностей - Неопределено, ПеречислениеСсылка.СпособыУчетаНесобственныхПодконтрольныхЦенностей
//   * СпособАннулированияПроводок - Неопределено, ПеречислениеСсылка.СпособыАннулированияПроводокМеждународногоУчета
//   * ВыделениеДолгосрочныхАктивовОбязательств - Неопределено, Булево
//   * ВыручкаБезНДС - Неопределено, Булево
//
Функция НастройкиФормированияПроводок(НастройкаФормированияПроводок = Неопределено, ЗаполнитьПоВсем = Истина) Экспорт
	
	НастройкиПроводок = Новый Структура();
	НастройкиПроводок.Вставить("ВариантФормированияПроводок", Неопределено);
	НастройкиПроводок.Вставить("СпособУчетаНесобственныхЦенностей", Неопределено);
	НастройкиПроводок.Вставить("СпособАннулированияПроводок", Неопределено);
	НастройкиПроводок.Вставить("ВыделениеДолгосрочныхАктивовОбязательств", Неопределено);
	НастройкиПроводок.Вставить("ВыручкаБезНДС", Неопределено);
	НастройкиПроводок.Вставить("ЗакрытиеСчетовДоходовИРасходов", Неопределено);
	
	Если ЗначениеЗаполнено(НастройкаФормированияПроводок) Тогда
		НастройкиПроводок.ВариантФормированияПроводок = "Владелец.ВариантФормированияПроводок";
		НастройкиПроводок.СпособУчетаНесобственныхЦенностей = "Владелец.СпособУчетаНесобственныхПодконтрольныхЦенностей";
		НастройкиПроводок.СпособАннулированияПроводок = "СпособАннулированияПроводок";
		НастройкиПроводок.ВыделениеДолгосрочныхАктивовОбязательств = "ИспользоватьВыделениеДолгосрочныхАктивовОбязательств";
		НастройкиПроводок.ВыручкаБезНДС = "ПроводкиПоВыручкеБезНДС";
		НастройкиПроводок.ЗакрытиеСчетовДоходовИРасходов = "ЗакрытиеСчетовДоходовИРасходов";
		
		НастройкиПроводок = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			НастройкаФормированияПроводок, НастройкиПроводок);
	ИначеЕсли ЗаполнитьПоВсем Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастройкиФормированияПроводок.Владелец.ВариантФормированияПроводок) КАК КоличествоВариантФормированияПроводок,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастройкиФормированияПроводок.Владелец.СпособУчетаНесобственныхПодконтрольныхЦенностей) КАК КоличествоСпособУчетаНесобственныхЦенностей,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастройкиФормированияПроводок.СпособАннулированияПроводок) КАК КоличествоСпособАннулированияПроводок,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастройкиФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств) КАК КоличествоВыделениеДолгосрочныхАктивовОбязательств,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастройкиФормированияПроводок.ПроводкиПоВыручкеБезНДС) КАК КоличествоВыручкаБезНДС,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастройкиФормированияПроводок.ЗакрытиеСчетовДоходовИРасходов) КАК КоличествоЗакрытиеСчетовДоходовИРасходов,
		|	МАКСИМУМ(НастройкиФормированияПроводок.Владелец.ВариантФормированияПроводок) КАК ВариантФормированияПроводок,
		|	МАКСИМУМ(НастройкиФормированияПроводок.Владелец.СпособУчетаНесобственныхПодконтрольныхЦенностей) КАК СпособУчетаНесобственныхЦенностей,
		|	МАКСИМУМ(НастройкиФормированияПроводок.СпособАннулированияПроводок) КАК СпособАннулированияПроводок,
		|	МАКСИМУМ(НастройкиФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств) КАК ВыделениеДолгосрочныхАктивовОбязательств,
		|	МАКСИМУМ(НастройкиФормированияПроводок.ПроводкиПоВыручкеБезНДС) КАК ВыручкаБезНДС,
		|	МАКСИМУМ(НастройкиФормированияПроводок.ЗакрытиеСчетовДоходовИРасходов) КАК ЗакрытиеСчетовДоходовИРасходов
		|ИЗ
		|	Справочник.НастройкиФормированияПроводокМеждународногоУчета КАК НастройкиФормированияПроводок
		|ГДЕ
		|	НЕ НастройкиФормированияПроводок.ПометкаУдаления
		|";
		Запрос = Новый Запрос(ТекстЗапроса);
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Если Выборка.КоличествоВариантФормированияПроводок = 1 Тогда
				НастройкиПроводок.ВариантФормированияПроводок = Выборка.ВариантФормированияПроводок;
			КонецЕсли;
			Если Выборка.КоличествоСпособУчетаНесобственныхЦенностей = 1 Тогда
				НастройкиПроводок.СпособУчетаНесобственныхЦенностей = Выборка.СпособУчетаНесобственныхЦенностей;
			КонецЕсли;
			Если Выборка.КоличествоСпособАннулированияПроводок = 1 Тогда
				НастройкиПроводок.СпособАннулированияПроводок = Выборка.СпособАннулированияПроводок;
			КонецЕсли;
			Если Выборка.КоличествоВыделениеДолгосрочныхАктивовОбязательств = 1 Тогда
				НастройкиПроводок.ВыделениеДолгосрочныхАктивовОбязательств = Выборка.ВыделениеДолгосрочныхАктивовОбязательств;
			КонецЕсли;
			Если Выборка.КоличествоВыручкаБезНДС = 1 Тогда
				НастройкиПроводок.ВыручкаБезНДС = Выборка.ВыручкаБезНДС;
			КонецЕсли;
			Если Выборка.КоличествоЗакрытиеСчетовДоходовИРасходов = 1 Тогда
				НастройкиПроводок.ЗакрытиеСчетовДоходовИРасходов = Выборка.ЗакрытиеСчетовДоходовИРасходов;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиПроводок;
	
КонецФункции

Функция НастройкаФормированияПроводокИспользуется(НастройкаФормированияПроводок) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НастройкаФормированияПроводок) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПланыСчетовОрганизаций.ПланСчетов КАК ПланСчетов,
	|	ПланыСчетовОрганизаций.Организация КАК Организация,
	|	ПланыСчетовОрганизаций.Период КАК НачалоПериода,
	|	ЕСТЬNULL(МИНИМУМ(ПериодыОкончанияДействияНастроек.Период), &ТекущаяДата) КАК ОкончаниеПериода
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовОрганизаций
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПериодыОкончанияДействияНастроек
	|		ПО ПланыСчетовОрганизаций.ПланСчетов = ПериодыОкончанияДействияНастроек.ПланСчетов
	|		 И ПланыСчетовОрганизаций.Организация = ПериодыОкончанияДействияНастроек.Организация
	|		 И ПланыСчетовОрганизаций.Период < ПериодыОкончанияДействияНастроек.Период
	|ГДЕ
	|	ПланыСчетовОрганизаций.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|СГРУППИРОВАТЬ ПО
	|	ПланыСчетовОрганизаций.ПланСчетов,
	|	ПланыСчетовОрганизаций.Организация,
	|	ПланыСчетовОрганизаций.Период
	|";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	ТекстЗапросаПроводок = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрБухгалтерии.Международный КАК Международный
	|ГДЕ
	|	Международный.Период МЕЖДУ &НачалоПериода77 И &ОкончаниеПериода77
	|	И Международный.ПланСчетов = &ПланСчетов77
	|	И Международный.Организация = &Организация77
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрБухгалтерии.МеждународныйБезКорреспонденции КАК Международный
	|ГДЕ
	|	Международный.Период МЕЖДУ &НачалоПериода77 И &ОкончаниеПериода77
	|	И Международный.ПланСчетов = &ПланСчетов77
	|	И Международный.Организация = &Организация77
	|";
	
	Выборка = Результат.Выбрать();
	ТекстыЗапросов = Новый Массив();
	НомерЗапроса = 1;
	
	Пока Выборка.Следующий() Цикл
		ТекстыЗапросов.Добавить(СтрЗаменить(ТекстЗапросаПроводок, "77", НомерЗапроса));
		Запрос.УстановитьПараметр("НачалоПериода" + НомерЗапроса, Выборка.НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода" + НомерЗапроса, Выборка.ОкончаниеПериода);
		Запрос.УстановитьПараметр("ПланСчетов" + НомерЗапроса, Выборка.ПланСчетов);
		Запрос.УстановитьПараметр("Организация" + НомерЗапроса, Выборка.Организация);
		НомерЗапроса = НомерЗапроса + 1;
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.НастройкиФормированияПроводокМеждународногоУчета.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.16.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dc287a94-cb93-4bfa-ae87-cf35807db656");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.НастройкиФормированияПроводокМеждународногоУчета.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Закрытие счетов доходов и расходов"" значением ""Ежемесячно"".';
									|en = 'Fills the ""Closing of income and expense accounts"" attribute with the ""Monthly"" value.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.НастройкиФормированияПроводокМеждународногоУчета.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.НастройкиФормированияПроводокМеждународногоУчета.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.НастройкиФормированияПроводокМеждународногоУчета.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.НастройкиФормированияПроводокМеждународногоУчета";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НастройкиФормированияПроводок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиФормированияПроводокМеждународногоУчета КАК НастройкиФормированияПроводок
	|ГДЕ
	|	НастройкиФормированияПроводок.ЗакрытиеСчетовДоходовИРасходов =
	|		ЗНАЧЕНИЕ(Перечисление.ЗакрытиеСчетовДоходовИРасходов.ПустаяСсылка)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	
	НастройкиФормированияПроводок = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, НастройкиФормированияПроводок);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.НастройкиФормированияПроводокМеждународногоУчета";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для каждого ЭлементСправочника Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСправочника.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			СправочникОбъект = ЭлементСправочника.Ссылка.ПолучитьОбъект(); // СправочникОбъект.НастройкиФормированияПроводокМеждународногоУчета
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СправочникОбъект.ЗакрытиеСчетовДоходовИРасходов) Тогда
				СправочникОбъект.ЗакрытиеСчетовДоходовИРасходов = Перечисления.ЗакрытиеСчетовДоходовИРасходов.Ежемесячно;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ЭлементСправочника.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
