#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтборАктуальные = Истина;

	Если Не Параметры.Свойство("ЗначенияЗаполнения") Тогда
		ВызватьИсключение НСтр("ru = 'Не поддерживается использование формы без указания налога';
								|en = 'Cannot use the form without specifying tax'");
	КонецЕсли;

	Параметры.ЗначенияЗаполнения.Свойство("Налог", Налог);
	
	Если Не ЗначениеЗаполнено(Налог) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан вид налога';
								|en = 'Tax kind is not specified'");
	КонецЕсли;
	
	ЗаполнитьДеревоЛьгот();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Развернем строки дерева
	Для каждого ГруппаСтрок Из Льготы.ПолучитьЭлементы() Цикл
		Элементы.Льготы.Развернуть(ГруппаСтрок.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборАктуальныеПриИзменении(Элемент)
	
	ЗаполнитьДеревоЛьгот();
	// Развернем строки дерева
	Для каждого ГруппаСтрок Из Льготы.ПолучитьЭлементы() Цикл
		Элементы.Льготы.Развернуть(ГруппаСтрок.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЛьготы

&НаКлиенте
Процедура ЛьготыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработатьВыборЛьготы(СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьВыполнить()
	ОбработатьВыборЛьготы();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДеревоЛьгот()
	
	ОписаниеЛьгот = ЛьготыПоИмущественнымНалогамПовтИсп.ДанныеОЛьготахПоИмущественнымНалогам(Налог, Не ОтборАктуальные);
	ДеревоЛьгот = РеквизитФормыВЗначение("Льготы"); // промежуточная коллекция для упорядочивания
	ДеревоЛьгот.Строки.Очистить();
	
	// Федеральные льготы (по НК)
	СтрокаГруппаЛьгот = ДеревоЛьгот.Строки.Добавить();
	СтрокаГруппаЛьгот.Категория = НСтр("ru = 'Федеральные льготы';
										|en = 'Federal tax reliefs'");
	
	Для каждого Льгота Из ОписаниеЛьгот.ФедеральныеЛьготы Цикл
	
		НоваяСтрока = СтрокаГруппаЛьгот.Строки.Добавить();
		НоваяСтрока.Категория         = Льгота.Значение.Категория;
		НоваяСтрока.КодЛьготы         = Льгота.Ключ;
		НоваяСтрока.ВидЛьготы         = Льгота.Значение.ВидЛьготы;
		НоваяСтрока.ПроцентУменьшения = Льгота.Значение.ПроцентЛьготы;
		НоваяСтрока.Актуальная        = Льгота.Значение.Актуальная;
	
	КонецЦикла; 
	
	СтрокаГруппаЛьгот.Строки.Сортировать("Актуальная Убыв, КодЛьготы");
	
	// Местные льготы (по местным нормативным актам или региональным законам)
	СтрокаГруппаЛьгот = ДеревоЛьгот.Строки.Добавить();
	СтрокаГруппаЛьгот.Категория = НСтр("ru = 'Региональные льготы';
										|en = 'Regional tax reliefs'");
	Если Налог = Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог Тогда
		СтрокаГруппаЛьгот.Категория = НСтр("ru = 'Местные льготы';
											|en = 'Local reliefs'");
	КонецЕсли;
	
	Для каждого Льгота Из ОписаниеЛьгот.МестныеЛьготы Цикл
	
		НоваяСтрока = СтрокаГруппаЛьгот.Строки.Добавить();
		НоваяСтрока.Местная           = Истина;
		НоваяСтрока.ВидЛьготы         = Льгота.Ключ;
		НоваяСтрока.Категория         = Льгота.Значение.Категория;
		НоваяСтрока.КодЛьготы         = Льгота.Значение.КодЛьготы;
		НоваяСтрока.Актуальная        = Истина;
		
	КонецЦикла; 
		
	ЗначениеВРеквизитФормы(ДеревоЛьгот, "Льготы");
	
	Элементы.ОтборАктуальные.Видимость = ОписаниеЛьгот.ЕстьНеактуальные;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЛьготы(СтандартнаяОбработка = Неопределено)
	
	// Открытие формы нового или существующего элемента справочника
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Льготы.ТекущиеДанные;
	
	// Запрещаем выбирать строки верхнего уровня
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ТекущиеДанные.Местная Тогда
		
		// Федеральная льгота с конкретным кодом может быть только одна.
		// Если находим существующий элемент, то выбираем его, а не создаем новый.
		ТекущаяСсылка = Неопределено;
		
		ТекущаяСсылка = ФедеральнаяЛьготаПоКоду(Налог, ТекущиеДанные.КодЛьготы);
		Если Не ЗначениеЗаполнено(ТекущаяСсылка) Тогда
			
			ТекущаяСсылка = СохранитьВыбраннуюЛьготу(Элементы.Льготы.ТекущаяСтрока);
			
			Если Не ЗначениеЗаполнено(ТекущаяСсылка) Тогда
				Возврат;
			КонецЕсли;	
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Добавлена новая льгота.';
					|en = 'A new relief is added.'"),,,
				БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
		ОповеститьОВыборе(ТекущаяСсылка);
		Оповестить("Запись_ОснованияЛьготПоИмущественнымНалогам", Неопределено, ТекущаяСсылка);
		
	Иначе
		
		// Новая местная (региональная) льгота
		ПараметрыФормы = Новый Структура;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Налог", Налог);
		ЗначенияЗаполнения.Вставить("УстановленаМестнымНормативнымАктом", Истина);
		ЗначенияЗаполнения.Вставить("КодЛьготы", ТекущиеДанные.КодЛьготы);
		ЗначенияЗаполнения.Вставить("ВидЛьготы", ТекущиеДанные.ВидЛьготы);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Справочник.ОснованияЛьготПоИмущественнымНалогам.Форма.ФормаЭлемента", ПараметрыФормы, ВладелецФормы);
		
		Закрыть();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФедеральнаяЛьготаПоКоду(Налог,КодЛьготы)
	
	Возврат Справочники.ОснованияЛьготПоИмущественнымНалогам.ФедеральнаяЛьготаПоКоду(Налог, КодЛьготы);
	
КонецФункции

&НаСервере
Функция СохранитьВыбраннуюЛьготу(Знач ВыбраннаяСтрока)	

	ТекущиеДанные = Льготы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Справочники.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка();
	КонецЕсли; 
	
	НоваяЛьгота = Справочники.ОснованияЛьготПоИмущественнымНалогам.СоздатьЭлемент();
	
	ДанныеЗаполнения = Новый Структура;
	
	ДанныеЗаполнения.Вставить("Налог", Налог);
	ДанныеЗаполнения.Вставить("КодЛьготы", ТекущиеДанные.КодЛьготы);
	ДанныеЗаполнения.Вставить("ВидЛьготы", ТекущиеДанные.ВидЛьготы);
	ДанныеЗаполнения.Вставить("ПроцентУменьшения", ТекущиеДанные.ПроцентУменьшения);
	НоваяЛьгота.Заполнить(ДанныеЗаполнения);
	НоваяЛьгота.Записать();
	
	Возврат НоваяЛьгота.Ссылка;

КонецФункции

#КонецОбласти
