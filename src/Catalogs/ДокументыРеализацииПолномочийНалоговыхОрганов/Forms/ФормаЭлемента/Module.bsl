&НаКлиенте
Перем КонтекстЭДОКлиент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	Если ЭтоНовый Тогда
		ТекстПредупреждения = НСтр("ru = 'Копирование входящих сообщений запрещено!';
									|en = 'Копирование входящих сообщений запрещено!'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// инициализируем контекст ЭДО - модуль обработки
	ТекстСообщения = "";
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщения);
	Если КонтекстЭДОСервер = Неопределено Тогда 
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПодтверждениеОтправилОператор = ТребованияФНСВызовСервера.ПодтверждениеОтправилОператор(Объект.Ссылка);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
	ПрименяетсяФорматОтветаНаТребованиеПояснений_5_02 = КонтекстЭДОСервер.ПрименяетсяФорматОтветаНаТребованиеПояснений_5_02();
	
	ОпределитьВидДокумента(КонтекстЭДОСервер);
	ИзвлечьДанныеТребования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// При записи ответа необходимо перерисовать количество ответов в панели требования. 
	Если ИмяСобытия = "Запись_ОписиИсходящихДокументовВНалоговыеОрганы" 
		И ТипЗнч(Источник) = Тип("СправочникСсылка.ОписиИсходящихДокументовВНалоговыеОрганы")
		ИЛИ	ИмяСобытия = "Запись_ПоясненияКДекларацииПоНДС" 
		И ТипЗнч(Источник) = Тип("ДокументСсылка.ПоясненияКДекларацииПоНДС")
		ИЛИ	ИмяСобытия = "Запись_ПерепискаСКонтролирующимиОрганами" 
		И ТипЗнч(Источник) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами")
		ИЛИ	ТипЗнч(Источник) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения")
		ИЛИ	СтрНайти(Врег(ИмяСобытия), НСтр("ru = 'ОТПРАВ';
												|en = 'ОТПРАВ'")) Тогда
		
		ОбновитьТекущееСостояниеДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ДокументыРеализацииПолномочийНалоговыхОрганов", , Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗакрытьПанельИнформацииНажатие(Элемент)
	БольшеНеПоказыватьИнформационнуюПанель();
КонецПроцедуры

&НаКлиенте
Процедура НеЗаполненКалендарьРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ТребованияФНСКлиент.ОткрытьКалендарь(СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НеУдалосьРазобратьPDFРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ТребованияФНСКлиент.ОткрытьКалендарь(СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтветыНажатие(Элемент)
	
	КонтекстЭДОКлиент.НажатиеНаКнопкуПоказатьОтветыПоТребованию(Объект.Ссылка, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаСрокиНажатие(Элемент)
	
	ТребованияФНСКлиент.ПоказатьИнформациюоСроках();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФайла = НавигационнаяСсылкаФорматированнойСтроки;
	
	Результат = ПолучитьВложениеНаСервере(ИмяФайла);
	Если ЗначениеЗаполнено(Результат.ТекстПредупреждения) Тогда 
		ПоказатьПредупреждение(, Результат.ТекстПредупреждения);
	ИначеЕсли Результат.ВАрхиве Тогда 
		КонтекстЭДОКлиент.ПоказатьУведомлениеАрхивныхФайлов(, 9, 3, Истина);
		Возврат;
	ИначеЕсли ЭтоXML(ИмяФайла) Тогда
		Текст = ТекстСообщения(Результат.АдресДанных);
		ДокументооборотСКОКлиент.ПоказатьВходящееИзвещениеФНС(ЭтотОбъект, Текст);
	Иначе
		ОперацииСФайламиЭДКОКлиент.ОткрытьФайл(Результат.АдресДанных, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоXML(ИмяФайла) Экспорт
	
	Возврат Прав(ВРег(ИмяФайла), 4) = ".XML";
					
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОтветыНажатие(Элемент)
	КонтекстЭДОКлиент.НажатиеНаКнопкуПоказатьОтветыПоТребованию(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументаОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Объект.ДокументОснование);

КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПриАктивизацииСтроки(Элемент)
	
	#Если ВебКлиент Тогда
		ПодключитьОбработчикОжидания("СнятьВыделениеСтроки", 0.1, Истина);
	#Иначе
		СнятьВыделениеСтроки();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПометкаПриИзменении(Элемент)

	СуммаУплаты = 0;
	Для Каждого СтрокаТаблицы Из Платежи Цикл
		СуммаУплаты = СуммаУплаты + ?(СтрокаТаблицы.Пометка, СтрокаТаблицы.Сумма, 0);
	КонецЦикла;
	ПодробностиОплаты = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ПолучитьПредставлениеУплаты(ДанныеТребования.Сумма, СуммаУплаты));
	Элементы.СформироватьПлатеж.Доступность = СуммаУплаты <> 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПроизведенаПриИзменении(Элемент)
	
	ЗаписатьИзмененияТребования(Неопределено, ОплатаПроизведена);
	НачальноеОтображениеТребований(Платежи.Количество() = 1 И ЗначениеЗаполнено(ДанныеТребования.ДатаПлатежа));
	Оповестить("Запись_ДокументыРеализацииПолномочийНалоговыхОрганов", , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПлатежкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИщемКлюч = НСтр("ru = 'ПлатежноеПоручениеФорма';
					|en = 'ПлатежноеПоручениеФорма'");
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, ИщемКлюч) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрылиФорму = Ложь;
		ТекущийСчетчик = Число(Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина(ИщемКлюч) + 1));
		ВсеДокументы = ПолучитьСсылкиПлатежныхПоручений();
		ПараметрыФормы = Новый Структура("Ключ", ВсеДокументы[ТекущийСчетчик].Ссылка);
		ДокументооборотСКОКлиентПереопределяемый.ОткрытьПлатежноеПоручениеТребования(ПараметрыФормы, ОткрылиФорму);
		Если ОткрылиФорму <> Истина Тогда
			ПоказатьЗначение(Неопределено, ВсеДокументы[ТекущийСчетчик].Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиКСверкеИмущественногоНалога(Команда)
	
	ДокументооборотСКОКлиентПереопределяемый.ПерейтиКСверкеПоИмущественномуНалогу(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ПечатнаяФормаДокументаНО = ТабличныйДокументНО(Объект.Ссылка);
	КонтекстЭДОКлиент.НапечататьДокумент(ПечатнаяФормаДокументаНО, Объект.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьВложения(Команда)
	
	СохранитьВложения();

КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьОтвет(Команда)
	
	КонтекстЭДОКлиент.СоздатьОтветНаДокументРеализацииПолномочий(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодтвердитьПрием(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеПодтвержденияПриемаИлиОтказаВПриеме", 
		ЭтотОбъект);
		
	КонтекстЭДОКлиент.СоздатьРезультатПриемаВходящейОписиИнтерактивноПоДокументуОписи(Объект.Ссылка, Истина, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтказатьВПриеме(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеПодтвержденияПриемаИлиОтказаВПриеме", 
		ЭтотОбъект);
	
	КонтекстЭДОКлиент.СоздатьРезультатПриемаВходящейОписиИнтерактивноПоДокументуОписи(Объект.Ссылка, Ложь, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры
	
&НаКлиенте
Процедура ЗапроситьСверку(Команда)
	
	КонтекстЭДОКлиент.СоздатьЗапросНаСверку(
		Объект.Организация, 
		ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПустаяСсылка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатуОтвета(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ИзменитьДатуОтветаЗавершение", ЭтотОбъект);
	ТребованияФНСКлиент.ИзменитьСрокТребования(Объект.Ссылка, ОповещениеЗавершения);
	ТекущийЭлемент = Элементы.Комментарий;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПлатежноеПоручение(Команда)
	
	ОткрытьФормуФормированияПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПлатеж(Команда)
	
	МассивПлатежей = Новый Массив;
	Для Каждого СтрокаМассива Из ПолучитьСсылкиПлатежныхПоручений() Цикл
		МассивПлатежей.Добавить(СтрокаМассива.Ссылка);
	КонецЦикла;
	
	ДокументооборотСКОКлиентПереопределяемый.СформироватьВыгрузкуПлатежныхПоручений(ЭтотОбъект, МассивПлатежей);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьВложениеНаСервере(ИмяФайла)
	
	Результат = Новый Структура("ТекстПредупреждения, АдресДанных, ВАрхиве", "",, Ложь);
	
	ТекстСообщения = "";
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщения);
	Если КонтекстЭДОСервер = Неопределено Тогда 
		Результат.ТекстПредупреждения = ТекстСообщения;
		Возврат Результат;
	КонецЕсли;
	
	// получаем вложение
	СтрВложения = КонтекстЭДОСервер.ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Объект.Ссылка, ИмяФайла);
	Если СтрВложения.Количество() = 0 Тогда
		Результат.ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вложение с именем  %1 не обнаружено.';
																									|en = 'Вложение с именем  %1 не обнаружено.'"), Символ(34) + ИмяФайла + Символ(34));
		Возврат Результат;
	КонецЕсли;
	
	Вложение = СтрВложения[0];
	
	Если Вложение.ВАрхиве Тогда 
		Результат.ВАрхиве = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Адрес = ПоместитьВоВременноеХранилище(Вложение.Данные.Получить(), УникальныйИдентификатор);
	Результат.АдресДанных = Адрес;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроверитьВложения(Всего, ВАрхиве)
	
	КонтекстМодуля = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ВложенияОснования = КонтекстМодуля.ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Объект.Ссылка);
	
	Всего = 0;
	ВАрхиве = 0;
	
	Для Каждого Вложение Из ВложенияОснования Цикл 
		ВАрхиве = ВАрхиве + ?(Вложение.ВАрхиве, 1, 0);
		Всего = Всего + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложения()
	
	МассивИменВложений = Новый Массив;
	Для Каждого Элемент Из Вложения Цикл
		МассивИменВложений.Добавить(Элемент.Значение.ИмяФайла);
	КонецЦикла;
	
	Если МассивИменВложений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Всего = 0;
	ВАрхиве = 0;
	ПроверитьВложения(Всего, ВАрхиве);
	
	ВхПараметры = Новый Структура("МассивИменВложений", МассивИменВложений);
	
	Если ВАрхиве > 0 Тогда 
		ВсеВАрхиве = ?(ВАрхиве = Всего, 1, 0);		
		Описание = Новый ОписаниеОповещения("СохранитьВложенияПослеПроверкиЗавершение", ЭтотОбъект, ВхПараметры);
		КонтекстЭДОКлиент.ПоказатьУведомлениеАрхивныхФайлов(Описание, 18 + ВсеВАрхиве, 0, ?(ВсеВАрхиве = 1, Истина, Ложь));
		Возврат;
	КонецЕсли;
	
	СохранитьВложенияПослеПроверкиЗавершение(КодВозвратаДиалога.Да, ВхПараметры);
			
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПослеПроверкиЗавершение(Результат, ВхПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		
		МассивОписанийПолучаемыеФайлы = ПолучитьМассивОписанийФайловВложений(ВхПараметры.МассивИменВложений);
		ОперацииСФайламиЭДКОКлиент.СохранитьФайлы(МассивОписанийПолучаемыеФайлы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		Закрыть();
	КонецЕсли;

	Сейчас = ТекущаяДата();
	УправлениеЭУ();
	
	ПодключитьОбработчикОжидания("РаспознатьСодержимоеТребования", 0.1, Истина);

КонецПроцедуры


#Область РазделТребованиеНаУплату

&НаКлиенте
Процедура ОткрытьФормуФормированияПлатежей()
	
	МассивПлатежей = Новый Массив;
	Для Каждого СтрокаТаблицы Из Платежи Цикл
		Если НЕ СтрокаТаблицы.Пометка Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Сумма", СтрокаТаблицы.Сумма);
		НоваяСтрока.Вставить("КБК", СтрокаТаблицы.КБК);
		НоваяСтрока.Вставить("ОКТМО", СтрокаТаблицы.ОКТМО);
		НоваяСтрока.Вставить("УИН", СтрокаТаблицы.УИН);
		НоваяСтрока.Вставить("Пометка", СтрокаТаблицы.Пометка);
		МассивПлатежей.Добавить(НоваяСтрока);
	КонецЦикла;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СформироватьПлатежноеПоручениеЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("КонтролирующийОрган", Объект.НалоговыйОрган);
	ПараметрыФормы.Вставить("ДокументКО", Объект.Ссылка);
	ПараметрыФормы.Вставить("Платежи", МассивПлатежей);
	ПараметрыФормы.Вставить("ДанныеТребования", ДанныеТребования);
	ПараметрыФормы.Вставить("СоздатьСразу", Истина);
	ОткрытьФорму("Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов.Форма.ФормированиеОплаты", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура РаспознатьСодержимоеТребования()
	
	НачальноеОтображениеТребований();
	
	Если ДанныеТребования <> Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ЭтоТребованиеУплаты Тогда
		ДанныеТребования = "НеНужно";
		Возврат;
	КонецЕсли;
		
	АдресДанных = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ТекущаяОперация = РаспознатьСодержимоеТребованияСервер(АдресДанных);
	ОповещениеЗавершения = Новый ОписаниеОповещения("РаспознатьСодержимоеТребованияЗавершение", ЭтотОбъект, Новый Структура("АдресДанных", АдресДанных));
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяОперация, "Статус") = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ТекущаяОперация, ОповещениеЗавершения, ПараметрыОжидания);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, ТекущаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальноеОтображениеТребований(РазборСодержимого = Ложь)
	
	Если Платежи.Количество() > 0 И НЕ РазборСодержимого Тогда
		Элементы.Платежи.ТекущаяСтрока = Платежи[0].ПолучитьИдентификатор();
	Иначе
		Элементы.Платежи.ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознатьСодержимоеТребованияЗавершение(ТекущаяОперация, ДополнительныеПараметры) Экспорт
	
	РезультатРазбора = ПолучитьИзВременногоХранилища(ДополнительныеПараметры.АдресДанных);
	СохраненныеДанные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатРазбора, "ДополнительныеДанные");
	ОбработатьДанныеТребования(СохраненныеДанные);
	
	ИзвлечьДанныеТребования();
	ОформитьСрокиПредставления();
	НачальноеОтображениеТребований(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПлатежноеПоручениеЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		Для Каждого СтрокаМассива Из РезультатВыбора Цикл
			ДанныеТребования.Ссылки.Добавить(СтрокаМассива);
		КонецЦикла;
		
		Всего = ДанныеТребования.Платежи.ВГраница();
		Для Счетчик = 0 По Всего Цикл
			ТекущаяСтрока = Платежи.НайтиСтроки(Новый Структура("НомерВМассиве", Всего - Счетчик));
			Если ТекущаяСтрока.Количество() = 1 И ТекущаяСтрока[0].Пометка Тогда
				ДанныеТребования.Платежи.Удалить(Всего - Счетчик);
			КонецЕсли;
		КонецЦикла;
		ЗаписатьИзмененияТребования(ДанныеТребования, Истина);
		Оповестить("Запись_ДокументыРеализацииПолномочийНалоговыхОрганов", , Объект.Ссылка);
		
		#Если ВебКлиент Тогда
			Элементы.ДекорацияПлатежки.Заголовок = 
				Новый ФорматированнаяСтрока(Элементы.ДекорацияПлатежки.Заголовок, Символы.ПС);
		#КонецЕсли
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПредставлениеУплаты(Состояние)
	
	Просрочено = ЗначениеЗаполнено(Состояние.СрокОплаты) И НачалоДня(ТекущаяДатаСеанса()) > Состояние.СрокОплаты;
	
	Результат = "";
	ПредставлениеСрока = "";
	ПредставлениеДокументов = "";
	КоличествоПлатежек = 0;
	ВыбраннаяСумма = 0;
	Если ТипЗнч(ДанныеТребования) = Тип("Структура") Тогда 
		КоличествоПлатежек = ДанныеТребования.Ссылки.Количество();
		Для Каждого СтрокаМассива Из ДанныеТребования.Платежи Цикл
			ВыбраннаяСумма = ВыбраннаяСумма + ?(СтрокаМассива.Пометка, СтрокаМассива.Сумма, 0);
		КонецЦикла;
	КонецЕсли;
	
	Результат = ПолучитьПредставлениеУплаты(Состояние.Сумма, ?(Платежи.Количество() > 1 ИЛИ КоличествоПлатежек > 0 , ВыбраннаяСумма, Неопределено));
	
	Если НЕ ЗначениеЗаполнено(Состояние.Сумма) Тогда
		Элементы.ГруппаОплаты.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Состояние.СрокОплаты) Тогда
		Разница = (НачалоДня(ТекущаяДатаСеанса()) - Состояние.СрокОплаты) / (60*60*24);
		ПредставлениеСрока = НСтр("ru = 'Срок:';
									|en = 'Срок:'") + " " 
			+ "<span style=""font:ШрифтЖирныйБРО"">" + НСтр("ru = 'до ';
															|en = 'до '")
			+ Формат(Состояние.СрокОплаты, "ДЛФ=D") + "</span>.";
		Если НЕ Состояние.ОтветУжеДан Тогда
			Если Разница > 0 Тогда
				ПредставлениеСрока = ПредставлениеСрока + " " + ТребованияФНС.ПредставлениеПросроченныхДней(Разница);
			Иначе
				ПредставлениеСрока = ПредставлениеСрока + " " + ТребованияФНС.ПредставлениеОставшихсяДней(-Разница);
			КонецЕсли;
			ПредставлениеСрока = ПредставлениеСрока + "."
		КонецЕсли;
	КонецЕсли;

	ПредставлениеДокументов = "<span style=""font:ШрифтЗаголовкаНаклонныйБРО"">" + НСтр("ru = 'Подготовка платежного документа';
																						|en = 'Подготовка платежного документа'") + "</span>"
									+ Символы.ПС;
	
	Если КоличествоПлатежек > 0 Тогда
		Если КоличествоПлатежек > 1 Тогда
			ПредставлениеДокументов = "<span style=""font:ШрифтЗаголовкаНаклонныйБРО"">" + НСтр("ru = 'Подготовка платежных документов';
																								|en = 'Подготовка платежных документов'") + "</span>"
									+ Символы.ПС;
		КонецЕсли;
		
		ВсеДокументы = ПолучитьСсылкиПлатежныхПоручений();
		ШаблонДокумента = ?(Платежи.Количество() > 0, "   ", "") + "<a href=""%1"">%2</a>";
		
		Для Каждого СтрокаМассива Из ВсеДокументы Цикл
			ПредставлениеДокументов = ПредставлениеДокументов + Символы.ПС + Символы.ПС
						+ СтрШаблон(ШаблонДокумента, СтрокаМассива.НавигационнаяСсылка, СтрокаМассива.ПредставлениеСсылки);
		КонецЦикла;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеТребования) Тогда
		ПредставлениеДокументов = НСтр("ru = 'Обработка содержимого требования';
										|en = 'Обработка содержимого требования'");
		
	КонецЕсли;
	
	ПодробностиОплаты = СтроковыеФункции.ФорматированнаяСтрока(Результат);
	Элементы.ДекорацияОжидание.Видимость = НЕ ЗначениеЗаполнено(ДанныеТребования);
	Элементы.ДекорацияПлатежки.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ПредставлениеДокументов);
	Элементы.ДекорацияПлатежки.Видимость = ЗначениеЗаполнено(ПредставлениеДокументов);
	Элементы.Платежи.Видимость = Платежи.Количество() > 0;
	Элементы.СформироватьПлатеж.Видимость = Платежи.Количество() > 0;
	Элементы.СформироватьПлатеж.Доступность = Платежи.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() > 0;
	Элементы.ВыгрузитьПлатеж.Видимость = ВыгрузкаПлатежныхПоручений И КоличествоПлатежек > 0;
	Элементы.ДекорацияСрокОплаты.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ПредставлениеСрока);
	Элементы.ДекорацияСрокОплаты.Видимость = ЗначениеЗаполнено(ПредставлениеСрока);
	Элементы.ПлатежиПометка.Видимость = Платежи.Количество() > 1 ИЛИ КоличествоПлатежек > 0;
	Элементы.Платежи.ВысотаВСтрокахТаблицы = Платежи.Количество();
	Элементы.ОплатаПроизведена.Видимость = КоличествоПлатежек = 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеУплаты(СуммаУплаты, ВыбраннаяСумма = Неопределено)
	
	Результат = "";
	
	Если ЗначениеЗаполнено(СуммаУплаты) Тогда
		Результат =  НСтр("ru = 'Общая сумма:';
							|en = 'Общая сумма:'") + " <b>" + Формат(Цел(СуммаУплаты), "ЧЦ=15; ЧН=00") 
		+ НСтр("ru = ' руб. ';
				|en = ' руб. '") + Формат(СуммаУплаты % 1 * 100, "ЧЦ=2; ЧН=00")
		+ НСтр("ru = ' коп. ';
				|en = ' коп. '") + "</b>";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаписатьИзмененияТребования(СохранитьДанныеТребования, ОплатаУжеЕсть)

	ЗаписатьДанныеТребования(СохранитьДанныеТребования, ОплатаУжеЕсть);
	ИзвлечьДанныеТребования();
	ОформитьСрокиПредставления();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеТребования(СохраненныеДанные)

	Если СохраненныеДанные = Неопределено Тогда
		ДанныеТребования = "Ошибка";
		Возврат;
	Иначе
		ДанныеТребования = ПодготовитьДанныеТребованияУплаты(СохраненныеДанные);
		Для Каждого СтрокаМассива Из ДанныеТребования.КБК Цикл
			Если СтрокаМассива.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаМассива);
			НоваяСтрока.Вставить("Пометка", Истина);
			ДанныеТребования.Платежи.Добавить(НоваяСтрока);
		КонецЦикла;
		ЗаписатьДанныеТребования(ДанныеТребования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеТребования(СохранитьДанныеТребования = Неопределено, ОплатаУжеЕсть = Неопределено)
	
	ЗаписьТребования = Новый ЗаписьJSON;
	ЗаписьТребования.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	НастройкаЗаписи = Новый НастройкиСериализацииJSON;
	НастройкаЗаписи.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	ЗаписатьJSON(ЗаписьТребования, СохранитьДанныеТребования, НастройкаЗаписи);
	ПоляРегистра = Новый Структура;
	Если СохранитьДанныеТребования <> Неопределено Тогда
		ПоляРегистра.Вставить("ДанныеТребования", ЗаписьТребования.Закрыть());
	КонецЕсли;
	Если ОплатаУжеЕсть <> Неопределено Тогда
		ПоляРегистра.Вставить("ОтветУжеДан", ОплатаУжеЕсть);
	КонецЕсли;

	ТребованияФНС.ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребований(Объект.Ссылка, ПоляРегистра);
	
КонецПроцедуры

&НаСервере
Функция РаспознатьСодержимоеТребованияСервер(АдресДанных)
	
	Результат = Неопределено;
	
	Если ДанныеТребования = Неопределено Тогда
		ПараметрыОперации = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
		ПараметрыОперации.ОжидатьЗавершение = 30;
		Результат = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыОперации, "ТребованияФНС.ИзвлечьДанныеТребованияИзPDF", 
							Новый Структура("Ссылка", Объект.Ссылка), АдресДанных);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкиПлатежныхПоручений()
	
	Результат = Новый Массив;
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТребования, "Ссылки");
	
	Если МассивСсылок <> Неопределено И МассивСсылок.Количество() > 0 Тогда
		ПолнаяСсылка = СтрРазделить(МассивСсылок[0], ";");

		Попытка
			МетаданныеОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолнаяСсылка[0]);
		Исключение
			Возврат Результат;
		КонецПопытки;
		
		ЕстьСумма = Ложь;
		ЕстьДокумент = Ложь;
		ЕстьПодсистема = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрефиксацияОбъектов");
		РеквизитыОбъекта = "Ссылка";
		Если МетаданныеОбъекта.ПустаяСсылка().Метаданные().Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			РеквизитыОбъекта = РеквизитыОбъекта + ",СуммаДокумента";
			ЕстьСумма = Истина;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта.ПустаяСсылка().Метаданные()) Тогда
			РеквизитыОбъекта = РеквизитыОбъекта + ",Дата,Номер";
			ЕстьДокумент = Истина;
		КонецЕсли;

		МодульПрефиксацияОбъектовКлиентСервер = Неопределено;
		Если ЕстьПодсистема Тогда
			МодульПрефиксацияОбъектовКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
		КонецЕсли;
		
		Для Каждого СтрокаМассива Из МассивСсылок Цикл
			ПолнаяСсылка = СтрРазделить(СтрокаМассива, ";");
			НашлиСсылку = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МетаданныеОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ПолнаяСсылка[1])), 
								РеквизитыОбъекта, Истина);
			
			Если ЗначениеЗаполнено(НашлиСсылку.Ссылка) Тогда
				НоваяСтрока = Новый Структура;
				Если ЕстьДокумент И ЕстьПодсистема Тогда
					ПредставлениеСсылки =  НСтр("ru = 'Платежное поручение';
												|en = 'Платежное поручение'") + " "
							+ МодульПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НашлиСсылку.Номер, Истина, Истина)
							+ НСтр("ru = ' от ';
									|en = ' от '") + Формат(НашлиСсылку.Дата, "ДФ=dd.MM.yyyy; ДЛФ=D");
				Иначе
					ПредставлениеСсылки = СокрЛП(НашлиСсылку.Ссылка);
				КонецЕсли;
				ПредставлениеСсылки = ПредставлениеСсылки + ?(ЕстьСумма, НСтр("ru = ' на сумму ';
																				|en = ' на сумму '") + Формат(НашлиСсылку.СуммаДокумента, "ЧЦ=15; ЧДЦ=2") + НСтр("ru = ' руб.';
																																								|en = ' руб.'"), "");
				НоваяСтрока.Вставить("ПредставлениеСсылки", ПредставлениеСсылки);
				НоваяСтрока.Вставить("НавигационнаяСсылка", НСтр("ru = 'ПлатежноеПоручениеФорма';
																|en = 'ПлатежноеПоручениеФорма'") + Формат(Результат.Количество(), "ЧЦ=10; ЧН=; ЧГ=0"));
				НоваяСтрока.Вставить("Ссылка", НашлиСсылку.Ссылка);
				Результат.Добавить(НоваяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеТребованияУплаты(СохраненныеДанные)
	
	Результат = ОбработкаФайловPDF.ДанныеОплатыТребования();
	Результат.Вставить("Ссылки", Новый Массив);
	Результат.Вставить("Платежи", Новый Массив);
	ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИзвлечьДанныеТребования()
	
	Если НЕ ЭтоТребованиеУплаты Тогда
		Возврат;
	КонецЕсли;
	
	Состояние = ТребованияФНС.РасширенноеСостояниеПодтвержденияИОтвета(Объект.Ссылка, ТекущаяДатаСеанса());
	ТекущиеДанные = Состояние.ДанныеТребования;
	
	Если НЕ ПустаяСтрока(ТекущиеДанные) Тогда
		ОплатаПроизведена = Состояние.ОтветУжеДан;

		Попытка
			ЧтениеТребования = Новый ЧтениеJSON;
			ЧтениеТребования.УстановитьСтроку(ТекущиеДанные);
			СохраненныеДанные = ПрочитатьJSON(ЧтениеТребования, , "ДатаПлатежа", ФорматДатыJSON.ISO);
			ДанныеТребования = ПодготовитьДанныеТребованияУплаты(СохраненныеДанные);
		Исключение
			ДанныеТребования = "Ошибка";
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеТребования) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПлатежей = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТребования, "Платежи");
	
	Платежи.Очистить();
	
	Если МассивПлатежей <> Неопределено Тогда
		Для Каждого СтрокаМассива Из МассивПлатежей Цикл
			НоваяСтрока = Платежи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
			НоваяСтрока.ПредставлениеСумма = Формат(НоваяСтрока.Сумма, "ЧЦ=15; ЧДЦ=2");
			НоваяСтрока.Представление = " КБК " + НоваяСтрока.КБК;
			НоваяСтрока.НомерВМассиве = МассивПлатежей.Найти(СтрокаМассива);
			Если ЗначениеЗаполнено(НоваяСтрока.ОКТМО) И НоваяСтрока.ОКТМО <> "0" Тогда
				НоваяСтрока.Представление = НоваяСтрока.Представление + ", ОКТМО " + НоваяСтрока.ОКТМО;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьМассивОписанийФайловВложений(МассивИменВложений)
	
	МассивОписаний = Новый Массив;
	
	Для Каждого ИмяВложения Из МассивИменВложений Цикл 
		Результат = ПолучитьВложениеНаСервере(ИмяВложения);
		Если ЗначениеЗаполнено(Результат.АдресДанных) Тогда 
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ИмяВложения, Результат.АдресДанных); 
			МассивОписаний.Добавить(ОписаниеФайла);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат МассивОписаний;
	
КонецФункции

&НаСервере
Функция ПрорисоватьСтатус()
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(Объект.Ссылка, Объект.Организация, "ФНС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(ЭтаФорма, ПараметрыПрорисовкиПанелиОтправки);
	ПрорисоватьПанельПриема();
			
	Возврат ПараметрыПрорисовкиПанелиОтправки;
	
КонецФункции

&НаСервере
Процедура ПрорисоватьПанельПриема() Экспорт
	
	Элементы.ГиперссылкаОтветы.Видимость = ВидимостьСсылкиОтветов();
	
	Элементы.ГруппаПанельПриема.Видимость = ВидимостьКнопкиПриема();
	Если Элементы.ГруппаПанельПриема.Видимость Тогда
		Элементы.КомандаОтказатьВПриеме.Видимость = НЕ ПодтверждениеОтправилОператор;
	КонецЕсли;
	
	Элементы.ОтступПередКнопкойОбновитьОтправку.Видимость 	= Истина;
	
	Если ЭтоТребованиеФНС Тогда
		
		Элементы.ЗаголовокНеотправленныхСообщений.Заголовок = 
			НСтр("ru = 'Оператору не отправлено извещение о получении документа';
				|en = 'Оператору не отправлено извещение о получении документа'");
			
	КонецЕсли;
	
	// Показываем вместо панели отправки
	Элементы.ГруппаПанельN259_ФЗ.Видимость = 
		ЭтоТребованиеФНС
		И ПодтверждениеОтправилОператор
		И СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПриемПодтвержден
		И НЕ ПанельУбранаПользователем();
		
	Элементы.БлокСостоянияОтправки.Видимость = НЕ Элементы.ГруппаПанельN259_ФЗ.Видимость;
	
	Если Элементы.БлокСостоянияОтправки.Видимость
		И ТребованияФНСВызовСервера.ПодтверждениеОтправилОператор(Объект.Ссылка) Тогда
		
		Элементы.КомментарийЭтапа.Заголовок = Новый ФорматированнаяСтрока(
			Элементы.КомментарийЭтапа.Заголовок,
			". ",
			Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее';
											|en = 'Подробнее'"),,,, "https://its.1c.ru/db/elreps/content/30/hdoc"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВидимостьСсылкиОтветов() Экспорт
	
	Ответы = ТребованияФНС.ОтветыНаТребование(Объект.Ссылка);
	Видимость = Ответы.Количество() > 0;
	
	Возврат Видимость;
	
КонецФункции

&НаСервере
Функция ВидимостьКнопкиПриема() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ТекущееСостояниеОтправки = КонтекстЭДОСервер.ТекущееСостояниеОтправки(Объект.Ссылка, Перечисления.ТипыКонтролирующихОрганов.ФНС);

	Видимость = Ложь;
	
	Если ТекущееСостояниеОтправки <> Неопределено Тогда
		ТекущийЭтапОтправки = ТекущееСостояниеОтправки.ТекущийЭтапОтправки;
		Если ТекущийЭтапОтправки <> Неопределено Тогда
			
			СостояниеСдачиОтчетности = ТекущийЭтапОтправки.СостояниеСдачиОтчетности;
			
			Видимость = (СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ТребуетсяПодтверждениеПриема);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Видимость;
	
КонецФункции

&НаСервере
Процедура ОпределитьВидДокумента(КонтекстЭДОСервер)
	
	ЕстьПлатежноеПоручение = Ложь;
	ВыгрузкаПлатежныхПоручений = Ложь;
	ДокументооборотСКОПереопределяемый.КонфигурацияПоддерживаетПлатежныеПоручения(ЕстьПлатежноеПоручение, ВыгрузкаПлатежныхПоручений);
	
	ЭтоТребованиеОПредставленииДокументов = 
		Объект.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииДокументов;
		
	ЭтоТребованиеОПредставленииПояснений = 
		Объект.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииПоясненийКДекларацииНДС;
		
	ЭтоТребованиеФНС = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоТребованиеФНС(Объект.Ссылка);
	ЭтоТребованиеУплаты = ЕстьПлатежноеПоручение И ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СодержитТребованиеУплаты(Объект.Ссылка);
	ЭтоРешениеПоЖалобе = Объект.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.РешениеПоЖалобе;
	ЭтоКвитанцияОПрисвоенииРНПТ = (Объект.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.КвитанцияОПрисвоенииРНПТ);
	
	ВТребованииЕстьXMLФайл = КонтекстЭДОСервер.ЕстьТребованияКРазделам8_12(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУ()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Заголовок = Объект.Наименование;
	
	Элементы.Тема.Заголовок = Заголовок;
	Элементы.ТекстПисьма.Заголовок = "Приложенные файлы:";
	Элементы.ВидРешенияНаЖалобу.Заголовок = Объект.ВидРешенияНаЖалобу;
	Элементы.ВидРешенияНаЖалобу.Видимость = ЗначениеЗаполнено(Объект.ВидРешенияНаЖалобу);
	Элементы.ГруппаКвитанцияОПрисвоенииРНПТ.Видимость = ЭтоКвитанцияОПрисвоенииРНПТ;
	Элементы.ГруппаРеквизитыСобственникаТовараЮЛ.Видимость = ЗначениеЗаполнено(Объект.НаименованиеСобственника);
	Элементы.ГруппаРеквизитыСобственникаТовараФЛ.Видимость = ЗначениеЗаполнено(Объект.ФИОСобственника);
	
	ПрорисоватьПриложения();
	
	ОписьВходящихДокументов = ДокументооборотСКОВызовСервера.ПолучитьОписьВходящихДокументовПоТребованию(Объект.Ссылка);
	
	Элементы.ГруппаСрокиПредставления.Видимость = ЭтоТребованиеФНС;
	Элементы.ГруппаОплаты.Видимость = ЭтоТребованиеУплаты;
	
	Если ЭтоТребованиеОПредставленииДокументов Тогда
		Элементы.СсылкаСроки.Видимость = Ложь;
		Элементы.ИнформацияСроки.Заголовок = 
			НСтр("ru = 'Обратите внимание на срок представления документов, указанный в приложенном файле';
				|en = 'Обратите внимание на срок представления документов, указанный в приложенном файле'");
	КонецЕсли;
		
	Если ЭтоТребованиеОПредставленииПояснений Тогда
		
		Элементы.ИнформацияСроки.Заголовок = 
			НСтр("ru = 'Ответ на требование должен быть направлен в течение 5 дней с момента получения';
				|en = 'Ответ на требование должен быть направлен в течение 5 дней с момента получения'");
			
	КонецЕсли;
	
	ДобавитьКнопкиОтветаНаСообщениеОНалоге();
	
	Элементы.ЗапроситьСверку.Видимость =
		Объект.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.ТребованиеОбУплатеНалогаСбораПениШтрафа;
		
	Элементы.Печать.Видимость = ЭтоКвитанцияОПрисвоенииРНПТ;
	
	ПрорисоватьПодписанта();
	УстановитьПредставлениеДокументаОснования(КонтекстЭДОСервер);
	
	ОбновитьТекущееСостояниеДокумента();
	ОформитьСрокиПредставленияСервер();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКнопкиОтветаНаСообщениеОНалоге()

	Виды = Перечисления.ВидыНалоговыхДокументов;
	Вид  = Объект.ВидДокумента;

	ЭтоСообщениеОбИсчисленииИмущественныхНалогов = 
		(Вид = Виды.СообщениеОбИсчисленнойСуммеТранспортногоНалога
		Или Вид = Виды.СообщениеОбИсчисленнойСуммеТранспортногоИмущественногоЗемельногоНалогов
		Или Вид = Виды.СообщениеОбИсчисленнойСуммеЗемельногоНалога);

	РеализованаСверкаИмущественныхНалогов = Ложь;
	ДокументооборотСКОПереопределяемый.ПроверитьРеализованаСверкаИмущественныхНалогов(РеализованаСверкаИмущественныхНалогов);

	Если ЭтоСообщениеОбИсчисленииИмущественныхНалогов И РеализованаСверкаИмущественныхНалогов Тогда
		Элементы.ПерейтиКСверкеИмущественногоНалога.Видимость = Истина;
		Элементы.ПерейтиКСверкеИмущественногоНалога.КнопкаПоУмолчанию = Истина;
		// Скроем стандартную кнопку ответа
		Элементы.КомандаСоздатьОтвет.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПрорисоватьПриложения()
	
	ВсеВложенияТребования = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьВложенияДокументовРеализацииПолномочийНалоговыхОрганов(Объект.Ссылка);
	
	// Для этих скрываем, но в некоторых случах надо показывать, 
	// например, для СообщениеОбИсчисленнойСуммеТранспортногоИмущественногоЗемельногоНалогов
	СкрытьXML = 
		ЭтоТребованиеОПредставленииПояснений 
		ИЛИ ЭтоРешениеПоЖалобе 
		ИЛИ ЭтоКвитанцияОПрисвоенииРНПТ
		ИЛИ Объект.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.РезультатыОбработкиДляСоциальногоВычета;
	
	Если СкрытьXML Тогда
		Для каждого ПриложениеТребования Из ВсеВложенияТребования Цикл
			
			СвойстваФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПриложениеТребования.ИмяФайла);
			
			Если ВРЕГ(СвойстваФайла.Расширение) <> ВРЕГ(".xml") Тогда
				Вложения.Добавить(ПриложениеТребования);
			КонецЕсли;
		
		КонецЦикла;
	Иначе
		Вложения.ЗагрузитьЗначения(ВсеВложенияТребования);
	КонецЕсли;
	
	Элементы.Вложения.Заголовок = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ФорматированноеПредставлениеСпискаВложений(Вложения.ВыгрузитьЗначения());
	
КонецФункции

&НаКлиенте
Процедура ПослеПодтвержденияПриемаИлиОтказаВПриеме(Результат, ВходящийКонтекст) Экспорт
	
	ОбновитьТекущееСостояниеДокумента();
	
	// Перерисовываем другие формы при необходимости
	ОповеститьОбОкончанииОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОкончанииОтправки()
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	ПараметрыОповещения.Вставить("Ссылка", 		Объект.Ссылка);
	
	Оповестить("Завершение отправки", ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПрорисоватьПодписанта()
	
	// Текст подсказки
	НалоговыйОрганПодсказка = СокрЛП(Объект.ПодписантДолжность + " " + Объект.ПодписантФИО);
	
	Если ЗначениеЗаполнено(Объект.ПодписантТелефон) Тогда
		ПодписантТелефон = НСтр("ru = 'тел: ';
								|en = 'тел: '") + Объект.ПодписантТелефон;
	Иначе
		ПодписантТелефон = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПодписантПочта) Тогда
		ПодписантПочта = НСтр("ru = 'e-mail: ';
								|en = 'e-mail: '") + Объект.ПодписантПочта;
	Иначе
		ПодписантПочта = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодписантТелефон) И ЗначениеЗаполнено(ПодписантПочта) Тогда
		КонтактныеДанныеПодписанта = ПодписантТелефон + ", " + ПодписантПочта;
	ИначеЕсли ЗначениеЗаполнено(ПодписантТелефон) Тогда
		КонтактныеДанныеПодписанта = ПодписантТелефон;
	Иначе
		КонтактныеДанныеПодписанта = ПодписантПочта;
	КонецЕсли;
	
	НалоговыйОрганПодсказка = СокрЛП(НалоговыйОрганПодсказка + Символы.ПС + КонтактныеДанныеПодписанта);
	
	Элементы.НалоговыйОрган.РасширеннаяПодсказка.Заголовок = НалоговыйОрганПодсказка;
	
	// Отображение подсказки
	Если ЗначениеЗаполнено(НалоговыйОрганПодсказка) Тогда
		Элементы.НалоговыйОрган.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		Элементы.НалоговыйОрган.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеДокументаОснования(КонтекстЭДОСервер)
	
	// Представление
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		СведенияПоОбъекту = КонтекстЭДОСервер.СведенияПоОтправляемымОбъектам(Объект.ДокументОснование);
		ПредставлениеДокументаОснования = СведенияПоОбъекту.Наименование;
		
		Если НЕ ЗначениеЗаполнено(ПредставлениеДокументаОснования) Тогда
			ПредставлениеДокументаОснования = Строка(Объект.ДокументОснование);
		КонецЕсли;
	Иначе
		ПредставлениеДокументаОснования = "";
	КонецЕсли;
	
	// Видимость
	Элементы.ПредставлениеДокументаОснования.Видимость = 
		ЗначениеЗаполнено(Объект.ДокументОснование)
		И ЗначениеЗаполнено(ПредставлениеДокументаОснования);

КонецПроцедуры

&НаСервере
Функция ТабличныйДокументНО(ДокументНО)
	
	Возврат Справочники.ДокументыРеализацииПолномочийНалоговыхОрганов.ПечатнаяФорма(ДокументНО);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстСообщения(Адрес)

	Возврат Справочники.ДокументыРеализацииПолномочийНалоговыхОрганов.ТекстСообщения(Адрес);

КонецФункции

&НаСервере
Процедура БольшеНеПоказыватьИнформационнуюПанель()
	
	ХранилищеОбщихНастроек.Сохранить(
		"ДокументооборотСКонтролирующимиОрганами_Требования_УбратьПанельN259_ФЗ",
		,
		Истина);
	
	ОбновитьТекущееСостояниеДокумента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПанельУбранаПользователем()

	Убрана = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_Требования_УбратьПанельN259_ФЗ") = Истина;
	
	Возврат Убрана;
	
КонецФункции

#Область ИнформацияПоТребованиям

&НаКлиенте
Процедура ИзменитьДатуОтветаЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Истина Тогда
		ОформитьСрокиПредставленияСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСрокиПредставления()
	
	Состояние = ТребованияФНС.РасширенноеСостояниеПодтвержденияИОтвета(Объект.Ссылка, Сейчас);
	
	Если Состояние.ЕстьДанные Тогда
	
		Если ЭтоТребованиеФНС Тогда
			ОформитьПредставлениеПодтверждения(Состояние);
			ОформитьПредставлениеОтвета(Состояние);
		КонецЕсли;
		
		Если ЭтоТребованиеУплаты Тогда
			ОформитьПредставлениеУплаты(Состояние);
		КонецЕсли;

		Элементы.НеУдалосьРазобратьPDF.Видимость = 
			НЕ Состояние.УдалосьРазобратьPDF
			И Элементы.ИзменитьДатуОтвета.Видимость
			И Не ЗначениеЗаполнено(Состояние.ДатаОтветаИзмененная)
			И ЭтоТребованиеОПредставленииДокументов
			И Состояние.ЕстьДанные;
		
		Элементы.НеЗаполненКалендарь.Видимость = Состояние.КалендарьБылНезаполнен;
		
	ИначеЕсли ЭтоТребованиеФНС Тогда
		
		Если ЭтоТребованиеОПредставленииДокументов Тогда
			Элементы.СсылкаСроки.Видимость = Ложь;
			Элементы.ИнформацияСроки.Заголовок = 
				НСтр("ru = 'Обратите внимание на срок представления документов, указанный в приложенном файле';
					|en = 'Обратите внимание на срок представления документов, указанный в приложенном файле'");
		КонецЕсли;
			
		Если ЭтоТребованиеОПредставленииПояснений Тогда
			Элементы.ИнформацияСроки.Заголовок = 
				НСтр("ru = 'Ответ на требование должен быть направлен в течение 5 дней с момента получения';
					|en = 'Ответ на требование должен быть направлен в течение 5 дней с момента получения'");
				
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаНаличиеДаты.Видимость = ЭтоТребованиеФНС И Состояние.ЕстьДанные;
	Элементы.ГруппаБезПарсинга.Видимость = НЕ ЭтоТребованиеФНС ИЛИ НЕ Состояние.ЕстьДанные;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПредставлениеОтвета(Состояние)
	
	Результат = ТребованияФНС.ПредставлениеОтвета(Состояние, Сейчас);
	
	Элементы.ПоказатьОтветы.Видимость = Результат.ПоказатьОтветы;
	Элементы.ПоказатьОтветы.Заголовок = Результат.ПредставлениеСсылки;
	Элементы.ИзменитьДатуОтвета.Видимость = Состояние.Подтвержден И НЕ Состояние.ЕстьОтвет;
	Элементы.ОгонекОтвета.Видимость = Результат.ДобавитьОгонек;
	Элементы.ГруппаОшибокОтвета.Видимость = Состояние.ЕстьКритическаяОшибкаОтвета;
	
	Элементы.ДатаОтветаПредставление.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Результат.Представление);
	Элементы.ДатаОтветаПредставление.ОтображениеПодсказки = ?(ПодтверждениеОтправилОператор, ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Нет);

КонецПроцедуры

&НаСервере
Процедура ОформитьПредставлениеПодтверждения(Состояние)
	
	Результат = ТребованияФНС.ПредставлениеПодтверждения(Состояние, Сейчас);
	
	Элементы.ОгонекПодтверждения.Видимость = Результат.ДобавитьОгонек;
	
	Элементы.ДатаПриемаПредставление.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Результат.Представление);
	Элементы.ДатаПриемаПредставление.ОтображениеПодсказки = ?(ПодтверждениеОтправилОператор, ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Нет);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСрокиПредставленияСервер()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	СтатусОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(Объект.Ссылка, Объект.Организация, "ФНС");
	ОформитьСрокиПредставления();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущееСостояниеДокумента()
	
	СтатусОтправки = ПрорисоватьСтатус();
	ОформитьСрокиПредставления();
	
КонецПроцедуры

&НаКлиенте
Процедура НеЗаполненКалендарьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Календарь = ТребованияФНСВызовСервера.ПроизводственныйКалендарь();
	ПоказатьЗначение(, Календарь);
	
КонецПроцедуры

&НаКлиенте
Процедура НеУдалосьРазобратьPDFОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ИзменитьДатуОтветаЗавершение", ЭтотОбъект);
	ТребованияФНСКлиент.ИзменитьСрокТребования(Объект.Ссылка, ОповещениеЗавершения);
	ТекущийЭлемент = Элементы.Комментарий;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСвойстваОтветов(Команда)
	
	Парам = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("Ссылка", Объект.Ссылка);
	Парам.Вставить("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.СвойстваОтветовНаТребования.ФормаСписка", Парам);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСвойстваТребования(Команда)
	
	Парам = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("Ссылка", Объект.Ссылка);
	Парам.Вставить("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы.ФормаСписка", Парам);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеСтроки()
	
	Элементы.Платежи.ТекущаяСтрока = -1;

КонецПроцедуры

#КонецОбласти

#КонецОбласти