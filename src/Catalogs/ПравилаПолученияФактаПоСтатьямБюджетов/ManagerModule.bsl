#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Запускает фоновое задание для регистрации документов к отражению факта
// 
// Параметры:
// 	Ссылка - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - Правило получения факта. 
// 	НачалоПериода - Дата - Начало периода.
// 	КонецПериода - Дата - Окончание периода.
// 	РеквизитыСравнения - Структура - ДействуетС, ДействуетПо ПравилПолученияФакта до записи.
// 	Отразить - Булево - необходимость отразить документы в бюджетировании.
//
Процедура ЗапуститьРегистрациюДокументовДляОтраженияФоном(Ссылка, Знач НачалоПериода, Знач КонецПериода,
	РеквизитыСравнения = Неопределено, Отразить = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(РеквизитыСравнения) И РеквизитыСравнения.Свойство("ДействуетС") Тогда
		Если РеквизитыСравнения.ДействуетС <> НачалоПериода Тогда
			НачалоПериода = Мин(НачалоПериода, РеквизитыСравнения.ДействуетС);
		КонецЕсли;
		
		Если РеквизитыСравнения.ДействуетПо <> КонецПериода И ЗначениеЗаполнено(КонецПериода) Тогда
			Если ЗначениеЗаполнено(РеквизитыСравнения.ДействуетПо) Тогда
				КонецПериода = Макс(КонецПериода, РеквизитыСравнения.ДействуетПо);
			Иначе
				КонецПериода = РеквизитыСравнения.ДействуетПо;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПравила = Ссылка.ПолучитьОбъект(); 
	ВидыДокументов = ФактическиеДанныеБюджетированияСервер.ОпределитьИменаВидовДокументовПоСКД(ОписаниеПравила);
	
	Ключ = "РегистрацияДокументовДляОтраженияФакта" + Строка(Ссылка.УникальныйИдентификатор());
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Для Каждого АктивноеЗадание Из АктивныеЗадания Цикл
			АктивноеЗадание.Отменить();
		КонецЦикла;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется регистрация документов для отражения факта';
								|en = 'Registering documents for recording fact'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(ВидыДокументов);
	ПараметрыЭкспортнойПроцедуры.Добавить(Ссылка);
	ПараметрыЭкспортнойПроцедуры.Добавить(НачалоПериода);
	ПараметрыЭкспортнойПроцедуры.Добавить(КонецПериода);
	ПараметрыЭкспортнойПроцедуры.Добавить(Отразить);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ЗарегистрироватьДокументыДляОтражения");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Процедура регистрирует документы к отражению факта.
// 
// Параметры:
//	ВидыДокументов - Массив из Строка - Массив имен видов документов из метаданных.
//	Ссылка - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - Правило получения факта.
//	НачалоПериода - Дата - Необязательный. Начало периода.
//  КонецПериода - Дата - Необязательный. Окончание периода.
//  Отразить - Булево - необходимость отразить документы в бюджетировании.
//
Процедура ЗарегистрироватьДокументыДляОтражения(ВидыДокументов, Ссылка, НачалоПериода = Неопределено, КонецПериода = Неопределено, Отразить = Ложь) Экспорт
	
	СброситьКэшБюджетов(Ссылка);
	
	Если ВидыДокументов.Количество() = 1 И ВидыДокументов[0] = "" Тогда
		ВидыДокументов = Новый Массив;
		Для Каждого Документ Из Метаданные.Документы Цикл
			ВидыДокументов.Добавить(Документ.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Разделитель = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Документ,
		|	Таблица.Дата КАК ПериодЗаписи,
		|	&ТекстВидДокумента КАК ИмяВидаДокумента
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	&ТекстУсловия";
	
	ТекстыЗапроса = Новый Массив;
	Для каждого ВидДокумента Из ВидыДокументов Цикл
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&Таблица", "Документ." + ВидДокумента);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВидДокумента", """" + ВидДокумента + """");
		
		Если Метаданные.Документы[ВидДокумента].Проведение = 
				Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			ТекстУсловия = "Таблица.Проведен";
		Иначе
			ТекстУсловия = "НЕ Таблица.ПометкаУдаления";
		КонецЕсли;
		Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
			ТекстУсловия = ТекстУсловия + Символы.ПС + "И Таблица.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
		ИначеЕсли ЗначениеЗаполнено(НачалоПериода) Тогда
			ТекстУсловия = ТекстУсловия + Символы.ПС + "И Таблица.Дата >= &НачалоПериода";
		ИначеЕсли ЗначениеЗаполнено(КонецПериода) Тогда
			ТекстУсловия = ТекстУсловия + Символы.ПС + "И Таблица.Дата <= &КонецПериода";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловия", ТекстУсловия);
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Разделитель);
	ТекстЗапроса = СхемыЗапросов.УстановитьПомещениеВоВременнуюТаблицу(ТекстЗапроса, "ТаблицаДокументов");
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКОтражениюВБюджетировании");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ТекстЗапроса = ТекстЗапроса + ";
		| ВЫБРАТЬ * ИЗ ТаблицаДокументов";
		
		Ключ = "ОтражениеДокументовВБюджетировании";
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ключ", Ключ);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		
		АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Если АктивныеЗадания.Количество() = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			| ГДЕ НЕ Документ В (ВЫБРАТЬ РАЗЛИЧНЫЕ Документ ИЗ РегистрСведений.ЗаданияКОтражениюВБюджетировании)";
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), КонецПериода));
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		
		НомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
		НомерЗадания = НомерЗадания + 1;
		Константы.НомерЗаданияКОтражениюВБюджетировании.Установить(НомерЗадания + 1);
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Регистрация документов для отражения факта';
						|en = 'Register documents for recording fact'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			СобытиеЖР, 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
			
	Для Каждого Стр Из ТаблицаДокументов Цикл
		НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерЗадания.Установить(НомерЗадания);
		НаборЗаписей.Отбор.Документ.Установить(Стр.Документ);
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить();
			ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
			ЭлементБлокировки.УстановитьЗначение("НомерЗадания",	НомерЗадания);
			ЭлементБлокировки.УстановитьЗначение("Документ",		Стр.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ЗаписьОтражения = НаборЗаписей.Добавить();
			ЗаписьОтражения.НомерЗадания = НомерЗадания;
			ЗаполнитьЗначенияСвойств(ЗаписьОтражения,Стр);
			НаборЗаписей.Записать(Истина);
		
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖР = НСтр("ru = 'Регистрация документов для отражения факта';
							|en = 'Register documents for recording fact'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(
				СобытиеЖР,
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Если Отразить Тогда
		ФактическиеДанныеБюджетированияСервер.ОтразитьДокументыВБюджетировании(НачалоПериода, КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ НЕ УТ
	Отчеты.РезультатРаботыПравилПолученияФактическихДанных.ДобавитьКомандуОтчетаПоСтатьеБюджетов(КомандыОтчетов);
	//-- НЕ УТ
	
	Возврат; // Не используется в УТ.
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции
	
// Очищает вспомогательный кэш видов бюджетов
// 
// Параметры:
//   Ссылка - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов.
//
Процедура СброситьКэшБюджетов(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка
		|ПОМЕСТИТЬ ЭлементыФинансовойОтчетности
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
		|ГДЕ
		|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &Реквизит
		|	И ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение = &Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Справочник.Владелец КАК Ссылка
		|ИЗ
		|	ЭлементыФинансовойОтчетности КАК ЭлементыФинансовойОтчетности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов КАК Справочник
		|		ПО ЭлементыФинансовойОтчетности.Ссылка = Справочник.Ссылка";
		
	РеквизитыСравнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "СтатьяБюджетов");

	Запрос.УстановитьПараметр("Значение", РеквизитыСравнения.СтатьяБюджетов);
	Запрос.УстановитьПараметр("Реквизит", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.СтатьяБюджетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидБюджета.Установить(ВыборкаДетальныеЗаписи.Ссылка);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#Область НастройкаПолученияФактаПоКорреспонденцииРегистров

Процедура ИзменитьВариантНастройкиПравилПолученияФакта (Параметры, АдресХранилища) Экспорт
	
	ПоКорреспондирующимРегистрам = Параметры.ПоКорреспондирующимРегистрам;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка КАК Ссылка,
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК ИсточникДанных,
	|	ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК Справочник.НастройкиХозяйственныхОпераций).ИсточникДанных КАК ИмяМакетаИсточникаДанных,
	|	ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК Справочник.НастройкиХозяйственныхОпераций).ИспользоватьВБюджетировании КАК ИспользоватьВБюджетировании,
	|	ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК Справочник.НастройкиХозяйственныхОпераций).Приход КАК Приход,
	|	ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК Справочник.НастройкиХозяйственныхОпераций).Расход КАК Расход,
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ТипПравила
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|ГДЕ
	|	НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ПометкаУдаления
	|	И ПравилаПолученияФактаПоСтатьямБюджетов.РазделИсточникаДанных = ЗНАЧЕНИЕ(Перечисление.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет)";
	
	НачатьТранзакцию();
	
	Попытка
		
		ИзмененныеИсточникиДанных = ОпределитьЗаменыТиповДанныхУчетаИсточниковДанных(ПоКорреспондирующимРегистрам);
		ИзменитьПризнакИспользованияВБюджетированииИсточниковДанных(ИзмененныеИсточникиДанных, ПоКорреспондирующимРегистрам);
		Для Каждого ИсточникДанных Из ИзмененныеИсточникиДанных Цикл
			ИсточникДанныхОбъект = ИсточникДанных.Ключ.ПолучитьОбъект();
			ИсточникДанныхОбъект.Заблокировать();
			ПараметрыИсточникаДанных = ИсточникДанных.Значение;
			Если ПараметрыИсточникаДанных.Свойство("ИспользоватьВБюджетировании") Тогда
				ИсточникДанныхОбъект.ИспользоватьВБюджетировании = ПараметрыИсточникаДанных.ИспользоватьВБюджетировании;
			КонецЕсли;
			Если ПараметрыИсточникаДанных.Свойство("Приход") Тогда
				ИсточникДанныхОбъект.Приход = ?(ТипЗнч(ПараметрыИсточникаДанных.Приход) = Тип("Структура"), ПараметрыИсточникаДанных.Приход.Новый, ПараметрыИсточникаДанных.Приход);
			КонецЕсли;
			Если ПараметрыИсточникаДанных.Свойство("Расход") Тогда
				ИсточникДанныхОбъект.Расход = ?(ТипЗнч(ПараметрыИсточникаДанных.Расход) = Тип("Структура"), ПараметрыИсточникаДанных.Расход.Новый, ПараметрыИсточникаДанных.Расход);
			КонецЕсли;
			ИсточникДанныхОбъект.Записать();
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу.СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
		
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ПравилаПолученияФактаПоСтатьямБюджетов");
		ЭлементБлокировки.ИсточникДанных = ТаблицаРезультат;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		Блокировка.Заблокировать();
		
		Для Каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
			
			ПравилоОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			ПравилоОбъект.Заблокировать();
			Если Не ПоКорреспондирующимРегистрам Тогда
				Если ПравилоОбъект.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета
					Или ПравилоОбъект.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные Тогда
					ПравилоОбъект.ПромежуточноеКэшированиеРезультатовРаботыПравил = Ложь;
				КонецЕсли;
				Если Не СтрокаТаблицы.ИспользоватьВБюджетировании Тогда
					ПравилоОбъект.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЕсли;
			ВыполнитьЗаменуИсточникаДанныхПравила(ПравилоОбъект, ПоКорреспондирующимРегистрам);
			ВыполнитьЗаменуПолейАналитикиПравила(ПравилоОбъект, СтрокаТаблицы.Приход, СтрокаТаблицы.Расход,
				ИзмененныеИсточникиДанных, ПоКорреспондирующимРегистрам);
			ВыполнитьЗаменуИсточниковСуммыПравила(ПравилоОбъект, СтрокаТаблицы.Приход, СтрокаТаблицы.Расход,
				ПоКорреспондирующимРегистрам);
			ВыполнитьЗаменуКоэффициентаПравила(ПравилоОбъект, СтрокаТаблицы.ИмяМакетаИсточникаДанных);
			ПравилоОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось изменить вариант настройки получения фактических данных по причине: %1';
										|en = 'Cannot change the setup option of actual data receipt due to: %1'"),
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Изменение варианта настройки получения фактических данных.';
			|en = 'Change the setup option of actual data receipt.'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Параметры, АдресХранилища);
	
КонецПроцедуры

// Возвращает параметры настроек ХО, по которым требуется корректировка реквизитов при включении/отключении опции
// сбора факта по данным оперативного учета по корреспондирующим регистрам.
//
// Параметры:
//  ПоКорреспондирующимРегистрам - Булево
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - СправочникСсылка.НастройкиХозяйственныхОпераций
//   * Значение - Структура - структура параметров замены реквизитов ХО:
//    ** Ключ - Строка - Приход или Расход
//    ** Значение - ПеречислениеСсылка.ТипыДанныхУчета
//
Функция ОпределитьЗаменыТиповДанныхУчетаИсточниковДанных(ПоКорреспондирующимРегистрам) Экспорт
	
	СоответствиеИсточниковДанных = Новый Соответствие;
	
	// Приход - ДоходыРасходы на ПрочиеАктивыПассивы
	ИсточникиДанных = Новый Массив;
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ВыдачаЗаймаСотруднику);
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ВыплатаЗарплатыПоЗарплатномуПроекту);
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ВыплатаЗарплатыНаЛицевыеСчета);
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ВыплатаЗарплатыРаботнику);
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ВыплатаЗарплатыРаздатчиком);
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ВыплатаЗарплатыЧерезКассу);
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ПеречислениеВБюджет);
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ПередачаНаПрочиеЦели);
	Если ПоКорреспондирующимРегистрам Тогда
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ДоходыРасходы,
			Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы);
	Иначе
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы,
			Перечисления.ТипыДанныхУчета.ДоходыРасходы);
	КонецЕсли;
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		СоответствиеИсточниковДанных.Вставить(ИсточникДанных, Новый Структура("Приход",
			ОбщегоНазначения.СкопироватьРекурсивно(ЗаменаТипаДанныхУчета)));
	КонецЦикла;
	
	// Расход - ДоходыРасходы на ПрочиеАктивыПассивы
	ИсточникиДанных = Новый Массив;
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту);
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ПогашениеЗаймаСотрудником);
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ВозвратНалогов);
	Если ПоКорреспондирующимРегистрам Тогда
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ДоходыРасходы,
			Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы);
	Иначе
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы,
			Перечисления.ТипыДанныхУчета.ДоходыРасходы);
	КонецЕсли;
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		СоответствиеИсточниковДанных.Вставить(ИсточникДанных, Новый Структура("Расход",
			ОбщегоНазначения.СкопироватьРекурсивно(ЗаменаТипаДанныхУчета)));
	КонецЦикла;
	
	// Расход - ПрочиеАктивыПассивы на ДоходыРасходы
	ИсточникиДанных = Новый Массив;
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.СписаниеАмортизацииОС);
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ПринятиеКУчетуНМА);
	Если ПоКорреспондирующимРегистрам Тогда
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы,
			Перечисления.ТипыДанныхУчета.ДоходыРасходы);
	Иначе
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ДоходыРасходы,
			Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы);
	КонецЕсли;
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		СоответствиеИсточниковДанных.Вставить(ИсточникДанных, Новый Структура("Расход",
			ОбщегоНазначения.СкопироватьРекурсивно(ЗаменаТипаДанныхУчета)));
	КонецЦикла;
	
	// Расход - ДоходыРасходы на Контрагенты
	ИсточникиДанных = Новый Массив;
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ВозвратДенежныхСредствОтАрендодателя);
	Если ПоКорреспондирующимРегистрам Тогда
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ДоходыРасходы,
			Перечисления.ТипыДанныхУчета.Контрагенты);
	Иначе
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.Контрагенты,
			Перечисления.ТипыДанныхУчета.ДоходыРасходы);
	КонецЕсли;
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		СоответствиеИсточниковДанных.Вставить(ИсточникДанных, Новый Структура("Расход",
			ОбщегоНазначения.СкопироватьРекурсивно(ЗаменаТипаДанныхУчета)));
	КонецЦикла;
	
	// Приход - ДенежныеСредства на Контрагенты
	ИсточникиДанных = Новый Массив;
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.НачисленияПоДепозитам);
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ПеречислениеНаДепозиты);
	Если ПоКорреспондирующимРегистрам Тогда
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ДенежныеСредства,
			Перечисления.ТипыДанныхУчета.Контрагенты);
	Иначе
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.Контрагенты,
			Перечисления.ТипыДанныхУчета.ДенежныеСредства);
	КонецЕсли;
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		СоответствиеИсточниковДанных.Вставить(ИсточникДанных, Новый Структура("Приход",
			ОбщегоНазначения.СкопироватьРекурсивно(ЗаменаТипаДанныхУчета)));
	КонецЦикла;
	
	// Расход - ДенежныеСредства на Контрагенты
	ИсточникиДанных = Новый Массив;
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ПоступлениеДенежныхСредствПоДепозитам);
	Если ПоКорреспондирующимРегистрам Тогда
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ДенежныеСредства,
			Перечисления.ТипыДанныхУчета.Контрагенты);
	Иначе
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.Контрагенты,
			Перечисления.ТипыДанныхУчета.ДенежныеСредства);
	КонецЕсли;
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		СоответствиеИсточниковДанных.Вставить(ИсточникДанных, Новый Структура("Расход",
			ОбщегоНазначения.СкопироватьРекурсивно(ЗаменаТипаДанныхУчета)));
	КонецЦикла;
		
	// Расход - Контрагенты на ДенежныеСредства
	ИсточникиДанных = Новый Массив;
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ЗакупкаЧерезПодотчетноеЛицо);
	Если ПоКорреспондирующимРегистрам Тогда
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.Контрагенты,
			Перечисления.ТипыДанныхУчета.ДенежныеСредства);
	Иначе
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ДенежныеСредства,
			Перечисления.ТипыДанныхУчета.Контрагенты);
	КонецЕсли;
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		СоответствиеИсточниковДанных.Вставить(ИсточникДанных, Новый Структура("Расход",
			ОбщегоНазначения.СкопироватьРекурсивно(ЗаменаТипаДанныхУчета)));
	КонецЦикла;
	
	// Приход - ДоходыРасходы на Номенклатура
	ИсточникиДанных = Новый Массив;
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ОтчетКомиссионераКомиссия);
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ПересортицаПартийТоваров);
	Если ПоКорреспондирующимРегистрам Тогда
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ДоходыРасходы,
			Перечисления.ТипыДанныхУчета.Номенклатура);
	Иначе
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.Номенклатура,
			Перечисления.ТипыДанныхУчета.ДоходыРасходы);
	КонецЕсли;
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		СоответствиеИсточниковДанных.Вставить(ИсточникДанных, Новый Структура("Приход",
			ОбщегоНазначения.СкопироватьРекурсивно(ЗаменаТипаДанныхУчета)));
	КонецЦикла;
	
	// Расход - Номенклатура на ПрочиеАктивыПассивы
	ИсточникиДанных = Новый Массив;
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ВнутреннееПоступлениеТоваров);
	Если ПоКорреспондирующимРегистрам Тогда
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.Номенклатура,
			Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы);
	Иначе
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы,
			Перечисления.ТипыДанныхУчета.Номенклатура);
	КонецЕсли;
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		СоответствиеИсточниковДанных.Вставить(ИсточникДанных, Новый Структура("Расход",
			ОбщегоНазначения.СкопироватьРекурсивно(ЗаменаТипаДанныхУчета)));
	КонецЦикла;
	
	// Приход - Номенклатура на ПрочиеАктивыПассивы
	ИсточникиДанных = Новый Массив;
	ИсточникиДанных.Добавить(Справочники.НастройкиХозяйственныхОпераций.ПеремещениеТоваровМеждуФилиалами);
	Если ПоКорреспондирующимРегистрам Тогда
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.Номенклатура,
			Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы);
	Иначе
		ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы,
			Перечисления.ТипыДанныхУчета.Номенклатура);
	КонецЕсли;
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		СоответствиеИсточниковДанных.Вставить(ИсточникДанных, Новый Структура("Приход",
			ОбщегоНазначения.СкопироватьРекурсивно(ЗаменаТипаДанныхУчета)));
	КонецЦикла;
	
	// Приход и Расход поменять местами
	ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ПередачаВСоставНМА;
	ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.Номенклатура,
		Перечисления.ТипыДанныхУчета.ДоходыРасходы);
	СоответствиеИсточниковДанных.Вставить(ИсточникДанных, Новый Структура("Приход", ЗаменаТипаДанныхУчета));
	ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.ДоходыРасходы,
		Перечисления.ТипыДанныхУчета.Номенклатура);
	СоответствиеИсточниковДанных[ИсточникДанных].Вставить("Расход", ЗаменаТипаДанныхУчета);

	ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ВозвратТоваровОтКлиентаПрошлыхПериодов;
	ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.Номенклатура,
		Перечисления.ТипыДанныхУчета.Контрагенты);
	СоответствиеИсточниковДанных.Вставить(ИсточникДанных, Новый Структура("Приход", ЗаменаТипаДанныхУчета));
	ЗаменаТипаДанныхУчета = Новый Структура("Исходный, Новый", Перечисления.ТипыДанныхУчета.Контрагенты,
		Перечисления.ТипыДанныхУчета.Номенклатура);
	СоответствиеИсточниковДанных[ИсточникДанных].Вставить("Расход", ЗаменаТипаДанныхУчета);
	
	Возврат СоответствиеИсточниковДанных;
	
КонецФункции

Процедура ВыполнитьЗаменуИсточникаДанныхПравила(Правило, ПоКорреспондирующимРегистрам)
	
	ИсточникДанных = Правило.ИсточникДанных;
	
	Если ПоКорреспондирующимРегистрам Тогда
		
		Если ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.РеализацияОС
			Или ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.РеализацияНМА Тогда
			Правило.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.РеализацияВнеоборотныхАктивов;
			Настройки = Правило.КомпоновщикНастроек.Получить();
			Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
				Если ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.РеализацияОС Тогда
					ПолеОтбора = "СтатьяДоходовРасходов.ДоходыПоОбъектамЭксплуатации";
				Иначе
					ПолеОтбора = "СтатьяДоходовРасходов.ДоходыПоНМАиНИОКР";
				КонецЕсли;
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, ПолеОтбора, Истина, ВидСравненияКомпоновкиДанных.Равно, Истина);
				Правило.КомпоновщикНастроек = Новый ХранилищеЗначения(Настройки);
				Правило.ПредставлениеОтбора = Строка(Настройки.Отбор);
			КонецЕсли;
		ИначеЕсли ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ДоходыОтПереоценкиТоваров Тогда
			Правило.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ОтклонениеВСтоимостиТоваровДоходы;
		ИначеЕсли ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.РасходыОтПереоценкиТоваров Тогда
			Правило.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ОтклонениеВСтоимостиТоваровРасходы;
		ИначеЕсли ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ПересортицаТоваровСПереоценкой Тогда
			Правило.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ПересортицаТоваров;
		ИначеЕсли ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ОтчетДавальцу2_5
			И Правило.ИсточникСуммыОперации <> Перечисления.ПоказателиАналитическихРегистров.Сумма
			И Правило.ИсточникСуммыОперации <> Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС
			И Правило.ИсточникСуммыОперации <> Перечисления.ПоказателиАналитическихРегистров.СуммаНДС
			И Правило.ИсточникСуммыОперации <> Перечисления.ПоказателиАналитическихРегистров.СуммаРасходовНаПродажу
			И Правило.ИсточникСуммыОперации <> Перечисления.ПоказателиАналитическихРегистров.СуммаРасходовНаПродажуБезНДС Тогда
			Правило.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ПередачаДавальцу2_5;
		КонецЕсли;
		
	Иначе
		
		Если ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.РеализацияВнеоборотныхАктивов Тогда
			Настройки = Правило.КомпоновщикНастроек.Получить();
			Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
				ЭлементыОтбора = КомпоновкаДанныхКлиентСервер.ПолучитьЭлементыОтбора(Настройки.Отбор);
				Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
					ПолеОтбора = СокрЛП(ЭлементОтбора.ЛевоеЗначение);
					Если ПолеОтбора = "СтатьяДоходовРасходов.ДоходыПоНМАиНИОКР" Тогда
						Правило.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.РеализацияНМА;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Правило.ИсточникДанных <> Справочники.НастройкиХозяйственныхОпераций.РеализацияНМА Тогда
					Правило.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.РеализацияОС;
				КонецЕсли;
			Иначе
				Правило.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.РеализацияОС;
			КонецЕсли;
		ИначеЕсли ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ОтклонениеВСтоимостиТоваровДоходы Тогда
			Правило.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ДоходыОтПереоценкиТоваров;
		ИначеЕсли ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ОтклонениеВСтоимостиТоваровРасходы Тогда
			Правило.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.РасходыОтПереоценкиТоваров;
		ИначеЕсли ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ПересортицаТоваров Тогда
			Правило.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ПересортицаТоваровСПереоценкой;
		ИначеЕсли ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ПередачаДавальцу2_5 Тогда
			Правило.ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ОтчетДавальцу2_5;
		ИначеЕсли ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.НачисленияПоДепозитам
			Или ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.НачисленияПоДепозитам
			Или ИсточникДанных = Справочники.НастройкиХозяйственныхОпераций.ПеречислениеНаДепозиты Тогда
			Настройки = Правило.КомпоновщикНастроек.Получить();
			Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, "ТипДенежныхСредств", Перечисления.ТипыДенежныхСредств.Депозиты, ВидСравненияКомпоновкиДанных.Равно, Истина);
				Правило.КомпоновщикНастроек = Новый ХранилищеЗначения(Настройки);
				Правило.ПредставлениеОтбора = Строка(Настройки.Отбор);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗаменуПолейАналитикиПравила(Правило, Приход, Расход, ИзмененныеИсточникиДанных, ПоКорреспондирующимРегистрам)
	
	ИзмененныйИсточникДанных = ИзмененныеИсточникиДанных.Получить(Правило.ИсточникДанных);
	Если ИзмененныйИсточникДанных <> Неопределено И Не ИзмененныйИсточникДанных.Свойство("ИспользоватьВБюджетировании") Тогда
		Если ИзмененныйИсточникДанных.Свойство("Приход")
			И Не ИзмененныйИсточникДанных.Свойство("Расход") Тогда
			Если ПоКорреспондирующимРегистрам Тогда
				СоответствиеИменПриход = СоответствиеИменПолейАналитики(Приход, ИзмененныйИсточникДанных.Приход.Исходный,
				"Приход", Неопределено, Истина);
			Иначе
				СоответствиеИменПриход = СоответствиеИменПолейАналитики(ИзмененныйИсточникДанных.Приход.Исходный, Приход,
				"Приход", Неопределено, Ложь);
			КонецЕсли;
			СоответствиеИменРасход = СоответствиеИменПолейАналитики(Расход, Расход, "Расход", Неопределено,
				ПоКорреспондирующимРегистрам);
		ИначеЕсли ИзмененныйИсточникДанных.Свойство("Расход") И Не ИзмененныйИсточникДанных.Свойство("Приход") Тогда
			СоответствиеИменПриход = СоответствиеИменПолейАналитики(Приход, Приход, "Приход", Неопределено,
				ПоКорреспондирующимРегистрам);
			Если ПоКорреспондирующимРегистрам Тогда
				СоответствиеИменРасход = СоответствиеИменПолейАналитики(Расход, ИзмененныйИсточникДанных.Расход.Исходный,
					"Расход", Неопределено, Истина);
			Иначе
				СоответствиеИменРасход = СоответствиеИменПолейАналитики(ИзмененныйИсточникДанных.Расход.Исходный, Расход,
					"Расход", Неопределено, Ложь);
			КонецЕсли;
		Иначе
			СоответствиеИменПриход = СоответствиеИменПолейАналитики(Приход, Приход, "Приход", Расход,
				ПоКорреспондирующимРегистрам);
			СоответствиеИменРасход = СоответствиеИменПолейАналитики(Расход, Расход, "Расход", Приход,
				ПоКорреспондирующимРегистрам);
		КонецЕсли;
	Иначе
		СоответствиеИменПриход = СоответствиеИменПолейАналитики(Приход, Приход, "Приход", Расход, ПоКорреспондирующимРегистрам);
		СоответствиеИменРасход = СоответствиеИменПолейАналитики(Расход, Расход, "Расход", Приход, ПоКорреспондирующимРегистрам);
	КонецЕсли;
	
	Для Счетчик = 1 По 6 Цикл
		Для ДопСчетчик = 1 По 2 Цикл
			Если ДопСчетчик = 1 Тогда
				ВыражениеЗаполненияАналитики = Правило["ВыражениеЗаполненияАналитики"+Счетчик];
			Иначе
				ВыражениеЗаполненияАналитики = Правило["ВыражениеЗаполненияАналитики"+Счетчик+"ИсторияПереходаНаНовыеФормулы"];
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыражениеЗаполненияАналитики) Тогда
				ПозицияРазделителя = СтрНайти(ВыражениеЗаполненияАналитики, ".");
				Если ПозицияРазделителя = 0 Тогда
					ВыражениеЗамены = ВыражениеЗаполненияАналитики;
				Иначе
					ВыражениеЗамены = Лев(ВыражениеЗаполненияАналитики, ПозицияРазделителя-1);
				КонецЕсли;
				ЗаменяемоеИмя = СоответствиеИменПриход.Получить(ВыражениеЗамены);
				Если ЗаменяемоеИмя = Неопределено Тогда
					ЗаменяемоеИмя = СоответствиеИменРасход.Получить(ВыражениеЗамены);
				КонецЕсли;
				Если ЗаменяемоеИмя <> Неопределено Тогда
					Если ПозицияРазделителя > 0 Тогда
						ЗаменяемоеИмя = ЗаменяемоеИмя + Сред(ВыражениеЗаполненияАналитики, ПозицияРазделителя);
					КонецЕсли;
					Если ДопСчетчик = 1 Тогда
						Правило["ВыражениеЗаполненияАналитики"+Счетчик] = ЗаменяемоеИмя;
					Иначе
						Правило["ВыражениеЗаполненияАналитики"+Счетчик+"ИсторияПереходаНаНовыеФормулы"] = ЗаменяемоеИмя;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Настройки = Правило.КомпоновщикНастроек.Получить();
	ОтборИзменен = Ложь;
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЭлементыОтбора = КомпоновкаДанныхКлиентСервер.ПолучитьЭлементыОтбора(Настройки.Отбор, Ложь);
		Для Счетчик = 1 По ЭлементыОтбора.Количество() Цикл
			ЭлементОтбора = ЭлементыОтбора[Счетчик-1]; // ЭлементОтбораКомпоновкиДанных -
			ИмяПоляОтбора = СокрЛП(ЭлементОтбора.ЛевоеЗначение);
			ПозицияРазделителя = СтрНайти(ИмяПоляОтбора, ".");
			Если ПозицияРазделителя = 0 Тогда
				ВыражениеЗамены = ИмяПоляОтбора;
			Иначе
				ВыражениеЗамены = Лев(ИмяПоляОтбора, ПозицияРазделителя-1);
			КонецЕсли;
			ЗаменяемоеИмя = СоответствиеИменПриход.Получить(ВыражениеЗамены);
			Если ЗаменяемоеИмя = Неопределено Тогда
				ЗаменяемоеИмя = СоответствиеИменРасход.Получить(ВыражениеЗамены);
			КонецЕсли;
			Если ЗаменяемоеИмя <> Неопределено Тогда
				Если ПустаяСтрока(ЗаменяемоеИмя) Тогда
					Если ЭлементОтбора.Родитель = Неопределено Тогда
						Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
					Иначе
						ЭлементОтбора.Родитель.Элементы.Удалить(ЭлементОтбора);
					КонецЕсли;
				Иначе
					Если ПозицияРазделителя > 0 Тогда
						ЗаменяемоеИмя = ЗаменяемоеИмя + Сред(ВыражениеЗаполненияАналитики, ПозицияРазделителя);
					КонецЕсли;
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЗаменяемоеИмя);
				КонецЕсли;
				ОтборИзменен = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ОтборИзменен Тогда
		Правило.КомпоновщикНастроек = Новый ХранилищеЗначения(Настройки);
		Правило.ПредставлениеОтбора = Строка(Настройки.Отбор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗаменуИсточниковСуммыПравила(Правило, Приход, Расход, ПоКорреспондирующимРегистрам)
	
	Если Приход = Перечисления.ТипыДанныхУчета.Номенклатура
		И Расход <> Перечисления.ТипыДанныхУчета.Контрагенты
		Или Расход = Перечисления.ТипыДанныхУчета.Номенклатура
		И Приход <> Перечисления.ТипыДанныхУчета.Контрагенты Тогда
		Если ПоКорреспондирующимРегистрам Тогда
			Если Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.Сумма Тогда
				Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.Себестоимость;
			ИначеЕсли Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС Тогда
				Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.Себестоимость;
			ИначеЕсли Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаНДС Тогда
				Правило.УстановитьПометкуУдаления(Истина);
			ИначеЕсли Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаРегл Тогда
				Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СебестоимостьРегл;
			КонецЕсли;
		Иначе
			Если Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.Себестоимость Тогда
				Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.Сумма;
			ИначеЕсли Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СебестоимостьРегл Тогда
				Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаРегл;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Приход = Перечисления.ТипыДанныхУчета.Номенклатура
		И Расход = Перечисления.ТипыДанныхУчета.Контрагенты Тогда
		Если ПоКорреспондирующимРегистрам Тогда
			Если Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.Стоимость Тогда
				Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.Сумма;
			ИначеЕсли Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СтоимостьБезНДС
				Или Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СтоимостьРегл Тогда
				Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС;
			КонецЕсли;
		Иначе
			Если Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.Себестоимость
				Или Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СебестоимостьРегл Тогда
				Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.Сумма;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Приход = Перечисления.ТипыДанныхУчета.Контрагенты
			И Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства
			Или Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства
			И Расход = Перечисления.ТипыДанныхУчета.Контрагенты Тогда
			Если Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.Сумма Тогда
				Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаОплаты;
			КонецЕсли;
		Иначе
			Если Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаОплаты
				Или Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаПредоплаты
				Или Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаПостоплаты Тогда
				Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства
		Или Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства Тогда
		Если Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаНДС Тогда
			Правило.УстановитьПометкуУдаления(Истина);
		ИначеЕсли Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС Тогда
			Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Если Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаРасходовНаПродажу Тогда
		Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.Сумма;
	ИначеЕсли Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаРасходовНаПродажуБезНДС Тогда
		Правило.ИсточникСуммыОперации = Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС;
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьЗаменуКоэффициентаПравила(Правило, ИмяМакетаИсточникаДанных)
	
	Если ИмяМакетаИсточникаДанных = "АмортизацияОС" Или ИмяМакетаИсточникаДанных = "АмортизацияНМА" Тогда
		Правило.Коэффициент = -Правило.Коэффициент;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПризнакИспользованияВБюджетированииИсточниковДанных(ИзмененныеИсточникиДанных, ПоКорреспондирующимРегистрам) Экспорт
	
	ПараметрыИсточникаДанных = Новый Структура("ИспользоватьВБюджетировании, Приход, Расход");
	ПараметрыИсточникаДанных.ИспользоватьВБюджетировании = ПоКорреспондирующимРегистрам;

	// РеализацияВнеоборотныхАктивов
	ПараметрыИсточникаДанных.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
	ПараметрыИсточникаДанных.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.РеализацияВнеоборотныхАктивов,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// ВходящийНДСПоПриобретению
	ПараметрыИсточникаДанных.Приход = Перечисления.ТипыДанныхУчета.НДС;
	ПараметрыИсточникаДанных.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.ВходящийНДСПоПриобретению,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// ОплатаУслугПоАренде
	ПараметрыИсточникаДанных.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
	ПараметрыИсточникаДанных.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.ОплатаУслугПоАренде,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// ОплатаОбеспечительногоПлатежа
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.ОплатаОбеспечительногоПлатежа,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// ОплатаВыкупнойСтоимостиПредметовАренды
	ИзмененныеИсточникиДанных.Вставить(
		Справочники.НастройкиХозяйственныхОпераций.ОплатаВыкупнойСтоимостиПредметовАренды,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// ОплатаВыкупнойСтоимостиПредметовАрендыАванс
	ИзмененныеИсточникиДанных.Вставить(
		Справочники.НастройкиХозяйственныхОпераций.ОплатаВыкупнойСтоимостиПредметовАрендыАванс,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// ВозвратОбеспечительногоПлатежа
	ПараметрыИсточникаДанных.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
	ПараметрыИсточникаДанных.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.ВозвратОбеспечительногоПлатежа,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// ВозвратВыкупнойСтоимостиПредметовАренды
	ИзмененныеИсточникиДанных.Вставить(
		Справочники.НастройкиХозяйственныхОпераций.ВозвратВыкупнойСтоимостиПредметовАренды,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// ВозвратВыкупнойСтоимостиПредметовАрендыАванс
	ИзмененныеИсточникиДанных.Вставить(
		Справочники.НастройкиХозяйственныхОпераций.ВозвратВыкупнойСтоимостиПредметовАрендыАванс,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// СписаниеОС
	ПараметрыИсточникаДанных.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
	ПараметрыИсточникаДанных.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.СписаниеОС,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// НачислениеПроцентовПоАренде
	ПараметрыИсточникаДанных.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
	ПараметрыИсточникаДанных.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.НачислениеПроцентовПоАренде,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// ФормированиеСтоимостиАрендованныхОС
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.ФормированиеСтоимостиАрендованныхОС,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// ОтражениеУслугПоАрендеВРасходах
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.ОтражениеУслугПоАрендеВРасходах,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// ПередачаДавальцу
	ПараметрыИсточникаДанных.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
	ПараметрыИсточникаДанных.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.ПередачаДавальцу2_5,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// НачислениеНДСНалоговымАгентом
	ПараметрыИсточникаДанных.Приход = Перечисления.ТипыДанныхУчета.НДС;
	ПараметрыИсточникаДанных.Расход = Перечисления.ТипыДанныхУчета.НДС;
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.НачислениеНДСНалоговымАгентом,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// НачислениеНДСпоОтгрузкеТоваровВПути
	ПараметрыИсточникаДанных.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
	ПараметрыИсточникаДанных.Расход = Перечисления.ТипыДанныхУчета.НДС;
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.НачислениеНДСпоОтгрузкеТоваровВПути,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// ОтражениеНДФЛ
	ПараметрыИсточникаДанных.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
	ПараметрыИсточникаДанных.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.ОтражениеНДФЛ,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// РаспределениеРасходовНаСебестоимостьПродаж
	ПараметрыИсточникаДанных.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
	ПараметрыИсточникаДанных.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
	ИзмененныеИсточникиДанных.Вставить(
		Справочники.НастройкиХозяйственныхОпераций.РаспределениеРасходовНаСебестоимостьПродаж,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// СписаниеРезервовПредстоящихРасходов
	ПараметрыИсточникаДанных.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
	ПараметрыИсточникаДанных.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.СписаниеРезервовПредстоящихРасходов,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
	// КорректировкаПриобретенияПрошлогоПериода
	ПараметрыИсточникаДанных.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
	ПараметрыИсточникаДанных.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
	ИзмененныеИсточникиДанных.Вставить(Справочники.НастройкиХозяйственныхОпераций.КорректировкаПриобретенияПрошлогоПериода,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточникаДанных));
	
КонецПроцедуры

Функция СоответствиеИменПолейАналитики(ТипДанныхУчета, ИсходныйТипДанныхУчета, Направление, КорТипДанныхУчета, ПоКорреспондирующимРегистрам)
	
	СоответствиеИмен = Новый Соответствие;
	
	Если ТипДанныхУчета = ИсходныйТипДанныхУчета
		Или ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДоходыРасходы
		И ИсходныйТипДанныхУчета = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы
		Или ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы
		И ИсходныйТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДоходыРасходы Тогда
		Если ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДоходыРасходы Тогда
			Если КорТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДоходыРасходы
				Или КорТипДанныхУчета = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы Тогда
				СоответствиеИмен.Вставить(?(Направление = "Приход", "КорПодразделение", "Подразделение"), "ПодразделениеДоходовРасходов");
				СоответствиеИмен.Вставить(?(Направление = "Приход", "КорНаправлениеДеятельности", "НаправлениеДеятельности"), "НаправлениеДеятельностиДоходовРасходов");
				СоответствиеИмен.Вставить(?(Направление = "Приход", "КорСтатья", "Статья"), "СтатьяДоходовРасходов");
			Иначе
				СоответствиеИмен.Вставить("НаправлениеДеятельностиСтатьи", "НаправлениеДеятельностиДоходовРасходов");
				СоответствиеИмен.Вставить("СтатьяАктивовПассивов", "СтатьяДоходовРасходов");
			КонецЕсли;
			Если Направление = "Приход" Тогда
				СоответствиеИмен.Вставить("КорКонтрагент", "Контрагент");
			КонецЕсли;
		ИначеЕсли ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы Тогда
			Если КорТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДоходыРасходы
				Или КорТипДанныхУчета = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы Тогда
				СоответствиеИмен.Вставить(?(Направление = "Приход", "КорПодразделение", "Подразделение"), "ПодразделениеАктивовПассивов");
				СоответствиеИмен.Вставить(?(Направление = "Приход", "КорНаправлениеДеятельности", "НаправлениеДеятельности"), "НаправлениеДеятельностиАктивовПассивов");
				СоответствиеИмен.Вставить(?(Направление = "Приход", "КорСтатья", "Статья"), "СтатьяАктивовПассивов");
			Иначе
				СоответствиеИмен.Вставить("НаправлениеДеятельностиСтатьи", "НаправлениеДеятельностиАктивовПассивов");
				СоответствиеИмен.Вставить("СтатьяДоходовРасходов", "СтатьяАктивовПассивов");
			КонецЕсли;
			Если Направление = "Приход" Тогда
				СоответствиеИмен.Вставить("КорКонтрагент", "Контрагент");
			КонецЕсли;
		ИначеЕсли ТипДанныхУчета = Перечисления.ТипыДанныхУчета.Контрагенты Тогда
			СоответствиеИмен.Вставить("ЗаказКлиента", "ОбъектРасчетов");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипДанныхУчета = Перечисления.ТипыДанныхУчета.Контрагенты
		И ИсходныйТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДенежныеСредства Тогда
		СоответствиеИмен.Вставить("ДенежныеСредства", "Договор");
		СоответствиеИмен.Вставить("ВалютаПлатежа", "Валюта");
	ИначеЕсли ТипДанныхУчета = Перечисления.ТипыДанныхУчета.Контрагенты
		И ИсходныйТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДоходыРасходы Тогда
		СоответствиеИмен.Вставить("АналитикаАктивовПассивов", "Договор");
	ИначеЕсли ТипДанныхУчета = Перечисления.ТипыДанныхУчета.Номенклатура
		И ТипДанныхУчета = ИсходныйТипДанныхУчета Тогда
		СоответствиеИмен.Вставить("ТипНоменклатуры", "Номенклатура.ТипНоменклатуры");
		СоответствиеИмен.Вставить("ВидНоменклатуры", "Номенклатура.ВидНоменклатуры");
		СоответствиеИмен.Вставить("ЕдиницаИзмерения", "Номенклатура.ЕдиницаИзмерения");
		СоответствиеИмен.Вставить("Марка", "Номенклатура.Марка");
		СоответствиеИмен.Вставить("Производитель", "Номенклатура.Производитель");
		СоответствиеИмен.Вставить("СезоннаяГруппа", "Номенклатура.СезоннаяГруппа");
		СоответствиеИмен.Вставить("ЦеноваяГруппа", "Номенклатура.ЦеноваяГруппа");
		СоответствиеИмен.Вставить("ТоварнаяКатегория", "Номенклатура.ТоварнаяКатегория");
		СоответствиеИмен.Вставить("ТипЗапасов", "ВидЗапасов.ТипЗапасов");
	КонецЕсли;
	
	Если Не ПоКорреспондирующимРегистрам И СоответствиеИмен.Количество() > 0 Тогда
		СоответствиеИменОбратное = ОбщегоНазначения.СкопироватьРекурсивно(СоответствиеИмен);
		СоответствиеИмен.Очистить();
		Для Каждого КлючИЗначение Из СоответствиеИменОбратное Цикл
			СоответствиеИмен.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеИмен;
	
КонецФункции

// Проверяет, имеются ли в базе правила получения фактических данных без хранимого факта по данным оперативного учета,
// что является препятствием для включения сбора факта по корреспондирующим регистрам.
//
// Возвращаемое значение:
//  Булево - Истина, если по всем правилам включено хранение факта
//
Функция ПоВсемПравиламИспользуетсяХранимыйФакт() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|ГДЕ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.РазделИсточникаДанных = ЗНАЧЕНИЕ(Перечисление.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет)
	|	И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти 

#КонецЕсли
