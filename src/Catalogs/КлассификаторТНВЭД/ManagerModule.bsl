#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает таблицу классификатора из макета с предопределенными элементами.
// Макеты хранятся в макетах данного справочника (см. общую форму "ДобавлениеЭлементовВКлассификатор").
//
// Параметры:
//	Переменные - Строка - в данном методе не используется, однако является обязательной в случае обращения
//							к другим классификаторам.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица классификатора с колонками:
//			* Код					- Строка - строковое представление кода элемента классификатора.
//			* Наименование			- Строка - наименование элемента классификатора.
//			* ЕдиницаИзмеренияКод	- Строка - код единицы измерения по ОКЕИ.
//			* ПрослеживаемыйТовар	- Булево - признак того, что товар подлежит учету в системе прослеживаемости.
//
Функция ТаблицаКлассификатора(Знач Переменные) Экспорт
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	
	НазваниеМакета = "КлассификаторТоварнойНоменклатурыВнешнеэкономическойДеятельности";
	Макет = Справочники.КлассификаторТНВЭД.ПолучитьМакет(НазваниеМакета);
	
	// В полученном макете содержатся значения всех списков используемых в отчете, ищем переданный.
	Список = Макет.Области.Найти("Строки");
	
	Если Список.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
		
		// Заполнение дерева данными списка.
		ВерхОбласти	= Список.Верх;
		НизОбласти	= Список.Низ;
		
		НомерКолонки	= 1;
		Область			= Макет.Область(ВерхОбласти - 1, НомерКолонки);
		ИмяКолонки		= Область.Текст;
		
		Пока ЗначениеЗаполнено(ИмяКолонки) Цикл
			
			Если ИмяКолонки = "Код" Тогда
				ТаблицаПоказателей.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12)));
			ИначеЕсли ИмяКолонки = "Наименование" Тогда
				ТаблицаПоказателей.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
			ИначеЕсли ИмяКолонки = "ЕдиницаИзмерения" Тогда
				ТаблицаПоказателей.Колонки.Добавить("ЕдиницаИзмеренияКод",Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
			ИначеЕсли ИмяКолонки = "ПрослеживаемыйТовар" Тогда
				ТаблицаПоказателей.Колонки.Добавить("ПрослеживаемыйТовар",Новый ОписаниеТипов("Булево"));
			КонецЕсли;
			
			НомерКолонки	= НомерКолонки + 1;
			Область			= Макет.Область(ВерхОбласти - 1, НомерКолонки);
			ИмяКолонки		= Область.Текст;
			
		КонецЦикла;
		
		Для НомСтр = ВерхОбласти По НизОбласти Цикл
			
			// Отображаем только элементы.
			
			Код = СокрП(Макет.Область(НомСтр, 1).Текст);
			
			Если СтрДлина(Код) = 2 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСписка = ТаблицаПоказателей.Добавить();
			
			Для Каждого Колонка Из ТаблицаПоказателей.Колонки Цикл
				ЗначениеКолонки = СокрП(Макет.Область(НомСтр, ТаблицаПоказателей.Колонки.Индекс(Колонка) + 1).Текст);
				
				Если Колонка.Имя = "ПрослеживаемыйТовар" Тогда
					СтрокаСписка[Колонка.Имя] = Число(СокрЛП(ЗначениеКолонки)) = 1;
				Иначе
					СтрокаСписка[Колонка.Имя] = ЗначениеКолонки;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	КолонкаТаблицыЗначений = ТаблицаПоказателей.Колонки[0]; // КолонкаТаблицыЗначений
	ТаблицаПоказателей.Сортировать(КолонкаТаблицыЗначений.Имя + " Возр");
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Процедура ЗаполнитьКодыТНВЭДВКоллекции(Коллекция, ПолеНоменклатуры, КодыТНВЭДНоменклатуры, СоответствиеКодов, Отказ) Экспорт
	
	Для Каждого СтрокаТЧ Из Коллекция Цикл
		
		СтрокаКода = КодыТНВЭДНоменклатуры.Найти(СтрокаТЧ[ПолеНоменклатуры],"ПолеНоменклатуры");
		
		Если СтрокаКода = Неопределено Тогда
			СтрокаКода = КодыТНВЭДНоменклатуры.Найти(СтрокаТЧ[ПолеНоменклатуры].Номенклатура,"ПолеНоменклатуры");
			Если СтрокаКода = Неопределено Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаКода.КодТНВЭД = ПустаяСсылка() Тогда
			СтрокаТЧ.КодТНВЭД = СоответствиеКодов[СтрокаКода.СырьевойТовар];
		Иначе
			СтрокаТЧ.КодТНВЭД = СтрокаКода.КодТНВЭД;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСлужебныеЭлементы() Экспорт
	
	СоответствиеКодов = Новый Соответствие;
	СоответствиеКодов.Вставить(Ложь, НайтиПоНаименованию("несырьевой товар"));
	СоответствиеКодов.Вставить(Истина, НайтиПоНаименованию("сырьевой товар"));
	
	Возврат СоответствиеКодов;
	
КонецФункции

// Функция ищет по коду элементы в справочнике Классификатор ТН ВЭД.
// Если их нет, то создает элементы справочника в соответствии с классификатором ТН ВЭД ЕАЭС.
//
// Параметры:
//	Код - Строка - Строка с кодом классификатора ТН ВЭД,
//	РежимОбновления - Булево - Истина, если признак записи объекта через метод ОбновлениеИнформационнойБазы.ЗаписатьОбъект().
//
// Возвращаемое значение:
//	СправочникСсылка.КлассификаторТНВЭД - ссылка на элемент классификатора или Неопределено, если такого кода нет в ТН ВЭД.
//
Функция НайтиСоздатьЭлементКлассификатораТНВЭД(Код, РежимОбновления = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторТНВЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|ГДЕ
	|	КлассификаторТНВЭД.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
	ИначеЕсли Выборка.Количество() > 1 Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ТаблицаКлассификатора = ТаблицаКлассификатора(1);
	ТаблицаКлассификатора.Индексы.Добавить("Код");
	
	ОтборСтрок = Новый Структура("Код", Код);
	НайденныеСтроки = ТаблицаКлассификатора.НайтиСтроки(ОтборСтрок);
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		
		СвойстваЭлемента = НайденныеСтроки[0];
		
		СправочникОбъект = Справочники.КлассификаторТНВЭД.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СправочникОбъект, СвойстваЭлемента);
		
		СправочникОбъект.НаименованиеПолное = СвойстваЭлемента.Наименование;
		
		Соответствие = Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(СвойстваЭлемента.ЕдиницаИзмеренияКод,
																										РежимОбновления);
		
		Если Соответствие <> Неопределено Тогда
			СправочникОбъект.ЕдиницаИзмерения = Соответствие[СвойстваЭлемента.ЕдиницаИзмеренияКод];
		КонецЕсли;
		
		Если РежимОбновления Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		Иначе
			СправочникОбъект.Записать();
		КонецЕсли;
		
		Возврат СправочникОбъект.Ссылка;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли
