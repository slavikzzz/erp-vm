#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получить адреса схемы компоновки данных во временном хранилище.
// 
// Параметры:
//  Параметры - Структура:
//  * ИмяСхемы - Строка - 
//  * КорСчета - Массив из ПланСчетовСсылка.Хозрасчетный
//  * ИмяНастроекКомпоновщика - Строка
//  * НеНастраиватьПараметры - Булево
//  * АдресСхемыКомпоновкиДанных - Строка
//  * Счета - Массив из ПланСчетовСсылка.Хозрасчетный
//  * УникальныйИдентификатор - УникальныйИдентификатор
//  * НастройкиОтбора - КомпоновщикНастроекКомпоновкиДанных.
// 
// Возвращаемое значение:
//  Структура:
// * СхемаКомпоновкиДанных - Строка
// * НастройкиКомпоновкиДанных - Строка.
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(Параметры) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	Если ЗначениеЗаполнено(Параметры.АдресСхемыКомпоновкиДанных) Тогда
		Адреса.СхемаКомпоновкиДанных = Параметры.АдресСхемыКомпоновкиДанных;
	Иначе
		
		Схема = Справочники.АлгоритмыСбораДанныхБухОтчетности.ОбновитьСхемуОтборов(
			Параметры.Счета,
			Справочники.АлгоритмыСбораДанныхБухОтчетности.ПолучитьМакет(Параметры.ИмяСхемы));
		Если Параметры.ИмяСхемы = "НастройкиОтбораПоСчетамКорСчетам" Тогда
			Схема = Справочники.АлгоритмыСбораДанныхБухОтчетности.ОбновитьСхемуОтборов(
			Параметры.КорСчета,
			Схема, "КорСубконто");	
		КонецЕсли;
		Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, Параметры.УникальныйИдентификатор);
	КонецЕсли;
	
	Настройки = Параметры[Параметры.ИмяНастроекКомпоновщика].ПолучитьНастройки();
	Если ЗначениеЗаполнено(Настройки) Тогда
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, Параметры.УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

// В схеме компоновке данных устанавливает типы субконто общие для счетов из переданного массива.
// 
// Параметры:
//  Счета - Массив из ПланСчетовСсылка.Хозрасчетный
//  Схема - СхемаКомпоновкиДанных
//  ИмяПоляПрефикс - Строка.
// 
// Возвращаемое значение:
//  СхемаКомпоновкиДанных.
Функция ОбновитьСхемуОтборов(Счета, Схема, ИмяПоляПрефикс = "Субконто") Экспорт
	
	МаксКоличествоСубконто	= БухгалтерскийУчет.МаксимальноеКоличествоСубконто();
		
	ДанныеСчетов = НастраиваемаяБухгалтерскаяОтчетность.ОбщиеСубконтоСчетов(Счета, МаксКоличествоСубконто);
	
	ВидыСубконто = Новый СписокЗначений;
	// Изменение представления и наложения ограничения типа значения.
	НаборДанных = Схема.НаборыДанных.ОсновнойНаборДанных;
	Для Индекс = 1 По МаксКоличествоСубконто Цикл
		Поле = НаборДанных.Поля.Найти(ИмяПоляПрефикс + Индекс); // ПолеНабораДанныхСхемыКомпоновкиДанных
		Если Поле <> Неопределено Тогда
			Если ДанныеСчетов["ВидСубконто" + Индекс] <> Неопределено Тогда
				ТипЗначения = ДанныеСчетов["ВидСубконто" + Индекс + "ТипЗначения"];
				ВидСубконто = ДанныеСчетов["ВидСубконто" + Индекс];
				ВидыСубконто.Добавить(ВидСубконто);
				Поле.ТипЗначения = ТипЗначения;
				Поле.Заголовок   = ДанныеСчетов["ВидСубконто" + Индекс + "Наименование"];
			Иначе
				Поле.ОграничениеИспользования.Условие = Истина;
				Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеСчетов.УчетПоПризнакамУчета <> Неопределено Тогда
		Для Каждого ПризнакУчета Из  ДанныеСчетов.УчетПоПризнакамУчета Цикл
			Поле = НаборДанных.Поля.Найти(ПризнакУчета.Ключ); // ПолеНабораДанныхСхемыКомпоновкиДанных
			Поле.ОграничениеИспользования.Условие = Не ПризнакУчета.Значение;
			Поле.ОграничениеИспользованияРеквизитов.Условие = Не ПризнакУчета.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Схема;
	
КонецФункции

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;

	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Сформировать наименование алгоритма.
// 
// Параметры:
//  Алгоритм - СправочникОбъект.АлгоритмыСбораДанныхБухОтчетности
// 
// Возвращаемое значение:
//  Строка
Функция СформироватьНаименованиеАлгоритма(Алгоритм) Экспорт
	
	Наименование = ?(Алгоритм.Вычитаемый,"-","") + Алгоритм.ТипПоказателя + " " 
						+ ?(Алгоритм.Счета.Количество()>0, Алгоритм.Счета[0].Счет, "") 
						+ ?(Алгоритм.Счета.Количество()>1,"( и др.)","")  
						+ ?(Алгоритм.КорСчета.Количество()>0," в кор. с  " + Алгоритм.КорСчета[0].Счет, "") 
						+ ?(Алгоритм.КорСчета.Количество()>1,"( и др.)","") 
						+ ?(Алгоритм.ОтборЗадан," с отбором","");
	
	Возврат Наименование;
	
КонецФункции

// Формирует текст расшифровки алгоритма.
// 
// Параметры:
//  ТипПоказателя - Строка
//  Счета - Массив из ПланСчетовСсылка.Хозрасчетный
//  КорСчета - Массив из ПланСчетовСсылка.Хозрасчетный
//  НастройкиОтбора - Неопределено, НастройкиКомпоновкиДанных - 
//  Группировки - Неопределено, СписокЗначений из Строка - 
// 
// Возвращаемое значение:
//  Строка - Сформировать расшифровку алгоритма
Функция СформироватьРасшифровкуАлгоритма(ТипПоказателя, Счета, КорСчета, НастройкиОтбора = Неопределено, Группировки = Неопределено) Экспорт
	
	Если ТипПоказателя = "СКДР" Тогда
		Слагаемое1 = НСтр("ru = 'Развернутое сальдо на конец периода по дебету счета';
							|en = 'Expanded closing balance for account debit as of the period end'");
		Слагаемое2 = СтрСоединить(Счета, ", ");
		Слагаемое4 = "";
		Слагаемое5 = "";
	ИначеЕсли ТипПоказателя = "СККР" Тогда
		Слагаемое1 = НСтр("ru = 'Развернутое сальдо на конец периода по кредиту счета';
							|en = 'Expanded closing balance for account credit as of the period end'");
		Слагаемое2 = СтрСоединить(Счета, ", ");
		Слагаемое4 = "";
		Слагаемое5 = "";
	ИначеЕсли ТипПоказателя = "СНД" Тогда
		Слагаемое1 = НСтр("ru = 'Сальдо на начало периода по дебету счета';
							|en = 'Opening balance for account debit'");
		Слагаемое2 = СтрСоединить(Счета, ", ");
		Слагаемое4 = "";
		Слагаемое5 = "";
	ИначеЕсли ТипПоказателя = "СНК" Тогда
		Слагаемое1 = НСтр("ru = 'Сальдо на начало периода по кредиту счета';
							|en = 'Opening balance for account credit'");
		Слагаемое2 = СтрСоединить(Счета, ", ");
		Слагаемое4 = "";
		Слагаемое5 = "";
	ИначеЕсли ТипПоказателя = "СКД" Тогда
		Слагаемое1 = НСтр("ru = 'Сальдо на конец периода по дебету счета';
							|en = 'Closing balance for account debit'");
		Слагаемое2 = СтрСоединить(Счета, ", ");
		Слагаемое4 = "";
		Слагаемое5 = "";
	ИначеЕсли ТипПоказателя = "СКК" Тогда
		Слагаемое1 = НСтр("ru = 'Сальдо на конец периода по кредиту счета';
							|en = 'Closing balance for account credit '");
		Слагаемое2 = СтрСоединить(Счета, ", ");
		Слагаемое4 = "";
		Слагаемое5 = "";
	ИначеЕсли ТипПоказателя = "ДО" Тогда
		Слагаемое1 = НСтр("ru = 'Оборот по дебету счета';
							|en = 'Account debit turnover'");
		Слагаемое2 = СтрСоединить(Счета, ", ");
		Слагаемое4 = "";
		Слагаемое5 = "";
	ИначеЕсли ТипПоказателя = "КО" Тогда
		Слагаемое1 = НСтр("ru = 'Оборот по кредиту счета';
							|en = 'Account credit turnover'");
		Слагаемое2 = СтрСоединить(Счета, ", ");
		Слагаемое4 = "";
		Слагаемое5 = "";
	ИначеЕсли ТипПоказателя = "ОБ" Тогда
		Если КорСчета.Количество() <> 0 Тогда
			Слагаемое1 = НСтр("ru = 'Оборот с дебета счета';
								|en = 'Account debit turnover'");
			Слагаемое2 = СтрСоединить(Счета, ", ");
			Слагаемое4 = НСтр("ru = 'в кредит счета';
								|en = 'credited to account'");
			Слагаемое5 = СтрСоединить(КорСчета, ", ");
			Если КорСчета.Количество() = 1 
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КорСчета[0], "Вид") = ВидСчета.Пассивный Тогда
				Слагаемое1 = НСтр("ru = 'Оборот с кредита счета';
									|en = 'Account credit turnover'");
				Слагаемое2 = СтрСоединить(КорСчета, ", ");
				Слагаемое4 = НСтр("ru = 'в дебет счета';
									|en = 'debited to account'");
				Слагаемое5 = СтрСоединить(Счета, ", ");
			КонецЕсли;
		Иначе
			Слагаемое1 = НСтр("ru = 'Оборот счета';
								|en = 'Оборот счета'");
			Слагаемое2 = СтрСоединить(Счета, ", ");
			Слагаемое4 = "";
			Слагаемое5 = "";
		КонецЕсли;
	ИначеЕсли ТипПоказателя = "СОБ" Тогда
		Слагаемое1 = НСтр("ru = 'Свернутый оборот по счетам';
							|en = 'Свернутый оборот по счетам'");
		Слагаемое2 = СтрСоединить(Счета, ", ");
		Если Группировки <> Неопределено И Группировки.Количество()>0 Тогда
			СписокГруппировок = Новый Массив();
			Для Каждого Группировка Из Группировки Цикл
				СписокГруппировок.Добавить("""" + Строка(Группировка) + """");
			КонецЦикла;
			Слагаемое4 = СтрШаблон(НСтр("ru = 'в разрезе группировок: %1';
										|en = 'в разрезе группировок: %1'"), СтрСоединить(СписокГруппировок, ", "));
		Иначе
			Слагаемое4 = "";
		КонецЕсли;
		Слагаемое5 = "";
	КонецЕсли;
	
	Слагаемое3 = "";
	Слагаемое6 = "";
	Если НастройкиОтбора <> Неопределено Тогда
		
		Если ТипЗнч(НастройкиОтбора) = Тип("ПеречислениеСсылка.ВидыДвиженийДенежныхСредств") Тогда
			Слагаемое3 = СтрШаблон(НСтр("ru = '/вид движения ""%1""';
										|en = '/the ""%1"" cash flow kind'"), НастройкиОтбора);
			Слагаемое6 = "";
		Иначе
			ОтборыДт = Новый Массив;
			ОтборыКт = Новый Массив;
			Для Каждого Отбор Из НастройкиОтбора.Отбор.Элементы Цикл
				
				Если Отбор.Использование Тогда
					
					ПолеОтбора = НастройкиОтбора.Отбор.ДоступныеПоляОтбора.НайтиПоле(Отбор.ЛевоеЗначение);

					Если ПолеОтбора <> Неопределено Тогда
						ПолныйЗаголовок = ПолеОтбора.Заголовок;
						ЧастиЗаголовка = СтрРазделить(ПолныйЗаголовок, ".");

						Если ЧастиЗаголовка.Количество() > 1 И (СтрНайти(ЧастиЗаголовка[0], "Субконто") <> 0
							Или СтрНайти(ЧастиЗаголовка[0], "Кор субконто") <> 0) Тогда
							Строка = НСтр("ru = '/объекты со значением реквизита %1/';
											|en = '/objects with the %1 attribute value/'");
						Иначе
							Строка = НСтр("ru = '/с отбором по %1/';
											|en = '/with filter by %1/'");
						КонецЕсли;

						ЗначенияРеквизитов = "";
						Для Сч = 1 По ЧастиЗаголовка.Количество() - 1 Цикл
							ЗначенияРеквизитов = ?(ЗначенияРеквизитов = "", """" + ЧастиЗаголовка[Сч] + """",
								ЗначенияРеквизитов + " - """ + ЧастиЗаголовка[Сч] + """");
						КонецЦикла;

						ЗначенияРеквизитов = ЗначенияРеквизитов + ?(ЗначенияРеквизитов <> "", " - ", "") + """"
							+ Отбор.ПравоеЗначение + """";

						Если СтрНайти(ЧастиЗаголовка[0], "Кор субконто") <> 0 Тогда
							ОтборыКт.Добавить(СтрШаблон(Строка, ЗначенияРеквизитов));
						Иначе
							ОтборыДт.Добавить(СтрШаблон(Строка, ЗначенияРеквизитов));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Слагаемое3 = СтрЗаменить(СтрСоединить(ОтборыДт), "//", "/");
			Слагаемое6 = СтрЗаменить(СтрСоединить(ОтборыКт), "//", "/");
		КонецЕсли;	
	КонецЕсли;

	Возврат СокрЛП(СтрШаблон("%1 %2 %3 %4 %5 %6", Слагаемое1, Слагаемое2, Слагаемое3, Слагаемое4, Слагаемое5, Слагаемое6));
	
КонецФункции

// Формирует массив доступных типов показателей отчетности.
// 
// Параметры:
//  ФормаОтчетности - ПеречислениеСсылка.ФормыБухгалтерскойОтчетности
// 
// Возвращаемое значение:
//  СписокЗначений из Строка
Функция ТипыПоказателя(ФормаОтчетности = Неопределено) Экспорт

	ТипыПоказателя = Новый СписокЗначений;
	ТипыПоказателя.Добавить("СНД");
	ТипыПоказателя.Добавить("СНК");
	ТипыПоказателя.Добавить("СКД");
	ТипыПоказателя.Добавить("СКК");
	ТипыПоказателя.Добавить("СКДР");
	ТипыПоказателя.Добавить("СККР");
	ТипыПоказателя.Добавить("ДО");
	ТипыПоказателя.Добавить("КО");
	ТипыПоказателя.Добавить("ОБ");
	Если ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР
		ИЛИ ФормаОтчетности = Неопределено Тогда
		ТипыПоказателя.Добавить("СОБ","Свернутый оборот");
	КонецЕсли;
	
	Возврат ТипыПоказателя;
	
КонецФункции

#КонецОбласти

#КонецЕсли