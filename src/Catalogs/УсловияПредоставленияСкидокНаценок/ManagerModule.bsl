#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Получает реквизиты объекта, которые необходимо блокировать от изменения
//
// Возвращаемое значение:
//  Массив - блокируемые реквизиты объекта.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("УсловиеПредоставления");
	Результат.Добавить("ВариантОпределенияПериодаНакопительнойСкидки");
	
	Результат.Добавить("ВариантНакопления");
	Результат.Добавить("КритерийОграниченияПримененияЗаОбъемПродаж");
	Результат.Добавить("ВалютаОграничения");
	Результат.Добавить("ГрафикОплаты");
	Результат.Добавить("ФормаОплаты");
	Результат.Добавить("ЗначениеУсловияОграничения");
	Результат.Добавить("СегментНоменклатурыОграничения");
	Результат.Добавить("ПериодНакопления");
	Результат.Добавить("ТипСравнения");
	Результат.Добавить("ГруппаПользователей");
	Результат.Добавить("ВремяДействия");
	Результат.Добавить("ВидКартыЛояльности");
	Результат.Добавить("КоличествоПериодовНакопления");
	Результат.Добавить("СегментПартнеров");
	Результат.Добавить("ВариантОтбораНоменклатуры");
	Результат.Добавить("ВключатьТекущуюПродажуВНакопленныйОбъемПродаж");
	Результат.Добавить("КоличествоДнейПослеДняРождения");
	Результат.Добавить("КоличествоДнейДоДняРождения");

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.УсловияПредоставленияСкидокНаценок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.13.29";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("71d3bd90-dd79-40a9-932f-61a7f4c48c22");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.УсловияПредоставленияСкидокНаценок.ЗарегистрироватьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Обновление кэшированных запросов для Условий предоставления скидок наценок';
									|en = 'Update cached requests for Conditions for discounts markups'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.УсловияПредоставленияСкидокНаценок.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.УсловияПредоставленияСкидокНаценок.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.УсловияПредоставленияСкидокНаценок.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.УсловияПредоставленияСкидокНаценок";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УсловияПредоставленияСкидокНаценок.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УсловияПредоставленияСкидокНаценок КАК УсловияПредоставленияСкидокНаценок
		|ГДЕ
		|	НЕ УсловияПредоставленияСкидокНаценок.УдалитьОбновленНаПроизводительныйРежим
		|	И НЕ УсловияПредоставленияСкидокНаценок.ЭтоГруппа
		|	И УсловияПредоставленияСкидокНаценок.УсловиеПредоставления <> ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ВнешняяОбработка)");
	
	РегистрируемыеЭлементы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РегистрируемыеЭлементы);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.УсловияПредоставленияСкидокНаценок";
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого ЭлементСправочника Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСправочника.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ЭлементСправочника.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
			Иначе
				
				НастройкиКомпоновкиДанных = СправочникОбъект.ХранилищеНастроекКомпоновкиДанных.Получить();
				Если ЗначениеЗаполнено(НастройкиКомпоновкиДанных)
						И ТипЗнч(НастройкиКомпоновкиДанных) = Тип("Структура")
						И НастройкиКомпоновкиДанных.Свойство("Запрос")
						И ТипЗнч(НастройкиКомпоновкиДанных.Запрос) = Тип("Структура")
						И НастройкиКомпоновкиДанных.Запрос.Свойство("ТекстЗапроса")
						И ТипЗнч(НастройкиКомпоновкиДанных.Запрос.ТекстЗапроса) = Тип("Строка")
						И СтрНайти(НастройкиКомпоновкиДанных.Запрос.ТекстЗапроса, "Константа"+"."+"ИспользоватьПроизводительныйРежимЗаписиИнформацииОДоступностиТоваровИРабот") > 0 Тогда
						
					СкидкиНаценкиСервер.ОбновитьКэшированныйЗапрос(СправочникОбъект);
					
				КонецЕсли;
				СправочникОбъект.УдалитьОбновленНаПроизводительныйРежим = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ЭлементСправочника.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
