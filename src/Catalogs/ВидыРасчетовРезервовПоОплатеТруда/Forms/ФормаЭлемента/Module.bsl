
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗначенияДляЗаполнения = Новый Структура("Организация", "Объект.Организация");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		ПриПолученииДанныхНаСервере(РеквизитФормыВЗначение("Объект"));
		УстановитьТипЗначенияВидаРасчета();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не Объект.ИспользоватьСобственнуюФормулуРасчета Тогда
		ОчиститьПоказателиВидаРасчетаПоНачислению(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВидыРасчетовРезервовПоОплатеТруда", Объект.Ссылка, Объект.Резерв);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "Запись_ПоказателиРасчетаЗарплаты" Или ИмяСобытия = "Запись_ПоказателиРасчетаРезервовПоОплатеТруда")
		И Источник = ЭтотОбъект Тогда 
		Отбор = Новый Структура("Показатель", Параметр);
		Если Объект.Показатели.НайтиСтроки(Отбор).Количество() > 0 Тогда 
			ИзмененыПоказателиНачисления = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РезервПриИзменении(Элемент)
	
	РезервПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РезервОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВидРасчетаПредыдущий)
		И ВидРасчетаПредыдущий <> Объект.ВидРасчета Тогда
		ПоказатьВопросОбИзмененииПоказателей();
	Иначе
		ИзмененитьВидРасчетаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьРезультатПриИзменении(Элемент)
	
	Объект.ИспользоватьСобственнуюФормулуРасчета = Истина;
	Объект.Рассчитывается = ?(РассчитыватьРезультат = 0, Истина, Ложь);
	РассчитыватьРезультатПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОперативныеПоказателиВЦеломЗаМесяцЧислоПриИзменении(Элемент)
	
	Объект.ИспользоватьСобственнуюФормулуРасчета = Истина;
	ЗаполнитьПодсказкуВариантаИспользованияОперативныхПоказателей(ЭтотОбъект);
	ЗаполнитьПризнакНачисляетсяВЦеломЗаМесяц(ЭтотОбъект);
	УправлениеКомандойВосстановить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОпределенияРасчетногоПериодаСреднегоЗаработкаПриИзменении(Элемент)
	Объект.ИспользоватьСобственнуюФормулуРасчета = Истина;
	УстановитьСвойстваПериодаРасчетаСреднегоЗаработка(ЭтотОбъект);
	УправлениеКомандойВосстановить(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоМесяцевРасчетаСреднегоЗаработкаПриИзменении(Элемент)
	Объект.ИспользоватьСобственнуюФормулуРасчета = Истина;
	УправлениеКомандойВосстановить(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФормулуВидаРасчетаПриИзменении(Элемент)
	
	ИспользоватьФормулуВидаРасчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетаБазовыхНачисленийПриИзменении(Элемент)
	
	Объект.ИспользоватьСобственнуюФормулуРасчета = Истина;
	УстановитьДоступностьКоличестваМесяцевБазовогоПериода(ЭтаФорма);
	УстановитьДоступностьПериодаОпределенияЗначенийПоказателей(ЭтаФорма);
	УстановитьПериодОпределенияЗначенийПоказателейПоУмолчанию(ЭтаФорма);
	
	ЗаполнитьПризнакНачисляетсяВЦеломЗаМесяц(ЭтаФорма);
	
	УстановитьТекстНадписиБазовогоПериода(ЭтотОбъект, ОбщегоНазначенияКлиент.ДатаСеанса());
	УправлениеКомандойВосстановить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоМесяцевБазовогоПериодаПриИзменении(Элемент)
	
	Объект.ИспользоватьСобственнуюФормулуРасчета = Истина;
	УстановитьТекстНадписиБазовогоПериода(ЭтотОбъект, ОбщегоНазначенияКлиент.ДатаСеанса());
	УправлениеКомандойВосстановить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СдвигБазовогоПериодаПриИзменении(Элемент)
	
	Объект.ИспользоватьСобственнуюФормулуРасчета = Истина;
	УстановитьТекстНадписиБазовогоПериода(ЭтотОбъект, ОбщегоНазначенияКлиент.ДатаСеанса());
	УправлениеКомандойВосстановить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьИзменениеЗначенийПоказателейВБазовомПериодеЧислоПриИзменении(Элемент)
	
	Объект.ИспользоватьСобственнуюФормулуРасчета = Истина;
	Объект.УчитыватьИзменениеЗначенийПоказателейВБазовомПериоде = ?(УчитыватьИзменениеЗначенийПоказателейВБазовомПериодеЧисло = 0, Ложь, Истина);
	УправлениеКомандойВосстановить(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБазовыеВидыРасчета

&НаКлиенте
Процедура БазовыеВидыРасчетаПриИзменении(Элемент)
	
	Объект.ИспользоватьСобственнуюФормулуРасчета = Истина;
	УправлениеКомандойВосстановить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БазовыеВидыРасчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаПодбораНачисленийНаСервере(ВыбранноеЗначение, "Объект.БазовыеВидыРасчета");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьФормулу(Команда)
	
	ПараметрыРедактирования = Новый Структура;
	ПараметрыРедактирования.Вставить("Формула",                 Объект.ФормулаРасчета);
	ПараметрыРедактирования.Вставить("НаименованиеВидаРасчета", Объект.Наименование);
	ПараметрыРедактирования.Вставить("ВидРасчета",              Объект.Ссылка);
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьФормулуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ВидыРасчетовРезервовПоОплатеТруда.Форма.РедактированиеФормулыРасчетаРезервов", ПараметрыРедактирования, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборБазовых(Команда)
	
	МассивВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ВидыРасчетаКоллекции(Объект.БазовыеВидыРасчета);
	ПараметрыФормы = Новый Структура("МассивВидовРасчета", МассивВидовРасчета);
	ОткрытьФорму("ОбщаяФорма.ПодборВидовРасчета", ПараметрыФормы, Элементы.БазовыеВидыРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПоказатели(Команда)
	
	ПоказатьВопросОбИзмененииПоказателей();
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("ФизическоеЛицо"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура РезервПриИзмененииНаСервере()
	
	ВидРезерва = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва(Объект.Организация, Объект.Резерв);
	
	Объект.ЭтоРасчетОтпуска = ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
	
	ИспользоватьФормулуВидаРасчета = Истина;
	
	УстановитьТипЗначенияВидаРасчета();
	ИспользоватьФормулуВидаРасчетаПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОбИзмененииПоказателей()
	
	ТекстВопроса = НСтр("ru = 'Порядок расчета показателей будет перезаполнен из вида расчета.
						|Продолжить?';
						|en = 'The indicator calculation procedure will be refilled from the calculation type.
						|Continue?'");
	Оповещение = Новый ОписаниеОповещения("ВопросОбИзмененииПоказателейЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбИзмененииПоказателейЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИзмененитьВидРасчетаНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьФормулуВидаРасчетаПриИзмененииНаСервере()
	
	Объект.ИспользоватьСобственнуюФормулуРасчета = Не ИспользоватьФормулуВидаРасчета;
	Если Объект.ИспользоватьСобственнуюФормулуРасчета Или Объект.ЭтоРасчетОтпуска Тогда
		РезервыПоОплатеТрудаРасширенный.ЗаполнитьПоказателиВидаРасчетаПоНачислению(Объект, РеквизитФормыВЗначение("ВидРасчета"));
		ПерестроитьФормуПоКатегории(ЭтотОбъект);
		УстановитьСвойстваПериодаРасчетаСреднегоЗаработка(ЭтотОбъект);
	Иначе
		ОчиститьПоказателиВидаРасчетаПоНачислению(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзмененитьВидРасчетаНаСервере()
	
	Объект.ИспользоватьСобственнуюФормулуРасчета = Ложь;
	ПрочитатьПараметрыВидаНачисления();
	РезервыПоОплатеТрудаРасширенный.ЗаполнитьПоказателиВидаРасчетаПоНачислению(Объект, РеквизитФормыВЗначение("ВидРасчета"));
	ДанныеФормыПоВидуРасчета(РеквизитФормыВЗначение("Объект"));
	Объект.Наименование  = Объект.ВидРасчета;
	ВидРасчетаПредыдущий = Объект.ВидРасчета;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиВидаРасчетаПоНачислению()
	
	Если Параметры.Ключ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ИспользоватьСобственнуюФормулуРасчета Тогда
		Возврат;
	КонецЕсли;
	
	РезервыПоОплатеТрудаРасширенный.ЗаполнитьПоказателиВидаРасчетаПоНачислению(Объект, РеквизитФормыВЗначение("ВидРасчета"));
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПоказателиВидаРасчетаПоНачислению(Форма)
	
	Объект = Форма.Объект;
	
	Если Не Объект.ЭтоРасчетОтпуска Тогда
		Объект.ФормулаРасчета              = "";
		Объект.ФормулаРасчетаДляВыполнения = "";
		Объект.Рассчитывается              = "";
		Объект.СпособРасчета               = "";
		Объект.Показатели.Очистить();
	КонецЕсли;
	
	Объект.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц       = "";
	Объект.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = "";
	Объект.КоличествоМесяцевРасчетаСреднегоЗаработка            = "";
	
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	РежимРедактированияФормулы     = Параметры.РежимРедактированияФормулы;
	ИспользоватьФормулуВидаРасчета = НЕ ТекущийОбъект.ИспользоватьСобственнуюФормулуРасчета;
	ВидРасчетаОсновногоОтпуска     = РезервыПоОплатеТрудаРасширенный.ВидРасчетаОсновнойОтпуск();
	СвойстваПоКатегориям           = Новый ФиксированноеСоответствие(ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям());
	
	ВидРасчетаПредыдущий = Объект.ВидРасчета;
	ДанныеФормыПоВидуРасчета(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДанныеФормыПоВидуРасчета(ТекущийОбъект)
	
	ИспользоватьФормулуВидаРасчета = НЕ ТекущийОбъект.ИспользоватьСобственнуюФормулуРасчета;
	
	ПрочитатьПараметрыВидаНачисления();
	ЗаполнитьПоказателиВидаРасчетаПоНачислению();
	ПерестроитьФормуПоКатегории(ЭтотОбъект);
	УстановитьСвойстваПериодаРасчетаСреднегоЗаработка(ЭтотОбъект);
	
	Если ТекущийОбъект.ИспользоватьСобственнуюФормулуРасчета Тогда
		МассивПоказателей = ОбщегоНазначения.ВыгрузитьКолонку(ТекущийОбъект.Показатели, "Показатель");
		Показатели        = ТекущийОбъект.Показатели;
	Иначе
		МассивПоказателей = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Показатели, "Показатель");
		Показатели        = Объект.Показатели;
	КонецЕсли;
	СведенияОПоказателях = РезервыПоОплатеТрудаРасширенный.СведенияОПоказателяхРасчетаРезервов(
								МассивПоказателей);
	
	ЗарплатаКадрыРасширенныйКлиентСервер.ЗаполнитьСписокОпределяющихПоказателей(СписокОпределяющихПоказателей, Показатели, СведенияОПоказателях);
	
	ЕстьПоказателиУчетаВремени = РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(Объект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремени());
	
	ЕстьПоказательРасчетнаяБаза = РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(Объект.Показатели, "РасчетнаяБаза");
	
	ЕстьОперативныеПоказатели = РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(Объект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ОперативныеПоказатели());
	УстановитьДоступностьВариантаИспользованияОперативныхПоказателей(ЭтаФорма);
	
	РассчитыватьРезультат = ?(Объект.Рассчитывается, 0, 1);
	
	ИспользоватьОперативныеПоказателиВЦеломЗаМесяцЧисло = ТекущийОбъект.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц;
	
	УстановитьДоступностьРасчетаБазы(ЭтаФорма);
	УстановитьДоступностьКоличестваМесяцевБазовогоПериода(ЭтаФорма);
	УстановитьДоступностьПериодаОпределенияЗначенийПоказателей(ЭтаФорма);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыВидаНачисления()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЭтоРасчетОтпуска Тогда
		ЗначениеВРеквизитФормы(ВидРасчетаОсновногоОтпуска.ПолучитьОбъект(), "ВидРасчета");
	Иначе
		ЗначениеВРеквизитФормы(Объект.ВидРасчета.ПолучитьОбъект(), "ВидРасчета");
	КонецЕсли;
	
	КатегорияНачисленияИлиНеоплаченногоВремени = ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени;
	СпособВыполненияНачисления                 = ВидРасчета.СпособВыполненияНачисления;
	НачисляетсяВЦеломЗаМесяц                   = ВидРасчета.НачисляетсяВЦеломЗаМесяц;
	
	ПерестроитьФормуПоКатегории(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНачисленийНаСервере(ВыбранноеЗначение, ПутьКДанным)
	
	УдалениеВыбранныхВидовРасчета(ВыбранноеЗначение.УдаленныеВидыРасчета, ПутьКДанным);
	
	Для Каждого ВыбранныйВидРасчета Из ВыбранноеЗначение.ДобавленныеВидыРасчета Цикл
		ОбработкаВыбранногоНачисления(ВыбранныйВидРасчета, ПутьКДанным);
	КонецЦикла;
	Объект.ИспользоватьСобственнуюФормулуРасчета = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбранногоНачисления(ВыбранныйВидРасчета, ПутьКДанным)
	
	ТаблицаВидовРасчета = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, ПутьКДанным);
	
	Если ТаблицаВидовРасчета.НайтиСтроки(Новый Структура("ВидРасчета", ВыбранныйВидРасчета)).Количество() = 0 Тогда
		ТаблицаВидовРасчета.Добавить().ВидРасчета = ВыбранныйВидРасчета;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалениеВыбранныхВидовРасчета(УдаленныеВидыРасчета, ПутьКДанным)
	
	ТаблицаВидовРасчета = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, ПутьКДанным);
	
	Для Каждого Значение Из УдаленныеВидыРасчета Цикл
		СтрокиДляУдаления = ТаблицаВидовРасчета.НайтиСтроки(Новый Структура("ВидРасчета", Значение));
		Для Каждого ТекСтрока Из СтрокиДляУдаления Цикл 
			ТаблицаВидовРасчета.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ИзменитьФормулуЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт 
	
	Если ИзмененыПоказателиНачисления И Не Модифицированность Тогда 
		Прочитать();
	    ИзмененыПоказателиНачисления = Ложь;
	КонецЕсли;
	
	Если РезультатРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ФормулаРасчета = РезультатРедактирования.Формула Тогда 
		Возврат;
	КонецЕсли;
	Объект.ИспользоватьСобственнуюФормулуРасчета = Истина;
	
	ФормулаПриИзмененииНаСервере(РезультатРедактирования);
	
КонецПроцедуры

&НаСервере
Процедура ФормулаПриИзмененииНаСервере(РезультатРедактирования)
	
	Объект.ФормулаРасчета = РезультатРедактирования.Формула;
	
	ОбновитьФормуПоИзменениюФормулыРасчета(
		ЭтотОбъект, 
		РезультатРедактирования.СведенияОПоказателях, 
		РезультатРедактирования.ЕстьПоказательРасчетнаяБаза, 
		РезультатРедактирования.ЕстьПоказателиУчетаВремени,
		РезультатРедактирования.ЕстьОперативныеПоказатели,
		РезультатРедактирования.ЗапрашиваемыеПоказатели,
		РезультатРедактирования.ЕстьПоказательОтработаноСмен);
		                        
		
	УстановитьТекстНадписиОЗаполненностиФормулы(ЭтотОбъект);
	
	УстановитьСписокВыбораПериодаРасчетаБазовыхНачислений(ЭтаФорма);
	УстановитьЗаголовокПериодаОпределенияЗначенийПоказателей();
	УправлениеКомандойВосстановить(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСписокВыбораПериодаРасчетаБазовыхНачислений(Форма, УстанавливатьЗначениеПоУмолчанию = Истина)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СписокВыбора = Элементы.ПериодРасчетаБазовыхНачисленийТекущийПериодДоступен.СписокВыбора;
	
	ЗаполнитьСписокВыбораПериодаБазовыхНачислений(Форма, СписокВыбора);
	
	УстановитьДоступностьКоличестваМесяцевБазовогоПериода(Форма);
	УстановитьДоступностьПериодаОпределенияЗначенийПоказателей(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПериодаОпределенияЗначенийПоказателей(Форма)
	
	Объект = Форма.Объект;	
	Элементы = Форма.Элементы;	
	
	ДоступностьВвода = Объект.ПериодРасчетаБазовыхНачислений <> ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц")
		И Объект.ПериодРасчетаБазовыхНачислений <> ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал")
		И Объект.ПериодРасчетаБазовыхНачислений <> ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПериодРасчетаПоказателейСтраницы", "ТекущаяСтраница",
		?(ДоступностьВвода, Элементы.ПериодРасчетаПоказателейСтраница, Элементы.ПериодРасчетаПоказателейПустаяСтраница));
		
	Если Не ДоступностьВвода Тогда
		Объект.УчитыватьИзменениеЗначенийПоказателейВБазовомПериоде = Ложь;
		УстановитьПредставлениеПериодаОпределенияЗначенийПоказателей(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеПериодаОпределенияЗначенийПоказателей(Форма)
	
	Форма.УчитыватьИзменениеЗначенийПоказателейВБазовомПериодеЧисло = ?(Форма.Объект.УчитыватьИзменениеЗначенийПоказателейВБазовомПериоде, 1, 0);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораПериодаБазовыхНачислений(Форма, СписокВыбора)
	
	Объект = Форма.Объект;
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц"), НСтр("ru = 'Текущий месяц';
																														|en = 'Current month'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц"), НСтр("ru = 'Предыдущий месяц';
																														|en = 'Previous month'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал"), НСтр("ru = 'Текущий квартал';
																														|en = 'Current quarter'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал"), НСтр("ru = 'Предыдущий квартал';
																															|en = 'Previous quarter'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод"), НСтр("ru = 'Текущий год';
																													|en = 'Current year'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод"), НСтр("ru = 'Предыдущий год';
																														|en = 'Previous year'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев"), НСтр("ru = 'Несколько предыдущих месяцев';
																																	|en = 'Several previous months'"));
	
	Если СписокВыбора.НайтиПоЗначению(Объект.ПериодРасчетаБазовыхНачислений) = Неопределено Тогда
		Объект.ПериодРасчетаБазовыхНачислений = СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстНадписиБазовогоПериода(Форма, ТекущаяДата)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПроизвольныйПериод = Объект.ПериодРасчетаБазовыхНачислений = ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев");
	
	СпособОтображенияПодсказки = ?(ПроизвольныйПериод, ОтображениеПодсказки.ОтображатьСнизу, ОтображениеПодсказки.Нет);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"СдвигБазовогоПериодаГруппа", "ОтображениеПодсказки", СпособОтображенияПодсказки);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"СдвигБазовогоПериодаПремииГруппа", "ОтображениеПодсказки", СпособОтображенияПодсказки);
		
	Если Не ПроизвольныйПериод Тогда 
		Возврат;	
	КонецЕсли;
	
	Если Объект.КоличествоМесяцевБазовогоПериода = 0 Тогда
		ТекстНадписи = НСтр("ru = 'Не указана длительность базового периода';
							|en = 'Basic period duration is not specified'");
		ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, "СдвигБазовогоПериодаГруппа", ТекстНадписи);
		ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, "СдвигБазовогоПериодаПремииГруппа", ТекстНадписи);
		Возврат;
	КонецЕсли;
	
	Если Объект.СдвигБазовогоПериода = 0 Тогда
		ТекстНадписи = НСтр("ru = 'Не указан сдвиг базового периода';
							|en = 'Basic period shift is not specified'");
		ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, "СдвигБазовогоПериодаГруппа", ТекстНадписи);
		ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, "СдвигБазовогоПериодаПремииГруппа", ТекстНадписи);
		Возврат;
	КонецЕсли;
	
	МесяцНачисления = НачалоМесяца(ТекущаяДата);
	МесяцНачисленияСтрокой = Формат(МесяцНачисления, "ДФ=""ММММ гггг""");
	
	БазовыйПериод = РасчетЗарплатыРасширенныйКлиентСервер.БазовыйПериодНачисления(МесяцНачисления, 
		Объект.ПериодРасчетаБазовыхНачислений, Объект.КоличествоМесяцевБазовогоПериода, Объект.СдвигБазовогоПериода); 
		
	Если БазовыйПериод.ДатаНачала = НачалоМесяца(БазовыйПериод.ДатаОкончания) Тогда 
		ПредставлениеПериода = Формат(БазовыйПериод.ДатаНачала, "ДФ=""ММММ гггг""");
	Иначе 
		ПредставлениеПериода = Формат(БазовыйПериод.ДатаНачала, "ДФ=""ММММ гггг""") + " - " + Формат(БазовыйПериод.ДатаОкончания, "ДФ=""ММММ гггг""");
	КонецЕсли;
	
	ТекстНадписи = НСтр("ru = 'При начислении за %1 будет использовано значение расчетной базы за период %2';
						|en = 'On accrual for %1, value of the base for %2 will be used'");
	ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписи, МесяцНачисленияСтрокой, ПредставлениеПериода);
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, "СдвигБазовогоПериодаГруппа", ТекстНадписи);
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, "СдвигБазовогоПериодаПремииГруппа", ТекстНадписи);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКоличестваМесяцевБазовогоПериода(Форма)
	
	ДоступностьВвода = Форма.Объект.ПериодРасчетаБазовыхНачислений = ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев");
	
	Форма.Элементы.КоличествоМесяцевБазовогоПериода.Доступность = ДоступностьВвода;
	Форма.Элементы.КоличествоМесяцевБазовогоПериода.АвтоОтметкаНеЗаполненного = ДоступностьВвода;
	Форма.Элементы.КоличествоМесяцевБазовогоПериода.ОтметкаНеЗаполненного = ДоступностьВвода;
	
	Форма.Элементы.СдвигБазовогоПериода.Доступность = ДоступностьВвода;
	
	Если ДоступностьВвода Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКоличествоМесяцевПериодаПремииБазовогоПериодаПоУмолчанию(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстНадписиОЗаполненностиФормулы(Форма)
	
	Форма.Элементы.ПредупреждениеФормулаНеЗаполнена.Видимость =
		Не ЗначениеЗаполнено(Форма.Объект.ФормулаРасчета) И Форма.Элементы.ГруппаРасчетИПоказатели.Доступность;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокПериодаОпределенияЗначенийПоказателей()
	
	Если Не ЕстьПоказательРасчетнаяБаза Тогда 
		Возврат;
	КонецЕсли;
	
	СписокПоказателей = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Показатели, "Показатель");
	
	СведенияОПоказателях = РезервыПоОплатеТрудаРасширенный.СведенияОПоказателяхРасчетаРезервов(СписокПоказателей);
	
	ИменаПоказателей = "";
	КоличествоПоказателей = 0;
	Для Каждого КлючИЗначение Из СведенияОПоказателях Цикл 
		ОписаниеПоказателя = КлючИЗначение.Значение;
		Если Не ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Истина
			И ОписаниеПоказателя.СпособПримененияЗначений <> Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное Тогда 
			ИменаПоказателей = ИменаПоказателей + ?(ИменаПоказателей = "", "", ", ") + ОписаниеПоказателя.Наименование;
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПериодРасчетаПоказателейСтраницы", "Видимость", КоличествоПоказателей <> 0);
	
	Если КоличествоПоказателей = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ШаблонЗаголовка = ?(КоличествоПоказателей > 1, НСтр("ru = 'Значения показателей %1 определяются за';
														|en = '%1 indicator values are defined for'"), НСтр("ru = 'Значение показателя %1 определяется за';
																												|en = 'The %1 indicator value is defined for'"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчитыватьИзменениеЗначенийПоказателейВБазовомПериодеЧисло",
		"Заголовок", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ИменаПоказателей));
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПериодОпределенияЗначенийПоказателейПоУмолчанию(Форма)
	
	Форма.Объект.УчитыватьИзменениеЗначенийПоказателейВБазовомПериоде = Форма.ЕстьПоказательРасчетнаяБаза;
	
	УстановитьПредставлениеПериодаОпределенияЗначенийПоказателей(Форма);
	
КонецПроцедуры

&НаСервере
Процедура РассчитыватьРезультатПриИзмененииНаСервере()
	
	Если Не Объект.Рассчитывается И Объект.ФормулаРасчета <> "" Тогда 
		
		Объект.Показатели.Очистить();
		Объект.ФормулаРасчета = "";
		
		ПоказателиФормулы = Новый Массив;
		СведенияОПоказателях = ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты(ПоказателиФормулы);
		ЕстьПоказателиУчетаВремени = РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(Объект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремени());
		ЕстьПоказательРасчетнаяБаза = РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(Объект.Показатели, "РасчетнаяБаза");
		ЕстьПоказательОтработаноСмен = РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(Объект.Показатели, "ОтработаноСмен");
		ЕстьОперативныеПоказатели = РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(Объект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ОперативныеПоказатели());
		УстановитьДоступностьВариантаИспользованияОперативныхПоказателей(ЭтотОбъект);
		ЗапрашиваемыеПоказатели = ЗарплатаКадрыРасширенный.ЗапрашиваемыеПоказателиВидаРасчетаПоУмолчанию(Объект.Ссылка, ПоказателиФормулы);
		ОбновитьФормуПоИзменениюФормулыРасчета(
			ЭтотОбъект, СведенияОПоказателях, ЕстьПоказательРасчетнаяБаза, ЕстьПоказателиУчетаВремени, ЕстьОперативныеПоказатели, ЗапрашиваемыеПоказатели, ЕстьПоказательОтработаноСмен);
			
	КонецЕсли;
		
	ПерестроитьФормуПоКатегории(ЭтотОбъект);
	УправлениеКомандойВосстановить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьВариантаИспользованияОперативныхПоказателей(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.ИспользованиеОперативныхПоказателейГруппа.Видимость = Форма.ЕстьОперативныеПоказатели;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПериодаРасчетаСреднегоЗаработка(Форма, ПоВидуРасчета = Ложь)
	
	Элементы = Форма.Элементы;
	
	Если ПоВидуРасчета Тогда
		Объект = Форма.ВидРасчета;
	Иначе
		Объект = Форма.Объект;
	КонецЕсли;
	
	Показатели = Объект.Показатели;
	ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Объект.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка;
	КоличествоМесяцевРасчетаСреднегоЗаработка = Объект.КоличествоМесяцевРасчетаСреднегоЗаработка;
	
	// Определяем нужна ли сама настройка (есть ли показатель среднего заработка).
	ЕстьПоказателиСреднегоЗаработка = УчетСреднегоЗаработкаКлиентСервер.ЕстьПоказателиОбщегоСреднегоЗаработка(Показатели);
	Если ЕстьПоказателиСреднегоЗаработка Тогда
		Форма.Элементы["НастройкаПериодаСреднегоЗаработкаСтраницы"].ТекущаяСтраница = Форма.Элементы["ПериодНастраиваетсяСтраница"];
	Иначе	
		Форма.Элементы["НастройкаПериодаСреднегоЗаработкаСтраницы"].ТекущаяСтраница = Форма.Элементы["ПериодНеНастраиваетсяСтраница"];
	КонецЕсли;
	
	Если Не ЕстьПоказателиСреднегоЗаработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка) Тогда
		Форма.Объект.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = 
			ПредопределенноеЗначение("Перечисление.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству");
	КонецЕсли;
	
	// Определяем доступность ввода произвольного периода.
	ДоступностьВвода = ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = 
			ПредопределенноеЗначение("Перечисление.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору");
			
	Форма.Элементы["КоличествоМесяцевРасчетаСреднегоЗаработка"].Доступность = ДоступностьВвода;
	Форма.Элементы["КоличествоМесяцевРасчетаСреднегоЗаработка"].АвтоОтметкаНезаполненного = ДоступностьВвода;
	Форма.Элементы["КоличествоМесяцевРасчетаСреднегоЗаработка"].ОтметкаНезаполненного = Не ЗначениеЗаполнено(КоличествоМесяцевРасчетаСреднегоЗаработка);
	
	Если Не Форма.Элементы["КоличествоМесяцевРасчетаСреднегоЗаработка"].Доступность 
		И Не ПоВидуРасчета Тогда
		Форма.Объект.КоличествоМесяцевРасчетаСреднегоЗаработка = 12;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРасчетаБазы(Форма)
	
	Форма.Элементы.РасчетБазы.Доступность = Форма.ЕстьПоказательРасчетнаяБаза
		И Форма.Объект.СпособРасчета <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка") 
		И Форма.Объект.СпособРасчета <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС") 
		И Форма.Объект.СпособРасчета <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни");
		
	УстановитьДоступностьКоличестваМесяцевБазовогоПериода(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияПоУмолчаниюБазовогоПериодаПремии(Форма)

	Если Не ЭтоПремия(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СреднийЗаработокОбщийЗначение = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом")
		Или Форма.СреднийЗаработокОбщийЗначение = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой") Тогда
		// Это годовая премия, нужно подставить период.
		Форма.Объект.КоличествоМесяцевБазовогоПериода = 12;
		Если (Форма.Объект.ПериодРасчетаБазовыхНачислений <> ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод")
			И Форма.Объект.ПериодРасчетаБазовыхНачислений <> ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод"))
			Или (Форма.Объект.СпособВыполненияНачисления = ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета")
			И Форма.Объект.ПериодРасчетаБазовыхНачислений <> ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод")) Тогда
			Форма.Объект.ПериодРасчетаБазовыхНачислений = ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПремия(Форма) 
	
	Премии = Новый Массив;
	Премии.Добавить(ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом"));
	Премии.Добавить(ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой"));
	Премии.Добавить(ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом"));
	Премии.Добавить(ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой"));
	
	ЭтоПремия = Премии.Найти(Форма.СреднийЗаработокОбщийЗначение) <> Неопределено;
	
	Возврат ЭтоПремия;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоИзменениюФормулыРасчета(Форма, СведенияОПоказателях, ЕстьПоказательРасчетнаяБаза, ЕстьПоказателиУчетаВремени, ЕстьОперативныеПоказатели, ЗапрашиваемыеПоказатели, ЕстьПоказательОтработаноСмен)
	
	Объект = Форма.Объект;
	
	// Обновление: 
	// - табличной части
	Если РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(Объект.СпособРасчета) Тогда
		ЗарплатаКадрыРасширенныйКлиентСервер.ОбновитьПоказателиПоФормуле(СведенияОПоказателях, Объект.Показатели);
	КонецЕсли;
	// - Списка определяющих показателей.
	ЗарплатаКадрыРасширенныйКлиентСервер.ЗаполнитьСписокОпределяющихПоказателей(Форма.СписокОпределяющихПоказателей, Объект.Показатели, СведенияОПоказателях);
	// Наличие показателей учета времени заполняем при изменении формулы.
	Форма.ЕстьПоказателиУчетаВремени = ЕстьПоказателиУчетаВремени;
	Форма.ЕстьПоказательОтработаноСмен = ЕстьПоказательОтработаноСмен;
	// Наличие показателя заполняем при изменении формулы.
	Форма.ЕстьПоказательРасчетнаяБаза = ЕстьПоказательРасчетнаяБаза;
	// Наличие оперативных показателей заполняем при изменении формулы.
	Форма.ЕстьОперативныеПоказатели = ЕстьОперативныеПоказатели;
	УстановитьДоступностьВариантаИспользованияОперативныхПоказателей(Форма);
	// Признак НачисляетсяВЦеломЗаМесяц
	ЗаполнитьПризнакНачисляетсяВЦеломЗаМесяц(Форма);
	// Признак запрашивается по умолчанию.
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьОтметкуЗапрашиватьПриВводе(ЗапрашиваемыеПоказатели, Объект.Показатели);
	// Настройка периода среднего заработка.
	УстановитьСвойстваПериодаРасчетаСреднегоЗаработка(Форма);
	// Доступность настройки расчета базы.
	УстановитьЗначенияПоУмолчаниюБазовогоПериодаПремии(Форма);
	УстановитьДоступностьРасчетаБазы(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКоличествоМесяцевПериодаПремииБазовогоПериодаПоУмолчанию(Форма)
	
	// Если длительность недоступна, заполняем в соответствии с предопределенным значением.
	КоличествоМесяцевБазовогоПериода = Новый Соответствие;
	КоличествоМесяцевБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц"), 1);
	КоличествоМесяцевБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц"), 1);
	КоличествоМесяцевБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал"), 3);
	КоличествоМесяцевБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал"), 3);
	КоличествоМесяцевБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод"), 12);
	КоличествоМесяцевБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод"), 12);
	
	КоличествоМесяцев = КоличествоМесяцевБазовогоПериода[Форма.Объект.ПериодРасчетаБазовыхНачислений];
	Если КоличествоМесяцев <> Неопределено Тогда
		Форма.Объект.КоличествоМесяцевБазовогоПериода = КоличествоМесяцев;
	КонецЕсли;
	
	СдвигБазовогоПериода = Новый Соответствие;
	СдвигБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц"), 0);
	СдвигБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц"), 1);
	СдвигБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал"), 0);
	СдвигБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал"), 1);
	СдвигБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод"), 0);
	СдвигБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод"), 1);
	СдвигБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев"), 1);
	
	СдвигПериода = СдвигБазовогоПериода[Форма.Объект.ПериодРасчетаБазовыхНачислений];
	Если СдвигПериода <> Неопределено Тогда
		Форма.Объект.СдвигБазовогоПериода = СдвигПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакНачисляетсяВЦеломЗаМесяц(Форма)
	
	Форма.Объект.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = Форма.ИспользоватьОперативныеПоказателиВЦеломЗаМесяцЧисло;
	
	Форма.НачисляетсяВЦеломЗаМесяц = РасчетЗарплатыРасширенныйКлиентСервер.НачислениеВыполняетсяВЦеломЗаМесяц(
		Форма.Объект, Форма.ЕстьПоказателиУчетаВремени, Форма.ЕстьПоказательРасчетнаяБаза, Форма.ЕстьОперативныеПоказатели, Форма.ЕстьПоказательОтработаноСмен);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПерестроитьФормуПоКатегории(Форма)
	
	Элементы = Форма.Элементы;
	
	ПоВидуРасчета = Не Форма.Объект.ИспользоватьСобственнуюФормулуРасчета;
	
	Если ПоВидуРасчета Тогда
		Объект = Форма.ВидРасчета;
		КатегорияНачисленияИлиНеоплаченногоВремени = Объект.КатегорияНачисленияИлиНеоплаченногоВремени;
	Иначе
		Объект = Форма.Объект;
		КатегорияНачисленияИлиНеоплаченногоВремени = Форма.КатегорияНачисленияИлиНеоплаченногоВремени;
	КонецЕсли;
	
	ОписаниеСпособаРасчета = ОписаниеСпособаРасчета(КатегорияНачисленияИлиНеоплаченногоВремени);
	Элементы["ДекорацияОписаниеСпособаРасчета"].Заголовок = ОписаниеСпособаРасчета;
	
	ТекстНазначения = "";
	Если Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПроизвольнаяФормула") 
		И Не ЗначениеЗаполнено(ОписаниеСпособаРасчета) Тогда
		ТекстНазначения = ТекстНазначения 
		    + ?(ЗначениеЗаполнено(ТекстНазначения), " ", "")
			+ ?(Объект.Рассчитывается, 
				НСтр("ru = 'Вычисление результата расчета выполняется по формуле, которую можно задать в поле «Формула».';
					|en = 'Settlement result is calculated according to the formula specified in the Formula field.'"),
				НСтр("ru = 'Результат вводится фиксированной суммой';
					|en = 'The result is entered as a fixed amount.'"));
		Элементы["НастройкиРасчета"].ТекущаяСтраница = Элементы["СтраницаФормулаРасчета"];
		Элементы["СтраницыРасчетНачисления"].ТекущаяСтраница = ?(Объект.Рассчитывается, 
			Элементы["СтраницаРезультатРассчитывается"], Элементы["СтраницаРезультатВводитсяВручную"]);
	Иначе
		ТекстНазначения = ТекстНазначения 
		    + ?(ЗначениеЗаполнено(ТекстНазначения), Символы.ПС, "")
			+ НСтр("ru = 'Вычисление результата расчета выполняется первичным документом и не может быть задано формулой'.");
		Элементы["НастройкиРасчета"].ТекущаяСтраница = Элементы["СтраницаОписаниеСпособаРасчета"];
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоКатегории(Форма, ПоВидуРасчета);
	УстановитьТекстНадписиОЗаполненностиФормулы(Форма);
	Если ПоВидуРасчета Тогда
		УстановитьСвойстваПериодаРасчетаСреднегоЗаработка(Форма, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовПоКатегории(Форма, ПоВидуРасчета = Ложь)
	
	Элементы = Форма.Элементы;
	
	Если ПоВидуРасчета Тогда
		Объект = Форма.ВидРасчета;
		КатегорияНачисленияИлиНеоплаченногоВремени = Объект.КатегорияНачисленияИлиНеоплаченногоВремени;
		СпособВыполненияНачисления                 = Объект.СпособВыполненияНачисления;
	Иначе
		Объект = Форма.Объект;
		КатегорияНачисленияИлиНеоплаченногоВремени = Форма.КатегорияНачисленияИлиНеоплаченногоВремени;
		СпособВыполненияНачисления                 = Форма.СпособВыполненияНачисления;
	КонецЕсли;
	
	СвойстваНачисления = Форма.СвойстваПоКатегориям.Получить(КатегорияНачисленияИлиНеоплаченногоВремени);
	
	
	Если СвойстваНачисления = Неопределено Тогда
		// Если не нашлось для соответствующей категории используем свойства по умолчанию.
		Возврат;
	КонецЕсли;
	
	// Если категория определена, то свойства, которые она определяет недоступны для изменения пользователем.
	Если Не ЗначениеЗаполнено(КатегорияНачисленияИлиНеоплаченногоВремени) Тогда
		Возврат;
	КонецЕсли;
	
	// Поля структуры свойств, которые не являются непосредственно свойствами ПВР, 
	// но содержат инструкции и/или другие сведения о категории начисления.
	Инструкции = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваНачисления.ИменаИнструкций);
	НедоступныеСвойства = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СвойстваНачисления.НедоступныеСвойства);
	
	Если КатегорияНачисленияИлиНеоплаченногоВремени = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда") Тогда 
		Если СпособВыполненияНачисления <> ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета") Тогда 
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НедоступныеСвойства, "ВидВремени");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СвойстваНачисления Цикл
		ИмяСвойства = КлючИЗначение.Ключ;
		ДоступностьСвойства = НедоступныеСвойства.Найти(ИмяСвойства) = Неопределено;
		Если ИмяСвойства = "ФормулаРасчета" И Не ПоВидуРасчета Тогда
			Если Не ПоВидуРасчета Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Форма.Элементы, "ИзменитьФормулу", "Доступность", ДоступностьСвойства);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы, "РассчитыватьРезультат", "Доступность", ДоступностьСвойства);
		Иначе
			// Устанавливаем доступность
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы, ИмяСвойства, "Доступность", ДоступностьСвойства);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеСпособаРасчета(КатегорияНачисления)
	
	Если КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Отгул")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПредыдущимиДокументами") Тогда
		Возврат НСтр("ru = 'Не оплачивается.';
					|en = 'Not paid.'");
	ИначеЕсли КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам") Тогда
		Возврат НСтр("ru = 'На время простоя по независящим от работника и работодателя причинам сохраняется 2/3 оплаты по тарифу.';
					|en = 'During a downtime period that has commenced beyond the employee''s and employer''s control, 2/3 of salary or wage rate is saved. '");
	ИначеЕсли КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка") Тогда
		Возврат НСтр("ru = 'Результатом начисления является разница между средним заработком сотрудника и заработком сотрудника в отдельном периоде, в случае, если заработок сотрудника окажется ниже величины среднего заработка.';
					|en = 'Accrual result is the difference between average earnings of the employee and earnings of the employee over a separate period if earnings of the employee are lower than average earnings.'");
	ИначеЕсли КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамВоеннослужащего") Тогда
		Возврат НСтр("ru = 'Отпуск по беременности и родам оплачивается исходя из среднего заработка в порядке, установленном законодательством о социальном страховании.';
					|en = 'Maternity leave is paid according to the average earnings in the order established by the social insurance legislation.'");
	ИначеЕсли КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста") 
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя")  
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве")  
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание") Тогда
		Возврат НСтр("ru = 'Больничный лист оплачивается исходя из среднего заработка в порядке, установленном законодательством о социальном страховании.';
					|en = 'Sick leave record is paid according to the average earnings in the order established by the social insurance legislation.'");
	ИначеЕсли КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни") Тогда
		Возврат НСтр("ru = 'Доплата до среднего заработка рассчитывается для больничных листов с неполной оплатой.';
					|en = 'Supplement to average earnings is calculated for sick leave records with partial payment. '");
	ИначеЕсли КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет") Тогда
		Возврат НСтр("ru = 'Пособие по уходу за ребенком до полутора лет выплачивается исходя из среднего заработка в порядке, установленном законодательством о социальном страховании.';
					|en = 'Child care allowance for children under 1.5 years old is paid according to the average earnings in the order established by the social insurance legislation.'");
	ИначеЕсли КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим") Тогда
		Возврат НСтр("ru = 'Пособие по уходу за ребенком до полутора лет выплачивается исходя из среднего заработка в порядке, установленном законодательством.';
					|en = 'Child care allowance for children under 1.5 years old is paid according to the average earnings in the order established by the legislation.'");
	ИначеЕсли КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие") Тогда
		Возврат НСтр("ru = 'Выходное пособие выплачивается исходя из среднего заработка в порядке, установленном Трудовым кодексом.';
					|en = 'Severance pay is paid according to the average earnings in the order established by the Labor Code.'");
	ИначеЕсли КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоДенежногоСодержанияЗаДниБолезни") Тогда
		Возврат НСтр("ru = 'Доплата до сохраняемого денежного содержания рассчитывается как разница между денежным содержанием за рабочие дни, приходящиеся на период нетрудоспособности, и исчисленным пособием по социальному страхованию за период нетрудоспособности.';
					|en = 'Supplement to retained monetary pay is calculated as the difference between the monetary pay for workdays during the period of incapacity for work and the estimated social insurance allowance for the period of incapacity for work.'");
	ИначеЕсли КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоначислениеДоУправленческогоУчета") Тогда
		Возврат НСтр("ru = 'Результат рассчитывается как разница между начисленным в регламентированном и управленческом учетах.';
					|en = 'Result is calculated as the difference between the accrued in local and management accounting.'");
	ИначеЕсли КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами") Тогда
		Возврат УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ОписаниеСпособаРасчетаКатегорииОплатаДнейУходаЗаДетьмиИнвалидами();
	Иначе
		Возврат "";
	КонецЕсли;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПодсказкуВариантаИспользованияОперативныхПоказателей(Форма)
	
	Если Форма.ИспользоватьОперативныеПоказателиВЦеломЗаМесяцЧисло Тогда
		ТекстПодсказки = НСтр("ru = 'Начисление выполняется в целом за месяц, изменения постоянных показателей в течение месяца не учитываются';
								|en = 'Accrued for a month as a whole, changes of the permanent indicators are not recorded during the month'");
	Иначе	
		ТекстПодсказки = НСтр("ru = 'Значения показателей подбираются исходя из фактического периода действия начислений';
								|en = 'Indicator values are selected according to the actual accrual validity period'");
	КонецЕсли;
	
	Форма.Элементы.ИспользоватьОперативныеПоказателиВЦеломЗаМесяцЧисло.Подсказка = ТекстПодсказки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначенияВидаРасчета()
	
	Если Объект.ЭтоРасчетОтпуска Тогда
		Объект.ВидРасчета = ПредопределенноеЗначение("Справочник.ВидыОтпусков.ПустаяСсылка");
	Иначе
		Объект.ВидРасчета = ПредопределенноеЗначение("ПланВидовРасчета.Начисления.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы  = Форма.Элементы;
	Объект    = Форма.Объект;
	
	ВедущиеРеквизитыЗаполнены = ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Резерв);
	ВидРасчетаЗаполен = ЗначениеЗаполнено(Объект.ВидРасчета);
	
	Элементы.ГруппаВидРасчетаНазначение.Доступность         = ВедущиеРеквизитыЗаполнены;
	Элементы.ПоказателиРасчета.Видимость                    = ВедущиеРеквизитыЗаполнены И ВидРасчетаЗаполен;
	Элементы.ДекорацияНедоступныПоказателиРасчета.Видимость = Не (ВедущиеРеквизитыЗаполнены И ВидРасчетаЗаполен);
	
	// Видимость и доступность элементов шапки завивит в т.ч. от контекста
	Элементы.ГруппаОсновныеРеквизиты.Видимость   = Не Форма.РежимРедактированияФормулы;
	Элементы.ВидРасчета.ТолькоПросмотр           = Форма.РежимРедактированияФормулы;
	Элементы.НазначениеПоказателя.ТолькоПросмотр = Форма.РежимРедактированияФормулы;
	
	Элементы.ИзменитьФормулуГруппа.Доступность = Не Форма.ТолькоПросмотр;
	
	УправлениеКомандойВосстановить(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеКомандойВосстановить(Форма)
	
	Элементы  = Форма.Элементы;
	Объект    = Форма.Объект;
	
	Элементы.ВосстановитьПоказатели.Доступность = ЗначениеЗаполнено(Объект.ВидРасчета)
		И Объект.ИспользоватьСобственнуюФормулуРасчета
		И Не Форма.ТолькоПросмотр;
	
КонецПроцедуры

#КонецОбласти
