
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	
	Начисление 							= Параметры.Начисление;
	БухучетНачисления 					= Параметры.БухучетНачисления;
	ТекущееЗначениеБухучетНачисления 	= Параметры.ТекущееЗначениеБухучетНачисления;
	ПоказПрежнегоЗначения 				= Параметры.ПоказПрежнегоЗначения;
	ТолькоПросмотр 						= Параметры.ТолькоПросмотр;
	НетТекущегоЗначения 				= Параметры.НетТекущегоЗначения;
	
	ЗаполнитьТаблицуРаспределения(БухучетНачисления);
	ИтогРаспределения = ТаблицаРаспределения.Итог("ДоляРаспределения");
	
	Если ТолькоПросмотр Или НетТекущегоЗначения Тогда
		Элементы.ГруппаИзменитьБухучет.Видимость = Ложь;
		ТекстЗаголовка = НСтр("ru = 'Бухучет начисления';
								|en = 'Accrual accounting'");
		ИзменитьБухучет = НетТекущегоЗначения;
	ИначеЕсли ПоказПрежнегоЗначения Тогда
		ТолькоПросмотр = Истина;
		Элементы.ГруппаИзменитьБухучет.Видимость = Ложь;
		ТекстЗаголовка = НСтр("ru = 'Ранее действующий бухучет начисления';
								|en = 'Previous accrual accounting'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Редактирование бухучета начисления';
								|en = 'Edit accrual accounting'");
		ИзменитьБухучет = Не КоллекцииИдентичны();
		УстановитьДоступностьЭУ();
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка;
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НомерСтроки = 0;
	Для каждого СтрокаТЗ Из ТаблицаРаспределения Цикл
		
		Если СтрокаТЗ.ДоляРаспределения = 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указана доля распределения';
									|en = 'Allocation share is not specified'");
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				,
				"ТаблицаРаспределения[" + НомерСтроки + "].ДоляРаспределения",
				,
				Отказ);
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыРаспределения

&НаКлиенте
Процедура ТаблицаРаспределенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ИтогРаспределения = ТаблицаРаспределения.Итог("ДоляРаспределения");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРаспределенияПослеУдаления(Элемент)
	ИтогРаспределения = ТаблицаРаспределения.Итог("ДоляРаспределения");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьЗакрыть(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	Иначе
		Результат = РезультатРедактирования();
	КонецЕсли;
	
	Если Не Отказ Тогда
		Закрыть(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПрежнееЗначение(Команда)
	
	ПараметрыОткрытия = Новый Структура("Начисление,БухучетНачисления,ПоказПрежнегоЗначения");
	ПараметрыОткрытия.Начисление 				= Начисление;
	ПараметрыОткрытия.БухучетНачисления 		= ТекущееЗначениеБухучетНачисления;
	ПараметрыОткрытия.ПоказПрежнегоЗначения 	= Истина;
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеБухучетаНачисления",
		ПараметрыОткрытия, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция РезультатРедактирования()

	Результат = Новый Структура("НовыйБухучетНачисления, УстановитьТекущееЗначение");
	Результат.УстановитьТекущееЗначение = Не ИзменитьБухучет;
	Если ИзменитьБухучет Тогда
		НовыеНастройки = ТаблицаРаспределения.Выгрузить();
		ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьТаблицуРаспределенияКодомСтатьиФинансирования(НовыеНастройки);
		Результат.НовыйБухучетНачисления = ЗарплатаКадрыРасширенный.ТаблицаЗначенийВСтруктуру(НовыеНастройки);
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(Результат);

КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	ТекстПустогоЗначения = НСтр("ru = '<подбирается автоматически>';
								|en = '<picked automatically>'");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстПустогоЗначения);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРаспределения.СтатьяФинансирования");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаРаспределенияСтатьяФинансирования");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстПустогоЗначения);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРаспределения.СтатьяРасходов");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаРаспределенияСтатьяРасходов");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстПустогоЗначения);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРаспределения.СпособОтраженияЗарплатыВБухучете");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаРаспределенияСпособОтраженияЗарплатыВБухучете");

КонецПроцедуры

&НаСервере
Функция КоллекцииИдентичны()

	ИменаКолонок = ОтражениеЗарплатыВБухучетеРасширенный.ИменаКолонокБухучетНачислений(ЭтаФорма);
	Возврат ОтражениеЗарплатыВБухучетеРасширенный.КоллекцииБухучетаИдентичны(БухучетНачисления, ТекущееЗначениеБухучетНачисления, ИменаКолонок);

КонецФункции 

&НаСервере
Процедура УстановитьДоступностьЭУ()
	
	Элементы.ТаблицаРаспределения.ТолькоПросмотр = Не ИзменитьБухучет;
	Элементы.ПоказатьПрежнееЗначение.Видимость = ИзменитьБухучет;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьБухучетПриИзменении(Элемент)
	
	ИзменитьБухучетПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ИзменитьБухучетПриИзмененииНаСервере()
	
	УстановитьДоступностьЭУ();
	
	Если ИзменитьБухучет Тогда
		ЗаполнитьТаблицуРаспределения(БухучетНачисления);
	Иначе
		БухучетНачисления = ЗарплатаКадрыРасширенный.ТаблицаЗначенийВСтруктуру(ТаблицаРаспределения.Выгрузить());
		ЗаполнитьТаблицуРаспределения(ТекущееЗначениеБухучетНачисления);
	КонецЕсли;
	
	ИтогРаспределения = ТаблицаРаспределения.Итог("ДоляРаспределения");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРаспределения(ИсточникЗаполнения)

	ТаблицаРаспределения.Очистить();
	Если ЗначениеЗаполнено(ИсточникЗаполнения) Тогда
		Для каждого СтрокаНастроек Из ИсточникЗаполнения Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаРаспределения.Добавить(), СтрокаНастроек);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти