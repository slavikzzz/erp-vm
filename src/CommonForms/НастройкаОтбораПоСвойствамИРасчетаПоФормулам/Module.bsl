
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИмяТЧ = Параметры.ИмяТЧ;
	Если Параметры.ТолькоПросмотр Тогда
		Элементы.ФормаСохранитьНастройку.Доступность = Ложь;
	КонецЕсли;
	
	АлгоритмРасчетаКоличества = Параметры.АлгоритмРасчетаКоличества;
	АдресДополнительныхДанных = Параметры.АдресДополнительныхДанных;
	
	ВидИзделийИлиНоменклатура = Параметры.ВидИзделийИлиНоменклатура;
	Если ТипЗнч(ВидИзделийИлиНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидИзделий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидИзделийИлиНоменклатура, "ВидНоменклатуры");
	Иначе
		ВидИзделий = ВидИзделийИлиНоменклатура;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидИзделий) Тогда
		ИнформационнаяСтрока = НСтр("ru = 'Не задан вид номенклатуры, свойства будут недоступны для выбора.';
									|en = 'The item kind is not set, the properties will not be available for selection.'");
	ИначеЕсли НЕ Параметры.Свойство("ИнформационнаяСтрока", ИнформационнаяСтрока) Тогда
		Элементы.ГруппаИнформационнаяПанель.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	Если ИспользоватьДополнительныеРеквизитыИСведения Тогда
		
		ЗаполнитьСписокОтборовПоСвойствам();
		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьПоСоставуНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборПоСвойствам

&НаКлиенте
Процедура ОтборПоСвойствамСвойствоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборПоСвойствам.ТекущиеДанные;
	
	//++ НЕ УТКА
	
	УправлениеДаннымиОбИзделияхКлиент.ОтборПоСвойствамСвойствоПриИзменении(
		ЭтотОбъект,
		ТекущиеДанные,
		ТаблицаДоступныхСвойствПродукции,
		СтруктураУсловий);
		
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСвойствамУсловиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборПоСвойствам.ТекущиеДанные;
	
	//++ НЕ УТКА
	
	УправлениеДаннымиОбИзделияхКлиент.ОтборПоСвойствамУсловиеПриИзменении(
		ЭтотОбъект,
		ТекущиеДанные,
		ТаблицаДоступныхСвойствПродукции,
		СтруктураУсловий);
		
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСвойствамЗначениеИнтервалПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборПоСвойствам.ТекущиеДанные;
	
	//++ НЕ УТКА
	
	УправлениеДаннымиОбИзделияхКлиент.ОтборПоСвойствамЗначениеИнтервалПриИзменении(
		ТекущиеДанные,
		Элемент.Имя);
		
	//-- НЕ УТКА
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСвойствамПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ОтборПоСвойствам.ТекущиеДанные;
	
	//++ НЕ УТКА
	
	УправлениеДаннымиОбИзделияхКлиент.ОтборПоСвойствамПередНачаломИзменения(
		ЭтотОбъект,
		ТекущиеДанные,
		ТаблицаДоступныхСвойствПродукции,
		СтруктураУсловий);
		
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСвойствамУсловиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтборПоСвойствам.ТекущиеДанные;
	
	//++ НЕ УТКА
	
	УправлениеДаннымиОбИзделияхКлиент.ОтборПоСвойствамУсловиеНачалоВыбора(
		ЭтотОбъект,
		ТекущиеДанные,
		ТаблицаДоступныхСвойствПродукции,
		СтруктураУсловий);
		
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСвойствамУсловиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСвойствамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	ЗаписатьИЗакрытьНаКлиенте(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиФормулу(Команда)
	
	ПараметрыФормы = ПараметрыФормыРедактированияФормулы(АлгоритмРасчетаКоличества);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВводаФормулы", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.КонструкторФормул",
		ПараметрыФормы,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормулу(Команда)
	
	АлгоритмРасчетаКоличества = "";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПоСвойствам.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьДополнительныеРеквизитыИСведения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//++ НЕ УТКА
	
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеТаблицыОтбораПоСвойствам(УсловноеОформление);
	
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьПоСоставуНастроек()
	
	Перем СоставНастроек;
	
	Если Параметры.Свойство("СоставНастроек") Тогда
		СоставНастроек = Параметры.СоставНастроек;
	КонецЕсли;
	
	Элементы.ГруппаОтборПоСвойствам.Видимость =(
			СоставНастроек = Неопределено ИЛИ СоставНастроек.Свойство("ОтборПоСвойствам")
		) И ИспользоватьДополнительныеРеквизитыИСведения;
	
	Элементы.ГруппаАлгоритмРасчетаКоличества.Доступность = (
			СоставНастроек = Неопределено ИЛИ СоставНастроек.Свойство("АлгоритмРасчетаКоличества"));

КонецПроцедуры

&НаСервере
Функция ПостроитьДеревоОперандов()
	
	Дерево = РаботаСФормулами.ПолучитьПустоеДеревоОперандов();
	
	Если ЭтоАдресВременногоХранилища(АдресДополнительныхДанных) Тогда
		
		СтруктураДанных = ПолучитьИзВременногоХранилища(АдресДополнительныхДанных);
		
		ТипыЭлементовДереваОперандов = РаботаСФормулами.ТипыЭлементовДереваОперандов();
		
		Для каждого КлючИЗначение Из СтруктураДанных Цикл
			
			Источник = КлючИЗначение.Значение; // см. УправлениеДаннымиОбИзделиях.СоздатьОписанияИсточникаДанныхОперандов
			
			Операнды = Неопределено; // см. УправлениеДаннымиОбИзделиях.ТаблицаОперандовИсточникаДанныхКонструктор
			Если Источник.Свойство("Операнды", Операнды) И Операнды.Количество() > 0 Тогда
				
				ГруппаОперандов = РаботаСФормулами.НоваяСтрокаДереваОперанда(Дерево);
				ГруппаОперандов.Идентификатор = Источник.Идентификатор;
				ГруппаОперандов.Представление = Источник.Представление;
				ГруппаОперандов.ТипЭлементаДерева = ТипыЭлементовДереваОперандов.ГруппаСтрокВерхнегоУровня;
				ГруппаОперандов.РазрешаетсяВыборОперанда = Ложь;
				ГруппаОперандов.ВключаетсяВИдентификатор = Ложь;
				
				Для каждого Операнд Из Операнды Цикл
					
					СтрокаОперанда = РаботаСФормулами.НоваяСтрокаДереваОперанда(ГруппаОперандов);
					СтрокаОперанда.Идентификатор = Операнд.Идентификатор;
					СтрокаОперанда.Представление = Операнд.Представление;
					СтрокаОперанда.ТипЗначения = Операнд.ТипЗначения;
					СтрокаОперанда.РазрешаетсяВыборОперанда = Истина;
					СтрокаОперанда.ВключаетсяВИдентификатор = Истина;
					СтрокаОперанда.ТипЭлементаДерева = Операнд.ТипОперанда;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыРедактированияФормулы(Формула)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ИспользуетсяДеревоОперандов", Истина);
	
	ПараметрыФормы.Вставить("Формула",   Формула);
	ПараметрыФормы.Вставить("ДеревоОперандов", ПостроитьДеревоОперандов());
	
	ДеревоОператоров = УправлениеДаннымиОбИзделиях.ПостроитьДеревоОператоров();
	ПараметрыФормы.Вставить("Операторы", ПоместитьВоВременноеХранилище(ДеревоОператоров, УникальныйИдентификатор));
	
	ПараметрыФормы.Вставить("ОперандыЗаголовок", НСтр("ru = 'Доступные реквизиты';
														|en = 'Available attributes'"));
	ПараметрыФормы.Вставить("НеИспользоватьПредставление", Истина);

	ПараметрыФормы.Вставить("ФункцииИзОбщегоМодуля", УправлениеДаннымиОбИзделияхПовтИсп.ОписаниеФункцийКонструктораФормул());
	
	ПараметрыФормы.Вставить("ТипРезультата", Новый ОписаниеТипов("Число"));
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВводаФормулы(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		АлгоритмРасчетаКоличества = РезультатЗакрытия;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	ОтборПоСвойствамДляТекущейСтроки = Неопределено;
	ПараметрыФормы = Новый Структура;
	
	//++ НЕ УТКА
	
	ОтборПоСвойствамДляТекущейСтроки = УправлениеДаннымиОбИзделияхКлиент.ОтборПоСвойствамПроизвестиКонтрольСформироватьРезультатНастройки(
		ОтборПоСвойствам,
		ТаблицаДоступныхСвойствПродукции,
		ЕстьОшибки);
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ОтборПоСвойствам", ОтборПоСвойствамДляТекущейСтроки);
	ПараметрыФормы.Вставить("АлгоритмРасчетаКоличества", АлгоритмРасчетаКоличества);
	
	//-- НЕ УТКА
	
	Модифицированность = Ложь;
	
	ОповеститьОВыборе(ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОтборовПоСвойствам()
	
	//++ НЕ УТКА
	
	СтруктураУсловий = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураУсловийОтбораПоСвойствамНоменклатуры();
	
	СписокСвойствИзделия = УправлениеДаннымиОбИзделиях.ПолучитьСвойстваДляОтбораПоСвойствам(ВидИзделий);
	
	Для каждого ДанныеСвойства Из СписокСвойствИзделия Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДоступныхСвойствПродукции.Добавить(), ДанныеСвойства);
		Элементы.Свойство.СписокВыбора.Добавить(ДанныеСвойства.Свойство, ДанныеСвойства.Представление);
	КонецЦикла;
	
	Элементы.Свойство.СписокВыбора.СортироватьПоПредставлению();
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСписокОтборовПоСвойствам(ОтборПоСвойствам, Параметры.ОтборПоСвойствам);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти
