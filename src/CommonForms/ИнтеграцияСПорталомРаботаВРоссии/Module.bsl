#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.Организация.Видимость = Ложь;
		Элементы.ИмеетРегистрацию.Заголовок = НСтр("ru = 'Организация имеет регистрацию';
													|en = 'Организация имеет регистрацию'");
	КонецЕсли;
	
	Выборка = Справочники.Организации.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ДанныеОрганизаций.Добавить();
		НоваяСтрока.Организация = Выборка.Ссылка;
	КонецЦикла;
	
	Организация = Параметры.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Элементы.ИндикаторПопытки.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриВыбореОрганизации(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И Не НастройкиЗаписаны Тогда
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Настройки интеграции с порталом ""Работа в России"" еще не записаны.';
										|en = 'Настройки интеграции с порталом ""Работа в России"" еще не записаны.'");
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписьПриЗакрытииОтветНаВопрос", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Записать настройки?';
													|en = 'Записать настройки?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗапомнитьТекущиеДанные();
	ЗаписатьУчетныеДанныеИнтеграцииСРаботаВРоссии();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАвторизацию(Команда)
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьАвторизациюОтветНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Записать настройки и продолжить?';
												|en = 'Записать настройки и продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ПроверитьАвторизациюНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриВыбореОрганизации(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмеетРегистрациюПриИзменении(Элемент)
	
	ЗапомнитьТекущиеДанные();
	НастроитьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗапомнитьТекущиеДанные()
	
	Строка = ДанныеОрганизаций.НайтиПоИдентификатору(ТекущаяСтрокаДанных);
	Если Строка <> Неопределено Тогда
		
		Строка.Используется = ИмеетРегистрацию;
		
		Если Строка.Данные = Неопределено Тогда
			Если ИмеетРегистрацию Тогда
				Строка.Данные = Новый Структура("Логин, Пароль, Идентификатор, Токен, ИспользоватьТокен");
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Строка.Данные.Логин = Пользователь;
		Строка.Данные.Пароль = Пароль;
		Строка.Данные.Идентификатор = Идентификатор;
		Строка.Данные.Токен = Токен;
		Строка.Данные.ИспользоватьТокен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореОрганизации(НоваяОрганизация)
	
	ЗапомнитьТекущиеДанные();
	
	Строки = ДанныеОрганизаций.НайтиСтроки(Новый Структура("Организация", НоваяОрганизация));
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = Строки[0];
	
	Если ТекДанные.Данные = Неопределено Тогда
		Данные = ПрочитатьНастройкиИнтеграцииСРаботаВРоссии(ТекДанные.Организация);
		Если Данные.Организация = ТекДанные.Организация Тогда
			ТекДанные.Данные = Данные;
			ЕстьДанныеОрганизации = Истина;
		Иначе
			ЕстьДанныеОрганизации = Ложь;
		КонецЕсли;
		ТекДанные.Используется = ЕстьДанныеОрганизации;
		ИмеетРегистрацию = ЕстьДанныеОрганизации;
	Иначе
		Данные = ТекДанные.Данные;
		ЕстьДанныеОрганизации = Истина;
		ИмеетРегистрацию = ТекДанные.Используется;
	КонецЕсли;
	
	ТекущаяСтрокаДанных = ТекДанные.ПолучитьИдентификатор();
	
	Пользователь = Данные.Логин;
	Пароль = Данные.Пароль;
	Идентификатор = Данные.Идентификатор;
	Токен = Данные.Токен;
	ИспользоватьТокен = Истина;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьПриЗакрытииОтветНаВопрос(КодВозврата, ДополнительныеПараметры) Экспорт

	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		НастройкиЗаписаны = Истина;
		Закрыть();
	Иначе
		ЗапомнитьТекущиеДанные();
		ЗаписатьУчетныеДанныеИнтеграцииСРаботаВРоссии();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьНастройкиИнтеграцииСРаботаВРоссии(Организация)
	
	Возврат ИнтеграцияСРаботаВРоссии.НастройкиАвторизации(Организация);
	
КонецФункции

&НаКлиенте
Процедура НастроитьФорму()
	
	Элементы.ГруппаНастройки.Видимость = ИмеетРегистрацию;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьУчетныеДанныеИнтеграцииСРаботаВРоссии()
	
	Для Каждого Строка Из ДанныеОрганизаций Цикл
		Если Строка.Используется = Истина Тогда
			Данные = Строка.Данные;
			Если Данные <> Неопределено Тогда
				ИнтеграцияСРаботаВРоссии.ЗапомнитьНастройкиАвторизации(
					Строка.Организация, Данные.Логин, Данные.Пароль, Данные.Идентификатор, Данные.Токен, Данные.ИспользоватьТокен);
			КонецЕсли;
		ИначеЕсли Строка.Используется = Ложь Тогда
			ИнтеграцияСРаботаВРоссии.УдалитьНастройкиАвторизации(Строка.Организация);
		КонецЕсли;
	КонецЦикла;

	НастройкиЗаписаны = Истина;
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ОрганизацияПоУмолчанию()
	
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	Если Организация.Пустая() Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления
			|	И НЕ Организации.Предопределенный");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьАвторизациюОтветНаВопрос(КодВозврата, ДополнительныеПараметры) Экспорт

	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		Возврат
	КонецЕсли;

	ЗапомнитьТекущиеДанные();
	ЗаписатьУчетныеДанныеИнтеграцииСРаботаВРоссии();
		
	ПроверитьАвторизациюНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАвторизациюНаКлиенте()
	
	Счетчик = 0;
	ПроверитьАвторизациюПопытка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАвторизациюПопытка()
	
	Счетчик = Счетчик + 1;

	АдресСервера = "";
	ОписаниеОшибки = "";
	Результат = ПроверитьАвторизациюНаСервере(Организация, АдресСервера, ОписаниеОшибки);
	Если Результат Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("УспешнаяАвторизацияЗавершение", ЭтотОбъект);
		ПоказатьПредупреждение(ОписаниеОповещения, СтрШаблон(НСтр("ru = 'Успешная авторизация.
			|Сервер: %1';
			|en = 'Успешная авторизация.
			|Сервер: %1'"), АдресСервера));
		Элементы.ИндикаторПопытки.Видимость = Ложь;
	КонецЕсли;
	
	Если Не Результат Тогда
		Если Счетчик < 3 Тогда
			Элементы.ИндикаторПопытки.Видимость = Истина;
			ПодключитьОбработчикОжидания("ПроверитьАвторизациюПопытка", 3, Истина);
		Иначе
			ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Ошибка авторизации
				|%1';
				|en = 'Ошибка авторизации
				|%1'"), ОписаниеОшибки));
			Элементы.ИндикаторПопытки.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УспешнаяАвторизацияЗавершение(ДополнительныеПараметры) Экспорт
	
	СостоянияЗаданий = ПроверитьРегламентныеЗаданияНаСервере();
	
	ИменаЗаданий = "";
	Для Каждого Элемент Из СостоянияЗаданий Цикл
		Если Не Элемент.Включено Тогда
			ИменаЗаданий = ИменаЗаданий + Символы.ПС + " - " + Элемент.ИмяЗадания;
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаЗаданий <> "" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВключениеЗаданийЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, СтрШаблон(НСтр("ru = 'Будут включены регламентные задания: %1
			|Продолжить?';
			|en = 'Будут включены регламентные задания: %1
			|Продолжить?'"), ИменаЗаданий), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключениеЗаданийЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ПроверитьРегламентныеЗаданияНаСервере(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьАвторизациюНаСервере(Знач Организация, АдресСервера, ОписаниеОшибкиПРР)
	
	Возврат ИнтеграцияСРаботаВРоссии.ПроверитьАвторизацию(Организация, АдресСервера, ОписаниеОшибкиПРР);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьРегламентныеЗаданияНаСервере(Включить = Ложь)
	
	Возврат ИнтеграцияСРаботаВРоссии.ПроверитьРегламентныеЗадания(Включить);
	
КонецФункции

#КонецОбласти