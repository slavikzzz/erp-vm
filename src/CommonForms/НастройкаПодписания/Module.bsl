#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ЦельПодписания", ЦельПодписания);
	Параметры.Свойство("Настроить", Настроить);
	УстановитьУсловноеОформление();
	
	Если Параметры.Идентификаторы.Количество() > 1 Тогда
		НесколькоИдентификаторовПечатныхФорм = Истина;
	КонецЕсли;
	
	ТипыОбъектов = Новый ФиксированноеСоответствие(ОбщегоНазначенияБЗК.ОбъектыПоТипам(Параметры.ОбъектыПечати));
	НесколькоВидовДокументовОснований = ТипыОбъектов.Количество() > 1;
	ОрганизацииСсылок = Новый Массив;
	
	СсылкаНаПервыйОбъект = Параметры.ОбъектыПечати[0];
	МетаданныеДокумента = СсылкаНаПервыйОбъект.Метаданные();
	МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
	
	Попытка
		ОписаниеПодписейДокумента = МенеджерОбъектов.ОписаниеПодписейДокумента();
	Исключение
		ОписаниеПодписейДокумента = Неопределено;
	КонецПопытки;
	
	ОписаниеПодписей = ПодписиДокументовФормы.ОписаниеПодписейПоСсылке(
		СсылкаНаПервыйОбъект, ОписаниеПодписейДокумента);
	
	ТребуемыеРеквизиты = Новый Массив;
	РеквизитыОрганизации = Новый Массив;
	Для Каждого ОписаниеПодписи Из ОписаниеПодписей Цикл
		
		НовоеОтветственноеЛицо = ОтветственныеЛица.Вставить(0);
		НовоеОтветственноеЛицо.ПорядокДокумента = ОтветственныеЛица.Количество();
		НовоеОтветственноеЛицо.ПодписантОбъекта = Истина;
		НовоеОтветственноеЛицо.РольПодписанта = ОписаниеПодписи.РольПодписанта;
		РеквизитДокумента = МетаданныеДокумента.Реквизиты.Найти(ОписаниеПодписи.ФизическоеЛицо);
		Если РеквизитДокумента <> Неопределено Тогда
			НовоеОтветственноеЛицо.ПредставлениеРолиПодписанта = РеквизитДокумента.Синоним;
		Иначе
			НовоеОтветственноеЛицо.ПредставлениеРолиПодписанта = НовоеОтветственноеЛицо.РольПодписанта;
		КонецЕсли;
		НовоеОтветственноеЛицо.ИмяРеквизита = ОписаниеПодписи.ФизическоеЛицо;
		ТребуемыеРеквизиты.Добавить(ОписаниеПодписи.ФизическоеЛицо);
		
		Если ЗначениеЗаполнено(ОписаниеПодписи.Организация) Тогда
			РеквизитыОрганизации.Добавить(ОписаниеПодписи.Организация);
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыОрганизации = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РеквизитыОрганизации);
	Если РеквизитыОрганизации.Количество() > 0 Тогда
		ЗначенияРеквизитовОрганизацийСсылок = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			Параметры.ОбъектыПечати, РеквизитыОрганизации);
		Для Каждого РеквизитыСсылки Из ЗначенияРеквизитовОрганизацийСсылок Цикл
			Для Каждого ОрганизацииСсылки Из РеквизитыСсылки.Значение Цикл
				Если ЗначениеЗаполнено(ОрганизацииСсылки.Значение) Тогда
					ОрганизацииСсылок.Добавить(ОрганизацииСсылки.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ОрганизацииСсылок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОрганизацииСсылок);
	КонецЕсли;
	
	Если ОрганизацииСсылок.Количество() < 2 Тогда
		
		Если ОрганизацииСсылок.Количество() > 0 Тогда
			Организация = ОрганизацииСсылок[0];
		КонецЕсли;
		
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПервыйОбъект, ТребуемыеРеквизиты);
		Для Каждого ОтветственноеЛицо Из ОтветственныеЛица Цикл
			РеквизитыСсылки.Свойство(ОтветственноеЛицо.ИмяРеквизита, ОтветственноеЛицо.ФизическоеЛицо);
			Если ЗначениеЗаполнено(ОтветственноеЛицо.ФизическоеЛицо) Тогда
				ОтветственноеЛицо.Пользователь =
					ЗарплатаКадрыПовтИсп.ДействующийПользовательФизическогоЛица(ОтветственноеЛицо.ФизическоеЛицо);
			КонецЕсли;
			УстановитьТекстПодсказки(ОтветственноеЛицо);
		КонецЦикла;
		
	Иначе
		НесколькоОрганизаций = Истина;
	КонецЕсли;
	
	Для Каждого ОрганизацияСсылка Из ОрганизацииСсылок Цикл
		НастройкиПодписания = НастройкиПодписанияОрганизации(ОрганизацияСсылка);
		ОтветственныеЛицаПрежнихНастроек = Новый Массив;
		Если НастройкиПодписания = Неопределено Тогда
			НастройкиПодписания = Новый Соответствие;
			
			ПрежниеНастройкиПользователя = КадровыйЭДОВызовСервера.СертификатыОрганизацийПоУмолчанию();
			ПрежниеНастройкиПоОрганизации = ПрежниеНастройкиПользователя.Получить(Организация);
			Если ПрежниеНастройкиПоОрганизации <> Неопределено Тогда
				Для Каждого ПрежняяНастройка Из ПрежниеНастройкиПоОрганизации Цикл
					Если ТипЗнч(ПрежняяНастройка) = Тип("СправочникСсылка.Пользователи") Тогда
						ОтветственныеЛицаПрежнихНастроек.Добавить(ПрежняяНастройка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		Для Каждого ИдентификаторПечатнойФормы Из Параметры.Идентификаторы Цикл
			НастройкиПодписанияИдентификатора = НастройкиПодписанияИдентификатораПечатнойФормы(
				ОрганизацияСсылка, ИдентификаторПечатнойФормы, НастройкиПодписания);
			
			Для Каждого ТипОбъекта Из ТипыОбъектов Цикл
				НастройкиПодписанияОбъекта = НастройкиПодписанияИдентификатораПечатнойФормыОбъекта(
					ОрганизацияСсылка, ИдентификаторПечатнойФормы, ТипОбъекта.Ключ, НастройкиПодписанияИдентификатора, ОтветственныеЛицаПрежнихНастроек);
				СтрокаНастроек = НастройкиПодписанияОбъектов.Добавить();
				СтрокаНастроек.Организация = ОрганизацияСсылка;
				СтрокаНастроек.ИдентификаторПечатнойФормы = ИдентификаторПечатнойФормы;
				СтрокаНастроек.ТипОбъекта = ТипОбъекта.Ключ;
				СтрокаНастроек.Настройки = НастройкиПодписанияОбъекта;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если НастройкиПодписанияОбъектов.Количество() = 0 Тогда
		НоваяНастройка = НастройкиПодписанияОбъектов.Добавить();
		НоваяНастройка.Организация = Организация;
		НоваяНастройка.ТипОбъекта = ТипЗнч(СсылкаНаПервыйОбъект);
		Если ЗначениеЗаполнено(Параметры.Идентификаторы) Тогда
			НоваяНастройка.ИдентификаторПечатнойФормы = Параметры.Идентификаторы[0];
		КонецЕсли;
		НоваяНастройка.Настройки = НастройкиПодписанияПоУмолчанию();
	КонецЕсли;
	
	Если НастройкиПодписанияОбъектов.Количество() = 1 Тогда
		Организация = НастройкиПодписанияОбъектов[0].Организация;
		ИдентификаторПечатнойФормы = НастройкиПодписанияОбъектов[0].ИдентификаторПечатнойФормы;
		ТипОбъекта = НастройкиПодписанияОбъектов[0].ТипОбъекта;
		ЗагрузитьНастройкиПодписанияВФорму(НастройкиПодписанияОбъектов[0].Настройки);
	КонецЕсли;
	
	Если ИнтеграцияСРаботаВРоссии.ДоступнаПередачаДокументовНаРаботаВРоссии() Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
			СвойстваКоманды = КадровыйЭДО.СвойстваКомандыПередачиНаПорталРаботаВРоссииИВКабинетСотрудника();
		Иначе
			СвойстваКоманды = ИнтеграцияСРаботаВРоссии.СвойстваКомандыПередачиНаПорталРаботаВРоссии();
		КонецЕсли;
	Иначе
		СвойстваКоманды = ИнтеграцияКабинетСотрудника.СвойстваКомандыПередачиВКабинетСотрудника();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПодписать",
		"Заголовок",
		СвойстваКоманды.Заголовок);
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		ЭтотОбъект,
		"ФормаПодписать",
		СвойстваКоманды.Подсказка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПодписать",
		"Картинка",
		СвойстваКоманды.Картинка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПодписать",
		"Видимость",
		Не ЗначениеЗаполнено(ЦельПодписания)
			Или ЦельПодписания = Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников
			Или ЦельПодписания = Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьНаРаботаВРоссии);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаСохранитьВPDFИПодписатьФайл",
		"Видимость",
		Не ЗначениеЗаполнено(ЦельПодписания)
			Или ЦельПодписания = Перечисления.ДействияСФайламиДокументовКЭДО.ЗаписатьНаДиск);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаОтправитьПодписанныеPDF",
		"Видимость",
		РаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем()
			И (Не ЗначениеЗаполнено(ЦельПодписания) Или ЦельПодписания = Перечисления.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Настроить Тогда
		
		Если НесколькоИдентификаторовПечатныхФорм
			Или НесколькоОрганизаций
			Или НесколькоВидовДокументовОснований Тогда
			
			Если ЗначениеЗаполнено(ЦельПодписания) Тогда
				
				ТекстВопроса = НСтр("ru = 'Настраивать подписание допустимо только для отдельных
					|видов документов оснований по одной организации.
					|
					|Если выбрать команду Подписать, будет произведено
					|подписание по настройкам, заданным ранее или по
					|умолчанию (если настройка еще не производилась.';
					|en = 'You can set up signing only for certain
					|base document kinds of one company.
					|
					|If you click Sign, documents will be signed
					|based on the settings specified earlier
					|or the default settings if you have not specified the settings yet.'");
				
				СписокКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить("Подписать", НСтр("ru = 'Подписать';
														|en = 'Sign'"));
				СписокКнопок.Добавить("Отмена", НСтр("ru = 'Отмена';
													|en = 'Cancel'"));
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Настраивать подписание допустимо только для отдельных
					|видов документов оснований по одной организации.
					|
					|При выборе команды с подписанием печатных форм в форме
					|печати документов, будет произведено подписание по наст-
					|ройкам, заданным ранее или с настройками ""по умолчанию""
					|(если настройка еще не производилась).';
					|en = 'You can set up signing only for certain
					|base document kinds of one company.
					|
					|If you click the command to sign print forms in the document print
					|form, documents will be signed
					|based on the settings specified earlier or the default settings
					|if you have not specified the settings yet.'");
				
				СписокКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить("Отмена", НСтр("ru = 'Ок';
													|en = 'OK'"));
				
			КонецЕсли;
			
			
			Оповещение = Новый ОписаниеОповещения("ОбработатьОтветОПечатиПРиНевозможностиНастройки", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок);
			
			Отказ = Истина;
		КонецЕсли;
		
	Иначе
		Если Не ПоказыватьПриКаждомПодписании Тогда
			Отказ = Истина;
			НачатьПодписаниеПечатныхФорм(ЦельПодписания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЕстьПодписанты = Инициатор;
	Для Каждого СтрокаОтветственного Из ОтветственныеЛица Цикл
		Если СтрокаОтветственного.Используется Тогда
			Если ЗначениеЗаполнено(СтрокаОтветственного.Пользователь) Тогда
				ЕстьПодписанты = Истина;
				Если ЗначениеЗаполнено(СтрокаОтветственного.ТекстПодсказки) Тогда
					ТекстСообщения = СтрШаблон("%1: %2",
						СтрокаОтветственного.Пользователь,
						СтрокаОтветственного.ТекстПодсказки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							"ОтветственныеЛица", ОтветственныеЛица.Индекс(СтрокаОтветственного) + 1, "Пользователь"), , Отказ);
				КонецЕсли;
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаОтветственного.РольПодписанта) Тогда
				ТекстСообщения = НСтр("ru = 'Не выбран пользователь - подписант';
										|en = 'Signer is not selected'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"ОтветственныеЛица", ОтветственныеЛица.Индекс(СтрокаОтветственного) + 1, "Пользователь"), , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьПодписанты Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны подписанты';
								|en = 'Signers are not selected'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыОтветственныеЛица

&НаКлиенте
Процедура ОтветственныеЛицаПриАктивизацииСтроки(Элемент)
	
	ТекстПодсказки = "";
	Если Элементы.ОтветственныеЛица.ТекущиеДанные <> Неопределено Тогда
		ТекстПодсказки = Элементы.ОтветственныеЛица.ТекущиеДанные.ТекстПодсказки;
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		ЭтотОбъект, "ОтветственныеЛица", ТекстПодсказки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЛицаПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ОтветственныеЛица.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ПодписантОбъекта Тогда
			ТекущиеДанные.Используется = Ложь;
			Отказ = Истина;
			Состояние(НСтр("ru = 'Нельзя удалить ответственное лицо';
							|en = 'You cannot delete a responsible employee'"), , НСтр("ru = 'Определенное в конфигурации, но можно отключить участие в процессе подписания документов.';
																				|en = 'specified in the application, but you can disable the document signing process for them.'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЛицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.ОтветственныеЛица.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Используется = Истина;
			ТекущиеДанные.ПодписантОбъекта = Ложь;
			ТекущиеДанные.РольПодписанта = Неопределено;
			ТекущиеДанные.Пользователь = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЛицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьТекстПодсказки(Элементы.ОтветственныеЛица.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНастройки(Команда)
	
	ОчиститьНастройкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	НачатьПодписаниеПечатныхФорм(ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников"));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВPDFИПодписатьФайл(Команда)
	
	НачатьПодписаниеПечатныхФорм(ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ЗаписатьНаДиск"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПодписанныеPDF(Команда)
	
	НачатьПодписаниеПечатныхФорм(ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте"));
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьОтветОПечатиПРиНевозможностиНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Подписать" Тогда
		НачатьПодписаниеПечатныхФорм(ЦельПодписания);
	КонецЕсли;
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Отметка не заполненного ответственного лица
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтветственныеЛица.Используется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтветственныеЛица.Пользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Истина);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтветственныеЛицаПользователь");
	
	// Только просмотр ответственного из документа (заполнена РольПодписанта)
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтветственныеЛица.РольПодписанта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтветственныеЛицаПользователь");
	
	// Установка текста роли пользовательских настроек
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтветственныеЛица.РольПодписанта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Пользовательский выбор>';
																			|en = '<User choice>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтветственныеЛицаПредставлениеРолиПодписанта");
	
	// Картинку с проблемой показываем только когда она есть
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтветственныеЛица.Картинка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтветственныеЛицаКартинка");
	
КонецПроцедуры

&НаСервере
Функция НастройкиПодписанияОрганизаций()
	НастройкиПодписания = КадровыйЭДОВызовСервера.НастройкиПодписанияОрганизаций();
	Если НастройкиПодписания = Неопределено Тогда
		НастройкиПодписания = Новый Соответствие;
	КонецЕсли;
	Возврат НастройкиПодписания;
КонецФункции

&НаСервере
Функция НастройкиПодписанияОрганизации(Организация, ВсеНастройкиПодписания = Неопределено)
	Если ВсеНастройкиПодписания = Неопределено Тогда
		ВсеНастройкиПодписания = НастройкиПодписанияОрганизаций();
	КонецЕсли;
	НастройкиПодписания = ВсеНастройкиПодписания.Получить(Организация);
	Если НастройкиПодписания = Неопределено Тогда
		НастройкиПодписания = Новый Соответствие;
		ВсеНастройкиПодписания.Вставить(Организация, НастройкиПодписания);
	КонецЕсли;
	Возврат НастройкиПодписания;
КонецФункции

&НаСервере
Функция НастройкиПодписанияИдентификатораПечатнойФормы(Организация, ИдентификаторПечатнойФормы, НастройкиПодписанияОрганизации = Неопределено)
	Если НастройкиПодписанияОрганизации = Неопределено Тогда
		НастройкиПодписанияОрганизации = НастройкиПодписанияОрганизации(Организация);
	КонецЕсли;
	НастройкиПодписания = НастройкиПодписанияОрганизации.Получить(ИдентификаторПечатнойФормы);
	Если НастройкиПодписания = Неопределено Тогда
		НастройкиПодписания = Новый Соответствие;
		НастройкиПодписанияОрганизации.Вставить(ИдентификаторПечатнойФормы, НастройкиПодписания);
	КонецЕсли;
	Возврат НастройкиПодписания;
КонецФункции

&НаСервере
Функция НастройкиПодписанияИдентификатораПечатнойФормыОбъекта(Организация, ИдентификаторПечатнойФормы, ТипОбъекта, НастройкиПодписанияИдентификатора = Неопределено, ОтветственныеЛицаПрежнихНастроек = Неопределено)
	НастройкиПодписания = НастройкиПодписанияПоУмолчанию();
	Если НастройкиПодписанияИдентификатора = Неопределено Тогда
		НастройкиПодписанияИдентификатора = НастройкиПодписанияИдентификатораПечатнойФормы(Организация, ИдентификаторПечатнойФормы);
	КонецЕсли;
	Если НастройкиПодписанияИдентификатора <> Неопределено Тогда
		СохраненныеНастройки = НастройкиПодписанияИдентификатора.Получить(ТипОбъекта);
		Если СохраненныеНастройки <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НастройкиПодписания, СохраненныеНастройки);
		КонецЕсли;
	Иначе
		Если ОтветственныеЛицаПрежнихНастроек <> Неопределено Тогда
			Для Каждого ОтветственноеЛицоПрежнихНастроек Из ОтветственныеЛицаПрежнихНастроек Цикл
				ОписаниеПодписанта = НовоеОписаниеПодписанта();
				ОписаниеПодписанта.Пользователь = ОтветственноеЛицоПрежнихНастроек;
				НастройкиПодписания.ОтветственныеЛица.Добавить(ОписаниеПодписанта);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат НастройкиПодписания;
КонецФункции

&НаСервере
Процедура СохранитьНастройкиПодписанияИдентификатора(Организация, ИдентификаторПечатнойФормы, НастройкиПодписанияОбъекта)
	
	НастройкиПодписанияОрганизаций = НастройкиПодписанияОрганизаций();
	Если НастройкиПодписанияОрганизаций = Неопределено Тогда
		НастройкиПодписанияОрганизаций = Новый Соответствие;
	КонецЕсли;
	
	НастройкиПодписанияОрганизации = НастройкиПодписанияОрганизации(Организация, НастройкиПодписанияОрганизаций);
	
	НастройкиПодписанияИдентификатора = НастройкиПодписанияИдентификатораПечатнойФормы(
		Организация, ИдентификаторПечатнойФормы, НастройкиПодписанияОрганизации);
	
	НастройкиПодписанияИдентификатораПечатнойФормыОбъекта(
		Организация, ИдентификаторПечатнойФормы, ТипОбъекта, НастройкиПодписанияИдентификатора);
	
	НастройкиПодписанияИдентификатора.Вставить(ТипОбъекта, НастройкиПодписанияОбъекта);
	
	НастройкиПодписанияОрганизаций.Вставить(Организация, НастройкиПодписанияОрганизации);
	КадровыйЭДОВызовСервера.ЗапомнитьНастройкиПодписанияОрганизаций(НастройкиПодписанияОрганизаций);
	
КонецПроцедуры

&НаСервере
Функция НастройкиПодписанияПоУмолчанию()
	
	НастройкиПодписания = Новый Структура;
	НастройкиПодписания.Вставить("ПоказыватьПриКаждомПодписании", Ложь);
	НастройкиПодписания.Вставить("Инициатор", Истина);
	НастройкиПодписания.Вставить("ОтветственныеЛица", Новый Массив);
	
	Возврат НастройкиПодписания;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиПодписанияФормы()
	
	НастройкиПодписанияИдентификатора = НастройкиПодписанияПоУмолчанию();
	НастройкиПодписанияИдентификатора.ПоказыватьПриКаждомПодписании = ПоказыватьПриКаждомПодписании;
	НастройкиПодписанияИдентификатора.Инициатор = Инициатор;
	Для Каждого ОтветственноеЛицо Из ОтветственныеЛица Цикл
		Если ОтветственноеЛицо.Используется Тогда
			ОписаниеПодписанта = НовоеОписаниеПодписанта();
			ЗаполнитьЗначенияСвойств(ОписаниеПодписанта, ОтветственноеЛицо);
			НастройкиПодписанияИдентификатора.ОтветственныеЛица.Добавить(ОписаниеПодписанта);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗапомнитьНастройки Тогда
		СохранитьНастройкиПодписанияИдентификатора(Организация, ИдентификаторПечатнойФормы, НастройкиПодписанияИдентификатора);
	ИначеЕсли ПоказыватьПриКаждомПодписанииИсходные <> ПоказыватьПриКаждомПодписании Тогда
		СохраняемыеНастройки = НастройкиПодписанияИдентификатораПечатнойФормыОбъекта(
				Организация, ИдентификаторПечатнойФормы, ТипОбъекта);
		СохраняемыеНастройки.ПоказыватьПриКаждомПодписании = ПоказыватьПриКаждомПодписании;
		СохранитьНастройкиПодписанияИдентификатора(Организация, ИдентификаторПечатнойФормы, СохраняемыеНастройки);
	КонецЕсли;
	
	НастройкиПодписанияОбъектов[0].Настройки = НастройкиПодписанияИдентификатора;
	
КонецПроцедуры

&НаСервере
Функция НовоеОписаниеПодписанта()
	Возврат Новый Структура("РольПодписанта,ПредставлениеРолиПодписанта,Пользователь,ИмяРеквизита");
КонецФункции

&НаСервере
Процедура ОчиститьСписокОтветственных()
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаОтветственного Из ОтветственныеЛица Цикл
		Если Не ЗначениеЗаполнено(СтрокаОтветственного.РольПодписанта) Тогда
			УдаляемыеСтроки.Добавить(СтрокаОтветственного);
		Иначе
			СтрокаОтветственного.Используется = Ложь;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ОтветственныеЛица.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	ОтветственныеЛица.Сортировать("ПорядокДокумента УБЫВ");
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиПодписанияВФорму(НастройкиПодписания)
	
	НастройкиПодписания.Свойство("ПоказыватьПриКаждомПодписании", ПоказыватьПриКаждомПодписании);
	ПоказыватьПриКаждомПодписанииИсходные = ПоказыватьПриКаждомПодписании;
	Инициатор = НастройкиПодписания.Инициатор;
	ИндексПоследнего = 0;
	Для Каждого ОтветственноеЛицо Из НастройкиПодписания.ОтветственныеЛица Цикл
		Если ЗначениеЗаполнено(ОтветственноеЛицо.РольПодписанта) Тогда
			НайденныеОтветственные = ОтветственныеЛица.НайтиСтроки(Новый Структура("РольПодписанта", ОтветственноеЛицо.РольПодписанта));
		Иначе
			НайденныеОтветственные = ОтветственныеЛица.НайтиСтроки(Новый Структура("ПредставлениеРолиПодписанта", ОтветственноеЛицо.ПредставлениеРолиПодписанта));
		КонецЕсли;
		Если НайденныеОтветственные.Количество() > 0 Тогда
			Для Каждого НайденныйОтветственный Из НайденныеОтветственные Цикл
				Если НайденныйОтветственный.Используется Тогда
					Продолжить;
				КонецЕсли;
				ИндексНайденного = ОтветственныеЛица.Индекс(НайденныйОтветственный);
				Если ИндексНайденного < ИндексПоследнего Тогда
					ОтветственныеЛица.Сдвинуть(ИндексНайденного, ИндексПоследнего - ИндексНайденного);
					ИндексПоследнего = ОтветственныеЛица.Индекс(НайденныйОтветственный);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НайденныйОтветственный, ОтветственноеЛицо);
				НайденныйОтветственный.Используется = Истина;
				УстановитьТекстПодсказки(НайденныйОтветственный);
			КонецЦикла;
		Иначе
			НовоеОтветственноеЛицо = ОтветственныеЛица.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеОтветственноеЛицо, ОтветственноеЛицо);
			НовоеОтветственноеЛицо.Используется = Истина;
			ИндексПоследнего = ОтветственныеЛица.Количество() - 1;
			УстановитьТекстПодсказки(НовоеОтветственноеЛицо);
		КонецЕсли;
	КонецЦикла;
	ТекущаяСтрока = 0;
	Для Каждого ОтветственноеЛицо Из ОтветственныеЛица Цикл
		Если ЗначениеЗаполнено(ОтветственноеЛицо.ТекстПодсказки) Тогда
			Если ТекущаяСтрока = 0 Тогда
				ТекущаяСтрока = ОтветственноеЛицо.ПолучитьИдентификатор();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОтветственноеЛицо.РольПодписанта) Тогда
				ТекущаяСтрока = ОтветственноеЛицо.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ТекущаяСтрока <> 0 Тогда
		Элементы.ОтветственныеЛица.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьНастройкиНаСервере()
	
	ОчиститьСписокОтветственных();
	ЗагрузитьНастройкиПодписанияВФорму(НастройкиПодписанияПоУмолчанию());
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодписаниеПечатныхФорм(ЦельПодписания)
	
	Если Не (НесколькоИдентификаторовПечатныхФорм
			Или НесколькоОрганизаций
			Или НесколькоВидовДокументовОснований) Тогда
		
		Если ЦельПодписания = ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьНаРаботаВРоссии")
			И Не ОрганизацияИспользуетПРР(Организация) Тогда
			Сообщить(ИнтеграцияСРаботаВРоссииКлиент.ТекстПредупрежденияОрганизацияНеИспользуетПРР());
			Возврат;
		КонецЕсли;
		
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		СохранитьНастройкиПодписанияФормы();
	КонецЕсли;
	
	КадровыйЭДОКлиент.ПодписатьПечатныеФомыПриПечати(ВладелецФормы, ЦельПодписания, НастройкиПодписания());
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстПодсказки(СтрокаОтветственного)
	Если СтрокаОтветственного <> Неопределено Тогда
		ТекстПодсказки = "";
		Если СтрокаОтветственного.Используется Тогда
			Если ЗначениеЗаполнено(СтрокаОтветственного.РольПодписанта) Тогда
				Если Не ЗначениеЗаполнено(СтрокаОтветственного.Пользователь) Тогда
					ТекстПодсказки = НСтр("ru = 'Ответственное лицо не выбрано в документе. При планировании подписания будет пропущено.';
											|en = 'A person responsible is not selected in the document. They will be skipped when you plan the signing.'");
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СтрокаОтветственного.Пользователь) Тогда
				СвойстваОтветственногоЛица = ЗарплатаКадрыВызовСервера.СвойстваОтветственногоЛица(СтрокаОтветственного.Пользователь);
				Если Не ЗначениеЗаполнено(СвойстваОтветственногоЛица.Ссылка) Тогда
					ТекстПодсказки = НСтр("ru = 'Ответственное лицо не найдено. Необходимо указать действующее ответственное лицо, которому необходимо направить документ на подписание.';
											|en = 'A responsible employee is not found. Specify the active responsible employee who you need to send the document for signing to.'");
				ИначеЕсли СвойстваОтветственногоЛица.ПометкаУдаления Тогда
					ТекстПодсказки = НСтр("ru = 'Учетная запись выбранного пользователя помечена на удаление. Убедитесь что пользователь допущен к работе с программой.';
											|en = 'The selected user''s account is marked for deletion. Make sure the user is authorized to use the application.'");
				ИначеЕсли СвойстваОтветственногоЛица.Недействителен
					Или СвойстваОтветственногоЛица.Служебный
					Или Не ВходВПрограммуРазрешен(СтрокаОтветственного.Пользователь) Тогда
					
					ТекстПодсказки = НСтр("ru = 'Учетная запись ответственного лица не имеет доступа в программу. Необходимо указать ответственное лицо, которому необходимо направить документ на подписание.';
											|en = 'The responsible employee''s account does not have access to the application. Specify a responsible employee who you need to send the document for signing to.'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрокаОтветственного.ТекстПодсказки = ТекстПодсказки;
		Если ЗначениеЗаполнено(СтрокаОтветственного.ТекстПодсказки) Тогда
			Если ЗначениеЗаполнено(СтрокаОтветственного.РольПодписанта) Тогда
				СтрокаОтветственного.Картинка = 2;
			Иначе
				СтрокаОтветственного.Картинка = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НастройкиПодписания()
	
	НастройкиПодписанияОрганизаций = Новый Соответствие;
	
	Организации = Новый Массив;
	Для Каждого СтрокаНастроек Из НастройкиПодписанияОбъектов Цикл
		Если СтрокаНастроек.Настройки.Инициатор Тогда
			Организации.Добавить(СтрокаНастроек.Организация);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНастроек Из НастройкиПодписанияОбъектов Цикл
		
		ДанныеПоОрганизации = НастройкиПодписанияОрганизаций.Получить(СтрокаНастроек.Организация);
		Если ДанныеПоОрганизации = Неопределено Тогда
			ДанныеПоОрганизации = Новый Соответствие;
			НастройкиПодписанияОрганизаций.Вставить(СтрокаНастроек.Организация, ДанныеПоОрганизации);
		КонецЕсли;
		
		ДанныеПоИдентификатору = ДанныеПоОрганизации.Получить(СтрокаНастроек.ИдентификаторПечатнойФормы);
		Если ДанныеПоИдентификатору = Неопределено Тогда
			ДанныеПоИдентификатору = Новый Соответствие;
			ДанныеПоОрганизации.Вставить(СтрокаНастроек.ИдентификаторПечатнойФормы, ДанныеПоИдентификатору);
		КонецЕсли;
		
		Настройки = НастройкиПодписанияПоУмолчанию();
		Настройки.Инициатор = СтрокаНастроек.Настройки.Инициатор;
		РеквизитыОбъектов = Новый Массив;
		Для Каждого СтрокаОтветственногоЛица Из СтрокаНастроек.Настройки.ОтветственныеЛица Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаОтветственногоЛица, "ИмяРеквизита")
				И ЗначениеЗаполнено(СтрокаОтветственногоЛица.ИмяРеквизита) Тогда
				
				РеквизитыОбъектов.Добавить(СтрокаОтветственногоЛица.ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
		
		ОбъектыПодписания = ТипыОбъектов.Получить(СтрокаНастроек.ТипОбъекта);
		Если ЗначениеЗаполнено(РеквизитыОбъектов) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПодписантыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОбъектыПодписания, РеквизитыОбъектов);
			УстановитьПривилегированныйРежим(Ложь);
		Иначе
			ПодписантыОбъектов = Новый Соответствие;
		КонецЕсли;
		
		СсылкиНаОбъектыПоНаборамОтветственныхЛиц = Новый Соответствие;
		Для Каждого СсылкаНаОбъект Из ОбъектыПодписания Цикл
			РеквизитыОбъекта = ПодписантыОбъектов.Получить(СсылкаНаОбъект);
			ОтветственныеЛицаОбъекта = Новый Массив;
			Для Каждого СтрокаОтветственногоЛица Из СтрокаНастроек.Настройки.ОтветственныеЛица Цикл
				Если ЗначениеЗаполнено(СтрокаОтветственногоЛица.РольПодписанта) Тогда
					ПодписантФизическоеЛицо = Неопределено;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаОтветственногоЛица, "ИмяРеквизита")
						И ЗначениеЗаполнено(СтрокаОтветственногоЛица.ИмяРеквизита) Тогда
						
						РеквизитыОбъекта.Свойство(СтрокаОтветственногоЛица.ИмяРеквизита, ПодписантФизическоеЛицо);
						Если ЗначениеЗаполнено(ПодписантФизическоеЛицо) Тогда
							ОтветственноеЛицо = ЗарплатаКадрыПовтИсп.ДействующийПользовательФизическогоЛица(ПодписантФизическоеЛицо);
							Если ЗначениеЗаполнено(ОтветственноеЛицо) Тогда
								ОтветственныеЛицаОбъекта.Добавить(ОтветственноеЛицо);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(СтрокаОтветственногоЛица.Пользователь)
						И ОтветственныеЛицаОбъекта.Найти(СтрокаОтветственногоЛица.Пользователь) = Неопределено Тогда
						
						ОтветственныеЛицаОбъекта.Добавить(СтрокаОтветственногоЛица.Пользователь);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ОтветственныеЛицаОбъекта) Тогда
				НайденнаяКоллекцияСсылок = Неопределено;
				Для Каждого ДанныеСсылокНаОбъекты Из СсылкиНаОбъектыПоНаборамОтветственныхЛиц Цикл
					Если ОбщегоНазначения.КоллекцииИдентичны(ДанныеСсылокНаОбъекты.Ключ, ОтветственныеЛицаОбъекта, , , Истина) Тогда
						НайденнаяКоллекцияСсылок = ДанныеСсылокНаОбъекты.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НайденнаяКоллекцияСсылок = Неопределено Тогда
					НайденнаяКоллекцияСсылок = Новый Массив;
					СсылкиНаОбъектыПоНаборамОтветственныхЛиц.Вставить(ОтветственныеЛицаОбъекта, НайденнаяКоллекцияСсылок);
				КонецЕсли;
				НайденнаяКоллекцияСсылок.Добавить(СсылкаНаОбъект);
			КонецЕсли;
		КонецЦикла;
		
		Настройки.ОтветственныеЛица = СсылкиНаОбъектыПоНаборамОтветственныхЛиц;
		
		ДанныеПоИдентификатору.Вставить(СтрокаНастроек.ТипОбъекта, Настройки);
		
	КонецЦикла;
	
	Возврат НастройкиПодписанияОрганизаций;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВходВПрограммуРазрешен(Пользователь)
	Возврат Пользователи.ВходВПрограммуРазрешен(Пользователь);
КонецФункции

&НаСервереБезКонтекста
Функция ОрганизацияИспользуетПРР(Организация)
	
	Возврат ИнтеграцияСРаботаВРоссии.ОрганизацияИспользуетПРР(Организация);
	
КонецФункции

#КонецОбласти
