#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Запоминаем переданные параметры.
	Заголовок      = Параметры.Заголовок;
	Организация    = Параметры.Организация;
	ДатаНачала     = Параметры.ДатаНачала;
	ДатаОкончания  = Параметры.ДатаОкончания;
	ИсточникОтчета = Параметры.ИсточникОтчета;
	РегистрацияВНалоговомОргане       = Параметры.РегистрацияВНалоговомОргане;
	ТребуетсяОтметкаОПриемеОтчетности = Параметры.ТребуетсяОтметкаОПриемеОтчетности;

	ЭтоВыборБухОтчетности = (ИсточникОтчета = "БухгалтерскаяОтчетность");

	ОтчетПредставляетсяВКонтролирующиеОрганы = ЗаполнениеФинОтчетностиВБанки.ОтчетПредставляетсяВКонтролирующиеОрганы(
		ИсточникОтчета, ДатаОкончания);

	ЗаполнитьРегламентированныеОтчеты();
	
	// Кнопки создания показываем только, если требуется бух.отчетность.
	Элементы.ФормаГруппаСоздатьБухОтчетность.Видимость = ЭтоВыборБухОтчетности;
	
	Если ОтчетПредставляетсяВКонтролирующиеОрганы И ТребуетсяОтметкаОПриемеОтчетности Тогда
		Заголовок = СтрШаблон(НСтр("ru = '%1 (сдано с помощью 1С-Отчетности)';
									|en = '%1 (submitted using 1C:Reporting)'"), Заголовок);
	КонецЕсли;
	
	// Спозиционируемся на отчете в списке.
	ВыделитьОтчетВСписке(Параметры.ВыделенныйОтчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_РегламентированныйОтчет" ИЛИ ИмяСобытия = "Позиционирование в списке отчетов" Тогда
		// Обновим список после записи регламентированного отчета.
		Если ТипЗнч(Параметр) <> Тип("Структура")
			ИЛИ НЕ Параметр.Свойство("Ссылка")
			ИЛИ НЕ Параметр.Свойство("Организация") Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметр.Организация <> Организация Тогда
			// Регл.отчет не относится к текущей организации.
			Возврат;
		КонецЕсли;

		ОбработкаОповещенияЗаписьРегламентированногоОтчета(Параметр);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура РегламентированныеОтчетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ОбработатьВыборОтчета();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьОтчет(Команда)
	
	ОбработатьВыборОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет(Команда)
	
	ТекущиеДанные = Элементы.РегламентированныеОтчеты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.РегламентированныйОтчет);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьБухОтчетность(Команда)
	ОткрытьФормуНовогоБухОтчетность("РегламентированныйОтчетБухОтчетность");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБухОтчетностьМП(Команда)
	ОткрытьФормуНовогоБухОтчетность("РегламентированныйОтчетБухОтчетностьМП");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРегламентированныеОтчеты()

	// Запомним отчет, который был выделен до перестроения списка, чтобы потом к нему вернуться.
	Если Элементы.РегламентированныеОтчеты.ТекущаяСтрока <> Неопределено Тогда
		ДанныеСтроки = РегламентированныеОтчеты.НайтиПоИдентификатору(Элементы.РегламентированныеОтчеты.ТекущаяСтрока);
		Если ДанныеСтроки <> Неопределено Тогда
			ВыделенныйОтчет = ДанныеСтроки.РегламентированныйОтчет;
		КонецЕсли;
	КонецЕсли;

	РегламентированныеОтчеты.Очистить();

	ЭтоВыборБухОтчетности = (ИсточникОтчета = "БухгалтерскаяОтчетность");
	
	МетаданныеДокумента = Метаданные.Документы.РегламентированныйОтчет;
	
	// Выполняем поиск среди сохранных в базе регламентированных отчетов.
	ПараметрыРеглОтчетов = Новый ТаблицаЗначений;
	ПараметрыРеглОтчетов.Колонки.Добавить("ИсточникОтчета", МетаданныеДокумента.Реквизиты.ИсточникОтчета.Тип);
	ПараметрыРеглОтчетов.Колонки.Добавить("Организация",    Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПараметрыРеглОтчетов.Колонки.Добавить("ДатаОкончания",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ПараметрыРеглОтчетов.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ЗаполнениеФинОтчетностиВБанки.ПодготовитьПараметрыПоискаРеглОтчетов(ПараметрыРеглОтчетов);
	
	Если ЭтоВыборБухОтчетности Тогда
		// Выполняем поиск среди всех возможных источников бух.отчетности.
		ИсточникиБухОтчетности = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ИсточникиБухгалтерскойОтчетности();
		
		Для каждого ИсточникБухОтчетности Из ИсточникиБухОтчетности Цикл
			ПараметрРеглОтчета = ПараметрыРеглОтчетов.Добавить();
			ПараметрРеглОтчета.ИсточникОтчета = ИсточникБухОтчетности;
			ПараметрРеглОтчета.Организация    = Организация;
			ПараметрРеглОтчета.ДатаОкончания  = ДатаОкончания;
		КонецЦикла;
		
	Иначе
	
		ПараметрРеглОтчета = ПараметрыРеглОтчетов.Добавить();
		ПараметрРеглОтчета.ИсточникОтчета = ИсточникОтчета;
		ПараметрРеглОтчета.Организация    = Организация;
		ПараметрРеглОтчета.ДатаОкончания  = ДатаОкончания;
		ПараметрРеглОтчета.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
	
	КонецЕсли;
	
	// Выберем все подходящие отчеты.
	ИнтерфейсыВзаимодействияБРО.ЗаполнитьСсылкиНаРеглОтчеты(ПараметрыРеглОтчетов);
	
	// Переносим найденные отчеты в таблицу на форме, попутно проверяя статус сдачи.
	Для каждого ПараметрыРеглОтчета Из ПараметрыРеглОтчетов Цикл
	
		Для каждого РеглОтчет Из ПараметрыРеглОтчета.Документы Цикл
			
			// Проверяем статус сдачи в ФНС через 1С-Отчетность.
			Если РеглОтчет.СостояниеСдачиОтчетности <> Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота Тогда

				// Отчеты без отметки о приеме не учитываем.
				Если ОтчетПредставляетсяВКонтролирующиеОрганы И ТребуетсяОтметкаОПриемеОтчетности Тогда
					Продолжить;
				КонецЕсли;

			КонецЕсли;
			
			НоваяСтрока = РегламентированныеОтчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеглОтчет);
			НоваяСтрока.РегламентированныйОтчет = РеглОтчет.Ссылка;
			НоваяСтрока.ИсточникОтчета          = ИсточникОтчета;
		
		КонецЦикла;
	
	КонецЦикла;
		
	// Спозиционируемся на отчете, который был выделен до обновления списка.
	ВыделитьОтчетВСписке(ВыделенныйОтчет);

КонецПроцедуры

&НаСервере
Процедура ВыделитьОтчетВСписке(ВыделенныйОтчет)

	Если НЕ ЗначениеЗаполнено(ВыделенныйОтчет) Тогда
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура();
	Отбор.Вставить("РегламентированныйОтчет", ВыделенныйОтчет);
	НайденныеСтроки = РегламентированныеОтчеты.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.РегламентированныеОтчеты.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОтчета()

	ТекущиеДанные = Элементы.РегламентированныеОтчеты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыбора = Новый Структура();
	РезультатВыбора.Вставить("РегламентированныйОтчет", ТекущиеДанные.РегламентированныйОтчет);
	РезультатВыбора.Вставить("ИсточникОтчета",          ТекущиеДанные.ИсточникОтчета);
	РезультатВыбора.Вставить("ДатаНачала",              ТекущиеДанные.ДатаНачала);
	РезультатВыбора.Вставить("ДатаОкончания",           ТекущиеДанные.ДатаОкончания);
	РезультатВыбора.Вставить("НаименованиеОтчета",      ТекущиеДанные.НаименованиеОтчета);
	РезультатВыбора.Вставить("ФинансовыйПериод",        ТекущиеДанные.ФинансовыйПериод);
	РезультатВыбора.Вставить("ВариантОтчета",           ТекущиеДанные.ВариантОтчета);
	РезультатВыбора.Вставить("Комментарий",             ТекущиеДанные.Комментарий);
	РезультатВыбора.Вставить("РегистрацияВНалоговомОргане", ТекущиеДанные.РегистрацияВНалоговомОргане);
	РезультатВыбора.Вставить("ПредставлениеКонтролирующегоОргана", ТекущиеДанные.ПредставлениеКонтролирующегоОргана);
	РезультатВыбора.Вставить("Статус",                  ТекущиеДанные.Статус);
	
	Закрыть(РезультатВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНовогоБухОтчетность(ИсточникБухОтчетности)

	// Открываем форму нового отчета.
	ПараметрыФормы = ПараметрыОткрытияФормыНовогоБухОтчетность(ИсточникБухОтчетности);
	
	Если ПараметрыФормы = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось определить подходящую редакцию формы, попробуйте создать отчет в меню ""Отчеты - 1С-Отчетность - Регламентированные отчеты""';
										|en = 'Cannot determine the appropriate form version. Try to create a report in ""Reports - 1C:Reporting - Local accounting reports"" menu'"));
		Возврат;
	КонецЕсли;

	ИмяФормыОтчета = "Отчет." + ИсточникБухОтчетности + ".Форма." + ПараметрыФормы.мВыбраннаяФорма;

	ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы);

КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыНовогоБухОтчетность(Знач ИсточникБухОтчетности)

	Результат = ИнтерфейсыВзаимодействияБРО.ПараметрыОткрытияФормыРеглОтчета(
		ИсточникБухОтчетности,
		Организация,
		Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка(),
		НачалоДня(ДатаНачала),
		КонецДня(ДатаОкончания),
		Перечисления.Периодичность.Год);

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияЗаписьРегламентированногоОтчета(Параметр)

	СвойстваОтчета = ИнтерфейсыВзаимодействияБРО.СвойстваОтчета(Параметр.Ссылка);
	
	Если ИсточникОтчета = "БухгалтерскаяОтчетность" Тогда
		ИсточникиБухОтчетности = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ИсточникиБухгалтерскойОтчетности();
		Если ИсточникиБухОтчетности.Найти(СвойстваОтчета.ИсточникОтчета) = Неопределено Тогда
			Возврат;
		КонецЕсли;

	ИначеЕсли СвойстваОтчета.ИсточникОтчета <> ИсточникОтчета Тогда
		// Отчет не совпадает с текущим отбором, игнорируем его изменение.
		Возврат;
	КонецЕсли;
	
	Если СвойстваОтчета.ДатаОкончанияОП <> ДатаОкончания Тогда
		// Отчет за другой период.
		Возврат;
	КонецЕсли;
	
	// Обновляем список отчетов и позиционируемся на отчет из оповещения.
	ЗаполнитьРегламентированныеОтчеты();
	
	ВыделитьОтчетВСписке(Параметр.Ссылка);

КонецПроцедуры

#КонецОбласти