#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РезультатПолученияПротокола = Параметры.РезультатПолученияПротокола;
	
	Если НЕ РезультатПолученияПротокола.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПоказыватьГиперссылкуЭтаповОтправки") Тогда
		Элементы.ГиперссылкаЭтапыОтправки.Видимость = Параметры.ПоказыватьГиперссылкуЭтаповОтправки;
	КонецЕсли;
	
	Наименование = УниверсальныйОбменСБанками.ПредставлениеПредмета(
		Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность,
		РезультатПолученияПротокола.Предмет);
		
	Элементы.ЗаголовокНаименование.Видимость = СтрНайти(ВРег(Наименование), ВРег(НСтр("ru = 'Отчет';
																						|en = 'Report'"))) = 0;
		
	Протокол = РезультатПолученияПротокола.ТекстПротокола;
	Предмет  = РезультатПолученияПротокола.Предмет;
	
	РазобратьПротокол();
	ЗаполнитьДанныеВШапкеФормы();
	УправлениеЭУ(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ РезультатПолученияПротокола.Выполнено Тогда
		ПоказатьПредупреждение(,
			РезультатПолученияПротокола.ОписаниеОшибки,,
			НСтр("ru = 'Ошибка получения протокола';
				|en = 'Protocol receiving error'"));
		Закрыть(Ложь);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ГиперссылкаСохранитьПротоколНажатие(Элемент)
	
	ДанныеПротокола = РезультатПолученияПротокола.ДанныеПротокола;
	ДанныеПодписи = РезультатПолученияПротокола.ДанныеПодписи;
	
	ФинОтчетностьВБанкиКлиент.СохранитьПротокол("ОтрицательныйПротокол",
		Банк,
		Организация,
		ДанныеПротокола,
		ДанныеПодписи);

КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаЭтапыОтправкиНажатие(Элемент)
	
	УниверсальныйОбменСБанкамиКлиент.
		ПоказатьФормуСостоянияДокументооборота(РезультатПолученияПротокола.Документооборот);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеЭУ(Отказ = Ложь)
	
	Элементы.Наименование.Видимость = НЕ ПустаяСтрока(Наименование);
	 
	Элементы.Результат.Заголовок = НСтр("ru = 'Отчетность не принята';
										|en = 'Reporting is not accepted'");
	Элементы.Результат.ЦветТекста = ЦветаСтиля.ЦветОшибкиВПротоколеБРО;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВШапкеФормы()

	Элементы.Наименование.Заголовок	= Наименование;
	
КонецПроцедуры

&НаСервере
Процедура РазобратьПротокол()
	
	Если СтрНайти(Протокол, "ИзвещениеОбОтказеПриемаОтчетности") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Протокол);
	ДанныеПротокола = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	ИдентификаторБанка = ДанныеПротокола.Банк.Идентификатор;
	Банк = УниверсальныйОбменСБанками.НайтиБанкПоИдентификатору(ИдентификаторБанка);
	ИННОрганизации = ДанныеПротокола.Организация.ИНН;
	Организация = УниверсальныйОбменСБанками.НайтиОрганизациюПоИНН(ИННОрганизации);
	
	ДатаОтказа = XMLЗначение(Тип("Дата"), ДанныеПротокола.ДатаОтказа);
	
	// Разбираем причины отказа.
	ПричиныОтказа.Очистить();
	КоллекцияПричинОтказа = УниверсальныйОбменСБанками.
		ЗначениеВКоллекцию(ДанныеПротокола.ПричиныОтказа.ПричинаОтказа);
	Для каждого Причина Из КоллекцияПричинОтказа Цикл
		
		Строка = ПричиныОтказа.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Причина);
		
	КонецЦикла;
	
	Если КоллекцияПричинОтказа.Количество() > 0 Тогда
		Шаблон = НСтр("ru = 'Причины отказа (всего ошибок %1)';
						|en = 'Reasons for refusal (total errors %1)'");
		Элементы.ПричиныОтказа.Заголовок = СтрШаблон(Шаблон, КоллекцияПричинОтказа.Количество());
	Иначе
		Элементы.ПричиныОтказа.Заголовок = НСтр("ru = 'Причины отказа';
												|en = 'Reasons for refusal'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти