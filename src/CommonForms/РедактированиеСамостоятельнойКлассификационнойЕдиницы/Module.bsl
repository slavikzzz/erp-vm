
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПрочитатьСамостоятельнуюКлассификационнуюЕдиницу();
	ИнициализироватьФорму();
	
	Если Параметры.Свойство("ИмяРеквизита") И Не ПустаяСтрока(Параметры.ИмяРеквизита) Тогда
		
		Если Не ПустаяСтрока(Параметры.ИмяРеквизита) Тогда
			
			ТекущийЭлементФормы = Элементы.Найти(Параметры.ИмяРеквизита);
			Если ТекущийЭлементФормы <> Неопределено Тогда
				ТекущийЭлемент = ТекущийЭлементФормы;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(
		ЭтотОбъект, "СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев", СамостоятельнаяКлассификационнаяЕдиница.Ссылка);
	УчетСтраховыхВзносовКлиентСервер.ОбновитьПолеСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевПериод(
		ЭтотОбъект, СамостоятельнаяКлассификационнаяЕдиница.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("СохранитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОтредактированаИстория"
		И Параметр.ИмяРегистра = "ИсторияСамостоятельныхКлассификационныхЕдиниц"
		И Источник = СтруктурнаяЕдиница Тогда
		
		Если ЗначениеЗаполнено(СамостоятельнаяКлассификационнаяЕдиница.Ссылка)
			ИЛИ Параметр.МассивЗаписей.Количество() > 0 Тогда
			
			РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(ЭтотОбъект, СтруктурнаяЕдиница, ИмяСобытия, 
				Параметр, Источник);
			ПоместитьДанныеСКЕВФорму(ИсторияСамостоятельныхКлассификационныхЕдиниц.СКЕ);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОтредактированаИстория"
		И Параметр.ИмяРегистра = "СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев" Тогда
		
			РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(ЭтотОбъект, ИсторияСамостоятельныхКлассификационныхЕдиниц.СКЕ, ИмяСобытия, 
				Параметр, Источник);
			УчетСтраховыхВзносовКлиентСервер.ОбновитьПолеСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевПериод(ЭтотОбъект, 
				ИсторияСамостоятельныхКлассификационныхЕдиниц.СКЕ);
				
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Попытка
		СамостоятельнаяКлассификационнаяЕдиницаОбъект = РеквизитФормыВЗначение("СамостоятельнаяКлассификационнаяЕдиница");
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки(), , , , Отказ);
	КонецПопытки;
	
	Если НЕ Отказ Тогда
		РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(ЭтотОбъект, 
			"ИсторияСамостоятельныхКлассификационныхЕдиниц", СтруктурнаяЕдиница, Отказ);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ОбновитьИсторияСамостоятельныхКлассификационныхЕдиницПериод(ЭтотОбъект, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСамостоятельныхКлассификационныхЕдиницПериодПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(
		ЭтотОбъект,
		"ИсторияСамостоятельныхКлассификационныхЕдиницПериод",
		"ИсторияСамостоятельныхКлассификационныхЕдиницПериодСтрокой",
		Модифицированность);
	
	ИсторияСамостоятельныхКлассификационныхЕдиниц.Период = ИсторияСамостоятельныхКлассификационныхЕдиницПериод;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСамостоятельныхКлассификационныхЕдиницПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения(
	"ИсторияСамостоятельныхКлассификационныхЕдиницПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(
		ЭтотОбъект,
		ЭтотОбъект,
		"ИсторияСамостоятельныхКлассификационныхЕдиницПериод",
		"ИсторияСамостоятельныхКлассификационныхЕдиницПериодСтрокой", ,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСамостоятельныхКлассификационныхЕдиницПериодНачалоВыбораЗавершение(ЗначениеВыбрано, 
	ДополнительныеПараметры) Экспорт 
	
	ИсторияСамостоятельныхКлассификационныхЕдиниц.Период = ИсторияСамостоятельныхКлассификационныхЕдиницПериод;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСамостоятельныхКлассификационныхЕдиницПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(
		ЭтотОбъект,
		"ИсторияСамостоятельныхКлассификационныхЕдиницПериод",
		"ИсторияСамостоятельныхКлассификационныхЕдиницПериодСтрокой",
		Направление,
		Модифицированность);
	
	ИсторияСамостоятельныхКлассификационныхЕдиниц.Период = ИсторияСамостоятельныхКлассификационныхЕдиницПериод;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСамостоятельныхКлассификационныхЕдиницПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, 
	ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСамостоятельныхКлассификационныхЕдиницПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, 
	ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьЗавершение", ЭтотОбъект);
	ЗаписатьСамостоятельнуюКлассификационнуюЕдиницу(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьЗавершение(Отказ, ДополнительныеПараметры) Экспорт 
	
	Если Не Отказ Тогда
		Оповестить("Запись_Организации", , СамостоятельнаяКлассификационнаяЕдиница.Владелец);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСамостоятельныхКлассификационныхЕдиницИстория(Команда)
	
	Отказ = Ложь;
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?';
							|en = 'The data has changed. Do you want to save the changes?'");
		
		Оповещение = Новый ОписаниеОповещения("ИсторияСамостоятельныхКлассификационныхЕдиницИсторияПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		
	Иначе 
		
		ИсторияСамостоятельныхКлассификационныхЕдиницИсторияПродолжение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСамостоятельныхКлассификационныхЕдиницИсторияПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ИсторияСамостоятельныхКлассификационныхЕдиницИсторияЗавершение", 
		ЭтотОбъект);
		ЗаписатьСамостоятельнуюКлассификационнуюЕдиницу(Оповещение);
	Иначе 
		ИсторияСамостоятельныхКлассификационныхЕдиницИсторияЗавершение(Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСамостоятельныхКлассификационныхЕдиницИсторияЗавершение(Отказ, ДополнительныеПараметры) Экспорт 
	
	Если Не Отказ Тогда 
		РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию("ИсторияСамостоятельныхКлассификационныхЕдиниц", 
			СтруктурнаяЕдиница, ЭтотОбъект, ТолькоПросмотр);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьФорму()
	
	ЭтоОбособленноеПодразделение = Ложь;
	
	Если ЗначениеЗаполнено(СамостоятельнаяКлассификационнаяЕдиница.Владелец) Тогда 
		
		Элементы.Владелец.ТолькоПросмотр = Истина;
		Элементы.Владелец.КнопкаОткрытия = Ложь;
		Элементы.Владелец.КнопкаВыбора = Ложь;
		Элементы.Владелец.АвтоОтметкаНезаполненного = Ложь;
		
		Если СамостоятельнаяКлассификационнаяЕдиница.Владелец.Метаданные().Реквизиты.Найти(
			"ЮридическоеФизическоеЛицо") <> Неопределено
			И СамостоятельнаяКлассификационнаяЕдиница.Владелец.Метаданные().Реквизиты.Найти(
			"ОбособленноеПодразделение") <> Неопределено Тогда 
			
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СамостоятельнаяКлассификационнаяЕдиница.Владелец, "ЮридическоеФизическоеЛицо, ОбособленноеПодразделение");
			
			ЭтоОбособленноеПодразделение = РеквизитыОрганизации.ЮридическоеФизическоеЛицо 
			= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
			И РеквизитыОрганизации.ОбособленноеПодразделение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоОбособленноеПодразделение Тогда
		
		ГоловнаяОрганизация = РегламентированнаяОтчетность.ГоловнаяОрганизация(
		СамостоятельнаяКлассификационнаяЕдиница.Владелец);
		
	Иначе
		
		Элементы.Владелец.Заголовок	= НСтр("ru = 'Организация';
												|en = 'Company'");
		Элементы.ГоловнаяОрганизация.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСамостоятельнуюКлассификационнуюЕдиницу()
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Тогда
		ОрганизацияВладельцаСамостоятельнойКлассификационнойЕдиницы = СтруктурнаяЕдиница;
	Иначе
		ОрганизацияВладельцаСамостоятельнойКлассификационнойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		СтруктурнаяЕдиница, "Владелец");
	КонецЕсли;
	
	ВладелецСамостоятельнойКлассификационнойЕдиницы = ЗарплатаКадры.ГоловнаяОрганизация(
	ОрганизацияВладельцаСамостоятельнойКлассификационнойЕдиницы);
	
	Запрос.УстановитьПараметр("Владелец", ВладелецСамостоятельнойКлассификационнойЕдиницы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СамостоятельныеКлассификационныеЕдиницы.Ссылка КАК СамостоятельнаяКлассификационнаяЕдиница,
	|	СамостоятельныеКлассификационныеЕдиницы.Наименование
	|ИЗ
	|	Справочник.СамостоятельныеКлассификационныеЕдиницы КАК СамостоятельныеКлассификационныеЕдиницы
	|ГДЕ
	|	СамостоятельныеКлассификационныеЕдиницы.Владелец = &Владелец";
	
	ВсеСамостоятельныеКлассификационныеЕдиницы.Загрузить(Запрос.Выполнить().Выгрузить());
	
	
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтотОбъект, 
		"ИсторияСамостоятельныхКлассификационныхЕдиниц", СтруктурнаяЕдиница);
	Если НЕ ЗначениеЗаполнено(ИсторияСамостоятельныхКлассификационныхЕдиниц.СКЕ) Тогда
		ИсторияСамостоятельныхКлассификационныхЕдиниц.СКЕ = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "СамостоятельнаяКлассификационнаяЕдиница");
		ИсторияСамостоятельныхКлассификационныхЕдиницНоваяЗапись = Истина;
	КонецЕсли;
	
	ПоместитьДанныеСКЕВФорму(ИсторияСамостоятельныхКлассификационныхЕдиниц.СКЕ);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьДанныеСКЕВФорму(СамостоятельнаяКлассификационнаяЕдиницаСсылка, ОбновитьДанныеПрежней = Истина)
	
	Если СамостоятельнаяКлассификационнаяЕдиницаСсылка.Пустая() Тогда
		СамостоятельнаяКлассификационнаяЕдиницаОбъект = Неопределено;
	Иначе
		СамостоятельнаяКлассификационнаяЕдиницаОбъект = СамостоятельнаяКлассификационнаяЕдиницаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если СамостоятельнаяКлассификационнаяЕдиницаОбъект = Неопределено Тогда
		СамостоятельнаяКлассификационнаяЕдиницаОбъект = Справочники.СамостоятельныеКлассификационныеЕдиницы.СоздатьЭлемент();
		СамостоятельнаяКлассификационнаяЕдиницаОбъект.Владелец = ВладелецСамостоятельнойКлассификационнойЕдиницы;
	КонецЕсли;
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	ЗначениеВРеквизитФормы(СамостоятельнаяКлассификационнаяЕдиницаОбъект, "СамостоятельнаяКлассификационнаяЕдиница");
	Если ОбновитьДанныеПрежней Тогда
		ЗначениеВРеквизитФормы(СамостоятельнаяКлассификационнаяЕдиницаОбъект, 
		"СамостоятельнаяКлассификационнаяЕдиницаПрежняя");
	КонецЕсли;
	
	ОбновитьИсторияСамостоятельныхКлассификационныхЕдиницПериод(ЭтотОбъект, ТекущаяДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСамостоятельнуюКлассификационнуюЕдиницу(ОповещениеЗакрытия = Неопределено)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		
		Отказ = Истина;
		Если ОповещениеЗакрытия <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗакрытия, Отказ);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗакрытия", ОповещениеЗакрытия);
	
	Если Не ЗначениеЗаполнено(ИсторияСамостоятельныхКлассификационныхЕдиницПрежняя.СКЕ) Тогда
		
		ЗаписатьСамостоятельнуюКлассификационнуюЕдиницуЗавершение(Неопределено, ДополнительныеПараметры);
		Возврат;
		
	КонецЕсли; 
	
	ТекстКнопкиДа = НСтр("ru = 'Изменились данные о самостоятельной классификационной единице';
						|en = 'The information on the independent classification unit has changed'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При редактировании изменили данные о самостоятельной классификационной единице. 
		|Если была исправлена прежняя запись (она была ошибочной), нажмите ""Исправлена ошибка"".
		|Если изменились данные о самостоятельной классификационной единице с %1, нажмите ""%2""';
		|en = 'When editing, information on the independent classification unit was changed.
		|If the previous record is corrected (it was incorrect), click ""Error is corrected"".
		|If the information on the independent classification unit changed from %1, click ""%2""'"), 
		Формат(ИсторияСамостоятельныхКлассификационныхЕдиниц.Период, НСтр("ru = 'ДФ=ММММ гггг ""г""';
																			|en = 'DF=MMMM yyyy'")),
		ТекстКнопкиДа);
	
	МассивИменПроверяемыхРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		КлючевыеРеквизитыСамостоятельнойКлассификационнойЕдиницы());
	
	ОбъектИзменен = Ложь;
	Для каждого ИмяПроверяемогоРеквизита Из МассивИменПроверяемыхРеквизитов Цикл
		Если СамостоятельнаяКлассификационнаяЕдиница[ИмяПроверяемогоРеквизита] 
			<> СамостоятельнаяКлассификационнаяЕдиницаПрежняя[ИмяПроверяемогоРеквизита] Тогда
			ОбъектИзменен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбъектИзменен И ИсторияСамостоятельныхКлассификационныхЕдиниц.Период 
		<> ИсторияСамостоятельныхКлассификационныхЕдиницПрежняя.Период Тогда
		
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить(КодВозвратаДиалога.Нет,  	НСтр("ru = 'Исправлена ошибка';
															|en = 'Error is corrected'"));
		Кнопки.Добавить(КодВозвратаДиалога.Да, 		ТекстКнопкиДа);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, 	НСтр("ru = 'Отмена';
															|en = 'Cancel'"));
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьСамостоятельнуюКлассификационнуюЕдиницуЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Отмена);
		
	Иначе
		
		ЗаписатьСамостоятельнуюКлассификационнуюЕдиницуЗавершение(Неопределено, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСамостоятельнуюКлассификационнуюЕдиницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Отказ = Ложь;
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Отказ = Истина;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		ИсторияСамостоятельныхКлассификационныхЕдиницНоваяЗапись = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаписатьСамостоятельнуюКлассификационнуюЕдиницуНаСервере(Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ПараметрОповещения = Новый Структура("Ссылка, Владелец", СамостоятельнаяКлассификационнаяЕдиница.Ссылка, 
		СамостоятельнаяКлассификационнаяЕдиница.Владелец);
		Оповестить("ИзмененаСамостоятельнаяКлассификационнаяЕдиница", ПараметрОповещения, ВладелецФормы);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеЗакрытия <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗакрытия, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСамостоятельнуюКлассификационнуюЕдиницуНаСервере(Отказ)
	
	СуществующаяЗапись = Неопределено;
	Если ИсторияСамостоятельныхКлассификационныхЕдиницНоваяЗапись 
		И ЗначениеЗаполнено(СамостоятельнаяКлассификационнаяЕдиницаПрежняя.Наименование) Тогда
		
		СуществующаяЗапись = ПолучитьСуществующуюСКЕ(СамостоятельнаяКлассификационнаяЕдиница.Владелец, 
			СамостоятельнаяКлассификационнаяЕдиница.Наименование, СамостоятельнаяКлассификационнаяЕдиница.КодОКВЭД2, 
			СамостоятельнаяКлассификационнаяЕдиница.КлассПрофессиональногоРиска);
		
		Если СуществующаяЗапись = Неопределено Тогда
			СКЕОбъект = Справочники.СамостоятельныеКлассификационныеЕдиницы.СоздатьЭлемент();
		Иначе
			СКЕОбъект = СуществующаяЗапись.ПолучитьОбъект();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СКЕОбъект, РеквизитФормыВЗначение("СамостоятельнаяКлассификационнаяЕдиница"), 
			КлючевыеРеквизитыСамостоятельнойКлассификационнойЕдиницы());
			СКЕОбъект.Владелец = СамостоятельнаяКлассификационнаяЕдиница.Владелец;
		
	Иначе
		СКЕОбъект = РеквизитФормыВЗначение("СамостоятельнаяКлассификационнаяЕдиница");
	КонецЕсли;
	
	Попытка
		
		СКЕОбъект.Записать();
		
		Если ИсторияСамостоятельныхКлассификационныхЕдиницНоваяЗапись И СуществующаяЗапись = Неопределено Тогда
			
			ЗаписьВсехСКЕ = ВсеСамостоятельныеКлассификационныеЕдиницы.Добавить();
			ЗаписьВсехСКЕ.Наименование = СамостоятельнаяКлассификационнаяЕдиница.Наименование;
			ЗаписьВсехСКЕ.КодОКВЭД2 = СамостоятельнаяКлассификационнаяЕдиница.КодОКВЭД2;
			ЗаписьВсехСКЕ.НаименованиеОКВЭД2 = СамостоятельнаяКлассификационнаяЕдиница.НаименованиеОКВЭД2;
			ЗаписьВсехСКЕ.КлассПрофессиональногоРиска = СамостоятельнаяКлассификационнаяЕдиница.КлассПрофессиональногоРиска;
			ЗаписьВсехСКЕ.СамостоятельнаяКлассификационнаяЕдиница = СамостоятельнаяКлассификационнаяЕдиница.Ссылка;
			
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	ЗначениеВРеквизитФормы(СКЕОбъект, "СамостоятельнаяКлассификационнаяЕдиница");
	
	ДополнительныеСвойства = Неопределено;
	Если НЕ ЗначениеЗаполнено(ИсторияСамостоятельныхКлассификационныхЕдиницПрежняя.СКЕ) Тогда
		ДополнительныеСвойства = Новый Структура("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
	КонецЕсли; 
	
	ИсторияСамостоятельныхКлассификационныхЕдиниц.СКЕ = СКЕОбъект.Ссылка;
	
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтотОбъект, 
	"ИсторияСамостоятельныхКлассификационныхЕдиниц", СтруктурнаяЕдиница, , ДополнительныеСвойства);
	
	ПодчиненныеСтруктурныеЕдиницы = Справочники.ПодразделенияОрганизаций.ПодчиненныеСтруктурныеЕдиницы(СтруктурнаяЕдиница);
	РегистрыСведений.ИсторияСамостоятельныхКлассификационныхЕдиниц.ОбновитьПодчиненныеСтруктурныеЕдиницы(
		ПодчиненныеСтруктурныеЕдиницы);
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтотОбъект, 
		"СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев", СКЕОбъект.Ссылка);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Модифицированность = Ложь;
	ПрочитатьСамостоятельнуюКлассификационнуюЕдиницу();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСуществующуюСКЕ(Владелец, Наименование, КодОКВЭД2, КлассПрофессиональногоРиска)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СамостоятельныеКлассификационныеЕдиницы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СамостоятельныеКлассификационныеЕдиницы КАК СамостоятельныеКлассификационныеЕдиницы
	|ГДЕ
	|	СамостоятельныеКлассификационныеЕдиницы.Владелец = &Владелец
	|	И СамостоятельныеКлассификационныеЕдиницы.КодОКВЭД2 = &КодОКВЭД2
	|	И СамостоятельныеКлассификационныеЕдиницы.КлассПрофессиональногоРиска = &КлассПрофессиональногоРиска
	|	И НЕ СамостоятельныеКлассификационныеЕдиницы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("КодОКВЭД2", КодОКВЭД2);
	Запрос.УстановитьПараметр("КлассПрофессиональногоРиска", КлассПрофессиональногоРиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыСамостоятельнойКлассификационнойЕдиницы()
	
	Возврат "КодОКВЭД2,КлассПрофессиональногоРиска,Наименование";
	
КонецФункции

// АПК:78-выкл: экспорт нужен для вызова из РедактированиеПериодическихСведений

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтотОбъект, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

// АПК:78-вкл

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИсторияСамостоятельныхКлассификационныхЕдиницПериод(Форма, ДатаСеанса)
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, 
	"ИсторияСамостоятельныхКлассификационныхЕдиниц", Форма.СтруктурнаяЕдиница);
	
	Если (Форма.ИсторияСамостоятельныхКлассификационныхЕдиницПрежняя.Период 
		= НачалоМесяца(ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведенийСПериодомМесяц())
		ИЛИ Форма.ИсторияСамостоятельныхКлассификационныхЕдиницПрежняя.Период = '00010101') 
		И НЕ Форма.Модифицированность Тогда
		
		Форма.Элементы.ИсторияСамостоятельныхКлассификационныхЕдиницПериодСтрокой.АвтоОтметкаНезаполненного = Ложь;
		Форма.Элементы.ИсторияСамостоятельныхКлассификационныхЕдиницПериодСтрокой.ОтметкаНезаполненного = Ложь;
		
	Иначе
		Если Форма.Модифицированность
			И (Форма.ИсторияСамостоятельныхКлассификационныхЕдиницПрежняя.Период = '00010101'
			Или Форма.ИсторияСамостоятельныхКлассификационныхЕдиниц.Период 
			= НачалоМесяца(ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведенийСПериодомМесяц())) Тогда
			Форма.ИсторияСамостоятельныхКлассификационныхЕдиниц.Период = НачалоМесяца(ДатаСеанса);
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ИсторияСамостоятельныхКлассификационныхЕдиниц.Период 
		= НачалоМесяца(ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведенийСПериодомМесяц()) Тогда
		Форма.ИсторияСамостоятельныхКлассификационныхЕдиницПериод = '00010101';
	Иначе
		Форма.ИсторияСамостоятельныхКлассификационныхЕдиницПериод 
		= Форма.ИсторияСамостоятельныхКлассификационныхЕдиниц.Период;
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Форма, "ИсторияСамостоятельныхКлассификационныхЕдиницПериод", 
	"ИсторияСамостоятельныхКлассификационныхЕдиницПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Результат, ДополнительныеПараметры) Экспорт 
	
	Оповещение = Новый ОписаниеОповещения("СохранитьИЗакрытьЗавершение", ЭтотОбъект);
	ЗаписатьСамостоятельнуюКлассификационнуюЕдиницу(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрытьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Не Отказ Тогда 
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевПериодСтрокойПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(
		ЭтотОбъект, "СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.Период", 
		"СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевПериодСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(
		ЭтотОбъект,
		ЭтотОбъект,
		"СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.Период",
		"СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевПериодСтрокой",
		,
		,
		НачалоГода(ОбщегоНазначенияКлиент.ДатаСеанса()));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияИстории(ИмяРегистра, ВедущийОбъект, Форма, ЗапретРедактирования = Ложь)
	
	ТолькоПросмотрИстории = Форма.ТолькоПросмотр ИЛИ ЗапретРедактирования;
	Если Не ТолькоПросмотрИстории Тогда
		Попытка
			Форма.ЗаблокироватьДанныеФормыДляРедактирования();
			ТолькоПросмотрИстории = Ложь;
		Исключение
			ТолькоПросмотрИстории = Истина;
		КонецПопытки
	КонецЕсли;
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию(ИмяРегистра, ВедущийОбъект, Форма, ТолькоПросмотрИстории);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(
		ЭтотОбъект, "СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.Период", 
		"СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевПериодСтрокой",
		Направление, Модифицированность, НачалоГода(ОбщегоНазначенияКлиент.ДатаСеанса()));
КонецПроцедуры

&НаКлиенте
Процедура СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, 
	ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, 
	ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевИстория(Команда)
	
	Отказ = Ложь;
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?';
							|en = 'The data has changed. Do you want to save the changes?'");
		
		Оповещение = Новый ОписаниеОповещения("СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевИсторияПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		
	Иначе 
		
		СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевИсторияПродолжение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевИсторияПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевИсторияЗавершение", ЭтотОбъект);
		ЗаписатьСамостоятельнуюКлассификационнуюЕдиницу(Оповещение);
	Иначе 
		СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевИсторияЗавершение(Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевИсторияЗавершение(Отказ, ДополнительныеПараметры) Экспорт 
	
	Если Не Отказ Тогда 
		ОткрытьФормуРедактированияИстории("СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев", 
			СамостоятельнаяКлассификационнаяЕдиница.Ссылка, ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2ПриИзменении(Элемент)
	
	ОбновитьИсторияСамостоятельныхКлассификационныхЕдиницПериод(ЭтотОбъект, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура КлассПрофессиональногоРискаПриИзменении(Элемент)
	
	ОбновитьИсторияСамостоятельныхКлассификационныхЕдиницПериод(ЭтотОбъект, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

#КонецОбласти