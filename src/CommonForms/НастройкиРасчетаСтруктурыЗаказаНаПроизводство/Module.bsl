
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СлужебныеНастройки = СтруктураЗаказа.СлужебныеНастройки();
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СлужебныеНастройки);
	
	УстановленыСтандартныеНастройки = ОбщегоНазначения.КоллекцииИдентичны(СлужебныеНастройки,
																			СтруктураЗаказа.СтандартныеНастройкиРасчетаСтруктурыЗаказа());
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("СохранитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ПорционнаяВыборка Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РазмерВыборки");
	КонецЕсли;
	
	Если Не ПорционнаяЗапись Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КоличествоСтрокВНабореЗаписей");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПрименить(Команда)
	
	СохранитьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоУмолчанию(Команда)
	
	УстановитьНастройкиПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства", ЭтотОбъект);
	
	Если РасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	Иначе
		РасписаниеРегламентногоЗадания = РасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства = РасписаниеЗадания;
	
	УстановитьТекстРасписанияРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РаспараллеливатьРасчетПриИзменении(Элемент)
	
	УстановленыСтандартныеНастройки = Ложь;
	
	ПорционнаяЗапись = Истина;
	КоличествоСтрокВНабореЗаписей = ?(РаспараллеливатьРасчет, 2500, 100000);
	
	НастроитьЗависимыеРеквизитыФормы(ЭтаФорма, "РаспараллеливатьРасчет");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПотоковПриИзменении(Элемент)
	
	УстановленыСтандартныеНастройки = Ложь;
	
	НастроитьЗависимыеРеквизитыФормы(ЭтаФорма, "КоличествоПотоков");
	
КонецПроцедуры

&НаКлиенте
Процедура ПорционнаяВыборкаПриИзменении(Элемент)
	
	УстановленыСтандартныеНастройки = Ложь;
	
	Если Не ПорционнаяВыборка Тогда
		РазмерВыборки = 0;
	КонецЕсли;
	
	НастроитьЗависимыеРеквизитыФормы(ЭтаФорма, "ПорционнаяВыборка");

КонецПроцедуры

&НаКлиенте
Процедура РазмерВыборкиПриИзменении(Элемент)
	
	УстановленыСтандартныеНастройки = Ложь;
	
	НастроитьЗависимыеРеквизитыФормы(ЭтаФорма, "РазмерВыборки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПорционнаяЗаписьПриИзменении(Элемент)
	
	УстановленыСтандартныеНастройки = Ложь;
	
	Если Не ПорционнаяЗапись Тогда
		КоличествоСтрокВНабореЗаписей = 0;
	КонецЕсли;
	
	НастроитьЗависимыеРеквизитыФормы(ЭтаФорма, "ПорционнаяЗапись");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоСтрокВНабореЗаписейПриИзменении(Элемент)
	
	УстановленыСтандартныеНастройки = Ложь;
	
	НастроитьЗависимыеРеквизитыФормы(ЭтаФорма, "КоличествоСтрокВНабореЗаписей");
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьПовтИспРассчитанныхДанныхПриИзменении(Элемент)
	
	УстановленыСтандартныеНастройки = Ложь;
	
	НастроитьЗависимыеРеквизитыФормы(ЭтаФорма, "РазрешитьПовтИспРассчитанныхДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьИзмененияПриИзменении(Элемент)
	
	УстановленыСтандартныеНастройки = Ложь;
	
	НастроитьЗависимыеРеквизитыФормы(ЭтаФорма, "РассчитыватьИзменения");
	
КонецПроцедуры

&НаКлиенте
Процедура МаксГлубинаРасчетаПриИзменении(Элемент)
	
	УстановленыСтандартныеНастройки = Ложь;
	
	НастроитьЗависимыеРеквизитыФормы(ЭтаФорма, "МаксГлубинаРасчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьЦиклыПослеПриИзменении(Элемент)

	УстановленыСтандартныеНастройки = Ложь;
	
	НастроитьЗависимыеРеквизитыФормы(ЭтаФорма, "ИскатьЦиклыПосле");
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПараметрыПриИзменении(Элемент)
	
	УстановленыСтандартныеНастройки = Ложь;
	
	НастроитьЗависимыеРеквизитыФормы(ЭтаФорма, "ДополнительныеПараметры");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьЭлементыФормы()

	Элементы.ГруппаРаспараллеливатьРасчет.Видимость = (РаспараллеливатьРасчет Или Не ОбщегоНазначения.РазделениеВключено());

	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СверткаСторноЗаписейВГрафикеПроизводства.Имя);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Задания.Количество() = 1 Тогда
		РасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства = Задания[0].Расписание;
	КонецЕсли;
	
	НастроитьЗависимыеРеквизитыФормы(ЭтаФорма);
	
	УстановитьТекстРасписанияРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеРеквизитыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("РаспараллеливатьРасчет") ИЛИ Инициализация Тогда
		Элементы.КоличествоПотоков.Доступность = Форма.РаспараллеливатьРасчет;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПорционнаяВыборка") ИЛИ СтруктураРеквизитов.Свойство("РаспараллеливатьРасчет") ИЛИ Инициализация Тогда
		
		Элементы.РазмерВыборки.Доступность = Форма.ПорционнаяВыборка;
		Элементы.РазмерВыборки.АвтоОтметкаНезаполненного = Форма.ПорционнаяВыборка;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПорционнаяЗапись") ИЛИ СтруктураРеквизитов.Свойство("РаспараллеливатьРасчет") ИЛИ Инициализация Тогда
		
		Элементы.КоличествоСтрокВНабореЗаписей.Доступность = Форма.ПорционнаяЗапись;
		Элементы.КоличествоСтрокВНабореЗаписей.АвтоОтметкаНезаполненного = Форма.ПорционнаяЗапись;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("РассчитыватьИзменения") ИЛИ Инициализация Тогда
		
		Элементы.НастроитьРасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства.Доступность = Форма.РассчитыватьИзменения;
		
	КонецЕсли;
	
	Элементы.ФормаКомандаПоУмолчанию.Доступность = Не Форма.УстановленыСтандартныеНастройки;

КонецПроцедуры

&НаСервере
Процедура УстановитьТекстРасписанияРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства()
	
	Если РасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства = Неопределено Тогда
		
		ТекстРасписания = НСтр("ru = '<Расписание не задано>';
								|en = '<Schedule is not specified>'");
		
	Иначе
		
		ТекстРасписания = Строка(РасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства);
		
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства.Заголовок = ТекстРасписания;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиПоУмолчанию()
	
	СлужебныеНастройки = СтруктураЗаказа.СтандартныеНастройкиРасчетаСтруктурыЗаказа();
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СлужебныеНастройки);
	
	УстановленыСтандартныеНастройки = Истина;
	
	НастроитьЗависимыеРеквизитыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиРасчетаСтруктурыЗаказа()
	
	Модифицированность = Ложь;
	
	СтруктураЗаказа.ЗаписатьНастройкиРасчетаСтруктурыЗаказа(ЭтотОбъект);
	
	СтруктураЗаказаСлужебный.УстановитьРасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства(РасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПроверитьЗаполнение() Тогда
		ЗаписатьНастройкиРасчетаСтруктурыЗаказа();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
