#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РезультатПолученияПротокола = Параметры.РезультатПолученияПротокола;
	
	Если НЕ РезультатПолученияПротокола.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗаголовокПредмета")
		И НЕ ПустаяСтрока(Параметры.ЗаголовокПредмета) Тогда
		Элементы.ЗаголовокНаименование.Заголовок = Параметры.ЗаголовокПредмета;
	КонецЕсли;
	
	Если Параметры.Свойство("ПоказыватьГиперссылкуЭтаповОтправки") Тогда
		Элементы.ГиперссылкаЭтапыОтправки.Видимость = Параметры.ПоказыватьГиперссылкуЭтаповОтправки;
	КонецЕсли;
	
	Наименование = УниверсальныйОбменСБанками.ПредставлениеПредмета(
		Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность,
		РезультатПолученияПротокола.Предмет);
		
	Элементы.ЗаголовокНаименование.Видимость = НЕ ПустаяСтрока(Параметры.ЗаголовокПредмета);
	
	Протокол = РезультатПолученияПротокола.ТекстПротокола;
	
	РазобратьПротокол();
	ЗаполнитьДанныеВШапкеФормы();
	УправлениеЭУ(Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ РезультатПолученияПротокола.Выполнено Тогда
		ПоказатьПредупреждение(, РезультатПолученияПротокола.ОписаниеОшибки,, НСтр("ru = 'Ошибка получения протокола';
																					|en = 'Protocol receipt error'"));
		Закрыть(Ложь);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСохранитьНажатие(Элемент)
	
	ДанныеПротокола = РезультатПолученияПротокола.ДанныеПротокола;
	
	Шаблон = НСтр("ru = 'ОписаниеОшибки_%1_%2';
					|en = 'ОписаниеОшибки_%1_%2'");
	ИмяФайла = СтрШаблон(Шаблон, Банк, Организация);
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, "");
	
	Файлы = Новый Массив;
	
	Описание = Новый ОписаниеПередаваемогоФайла;
	Описание.Имя =  ИмяФайла + ".xml";
	Описание.Хранение = ПоместитьВоВременноеХранилище(ДанныеПротокола);
	Файлы.Добавить(Описание);
	
	Если РезультатПолученияПротокола.ДанныеПодписи <> Неопределено Тогда
		Описание = Новый ОписаниеПередаваемогоФайла;
		Описание.Имя = ИмяФайла + ".sig";
		Описание.Хранение = ПоместитьВоВременноеХранилище(РезультатПолученияПротокола.ДанныеПодписи);
		Файлы.Добавить(Описание);
	КонецЕсли;
	
	ФайловаяСистемаКлиент.СохранитьФайлы(,Файлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаИсходнаяТранзакцияНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Ключ", Транзакция);
	Форма = ПолучитьФорму("Справочник.ТранзакцииОбменаСБанками.Форма.ФормаЭлемента", ПараметрыФормы);
	Форма.ТолькоПросмотр = Истина;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЭтапыОтправкиНажатие(Элемент)
	
	УниверсальныйОбменСБанкамиКлиент.
		ПоказатьФормуСостоянияДокументооборота(РезультатПолученияПротокола.Документооборот);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеЭУ(Отказ = Ложь)
	
	Элементы.Наименование.Видимость = НЕ ПустаяСтрока(Наименование);
	
	Элементы.Результат.Заголовок = НСтр("ru = 'При обработке данных получателем обнаружены ошибки';
										|en = 'Errors were detected upon data processing by the recipient'");
	Элементы.Результат.ЦветТекста = ЦветаСтиля.ЦветОшибкиВПротоколеБРО;
	
	Элементы.ГиперссылкаИсходнаяТранзакция.Видимость = ЗначениеЗаполнено(Транзакция) И ПоказатьТехническуюИнформацию;
	Элементы.ОшибкиОписание.Видимость = ПоказатьТехническуюИнформацию;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВШапкеФормы()

	Элементы.Наименование.Заголовок	= Наименование;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Элементы.Организация.Заголовок = Организация;
	Иначе
		Шаблон = НСтр("ru = '<Организация с ИНН %1 не найдена>';
						|en = '<Company with %1 TIN is not found>'");
		Элементы.Организация.Заголовок = СтрШаблон(Шаблон, ИННОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Элементы.Банк.Заголовок = Банк;
	Иначе
		Шаблон = НСтр("ru = '<Получатель с идентификатором %1 не найден>';
						|en = '<Recipient with %1 ID is not found>'");
		Элементы.Банк.Заголовок = СтрШаблон(Шаблон, ИдентификаторБанка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОшибки) Тогда
		Элементы.Дата.Заголовок = Формат(ДатаОшибки, "ДФ=dd.MM.yyyy");
	Иначе
		Элементы.Дата.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазобратьПротокол()
	
	Если СтрНайти(Протокол, "ОписаниеОшибок") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Протокол);
	ДанныеПротокола = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	ИдентификаторБанка = ДанныеПротокола.Банк.Идентификатор;
	Банк = УниверсальныйОбменСБанками.НайтиБанкПоИдентификатору(ИдентификаторБанка);
	ИННОрганизации = ДанныеПротокола.Организация.ИНН;
	Организация = УниверсальныйОбменСБанками.НайтиОрганизациюПоИНН(ИННОрганизации);
	
	Если ДанныеПротокола.Свойства().Получить("ТранспортнаяИнформация") <> Неопределено Тогда
		ТранспортнаяИнформация = ДанныеПротокола.ТранспортнаяИнформация;
		ИдентификаторТранзакции = ТранспортнаяИнформация.ИдентификаторТранзакции;
		Транзакция = УниверсальныйОбменСБанками.НайтиТранзакциюПоИдентификатору(ИдентификаторТранзакции);
	ИначеЕсли ДанныеПротокола.Свойства().Получить("ИдентификаторИсходнойТранзакции") <> Неопределено Тогда
		ИдентификаторТранзакции = ДанныеПротокола.ИдентификаторИсходнойТранзакции;
		Транзакция = УниверсальныйОбменСБанками.НайтиТранзакциюПоИдентификатору(ИдентификаторТранзакции);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеПротокола.ДатаОшибки) Тогда
		ДатаОшибки = XMLЗначение(Тип("Дата"), ДанныеПротокола.ДатаОшибки);
	КонецЕсли;
	
	Ошибки.Очистить();
	КоллекцияОшибок = УниверсальныйОбменСБанками.ЗначениеВКоллекцию(ДанныеПротокола.Ошибки.Ошибка);
	Для каждого Ошибка Из КоллекцияОшибок Цикл
		
		Строка = Ошибки.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Ошибка);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТехническуюИнформациюПриИзменении(Элемент)
	
	УправлениеЭУ();
	
КонецПроцедуры

#КонецОбласти