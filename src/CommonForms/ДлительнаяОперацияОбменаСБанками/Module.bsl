&НаКлиенте
Перем ВыполняемоеОповещение;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьДинамическуюКартинкуСтатусаОперации();
	
	Ошибки = Новый ФиксированныйМассив(Новый Массив);
	
	ОбработатьВходныеПараметры(Параметры);
	
	Элементы.ФормаЗакрыть.Видимость = Ложь;
	Элементы.Показать.Видимость 	= Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДлительныеОперацииОбменаСБанкамиКлиент.
		ИзменитьПараметрыДлительнойОтправкиКлиентСервер("ИдентификаторФормыПолучателя", ИдентификаторФормыПолучателя);
	
	Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		УстановитьТекущуюОрганизацию(ТекущаяОрганизация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийБанк) Тогда
		УстановитьТекущийБанк(ТекущийБанк);
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ВывестиПоясняющийТекстПриВыполняющейсяОперации(ЭтотОбъект, ИмяЭтапаОбмена);
	
	Если РезультатОтправки <> Неопределено Тогда
		// Формы выводится с уже определенным результатом отправки.
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ПаузаПередЗавершением",
			ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВызватьОбработчикБезПаузы());
		Если РезультатОтправки Тогда
			ОбработкаОповещенийОтправки(
				ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияУдачнаяОтправка(),
				ПараметрыОповещения,
				Неопределено);
		Иначе
			ОбработкаОповещенийОтправки(
				ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияНеУдачнаяОтправка(),
				ПараметрыОповещения,
				Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Активизировать();
	
	ДоопределитьПредыдущееСостояние();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РазборОбщихПараметровОповещения(ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияСменыИдентификатораФоновогоЗадания() Тогда
		ОбработкаСменыИдентификатораФоновогоЗадания(Параметр);
		
	ИначеЕсли ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияИзмененияПризнакаЧтенияСообщенийФоновогоЗадания() Тогда
		ОтработатьИзменениеПризнакаЧтенияСообщенийФоновогоЗадания(Параметр);
		
	ИначеЕсли ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияЗавершитьОтправкуБезДальнейшихДействий() Тогда 
		ЗавершитьБезДальнейшихДействий();
		
	ИначеЕсли ЭтоОбмен(ПараметрыРежима) ИЛИ ЭтоРасшифровка(ПараметрыРежима) Тогда
		ОбработкаОповещенийОбновления(ИмяСобытия, Параметр, Источник);
		
	Иначе
		ОбработкаОповещенийОтправки(ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Предотвращаем ручное закрытие формы длительной операции,
	// поскольку даже при закрытии формы отправка бы продолжилась.
	Если РазрешитьЗакрытиеФормы Тогда
		// Сброс параметров - это очистка списка ошибок на клиенте и сервере и очистка идентификатора
		// формы-получателя ошибок.
		Если НЕ СбросПараметровВыполнен Тогда
			Отказ = Истина;
			
			ОпределитьНеобходимостьЗакрытияБезДальнейшихДействий();
			
			ПодключитьОбработчикОжидания("ПодключаемыйЗакрытьФорму", 0.1, Истина);
		КонецЕсли;
		
	Иначе
		
		ПолучитьВсеОшибки();
		РазрешитьЗакрытиеФормы 		 = Истина;
		ЗакрытьБезДальнейшихДействий = Истина;
		ПодключаемыйЗакрытьФорму();
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)

	ОпределитьНеобходимостьЗакрытияБезДальнейшихДействий();
	
	// Пользователь нажал "Закрыть" вместо "Показать протокол", значит протокол ему не нужен.
	Если ЗначениеЗаполнено(ПротоколОтрицательногоРезультата) Тогда
		ПротоколОтрицательногоРезультата = Неопределено;
	КонецЕсли;
	
	ПодключаемыйЗакрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура Показать(Команда)
	
	ПодключаемыйЗакрытьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Режимы

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОбмен(ПараметрыРежима)
	
	Возврат ПараметрыРежима.Режим = ДлительныеОперацииОбменаСБанкамиКлиентСервер.РежимОбмен();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОтправка(ПараметрыРежима)
	
	Возврат ПараметрыРежима.Режим = ДлительныеОперацииОбменаСБанкамиКлиентСервер.РежимОтправка();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРасшифровка(ПараметрыРежима)
	
	Возврат ПараметрыРежима.Режим = ДлительныеОперацииОбменаСБанкамиКлиентСервер.РежимРасшифровка();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоУниверсальноеОжидание(ПараметрыРежима)
	
	Возврат ПараметрыРежима.Режим = ДлительныеОперацииОбменаСБанкамиКлиентСервер.РежимУниверсальноеОжидание();
	
КонецФункции

#КонецОбласти

#Область ВыводНадписей

&НаКлиенте
Функция ТекстПроНовыеИОшибкиПриРасшифровке(Параметр) Экспорт
	
	КоличествоНеРасшифрованных 	= Параметр.КоличествоНеРасшифрованных;
	КоличествоРасшифрованных 	= Параметр.КоличествоРасшифрованных;
	ВсегоСообщений 				= Параметр.Всего;
	
	РасшифрованыВсе 		= КоличествоРасшифрованных = ВсегоСообщений;
	РасшифрованаЧасть 		= КоличествоРасшифрованных <> ВсегоСообщений И КоличествоРасшифрованных > 0;
	НиОдноНеРасшифровано 	= КоличествоРасшифрованных = 0;
	
	ТекстПроНовыеСообщения = НСтр("ru = 'Получены новые сообщения.';
									|en = 'New messages are received.'");
	ТекстСообщенияГотовыКПросмотру = НСтр("ru = 'Сообщения готовы к просмотру.';
											|en = 'Messages are ready to view.'");
	
	Если ЕстьНовые И ЕстьОшибки Тогда
		
		Элементы.ДекорацияДлительнаяОперация.Картинка = БиблиотекаКартинок.РасшифрованныеСообщения;
		
		Если ПараметрыРежима.Авторасшифровка Тогда
			ОсновнойТекст = ТекстПроНовыеСообщения;
		Иначе
			ОсновнойТекст = ТекстСообщенияГотовыКПросмотру;
		КонецЕсли;
		
		Если РасшифрованыВсе Тогда
		
			ПоясняющийТекст = Новый ФорматированнаяСтрока(
				ОсновнойТекст,
				Символы.ПС,
				Символы.ПС,
				СтрокаКрасным(НСтр("ru = 'Обратите внимание, при расшифровке сообщений и формировании квитанций возникли ошибки.';
									|en = 'Note that errors occurred while decrypting messages and generating receipts.'")));
		
		Иначе
			
			ПоясняющийТекст = Новый ФорматированнаяСтрока(
				ОсновнойТекст,
				Символы.ПС,
				Символы.ПС,
				СтрокаКрасным(НСтр("ru = 'Обратите внимание, часть сообщений расшифровать не удалось.';
									|en = 'Please note that some messages were not decrypted.'")));
				
		КонецЕсли;
			
	ИначеЕсли ЕстьНовые И НЕ ЕстьОшибки Тогда
		
		Элементы.ДекорацияДлительнаяОперация.Картинка = БиблиотекаКартинок.РасшифрованныеСообщения;
		
		Если ПараметрыРежима.Авторасшифровка Тогда
			ОсновнойТекст = ТекстПроНовыеСообщения;
		Иначе
			ОсновнойТекст = ТекстСообщенияГотовыКПросмотру;
		КонецЕсли;
		
		ПоясняющийТекст = Новый ФорматированнаяСтрока(ОсновнойТекст);
		
	ИначеЕсли НЕ ЕстьНовые И ЕстьОшибки Тогда
		
		Элементы.ДекорацияДлительнаяОперация.Картинка = БиблиотекаКартинок.ОшибкаОтправки;
		
		Если РасшифрованыВсе Тогда
			
			Если ПараметрыРежима.Авторасшифровка Тогда
				ОсновнойТекст = ТекстПроНовыеСообщения;
			Иначе
				ОсновнойТекст = НСтр("ru = 'Все сообщения расшифрованы.';
									|en = 'All messages are decrypted.'");
			КонецЕсли;
		
			ПоясняющийТекст = Новый ФорматированнаяСтрока(
				ОсновнойТекст,
				Символы.ПС,
				Символы.ПС,
				СтрокаКрасным(НСтр("ru = 'Обратите внимание, при расшифровке сообщений и формировании квитанций возникли ошибки.';
									|en = 'Note that errors occurred while decrypting messages and generating receipts.'")));
				
		ИначеЕсли РасшифрованаЧасть Тогда
				
			КрасныйТекстНекоторыеСообщенияРасшифроватьНеУдалось = СтрокаКрасным(НСтр("ru = 'Некоторые сообщения расшифровать не удалось.';
																					|en = 'Cannot decrypt some messages.'"));
		
			Если ПараметрыРежима.Авторасшифровка Тогда
				ПоясняющийТекст = Новый ФорматированнаяСтрока(
					ТекстПроНовыеСообщения,
					Символы.ПС,
					Символы.ПС,
					КрасныйТекстНекоторыеСообщенияРасшифроватьНеУдалось);
			Иначе
				ПоясняющийТекст = КрасныйТекстНекоторыеСообщенияРасшифроватьНеУдалось;
			КонецЕсли;
			
		ИначеЕсли НиОдноНеРасшифровано Тогда 
			
			КрасныйТекстНиОдноНеРасшифровано = СтрокаКрасным(НСтр("ru = 'Обратите внимание, при расшифровке сообщений и формировании квитанций возникли ошибки.';
																	|en = 'Note that errors occurred while decrypting messages and generating receipts.'"));
			
			Если ПараметрыРежима.Авторасшифровка Тогда
				ПоясняющийТекст = Новый ФорматированнаяСтрока(
					ТекстПроНовыеСообщения,
					Символы.ПС,
					Символы.ПС,
					КрасныйТекстНиОдноНеРасшифровано);
			Иначе
				ПоясняющийТекст = КрасныйТекстНиОдноНеРасшифровано;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НЕ ЕстьНовые И НЕ ЕстьОшибки Тогда
		
		Элементы.ДекорацияДлительнаяОперация.Картинка = БиблиотекаКартинок.ИнформацияПоДлительнойОтправке;
		
		Если РасшифрованыВсе Тогда
			 ПоясняющийТекст = Новый ФорматированнаяСтрока(НСтр("ru = 'Все сообщения расшифрованы.';
																|en = 'All messages are decrypted.'"));
		Иначе
			 ПоясняющийТекст = Новый ФорматированнаяСтрока(НСтр("ru = 'Некоторые сообщения не расшифрованы.';
																|en = 'Some messages are not decrypted.'"));
		КонецЕсли; 
		
		Если ПараметрыРежима.Авторасшифровка Тогда
			ПоясняющийТекст = Новый ФорматированнаяСтрока(
				ТекстПроНовыеСообщения,
				Символы.ПС,
				Символы.ПС,
				ПоясняющийТекст);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПоясняющийТекст;
	
КонецФункции

&НаКлиенте
Функция ТекстПроНовыеИОшибкиПриОбновлении() Экспорт
	
	// Новые сообщения.
	ТекстПроНовыеСообщения = НСтр("ru = 'Получены новые сообщения.';
									|en = 'New messages are received.'");
	ТекстПроОтсуствиеНовыхСообщений = НСтр("ru = 'Новых сообщений нет.';
											|en = 'No new messages.'");
	
	// Ошибки (красным цветом).
	ТекстПроОшибки = НСтр("ru = 'Обратите внимание, возникли ошибки при обновлении.';
							|en = 'Note that errors occurred while updating.'");
	ТекстПроОшибки = СтрокаКрасным(ТекстПроОшибки);
	
	Если НетДоступаВИнтернет Тогда
		
		ТекстПроОтсуствиеИнтернета = НСтр("ru = 'Обновление выполнить не удалось в связи с ошибкой доступа в Интернет';
											|en = 'Cannot update due to the Internet access error'");
		
		Если ЕстьОшибки Тогда
			
			ПоясняющийТекст = Новый ФорматированнаяСтрока(
				ТекстПроОтсуствиеИнтернета,
				Символы.ПС,
				Символы.ПС,
				ТекстПроОшибки);
			
		Иначе
			ПоясняющийТекст = Новый ФорматированнаяСтрока(ТекстПроОтсуствиеИнтернета);
		КонецЕсли;
		
	ИначеЕсли ЕстьНовые И ЕстьОшибки Тогда
		
		ПоясняющийТекст = Новый ФорматированнаяСтрока(
			ТекстПроНовыеСообщения,
			Символы.ПС,
			Символы.ПС,
			ТекстПроОшибки);
			
	ИначеЕсли ЕстьНовые И НЕ ЕстьОшибки Тогда
		
		ПоясняющийТекст = Новый ФорматированнаяСтрока(ТекстПроНовыеСообщения);
		
	ИначеЕсли НЕ ЕстьНовые И ЕстьОшибки Тогда
		
		ПоясняющийТекст = Новый ФорматированнаяСтрока(
			ТекстПроОтсуствиеНовыхСообщений,
			Символы.ПС,
			Символы.ПС,
			ТекстПроОшибки);
		
	Иначе
		
		// Нет новых, нет ошибок.
		ПоясняющийТекст = Новый ФорматированнаяСтрока(ТекстПроОтсуствиеНовыхСообщений);
		
	КонецЕсли;
	
	Возврат ПоясняющийТекст;
	
КонецФункции

&НаСервере
Процедура СформироватьТекстОРезультатеОбменаПоПредмету()
	
	НовоеСостояниеСдачиОтчетности = Неопределено;
	
	СостояниеПредмета = ТекущийЭтапОтправки(Предмет);
	Если СостояниеПредмета <> Неопределено Тогда
		НовоеСостояниеОтчета 			= СостояниеПредмета.ТекстНадписи;
		НовоеСостояниеСдачиОтчетности 	= СостояниеПредмета.СостояниеДокументооборота;
		ПротоколОтрицательногоРезультата			= СостояниеПредмета.Протокол;
	КонецЕсли;
	
	Картинка = БиблиотекаКартинок.ИнформацияПоДлительнойОтправке;
	ПоясняющийТекст = "";
	
	СостояниеОтчетаИзменилось = ПредыдущееСостояниеОтчета <> НовоеСостояниеОтчета И ЗначениеЗаполнено(НовоеСостояниеОтчета);
	
	Если СостояниеОтчетаИзменилось Тогда
		
		Если ЗначениеЗаполнено(Предмет) И (ПараметрыРежима.ЭтоОбменИзФормыПредмета ИЛИ ПараметрыРежима.ЭтоОбменИзЭтаповОтправки) Тогда
			УниверсальныйОбменСБанками.ОтметитьСсылкуПоказаннойПользователю(Предмет);
		КонецЕсли;
			
		Если НовоеСостояниеСдачиОтчетности = Перечисления.СостоянияДокументооборотаОбменаСБанками.ОтрицательныйРезультат Тогда
			
			Картинка = БиблиотекаКартинок.ОшибкаОтправки;
			
			ПоясняющийТекст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сдан.';
											|en = 'The ""%1"" report is not submitted.'"), НаименованиеПредмета);
			
			ПоказатьКнопкуОткрытияПротокола();
			
		ИначеЕсли НовоеСостояниеСдачиОтчетности = Перечисления.СостоянияДокументооборотаОбменаСБанками.ПоложительныйРезультат Тогда
			
			Картинка = БиблиотекаКартинок.УспешнаяОтправка;
			
			ПоясняющийТекст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" сдан.';
											|en = 'The ""%1"" report is submitted.'"), НаименованиеПредмета);
			
		Иначе
				
			Картинка = БиблиотекаКартинок.ИнформацияПоДлительнойОтправке;
			ПоясняющийТекст = НадписьПриИзменившемсяСостоянии(НовоеСостояниеОтчета);
			
		КонецЕсли;
	Иначе
		
		// Состояние могло не измениться, а протокол есть.
		// При таком условии при закрытии формы откроется протокол, а это не нужно.
		ПротоколОтрицательногоРезультата = Неопределено;
		
		Картинка 		= БиблиотекаКартинок.ИнформацияПоДлительнойОтправке;
		ПоясняющийТекст = НадписьПриИзменившемсяСостоянии(НовоеСостояниеОтчета, СостояниеОтчетаИзменилось, НеУдалосьОбновитьСтатусОтчета);
		
	КонецЕсли;
	
	Элементы.ДекорацияДлительнаяОперация.Картинка 	= Картинка;
	Элементы.ПоясняющийТекст.Заголовок 				= ПоясняющийТекст;
		
КонецПроцедуры

&НаСервере
Функция НадписьПриИзменившемсяСостоянии(НовоеСостояние, СостояниеИзменилось = Истина, НеУдалосьОбновить = Ложь)
	
	Представление = НСтр("ru = 'Состояние предмета ""%Наименование""';
						|en = 'The ""%Наименование"" subject state'");
	
	Если СостояниеИзменилось Тогда
		РезультатОбновления = НСтр("ru = 'изменилось на ""%Состояние"".';
									|en = 'changed to ""%Состояние"".'");
	ИначеЕсли НеУдалосьОбновить Тогда
		РезультатОбновления = НСтр("ru = 'обновить не удалось.';
									|en = 'cannot update.'");
	Иначе
		РезультатОбновления = НСтр("ru = 'не изменилось.';
									|en = 'not changed.'");
	КонецЕсли;
	
	ПоясняющийТекст = Представление + " " + РезультатОбновления;
	ПоясняющийТекст = СтрЗаменить(ПоясняющийТекст, "%Наименование", НаименованиеПредмета);
	ПоясняющийТекст = СтрЗаменить(ПоясняющийТекст, "%Состояние", 	НовоеСостояние);
	
	Возврат ПоясняющийТекст;
	
КонецФункции

&НаКлиенте
Процедура ВывестиПоясняющийТекстИЗаголовокПриЗавершеннойОтправке(ПараметрыМетода)
	
	РазрешитьЗакрыватьФорму();
	
	ЗавершенУспешно = ПараметрыМетода.ЗавершенУспешно;
	ДополнительноеСообщение = ПараметрыМетода.ДополнительноеСообщение;
	
	Если ЗавершенУспешно Тогда
		// Картинка.
		Элементы.ДекорацияДлительнаяОперация.Картинка = БиблиотекаКартинок.УспешнаяОтправка;
		// Заголовок.
		Заголовок = НСтр("ru = 'Успешно!';
						|en = 'Done!'");
		Отрицание = "";
		ДобавкаУспешнаяОтправка = НСтр("ru = ' Ожидайте протокол обработки.';
										|en = ' Await processing protocol.'")
	Иначе
		// Картинка.
		Элементы.ДекорацияДлительнаяОперация.Картинка = БиблиотекаКартинок.ОшибкаОтправки;
		// Заголовок.
		Заголовок = НСтр("ru = '%1 не отправлен';
						|en = '%1 is not sent'");
		Заголовок = СтрШаблон(Заголовок, ЗаголовокПредмета);
		Отрицание = НСтр("ru = 'не';
						|en = 'not'");
		ДобавкаУспешнаяОтправка = "";
	КонецЕсли;
	
	// Пояснение
	Шаблон = НСтр("ru = '%1 ""%2"" %3 отправлен в %4.%5';
					|en = '%1 ""%2"" %3 sent to %4.%5'");
	// Пояснение
	ПоясняющийТекст = СтрШаблон(Шаблон,
		ЗаголовокПредмета,
		НаименованиеПредмета,
		Отрицание,
		НаименованиеБанка,
		ДобавкаУспешнаяОтправка);
	
	ПоясняющийТекст = ЗаменитьДвойнойПробел(ПоясняющийТекст);
	
	Если ЗначениеЗаполнено(ДополнительноеСообщение) Тогда
		ПоясняющийТекст = Новый ФорматированнаяСтрока(
			ПоясняющийТекст + ".",
			Символы.ПС,
			Символы.ПС,
			СтрокаКрасным(ДополнительноеСообщение));
	КонецЕсли;
	
	Элементы.ПоясняющийТекст.Заголовок = ПоясняющийТекст;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиПоясняющийТекстПриВыполняющейсяОперации(Форма, ИмяЭтапа, ПредставлениеЭтапа = "")
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	Если ЭтоУниверсальноеОжидание(ПараметрыРежима) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоРасшифровка(ПараметрыРежима) Тогда
		Форма.Заголовок = НСтр("ru = 'Расшифровка сообщений, пожалуйста, подождите...';
								|en = 'Decrypting messages, please wait...'")
	КонецЕсли;
	
	БезПроцентов = Форма.ОбщееКоличествоЭтапов = 0 ИЛИ НЕ Форма.ВыводитьПроценты;
	
	Если БезПроцентов Тогда
		Проценты = 0;
	Иначе
		Если ЭтоОбмен(ПараметрыРежима) Тогда
			Процент = Форма.ВесПройденныхЭтаповОбмена / Форма.СуммарныйВесЭтаповОбмена;
		Иначе
			Процент = Форма.КоличествоПройденныхЭтапов / Форма.ОбщееКоличествоЭтапов;
		КонецЕсли;
		
		Проценты = Мин(Макс(Цел(100 * Процент), 1), 99);
	КонецЕсли;
	
	Если ЭтоОбмен(ПараметрыРежима) ИЛИ ЭтоРасшифровка(ПараметрыРежима) Тогда
		ТекстНадписи = ПоясняющийТекстПриВыполняющемсяОбновлении(Форма,
			БезПроцентов,
			Проценты,
			ИмяЭтапа,
			ПредставлениеЭтапа);
	Иначе
		ТекстНадписи = ПоясняющийТекстПриВыполняющейсяОтправке(Форма, БезПроцентов, Проценты);
	КонецЕсли;
		
	Форма.Элементы.ПоясняющийТекст.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоясняющийТекстПриВыполняющейсяОтправке(Форма, БезПроцентов, Проценты)
	
	ТекстНадписи = "";
	
	ТекстНадписи = НСтр("ru = 'Предмет ""%Наименование"" отправляется в %Банк %Проценты';
						|en = 'Subject ""%Description"" is sent to %Bank %Percent'");
	
	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Наименование", Форма.НаименованиеПредмета);
	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Банк",         Форма.Банк);
	
	Если БезПроцентов Тогда
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Проценты", "");
	Иначе
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Проценты", "("+ Строка(Проценты) + "%)");
	КонецЕсли;

	Возврат ТекстНадписи;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоясняющийТекстПриВыполняющемсяОбновлении(Форма, БезПроцентов, Проценты, ИмяЭтапа, ПредставлениеЭтапа = "")
	
	Если ЭтоРасшифровка(Форма.ПараметрыРежима) Тогда
		ТекущаяОперация = НСтр("ru = 'расшифровка';
								|en = 'decryption'");
	ИначеЕсли ЭтоОбмен(Форма.ПараметрыРежима) Тогда
		Если ИмяЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаПодписаниеШифрованиеСообщений() Тогда
			ТекущаяОперация = НСтр("ru = 'подписание';
									|en = 'signing'");
		ИначеЕсли ИмяЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаРасшифровкаСообщений() Тогда
			ТекущаяОперация = НСтр("ru = 'расшифровка';
									|en = 'decryption'");
		ИначеЕсли ИмяЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаОтправкаСообщений() Тогда
			ТекущаяОперация = НСтр("ru = 'отправка';
									|en = 'send'");
		ИначеЕсли ИмяЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаПодготовкаДанных() Тогда
			ТекущаяОперация = НСтр("ru = 'подготовка';
									|en = 'preparation'");
		ИначеЕсли ИмяЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаСжатиеДанных() Тогда
			ТекущаяОперация = НСтр("ru = 'сжатие';
									|en = 'compression'");
		ИначеЕсли НЕ ПустаяСтрока(ПредставлениеЭтапа) Тогда
			ТекущаяОперация = ПредставлениеЭтапа;
		Иначе
			ТекущаяОперация = НСтр("ru = 'обновление';
									|en = 'update'");
		КонецЕсли;
	КонецЕсли;
	
	ТекстНадписи = "";
	Если Форма.ВыводитьОрганизациюВНадпись
		И (ЗначениеЗаполнено(Форма.ТекущаяОрганизация) ИЛИ ЗначениеЗаполнено(Форма.ТекущийБанк)) Тогда
		
		Подстрока1 = "";
		Если НЕ БезПроцентов Тогда
			// Пример: Завершено: 15%. Текущая операция: обновление/расшифровка по организации Ромашка
			Подстрока1 = НСтр("ru = 'Завершено: %1%%';
								|en = 'Complete: %1%%'");
			Подстрока1 = СтрШаблон(Подстрока1, Проценты);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ТекущийБанк) И ЗначениеЗаполнено(Форма.ТекущаяОрганизация) Тогда
			Подстрока2 = НСтр("ru = 'Текущая операция: %1, организация %2, получатель %3';
								|en = 'Current operation: %1, company %2, recipient %3'");
			Подстрока2 = СтрШаблон(Подстрока2, ТекущаяОперация, Форма.ТекущаяОрганизация, Форма.ТекущийБанк);
			Подстрока2 = СтрокаСерым(Подстрока2);
		ИначеЕсли ЗначениеЗаполнено(Форма.ТекущийБанк) Тогда
			Подстрока2 = НСтр("ru = 'Текущая операция: %1, получатель %2';
								|en = 'Current operation: %1, recipient %2'");
			Подстрока2 = СтрШаблон(Подстрока2, ТекущаяОперация, Форма.ТекущийБанк);
			Подстрока2 = СтрокаСерым(Подстрока2);
		Иначе
			Подстрока2 = НСтр("ru = 'Текущая операция: %1, организация %2';
								|en = 'Current operation: %1, company %2'");
			Подстрока2 = СтрШаблон(Подстрока2, ТекущаяОперация, Форма.ТекущаяОрганизация);
			Подстрока2 = СтрокаСерым(Подстрока2);
		КонецЕсли;
		
		Если ПустаяСтрока(Подстрока1) Тогда
			ТекстНадписи = Новый ФорматированнаяСтрока(Подстрока2);
		Иначе
			ТекстНадписи = Новый ФорматированнаяСтрока(
				Подстрока1,
				Символы.ПС,
				Подстрока2);
		КонецЕсли;
	Иначе
		Если БезПроцентов Тогда
			ТекстНадписи = НСтр("ru = 'Ожидайте завершения операции: %1...';
								|en = 'Waiting for the operation to complete: %1...'");
			ТекстНадписи = СтрШаблон(ТекстНадписи, ТекущаяОперация);
		Иначе
			// Пример: Завершено: 15%
			ТекстНадписи = НСтр("ru = 'Завершено: %1%%';
								|en = 'Complete: %1%%'");
			ТекстНадписи = СтрШаблон(ТекстНадписи, Проценты);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
Функция НовоеОписаниеМетодаПослеПаузы(ИмяМетода, Параметры, Знач Интервал = 0)
	
	Если Интервал = 0 Тогда
		Интервал = ИнтервалПаузыПоУмолчанию();
	КонецЕсли;
	
	ОписаниеМетода = Новый Структура;
	ОписаниеМетода.Вставить("Имя", ИмяМетода);
	ОписаниеМетода.Вставить("Параметры", Параметры);
	ОписаниеМетода.Вставить("Интервал", Интервал);
	
	Возврат ОписаниеМетода;
	
КонецФункции

&НаКлиенте
Функция ПаузаПередОтображениемНовойИнформации(ИмяМетода, Параметры, ДлительностьЗадержки = 0, ВызватьПредыдущиеОбработчики = Ложь)
	
	// Для правильной работы механизма необходимо добавить вызов метода
	// в процедуру ВызватьМетодыОбработчикаОжиданияПаузы.
	
	Если ДлительностьЗадержки = 0 Тогда
		ДлительностьЗадержки = ИнтервалПаузыПоУмолчанию();
	КонецЕсли;
	
	Если МетодыВызоваОбработчикаПаузы = Неопределено Тогда
		МетодыВызоваОбработчикаПаузы = Новый Структура;
		МетодыВызоваОбработчикаПаузы.Вставить("ДанныеМетодов", Новый Массив);
	КонецЕсли;
	
	Если ВызватьПредыдущиеОбработчики Тогда
		ВызватьМетодыОбработчикаОжиданияПаузы();
	КонецЕсли;
	
	ОписаниеМетода = НовоеОписаниеМетодаПослеПаузы(ИмяМетода, Параметры, ДлительностьЗадержки);
	МетодыВызоваОбработчикаПаузы.ДанныеМетодов.Добавить(ОписаниеМетода);
	
	Если ДлительностьЗадержки = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВызватьОбработчикБезПаузы() Тогда
		// В случае отрицательной задержки сразу вызываем обработчик.
		ВызватьМетодыОбработчикаОжиданияПаузы();
	Иначе
		// Подключаем обработчик ожидания в котором выполнится метод.
		Если НЕ ОбработчикПаузыАктивен Тогда
			ПодключитьОбработчикОжидания("ПодключаемыйОбработчикОжиданияПаузы", ДлительностьЗадержки, Истина);
		КонецЕсли;
		
		ОбработчикПаузыАктивен = Истина;
	КонецЕсли;
	
	
КонецФункции

&НаКлиенте
Процедура ВызватьМетодОбработчикаОжиданияПаузы(Метод)
	
	Если Метод.Имя = "ОбработатьЗавершениеДлительногоОбмена" Тогда
		
		ОбработатьЗавершениеДлительногоОбменаПослеПаузы(Метод.Параметры);
		
	ИначеЕсли Метод.Имя = "ОтработатьСменуЭтапаОбмена" Тогда
		
		ОтработатьСменуЭтапаОбменаПослеПаузы(Метод.Параметры);
		
	ИначеЕсли Метод.Имя = "ВывестиПоясняющийТекстИЗаголовокПриЗавершеннойОтправке" Тогда
		
		ВывестиПоясняющийТекстИЗаголовокПриЗавершеннойОтправке(Метод.Параметры);
		
	ИначеЕсли Метод.Имя = "ОтобразитьВыполнениеВсехЭтапов" Тогда
		
		ОтобразитьВыполнениеВсехЭтапов(Метод.Параметры);
		
	Иначе
		
		Шаблон = НСтр("ru = 'Неизвестный обработчик %1.';
						|en = 'Unknown handler %1.'");
		ВызватьИсключение(СтрШаблон(Шаблон, Метод.Имя));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВызватьПервыйМетодОбработчиковОжиданияПаузы()
	
	Если МетодыВызоваОбработчикаПаузы.ДанныеМетодов.Количество() > 0 Тогда
		ВызватьМетодОбработчикаОжиданияПаузы(МетодыВызоваОбработчикаПаузы.ДанныеМетодов[0]);
		МетодыВызоваОбработчикаПаузы.ДанныеМетодов.Удалить(0);
	КонецЕсли;
	
	Если МетодыВызоваОбработчикаПаузы.ДанныеМетодов.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат МетодыВызоваОбработчикаПаузы.ДанныеМетодов[0].Интервал;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВызватьМетодыОбработчикаОжиданияПаузы(НеВызыватьПоследние = 0)
	
	Если МетодыВызоваОбработчикаПаузы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Счетчик = 1;
	ВсегоМетодов = МетодыВызоваОбработчикаПаузы.ДанныеМетодов.Количество();
	Для Счетчик = 1 По ВсегоМетодов Цикл
		ВызватьМетодОбработчикаОжиданияПаузы(МетодыВызоваОбработчикаПаузы.ДанныеМетодов[Счетчик - 1]);
		МетодыВызоваОбработчикаПаузы.ДанныеМетодов.Удалить(0);
		Если ВсегоМетодов - Счетчик < НеВызыватьПоследние Тогда
			Прервать;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемыйОбработчикОжиданияПаузы()
	
	Интервал = ВызватьПервыйМетодОбработчиковОжиданияПаузы();
	
	Если Интервал > 0 Тогда
		ПодключитьОбработчикОжидания("ПодключаемыйОбработчикОжиданияПаузы", Интервал, Истина);
	Иначе
		ОбработчикПаузыАктивен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИнтервалЧтенияСообщенийФоновыхЗаданий()
	
	Возврат ДлительныеОперацииОбменаСБанкамиКлиентСервер.
		ИнтервалЧтенияСообщенийФоновыхЗаданий();
	
КонецФункции

&НаКлиенте
Функция ИнтервалПаузыПоУмолчанию()
	
	Возврат 1;
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(Идентификатор)
	
	Возврат ДлительныеОперацииОбменаСБанками.СообщенияФоновогоЗадания(Идентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПодключаемыйПрочитатьСообщенияФоновыхЗаданий()
	
	Если ИдентификаторФоновогоЗаданияОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщения = СообщенияФоновогоЗадания(ИдентификаторФоновогоЗаданияОбмена);
	Если Сообщения <> Неопределено  Тогда
		Для каждого ДанныеСообщения Из Сообщения.ВсеСообщения Цикл
			Если ДанныеСообщения.Префикс = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ПрефиксСообщенийОшибок() Тогда
				ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВывестиОшибку(ДанныеСообщения.Значение.ТекстОшибки,
					,,,,,ДанныеСообщения.Значение.Организация);
			ИначеЕсли ДанныеСообщения.Префикс = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ПрефиксСообщенийЭтаповОбмена() Тогда
				ОтработатьСменуЭтапаОбмена(ДанныеСообщения.Значение.ПараметрыЭтапа);
			ИначеЕсли ДанныеСообщения.Префикс = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ПрефиксСообщенийУточненияЭтаповСобытия() Тогда
				ОтработатьУточнениеЭтапа(ДанныеСообщения.Значение.ПараметрыУточнения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТребуетсяЗапускОбработчикаЧтенияСообщенийФоновогоЗадания Тогда
		ПодключитьОбработчикОжидания(
			"ПодключаемыйПрочитатьСообщенияФоновыхЗаданий",
			ИнтервалЧтенияСообщенийФоновыхЗаданий(),
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДинамическуюКартинкуСтатусаОперации()
	
	ЭтоВеб = ОбщегоНазначения.ЭтоВебКлиент();
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если НЕ ЭтоВеб Тогда
		Элементы.ДекорацияДлительнаяОперация.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоопределитьПредыдущееСостояние()
	
	// Если форма отчета была долго открыта,
	// то в базе хранится уже новое состояние обмена, а в форме - все еще старое.
	// Поэтому за предыдущее состояние считаем то, что в открытой форме отчета, а не в базе.
	Если ЭтоОбмен(ПараметрыРежима) И ПараметрыРежима.ЭтоОбменИзФормыПредмета 
		И ВладелецФормы <> Неопределено
		И ВладелецФормы.Элементы.Найти("НаименованиеЭтапа") <> Неопределено
		И ЗначениеЗаполнено(ВладелецФормы.Элементы.НаименованиеЭтапа.Заголовок) Тогда
		
		ПредыдущееСостояниеОтчета = ВладелецФормы.Элементы.НаименованиеЭтапа.Заголовок;
		
	КонецЕсли;
	
	// Аналогично для формы этапов отправки.
	Если ЭтоОбмен(ПараметрыРежима)
		И ПараметрыРежима.ЭтоОбменИзЭтаповОтправки 
		И ВладелецФормы <> Неопределено Тогда
		
		ПредыдущееСостояниеОтчета = ВладелецФормы.ТекущееСостояние;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНеобходимостьЗакрытияБезДальнейшихДействий()
	
	// При этих видах обмена основная кнопка - Показать.
	// По Закрыть ничего происходить не должно.
	Если ЭтоРасшифровка(ПараметрыРежима)
		ИЛИ (ЭтоОбмен(ПараметрыРежима) И ПараметрыРежима.ЭтоОбменИзФормыСпискаПредметов) Тогда
		ЗакрытьБезДальнейшихДействий = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКнопкуОткрытияПротокола()
	
	Если ЗначениеЗаполнено(ПротоколОтрицательногоРезультата) Тогда
 		Элементы.Показать.Видимость 		= Истина;
		Элементы.Показать.КнопкаПоУмолчанию = Истина;
		Элементы.Показать.Ширина 			= 16;
		Элементы.Показать.Заголовок 		= НСтр("ru = 'Показать протокол';
													|en = 'Show protocol'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаКрасным(ИсходнаяСтрока)

	Возврат Новый ФорматированнаяСтрока(ИсходнаяСтрока, ,Новый Цвет(255,0,0));

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСерым(ИсходнаяСтрока)

	Возврат Новый ФорматированнаяСтрока(ИсходнаяСтрока, ,Новый Цвет(128,128,128));

КонецФункции

&НаКлиенте
Процедура УстановитьТекущуюОрганизацию(НовоеЗначениеТекущейОрганизаци)

	ТекущаяОрганизация = НовоеЗначениеТекущейОрганизаци;
	ДлительныеОперацииОбменаСБанкамиКлиент.
		ИзменитьПараметрыДлительнойОтправкиКлиентСервер("ТекущаяОрганизация", ТекущаяОрганизация);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийБанк(НовоеЗначениеТекущегоБанка)

	ТекущийБанк = НовоеЗначениеТекущегоБанка;
	ДлительныеОперацииОбменаСБанкамиКлиент.ИзменитьПараметрыДлительнойОтправкиКлиентСервер("ТекущийБанк", ТекущийБанк);

КонецПроцедуры

&НаСервере
Функция АдресДереваНовых()
	
	Если ЭтоРасшифровка(ПараметрыРежима) Тогда
		ДеревоНовое = РеквизитФормыВЗначение("Новое");
	Иначе
		ДеревоНовое = РеквизитФормыВЗначение("Новое");
		УниверсальныйОбменСБанками.ЗаполнитьДеревоНовое(Сервис, ДеревоНовое,,);
		УдалитьИзДереваТекущуюСсылку(ДеревоНовое);
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ДеревоНовое, Новый УникальныйИдентификатор); 
	
КонецФункции

&НаКлиенте
Процедура РазборОбщихПараметровОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		Если Параметр.Свойство("ВыполняемоеОповещение") Тогда
			ВыполняемоеОповещение = Параметр.ВыполняемоеОповещение;
		КонецЕсли;
		
		Если Параметр.Свойство("РезультатОтправки") Тогда
			РезультатОтправки = Параметр.РезультатОтправки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДополнительныеПараметрыОперации()

	ДополнительныеПараметры =
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.НовыеПараметрыСохранения(ЭтоАвтозапрос);
	ДополнительныеПараметры.Ошибки 					= Ошибки;
	ДополнительныеПараметры.Предмет		 			= Предмет;
	ДополнительныеПараметры.ЕстьОшибки 				= ЕстьОшибки;
	ДополнительныеПараметры.ПараметрыРежима 						= ПараметрыРежима;
	ДополнительныеПараметры.ЭтоАвтозапрос 							= ЭтоАвтозапрос;
	ДополнительныеПараметры.НаименованиеБанка 						= НаименованиеБанка;
	ДополнительныеПараметры.Заголовок 								= Заголовок;
	ДополнительныеПараметры.ЗакрытьБезДальнейшихДействий 			= ЗакрытьБезДальнейшихДействий;
	ДополнительныеПараметры.ТекстРезультатаОбменаПоОрганизации 		= ТекстРезультатаОбменаПоОрганизации;
	ДополнительныеПараметры.КартинкаРезультатаОбменаПоОрганизации 	= КартинкаРезультатаОбменаПоОрганизации;
	
	Если ЭтоАвтозапрос Тогда
		
		ДополнительныеПараметры.Документооборот  = АвтозапросПараметры.Ключ;
		ДополнительныеПараметры.ПротоколЗаполнен = АвтозапросПараметры.ПротоколЗаполнен;
		
	Иначе
		
		// Для отправок.
		ДополнительныеПараметры.ВыполняемоеОповещение 	= ВыполняемоеОповещение;
		ДополнительныеПараметры.РезультатОтправки 		= РезультатОтправки;
		
		// Для обменов.
		ДополнительныеПараметры.АдресДереваНовых 					= АдресДереваНовых();
		ДополнительныеПараметры.ЕстьНовые 							= ЕстьНовые;
		ДополнительныеПараметры.ПротоколОтрицательногоРезультата	= ПротоколОтрицательногоРезультата;
		
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;

КонецФункции

&НаКлиенте
Процедура ОбработкаСменыИдентификатораФоновогоЗадания(Параметры)
	
	ПодключаемыйПрочитатьСообщенияФоновыхЗаданий();
	ИдентификаторФоновогоЗаданияОбмена = Параметры.Идентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенийОбновления(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияЗавершениеОбновления() Тогда
		
		ОбработатьЗавершениеДлительногоОбмена(Параметр);
		
	ИначеЕсли ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияСменаЭтапаОбмена() Тогда
		
		ОтработатьСменуЭтапаОбмена(Параметр);
		
	ИначеЕсли ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияСменаЭтапаРасшифровки() Тогда
		
		ОтработатьСменуЭтапаРасшифровки(Параметр);
		
	ИначеЕсли ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияЗавершениеРасшифровки() Тогда
	
		ОтработатьЗавершениеРасшифровки(Параметр);
	
	ИначеЕсли ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияДобавлениеЭтапа() Тогда
		
		ОтработатьДобавлениеЭтапа(Параметр);
		
	ИначеЕсли ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияУточнениеЭтапа() Тогда
		
		ОтработатьУточнениеЭтапа(Параметр);
		
	Иначе
		
		ОбработкаОповещенийОтправки(ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеДлительногоОбмена(Параметр)
	
	ПодключаемыйПрочитатьСообщенияФоновыхЗаданий();
	
	ВызватьМетодыОбработчикаОжиданияПаузы(1);
	
	// Отмечаем выполнение всех этапов.
	ПометитьЭтапыПройденными(Параметр, Истина);
	ОпределитьКоличествоПройденныхЭтаповОбмена();
	ВывестиПоясняющийТекстПриВыполняющейсяОперации(ЭтотОбъект, ИмяЭтапаОбмена);
	
	ПаузаПередОтображениемНовойИнформации("ОбработатьЗавершениеДлительногоОбмена", Параметр);
	

КонецПроцедуры

&НаКлиенте
Процедура ОтработатьЗавершениеРасшифровки(Параметр)
	
	ПодключаемыйПрочитатьСообщенияФоновыхЗаданий();
	ВызватьМетодыОбработчикаОжиданияПаузы(1);
	
	КоличествоПройденныхЭтапов = 1;
	ОбщееКоличествоЭтапов = 1;
	ВывестиПоясняющийТекстПриВыполняющейсяОперации(ЭтотОбъект, ИмяЭтапаОбмена);
	
	ПаузаПередОтображениемНовойИнформации("ОбработатьЗавершениеДлительногоОбмена", Параметр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеДлительногоОбменаПослеПаузы(Параметр)

	ТребуетсяЗапускОбработчикаЧтенияСообщенийФоновогоЗадания = Ложь;
	
	Элементы.ДекорацияДлительнаяОперация.Картинка = БиблиотекаКартинок.ИнформацияПоДлительнойОтправке;
	// Выполняем перед закрытием, поскольку при сбросе все ошибки очистятся. 
	ПолучитьВсеОшибки();
	РазрешитьЗакрыватьФорму();
	
	ЕстьНовые = ЕстьИзмененияВДеревеНовыхПослеОбмена();
	
	Если ЭтоОбмен(ПараметрыРежима) И (ПараметрыРежима.ЭтоОбменИзФормыПредмета
		ИЛИ ПараметрыРежима.ЭтоОбменИзЭтаповОтправки) Тогда
		
		Заголовок = НСтр("ru = 'Обновление завершено';
						|en = 'Update completed'");
		
		// Состояние отчета изменилось.
		СформироватьТекстОРезультатеОбменаПоПредмету();
		// Этот текст будет выведен в форме, открывшейся следом за бубликом.
		ТекстРезультатаОбменаПоОрганизации 		= ТекстПроНовыеИОшибкиПриОбновлении();
		КартинкаРезультатаОбменаПоОрганизации 	= КартинкаПриЗавершенииОбновления();
		
	ИначеЕсли ЭтоРасшифровка(ПараметрыРежима) Тогда
		
		Если ПараметрыРежима.Авторасшифровка Тогда
			Заголовок = НСтр("ru = 'Обмен данными';
							|en = 'Data exchange'");
		Иначе
			Заголовок = НСтр("ru = 'Расшифровка завершена';
							|en = 'Decryption completed'");
		КонецЕсли;
		
		Элементы.ПоясняющийТекст.Заголовок = ТекстПроНовыеИОшибкиПриРасшифровке(Параметр);
		
		Если ЕстьНовые ИЛИ ЕстьОшибки Тогда
			Элементы.Показать.Видимость 		= Истина;
			Элементы.Показать.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
		Если ЕстьОшибки И НЕ ЕстьНовые Тогда
			Элементы.Показать.Ширина = 15;
			Элементы.Показать.Заголовок = НСтр("ru = 'Показать ошибки';
												|en = 'Show errors'");
		КонецЕсли;
		
	Иначе
		
		Заголовок = НСтр("ru = 'Обновление завершено';
						|en = 'Update completed'");
		
		Элементы.ПоясняющийТекст.Заголовок = ТекстПроНовыеИОшибкиПриОбновлении();
		Элементы.ДекорацияДлительнаяОперация.Картинка = КартинкаПриЗавершенииОбновления();
		
		Если (ЕстьНовые ИЛИ ЕстьОшибки) И НЕ НетДоступаВИнтернет
			ИЛИ ЕстьОшибки И НетДоступаВИнтернет Тогда
			Элементы.Показать.Видимость 		= Истина;
			Элементы.Показать.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Оповещаем только в случае отсутствия новых, поскольку при их наличии
	// ошибки обновятся одновременно с новыми.
	Если ЕстьОшибки И НЕ ЕстьНовые Тогда
		РезультатОбновления 	= ДополнительныеПараметрыОперации();
		АдресСведенийПоОшибкам 	= ПоместитьВоВременноеХранилище(РезультатОбновления, Новый УникальныйИдентификатор);
		Оповестить("ОбновитьОшибкиОбменаСБанками", АдресСведенийПоОшибкам);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КартинкаПриЗавершенииОбновления() Экспорт
	
	Если НетДоступаВИнтернет Тогда
		Картинка = БиблиотекаКартинок.ИнформацияПоДлительнойОтправке;
	ИначеЕсли ЕстьНовые Тогда
		Картинка = БиблиотекаКартинок.РасшифрованныеСообщения;
	ИначеЕсли НЕ ЕстьНовые И ЕстьОшибки Тогда
		Картинка = БиблиотекаКартинок.ОшибкаОтправки;
	Иначе
		// Нет новых, нет ошибок.
		Картинка = БиблиотекаКартинок.ИнформацияПоДлительнойОтправке;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

&НаКлиенте
Процедура ОбщиеДействияЗавершенияОтправки()
	
	// Выполняем перед закрытием, поскольку при сбросе все ошибки очистятся. 
	ПолучитьВсеОшибки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВыполнениеВсехЭтапов(ПараметрыМетода)
	
	ПометитьЭтапыПройденными(Неопределено, Истина);
	ОпределитьКоличествоПройденныхЭтаповОбмена();
	ВывестиПоясняющийТекстПриВыполняющейсяОперации(ЭтотОбъект, ИмяЭтапаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенийОтправки(ИмяСобытия, Параметр, Источник)

	ПараметрыВыводаТекста = Новый Структура("ЗавершенУспешно, ДополнительноеСообщение");
	ПараметрыВыводаТекста.ЗавершенУспешно = Ложь;
	ПараметрыВыводаТекста.ДополнительноеСообщение = "";
	
	Пауза = 0;
	Если ЗначениеЗаполнено(Параметр) И ТипЗнч(Параметр) = Тип("Структура") Тогда
		Если Параметр.Свойство("ПаузаПередЗавершением") Тогда
			Пауза = Параметр.ПаузаПередЗавершением;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияУдачнаяОтправка() Тогда
		
		ОбщиеДействияЗавершенияОтправки();
		
		Если ЕстьОшибки Тогда
			// Закрываем текущую форму и открываем форму с ошибками.
			ПодключаемыйЗакрытьФорму();
		КонецЕсли;
		
		ЗакрытьБезДальнейшихДействий = Истина;
		
		ПаузаПередОтображениемНовойИнформации(
			"ОтобразитьВыполнениеВсехЭтапов",
			Неопределено,
			Пауза);
		
		ПараметрыВыводаТекста.ЗавершенУспешно = Истина;
		ПаузаПередОтображениемНовойИнформации(
			"ВывестиПоясняющийТекстИЗаголовокПриЗавершеннойОтправке",
			ПараметрыВыводаТекста,
			Пауза);
		
	ИначеЕсли ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияНеУдачнаяОтправка() Тогда
		
		ОбщиеДействияЗавершенияОтправки();
		
		Если КоличествоОшибокОтменыДействия = КоличествоОшибок Тогда
			// Пользователь отказался от ввода пароля и это единственная причина, по которой отправка не выполнилась.
			ЗавершитьБезДальнейшихДействий();
		Иначе
			ПаузаПередОтображениемНовойИнформации(
				"ВывестиПоясняющийТекстИЗаголовокПриЗавершеннойОтправке",
				ПараметрыВыводаТекста,
				Пауза);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Используется в следующих случаях:
//   Если пользователь отказался от ввода пароля и это единственная причина, по которой отправка не выполнилась.
//
&НаКлиенте
Процедура ЗавершитьБезДальнейшихДействий()

	РазрешитьЗакрыватьФорму();
	ЗакрытьБезДальнейшихДействий = Истина;
	
	ПодключаемыйЗакрытьФорму();

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВсеОшибки()
	
	Ошибки 				= ДлительныеОперацииОбменаСБанкамиКлиент.ОшибкиКлиентСервер();
	КоличествоОшибок	= Ошибки.Количество();
	ЕстьОшибки 			= КоличествоОшибок > 0;
	
	Если ЭтоОтправка(ПараметрыРежима) Тогда
		КоличествоОшибокОтменыДействия =
			ДлительныеОперацииОбменаСБанкамиКлиентСервер.КоличествоОшибокОтменыДействия(Ошибки);
	КонецЕсли;
	
	// Для того, чтобы в формах, имеющих панель с ошибками, ошибки сохранялись до следующего обмена.
	Если ЕстьОшибки И ЭтоОбмен(ПараметрыРежима) Тогда
		СведенияПоОшибкам = ДополнительныеПараметрыОперации();
		ДлительныеОперацииОбменаСБанкамиВызовСервера.
			СохранитьОшибкиПоследнегоОбмена(СведенияПоОшибкам);
	КонецЕсли;
	
	Если НЕ ЕстьОшибки Тогда
		ДлительныеОперацииОбменаСБанкамиВызовСервера.
			СохранитьОшибкиПоследнегоОбмена(Неопределено);
	КонецЕсли;
	
	Оповестить(
		ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияПолучениеВсехОшибокОперации());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемыйЗакрытьФорму()
	
	ДлительныеОперацииОбменаСБанкамиКлиент.
		ОчиститьПараметрыДлительнойОтправкиКлиентСервер();
	СбросПараметровВыполнен = Истина;
	
	Если ЭтоАвтозапрос Тогда
		РазрешитьЗакрыватьФорму();
	КонецЕсли;
	
	Если Открыта() Тогда
		
		Результат = ДополнительныеПараметрыОперации();
		Закрыть(Результат);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьЗакрыватьФорму()
	
	// Форму не закрываем, но разрешаем закрыть вручную. 
	РазрешитьЗакрытиеФормы = Истина;

	// Кнопку закрытия показываем в самом конце, когда уже выполнены все действия.
	Элементы.ФормаЗакрыть.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаменитьДвойнойПробел(Знач Строка)
	
	Пока СтрНайти(Строка, "  ") <> 0 Цикл
		Строка = СокрЛП(СтрЗаменить(Строка, "  ", " "));
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

&НаСервере
Процедура ОбработатьВходныеПараметры(Параметры)

	Параметры.Свойство("ИдентификаторФормыПолучателя", ИдентификаторФормыПолучателя);
	Параметры.Свойство("АдресДереваНовыхСобытий", АдресДереваНовыхСобытий);
	
	Параметры.Свойство("ПараметрыРежима", ПараметрыРежима);
	
	Если Параметры.Свойство("ЗаголовокПредмета")
		И НЕ ПустаяСтрока(Параметры.ЗаголовокПредмета) Тогда
		ЗаголовокПредмета = Параметры.ЗаголовокПредмета;
	Иначе
		ЗаголовокПредмета = "Предмет";
	КонецЕсли;
	
	Если ПараметрыРежима = Неопределено Тогда
		ПараметрыРежима = ДлительныеОперацииОбменаСБанкамиКлиентСервер.
			РежимУниверсальноеОжидание();
	КонецЕсли;
	
	Если ЭтоОбмен(ПараметрыРежима) ИЛИ ЭтоРасшифровка(ПараметрыРежима) Тогда
		
		РазрешитьЗакрытиеФормы = Параметры.РазрешитьЗакрытиеФормы;
		ОбработатьВходныеПараметрыОбновления(Параметры);
		
	ИначеЕсли ЭтоУниверсальноеОжидание(ПараметрыРежима) Тогда
		
		ВыводитьПроценты = Истина;
		Заголовок = ПараметрыРежима.Заголовок;
		Элементы.ПоясняющийТекст.Заголовок = ПараметрыРежима.Надпись;
		РазрешитьЗакрытиеФормы = Параметры.РазрешитьЗакрытиеФормы;
		
	Иначе
		
		ОбработатьВходныеПараметрыОтправки(Параметры);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоВебКлиент()
		И НЕ ЭтоРасшифровка(ПараметрыРежима) Тогда
		ВыводитьПроценты = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВходныеПараметрыОбновления(Параметры)

	ВыводитьПроценты 					= Параметры.ВыводитьПроценты;
	Организации 			 			= Параметры.Организации;
	ОбщееКоличествоЭтапов 				= Параметры.ОбщееКоличествоЭтапов;
	Этапы 								= Параметры.ЭтапыОбмена;
	
	ВыводитьОрганизациюВНадпись = НЕ ИспользуетсяОднаОрганизация;
	
	Предмет = Параметры.Предмет;
	Сервис  = Параметры.Сервис;
	ПолучитьСведенияОПредмете();
	ОпределитьДокументооборотПредмета();
	
	Если ЭтоРасшифровка(ПараметрыРежима) Тогда
		ТекущаяОрганизация = Организации;
	Иначе
		Если Параметры.Свойство("ОповещенияОбмена") Тогда
			ОповещенияОбмена.Загрузить(Параметры.ОповещенияОбмена);
		Иначе
			// Заполняем таблицу этапов.
			ЗаполнитьТаблицуОповещений(Организации, Этапы);
		КонецЕсли;
		ОбщееКоличествоЭтапов = ОповещенияОбмена.Количество();
		
		Если ОповещенияОбмена.Количество() >= 1 Тогда
			ТекущаяОрганизация = ОповещенияОбмена[0].Организация;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоОбмен(ПараметрыРежима) И НЕ ЭтоРасшифровка(ПараметрыРежима) Тогда
		Параметры.Свойство("РезультатОтправки", РезультатОтправки);
		ВывестиПоясняющийТекстПриВыполняющейсяОперации(ЭтотОбъект, ИмяЭтапаОбмена, ПредставлениеЭтапаОбмена);
	КонецЕсли;
	
	
	Если ЭтоОбмен(ПараметрыРежима) Тогда
		// Очистка ошибок в красной панели.
		ДлительныеОперацииОбменаСБанкамиВызовСервера.СохранитьОшибкиПоследнегоОбмена(Неопределено);
		ИдентификаторФоновогоЗаданияОбмена = Параметры.ИдентификаторФоновогоЗаданияОбмена;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьВходныеПараметрыОтправки(Параметры)

	ЭтоОтправка 	 = Истина;
	ВыводитьПроценты = Истина;
	
	Предмет = Параметры.Предмет;
	ПолучитьСведенияОПредмете();
	
	ОбщееКоличествоЭтапов = Параметры.ОбщееКоличествоЭтапов;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПредмете()
	
	Если Предмет = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СведенияОПредмете 	= УниверсальныйОбменСБанками.СведенияОПредмете(Сервис, Предмет);
	
	НаименованиеБанка 					= Строка(СведенияОПредмете.Банк);
	ТекущаяОрганизация					= СведенияОПредмете.Организация;
	НаименованиеПредмета 		 		= УниверсальныйОбменСБанками.ПредставлениеПредмета(Сервис, Предмет, Истина);
	
	// Получение параметров прорисовки
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолучатьДаты", Ложь);
	ДополнительныеПараметры.Вставить("ПолучатьОшибкиОтправки", Истина);
	
	СостояниеОтчета = ТекущийЭтапОтправки(Предмет);
	
	Если СостояниеОтчета <> Неопределено Тогда
		ПредыдущееСостояниеОтчета = СостояниеОтчета.ТекстНадписи;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОпределитьДокументооборотПредмета()
	
	Документообороты = УниверсальныйОбменСБанками.ДокументооборотыПоПредмету(Предмет);
	Если Документообороты.Количество() > 0 Тогда
		Документооборот = Документообороты[0];
	Иначе
		Документооборот = Справочники.ДокументооборотыОбменаСБанками.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТекущийЭтапОтправки(Предмет)
	
	// Получение параметров прорисовки
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолучатьДаты", Ложь);
	ДополнительныеПараметры.Вставить("ПолучатьОшибкиОтправки", Истина);
	
	ТекущееСостояние = Неопределено;
	
	ОпределитьДокументооборотПредмета();
	Если НЕ Документооборот.Пустая() Тогда
		ТекущееСостояние = УниверсальныйОбменСБанками.ТекущееСостояниеДокументооборота(
			Документооборот,
			ДополнительныеПараметры);
	КонецЕсли;
		
	Если ТекущееСостояние <> Неопределено  Тогда
		Возврат ТекущееСостояние.ТекущийЭтапОтправки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуОповещений(Организации, Этапы)
	
	Если НЕ ВыводитьПроценты Тогда
		Возврат;
	КонецЕсли;
	
	// Этапы были переданы явно.
	Если ЗначениеЗаполнено(Этапы) Тогда
		Для каждого Этап Из Этапы Цикл
			ДобавитьНовоеОповещение(
				Этап.ИмяСобытия,
				Этап.Организация,
				Этап.Банк,
				Этап.Документооборот,
				Этап.ВесЭтапа,
				Этап.ПроизвольнаяАналитика);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ЭтоОбменИзФормыСпискаПредметов = ЭтоОбмен(ПараметрыРежима) И ПараметрыРежима.ЭтоОбменИзФормыСпискаПредметов;
	
	ВесЭтапаПоУмолчанию = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВесЭтапаПоУмолчанию();
	
	Если ЭтоОбменИзФормыСпискаПредметов Тогда
		ОрганизацииНабор = Новый Соответствие;
		ОжидающиеОтветаДокументообороты = УниверсальныйОбменСБанками.ОжидающиеОтветаДокументообороты(Сервис);
		КоличествоОжидающихОтвета = ОжидающиеОтветаДокументообороты.Количество();
		Для каждого ДанныеДокументооборота Из ОжидающиеОтветаДокументообороты Цикл
			ДобавитьНовоеОповещение(
				ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаПолучениеВходящих(),
				ДанныеДокументооборота.Организация,
				ДанныеДокументооборота.Банк,
				ДанныеДокументооборота.Ссылка,
				ВесЭтапаПоУмолчанию / КоличествоОжидающихОтвета);
			ОрганизацииНабор.Вставить(ДанныеДокументооборота.Организация, Истина);
		КонецЦикла;
		Организации = Новый Массив;
		Для каждого КлючЗначение Из ОрганизацииНабор Цикл
			Организации.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Организация Из Организации Цикл
		Если ЭтоОбменИзФормыСпискаПредметов Тогда
			ДобавитьНовоеОповещение(
				ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаРасшифровкаСообщений(),
				Организация);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовоеОповещение(
		ИмяСобытия,
		Организация,
		Банк = Неопределено,
		Документооборот = Неопределено,
		Знач ВесЭтапа = 0,
		ПроизвольнаяАналитика = Неопределено,
		ИндексЭтапа = Неопределено)
		
	Если ВесЭтапа = 0 Тогда
		ВесЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВесЭтапаПоУмолчанию();
	КонецЕсли;
	
	Если ИндексЭтапа <> Неопределено Тогда
		НоваяСтрока = ОповещенияОбмена.Вставить(ИндексЭтапа);
	Иначе
		НоваяСтрока = ОповещенияОбмена.Добавить();
	КонецЕсли;
	
	НоваяСтрока.ИмяСобытия 				= ИмяСобытия;
	НоваяСтрока.Организация 			= Организация;
	НоваяСтрока.Документооборот			= Документооборот;
	НоваяСтрока.Банк 					= Банк;
	НоваяСтрока.ВесЭтапа 				= ВесЭтапа;
	НоваяСтрока.ПроизвольнаяАналитика 	= ПроизвольнаяАналитика;
	
	СуммарныйВесЭтаповОбмена = СуммарныйВесЭтаповОбмена + ВесЭтапа;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьСменуЭтапаОбмена(Параметр)
	
	ВызватьМетодыОбработчикаОжиданияПаузы(2);
	
	ИмяЭтапаОбмена = Параметр.Имя;
	ПредставлениеЭтапаОбмена = Параметр.Представление;
	ПаузаПередОтображениемНовойИнформации("ОтработатьСменуЭтапаОбмена",
		Параметр,
		Параметр.ДлительностьПаузы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьСменуЭтапаОбменаПослеПаузы(Параметр)
	
	ОпределитьКоличествоПройденныхЭтаповОбмена();
	ПометитьЭтапыПройденными(Параметр);
	
	ВывестиПоясняющийТекстПриВыполняющейсяОперации(ЭтотОбъект, ИмяЭтапаОбмена, ПредставлениеЭтапаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьИзменениеПризнакаЧтенияСообщенийФоновогоЗадания(Параметр)
	
	ПодключаемыйПрочитатьСообщенияФоновыхЗаданий();
	
	Если Параметр.ПризнакЧтенияСообщенийФоновогоЗадания Тогда
		ПодключитьОбработчикОжидания("ПодключаемыйПрочитатьСообщенияФоновыхЗаданий", ИнтервалЧтенияСообщенийФоновыхЗаданий(), Истина);
	КонецЕсли;
	
	ТребуетсяЗапускОбработчикаЧтенияСообщенийФоновогоЗадания = Параметр.ПризнакЧтенияСообщенийФоновогоЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьДобавлениеЭтапа(ПараметрыЭтапа)
	
	ДобавитьНовоеОповещение(
		ПараметрыЭтапа.ИмяСобытия,
		ПараметрыЭтапа.Организация,
		ПараметрыЭтапа.Банк,
		ПараметрыЭтапа.Документооборот,
		ПараметрыЭтапа.ВесЭтапа,,
		ПараметрыЭтапа.ИндексЭтапа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьУточнениеЭтапа(ПараметрыУточнения)
	
	ИмяСобытия = ПараметрыУточнения.ИмяСобытия;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяСобытия", ИмяСобытия);
	
	Строки = ОповещенияОбмена.НайтиСтроки(Отбор);
	ВесСтрок = 0;
	Для каждого Строка Из Строки Цикл
		ВесСтрок = ВесСтрок + Строка.ВесЭтапа;
		ОповещенияОбмена.Удалить(Строка);
	КонецЦикла;
	
	Этапы = ПараметрыУточнения.ЭтапыСобытия;
	Если Этапы.Количество() = 0 Тогда
		ВесЭтапа = 1;
	Иначе
		ВесЭтапа = ВесСтрок / Этапы.Количество();
	КонецЕсли;
	
	Для каждого ПараметрыЭтапа Из Этапы Цикл
		ДобавитьНовоеОповещение(
			ИмяСобытия,
			ПараметрыЭтапа.Организация,
			ПараметрыЭтапа.Банк,
			ПараметрыЭтапа.Документооборот,
			ВесЭтапа);
	КонецЦикла;
	
	РассчитатьСуммарныйВесЭтапов();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммарныйВесЭтапов()
	
	СуммарныйВесЭтаповОбмена = 0;
	Для каждого Этап Из ОповещенияОбмена Цикл
		СуммарныйВесЭтаповОбмена = СуммарныйВесЭтаповОбмена + Этап.ВесЭтапа;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьСменуЭтапаРасшифровки(Параметр)

	Если Параметр.Свойство("ТекстСообщения") Тогда
		Элементы.ПоясняющийТекст.Заголовок = Параметр.ТекстСообщения;
	Иначе
		КоличествоПройденныхЭтапов 	= Параметр.КоличествоПройденныхЭтапов;
		ОбщееКоличествоЭтапов 		= Параметр.ОбщееКоличествоЭтапов;
		
		УстановитьТекущуюОрганизацию(Параметр.ТекущаяОрганизация);
		
		ВывестиПоясняющийТекстПриВыполняющейсяОперации(ЭтотОбъект, ИмяЭтапаОбмена);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПометитьЭтапыПройденными(Параметр, ПометитьВсеЭтапы = Ложь)
	
	Отбор = Новый Структура();
	
	Если НЕ ПометитьВсеЭтапы Тогда
		ДобавитьУсловиеОтбора(Отбор, "ИмяСобытия", 		Параметр.Имя);
		ДобавитьУсловиеОтбора(Отбор, "Документооборот", Параметр.Документооборот);
		ДобавитьУсловиеОтбора(Отбор, "Банк", 			Параметр.Банк);
		ДобавитьУсловиеОтбора(Отбор, "Организация", 	Параметр.Организация);
	КонецЕсли;
	
	Этапы = ОповещенияОбмена.НайтиСтроки(Отбор);
	Для каждого Этап Из Этапы Цикл
		Этап.ЭтапПройден 	= Истина;
	КонецЦикла;
	
	// Для режима обмена из формы предмета можно менять организацию этапа.
	Если Параметр <> Неопределено
		И ЭтоОбмен(ПараметрыРежима)
		И ПараметрыРежима.ЭтоОбменИзФормыПредмета
		И ЗначениеЗаполнено(Параметр.Организация) Тогда
			УстановитьТекущуюОрганизацию(Параметр.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУсловиеОтбора(Отбор, Ключ, Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Отбор.Вставить(Ключ, Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьКоличествоПройденныхЭтаповОбмена()
	
	ОтборПройденныхЭтапов 		= Новый Структура("ЭтапПройден", Истина);
	ПройденныеЭтапы 			= ОповещенияОбмена.НайтиСтроки(ОтборПройденныхЭтапов);
	КоличествоПройденныхЭтапов 	= ПройденныеЭтапы.Количество();
	
	ВесПройденныхЭтаповОбмена = 0;
	Для каждого Этап Из ПройденныеЭтапы Цикл
		ВесПройденныхЭтаповОбмена = ВесПройденныхЭтаповОбмена + Этап.ВесЭтапа;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область НовыеСообщения

&НаСервере
Функция ЕстьИзмененияВДеревеНовыхПослеОбмена()
	
	НовоеДеревоНовых = РеквизитФормыВЗначение("Новое");
	
	Если ЭтоАдресВременногоХранилища(АдресДереваНовыхСобытий) Тогда
		// Дерево новых уже было сформировано перед вызовом формы, извлечем его из временного хранилища.
		НовоеДеревоНовых = ПолучитьИзВременногоХранилища(АдресДереваНовыхСобытий);
	ИначеЕсли ЭтоРасшифровка(ПараметрыРежима) Тогда
		УниверсальныйОбменСБанками.ЗаполнитьДеревоНовое(Сервис, НовоеДеревоНовых, Истина, Истина);
	Иначе
		УниверсальныйОбменСБанками.ЗаполнитьДеревоНовое(Сервис, НовоеДеревоНовых, Ложь, Истина);
	КонецЕсли;
	
	// Сравнение
	УдалитьИзДереваТекущуюСсылку(НовоеДеревоНовых);
	
	ЕстьИзмененияВНовыхСообщениях = УниверсальныйОбменСБанками.ЕстьИзмененияВДеревеНовых(НовоеДеревоНовых);
	
	ЗначениеВРеквизитФормы(НовоеДеревоНовых, "Новое");
	
	// Полученные сообщения, обработанные запросы, завершенные отправки и незавершенные отправки.
	// Если после обмена есть только незавершенные отправки, то при переключении на форму списка предметов
	// не понятно, что изменилось. Для таких случаев будем пользователю специально сообщать, что 
	// изменились состояния только незавершенных отправок.
	Если ЕстьИзмененияВНовыхСообщениях Тогда
		ЕстьТолькоНезавершенныеОтправки = ЕстьТолькоНезавершенныеОтправки();
		ДанныеГрупп = УниверсальныйОбменСБанками.ГруппыСобытийСервиса(Сервис);
		УниверсальныйОбменСБанкамиКлиентСервер.ОпределитьКоличествоНовых(НовоеДеревоНовых.Строки, ДанныеГрупп);
	КонецЕсли;
	
	Возврат ЕстьИзмененияВНовыхСообщениях И НЕ ЕстьТолькоНезавершенныеОтправки;
	
КонецФункции

&НаСервере
Процедура УдалитьИзДереваТекущуюСсылку(НовоеДеревоНовых)

	НовоеДеревоНовых.Колонки.Добавить("НужноУдалить");
	
	// Если обмен выполнялся из отчета, то в дереве новых этот отчет не показываем.
	Если ЗначениеЗаполнено(Предмет) Тогда
		УдаляемаяСтрока = НовоеДеревоНовых.Строки.Найти(Предмет, "Предмет");
		Если УдаляемаяСтрока <> Неопределено Тогда
			УдаляемаяСтрока.НужноУдалить = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НужноУдалить", Истина);
	
	// Удаляем со всех самых нижних уровней, только в следующий проход - с верхнего.
	Для Каждого Строка1Уровня Из НовоеДеревоНовых.Строки Цикл
		
		СтрокиКоторыеНужноУдалить = Строка1Уровня.Строки.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаКоторуюНужноУдалить Из СтрокиКоторыеНужноУдалить Цикл
			Строка1Уровня.Строки.Удалить(СтрокаКоторуюНужноУдалить);
		КонецЦикла;
		
	КонецЦикла;
	
	// Удаляем с верхнего уровня.
	СтрокиКоторыеНужноУдалить = НовоеДеревоНовых.Строки.НайтиСтроки(Отбор);
	Для Каждого СтрокаКоторуюНужноУдалить Из СтрокиКоторыеНужноУдалить Цикл
		НовоеДеревоНовых.Строки.Удалить(СтрокаКоторуюНужноУдалить);
	КонецЦикла;
	
	НовоеДеревоНовых.Колонки.Удалить("НужноУдалить");

КонецПроцедуры

&НаСервере
Функция ЕстьТолькоНезавершенныеОтправки() Экспорт
	
	ЕстьПолученныеСообщения   = Ложь;
	ЕстьОбработанныеЗапросы   = Ложь;
	ЕстьЗавершенныеОтправки   = Ложь;
	ЕстьНезавершенныеОтправки = Ложь;
	
	СтрокиДерева = Новое.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения Тогда
			
			Если СтрокаДерева.НеПрочитано И ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
				ЕстьПолученныеСообщения = Истина;
			КонецЕсли;
				
		ИначеЕсли СтрокаДерева.Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы Тогда 
			
			Если СтрокаДерева.НеПрочитано И ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
				 ЕстьОбработанныеЗапросы = Истина;
			КонецЕсли;
			
		ИначеЕсли СтрокаДерева.Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки Тогда 
			
			Если СтрокаДерева.НеПрочитано И ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
				ЕстьЗавершенныеОтправки = Истина;
			КонецЕсли;
		
		ИначеЕсли СтрокаДерева.Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда 
			
			Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
				ЕстьНезавершенныеОтправки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВДеревеТолькоНезавершенныеОтправки = НЕ ЕстьПолученныеСообщения 
		И НЕ ЕстьОбработанныеЗапросы
		И НЕ ЕстьЗавершенныеОтправки
		И ЕстьНезавершенныеОтправки;

	Возврат ВДеревеТолькоНезавершенныеОтправки;
	
КонецФункции

#КонецОбласти

#КонецОбласти