
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимРасшифровки = Параметры.Расшифровка <> Неопределено;
	
	Если ЗначениеЗаполнено(Параметры.ИмяМодуляРасшифровки) Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль(Параметры.ИмяМодуляРасшифровки);
		Модуль.ПриФормированииРасшифровкиРегламентированногоОтчета(ЭтотОбъект, ОтчетТабличныйДокумент, Отказ);
	Иначе
		
		Если ПустаяСтрока(Параметры.ИмяОтчетаРасшифровки)
			Или ПустаяСтрока(Параметры.ИмяСКД)
			Или Не ЗначениеЗаполнено(Параметры.ИДИменПоказателей) Тогда
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если Параметры.Свойство("СтруктураРасшифровки") Тогда
			ПараметрыОткрытия = Параметры.СтруктураРасшифровки;
			ИнициализироватьПараметрыРасшифровки(ПараметрыОткрытия);
		Иначе
			ПараметрыОткрытия = Параметры;
		КонецЕсли;
		
		ОтчетРасшифровка = Отчеты[ПараметрыОткрытия.ИмяОтчетаРасшифровки].Создать();
		ОтчетРасшифровка.СформироватьОтчетРасшифровку(ПараметрыОткрытия, ОтчетТабличныйДокумент);
		
		Заголовок = ПараметрыОткрытия.ЗаголовокРасшифровки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокументаОтчетТабличныйДокумент

&НаКлиенте
Процедура РасшифровкаПоказателейОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	Данные = ДанныеЭлементаРасшифровки(Расшифровка);
	
	Если Данные.ЭтоСсылка Или Данные.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		
		ПоказатьЗначение(, Данные.Значение);
		
	ИначеЕсли Данные.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда
	
		ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ОтчетДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Данные", Данные);
		ДополнительныеПараметры.Вставить("Расшифровка", Расшифровка);
		ДополнительныеПараметры.Вставить("ОбработкаРасшифровки", ОбработкаРасшифровки);
		Обработчик = Новый ОписаниеОповещения("ВыполнитьРасшифровку", ЭтотОбъект, ДополнительныеПараметры);
		
		ОбработкаРасшифровки.ПоказатьВыборДействия(Обработчик, Расшифровка, , , Истина, Элементы.ОтчетТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПоказателейОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	Данные = ДанныеЭлементаРасшифровки(Расшифровка);
	
	ОсновноеМеню = Новый Массив;
	ОсновноеМеню.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	
	КонтекстноеМеню = Новый СписокЗначений;
	КонтекстноеМеню.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение, НСтр("ru = 'Открыть';
																								|en = 'Open'"));

	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ОтчетДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Данные", Данные);
	ДополнительныеПараметры.Вставить("Расшифровка", Расшифровка);
	ДополнительныеПараметры.Вставить("ОбработкаРасшифровки", ОбработкаРасшифровки);
	
	Обработчик = Новый ОписаниеОповещения("ВыполнитьРасшифровку", ЭтотОбъект, ДополнительныеПараметры);
	ОбработкаРасшифровки.ПоказатьВыборДействия(Обработчик, Расшифровка, ОсновноеМеню, КонтекстноеМеню,, Элементы.ОтчетТабличныйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьПараметрыРасшифровки(ПараметрыОткрытия)
	
	Если РежимРасшифровки Тогда
		ПараметрыОткрытия.Вставить("АдресСхемыРасшифровки", ПараметрыОткрытия.АдресСхемы);
	КонецЕсли;
	
	ОтчетДанныеРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресСхемы = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("АдресСхемы", АдресСхемы);
	ПараметрыОткрытия.Вставить("ОтчетДанныеРасшифровки", ОтчетДанныеРасшифровки);
	
	Если ТипЗнч(ПараметрыОткрытия) = Тип("Структура") Тогда
		СтруктураРасшифровки = Новый ФиксированнаяСтруктура(ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасшифровку(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	Если ВыполненноеДействие = Неопределено
		Или ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ДополнительныеПараметры.Данные;
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		ПоказатьЗначение(, Данные.Значение);
	ИначеЕсли ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда
		ДополнительныеПараметры.Вставить("Настройки", ПараметрВыполненногоДействия);
		ОткрытьФормуОтчета(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчета(ПараметрыОткрытия)
	
	Расшифровка = ПараметрыОткрытия.Расшифровка;
	
	Расшифровка = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ОтчетДанныеРасшифровки, ПараметрыОткрытия.Расшифровка, ПараметрыОткрытия.Настройки);
	
	СтруктураПараметров = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(СтруктураРасшифровки, Ложь);
	СтруктураПараметров.Вставить("Расшифровка", Расшифровка);
	СтруктураПараметров.Вставить("АдресСхемы", АдресСхемы);
	Если СтрНайти(Заголовок, "Расшифровка") = 0 Тогда
		ПредставлениеВарианта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Расшифровка)';
																							|en = '%1 (Details)'"), Заголовок);
		СтруктураПараметров.Вставить("ЗаголовокРасшифровки", ПредставлениеВарианта);
	КонецЕсли;
	
	ПараметрыФормы = ЗарплатаКадрыКлиент.ЗаполнитьПараметрыФормыРасшифровкиОтчетности(СтруктураПараметров);
	
	ОткрытьФорму("ОбщаяФорма.РасшифровкаРегламентированногоОтчетаЗарплата", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ДанныеЭлементаРасшифровки(Расшифровка) Экспорт 
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемы);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек[СтруктураРасшифровки.ИмяСКД].Настройки);
	
	Документ = ОтчетТабличныйДокумент;
	ПолеДокумента = Элементы.ОтчетТабличныйДокумент;
	
	ВыделенныеОбластиДокумента = ПолеДокумента.ПолучитьВыделенныеОбласти();
	
	Данные = ПолучитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
	ЭлементРасшифровки = Данные.Элементы.Получить(Расшифровка);
	
	Родители = ЭлементРасшифровки.ПолучитьРодителей();
	Родитель = ?(Родители.Количество() = 0, Неопределено, Родители[0]);
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка")
		Или ТипЗнч(Родитель) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда 
	
		ТипЭлементаРасшифровки = ВариантыОтчетовСлужебныйКлиентСервер.ТипЭлементаРасшифровкиГруппировка();
	Иначе
		ТипЭлементаРасшифровки = "Реквизит";
	КонецЕсли;
	
	ДанныеЭлементаРасшифровки = Новый Структура;
	ДанныеЭлементаРасшифровки.Вставить("Тип", ТипЭлементаРасшифровки);
	ДанныеЭлементаРасшифровки.Вставить("Настройки", Данные.Настройки);
	ДанныеЭлементаРасшифровки.Вставить("Отбор", ОтборЭлементаРасшифровки(ЭлементРасшифровки));
	ДанныеЭлементаРасшифровки.Вставить("Отборы", ОтборыВыделенныхЭлементовРасшифровки(Документ, ВыделенныеОбластиДокумента, Данные));
	ДанныеЭлементаРасшифровки.Вставить("ОсновноеДействие", ЭлементРасшифровки.ОсновноеДействие);
	
	Поля = ЭлементРасшифровки.ПолучитьПоля();
	
	Если Поля.Количество() = 0 Тогда
		
		ДанныеЭлементаРасшифровки.Вставить("Значение", Неопределено);
		ДанныеЭлементаРасшифровки.Вставить("Значения", Неопределено);
		ДанныеЭлементаРасшифровки.Вставить("Поле", "");
		
	Иначе 
		
		СвойстваПоля = Поля[0];
		
		ДанныеЭлементаРасшифровки.Вставить("Значение", ?(СвойстваПоля.Значение = Null, Неопределено, СвойстваПоля.Значение));
		ДанныеЭлементаРасшифровки.Вставить("Значения", ДанныеЭлементаРасшифровки.Отборы[СвойстваПоля.Поле]);
		ДанныеЭлементаРасшифровки.Вставить("Поле", СвойстваПоля.Поле);
		
	КонецЕсли;
	
	ДанныеЭлементаРасшифровки.Вставить("ЭтоСсылка", ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеЭлементаРасшифровки.Значение)));
	
	ДоступныеВидыСравнения = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ДанныеЭлементаРасшифровки.Поле) Тогда
		
		ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(
			Новый ПолеКомпоновкиДанных(ДанныеЭлементаРасшифровки.Поле));
		
		Если ДоступноеПоле = Неопределено Тогда
			
			ДанныеЭлементаРасшифровки.Вставить("ТипЗначения", Тип("Неопределено"));
			ДанныеЭлементаРасшифровки.Вставить("Ресурс", Ложь);
			
		Иначе
			
			ДанныеЭлементаРасшифровки.Вставить("ТипЗначения", ДоступноеПоле.ТипЗначения);
			ДанныеЭлементаРасшифровки.Вставить("Ресурс", ДоступноеПоле.Ресурс);
			
			Если ДанныеЭлементаРасшифровки.Значение = Неопределено Тогда 
				
				Область = ПолеДокумента.ТекущаяОбласть;
				
				Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
					
					ДанныеЭлементаРасшифровки.Значение = ДоступноеПоле.ТипЗначения.ПривестиЗначение(Область.Текст);
					ДанныеЭлементаРасшифровки.Значения = ПриведенныеЗначенияВыделенныхОбластей(
						Документ, ВыделенныеОбластиДокумента, ДоступноеПоле.ТипЗначения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		ДоступноеПолеОтбора = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(
			Новый ПолеКомпоновкиДанных(ДанныеЭлементаРасшифровки.Поле));
		
		Если ДоступноеПолеОтбора <> Неопределено Тогда 
			ДоступныеВидыСравнения = ДоступноеПолеОтбора.ДоступныеВидыСравнения;
		КонецЕсли;
		
	Иначе
		
		ДанныеЭлементаРасшифровки.Вставить("ТипЗначения", Тип("Неопределено"));
		ДанныеЭлементаРасшифровки.Вставить("Ресурс", Ложь);
		
	КонецЕсли; 
	
	Если ДоступныеВидыСравнения.Количество() = 0 Тогда 
		
		Для Каждого Вид Из ВидСравненияКомпоновкиДанных Цикл 
			ДоступныеВидыСравнения.Добавить(Вид);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДоступныеВидыСравнения.НайтиПоЗначению("СнятьФильтр") = Неопределено Тогда 
		ДоступныеВидыСравнения.Вставить(0, "СнятьФильтр", НСтр("ru = 'Снять фильтр';
																|en = 'Clear filter'"));
	КонецЕсли;
	
	Если ДоступныеВидыСравнения.НайтиПоЗначению("ФильтроватьЕще") = Неопределено Тогда 
		ДоступныеВидыСравнения.Добавить("ФильтроватьЕще", НСтр("ru = 'Еще...';
																|en = 'More…'"));
	КонецЕсли;
	
	ДанныеЭлементаРасшифровки.Вставить("ДоступныеВидыСравнения", ДоступныеВидыСравнения);
	
	Возврат ДанныеЭлементаРасшифровки;
	
КонецФункции

&НаСервере
Функция ПриведенныеЗначенияВыделенныхОбластей(Документ, ВыделенныеОбластиДокумента, ТипЗначения)
	
	Результат = Новый СписокЗначений;
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбластиДокумента Цикл
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для НомерСтроки = ВыделеннаяОбласть.Верх По ВыделеннаяОбласть.Низ Цикл 
			
			Область = Документ.Область(НомерСтроки, ВыделеннаяОбласть.Лево, НомерСтроки, ВыделеннаяОбласть.Право);
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
				
				Значение = ТипЗначения.ПривестиЗначение(Область.Текст);
				
				Если Результат.НайтиПоЗначению(Значение) = Неопределено Тогда 
					Результат.Добавить(Значение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОтборЭлементаРасшифровки(ЭлементРасшифровки, Результат = Неопределено)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Соответствие;
	КонецЕсли; 
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		
		Поля = ЭлементРасшифровки.ПолучитьПоля();
		
		Для каждого Поле Из Поля Цикл
			
			Если Поле.Значение = Null Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = Результат[Поле.Поле];
			
			Если Значение = Неопределено Тогда 
				
				Результат.Вставить(Поле.Поле, Поле.Значение);
				Продолжить;
				
			КонецЕсли;
			
			Значения = ОтчетыКлиентСервер.ЗначенияСписком(Значение);
			
			Если Значения.НайтиПоЗначению(Поле.Значение) = Неопределено Тогда 
				Значения.Добавить(Поле.Значение);
			КонецЕсли;
			
			Результат.Вставить(Поле.Поле, Значения);
			
		КонецЦикла; 
	КонецЕсли;
	
	Родители = ЭлементРасшифровки.ПолучитьРодителей();
	
	Для Каждого Родитель Из Родители Цикл
		ОтборЭлементаРасшифровки(Родитель, Результат);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОтборыВыделенныхЭлементовРасшифровки(Документ, ВыделенныеОбластиДокумента, Данные)
	
	Результат = Новый Соответствие;
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбластиДокумента Цикл
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для НомерСтроки = ВыделеннаяОбласть.Верх По ВыделеннаяОбласть.Низ Цикл 
			
			Область = Документ.Область(НомерСтроки, ВыделеннаяОбласть.Лево, НомерСтроки, ВыделеннаяОбласть.Право);
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТипЗнч(Область.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда 
				
				ЭлементРасшифровки = Данные.Элементы.Получить(Область.Расшифровка);
				ОтборЭлементаРасшифровки(ЭлементРасшифровки, Результат);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти