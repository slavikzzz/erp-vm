
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьФормуПоПравам();
	
	// Инициализация констант
	ОснованиеНоменклатура = ПроверитьЗаполнитьНоменклатуру(Параметры);
	ОтборИспользованиеМатериала = "Используется";
	ОтборИспользованиеВидаРабочегоЦентра = "Используется";
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеНоменклатура, "ИспользованиеХарактеристик,Наименование,ТипНоменклатуры");
	
	ХарактеристикиИспользуются = (ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры")
		И РеквизитыНоменклатуры.ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	Если НЕ ХарактеристикиИспользуются Тогда
		Элементы.УправлениеСпецификациямиГруппаХарактеристикаСпецификация.ОтображатьВШапке = Ложь;
		Элементы.ГруппаОтборХарактеристика.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимСпецификацииИзделия") Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Спецификации изделия %1';
									|en = 'Product BOM %1'"), РеквизитыНоменклатуры.Наименование);
		Элементы.СтраницаРазрешенияНаЗамену.Видимость = Ложь;
		Элементы.СтраницаМаршрутныеКарты.Видимость    = Ложь;
		Элементы.СтраницаСтруктураИзделия.Видимость   = Ложь;
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Заголовок = СтрШаблон(НСтр("ru = 'Производство (Номенклатура: ""%1"")';
									|en = 'Apply products to manufacturing (Item: ""%1"")'"), РеквизитыНоменклатуры.Наименование);
	КонецЕсли;
	
	Если РеквизитыНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
		Элементы.СтраницаРазрешенияНаЗамену.Видимость = Ложь;
		Элементы.СтраницаМаршрутныеКарты.Видимость    = Ложь;
	КонецЕсли;
	
	УстановитьСвойстваДинамическогоСпискаРазрешенийНаЗаменуМатериалов();
	РазрешенияУстановитьОтборПоНоменклатуре();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМаршрутныеКарты") Тогда
		УстановитьСвойстваДинамическогоСпискаМаршрутныхКарт();
		МаршрутныеКартыУстановитьОтборПоНоменклатуре(ЭтотОбъект);
	КонецЕсли;

	//++ Устарело_Производство21
	УстановитьСвойстваДинамическогоСпискаПлановыхКалькуляций();
	//-- Устарело_Производство21
	УстановитьСвойстваДинамическогоСпискаПлановыхКалькуляций22();
	
	Элементы.УправлениеСпецификациямиСпецификацияТип.Видимость = УправлениеДаннымиОбИзделиях.ДоступноОписаниеТипаПроизводственногоПроцесса();
	ИнициализацияДереваСпецификаций();
	ЗаполнитьУправлениеСпецификациями();
	
	УстановитьСвойстваДинамическогоСпискаПрименениеВСпецификациях();
	
	УстановитьСвойстваДинамическогоСпискаДоступныхСпецификаций();
	
	Если Параметры.Свойство("ТекущаяСпецификация") Тогда
		СтруктураПоиска = Новый Структура("Спецификация", Параметры.ТекущаяСпецификация);
		СписокСтрок = УправлениеСпецификациями.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Элементы.УправлениеСпецификациями.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСтруктуруИзделия = Истина;
	ДинамическоеСчитывание = Истина;
	
	Элементы.СтраницаПлановыеКалькуляции.Видимость   = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством");
	Элементы.СтраницаПлановыеКалькуляции22.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяТолькоУправлениеПроизводством22") Тогда
		Элементы.СтраницаПлановыеКалькуляции22.Заголовок = НСтр("ru = 'Плановые калькуляции';
																|en = 'Product standard costs'");
	//++ Устарело_Производство21
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользуетсяТолькоУправлениеПроизводством21") Тогда
		Элементы.СтраницаПлановыеКалькуляции.Заголовок = НСтр("ru = 'Плановые калькуляции';
																|en = 'Product standard costs'");
	//-- Устарело_Производство21
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РесурсныеСпецификации" 
		ИЛИ ИмяСобытия = "Запись_ОсновныеМаршрутныеКарты" Тогда
		ОбновитьДанныеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОчиститьСообщения();
	
	ТекущаяСтрока = Элементы.ДеревоСпецификаций.ТекущаяСтрока;
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ФормаВыбораПоНоменклатуре" Тогда
		
		ИзменитьСпецификациюВТекущейСтроке(ТекущаяСтрока, ВыбранноеЗначение);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ОснованиеНоменклатура) Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Форма ""Производство"" используется только в контексте номенклатуры.';
									|en = '""Manufacturing"" form is used only within the context of inventory.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпецификацииДатаПриИзменении(Элемент)
	
	ОбновитьСтруктуруИзделия = Истина;
	
	ЗаполнитьУправлениеСпецификациями();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеХарактеристикаПриИзменении(Элемент)
	
	ОснованиеХарактеристикаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОснованиеХарактеристикаПриИзмененииНаСервере()
	
	ЗаполнитьУправлениеСпецификациями();
	УстановитьСвойстваДинамическогоСпискаПрименениеВСпецификациях();
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацииСтатусПриИзменении(Элемент)
	
	ЗаполнитьУправлениеСпецификациями();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИспользованиеМатериалаПриИзменении(Элемент)
	
	Если ПустаяСтрока(ОтборИспользованиеМатериала) Тогда
		ОтборИспользованиеМатериала = "Используется";
	КонецЕсли; 
	ЗаполнитьУправлениеСпецификациями();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМатериалПриИзменении(Элемент)
	
	ЗаполнитьУправлениеСпецификациями();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИспользованиеВидаРабочегоЦентраПриИзменении(Элемент)
	
	Если ПустаяСтрока(ОтборИспользованиеВидаРабочегоЦентра) Тогда
		ОтборИспользованиеВидаРабочегоЦентра = "Используется";
	КонецЕсли;
	ЗаполнитьУправлениеСпецификациями();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидРабочегоЦентраПриИзменении(Элемент)
	
	ЗаполнитьУправлениеСпецификациями();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныеКартыСтатусПриИзменении(Элемент)
	МаршрутныеКартыУстановитьОтборПоСтатусу(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныеКартыОтветственныйПриИзменении(Элемент)
	МаршрутныеКартыУстановитьОтборПоОтветственному(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныеКартыПодразделениеПриИзменении(Элемент)
	МаршрутныеКартыУстановитьОтборПоПодразделению(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияСтатусПриИзменении(Элемент)
	РазрешенияУстановитьОтборПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияСпецификацияПриИзменении(Элемент)
	РазрешенияУстановитьОтборПоСпецификации();
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияОтветственныйПриИзменении(Элемент)
	РазрешенияУстановитьОтборПоОтветственному();
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцииСтатусПриИзменении(Элемент)
	КалькуляцииУстановитьОтборПоСтатусу(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцииВидПриИзменении(Элемент)
	КалькуляцииУстановитьОтборПоОбъекту(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцииОтветственныйПриИзменении(Элемент)
	КалькуляцииУстановитьОтборПоОтветственному(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаСтруктураИзделия
		И ОбновитьСтруктуруИзделия Тогда
		
		СформироватьДеревоСпецификацийНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДатаПриИзменении(Элемент)
	
	УправлениеДаннымиОбИзделияхКлиент.СохранитьРазвернутыеУровниДерева(ЭтотОбъект);
	
	ДеревоДатаПриИзмененииНаСервере();
	
	УправлениеДаннымиОбИзделияхКлиент.ВосстановитьРазвернутыеУровниДерева(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоДатаПриИзмененииНаСервере()
	
	ЗаполнитьУправлениеСпецификациями();
	
	ДеревоОбновитьСпецификациюНаСервере();
	
	СформироватьДеревоСпецификацийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыводитьЭтапыПриИзменении(Элемент)
	ДеревоИзмененыПараметрыОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыводитьВыходныеИзделияПриИзменении(Элемент)
	ДеревоИзмененыПараметрыОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыводитьМатериалыПриИзменении(Элемент)
	ДеревоИзмененыПараметрыОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыводитьТрудозатратыПриИзменении(Элемент)
	ДеревоИзмененыПараметрыОтбора();
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныеКартыИспользуетсяКакПриИзменении(Элемент)
	
	МаршрутныеКартыУстановитьОтборПоНоменклатуре(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешениеНазначениеНоменклатурыПриИзменении(Элемент)
	
	РазрешенияУстановитьОтборПоНоменклатуре();

КонецПроцедуры

&НаКлиенте
Процедура ПараметрНазначенияНаправлениеДеятельностиПриИзменении(Элемент)
	
	ПриИзмененииЗначенияПараметраНазначенияСпецификаций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрНазначенияПодразделениеДиспетчерПриИзменении(Элемент)
	
	ПриИзмененииЗначенияПараметраНазначенияСпецификаций();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУправлениеСпецификациями

&НаКлиенте
Процедура УправлениеСпецификациямиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеСпецификациямиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.УправлениеСпецификациями.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанные.СпецификацияХарактеристика) 
		И ТекущиеДанные.ТипСтроки = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,ТекущиеДанные.СпецификацияХарактеристика);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМаршрутныеКарты

&НаСервереБезКонтекста
Процедура СписокМаршрутныхКартПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	СписокКлючей = Строки.ПолучитьКлючи();
	Если СписокКлючей.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.МаршрутнаяКарта КАК Ссылка
	|ИЗ
	|	РегистрСведений.ОсновныеМаршрутныеКарты КАК Таблица
	|ГДЕ
	|	Таблица.МаршрутнаяКарта В (&МаршрутныеКарты)
	|	И (Таблица.Номенклатура = &Номенклатура
	|		ИЛИ &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	) И Таблица.МаршрутнаяКарта.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхКарт.Действует)
	|");
	Запрос.УстановитьПараметр("МаршрутныеКарты", СписокКлючей);
	
	ПараметрДанных = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Номенклатура"));
	Если ПараметрДанных <> Неопределено Тогда
		Запрос.УстановитьПараметр("Номенклатура", ПараметрДанных.Значение);
	Иначе
		Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаСписка = Строки[Выборка.Ссылка];
		Для каждого Оформление Из СтрокаСписка.Оформление Цикл
			Оформление.Значение.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСпецификаций

&НаКлиенте
Процедура ДеревоСпецификацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДеревоСпецификацийНоменклатура" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) И 
		ТипЗнч(Элемент.ТекущиеДанные.Номенклатура) <> Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацийПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиДерева",0.2,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацийСпецификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоСпецификаций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыСтрокДереваСпецификаций.ВыходноеИзделие") Тогда
		ИмяТЧ = "ВыходныеИзделия";
	Иначе
		ИмяТЧ = "МатериалыИУслуги";
	КонецЕсли;
	
	ДанныеОбИзделии = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации();
	ДанныеОбИзделии.Номенклатура            = ТекущиеДанные.Номенклатура;
	ДанныеОбИзделии.Характеристика          = ТекущиеДанные.Характеристика;
	ДанныеОбИзделии.НачалоПроизводства      = ДеревоДата;
	ДанныеОбИзделии.ПодразделениеДиспетчер  = ПараметрНазначенияПодразделениеДиспетчер;
	ДанныеОбИзделии.НаправлениеДеятельности = ПараметрНазначенияНаправлениеДеятельности;
	
	УправлениеДаннымиОбИзделияхКлиент.ОткрытьФормуВыбораСпецификацийПоНоменклатуре(
		ДанныеОбИзделии,
		ПараметрыВыбораСпецификаций[ИмяТЧ],
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацийПередРазворачиванием(Элемент, Строка, Отказ)
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ДеревоСпецификацийПередРазворачиванием(ЭтотОбъект, Строка, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацийПередСворачиванием(Элемент, Строка, Отказ)
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ДеревоСпецификацийПередСворачиванием(ЭтотОбъект, Строка, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацийСпецификацияОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоСпецификаций.ТекущаяСтрока;
	ИзменитьСпецификациюВТекущейСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацийХарактеристикаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ДеревоСпецификаций.ТекущаяСтрока;
	ТекущиеДанные = Элементы.ДеревоСпецификаций.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиент.СохранитьРазвернутыеУровниДерева(ЭтотОбъект, ТекущиеДанные);
	
	ДеревоСпецификацийХарактеристикаПриИзмененииНаСервере(ТекущаяСтрока);
	
	УправлениеДаннымиОбИзделияхКлиент.ВосстановитьРазвернутыеУровниДерева(ЭтотОбъект, ТекущиеДанные);

КонецПроцедуры

&НаСервере
Процедура ДеревоСпецификацийХарактеристикаПриИзмененииНаСервере(ТекущаяСтрока)
	
	ТекущиеДанные = ДеревоСпецификаций.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыСтрокДереваСпецификаций.ВыходноеИзделие") Тогда
		ИмяТЧ = "ВыходныеИзделия";
	Иначе
		ИмяТЧ = "МатериалыИУслуги";
	КонецЕсли;
	
	СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
		ЭтотОбъект, ТекущиеДанные, ПараметрыВыбораСпецификаций[ИмяТЧ]);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, Неопределено);
	
	ОбработатьИзменениеРеквизитаСтрокиДереваНаСервере(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацийУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоСпецификаций.ТекущаяСтрока;
	ТекущиеДанные = Элементы.ДеревоСпецификаций.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиент.СохранитьРазвернутыеУровниДерева(ЭтотОбъект, ТекущиеДанные);
	
	ДеревоСпецификацийУпаковкаПриИзмененииНаСервере(ТекущаяСтрока);
	
	УправлениеДаннымиОбИзделияхКлиент.ВосстановитьРазвернутыеУровниДерева(ЭтотОбъект, ТекущиеДанные);

КонецПроцедуры

&НаСервере
Процедура ДеревоСпецификацийУпаковкаПриИзмененииНаСервере(ТекущаяСтрока)
	
	ТекущиеДанные = ДеревоСпецификаций.НайтиПоИдентификатору(ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, Неопределено);
	
	ОбработатьИзменениеРеквизитаСтрокиДереваНаСервере(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацийКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоСпецификаций.ТекущаяСтрока;
	ТекущиеДанные = Элементы.ДеревоСпецификаций.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиент.СохранитьРазвернутыеУровниДерева(ЭтотОбъект, ТекущиеДанные);
	
	ДеревоСпецификацийКоличествоУпаковокПриИзмененииНаСервере(ТекущаяСтрока);
	
	УправлениеДаннымиОбИзделияхКлиент.ВосстановитьРазвернутыеУровниДерева(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоСпецификацийКоличествоУпаковокПриИзмененииНаСервере(ТекущаяСтрока)
	
	ТекущиеДанные = ДеревоСпецификаций.НайтиПоИдентификатору(ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, Неопределено);
	
	ОбработатьИзменениеРеквизитаСтрокиДереваНаСервере(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДоступныхСпецификаций

&НаКлиенте
Процедура СписокДоступныхСпецификацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокДоступныхСпецификаций.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные.Спецификация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандаСпискаУправлениеСпецификациями

&НаКлиенте
Процедура КомандыИзменитьСпецификацию(Команда)
	
	ТекущиеДанные = Элементы.УправлениеСпецификациями.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ТипСтроки <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Спецификация);
	ОткрытьФорму("Справочник.РесурсныеСпецификации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусВРазработке(Команда)
	
	УстановитьСтатусСпецификации("ВРазработке", НСтр("ru = 'В разработке';
													|en = 'Under development'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусДействует(Команда)
	
	УстановитьСтатусСпецификации("Действует", НСтр("ru = 'Действует';
													|en = 'Valid'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусЗакрыта(Команда)
	
	УстановитьСтатусСпецификации("Закрыта", НСтр("ru = 'Закрыта';
												|en = 'Closed'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСравнитьСпецификации(Команда)
	
	СписокИсточников = ПолучитьВыделенныеСпецификацииВСпискеУправлениеСпецификациями();
	Если СписокИсточников.Количество() <> 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокИсточников", СписокИсточников);
		ОткрытьФорму("Обработка.СравнениеСпецификаций.Форма", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоСпецификации(Команда)
	
	ТекущиеДанные = Элементы.УправлениеСпецификациями.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ТипСтроки <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Спецификация", ТекущиеДанные.Спецификация); 
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина); 
	ПараметрыОткрытия.Вставить("РежимОтображения", "Спецификация");
	ОткрытьФорму("Обработка.ДеревоРесурсныхСпецификаций.Форма", ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	ОбновитьДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДерево(Команда)
	
	ОчиститьСообщения();
	
	УправлениеДаннымиОбИзделияхКлиент.СохранитьРазвернутыеУровниДерева(ЭтотОбъект);
	
	СформироватьДеревоСпецификацийНаСервере();
	
	УправлениеДаннымиОбИзделияхКлиент.ВосстановитьРазвернутыеУровниДерева(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"));
	
	ИменаМакетов = "ДеревоСпецификаций";
	ПараметрыПечати = ПараметрыПечатиДереваСпецификаций();
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ДеревоРесурсныхСпецификаций",
		ИменаМакетов,
		ПараметрКоманды,
		ЭтотОбъект,
		ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСкрыватьЗаголовкиГруппировок(Команда)
	
	ДеревоВыводитьЗаголовкиГруппировок = НЕ ДеревоВыводитьЗаголовкиГруппировок;
	
	ДеревоНастроитьПометкиДополнительныхКоманд(ЭтотОбъект);
	
	СформироватьДеревоСпецификацийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыводитьОперацииВместеСЭтапами(Команда)
	
	ДеревоВыводитьОперации = НЕ ДеревоВыводитьОперации;
	
	ДеревоНастроитьПометкиДополнительныхКоманд(ЭтотОбъект);
	
	СформироватьДеревоСпецификацийНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Спецификации

&НаКлиенте
Процедура КопироватьРесурснуюСпецификациюВСпискеСписокСпецификаций()

	ТекущиеДанные = Элементы.СписокСпецификаций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КопироватьРесурснуюСпецификациюВСпискеСписокСпецификацийЗавершение", ЭтотОбъект);
	УправлениеДаннымиОбИзделияхКлиент.КопироватьРесурснуюСпецификацию(ТекущиеДанные.Ссылка, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура КопироватьРесурснуюСпецификациюВСпискеСписокСпецификацийЗавершение(Ссылка, ДополнительныеПараметры) Экспорт

	Если Ссылка <> Неопределено Тогда
		Элементы.СписокСпецификаций.ТекущаяСтрока = Ссылка;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУправлениеСпецификациями(ТекущаяСпецификацияХарактеристика = Неопределено)
	
	Если НЕ ПравоПросмотраСпецификаций Тогда
		Возврат
	КонецЕсли;
	
	// Запомним текущую строку, чтобы потом сделать ее активной
	Если ТекущаяСпецификацияХарактеристика = Неопределено Тогда
		ТекущаяСтрока = Элементы.УправлениеСпецификациями.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = УправлениеСпецификациями.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущаяСпецификацияХарактеристика = ТекущиеДанные.СпецификацияХарактеристика;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеСпецификациями.Очистить();

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	0                             КАК ИндексДанных,
	|	&Номенклатура                 КАК Номенклатура,
	|	&Характеристика               КАК Характеристика,
	|	ДАТАВРЕМЯ(1,1,1)              КАК НачалоПроизводства,
	|	&НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&ПодразделениеДиспетчер       КАК ПодразделениеДиспетчер,
	|
	|	ТабличнаяЧасть.Ссылка                              КАК Спецификация,
	|
	|	ТабличнаяЧасть.Ссылка.НачалоДействия               КАК НачалоДействия,
	|	ТабличнаяЧасть.Ссылка.КонецДействия                КАК КонецДействия,
	|	ТабличнаяЧасть.Ссылка.Код                          КАК Код,
	|
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	ТабличнаяЧасть.Ссылка.Статус                       КАК Статус,
	|	ТабличнаяЧасть.Ссылка.ПометкаУдаления              КАК ПометкаУдаления,
	|
	|	ТабличнаяЧасть.Упаковка                            КАК Упаковка,
	|
	|	ТабличнаяЧасть.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК ЛюбаяНоменклатура,
	|	ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика,
	|
	|	ТабличнаяЧасть.СпособАвтовыбораНоменклатуры   КАК СпособАвтовыбораНоменклатуры,
	|	ТабличнаяЧасть.СпособАвтовыбораХарактеристики КАК СпособАвтовыбораХарактеристики,
	|	ТабличнаяЧасть.Номенклатура                   КАК НоменклатураСпецификации,
	|	ТабличнаяЧасть.Характеристика                 КАК ХарактеристикаСпецификации,
	|
	|	ТабличнаяЧасть.Ссылка.ВариантПодбораВДокументы = ЗНАЧЕНИЕ(Перечисление.ВариантыПодбораСпецификацииВДокументы.Автоматически)
	|		И ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует) КАК ПодбираетсяАвтоматически
	|
	|ПОМЕСТИТЬ ВтСпецификации
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = &Номенклатура
	|
	|ГДЕ
	|	(ТабличнаяЧасть.Номенклатура = &Номенклатура
	|		ИЛИ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И ТабличнаяЧасть.ВидНоменклатуры = СпрНоменклатура.ВидНоменклатуры)
	|	И (ТабличнаяЧасть.Характеристика = &Характеристика
	|		ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	И (ТабличнаяЧасть.Ссылка.Статус = &СпецификацииСтатус
	|		ИЛИ &СпецификацииСтатус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.ПустаяСсылка))
	|	И ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|	И (&НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1) 
	|		ИЛИ ТабличнаяЧасть.Ссылка.НачалоДействия <= &НачалоПроизводства)
	|	И (ТабличнаяЧасть.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|		ИЛИ ТабличнаяЧасть.Ссылка.КонецДействия >= &НачалоПроизводства)
	|	И (ТабличнаяЧасть.НомерСтроки = 1
	|		ИЛИ ТабличнаяЧасть.Ссылка.ЕстьПараметризацияРесурсов = ЛОЖЬ)
	|	И &ТекстУсловиеОтбораПоУпаковке1
	|	И &ТекстУсловиеОтбораПоИспользуемымРесурсам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	0                             КАК ИндексДанных,
	|	&Номенклатура                 КАК Номенклатура,
	|	&Характеристика               КАК Характеристика,
	|	ДАТАВРЕМЯ(1,1,1)              КАК НачалоПроизводства,
	|	&НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&ПодразделениеДиспетчер       КАК ПодразделениеДиспетчер,
	|
	|	ТабличнаяЧасть.Ссылка                              КАК Спецификация,
	|
	|	ТабличнаяЧасть.Ссылка.НачалоДействия               КАК НачалоДействия,
	|	ТабличнаяЧасть.Ссылка.КонецДействия                КАК КонецДействия,
	|	ТабличнаяЧасть.Ссылка.Код                          КАК Код,
	|
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	ТабличнаяЧасть.Ссылка.Статус                       КАК Статус,
	|	ТабличнаяЧасть.Ссылка.ПометкаУдаления              КАК ПометкаУдаления,
	|
	|	ТабличнаяЧасть.Упаковка                            КАК Упаковка,
	|
	|	ТабличнаяЧасть.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК ЛюбаяНоменклатура,
	|	ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика,
	|
	|	ТабличнаяЧасть.СпособАвтовыбораНоменклатуры   КАК СпособАвтовыбораНоменклатуры,
	|	ТабличнаяЧасть.СпособАвтовыбораХарактеристики КАК СпособАвтовыбораХарактеристики,
	|	ТабличнаяЧасть.Номенклатура                   КАК НоменклатураСпецификации,
	|	ТабличнаяЧасть.Характеристика                 КАК ХарактеристикаСпецификации,
	|
	|	ЛОЖЬ КАК ПодбираетсяАвтоматически
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = &Номенклатура
	|
	|ГДЕ
	|	ТабличнаяЧасть.Номенклатура = &Номенклатура
	|	И (ТабличнаяЧасть.Характеристика = &Характеристика
	|		ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	И (ТабличнаяЧасть.Ссылка.Статус = &СпецификацииСтатус
	|		ИЛИ &СпецификацииСтатус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.ПустаяСсылка))
	|	И ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка)
	|	И (&НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1) 
	|		ИЛИ ТабличнаяЧасть.Ссылка.НачалоДействия <= &НачалоПроизводства)
	|	И (ТабличнаяЧасть.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|		ИЛИ ТабличнаяЧасть.Ссылка.КонецДействия >= &НачалоПроизводства)
	|	И ТабличнаяЧасть.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
	|	И ТабличнаяЧасть.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ)
	|	И ТабличнаяЧасть.Ссылка.РазрешитьВыборДляИзделийПобочногоВыхода
	|	И &ТекстУсловиеОтбораПоУпаковке1
	|	И &ТекстУсловиеОтбораПоИспользуемымРесурсам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0                                           КАК ИндексДанных,
	|	&Номенклатура                               КАК Номенклатура,
	|	&Характеристика                             КАК Характеристика,
	|	ДАТАВРЕМЯ(1,1,1)                            КАК НачалоПроизводства,
	|	&НаправлениеДеятельности                    КАК НаправлениеДеятельности,
	|	&ПодразделениеДиспетчер                     КАК ПодразделениеДиспетчер,
	|
	|	ТабличнаяЧасть.Ссылка                       КАК Спецификация,
	|	ТабличнаяЧасть.НачалоДействия               КАК НачалоДействия,
	|	ТабличнаяЧасть.КонецДействия                КАК КонецДействия,
	|	ТабличнаяЧасть.Код                          КАК Код,
	|
	|	ТабличнаяЧасть.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	ТабличнаяЧасть.Статус                       КАК Статус,
	|	ТабличнаяЧасть.ПометкаУдаления              КАК ПометкаУдаления,
	|
	|	ТабличнаяЧасть.ОсновноеИзделиеУпаковка      КАК Упаковка,
	|
	|	ТабличнаяЧасть.ОсновноеИзделиеНоменклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)                 КАК ЛюбаяНоменклатура,
	|	ТабличнаяЧасть.ОсновноеИзделиеХарактеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика,
	|
	|	ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)     КАК СпособАвтовыбораНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ)   КАК СпособАвтовыбораХарактеристики,
	|	ТабличнаяЧасть.ОсновноеИзделиеНоменклатура                               КАК НоменклатураСпецификации,
	|	ТабличнаяЧасть.ОсновноеИзделиеХарактеристика                             КАК ХарактеристикаСпецификации,
	|
	|	ТабличнаяЧасть.ВариантПодбораВДокументы = ЗНАЧЕНИЕ(Перечисление.ВариантыПодбораСпецификацииВДокументы.Автоматически)
	|		И ТабличнаяЧасть.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует) КАК ПодбираетсяАвтоматически
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = &Номенклатура
	|
	|ГДЕ
	|	(ТабличнаяЧасть.ОсновноеИзделиеНоменклатура = &Номенклатура
	|		ИЛИ ТабличнаяЧасть.ОсновноеИзделиеНоменклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И ТабличнаяЧасть.ОсновноеИзделиеВидНоменклатуры = СпрНоменклатура.ВидНоменклатуры)
	|	И (ТабличнаяЧасть.ОсновноеИзделиеХарактеристика = &Характеристика
	|		ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИЛИ ТабличнаяЧасть.ОсновноеИзделиеХарактеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	И (ТабличнаяЧасть.Статус = &СпецификацииСтатус
	|		ИЛИ &СпецификацииСтатус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.ПустаяСсылка))
	|	И ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|	И (&НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1) 
	|		ИЛИ ТабличнаяЧасть.НачалоДействия <= &НачалоПроизводства)
	|	И (ТабличнаяЧасть.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|		ИЛИ ТабличнаяЧасть.КонецДействия >= &НачалоПроизводства)
	|	И &ТекстУсловиеОтбораПоУпаковке2
	|	И &ТекстУсловиеОтбораПоИспользуемымРесурсам
	|;
	|
	|";
	
	ТекстУсловиеОтбораПоУпаковке1 = УправлениеДаннымиОбИзделиях.ТекстУсловияОтбораПоУпаковкеПриВыбореСпецификаций(
		"СпрНоменклатура.Ссылка", "ТабличнаяЧасть.Номенклатура", "ТабличнаяЧасть.Упаковка");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстУсловиеОтбораПоУпаковке1", ТекстУсловиеОтбораПоУпаковке1);
	ТекстУсловиеОтбораПоУпаковке2 = УправлениеДаннымиОбИзделиях.ТекстУсловияОтбораПоУпаковкеПриВыбореСпецификаций(
		"СпрНоменклатура.Ссылка", "ТабличнаяЧасть.ОсновноеИзделиеНоменклатура", "ТабличнаяЧасть.ОсновноеИзделиеУпаковка");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстУсловиеОтбораПоУпаковке2", ТекстУсловиеОтбораПоУпаковке2);
	
	ТекстУсловиеОтбораПоИспользуемымРесурсам = ТекстУсловияОтбораПоИспользуемымРесурсам();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстУсловиеОтбораПоИспользуемымРесурсам", ТекстУсловиеОтбораПоИспользуемымРесурсам);
	
	СписокПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	СписокПараметрыВыбораСпецификаций.Вставить("ИгнорируемыеПараметрыНазначения", Новый Массив);
	СписокПараметрыВыбораСпецификаций.Вставить("ИгнорируемыеУточненияПрименения", Новый Массив);
	
	ПараметрыЗапросаСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыТекстаЗапросаСпецификацийИзделий();
	ПараметрыЗапросаСпецификаций.ВсеПоляВРезультате = Истина;
	ЗаполнитьОписаниеИсточникаДоступныхСпецификаций(ПараметрыЗапросаСпецификаций, СписокПараметрыВыбораСпецификаций);
	
	ТаблицаИсточникСпецификаций       = "ВтСпецификации";
	ПараметрическиеОтборыИспользуются = ЗначениеЗаполнено(ПараметрНазначенияНаправлениеДеятельности)
		ИЛИ ЗначениеЗаполнено(ПараметрНазначенияПодразделениеДиспетчер)
		ИЛИ ЗначениеЗаполнено(ОснованиеХарактеристика);
	
	// Если отбор по параметрам назначения или характеристике не установлен, то доступные спецификации определяются по таблице ВтСпецификации.
	// Если отбор по параметрам назначения или характеристике установлен, то список ВтСпецификации дополнительно фильтруется через интерфейс автовыбора спецификаций,
	// при этом, если какой-то из отборов пустой, то его значение игнорируется.
	Если ПараметрическиеОтборыИспользуются Тогда
		
		ТаблицаИсточникСпецификаций = "ВтСпецификацииСОтборомПоПараметрамНазначения";
		
		Если НЕ ЗначениеЗаполнено(ПараметрНазначенияНаправлениеДеятельности) Тогда
			СписокПараметрыВыбораСпецификаций.ИгнорируемыеПараметрыНазначения.Добавить(
				Перечисления.ВидыПараметровНазначенияСпецификаций.НаправлениеДеятельности);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрНазначенияПодразделениеДиспетчер) Тогда
			СписокПараметрыВыбораСпецификаций.ИгнорируемыеПараметрыНазначения.Добавить(
				Перечисления.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОснованиеХарактеристика) Тогда
			СписокПараметрыВыбораСпецификаций.ИгнорируемыеУточненияПрименения.Добавить(
				УправлениеДаннымиОбИзделияхКлиентСервер.ОтборПоСвойствамКлючСвязиПредопределенный("Характеристика"));
		КонецЕсли;
		
		ПараметрыЗапросаСпецификаций.ИмяВыходнойТаблицы = ТаблицаИсточникСпецификаций;
		ТекстЗапроса = ТекстЗапроса + УправлениеДаннымиОбИзделиях.ТекстЗапросаСпецификацийИзделий(
			ПараметрыЗапросаСпецификаций, СписокПараметрыВыбораСпецификаций);
			
		УправлениеДаннымиОбИзделиях.УстановитьПараметрыЗапросаСпецификацийИзделий(Запрос, СписокПараметрыВыбораСпецификаций);
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ВЫБРАТЬ
	|	Спецификации.Спецификация                              КАК Спецификация,
	|	Спецификации.Статус                                    КАК Статус,
	|	Спецификации.ТипПроизводственногоПроцесса              КАК ТипПроизводственногоПроцесса,
	|	Спецификации.ПометкаУдаления                           КАК ПометкаУдаления,
	|
	|	Спецификации.ХарактеристикаСпецификации                КАК Характеристика,
	|	Спецификации.СпособАвтовыбораХарактеристики            КАК СпособАвтовыбораХарактеристики,
	|
	|	ПРЕДСТАВЛЕНИЕ(Спецификации.Спецификация)               КАК СпецификацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Спецификации.ХарактеристикаСпецификации) КАК ХарактеристикаПредставление
	|ИЗ
	|	&ТаблицаИсточникСпецификаций КАК Спецификации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спецификации.ХарактеристикаСпецификации.Наименование,
	|	Спецификации.Спецификация.Наименование
	|
	|";
	
	Запрос.УстановитьПараметр("Номенклатура",            ОснованиеНоменклатура);
	Запрос.УстановитьПараметр("Характеристика",          ОснованиеХарактеристика);
	Запрос.УстановитьПараметр("НачалоПроизводства",      ДеревоДата);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрНазначенияНаправлениеДеятельности);
	Запрос.УстановитьПараметр("ПодразделениеДиспетчер",  ПараметрНазначенияПодразделениеДиспетчер);
	
	Запрос.УстановитьПараметр("СпецификацииСтатус",      СпецификацииСтатус);
	
	Запрос.УстановитьПараметр("Материал",                ОтборМатериал);
	Запрос.УстановитьПараметр("ВидРабочегоЦентра",       ОтборВидРабочегоЦентра);
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ТаблицаИсточникСпецификаций", ТаблицаИсточникСпецификаций);
	Результат = Запрос.ВыполнитьПакет(); 
	
	ТаблицаХарактеристикИСпецификаций = Результат[Результат.Количество()-1].Выгрузить(); // ТаблицаЗначений
	ТаблицаХарактеристикИСпецификаций.Индексы.Добавить("Спецификация");
	
	// Определение приоритетной спецификации делается отдельным запросом к интерфейсу автовыбора спецификаций,
	// при этом, учитываются значения всех отборов, в том числе пустых.
	ПараметрыЗапросаСпецификаций.ИмяВыходнойТаблицы = "";
	СписокПараметрыВыбораСпецификаций.ИгнорируемыеПараметрыНазначения.Очистить();
	СписокПараметрыВыбораСпецификаций.ИгнорируемыеУточненияПрименения.Очистить();
	Запрос.Текст = УправлениеДаннымиОбИзделиях.ТекстЗапросаСпецификацийИзделий(ПараметрыЗапросаСпецификаций, СписокПараметрыВыбораСпецификаций);
	УправлениеДаннымиОбИзделиях.УстановитьПараметрыЗапросаСпецификацийИзделий(Запрос, СписокПараметрыВыбораСпецификаций);
	СпецификацииПоПриоритету = Запрос.Выполнить().Выгрузить();
	
	ПриоритетнаяСпецификация = Неопределено;
	Для Индекс = 0 По СпецификацииПоПриоритету.Количество()-1 Цикл
		Строка = СпецификацииПоПриоритету[Индекс];
		Если Строка.ПодбираетсяАвтоматически = Истина
				И Строка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка Тогда
			НайденнаяСтрока = ТаблицаХарактеристикИСпецификаций.Найти(Строка.Спецификация, "Спецификация");
			Если НайденнаяСтрока = Неопределено Тогда
				Прервать;
			КонецЕсли;
			Если НайденнаяСтрока.СпособАвтовыбораХарактеристики <> Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОснованиеХарактеристика)
					ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Характеристика) Тогда
				ПриоритетнаяСпецификация = Строка.Спецификация;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Заполним список спецификаций
	ТаблицаХарактеристик = ТаблицаХарактеристикИСпецификаций.Скопировать();
	ТаблицаХарактеристик.Свернуть("Характеристика");
	Для каждого ДанныеХарактеристика Из ТаблицаХарактеристик Цикл
		Если ХарактеристикиИспользуются Тогда
			СтрокаХарактеристика = УправлениеСпецификациями.Добавить();
			СтрокаХарактеристика.ТипСтроки = 1;
			СтрокаХарактеристика.СпецификацияХарактеристика = ДанныеХарактеристика.Характеристика;
			СтрокаХарактеристика.Характеристика = ДанныеХарактеристика.Характеристика;
		КонецЕсли;
		СтруктураПоиска = Новый Структура("Характеристика", ДанныеХарактеристика.Характеристика);
		СписокСтрок = ТаблицаХарактеристикИСпецификаций.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСпецификация Из СписокСтрок Цикл
			СтрокаСпецификация = УправлениеСпецификациями.Добавить();
			СтрокаСпецификация.ТипСтроки = 0;
			СтрокаСпецификация.СпецификацияХарактеристика = ДанныеСпецификация.Спецификация;
			ЗаполнитьЗначенияСвойств(СтрокаСпецификация, ДанныеСпецификация);
			Если ДанныеСпецификация.Спецификация = ПриоритетнаяСпецификация Тогда
				СтрокаСпецификация.Приоритетная = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьСтрокуУправлениеСпецификациями(ТекущаяСпецификацияХарактеристика, ЭтотОбъект);
	
КонецПроцедуры
  
&НаКлиенте
Процедура КопироватьРесурснуюСпецификациюВСпискеУправлениеСпецификациями()

	ТекущиеДанные = Элементы.УправлениеСпецификациями.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ТипСтроки <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КопироватьРесурснуюСпецификациюВСпискеУправлениеСпецификациямиЗавершение", ЭтотОбъект);
	УправлениеДаннымиОбИзделияхКлиент.КопироватьРесурснуюСпецификацию(ТекущиеДанные.Спецификация, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура КопироватьРесурснуюСпецификациюВСпискеУправлениеСпецификациямиЗавершение(Ссылка, ДополнительныеПараметры) Экспорт

	ЗаполнитьУправлениеСпецификациями(Ссылка);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтрокуУправлениеСпецификациями(ТекущаяСпецификацияХарактеристика, Форма)

	Если ТекущаяСпецификацияХарактеристика <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("СпецификацияХарактеристика", ТекущаяСпецификацияХарактеристика);
  		СписокСтрок = Форма.УправлениеСпецификациями.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Форма.Элементы.УправлениеСпецификациями.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСпецификации(ЗначениеСтатуса, ПредставлениеСтатуса)

	ВыделенныеСсылки = ПолучитьВыделенныеСпецификацииВСпискеУправлениеСпецификациями();
	УправлениеДаннымиОбИзделияхКлиент.УстановитьСтатусСпецификаций(ЗначениеСтатуса, ПредставлениеСтатуса, ВыделенныеСсылки);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыделенныеСпецификацииВСпискеУправлениеСпецификациями()

	ВыделенныеСсылки = Новый Массив;
	Для каждого ТекущаяСтрока Из Элементы.УправлениеСпецификациями.ВыделенныеСтроки Цикл
		ТекущиеДанные = УправлениеСпецификациями.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные.ТипСтроки = 0 Тогда
			ВыделенныеСсылки.Добавить(ТекущиеДанные.Спецификация);
		КонецЕсли; 
	КонецЦикла; 

	Возврат ВыделенныеСсылки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОписаниеИсточникаДоступныхСпецификаций(ПараметрыЗапроса, ПараметрыВыбораСпецификаций)
	
	УправлениеДаннымиОбИзделияхПереопределяемый.ИсточникДоступныхСпецификацийПрименениеНоменклатурыВПроизводстве(ПараметрыЗапроса, ПараметрыВыбораСпецификаций);
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИсточникДоступныхСпецификаций) Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникДоступныхСпецификаций = УправлениеДаннымиОбИзделиях.ИсточникДоступныхСпецификацийКонструктор();
	ИсточникДоступныхСпецификаций.ИмяВременнойТаблицыИсточникаСпецификаций = "ВтСпецификации";
	
	ПараметрыЗапроса.ИсточникДоступныхСпецификаций = ИсточникДоступныхСпецификаций;
	
КонецПроцедуры

&НаСервере
Функция ТекстУсловияОтбораПоИспользуемымРесурсам()
	
	МассивУсловий = Новый Массив;
	
	Если ЗначениеЗаполнено(ОтборМатериал) Тогда
		
		Если ОтборИспользованиеМатериала = "Используется" Тогда
			
			Условие = "
			|	И ИСТИНА В (
			|			ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
			|			ГДЕ
			|				ТаблицаМатериалыИУслуги.Ссылка = ТабличнаяЧасть.Ссылка
			|					И &Материал = ТаблицаМатериалыИУслуги.Номенклатура)
			|";
			МассивУсловий.Добавить(Условие);
			
		Иначе
			
			Условие = "
			|	И НЕ ИСТИНА В (
			|			ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
			|			ГДЕ
			|				ТаблицаМатериалыИУслуги.Ссылка = ТабличнаяЧасть.Ссылка
			|					И &Материал = ТаблицаМатериалыИУслуги.Номенклатура)
			|";
			МассивУсловий.Добавить(Условие);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборВидРабочегоЦентра) Тогда
		
		Если ОтборИспользованиеВидаРабочегоЦентра = "Используется" Тогда
			
			Условие = "
			|	И ИСТИНА В (
			|			ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ВидыРабочихЦентровЭтапов
			|			ГДЕ
			|				ВидыРабочихЦентровЭтапов.Ссылка.Владелец = ТабличнаяЧасть.Ссылка
			|					И &ВидРабочегоЦентра = ВидыРабочихЦентровЭтапов.ВидРабочегоЦентра)
			|";
			МассивУсловий.Добавить(Условие);
			
		Иначе
			
			Условие = "
			|	И НЕ ИСТИНА В (
			|			ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ВидыРабочихЦентровЭтапов
			|			ГДЕ
			|				ВидыРабочихЦентровЭтапов.Ссылка.Владелец = ТабличнаяЧасть.Ссылка
			|					И ВидыРабочихЦентровЭтапов.ВидРабочегоЦентра = &ВидРабочегоЦентра)
			|";
			МассивУсловий.Добавить(Условие);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрСоединить(МассивУсловий);
	
КонецФункции

&НаСервере
Процедура УстановитьСвойстваДинамическогоСпискаПрименениеВСпецификациях()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСпецификаций, "ОтборИзделие", ОснованиеНоменклатура);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСпецификаций, "ОтборХарактеристикаИзделия", ОснованиеХарактеристика);
	
КонецПроцедуры

#КонецОбласти

#Область МаршрутныеКарты

&НаКлиентеНаСервереБезКонтекста
Процедура МаршрутныеКартыУстановитьОтборПоСтатусу(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокМаршрутныхКарт, 
		"Статус", 
		Форма.МаршрутныеКартыСтатус, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.МаршрутныеКартыСтатус));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МаршрутныеКартыУстановитьОтборПоПодразделению(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокМаршрутныхКарт, 
		"Подразделение", 
		Форма.МаршрутныеКартыПодразделение, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.МаршрутныеКартыПодразделение));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МаршрутныеКартыУстановитьОтборПоОтветственному(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокМаршрутныхКарт, 
		"Ответственный", 
		Форма.МаршрутныеКартыОтветственный, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.МаршрутныеКартыОтветственный));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МаршрутныеКартыУстановитьОтборПоНоменклатуре(Форма)
	
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьОтборПоНоменклатуреВСпискеМаршрутныхКарт(
		Форма.СписокМаршрутныхКарт,
		Форма.ОснованиеНоменклатура,
		Форма.МаршрутныеКартыИспользуетсяКак);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьМаршрутнуюКарту()

	ТекстВопроса = НСтр("ru = 'Будет создана и записана копия маршрутной карты (включая техоперации).
								|Скопировать?';
								|en = 'A copy of the route sheet will be created and saved (including manufacturing operations).
								|Continue?'");
	СписокКнопок = Новый СписокЗначений;								
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Скопировать';
														|en = 'Copy'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросКопироватьМаршрутнуюКарту", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопироватьМаршрутнуюКарту(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокМаршрутныхКарт.ТекущиеДанные;
	
	Ссылка = КопироватьМаршрутнуюКартуНаСервере(ТекущиеДанные.Ссылка);
	Если Ссылка <> Неопределено Тогда
		Элементы.СписокМаршрутныхКарт.ТекущаяСтрока = Ссылка;
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.МаршрутныеКарты"));
		Оповестить("Запись_ТехнологическиеОперации");
		ОткрытьФорму("Справочник.МаршрутныеКарты.ФормаОбъекта", Новый Структура("Ключ", Ссылка));
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось скопировать маршрутную карту.';
									|en = 'Cannot copy the route sheet.'"));
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Функция КопироватьМаршрутнуюКартуНаСервере(Источник)

	НачатьТранзакцию();
	
	Попытка
		Объект = Источник.Скопировать();
		Объект.Записать();
		
		Если НЕ Справочники.МаршрутныеКарты.ЗаполнитьПоМаршрутнойКарте(Объект, Источник, Объект.Ссылка) Тогда
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецЕсли;
		
		Объект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Объект.Ссылка;
	
КонецФункции

&НаСервере
Процедура УстановитьСвойстваДинамическогоСпискаМаршрутныхКарт()
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	
	ТекстЗапроса = Справочники.МаршрутныеКарты.ТекстЗапросаДинамическогоСпискаМаршрутныхКарт();
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	
	СвойстваСписка.ОсновнаяТаблица = СписокМаршрутныхКарт.ОсновнаяТаблица;
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокМаршрутныхКарт, СвойстваСписка);
	
КонецПроцедуры

#КонецОбласти

#Область Калькуляции

//++ Устарело_Производство21
&НаСервере
Процедура УстановитьСвойстваДинамическогоСпискаПлановыхКалькуляций()
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = "Документ.ПлановаяКалькуляция";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапросаДинамическогоСпискаПлановыхКалькуляций();
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокПлановыхКалькуляций, СвойстваСписка); 
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПлановыхКалькуляций21, "ОтборИзделие", ОснованиеНоменклатура);
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаДинамическогоСпискаПлановыхКалькуляций()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПлановаяКалькуляция.Ссылка,
	|	ПлановаяКалькуляция.Организация,
	|	ПлановаяКалькуляция.Статус,
	|	ПлановаяКалькуляция.ДатаНачалаДействия,
	|	ПлановаяКалькуляция.ДатаОкончанияДействия,
	|	ПлановаяКалькуляция.Ответственный,
	|	ПлановаяКалькуляция.Комментарий,
	|	ПлановаяКалькуляция.ОбъектКалькуляции КАК ОбъектКалькуляции,
	|	ПлановаяКалькуляция.Номер,
	|	ПлановаяКалькуляция.Дата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПлановаяКалькуляцияДействиеКалькуляции.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказНаПроизводствоВыходныеИзделия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлановаяКалькуляция.ДействиеКалькуляции КАК ПлановаяКалькуляцияДействиеКалькуляции
	|			ПО ЗаказНаПроизводствоВыходныеИзделия.Ссылка = ПлановаяКалькуляцияДействиеКалькуляции.Объект
	|	ГДЕ
	|		ЗаказНаПроизводствоВыходныеИзделия.Номенклатура = &ОтборИзделие
	|		И ПлановаяКалькуляцияДействиеКалькуляции.Объект ССЫЛКА Документ.ЗаказНаПроизводство
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПлановаяКалькуляцияДействиеКалькуляции.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлановаяКалькуляцияДействиеКалькуляции.Ссылка
	|	ИЗ
	|		Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлановаяКалькуляция.ДействиеКалькуляции КАК ПлановаяКалькуляцияДействиеКалькуляции
	|			ПО РесурсныеСпецификацииВыходныеИзделия.Ссылка = ПлановаяКалькуляцияДействиеКалькуляции.Объект
	|	ГДЕ
	|		РесурсныеСпецификацииВыходныеИзделия.Номенклатура = &ОтборИзделие
	|		И ПлановаяКалькуляцияДействиеКалькуляции.Объект ССЫЛКА Справочник.РесурсныеСпецификации
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПлановаяКалькуляцияДействиеКалькуляции.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлановаяКалькуляцияДействиеКалькуляции.Ссылка
	|	ИЗ
	|		Документ.ПлановаяКалькуляция.ДействиеКалькуляции КАК ПлановаяКалькуляцияДействиеКалькуляции
	|	ГДЕ
	|		ПлановаяКалькуляцияДействиеКалькуляции.Объект = &ОтборИзделие
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПлановаяКалькуляцияДействиеКалькуляции.Ссылка) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлановаяКалькуляция КАК ПлановаяКалькуляция
	|		ПО ВложенныйЗапрос.Ссылка = ПлановаяКалькуляция.Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- Устарело_Производство21

&НаСервере
Процедура УстановитьСвойстваДинамическогоСпискаПлановыхКалькуляций22()
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = "Документ.ПлановаяКалькуляция2_2";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапросаДинамическогоСпискаПлановыхКалькуляций22();
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокПлановыхКалькуляций22, СвойстваСписка);
	
	ОбщегоНазначенияУТ.ВосстановитьНастройкиДинамическогоСписка(СписокПлановыхКалькуляций22);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПлановыхКалькуляций22, "ОтборИзделие", ОснованиеНоменклатура);
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаДинамическогоСпискаПлановыхКалькуляций22()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Калькуляции.Ссылка КАК Ссылка,
	|	Калькуляции.ПометкаУдаления КАК ПометкаУдаления,
	|	Калькуляции.Номер КАК Номер,
	|	Калькуляции.Дата КАК Дата,
	|	Калькуляции.Проведен КАК Проведен,
	|	Калькуляции.Организация КАК Организация,
	|	Калькуляции.ПодразделениеДиспетчер КАК ПодразделениеДиспетчер,
	|	Калькуляции.ОбъектКалькуляции КАК ОбъектКалькуляции,
	|	Калькуляции.ВидЦены КАК ВидЦены,
	|	(СостоянияКалькуляций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетаПлановойКалькуляции.ОшибкаРасчета)) КАК ОшибкаРасчета,
	|	(СостоянияКалькуляций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетаПлановойКалькуляции.РассчитанаСОшибками)) КАК РассчитанаСОшибками,
	|	ЕСТЬNULL(СостоянияКалькуляций.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетаПлановойКалькуляции.НеРассчитана)) КАК Состояние,
	|	Калькуляции.Ответственный КАК Ответственный,
	|	Калькуляции.Комментарий КАК Комментарий,
	|	Калькуляции.МоментВремени КАК МоментВремени
	|ИЗ
	|	Документ.ПлановаяКалькуляция2_2 КАК Калькуляции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПлановыхКалькуляций КАК СостоянияКалькуляций
	|		ПО Калькуляции.Ссылка = СостоянияКалькуляций.Калькуляция
	|ГДЕ
	|	Калькуляции.Ссылка В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				Объекты.Ссылка
	|			ИЗ
	|				Документ.ПлановаяКалькуляция2_2.ОбъектыКалькуляции КАК Объекты
	|			ГДЕ
	|				Объекты.Ссылка = Калькуляции.Ссылка
	|				И Объекты.Номенклатура = &ОтборИзделие)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура КалькуляцииУстановитьОтборПоСтатусу(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокПлановыхКалькуляций,
		"Статус", 
		Форма.КалькуляцииСтатус, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.КалькуляцииСтатус));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КалькуляцииУстановитьОтборПоОбъекту(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокПлановыхКалькуляций,
		"ОбъектКалькуляции", 
		Форма.КалькуляцииОбъект, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.КалькуляцииОбъект));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КалькуляцииУстановитьОтборПоОтветственному(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокПлановыхКалькуляций,
		"Ответственный", 
		Форма.КалькуляцииОтветственный, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.КалькуляцииОтветственный));

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПлановыхКалькуляций22, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОтборПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПлановыхКалькуляций22, "ПодразделениеДиспетчер", ПодразделениеДиспетчер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПодразделениеДиспетчер));
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОтборПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПлановыхКалькуляций22, "Состояние", Состояние, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Состояние));
	
КонецПроцедуры

#КонецОбласти

#Область РазрешенияНаЗаменуМатериалов

&НаСервере
Процедура РазрешенияУстановитьОтборПоСтатусу()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРазрешений,
		"Статус",
		РазрешенияСтатус,
		ВидСравненияКомпоновкиДанных.Равно,
		, // Представление - автоматически
		ЗначениеЗаполнено(РазрешенияСтатус));
	
КонецПроцедуры

&НаСервере
Процедура РазрешенияУстановитьОтборПоСпецификации()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРазрешений,
		"Спецификация",
		РазрешенияСпецификация,
		ВидСравненияКомпоновкиДанных.Равно,
		, // Представление - автоматически
		ЗначениеЗаполнено(РазрешенияСпецификация));
	
КонецПроцедуры

&НаСервере
Процедура РазрешенияУстановитьОтборПоОтветственному()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРазрешений,
		"Ответственный",
		РазрешенияОтветственный,
		ВидСравненияКомпоновкиДанных.Равно,
		, // Представление - автоматически
		ЗначениеЗаполнено(РазрешенияОтветственный));
	
КонецПроцедуры

&НаСервере
Процедура РазрешенияУстановитьОтборПоНоменклатуре()
	
	Документы.РазрешениеНаЗаменуМатериалов.УстановитьОтборПоНоменклатуреВДинамическомСпискеРазрешенийНаЗаменуМатериалов(
		СписокРазрешений,
		ОснованиеНоменклатура,
		РазрешениеИспользуетсяКак);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваДинамическогоСпискаРазрешенийНаЗаменуМатериалов()
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	
	ТекстЗапроса = Документы.РазрешениеНаЗаменуМатериалов.ТекстЗапросаДинамическогоСпискаРазрешенийНаЗаменуМатериалов();
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	
	СвойстваСписка.ОсновнаяТаблица = "Документ.РазрешениеНаЗаменуМатериалов";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокРазрешений, СвойстваСписка);
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоСпецификаций

&НаСервере
Процедура ИнициализацияДереваСпецификаций()

	ДеревоДата = ТекущаяДатаСеанса();
	
	УправлениеДаннымиОбИзделиях.ЗагрузитьНастройкиОтбораДереваСпецификации(ЭтотОбъект);
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Новый Структура(), Обработки.ДеревоРесурсныхСпецификаций);
	
	УправлениеДаннымиОбИзделиях.НастроитьУсловноеОформлениеДереваСпецификаций(УсловноеОформление);
	
	УстановитьВидимостьГруппыПараметровНазначенияСпецификаций();
	
	ДеревоНастроитьПометкиДополнительныхКоманд(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиДерева()
	
	ПроверитьУстановитьПараметрыСпискаДоступныхСпецификаций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУстановитьПараметрыСпискаДоступныхСпецификаций()
	
	ТекущиеДанные = Элементы.ДеревоСпецификаций.ТекущиеДанные;
	
	НовыйОтбор = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураОтбораСпискаДоступныхСпецификаций();
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТипЗнч(ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			НовыйОтбор.Номенклатура   = ТекущиеДанные.Номенклатура;
			НовыйОтбор.Характеристика = ТекущиеДанные.Характеристика;
		КонецЕсли;
		
		ВидСтроки = ТекущиеДанные.ВидСтроки;
		
	Иначе
		ВидСтроки = Неопределено;
	КонецЕсли;
	
	Если НовыйОтбор.Номенклатура <> ДеревоТекущийОтбор.Номенклатура
		ИЛИ НовыйОтбор.Характеристика <> ДеревоТекущийОтбор.Характеристика Тогда
		УстановитьПараметрыСпискаДоступныхСпецификаций(НовыйОтбор, ВидСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваДинамическогоСпискаДоступныхСпецификаций()
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	
	ТекстЗапроса = Справочники.РесурсныеСпецификации.ТекстЗапросаДинамическогоСпискаДоступныхСпецификаций();
	
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапроса;
	СвойстваСписка.ОсновнаяТаблица              = "";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Ложь;
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокДоступныхСпецификаций, СвойстваСписка);
	
	ДеревоТекущийОтбор = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураОтбораСпискаДоступныхСпецификаций();
	ДеревоТекущийОтбор.Номенклатура   = ОснованиеНоменклатура;
	ДеревоТекущийОтбор.Характеристика = ОснованиеХарактеристика;
	
	УстановитьПараметрыСпискаДоступныхСпецификаций(ДеревоТекущийОтбор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаДоступныхСпецификаций(НовыйОтбор, ВидСтроки = Неопределено)
	
	ДеревоТекущийОтбор    = НовыйОтбор;
	
	ДоступныеСпецификации = Новый Массив;
	
	Если ЗначениеЗаполнено(НовыйОтбор.Номенклатура) Тогда
	
		ДанныеОбИзделии = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации();
		ДанныеОбИзделии.Номенклатура            = НовыйОтбор.Номенклатура;
		ДанныеОбИзделии.Характеристика          = НовыйОтбор.Характеристика;
		ДанныеОбИзделии.НачалоПроизводства      = ДеревоДата;
		ДанныеОбИзделии.НаправлениеДеятельности = ПараметрНазначенияНаправлениеДеятельности;
		ДанныеОбИзделии.ПодразделениеДиспетчер  = ПараметрНазначенияПодразделениеДиспетчер;
		
		Если ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыСтрокДереваСпецификаций.ВыходноеИзделие") Тогда
			ИмяТЧ = "ВыходныеИзделия";
		Иначе
			ИмяТЧ = "МатериалыИУслуги";
		КонецЕсли;
		
		ДоступныеСпецификации = УправлениеДаннымиОбИзделиях.СписокСпецификацийПоНоменклатуре(
			ДанныеОбИзделии,
			ПараметрыВыбораСпецификаций[ИмяТЧ]);
			
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
									СписокДоступныхСпецификаций, "СписокСпецификаций", ДоступныеСпецификации);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДереваСпецификаций()
	
	ПараметрыДерева = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДереваСпецификаций();
	 
	ПараметрыДерева.ПараметрыВыбораСпецификаций = ПараметрыВыбораСпецификаций;
	
	Если ДеревоСпецификаций.ПолучитьЭлементы().Количество() <> 0 Тогда
		Строка = ДеревоСпецификаций.ПолучитьЭлементы()[0];
		ПараметрыДерева.Номенклатура               = Строка.Номенклатура;
		ПараметрыДерева.ХарактеристикаНоменклатуры = Строка.Характеристика;
		ПараметрыДерева.Спецификация               = Строка.Спецификация;
	Иначе
		ПараметрыДерева.Номенклатура = ОснованиеНоменклатура;
		ПараметрыДерева.Спецификация = Справочники.РесурсныеСпецификации.ПустаяСсылка();
	КонецЕсли;
	
	ПараметрыДерева.Дата                         = ДеревоДата;
	ПараметрыДерева.ПодразделениеДиспетчер       = ПараметрНазначенияПодразделениеДиспетчер;
	ПараметрыДерева.НаправлениеДеятельности      = ПараметрНазначенияНаправлениеДеятельности;
	
	ПараметрыДерева.ДинамическоеСчитывание       = ДинамическоеСчитывание;
	ПараметрыДерева.РазузловыватьПолуфабрикаты   = Истина;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьНастройкиОтбораДереваСпецификации(ПараметрыДерева, ЭтотОбъект);
	
	Возврат ПараметрыДерева;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоСпецификацийНаСервере()
	
	ОбновитьСтруктуруИзделия = Ложь;
	
	Если ДеревоИзмененыПараметрыОтбора Тогда
		ДеревоСохранитьПараметрыОтбора();
	КонецЕсли;
	
	ПараметрыДерева = ПараметрыДереваСпецификаций();
	
	УправлениеДаннымиОбИзделиях.ПостроитьДеревоСпецификаций(ЭтотОбъект, ПараметрыДерева);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРеквизитаСтрокиДереваНаСервере(ТекущаяСтрока)

	ТекущиеДанные = ДеревоСпецификаций.НайтиПоИдентификатору(ТекущаяСтрока);

	ТекущиеДанные.ПолучитьЭлементы().Очистить();
	
	ТекущиеДанные.ЕстьСпецификация = ЗначениеЗаполнено(ТекущиеДанные.Спецификация);
	ТекущиеДанные.СпецификацияПрочитана = Ложь;
	
	Если ТекущиеДанные.ЕстьСпецификация Тогда
		
		ПараметрыДерева = ПараметрыДереваСпецификаций();
		Если ПараметрыДерева.Спецификация <> ТекущиеДанные.Спецификация Тогда
			ПараметрыДерева.Спецификация = Справочники.РесурсныеСпецификации.ПустаяСсылка();
		КонецЕсли;
		УправлениеДаннымиОбИзделиях.ИзменитьСпецификациюВСтрокеДерева(ЭтотОбъект, ПараметрыДерева, ТекущиеДанные);
		
	ИначеЕсли ДинамическоеСчитывание Тогда
		
		УправлениеДаннымиОбИзделиях.ОбновитьРеквизитыСтрокиДереваВХранилище(ЭтотОбъект, ТекущиеДанные);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСпецификациюВТекущейСтроке(ТекущаяСтрока, НоваяСпецификация = Неопределено)
	
	ТекущиеДанные = ДеревоСпецификаций.НайтиПоИдентификатору(ТекущаяСтрока);

	ТекущиеДанные.Спецификация = НоваяСпецификация;
	
	ОбработатьИзменениеРеквизитаСтрокиДереваНаСервере(ТекущаяСтрока);
	
	РазвернутьДеревоСпецификаций(ТекущаяСтрока, ТекущиеДанные.Идентификатор);

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоСпецификаций(ТекущаяСтрока, Идентификатор)
	
	Если Элементы.ДеревоСпецификаций.ТекущаяСтрока <> ТекущаяСтрока Тогда
		
		ТекущиеДанные = НайтиСтрокуПоИдентификатору(ДеревоСпецификаций.ПолучитьЭлементы(), Идентификатор);
		Если ТекущиеДанные <> Неопределено Тогда
			Элементы.ДеревоСпецификаций.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуПоИдентификатору(КоллекцияЭлементовДерева, Идентификатор)
	
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		
		Если Строка.Идентификатор = Идентификатор Тогда
			Возврат Строка;
		Иначе
			Результат = НайтиСтрокуПоИдентификатору(Строка.ПолучитьЭлементы(), Идентификатор);
			Если Результат <> Неопределено Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПараметрыПечатиДереваСпецификаций()
	
	Дерево = УправлениеДаннымиОбИзделиях.ПрочитатьДеревоСпецификаций(ЭтотОбъект);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор));
	
	Возврат ПараметрыПечати;
	
КонецФункции

&НаКлиенте
Процедура ДеревоИзмененыПараметрыОтбора()
	
	ДеревоИзмененыПараметрыОтбора = Истина;
	Элементы.ДеревоСпецификацийПечать.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоСохранитьПараметрыОтбора()
	
	УправлениеДаннымиОбИзделиях.СохранитьНастройкиОтбораДереваСпецификации(ЭтотОбъект);
	
	Элементы.ДеревоСпецификацийПечать.Доступность = Истина;
	ДеревоИзмененыПараметрыОтбора = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоОбновитьСпецификациюНаСервере()
	
	СписокСтрок = ДеревоСпецификаций.ПолучитьЭлементы();
	Если СписокСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбИзделии = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации();
	ДанныеОбИзделии.Номенклатура            = СписокСтрок[0].Номенклатура;
	ДанныеОбИзделии.Характеристика          = СписокСтрок[0].Характеристика;
	ДанныеОбИзделии.НачалоПроизводства      = ДеревоДата;
	ДанныеОбИзделии.ПодразделениеДиспетчер  = ПараметрНазначенияПодразделениеДиспетчер;
	ДанныеОбИзделии.НаправлениеДеятельности = ПараметрНазначенияНаправлениеДеятельности;
	ДанныеОбИзделии.ТекущаяСпецификация     = СписокСтрок[0].Спецификация;
	
	ДанныеСпецификации = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
		ДанныеОбИзделии,
		УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку());
		
	Если ДанныеСпецификации <> Неопределено И СписокСтрок[0].Спецификация <> ДанныеСпецификации.Спецификация Тогда
		СписокСтрок[0].Спецификация = ДанныеСпецификации.Спецификация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДеревоНастроитьПометкиДополнительныхКоманд(Форма)
	
	Форма.Элементы.ДеревоСкрыватьЗаголовкиГруппировок.Пометка   = НЕ Форма.ДеревоВыводитьЗаголовкиГруппировок;
	Форма.Элементы.ДеревоВыводитьОперацииВместеСЭтапами.Пометка = Форма.ДеревоВыводитьОперации;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыПараметровНазначенияСпецификаций()
	
	ВидимостьГруппы = Ложь;
	
	УстановитьВидимостьЭлементовПараметраНазначения("НаправлениеДеятельности", ВидимостьГруппы);
	УстановитьВидимостьЭлементовПараметраНазначения("ПодразделениеДиспетчер",  ВидимостьГруппы);
	
	Элементы.ГруппаСписокПараметрыНазначенияСпецификаций.Видимость = ВидимостьГруппы;
	Элементы.ГруппаПараметрыНазначенияСпецификаций.Видимость = ВидимостьГруппы;
	Элементы.ГруппаПараметрыНазначенияСпецификаций.Видимость = ВидимостьГруппы;
	Если ВидимостьГруппы Тогда
		ОбновитьЗаголовокГруппыПараметровНазначенияСпецификаций(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПараметраНазначения(ИмяПараметра, ВидимостьГруппы)
	
	Если НЕ УправлениеДаннымиОбИзделияхПовтИсп.ВидПараметраНазначенияИспользуется(
			Перечисления.ВидыПараметровНазначенияСпецификаций[ИмяПараметра]) Тогда
		Возврат;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	Если ИмяПараметра = "НаправлениеДеятельности" Тогда
		МассивЭлементов.Добавить("ПараметрНазначенияНаправлениеДеятельности");
		МассивЭлементов.Добавить("СписокПараметрНазначенияНаправлениеДеятельности");
	КонецЕсли;
	
	Если ИмяПараметра = "ПодразделениеДиспетчер" Тогда
		МассивЭлементов.Добавить("ПараметрНазначенияПодразделениеДиспетчер");
		МассивЭлементов.Добавить("СписокПараметрНазначенияПодразделениеДиспетчер");
	КонецЕсли;
		
	Для каждого ИмяЭлемента из МассивЭлементов Цикл
		Элементы[ИмяЭлемента].Видимость = Истина;
	КонецЦикла;
	
	ВидимостьГруппы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЗначенияПараметраНазначенияСпецификаций()
	
	ОбновитьЗаголовокГруппыПараметровНазначенияСпецификаций(ЭтотОбъект);
	
	ЗаполнитьУправлениеСпецификациями();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СтраницаСтруктураИзделия Тогда
		
		ОбновитьСтруктуруИзделия = Истина;
		
	Иначе
	
		УправлениеДаннымиОбИзделияхКлиент.СохранитьРазвернутыеУровниДерева(ЭтотОбъект);
		
		ПриИзмененииЗначенияПараметраНазначенияСпецификацийНаСервере();
		
		УправлениеДаннымиОбИзделияхКлиент.ВосстановитьРазвернутыеУровниДерева(ЭтотОбъект);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияПараметраНазначенияСпецификацийНаСервере()
	
	ДеревоОбновитьСпецификациюНаСервере();
	
	СформироватьДеревоСпецификацийНаСервере();
	
	ТекущиеДанные = ДеревоСпецификаций.НайтиПоИдентификатору(Элементы.ДеревоСпецификаций.ТекущаяСтрока);
	Если ЗначениеЗаполнено(ДеревоТекущийОтбор.Номенклатура) И ТекущиеДанные <> Неопределено Тогда
		УстановитьПараметрыСпискаДоступныхСпецификаций(ДеревоТекущийОтбор, ТекущиеДанные.ВидСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокГруппыПараметровНазначенияСпецификаций(Форма)
	
	КоличествоЗаполнено = 0;
	
	Если ЗначениеЗаполнено(Форма.ПараметрНазначенияПодразделениеДиспетчер) Тогда
		КоличествоЗаполнено = КоличествоЗаполнено + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ПараметрНазначенияНаправлениеДеятельности) Тогда
		КоличествоЗаполнено = КоличествоЗаполнено + 1;
	КонецЕсли;
	
	Форма.ПараметрНазначенияКоличествоЗаполненных = КоличествоЗаполнено;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервереБезКонтекста
Функция ПроверитьЗаполнитьНоменклатуру(Параметры)
	
	Результат = Справочники.Номенклатура.ПустаяСсылка();
	
	Если Параметры.Свойство("Номенклатура") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Т
		|ГДЕ
		|	Т.Ссылка = &Номенклатура
		|	И НЕ Т.ЭтоГруппа");
		Запрос.УстановитьПараметр("Номенклатура", Параметры.Номенклатура);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Номенклатура;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	Справочники.РесурсныеСпецификации.УстановитьУсловноеОформлениеСпискаРесурсныхСпецификаций(УсловноеОформление, Элементы.УправлениеСпецификациями.Имя);
	
	СписокСпецификаций.УсловноеОформление.Элементы.Очистить();
	Справочники.РесурсныеСпецификации.УстановитьУсловноеОформлениеСпискаРесурсныхСпецификаций(СписокСпецификаций.УсловноеОформление);

	СписокМаршрутныхКарт.УсловноеОформление.Элементы.Очистить();
	Справочники.МаршрутныеКарты.УстановитьУсловноеОформлениеСпискаМаршрутныхКарт(СписокМаршрутныхКарт.УсловноеОформление);
	
	СписокДоступныхСпецификаций.УсловноеОформление.Элементы.Очистить();
	Справочники.РесурсныеСпецификации.УстановитьУсловноеОформлениеСпискаДоступныхСпецификаций(СписокДоступныхСпецификаций.УсловноеОформление);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УправлениеСпецификациями.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УправлениеСпецификациями.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаГруппировкиОтчета1);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УправлениеСпецификациямиСпецификацияХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УправлениеСпецификациями.СпецификацияХарактеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<любая характеристика>';
																|en = '<any variant>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УправлениеСпецификациямиСпецификацияХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УправлениеСпецификациями.СпецификацияХарактеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<любая характеристика>';
																|en = '<any variant>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УправлениеСпецификациями.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УправлениеСпецификациями.Приоритетная");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
		
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПравам()

	ПравоПросмотраСпецификаций		= ПравоДоступа("Просмотр", Метаданные.Справочники.РесурсныеСпецификации);
	//++ Устарело_Производство21
	ПравоДоступаКалькуляции21		= ПравоДоступа("Просмотр", Метаданные.Документы.ПлановаяКалькуляция);
	//-- Устарело_Производство21
	ПравоДоступаКалькуляции22		= ПравоДоступа("Просмотр", Метаданные.Документы.ПлановаяКалькуляция2_2);
	ПравоДоступаРазрешения			= ПравоДоступа("Просмотр", Метаданные.Документы.РазрешениеНаЗаменуМатериалов);
	ПравоДоступаМаршрутныеКарты		= ПравоДоступа("Просмотр", Метаданные.Справочники.МаршрутныеКарты);
	ПравоДоступаДеревоСпецификаций	= ПравоДоступа("Использование", Метаданные.Обработки.ДеревоРесурсныхСпецификаций);
	
	Если Не ПравоПросмотраСпецификаций 
			И Не ПравоДоступаМаршрутныеКарты
			И Не ПравоДоступаРазрешения
			И Не ПравоДоступаДеревоСпецификаций
			//++ Устарело_Производство21
			И Не ПравоДоступаКалькуляции21
			//-- Устарело_Производство21
			И Не ПравоДоступаКалькуляции22 Тогда
		Возврат;
	КонецЕсли;
	
	ПравоРедактированияСпецификаций = ПравоДоступа("Редактирование", Метаданные.Справочники.РесурсныеСпецификации);
	Если НЕ ПравоРедактированияСпецификаций Тогда
		Элементы.УправлениеСпецификациями.ТолькоПросмотр = Истина;
		Элементы.УправлениеСпецификациями.ИзменятьСоставСтрок = Ложь;
		Элементы.СписокУстановитьСтатусВРазработке.Видимость = Ложь;
		Элементы.СписокУстановитьСтатусДействует.Видимость = Ложь;
		Элементы.СписокУстановитьСтатусЗакрыта.Видимость = Ложь;
	КонецЕсли; 
	
	Если Не ПравоПросмотраСпецификаций Тогда
		Элементы.СтраницаСпецификацииГдеНоменклатураИзделие.Видимость = Ложь;
		Элементы.СтраницаСпецификацииГдеНоменклатураМатериал.Видимость = Ложь;
	КонецЕсли;
	
	//++ Устарело_Производство21
	Если Не ПравоДоступаКалькуляции21 Тогда
		Элементы.СтраницаПлановыеКалькуляции.Видимость = Ложь;
		Элементы.ГруппаОтборыКалькуляции.Видимость = Ложь;
		Элементы.СписокПлановыхКалькуляций.Видимость = Ложь;
	КонецЕсли;
	//-- Устарело_Производство21
	
	Элементы.СтраницаПлановыеКалькуляции22.Видимость = ПравоДоступаКалькуляции22;
	
	Если Не ПравоДоступаРазрешения Тогда
		Элементы.СтраницаРазрешенияНаЗамену.Видимость = Ложь;
		Элементы.ГруппаОтборыРазрешения.Видимость = Ложь;
		Элементы.СписокРазрешений.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступаМаршрутныеКарты Тогда
		Элементы.СтраницаМаршрутныеКарты.Видимость = Ложь;
		Элементы.ГруппаОтборыМаршрутныхКарт.Видимость = Ложь;
		Элементы.СписокМаршрутныхКарт.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступаДеревоСпецификаций Тогда
		Элементы.СтраницаСтруктураИзделия.Видимость = Ложь;
		Элементы.ГруппаСтруктураИзделияШапка.Видимость = Ложь;
		Элементы.ДеревоСпецификаций.Видимость = Ложь;
		Элементы.СписокДоступныхСпецификаций.Видимость = Ложь;
	КонецЕсли;

	Если НЕ ПравоДоступа("Просмотр", Метаданные.Обработки.ДеревоРесурсныхСпецификаций) Тогда
		Элементы.УправлениеСпецификациямиДеревоСпецификации.Видимость = Ложь;
	КонецЕсли; 
		 
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Обработки.СравнениеСпецификаций) Тогда
		Элементы.УправлениеСпецификациямиСравнитьСпецификации.Видимость = Ложь;
	КонецЕсли; 
		 
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	ЗаполнитьУправлениеСпецификациями();
	Элементы.СписокСпецификаций.Обновить();
	Элементы.СписокРазрешений.Обновить();
	Элементы.СписокМаршрутныхКарт.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Если Элемент.Имя = "УправлениеСпецификациями" Тогда
		
		Отказ = Истина;
		
		Если Копирование Тогда
			КопироватьРесурснуюСпецификациюВСпискеУправлениеСпецификациями();
			Возврат
		КонецЕсли; 
		
		ТекущиеДанные = Элементы.УправлениеСпецификациями.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Основание = Новый Структура;
			Основание.Вставить("Номенклатура", ОснованиеНоменклатура);
			Основание.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		Иначе
			Основание = ОснованиеНоменклатура;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Основание);
		
		ОткрытьФорму("Справочник.РесурсныеСпецификации.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли Элемент.Имя = "СписокМаршрутныхКарт" Тогда
					
		Если Группа Тогда
			Возврат;
		КонецЕсли;
		
		Если Копирование Тогда
			
			Отказ = Истина;
			
			КопироватьМаршрутнуюКарту();
			
		ИначеЕсли НЕ ОснованиеНоменклатура.Пустая() Тогда
			
			Отказ = Истина;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Основание", ОснованиеНоменклатура);
			ОткрытьФорму("Справочник.МаршрутныеКарты.ФормаОбъекта", ПараметрыФормы);
			
		КонецЕсли;
		 		
	ИначеЕсли Элемент.Имя = "СписокСпецификаций" Тогда
		
		Если Группа Тогда
			Возврат;
		КонецЕсли;
		
		Если Копирование Тогда
			
			Отказ = Истина;
			
			КопироватьРесурснуюСпецификациюВСпискеСписокСпецификаций();
			
		ИначеЕсли НЕ ОснованиеНоменклатура.Пустая() Тогда
			
			Отказ = Истина;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Основание", ОснованиеНоменклатура);
			ОткрытьФорму("Справочник.РесурсныеСпецификации.ФормаОбъекта", ПараметрыФормы);
			
		КонецЕсли;
				
	ИначеЕсли Элемент.Имя = "СписокРазрешений" Тогда

		Если Не Копирование И НЕ ОснованиеНоменклатура.Пустая() И РазрешенияСпецификация.Пустая() Тогда
			
			Отказ = Истина;
			
			Основание = Новый Структура;
			
			Основание.Вставить("Материал", ОснованиеНоменклатура);
			
			ПараметрыФормы = Новый Структура("Основание", Основание);
			
			ОткрытьФорму("Документ.РазрешениеНаЗаменуМатериалов.ФормаОбъекта", ПараметрыФормы, , Истина);
			
		КонецЕсли;

	//++ Устарело_Производство21
	ИначеЕсли Элемент.Имя = "СписокПлановыхКалькуляций" Тогда
		
		Отказ = Истина;
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ОснованиеНоменклатура);
		
		ЗначенияЗаполнения = Новый Структура("МассивОбъектов, ТипОснования", МассивОбъектов, Тип("СправочникСсылка.Номенклатура"));
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Документ.ПлановаяКалькуляция.ФормаОбъекта", ПараметрыФормы);
	//-- Устарело_Производство21
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
