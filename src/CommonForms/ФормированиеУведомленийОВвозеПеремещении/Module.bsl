#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдентификаторУведомлениеОВвозеПрослеживаемыхТоваров = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.УведомлениеОВвозеПрослеживаемыхТоваров");
	ИдентификаторУведомлениеОПеремещенииПрослеживаемыхТоваров = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров");
	
	УстановитьУсловноеОформление();
	
	// Возврат при получении формы для анализа.
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТипУведомления.СписокВыбора.Очистить();
	Элементы.ТипУведомления.СписокВыбора.Добавить(ИдентификаторУведомлениеОВвозеПрослеживаемыхТоваров, СинонимыСтрокОформления().УведомлениеОВвозе);
	Элементы.ТипУведомления.СписокВыбора.Добавить(ИдентификаторУведомлениеОПеремещенииПрослеживаемыхТоваров, СинонимыСтрокОформления().УведомлениеОВывозе);
	
	Организация = Параметры.Организация;
	Основание = Параметры.Основание;
	КодТНВЭД = Параметры.КодТНВЭД;
	
	Если Параметры.ТипУведомления = Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров") Тогда
		ТипУведомления = ИдентификаторУведомлениеОВвозеПрослеживаемыхТоваров;	
	ИначеЕсли Параметры.ТипУведомления = Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров") Тогда
		ТипУведомления = ИдентификаторУведомлениеОПеремещенииПрослеживаемыхТоваров;
	КонецЕсли;
		
	УстановитьОтборПоТипуДокументаИмпорта();
	УстановитьОтборПоОрганизации();
	УстановитьОтборПоКодуТНВЭД();
	УстановитьОтборПоТипуУведомления();
	УстановитьОтборПоОснованию();
	
	ОбновитьЗаголовкиГиперссылокНаСервере();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПриобретениеТоваровУслуг"
		Или ИмяСобытия = "Запись_РеализацияТоваровУслуг"
		Или ИмяСобытия = "Запись_УведомлениеОВвозеПрослеживаемыхТоваров"
		Или ИмяСобытия = "Запись_УведомлениеОПеремещенииПрослеживаемыхТоваров" Тогда
		Элементы.КОформлению.Обновить();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_УведомлениеОВвозеПрослеживаемыхТоваров"
		Или ИмяСобытия = "Запись_УведомлениеОПеремещенииПрослеживаемыхТоваров" Тогда
		ОбновитьЗаголовкиГиперссылокНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НужноУстановитьОтборДинамическогоСписка(КОформлению.Отбор.Элементы, Элементы.Организация, Организация) Тогда	
		УстановитьОтборПоОрганизации();
		ОбновитьЗаголовкиГиперссылокНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДПриИзменении(Элемент)
	
	Если НужноУстановитьОтборДинамическогоСписка(КОформлению.Отбор.Элементы, Элементы.КодТНВЭД, КодТНВЭД) Тогда	
		УстановитьОтборПоКодуТНВЭД();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипУведомленияПриИзменении(Элемент)
	
	Если НужноУстановитьОтборДинамическогоСписка(КОформлению.Отбор.Элементы, Элементы.ТипУведомления, ТипУведомления) Тогда
		УстановитьОтборПоТипуУведомления();	
		ОбновитьЗаголовкиГиперссылокНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	Если НужноУстановитьОтборДинамическогоСписка(КОформлению.Отбор.Элементы, Элементы.Основание, Основание) Тогда
		УстановитьОтборПоОснованию();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОтправитьНажатие(Элемент)
	
	ОткрытьФормуУведомлений("ОжидаютОтправки");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОжидатьНажатие(Элемент)
	
	ОткрытьФормуУведомлений("ОжидаютПолучения");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаАрхивНажатие(Элемент)
	
	ОткрытьФормуУведомлений("Завершены");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьИОтправитьУведомление(Команда)
	ТекущиеДанные = Элементы.КОформлению.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СоздатьИОтправитьУведомлениеНаКлиенте(ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьУведомление(Команда)
	ОтправитьУведомление = Ложь;
	ВыделенныеСтроки = Элементы.КОформлению.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = Элементы.КОформлению.ДанныеСтроки(ИдентификаторСтроки);
		СоздатьИОтправитьУведомлениеНаКлиенте(ВыделеннаяСтрока, ОтправитьУведомление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИОтправитьУведомлениеНаКлиенте(ТекущиеДанные, ОтправитьУведомление = Истина)
	
	ДокументУведомлениеСсылка = СоздатьИОтправитьУведомлениеНаСервере(ТекущиеДанные, ОтправитьУведомление);
	
	Если ТипЗнч(ДокументУведомлениеСсылка) = Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров") Тогда
		ПараметрыЗаписи = Новый Структура;
		Оповестить("Запись_УведомлениеОВвозеПрослеживаемыхТоваров", ПараметрыЗаписи, ДокументУведомлениеСсылка);	
	ИначеЕсли ТипЗнч(ДокументУведомлениеСсылка) = Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров") Тогда	
		ПараметрыЗаписи = Новый Структура;
		Оповестить("Запись_УведомлениеОПеремещенииПрослеживаемыхТоваров", ПараметрыЗаписи, ДокументУведомлениеСсылка);
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура УстановитьОтборПоОрганизации()
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОформлению,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		"Организация",
		ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоКодуТНВЭД()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОформлению,
		"АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД",
		КодТНВЭД,
		ВидСравненияКомпоновкиДанных.Равно,
		"КодТНВЭД",
		ЗначениеЗаполнено(КодТНВЭД));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОформлению,
		"Номенклатура.КодТНВЭД",
		КодТНВЭД,
		ВидСравненияКомпоновкиДанных.Равно,
		"КодТНВЭД",
		ЗначениеЗаполнено(КодТНВЭД));
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТипуУведомления()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОформлению,
		"ТипУведомления",
		ТипУведомления,
		ВидСравненияКомпоновкиДанных.Равно,
		"ТипУведомления",
		ЗначениеЗаполнено(ТипУведомления));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоОснованию()
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		КОформлению,
		"Основание",
		Основание,
		ВидСравненияКомпоновкиДанных.Равно,
		"Основание",
		ЗначениеЗаполнено(Основание));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТипуДокументаИмпорта()
	
	СписокТиповДокументов = Новый СписокЗначений;
	СписокТиповДокументов.Добавить(ИдентификаторУведомлениеОВвозеПрослеживаемыхТоваров);
	КОформлению.Параметры.УстановитьЗначениеПараметра("ТипДокументаИмпорта", СписокТиповДокументов);
	КОформлению.Параметры.УстановитьЗначениеПараметра("ИдентификаторУведомлениеОПеремещенииПрослеживаемыхТоваров", ИдентификаторУведомлениеОПеремещенииПрослеживаемыхТоваров);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КОформлениюТипУведомления.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КОформлению.ТипУведомления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ИдентификаторУведомлениеОВвозеПрослеживаемыхТоваров;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СинонимыСтрокОформления().УведомлениеОВвозе);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КОформлениюТипУведомления.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КОформлению.ТипУведомления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ИдентификаторУведомлениеОПеремещенииПрослеживаемыхТоваров;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СинонимыСтрокОформления().УведомлениеОВывозе);
		
КонецПроцедуры

&НаКлиенте
Функция НужноУстановитьОтборДинамическогоСписка(ЭлементыОтбора, ЭлементФормы, ПроверяемоеЗначение)
	Результат = Ложь;
	ЭлементОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(КОформлению.Отбор.Элементы, ЭлементФормы.Имя);
	Если ЭлементОтбора = Неопределено
		Или ЭлементОтбора.Использование И ЭлементОтбора.ЛевоеЗначение <> ПроверяемоеЗначение
		Или Не ЭлементОтбора.Использование И ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда
		Результат = Истина;	
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция СинонимыСтрокОформления()
	Результат = Новый Структура;
	Результат.Вставить("УведомлениеОВвозе", НСтр("ru = 'Уведомление о ввозе';
												|en = 'Import notification'"));
	Результат.Вставить("УведомлениеОВывозе", НСтр("ru = 'Уведомление о вывозе';
													|en = 'Export notification'"));
	Возврат Результат;	
КонецФункции

&НаСервере
Функция СоздатьИОтправитьУведомлениеНаСервере(ТекущиеДанные, ОтправитьУведомление = Истина)
	
	Результат = Неопределено; 
	
	ИмяТипаУведомления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ТипУведомления, "Имя");
	
	Если ИмяТипаУведомления = "УведомлениеОВвозеПрослеживаемыхТоваров" Тогда
	
		ТаблицаДанныхДляУведомлений = Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ДанныеТЧТоварыПоОснованию(ТекущиеДанные.Основание, ТекущиеДанные.КодТНВЭД);
		ТаблицаЕдиницИзмерения = ТаблицаДанныхДляУведомлений.Скопировать();
		ТаблицаЕдиницИзмерения.Свернуть("ЕдиницаИзмерения");
		
		Для Каждого СтрокаТаблицы Из ТаблицаЕдиницИзмерения Цикл
			Отбор = Новый Структура();
			Отбор.Вставить("ЕдиницаИзмерения", СтрокаТаблицы.ЕдиницаИзмерения);
			СтрокиТаблицыДанных = ТаблицаДанныхДляУведомлений.НайтиСтроки(Отбор);
			
			ДокументОбъект = Документы.УведомлениеОВвозеПрослеживаемыхТоваров.СоздатьДокумент();
			ДокументОбъект.КодТНВЭД = ТекущиеДанные.КодТНВЭД;
			ДокументОбъект.Организация = ТекущиеДанные.Организация;
			ДокументОбъект.ПервичныйДокумент = ТекущиеДанные.Основание;
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
			ДокументОбъект.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
			ДокументОбъект.ЕдиницаПрослеживаемости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.КодТНВЭД, "ЕдиницаИзмерения");
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ПолучитьДанныеОснования(ТекущиеДанные.Основание));
			Для Каждого Элемент Из СтрокиТаблицыДанных Цикл
				СтрокаТЧ = ДокументОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, Элемент);
			КонецЦикла;
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.УведомлениеОВвозеПрослеживаемыхТоваров);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
			// Запись документа
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Результат = ДокументОбъект.Ссылка;
			Исключение
				ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ДокументОбъект);
			КонецПопытки
		КонецЦикла;
		
	ИначеЕсли ИмяТипаУведомления = "УведомлениеОПеремещенииПрослеживаемыхТоваров" Тогда 
		
		ДокументОбъект = Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров.СоздатьДокумент();
		ДокументОбъект.Организация = ТекущиеДанные.Организация;
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ДокументОбъект.Заполнить(ТекущиеДанные.Основание);
		// Запись документа
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Результат = ДокументОбъект.Ссылка;
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ДокументОбъект);
		КонецПопытки
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьДанныеОснования(Основание)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ПриобретениеТоваровУслуг.Склад КАК Склад
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

#Область ОбменСКО

&НаКлиенте
Процедура ОткрытьФормуУведомлений(Состояние)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Состояние", Состояние);
	
	Если ЗначениеЗаполнено(ТипУведомления) Тогда
		
		Если ТипУведомления = ИдентификаторУведомлениеОВвозеПрослеживаемыхТоваров Тогда
			ПараметрыФормы.Вставить("ТипУведомления", Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров"));
		Иначе
			ПараметрыФормы.Вставить("ТипУведомления", Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров"));
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФормыУведомлений = "ЖурналДокументов.ПрослеживаемостьУведомления.ФормаСписка";
	
	ОткрытьФорму(
		ИмяФормыУведомлений,
		ПараметрыФормы,
		,,,,,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовкиГиперссылок(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбновитьЗаголовкиГиперссылокНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиГиперссылокНаСервере()
	
	МассивОрганизаций = ?(ЗначениеЗаполнено(Организация), ОбщегоНазначенияУТКлиентСервер.Массив(Организация), Неопределено);

	ВидимостьЭлементаГиперссылкаОжидать = Истина;
			
	ТипыУведомлений = Новый Массив;
	Если ЗначениеЗаполнено(ТипУведомления) Тогда
		Если ТипУведомления = ИдентификаторУведомлениеОВвозеПрослеживаемыхТоваров Тогда 
			ТипыУведомлений.Добавить(Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров"));
			ВидимостьЭлементаГиперссылкаОжидать = Ложь;	
		Иначе
			ТипыУведомлений.Добавить(Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров"));
		КонецЕсли;
	Иначе
		ТипыУведомлений.Добавить(Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров"));
		ТипыУведомлений.Добавить(Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров"));
	КонецЕсли;
	
	КоличестваУведомленийКОформлению =
		ЖурналыДокументов.ПрослеживаемостьУведомления.СтатистикаОтправкиУведомлений(ТипыУведомлений, МассивОрганизаций);
	
	ШаблонЗаголовокЭлементаОтправить = НСтр("ru = 'Отправить %1';
											|en = 'Send %1'");
	ШаблонЗаголовокЭлементаОжидать = НСтр("ru = 'Ожидать получения РНПТ %1';
											|en = 'Await receiving goods batch registration number %1'");
	ШаблонЗаголовокЭлементаАрхив = НСтр("ru = 'Архив %1';
										|en = 'Archive %1'");
	
	КоличествоКОформлениюОтправить = 0;
	КоличествоКОформлениюОжидать = 0;
	КоличествоКОформлениюАрхив = 0;
	
	Для Каждого КлючЗначение Из КоличестваУведомленийКОформлению Цикл
		
		КоличествоКОформлениюОтправить = КоличествоКОформлениюОтправить + КлючЗначение.Значение.ОжидаютОтправки;
		КоличествоКОформлениюОжидать = КоличествоКОформлениюОжидать + КлючЗначение.Значение.ОжидаютПолучения;
		КоличествоКОформлениюАрхив = КоличествоКОформлениюАрхив + КлючЗначение.Значение.Завершены;
	
	КонецЦикла;
	
	ЗаголовокЭлементаОтправить =
		СтрШаблон(
			ШаблонЗаголовокЭлементаОтправить,
			?(ЗначениеЗаполнено(КоличествоКОформлениюОтправить), "(" + Строка(КоличествоКОформлениюОтправить) + ")", ""));
	
	ЗаголовокЭлементаОжидать =
		СтрШаблон(
			ШаблонЗаголовокЭлементаОжидать,
			?(ЗначениеЗаполнено(КоличествоКОформлениюОжидать), "(" + Строка(КоличествоКОформлениюОжидать) + ")", ""));
	
	ЗаголовокЭлементаАрхив =
		СтрШаблон(
			ШаблонЗаголовокЭлементаАрхив,
			?(ЗначениеЗаполнено(КоличествоКОформлениюАрхив), "(" + Строка(КоличествоКОформлениюАрхив) + ")", ""));
	
	Элементы.ГиперссылкаОтправить.Заголовок = СокрЛП(ЗаголовокЭлементаОтправить);
	Элементы.ГиперссылкаОжидать.Заголовок 	= СокрЛП(ЗаголовокЭлементаОжидать);
	Элементы.ГиперссылкаАрхив.Заголовок 	= СокрЛП(ЗаголовокЭлементаАрхив);
	
	Элементы.ГиперссылкаОжидать.Видимость = ВидимостьЭлементаГиперссылкаОжидать;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
