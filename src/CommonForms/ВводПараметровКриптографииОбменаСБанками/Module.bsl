
#Область ПеременныеФормы

&НаКлиенте
Перем ИтерацияПоискаПриОткрытии;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Значения параметра КлючНазначенияИспользования см. в УниверсальныйОбменСБанкамиКлиентСервер.НовыеДополнительныеПараметрыКриптографии()
	// Значения параметра ПараметрыОтбора см. в УниверсальныйОбменСБанкамиКлиентСервер.ПараметрыОтбораСертификата()
	// или в ФинОтчетностьВБанкиКлиентСервер.ПараметрыОтбораСертификата()
	
	МодельСервиса = ОбщегоНазначения.РазделениеВключено();
	
	Если Не ЗначениеЗаполнено(Параметры.Организация) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(КлючНазначенияИспользования) Тогда
		// Используем наиболее строгие условия: выбираем сертификат с отбором по организации.
		КлючНазначенияИспользования = "СертификатБезДоверенности";
		
	КонецЕсли;
	
	ИнициализироватьПарамерыОтбора(Отказ);
	
	Если Отказ Тогда
		
		Если КлючНазначенияИспользования = "СертификатСДоверенностью"
		   И (ПараметрыОтбораДоверенность = Неопределено Или Не ЗначениеЗаполнено(ПараметрыОтбораДоверенность.ФизическоеЛицо)) Тогда
		   
			ШаблонСообщения = НСтр("ru = 'Физическое лицо, подписывающее отчетность, не определено.
                                    |Укажите его в карточке пользователя %1.';
                                    |en = 'A person who signs the reporting is undefined.
                                    |Specify them in the %1 user card.'");
			ТекущийПользователь = Пользователи.ТекущийПользователь();
			
			СообщениеДляПользователя = Новый СообщениеПользователю;
			СообщениеДляПользователя.КлючДанных = ТекущийПользователь;
			СообщениеДляПользователя.ПутьКДанным = "Объект.ФизическоеЛицо";
			СообщениеДляПользователя.Текст = СтрШаблон(ШаблонСообщения, ТекущийПользователь);
			СообщениеДляПользователя.Сообщить();
						
		КонецЕсли;
		Возврат;
					
	КонецЕсли;
	
	Если КлючНазначенияИспользования = "СертификатСДоверенностью" Тогда
		
		РазрешеныМЧДB2G = Параметры.РазрешенныеВидыМЧД.РазрешеныМЧДB2G;
		РазрешеныМЧДB2B = Параметры.РазрешенныеВидыМЧД.РазрешеныМЧДB2B;
		
		Если РазрешеныМЧДB2G Тогда
		
			ДоступныеСправочникиМЧД = УниверсальныйОбменСБанкамиВызовСервера.ДоступныеСправочникиМЧД("РегламентированнаяОтчетность", "Строка");
			Для Каждого ИмяСправочника Из ДоступныеСправочникиМЧД Цикл
				
				ПредставлениеПункта = ?(ИмяСправочника = "МашиночитаемыеДоверенностиРаспределенныйРеестр",
					НСтр("ru = 'МЧД из 1С-Отчетность (распределенный реестр)';
						|en = 'Machine-readable letter of authority from 1C Reporting (distributed ledger)'"), НСтр("ru = 'МЧД из 1С-Отчетность';
																						|en = 'Machine-readable letter of authority from 1C Reporting'"));
				Элементы.Доверенность.СписокВыбора.Добавить(Справочники[ИмяСправочника].ПустаяСсылка(), ПредставлениеПункта);
				
			КонецЦикла;
			
		КонецЕсли;
		Если РазрешеныМЧДB2G Или РазрешеныМЧДB2B Тогда
			// В интерфейсе все типы отображаются в одной форме списка, поэтому можно использовать любую ссылку.
			ДоступныеСправочникиМЧД = УниверсальныйОбменСБанкамиВызовСервера.ДоступныеСправочникиМЧД("СтандартныеПодсистемы", "Строка");
			Если ДоступныеСправочникиМЧД.Количество() > 0 Тогда
				Элементы.Доверенность.СписокВыбора.Добавить(Справочники[ДоступныеСправочникиМЧД[0]].ПустаяСсылка(), НСтр("ru = 'МЧД (единый формат)';
																														|en = 'Machine-readable letter of authority (unified format)'"));
			КонецЕсли;
				
		КонецЕсли;
		Если РазрешеныМЧДB2B Тогда
			// В интерфейсе все типы отображаются в одной форме списка, поэтому можно использовать любую ссылку.
			ДоступныеСправочникиМЧД = УниверсальныйОбменСБанкамиВызовСервера.ДоступныеСправочникиМЧД("ЭлектронноеВзаимодействие", "Строка");
			Если ДоступныеСправочникиМЧД.Количество() > 0 Тогда
				Элементы.Доверенность.СписокВыбора.Добавить(Справочники[ДоступныеСправочникиМЧД[0]].ПустаяСсылка(), НСтр("ru = 'МЧД из 1С:ЭДО';
																														|en = 'Machine-readable letter of authority from 1C:EDI'"));
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Заголовок = ?(ЗначениеЗаполнено(Параметры.Заголовок), Параметры.Заголовок, ПараметрыОтбораОрганизация.ПредставлениеОтбора);
	Элементы.ФормаОК.Заголовок = Параметры.НазваниеКнопки;
	
	УправлениеДоступностью(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Даем прорисоваться форме и запускаем проверку.
	ИтерацияПоискаПриОткрытии = 1;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьДоверенностьИСертификат", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВвод(Команда)
	
	Если ИспользоватьСертификат <> 0 И Не ЗначениеЗаполнено(Доверенность)
	   И НужноПроверятьСертификат(КлючНазначенияИспользования) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Доверенность на подписанта не выбрана. Её необходимо указать для продолжения формирования сообщения.';
				|en = 'The letter of authority for the signer is not selected. To continue generating the message, specify the letter of authority.'"),
			,"Доверенность");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Сертификат криптографии не выбран, его необходимо указать для продолжения формирования сообщения.';
				|en = 'A cryptographic certificate has not been selected, specify it to continue generating the message.'"),
			,"ОтпечатокСертификатаПредставление");
		Возврат;
	КонецЕсли;
	
	Если СертификатНеНайденВХранилище Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Выбран сертификат криптографии, который не найден в хранилище сертификатов.
				|Выберите сертификат из хранилища.';
				|en = 'Selected cryptography certificate was not found in the certificate storage.
				|Select a certificate from the storage.'"),
			,"ОтпечатокСертификатаПредставление");
		Возврат;
	КонецЕсли;
	
	Если ЭтоОблачныйСертификат Тогда
		Оповещение = Новый ОписаниеОповещения("ПроверитьПослеИнициализацииОблачнойКриптографии", ЭтотОбъект);
		УниверсальныйОбменСБанкамиКлиент.ИнициализироватьСервисКриптографии(ОтпечатокСертификата, Оповещение);
	Иначе
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьВводЗавершение", ЭтотОбъект);
		УниверсальныйОбменСБанкамиКлиент.ПроверитьСертификат(ОповещениеОЗавершении, ОтпечатокСертификата, , Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводЗавершение(РезультатПроверки, ДополнительныеПараметры) Экспорт

	ТекстОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПроверки, "ОписаниеОшибки", "");
	Валиден     = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПроверки, "Валиден", Ложь);

	Если Валиден <> Истина Тогда
		Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = НСтр("ru = 'Возникла неизвестная ошибка при проверке сертификата. Попробуйте выбрать другой сертификат.';
								|en = 'An unknown error occurred when checking the certificate. Select another certificate.'");
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстОшибки);
		
		Возврат;
	КонецЕсли;
	
	СохранитьСертификатИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПослеИнициализацииОблачнойКриптографии(Результат, ДополнительныеПараметры) Экспорт

	Если Результат.Выполнено Тогда
		РезультатПроверки = ПроверитьВСервисе(ОтпечатокСертификата);
		Если РезультатПроверки = Ложь Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Сертификат не действителен. Попробуйте выбрать другой сертификат.';
											|en = 'The certificate is invalid. Select another one.'"));
			Возврат;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	СохранитьСертификатИЗакрыть();

КонецПроцедуры

// Используется как обработчик оповещения в ЭлектроннаяПодписьКлиент.ДобавитьСертификат() .
//
// Параметры:
//  ДобавленныйСертификат - результат добавления сертификата:
//                         * Неопределено - при проверке или добавлении сертификата произошла ошибка.
//                         * Структура - информация о сертификате. См. комментарий к ЭлектроннаяПодписьКлиент.ДобавитьСертификат()
//  Источник     - ФормаКлиентскогоПриложения - откуда было вызвано добавление сертификата.
//
&НаКлиенте
Процедура ДобавитьСертификатЗавершение(ДобавленныйСертификат, Источник) Экспорт

	Если ДобавленныйСертификат = Неопределено Тогда // ошибка добавления
		Возврат;
	КонецЕсли;
	
	Если Не ДобавленныйСертификат.Добавлен
	 Или Не ЗначениеЗаполнено(ДобавленныйСертификат.Ссылка) Тогда
		// Подано заявление, но самого сертификата пока нет.
		Возврат;
	КонецЕсли;
	
	ОтпечатокСертификата = ОтпечатокПоСертификату(ДобавленныйСертификат.Ссылка);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьДоверенностьИСертификат", 0.2, Истина);
	
	Если Источник <> Неопределено И Источник.Открыта() Тогда
		Источник.Закрыть();
	КонецЕсли;
	
КонецПроцедуры	
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИспользоватьСертификатПриИзменении(Элемент)
	
	ДоверенностьОчистка(Элементы.Доверенность, Ложь);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьДоверенностьИСертификат", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтотОбъект);
	Если Доверенность <> Неопределено Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьДоверенностьИСертификат", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Доверенность = Неопределено Тогда
		
		Если Элемент.СписокВыбора.Количество() = 1 Тогда
			Доверенность = Элемент.СписокВыбора[0].Значение;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуВыбораМЧД(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьОчистка(Элемент, СтандартнаяОбработка)
	
	Доверенность = Неопределено;
	ОтпечатокСертификата = "";
	ОтпечатокСертификатаПредставление = "";
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Доверенность) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли ВыбранноеЗначение.Пустая() Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Доверенность) Тогда
			
			ТипСправочникаМЧД = ТипЗнч(ВыбранноеЗначение);
			
		Иначе
			
			ТипСправочникаМЧД = Неопределено;
			Доверенность = ВыбранноеЗначение;
			
		КонецЕсли;
		УправлениеДоступностью(ЭтотОбъект);
		ОткрытьФормуВыбораМЧД(Элемент, ТипСправочникаМЧД);
		
	Иначе 
		
		СтандартнаяОбработка = Ложь;
		Доверенность = ВыбранноеЗначение;
		ДоверенностьПриИзменении(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Элемент.СписокВыбора.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Доверенность = Элемент.СписокВыбора[0].Значение;
	
	ОткрытьФормуВыбораМЧД(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтпечатокСертификатаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ИспользоватьСертификат > 0
	   И Не ЗначениеЗаполнено(Доверенность) И ПустаяСтрока(ОтпечатокСертификата) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ОтпечатокСертификатаПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент));
	
	ДанныеСубъекта = ДанныеСубъектаДляПоискаСертификата();
	
	УниверсальныйОбменСБанкамиКлиент.ВыбратьСертификат(Оповещение, ОтпечатокСертификата, ДанныеСубъекта);

КонецПроцедуры

&НаКлиенте
Процедура ОтпечатокСертификатаПредставлениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Выполнено Тогда
		Возврат;
	КонецЕсли;
		
	ОтпечатокСертификата = Результат.ВыбранноеЗначение.Отпечаток;
	ЭтоОблачныйСертификат = УниверсальныйОбменСБанкамиВызовСервера.ЭтоОблачныйСертификатПользователя(ОтпечатокСертификата);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьСертификат", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтпечатокСертификатаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ОтпечатокСертификата = "";
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьСертификат", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтпечатокСертификатаПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(ОтпечатокСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоОблачныйСертификат Тогда
		ДанныеСертификата = ДанныеСертификата(ОтпечатокСертификата);
		Если ДанныеСертификата <> Неопределено Тогда
			ПараметрыФормы = Новый Структура("Сертификат", ДанныеСертификата);
			ОткрытьФорму(
				"ОбщаяФорма.ПросмотрСертификатаОбменаСБанками", ПараметрыФормы,
				ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		УниверсальныйОбменСБанкамиКлиент.ПоказатьСертификат(
			Новый Структура("Отпечаток, ЭтоЭлектроннаяПодписьВМоделиСервиса",
			ОтпечатокСертификата, ЭтоОблачныйСертификат));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтпечатокСертификатаИнструкцияНажатие(Элемент)
	
	ПараметрыИнструкций = Новый Структура;
	ПараметрыИнструкций.Вставить("ИспользуетсяМЧД", ИспользоватьСертификат = 1);
	ПараметрыИнструкций.Вставить("Организация", Параметры.Организация);
	
	ЗаполнениеФинОтчетностиВБанкиКлиент.ОткрытьИнструкциюПолученияЭП(ЭтотОбъект, ПараметрыИнструкций);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьПарамерыОтбора(Отказ)
	
	// Переносим значения отборов, которые должны применяться при выборе сертификата от имени организации.
	ПараметрыОтбораОрганизация = УниверсальныйОбменСБанкамиКлиентСервер.ПараметрыОтбораСертификата(Параметры.Сервис, Параметры.Организация);
	Если ЗначениеЗаполнено(Параметры.ПараметрыОтбора) Тогда
		Для Каждого ПараметрОтбора Из Параметры.ПараметрыОтбора Цикл
			ПараметрыОтбораОрганизация.Вставить(ПараметрОтбора.Ключ, ПараметрОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	Если Не ПараметрыОтбораОрганизация.Свойство("ИНН") Тогда
		ПараметрыОтбораОрганизация.Вставить("ИНН", "");
	КонецЕсли;
	Если Не ПараметрыОтбораОрганизация.Свойство("СНИЛС") Тогда
		ПараметрыОтбораОрганизация.Вставить("СНИЛС", "");
	КонецЕсли;
	Если Не ПараметрыОтбораОрганизация.Свойство("ЮридическоеФизическоеЛицо") Тогда
		ПараметрыОтбораОрганизация.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	КонецЕсли;
	
	Если НужноПроверятьСертификат(КлючНазначенияИспользования) Тогда
		
		РеквизитыОрганизации = Новый Структура("ИНН,НаименованиеСокращенное,ЮридическоеФизическоеЛицо",
				"", "", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
		Если ЗначениеЗаполнено(ПараметрыОтбораОрганизация.Организация) Тогда
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПараметрыОтбораОрганизация.Организация, "ИНН,НаименованиеСокращенное,ЮридическоеФизическоеЛицо", Истина);
		КонецЕсли;
		Если ПустаяСтрока(ПараметрыОтбораОрганизация.ИНН) Тогда
			ПараметрыОтбораОрганизация.ИНН = РеквизитыОрганизации.ИНН;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПараметрыОтбораОрганизация.ЮридическоеФизическоеЛицо) Тогда
			ПараметрыОтбораОрганизация.ЮридическоеФизическоеЛицо = РеквизитыОрганизации.ЮридическоеФизическоеЛицо;
		КонецЕсли;
		
	Иначе
		
		ПараметрыОтбораОрганизация.ИНН = "";
		ПараметрыОтбораОрганизация.СНИЛС = "";
		
	КонецЕсли;
	
	// Заполняем значения по-умолчанию.
	ЕстьСертификатПоУмолчанию = ЗначениеЗаполнено(Параметры.ОтпечатокСертификата);
	
	ФизЛицоТекущегоПользователя = Справочники.ФизическиеЛица.ПустаяСсылка();
	Если Не ЕстьСертификатПоУмолчанию Или КлючНазначенияИспользования = "СертификатСДоверенностью" Тогда
		// Нужно знать физлицо, соответствующее пользователю.
		Если ПараметрыОтбораОрганизация.Свойство("ФизическоеЛицо", ФизЛицоТекущегоПользователя)
		   И Не ЗначениеЗаполнено(ФизЛицоТекущегоПользователя) Тогда
			ФизЛицоТекущегоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
			ПараметрыОтбораОрганизация.ФизическоеЛицо = ФизЛицоТекущегоПользователя;
		КонецЕсли;
		Если КлючНазначенияИспользования = "СертификатСДоверенностью"
		   И Не ЗначениеЗаполнено(ФизЛицоТекущегоПользователя) Тогда // обязательна привязка физлица к пользователю
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьСертификатПоУмолчанию Тогда
		
		ОтпечатокСертификата = Параметры.ОтпечатокСертификата;
		
	Иначе
		// Подставим ранее использовавшийся сертификат. После открытия формы проверим, актуален ли он.
		СертификатСМЧД = УниверсальныйОбменСБанкамиВызовСервера.СертификатОрганизации(ПараметрыОтбораОрганизация);
		Если Не ЗначениеЗаполнено(СертификатСМЧД.Доверенность)        // сертификат использовался без доверенности
		 Или КлючНазначенияИспользования = "СертификатСДоверенностью" // будет указана доверенность (ниже по коду), а сейчас сертификат
		 Или КлючНазначенияИспользования = "БезОтборов" Тогда         // все-равно какой сертификат использовать
			ОтпечатокСертификата = СертификатСМЧД.ОтпечатокСертификата;
		КонецЕсли;
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		ЭтоОблачныйСертификат = УниверсальныйОбменСБанкамиВызовСервера.ЭтоОблачныйСертификатПользователя(ОтпечатокСертификата);
	КонецЕсли;
	
	Если КлючНазначенияИспользования <> "СертификатСДоверенностью" Тогда
	    // Машиночитаемая доверенность не используется.
		Возврат;
	КонецЕсли;
	
	// Переносим значения отборов, которые должны применяться при выборе сертификата по доверенности.
	ПараметрыОтбораДоверенность = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтбораОрганизация);
	ПараметрыОтбораДоверенность.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Если Не ПараметрыОтбораДоверенность.Свойство("ФизическоеЛицо") Тогда
		ПараметрыОтбораДоверенность.Вставить("ФизическоеЛицо", ФизЛицоТекущегоПользователя);
	КонецЕсли;
	
	РеквизитыФизлица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПараметрыОтбораДоверенность.ФизическоеЛицо, "ИНН,СтраховойНомерПФР,Наименование", Истина);
	ПараметрыОтбораДоверенность.ИНН = РеквизитыФизлица.ИНН;
	Если ПустаяСтрока(ПараметрыОтбораДоверенность.СНИЛС) Тогда
		ПараметрыОтбораДоверенность.СНИЛС = РеквизитыФизлица.СтраховойНомерПФР;
	КонецЕсли;
	ФинОтчетностьВБанкиКлиентСервер.ЗаполнитьПредставлениеОтбораСертификата(ПараметрыОтбораДоверенность, РеквизитыФизлица.Наименование);
	
	// Очищаем значение отборов, которые были перенесены из Параметры.ПараметрыОтбора, но не должны действовать для организации.
	ПараметрыОтбораОрганизация.СНИЛС = "";
	Если ПараметрыОтбораОрганизация.Свойство("ФизическоеЛицо") Тогда
		ПараметрыОтбораОрганизация.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	ФинОтчетностьВБанкиКлиентСервер.ЗаполнитьПредставлениеОтбораСертификата(
		ПараметрыОтбораОрганизация, РеквизитыОрганизации.НаименованиеСокращенное);
	
	Если ЗначениеЗаполнено(Параметры.Доверенность) Тогда
		
		Доверенность = Параметры.Доверенность;
		ИспользоватьСертификат = 1;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОтбораДоверенность.ФизическоеЛицо) Тогда

		Если ЕстьСертификатПоУмолчанию Тогда
			// Вероятно это сертификат, не нуждающийся в доверенности. Проверим после открытия формы.
			ИспользоватьСертификат = 0;
			
		Иначе
			// Подставим ранее использовавшуюся доверенность. После открытия формы проверим, актуальна ли она.
			Доверенность = СертификатСМЧД.Доверенность;
			Если ЗначениеЗаполнено(Доверенность) Тогда
				ИспользоватьСертификат = 1;
			Иначе
				Доверенность = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяОтбораПоИНН = ?(ПараметрыОтбораОрганизация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
		"Отбор.ДоверительФЛ_ИНН", "Отбор.ДоверительЮЛ_ИНН");
	ОтборПоИНН = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый ПараметрВыбора(ИмяОтбораПоИНН, ПараметрыОтбораОрганизация.ИНН));
	Элементы.Доверенность.ПараметрыВыбора = Новый ФиксированныйМассив(ОтборПоИНН);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма, ПриОткрытии = Ложь)
	
	Параметры = Форма.Параметры;
	Элементы = Форма.Элементы;
	
	Элементы.Доверенность.Доступность = (Форма.ИспользоватьСертификат = 1);	
	Элементы.ГруппаОтпечатокСертификатаПодсказка.Видимость = Не ЗначениеЗаполнено(Форма.ОтпечатокСертификата)
		И Не ПриОткрытии
		И НужноПроверятьСертификат(Форма.КлючНазначенияИспользования);
	
	Если Не ПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаИспользоватьСертификат.Видимость = (Форма.КлючНазначенияИспользования = "СертификатСДоверенностью");
	Элементы.ОтпечатокСертификатаПредставление.ТолькоПросмотр = (Форма.КлючНазначенияИспользования = "БезВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораМЧД(ПолеВвода, ТипСправочникаМЧД = Неопределено)
	
	Если ТипСправочникаМЧД = Неопределено Тогда
		ТипСправочникаМЧД = ТипЗнч(Доверенность);
	КонецЕсли;
	
	ДанныеСубъекта = ДанныеСубъектаДляПоискаСертификата();
	ДатаПроверки = ДанныеСубъекта.Дата;
	
	ОтборВФорме = Новый Структура;
	// Отбор по представителю.
	Если Не ПустаяСтрока(ДанныеСубъекта.ИНН) Тогда
		ОтборВФорме.Вставить("ПредставительФЛ_ИНН", ДанныеСубъекта.ИНН);
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеСубъекта.СНИЛС) Тогда
		ОтборВФорме.Вставить("ПредставительФЛ_СНИЛС", ДанныеСубъекта.СНИЛС);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ВводПараметровКриптографииОбменаСБанками");
	ПараметрыФормы.Вставить("РежимВыбора",                 Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",          Истина);
	ПараметрыФормы.Вставить("Отбор",                       ОтборВФорме);
	Если ТипСправочникаМЧД = ТипЗнч(Доверенность) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Доверенность);
	КонецЕсли;
	
	Если УниверсальныйОбменСБанкамиВызовСервера.ДоступныеСправочникиМЧД("ЭлектронноеВзаимодействие")
			.Найти(ТипСправочникаМЧД) <> Неопределено Тогда
		
		// Отбор по доверителю.
		ПараметрыФормы.Вставить("Контрагент", Параметры.Организация);
		
		ИмяСправочника = "МашиночитаемыеДоверенностиОрганизаций";
		Если ТипСправочникаМЧД <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
			ИмяСправочника = "МЧД003";
		КонецЕсли;
		ФормаВыбора = ПолучитьФорму("Справочник." + ИмяСправочника + ".ФормаВыбора", ПараметрыФормы, ПолеВвода);
		ОтборыВСписке = ФормаВыбора.Список.Отбор;
		
		// Условия из МашиночитаемыеДоверенности.ДоверенностьДействительнаПоСвойствам() свернуты до флага Действует
		// в форме регистра сведений ЖурналМашиночитаемыхДоверенностей .
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборыВСписке, "Действует", Истина);
		
		Если Не ПустаяСтрока(ДанныеСубъекта.СНИЛС) И Не ПустаяСтрока(ДанныеСубъекта.ИНН) Тогда
			
			ОтборВСписке = ОтборыВСписке.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ОтборВСписке.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ОтборВСписке.Использование = Истина;
			
		Иначе
			
			ОтборВСписке = ОтборыВСписке;
			
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеСубъекта.СНИЛС) Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборВСписке,
				"ВсеПредставители", ДанныеСубъекта.СНИЛС, ВидСравненияКомпоновкиДанных.Содержит);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеСубъекта.ИНН) Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборВСписке,
				"ВсеПредставители", ДанныеСубъекта.ИНН, ВидСравненияКомпоновкиДанных.Содержит);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьОтборПоДоверителю", 0.5, Истина);
		
	ИначеЕсли УниверсальныйОбменСБанкамиВызовСервера.ДоступныеСправочникиМЧД("СтандартныеПодсистемы")
			.Найти(ТипСправочникаМЧД) <> Неопределено Тогда
		
		// Отбор по доверителю.
		ПараметрыФормы.Вставить("Доверитель",        Параметры.Организация);
		ПараметрыФормы.Вставить("Представитель",     ДанныеСубъекта.ФизическоеЛицо);
		ПараметрыФормы.Вставить("ТолькоДействующие", Истина);
		
		ИмяСправочника = "МашиночитаемыеДоверенности";
		ФормаВыбора = ПолучитьФорму("Справочник." + ИмяСправочника + ".ФормаВыбора", ПараметрыФормы, ПолеВвода);
		ОтборыВСписке = ФормаВыбора.Список.Отбор;
		
		// Условия из справочника МашиночитаемыеДоверенности.
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборыВСписке, "ПометкаУдаления", Ложь);
		
	ИначеЕсли УниверсальныйОбменСБанкамиВызовСервера.ДоступныеСправочникиМЧД("РегламентированнаяОтчетность")
			.Найти(ТипСправочникаМЧД) <> Неопределено Тогда
			
		ИмяСправочника = "МашиночитаемыеДоверенностиФНС";
		Если ТипСправочникаМЧД <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
			ИмяСправочника = "МашиночитаемыеДоверенностиРаспределенныйРеестр";
		КонецЕсли;
		Если ИмяСправочника = "МашиночитаемыеДоверенностиФНС" Тогда
		
			// Отбор по доверителю.
			ОтборВФорме.Вставить("Владелец", Параметры.Организация);
			
			ФормаВыбора = ПолучитьФорму("Справочник." + ИмяСправочника + ".ФормаВыбора", ПараметрыФормы, ПолеВвода);
			ОтборыВСписке = ФормаВыбора.Список.Отбор;
			
			//Условия из ИнтерфейсыВзаимодействияБРОВызовСервера.ОсновныеРеквизитыМашиночитаемыхДоверенностейФНС()
			// СтатусОтправки не проверяем, т.к. он хранится в стороннем регистре. Проверим после выбора.
			
		Иначе
			
			// Отбор по доверителю.
			ОтборВФорме.Вставить("Владелец", Параметры.Организация);
			
			ФормаВыбора = ПолучитьФорму("Справочник." + ИмяСправочника + ".ФормаВыбора", ПараметрыФормы, ПолеВвода);
			ОтборыВСписке = ФормаВыбора.Список.Отбор;
			
			//Условия из ИнтерфейсыВзаимодействияБРОВызовСервера.ОсновныеРеквизитыМашиночитаемыхДоверенностейФНС()
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборыВСписке,
				"Статус", ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.Отозвано"), ВидСравненияКомпоновкиДанных.НеРавно);
			
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборыВСписке, "ПометкаУдаления", Ложь);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборыВСписке,
			"ДатаВыдачи", ДатаПроверки, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборыВСписке,
			"ДатаОкончания", НачалоДня(ДатаПроверки), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму(ФормаВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСертификатИЗакрыть()

	// Обновляем настройки обмена с банками.
	Если КлючНазначенияИспользования <> "БезВыбора"
	   И ЗначениеЗаполнено(Параметры.Организация) И ЗначениеЗаполнено(Параметры.Сервис) Тогда
		Если КлючНазначенияИспользования = "СертификатСДоверенностью" Тогда
			УниверсальныйОбменСБанкамиВызовСервера.СохранитьСертификатОрганизации(ПараметрыОтбораДоверенность, ОтпечатокСертификата, Доверенность);
		Иначе
			УниверсальныйОбменСБанкамиВызовСервера.СохранитьСертификатОрганизации(ПараметрыОтбораОрганизация, ОтпечатокСертификата);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура();
	
	Результат.Вставить("Пароль",                          "");
	Результат.Вставить("Сертификат",                      ОтпечатокСертификата);
	Результат.Вставить("Доверенность",                    Доверенность);
	Результат.Вставить("ЭтоОблачныйСертификат",           ЭтоОблачныйСертификат);
	Результат.Вставить("ДобавитьМеткуДоверенногоВремени", Параметры.ДобавитьМеткуДоверенногоВремени
														  И Не ЭтоОблачныйСертификат);

	Закрыть(Результат);

КонецПроцедуры

#Область ПоискСертификата

&НаКлиенте
Процедура Подключаемый_ПроверитьДоверенностьИСертификат()
	
	// Выполняем следующие шаги:
	// 1) Проверяем правильность заполнения доверенности.
	// 2) Если неправильно заполнена, то пытаемся ее подобрать.
	// 3) Проверяем правильность заполнения сертификата с технической точки зрения (валидность).
	// 4) Проверяем соответствие сертификата и отборов по субъекту
	// 5) Если неправильно заполнен, то пытаемся его подобрать.
	
	Если КлючНазначенияИспользования <> "СертификатСДоверенностью" // доверенность не видна
	 Или ИспользоватьСертификат <> 1 Тогда // используем сертификат самой организации
		// Переходим к шагу 3.
		Подключаемый_ПроверитьСертификат();
		
	ИначеЕсли Не ЗначениеЗаполнено(Доверенность) Тогда
		// Переходим к шагу 2.
		ПодобратьДоверенность();
		
	Иначе
		// Проверяем правильность заполнения доверенности.
		Если ДоверенностьВерна() Тогда
			// Переходим к шагу 3.
			Подключаемый_ПроверитьСертификат();
			
		Иначе
			// Переходим к шагу 2.
			Доверенность = Неопределено;
			Если ИтерацияПоискаПриОткрытии <> 0 Тогда
				// Мы открыли форму со значением по-умолчанию. Оно не подошло. Пробуем подобрать другую доверенность.
				ПодобратьДоверенность();
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДоверенностьВерна()

	ТипДоверенности = ТипЗнч(Доверенность);
	
    СписокМЧД = Новый СписокЗначений;
	Если УниверсальныйОбменСБанкамиВызовСервера.ДоступныеСправочникиМЧД("ЭлектронноеВзаимодействие").Найти(ТипДоверенности) <> Неопределено Тогда
		ИмяСправочника = "МашиночитаемыеДоверенностиОрганизаций";
		Если ТипДоверенности = Тип("СправочникСсылка." + ИмяСправочника) Тогда
			// Для целей проверки типы сводим к первому из них.
			ИмяСправочника = "МЧД003";
		КонецЕсли;
		ТипДоверенности = Тип("СправочникСсылка." + ИмяСправочника);
		Если Элементы.Доверенность.СписокВыбора.НайтиПоЗначению(Новый(ТипДоверенности)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СписокМЧД = ПодобратьМашиночитаемыеДоверенностиОрганизаций(Доверенность);
		
	ИначеЕсли УниверсальныйОбменСБанкамиВызовСервера.ДоступныеСправочникиМЧД("СтандартныеПодсистемы")
			.Найти(ТипЗнч(Доверенность)) <> Неопределено Тогда
		Если Элементы.Доверенность.СписокВыбора.НайтиПоЗначению(Новый(ТипДоверенности)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
			
		СписокМЧД = ПодобратьМашиночитаемыеДоверенностиЕдиногоФормата(Доверенность);
				
	ИначеЕсли УниверсальныйОбменСБанкамиВызовСервера.ДоступныеСправочникиМЧД("РегламентированнаяОтчетность")
			.Найти(ТипЗнч(Доверенность)) <> Неопределено Тогда
		Если Элементы.Доверенность.СписокВыбора.НайтиПоЗначению(Новый(ТипДоверенности)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СписокМЧД = ПодобратьМашиночитаемыеДоверенностиФНС(Доверенность);
		
	КонецЕсли;
	
	Возврат (СписокМЧД.Количество() > 0);
	
КонецФункции

&НаКлиенте
Процедура ПодобратьДоверенность()
	
	// Начало см. в Подключаемый_ПроверитьДоверенностьИСертификат()
	// 2) Пытаемся подобрать доверенность.
	// 3) Проверяем правильность заполнения сертификата с технической точки зрения (валидность).
	// 4) Проверяем соответствие сертификата и отборов по субъекту
	// 5) Если неправильно заполнен, то пытаемся его подобрать.
	
	СписокМЧД = Новый СписокЗначений;
	ДоступныеМЧД = УниверсальныйОбменСБанкамиВызовСервера.ДоступныеСправочникиМЧД(, "Строка");
	ИспользуемыеМЧД = Элементы.Доверенность.СписокВыбора;
	
	ИмяСправочника = "МашиночитаемыеДоверенностиРаспределенныйРеестр";
	ИмяАльтернативногоСправочника = "МашиночитаемыеДоверенностиФНС";
	Если ДоступныеМЧД.Найти(ИмяСправочника) <> Неопределено
		И ИспользуемыеМЧД.НайтиПоЗначению(ПредопределенноеЗначение("Справочник." + ИмяСправочника + ".ПустаяСсылка")) <> Неопределено
	 Или ДоступныеМЧД.Найти(ИмяАльтернативногоСправочника) <> Неопределено
		И ИспользуемыеМЧД.НайтиПоЗначению(ПредопределенноеЗначение("Справочник." + ИмяАльтернативногоСправочника + ".ПустаяСсылка")) <> Неопределено Тогда
		СписокМЧД = ПодобратьМашиночитаемыеДоверенностиФНС();
	КонецЕсли;
	
	ИмяСправочника = "МашиночитаемыеДоверенности";
	Если СписокМЧД.Количество() = 0
	   И ДоступныеМЧД.Найти(ИмяСправочника) <> Неопределено
	   И ИспользуемыеМЧД.НайтиПоЗначению(ПредопределенноеЗначение("Справочник." + ИмяСправочника + ".ПустаяСсылка")) <> Неопределено Тогда
		СписокМЧД = ПодобратьМашиночитаемыеДоверенностиЕдиногоФормата();
	КонецЕсли;
	
	ИмяСправочника = "МЧД003";
	ИмяАльтернативногоСправочника = "МашиночитаемыеДоверенностиОрганизаций";
	Если СписокМЧД.Количество() = 0
	   И (ДоступныеМЧД.Найти(ИмяСправочника) <> Неопределено Или ДоступныеМЧД.Найти(ИмяАльтернативногоСправочника) <> Неопределено)
	   И ИспользуемыеМЧД.НайтиПоЗначению(ПредопределенноеЗначение("Справочник." + ИмяСправочника +".ПустаяСсылка")) <> Неопределено Тогда
		СписокМЧД = ПодобратьМашиночитаемыеДоверенностиОрганизаций();
	КонецЕсли;
	
	Доверенность = ?(СписокМЧД.Количество() = 0, Неопределено, СписокМЧД[0].Значение);
	
	// Даем прорисоваться изменениям, связанным с доверенностью, и запускаем проверку.
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьСертификат", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьСертификат()

	// Начало см. в Подключаемый_ПроверитьДоверенностьИСертификат()
	// 3) Проверяем правильность заполнения сертификата с технической точки зрения (валидность).
	// 4) Проверяем соответствие сертификата и отборов по субъекту
	// 5) Если неправильно заполнен, то пытаемся его подобрать.
	
	Если Не ЗначениеЗаполнено(Доверенность)
	   И ИспользоватьСертификат = 1 И КлючНазначенияИспользования = "СертификатСДоверенностью" Тогда
	    // Нет доверенности - нет и выбора сертификата.
		ОтпечатокСертификата = "";
		ОтпечатокСертификатаПредставление = "";
		Если ИтерацияПоискаПриОткрытии = 2 Тогда
			// Не нашли доверенность, по которой искать сертификат. Вернем переключатель, как он был при первом поиске.
			ИспользоватьСертификат = 0;
			ИтерацияПоискаПриОткрытии = 0;
			
		ИначеЕсли ИтерацияПоискаПриОткрытии = 1 Тогда
			// Не нашли с доверенностью, но может быть пользователь - лицо, имеющее право действовать без доверенности.
			ИспользоватьСертификат = ?(ИспользоватьСертификат = 1, 0, 1);
			ИтерацияПоискаПриОткрытии = 2;
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьДоверенностьИСертификат", 0.2, Истина);	
			
		КонецЕсли;
		УправлениеДоступностью(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	
	Контекст = КонтекстПодбора();
	
	Если ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		// Шаг 3. Проверяем валидность сертификата.
		Если НужноПроверятьСертификат(КлючНазначенияИспользования) Тогда
			
			Контекст.Статус = "Проверка";
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьСертификатЗавершение", ЭтотОбъект, Контекст);
			Если ЭтоОблачныйСертификат Тогда
				УниверсальныйОбменСБанкамиКлиент.ИнициализироватьСервисКриптографии(ОтпечатокСертификата, ОповещениеОЗавершении);
			Иначе
				УниверсальныйОбменСБанкамиКлиент.ПроверитьСертификат(ОповещениеОЗавершении, ОтпечатокСертификата, , Ложь);
			КонецЕсли;
			
		Иначе
			
			Контекст.Статус = "ТолькоОтображение";
			ОтобразитьПредставлениеСертификата(Контекст);
			
		КонецЕсли;
		
	Иначе
		// Шаг 5. Подбираем сертификат из доступных.
		УниверсальныйОбменСБанкамиКлиент.ПодобратьСертификатОрганизации(
			Контекст.ДанныеСубъекта,
			Новый ОписаниеОповещения("ПодобратьСертификатЗавершение", ЭтотОбъект, Контекст));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСертификатЗавершение(РезультатПроверки, Контекст) Экспорт
	
	СообщениеДляПользователя = "";
	Если ЭтоОблачныйСертификат Тогда
		
		Валиден = РезультатПроверки.Выполнено;
		Если Валиден Тогда
			
			РезультатПроверки = ПроверитьВСервисе(ОтпечатокСертификата);
			Если РезультатПроверки = Неопределено Тогда
				
				Валиден = Ложь;
				СертификатНеНайденВХранилище = Истина;
				СообщениеДляПользователя = НСтр("ru = 'Выбран облачный сертификат криптографии, который не найден в хранилище сертификатов.';
												|en = 'A cloud cryptography certificate is selected. It is not found in the certificate store.'");
				
			ИначеЕсли РезультатПроверки = Ложь Тогда
				
				Валиден = Ложь;
				СообщениеДляПользователя = НСтр("ru = 'Сертификат недействителен.';
												|en = 'Invalid certificate.'");
				
			КонецЕсли;
			
		Иначе
			
			СообщениеДляПользователя = РезультатПроверки.ОписаниеОшибки;
			
		КонецЕсли;
		
	Иначе
		
		Валиден = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПроверки, "Валиден", Ложь);
		Если Не Валиден Тогда
			СообщениеДляПользователя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПроверки, "ОписаниеОшибки", "");
		КонецЕсли;
		
	КонецЕсли;
	Если Не Валиден И ПустаяСтрока(СообщениеДляПользователя) Тогда
		СообщениеДляПользователя = НСтр("ru = 'Возникла неизвестная ошибка при проверке сертификата.';
										|en = 'An unknown error occurred when checking the certificate.'");
	КонецЕсли;
	
	Если Валиден Тогда
		// Переходим к шагу 4.
		ОтобразитьПредставлениеСертификата(Контекст);
		
	Иначе
		// Сертификат не прошел проверку. Переходим к шагу 5.
		ОтпечатокСертификата = Неопределено;
		ОтпечатокСертификатаПредставление = "";
		Если Контекст.Статус = "ТолькоОтображение" Или ИтерацияПоискаПриОткрытии = 0 Тогда
			// Мы должны уведомить пользователя о причине, по которой не подошел сертификат, но пытаться подбирать другой не будем.
			ТекстШаблона = НСтр("ru = '%1
                                 |Выберите другой сертификат из хранилища.';
                                 |en = '%1
                                 |Select another certificate from the store.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ТекстШаблона, СообщениеДляПользователя), , "ОтпечатокСертификатаПредставление");
			
		Иначе
			// Мы открыли форму со значением по-умолчанию. Оно не подошло. Пробуем подобрать другой сертификат.
			УниверсальныйОбменСБанкамиКлиент.ПодобратьСертификатОрганизации(
				Контекст.ДанныеСубъекта,
				Новый ОписаниеОповещения("ПодобратьСертификатЗавершение", ЭтотОбъект, Контекст));
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПредставлениеСертификата(Контекст)
	
	ЭтоОблачныйСертификат = УниверсальныйОбменСБанкамиКлиент.ЭтоОблачныйСертификатПользователя(ОтпечатокСертификата);
		
	ПараметрыОтображенияСертификата = УниверсальныйОбменСБанкамиКлиент.ПараметрыОтобразитьПредставленияСертификатов();
	ПараметрыОтображенияСертификата.ПолеВвода								= Элементы.ОтпечатокСертификатаПредставление;
	ПараметрыОтображенияСертификата.Сертификат								= ОтпечатокСертификата;
	ПараметрыОтображенияСертификата.ИмяРеквизитаПредставлениеСертификата	= "ОтпечатокСертификатаПредставление";
	ПараметрыОтображенияСертификата.Форма 									= ЭтотОбъект;
	ПараметрыОтображенияСертификата.ЭтоОблачныйСертификат					= ЭтоОблачныйСертификат;
	ПараметрыОтображенияСертификата.ТекстПодсказкиПоСертификату 			= Параметры.ТекстПодсказкиПоСертификату;
	
	Оповещение = Новый ОписаниеОповещения("ОтобразитьПредставлениеСертификатаЗавершение", ЭтотОбъект, Контекст);
	УниверсальныйОбменСБанкамиКлиент.ОтобразитьПредставлениеСертификата(Оповещение, ПараметрыОтображенияСертификата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПредставлениеСертификатаЗавершение(Результат, Контекст) Экспорт
	
	СообщениеДляПользователя = "";
	СертификатНеНайденВХранилище = Ложь;
	Отказ = Ложь;
	Если Не Результат.Выполнено Или Результат.СертификатНеНайденВХранилище Тогда
		
		СертификатНеНайденВХранилище = Истина;
		СообщениеДляПользователя = НСтр("ru = 'Выбран сертификат криптографии, который не найден в хранилище сертификатов.';
										|en = 'A cryptography certificate is selected. It is not found in the certificate store.'");
		Отказ = Истина;
		
	ИначеЕсли Результат.СвойстваСертификата = Неопределено Тогда
		
		СообщениеДляПользователя = НСтр("ru = 'Свойства выбранного сертификата криптографии не удалось прочитать.';
										|en = 'Cannot read the properties of the selected cryptography certificate.'");
		Отказ = Истина;
		
	ИначеЕсли КлючНазначенияИспользования <> "БезОтборов" Тогда
		// Сейчас проверена техническая корректность сертификата, он отображен на форме.
		// Проверяем соответствие сертификата и отборов по субъекту.
		РезультатПроверки = УниверсальныйОбменСБанкамиКлиентСервер.СертификатСоответствуетОтбору(
			Результат.СвойстваСертификата, Контекст.ДанныеСубъекта);
		Если Не РезультатПроверки.ПризнакСоответствия Тогда
			
			СообщениеДляПользователя = РезультатПроверки.СообщениеДляПользователя;
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		// Сертификат не прошел проверку. Переходим к шагу 5.
		Если Контекст.Статус <> "ТолькоОтображение" И ИтерацияПоискаПриОткрытии <> 0 Тогда
			// Мы открыли форму со значением по-умолчанию. Оно не подошло. Пробуем подобрать другой сертификат.	
			ОтпечатокСертификата = Неопределено;
			ОтпечатокСертификатаПредставление = "";
			УниверсальныйОбменСБанкамиКлиент.ПодобратьСертификатОрганизации(
				Контекст.ДанныеСубъекта,
				Новый ОписаниеОповещения("ПодобратьСертификатЗавершение", ЭтотОбъект, Контекст));
			Возврат;
			
		КонецЕсли;
			
		Если Не ПустаяСтрока(ОтпечатокСертификата) Тогда
			// Мы должны уведомить пользователя о причине, по которой не подошел сертификат, но пытаться подбирать другой не будем.
			ОтпечатокСертификата = Неопределено;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(НСтр("ru = '%1
						|Выберите другой сертификат из хранилища.';
						|en = '%1
						|Select another certificate from the store.'"), СообщениеДляПользователя),
					,"ОтпечатокСертификатаПредставление");
			
		КонецЕсли;
		ОтпечатокСертификатаПредставление = "";
		
	Иначе
		
		ИтерацияПоискаПриОткрытии = 0;
		
	КонецЕсли;
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПодобратьСертификатЗавершение(Результат, Контекст) Экспорт
	
	ПоискУспешен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Выполнено", Ложь);
	Если ПоискУспешен И Результат.Свойство("ОтпечатокСертификата", ОтпечатокСертификата) Тогда
		
		ЭтоОблачныйСертификат = УниверсальныйОбменСБанкамиВызовСервера.ЭтоОблачныйСертификатПользователя(ОтпечатокСертификата);
		
	Иначе
		
		ОтпечатокСертификата = Неопределено;
		Если ИтерацияПоискаПриОткрытии = 1 И КлючНазначенияИспользования = "СертификатСДоверенностью" Тогда
			// Есть два варианта как искать: с доверенностью и без. Ищем второй раз по другому варианту.
			ИспользоватьСертификат = ?(ИспользоватьСертификат = 1, 0, 1);
			ИтерацияПоискаПриОткрытии = 2;
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьДоверенностьИСертификат", 0.2, Истина);	
			Возврат;
			
		КонецЕсли;
			
		Если ИтерацияПоискаПриОткрытии = 2 Тогда
			// Не нашли. Вернем переключатель, как он был при первом поиске.
			ИспользоватьСертификат = ?(ИспользоватьСертификат = 1, 0, 1);
			Контекст = КонтекстПодбора();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИтерацияПоискаПриОткрытии = 0;
	Контекст.Статус = "ТолькоОтображение";
	ОтобразитьПредставлениеСертификата(Контекст);
	
КонецПроцедуры

// Подбирает доступные МЧД или проверяет на доступность переданную.
// См. аналогичную функцию БЭД в МашиночитаемыеДоверенности.ПолучитьДоверенностиОрганизации()
//
&НаСервере
Функция ПодобратьМашиночитаемыеДоверенностиОрганизаций(МЧД = Неопределено)

	СписокМЧД = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Параметры.Организация);
	Запрос.УстановитьПараметр("ПредставительИНН",   ПараметрыОтбораДоверенность.ИНН);  
	Запрос.УстановитьПараметр("ПредставительСНИЛС", ПараметрыОтбораДоверенность.СНИЛС);
	
	ДоступныеСправочникиМЧД = УниверсальныйОбменСБанкамиВызовСервера.ДоступныеСправочникиМЧД("ЭлектронноеВзаимодействие", "Строка");
	Если ДоступныеСправочникиМЧД.Найти("МЧД003") = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МЧДДоверители.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МЧДДоверители
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенностиОрганизаций.Представители КАК МЧДПредставители
		|		ПО МЧДДоверители.Ссылка = МЧДПредставители.Ссылка
		|ГДЕ
		|	МЧДДоверители.Организация = &Организация
		|	И &ОтборПоМЧД
		|	И (МЧДПредставители.ФЛ_ИНН <> """"
		|				И МЧДПредставители.ФЛ_ИНН = &ПредставительИНН
		|			ИЛИ МЧДПредставители.ФЛ_СНИЛС <> """"
		|				И МЧДПредставители.ФЛ_СНИЛС = &ПредставительСНИЛС)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МЧДДоверители.ДатаВыдачи УБЫВ";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сводный.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		МЧДДоверители.Ссылка КАК Ссылка,
		|		МЧДДоверители.Ссылка.ДатаВыдачи КАК ДатаВыдачи,
		|		МЧДПредставители.ИНН КАК ИНН,
		|		МЧДПредставители.СНИЛС КАК СНИЛС
		|	ИЗ
		|		Справочник.Организации КАК Организации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МЧД003.Доверители КАК МЧДДоверители
		|			ПО Организации.ИНН = МЧДДоверители.ИНН
		|				И Организации.КПП = МЧДДоверители.КПП
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МЧД003.Представители КАК МЧДПредставители
		|			ПО (МЧДДоверители.Ссылка = МЧДПредставители.Ссылка)
		|	ГДЕ
		|		Организации.Ссылка = &Организация
		|		И &ОтборПоМЧД
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МЧДДоверители.Ссылка,
		|		МЧДДоверители.ДатаВыдачи,
		|		МЧДПредставители.ФЛ_ИНН,
		|		МЧДПредставители.ФЛ_СНИЛС
		|	ИЗ
		|		Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МЧДДоверители
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенностиОрганизаций.Представители КАК МЧДПредставители
		|			ПО МЧДДоверители.Ссылка = МЧДПредставители.Ссылка
		|	ГДЕ
		|		МЧДДоверители.Организация = &Организация
		|		И &ОтборПоМЧД) КАК Сводный
		|ГДЕ
		|	(Сводный.ИНН <> """"
		|				И Сводный.ИНН = &ПредставительИНН
		|			ИЛИ Сводный.СНИЛС <> """"
		|				И Сводный.СНИЛС = &ПредставительСНИЛС)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сводный.ДатаВыдачи УБЫВ";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МЧД) Тогда
		
		ОтборПоМЧД = "МЧДДоверители.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", МЧД);
		
	Иначе
		
		ОтборПоМЧД = "ИСТИНА";
		
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоМЧД", ОтборПоМЧД);
	
	СписокДоверенностей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	МодульМашиночитаемыеДоверенности = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенности");
	ВыборкаДоверенностей = МодульМашиночитаемыеДоверенности.ОбщиеСвойстваДоверенностей(СписокДоверенностей);
	
	Для Каждого СвойстваДоверенности Из ВыборкаДоверенностей Цикл
		
		Если МодульМашиночитаемыеДоверенности.ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности.Значение, ПараметрыОтбораДоверенность.Дата) Тогда
			СписокМЧД.Добавить(СвойстваДоверенности.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокМЧД;
	
КонецФункции

// Подбирает доступные МЧД или проверяет на доступность переданную.
// См. функции БСП в модуле менеджера документа МашиночитаемыеДоверенности.
//
&НаСервере
Функция ПодобратьМашиночитаемыеДоверенностиЕдиногоФормата(МЧД = Неопределено)
	
	СписокМЧД = Новый СписокЗначений;
	
	ДанныеСубъекта = ДанныеСубъектаДляПоискаСертификата();
	
	ОтборПоМЧД = Новый Структура;
	ОтборПоМЧД.Вставить("ДоверительОрганизация", Параметры.Организация); 
	Если Не ПустаяСтрока(ДанныеСубъекта.ИНН) Тогда
		ОтборПоМЧД.Вставить("ПредставительИННФЛ", ДанныеСубъекта.ИНН);
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеСубъекта.СНИЛС) Тогда
		ПроверяемыйНомер = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("- " + Символы.НПП, ДанныеСубъекта.СНИЛС, "");
		ОтборПоМЧД.Вставить("ПредставительСНИЛС", ПроверяемыйНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(МЧД) Тогда
		ОтборПоМЧД.Вставить("МашиночитаемаяДоверенность", МЧД);
	КонецЕсли;
	
	ВыбранныеПоля = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("МашиночитаемаяДоверенность");
	
	МодульМашиночитаемыеДоверенностиФНС = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенностиФНС");
	ВыборкаДоверенностей = МодульМашиночитаемыеДоверенностиФНС.ДоверенностиСОтбором(ОтборПоМЧД, ВыбранныеПоля, КонецДня(ДанныеСубъекта.Дата)); 
	Для Каждого СвойстваДоверенности Из ВыборкаДоверенностей Цикл
		
		СписокМЧД.Добавить(СвойстваДоверенности.МашиночитаемаяДоверенность);
		
	КонецЦикла;
	
	Возврат СписокМЧД;
	
КонецФункции

// Подбирает доступные МЧД или проверяет на доступность переданную.
// См. функцию БРО в ИнтерфейсыВзаимодействияБРОВызовСервера.ОсновныеРеквизитыМашиночитаемыхДоверенностейФНС()
//
&НаСервере
Функция ПодобратьМашиночитаемыеДоверенностиФНС(МЧД = Неопределено)

	СписокМЧД = Новый СписокЗначений;
	
	ОтборПоСНИЛС = ?(ПустаяСтрока(ПараметрыОтбораДоверенность.СНИЛС), Неопределено, ПараметрыОтбораДоверенность.СНИЛС);
	ОтборПоИНН = ?(ПустаяСтрока(ПараметрыОтбораДоверенность.ИНН),
		Неопределено, Новый Структура("ПредставительФЛ_ИНН", ПараметрыОтбораДоверенность.ИНН));
	
	ВыборкаДоверенностей = ИнтерфейсыВзаимодействияБРОВызовСервера.ОсновныеРеквизитыМашиночитаемыхДоверенностейФНС(
		ПараметрыОтбораДоверенность.Организация, ОтборПоСНИЛС, , ОтборПоИНН);
		
	ПолучитьВсеДоступные = Не ЗначениеЗаполнено(МЧД);
	Для Каждого СвойстваДоверенности Из ВыборкаДоверенностей Цикл
		
		Если ПолучитьВсеДоступные Тогда
			
			СписокМЧД.Добавить(СвойстваДоверенности.Ссылка);
			
		ИначеЕсли МЧД = СвойстваДоверенности.Ссылка Тогда
			
			СписокМЧД.Добавить(СвойстваДоверенности.Ссылка);
			Прервать;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СписокМЧД;
	
КонецФункции

&НаКлиенте
Функция КонтекстПодбора()
	
	Контекст = Новый Структура;
	
	// Может принимать значения:
	// * "Проверка" - выполнена проверка валидности; нужно будет проверить соответствие фильтрам.
	// * "ТолькоОтображение" - соответствие фильтрам проверено; дополнительных действий не нужно.
	Контекст.Вставить("Статус", "Проверка");
	
	// Какие отборы сейчас используются для подбора.
	Контекст.Вставить("ДанныеСубъекта", ДанныеСубъектаДляПоискаСертификата());
	
	Возврат Контекст;
	
КонецФункции

&НаСервере
Функция ДанныеСубъектаДляПоискаСертификата()
	
	Если КлючНазначенияИспользования = "БезОтборов" Тогда
		
		ДанныеСубъекта = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтбораОрганизация);
		ДанныеСубъекта.ПредставлениеОтбора = "";
		Возврат ДанныеСубъекта;
		
	ИначеЕсли КлючНазначенияИспользования <> "СертификатСДоверенностью" Или ИспользоватьСертификат <> 1 Тогда
		
		Возврат ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтбораОрганизация);
		
	КонецЕсли;
	
	ДанныеСубъекта = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтбораДоверенность);
	
	// Если не было данных в физлице, но они есть в выборанной доверенности, то берем из нее.
	Если ЗначениеЗаполнено(Доверенность)
	   И (ПустаяСтрока(ДанныеСубъекта.ИНН) Или ПустаяСтрока(ДанныеСубъекта.СНИЛС)) Тогда
		
	    НаименованиеСубъекта = Строка(ПараметрыОтбораДоверенность.ФизическоеЛицо);
		РеквизитыДоверенного = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Доверенность, "Наименование,ПредставительФЛ_ИНН, ПредставительФЛ_СНИЛС");
		Если ПустаяСтрока(ДанныеСубъекта.ИНН) Тогда
			ДанныеСубъекта.ИНН = РеквизитыДоверенного.ПредставительФЛ_ИНН;
			ДанныеСубъекта.ПредставлениеОтбора = "";
		КонецЕсли;
		Если ПустаяСтрока(ДанныеСубъекта.СНИЛС) Тогда
			ДанныеСубъекта.СНИЛС = РеквизитыДоверенного.ПредставительФЛ_СНИЛС;
			ДанныеСубъекта.ПредставлениеОтбора = "";
		КонецЕсли;
		
	КонецЕсли;
	
	// Представителем может быть только физ.лицо. Но если нигде не указаны ИНН и СНИЛС физ.лица, то используем для отбора ИНН организации.
	Если ПустаяСтрока(ДанныеСубъекта.ИНН) И ПустаяСтрока(ДанныеСубъекта.СНИЛС) Тогда
		
		НаименованиеСубъекта = Строка(ПараметрыОтбораДоверенность.Организация);
		ДанныеСубъекта.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		ДанныеСубъекта.ИНН = ПараметрыОтбораОрганизация.ИНН;
		ДанныеСубъекта.ПредставлениеОтбора = "";
		
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеСубъекта.ПредставлениеОтбора) Тогда
		ФинОтчетностьВБанкиКлиентСервер.ЗаполнитьПредставлениеОтбораСертификата(ДанныеСубъекта, НаименованиеСубъекта); 
	КонецЕсли;
	
	Возврат ДанныеСубъекта;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_УстановитьОтборПоДоверителю()
	
	Оповестить("ПоказатьДоверенностиОрганизации", Параметры.Организация, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НужноПроверятьСертификат(КлючНазначенияИспользования)
	
	Возврат (КлючНазначенияИспользования <> "БезОтборов" И КлючНазначенияИспользования <> "БезВыбора");
	
КонецФункции

&НаСервере
Функция ДанныеСертификата(Отпечаток)
	
	ОблачныйСертификат = УниверсальныйОбменСБанками.НайтиОблачныйСертификатВХранилище(Отпечаток);
	Если ОблачныйСертификат <> Неопределено Тогда
		Сертификат = УниверсальныйОбменСБанкамиКлиентСервер.СертификатКриптографииВСтуктуру(
			Новый СертификатКриптографии(ОблачныйСертификат.Сертификат));
		Возврат Сертификат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтпечатокПоСертификату(Знач Сертификат)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "Отпечаток", Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВСервисе(ОтпечатокСертификата)
	
	ОблачныйСертификат = УниверсальныйОбменСБанками.НайтиОблачныйСертификатВХранилище(ОтпечатокСертификата);
	Если ОблачныйСертификат <> Неопределено Тогда
		РезультатПроверки = СервисКриптографии.ПроверитьСертификат(ОблачныйСертификат.Сертификат);
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти
