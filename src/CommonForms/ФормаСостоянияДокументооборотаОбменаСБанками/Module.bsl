#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Документооборот = Параметры.Ссылка;
	Если Параметры.Свойство("Наименование") Тогда
		Наименование = Параметры.Наименование;
	КонецЕсли;
	
	ОпределитьСвойстваДокументооборота();
	ЗаполнитьДанныеВШапкеФормы();
	УправлениеЭУ(Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УниверсальныйОбменСБанкамиКлиент.ПоказатьОшибку(Предмет,
		ЭтаФорма,
		УникальныйИдентификатор,
		"Отчет:",
		Истина,
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодробнаяИнформацияНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Документооборот) Тогда
		ПараметрыФормы = Новый Структура("Ключ", Документооборот);
		Форма = ПолучитьФорму("Справочник.ДокументооборотыОбменаСБанками.Форма.ФормаЭлемента", ПараметрыФормы);
		Форма.ТолькоПросмотр = Истина;
		Форма.Открыть();
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Подробная информация отсутствует';
										|en = 'Detailed information is not available'"));
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВсеФайлыИПодписи(Команда)
	
	ВыгрузитьДокументооборот();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НеотправленныеИзвещения(Сервис, Организация)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	Извещения = УниверсальныйОбменСБанками.
		НеотправленныеИзвещения(Сервис, Отбор).МассивНеотправленныхПодтверждений;
	Возврат Извещения;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПодтверждения(Команда)
	
	Транзакции = НеотправленныеИзвещения(Сервис, Организация);
	
	Если Транзакции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьПодтвержденияЗавершение",
		ЭтотОбъект);
	УниверсальныйОбменСБанкамиКлиент.ОтправитьТранзакцииВБанк(
		Оповещение,
		Сервис,
		Транзакции);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОпределитьСвойстваДокументооборота()

	СведенияПоОбъекту = УниверсальныйОбменСБанками.РеквизитыДокументооборота(Документооборот);
	
	Организация					= СведенияПоОбъекту.Организация;
	Банк 						= СведенияПоОбъекту.Банк;
	Предмет						= СведенияПоОбъекту.Предмет;
	Сервис						= СведенияПоОбъекту.Сервис;
	
КонецПроцедуры

&НаСервере
Функция ЭлементНаименованиеЭтапа(НомерСтроки)
	Возврат Элементы["НаименованиеЭтапа" + Строка(НомерСтроки)];
КонецФункции

&НаСервере
Функция ЭлементДатаСовершенияЭтапа(НомерСтроки)
	Возврат Элементы["ДатаСовершенияЭтапа" + Строка(НомерСтроки)];
КонецФункции

&НаСервере
Функция ЭлементКомментарийЭтапа(НомерСтроки)
	Возврат Элементы["КомментарийЭтапа" + Строка(НомерСтроки)];
КонецФункции

&НаСервере
Функция ЭлементПротоколЭтапа(НомерСтроки)
	Возврат Элементы["ПротоколЭтапа" + Строка(НомерСтроки)];
КонецФункции

&НаКлиенте
Процедура ВыгрузитьДокументооборот()
	
	ТекстВопроса = НСтр("ru = 'Выгрузить все файлы и подписи?';
						|en = 'Export all files and signatures?'");
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьДокументооборотПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервере
Функция СохраняемыеФайлыТранзакции(Транзакция, Знач ИмяКаталога)
	
	Результат = Новый Массив;
	
	ИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);
	
	// Сохраняем контейнер.
	ОписаниеТранспортныхКонтейнеров = УниверсальныйОбменСБанками.ПолучитьТранспортныйКонтейнер(Транзакция, Истина);
	Если ОписаниеТранспортныхКонтейнеров.Количество() > 0 Тогда
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла;
		ОписаниеКонтейнера = ОписаниеТранспортныхКонтейнеров[0];
		ОписаниеФайла.Имя = ИмяКаталога + ОписаниеКонтейнера.ИмяФайла;
		ОписаниеФайла.Хранение = ПоместитьВоВременноеХранилище(ОписаниеКонтейнера.Данные.Получить());
		Результат.Добавить(ОписаниеФайла);
	КонецЕсли;
	
	ПараметрыВложений = Новый Структура;
	ПараметрыВложений.Вставить("Адрес", Истина);
	
	// Сохраняем вложения.
	Вложения = УниверсальныйОбменСБанками.ПолучитьВложенияТранзакции(Транзакция, ПараметрыВложений);
	ПрефиксПодписи = УниверсальныйОбменСБанками.ПрефиксИмяФайлаПодписиПрисоединенныеФайлы();
	Для каждого Вложение Из Вложения Цикл
		ИмяФайла = Вложение.ИсходноеИмяФайла;
		Если СтрНачинаетсяС(ИмяФайла, ПрефиксПодписи) Тогда
			ИмяФайла = Прав(ИмяФайла, СтрДлина(ИмяФайла) - СтрДлина(ПрефиксПодписи));
		КонецЕсли;
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла;
		ОписаниеФайла.Имя = ИмяКаталога + ИмяФайла;
		ОписаниеФайла.Хранение = Вложение.Адрес;
		Результат.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТранзакцииПоДокументообороту(Документооборот)
	
	Транзакции = УниверсальныйОбменСБанками.ТранзакцииПоДокументообороту(Документооборот);
	ДанныеТранзакций = УниверсальныйОбменСБанками.РеквизитыТранзакций(Транзакции);
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеТранзакций);
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьДокументооборотПослеВопроса(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьДокументооборотПослеВыбораКаталога", ЭтотОбъект);
	ФайловаяСистемаКлиент.ВыбратьКаталог(Оповещение, НСтр("ru = 'Выберите каталог для сохранения файлов';
															|en = 'Select a directory to save the files'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументооборотПослеВыбораКаталога(ПутьККаталогу, ДополнительныеПараметры) Экспорт
	
	Если ПустаяСтрока(ПутьККаталогу) Тогда
		Возврат;
	КонецЕсли;
	
	Транзакции = ТранзакцииПоДокументообороту(Документооборот);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИндексТекущейТранзакции", 0);
	ДополнительныеПараметры.Вставить("Транзакции", Транзакции);
	ДополнительныеПараметры.Вставить("ПутьККаталогу", ПутьККаталогу);
	ДополнительныеПараметры.Вставить("ИмяКаталогаФайловТранзакции", "");
	
	ВыгрузитьДокументооборотЦикл(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументооборотЦикл(ДополнительныеПараметры) Экспорт
	
	ИндексТекущейТранзакции = ДополнительныеПараметры.ИндексТекущейТранзакции;
	Транзакции = ДополнительныеПараметры.Транзакции;
	ПутьККаталогу = ДополнительныеПараметры.ПутьККаталогу;
	
	Если ИндексТекущейТранзакции >= Транзакции.Количество() Тогда
		ВыгрузитьДокументооборотЗавершение(Истина, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Транзакция = Транзакции[ИндексТекущейТранзакции];
	
	ИмяКаталогаФайловТранзакции = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьККаталогу);
	Шаблон = "%1 %2 (%3)";
	Дата = Формат(Транзакция.ДатаТранспорта, "ДФ=yyyy.MM.dd");
	ИмяКаталогаФайловТранзакции = ИмяКаталогаФайловТранзакции + СтрШаблон(Шаблон, Транзакция.ТипТранзакции, Дата, Транзакция.Идентификатор);
	ДополнительныеПараметры.ИмяКаталогаФайловТранзакции = ИмяКаталогаФайловТранзакции;
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьДокументооборотЦиклПослеСозданияКаталога",
		ЭтотОбъект,
		ДополнительныеПараметры);
	НачатьСозданиеКаталога(Оповещение, ИмяКаталогаФайловТранзакции);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументооборотЦиклПослеСозданияКаталога(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	ИндексТекущейТранзакции = ДополнительныеПараметры.ИндексТекущейТранзакции;
	Транзакции = ДополнительныеПараметры.Транзакции;
	
	Транзакция = Транзакции[ИндексТекущейТранзакции];
	
	СохраняемыеФайлы = СохраняемыеФайлыТранзакции(Транзакция.Транзакция, ИмяКаталога);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	
	Оповещение = Новый ОписаниеОповещения(
		"ВыгрузитьДокументооборотЦиклПослеСохранения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ФайловаяСистемаКлиент.СохранитьФайлы(Оповещение, СохраняемыеФайлы, ПараметрыСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументооборотЦиклПослеСохранения(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		ВыгрузитьДокументооборотЗавершение(Ложь, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ИндексТекущейТранзакции = ДополнительныеПараметры.ИндексТекущейТранзакции + 1;
	ВыгрузитьДокументооборотЦикл(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументооборотЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Выгрузка файлов';
											|en = 'File export'"),,
			НСтр("ru = 'При выгрузке файлов возникла ошибка.';
				|en = 'An error occurred upon exporting files.'"), БиблиотекаКартинок.Ошибка32);
		Возврат;
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьДокументооборотПослеПоказаОповещения", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Сохранение в файл';
										|en = 'Save to file'"), Оповещение,
		НСтр("ru = 'Все файлы этапов обмена успешно сохранены.';
			|en = 'All exchange step files are saved.'"), БиблиотекаКартинок.Успешно32);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументооборотПослеПоказаОповещения(ДополнительныеПараметры) Экспорт
	
	ФайловаяСистемаКлиент.ОткрытьПроводник(ДополнительныеПараметры.ПутьККаталогу);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУ(Отказ = Ложь)
	
	Элементы.Наименование.Видимость = НЕ ПустаяСтрока(Наименование);

	ТекущееСостояниеОтправки = ОпределитьТекущееСостояние();
	
	Если ТекущееСостояниеОтправки = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПрорисоватьКритическиеОшибки(ТекущееСостояниеОтправки);
	ПрорисоватьНеотправленныеИзвещения(ТекущееСостояниеОтправки);
	ПрорисоватьТаблицу(ТекущееСостояниеОтправки);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТекущееСостояние()

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВозвращатьТаблицуЭтаповОтправки", Истина);
	ДополнительныеПараметры.Вставить("ПолучатьОшибкиОтправки", 			Истина);
	ДополнительныеПараметры.Вставить("ПолучатьДаты", 					Истина);
	ДополнительныеПараметры.Вставить("Отправка", 						ПоследняяТранзакция);
	ДополнительныеПараметры.Вставить("ПоказыватьПомеченныеНаУдаление", 	Истина);
	
	ТекущееСостояниеДокументооборота = УниверсальныйОбменСБанками.ТекущееСостояниеДокументооборота(
		Документооборот,
		ДополнительныеПараметры);
	
	Возврат ТекущееСостояниеДокументооборота;

КонецФункции 

&НаСервере
Процедура ПрорисоватьНеотправленныеИзвещения(ТекущееСостояниеОтправки)

	Элементы.БлокНеотправленныхСообщений.Видимость = ТекущееСостояниеОтправки.НеотправленныеИзвещения.ЕстьНеотправленныеИзвещения;

КонецПроцедуры

&НаСервере
Процедура ПрорисоватьКритическиеОшибки(ТекущееСостояниеОтправки)

	// Критические сообщения
	ЕстьКритическиеОшибки = ТекущееСостояниеОтправки.ЕстьКритическиеОшибки;
	Элементы.БлокКритическихОшибок.Видимость 	= ЕстьКритическиеОшибки;
	Элементы.ЗначокКритическойОшибки.Видимость 	= ЕстьКритическиеОшибки;

КонецПроцедуры 

&НаСервере
Процедура ПрорисоватьТаблицу(ТекущееСостояниеОтправки)

	// Таблица состояний
	ТаблицаЭтаповОтправки = ТекущееСостояниеОтправки.ТаблицаЭтаповОтправки;
	
	УдалитьСтрокиТаблицыСостоянияСоСтатусомНеОтправлено(ТаблицаЭтаповОтправки);
	ЗначениеВРеквизитФормы(ТаблицаЭтаповОтправки, "ЭтапыСостояния");
	
	ТаблицаСостояний = РеквизитФормыВЗначение("ЭтапыСостояния");
	
	СкрытьЛишниеИлиПоказатьНовыеСостоянияНаФорме(ТаблицаСостояний);
	ПрорисоватьТаблицуСостояний(ТаблицаСостояний);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДанныеВШапкеФормы()

	Элементы.Наименование.Заголовок	= Наименование;
	
	Получатель 	= Банк;
	Отправитель = Организация;
	
	// Отправитель
	Если ЗначениеЗаполнено(Отправитель) Тогда
		Элементы.ОтКого.Заголовок = Отправитель;
	Иначе
		Элементы.ЗаголовокОтКого.Видимость 	= Ложь;
		Элементы.ОтКого.Видимость 			= Ложь;
	КонецЕсли;
	
	// Получатель
	Если ЗначениеЗаполнено(Получатель) Тогда
		Элементы.Кому.Заголовок				= Получатель;
	Иначе
		Элементы.ЗаголовокКому.Видимость 	= Ложь;
		Элементы.Кому.Видимость 			= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиТаблицыСостоянияСоСтатусомНеОтправлено(ТаблицаСостояний)
	
	// Удаление строки со статусом "Не отправлено" (либо другим
	// значением, установленным вручную до начала процесса отправки).
	
	СтатусыОбъектов = Новый Массив;
	
	Для каждого СтрокаТаблицыСостояний Из ТаблицаСостояний Цикл
		
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"), СтрокаТаблицыСостояний.ТекстНадписи);
		
		Если СтатусыОбъектов.Найти(ТекстНадписи) <> Неопределено Тогда
			ТаблицаСостояний.Удалить(СтрокаТаблицыСостояний);
			Прервать;
		КонецЕсли;
		
		Если ТекстНадписи = НСтр("ru = 'Не отправлено';
								|en = 'Not sent'") Тогда
			ТаблицаСостояний.Удалить(СтрокаТаблицыСостояний);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьЛишниеИлиПоказатьНовыеСостоянияНаФорме(ТаблицаСостояний)
	
	// Скрываем лишние блоки
	ЭлементыТаблицыЭтапов = Элементы.ОбщийБлокЭтапов.ПодчиненныеЭлементы;
	Для каждого ЭлементФормы Из ЭлементыТаблицыЭтапов Цикл
		ИмяЭлемента = ЭлементФормы.Имя;
		Если СтрНайти(ИмяЭлемента, "БлокЭтапаОтправки") > 0 Тогда
			НомерБлока = Число(СтрЗаменить(ИмяЭлемента, "БлокЭтапаОтправки",""));
			ВидимостьБлока = (НомерБлока <= ТаблицаСостояний.Количество());
			Если ВидимостьБлока <> ЭлементФормы.Видимость Тогда
				ЭлементФормы.Видимость = ВидимостьБлока;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция НомерТекущегоСостоянияВТаблицеСостояний(ТаблицаСостояний)
	
	НомерТекущегоЭтапа = 0;
	Для каждого СтрокаТаблицыСостояний Из ТаблицаСостояний Цикл
		
		НомерСтроки = ТаблицаСостояний.Индекс(СтрокаТаблицыСостояний) + 1;
		Если СтрокаТаблицыСостояний.ЭтапПройден Тогда
			 НомерТекущегоЭтапа = НомерСтроки;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат НомерТекущегоЭтапа;

КонецФункции

&НаСервере
Процедура ПрорисоватьТаблицуСостояний(ТаблицаСостояний)
	
	// Определяем номер текущего этапа
	НомерТекущегоЭтапа = НомерТекущегоСостоянияВТаблицеСостояний(ТаблицаСостояний);
	
	// Заполняем данные в состояниях
	Для каждого СтрокаТаблицыСостояний Из ТаблицаСостояний Цикл
		
		НомерСтроки = ТаблицаСостояний.Индекс(СтрокаТаблицыСостояний) + 1;
		
		// Определяем текст надписей
		
		// Наименование
		ЭлементНаименованиеЭтапа(НомерСтроки).Заголовок = СтрокаТаблицыСостояний.ТекстНадписи;
		
		// Дата
		Если ЗначениеЗаполнено(СтрокаТаблицыСостояний.Дата) Тогда
			
			// Подбираем нужный формат
			Если ТипЗнч(СтрокаТаблицыСостояний.Дата) = Тип("Дата")
				И СтрокаТаблицыСостояний.Дата = НачалоДня(СтрокаТаблицыСостояний.Дата) Тогда
				ДатаНаступленияЭтапа = Формат(СтрокаТаблицыСостояний.Дата,"ДЛФ=D");
			Иначе
				ДатаНаступленияЭтапа = Строка(СтрокаТаблицыСостояний.Дата);
			КонецЕсли;
				
			ЭлементДатаСовершенияЭтапа(НомерСтроки).Заголовок = ДатаНаступленияЭтапа;
			
		Иначе
			ЭлементДатаСовершенияЭтапа(НомерСтроки).Заголовок = "";
		КонецЕсли;
		
		// Комментарий выводим только для текущего состояния
		Если ЗначениеЗаполнено(СтрокаТаблицыСостояний.КомментарийКСостоянию) И НомерСтроки = НомерТекущегоЭтапа Тогда
			ЭлементКомментарийЭтапа(НомерСтроки).Заголовок = СтрокаТаблицыСостояний.КомментарийКСостоянию;
			ЭлементКомментарийЭтапа(НомерСтроки).Видимость = Истина;
		Иначе
			ЭлементКомментарийЭтапа(НомерСтроки).Видимость = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыСостояний.КомментарийКСостоянию) И НомерСтроки = НомерТекущегоЭтапа Тогда // обход ошибки платформы
			ЭлементПротоколЭтапа(НомерСтроки).Видимость = Ложь;
		Иначе
			ЭлементПротоколЭтапа(НомерСтроки).Заголовок = "";
			ЭлементПротоколЭтапа(НомерСтроки).Видимость = Истина;
		КонецЕсли;
		
		// Определяем фон и доступность.
		СостояниеДокументооборота 	= СтрокаТаблицыСостояний.СостояниеДокументооборота;
		ЭтапПройден 				= СтрокаТаблицыСостояний.ЭтапПройден;
		ЭлементыБлокЭтапа 			= Элементы["БлокЭтапа" + Строка(НомерСтроки)];
		ЭлементыПротоколЭтапа		= Элементы["ПротоколЭтапа" + Строка(НомерСтроки)];
		ЭлементыНаименованиеЭтапа	= Элементы["НаименованиеЭтапа" + Строка(НомерСтроки)];
		
		// Элемент протокол пока не используем.
		ЭлементыПротоколЭтапа.Видимость = НЕ ПустаяСтрока(СтрокаТаблицыСостояний.НаименованиеПротокола);
		ЭлементыПротоколЭтапа.Заголовок = СтрокаТаблицыСостояний.НаименованиеПротокола;
		
		Если ЭтапПройден И НомерСтроки = НомерТекущегоЭтапа Тогда
			
			// Определяем цвет фона.
			ЦветФона = ЦветаСтиля.ЦветФонаНеначавшейсяОтправки;

			Если СостояниеДокументооборота = УниверсальныйОбменСБанкамиКлиентСервер.
					СостояниеДокументооборотаНачат() Тогда
				ЦветФона = ЦветаСтиля.ЦветФонаТекущейОтправки;
			ИначеЕсли СостояниеДокументооборота = УниверсальныйОбменСБанкамиКлиентСервер.
					СостояниеДокументооборотаОтрицательныйРезультат() Тогда
				ЦветФона = ЦветаСтиля.ЦветФонаОшибкиОтправки;
			ИначеЕсли СостояниеДокументооборота = УниверсальныйОбменСБанкамиКлиентСервер.
					СостояниеДокументооборотаПоложительныйРезультат()Тогда
				ЦветФона = ЦветаСтиля.ЦветФонаУдачнойОтправки;
			КонецЕсли;
			
			ЭлементыБлокЭтапа.ЦветФона = ЦветФона; 
			ЭлементыБлокЭтапа.Доступность = Истина;
			
			ЭлементыПротоколЭтапа.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБРО;
			ЭлементыНаименованиеЭтапа.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
			
		ИначеЕсли НЕ ЭтапПройден Тогда
			
			// Делаем непройденные этапы недоступными
			ЭлементыБлокЭтапа.ЦветФона 		= ЦветаСтиля.БазовыйЦветФонаЭтапаОтправки;
			ЭлементыБлокЭтапа.Доступность 	= Ложь;
			// Гиперссылки протоколов делаем серыми
			ЭлементыПротоколЭтапа.ЦветТекста = ЦветаСтиля.ЦветШрифтаНенаступившегоЭтапа;
			// Наименование этапа делаем серым
			ЭлементыНаименованиеЭтапа.ЦветТекста = ЦветаСтиля.ЦветШрифтаНенаступившегоЭтапа;
			
		ИначеЕсли ЭтапПройден Тогда
			
			// Делаем непройденные этапы недоступными
			ЭлементыБлокЭтапа.ЦветФона 		= ЦветаСтиля.БазовыйЦветФонаЭтапаОтправки;
			ЭлементыБлокЭтапа.Доступность 	= Истина;
			// Гиперссылки протоколов делаем серыми
			ЭлементыПротоколЭтапа.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБРО;
			// Наименование этапа делаем серым
			ЭлементыНаименованиеЭтапа.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПротоколНажатие(Элемент)
	
	НомерЭтапа = Число(Прав(Элемент.Имя, 1)) - 1;
	
	Протокол = ЭтапыСостояния[НомерЭтапа].Протокол;
	Транзакция = ЭтапыСостояния[НомерЭтапа].Транзакция;
	
	ФинОтчетностьВБанкиКлиент.ОткрытьПротокол(Предмет,
		Транзакция,
		ЭтаФорма,
		УникальныйИдентификатор,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПодтвержденияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
	КонецЕсли;
	
	УправлениеЭУ(Ложь);
	
КонецПроцедуры

#КонецОбласти