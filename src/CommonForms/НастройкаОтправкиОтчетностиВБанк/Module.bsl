#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначениеВДанныеФормы(НастройкаОтправкиИСостояниеПоследнейОтправки(), Организации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьСведенияНастроек", 300);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОрганизации

&НаКлиенте
Процедура ОрганизацииТранзакцииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
	
	ИзменитьНастройкуПоОрганизации(ТекущиеДанные.Организация, Отметки(ТекущиеДанные));
	ИзменитьСостояниеПоОрганизации(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииОСВПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
	
	ИзменитьНастройкуПоОрганизации(ТекущиеДанные.Организация, Отметки(ТекущиеДанные));
	ИзменитьСостояниеПоОрганизации(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Отметки = Отметки(ТекущиеДанные);
	
	Если Поле.Имя = "ОрганизацииСостояние" Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Состояние) Тогда
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ОтборОрганизация", ТекущиеДанные.Организация);
			
			ОткрытьФорму("РегистрСведений.ЖурналПередачиОтчетностиВБанк.ФормаСписка",
				ПараметрыОткрытия, , ТекущиеДанные.Организация);
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ОрганизацииОСВПоСчетамГиперссылка" Тогда
		НастроитьСчетаПоОрганизации(ТекущиеДанные.Организация, Отметки);
		
	ИначеЕсли Поле.Имя = "ОрганизацииАнализыСчетовГиперссылка" Тогда
		НастроитьСчетаАнализовСчетовПоОрганизации(ТекущиеДанные.Организация, Отметки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьСейчас(Команда)
	
	Если Элементы.Организации.ТекущиеДанные = Неопределено Тогда
		ТекстОповещения = НСтр("ru = 'Не выбрана организация для отправки отчетов в Сбербанк';
								|en = 'Не выбрана организация для отправки отчетов в Сбербанк'");
		ПоказатьПредупреждение( , ТекстОповещения);
		Возврат;
	КонецЕсли;
	
	Организация = Элементы.Организации.ТекущиеДанные.Организация;
	
	Отметки = Отметки(Элементы.Организации.ТекущиеДанные);
	ЕстьОтчетыДляОправки = Ложь;
	Для Каждого Отметка Из Отметки Цикл
		ЕстьОтчетыДляОправки = ЕстьОтчетыДляОправки ИЛИ Отметка.Значение;
	КонецЦикла;
	
	Если ЕстьОтчетыДляОправки Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеОтправкиВФоне", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отправка сведений в Сбербанк';
												|en = 'Отправка сведений в Сбербанк'");
		
		ДлительнаяОперация = ОтправитьОтчетностьВФоне(Организация);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе
		ТекстОповещения = НСтр("ru = 'Для организации %1 не выбраны отчеты для отправки в Сбербанк';
								|en = 'Для организации %1 не выбраны отчеты для отправки в Сбербанк'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, Организация);
		
		ПоказатьПредупреждение( , ТекстОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьСведенияНастроек()
	
	ОбновитьСведенияНастроекНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияНастроекНаСервере()
	
	Отправки = НастройкаОтправкиИСостояниеПоследнейОтправки();
	
	Для Каждого СтрокаПоОрганизации Из Организации Цикл
		СтрокаНастройки = Отправки.Найти(СтрокаПоОрганизации.Организация, "Организация");
		Если СтрокаНастройки <> Неопределено Тогда
			СтрокаПоОрганизации.Транзакции  = СтрокаНастройки.Транзакции;
			СтрокаПоОрганизации.ОСВ         = СтрокаНастройки.ОСВ;
			
			СтрокаПоОрганизации.ОСВПоСчетам = СтрокаНастройки.ОСВПоСчетам;
			СтрокаПоОрганизации.ОСВПоСчетамГиперссылка   = СтрокаНастройки.ОСВПоСчетамГиперссылка;
			
			СтрокаПоОрганизации.АнализыСчетов = СтрокаНастройки.АнализыСчетов;
			СтрокаПоОрганизации.АнализыСчетовГиперссылка = СтрокаНастройки.АнализыСчетовГиперссылка;
			
			СтрокаПоОрганизации.Отправлено  = СтрокаНастройки.Отправлено;
			СтрокаПоОрганизации.Состояние   = СтрокаНастройки.Состояние;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НастройкаОтправкиИСостояниеПоследнейОтправки()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналПередачиОтчетностиВБанк.Организация КАК Организация,
		|	МАКСИМУМ(ЖурналПередачиОтчетностиВБанк.ДатаОтправки) КАК ДатаОтправки
		|ПОМЕСТИТЬ ВТ_ПоследниеОтправки
		|ИЗ
		|	РегистрСведений.ЖурналПередачиОтчетностиВБанк КАК ЖурналПередачиОтчетностиВБанк
		|
		|СГРУППИРОВАТЬ ПО
		|	ЖурналПередачиОтчетностиВБанк.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеОтправки.Организация КАК Организация,
		|	ВТ_ПоследниеОтправки.ДатаОтправки КАК ДатаОтправки,
		|	ЖурналПередачиОтчетностиВБанк.Состояние КАК Состояние
		|ПОМЕСТИТЬ ВТ_СостоянияПоследнихОтправок
		|ИЗ
		|	ВТ_ПоследниеОтправки КАК ВТ_ПоследниеОтправки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналПередачиОтчетностиВБанк КАК ЖурналПередачиОтчетностиВБанк
		|		ПО ВТ_ПоследниеОтправки.Организация = ЖурналПередачиОтчетностиВБанк.Организация
		|			И ВТ_ПоследниеОтправки.ДатаОтправки = ЖурналПередачиОтчетностиВБанк.ДатаОтправки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация,
		|	ЕСТЬNULL(НастройкиОтправкиОтчетностиВБанк.ОтправлятьОтчеты, ЛОЖЬ) КАК Транзакции,
		|	ЕСТЬNULL(НастройкиОтправкиОтчетностиВБанк.ОтправлятьОСВ, ЛОЖЬ) КАК ОСВ,
		|	ЕСТЬNULL(НастройкиОтправкиОтчетностиВБанк.ОтправлятьОСВПоСчетам, ЛОЖЬ) КАК ОСВПоСчетам,
		|	ЕСТЬNULL(НастройкиОтправкиОтчетностиВБанк.ОтправлятьАнализыСчетов, ЛОЖЬ) КАК АнализыСчетов,
		|	НастройкиОтправкиОтчетностиВБанк.СчетаОСВПоСчетам КАК СчетаОСВПоСчетам,
		|	НастройкиОтправкиОтчетностиВБанк.СчетаАнализовСчетов КАК СчетаАнализовСчетов,
		|	ВТ_СостоянияПоследнихОтправок.ДатаОтправки КАК Отправлено,
		|	ВТ_СостоянияПоследнихОтправок.Состояние КАК Состояние,
		|	ВТ_СостоянияПоследнихОтправок.Состояние КАК СостояниеОтправки,
		|	""Карточки счетов 51 и 52"" КАК ТранзакцииЗаголовок,
		|	""ОСВ"" КАК ОСВЗаголовок,
		|	""ОСВ по счетам"" КАК ОСВПоСчетамЗаголовок,
		|	""Анализы счетов"" КАК АнализыСчетовЗаголовок
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиОтчетностиВБанк КАК НастройкиОтправкиОтчетностиВБанк
		|		ПО Организации.Ссылка = НастройкиОтправкиОтчетностиВБанк.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияПоследнихОтправок КАК ВТ_СостоянияПоследнихОтправок
		|		ПО Организации.Ссылка = ВТ_СостоянияПоследнихОтправок.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	НастройкиПоОрганизациям = Запрос.Выполнить().Выгрузить();
	НастройкиПоОрганизациям.Колонки.Добавить("ОсобоеСостояниеПредставление",
		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", "ОтправкаОтчетностиВБанк");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого РегЗадание Из Задания Цикл
		Если РегЗадание.Параметры.Количество() > 0 Тогда
			Организация = РегЗадание.Параметры[0];
			СтрокаНастройки = НастройкиПоОрганизациям.Найти(Организация, "Организация");
			Если СтрокаНастройки <> Неопределено Тогда
				Если НЕ РегЗадание.Использование Тогда
					СтрокаНастройки.Состояние = НСтр("ru = 'Ошибка: отключено регламентное задание отправки';
													|en = 'Ошибка: отключено регламентное задание отправки'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьПолеСчетовВНастройках(НастройкиПоОрганизациям);
	
	Возврат НастройкиПоОрганизациям;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПолеСчетовВНастройках(НастройкиПоОрганизациям)
	
	НастройкиПоОрганизациям.Колонки.Добавить("ОСВПоСчетамГиперссылка", Новый ОписаниеТипов("Строка"));
	НастройкиПоОрганизациям.Колонки.Добавить("АнализыСчетовГиперссылка", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаНастройки Из НастройкиПоОрганизациям Цикл
		СчетаОСВПоСчетам = Неопределено;
		Если СтрокаНастройки.ОСВПоСчетам Тогда
			СчетаОСВПоСчетам = СтрокаНастройки.СчетаОСВПоСчетам.Получить();
			Если СчетаОСВПоСчетам = Неопределено Тогда
				СчетаОСВПоСчетам = ОтчетностьВБанкиСлужебный.СчетаОСВПоСчетам();
			КонецЕсли;
		КонецЕсли;
		СтрокаНастройки.ОСВПоСчетамГиперссылка = ТекстГиперссылкиПоСчетам(
			СтрокаНастройки.ОСВПоСчетам, СчетаОСВПоСчетам);
			
		СчетаАнализовСчетов = Неопределено;
		Если СтрокаНастройки.АнализыСчетов Тогда
			СчетаАнализовСчетов = СтрокаНастройки.СчетаАнализовСчетов.Получить();
			Если СчетаАнализовСчетов = Неопределено Тогда
				СчетаАнализовСчетов = ОтчетностьВБанкиСлужебный.СчетаАнализовСчетов();
			КонецЕсли;
		КонецЕсли;
		СтрокаНастройки.АнализыСчетовГиперссылка = ТекстГиперссылкиПоСчетам(
			СтрокаНастройки.АнализыСчетов, СчетаАнализовСчетов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция Отметки(СтрокаНастроек)
	
	Отметки = Новый Структура;
	Отметки.Вставить("Транзакции", СтрокаНастроек.Транзакции);
	Отметки.Вставить("ОСВ", СтрокаНастроек.ОСВ);
	Отметки.Вставить("ОСВПоСчетам", СтрокаНастроек.ОСВПоСчетам);
	Отметки.Вставить("АнализыСчетов", СтрокаНастроек.АнализыСчетов);
	
	Возврат Отметки;
	
КонецФункции

&НаСервере
Процедура ИзменитьНастройкуПоОрганизации(Организация, Отметки)
	
	ЗаписьНастройки = РегистрыСведений.НастройкиОтправкиОтчетностиВБанк.СоздатьМенеджерЗаписи();
	ЗаписьНастройки.Организация = Организация;
	ЗаписьНастройки.Прочитать();
	
	ЗаписьНастройки.Организация = Организация;
	ЗаписьНастройки.ОтправлятьОтчеты = Отметки.Транзакции;
	ЗаписьНастройки.ОтправлятьОСВ = Отметки.ОСВ;
	ЗаписьНастройки.ОтправлятьОСВПоСчетам = Отметки.ОСВПоСчетам;
	ЗаписьНастройки.ОтправлятьАнализыСчетов = Отметки.АнализыСчетов;
	
	ЗаписьНастройки.Записать();
	
	ОтправлятьОтчеты = Ложь;
	Для Каждого Отметка Из Отметки Цикл
		ОтправлятьОтчеты = ОтправлятьОтчеты ИЛИ Отметка.Значение;
	КонецЦикла;
	
	Если ОтправлятьОтчеты Тогда
		ВключитьЗадание(Организация);
	Иначе
		ВыключитьЗадание(Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеПоОрганизации(СтрокаНастроек)
	
	Отметки = Отметки(СтрокаНастроек);
	
	ОтправлятьОтчеты = Ложь;
	Для Каждого Отметка Из Отметки Цикл
		ОтправлятьОтчеты = ОтправлятьОтчеты ИЛИ Отметка.Значение;
	КонецЦикла;
	
	Если НЕ ОтправлятьОтчеты Тогда
		СтрокаНастроек.Состояние = СтрокаНастроек.СостояниеОтправки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьЗадание(Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", "ОтправкаОтчетностиВБанк");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	ТребуетсяСоздатьЗадание = Истина;
	
	Если Задания.Количество() > 0 Тогда
		Для Каждого РегЗадание Из Задания Цикл
			Если РегЗадание.Параметры.Количество() > 0 И РегЗадание.Параметры[0] = Организация Тогда
				ТребуетсяСоздатьЗадание = Ложь;
				
				Если НЕ РегЗадание.Использование Тогда
					ПараметрыЗадания = Новый Структура();
					ПараметрыЗадания.Вставить("Использование", Истина);
					РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание, ПараметрыЗадания);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТребуетсяСоздатьЗадание Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОтправкаОтчетностиВБанк);
		
		ПараметрыЗадания.Вставить("Параметры", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация));
		ПараметрыЗадания.Вставить("Расписание", РасписаниеОтправки());
		НаименованиеЗадания = СтрШаблон(НСтр("ru = 'Отправка отчетности в Сбербанк от %1';
											|en = 'Отправка отчетности в Сбербанк от %1'"), Организация);
		ПараметрыЗадания.Вставить("Наименование", НаименованиеЗадания);
		
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении",    1200);
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
		ПараметрыЗадания.Вставить("Использование", Истина);
		
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ВыключитьЗадание(Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", "ОтправкаОтчетностиВБанк");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого РегЗадание Из Задания Цикл
		Если РегЗадание.Параметры.Количество() > 0 И РегЗадание.Параметры[0] = Организация Тогда
			РегламентныеЗаданияСервер.УдалитьЗадание(РегЗадание);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция РасписаниеОтправки()
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодПовтораВТечениеДня = 0;
	Расписание.ВремяНачала = '00010101000000' + ГСЧ.СлучайноеЧисло(32400, 61200); // с 9:00 до 17:00
	
	Возврат Расписание;
	
КонецФункции

&НаСервере
Функция ОтправитьОтчетностьВФоне(Организация)
	
	НаименованиеЗадания = НСтр("ru = 'Отправка сведений в Сбербанк';
								|en = 'Отправка сведений в Сбербанк'");
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения,
		"ОтчетностьВБанкиСлужебный.ОтправитьОтчетностьВБанкПринудительно",
		Организация);
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеОтправкиВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСведенияНастроекНаСервере();
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Отчеты по организации %1 отправлены в Сбербанк';
									|en = 'Отчеты по организации %1 отправлены в Сбербанк'"),
		Элементы.Организации.ТекущиеДанные.Организация);
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСчетаПоОрганизации(Организация, Отметки)
	
	НастройкиСчетов = НастройкиСчетовПоОрганизации(Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиСчетов", НастройкиСчетов);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("Отметки", Отметки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьНастройкуСчетовОСВ",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("РегистрСведений.НастройкиОтправкиОтчетностиВБанк.Форма.НастройкаСпискаСчетов",
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиСчетовПоОрганизации(Организация)
	
	СчетаПоОрганизации = РегистрыСведений.НастройкиОтправкиОтчетностиВБанк.НовыйСписокСчетовДляНастройки();
	ДоступныеСчета = ОтчетностьВБанкиСлужебный.СчетаОСВПоСчетам();
	
	Для Каждого Счет Из ДоступныеСчета Цикл
		СтрокаСчета = СчетаПоОрганизации.Добавить();
		СтрокаСчета.Включен = Ложь;
		СтрокаСчета.Счет = Счет;
		СтрокаСчета.Наименование = Счет.Код + " " + Счет.Наименование;
	КонецЦикла;
	
	ЗаписьНастройки = РегистрыСведений.НастройкиОтправкиОтчетностиВБанк.СоздатьМенеджерЗаписи();
	ЗаписьНастройки.Организация = Организация;
	ЗаписьНастройки.Прочитать();
	
	ОтправлятьОСВПоСчетам = ЗаписьНастройки.ОтправлятьОСВПоСчетам;
	ОтправляемыеСчета = ЗаписьНастройки.СчетаОСВПоСчетам.Получить();
	
	Если ОтправлятьОСВПоСчетам Тогда
		Если ОтправляемыеСчета = Неопределено ИЛИ ОтправляемыеСчета.Количество() = 0 Тогда
			Для Каждого Счет Из СчетаПоОрганизации Цикл
				Счет.Включен = Истина;
			КонецЦикла;
		Иначе
			Для Каждого Счет Из ОтправляемыеСчета Цикл
				СтрокаСчета = СчетаПоОрганизации.Найти(Счет, "Счет");
				Если СтрокаСчета <> Неопределено Тогда
					СтрокаСчета.Включен = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СчетаПоОрганизации);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНастройкуСчетовОСВ(РезультатНастройки, ДополнительныеПараметры) Экспорт
	
	Если РезультатНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ДополнительныеПараметры.Организация;
	Отметки = ДополнительныеПараметры.Отметки;
	
	ИзменитьНастройкуСчетовОСВ(РезультатНастройки, Организация, Отметки);
	ЗапланироватьОтправкиПредшествующихПериодовОСВПоСчету(Организация, Отметки);
	
	ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
	ИзменитьСостояниеПоОрганизации(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНастройкуСчетовОСВ(ВыбранныеСчета, Организация, Отметки)
	
	ОтправляемыеСчета = Новый Массив;
	Для Каждого ВыбранныйСчет Из ВыбранныеСчета Цикл
		Если ВыбранныйСчет.Включен Тогда
			ОтправляемыеСчета.Добавить(ВыбранныйСчет.Счет);
		КонецЕсли;
	КонецЦикла;
	ОтправлятьОтчет = ОтправляемыеСчета.Количество() <> 0;
	Отметки.ОСВПоСчетам = ОтправлятьОтчет;
	
	ЗаписьНастройки = РегистрыСведений.НастройкиОтправкиОтчетностиВБанк.СоздатьМенеджерЗаписи();
	ЗаписьНастройки.Организация = Организация;
	ЗаписьНастройки.Прочитать();
	
	ЗаписьНастройки.Организация = Организация;
	ЗаписьНастройки.ОтправлятьОСВПоСчетам = ОтправлятьОтчет;
	ЗаписьНастройки.СчетаОСВПоСчетам = Новый ХранилищеЗначения(ОтправляемыеСчета);
	
	ЗаписьНастройки.Записать();
	
	ОтправлятьОтчеты = Ложь;
	Для Каждого Отметка Из Отметки Цикл
		ОтправлятьОтчеты = ОтправлятьОтчеты ИЛИ Отметка.Значение;
	КонецЦикла;
	
	Если ОтправлятьОтчеты Тогда
		ВключитьЗадание(Организация);
	Иначе
		ВыключитьЗадание(Организация);
	КонецЕсли;
	
	ОбновитьСведенияНастроекНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗапланироватьОтправкиПредшествующихПериодовОСВПоСчету(Организация, Отметки)
	
	Если НЕ Отметки.ОСВПоСчетам Тогда
		// Пользователь отключил отправку ОСВ по счетам.
		// Изменения в регистрах не требуются.
		Возврат;
	КонецЕсли;
	
	РетроспективныеОтправки = НоваяТаблицаРетроспективныхОтправок();
	
	НачалоПредшествующегоКвартала = ДатаОтсчетаРетроспективныхОтправок();
	ПредшествующихКварталов = 9;
	
	Для Инд = 0 По ПредшествующихКварталов - 1 Цикл
		НачалоПериода = ДобавитьМесяц(НачалоПредшествующегоКвартала, -3 * (Инд));
		
		МоментОтправки = ДатаНачалаОтправкиОСВПоСчетуЗаКвартал(НачалоПериода);
		ПараметрыОтчетов = ОтчетностьВБанкиСлужебный.ПараметрыПредставляемыхОтчетов(
			Организация, МоментОтправки, Истина);
		
		ПараметрыОтчетов.АнализСчетов.Отправлять = Ложь;
		ПараметрыОтчетов.БанковскиеОперации.Отправлять = Ложь;
		ПараметрыОтчетов.ОСВ.Отправлять = Ложь;
		
		Отправка = РетроспективныеОтправки.Добавить();
		Отправка.Организация = Организация;
		Отправка.ВидОтчета = "ОСВПоСчетам";
		Отправка.НачалоПериода = ПараметрыОтчетов.АнализСчетов.ПериодРегистрацииОтправки.НачалоПериода;
		Отправка.КонецПериода = ПараметрыОтчетов.АнализСчетов.ПериодРегистрацииОтправки.КонецПериода;
		Отправка.ПараметрыОтчетов = ПараметрыОтчетов;
		Отправка.МоментОтправки = МоментОтправки;
		
	КонецЦикла;
	
	ДобавитьЗапланированныеОтправки(Организация, РетроспективныеОтправки);
	
КонецПроцедуры

&НаСервере
Функция ДатаНачалаОтправкиОСВПоСчетуЗаКвартал(НачалоПериода)
	
	ГодОтправки = Год(НачалоПериода);
	НомерКвартала = Месяц(КонецКвартала(НачалоПериода)) / 3;
	Если НомерКвартала = 1 Тогда
		ДатаОтправки = Дата(ГодОтправки, 5, 11);
	ИначеЕсли НомерКвартала = 2 Тогда
		ДатаОтправки = Дата(ГодОтправки, 8, 5);
	ИначеЕсли НомерКвартала = 3 Тогда
		ДатаОтправки = Дата(ГодОтправки, 11, 9);
	ИначеЕсли НомерКвартала = 4 Тогда
		ДатаОтправки = Дата(ГодОтправки + 1, 4, 7);
	КонецЕсли;
	
	Возврат ДатаОтправки;
	
КонецФункции

&НаКлиенте
Процедура НастроитьСчетаАнализовСчетовПоОрганизации(Организация, Отметки)
	
	НастройкиСчетов = НастройкиСчетовАнализовСчетовПоОрганизации(Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиСчетов", НастройкиСчетов);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("Отметки", Отметки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьНастройкуСчетовАнализовСчетов",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("РегистрСведений.НастройкиОтправкиОтчетностиВБанк.Форма.НастройкаСпискаСчетов",
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиСчетовАнализовСчетовПоОрганизации(Организация)
	
	СчетаПоОрганизации = РегистрыСведений.НастройкиОтправкиОтчетностиВБанк.НовыйСписокСчетовДляНастройки();
	ДоступныеСчета = ОтчетностьВБанкиСлужебный.СчетаАнализовСчетов();
	
	Для Каждого Счет Из ДоступныеСчета Цикл
		СтрокаСчета = СчетаПоОрганизации.Добавить();
		СтрокаСчета.Включен = Ложь;
		СтрокаСчета.Счет = Счет;
		СтрокаСчета.Наименование = Счет.Код + " " + Счет.Наименование;
	КонецЦикла;
	
	ЗаписьНастройки = РегистрыСведений.НастройкиОтправкиОтчетностиВБанк.СоздатьМенеджерЗаписи();
	ЗаписьНастройки.Организация = Организация;
	ЗаписьНастройки.Прочитать();
	
	ОтправлятьОтчет = ЗаписьНастройки.ОтправлятьАнализыСчетов;
	ОтправляемыеСчета = ЗаписьНастройки.СчетаАнализовСчетов.Получить();
	
	Если ОтправлятьОтчет Тогда
		Если ОтправляемыеСчета = Неопределено ИЛИ ОтправляемыеСчета.Количество() = 0 Тогда
			Для Каждого Счет Из СчетаПоОрганизации Цикл
				Счет.Включен = Истина;
			КонецЦикла;
		Иначе
			Для Каждого Счет Из ОтправляемыеСчета Цикл
				СтрокаСчета = СчетаПоОрганизации.Найти(Счет, "Счет");
				Если СтрокаСчета <> Неопределено Тогда
					СтрокаСчета.Включен = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СчетаПоОрганизации);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНастройкуСчетовАнализовСчетов(РезультатНастройки, ДополнительныеПараметры) Экспорт
	
	Если РезультатНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ДополнительныеПараметры.Организация;
	Отметки = ДополнительныеПараметры.Отметки;
	
	ИзменитьНастройкуСчетовАнализовСчетов(РезультатНастройки, Организация, Отметки);
	ЗапланироватьОтправкиПредшествующихПериодовАнализовСчетов(Организация, Отметки);
	
	ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
	ИзменитьСостояниеПоОрганизации(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ЗапланироватьОтправкиПредшествующихПериодовАнализовСчетов(Организация, Отметки)
	
	Если НЕ Отметки.АнализыСчетов Тогда
		// Пользователь отключил отправку анализов счетов.
		// Изменения в регистрах не требуются.
		Возврат;
	КонецЕсли;
	
	РетроспективныеОтправки = НоваяТаблицаРетроспективныхОтправок();
	
	НачалоПредшествующегоКвартала = ДатаОтсчетаРетроспективныхОтправок();
	ПредшествующихКварталов = 9;
	
	Для Инд = 0 По ПредшествующихКварталов - 1 Цикл
		НачалоПериода = ДобавитьМесяц(НачалоПредшествующегоКвартала, -3 * (Инд));
		
		МоментОтправки = ДатаНачалаОтправкиАнализаСчетаЗаКвартал(НачалоПериода);
		ПараметрыОтчетов = ОтчетностьВБанкиСлужебный.ПараметрыПредставляемыхОтчетов(
			Организация, МоментОтправки, Истина);
		
		ПараметрыОтчетов.ОСВПоСчетам.Отправлять = Ложь;
		ПараметрыОтчетов.БанковскиеОперации.Отправлять = Ложь;
		ПараметрыОтчетов.ОСВ.Отправлять = Ложь;
		
		Отправка = РетроспективныеОтправки.Добавить();
		Отправка.Организация = Организация;
		Отправка.ВидОтчета = "АнализСчетов";
		Отправка.НачалоПериода = ПараметрыОтчетов.АнализСчетов.ПериодРегистрацииОтправки.НачалоПериода;
		Отправка.КонецПериода = ПараметрыОтчетов.АнализСчетов.ПериодРегистрацииОтправки.КонецПериода;
		Отправка.ПараметрыОтчетов = ПараметрыОтчетов;
		Отправка.МоментОтправки = МоментОтправки;
		
	КонецЦикла;
	
	ДобавитьЗапланированныеОтправки(Организация, РетроспективныеОтправки);
	
КонецПроцедуры

// Конструктор таблицы ретроспективных отправок для планировщика.
// 
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Организация - СправочникСсылка.Организации
//     * ВидОтчета - Строка
//     * НачалоПериода - Дата
//     * КонецПериода - Дата
//     * ПараметрыОтчетов - Структура
//     * МоментОтправки - Дата
// 
&НаСервере
Функция НоваяТаблицаРетроспективныхОтправок()
	
	ТипДатаБезВремени = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ТипСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	
	РетроспективныеОтправки = Новый ТаблицаЗначений;
	РетроспективныеОтправки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	РетроспективныеОтправки.Колонки.Добавить("ВидОтчета", ТипСтрока100);
	РетроспективныеОтправки.Колонки.Добавить("НачалоПериода", ТипДатаБезВремени);
	РетроспективныеОтправки.Колонки.Добавить("КонецПериода", ТипДатаБезВремени);
	РетроспективныеОтправки.Колонки.Добавить("ПараметрыОтчетов");
	РетроспективныеОтправки.Колонки.Добавить("МоментОтправки", ТипДатаБезВремени);
	
	Возврат РетроспективныеОтправки;
	
КонецФункции

&НаСервере
Функция ДатаОтсчетаРетроспективныхОтправок()
	
	Январь = 1; Апрель = 4; Май = 5; Июнь = 6;
	Июль = 7; Сентябрь = 9; Октябрь = 10; Декабрь = 12;
	
	ДатаПодключения = ТекущаяДатаСеанса();
	
	ОтчетныйГод = Год(ДатаПодключения);
	
	Если ДатаПодключения >= Дата(ОтчетныйГод, Январь, 1)
	   И ДатаПодключения <= КонецДня(Дата(ОтчетныйГод, Май, 8)) Тогда
		// Первая отправка в текущем году за 4 квартал предшествующего года.
		// Отправка: 9 ноября – 9 декабря
		ДатаНачалаПоследнейОтправкиВСерииРетроспективныхОтправок = Дата(ОтчетныйГод - 1, Июль, 1); // 3 квартал
		
	ИначеЕсли ДатаПодключения >= Дата(ОтчетныйГод, Май, 8)
	        И ДатаПодключения <= КонецДня(Дата(ОтчетныйГод, Июнь, 11)) Тогда
		// Первая отправка в текущем году за 1 квартал текущего года.
		// Отправка: 7 апреля – 7 мая
		ДатаНачалаПоследнейОтправкиВСерииРетроспективныхОтправок = Дата(ОтчетныйГод - 1, Октябрь, 1); // 4 квартал
		
	ИначеЕсли ДатаПодключения >= Дата(ОтчетныйГод, Июнь, 12)
	        И ДатаПодключения <= КонецДня(Дата(ОтчетныйГод, Сентябрь, 5)) Тогда
		// Первая отправка в текущем году за 2 квартал текущего года.
		// Отправка: 11 мая – 11 июня
		ДатаНачалаПоследнейОтправкиВСерииРетроспективныхОтправок = Дата(ОтчетныйГод, Январь, 1); // 1 квартал
		
	ИначеЕсли ДатаПодключения >= Дата(ОтчетныйГод, Сентябрь, 6)
	        И ДатаПодключения <= КонецДня(Дата(ОтчетныйГод, Декабрь, 9)) Тогда
		// Первая отправка в текущем году за 3 квартал текущего года.
		// Отправка: 5 августа – 5 сентября
		ДатаНачалаПоследнейОтправкиВСерииРетроспективныхОтправок = Дата(ОтчетныйГод, Апрель, 1); // 2 квартал
		
	ИначеЕсли ДатаПодключения >= Дата(ОтчетныйГод, Декабрь, 10)
	        И ДатаПодключения <= КонецДня(Дата(ОтчетныйГод, Декабрь, 31)) Тогда
		// Первая отправка в следующем году за 4 квартал текущего года.
		// Отправка: 9 ноября – 9 декабря
		ДатаНачалаПоследнейОтправкиВСерииРетроспективныхОтправок = Дата(ОтчетныйГод, Июль, 1); // 3 квартал
		
	КонецЕсли;
	
	Возврат ДатаНачалаПоследнейОтправкиВСерииРетроспективныхОтправок;
	
КонецФункции

&НаСервере
Функция ДатаНачалаОтправкиАнализаСчетаЗаКвартал(НачалоПериода)
	
	ГодОтправки = Год(НачалоПериода);
	НомерКвартала = Месяц(КонецКвартала(НачалоПериода)) / 3;
	
	Если НомерКвартала = 1 Тогда
		ДатаОтправки = Дата(ГодОтправки, 5, 11);
	ИначеЕсли НомерКвартала = 2 Тогда
		ДатаОтправки = Дата(ГодОтправки, 8, 5);
	ИначеЕсли НомерКвартала = 3 Тогда
		ДатаОтправки = Дата(ГодОтправки, 11, 9);
	ИначеЕсли НомерКвартала = 4 Тогда
		ДатаОтправки = Дата(ГодОтправки + 1, 4, 7);
	КонецЕсли;
	
	Возврат ДатаОтправки + 86400; // смещение на сутки относительно ОСВ по счетам
	
КонецФункции

&НаСервере
Процедура ДобавитьЗапланированныеОтправки(Организация, РетроспективныеОтправки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отправки.Организация КАК Организация,
		|	Отправки.ВидОтчета КАК ВидОтчета,
		|	Отправки.НачалоПериода КАК НачалоПериода,
		|	Отправки.КонецПериода КАК КонецПериода
		|ПОМЕСТИТЬ ВТ_Отправки
		|ИЗ
		|	&Отправки КАК Отправки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Отправки.Организация КАК Организация,
		|	ВТ_Отправки.ВидОтчета КАК ВидОтчета,
		|	ВТ_Отправки.НачалоПериода КАК НачалоПериода,
		|	ВТ_Отправки.КонецПериода КАК КонецПериода,
		|	НЕ ЖурналПереданнойОтчетностиВБанк.ИмяПакета ЕСТЬ NULL КАК Отправлен
		|ИЗ
		|	ВТ_Отправки КАК ВТ_Отправки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналПереданнойОтчетностиВБанк КАК ЖурналПереданнойОтчетностиВБанк
		|		ПО ВТ_Отправки.Организация = ЖурналПереданнойОтчетностиВБанк.Организация
		|			И ВТ_Отправки.ВидОтчета = ЖурналПереданнойОтчетностиВБанк.ВидОтчета
		|			И ВТ_Отправки.НачалоПериода = ЖурналПереданнойОтчетностиВБанк.НачалоПериода
		|			И ВТ_Отправки.КонецПериода = ЖурналПереданнойОтчетностиВБанк.КонецПериода";
	
	Запрос.УстановитьПараметр("Отправки", РетроспективныеОтправки.Скопировать( ,
		"Организация, ВидОтчета, НачалоПериода, КонецПериода"));
	
	ВыборкаОтправок = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаОтправок.Следующий() Цикл
		Если НЕ ВыборкаОтправок.Отправлен Тогда
			Отправка = РетроспективныеОтправки.Найти(ВыборкаОтправок.НачалоПериода, "НачалоПериода");
			Если Отправка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыВыгрузки = ОтчетностьВБанкиСлужебный.ПараметрыЭлектронногоПредставления(
				Организация, Отправка.ПараметрыОтчетов, Отправка.МоментОтправки);
			
			ПараметрыОтправки = Новый Структура;
			ПараметрыОтправки.Вставить("Организация", Организация);
			ПараметрыОтправки.Вставить("ИмяПакета", ПараметрыВыгрузки.ИдФайл);
			ПараметрыОтправки.Вставить("ДатаОтправки", Отправка.МоментОтправки);
			ПараметрыОтправки.Вставить("ДатаНачала", ПараметрыВыгрузки.НачалоПериода);
			ПараметрыОтправки.Вставить("ДатаОкончания", ПараметрыВыгрузки.КонецПериода);
			
			ЗаписьЖурналаОтправки = РегистрыСведений.ЖурналПередачиОтчетностиВБанк.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьЖурналаОтправки, ПараметрыОтправки);
			ЗаписьЖурналаОтправки.Состояние = "Запланирована";
			ЗаписьЖурналаОтправки.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНастройкуСчетовАнализовСчетов(ВыбранныеСчета, Организация, Отметки)
	
	ОтправляемыеСчета = Новый Массив;
	Для Каждого ВыбранныйСчет Из ВыбранныеСчета Цикл
		Если ВыбранныйСчет.Включен Тогда
			ОтправляемыеСчета.Добавить(ВыбранныйСчет.Счет);
		КонецЕсли;
	КонецЦикла;
	ОтправлятьОтчет = ОтправляемыеСчета.Количество() <> 0;
	Отметки.АнализыСчетов = ОтправлятьОтчет;
	
	ЗаписьНастройки = РегистрыСведений.НастройкиОтправкиОтчетностиВБанк.СоздатьМенеджерЗаписи();
	ЗаписьНастройки.Организация = Организация;
	ЗаписьНастройки.Прочитать();
	
	ЗаписьНастройки.Организация = Организация;
	ЗаписьНастройки.ОтправлятьАнализыСчетов = ОтправлятьОтчет;
	ЗаписьНастройки.СчетаАнализовСчетов = Новый ХранилищеЗначения(ОтправляемыеСчета);
	
	ЗаписьНастройки.Записать();
	
	ОтправлятьОтчеты = Ложь;
	Для Каждого Отметка Из Отметки Цикл
		ОтправлятьОтчеты = ОтправлятьОтчеты ИЛИ Отметка.Значение;
	КонецЦикла;
	
	Если ОтправлятьОтчеты Тогда
		ВключитьЗадание(Организация);
	Иначе
		ВыключитьЗадание(Организация);
	КонецЕсли;
	
	ОбновитьСведенияНастроекНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ТекстГиперссылкиПоСчетам(СчетаОтправляются, СчетаОтчета)
	
	Если СчетаОтправляются Тогда
		ТекстГиперссылки = "Все счета";
		
		КоличествоКодовСчетов = Мин(СчетаОтчета.Количество(), 3);
		
		ОсновныеСчета = "";
		Для Инд = 1 По КоличествоКодовСчетов Цикл
			ОсновныеСчета = ОсновныеСчета + ", " + СчетаОтчета[Инд - 1].Код;
		КонецЦикла;
		ОсновныеСчета = Сред(ОсновныеСчета, 2);
		
		НачалоНадписи = ?(КоличествоКодовСчетов = 1, НСтр("ru = 'Счет';
															|en = 'Счет'"), НСтр("ru = 'Счета';
																				|en = 'Счета'"));
		
		СвернутоСчетов = СчетаОтчета.Количество() - КоличествоКодовСчетов;
		
		СвернутыеСчета = "";
		Если СвернутоСчетов > 0 Тогда
			СвернутыеСчета = НСтр("ru = ' и еще %1 счетов';
									|en = ' и еще %1 счетов'");
			ПоследняяЦифра = СвернутоСчетов % 10;
			Если ПоследняяЦифра = 1 Тогда
				СвернутыеСчета = НСтр("ru = ' и еще %1 счет';
										|en = ' и еще %1 счет'");
			ИначеЕсли ПоследняяЦифра = 2 ИЛИ ПоследняяЦифра = 3 ИЛИ ПоследняяЦифра = 4 Тогда
				СвернутыеСчета = НСтр("ru = ' и еще %1 счета';
										|en = ' и еще %1 счета'");
			КонецЕсли;
			СвернутыеСчета = СтрШаблон(СвернутыеСчета, Формат(СвернутоСчетов, "ЧН=; ЧГ=0"));
		КонецЕсли;
		
		ТекстГиперссылки = СтрШаблон("%1 %2%3",
			НачалоНадписи, ОсновныеСчета, СвернутыеСчета);
		
	Иначе
		ТекстГиперссылки = НСтр("ru = 'Не отправляется';
								|en = 'Не отправляется'");
		
	КонецЕсли;
	
	Возврат ТекстГиперссылки;
	
КонецФункции

#КонецОбласти
