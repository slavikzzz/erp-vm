#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МакетРасшифровки = ПолучитьОбщийМакет("РасшифровкаПоказателейРегламентированныхОтчетов");
	
	ИсходнаяТаблицаРасшифровок = ПолучитьИзВременногоХранилища(Параметры.АдресВременногоХранилищаРасшифровки);
	
	Если ТипЗнч(ИсходнаяТаблицаРасшифровок) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсходнаяТаблицаРасшифровок.Колонки.Найти("Организация") = Неопределено Тогда
		ИсходнаяТаблицаРасшифровок.Колонки.Добавить("Организация");
	КонецЕсли;
	
	ИсходнаяТаблицаРасшифровок.Индексы.Добавить("ИмяПоказателя");
	
	ЕстьПоказателиИзСписка = Ложь;
	
	Для Каждого ИмяПоказателя Из Параметры.ИДИменПоказателей Цикл
		Если ИсходнаяТаблицаРасшифровок.Найти(ИмяПоказателя, "ИмяПоказателя") <> Неопределено Тогда
			ЕстьПоказателиИзСписка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	КешВывода = Неопределено;
	
	Если ЕстьПоказателиИзСписка Тогда

		Для Каждого ИмяПоказателя Из Параметры.ИДИменПоказателей Цикл
			ВывестиРасшифровкуПоказателя(МакетРасшифровки, ИсходнаяТаблицаРасшифровок, ИмяПоказателя, КешВывода);
		КонецЦикла;
		
	Иначе
		ВыведенныеПоказатели = Новый ТаблицаЗначений;
		ВыведенныеПоказатели.Колонки.Добавить("ИмяПоказателя");
		ВыведенныеПоказатели.Индексы.Добавить("ИмяПоказателя");
		
		Для Каждого СтрокаТаблицыРасшифровки Из ИсходнаяТаблицаРасшифровок Цикл
			Если ВыведенныеПоказатели.Найти(СтрокаТаблицыРасшифровки.ИмяПоказателя, "ИмяПоказателя") = Неопределено Тогда
				
				ИмяПоказателя = СтрокаТаблицыРасшифровки.ИмяПоказателя;
				ВывестиРасшифровкуПоказателя(МакетРасшифровки, ИсходнаяТаблицаРасшифровок, ИмяПоказателя, КешВывода);
				
				ВыведенныйПоказатель = ВыведенныеПоказатели.Добавить();
				ВыведенныйПоказатель.ИмяПоказателя = ИмяПоказателя;
			КонецЕсли;
		КонецЦикла;
		
		Если Параметры.Свойство("ЗаголовокРасшифровки") Тогда
			ЭтаФорма.Заголовок = Параметры.ЗаголовокРасшифровки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеРасшифровкиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Если Расшифровка.Свойство("Отчет") Тогда
			НаименованиеПоказателя = Неопределено;
			НаименованиеСтроки = Неопределено;
			Расшифровка.Свойство("НаименованиеПоказателя", НаименованиеПоказателя);
			Расшифровка.Свойство("НаименованиеСтроки", НаименованиеСтроки);
			
			ОткрытьФормуРасшифровки(Расшифровка.Отчет, НаименованиеСтроки, НаименованиеПоказателя);
			
		ИначеЕсли Расшифровка.Свойство("СписокПунктовМеню")
		        И Расшифровка.СписокПунктовМеню.Количество() > 1 Тогда
			ДополнительныеПараметры = Новый Структура("ДоступныеРасшифровки", Расшифровка);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзМенюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВыборИзМеню(ОписаниеОповещения, Расшифровка.СписокПунктовМеню, Элемент);
			
		ИначеЕсли Расшифровка.Свойство("Ссылка") Тогда
			ПоказатьЗначение(, Расшифровка.Ссылка);
			
		ИначеЕсли Расшифровка.Свойство("ИмяПоказателя") Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресВременногоХранилищаРасшифровки", АдресРасшифровкиДетальныеЗаписи);
			ПараметрыФормы.Вставить("ИДИменПоказателей", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Расшифровка.ИмяПоказателя));
			
			ОткрытьФорму("ОбщаяФорма.РасшифровкаПоказателейРегламентированныхОтчетов", ПараметрыФормы, ЭтотОбъект, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьФормуРасшифровки(Расшифровка, НаименованиеСтроки, НаименованиеПоказателя)
	
	ИмяФормыОтчета = Расшифровка.ИмяОтчета;
	
	ПараметрыФормы = Новый Структура;
	
	Если ИмяФормыОтчета = "ОбщаяФорма.РасшифровкаПоказателейРегламентированныхОтчетов" Тогда
		// Имя формы и другие ее параметры переданы через общий механизм расшифровок,
		// например из НалогНаПрибыльДекларация.ДобавитьЗаписиРасшифровкиПоказателяБРО()
		// Адрес временного хранилища в тот момент, очевидно, не мог быть определен.
		// Но это тот же адрес, который используется для формирования этого (вызывающего, уже существующего) экземпляра формы.
		ПараметрыФормы.Вставить("АдресВременногоХранилищаРасшифровки", Параметры.АдресВременногоХранилищаРасшифровки);
	КонецЕсли;
	
	Если Расшифровка.Свойство("ПараметрыФормы") Тогда
		Для Каждого ЭлементНастройки Из Расшифровка.ПараметрыФормы Цикл
			ПараметрыФормы.Вставить(ЭлементНастройки.Ключ, ЭлементНастройки.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если Расшифровка.Свойство("НастройкиТиповогоОтчета") Тогда
		ПараметрыФормы.Вставить("ПользовательскиеНастройки", НастройкиДляТиповогоОтчета(Расшифровка.НастройкиТиповогоОтчета));
	ИначеЕсли Расшифровка.Свойство("ПользовательскиеНастройки") Тогда
		ПараметрыФормы.Вставить("ПользовательскиеНастройки", Расшифровка.ПользовательскиеНастройки);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("НаименованиеПоказателя", НаименованиеПоказателя);
	ПараметрыФормы.Вставить("НаименованиеСтроки",     НаименованиеСтроки);
	ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзМенюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДоступныеРасшифровки = ДополнительныеПараметры.ДоступныеРасшифровки;
		
		НаименованиеСтроки = Неопределено;
		НаименованиеПоказателя = Неопределено;
		
		// Наименование показателя регламентированного отчета
		ДоступныеРасшифровки.Свойство("НаименованиеПоказателя", НаименованиеПоказателя);
		
		// Наименование текущей строки расшифровки
		ДоступныеРасшифровки.Свойство("НаименованиеСтроки", НаименованиеСтроки);
		
		Расшифровка = Новый Структура;
		Если ДоступныеРасшифровки.Свойство(Результат.Значение, Расшифровка) Тогда
			ОткрытьФормуРасшифровки(Расшифровка.Отчет, НаименованиеСтроки, НаименованиеПоказателя);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРасшифровкуПоказателя(МакетРасшифровки, ТаблицаРасшифровок, ИмяПоказателя, КешВывода)
	
	Если КешВывода = Неопределено Тогда
		КешВывода = НовыйКешВывода();
		ИнициализироватьКешВывода(
			КешВывода,
			ТаблицаРасшифровок,
			МакетРасшифровки,
			ПолеРасшифровки,
			Параметры.ФорматЯчеекФинансоваяОтчетность); // Вызывается в контексте создания формы и параметры еще доступны
	КонецЕсли;
	
	Если ВывестиЛинейнуюРасшифровкуПоказателя(ИмяПоказателя, КешВывода) Тогда
		//@skip-check module-self-reference - чтобы избежать неоднозначности
		УстановитьЗаголовокФормы(ЭтотОбъект.Заголовок, ИмяПоказателя, КешВывода);
		Возврат;
	КонецЕсли;
	
	СекцияЗаголовок = МакетРасшифровки.ПолучитьОбласть("Заголовок");
	СекцияИтог      = МакетРасшифровки.ПолучитьОбласть("Итог");
	СекцияПлюс      = МакетРасшифровки.ПолучитьОбласть("Плюс");
	СекцияМинус     = МакетРасшифровки.ПолучитьОбласть("Минус");
	СекцияСлагаемое = МакетРасшифровки.ПолучитьОбласть("Слагаемое");
	
	СекцияНазваниеОрг         = МакетРасшифровки.ПолучитьОбласть("НазваниеОрг");
	СекцияНазваниеОргБезПлюса = МакетРасшифровки.ПолучитьОбласть("НазваниеОргБезПлюса");
	
	СтрокиРасшифровки = ТаблицаРасшифровок.НайтиСтроки(Новый Структура("ИмяПоказателя", ИмяПоказателя));
	
	Если СтрокиРасшифровки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
		
	Организации = Новый ТаблицаЗначений;
	Организации.Колонки.Добавить("Организация");
	Организации.Колонки.Добавить("Сумма");
	
	// Конкретная ячейка регламетированного отчета может расшифровываться либо в виде суммы/разности нескольких показателей,
	// либо таблицей детальных записей.
	// В первом случае в ТаблицаРасшифровок будет несколько записей с одинаковым ИмяПоказателя.
	// Во втором случае в ТаблицаРасшифровок будет только одна строка с данным ИмяПоказателя, а в ее поле ДополнительныеПараметры
	// будет содержаться адрес таблицы детальных записей во временном хранилище.
	ДетальныеЗаписи = Неопределено;
	
	Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
		
		Если ТипЗнч(СтрокаРасшифровки.ДополнительныеПараметры) = Тип("Структура") 
			 И СтрокаРасшифровки.ДополнительныеПараметры.Свойство("ДетальныеЗаписи") Тогда
			// Расшифровка через таблицу детальных записей.
			ДетальныеЗаписи = СтрокаРасшифровки.ДополнительныеПараметры.ДетальныеЗаписи;
			// В строках таблицы присутствуют поля Организация и Сумма.
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ДетальныеЗаписи, Организации);
			
			Если Не ЭтоАдресВременногоХранилища(АдресРасшифровкиДетальныеЗаписи)
				 И СтрокаРасшифровки.ДополнительныеПараметры.Свойство("ДетальныеЗаписиТаблицаРасшифровки") Тогда
				АдресРасшифровкиДетальныеЗаписи = ПоместитьВоВременноеХранилище(СтрокаРасшифровки.ДополнительныеПараметры.ДетальныеЗаписиТаблицаРасшифровки, УникальныйИдентификатор);
			КонецЕсли;	
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.Организация) Тогда
				Организация = СтрокаРасшифровки.Организация;
			Иначе
				Если ТаблицаРасшифровок.Колонки.Найти("ДополнительныеПараметры") <> Неопределено
				   И ТипЗнч(СтрокаРасшифровки.ДополнительныеПараметры) = Тип("Структура")
				   И СтрокаРасшифровки.ДополнительныеПараметры.Свойство("Организация") Тогда
					Если ЗначениеЗаполнено(СтрокаРасшифровки.ДополнительныеПараметры.Организация) Тогда
						Организация = СтрокаРасшифровки.ДополнительныеПараметры.Организация;
					КонецЕсли;
				КонецЕсли;
				СтрокаРасшифровки.Организация = Организация;
			КонецЕсли;
			
			НоваяСтрока = Организации.Добавить();
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Сумма = СтрокаРасшифровки.Сумма;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Организации.Свернуть("Организация", "Сумма");
	ПоНесколькимОрганизациям = (Организации.Количество() > 1);
	
	// Вывод пустого заголовка (заполнение произойдет при выводе строки с непустым полем НаименованиеПоказателя).
	ПолеРасшифровки.Вывести(СекцияЗаголовок);
	
	ИтоговаяСумма = 0;
	ПерваяОрганизация = Истина;
	Для Каждого Организация Из Организации Цикл
		
		Если ПерваяОрганизация Тогда
			СекцияОрганизации = СекцияНазваниеОргБезПлюса;
			ПерваяОрганизация = Ложь;
		Иначе
			СекцияОрганизации = СекцияНазваниеОрг;
		КонецЕсли;
		
		Если ПоНесколькимОрганизациям Тогда
			СекцияОрганизации.Параметры.ИтогПоОрганизации = Организация.Сумма;
			СекцияОрганизации.Параметры.НазваниеОрганизации = ?(ЗначениеЗаполнено(Организация.Организация),
				Организация.Организация,
				НСтр("ru = 'Без указания организации';
					|en = 'Without company specification'"));
			ПолеРасшифровки.Вывести(СекцияОрганизации);
		КонецЕсли;
		
		ПерваяСтрока = Истина;
		Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
			
			// Расшифровку в виде таблице детальных записей выводим в особом порядке
			Если ДетальныеЗаписи <> Неопределено Тогда
				ВывестиДетальныеЗаписиПоОрганизации(СтрокаРасшифровки, ДетальныеЗаписи, Организация.Организация, МакетРасшифровки, ПоНесколькимОрганизациям);
				ИтоговаяСумма = ИтоговаяСумма + ?(ПоНесколькимОрганизациям, Организация.Сумма, СтрокаРасшифровки.Сумма);
				Продолжить;
			КонецЕсли;	
			
			Если СтрокаРасшифровки.Организация <> Организация.Организация Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаРасшифровки.НаименованиеПоказателя) Тогда
				ПолеРасшифровки.Области.НаименованиеЗаголовок.Значение = СтрокаРасшифровки.НаименованиеПоказателя;
				Заголовок = СтрокаРасшифровки.НаименованиеПоказателя + " - расшифровка значения";
			КонецЕсли;
			
			Если НЕ ПерваяСтрока Тогда
				Если СтрокаРасшифровки.ЗнакОперации = "-" Тогда
					ПолеРасшифровки.Вывести(СекцияМинус);
				Иначе
					ПолеРасшифровки.Вывести(СекцияПлюс);
				КонецЕсли;
			Иначе
				ПерваяСтрока = Ложь;
			КонецЕсли;
			
			ПолеРасшифровки.Вывести(СекцияСлагаемое);
			
			ПолеРасшифровки.Области.СлагаемоеНаименование.Значение = ПолноеНаименованиеСлагаемого(СтрокаРасшифровки.НаименованиеСлагаемого) + ПолучитьНаименованиеДополнительныхПараметров(СтрокаРасшифровки.ДополнительныеПараметры);
			ПолеРасшифровки.Области.СлагаемоеСумма.Значение        = СтрокаРасшифровки.Сумма;
			
			Если СтрокаРасшифровки.ДополнительныеПараметры <> Неопределено
				И ТипЗнч(СтрокаРасшифровки.ДополнительныеПараметры) = Тип("Структура")
				И (СтрокаРасшифровки.ДополнительныеПараметры.Свойство("Отчет")
				Или СтрокаРасшифровки.ДополнительныеПараметры.Свойство("СписокПунктовМеню")
				Или СтрокаРасшифровки.ДополнительныеПараметры.Свойство("Ссылка")) Тогда
				РасшифровкаОбласти = СтрокаРасшифровки.ДополнительныеПараметры;
				Если ТипЗнч(РасшифровкаОбласти) = Тип("Структура") Тогда
					// Наименование показателя регламентированного отчета
					РасшифровкаОбласти.Вставить("НаименованиеПоказателя", СтрокаРасшифровки.НаименованиеПоказателя);
					// Наименование текущей строки расшифровки
					РасшифровкаОбласти.Вставить("НаименованиеСтроки", ПолеРасшифровки.Области.СлагаемоеНаименование.Значение);
				КонецЕсли;
				ПолеРасшифровки.Области.СлагаемоеНаименование.Расшифровка = РасшифровкаОбласти;
				ПолеРасшифровки.Области.СлагаемоеСумма.Расшифровка = РасшифровкаОбласти;
			КонецЕсли;
			
			ИтоговаяСумма = ИтоговаяСумма + СтрокаРасшифровки.Сумма;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Вывод итога.
	ПолеРасшифровки.Вывести(СекцияИтог);
	ПолеРасшифровки.Области.ИтогСумма.Значение = ИтоговаяСумма;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВывестиЛинейнуюРасшифровкуПоказателя(ИмяПоказателя, КешВывода)
	
	Если Не КешВывода.СодержитЛинейнуюРасшифровку Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запись = КешВывода.Индекс[ИмяПоказателя];
	Если Запись = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пока Запись <> Неопределено Цикл
		
		ВывестиЗаписьЛинейнойРасшифровки(Запись, КешВывода);
		
		Запись = СледующаяЗаписьПоказателя(Запись, ИмяПоказателя, КешВывода);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция СледующаяЗаписьПоказателя(Запись, ИмяПоказателя, КешВывода)
	
	ИндексСледующейЗаписи = КешВывода.Данные.Индекс(Запись) + 1;
	Если ИндексСледующейЗаписи >= КешВывода.Данные.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СледующаяЗапись = КешВывода.Данные[ИндексСледующейЗаписи];
	Если СледующаяЗапись.ИмяПоказателя <> ИмяПоказателя Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СледующаяЗапись;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВывестиЗаписьЛинейнойРасшифровки(Запись, КешВывода)
	
	ВыводимыеЗначения = Новый Структура;
	
	ТипЗаписи = Запись.НаименованиеПоказателя;
	ИмяСекции = ТипЗаписи;
	
	Если ТипЗаписи = "ЗаголовокГруппы" Тогда
		ПодготовитьВыводЗначения(ВыводимыеЗначения, "ЗаголовокГруппыТекст",  Запись.НаименованиеСлагаемого);
	ИначеЕсли ТипЗаписи = "Заголовок" Тогда
		ПодготовитьВыводЗначения(ВыводимыеЗначения, "НаименованиеЗаголовок", Запись.НаименованиеСлагаемого);
	ИначеЕсли ТипЗаписи = "ПорядокРасчета" Тогда
		ПодготовитьВыводЗначения(ВыводимыеЗначения, "ПорядокРасчетаТекст", Запись.НаименованиеСлагаемого);
	ИначеЕсли ТипЗаписи = "Разъяснение" Тогда
		ПодготовитьВыводЗначения(ВыводимыеЗначения, "РазъяснениеТекст", Запись.НаименованиеСлагаемого);
	ИначеЕсли ТипЗаписи = "Организация" Тогда
		ИмяСекции = "Филиал";
		ПодготовитьВыводЗначения(ВыводимыеЗначения, "ФилиалТекст", Запись.НаименованиеСлагаемого, "Ссылка");
		ПодготовитьВыводЗначения(ВыводимыеЗначения, "ФилиалСумма", Запись.Сумма,                  "Отчет");
	ИначеЕсли ТипЗаписи = "ИерархияСлагаемых" Тогда
		ПодготовитьВыводЗначения(ВыводимыеЗначения, "ИерархияСлагаемыхТекст", Запись.НаименованиеСлагаемого, "Ссылка");
		ПодготовитьВыводЗначения(ВыводимыеЗначения, "ИерархияСлагаемыхСумма", Запись.Сумма,                  "Отчет");
	ИначеЕсли ТипЗаписи = "Итог" Тогда
		ИмяСекции = "ИтогПояснение";
		ПодготовитьВыводЗначения(ВыводимыеЗначения, "ИтогПояснениеТекст", Запись.НаименованиеСлагаемого);
		ПодготовитьВыводЗначения(ВыводимыеЗначения, "ИтогПояснениеСумма", Запись.Сумма);
	Иначе
		ИмяСекции = "Слагаемое";
		ПодготовитьВыводЗначения(ВыводимыеЗначения, "СлагаемоеНаименование", Запись.НаименованиеСлагаемого, "Ссылка");
		ПодготовитьВыводЗначения(ВыводимыеЗначения, "СлагаемоеСумма",        Запись.Сумма,                  "Отчет");
	КонецЕсли;
	
	Отступ = 0;
	Если ТипЗнч(Запись.ДополнительныеПараметры) = Тип("Структура") Тогда
		Если Запись.ДополнительныеПараметры.Свойство("Отступ") Тогда
			Отступ = Запись.ДополнительныеПараметры.Отступ;
		КонецЕсли;
	КонецЕсли;
	
	ВывестиЛинейнуюСекцию(ИмяСекции, ВыводимыеЗначения, Запись, Отступ, КешВывода);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодготовитьВыводЗначения(ВыводимыеЗначения, ИмяОбласти, Значение, ИмяРасшифровки = Неопределено)
	
	ОписаниеЗначения = Новый Структура;
	ОписаниеЗначения.Вставить("Значение", Значение);
	Если ИмяРасшифровки <> Неопределено Тогда
		ОписаниеЗначения.Вставить("Расшифровка", ИмяРасшифровки);
	КонецЕсли;
	
	ВыводимыеЗначения.Вставить(ИмяОбласти, ОписаниеЗначения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиЛинейнуюСекцию(ИмяСекции, ВыводимыеЗначения, Запись, Отступ, КешВывода)
	
	Секция = МакетСекции(ИмяСекции, КешВывода);
	
	ПерваяКолонка = Секция.Область("C2");
	ПерваяКолонка.Отступ = Отступ;
	
	Для Каждого ОписаниеЗначения Из ВыводимыеЗначения Цикл
		
		Ячейка = Секция.Области.Найти(ОписаниеЗначения.Ключ);
		Если Ячейка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Ячейка.Значение = ОписаниеЗначения.Значение.Значение;
		
		УстановитьФорматЯчейки(Ячейка, КешВывода);
		
		Если ОписаниеЗначения.Значение.Свойство("Расшифровка")
			И Запись <> Неопределено
			И ТипЗнч(Запись.ДополнительныеПараметры) = Тип("Структура")
			И Запись.ДополнительныеПараметры.Свойство(ОписаниеЗначения.Значение.Расшифровка) Тогда
			
			Если ОписаниеЗначения.Значение.Расшифровка = "Ссылка" Тогда
				Ячейка.Расшифровка = Запись.ДополнительныеПараметры.Ссылка;
			ИначеЕсли ОписаниеЗначения.Значение.Расшифровка = "Отчет" Тогда
				Ячейка.Расшифровка = Новый Структура("Отчет", Запись.ДополнительныеПараметры.Отчет);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Свернуть = (ИмяСекции = "Разъяснение");
	
	Если Свернуть Тогда
		КешВывода.Результат.НачатьГруппуСтрок(, Ложь);
	КонецЕсли;
	
	КешВывода.Результат.Вывести(Секция);
	
	Если Свернуть Тогда
		КешВывода.Результат.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьФорматЯчейки(Ячейка, КешВывода)
	
	Если Не КешВывода.ФорматЯчеекФинансоваяОтчетность Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Ячейка.СодержитЗначение Или Не Ячейка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Ячейка.Формат, "ЧО=") > 0 Или СтрНайти(Ячейка.Формат, "NN=") > 0 Тогда
		// уже применен
		Возврат;
	КонецЕсли;
	
	ЧастиФорматнойСтроки = Новый Массив;
	ЧастиФорматнойСтроки.Добавить(Ячейка.Формат);
	ЧастиФорматнойСтроки.Добавить("ЧО=0");
	
	Ячейка.Формат = СтрСоединить(ЧастиФорматнойСтроки, "; ");

КонецПроцедуры
	
&НаСервереБезКонтекста
Функция НовыйКешВывода()
	
	КешВывода = Новый Структура;
	
	КешВывода.Вставить("Данные");
	КешВывода.Вставить("Макет");
	КешВывода.Вставить("Результат");
	
	КешВывода.Вставить("СодержитЛинейнуюРасшифровку", Ложь);
	КешВывода.Вставить("Индекс", Новый Соответствие);
	
	КешВывода.Вставить("УстановленЗаголовокФормы", Ложь);
	
	КешВывода.Вставить("МакетыСекций", Новый Соответствие);
	
	КешВывода.Вставить("ФорматЯчеекФинансоваяОтчетность", Ложь);
	
	Возврат КешВывода;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ИнициализироватьКешВывода(КешВывода, Данные, Макет, Результат, ФорматЯчеекФинансоваяОтчетность)
	
	КешВывода.Данные    = Данные;
	КешВывода.Макет     = Макет;
	КешВывода.Результат = Результат;
	
	КешВывода.СодержитЛинейнуюРасшифровку = ЗаполнениеРасшифровкаРегламентированнойОтчетности.СодержитЛинейнуюРасшифровку(Данные);
	
	Если КешВывода.СодержитЛинейнуюРасшифровку Тогда
		КешВывода.Индекс = ПорядковыйИндексЛинейнойРасшифровки(КешВывода.Данные);
	КонецЕсли;
	
	КешВывода.ФорматЯчеекФинансоваяОтчетность = ФорматЯчеекФинансоваяОтчетность;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПорядковыйИндексЛинейнойРасшифровки(Данные)
	
	Индекс = Новый Соответствие;
	
	ИмяПоказателя = Неопределено;
	Для Каждого Запись Из Данные Цикл
		
		Если ЗаполнениеРасшифровкаРегламентированнойОтчетности.ЭтоЗаписьЛинейнойРасшифровки(Запись)
			И Запись.ИмяПоказателя <> ИмяПоказателя Тогда
			
			ИмяПоказателя = Запись.ИмяПоказателя;
			Индекс.Вставить(ИмяПоказателя, Запись);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Индекс;
	
КонецФункции

&НаСервереБезКонтекста
Функция МакетСекции(ИмяСекции, КешВывода)
	Макет = КешВывода.МакетыСекций[ИмяСекции];
	Если Макет = Неопределено Тогда
		Макет = КешВывода.Макет.ПолучитьОбласть(ИмяСекции);
		КешВывода.МакетыСекций.Вставить(ИмяСекции, Макет);
	КонецЕсли;
	Возврат Макет;
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Заголовок, ИмяПоказателя, КешВывода)
	
	Если КешВывода.УстановленЗаголовокФормы Тогда
		Возврат;
	КонецЕсли;
	
	КешВывода.УстановленЗаголовокФормы = Истина;
	
	Запись = КешВывода.Индекс[ИмяПоказателя];
	Если Запись = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = СтрШаблон(НСтр("ru = '%1 - расшифровка значения';
								|en = '%1 - расшифровка значения'"), Запись.НаименованиеСлагаемого);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДетальныеЗаписиПоОрганизации(СтрокаРасшифровки, ДетальныеЗаписи, Организация, МакетРасшифровки, ПоНесколькимОрганизациям)
	
	СекцияСлагаемое = МакетРасшифровки.ПолучитьОбласть("Слагаемое");
	
	Если Не ПустаяСтрока(СтрокаРасшифровки.НаименованиеПоказателя) Тогда
		ПолеРасшифровки.Области.НаименованиеЗаголовок.Значение = СтрокаРасшифровки.НаименованиеПоказателя;
		Заголовок = СтрШаблон(Нстр("ru = '%1 - расшифровка значения';
									|en = '%1 - value details'"), СтрокаРасшифровки.НаименованиеПоказателя);
	КонецЕсли;
		
	КоллекцияДетальныеЗаписи = ?(ПоНесколькимОрганизациям,
		ДетальныеЗаписи.НайтиСтроки(Новый Структура("Организация", Организация)),
		ДетальныеЗаписи);
	
	Для каждого ДетальнаяЗапись Из КоллекцияДетальныеЗаписи Цикл
		
		ПолеРасшифровки.Вывести(СекцияСлагаемое);
		ПолеРасшифровки.Области.СлагаемоеНаименование.Значение = ДетальнаяЗапись.Аналитика;
		ПолеРасшифровки.Области.СлагаемоеСумма.Значение        = ДетальнаяЗапись.Сумма;
		
		Если ЗначениеЗаполнено(ДетальнаяЗапись.Ссылка) Тогда
			ПолеРасшифровки.Области.СлагаемоеНаименование.Расшифровка = Новый Структура("Ссылка",ДетальнаяЗапись.Ссылка);
		КонецЕсли;	
		Если ЗначениеЗаполнено(ДетальнаяЗапись.ИмяПоказателя) Тогда
			ПолеРасшифровки.Области.СлагаемоеСумма.Расшифровка = Новый Структура("ИмяПоказателя", ДетальнаяЗапись.ИмяПоказателя);
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры	

// Возвращает полное наименования слагаемого после обработки макросов в имени
//
// Параметры
//   НаименованиеСлагаемого - Строка - Исходное наименование слагаемого
//
// Возвращаемое значение:
//   Строка  - Обработанное наименование слагаемого
//
&НаСервере
Функция ПолноеНаименованиеСлагаемого(Знач НаименованиеСлагаемого)
	
	Если СтрНайти(НаименованиеСлагаемого, "!СКДР") = 1 Тогда
		Возврат "Развернутое сальдо на конец периода по дебету счета " + СокрЛП(Сред(НаименованиеСлагаемого, 6));
		
	ИначеЕсли СтрНайти(НаименованиеСлагаемого, "!СККР") = 1 Тогда
		Возврат "Развернутое сальдо на конец периода по кредиту счета " + СокрЛП(Сред(НаименованиеСлагаемого, 6));
		
	ИначеЕсли СтрНайти(НаименованиеСлагаемого, "!СНД") = 1 Тогда
		Возврат "Сальдо на начало периода по дебету счета " + СокрЛП(Сред(НаименованиеСлагаемого, 5));
		
	ИначеЕсли СтрНайти(НаименованиеСлагаемого, "!СНК") = 1 Тогда
		Возврат "Сальдо на начало периода по кредиту счета " + СокрЛП(Сред(НаименованиеСлагаемого, 5));
		
	ИначеЕсли СтрНайти(НаименованиеСлагаемого, "!СКД") = 1 Тогда
		Возврат "Сальдо на конец периода по дебету счета " + СокрЛП(Сред(НаименованиеСлагаемого, 5));
		
	ИначеЕсли СтрНайти(НаименованиеСлагаемого, "!СКК") = 1 Тогда
		Возврат "Сальдо на конец периода по кредиту счета " + СокрЛП(Сред(НаименованиеСлагаемого, 5));
		
	ИначеЕсли СтрНайти(НаименованиеСлагаемого, "!ДО") = 1 Тогда
		Возврат "Оборот по дебету счета " + СокрЛП(Сред(НаименованиеСлагаемого, 4));
		
	ИначеЕсли СтрНайти(НаименованиеСлагаемого, "!КО") = 1 Тогда
		Возврат "Оборот по кредиту счета " + СокрЛП(Сред(НаименованиеСлагаемого, 4));
		
	ИначеЕсли СтрНайти(НаименованиеСлагаемого, "!ОБ") = 1 Тогда
		КодыСчетов = СокрЛП(Сред(НаименованиеСлагаемого, 4));
		ПозицияПробела = СтрНайти(КодыСчетов, " ");
		КодСчетаДт = СокрЛП(Лев(КодыСчетов, ПозицияПробела));
		КодСчетаКт = СокрЛП(Сред(КодыСчетов, ПозицияПробела + 1));
		
		Возврат "Оборот с дебета счета " + КодСчетаДт + " в кредит счета " + КодСчетаКт;
		
	Иначе
		Возврат(НаименованиеСлагаемого);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьНаименованиеДополнительныхПараметров(ДополнительныеПараметры)
	
	НаименованиеДополнительныхПараметров = "";
	
	Если ДополнительныеПараметры <> Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		Если ДополнительныеПараметры.Свойство("Субконто1") Тогда
			Субконто = ДополнительныеПараметры.Субконто1;
			
			НаименованиеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Субконто.ВидСубконто, "Наименование");
			ЗначениеСубконто     = Субконто.ЗначениеСубконто;
			
			Если ЗначениеСубконто <> Неопределено Тогда
				Если ТипЗнч(ЗначениеСубконто) = Тип("СписокЗначений") Тогда
					НаименованиеДополнительныхПараметров = НаименованиеДополнительныхПараметров + "." + Символы.ПС + "Субконто " + НаименованиеСубконто + " принимает "+?(ЗначениеСубконто.Количество()=1,"значение", "одно из следующих значений")+":" + Символы.ПС;
					Для Каждого Эл Из ЗначениеСубконто Цикл
						НаименованиеДополнительныхПараметров = НаименованиеДополнительныхПараметров + Эл.Значение + ", ";
					КонецЦикла;
					НаименованиеДополнительныхПараметров = Лев(НаименованиеДополнительныхПараметров, СтрДлина(НаименованиеДополнительныхПараметров) - 2) + "; ";
				Иначе
					НаименованиеДополнительныхПараметров = НаименованиеДополнительныхПараметров + "." + Символы.ПС + "Субконто " + НаименованиеСубконто + " принимает значение " + ЗначениеСубконто + ";";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаименованиеДополнительныхПараметров;
	
КонецФункции

&НаСервере
Функция НастройкиДляТиповогоОтчета(НастройкиТиповогоОтчета)
	
	Если НастройкиТиповогоОтчета.Отчет = "ОСВ" Тогда
		Возврат НастройкиОСВПоСчету(НастройкиТиповогоОтчета);
	ИначеЕсли НастройкиТиповогоОтчета.Отчет = "Анализ" Тогда
		Возврат НастройкиАнализаСчета(НастройкиТиповогоОтчета);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НастройкиОСВПоСчету(НастройкиТиповогоОтчета)
	
	Организация   = НастройкиТиповогоОтчета.Организация;
	НачалоПериода = НастройкиТиповогоОтчета.НачалоПериода;
	КонецПериода  = НастройкиТиповогоОтчета.КонецПериода;
	Счет          = НастройкиТиповогоОтчета.Счет;
	
	ОтборПоАналитике = НастройкиТиповогоОтчета.ОтборПоАналитике;
	ГруппировкаАналитики = НастройкиТиповогоОтчета.Группировка;
	РазвернутоеСальдо = НастройкиТиповогоОтчета.РазвернутоеСальдо;
	ПоСубсчетам = ?(Не НастройкиТиповогоОтчета.Свойство("ПоСубсчетам"), Истина, НастройкиТиповогоОтчета.ПоСубсчетам);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет",        Счет);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", ПоСубсчетам);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательНУ",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательСверкаНУ",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательПР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКонтроль",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Структура") Тогда
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных,
					ЭлементОтбора.Значение.ВидСравненияКомпоновкиДанных, ЭлементОтбора.Значение.Значение);
			Иначе
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных,
					ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ГруппировкаАналитики <> Неопределено Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ГруппировкаАналитики);
	КонецЕсли;
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", РазвернутоеСальдо);
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаСервере
Функция НастройкиАнализаСчета(НастройкиТиповогоОтчета)
	
	Организация   = НастройкиТиповогоОтчета.Организация;
	НачалоПериода = НастройкиТиповогоОтчета.НачалоПериода;
	КонецПериода  = НастройкиТиповогоОтчета.КонецПериода;
	
	Счет    = НастройкиТиповогоОтчета.Счет;
	КорСчет = НастройкиТиповогоОтчета.КорСчет;
	
	ОтборПоАналитике = НастройкиТиповогоОтчета.ОтборПоАналитике;
	ПоСубсчетам = НастройкиТиповогоОтчета.ПоСубсчетам;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет",          Счет);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам",   ПоСубсчетам);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательНУ",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательСверкаНУ",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательПР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКонтроль",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("КорСчет");
	Если ТипЗнч(КорСчет) = Тип("Строка") Тогда
		КорСчета = Новый СписокЗначений;
		МассивКодовСчетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КорСчет);
		Для Каждого КодСчета Из МассивКодовСчетов Цикл
			КорСчета.Добавить(Счет(СокрЛП(КодСчета)));
		КонецЦикла;
		ВидСравненияСчетов = ?(МассивКодовСчетов.Количество() > 1, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, ВидСравненияКомпоновкиДанных.ВИерархии);
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияСчетов, КорСчета);
	Иначе
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.ВИерархии, КорСчет);
	КонецЕсли;
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			ВидСравненияОтбора = ?(ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив"),
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидСравненияКомпоновкиДанных.Равно);
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияОтбора, ЭлементОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение) Экспорт
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение    = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения     = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры

&НаСервере
Функция Счет(УсловныйКод)
	
	Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет(УсловныйКод);
	
КонецФункции

#КонецОбласти
