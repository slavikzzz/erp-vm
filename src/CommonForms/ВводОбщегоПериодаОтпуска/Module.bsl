#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаАктуальности = Параметры.ДатаАктуальности;
	Организация = Параметры.Организация;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПериодыОтпусков

&НаКлиенте
Процедура ПериодыОтпусковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПериодыОтпусковОбработкаВыбораНаСервере(ВыбранноеЗначение);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыОткрытия = Неопределено;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		Модуль.УточнитьПараметрыОткрытияФормыВыбораСотрудников(ПараметрыОткрытия);
	КонецЕсли; 
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(
		Элементы.ПериодыОтпусков, 
		Организация,
		,
		ДатаАктуальности,
		,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	Отказ = Ложь;
	АдресВХранилище = АдресРезультатаВХранилище(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("АдресВХранилище", АдресВХранилище);
	
	Оповестить("ИзмененыОбщиеПериодыОтпусков", Результат, ВладелецФормы);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(ПериодыОтпусков.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПериодыОтпусковОбработкаВыбораНаСервере(ВыбранныеСотрудники)
	
	Для Каждого Сотрудник Из ВыбранныеСотрудники Цикл
		НоваяСтрока = ПериодыОтпусков.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресРезультатаВХранилище(Отказ)
	
	ПериодыОтпусковСотрудников = Новый Соответствие;
	Для Каждого СтрокаСотрудника Из ПериодыОтпусков Цикл
		Если Не ЗначениеЗаполнено(СтрокаСотрудника.Сотрудник) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен сотрудник.';
									|en = 'Employee is not filled.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСотрудника.Сотрудник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"ПериодыОтпусков[" + Формат(ПериодыОтпусков.Индекс(СтрокаСотрудника), "ЧН=0; ЧГ=0") + "].Сотрудник", , Отказ);
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаСотрудника.Начало) Тогда
			ТекстСообщения = НСтр("ru = 'Сотрудник %1: не заполнена дата начала.';
									|en = 'Employee %1: start date is empty.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСотрудника.Сотрудник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"ПериодыОтпусков[" + Формат(ПериодыОтпусков.Индекс(СтрокаСотрудника), "ЧН=0; ЧГ=0") + "].Сотрудник", , Отказ);
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаСотрудника.Окончание) Тогда 
			ТекстСообщения = НСтр("ru = 'Сотрудник %1: не заполнена дата окончания.';
									|en = 'Employee %1: end date is empty.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСотрудника.Сотрудник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"ПериодыОтпусков[" + Формат(ПериодыОтпусков.Индекс(СтрокаСотрудника), "ЧН=0; ЧГ=0") + "].Сотрудник", , Отказ);
			Продолжить;
		КонецЕсли;
		Если СтрокаСотрудника.Начало > СтрокаСотрудника.Окончание Тогда 
			ТекстСообщения = НСтр("ru = 'Сотрудник %1: дата начала не может быть больше даты окончания';
									|en = 'Employee %1: start date cannot be greater than end date'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСотрудника.Сотрудник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"ПериодыОтпусков[" + Формат(ПериодыОтпусков.Индекс(СтрокаСотрудника), "ЧН=0; ЧГ=0") + "].Сотрудник", , Отказ);
			Продолжить;
		КонецЕсли;
		ДанныеОтпуска = Новый Структура("Начало, Окончание, ИндексСтроки");
		ЗаполнитьЗначенияСвойств(ДанныеОтпуска, СтрокаСотрудника);
		ДанныеОтпуска.ИндексСтроки = ПериодыОтпусков.Индекс(СтрокаСотрудника);
		ПериодыОтпусковСотрудника = ПериодыОтпусковСотрудников[СтрокаСотрудника.Сотрудник];
		Если ПериодыОтпусковСотрудника = Неопределено Тогда 
			ПериодыОтпусковСотрудника = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеОтпуска);
			ПериодыОтпусковСотрудников.Вставить(СтрокаСотрудника.Сотрудник, ПериодыОтпусковСотрудника);
		Иначе 
			Для Каждого ПериодОтпуска Из ПериодыОтпусковСотрудника Цикл
				Если Не (ДанныеОтпуска.Начало > ПериодОтпуска.Окончание Или ДанныеОтпуска.Окончание < ПериодОтпуска.Начало) Тогда
					ТекстСообщения = НСтр("ru = 'Пересекаются периоды отпусков сотрудника %1 (%2 - %3 и %4 - %5)';
											|en = 'Overlapping employee %1 leave periods (%2 - %3 and %4 - %5)'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСотрудника.Сотрудник, 
						Формат(ДанныеОтпуска.Начало, "ДЛФ=Д"), Формат(ДанныеОтпуска.Окончание, "ДЛФ=Д"), Формат(ПериодОтпуска.Начало, "ДЛФ=Д"), Формат(ПериодОтпуска.Окончание, "ДЛФ=Д"));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"ПериодыОтпусков[" + Формат(ДанныеОтпуска.ИндексСтроки, "ЧН=0; ЧГ=0") + "].Сотрудник", , Отказ);
				КонецЕсли;
			КонецЦикла;
			ПериодыОтпусковСотрудника.Добавить(ДанныеОтпуска);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ПериодыОтпусков.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти
