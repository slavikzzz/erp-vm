
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Сервис", Сервис);
	
	ОткрыватьФормуЕслиНетНовых = Ложь;
	ВыводитьГруппуЕслиНетНовых = Ложь;
	
	Если Параметры.Свойство("ВыводитьГруппуЕслиНетНовых") Тогда
		Параметры.Свойство("ВыводитьГруппуЕслиНетНовых", ВыводитьГруппуЕслиНетНовых);
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрыватьФормуЕслиНетНовых") Тогда
		Параметры.Свойство("ОткрыватьФормуЕслиНетНовых", ОткрыватьФормуЕслиНетНовых);
	КонецЕсли;
	
	Параметры.Свойство("АдресСведенийПоОшибкам", АдресСведенийПоОшибкам);
	Элементы.ОшибкиОбновления.Видимость = ЭтоАдресВременногоХранилища(АдресСведенийПоОшибкам);
	
	АдресДереваНовых = Неопределено;
	Параметры.Свойство("АдресДереваНовых", АдресДереваНовых);
	ЗаполнитьДеревоНовое(АдресДереваНовых);
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обмен с сервисом 1С:ФинОтчетность %1';
			|en = 'Exchange with 1C:Financial Reporting %1'"), Формат(ДатаПоследнегоОбновления, "ДФ='dd.MM.yyyy H:mm'"));
		
	Если КоличествоНовых = 0 И НЕ ОткрыватьФормуЕслиНетНовых Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ГруппыНеОтмечатьЖирнымНовые = Новый СписокЗначений;
	ДанныеГрупп = ДанныеГрупп(Сервис);
	Для каждого Группа Из ДанныеГрупп.Коллекция Цикл
		Если НЕ Группа.ПодсчетКоличестваНовыхСобытий Тогда
			ГруппыНеОтмечатьЖирнымНовые.Добавить(Группа.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	// Установим условное оформление.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНовоеОбъектНаименование.Имя); 
	ПолеОформления.Использование = Истина;
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНовоеОбъектНаименованиеСсылка.Имя); 
	ПолеОформления.Использование = Истина;
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНовоеСтатус.Имя); 
	ПолеОформления.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Новое.НеПрочитано");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Новое.Группа");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ПравоеЗначение = ГруппыНеОтмечатьЖирнымНовые;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПометкаПрочтенныхТранзакцийОбменаСБанками" Тогда
		СтрокиДерева = Новое.ПолучитьЭлементы();
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			Если СтрокаДерева.Ссылка = Источник Тогда
				СтрокаДерева.НеПрочитано = Ложь;
				СписокСсылок = Новый Массив;
				СписокСсылок.Добавить(Источник);
				ОбновитьКоличествоНовых(Сервис, ЭтотОбъект);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "ЗакрытьФормуНовыхТранзакцийОбменаСБанками" И Источник <> ЭтотОбъект Тогда
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтметитьДеревоПросмотренным();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыНовое

&НаКлиенте
Процедура ТаблицаНовоеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Предмет = Элемент.ТекущиеДанные.Предмет;
	Если Поле.Имя = "ТаблицаНовоеОбъектНаименованиеСсылка" Тогда
		РедактироватьОбъект(Элемент);
	ИначеЕсли Поле.Имя = "ТаблицаНовоеСтатус" Тогда
		ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
	ИначеЕсли Поле.Имя = "ТаблицаНовоеЕстьКритическиеОшибки" И Элемент.ТекущиеДанные.ЕстьКритическиеОшибки Тогда
		ПоказатьКритическиеОшибкиПоСсылке(Предмет);
	Иначе
		РедактироватьОбъект(Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СообщениеПроОшибкиОбменаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОшибкиПоследнегоОбмена = ПолучитьИзВременногоХранилища(АдресСведенийПоОшибкам);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", Неопределено);
	ДлительныеОперацииОбменаСБанкамиКлиент.ПоказатьОшибки(ОшибкиПоследнегоОбмена, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОтметитьДеревоПросмотренным()
	
	УниверсальныйОбменСБанками.ОтметитьДеревоПросмотренным(Новое);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьПредметыПрочтенными(Предметы)
	
	ФинОтчетностьВБанки.ПометитьПредметыПрочтенными(Предметы);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОбъект(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Предмет = ТекущиеДанные.Предмет;
		Если ЗначениеЗаполнено(Предмет) Тогда
			ТекущиеДанные.НеПрочитано = Ложь;
			ПометитьПредметыПрочтенными(Предмет);
			Оповестить(
				ФинОтчетностьВБанкиКлиентСервер.ИмяСобытияПометкаПредметаПрочтенным(),,
				Предмет);
			ПоказатьЗначение(,Предмет);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКритическиеОшибкиПоСсылке(Предмет)
	
	УниверсальныйОбменСБанкамиКлиент.ПоказатьОшибку(Предмет,
		ЭтотОбъект,
		УникальныйИдентификатор,
		"Отчет:",
		Истина,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуСтатусовОтправкиИзСписка(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаНовое.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаНовое.ТекущиеДанные;
	
	Документообороты = УниверсальныйОбменСБанкамиВызовСервера.ДокументооборотыПоПредмету(ТекущиеДанные.Предмет);
	Если Документообороты.Количество() > 0 Тогда
		// Отображаем форму последнего документооборота.
		Документооборот = Документообороты[0];
		УниверсальныйОбменСБанкамиКлиент.ПоказатьФормуСостоянияДокументооборота(Документооборот);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеГрупп(Сервис)
	
	Возврат УниверсальныйОбменСБанками.ГруппыСобытийСервиса(Сервис);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоНовых(Сервис, Форма)
	
	ДанныеГрупп = ДанныеГрупп(Сервис);
	Форма.КоличествоНовых = УниверсальныйОбменСБанкамиКлиентСервер.ОпределитьКоличествоНовых(
		Форма.Новое.ПолучитьЭлементы(),
		ДанныеГрупп);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоНовое(АдресДереваНовых = Неопределено)
	
	Если АдресДереваНовых = Неопределено Тогда
	
		Автообмен = Ложь;
		
		ДеревоНовое = РеквизитФормыВЗначение("Новое");
		УниверсальныйОбменСБанками.ЗаполнитьДеревоНовое(Сервис, ДеревоНовое, Автообмен);
		ЗначениеВРеквизитФормы(ДеревоНовое, "Новое");
		
	Иначе
		
		ЗначениеВРеквизитФормы(ПолучитьИзВременногоХранилища(АдресДереваНовых), "Новое");
		
	КонецЕсли;
	
	ДатаПоследнегоОбновления = УниверсальныйОбменСБанками.ДатаПоследнегоОбновленияСобытий(Автообмен);
	
	Если НЕ ЗначениеЗаполнено(ДатаПоследнегоОбновления) Тогда
		ДатаПоследнегоОбновления = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ДатаПоследнегоОбновления = МестноеВремя(ДатаПоследнегоОбновления);
	
	ОбновитьКоличествоНовых(Сервис, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти
