#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьРеквизитыЗаполнения(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("Автотест") Тогда
		Возврат;
	КонецЕсли;
	
	Дата = Параметры.ДатаНачалаАренды;
	Арендатор = Параметры.Арендатор;
	Договор = Параметры.Договор;
	СлужебныеПараметрыФормы = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.СлужебныеПараметрыФормы, Истина);
	СтавкаНДС = Параметры.СлужебныеПараметрыФормы.РеквизитыДоговора.СтавкаНДС;
	Ссылка = Параметры.Ссылка;
	ОтображатьГрафикПроцентовИзРегистра = Параметры.ОтображатьГрафикПроцентовИзРегистра;
	
	ГрафикиДоговора = ПолучитьИзВременногоХранилища(Параметры.ГрафикиДоговора);
	
	ГрафикОплатУслуг.Загрузить(ГрафикиДоговора.ГрафикОплатУслуг);
	ГрафикНачисленияУслуг.Загрузить(ГрафикиДоговора.ГрафикНачисленияУслуг);
	ГрафикНачисленияПроцентов.Загрузить(ГрафикиДоговора.ГрафикНачисленияПроцентов);
	
	ТаблицаОС = ГрафикиДоговора.ТаблицаОС;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВводОстатковИнвестицииВАренду") Тогда
		ИмяКолонкиВводПроцентовВручную = "ГрафикНачисленияПроцентовВведенВручную";
		Если ТаблицаОС.Колонки.Найти(ИмяКолонкиВводПроцентовВручную) = Неопределено Тогда
			ТаблицаОС.Колонки.Добавить(ИмяКолонкиВводПроцентовВручную, Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		Для Каждого СтрокаОС Из ТаблицаОС Цикл
			СтрокаОС.ГрафикНачисленияПроцентовВведенВручную = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьРеквизитыЗаполненияГрафиков(ТаблицаОС);
	
	ЗаполнитьВыбранныеОС(Параметры.ВыбранныеОС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьЗависимыеЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьПодтверждениеЗакрытияФормыЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы,, ТекстПредупреждения);
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыЗаполнения

&НаКлиенте
Процедура РеквизитыЗаполненияСуммаОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыЗаполнения.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.СуммаНачисления =
			?(ТекущиеДанные.СуммаНачисления = 0, ТекущиеДанные.СуммаОплаты, ТекущиеДанные.СуммаНачисления);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыЗаполненияДатаПервойОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыЗаполнения.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.ДатаПервогоНачисления =
			?(ТекущиеДанные.ДатаПервогоНачисления = '00010101',
			ТекущиеДанные.ДатаПервойОплаты,
			ТекущиеДанные.ДатаПервогоНачисления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыЗаполненияПериодичностьОплатПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыЗаполнения.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.ПериодичностьНачислений =
			?(НЕ ЗначениеЗаполнено(ТекущиеДанные.ПериодичностьНачислений),
			ТекущиеДанные.ПериодичностьОплат,
			ТекущиеДанные.ПериодичностьНачислений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыЗаполненияСуммаНачисленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыЗаполнения.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.СуммаОплаты =
			?(ТекущиеДанные.СуммаОплаты = 0, ТекущиеДанные.СуммаНачисления, ТекущиеДанные.СуммаОплаты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыЗаполненияДатаПервогоНачисленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыЗаполнения.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.ДатаПервойОплаты =
			?(ТекущиеДанные.ДатаПервойОплаты = '00010101',
			ТекущиеДанные.ДатаПервогоНачисления,
			ТекущиеДанные.ДатаПервойОплаты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыЗаполненияПериодичностьНачисленийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыЗаполнения.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.ПериодичностьОплат =
			?(НЕ ЗначениеЗаполнено(ТекущиеДанные.ПериодичностьОплат),
			ТекущиеДанные.ПериодичностьНачислений,
			ТекущиеДанные.ПериодичностьОплат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыЗаполненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "РеквизитыЗаполненияГрафикСсылка" Тогда
		
		СтандартнаяОбработка = Ложь;
		Отказ = Ложь;
		
		ДанныеСтроки = РеквизитыЗаполнения.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если НЕ ДанныеСтроки.ГрафикЗаполнен Тогда
			ПроверитьРеквизитыЗаполнения(Отказ, ВыбраннаяСтрока);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			ОткрытьЗаполнитьГрафик(ВыбраннаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Поле.Имя = "РеквизитыЗаполненияДатаПервойОплаты" ИЛИ Поле.Имя = "РеквизитыЗаполненияСуммаОплаты")
		И Элемент.ТекущиеДанные.ПериодичностьОплат = 
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ПериодичностьГрафика.Произвольная") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения = НСтр("ru = 'Для изменения поля необходимо выбрать не произвольную периодичность оплат';
								|en = 'To change the field, select a non-arbitrary payment frequency'");
		
		ПолеПериодичности = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				Элемент.Имя, Элемент.ТекущиеДанные.НомерСтроки, "ПериодичностьОплат");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, ПолеПериодичности,, Отказ);
		
	КонецЕсли;
	
	Если (Поле.Имя = "РеквизитыЗаполненияДатаПервогоНачисления" ИЛИ Поле.Имя = "РеквизитыЗаполненияСуммаНачисления")
		И Элемент.ТекущиеДанные.ПериодичностьНачислений = 
			ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ПериодичностьГрафика.Произвольная") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения = НСтр("ru = 'Для изменения поля необходимо выбрать не произвольную периодичность начислений';
								|en = 'To change the field, select a non-arbitrary charge frequency'");
		
		ПолеПериодичности = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				Элемент.Имя, Элемент.ТекущиеДанные.НомерСтроки, "ПериодичностьНачислений");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, ПолеПериодичности,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыЗаполненияПриАктивизацииЯчейки(Элемент)
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьРедактирование()
	
	Если РеквизитыЗаполнения.НайтиСтроки(Новый Структура("Выбран, ГрафикЗаполнен", Истина, Истина)).Количество() Тогда
		ТекстВопроса = НСтр("ru = 'Графики по выбранным основным средствам уже заполнены. Продолжить?';
							|en = 'The schedules for the selected fixed assets are already filled. Continue?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьРедактированиеПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ЗавершитьРедактированиеПродолжение(КодВозвратаДиалога.Да, Неопределено)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначение(Команда)
	
	ИмяТаблицы = "РеквизитыЗаполнения";
	ИмяКолонки = Элементы[ИмяТаблицы].ТекущийЭлемент.Имя;
	ИмяРеквизита = ИмяРеквизита(ИмяТаблицы, ИмяКолонки);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицы", ИмяТаблицы);
	ДополнительныеПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьЗначениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекущаяСтрока = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ЗначениеЗаполнения = ТекущаяСтрока[ИмяРеквизита];
		
		Если ТипЗнч(ЗначениеЗаполнения) = Тип("Число") Тогда
			ОписаниеТипов = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
		ИначеЕсли ТипЗнч(ЗначениеЗаполнения) = Тип("Дата") Тогда
			ОписаниеТипов = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		Иначе
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(ЗначениеЗаполнения));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;

		ТекстПодсказки = НСтр("ru = 'Введите значение';
								|en = 'Enter a value'");
		
		ПоказатьВводЗначения(ОписаниеОповещения, ЗначениеЗаполнения, ТекстПодсказки, ОписаниеТипов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГрафикиПоПредыдущимУсловиям(Команда)
	
	ОбновитьГрафикиПоПредыдущимУсловиямНаСервере();
	ПоказатьОповещениеПользователя(НСтр("ru = 'Графики обновлены';
										|en = 'Schedules are updated'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область ДатаНачалаАренды
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияДатаНачалаАренды.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ДатаНачалаАренды");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбораПериодичность = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораПериодичность.Использование = Истина;
	ГруппаОтбораПериодичность.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораПериодичность.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьОплат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	ОтборЭлемента = ГруппаОтбораПериодичность.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьНачислений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	#КонецОбласти
	
	#Область ДатаОкончанияАренды
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияДатаОкончанияАренды.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ДатаОкончанияАренды");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбораПериодичность = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораПериодичность.Использование = Истина;
	ГруппаОтбораПериодичность.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораПериодичность.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьОплат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	ОтборЭлемента = ГруппаОтбораПериодичность.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьНачислений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	#КонецОбласти
	
	#Область СуммаОплаты
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияСуммаОплаты.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.СуммаОплаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьОплат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияСуммаОплаты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьОплат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область ДатаПервойОплаты
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияДатаПервойОплаты.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ДатаПервойОплаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьОплат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияДатаПервойОплаты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьОплат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область ПериодичностьОплат
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияПериодичностьОплат.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьОплат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	#КонецОбласти
	
	#Область СуммаНачисления
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияСуммаНачисления.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.СуммаНачисления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьНачислений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияСуммаНачисления.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьНачислений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область ДатаПервогоНачисления
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияДатаПервогоНачисления.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ДатаПервогоНачисления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьНачислений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияДатаПервогоНачисления.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьНачислений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область ПериодичностьНачислений
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияПериодичностьНачислений.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьНачислений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	#КонецОбласти
	
	#Область График
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияГрафикСсылка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ГрафикЗаполнен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Заполнить...';
																|en = 'Fill...'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаполненияГрафикСсылка.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ГрафикЗаполнен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ГруппаОтбораПериодичность = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораПериодичность.Использование = Истина;
	ГруппаОтбораПериодичность.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораПериодичность.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьОплат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	ОтборЭлемента = ГруппаОтбораПериодичность.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаполнения.ПериодичностьНачислений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПериодичностьГрафика.Произвольная;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Открыть...';
																|en = 'Open…'"));
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодтверждениеЗакрытияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗавершитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();

	Если НЕ ПроверитьЗаполнение() Тогда
		ТекстВопроса = НСтр("ru = 'Не заполнены обязательные поля. Можно завершить редактирование или продолжить редактирование.';
							|en = 'Some of the required fields are not filled. You can choose to finish editing or continue.'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Завершить редактирование';
															|en = 'Finish editing'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Продолжить редактирование';
															|en = 'Continue editing'"));
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьРедактированиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Да);
	Иначе
		
		Модифицированность = Ложь;
		Закрыть(ЗаполнитьГрафикиЗавершение());
			
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;

	Закрыть(Неопределено);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьГрафикиЗавершение()
	
	ВыбранныеСтроки = РеквизитыЗаполнения.НайтиСтроки(Новый Структура("Выбран", Истина));
	Для Каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
		
		УчетАрендованныхОС.ЗаполнитьГрафикОплатИНачисленийДоходнойАренды(
			ВыбраннаяСтрока,
			ГрафикОплатУслуг,
			ГрафикНачисленияУслуг,
			СтавкаНДС);
		
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ИзменениеУсловийПередачиВАренду") Тогда
			УчетАрендованныхОС.ДополнитьГрафикОплатИНачисленийДоходнойАрендыПоПредыдущимУсловиям(
				ВыбраннаяСтрока,
				ГрафикОплатУслуг,
				ГрафикНачисленияУслуг,
				Договор);
		КонецЕсли;
			
		ВыбраннаяСтрока.Выбран = Ложь;
		
	КонецЦикла;
	
	Возврат ПоместитьГрафикиВХранилище();
	
КонецФункции

&НаСервере
Функция ПоместитьГрафикиВХранилище()
	
	СписокКолонок = "ОсновноеСредство, ГрафикНачисленияПроцентовВведенВручную, ДатаОкончанияАренды";
	
	ГрафикНачисленияУслуг.Сортировать("ОсновноеСредство,Дата");
	ГрафикОплатУслуг.Сортировать("ОсновноеСредство,Дата");
	ГрафикНачисленияПроцентов.Сортировать("ОсновноеСредство,Дата");

	ГрафикиДоговора = Новый Структура;
	ГрафикиДоговора.Вставить("ГрафикНачисленияУслуг", ГрафикНачисленияУслуг.Выгрузить());
	ГрафикиДоговора.Вставить("ГрафикОплатУслуг", ГрафикОплатУслуг.Выгрузить());
	ГрафикиДоговора.Вставить("ГрафикНачисленияПроцентов", ГрафикНачисленияПроцентов.Выгрузить());
	ГрафикиДоговора.Вставить("ТаблицаОС", РеквизитыЗаполнения.Выгрузить(, СписокКолонок));
	
	Возврат ПоместитьВоВременноеХранилище(ГрафикиДоговора, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПроверитьРеквизитыЗаполнения(Отказ, ПроверяемаяСтрока = Неопределено)
	
	ИмяТабличнойЧасти = "РеквизитыЗаполнения";
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("ДатаНачалаАренды");
	ПроверяемыеРеквизиты.Добавить("ДатаОкончанияАренды");
	
	ПроверяемыеРеквизитыОплаты = Новый Массив;
	ПроверяемыеРеквизитыОплаты.Добавить("СуммаОплаты");
	ПроверяемыеРеквизитыОплаты.Добавить("ДатаПервойОплаты");
	ПроверяемыеРеквизитыОплаты.Добавить("ПериодичностьОплат");
	
	ПроверяемыеРеквизитыНачисления = Новый Массив;
	ПроверяемыеРеквизитыНачисления.Добавить("СуммаНачисления");
	ПроверяемыеРеквизитыНачисления.Добавить("ДатаПервогоНачисления");
	ПроверяемыеРеквизитыНачисления.Добавить("ПериодичностьНачислений");
	
	ПроизвольнаяПериодичность = Перечисления.ПериодичностьГрафика.Произвольная;
	
	Если НЕ ЗначениеЗаполнено(ПроверяемаяСтрока) Тогда
		ВыбранныеСтроки = РеквизитыЗаполнения.НайтиСтроки(Новый Структура("Выбран", Истина));
	Иначе
		ВыбраннаяСтрока = РеквизитыЗаполнения.НайтиПоИдентификатору(ПроверяемаяСтрока);
		ВыбранныеСтроки = Новый Массив;
		ВыбранныеСтроки.Добавить(ВыбраннаяСтрока);
	КонецЕсли;
	
	Для Каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
		
		Если ВыбраннаяСтрока.ПериодичностьОплат = ПроизвольнаяПериодичность
			И ВыбраннаяСтрока.ПериодичностьНачислений = ПроизвольнаяПериодичность Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
			ПроверитьРеквизитЗаполнения(ИмяТабличнойЧасти, ВыбраннаяСтрока, ПроверяемыйРеквизит, Отказ);
		КонецЦикла;
			
		Если ВыбраннаяСтрока.ПериодичностьОплат <> ПроизвольнаяПериодичность Тогда
			Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизитыОплаты Цикл
				ПроверитьРеквизитЗаполнения(ИмяТабличнойЧасти, ВыбраннаяСтрока, ПроверяемыйРеквизит, Отказ);
			КонецЦикла;
		КонецЕсли;
		
		Если ВыбраннаяСтрока.ПериодичностьНачислений <> ПроизвольнаяПериодичность Тогда
			Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизитыНачисления Цикл
				ПроверитьРеквизитЗаполнения(ИмяТабличнойЧасти, ВыбраннаяСтрока, ПроверяемыйРеквизит, Отказ);
			КонецЦикла;
		КонецЕсли;
		
		ПроверяемыйРеквизит = "ДатаОкончанияАренды";
		
		Если ЗначениеЗаполнено(ВыбраннаяСтрока[ПроверяемыйРеквизит])
			И ВыбраннаяСтрока[ПроверяемыйРеквизит] < ВыбраннаяСтрока.ДатаНачалаАренды Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				ИмяТабличнойЧасти, ВыбраннаяСтрока.НомерСтроки, ПроверяемыйРеквизит);
			ТекстШаблона = НСтр("ru = 'Дата окончания аренды не может быть меньше даты начала аренды в строке %1 списка';
								|en = 'The rental end date cannot be earlier than the rental start date in line %1 of the list'");
			ТекстСообщения = СтрШаблон(ТекстШаблона, ВыбраннаяСтрока.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			
		КонецЕсли;
		
		ПроверяемыйРеквизит = "ДатаПервойОплаты";
		
		Если ЗначениеЗаполнено(ВыбраннаяСтрока[ПроверяемыйРеквизит])
			И ВыбраннаяСтрока[ПроверяемыйРеквизит] < ВыбраннаяСтрока.ДатаНачалаАренды Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				ИмяТабличнойЧасти, ВыбраннаяСтрока.НомерСтроки, ПроверяемыйРеквизит);
			ТекстШаблона = НСтр("ru = 'Дата первой оплаты не может быть меньше даты начала аренды в строке %1 списка';
								|en = 'The first payment date cannot be earlier than the rental start date in line %1 of the list'");
			ТекстСообщения = СтрШаблон(ТекстШаблона, ВыбраннаяСтрока.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбраннаяСтрока[ПроверяемыйРеквизит])
			И ВыбраннаяСтрока[ПроверяемыйРеквизит] > ВыбраннаяСтрока.ДатаОкончанияАренды Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				ИмяТабличнойЧасти, ВыбраннаяСтрока.НомерСтроки, ПроверяемыйРеквизит);
			ТекстШаблона = НСтр("ru = 'Дата первой оплаты не может быть больше даты окончания аренды в строке %1 списка';
								|en = 'The first payment date cannot be later than the rental end date in line %1 of the list'");
			ТекстСообщения = СтрШаблон(ТекстШаблона, ВыбраннаяСтрока.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			
		КонецЕсли;
		
		ПроверяемыйРеквизит = "ДатаПервогоНачисления";
		
		Если ЗначениеЗаполнено(ВыбраннаяСтрока[ПроверяемыйРеквизит])
			И ВыбраннаяСтрока[ПроверяемыйРеквизит] < ВыбраннаяСтрока.ДатаНачалаАренды Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				ИмяТабличнойЧасти, ВыбраннаяСтрока.НомерСтроки, ПроверяемыйРеквизит);
			ТекстШаблона = НСтр("ru = 'Дата первого начисления не может быть меньше даты начала аренды в строке %1 списка';
								|en = 'The first charge date cannot be earlier than the rental start date in line %1 of the list'");
			ТекстСообщения = СтрШаблон(ТекстШаблона, ВыбраннаяСтрока.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбраннаяСтрока[ПроверяемыйРеквизит])
			И ВыбраннаяСтрока[ПроверяемыйРеквизит] > ВыбраннаяСтрока.ДатаОкончанияАренды Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				ИмяТабличнойЧасти, ВыбраннаяСтрока.НомерСтроки, ПроверяемыйРеквизит);
			ТекстШаблона = НСтр("ru = 'Дата первого начисления не может быть больше даты окончания аренды в строке %1 списка';
								|en = 'The first charge date cannot be later than the rental end date in line %1 of the list'");
			ТекстСообщения = СтрШаблон(ТекстШаблона, ВыбраннаяСтрока.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитЗаполнения(ИмяТабличнойЧасти, ВыбраннаяСтрока, ПроверяемыйРеквизит, Отказ)
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяСтрока[ПроверяемыйРеквизит]) Тогда
		
		ШаблонСообщения = НСтр("ru = 'Не заполнен реквизит ""%1"" в строке %2 списка';
								|en = 'The ""%1"" attribute in line %2 of the list is not filled'");
		
		ЗаголовокРеквизита = "";
		РеквизитыФормы = ПолучитьРеквизиты(ИмяТабличнойЧасти);
		Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
			Если РеквизитФормы.Имя = ПроверяемыйРеквизит Тогда
				ЗаголовокРеквизита = РеквизитФормы.Заголовок;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗаголовокРеквизита, ВыбраннаяСтрока.НомерСтроки);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			ИмяТабличнойЧасти, ВыбраннаяСтрока.НомерСтроки, ПроверяемыйРеквизит);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаполнитьГрафик(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтроки = РеквизитыЗаполнения.НайтиПоИдентификатору(ВыбранноеЗначение);
	
	ОсновноеСредство = ДанныеСтроки.ОсновноеСредство;
	
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	ПроизвольнаяПериодичность =
		ДанныеСтроки.ПериодичностьОплат = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
			"Перечисление.ПериодичностьГрафика.Произвольная")
		И ДанныеСтроки.ПериодичностьНачислений = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
			"Перечисление.ПериодичностьГрафика.Произвольная");
	
	АдресГрафиков = ПоместитьГрафикиВХранилище();
	
	Если ДанныеСтроки.ГрафикЗаполнен ИЛИ ПроизвольнаяПериодичность Тогда
		
		УчетАрендованныхОСКлиент.ОткрытьГрафикиДоходнойАренды(
			ЭтотОбъект,
			ЭтотОбъект,
			ОсновноеСредство,
			АдресГрафиков,
			Новый ОписаниеОповещения("ОткрытьГрафикОплатИНачисленийЗавершение", ЭтотОбъект));
			
	Иначе
			
		ЗаполнитьГрафикНаСервере(ВыбранноеЗначение);
		
		Если УчетАрендованныхОСКлиентСервер.ГрафикЗаполнен(
			ОсновноеСредство,
			ГрафикОплатУслуг,
			ГрафикНачисленияУслуг) Тогда
			
			ДанныеСтроки.ГрафикЗаполнен = Истина;
			ПоказатьОповещениеПользователя(НСтр("ru = 'График заполнен';
												|en = 'Schedule is filled'"));
			
		Иначе
			
			ДанныеСтроки.ГрафикЗаполнен = Ложь;
			ПоказатьОповещениеПользователя(НСтр("ru = 'Не удалось заполнить график';
												|en = 'Cannot fill the schedule'"));
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикНаСервере(ВыбранноеЗначение)
	
	ДанныеСтроки = РеквизитыЗаполнения.НайтиПоИдентификатору(ВыбранноеЗначение);
	
	УчетАрендованныхОС.ЗаполнитьГрафикОплатИНачисленийДоходнойАренды(
			ДанныеСтроки,
			ГрафикОплатУслуг,
			ГрафикНачисленияУслуг,
			СтавкаНДС);
			
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ИзменениеУсловийПередачиВАренду") Тогда
		УчетАрендованныхОС.ДополнитьГрафикОплатИНачисленийДоходнойАрендыПоПредыдущимУсловиям(
		ДанныеСтроки,
		ГрафикОплатУслуг,
		ГрафикНачисленияУслуг,
		Договор);
	КонецЕсли;
			
	ДанныеСтроки.Выбран = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикОплатИНачисленийЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт

	Если НЕ ЭтоАдресВременногоХранилища(РезультатЗакрытия) Тогда
		Возврат
	КонецЕсли;

	ОткрытьГрафикОплатИНачисленийЗавершениеНаСервере(РезультатЗакрытия);

КонецПроцедуры

&НаСервере
Процедура ОткрытьГрафикОплатИНачисленийЗавершениеНаСервере(Знач РезультатЗакрытия)
	
	Модифицированность = Истина;
	
	СписокКолонок = "НомерСтроки, ОсновноеСредство, ГрафикНачисленияПроцентовВведенВручную, ДатаОкончанияАренды";

	ГрафикиДоговора = ПолучитьИзВременногоХранилища(РезультатЗакрытия);

	ГрафикОплатУслуг.Загрузить(ГрафикиДоговора.ГрафикОплатУслуг);
	ГрафикНачисленияУслуг.Загрузить(ГрафикиДоговора.ГрафикНачисленияУслуг);
	ГрафикНачисленияПроцентов.Загрузить(ГрафикиДоговора.ГрафикНачисленияПроцентов);
	
	ТаблицаОС = РеквизитыЗаполнения.Выгрузить(, СписокКолонок);
	ЗаполнитьРеквизитыЗаполненияГрафиков(ТаблицаОС);
	
КонецПроцедуры

&НаСервере
Функция ИмяРеквизита(ИмяТаблицы, ИмяКолонки)
	
	Возврат СтрЗаменить(Элементы[ИмяКолонки].ПутьКДанным, ИмяТаблицы + ".", "");
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗначениеЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение <> Неопределено Тогда
		
		ИмяТаблицы = ДополнительныеПараметры.ИмяТаблицы;
		ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
		
		Для Каждого ВыделеннаяСтрока Из Элементы[ИмяТаблицы].ВыделенныеСтроки Цикл
			ДанныеСтроки = ЭтотОбъект[ИмяТаблицы].НайтиПоИдентификатору(ВыделеннаяСтрока);
			ДанныеСтроки[ИмяРеквизита] = Значение;
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыЗаполненияГрафиков(ТаблицаОС)
	
	Если НЕ ТаблицаОС.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЗаполнения.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОС.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
		|	ТаблицаОС.ГрафикНачисленияПроцентовВведенВручную КАК ГрафикНачисленияПроцентовВведенВручную
		|ПОМЕСТИТЬ втТаблицаОС
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикОплат.ОсновноеСредство КАК ОсновноеСредство,
		|	ГрафикОплат.Дата КАК Дата,
		|	ГрафикОплат.УслугаПоАренде КАК УслугаПоАренде,
		|	ГрафикОплат.УслугаПоАрендеНДС КАК УслугаПоАрендеНДС
		|ПОМЕСТИТЬ втГрафикОплат
		|ИЗ
		|	&ГрафикОплатУслуг КАК ГрафикОплат
		|ГДЕ
		|	ГрафикОплат.Дата >= &ДатаНачала
		|	И ГрафикОплат.Дата <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикНачислений.ОсновноеСредство КАК ОсновноеСредство,
		|	ГрафикНачислений.Дата КАК Дата,
		|	ГрафикНачислений.УслугаПоАренде КАК УслугаПоАренде,
		|	ГрафикНачислений.УслугаПоАрендеНДС КАК УслугаПоАрендеНДС
		|ПОМЕСТИТЬ втГрафикНачислений
		|ИЗ
		|	&ГрафикНачисленияУслуг КАК ГрафикНачислений
		|ГДЕ
		|	ГрафикНачислений.Дата >= &ДатаНачала
		|	И ГрафикНачислений.Дата <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикПроцентов.ОсновноеСредство КАК ОсновноеСредство,
		|	ГрафикПроцентов.Дата КАК Дата
		|ПОМЕСТИТЬ втГрафикПроцентов
		|ИЗ
		|	&ГрафикНачисленияПроцентов КАК ГрафикПроцентов
		|ГДЕ
		|	ГрафикПроцентов.Дата >= &ДатаНачала
		|	И ГрафикПроцентов.Дата <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(втГрафикОплат.Дата) КАК ДатаОкончанияАренды,
		|	втГрафикОплат.ОсновноеСредство КАК ОсновноеСредство,
		|	МИНИМУМ(втГрафикОплат.Дата) КАК ДатаПервойОплаты
		|ПОМЕСТИТЬ втДатыОплат
		|ИЗ
		|	втГрафикОплат КАК втГрафикОплат
		|
		|СГРУППИРОВАТЬ ПО
		|	втГрафикОплат.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(втГрафикНачислений.Дата) КАК ДатаОкончанияАренды,
		|	втГрафикНачислений.ОсновноеСредство КАК ОсновноеСредство,
		|	МИНИМУМ(втГрафикНачислений.Дата) КАК ДатаПервогоНачисления
		|ПОМЕСТИТЬ втДатыНачислений
		|ИЗ
		|	втГрафикНачислений КАК втГрафикНачислений
		|
		|СГРУППИРОВАТЬ ПО
		|	втГрафикНачислений.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(втГрафикПроцентов.Дата) КАК ДатаОкончанияАренды,
		|	втГрафикПроцентов.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втДатыПроцентов
		|ИЗ
		|	втГрафикПроцентов КАК втГрафикПроцентов
		|
		|СГРУППИРОВАТЬ ПО
		|	втГрафикПроцентов.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(втГрафикОплат.УслугаПоАренде) КАК УслугаПоАренде,
		|	втГрафикОплат.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втСуммыОплат
		|ИЗ
		|	втГрафикОплат КАК втГрафикОплат
		|
		|СГРУППИРОВАТЬ ПО
		|	втГрафикОплат.ОсновноеСредство
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втГрафикОплат.УслугаПоАренде) = 1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(втГрафикНачислений.УслугаПоАренде) КАК УслугаПоАренде,
		|	втГрафикНачислений.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втСуммыНачислений
		|ИЗ
		|	втГрафикНачислений КАК втГрафикНачислений
		|
		|СГРУППИРОВАТЬ ПО
		|	втГрафикНачислений.ОсновноеСредство
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втГрафикНачислений.УслугаПоАренде) = 1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыОкончания.ОсновноеСредство КАК ОсновноеСредство,
		|	МАКСИМУМ(ДатыОкончания.ДатаОкончанияАренды) КАК Дата
		|ПОМЕСТИТЬ втДатыОкончания
		|ИЗ
		|	(ВЫБРАТЬ
		|		втДатыОплат.ОсновноеСредство КАК ОсновноеСредство,
		|		втДатыОплат.ДатаОкончанияАренды КАК ДатаОкончанияАренды
		|	ИЗ
		|		втДатыОплат КАК втДатыОплат
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		втДатыНачислений.ОсновноеСредство,
		|		втДатыНачислений.ДатаОкончанияАренды
		|	ИЗ
		|		втДатыНачислений КАК втДатыНачислений
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		втДатыПроцентов.ОсновноеСредство,
		|		втДатыПроцентов.ДатаОкончанияАренды
		|	ИЗ
		|		втДатыПроцентов КАК втДатыПроцентов) КАК ДатыОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыОкончания.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	втТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	втТаблицаОС.ГрафикНачисленияПроцентовВведенВручную,
		|	&ДатаНачала КАК ДатаНачалаАренды,
		|	ВЫБОР КОГДА втТаблицаОС.ДатаОкончанияАренды > ЕСТЬNULL(втДатыОкончания.Дата, ДАТАВРЕМЯ(1, 1, 1)) ТОГДА
		|		втТаблицаОС.ДатаОкончанияАренды
		|	ИНАЧЕ
		|		ЕСТЬNULL(втДатыОкончания.Дата, ДАТАВРЕМЯ(1, 1, 1))
		|	КОНЕЦ КАК ДатаОкончанияАренды,
		|	ЕСТЬNULL(втДатыОплат.ДатаПервойОплаты, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервойОплаты,
		|	ЕСТЬNULL(втСуммыОплат.УслугаПоАренде, 0) КАК СуммаОплаты,
		|	ЕСТЬNULL(втДатыНачислений.ДатаПервогоНачисления, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервогоНачисления,
		|	ЕСТЬNULL(втСуммыНачислений.УслугаПоАренде, 0) КАК СуммаНачисления,
		|	ВЫБОР
		|		КОГДА НЕ втДатыОкончания.Дата ЕСТЬ NULL
		|				И втСуммыОплат.УслугаПоАренде ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПериодичностьГрафика.Произвольная)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПериодичностьГрафика.ПустаяСсылка)
		|	КОНЕЦ КАК ПериодичностьОплат,
		|	ВЫБОР
		|		КОГДА НЕ втДатыОкончания.Дата ЕСТЬ NULL
		|				И втСуммыНачислений.УслугаПоАренде ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПериодичностьГрафика.Произвольная)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПериодичностьГрафика.ПустаяСсылка)
		|	КОНЕЦ КАК ПериодичностьНачислений,
		|	ВЫБОР
		|		КОГДА втДатыОплат.ДатаПервойОплаты ЕСТЬ NULL
		|				И втДатыНачислений.ДатаПервогоНачисления ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ГрафикЗаполнен
		|ИЗ
		|	втТаблицаОС КАК втТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыОплат КАК втДатыОплат
		|		ПО втТаблицаОС.ОсновноеСредство = втДатыОплат.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыНачислений КАК втДатыНачислений
		|		ПО втТаблицаОС.ОсновноеСредство = втДатыНачислений.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыОплат КАК втСуммыОплат
		|		ПО втТаблицаОС.ОсновноеСредство = втСуммыОплат.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыНачислений КАК втСуммыНачислений
		|		ПО втТаблицаОС.ОсновноеСредство = втСуммыНачислений.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыОкончания КАК втДатыОкончания
		|		ПО втТаблицаОС.ОсновноеСредство = втДатыОкончания.ОсновноеСредство
		|
		|УПОРЯДОЧИТЬ ПО
		|	втТаблицаОС.НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	Запрос.УстановитьПараметр("ГрафикОплатУслуг", ГрафикОплатУслуг.Выгрузить());
	Запрос.УстановитьПараметр("ГрафикНачисленияУслуг", ГрафикНачисленияУслуг.Выгрузить());
	Запрос.УстановитьПараметр("ГрафикНачисленияПроцентов", ГрафикНачисленияПроцентов.Выгрузить());
	Запрос.УстановитьПараметр("ДатаНачала", Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокиОС = РеквизитыЗаполнения.НайтиСтроки(Новый Структура("ОсновноеСредство", Выборка.ОсновноеСредство));
		Если СтрокиОС.Количество() Тогда
			СтрокаОС = СтрокиОС[0];
		Иначе
			СтрокаОС = РеквизитыЗаполнения.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаОС, Выборка);
		
		Если СтрокаОС.ПериодичностьОплат = Перечисления.ПериодичностьГрафика.ПустаяСсылка() Тогда
			Если СтрокаОС.ГрафикЗаполнен Тогда
				СтрокаОС.ПериодичностьОплат =
					УчетАрендованныхОС.ПериодичностьГрафикаДоходнойАренды(
						СтрокаОС.ОсновноеСредство, ГрафикОплатУслуг);
			Иначе
				СтрокаОС.ПериодичностьОплат = Перечисления.ПериодичностьГрафика.Месяц;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОС.ПериодичностьНачислений = Перечисления.ПериодичностьГрафика.ПустаяСсылка() Тогда
			Если СтрокаОС.ГрафикЗаполнен Тогда
				СтрокаОС.ПериодичностьНачислений =
					УчетАрендованныхОС.ПериодичностьГрафикаДоходнойАренды(
						СтрокаОС.ОсновноеСредство, ГрафикНачисленияУслуг);
			Иначе
				СтрокаОС.ПериодичностьНачислений = Перечисления.ПериодичностьГрафика.Месяц;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(Знач Форма, Знач ИзмененныеРеквизиты = "")
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Элементы = Форма.Элементы;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("РеквизитыЗаполнения") ИЛИ ОбновитьВсе Тогда
		
		Если Элементы.РеквизитыЗаполнения.ТекущийЭлемент <> Неопределено Тогда
			
			СписокДоступныхКолонок = Новый Массив;
			СписокДоступныхКолонок.Добавить("РеквизитыЗаполненияДатаОкончанияАренды");
			СписокДоступныхКолонок.Добавить("РеквизитыЗаполненияСуммаОплаты");
			СписокДоступныхКолонок.Добавить("РеквизитыЗаполненияДатаПервойОплаты");
			СписокДоступныхКолонок.Добавить("РеквизитыЗаполненияПериодичностьОплат");
			СписокДоступныхКолонок.Добавить("РеквизитыЗаполненияСуммаНачисления");
			СписокДоступныхКолонок.Добавить("РеквизитыЗаполненияДатаПервогоНачисления");
			СписокДоступныхКолонок.Добавить("РеквизитыЗаполненияПериодичностьНачислений");
			
			Значение = СписокДоступныхКолонок.Найти(Элементы.РеквизитыЗаполнения.ТекущийЭлемент.Имя) <> Неопределено;
			
			Элементы.КнопкаУстановитьЗначение.Доступность = Значение;
				
		КонецЕсли;
		
		Значение = ТипЗнч(Форма.Ссылка) = Тип("ДокументСсылка.ИзменениеУсловийПередачиВАренду");
		Элементы.КнопкаОбновитьГрафикиПоПредыдущимУсловиям.Видимость = Значение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(Знач ИзмененныеРеквизиты = "")
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Если ОбновитьВсе Тогда
		
		Если ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
			Элементы.РеквизитыЗаполненияГрафикСсылка.Видимость =
			НЕ (ВладелецФормы.ИмяФормы = "ОбщаяФорма.ГрафикиДоходнойАренды");
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыбранныеОС(ВыбранныеОС)
	
	Для Каждого ВыбранныйОС Из Параметры.ВыбранныеОС Цикл
		СтрокиОС = РеквизитыЗаполнения.НайтиСтроки(Новый Структура("ОсновноеСредство", ВыбранныйОС));
		Для Каждого СтрокаОС Из СтрокиОС Цикл
			СтрокаОС.Выбран = Истина;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГрафикиПоПредыдущимУсловиямНаСервере()
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ИзменениеУсловийПередачиВАренду") Тогда
		
		Документы.ИзменениеУсловийПередачиВАренду.УдалитьНеактуальныеСтрокиГрафиков(
			РеквизитыЗаполнения, 
			ГрафикОплатУслуг, 
			ГрафикНачисленияУслуг, 
			ГрафикНачисленияПроцентов, 
			Дата);
			
		Документы.ИзменениеУсловийПередачиВАренду.ДополнитьГрафикиПоПредыдущимУсловиям(
			РеквизитыЗаполнения,
			ГрафикОплатУслуг,
			ГрафикНачисленияУслуг,
			ГрафикНачисленияПроцентов,
			Договор,
			Дата);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
