#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаФормирования = ТекущаяДатаСеанса();
	Ответственный = Пользователи.ТекущийПользователь();
	Параметры.Свойство("Основание", Основание);
	Параметры.Свойство("АдресХранилища", АдресХранилища);
	ПолучитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_СведенияОЗастрахованномЛицеФСС" Тогда
		ОбновитьНаСервере();
	ИначеЕсли ПолучатьСообщения И (ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеОтправкиПодтвержденияПолучения()) Тогда
		ОбновитьНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	Для Каждого СтрокаТЧ Из Сведения Цикл
		Если СтрокаТЧ.Флаг И ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);
			ПоказатьВопрос(Оповещение,
				НСтр("ru = 'Выбраны сотрудники у которых уже есть созданные документы, сформировать для них новые сведения?';
					|en = 'Выбраны сотрудники у которых уже есть созданные документы, сформировать для них новые сведения?'"),
				РежимДиалогаВопрос.ДаНетОтмена,,,
				НСтр("ru = 'Формировать новые документы';
					|en = 'Формировать новые документы'"));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СформироватьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСведение(Команда)
	
	ТекущиеДанные = Элементы.Сведения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗначенияЗаполнения = Новый Структура("ФизическоеЛицо,Организация,Ответственный",
		ТекущиеДанные.ФизическоеЛицо, ТекущиеДанные.Организация, Ответственный);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);

	Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоСотруднику", ЭтотОбъект, ПараметрыФормы);
		ПоказатьВопрос(Оповещение,
			НСтр("ru = 'У сотрудника уже создан документ, сформировать новое сведение?';
				|en = 'У сотрудника уже создан документ, сформировать новое сведение?'"),
			РежимДиалогаВопрос.ДаНет,,,
			НСтр("ru = 'Формировать новый документ';
				|en = 'Формировать новый документ'"));
	Иначе
		ОткрытьФорму("Документ.СведенияОЗастрахованномЛицеФСС.Форма.ФормаДокумента", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВФонд(Команда)
	
	МассивСсылок = Новый Массив;
	Для Каждого СтрокаТЧ Из Сведения Цикл
		Если Не СтрокаТЧ.Отправлен И ЗначениеЗаполнено(СтрокаТЧ.Документ) 
			И (СтрокаТЧ.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСЭДОФСС.ПодготовленКОтправке")
			Или СтрокаТЧ.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСЭДОФСС.ОшибкаПриОтправке")) Тогда
			МассивСсылок.Добавить(СтрокаТЧ.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() > 0 Тогда
		СЭДОФССКлиент.ОтправитьДокументы(МассивСсылок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	УстановитьФлажкиВТаблице(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	 УстановитьФлажкиВТаблице(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подробно(Команда)
	ОбновитьСкрытуюГруппу(Элементы, Не Элементы.СведенияПодробно.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСообщенияСЭДО(Команда)
	Если ПолучатьСообщения Тогда
		СЭДОФССКлиент.ПолучитьСообщенияИзФСС(Организация);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В списке нет документов требующих получения сообщения от СФР';
														|en = 'В списке нет документов требующих получения сообщения от СФР'"));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, Организация);
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, Основание);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СведенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(Поле.Имя, "Сведения", "");
	СсылкаЯчейки = ТекущиеДанные[ИмяРеквизита];
	Если ИмяРеквизита = "Документ" И СсылкаЯчейки.Пустая() Тогда
		ЗначенияЗаполнения = Новый Структура("ФизическоеЛицо,Организация,Ответственный",
			ТекущиеДанные.ФизическоеЛицо, ТекущиеДанные.Организация, Ответственный);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.СведенияОЗастрахованномЛицеФСС.Форма.ФормаДокумента", ПараметрыФормы);
	ИначеЕсли ИмяРеквизита = "Состояние" И Не ТекущиеДанные.РегистрацияСведений.Пустая() Тогда
		ПоказатьЗначение(, ТекущиеДанные.РегистрацияСведений);
	Иначе
		Если ЗначениеЗаполнено(СсылкаЯчейки) Тогда
			ПоказатьЗначение(, СсылкаЯчейки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВТаблице(Флаг)
	Для Каждого СтрокаТЧ Из Сведения Цикл
		СтрокаТЧ.Флаг = Флаг;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСкрытуюГруппу(Элементы, Пометка)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияСкрытаяГруппа", "Видимость", Пометка);
	Элементы.СведенияПодробно.Пометка = Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ФормироватьНовыеДокументы = Истина;
	Иначе
		ФормироватьНовыеДокументы = Ложь;
	КонецЕсли;
	СформироватьНаКлиенте(ФормироватьНовыеДокументы);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоСотруднику(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("Документ.СведенияОЗастрахованномЛицеФСС.Форма.ФормаДокумента", Параметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаКлиенте(ФормироватьНовыеДокументы = Ложь)
	ДлительнаяОперация = СформироватьНаСервере(ФормироватьНовыеДокументы);
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииФормированияСведений", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
КонецПроцедуры

&НаСервере
Функция СформироватьНаСервере(ФормироватьНовыеДокументы)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.АдресРезультата = АдресХранилища;
	
	ТаблицаСведений = СЭДОФССРасширенный.ТаблицаСведенияОЗастрахованномЛицеФСС();
	Для Каждого СтрокаТЧ Из Сведения Цикл
		Если СтрокаТЧ.Флаг И (ФормироватьНовыеДокументы Или Не ЗначениеЗаполнено(СтрокаТЧ.Документ)) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаСведений.Добавить(), СтрокаТЧ,, "ОписаниеОшибок");
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаСведений.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"СЭДОФССРасширенный.СоздатьСведенияОЗастрахованномЛицеФСС",
		ТаблицаСведений,
		Ответственный);
	
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииФормированияСведений(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		// Пользователь отменил задание.
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуСведений();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСведений()
	
	ТаблицаСведений = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	СтруктураПоиска = Новый Структура("ФизическоеЛицо,Организация");
	Для Каждого СтрокСведений Из ТаблицаСведений Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокСведений);
		НайденныеСтроки = Сведения.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		НайденнаяСтрока = НайденныеСтроки[0];
		ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокСведений, "Документ,ОписаниеОшибок,ДатаСоздания");
		НайденнаяСтрока.Флаг = Ложь;
		НайденнаяСтрока.Отправлен = Ложь;
		Если ПустаяСтрока(НайденнаяСтрока.ОписаниеОшибок) Тогда
			НайденнаяСтрока.ИндексКартинки = 2;
			НайденнаяСтрока.Состояние = Перечисления.СостоянияДокументаСЭДОФСС.ПодготовленКОтправке;
		Иначе
			НайденнаяСтрока.ИндексКартинки = 5;
			НайденнаяСтрока.Состояние = Перечисления.СостоянияДокументаСЭДОФСС.ТребуетсяСоздать;
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ОбновитьСкрытуюГруппу(Элементы, ЕстьОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	Результат = СЭДОФССРасширенныйВызовСервера.ЗначенияЗаполненияСведенийОЗастрахованномЛицеФСС(Основание);
	АдресХранилища = Результат.АдресХранилища;
	ЕстьОшибки = Ложь;
	ПолучитьДанные();
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанные()
	Если ПустаяСтрока(АдресХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Сведения.Загрузить(ТаблицаДанных);
	
	ТаблицаДанных.Свернуть("Организация");
	ОднаОрганизация = ТаблицаДанных.Количество() = 1;
	Если ОднаОрганизация Тогда
		Организация = ТаблицаДанных[0].Организация;
	КонецЕсли;
	
	Элементы.СведенияОрганизация.Видимость = Не ОднаОрганизация;
	Элементы.Организация.Видимость = ОднаОрганизация;
	
	ПолучатьСообщения = Ложь;
	Для Каждого СтрокаТЧ Из Сведения Цикл
		Если СтрокаТЧ.Отправлен И (СтрокаТЧ.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСЭДОФСС.Отправлен")
			Или СтрокаТЧ.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСЭДОФСС.ОтправленОператору")) Тогда
			ПолучатьСообщения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти