#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		
		ИмяОпции = "РаботаВБюджетномУчреждении";
		РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию(ИмяОпции);
		
		ИмяОпции = "ИспользоватьСтатьиФинансированияЗарплатаРасширенный";
		ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию(ИмяОпции);
		
	Иначе
		РаботаВБюджетномУчреждении = Ложь;
		ИспользоватьСтатьиФинансирования = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаКнопокПросмотр.Видимость			= ТолькоПросмотр;
	Элементы.ГруппаКнопокРедактирование.Видимость	= Не ТолькоПросмотр;
	Если ТолькоПросмотр Тогда
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию	= Истина;
	Иначе
		Элементы.ФормаОК.КнопкаПоУмолчанию		= Истина;
	КонецЕсли;
	УстановитьВидимостьКолонокПрогрессивногоНалога(Параметры.ДатаПолученияДохода);
	
	Организация = Параметры.Организация;
	МесяцНачисления = Параметры.МесяцНачисления;
	ДокументСсылка = Параметры.ДокументСсылка;
	ДатаПолученияДохода = Параметры.ДатаПолученияДохода;
	
	Параметры.Свойство("НеРаспределятьПоИсточникамФинансирования", НеРаспределятьПоИсточникамФинансирования);
	Параметры.Свойство("БухучетПрочихДоходов", БухучетПрочихДоходов);
	
	ЗаполнитьФизическоеЛицо(Параметры.СотрудникФизическоеЛицо);
	Заголовок = ФизическоеЛицо;
	
	ЗаполнитьСтатусНалогоплательщика();
	
	ЗаполнитьФормуНаСервере(Параметры.СведенияОбНДФЛ);
	УчетНДФЛФормы.ФормаПодробнееОРасчетеНДФЛПриЗаполнении(ЭтаФорма, ОписаниеТаблицыНДФЛ(), ОписанияТаблицДляРаспределенияРезультата());
	УстановитьСвойстваЭлементовФормы();
	
	УстановитьУсловноеОформление();
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыВычетыНДФЛ" И Источник.ВладелецФормы = ЭтаФорма Тогда 
		ОбработатьИзменениеВычетов(Параметр);
		РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(
			ЭтаФорма, УчетНДФЛКлиентСервер.ФормаПодробнееОРасчетеНДФЛОписаниеТаблицыНДФЛ(), Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыНДФЛ

&НаКлиенте
Процедура НДФЛВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НДФЛ.ТекущиеДанные;
	Если ТекущиеДанные.СтрокаИтогов Или ТекущиеДанные.ПредыдущиеРасчеты Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеТаблицыНДФЛ = УчетНДФЛКлиентСервер.ФормаПодробнееОРасчетеНДФЛОписаниеТаблицыНДФЛ();
	Если БухучетПрочихДоходов Тогда
		ОписаниеТаблицыНДФЛ.Вставить("БухучетПрочихДоходов", Истина); 
	КонецЕсли;
	
	УчетНДФЛКлиент.ФормаПодробнееОРасчетеНДФЛНДФЛВыбор(ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка,
		ОписаниеТаблицыНДФЛ, МесяцНачисления, Организация);
		
	Если Поле.Имя = "НДФЛВычеты" Тогда
		ПараметрыФормы = Новый Структура;      
		ПараметрыФормы.Вставить("ФизическоеЛицо", ФизическоеЛицо);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыФормы.Вставить("ДанныеВычетов", ДанныеВычетов(Элементы.НДФЛ.ТекущаяСтрока));
		ПараметрыФормы.Вставить("ДатаПолученияДохода", ДатаПолученияДохода);
		ОткрытьФорму("ОбщаяФорма.ПодробнееОРасчетеНДФЛВычеты", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.НДФЛ.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ЗаполнитьНовуюСтроку();
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "НДФЛ", ТекущиеДанные, НоваяСтрока, Копирование);
	УчетНДФЛКлиентСервер.НазначитьИдентификаторСтрокеНДФЛ(ТекущиеДанные, МаксимальныйИдентификаторСтрокиНДФЛ, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ИспользоватьСтатьиФинансирования Тогда
		Если ТекущиеДанные <> Неопределено Тогда
			УчетНДФЛКлиент.ФормаПодробнееОРасчетеНДФЛПерераспределитьНДФЛ(ТекущиеДанные, РаботаВБюджетномУчреждении);
		КонецЕсли;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(
		ЭтаФорма, УчетНДФЛКлиентСервер.ФормаПодробнееОРасчетеНДФЛОписаниеТаблицыНДФЛ(), Ложь, Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.НДФЛ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПредыдущиеРасчеты Или ТекущиеДанные.СтрокаИтогов Тогда 
		Возврат;
	КонецЕсли;
	
	ИдентификаторУдаляемойСтрокиСтрокиНДФЛ = ТекущиеДанные.ИдентификаторСтрокиНДФЛ;
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПослеУдаления(Элемент)
	
	УдалитьПримененныеВычетыНаДетейИИмущественные(ЭтаФорма, ИдентификаторУдаляемойСтрокиСтрокиНДФЛ);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПодразделениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НДФЛ.ТекущиеДанные;
	ТекущиеДанные.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОрганеПодразделения(ТекущиеДанные.Подразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛНалогПриИзменении(Элемент)
	
	ЗаполнитьИтогиНДФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛНалогСПревышенияПриИзменении(Элемент)
	
	ЗаполнитьИтогиНДФЛ();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ПеренестиИзмененияВОбъектФормыВладельца();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрНалоговогоУчетаПоНДФЛ(Команда)
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ПеренестиИзмененияВОбъектФормыВладельца();
		
		РегистрНалоговогоУчетаПоНДФЛ = ВладелецФормы.НДФЛПодробнееНаСервере(ФизическоеЛицо);
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.РегистрНалоговогоУчетаПоНДФЛ", "РегистрНалоговогоУчетаПоНДФЛ",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка), ЭтаФорма, Новый Структура("ПечатаемыйДокумент", РегистрНалоговогоУчетаПоНДФЛ));
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подробно(Команда)
	
	Элементы.Подробно.Пометка = Не Элементы.Подробно.Пометка;
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(
		ЭтаФорма, УчетНДФЛКлиентСервер.ФормаПодробнееОРасчетеНДФЛОписаниеТаблицыНДФЛ());
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПеренестиИзмененияВОбъектФормыВладельца()
	
	Если Модифицированность Тогда
		Если ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, ПоместитьИзмененныеДанныеВоВременноеХранилище());
		Иначе
			Оповестить("ИзмененыРезультатыРасчетаНДФЛ", ПоместитьИзмененныеДанныеВоВременноеХранилище(), ЭтаФорма);
		КонецЕсли;
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьИзмененныеДанныеВоВременноеХранилище()
	
	ВозвращаемыеСведения = Новый Структура;
	
	ДанныеНДФЛ = НДФЛ.Выгрузить(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НДФЛ[0]));
	ДанныеНДФЛ.Очистить();
	Для Каждого СтрокаНДФЛ Из НДФЛ Цикл 
		Если Не СтрокаНДФЛ.ПредыдущиеРасчеты И Не СтрокаНДФЛ.СтрокаИтогов Тогда 
			ЗаполнитьЗначенияСвойств(ДанныеНДФЛ.Добавить(), СтрокаНДФЛ);
		КонецЕсли;
	КонецЦикла;
	
	ВозвращаемыеСведения.Вставить("НДФЛ", ДанныеНДФЛ);
	ВозвращаемыеСведения.Вставить("ПримененныеВычетыНаДетейИИмущественные", ПримененныеВычетыНаДетейИИмущественные.Выгрузить());
	ВозвращаемыеСведения.Вставить("Начисления", ВычетыКДоходам.Выгрузить());
	ВозвращаемыеСведения.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	
	ИзмененныеДанные.Очистить();
	НоваяСтрока = ИзмененныеДанные.Добавить();
	НоваяСтрока.ИмяТаблицы = "НДФЛ";
	НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
	ВозвращаемыеСведения.Вставить("ИзмененныеДанные", ИзмененныеДанные.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(ВозвращаемыеСведения, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	
	ВладелецФормы.ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления);
	ЗарплатаКадрыКлиент.ПодключитьОбработчикОжиданияОбработкиСобытия(ЭтаФорма, "ПерезаполнитьФормуПоОбъекту");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	
	ВладелецФормы.РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьФормуПоОбъекту()
	
	ПерезаполнитьФормуПоОбъектуНаСервере(ВладелецФормы.СведенияОбНДФЛ(ФизическоеЛицо));
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьФормуПоОбъектуНаСервере(СведенияОбНДФЛ)
	
	ЗаполнитьФормуНаСервере(СведенияОбНДФЛ);
	УчетНДФЛФормы.ФормаПодробнееОРасчетеНДФЛПриЗаполнении(ЭтаФорма, ОписаниеТаблицыНДФЛ(), ОписанияТаблицДляРаспределенияРезультата());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФизическоеЛицо(СотрудникФизическоеЛицо)
	
	Если ТипЗнч(СотрудникФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		ФизическоеЛицо = СотрудникФизическоеЛицо;
		Возврат;
	КонецЕсли;
	
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникФизическоеЛицо, "ФизическоеЛицо");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусНалогоплательщика()
	
	УстановитьПривилегированныйРежим(Истина);			   
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, ФизическоеЛицо, "СтатусНалогоплательщика", КонецМесяца(МесяцНачисления));
	УстановитьПривилегированныйРежим(Ложь);
	
	СтатусНалогоплательщика = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Резидент;
	Если КадровыеДанные.Количество() > 0 Тогда 
		СтатусНалогоплательщика = КадровыеДанные[0].СтатусНалогоплательщика;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Статус", СтатусНалогоплательщика);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Статус
	               |ИЗ
	               |	РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ КАК СтатусФизическихЛицКакНалогоплательщиковНДФЛ
	               |ГДЕ
	               |	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Период МЕЖДУ НАЧАЛОПЕРИОДА(&МесяцНачисления, ГОД) И КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	               |	И СтатусФизическихЛицКакНалогоплательщиковНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
	               |	И СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Статус <> &Статус";
				   
	УстановитьПривилегированныйРежим(Истина);			   
	РезультатЗапроса = Запрос.Выполнить();			   
	УстановитьПривилегированныйРежим(Ложь);
	
	МенялсяСтатусНалогоплательщика = Не РезультатЗапроса.Пустой();			   
	Нерезидент = СтатусНалогоплательщика = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуНаСервере(АдресСведенийОбНДФЛ)
	
	СведенияОбНДФЛ = ПолучитьИзВременногоХранилища(АдресСведенийОбНДФЛ);
	СведенияОбНДФЛ.Свойство("АдресРаспределенияРезультатовВХранилище", АдресРаспределенияРезультатовВХранилище);
	СведенияОбНДФЛ.Свойство("МаксимальныйИдентификаторСтрокиНДФЛ", МаксимальныйИдентификаторСтрокиНДФЛ);
	СведенияОбНДФЛ.Свойство("БухучетПрочихДоходов", БухучетПрочихДоходов);
	
	Если ТолькоПросмотр И СведенияОбНДФЛ.НДФЛ.Количество() = 0 Тогда
		ВызватьИсключение  НСтр("ru = 'Нет сведений о расчете НДФЛ';
								|en = 'No information about PIT calculation'");
	КонецЕсли; 
	
	ПримененныеВычетыНаДетейИИмущественные.Очистить();
	ВычетыКДоходам.Очистить();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияОбНДФЛ.ПримененныеВычетыНаДетейИИмущественные, ПримененныеВычетыНаДетейИИмущественные);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияОбНДФЛ.ВычетыКДоходам, ВычетыКДоходам);
	
	НДФЛ.Очистить();
	НДФЛПрошлыеПериоды = НДФЛ.Выгрузить();
	НДФЛПрошлыеПериоды.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаНДФЛ Из СведенияОбНДФЛ.НДФЛ Цикл 
		НоваяСтрока = НДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНДФЛ);
		Если НоваяСтрока.МесяцНалоговогоПериода < МесяцНачисления Тогда 
			НоваяСтрока.ОтличаетсяПериод = Истина;
		КонецЕсли;
		ПримененныеВычеты = ПримененныеВычетыНаДетейИИмущественные.НайтиСтроки(Новый Структура("ИдентификаторСтрокиНДФЛ", НоваяСтрока.ИдентификаторСтрокиНДФЛ));
		Для Каждого ДанныеВычета Из ПримененныеВычеты Цикл 
			НоваяСтрока.Вычеты = НоваяСтрока.Вычеты + ДанныеВычета.РазмерВычета;
		КонецЦикла;
		Если ЗначениеЗаполнено(СтрокаНДФЛ.ПримененныйВычетЛичныйКодВычета) Тогда 
			НоваяСтрока.Вычеты = НоваяСтрока.Вычеты + СтрокаНДФЛ.ПримененныйВычетЛичный;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета) Тогда 
			НоваяСтрока.Вычеты = НоваяСтрока.Вычеты + СтрокаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату;
		КонецЕсли;
		Если ИспользоватьСтатьиФинансирования Тогда
			Если НоваяСтрока.РезультатРаспределения = Неопределено И ЗначениеЗаполнено(АдресРаспределенияРезультатовВХранилище) Тогда 
				НоваяСтрока.РезультатРаспределения = РезультатРаспределенияИзВременногоХранилища(НоваяСтрока.ИдентификаторСтрокиНДФЛ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтавкиНалогообложения = СтавкиНалогообложенияДоходов(СведенияОбНДФЛ.СведенияОДоходах);
	Для Каждого СтрокаДоходов Из СведенияОбНДФЛ.СведенияОДоходах Цикл 
		Отбор = Новый Структура("МесяцНалоговогоПериода,Подразделение,КатегорияДохода", СтрокаДоходов.ДатаПолученияДохода, СтрокаДоходов.Подразделение, СтрокаДоходов.КатегорияДохода);
		НайденныеСтроки = НДФЛ.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			СтрокаНДФЛ = НайденныеСтроки[0];
		Иначе 
			СтрокаНДФЛ = НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, СтрокаДоходов);
			СтрокаНДФЛ.МесяцНалоговогоПериода = СтрокаДоходов.ДатаПолученияДохода;
			Если СтрокаНДФЛ.МесяцНалоговогоПериода < МесяцНачисления Тогда 
				СтрокаНДФЛ.ОтличаетсяПериод = Истина;
			КонецЕсли;
		КонецЕсли;
		СтрокаНДФЛ.Доход = СтрокаНДФЛ.Доход + СтрокаДоходов.СуммаДохода;
		СтрокаНДФЛ.Вычеты = СтрокаНДФЛ.Вычеты + СтрокаДоходов.СуммаВычета;
		Если СтавкиНалогообложения <> Неопределено Тогда 
			Отбор = Новый Структура("Период,КатегорияДохода", СтрокаДоходов.ДатаПолученияДохода, СтрокаДоходов.КатегорияДохода);
			НайденныеСтроки = СтавкиНалогообложения.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СтрокаНДФЛ.Ставка = НайденныеСтроки[0].СтавкаНДФЛ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МаксимальныйМесяцНалоговогоПериода = '00010101';
	ЕстьДоходВМесяцеНачисления = Ложь;
	Для Каждого СтрокаНДФЛ Из НДФЛ Цикл 
		Если ЗначениеЗаполнено(СтрокаНДФЛ.Подразделение) Тогда
			СтрокаНДФЛ.РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(СтрокаНДФЛ.Подразделение, 
																							   СтрокаНДФЛ.МесяцНалоговогоПериода);
		КонецЕсли;
		СтрокаНДФЛ.ФизическоеЛицо = ФизическоеЛицо;
		МаксимальныйМесяцНалоговогоПериода = Макс(МаксимальныйМесяцНалоговогоПериода, НачалоМесяца(СтрокаНДФЛ.МесяцНалоговогоПериода));
		Если НачалоМесяца(СтрокаНДФЛ.МесяцНалоговогоПериода) = МесяцНачисления Тогда 
			ЕстьДоходВМесяцеНачисления = Истина;
		КонецЕсли;
	КонецЦикла;
	
	МесяцРасчета = ?(ЕстьДоходВМесяцеНачисления, МесяцНачисления, Макс(МесяцНачисления, МаксимальныйМесяцНалоговогоПериода));
	ДанныеДоПрогрессивнойШкалы = МесяцРасчета < УчетНДФЛ.ПараметрыРасчетаНДФЛПоПрогрессивнойШкале().НачалоРасчетаНДФЛПоПрогрессивнойШкале; 
	ИменаНалоговыхРесурсов = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("Налог", Ложь, ДанныеДоПрогрессивнойШкалы);
	СтрокаНалоговыхРесурсов = УчетНДФЛ.РесурсыИсчисленногоНалогаСтрокой("Налог", Ложь, ДанныеДоПрогрессивнойШкалы);
	
	Если МаксимальныйИдентификаторСтрокиНДФЛ = 0 Тогда 
		МаксимальныйИдентификаторСтрокиНДФЛ = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(НДФЛ);
	КонецЕсли;
	
	ИтогиНалогов = Новый Соответствие;
	Для каждого ИмяРесурса Из ИменаНалоговыхРесурсов Цикл
		ИтогиНалогов.Вставить(ИмяРесурса, НДФЛ.Итог(ИмяРесурса))
	КонецЦикла;
	
	ТекущийРасчетИтоги = НДФЛ.Добавить();
	ТекущийРасчетИтоги.МесяцНалоговогоПериода = КонецМесяца(МесяцРасчета);
	
	Доход = НДФЛ.Итог("Доход");
	Вычеты = НДФЛ.Итог("Вычеты");
	Для каждого ИмяРесурса Из ИменаНалоговыхРесурсов Цикл
		ТекущийРасчетИтоги[ИмяРесурса] = ИтогиНалогов[ИмяРесурса];
	КонецЦикла;
	ТекущийРасчетИтоги.Доход = Доход;
	ТекущийРасчетИтоги.Вычеты = Вычеты;
	ТекущийРасчетИтоги.СтрокаИтогов = Истина;
	ТекущийРасчетИтоги.ПерваяСтрока = Истина;
	ТекущийРасчетИтоги.ПредставлениеПериода = НСтр("ru = 'Текущий расчет';
													|en = 'Current calculation'");
	
	НалогСПревышенияТекущегоРасчета = 0;
	Для каждого ИмяРесурса Из ИменаНалоговыхРесурсов Цикл
		Если ИмяРесурса = "Налог" Тогда
			Продолжить;
		КонецЕсли;
		НалогСПревышенияТекущегоРасчета = НалогСПревышенияТекущегоРасчета + ТекущийРасчетИтоги[ИмяРесурса];
	КонецЦикла;
	
	Налог = ТекущийРасчетИтоги.Налог;
	НалогСПревышения = НалогСПревышенияТекущегоРасчета;
	
	НДФЛ.Сортировать("ПерваяСтрока Убыв, СтрокаИтогов Убыв, МесяцНалоговогоПериода Убыв");
	
	Если Нерезидент Тогда 
		Возврат;
	КонецЕсли;
	
	Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ДатаАктуальности = Макс(КонецМесяца(МесяцРасчета), ТекущаяДатаСеанса()); 
	ДанныеПрошлыхПериодов = УчетНДФЛ.ДанныеОДоходахНалогахВычетах(Сотрудники, Год(МесяцРасчета), Организация, , ДатаАктуальности, , Истина);
	
	СтрокиСКомментариями = Новый Массив;
	ЕстьЗаписиТекущегоПериода = Ложь;
	
	Для Каждого СтрокаДоходов Из ДанныеПрошлыхПериодов.Доходы Цикл 
		
		Если СтрокаДоходов.Регистратор = ДокументСсылка Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДоходов.ПериодРегистрации) 
			Или СтрокаДоходов.ПериодРегистрации > МесяцРасчета
			Или НачалоМесяца(СтрокаДоходов.ДатаПолученияДохода) > МесяцРасчета Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НДФЛПрошлыеПериоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоходов);
	    НоваяСтрока.Доход = СтрокаДоходов.СуммаДохода;
		НоваяСтрока.МесяцНалоговогоПериода = СтрокаДоходов.ДатаПолученияДохода;
		НоваяСтрока.Подробно = Истина;
		Если НачалоМесяца(СтрокаДоходов.ДатаПолученияДохода) < НачалоМесяца(СтрокаДоходов.ПериодРегистрации) Тогда 
			НоваяСтрока.ОтличаетсяПериод = Истина;
			СтрокиСКомментариями.Добавить(НоваяСтрока);
		КонецЕсли;
		
		Если СтрокаДоходов.СуммаВычета <> 0 Тогда 
			НоваяСтрока = НДФЛПрошлыеПериоды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоходов);
			НоваяСтрока.МесяцНалоговогоПериода = КонецМесяца(СтрокаДоходов.ДатаПолученияДохода);
		    НоваяСтрока.Вычеты = СтрокаДоходов.СуммаВычета;
			НоваяСтрока.Подробно = Истина;
			Если НачалоМесяца(СтрокаДоходов.ДатаПолученияДохода) < НачалоМесяца(СтрокаДоходов.ПериодРегистрации) Тогда 
				НоваяСтрока.ОтличаетсяПериод = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НачалоМесяца(СтрокаДоходов.ДатаПолученияДохода) = МесяцРасчета Тогда 
			ЕстьЗаписиТекущегоПериода = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиСКомментариями.Количество() > 0 Тогда 
		
		ВидыДокументов = Новый Соответствие;
		Для Каждого СтрокаНДФЛ Из СтрокиСКомментариями Цикл 
			ВидДокумента = ТипЗнч(СтрокаНДФЛ.Регистратор);
			СписокДокументов = ВидыДокументов[ВидДокумента];
			Если СписокДокументов = Неопределено Тогда 
				СписокДокументов = Новый Массив;
				ВидыДокументов.Вставить(ВидДокумента, СписокДокументов);
			КонецЕсли;
			СписокДокументов.Добавить(СтрокаНДФЛ.Регистратор);
		КонецЦикла;
		
		НомераДокументов = Новый Соответствие;
		Для Каждого КлючИЗначение Из ВидыДокументов Цикл 
			ДанныеДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(КлючИЗначение.Значение, "Номер");
		    ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(НомераДокументов, ДанныеДокументов, Истина);
		КонецЦикла;
		
		Для Каждого СтрокаНДФЛ Из СтрокиСКомментариями Цикл
			СтрокаНДФЛ.Комментарий = ПредставлениеРегистратора(СтрокаНДФЛ.Регистратор, СтрокаНДФЛ.ПериодРегистрации, НомераДокументов);
		КонецЦикла;
		
	КонецЕсли;

	Для каждого ИмяРесурса Из ИменаНалоговыхРесурсов Цикл
		ДанныеПрошлыхПериодов.Налоги.Колонки[СтрЗаменить(ИмяРесурса, "Налог", "Начислено")].Имя = ИмяРесурса;
	КонецЦикла;
	Для Каждого СтрокаНДФЛ Из ДанныеПрошлыхПериодов.Налоги Цикл 
		
		Если СтрокаНДФЛ.Регистратор = ДокументСсылка Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНДФЛ.ПериодРегистрации) 
			Или СтрокаНДФЛ.ПериодРегистрации > МесяцРасчета
			Или НачалоМесяца(СтрокаНДФЛ.ДатаПолученияДохода) > МесяцРасчета Тогда 
			Продолжить;
		КонецЕсли;
		
		ПроверяемаяСумма = 0;
		Для каждого ИмяРесурса Из ИменаНалоговыхРесурсов Цикл
			ПроверяемаяСумма = ПроверяемаяСумма + СтрокаНДФЛ[ИмяРесурса] * СтрокаНДФЛ[ИмяРесурса];
		КонецЦикла;
		Если ПроверяемаяСумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НДФЛПрошлыеПериоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНДФЛ);
		НоваяСтрока.МесяцНалоговогоПериода = СтрокаНДФЛ.ДатаПолученияДохода;
		НоваяСтрока.Подробно = Истина;
		Если НачалоМесяца(СтрокаНДФЛ.ДатаПолученияДохода) < НачалоМесяца(СтрокаНДФЛ.ПериодРегистрации) Тогда 
			НоваяСтрока.ОтличаетсяПериод = Истина;
		КонецЕсли;
		
		Если НачалоМесяца(СтрокаНДФЛ.ДатаПолученияДохода) = МесяцРасчета Тогда 
			ЕстьЗаписиТекущегоПериода = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаВычетов Из ДанныеПрошлыхПериодов.Вычеты Цикл 
	
		Если СтрокаВычетов.Регистратор = ДокументСсылка Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаВычетов.ПериодРегистрации) 
			Или СтрокаВычетов.ПериодРегистрации > МесяцРасчета
			Или НачалоМесяца(СтрокаВычетов.ДатаПолученияДохода) > МесяцРасчета Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НДФЛПрошлыеПериоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВычетов);
		НоваяСтрока.МесяцНалоговогоПериода = КонецМесяца(СтрокаВычетов.ДатаПолученияДохода);
	    НоваяСтрока.Вычеты = СтрокаВычетов.СуммаВычета;
		НоваяСтрока.Подробно = Истина;
		Если НачалоМесяца(СтрокаВычетов.ДатаПолученияДохода) < НачалоМесяца(СтрокаВычетов.ПериодРегистрации) Тогда 
			НоваяСтрока.ОтличаетсяПериод = Истина;
		КонецЕсли;
		
		Если НачалоМесяца(СтрокаВычетов.ДатаПолученияДохода) = МесяцРасчета Тогда 
			ЕстьЗаписиТекущегоПериода = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	НДФЛПрошлыеПериоды.Свернуть("МесяцНалоговогоПериода,РегистрацияВНалоговомОргане,Подразделение,Ставка,СтрокаИтогов,ОтличаетсяПериод,Подробно,ПредставлениеПериода,Регистратор,ПредыдущиеРасчеты,Комментарий", СтрокаНалоговыхРесурсов + ",Доход,Вычеты");
	
	ТекущийМесяц = ?(ЕстьЗаписиТекущегоПериода, МесяцРасчета, ДобавитьМесяц(МесяцРасчета, -1));
	НачалоРасчетногоГода = НачалоГода(МесяцРасчета);
	
	Пока ТекущийМесяц >= НачалоРасчетногоГода Цикл
		НоваяСтрока = НДФЛПрошлыеПериоды.Добавить();
		НоваяСтрока.МесяцНалоговогоПериода = КонецМесяца(ТекущийМесяц);
		НоваяСтрока.СтрокаИтогов = Истина;
		НоваяСтрока.ПредставлениеПериода = Формат(НоваяСтрока.МесяцНалоговогоПериода, "ДФ=""ММММ""");
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, -1);
	КонецЦикла;
	
	НДФЛПрошлыеПериоды.ЗаполнитьЗначения(Истина, "ПредыдущиеРасчеты");
	НДФЛПрошлыеПериоды.Сортировать("МесяцНалоговогоПериода Убыв, СтрокаИтогов Убыв");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НДФЛПрошлыеПериоды, НДФЛ);
	
	ДоходСНачалаГода = 0;
	ДоходЗаМесяц = 0;
	ВычетыЗаМесяц = 0;
	НалогиЗаМесяц = Новый Соответствие;
	Для каждого ИмяРесурса Из ИменаНалоговыхРесурсов Цикл
		НалогиЗаМесяц.Вставить(ИмяРесурса, 0)
	КонецЦикла;
	
	КоличествоСтрок = НДФЛ.Количество();
	Для Сч = 1 По КоличествоСтрок Цикл 
		
		ИндексСтроки = КоличествоСтрок - Сч;
		СтрокаНДФЛ = НДФЛ[ИндексСтроки];
		
		Если СтрокаНДФЛ.СтрокаИтогов Тогда 
			
			СтрокаНДФЛ.ДоходСНачалаГода = ДоходСНачалаГода;
			
			Для каждого ИмяРесурса Из ИменаНалоговыхРесурсов Цикл
				СтрокаНДФЛ[ИмяРесурса] = НалогиЗаМесяц[ИмяРесурса];
				НалогиЗаМесяц.Вставить(ИмяРесурса, 0);
			КонецЦикла;
			СтрокаНДФЛ.Доход = ДоходЗаМесяц;
			СтрокаНДФЛ.Вычеты = ВычетыЗаМесяц;
			
			ДоходЗаМесяц = 0;
			ВычетыЗаМесяц = 0;
			
			Продолжить;
			
		КонецЕсли;
		
		ДоходСНачалаГода = ДоходСНачалаГода + СтрокаНДФЛ.Доход;
		Для каждого ИмяРесурса Из ИменаНалоговыхРесурсов Цикл
			НалогиЗаМесяц.Вставить(ИмяРесурса, НалогиЗаМесяц[ИмяРесурса] + СтрокаНДФЛ[ИмяРесурса]);
		КонецЦикла;
		ДоходЗаМесяц = ДоходЗаМесяц + СтрокаНДФЛ.Доход;
		ВычетыЗаМесяц = ВычетыЗаМесяц + СтрокаНДФЛ.Вычеты;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РезультатРаспределенияИзВременногоХранилища(ИдентификаторСтроки)
	
	Если Не ИспользоватьСтатьиФинансирования Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРаспределения = ПолучитьИзВременногоХранилища(АдресРаспределенияРезультатовВХранилище);
	
	Если ДанныеРаспределения = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыРасширенныйКлиентСервер");
		ИменаКолонокТаблицы = Модуль.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицыНДФЛ());
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	ТаблицаРаспределенияПредварительно = ДанныеРаспределения.Скопировать(ОтборСтрок);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчетеРасширенная") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеЗарплатыВБухучетеРасширенный");
		Модуль.ДополнитьТаблицуРаспределенияКодомСтатьиФинансирования(ТаблицаРаспределенияПредварительно);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда 
		ТаблицаРаспределения = ТаблицаРаспределенияПредварительно.Скопировать(, ИменаКолонокТаблицы);
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыРасширенный");
		СтруктураРаспределения = Модуль.ТаблицаЗначенийВСтруктуру(ТаблицаРаспределения);
	КонецЕсли;
	
	Возврат СтруктураРаспределения;
	
КонецФункции

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НДФЛПодразделение",
		"ПараметрыВыбора",
		Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый ПараметрВыбора("Отбор.Владелец", Организация))));
	
	Элементы.НДФЛ.ТекущаяСтрока = 0;
	
	Если ТолькоПросмотр Тогда
		Элементы.НДФЛ.ПоложениеКоманднойПанели 	= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		Элементы.НДФЛ.ИзменятьСоставСтрок 		= Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НДФЛСтавка",
		"Видимость",
		Нерезидент Или МенялсяСтатусНалогоплательщика);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НДФЛДоходСНачалаГода",
		"Видимость",
		Не Нерезидент);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НДФЛКомандаРедактированияРаспределения",
		"Видимость",
		Не НеРаспределятьПоИсточникамФинансирования Или Не ИспользоватьСтатьиФинансирования);
		
	ДоступныеКатегорииДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
									Перечисления.КатегорииДоходовНДФЛ.ВсеЗначения(), 
									Перечисления.КатегорииДоходовНДФЛ.Дивиденды());
	Элементы.НДФЛКатегорияДохода.СписокВыбора.ЗагрузитьЗначения(ДоступныеКатегорииДоходаНДФЛ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовуюСтроку()
	
	НоваяСтрока = НДФЛ.НайтиПоИдентификатору(Элементы.НДФЛ.ТекущаяСтрока);
	
	НоваяСтрока.ФиксСтрока = Истина;
	НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
	
	Если ЗначениеЗаполнено(НоваяСтрока.ФизическоеЛицо) Тогда
		
		СтрокиНДФЛ = НДФЛ.НайтиСтроки(Новый Структура("ФизическоеЛицо", НоваяСтрока.ФизическоеЛицо));
		Для Каждого СтрокаНДФЛ Из СтрокиНДФЛ Цикл
			Если ЗначениеЗаполнено(СтрокаНДФЛ.Подразделение) Тогда
				НоваяСтрока.Подразделение = СтрокаНДФЛ.Подразделение;
				НоваяСтрока.РегистрацияВНалоговомОргане = СтрокаНДФЛ.РегистрацияВНалоговомОргане;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Подразделение) Тогда
			ДанныеПодразделения = ПодходящееПодразделение(НоваяСтрока.ФизическоеЛицо, Организация, МесяцНачисления);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПодразделения);
		КонецЕсли; 
		
	КонецЕсли; 
	
	НоваяСтрока.МесяцНалоговогоПериода = КонецМесяца(МесяцНачисления);
	
	НДФЛ.Сортировать("ПерваяСтрока Убыв, ПредыдущиеРасчеты, МесяцНалоговогоПериода Убыв, СтрокаИтогов Убыв");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодходящееПодразделение(ФизическоеЛицо, Организация, МесяцНачисления)
	
	Подразделение = Неопределено;
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация = Организация;
		ПараметрыПолученияСотрудников.НачалоПериода = МесяцНачисления;
		ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(МесяцНачисления);
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
		ПараметрыПолученияСотрудников.КадровыеДанные = "Подразделение";
		
		СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		Если СотрудникиОрганизации.Количество() > 0 Тогда
			Подразделение = СотрудникиОрганизации[0].Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = РегистрацияВНалоговомОрганеПодразделения(Подразделение);
	
	Возврат Новый Структура("Подразделение,РегистрацияВНалоговомОргане", Подразделение, РегистрацияВНалоговомОргане);
	
КонецФункции

&НаСервереБезКонтекста
Функция РегистрацияВНалоговомОрганеПодразделения(Подразделение)
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "РегистрацияВНалоговомОргане");
	
КонецФункции

&НаСервере
Функция ПредставлениеРегистратора(Регистратор, Период, НомераДокументов)
	
	ИмяДокумента = Регистратор.Метаданные().Синоним;
	НомерДокумента = НомераДокументов[Регистратор];
	НазваниеМесяца = Формат(Период, "ДФ=""ММММ""");
	
	Возврат СтрШаблон(НСтр("ru = '%1, %2 %3';
							|en = '%1, %2 %3'"), НазваниеМесяца, ИмяДокумента, НомерДокумента);
	
КонецФункции

&НаСервере
Функция СтавкиНалогообложенияДоходов(СведенияОДоходах)
	
	Если Не Нерезидент И Не МенялсяСтатусНалогоплательщика Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СведенияОДоходах", СведенияОДоходах);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Доходы.ДатаПолученияДохода КАК Период,
	               |	Доходы.КатегорияДохода КАК КатегорияДохода,
	               |	Доходы.КодДохода КАК КодДохода
	               |ПОМЕСТИТЬ ВТИсходныеДанные
	               |ИЗ
	               |	&СведенияОДоходах КАК Доходы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИсходныеДанные.Период КАК Период,
	               |	ИсходныеДанные.КодДохода.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	               |	ИсходныеДанные.КатегорияДохода КАК КатегорияДохода,
	               |	&ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТДоходы
	               |ИЗ
	               |	ВТИсходныеДанные КАК ИсходныеДанные";
				   
	Запрос.Выполнить();			   
				   
	УчетНДФЛ.СоздатьВТСтавкаНДФЛПоСтавкеРезидента(Запрос.МенеджерВременныхТаблиц, "ВТДоходы");			   
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтавкаНДФЛПоСтавкеРезидента.Период,
	               |	СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода,
	               |	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ
	               |ИЗ
	               |	ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента";
				   
	Возврат Запрос.Выполнить().Выгрузить();			   
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Цвет фона
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ИтогиФонГруппы);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НДФЛ.СтрокаИтогов");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ПолеОформление = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле = Новый ПолеКомпоновкиДанных("НДФЛ");
	
	// Только просмотр
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НДФЛ.СтрокаИтогов");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НДФЛ.ПредыдущиеРасчеты");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ПолеОформление = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле = Новый ПолеКомпоновкиДанных("НДФЛ");
	
	// Представление периода
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("НДФЛ.ПредставлениеПериода"));
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НДФЛ.СтрокаИтогов");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ПолеОформление = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле = Новый ПолеКомпоновкиДанных("НДФЛМесяцНалоговогоПериода");
	
	// Цвет текста
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НДФЛ.ОтличаетсяПериод");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ПолеОформление = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле = Новый ПолеКомпоновкиДанных("НДФЛ");
	
	// Шрифт
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Метаданные.ЭлементыСтиля.ШрифтНаклонный.Значение);
	
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НДФЛ.СтрокаИтогов");
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НДФЛ.ПредыдущиеРасчеты");
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ПолеОформление = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле = Новый ПолеКомпоновкиДанных("НДФЛВычеты");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСтрок()
	
	Отбор = ?(Элементы.Подробно.Пометка, Неопределено, Новый ФиксированнаяСтруктура("Подробно", Ложь));
	Элементы.НДФЛ.ОтборСтрок = Отбор;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонокПрогрессивногоНалога(ДатаПолученияДохода)
	
	ВидимостьКолонок = ДатаПолученияДохода >= УчетНДФЛ.ДатаЗакона176ФЗ();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКолонокНалогПоПрогрессивнымСтавкам",
																"Видимость", ВидимостьКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НДФЛНалогСПревышения",
																"Видимость", НЕ ВидимостьКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКолонокЗачтеноАвансовВСчетСуммПоПрогрессивнымСтавкам",
																"Видимость", ВидимостьКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НДФЛЗачтеноАвансовыхПлатежейСПревышения",
																"Видимость", НЕ ВидимостьКолонок);
	
КонецПроцедуры

&НаСервере
Функция ДанныеВычетов(ИдентификаторСтроки)
	
	НалоговыеВычеты = ВычетыКДоходам.Выгрузить(, "ИдентификаторСтроки,КодВычета,СуммаВычета,Начисление,МесяцПериодаПредоставленияВычета,НалоговаяБаза");
	НалоговыеВычеты.Очистить();
	
	СтрокаНДФЛ = НДФЛ.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(СтрокаНДФЛ.ПримененныйВычетЛичныйКодВычета) Тогда 
		НоваяСтрока = НалоговыеВычеты.Добавить();
	    НоваяСтрока.КодВычета = СтрокаНДФЛ.ПримененныйВычетЛичныйКодВычета;
	    НоваяСтрока.СуммаВычета = СтрокаНДФЛ.ПримененныйВычетЛичный;
		НоваяСтрока.НалоговаяБаза = СтрокаНДФЛ.ПримененныйВычетЛичныйНалоговаяБаза;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета) Тогда 
		НоваяСтрока = НалоговыеВычеты.Добавить();
	    НоваяСтрока.КодВычета = СтрокаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета;
	    НоваяСтрока.СуммаВычета = СтрокаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату;
		НоваяСтрока.НалоговаяБаза = СтрокаНДФЛ.ПримененныйВычетЛичныйНалоговаяБаза;
	КонецЕсли;
	
	Отбор = Новый Структура("ИдентификаторСтрокиНДФЛ", СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ);
	ВычетыНаДетейИИмущественные = ПримененныеВычетыНаДетейИИмущественные.НайтиСтроки(Отбор);
	Для Каждого СтрокаВычетов Из ВычетыНаДетейИИмущественные Цикл 
		НоваяСтрока = НалоговыеВычеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаВычетов);
	    НоваяСтрока.СуммаВычета = СтрокаВычетов.РазмерВычета;
	КонецЦикла;
	
	Отбор = Новый Структура("Подразделение", СтрокаНДФЛ.Подразделение);
	НайденныеВычетыКДоходам = ВычетыКДоходам.НайтиСтроки(Отбор);
	Для Каждого СтрокаВычетов Из НайденныеВычетыКДоходам Цикл
		ЗаполнитьЗначенияСвойств(НалоговыеВычеты.Добавить(), СтрокаВычетов);
	КонецЦикла;
		
	Возврат ПоместитьВоВременноеХранилище(НалоговыеВычеты, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеВычетов(АдресДанныхВычетовВХранилище)
	
	ДанныеВычетов = ПолучитьИзВременногоХранилища(АдресДанныхВычетовВХранилище);
	
	КодыВычетов = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеВычетов, "КодВычета", Истина);
	ГруппыВычетов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(КодыВычетов, "ГруппаВычета");
	
	ЛичныеВычеты = Новый Массив;
	ВычетыНаДетейИИмущественные = Новый Массив;
	НалоговыеВычетыКДоходам = Новый Массив;
	
	Для Каждого СтрокаВычетов Из ДанныеВычетов Цикл
		Если ЗначениеЗаполнено(СтрокаВычетов.Начисление) Тогда 
			НалоговыеВычетыКДоходам.Добавить(СтрокаВычетов);
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаВычетов.КодВычета) Или Не ЗначениеЗаполнено(СтрокаВычетов.СуммаВычета) Тогда 
			Продолжить;
		КонецЕсли;
		ГруппаВычета = ГруппыВычетов[СтрокаВычетов.КодВычета];
		Если ГруппаВычета = Перечисления.ГруппыВычетовПоНДФЛ.Стандартные Тогда 
			ЛичныеВычеты.Добавить(СтрокаВычетов);
		Иначе 
			ВычетыНаДетейИИмущественные.Добавить(СтрокаВычетов);
		КонецЕсли;
	КонецЦикла;
	
	ТекущаяСтрока = Элементы.НДФЛ.ТекущаяСтрока;
	СтрокаНДФЛ = НДФЛ.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ЛичныеВычеты.Количество() = 0 Тогда 
	    СтрокаНДФЛ.ПримененныйВычетЛичныйКодВычета = Неопределено;
	    СтрокаНДФЛ.ПримененныйВычетЛичный = 0;
	    СтрокаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета = Неопределено;
	    СтрокаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату = 0;
	    СтрокаНДФЛ.ПримененныйВычетЛичныйНалоговаяБаза = Перечисления.КатегорииДоходовНДФЛ.ПустаяСсылка();
	ИначеЕсли ЛичныеВычеты.Количество() = 1 Тогда
	    СтрокаНДФЛ.ПримененныйВычетЛичныйКодВычета = ЛичныеВычеты[0].КодВычета;
	    СтрокаНДФЛ.ПримененныйВычетЛичный = ЛичныеВычеты[0].СуммаВычета;
	    СтрокаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета = Неопределено;
	    СтрокаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату = 0;
	    СтрокаНДФЛ.ПримененныйВычетЛичныйНалоговаяБаза = ЛичныеВычеты[0].НалоговаяБаза;
	Иначе 
	    СтрокаНДФЛ.ПримененныйВычетЛичныйКодВычета = ЛичныеВычеты[0].КодВычета;
	    СтрокаНДФЛ.ПримененныйВычетЛичный = ЛичныеВычеты[0].СуммаВычета;
	    СтрокаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета = ЛичныеВычеты[1].КодВычета;
	    СтрокаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату = ЛичныеВычеты[1].СуммаВычета;
	    СтрокаНДФЛ.ПримененныйВычетЛичныйНалоговаяБаза = ЛичныеВычеты[0].НалоговаяБаза;
	КонецЕсли;
	
	СтрокаНДФЛ.Вычеты = СтрокаНДФЛ.ПримененныйВычетЛичный + СтрокаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату;
	
	Для Каждого СтрокаВычетов Из НалоговыеВычетыКДоходам Цикл
		Отбор = Новый Структура("ИдентификаторСтроки", СтрокаВычетов.ИдентификаторСтроки);
		НайденныеВычетыКДоходам = ВычетыКДоходам.НайтиСтроки(Отбор);
		НайденныеВычетыКДоходам[0].КодВычета = СтрокаВычетов.КодВычета;
		НайденныеВычетыКДоходам[0].СуммаВычета = СтрокаВычетов.СуммаВычета;
		СтрокаНДФЛ.Вычеты = СтрокаНДФЛ.Вычеты + СтрокаВычетов.СуммаВычета;
	КонецЦикла;
	
	УдалитьПримененныеВычетыНаДетейИИмущественные(ЭтаФорма, СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ);
	
	Для Каждого СтрокаВычетов Из ВычетыНаДетейИИмущественные Цикл 
		НоваяСтрока = ПримененныеВычетыНаДетейИИмущественные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаВычетов);
	    НоваяСтрока.ИдентификаторСтрокиНДФЛ = СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ;
		НоваяСтрока.РазмерВычета = СтрокаВычетов.СуммаВычета;
		СтрокаНДФЛ.Вычеты = СтрокаНДФЛ.Вычеты + СтрокаВычетов.СуммаВычета;
	КонецЦикла;
	
	ЗаполнитьИтогиНДФЛ();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтогиНДФЛ()
	
	Налог = 0;
	НалогСПревышения = 0;
	Вычеты = 0;
	ИменаНалоговыхРесурсов = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("Налог", Истина);
	Для Каждого СтрокаНДФЛ Из НДФЛ Цикл 
		Если СтрокаНДФЛ.ПредыдущиеРасчеты Или СтрокаНДФЛ.СтрокаИтогов Тогда 
			Продолжить;
		КонецЕсли;
		Налог = Налог + СтрокаНДФЛ.Налог;
		Для каждого ИмяРесурса Из ИменаНалоговыхРесурсов Цикл
			НалогСПревышения = НалогСПревышения + СтрокаНДФЛ[ИмяРесурса];
		КонецЦикла;
		Вычеты = Вычеты + СтрокаНДФЛ.Вычеты;
	КонецЦикла;
	
	НДФЛ[0].Вычеты = Вычеты;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьПримененныеВычетыНаДетейИИмущественные(Форма, ИдентификаторСтрокиНДФЛ)
	
	Отбор = Новый Структура("ИдентификаторСтрокиНДФЛ", ИдентификаторСтрокиНДФЛ);
	НайденныеВычетыНаДетейИИмущественные = Форма.ПримененныеВычетыНаДетейИИмущественные.НайтиСтроки(Отбор);
	Для Каждого СтрокаВычетов Из НайденныеВычетыНаДетейИИмущественные Цикл
		Форма.ПримененныеВычетыНаДетейИИмущественные.Удалить(СтрокаВычетов);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДляРаспределенияРезультата()

	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНДФЛ()
	                          
	ПоляОписания = Новый Структура;
	ПоляОписания.Вставить("ИмяПоляДляВставкиРаспределенияРезультатов", "НДФЛРегистрацияВНалоговомОргане");
	ПоляОписания.Вставить("ОтменятьВсеИсправления", Ложь);
	
	Описание = УчетНДФЛКлиентСервер.ФормаПодробнееОРасчетеНДФЛОписаниеТаблицыНДФЛ();
	ЗаполнитьЗначенияСвойств(Описание, ПоляОписания);
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	КонтролируемыеПоля = УчетНДФЛФормы.ФормаПодробнееОРасчетеНДФЛКонтролируемыеПоляДляФиксацииРезультатов();
	Возврат КонтролируемыеПоля;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей() Экспорт
	
	Возврат СтарыеЗначенияКонтролируемыхПолей;
	
КонецФункции

#КонецОбласти

#Область Инициализация

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;

#КонецОбласти
