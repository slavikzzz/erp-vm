#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеСписка();
	
	СтруктураПараметровОтбора = Новый Структура();
	ЗарплатаКадры.ДобавитьПараметрОтбора(СтруктураПараметровОтбора, "ФизическоеЛицо",
			Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"), НСтр("ru = 'Сотрудник';
																		|en = 'Сотрудник'"));
			
	ЗарплатаКадры.ДобавитьПараметрОтбора(СтруктураПараметровОтбора, "ТипЗаявки",
		Новый ОписаниеТипов(), НСтр("ru = 'Тип заявки';
									|en = 'Тип заявки'"));
		
	ЗарплатаКадры.ПриСозданииНаСервереФормыСДинамическимСписком(ЭтотОбъект, "Список",,
			СтруктураПараметровОтбора, "СписокКритерииОтбора");
			
	НайденныеПараметры = ЭтотОбъект.ПараметрыКритерияОтбора.НайтиСтроки(Новый Структура("ИмяПараметра", "ТипЗаявки"));
	Если НайденныеПараметры.Количество() > 0 Тогда
		Элемент = Элементы.Найти(НайденныеПараметры[0].ИмяЭлементаФормыПараметра);
		Если Элемент <> Неопределено Тогда
			
			Элемент.РежимВыбораИзСписка = Истина;
			Элемент.ВыбиратьТип = Ложь;
			Элемент.СписокВыбора.Очистить();
			ТипЗаявкиМенеджер = Перечисления.ТипыЗаявокКабинетСотрудника;
			
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.Отпуск, 					Строка(ТипЗаявкиМенеджер.Отпуск));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.ОтпускБезОплаты, 			Строка(ТипЗаявкиМенеджер.ОтпускБезОплаты));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.УчебныйОтпуск, 				Строка(ТипЗаявкиМенеджер.УчебныйОтпуск));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.КомпенсацияОтпуска, 		Строка(ТипЗаявкиМенеджер.КомпенсацияОтпуска));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.ЗаявлениеНаНалоговыеВычеты, Строка(ТипЗаявкиМенеджер.ЗаявлениеНаНалоговыеВычеты));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.СправкаНДФЛ, 				Строка(ТипЗаявкиМенеджер.СправкаНДФЛ));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.Болезнь, 					Строка(ТипЗаявкиМенеджер.Болезнь));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.ОтпускПоБеременностиИРодам, Строка(ТипЗаявкиМенеджер.ОтпускПоБеременностиИРодам));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.ИзменениеЛичныхДанных, 		Строка(ТипЗаявкиМенеджер.ИзменениеЛичныхДанных));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.ОбращениеСотрудника, 		Строка(ТипЗаявкиМенеджер.ОбращениеСотрудника));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.ЗаявлениеНаУдержаниеДСВ, 	Строка(ТипЗаявкиМенеджер.ЗаявлениеНаУдержаниеДСВ));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.СправкаСМестаРаботы, 		Строка(ТипЗаявкиМенеджер.СправкаСМестаРаботы));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.СправкаОбОстаткеОтпуска, 	Строка(ТипЗаявкиМенеджер.СправкаОбОстаткеОтпуска));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.ОпозданиеЛичныеДела, 		Строка(ТипЗаявкиМенеджер.ОпозданиеЛичныеДела));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.ОтпускПоУходуЗаРебенком, 	Строка(ТипЗаявкиМенеджер.ОтпускПоУходуЗаРебенком));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.Отгул, 						Строка(ТипЗаявкиМенеджер.Отгул));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.Командировка, 				Строка(ТипЗаявкиМенеджер.Командировка));
			Элемент.СписокВыбора.Добавить(ТипЗаявкиМенеджер.ДниУходаЗаДетьмиИнвалидами, Строка(ТипЗаявкиМенеджер.ДниУходаЗаДетьмиИнвалидами));
			
		КонецЕсли;
	КонецЕсли;

	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("ПоказыватьВыполненные", ПоказыватьВыполненные);
	УстановитьОтбор(ПараметрыОтбора);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаявкаКабинетСотрудника" Или ИмяСобытия = "Запись_ЗадачаИсполнителя" Тогда
		ОбновитьСписокНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьВыполненныеПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("ПоказыватьВыполненные", ПоказыватьВыполненные);
	УстановитьОтбор(ПараметрыОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки, ИспользуютсяСтандартныеНастройки)

	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПараметрОтбораПриИзменении(Элемент)
	
	ОписаниеИзменения = ЗарплатаКадрыКлиент.ОписаниеИзмененияПараметраОтбораДинамическогоСписка(ЭтотОбъект, Элемент.Имя);
	ЗарплатаКадрыКлиент.УстановитьПараметрДинамическогоСпискаПоОписаниюИзменения(ЭтотОбъект, ОписаниеИзменения);
	
	Если СтрНачинаетсяС(Элемент.Имя, "ТипЗаявки_") Тогда
		
		НайденныеПараметры = ЭтотОбъект.ПараметрыКритерияОтбора.НайтиСтроки(Новый Структура("ИмяПараметра", "ТипЗаявки"));
		Если НайденныеПараметры.Количество() > 0 Тогда
			
			Использование = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
				ЭтотОбъект, НайденныеПараметры[0].ИмяРеквизитаФормыПараметраИспользование);
			
			ТипЗаявки = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, НайденныеПараметры[0].ИмяРеквизитаФормыПараметра);
			Если ТипЗаявки = Неопределено Тогда
				ТипЗаявки = ПредопределенноеЗначение("Перечисление.ТипыЗаявокКабинетСотрудника.ПустаяСсылка");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТипЗаявкиПараметр", ТипЗаявки, Использование);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка()
	
	УсловноеОформлениеКД = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	ДатаАктуальности = КонецДня(ТекущаяДатаСеанса());
	
	// Удаление предустановленных элементов оформления.
	Предустановленные = Новый Массив;
	ЭлементыУсловногоОформления = УсловноеОформлениеКД.Элементы;
	Для каждого ЭлементУсловногоОформления Из ЭлементыУсловногоОформления Цикл
		Если ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Предустановленные.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементУсловногоОформления Из Предустановленные Цикл
		ЭлементыУсловногоОформления.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	// Установка оформления для просроченных заявок.
	ЭлементОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("РезультатВыполнения");
	ЭлементОтбораДанных.ВидСравнения 	= ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение 	= Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована;
	ЭлементОтбораДанных.Использование 	= Истина;
	
	ЭлементОтбораДанных = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование 	= Истина;
	
	ЭлементОтбораДанных = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение 	= ДатаАктуальности;
	ЭлементОтбораДанных.Использование 	= Истина;
	
	ЭлементОтбораДанных = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение 	= Ложь;
	ЭлементОтбораДанных.Использование 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Установка оформления отмененных заявок.
	ЭлементОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("РезультатВыполнения");
	ЭлементОтбораДанных.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение 	= Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована;;
	ЭлементОтбораДанных.Использование 	= Истина;
	
	ТекущийШрифт = Элементы.Список.Шрифт;
	ЗачеркнутыйШрифт = Новый Шрифт(ТекущийШрифт,,,,,,Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЗачеркнутыйШрифт);
	
	// Установка оформления для выполненных заявок.
	ЭлементОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение 	= Истина;
	ЭлементОтбораДанных.Использование 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор(ПараметрыОтбора)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Выполнена", Ложь, , , Не ПараметрыОтбора["ПоказыватьВыполненные"]);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "РезультатВыполнения", "Видимость", ПараметрыОтбора["ПоказыватьВыполненные"]);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере()

	Элементы.Список.Обновить();

КонецПроцедуры

&НаСервере
Процедура НастроитьДинамическийСписокНаСервере(ОписаниеМодификации) Экспорт
	ЗарплатаКадрыРасширенный.НастроитьДинамическийСписокПоОписаниюМодификации(ЭтаФорма, ОписаниеМодификации);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПараметрМодификацииВыбор(Элемент, ИмяПараметра, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ПараметрМодификацииОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент.Родитель.Имя, ИмяПараметра);
	
КонецПроцедуры

#КонецОбласти
