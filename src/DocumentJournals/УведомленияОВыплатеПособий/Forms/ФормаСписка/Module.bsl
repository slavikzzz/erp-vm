#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗарплатаКадры.ПриСозданииНаСервереФормыСДинамическимСписком(ЭтотОбъект, "Список");
	
	ОбщегоНазначенияБЗК.НастроитьОформлениеПоляДата(ЭтотОбъект, Элементы.Дата);
	ОбщегоНазначенияБЗК.НастроитьОформлениеПоляДата(ЭтотОбъект, Элементы.ДатаСообщения);
	
	ОформлениеКД = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "Тип");
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ОформлениеКД, "Тип", "=", Тип("ДокументСсылка.УведомлениеОСтатусеВыплатыПособия"));
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ОформлениеКД, "Текст", НСтр("ru = 'Уведомление о статусе';
																							|en = 'Уведомление о статусе'"));
	
	ОформлениеКД = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "Тип");
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ОформлениеКД, "Тип", "=", Тип("ДокументСсылка.УведомлениеОбИзмененииРасчетаПособия"));
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ОформлениеКД, "Текст", НСтр("ru = 'Уведомление об изменении расчета';
																							|en = 'Уведомление об изменении расчета'"));
	
	ОформлениеКД = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "Тип");
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ОформлениеКД, "Тип", "=", Тип("ДокументСсылка.ЗапросСтатусовВыплатыПособия"));
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ОформлениеКД, "Текст", НСтр("ru = 'Запрос статусов';
																							|en = 'Запрос статусов'"));
	
	ОформлениеКД = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "Тип");
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ОформлениеКД, "Тип", "=", Тип("ДокументСсылка.СтатусыВыплатыПособия"));
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ОформлениеКД, "Текст", НСтр("ru = 'Статусы пособия';
																							|en = 'Статусы пособия'"));
	
	ОформлениеКД = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "ОсталосьДней");
	ЗапросыБЗК.ДобавитьОтбор(ОформлениеКД.Отбор, "ОсталосьДней", "<=", 2);
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ОформлениеКД, "ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	ЗаполнитьСписокТиповДокументов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервереФормыСписка(ЭтотОбъект, "Список");
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗагрузитьСпискиВыбораНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеОтправкиПодтвержденияПолучения() Тогда
		ОтключитьОбработчикОжидания("ОбновитьСписок");
		ПодключитьОбработчикОжидания("ОбновитьСписок", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, Настройки);
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, , СтандартнаяОбработка);
	ПараметрыЭлементовПользовательскихНастроек();
КонецПроцедуры

&НаСервере
Процедура СписокПриСохраненииПользовательскихНастроекНаСервере(Элемент, Настройки)
	// Исключение повторного вызова при изменении типа документа
	Если ИзменениеТипа Тогда
		ИзменениеТипа = Ложь;
	Иначе
		ЗагрузитьСпискиВыбораНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЗапросСтатусовВыплатыПособия(Команда)
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения");
	ОтборСтрахователь = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, "Страхователь");
	Если ОтборСтрахователь.Количество() = 1 Тогда
		ЭлементОтбора = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			ОтборСтрахователь[0].ИдентификаторПользовательскойНастройки);
		Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			И ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение)Тогда
				ПараметрыФормы.ЗначенияЗаполнения = Новый Структура("Страхователь", ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму("Документ.ЗапросСтатусовВыплатыПособия.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОбновитьСписок()
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииНастроекОтбора(Элемент)
	ИзменениеТипа = Истина;
	ЗагрузитьСписокВыбораВида();
КонецПроцедуры

&НаСервере
Процедура ПараметрыЭлементовПользовательскихНастроек();
	
	ИменаПараметров = "Использование,ВидСравненияЭлементаОтбора,Значение,ДанныеИспользование,ДанныеЗначение,Заголовок";
	
	СоответствиеПолей = Новый Соответствие();
	СтруктураПараметров = Новый Структура(ИменаПараметров);
	СтруктураПараметров.Заголовок = "Тип документа";
	СоответствиеПолей.Вставить("Тип", СтруктураПараметров);
	
	СтруктураПараметров = Новый Структура(ИменаПараметров);
	СтруктураПараметров.Заголовок = "Вид";
	СоответствиеПолей.Вставить("Вид", СтруктураПараметров);
	
	ПолучитьИменаЭлементовРекурсивно(Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.ПодчиненныеЭлементы, СоответствиеПолей);
	ПараметрыПолей = ОбщегоНазначения.ФиксированныеДанные(СоответствиеПолей);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокТиповДокументов()
	Для Каждого РегистрируемыйДокумент Из Метаданные.ЖурналыДокументов.УведомленияОВыплатеПособий.РегистрируемыеДокументы Цикл
		СписокТиповДокументов.Добавить(Тип("ДокументСсылка." + РегистрируемыйДокумент.Имя), РегистрируемыйДокумент.Синоним);
	КонецЦикла;
	СписокТиповДокументов.СортироватьПоПредставлению();
КонецФункции

&НаСервере
Процедура ПолучитьИменаЭлементовРекурсивно(ГруппаФормы, СоответствиеПолей)
		
	Для Каждого ЭлементГруппы Из ГруппаФормы Цикл
		Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы") Тогда
			ПолучитьИменаЭлементовРекурсивно(ЭлементГруппы.ПодчиненныеЭлементы, СоответствиеПолей);
		ИначеЕсли ТипЗнч(ЭлементГруппы) = Тип("ПолеФормы") Тогда
			Для Каждого ПараметрПоля Из СоответствиеПолей Цикл
				Если ЭлементГруппы.Заголовок = ПараметрПоля.Значение.Заголовок Тогда
					Если ЭлементГруппы.Заголовок = СоответствиеПолей["Тип"].Заголовок Тогда
						ЭлементГруппы.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииНастроекОтбора");
					КонецЕсли;
					Если СтрЗаканчиваетсяНа(ЭлементГруппы.Имя, "Использование") Тогда
						ПараметрПоля.Значение.Использование = ЭлементГруппы.Имя;
					ИначеЕсли СтрЗаканчиваетсяНа(ЭлементГруппы.Имя, "ВидСравненияЭлементаОтбора") Тогда
						ПараметрПоля.Значение.ВидСравненияЭлементаОтбора = ЭлементГруппы.Имя;
					ИначеЕсли СтрЗаканчиваетсяНа(ЭлементГруппы.Имя, "Значение") Тогда
						ПараметрПоля.Значение.Значение = ЭлементГруппы.Имя;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСписокВидов(ТипДокументаИспользование, ТипДокументаЗначение, ТипДокументаВидСравнения)
	
	СписокВидов = Новый СписокЗначений;
	Включает = ТипДокументаВидСравнения = ВидСравненияКомпоновкиДанных.Равно Или ТипДокументаВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
		Или ТипДокументаВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	Если ТипЗнч(ТипДокументаЗначение) = Тип("СписокЗначений") Тогда
		ЭтоУведомлениеОбИзменении = ТипДокументаЗначение.НайтиПоЗначению(Тип("ДокументСсылка.УведомлениеОбИзмененииРасчетаПособия"))<> Неопределено;
		ЭтоИзвещениеФСС = ТипДокументаЗначение.НайтиПоЗначению(Тип("ДокументСсылка.ИзвещениеФСС"))<> Неопределено;
		ЭтоСтатусВыплаты = ТипДокументаЗначение.НайтиПоЗначению(Тип("ДокументСсылка.СтатусыВыплатыПособия")) <> Неопределено;
		ЭтоУведомлениеОСтатусе = ТипДокументаЗначение.НайтиПоЗначению(Тип("ДокументСсылка.УведомлениеОСтатусеВыплатыПособия")) <> Неопределено;
	Иначе
		ЭтоУведомлениеОбИзменении = ТипДокументаЗначение = Тип("ДокументСсылка.УведомлениеОбИзмененииРасчетаПособия");
		ЭтоИзвещениеФСС = ТипДокументаЗначение = Тип("ДокументСсылка.ИзвещениеФСС");
		ЭтоСтатусВыплаты = ТипДокументаЗначение = Тип("ДокументСсылка.СтатусыВыплатыПособия");
		ЭтоУведомлениеОСтатусе = ТипДокументаЗначение = Тип("ДокументСсылка.УведомлениеОСтатусеВыплатыПособия");
	КонецЕсли;
	
	Если Не ТипДокументаИспользование Или (Включает И ЭтоИзвещениеФСС) Или (Не Включает И Не ЭтоИзвещениеФСС) Тогда
		Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыИзвещенийФСС.ЗначенияПеречисления Цикл
			СписокВидов.Добавить(Перечисления.ВидыИзвещенийФСС[ЗначениеПеречисления.Имя], ЗначениеПеречисления.Синоним);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ТипДокументаИспользование Или (Включает И ЭтоУведомлениеОбИзменении) Или (Не Включает И Не ЭтоУведомлениеОбИзменении) Тогда
		Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыУведомленийОбИзмененииРасчетаПособия.ЗначенияПеречисления Цикл
			СписокВидов.Добавить(Перечисления.ВидыУведомленийОбИзмененииРасчетаПособия[ЗначениеПеречисления.Имя], ЗначениеПеречисления.Синоним);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ТипДокументаИспользование Или (Включает И (ЭтоСтатусВыплаты Или ЭтоУведомлениеОСтатусе))
		Или (Не Включает И (Не ЭтоСтатусВыплаты Или Не ЭтоУведомлениеОСтатусе)) Тогда
		Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.СтатусыВыплатыПособия.ЗначенияПеречисления Цикл
			СписокВидов.Добавить(Перечисления.СтатусыВыплатыПособия[ЗначениеПеречисления.Имя], ЗначениеПеречисления.Синоним);
		КонецЦикла;
	КонецЕсли;
	
	СписокВидов.СортироватьПоПредставлению();
	
	Возврат СписокВидов.ВыгрузитьЗначения();
	
КонецФункции

&НаСервере
Процедура ЗагрузитьСпискиВыбораНаСервере()
	ЗагрузитьСписокВыбораВида();
	ЗагрузитьСписокВыбораТипа();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокВыбораВида()
	ЭлементФормы = Элементы.Найти(ПараметрыПолей["Вид"].Значение);
	Если ЭлементФормы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ЭлементФормы.РежимВыбораИзСписка = Истина;
	ЭлементФормы.КнопкаВыбора = Ложь;
	
	НастройкиОтборов = Новый Структура("Тип,Вид");
	ПолучитьНастройки(Список.КомпоновщикНастроек, НастройкиОтборов);
	ТипДокументаИспользование = НастройкиОтборов.Тип.Использование;
	ТипДокументаЗначение = НастройкиОтборов.Тип.ПравоеЗначение;
	ТипДокументаВидСравнения = НастройкиОтборов.Тип.ВидСравнения;
	
	ЭлементФормы.СписокВыбора.ЗагрузитьЗначения(ЗаполнитьСписокВидов(ТипДокументаИспользование, ТипДокументаЗначение, ТипДокументаВидСравнения));
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокВыбораТипа()
	ЭлементФормы = Элементы.Найти(ПараметрыПолей["Тип"].Значение);
	Если ЭлементФормы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ЭлементФормы.РежимВыбораИзСписка = Истина;
	ЭлементФормы.СписокВыбора.ЗагрузитьЗначения(СписокТиповДокументов.ВыгрузитьЗначения());
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьНастройки(КомпоновщикНастроек, НастройкиОтборов)
	НастройкиКомпановки = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	МассивЭлементов = Новый Массив;
	Для Каждого СтруктураОтбора Из НастройкиОтборов Цикл
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(СтруктураОтбора.Ключ);
		НайтиРекурсивно(НастройкиКомпановки, МассивЭлементов, ЗначениеПоиска);
		Если МассивЭлементов.Количество() > 0 Тогда
			Идентификатор = МассивЭлементов[0].ИдентификаторПользовательскойНастройки;
			ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
			НастройкиОтборов[СтруктураОтбора.Ключ] = ПользовательскиеНастройки.Найти(Идентификатор);
		КонецЕсли;
		МассивЭлементов.Очистить();
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
		Иначе
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, ЗначениеПоиска);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти