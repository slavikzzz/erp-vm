#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	РасчетЗарплатыРасширенный.ПроверитьНаличиеБазовыхВидовРасчета(ЭтотОбъект, Отказ);
	
	Если КатегорияУдержания <> Перечисления.КатегорииУдержаний.УдержаниеЗаНеотработанныеДниОтпуска
		Или КатегорияУдержания <> Перечисления.КатегорииУдержаний.ДенежноеСодержаниеУдержаниеЗаНеотработанныеДниОтпуска
		Или КатегорияУдержания <> Перечисления.КатегорииУдержаний.ДенежноеДовольствиеУдержаниеЗаНеотработанныеДниОтпуска Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидОтпуска");
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") 
		Или СтратегияОтраженияВУчете <> Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СтатьяФинансирования");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СтатьяРасходов");
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СтатьяРасходов");
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(ЭтотОбъект);
		
	Если Не Рассчитывается
		Или Не РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(СпособРасчета) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ФормулаРасчета");
	КонецЕсли;
	
	Если ВАрхиве И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка,"ВАрхиве") = Ложь Тогда
		ПроверитьАктуальностьВидаРасчета(Отказ);
	КонецЕсли;
	
	Если КатегорияУдержания = Перечисления.КатегорииУдержаний.ИсполнительныйЛист Тогда
		Начисления = ОбщегоНазначения.ВыгрузитьКолонку(БазовыеВидыРасчета, "ВидРасчета");
		ВидыДохода = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Начисления, "ВидДоходаИсполнительногоПроизводства");
		
		ТекстСообщения = НСтр("ru = 'В расчетную базу удержаний по исполнительным листам 
			|не может входить начисление с видом дохода по исполнительному производству 
			|""Доходы, на которые не может быть обращено взыскание (без оговорок)"".';
			|en = 'The calculation base of deductions on garnishment orders
			|cannot include accrual with the income kind for enforcement proceedings
			| ""Income that cannot be subject to collection (without reservations)"".'");
		
		Для Каждого БазовоеНачисление Из БазовыеВидыРасчета Цикл
			Если ВидыДохода[БазовоеНачисление.ВидРасчета] = ПредопределенноеЗначение("Перечисление.ВидыДоходовИсполнительногоПроизводства.КомпенсацииНеоблагаемые") Тогда
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					Ссылка,
					"Объект.БазовыеВидыРасчета[" + Формат(БазовоеНачисление.НомерСтроки - 1, "ЧГ=0") + "].ВидРасчета",
					,
					Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) И Не ДополнительныеСвойства.Свойство("ИзменениеПланаВидовРасчетаПоНастройкам") Тогда
		Возврат;
	КонецЕсли;		
	
	ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(ЭтотОбъект, Отказ, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиНедоступныеДляУдержаний());
	РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(ЭтотОбъект);
	
	ЗаполнитьОчередностьРасчета();
	УстановитьПризнакЯвляетсяВзысканием();
	
	Если СпособВыполненияУдержания <> Перечисления.СпособыВыполненияУдержаний.ПоОтдельномуДокументуДоОкончательногоРасчета Тогда
		ВидДокументаУдержания = Неопределено;
	КонецЕсли;
	
	УдерживаетсяВЦеломЗаМесяц = УдерживаетсяВЦеломЗаМесяц();
	
	ОтражениеЗарплатыВБухучетеРасширенный.УдержаниеПередЗаписью(ЭтотОбъект);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоказатели.Показатель КАК Показатель,
	|	НачисленияПоказатели.ОпределяющийПоказатель КАК ОпределяющийПоказатель
	|ИЗ
	|	ПланВидовРасчета.Удержания.Показатели КАК НачисленияПоказатели
	|ГДЕ
	|	НачисленияПоказатели.Ссылка = &Ссылка";		
		
	ДополнительныеСвойства.Вставить("ТекущийПоказатели", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) И Не ДополнительныеСвойства.Свойство("ИзменениеПланаВидовРасчетаПоНастройкам") Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ОбщегоНазначения.КоллекцииИдентичны(Показатели, ДополнительныеСвойства.ТекущийПоказатели, "Показатель, ОпределяющийПоказатель") Тогда
		ПланыВидовРасчета.Удержания.ОбновитьОперативныеПоказателиДляВыявленияУдержаний();
	КонецЕсли; 	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьОчередностьРасчета()
	
	ОчередностьРасчета = ПланыВидовРасчета.Удержания.СвойстваУдержанийПоКатегориям()[КатегорияУдержания].ОчередностьРасчета;
	
КонецПроцедуры

// Проверяет наличие текущих плановых удержаний сотрудников, в случае наличия таковых:
// - устанавливает Отказ = Истина;
// - выводит предупреждения пользователю.
Процедура ПроверитьАктуальностьВидаРасчета(Отказ)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА НЕ ПлановыеУдержанияСрезПоследних.Используется
	               |				ТОГДА ЛОЖЬ
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА ПлановыеУдержанияСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ ВЫБОР
	               |							КОГДА ПлановыеУдержанияСрезПоследних.ДействуетДо <= &Дата
	               |								ТОГДА ПлановыеУдержанияСрезПоследних.ИспользуетсяПоОкончании
	               |							ИНАЧЕ ИСТИНА
	               |						КОНЕЦ
	               |				КОНЕЦ
	               |		КОНЕЦ) КАК АктуальнаяЗапись,
	               |	ПлановыеУдержанияСрезПоследних.ФизическоеЛицо КАК Ссылка
	               |ПОМЕСТИТЬ ВТУдержания
	               |ИЗ
	               |	РегистрСведений.ПлановыеУдержания.СрезПоследних(&Дата, Удержание = &Ссылка) КАК ПлановыеУдержанияСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПлановыеУдержанияСрезПоследних.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТУдержания.Ссылка КАК Ссылка,
	               |	ПРЕДСТАВЛЕНИЕ(ВТУдержания.Ссылка) КАК СотрудникНаименование
	               |ИЗ
	               |	ВТУдержания КАК ВТУдержания
	               |ГДЕ
	               |	ВТУдержания.АктуальнаяЗапись";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыводитьСообщениеОбОшибке = Ложь;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
				
		Отказ = Истина;
		
		ТекстСообщения = НСтр("ru = 'Нельзя сделать неиспользуемым удержание,
		| которое связано с действующими плановыми удержаниями сотрудников.';
		|en = 'Cannot make unused a deduction related to
		|valid planned employee deductions.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, , , Отказ);	
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = НСтр("ru = '- плановое удержание сотрудника ""%1""';
									|en = '- planned deduction of the ""%1"" employee '");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Выборка.СотрудникНаименование);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.ВАрхиве" , , Отказ);
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Функция УдерживаетсяВЦеломЗаМесяц()
	Возврат РасчетЗарплатыРасширенный.УдержаниеВыполняетсяВЦеломЗаМесяц(ЭтотОбъект);
КонецФункции

Процедура УстановитьПризнакЯвляетсяВзысканием()
	
	Если КатегорияУдержания = Перечисления.КатегорииУдержаний.ИсполнительныйЛист Тогда 
		ЯвляетсяВзысканием = Истина;
	КонецЕсли;
	
	Если КатегорияУдержания = Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента Тогда 
		ЯвляетсяВзысканием = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли